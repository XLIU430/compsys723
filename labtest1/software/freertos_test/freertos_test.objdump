
freertos_test.elf:     file format elf32-littlenios2
freertos_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00018474 memsz 0x00018474 flags r-x
    LOAD off    0x0001a000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x0001a000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00002738 memsz 0x0007fc68 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01000000  01000000  0001a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001824c  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008fc  08000000  08000000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e3c  080008fc  080008fc  0001a8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007d7ab  08002738  08002738  0001c738  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  0001c738  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f28  00000000  00000000  0001c788  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000274f  00000000  00000000  0001d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00032b8d  00000000  00000000  0001fdff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009e78  00000000  00000000  0005298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c47d  00000000  00000000  0005c804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003108  00000000  00000000  00078c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d0e  00000000  00000000  0007bd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e49d  00000000  00000000  0007ea9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0008cf38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000950  00000000  00000000  0008cf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000932c6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000932c9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000932ce  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000932cf  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000932d0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000932d4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000932d8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000932dc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000932e5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000932ee  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000932f7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000932fc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
080008fc l    d  .rwdata	00000000 .rwdata
08002738 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000028c l       .text	00000000 alt_after_alt_main
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 croutine.c
0800273c l     O .bss	00000004 uxTopCoRoutineReadyPriority
08002740 l     O .bss	00000004 xCoRoutineTickCount
08002744 l     O .bss	00000004 xLastTickCount
08002748 l     O .bss	00000004 xPassedTicks
00000780 l     F .text	0000009c prvInitialiseCoRoutineLists
080027e4 l     O .bss	00000028 pxReadyCoRoutineLists
08002750 l     O .bss	00000004 pxOverflowDelayedCoRoutineList
0800274c l     O .bss	00000004 pxDelayedCoRoutineList
00000470 l     F .text	000000d4 prvCheckPendingReadyList
08002834 l     O .bss	00000014 xPendingReadyCoRoutineList
00000544 l     F .text	00000150 prvCheckDelayedList
0800280c l     O .bss	00000014 xDelayedCoRoutineList1
08002820 l     O .bss	00000014 xDelayedCoRoutineList2
00000000 l    df *ABS*	00000000 event_groups.c
00000f44 l     F .text	00000078 prvTestWaitCondition
00000000 l    df *ABS*	00000000 heap.c
080026c0 l     O .rwdata	00000002 heapSTRUCT_SIZE
080026c4 l     O .rwdata	00000004 xTotalHeapSize
08002754 l     O .bss	00000004 pxEnd
080026c8 l     O .rwdata	00000004 xFreeBytesRemaining
0000120c l     F .text	000000c0 prvHeapInit
08002758 l     O .bss	00000008 xStart
000012cc l     F .text	00000138 prvInsertBlockIntoFreeList
08002848 l     O .bss	0007d000 xHeap
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
000016cc l     F .text	00000028 prvReadGp
00001830 l     F .text	00000098 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 queue.c
0000270c l     F .text	00000194 prvCopyDataToQueue
00002ac4 l     F .text	00000058 prvIsQueueFull
0000293c l     F .text	000000f0 prvUnlockQueue
000028a0 l     F .text	0000009c prvCopyDataFromQueue
00002a2c l     F .text	00000054 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
08002764 l     O .bss	00000004 uxTasksDeleted
08002768 l     O .bss	00000004 uxCurrentNumberOfTasks
0800276c l     O .bss	00000004 xTickCount
08002770 l     O .bss	00000004 uxTopReadyPriority
08002774 l     O .bss	00000004 xSchedulerRunning
08002778 l     O .bss	00000004 uxPendedTicks
0800277c l     O .bss	00000004 xYieldPending
08002780 l     O .bss	00000004 xNumOfOverflows
08002784 l     O .bss	00000004 uxTaskNumber
080026cc l     O .rwdata	00000004 xNextTaskUnblockTime
08002788 l     O .bss	00000004 uxSchedulerSuspended
00003c10 l     F .text	000000d8 prvAllocateTCBAndStack
00003910 l     F .text	0000013c prvInitialiseTCBVariables
00003a4c l     F .text	000000a8 prvInitialiseTaskLists
0807f848 l     O .bss	000000f0 pxReadyTasksLists
0807f974 l     O .bss	00000014 xTasksWaitingTermination
00003dfc l     F .text	00000070 prvResetNextTaskUnblockTime
00003b98 l     F .text	00000078 prvAddCurrentTaskToDelayedList
000038f4 l     F .text	0000001c prvIdleTask
0807f960 l     O .bss	00000014 xPendingReadyList
0800278c l     O .bss	00000004 pxDelayedTaskList
08002790 l     O .bss	00000004 pxOverflowDelayedTaskList
08000039 l     O .rodata	00000014 ucExpectedStackBytes.2768
00003af4 l     F .text	000000a4 prvCheckTasksWaitingTermination
0807f938 l     O .bss	00000014 xDelayedTaskList1
0807f94c l     O .bss	00000014 xDelayedTaskList2
00003dc0 l     F .text	0000003c prvDeleteTCB
00003ce8 l     F .text	00000068 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
08002794 l     O .bss	00000004 xTimerQueue
00005044 l     F .text	0000007c prvCheckForValidListAndQueue
00004b50 l     F .text	00000034 prvTimerTask
00004aa4 l     F .text	000000ac prvProcessExpiredTimer
0800279c l     O .bss	00000004 pxCurrentTimerList
00004ce8 l     F .text	000000cc prvInsertTimerInActiveList
00004c24 l     F .text	00000060 prvGetNextExpireTime
00004b84 l     F .text	000000a0 prvProcessTimerOrBlockTask
00004db4 l     F .text	0000018c prvProcessReceivedCommands
00004c84 l     F .text	00000064 prvSampleTimeNow
08002798 l     O .bss	00000004 xLastTime.2546
00004f40 l     F .text	00000104 prvSwitchTimerLists
080027a0 l     O .bss	00000004 pxOverflowTimerList
0807f988 l     O .bss	00000014 xActiveTimerList1
0807f99c l     O .bss	00000014 xActiveTimerList2
00000000 l    df *ABS*	00000000 FreeRTOS_freq_plot.c
080027a8 l     O .bss	00000004 Q_freq_data
00000000 l    df *ABS*	00000000 dp-bit.c
00005f0c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000076f4 l     F .text	00000058 __sprint_r
08000406 l     O .rodata	00000010 blanks.3452
080003f6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00009758 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000b154 l     F .text	00000058 std
0000b260 l     F .text	00000008 __fp_lock
0000b268 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08000914 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
080026f4 l     O .rwdata	00000004 charset
0800043c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08000584 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000f9a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0000fbf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000fc50 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000fd50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000fe70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ffc0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000101ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800271c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00010488 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080012d0 l     O .rwdata	000000d8 flash_controller
080013a8 l     O .rwdata	00001060 jtag_uart
08002408 l     O .rwdata	00000120 character_lcd
08002528 l     O .rwdata	000000c4 uart
080025ec l     O .rwdata	00000038 ps2
08002624 l     O .rwdata	00000048 video_character_buffer_with_dma
0800266c l     O .rwdata	00000054 video_pixel_buffer_dma
00010888 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
0001095c l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
0001175c l     F .text	0000007c alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012840 l     F .text	0000022c altera_avalon_jtag_uart_irq
00012a6c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
08002720 l     O .rwdata	00000004 colstart
000130e8 l     F .text	000000b8 lcd_write_command
000131a0 l     F .text	000000d4 lcd_write_data
00013274 l     F .text	000000c4 lcd_clear_screen
00013338 l     F .text	000001ec lcd_repaint_screen
00013524 l     F .text	000000c8 lcd_scroll_up
000135ec l     F .text	000002d0 lcd_handle_escape
00013dc0 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014020 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000142d4 l     F .text	000000a0 altera_avalon_uart_irq
00014374 l     F .text	000000e0 altera_avalon_uart_rxirq
00014454 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00014840 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00014a68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016cb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016f44 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00017080 l     F .text	000000dc alt_file_locked
000172e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
000178dc l     F .text	000000bc alt_write_word_amd
000177b8 l     F .text	00000124 alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
00017b90 l     F .text	0000018c alt_unlock_block_intel
00017d1c l     F .text	000000dc alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
08000779 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001827c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00018430 l     F .text	00000040 alt_sim_halt
000074d4 g     F .text	0000001c putchar
0000cdd8 g     F .text	00000094 _mprec_log10
0000cec4 g     F .text	00000088 __any_on
0000e908 g     F .text	00000070 _isatty_r
0800055c g     O .rodata	00000028 __mprec_tinytens
00010020 g     F .text	0000006c alt_main
00016138 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
000074f8 g     F .text	000000a0 _puts_r
0001121c g     F .text	00000048 alt_read_query_entry_32bit
00014d14 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
0807f9d8 g     O .bss	00000100 alt_irq
0000e978 g     F .text	00000078 _lseek_r
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
00003548 g     F .text	00000074 vTaskPlaceOnUnorderedEventList
000011d0 g     F .text	00000020 xPortGetFreeHeapSize
00010994 g     F .text	000002c0 alt_flash_cfi_write
00000c9c g     F .text	0000003c xEventGroupGetBitsFromISR
0000f5f4 g     F .text	00000088 __eqdf2
0807fc68 g       *ABS*	00000000 __alt_heap_start
000048fc g     F .text	000000b0 xTimerCreate
0000745c g     F .text	00000044 printf
0000e288 g     F .text	00000068 __sseek
0000b1bc g     F .text	000000a4 __sinit
0000e488 g     F .text	00000130 __swbuf_r
0001535c g     F .text	00000114 alt_up_char_buffer_string
00014b2c g     F .text	00000034 read_CE_bit
00002b64 g     F .text	00000094 vQueueWaitForMessageRestricted
0000be94 g     F .text	00000084 _setlocale_r
0000b2bc g     F .text	00000068 __sfmoreglue
000100ac g     F .text	00000020 __malloc_unlock
00014ec0 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0001528c g     F .text	000000d0 alt_up_char_buffer_draw
000008f0 g     F .text	00000184 xEventGroupSync
080026e0 g     O .rwdata	00000008 ROCThresh
0000c8ec g     F .text	000000e0 memmove
0000081c g     F .text	00000080 xCoRoutineRemoveFromEventList
00004114 g     F .text	00000054 vTaskEnterCritical
0000b2ac g     F .text	00000010 _cleanup
000020c0 g     F .text	000000e8 xQueueGenericSendFromISR
0000cf4c g     F .text	000000bc _Balloc
0001550c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00006a2c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
000113a8 g     F .text	00000048 alt_write_flash_command_32bit_device_16bit_mode
000154cc g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	00000000 __reset
00001d78 g     F .text	00000094 xQueueGiveMutexRecursive
08002760 g     O .bss	00000004 pxCurrentTCB
0000e894 g     F .text	00000074 _fstat_r
00010eb0 g     F .text	000002e8 alt_flash_program_block
080027c8 g     O .bss	00000004 errno
080027d4 g     O .bss	00000004 alt_argv
00004434 g     F .text	00000188 xTaskNotify
0800a6c0 g       *ABS*	00000000 _gp
000174e8 g     F .text	00000030 usleep
000156ac g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00000a74 g     F .text	000001c0 xEventGroupWaitBits
08001150 g     O .rwdata	00000180 alt_fd_list
08000908 g     O .rwdata	0000000a ROCStr
000017dc g     F .text	00000038 xPortStartScheduler
000074f0 g     F .text	00000008 _putchar_r
00002fac g     F .text	00000044 vTaskEndScheduler
00016de0 g     F .text	00000094 alt_find_dev
00007324 g     F .text	000000a0 memcpy
000034e8 g     F .text	00000060 vTaskPlaceOnEventList
00002bf8 g     F .text	000001c8 xTaskGenericCreate
00015470 g     F .text	0000005c alt_up_char_buffer_clear
0000b2a0 g     F .text	0000000c _cleanup_r
00006ab4 g     F .text	000000f8 __floatsidf
00017008 g     F .text	00000078 alt_io_redirect
0000f78c g     F .text	00000088 __ltdf2
00002590 g     F .text	00000080 xQueuePeekFromISR
00018494 g       *ABS*	00000000 __DTOR_END__
00007598 g     F .text	00000014 puts
00001150 g     F .text	00000080 vPortFree
00000290 g     F .text	00000140 xCoRoutineCreate
0000cd28 g     F .text	000000b0 __ratio
01000000 g       *ABS*	00000000 __alt_mem_flash_controller
0001575c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00012c84 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000074a0 g     F .text	00000034 _printf_r
0000fae4 g     F .text	00000008 __udivsi3
0000fdb0 g     F .text	000000c0 isatty
0800046c g     O .rodata	000000c8 __mprec_tens
00003d50 g     F .text	00000070 uxTaskGetStackHighWaterMark
00015de8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0000be70 g     F .text	00000008 __locale_charset
0000149c g     F .text	00000088 vListInsertEnd
080027bc g     O .bss	00000004 __malloc_top_pad
0000089c g     F .text	00000054 xEventGroupCreate
080026f0 g     O .rwdata	00000004 __mb_cur_max
0000be78 g     F .text	0000000c _localeconv_r
0000d644 g     F .text	0000003c __i2b
0000b854 g     F .text	0000049c __sfvwrite_r
0000e210 g     F .text	00000070 _sbrk_r
00017998 g     F .text	00000084 alt_program_intel
000165cc g     F .text	000000d0 helper_plot_pixel
00005cf8 g     F .text	000000e0 freq_relay
00000ed4 g     F .text	00000038 vEventGroupSetBitsCallback
0000e9f0 g     F .text	00000078 _read_r
00001474 g     F .text	00000028 vListInitialiseItem
00016b8c g     F .text	00000078 alt_dcache_flush
08000d14 g     O .rwdata	0000000c __lc_ctype
08002710 g     O .rwdata	00000004 alt_max_fd
00011198 g     F .text	00000040 alt_read_query_entry_8bit
000018c8 g     F .text	0000004c vPortSysTickHandler
000070b0 g     F .text	00000138 __unpack_d
0000e770 g     F .text	00000110 _fclose_r
00014b60 g     F .text	00000034 read_num_bytes_available
00017a1c g     F .text	00000174 alt_erase_block_intel
0000b120 g     F .text	00000034 fflush
080027c0 g     O .bss	00000004 __malloc_max_sbrked_mem
00001914 g     F .text	000001b0 alt_irq_register
00014ac8 g     F .text	00000034 read_RI_bit
080026d0 g     O .rwdata	00000008 temp
0000639c g     F .text	00000074 __adddf3
0000cc08 g     F .text	00000120 __b2d
00015790 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000f044 g     F .text	000005b0 __umoddi3
0000fed0 g     F .text	000000f0 lseek
080026ec g     O .rwdata	00000004 _global_impure_ptr
00000cd8 g     F .text	0000018c xEventGroupSetBits
0000dbac g     F .text	000005f4 _realloc_r
0807fc68 g       *ABS*	00000000 __bss_end
000158f4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
000173dc g     F .text	0000010c alt_tick
0000ea68 g     F .text	000005dc __udivdi3
08000534 g     O .rodata	00000028 __mprec_bigtens
0000d8a0 g     F .text	00000120 __s2b
0000f814 g     F .text	00000194 __floatunsidf
0000cb28 g     F .text	00000060 __mcmp
00000fbc g     F .text	00000194 pvPortMalloc
00014214 g     F .text	000000c0 altera_avalon_uart_init
00014bc8 g     F .text	0000002c read_data_byte
08002734 g     O .rwdata	00000004 __ctype_ptr
0000b288 g     F .text	00000018 __fp_lock_all
000026d4 g     F .text	00000038 vQueueDelete
00001814 g     F .text	0000001c vPortEndScheduler
00001404 g     F .text	00000070 vListInitialise
00017344 g     F .text	00000098 alt_alarm_stop
00014afc g     F .text	00000030 read_RE_bit
080027cc g     O .bss	00000004 alt_irq_active
0000017c g     F .exceptions	000000cc alt_irq_handler
08001128 g     O .rwdata	00000028 alt_dev_null
00003168 g     F .text	00000028 xTaskGetTickCount
00001f10 g     F .text	000001b0 xQueueGenericSend
000116b0 g     F .text	000000ac alt_set_flash_algorithm_func
00014d6c g     F .text	00000078 alt_up_ps2_write_data_byte
0000c9f4 g     F .text	00000070 __hi0bits
00016508 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00006bac g     F .text	000000d8 __fixdfsi
00004018 g     F .text	000000fc xTaskPriorityDisinherit
00011264 g     F .text	0000003c alt_write_flash_command_8bit_device_8bit_mode
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
08002708 g     O .rwdata	00000008 alt_dev_list
00010368 g     F .text	00000120 write
0000dac4 g     F .text	000000e8 _putc_r
0001669c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0000361c g     F .text	000000e8 xTaskRemoveFromEventList
0000fc7c g     F .text	000000d4 fstat
00000c34 g     F .text	00000068 xEventGroupClearBits
00005ce4 g     F .text	00000014 keyboard_control_task
00012564 g     F .text	000000dc alt_check_primary_table
0000d780 g     F .text	00000120 __pow5mult
080027b0 g     O .bss	00000004 __nlocale_changed
0000faec g     F .text	00000008 __umodsi3
00010ce4 g     F .text	00000068 alt_flash_cfi_read
00011438 g     F .text	00000034 alt_write_native_8bit
00005be0 g     F .text	00000104 print_status_task
0807fc68 g       *ABS*	00000000 end
080008fc g     O .rwdata	0000000a freqStr
000150e0 g     F .text	000000a8 alt_up_ps2_write_fd
000112a0 g     F .text	0000007c alt_write_flash_command_16bit_device_8bit_mode
000138bc g     F .text	00000504 altera_avalon_lcd_16207_write
00002dc0 g     F .text	000000d8 vTaskDelete
000151c8 g     F .text	00000084 alt_up_char_buffer_init
000148a0 g     F .text	000001c8 altera_avalon_uart_write
000117d8 g     F .text	000005e0 alt_read_cfi_table
00012788 g     F .text	000000b8 altera_avalon_jtag_uart_init
00004214 g     F .text	0000003c pvTaskIncrementMutexHeldCount
00018490 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
00014094 g     F .text	00000088 alt_avalon_timer_sc_init
00014174 g     F .text	00000058 altera_avalon_uart_write_fd
00006d1c g     F .text	00000080 __clzsi2
000141cc g     F .text	00000048 altera_avalon_uart_close_fd
00012ea8 g     F .text	00000240 altera_avalon_jtag_uart_write
000108c0 g     F .text	0000009c alt_flash_cfi_init
0000b1ac g     F .text	00000004 __sfp_lock_acquire
0000c808 g     F .text	000000e4 memchr
0000774c g     F .text	00001eac ___vfprintf_internal_r
00007620 g     F .text	00000060 _sprintf_r
0000380c g     F .text	000000c4 xTaskCheckForTimeOut
00000694 g     F .text	000000ec vCoRoutineSchedule
0000b540 g     F .text	00000314 _free_r
08002738 g     O .bss	00000004 pxCurrentCoRoutine
00018280 g     F .text	000001b0 __call_exitprocs
080027b4 g     O .bss	00000004 __mlocale_changed
00004250 g     F .text	000000d8 ulTaskNotifyTake
080026fc g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	00000048 _start
080027dc g     O .bss	00000004 _alt_tick_rate
00002ff0 g     F .text	00000028 vTaskSuspendAll
00003190 g     F .text	0000002c xTaskGetTickCountFromISR
0000d310 g     F .text	0000014c __lshift
080027e0 g     O .bss	00000004 _alt_nticks
000100cc g     F .text	00000120 read
0001051c g     F .text	0000036c alt_sys_init
000015f8 g     F .text	00000098 uxListRemove
00018148 g     F .text	00000134 __register_exitproc
00014fec g     F .text	00000058 alt_up_ps2_clear_fifo
000111d8 g     F .text	00000044 alt_read_query_entry_16bit
0000d45c g     F .text	000001e8 __multiply
00012b1c g     F .text	00000074 altera_avalon_jtag_uart_close
00003ee8 g     F .text	00000130 vTaskPriorityInherit
0807f9b0 g     O .bss	00000028 __malloc_current_mallinfo
000114d0 g     F .text	000001e0 alt_set_flash_width_func
0000d008 g     F .text	0000017c __d2b
000033b8 g     F .text	00000130 vTaskSwitchContext
000045bc g     F .text	000001c0 xTaskNotifyFromISR
00012640 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00018044 g     F .text	000000b8 alt_get_fd
000035bc g     F .text	00000060 vTaskPlaceOnEventListRestricted
00017df8 g     F .text	0000012c alt_busy_sleep
000071e8 g     F .text	000000c8 __fpcmp_parts_d
0000e700 g     F .text	00000070 _close_r
00004328 g     F .text	0000010c xTaskNotifyWait
000175a0 g     F .text	00000218 alt_erase_block_amd
000072b0 g     F .text	00000074 memcmp
000126f0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0807fc68 g       *ABS*	00000000 __alt_stack_base
00012738 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
080027ac g     O .bss	00000004 PRVGADraw
000049ac g     F .text	000000c8 xTimerGenericCommand
0000961c g     F .text	0000013c __swsetup_r
00011db8 g     F .text	000007ac alt_read_cfi_width
00001690 g     F .text	0000003c vApplicationStackOverflowHook
000067d4 g     F .text	00000258 __divdf3
0000b324 g     F .text	000000f0 __sfp
0000ce6c g     F .text	00000058 __copybits
000031bc g     F .text	00000020 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
08000d20 g     O .rwdata	00000408 __malloc_av_
0000b1b8 g     F .text	00000004 __sinit_lock_release
00006410 g     F .text	000003c4 __muldf3
0000e36c g     F .text	00000060 __sread
00017f24 g     F .text	00000120 alt_find_file
00016c04 g     F .text	000000b4 alt_dev_llist_insert
0001008c g     F .text	00000020 __malloc_lock
000102ac g     F .text	000000bc sbrk
00001e0c g     F .text	000000a8 xQueueTakeMutexRecursive
0000af24 g     F .text	000001fc _fflush_r
00000e64 g     F .text	00000070 vEventGroupDelete
0000e64c g     F .text	000000b4 _calloc_r
08002724 g     O .rwdata	00000008 alt_flash_dev_list
00011364 g     F .text	00000044 alt_write_flash_command_16bit_device_16bit_mode
08002738 g       *ABS*	00000000 __bss_start
000073c4 g     F .text	00000098 memset
00005e24 g     F .text	000000e8 main
080027d8 g     O .bss	00000004 alt_envp
080027c4 g     O .bss	00000004 __malloc_max_total_mem
00015704 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0001524c g     F .text	00000040 alt_up_char_buffer_open_dev
00012698 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e5b8 g     F .text	0000001c __swbuf
00001524 g     F .text	000000d4 vListInsert
00013e8c g     F .text	0000013c altera_avalon_lcd_16207_init
0000e280 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0000e880 g     F .text	00000014 fclose
0000488c g     F .text	00000070 xTimerCreateTimerTask
00014f70 g     F .text	0000007c alt_up_ps2_read_data_byte
0807fad8 g     O .bss	00000190 _atexit0
00009970 g     F .text	000015b4 _dtoa_r
0000c0c8 g     F .text	00000740 _malloc_r
00004a74 g     F .text	00000030 pcTimerGetTimerName
08002714 g     O .rwdata	00000004 alt_errno
000113f0 g     F .text	00000048 alt_write_flash_command_32bit_device_32bit_mode
0000bdb8 g     F .text	000000b8 _fwalk
000024ac g     F .text	000000e4 xQueueReceiveFromISR
00010d4c g     F .text	00000164 alt_write_value_to_flash
00003e6c g     F .text	00000028 xTaskGetCurrentTaskHandle
00015188 g     F .text	00000040 alt_up_ps2_open_dev
0001146c g     F .text	00000034 alt_write_native_16bit
0000d9c0 g     F .text	00000104 putc
0000fa24 g     F .text	00000060 __divsi3
08000280 g     O .rodata	00000014 __thenan_df
00001bd8 g     F .text	000000dc xQueueGenericCreate
0000b414 g     F .text	0000012c _malloc_trim_r
00014cc0 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00018494 g       *ABS*	00000000 __CTOR_END__
0000e3cc g     F .text	000000bc strcmp
00001eb4 g     F .text	0000005c xQueueCreateCountingSemaphore
00018494 g       *ABS*	00000000 __DTOR_LIST__
080027a4 g     O .bss	00000004 keyboardTaskHandle
0000f67c g     F .text	00000088 __nedf2
000104e8 g     F .text	00000034 alt_irq_init
00003704 g     F .text	000000d0 xTaskRemoveFromUnorderedEventList
0001024c g     F .text	00000060 alt_release_fd
00003018 g     F .text	00000150 xTaskResumeAll
00002650 g     F .text	00000054 uxQueueSpacesAvailable
00014b94 g     F .text	00000034 read_data_valid
000075ac g     F .text	00000074 sprintf
08000294 g     O .rodata	00000100 __clz_tab
00002f10 g     F .text	0000009c vTaskStartScheduler
080027b8 g     O .bss	00000004 _PathLocale
00014e54 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
000180fc g     F .text	00000014 atexit
0000e5d4 g     F .text	00000078 _write_r
0000bf18 g     F .text	0000001c setlocale
00002b1c g     F .text	00000048 xQueueIsQueueFullFromISR
0000510c g     F .text	00000030 pvTimerGetTimerID
000003d0 g     F .text	000000a0 vCoRoutineAddToDelayedList
080026e8 g     O .rwdata	00000004 _impure_ptr
080027d0 g     O .bss	00000004 alt_argc
00016d7c g     F .text	00000064 _do_dtors
0000cb88 g     F .text	00000080 __ulp
0000e1a0 g     F .text	00000040 __isinfd
0000b270 g     F .text	00000018 __fp_unlock_all
000038d0 g     F .text	00000024 vTaskMissedYield
00013fc8 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
08002700 g     O .rwdata	00000008 alt_fs_list
0001131c g     F .text	00000048 alt_write_flash_command_32bit_device_8bit_mode
00002610 g     F .text	00000040 uxQueueMessagesWaiting
00002280 g     F .text	0000022c xQueueGenericReceive
0000513c g     F .text	00000aa4 PRVGADraw_Task
000031dc g     F .text	000001dc xTaskIncrementTick
0000be84 g     F .text	00000010 localeconv
00001ac4 g     F .text	00000114 xQueueGenericReset
08002738 g       *ABS*	00000000 _edata
0001411c g     F .text	00000058 altera_avalon_uart_read_fd
0807fc68 g       *ABS*	00000000 _end
00016e74 g     F .text	0000007c alt_flash_open_dev
00012b90 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000011f0 g     F .text	0000001c vPortInitialiseBlocks
000050c0 g     F .text	0000004c xTimerIsTimerActive
0000e2f0 g     F .text	0000007c __swrite
080026f8 g     O .rwdata	00000004 __malloc_trim_threshold
00017518 g     F .text	00000020 altera_nios2_qsys_irq_init
00018110 g     F .text	00000038 exit
0000bcf0 g     F .text	000000c8 _fwalk_reent
00014bf4 g     F .text	000000cc alt_up_ps2_init
0000d184 g     F .text	0000018c __mdiff
00016ef0 g     F .text	00000054 alt_flash_close_dev
0000fa84 g     F .text	00000060 __modsi3
00002e98 g     F .text	00000078 vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0000b1b0 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
00003e94 g     F .text	00000054 xTaskGetSchedulerState
08000678 g     O .rodata	00000101 _ctype_
000145b0 g     F .text	00000060 altera_avalon_uart_close
00018470 g     F .text	00000020 _exit
0000e1e0 g     F .text	00000030 __isnand
00016a38 g     F .text	00000154 alt_alarm_start
00006c84 g     F .text	00000098 __muldi3
0000bf34 g     F .text	00000194 __smakebuf_r
000114a0 g     F .text	00000030 alt_write_native_32bit
00014de4 g     F .text	00000070 alt_up_ps2_wait_for_ack
00004168 g     F .text	00000068 vTaskExitCritical
00007680 g     F .text	00000074 strlen
000016f4 g     F .text	000000e8 pxPortInitialiseStack
0001715c g     F .text	00000188 open
00005dd8 g     F .text	0000004c ps2_isr
0000f704 g     F .text	00000088 __gedf2
00010c54 g     F .text	00000090 alt_flash_cfi_get_info
080026d8 g     O .rwdata	00000008 freqThresh
000037d4 g     F .text	00000038 vTaskSetTimeOutState
08002718 g     O .rwdata	00000004 alt_priority_mask
000095f8 g     F .text	00000024 __vfprintf_internal
00014610 g     F .text	00000230 altera_avalon_uart_read
000026a4 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00002a80 g     F .text	00000044 xQueueIsQueueEmptyFromISR
00015044 g     F .text	0000009c alt_up_ps2_read_fd
0000631c g     F .text	00000080 __subdf3
0000ca64 g     F .text	000000c4 __lo0bits
0800272c g     O .rwdata	00000008 alt_alarm_list
00016d18 g     F .text	00000064 _do_ctors
000041d0 g     F .text	00000044 uxTaskResetEventItemValue
00001cb4 g     F .text	000000c4 xQueueCreateMutex
0000faf4 g     F .text	000000fc close
00017538 g     F .text	00000068 alt_program_amd
0000477c g     F .text	00000110 vTaskNotifyGiveFromISR
00006d9c g     F .text	00000314 __pack_d
00000f0c g     F .text	00000038 vEventGroupClearBitsCallback
000021a8 g     F .text	000000d8 xQueueGiveFromISR
00000000  w      *UND*	00000000 free
0000b1b4 g     F .text	00000004 __sinit_lock_acquire
0000d680 g     F .text	00000100 __multadd
0000c9cc g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
  20:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
  24:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
  28:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
  2c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
  30:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
  34:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
  38:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
  3c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
  40:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
  44:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
  48:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
  4c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
  68:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
  6c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
  70:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
  74:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
  78:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
  7c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
  80:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
  84:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
  88:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
  8c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
  90:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
  94:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06020034 	movhi	et,2048

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
  a0:	c609d804 	addi	et,et,10080
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
  a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
  ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
  b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
  b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06020034 	movhi	et,2048

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
  c8:	c609d804 	addi	et,et,10080
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
  cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
  d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
  d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
  dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
  e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
  e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
  ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
  f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
  f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
  f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
  fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 10c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 11c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 15c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 164:	003da03a 	break	0
  	br		restore_context			# its something else
 168:	003fda06 	br	d4 <restore_context>

0000016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 16c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 174:	00033b80 	call	33b8 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 178:	003fd206 	br	c4 <restore_sp_from_pxCurrentTCB>

0000017c <alt_irq_handler>:
 17c:	defff904 	addi	sp,sp,-28
 180:	dfc00615 	stw	ra,24(sp)
 184:	df000515 	stw	fp,20(sp)
 188:	df000504 	addi	fp,sp,20
 18c:	0005313a 	rdctl	r2,ipending
 190:	e0bffc15 	stw	r2,-16(fp)
 194:	e0bffc17 	ldw	r2,-16(fp)
 198:	e0bfff15 	stw	r2,-4(fp)
 19c:	e03ffd15 	stw	zero,-12(fp)
 1a0:	00800044 	movi	r2,1
 1a4:	e0bffe15 	stw	r2,-8(fp)
 1a8:	e0ffff17 	ldw	r3,-4(fp)
 1ac:	e0bffe17 	ldw	r2,-8(fp)
 1b0:	1884703a 	and	r2,r3,r2
 1b4:	1005003a 	cmpeq	r2,r2,zero
 1b8:	1000171e 	bne	r2,zero,218 <alt_irq_handler+0x9c>
 1bc:	e0bffd17 	ldw	r2,-12(fp)
 1c0:	00c20234 	movhi	r3,2056
 1c4:	18fe7604 	addi	r3,r3,-1576
 1c8:	100490fa 	slli	r2,r2,3
 1cc:	10c5883a 	add	r2,r2,r3
 1d0:	11800017 	ldw	r6,0(r2)
 1d4:	e0bffd17 	ldw	r2,-12(fp)
 1d8:	00c20234 	movhi	r3,2056
 1dc:	18fe7604 	addi	r3,r3,-1576
 1e0:	100490fa 	slli	r2,r2,3
 1e4:	10c5883a 	add	r2,r2,r3
 1e8:	10800104 	addi	r2,r2,4
 1ec:	11000017 	ldw	r4,0(r2)
 1f0:	e17ffd17 	ldw	r5,-12(fp)
 1f4:	303ee83a 	callr	r6
 1f8:	0005313a 	rdctl	r2,ipending
 1fc:	e0bffb15 	stw	r2,-20(fp)
 200:	e0bffb17 	ldw	r2,-20(fp)
 204:	e0bfff15 	stw	r2,-4(fp)
 208:	e0bfff17 	ldw	r2,-4(fp)
 20c:	1004c03a 	cmpne	r2,r2,zero
 210:	103fe21e 	bne	r2,zero,19c <alt_irq_handler+0x20>
 214:	00000706 	br	234 <alt_irq_handler+0xb8>
 218:	e0bffe17 	ldw	r2,-8(fp)
 21c:	1085883a 	add	r2,r2,r2
 220:	e0bffe15 	stw	r2,-8(fp)
 224:	e0bffd17 	ldw	r2,-12(fp)
 228:	10800044 	addi	r2,r2,1
 22c:	e0bffd15 	stw	r2,-12(fp)
 230:	003fdd06 	br	1a8 <alt_irq_handler+0x2c>
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:
     248:	00820014 	movui	r2,2048
     24c:	10000033 	initd	0(r2)
     250:	10bff804 	addi	r2,r2,-32
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>
     258:	06c40034 	movhi	sp,4096
     25c:	dec00014 	ori	sp,sp,0
     260:	06820034 	movhi	gp,2048
     264:	d6a9b014 	ori	gp,gp,42688
     268:	00820034 	movhi	r2,2048
     26c:	1089ce14 	ori	r2,r2,10040
     270:	00c201f4 	movhi	r3,2055
     274:	18ff1a14 	ori	r3,r3,64616
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>
     27c:	10000015 	stw	zero,0(r2)
     280:	10800104 	addi	r2,r2,4
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     288:	00100200 	call	10020 <alt_main>

0000028c <alt_after_alt_main>:
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     290:	defff904 	addi	sp,sp,-28
     294:	dfc00615 	stw	ra,24(sp)
     298:	df000515 	stw	fp,20(sp)
     29c:	df000504 	addi	fp,sp,20
     2a0:	e13ffd15 	stw	r4,-12(fp)
     2a4:	e17ffe15 	stw	r5,-8(fp)
     2a8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2ac:	01000e04 	movi	r4,56
     2b0:	0000fbc0 	call	fbc <pvPortMalloc>
     2b4:	e0bffb15 	stw	r2,-20(fp)
	if( pxCoRoutine )
     2b8:	e0bffb17 	ldw	r2,-20(fp)
     2bc:	1005003a 	cmpeq	r2,r2,zero
     2c0:	10003b1e 	bne	r2,zero,3b0 <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2c4:	d0a01e17 	ldw	r2,-32648(gp)
     2c8:	1004c03a 	cmpne	r2,r2,zero
     2cc:	1000031e 	bne	r2,zero,2dc <xCoRoutineCreate+0x4c>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2d0:	e0bffb17 	ldw	r2,-20(fp)
     2d4:	d0a01e15 	stw	r2,-32648(gp)
			prvInitialiseCoRoutineLists();
     2d8:	00007800 	call	780 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	108000b0 	cmpltui	r2,r2,2
     2e4:	1000021e 	bne	r2,zero,2f0 <xCoRoutineCreate+0x60>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2e8:	00800044 	movi	r2,1
     2ec:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2f0:	e0bffb17 	ldw	r2,-20(fp)
     2f4:	10000d0d 	sth	zero,52(r2)
		pxCoRoutine->uxPriority = uxPriority;
     2f8:	e0fffb17 	ldw	r3,-20(fp)
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	18800b15 	stw	r2,44(r3)
		pxCoRoutine->uxIndex = uxIndex;
     304:	e0fffb17 	ldw	r3,-20(fp)
     308:	e0bfff17 	ldw	r2,-4(fp)
     30c:	18800c15 	stw	r2,48(r3)
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     310:	e0fffb17 	ldw	r3,-20(fp)
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     31c:	e0bffb17 	ldw	r2,-20(fp)
     320:	11000104 	addi	r4,r2,4
     324:	00014740 	call	1474 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	11000604 	addi	r4,r2,24
     330:	00014740 	call	1474 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     334:	e0fffb17 	ldw	r3,-20(fp)
     338:	e0bffb17 	ldw	r2,-20(fp)
     33c:	18800415 	stw	r2,16(r3)
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     340:	e0fffb17 	ldw	r3,-20(fp)
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	18800915 	stw	r2,36(r3)

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     34c:	00c00084 	movi	r3,2
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	1887c83a 	sub	r3,r3,r2
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10c00615 	stw	r3,24(r2)

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     360:	e0bffb17 	ldw	r2,-20(fp)
     364:	10c00b17 	ldw	r3,44(r2)
     368:	d0a01f17 	ldw	r2,-32644(gp)
     36c:	10c0032e 	bgeu	r2,r3,37c <xCoRoutineCreate+0xec>
     370:	e0bffb17 	ldw	r2,-20(fp)
     374:	10800b17 	ldw	r2,44(r2)
     378:	d0a01f15 	stw	r2,-32644(gp)
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	10800b17 	ldw	r2,44(r2)
     384:	10800524 	muli	r2,r2,20
     388:	1007883a 	mov	r3,r2
     38c:	00820034 	movhi	r2,2048
     390:	1089f904 	addi	r2,r2,10212
     394:	1889883a 	add	r4,r3,r2
     398:	e0bffb17 	ldw	r2,-20(fp)
     39c:	11400104 	addi	r5,r2,4
     3a0:	000149c0 	call	149c <vListInsertEnd>

		xReturn = pdPASS;
     3a4:	00800044 	movi	r2,1
     3a8:	e0bffc15 	stw	r2,-16(fp)
     3ac:	00000206 	br	3b8 <xCoRoutineCreate+0x128>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     3b0:	00bfffc4 	movi	r2,-1
     3b4:	e0bffc15 	stw	r2,-16(fp)
	}

	return xReturn;
     3b8:	e0bffc17 	ldw	r2,-16(fp)
}
     3bc:	e037883a 	mov	sp,fp
     3c0:	dfc00117 	ldw	ra,4(sp)
     3c4:	df000017 	ldw	fp,0(sp)
     3c8:	dec00204 	addi	sp,sp,8
     3cc:	f800283a 	ret

000003d0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     3d0:	defffb04 	addi	sp,sp,-20
     3d4:	dfc00415 	stw	ra,16(sp)
     3d8:	df000315 	stw	fp,12(sp)
     3dc:	df000304 	addi	fp,sp,12
     3e0:	e13ffe15 	stw	r4,-8(fp)
     3e4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3e8:	d0e02017 	ldw	r3,-32640(gp)
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	e0bffd15 	stw	r2,-12(fp)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3f8:	d0a01e17 	ldw	r2,-32648(gp)
     3fc:	11000104 	addi	r4,r2,4
     400:	00015f80 	call	15f8 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     404:	d0e01e17 	ldw	r3,-32648(gp)
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xCoRoutineTickCount )
     410:	d0e02017 	ldw	r3,-32640(gp)
     414:	e0bffd17 	ldw	r2,-12(fp)
     418:	10c0052e 	bgeu	r2,r3,430 <vCoRoutineAddToDelayedList+0x60>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     41c:	d1202417 	ldw	r4,-32624(gp)
     420:	d0a01e17 	ldw	r2,-32648(gp)
     424:	11400104 	addi	r5,r2,4
     428:	00015240 	call	1524 <vListInsert>
     42c:	00000406 	br	440 <vCoRoutineAddToDelayedList+0x70>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     430:	d1202317 	ldw	r4,-32628(gp)
     434:	d0a01e17 	ldw	r2,-32648(gp)
     438:	11400104 	addi	r5,r2,4
     43c:	00015240 	call	1524 <vListInsert>
	}

	if( pxEventList )
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	1005003a 	cmpeq	r2,r2,zero
     448:	1000041e 	bne	r2,zero,45c <vCoRoutineAddToDelayedList+0x8c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     44c:	d0a01e17 	ldw	r2,-32648(gp)
     450:	11400604 	addi	r5,r2,24
     454:	e13fff17 	ldw	r4,-4(fp)
     458:	00015240 	call	1524 <vListInsert>
	}
}
     45c:	e037883a 	mov	sp,fp
     460:	dfc00117 	ldw	ra,4(sp)
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00204 	addi	sp,sp,8
     46c:	f800283a 	ret

00000470 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     470:	defffb04 	addi	sp,sp,-20
     474:	dfc00415 	stw	ra,16(sp)
     478:	df000315 	stw	fp,12(sp)
     47c:	df000304 	addi	fp,sp,12
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     480:	00002606 	br	51c <prvCheckPendingReadyList+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     484:	0005303a 	rdctl	r2,status
     488:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	00bfff84 	movi	r2,-2
     494:	1884703a 	and	r2,r3,r2
     498:	1001703a 	wrctl	status,r2
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     49c:	00820034 	movhi	r2,2048
     4a0:	108a0d04 	addi	r2,r2,10292
     4a4:	10800317 	ldw	r2,12(r2)
     4a8:	10800317 	ldw	r2,12(r2)
     4ac:	e0bfff15 	stw	r2,-4(fp)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	11000604 	addi	r4,r2,24
     4b8:	00015f80 	call	15f8 <uxListRemove>
     4bc:	00800044 	movi	r2,1
     4c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     4c4:	e0bffd17 	ldw	r2,-12(fp)
     4c8:	1001703a 	wrctl	status,r2
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     4cc:	e0bfff17 	ldw	r2,-4(fp)
     4d0:	11000104 	addi	r4,r2,4
     4d4:	00015f80 	call	15f8 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	10c00b17 	ldw	r3,44(r2)
     4e0:	d0a01f17 	ldw	r2,-32644(gp)
     4e4:	10c0032e 	bgeu	r2,r3,4f4 <prvCheckPendingReadyList+0x84>
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800b17 	ldw	r2,44(r2)
     4f0:	d0a01f15 	stw	r2,-32644(gp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10800b17 	ldw	r2,44(r2)
     4fc:	10800524 	muli	r2,r2,20
     500:	1007883a 	mov	r3,r2
     504:	00820034 	movhi	r2,2048
     508:	1089f904 	addi	r2,r2,10212
     50c:	1889883a 	add	r4,r3,r2
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	11400104 	addi	r5,r2,4
     518:	000149c0 	call	149c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     51c:	00820034 	movhi	r2,2048
     520:	108a0d04 	addi	r2,r2,10292
     524:	10800017 	ldw	r2,0(r2)
     528:	1004c03a 	cmpne	r2,r2,zero
     52c:	103fd51e 	bne	r2,zero,484 <prvCheckPendingReadyList+0x14>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     544:	defffa04 	addi	sp,sp,-24
     548:	dfc00515 	stw	ra,20(sp)
     54c:	df000415 	stw	fp,16(sp)
     550:	df000404 	addi	fp,sp,16
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     554:	00031680 	call	3168 <xTaskGetTickCount>
     558:	d0e02117 	ldw	r3,-32636(gp)
     55c:	10c5c83a 	sub	r2,r2,r3
     560:	d0a02215 	stw	r2,-32632(gp)
	while( xPassedTicks )
     564:	00004106 	br	66c <prvCheckDelayedList+0x128>
	{
		xCoRoutineTickCount++;
     568:	d0a02017 	ldw	r2,-32640(gp)
     56c:	10800044 	addi	r2,r2,1
     570:	d0a02015 	stw	r2,-32640(gp)
		xPassedTicks--;
     574:	d0a02217 	ldw	r2,-32632(gp)
     578:	10bfffc4 	addi	r2,r2,-1
     57c:	d0a02215 	stw	r2,-32632(gp)

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     580:	d0a02017 	ldw	r2,-32640(gp)
     584:	1004c03a 	cmpne	r2,r2,zero
     588:	1000341e 	bne	r2,zero,65c <prvCheckDelayedList+0x118>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     58c:	d0a02317 	ldw	r2,-32628(gp)
     590:	e0bffe15 	stw	r2,-8(fp)
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     594:	d0a02417 	ldw	r2,-32624(gp)
     598:	d0a02315 	stw	r2,-32628(gp)
			pxOverflowDelayedCoRoutineList = pxTemp;
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	d0a02415 	stw	r2,-32624(gp)
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5a4:	00002d06 	br	65c <prvCheckDelayedList+0x118>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     5a8:	d0a02317 	ldw	r2,-32628(gp)
     5ac:	10800317 	ldw	r2,12(r2)
     5b0:	10800317 	ldw	r2,12(r2)
     5b4:	e0bfff15 	stw	r2,-4(fp)

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     5b8:	e0bfff17 	ldw	r2,-4(fp)
     5bc:	10c00117 	ldw	r3,4(r2)
     5c0:	d0a02017 	ldw	r2,-32640(gp)
     5c4:	10c02936 	bltu	r2,r3,66c <prvCheckDelayedList+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     5c8:	0005303a 	rdctl	r2,status
     5cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     5d0:	e0fffd17 	ldw	r3,-12(fp)
     5d4:	00bfff84 	movi	r2,-2
     5d8:	1884703a 	and	r2,r3,r2
     5dc:	1001703a 	wrctl	status,r2
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	11000104 	addi	r4,r2,4
     5e8:	00015f80 	call	15f8 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	10800a17 	ldw	r2,40(r2)
     5f4:	1005003a 	cmpeq	r2,r2,zero
     5f8:	1000031e 	bne	r2,zero,608 <prvCheckDelayedList+0xc4>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     5fc:	e0bfff17 	ldw	r2,-4(fp)
     600:	11000604 	addi	r4,r2,24
     604:	00015f80 	call	15f8 <uxListRemove>
     608:	00800044 	movi	r2,1
     60c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	1001703a 	wrctl	status,r2
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10c00b17 	ldw	r3,44(r2)
     620:	d0a01f17 	ldw	r2,-32644(gp)
     624:	10c0032e 	bgeu	r2,r3,634 <prvCheckDelayedList+0xf0>
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	10800b17 	ldw	r2,44(r2)
     630:	d0a01f15 	stw	r2,-32644(gp)
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800b17 	ldw	r2,44(r2)
     63c:	10800524 	muli	r2,r2,20
     640:	1007883a 	mov	r3,r2
     644:	00820034 	movhi	r2,2048
     648:	1089f904 	addi	r2,r2,10212
     64c:	1889883a 	add	r4,r3,r2
     650:	e0bfff17 	ldw	r2,-4(fp)
     654:	11400104 	addi	r5,r2,4
     658:	000149c0 	call	149c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     65c:	d0a02317 	ldw	r2,-32628(gp)
     660:	10800017 	ldw	r2,0(r2)
     664:	1004c03a 	cmpne	r2,r2,zero
     668:	103fcf1e 	bne	r2,zero,5a8 <prvCheckDelayedList+0x64>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     66c:	d0a02217 	ldw	r2,-32632(gp)
     670:	1004c03a 	cmpne	r2,r2,zero
     674:	103fbc1e 	bne	r2,zero,568 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     678:	d0a02017 	ldw	r2,-32640(gp)
     67c:	d0a02115 	stw	r2,-32636(gp)
}
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     694:	defffd04 	addi	sp,sp,-12
     698:	dfc00215 	stw	ra,8(sp)
     69c:	df000115 	stw	fp,4(sp)
     6a0:	df000104 	addi	fp,sp,4
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     6a4:	00004700 	call	470 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     6a8:	00005440 	call	544 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6ac:	00000606 	br	6c8 <vCoRoutineSchedule+0x34>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     6b0:	d0a01f17 	ldw	r2,-32644(gp)
     6b4:	1005003a 	cmpeq	r2,r2,zero
     6b8:	10002c1e 	bne	r2,zero,76c <vCoRoutineSchedule+0xd8>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     6bc:	d0a01f17 	ldw	r2,-32644(gp)
     6c0:	10bfffc4 	addi	r2,r2,-1
     6c4:	d0a01f15 	stw	r2,-32644(gp)

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6c8:	d0a01f17 	ldw	r2,-32644(gp)
     6cc:	10800524 	muli	r2,r2,20
     6d0:	1007883a 	mov	r3,r2
     6d4:	00820034 	movhi	r2,2048
     6d8:	1089f904 	addi	r2,r2,10212
     6dc:	1885883a 	add	r2,r3,r2
     6e0:	10800017 	ldw	r2,0(r2)
     6e4:	1005003a 	cmpeq	r2,r2,zero
     6e8:	103ff11e 	bne	r2,zero,6b0 <vCoRoutineSchedule+0x1c>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     6ec:	d0a01f17 	ldw	r2,-32644(gp)
     6f0:	10800524 	muli	r2,r2,20
     6f4:	1007883a 	mov	r3,r2
     6f8:	00820034 	movhi	r2,2048
     6fc:	1089f904 	addi	r2,r2,10212
     700:	1885883a 	add	r2,r3,r2
     704:	e0bfff15 	stw	r2,-4(fp)
     708:	e0bfff17 	ldw	r2,-4(fp)
     70c:	10800117 	ldw	r2,4(r2)
     710:	10c00117 	ldw	r3,4(r2)
     714:	e0bfff17 	ldw	r2,-4(fp)
     718:	10c00115 	stw	r3,4(r2)
     71c:	e0bfff17 	ldw	r2,-4(fp)
     720:	10c00117 	ldw	r3,4(r2)
     724:	e0bfff17 	ldw	r2,-4(fp)
     728:	10800204 	addi	r2,r2,8
     72c:	1880051e 	bne	r3,r2,744 <vCoRoutineSchedule+0xb0>
     730:	e0bfff17 	ldw	r2,-4(fp)
     734:	10800117 	ldw	r2,4(r2)
     738:	10c00117 	ldw	r3,4(r2)
     73c:	e0bfff17 	ldw	r2,-4(fp)
     740:	10c00115 	stw	r3,4(r2)
     744:	e0bfff17 	ldw	r2,-4(fp)
     748:	10800117 	ldw	r2,4(r2)
     74c:	10800317 	ldw	r2,12(r2)
     750:	d0a01e15 	stw	r2,-32648(gp)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     754:	d0a01e17 	ldw	r2,-32648(gp)
     758:	10c00017 	ldw	r3,0(r2)
     75c:	d1201e17 	ldw	r4,-32648(gp)
     760:	d0a01e17 	ldw	r2,-32648(gp)
     764:	11400c17 	ldw	r5,48(r2)
     768:	183ee83a 	callr	r3

	return;
}
     76c:	e037883a 	mov	sp,fp
     770:	dfc00117 	ldw	ra,4(sp)
     774:	df000017 	ldw	fp,0(sp)
     778:	dec00204 	addi	sp,sp,8
     77c:	f800283a 	ret

00000780 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     790:	e03fff15 	stw	zero,-4(fp)
     794:	00000a06 	br	7c0 <prvInitialiseCoRoutineLists+0x40>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     798:	e0bfff17 	ldw	r2,-4(fp)
     79c:	10800524 	muli	r2,r2,20
     7a0:	1007883a 	mov	r3,r2
     7a4:	00820034 	movhi	r2,2048
     7a8:	1089f904 	addi	r2,r2,10212
     7ac:	1889883a 	add	r4,r3,r2
     7b0:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7b4:	e0bfff17 	ldw	r2,-4(fp)
     7b8:	10800044 	addi	r2,r2,1
     7bc:	e0bfff15 	stw	r2,-4(fp)
     7c0:	e0bfff17 	ldw	r2,-4(fp)
     7c4:	108000b0 	cmpltui	r2,r2,2
     7c8:	103ff31e 	bne	r2,zero,798 <prvInitialiseCoRoutineLists+0x18>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     7cc:	01020034 	movhi	r4,2048
     7d0:	210a0304 	addi	r4,r4,10252
     7d4:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     7d8:	01020034 	movhi	r4,2048
     7dc:	210a0804 	addi	r4,r4,10272
     7e0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     7e4:	01020034 	movhi	r4,2048
     7e8:	210a0d04 	addi	r4,r4,10292
     7ec:	00014040 	call	1404 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     7f0:	00820034 	movhi	r2,2048
     7f4:	108a0304 	addi	r2,r2,10252
     7f8:	d0a02315 	stw	r2,-32628(gp)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     7fc:	00820034 	movhi	r2,2048
     800:	108a0804 	addi	r2,r2,10272
     804:	d0a02415 	stw	r2,-32624(gp)
}
     808:	e037883a 	mov	sp,fp
     80c:	dfc00117 	ldw	ra,4(sp)
     810:	df000017 	ldw	fp,0(sp)
     814:	dec00204 	addi	sp,sp,8
     818:	f800283a 	ret

0000081c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     81c:	defffb04 	addi	sp,sp,-20
     820:	dfc00415 	stw	ra,16(sp)
     824:	df000315 	stw	fp,12(sp)
     828:	df000304 	addi	fp,sp,12
     82c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10800317 	ldw	r2,12(r2)
     838:	10800317 	ldw	r2,12(r2)
     83c:	e0bffe15 	stw	r2,-8(fp)
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	11000604 	addi	r4,r2,24
     848:	00015f80 	call	15f8 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	11400604 	addi	r5,r2,24
     854:	01020034 	movhi	r4,2048
     858:	210a0d04 	addi	r4,r4,10292
     85c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     860:	e0bffe17 	ldw	r2,-8(fp)
     864:	10c00b17 	ldw	r3,44(r2)
     868:	d0a01e17 	ldw	r2,-32648(gp)
     86c:	10800b17 	ldw	r2,44(r2)
     870:	18800336 	bltu	r3,r2,880 <xCoRoutineRemoveFromEventList+0x64>
	{
		xReturn = pdTRUE;
     874:	00800044 	movi	r2,1
     878:	e0bffd15 	stw	r2,-12(fp)
     87c:	00000106 	br	884 <xCoRoutineRemoveFromEventList+0x68>
	}
	else
	{
		xReturn = pdFALSE;
     880:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
     884:	e0bffd17 	ldw	r2,-12(fp)
}
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     89c:	defffd04 	addi	sp,sp,-12
     8a0:	dfc00215 	stw	ra,8(sp)
     8a4:	df000115 	stw	fp,4(sp)
     8a8:	df000104 	addi	fp,sp,4
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     8ac:	01000604 	movi	r4,24
     8b0:	0000fbc0 	call	fbc <pvPortMalloc>
     8b4:	e0bfff15 	stw	r2,-4(fp)
	if( pxEventBits != NULL )
     8b8:	e0bfff17 	ldw	r2,-4(fp)
     8bc:	1005003a 	cmpeq	r2,r2,zero
     8c0:	1000051e 	bne	r2,zero,8d8 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
     8c4:	e0bfff17 	ldw	r2,-4(fp)
     8c8:	10000015 	stw	zero,0(r2)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     8cc:	e0bfff17 	ldw	r2,-4(fp)
     8d0:	11000104 	addi	r4,r2,4
     8d4:	00014040 	call	1404 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
     8d8:	e0bfff17 	ldw	r2,-4(fp)
}
     8dc:	e037883a 	mov	sp,fp
     8e0:	dfc00117 	ldw	ra,4(sp)
     8e4:	df000017 	ldw	fp,0(sp)
     8e8:	dec00204 	addi	sp,sp,8
     8ec:	f800283a 	ret

000008f0 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     8f0:	defff504 	addi	sp,sp,-44
     8f4:	dfc00a15 	stw	ra,40(sp)
     8f8:	df000915 	stw	fp,36(sp)
     8fc:	df000904 	addi	fp,sp,36
     900:	e13ffc15 	stw	r4,-16(fp)
     904:	e17ffd15 	stw	r5,-12(fp)
     908:	e1bffe15 	stw	r6,-8(fp)
     90c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	e0bff915 	stw	r2,-28(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     918:	e03ff715 	stw	zero,-36(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     91c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     920:	e0bff917 	ldw	r2,-28(fp)
     924:	10800017 	ldw	r2,0(r2)
     928:	e0bffb15 	stw	r2,-20(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     92c:	e13ffc17 	ldw	r4,-16(fp)
     930:	e17ffd17 	ldw	r5,-12(fp)
     934:	0000cd80 	call	cd8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     938:	e0fffb17 	ldw	r3,-20(fp)
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	1886b03a 	or	r3,r3,r2
     944:	e0bffe17 	ldw	r2,-8(fp)
     948:	1886703a 	and	r3,r3,r2
     94c:	e0bffe17 	ldw	r2,-8(fp)
     950:	18800d1e 	bne	r3,r2,988 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     954:	e0fffb17 	ldw	r3,-20(fp)
     958:	e0bffd17 	ldw	r2,-12(fp)
     95c:	1884b03a 	or	r2,r3,r2
     960:	e0bffa15 	stw	r2,-24(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     964:	e0bff917 	ldw	r2,-28(fp)
     968:	10c00017 	ldw	r3,0(r2)
     96c:	e0bffe17 	ldw	r2,-8(fp)
     970:	0084303a 	nor	r2,zero,r2
     974:	1886703a 	and	r3,r3,r2
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
     980:	e03fff15 	stw	zero,-4(fp)
     984:	00000e06 	br	9c0 <xEventGroupSync+0xd0>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     988:	e0bfff17 	ldw	r2,-4(fp)
     98c:	1005003a 	cmpeq	r2,r2,zero
     990:	1000081e 	bne	r2,zero,9b4 <xEventGroupSync+0xc4>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     994:	e0bff917 	ldw	r2,-28(fp)
     998:	11000104 	addi	r4,r2,4
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	11414034 	orhi	r5,r2,1280
     9a4:	e1bfff17 	ldw	r6,-4(fp)
     9a8:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     9ac:	e03ffa15 	stw	zero,-24(fp)
     9b0:	00000306 	br	9c0 <xEventGroupSync+0xd0>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     9b4:	e0bff917 	ldw	r2,-28(fp)
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	e0bffa15 	stw	r2,-24(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     9c0:	00030180 	call	3018 <xTaskResumeAll>
     9c4:	e0bff815 	stw	r2,-32(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	1005003a 	cmpeq	r2,r2,zero
     9d0:	1000221e 	bne	r2,zero,a5c <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
     9d4:	e0bff817 	ldw	r2,-32(fp)
     9d8:	1004c03a 	cmpne	r2,r2,zero
     9dc:	1000011e 	bne	r2,zero,9e4 <xEventGroupSync+0xf4>
		{
			portYIELD_WITHIN_API();
     9e0:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     9e4:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     9e8:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     9ec:	e0bffa17 	ldw	r2,-24(fp)
     9f0:	1080802c 	andhi	r2,r2,512
     9f4:	1004c03a 	cmpne	r2,r2,zero
     9f8:	1000131e 	bne	r2,zero,a48 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     9fc:	00041140 	call	4114 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
     a00:	e0bff917 	ldw	r2,-28(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	e0bffa15 	stw	r2,-24(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a0c:	e0fffa17 	ldw	r3,-24(fp)
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	1886703a 	and	r3,r3,r2
     a18:	e0bffe17 	ldw	r2,-8(fp)
     a1c:	1880071e 	bne	r3,r2,a3c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10c00017 	ldw	r3,0(r2)
     a28:	e0bffe17 	ldw	r2,-8(fp)
     a2c:	0084303a 	nor	r2,zero,r2
     a30:	1886703a 	and	r3,r3,r2
     a34:	e0bff917 	ldw	r2,-28(fp)
     a38:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a3c:	00041680 	call	4168 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
     a40:	00800044 	movi	r2,1
     a44:	e0bff715 	stw	r2,-36(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a48:	e0bffa17 	ldw	r2,-24(fp)
     a4c:	00c04034 	movhi	r3,256
     a50:	18ffffc4 	addi	r3,r3,-1
     a54:	10c4703a 	and	r2,r2,r3
     a58:	e0bffa15 	stw	r2,-24(fp)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a5c:	e0bffa17 	ldw	r2,-24(fp)
}
     a60:	e037883a 	mov	sp,fp
     a64:	dfc00117 	ldw	ra,4(sp)
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00204 	addi	sp,sp,8
     a70:	f800283a 	ret

00000a74 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     a74:	defff304 	addi	sp,sp,-52
     a78:	dfc00c15 	stw	ra,48(sp)
     a7c:	df000b15 	stw	fp,44(sp)
     a80:	df000b04 	addi	fp,sp,44
     a84:	e13ffc15 	stw	r4,-16(fp)
     a88:	e17ffd15 	stw	r5,-12(fp)
     a8c:	e1bffe15 	stw	r6,-8(fp)
     a90:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	e0bffb15 	stw	r2,-20(fp)
EventBits_t uxReturn, uxControlBits = 0;
     a9c:	e03ff915 	stw	zero,-28(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     aa0:	e03ff615 	stw	zero,-40(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     aa4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     aa8:	e0bffb17 	ldw	r2,-20(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	e0bff515 	stw	r2,-44(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     ab4:	e13ff517 	ldw	r4,-44(fp)
     ab8:	e17ffd17 	ldw	r5,-12(fp)
     abc:	e1bfff17 	ldw	r6,-4(fp)
     ac0:	0000f440 	call	f44 <prvTestWaitCondition>
     ac4:	e0bff815 	stw	r2,-32(fp)

		if( xWaitConditionMet != pdFALSE )
     ac8:	e0bff817 	ldw	r2,-32(fp)
     acc:	1005003a 	cmpeq	r2,r2,zero
     ad0:	10000e1e 	bne	r2,zero,b0c <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     ad4:	e0bff517 	ldw	r2,-44(fp)
     ad8:	e0bffa15 	stw	r2,-24(fp)
			xTicksToWait = ( TickType_t ) 0;
     adc:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	1005003a 	cmpeq	r2,r2,zero
     ae8:	1000221e 	bne	r2,zero,b74 <xEventGroupWaitBits+0x100>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     aec:	e0bffb17 	ldw	r2,-20(fp)
     af0:	10c00017 	ldw	r3,0(r2)
     af4:	e0bffd17 	ldw	r2,-12(fp)
     af8:	0084303a 	nor	r2,zero,r2
     afc:	1886703a 	and	r3,r3,r2
     b00:	e0bffb17 	ldw	r2,-20(fp)
     b04:	10c00015 	stw	r3,0(r2)
     b08:	00001a06 	br	b74 <xEventGroupWaitBits+0x100>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     b0c:	e0800217 	ldw	r2,8(fp)
     b10:	1004c03a 	cmpne	r2,r2,zero
     b14:	1000031e 	bne	r2,zero,b24 <xEventGroupWaitBits+0xb0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     b18:	e0bff517 	ldw	r2,-44(fp)
     b1c:	e0bffa15 	stw	r2,-24(fp)
     b20:	00001406 	br	b74 <xEventGroupWaitBits+0x100>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     b24:	e0bffe17 	ldw	r2,-8(fp)
     b28:	1005003a 	cmpeq	r2,r2,zero
     b2c:	1000031e 	bne	r2,zero,b3c <xEventGroupWaitBits+0xc8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     b30:	e0bff917 	ldw	r2,-28(fp)
     b34:	10804034 	orhi	r2,r2,256
     b38:	e0bff915 	stw	r2,-28(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     b3c:	e0bfff17 	ldw	r2,-4(fp)
     b40:	1005003a 	cmpeq	r2,r2,zero
     b44:	1000031e 	bne	r2,zero,b54 <xEventGroupWaitBits+0xe0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     b48:	e0bff917 	ldw	r2,-28(fp)
     b4c:	10810034 	orhi	r2,r2,1024
     b50:	e0bff915 	stw	r2,-28(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     b54:	e0bffb17 	ldw	r2,-20(fp)
     b58:	11000104 	addi	r4,r2,4
     b5c:	e0fffd17 	ldw	r3,-12(fp)
     b60:	e0bff917 	ldw	r2,-28(fp)
     b64:	188ab03a 	or	r5,r3,r2
     b68:	e1800217 	ldw	r6,8(fp)
     b6c:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     b70:	e03ffa15 	stw	zero,-24(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     b74:	00030180 	call	3018 <xTaskResumeAll>
     b78:	e0bff715 	stw	r2,-36(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     b7c:	e0800217 	ldw	r2,8(fp)
     b80:	1005003a 	cmpeq	r2,r2,zero
     b84:	1000251e 	bne	r2,zero,c1c <xEventGroupWaitBits+0x1a8>
	{
		if( xAlreadyYielded == pdFALSE )
     b88:	e0bff717 	ldw	r2,-36(fp)
     b8c:	1004c03a 	cmpne	r2,r2,zero
     b90:	1000011e 	bne	r2,zero,b98 <xEventGroupWaitBits+0x124>
		{
			portYIELD_WITHIN_API();
     b94:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     b98:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     b9c:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     ba0:	e0bffa17 	ldw	r2,-24(fp)
     ba4:	1080802c 	andhi	r2,r2,512
     ba8:	1004c03a 	cmpne	r2,r2,zero
     bac:	1000161e 	bne	r2,zero,c08 <xEventGroupWaitBits+0x194>
		{
			taskENTER_CRITICAL();
     bb0:	00041140 	call	4114 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	10800017 	ldw	r2,0(r2)
     bbc:	e0bffa15 	stw	r2,-24(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     bc0:	e13ffa17 	ldw	r4,-24(fp)
     bc4:	e17ffd17 	ldw	r5,-12(fp)
     bc8:	e1bfff17 	ldw	r6,-4(fp)
     bcc:	0000f440 	call	f44 <prvTestWaitCondition>
     bd0:	1005003a 	cmpeq	r2,r2,zero
     bd4:	10000a1e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
				{
					if( xClearOnExit != pdFALSE )
     bd8:	e0bffe17 	ldw	r2,-8(fp)
     bdc:	1005003a 	cmpeq	r2,r2,zero
     be0:	1000071e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     be4:	e0bffb17 	ldw	r2,-20(fp)
     be8:	10c00017 	ldw	r3,0(r2)
     bec:	e0bffd17 	ldw	r2,-12(fp)
     bf0:	0084303a 	nor	r2,zero,r2
     bf4:	1886703a 	and	r3,r3,r2
     bf8:	e0bffb17 	ldw	r2,-20(fp)
     bfc:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     c00:	00041680 	call	4168 <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     c04:	e03ff615 	stw	zero,-40(fp)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     c08:	e0bffa17 	ldw	r2,-24(fp)
     c0c:	00c04034 	movhi	r3,256
     c10:	18ffffc4 	addi	r3,r3,-1
     c14:	10c4703a 	and	r2,r2,r3
     c18:	e0bffa15 	stw	r2,-24(fp)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     c1c:	e0bffa17 	ldw	r2,-24(fp)
}
     c20:	e037883a 	mov	sp,fp
     c24:	dfc00117 	ldw	ra,4(sp)
     c28:	df000017 	ldw	fp,0(sp)
     c2c:	dec00204 	addi	sp,sp,8
     c30:	f800283a 	ret

00000c34 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     c34:	defffa04 	addi	sp,sp,-24
     c38:	dfc00515 	stw	ra,20(sp)
     c3c:	df000415 	stw	fp,16(sp)
     c40:	df000404 	addi	fp,sp,16
     c44:	e13ffe15 	stw	r4,-8(fp)
     c48:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     c4c:	e0bffe17 	ldw	r2,-8(fp)
     c50:	e0bffd15 	stw	r2,-12(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     c54:	00041140 	call	4114 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     c58:	e0bffd17 	ldw	r2,-12(fp)
     c5c:	10800017 	ldw	r2,0(r2)
     c60:	e0bffc15 	stw	r2,-16(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	10c00017 	ldw	r3,0(r2)
     c6c:	e0bfff17 	ldw	r2,-4(fp)
     c70:	0084303a 	nor	r2,zero,r2
     c74:	1886703a 	and	r3,r3,r2
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
     c80:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
     c84:	e0bffc17 	ldw	r2,-16(fp)
}
     c88:	e037883a 	mov	sp,fp
     c8c:	dfc00117 	ldw	ra,4(sp)
     c90:	df000017 	ldw	fp,0(sp)
     c94:	dec00204 	addi	sp,sp,8
     c98:	f800283a 	ret

00000c9c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     c9c:	defffb04 	addi	sp,sp,-20
     ca0:	df000415 	stw	fp,16(sp)
     ca4:	df000404 	addi	fp,sp,16
     ca8:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	e0bffd15 	stw	r2,-12(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     cb4:	e03ffe15 	stw	zero,-8(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10800017 	ldw	r2,0(r2)
     cc0:	e0bffc15 	stw	r2,-16(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     cc4:	e0bffc17 	ldw	r2,-16(fp)
}
     cc8:	e037883a 	mov	sp,fp
     ccc:	df000017 	ldw	fp,0(sp)
     cd0:	dec00104 	addi	sp,sp,4
     cd4:	f800283a 	ret

00000cd8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cd8:	defff304 	addi	sp,sp,-52
     cdc:	dfc00c15 	stw	ra,48(sp)
     ce0:	df000b15 	stw	fp,44(sp)
     ce4:	df000b04 	addi	fp,sp,44
     ce8:	e13ffe15 	stw	r4,-8(fp)
     cec:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     cf0:	e03ff915 	stw	zero,-28(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cf4:	e0bffe17 	ldw	r2,-8(fp)
     cf8:	e0bff615 	stw	r2,-40(fp)
BaseType_t xMatchFound = pdFALSE;
     cfc:	e03ff515 	stw	zero,-44(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     d00:	e0bff617 	ldw	r2,-40(fp)
     d04:	10800104 	addi	r2,r2,4
     d08:	e0bffa15 	stw	r2,-24(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	10800204 	addi	r2,r2,8
     d14:	e0bffb15 	stw	r2,-20(fp)
	vTaskSuspendAll();
     d18:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     d1c:	e0bffa17 	ldw	r2,-24(fp)
     d20:	10800317 	ldw	r2,12(r2)
     d24:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     d28:	e0bff617 	ldw	r2,-40(fp)
     d2c:	10c00017 	ldw	r3,0(r2)
     d30:	e0bfff17 	ldw	r2,-4(fp)
     d34:	1886b03a 	or	r3,r3,r2
     d38:	e0bff617 	ldw	r2,-40(fp)
     d3c:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     d40:	00003606 	br	e1c <xEventGroupSetBits+0x144>
		{
			pxNext = listGET_NEXT( pxListItem );
     d44:	e0bffd17 	ldw	r2,-12(fp)
     d48:	10800117 	ldw	r2,4(r2)
     d4c:	e0bffc15 	stw	r2,-16(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800017 	ldw	r2,0(r2)
     d58:	e0bff815 	stw	r2,-32(fp)
			xMatchFound = pdFALSE;
     d5c:	e03ff515 	stw	zero,-44(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     d60:	e0bff817 	ldw	r2,-32(fp)
     d64:	10bfc02c 	andhi	r2,r2,65280
     d68:	e0bff715 	stw	r2,-36(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d6c:	e0fff817 	ldw	r3,-32(fp)
     d70:	00804034 	movhi	r2,256
     d74:	10bfffc4 	addi	r2,r2,-1
     d78:	1884703a 	and	r2,r3,r2
     d7c:	e0bff815 	stw	r2,-32(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d80:	e0bff717 	ldw	r2,-36(fp)
     d84:	1081002c 	andhi	r2,r2,1024
     d88:	1004c03a 	cmpne	r2,r2,zero
     d8c:	1000091e 	bne	r2,zero,db4 <xEventGroupSetBits+0xdc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     d90:	e0bff617 	ldw	r2,-40(fp)
     d94:	10c00017 	ldw	r3,0(r2)
     d98:	e0bff817 	ldw	r2,-32(fp)
     d9c:	1884703a 	and	r2,r3,r2
     da0:	1005003a 	cmpeq	r2,r2,zero
     da4:	10000b1e 	bne	r2,zero,dd4 <xEventGroupSetBits+0xfc>
				{
					xMatchFound = pdTRUE;
     da8:	00800044 	movi	r2,1
     dac:	e0bff515 	stw	r2,-44(fp)
     db0:	00000806 	br	dd4 <xEventGroupSetBits+0xfc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     db4:	e0bff617 	ldw	r2,-40(fp)
     db8:	10c00017 	ldw	r3,0(r2)
     dbc:	e0bff817 	ldw	r2,-32(fp)
     dc0:	1886703a 	and	r3,r3,r2
     dc4:	e0bff817 	ldw	r2,-32(fp)
     dc8:	1880021e 	bne	r3,r2,dd4 <xEventGroupSetBits+0xfc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     dcc:	00800044 	movi	r2,1
     dd0:	e0bff515 	stw	r2,-44(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     dd4:	e0bff517 	ldw	r2,-44(fp)
     dd8:	1005003a 	cmpeq	r2,r2,zero
     ddc:	10000d1e 	bne	r2,zero,e14 <xEventGroupSetBits+0x13c>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     de0:	e0bff717 	ldw	r2,-36(fp)
     de4:	1080402c 	andhi	r2,r2,256
     de8:	1005003a 	cmpeq	r2,r2,zero
     dec:	1000041e 	bne	r2,zero,e00 <xEventGroupSetBits+0x128>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     df0:	e0bff917 	ldw	r2,-28(fp)
     df4:	e0fff817 	ldw	r3,-32(fp)
     df8:	10c4b03a 	or	r2,r2,r3
     dfc:	e0bff915 	stw	r2,-28(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e00:	e0bff617 	ldw	r2,-40(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	11408034 	orhi	r5,r2,512
     e0c:	e13ffd17 	ldw	r4,-12(fp)
     e10:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     e14:	e0bffc17 	ldw	r2,-16(fp)
     e18:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     e1c:	e0fffd17 	ldw	r3,-12(fp)
     e20:	e0bffb17 	ldw	r2,-20(fp)
     e24:	18bfc71e 	bne	r3,r2,d44 <xEventGroupSetBits+0x6c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     e28:	e0bff617 	ldw	r2,-40(fp)
     e2c:	10c00017 	ldw	r3,0(r2)
     e30:	e0bff917 	ldw	r2,-28(fp)
     e34:	0084303a 	nor	r2,zero,r2
     e38:	1886703a 	and	r3,r3,r2
     e3c:	e0bff617 	ldw	r2,-40(fp)
     e40:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
     e44:	00030180 	call	3018 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     e48:	e0bff617 	ldw	r2,-40(fp)
     e4c:	10800017 	ldw	r2,0(r2)
}
     e50:	e037883a 	mov	sp,fp
     e54:	dfc00117 	ldw	ra,4(sp)
     e58:	df000017 	ldw	fp,0(sp)
     e5c:	dec00204 	addi	sp,sp,8
     e60:	f800283a 	ret

00000e64 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     e64:	defffb04 	addi	sp,sp,-20
     e68:	dfc00415 	stw	ra,16(sp)
     e6c:	df000315 	stw	fp,12(sp)
     e70:	df000304 	addi	fp,sp,12
     e74:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     e78:	e0bfff17 	ldw	r2,-4(fp)
     e7c:	e0bffe15 	stw	r2,-8(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	10800104 	addi	r2,r2,4
     e88:	e0bffd15 	stw	r2,-12(fp)

	vTaskSuspendAll();
     e8c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     e90:	00000406 	br	ea4 <vEventGroupDelete+0x40>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     e94:	e0bffd17 	ldw	r2,-12(fp)
     e98:	11000317 	ldw	r4,12(r2)
     e9c:	01408034 	movhi	r5,512
     ea0:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	1004c03a 	cmpne	r2,r2,zero
     eb0:	103ff81e 	bne	r2,zero,e94 <vEventGroupDelete+0x30>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
     eb4:	e13ffe17 	ldw	r4,-8(fp)
     eb8:	00011500 	call	1150 <vPortFree>
	}
	( void ) xTaskResumeAll();
     ebc:	00030180 	call	3018 <xTaskResumeAll>
}
     ec0:	e037883a 	mov	sp,fp
     ec4:	dfc00117 	ldw	ra,4(sp)
     ec8:	df000017 	ldw	fp,0(sp)
     ecc:	dec00204 	addi	sp,sp,8
     ed0:	f800283a 	ret

00000ed4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     ed4:	defffc04 	addi	sp,sp,-16
     ed8:	dfc00315 	stw	ra,12(sp)
     edc:	df000215 	stw	fp,8(sp)
     ee0:	df000204 	addi	fp,sp,8
     ee4:	e13ffe15 	stw	r4,-8(fp)
     ee8:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     eec:	e13ffe17 	ldw	r4,-8(fp)
     ef0:	e17fff17 	ldw	r5,-4(fp)
     ef4:	0000cd80 	call	cd8 <xEventGroupSetBits>
}
     ef8:	e037883a 	mov	sp,fp
     efc:	dfc00117 	ldw	ra,4(sp)
     f00:	df000017 	ldw	fp,0(sp)
     f04:	dec00204 	addi	sp,sp,8
     f08:	f800283a 	ret

00000f0c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     f0c:	defffc04 	addi	sp,sp,-16
     f10:	dfc00315 	stw	ra,12(sp)
     f14:	df000215 	stw	fp,8(sp)
     f18:	df000204 	addi	fp,sp,8
     f1c:	e13ffe15 	stw	r4,-8(fp)
     f20:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     f24:	e13ffe17 	ldw	r4,-8(fp)
     f28:	e17fff17 	ldw	r5,-4(fp)
     f2c:	0000c340 	call	c34 <xEventGroupClearBits>
}
     f30:	e037883a 	mov	sp,fp
     f34:	dfc00117 	ldw	ra,4(sp)
     f38:	df000017 	ldw	fp,0(sp)
     f3c:	dec00204 	addi	sp,sp,8
     f40:	f800283a 	ret

00000f44 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     f44:	defffb04 	addi	sp,sp,-20
     f48:	df000415 	stw	fp,16(sp)
     f4c:	df000404 	addi	fp,sp,16
     f50:	e13ffd15 	stw	r4,-12(fp)
     f54:	e17ffe15 	stw	r5,-8(fp)
     f58:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
     f5c:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
     f60:	e0bfff17 	ldw	r2,-4(fp)
     f64:	1004c03a 	cmpne	r2,r2,zero
     f68:	1000081e 	bne	r2,zero,f8c <prvTestWaitCondition+0x48>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f6c:	e0fffd17 	ldw	r3,-12(fp)
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	1884703a 	and	r2,r3,r2
     f78:	1005003a 	cmpeq	r2,r2,zero
     f7c:	10000a1e 	bne	r2,zero,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     f80:	00800044 	movi	r2,1
     f84:	e0bffc15 	stw	r2,-16(fp)
     f88:	00000706 	br	fa8 <prvTestWaitCondition+0x64>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     f8c:	e0fffd17 	ldw	r3,-12(fp)
     f90:	e0bffe17 	ldw	r2,-8(fp)
     f94:	1886703a 	and	r3,r3,r2
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	1880021e 	bne	r3,r2,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     fa0:	00800044 	movi	r2,1
     fa4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     fa8:	e0bffc17 	ldw	r2,-16(fp)
}
     fac:	e037883a 	mov	sp,fp
     fb0:	df000017 	ldw	fp,0(sp)
     fb4:	dec00104 	addi	sp,sp,4
     fb8:	f800283a 	ret

00000fbc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fbc:	defff904 	addi	sp,sp,-28
     fc0:	dfc00615 	stw	ra,24(sp)
     fc4:	df000515 	stw	fp,20(sp)
     fc8:	df000504 	addi	fp,sp,20
     fcc:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     fd0:	e03ffb15 	stw	zero,-20(fp)

        vTaskSuspendAll();
     fd4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
        {
                /* If this is the first call to malloc then the heap will require
                initialisation to setup the list of free blocks. */
                if( pxEnd == NULL )
     fd8:	d0a02517 	ldw	r2,-32620(gp)
     fdc:	1004c03a 	cmpne	r2,r2,zero
     fe0:	1000011e 	bne	r2,zero,fe8 <pvPortMalloc+0x2c>
                {
                        prvHeapInit();
     fe4:	000120c0 	call	120c <prvHeapInit>
                }

                /* The wanted size is increased so it can contain a xBlockLink
                structure in addition to the requested amount of bytes. */
                if( xWantedSize > 0 )
     fe8:	e0bfff17 	ldw	r2,-4(fp)
     fec:	1005003a 	cmpeq	r2,r2,zero
     ff0:	10000e1e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                {
                        xWantedSize += heapSTRUCT_SIZE;
     ff4:	d0a0000b 	ldhu	r2,-32768(gp)
     ff8:	10ffffcc 	andi	r3,r2,65535
     ffc:	e0bfff17 	ldw	r2,-4(fp)
    1000:	10c5883a 	add	r2,r2,r3
    1004:	e0bfff15 	stw	r2,-4(fp)

                        /* Ensure that blocks are always aligned to the required number of
                        bytes. */
                        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1008:	e0bfff17 	ldw	r2,-4(fp)
    100c:	108000cc 	andi	r2,r2,3
    1010:	1005003a 	cmpeq	r2,r2,zero
    1014:	1000051e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                        {
                                /* Byte alignment required. */
                                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1018:	e0ffff17 	ldw	r3,-4(fp)
    101c:	00bfff04 	movi	r2,-4
    1020:	1884703a 	and	r2,r3,r2
    1024:	10800104 	addi	r2,r2,4
    1028:	e0bfff15 	stw	r2,-4(fp)
                        }
                }

                if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
    102c:	e0bfff17 	ldw	r2,-4(fp)
    1030:	1005003a 	cmpeq	r2,r2,zero
    1034:	10003f1e 	bne	r2,zero,1134 <pvPortMalloc+0x178>
    1038:	d0e00117 	ldw	r3,-32764(gp)
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	10c03c2e 	bgeu	r2,r3,1134 <pvPortMalloc+0x178>
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
    1044:	d0a02604 	addi	r2,gp,-32616
    1048:	e0bffd15 	stw	r2,-12(fp)
                        pxBlock = xStart.pxNextFreeBlock;
    104c:	d0a02617 	ldw	r2,-32616(gp)
    1050:	e0bffe15 	stw	r2,-8(fp)
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1054:	00000506 	br	106c <pvPortMalloc+0xb0>
                        {
                                pxPreviousBlock = pxBlock;
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	e0bffd15 	stw	r2,-12(fp)
                                pxBlock = pxBlock->pxNextFreeBlock;
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10800017 	ldw	r2,0(r2)
    1068:	e0bffe15 	stw	r2,-8(fp)
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
                        pxBlock = xStart.pxNextFreeBlock;
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10c00117 	ldw	r3,4(r2)
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	1880042e 	bgeu	r3,r2,108c <pvPortMalloc+0xd0>
    107c:	e0bffe17 	ldw	r2,-8(fp)
    1080:	10800017 	ldw	r2,0(r2)
    1084:	1004c03a 	cmpne	r2,r2,zero
    1088:	103ff31e 	bne	r2,zero,1058 <pvPortMalloc+0x9c>
                                pxBlock = pxBlock->pxNextFreeBlock;
                        }

                        /* If the end marker was reached then a block of adequate size was
                        not found. */
                        if( pxBlock != pxEnd )
    108c:	d0e02517 	ldw	r3,-32620(gp)
    1090:	e0bffe17 	ldw	r2,-8(fp)
    1094:	10c02726 	beq	r2,r3,1134 <pvPortMalloc+0x178>
                        {
                                /* Return the memory space - jumping over the xBlockLink structure
                                at its start. */
                                pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1098:	e0bffd17 	ldw	r2,-12(fp)
    109c:	10800017 	ldw	r2,0(r2)
    10a0:	1007883a 	mov	r3,r2
    10a4:	d0a0000b 	ldhu	r2,-32768(gp)
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	1885883a 	add	r2,r3,r2
    10b0:	e0bffb15 	stw	r2,-20(fp)

                                /* This block is being returned for use so must be taken out of
                                the     list of free blocks. */
                                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10b4:	e0bffe17 	ldw	r2,-8(fp)
    10b8:	10c00017 	ldw	r3,0(r2)
    10bc:	e0bffd17 	ldw	r2,-12(fp)
    10c0:	10c00015 	stw	r3,0(r2)

                                /* If the block is larger than required it can be split into two. */
                                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10c4:	e0bffe17 	ldw	r2,-8(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1887c83a 	sub	r3,r3,r2
    10d4:	d0a0000b 	ldhu	r2,-32768(gp)
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c00f2e 	bgeu	r2,r3,1120 <pvPortMalloc+0x164>
                                {
                                        /* This block is to be split into two.  Create a new block
                                        following the number of bytes requested. The void cast is
                                        used to prevent byte alignment warnings from the compiler. */
                                        pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e4:	e0fffe17 	ldw	r3,-8(fp)
    10e8:	e0bfff17 	ldw	r2,-4(fp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	e0bffc15 	stw	r2,-16(fp)

                                        /* Calculate the sizes of two blocks split from the single
                                        block. */
                                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10f4:	e0bffe17 	ldw	r2,-8(fp)
    10f8:	10c00117 	ldw	r3,4(r2)
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1887c83a 	sub	r3,r3,r2
    1104:	e0bffc17 	ldw	r2,-16(fp)
    1108:	10c00115 	stw	r3,4(r2)
                                        pxBlock->xBlockSize = xWantedSize;
    110c:	e0fffe17 	ldw	r3,-8(fp)
    1110:	e0bfff17 	ldw	r2,-4(fp)
    1114:	18800115 	stw	r2,4(r3)

                                        /* Insert the new block into the list of free blocks. */
                                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1118:	e13ffc17 	ldw	r4,-16(fp)
    111c:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                                }

                                xFreeBytesRemaining -= pxBlock->xBlockSize;
    1120:	d0e00217 	ldw	r3,-32760(gp)
    1124:	e0bffe17 	ldw	r2,-8(fp)
    1128:	10800117 	ldw	r2,4(r2)
    112c:	1885c83a 	sub	r2,r3,r2
    1130:	d0a00215 	stw	r2,-32760(gp)
                        }
                }
        }
        xTaskResumeAll();
    1134:	00030180 	call	3018 <xTaskResumeAll>
                        vApplicationMallocFailedHook();
                }
        }
        #endif

        return pvReturn;
    1138:	e0bffb17 	ldw	r2,-20(fp)
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1150:	defffb04 	addi	sp,sp,-20
    1154:	dfc00415 	stw	ra,16(sp)
    1158:	df000315 	stw	fp,12(sp)
    115c:	df000304 	addi	fp,sp,12
    1160:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	e0bffe15 	stw	r2,-8(fp)
xBlockLink *pxLink;

        if( pv != NULL )
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	1005003a 	cmpeq	r2,r2,zero
    1174:	1000111e 	bne	r2,zero,11bc <vPortFree+0x6c>
        {
                /* The memory being freed will have an xBlockLink structure immediately
                before it. */
                puc -= heapSTRUCT_SIZE;
    1178:	d0a0000b 	ldhu	r2,-32768(gp)
    117c:	10bfffcc 	andi	r2,r2,65535
    1180:	1007883a 	mov	r3,r2
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10c5c83a 	sub	r2,r2,r3
    118c:	e0bffe15 	stw	r2,-8(fp)

                /* This casting is to keep the compiler from issuing warnings. */
                pxLink = ( void * ) puc;
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	e0bffd15 	stw	r2,-12(fp)

                vTaskSuspendAll();
    1198:	0002ff00 	call	2ff0 <vTaskSuspendAll>
                {
                        /* Add this block to the list of free blocks. */
                        xFreeBytesRemaining += pxLink->xBlockSize;
    119c:	e0bffd17 	ldw	r2,-12(fp)
    11a0:	10c00117 	ldw	r3,4(r2)
    11a4:	d0a00217 	ldw	r2,-32760(gp)
    11a8:	1885883a 	add	r2,r3,r2
    11ac:	d0a00215 	stw	r2,-32760(gp)
                        prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    11b0:	e13ffd17 	ldw	r4,-12(fp)
    11b4:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                }
                xTaskResumeAll();
    11b8:	00030180 	call	3018 <xTaskResumeAll>
        }
}
    11bc:	e037883a 	mov	sp,fp
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
    11cc:	f800283a 	ret

000011d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	df000015 	stw	fp,0(sp)
    11d8:	d839883a 	mov	fp,sp
        return xFreeBytesRemaining;
    11dc:	d0a00217 	ldw	r2,-32760(gp)
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	df000017 	ldw	fp,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	df000015 	stw	fp,0(sp)
    11f8:	d839883a 	mov	fp,sp
        /* This just exists to keep the linker quiet. */
}
    11fc:	e037883a 	mov	sp,fp
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00104 	addi	sp,sp,4
    1208:	f800283a 	ret

0000120c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    120c:	defffd04 	addi	sp,sp,-12
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
        /* Ensure the start of the heap is aligned. */
        configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

        /* xStart is used to hold a pointer to the first item in the list of free
        blocks.  The void cast is used to prevent compiler warnings. */
        xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
    1218:	00820034 	movhi	r2,2048
    121c:	108a1204 	addi	r2,r2,10312
    1220:	d0a02615 	stw	r2,-32616(gp)
        xStart.xBlockSize = ( size_t ) 0;
    1224:	00820034 	movhi	r2,2048
    1228:	1089d704 	addi	r2,r2,10076
    122c:	10000015 	stw	zero,0(r2)

        /* pxEnd is used to mark the end of the list of free blocks and is inserted
        at the end of the heap space. */
        pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
    1230:	d0a00117 	ldw	r2,-32764(gp)
    1234:	1007883a 	mov	r3,r2
    1238:	00820034 	movhi	r2,2048
    123c:	108a1204 	addi	r2,r2,10312
    1240:	1885883a 	add	r2,r3,r2
    1244:	e0bffe15 	stw	r2,-8(fp)
        pucHeapEnd -= heapSTRUCT_SIZE;
    1248:	d0a0000b 	ldhu	r2,-32768(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	1007883a 	mov	r3,r2
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	10c5c83a 	sub	r2,r2,r3
    125c:	e0bffe15 	stw	r2,-8(fp)
        pxEnd = ( void * ) pucHeapEnd;
    1260:	e0bffe17 	ldw	r2,-8(fp)
    1264:	d0a02515 	stw	r2,-32620(gp)
        configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
        pxEnd->xBlockSize = 0;
    1268:	d0a02517 	ldw	r2,-32620(gp)
    126c:	10000115 	stw	zero,4(r2)
        pxEnd->pxNextFreeBlock = NULL;
    1270:	d0a02517 	ldw	r2,-32620(gp)
    1274:	10000015 	stw	zero,0(r2)

        /* To start with there is a single free block that is sized to take up the
        entire heap space, minus the space taken by pxEnd. */
        pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
    1278:	00820034 	movhi	r2,2048
    127c:	108a1204 	addi	r2,r2,10312
    1280:	e0bfff15 	stw	r2,-4(fp)
        pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
    1284:	d0e00117 	ldw	r3,-32764(gp)
    1288:	d0a0000b 	ldhu	r2,-32768(gp)
    128c:	10bfffcc 	andi	r2,r2,65535
    1290:	1887c83a 	sub	r3,r3,r2
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10c00115 	stw	r3,4(r2)
        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129c:	d0e02517 	ldw	r3,-32620(gp)
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00015 	stw	r3,0(r2)

        /* The heap now contains pxEnd. */
        xFreeBytesRemaining -= heapSTRUCT_SIZE;
    12a8:	d0e00217 	ldw	r3,-32760(gp)
    12ac:	d0a0000b 	ldhu	r2,-32768(gp)
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	d0a00215 	stw	r2,-32760(gp)
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	df000017 	ldw	fp,0(sp)
    12c4:	dec00104 	addi	sp,sp,4
    12c8:	f800283a 	ret

000012cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
    12cc:	defffc04 	addi	sp,sp,-16
    12d0:	df000315 	stw	fp,12(sp)
    12d4:	df000304 	addi	fp,sp,12
    12d8:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxIterator;
unsigned char *puc;

        /* Iterate through the list until a block is found that has a higher address
        than the block being inserted. */
        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12dc:	d0a02604 	addi	r2,gp,-32616
    12e0:	e0bffe15 	stw	r2,-8(fp)
    12e4:	00000306 	br	12f4 <prvInsertBlockIntoFreeList+0x28>
    12e8:	e0bffe17 	ldw	r2,-8(fp)
    12ec:	10800017 	ldw	r2,0(r2)
    12f0:	e0bffe15 	stw	r2,-8(fp)
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10c00017 	ldw	r3,0(r2)
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	18bff936 	bltu	r3,r2,12e8 <prvInsertBlockIntoFreeList+0x1c>
                /* Nothing to do here, just iterate to the right position. */
        }

        /* Do the block being inserted, and the block it is being inserted after
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxIterator;
    1304:	e0bffe17 	ldw	r2,-8(fp)
    1308:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	10800117 	ldw	r2,4(r2)
    1314:	1007883a 	mov	r3,r2
    1318:	e0bffd17 	ldw	r2,-12(fp)
    131c:	1887883a 	add	r3,r3,r2
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	1880091e 	bne	r3,r2,134c <prvInsertBlockIntoFreeList+0x80>
        {
                pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1328:	e0bffe17 	ldw	r2,-8(fp)
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800117 	ldw	r2,4(r2)
    1338:	1887883a 	add	r3,r3,r2
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	10c00115 	stw	r3,4(r2)
                pxBlockToInsert = pxIterator;
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Do the block being inserted, and the block it is being inserted before
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxBlockToInsert;
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10800117 	ldw	r2,4(r2)
    135c:	1007883a 	mov	r3,r2
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	1887883a 	add	r3,r3,r2
    1368:	e0bffe17 	ldw	r2,-8(fp)
    136c:	10800017 	ldw	r2,0(r2)
    1370:	1880161e 	bne	r3,r2,13cc <prvInsertBlockIntoFreeList+0x100>
        {
                if( pxIterator->pxNextFreeBlock != pxEnd )
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	10c00017 	ldw	r3,0(r2)
    137c:	d0a02517 	ldw	r2,-32620(gp)
    1380:	18800e26 	beq	r3,r2,13bc <prvInsertBlockIntoFreeList+0xf0>
                {
                        /* Form one big block from the two blocks. */
                        pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c00117 	ldw	r3,4(r2)
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	10800017 	ldw	r2,0(r2)
    1394:	10800117 	ldw	r2,4(r2)
    1398:	1887883a 	add	r3,r3,r2
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	10c00115 	stw	r3,4(r2)
                        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10800017 	ldw	r2,0(r2)
    13ac:	10c00017 	ldw	r3,0(r2)
    13b0:	e0bfff17 	ldw	r2,-4(fp)
    13b4:	10c00015 	stw	r3,0(r2)
    13b8:	00000806 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
                else
                {
                        pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13bc:	d0e02517 	ldw	r3,-32620(gp)
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10c00015 	stw	r3,0(r2)
    13c8:	00000406 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
        }
        else
        {
                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	10c00017 	ldw	r3,0(r2)
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10c00015 	stw	r3,0(r2)

        /* If the block being inserted plugged a gab, so was merged with the block
        before and the block after, then it's pxNextFreeBlock pointer will have
        already been set, and should not be set here as that would make it point
        to itself. */
        if( pxIterator != pxBlockToInsert )
    13dc:	e0fffe17 	ldw	r3,-8(fp)
    13e0:	e0bfff17 	ldw	r2,-4(fp)
    13e4:	18800326 	beq	r3,r2,13f4 <prvInsertBlockIntoFreeList+0x128>
        {
                pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e8:	e0fffe17 	ldw	r3,-8(fp)
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	18800015 	stw	r2,0(r3)
        }
}
    13f4:	e037883a 	mov	sp,fp
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00104 	addi	sp,sp,4
    1400:	f800283a 	ret

00001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1404:	defffe04 	addi	sp,sp,-8
    1408:	df000115 	stw	fp,4(sp)
    140c:	df000104 	addi	fp,sp,4
    1410:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	10800204 	addi	r2,r2,8
    141c:	1007883a 	mov	r3,r2
    1420:	e0bfff17 	ldw	r2,-4(fp)
    1424:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1428:	e0ffff17 	ldw	r3,-4(fp)
    142c:	00bfffc4 	movi	r2,-1
    1430:	18800215 	stw	r2,8(r3)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800204 	addi	r2,r2,8
    143c:	1007883a 	mov	r3,r2
    1440:	e0bfff17 	ldw	r2,-4(fp)
    1444:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10800204 	addi	r2,r2,8
    1450:	1007883a 	mov	r3,r2
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    145c:	e0bfff17 	ldw	r2,-4(fp)
    1460:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1464:	e037883a 	mov	sp,fp
    1468:	df000017 	ldw	fp,0(sp)
    146c:	dec00104 	addi	sp,sp,4
    1470:	f800283a 	ret

00001474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1474:	defffe04 	addi	sp,sp,-8
    1478:	df000115 	stw	fp,4(sp)
    147c:	df000104 	addi	fp,sp,4
    1480:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1484:	e0bfff17 	ldw	r2,-4(fp)
    1488:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    148c:	e037883a 	mov	sp,fp
    1490:	df000017 	ldw	fp,0(sp)
    1494:	dec00104 	addi	sp,sp,4
    1498:	f800283a 	ret

0000149c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    149c:	defffc04 	addi	sp,sp,-16
    14a0:	df000315 	stw	fp,12(sp)
    14a4:	df000304 	addi	fp,sp,12
    14a8:	e13ffe15 	stw	r4,-8(fp)
    14ac:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	10800117 	ldw	r2,4(r2)
    14b8:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14bc:	e0ffff17 	ldw	r3,-4(fp)
    14c0:	e0bffd17 	ldw	r2,-12(fp)
    14c4:	18800115 	stw	r2,4(r3)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c8:	e0bffd17 	ldw	r2,-12(fp)
    14cc:	10c00217 	ldw	r3,8(r2)
    14d0:	e0bfff17 	ldw	r2,-4(fp)
    14d4:	10c00215 	stw	r3,8(r2)
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	10c00217 	ldw	r3,8(r2)
    14e0:	e0bfff17 	ldw	r2,-4(fp)
    14e4:	18800115 	stw	r2,4(r3)
	pxIndex->pxPrevious = pxNewListItem;
    14e8:	e0fffd17 	ldw	r3,-12(fp)
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	18800215 	stw	r2,8(r3)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14f4:	e0ffff17 	ldw	r3,-4(fp)
    14f8:	e0bffe17 	ldw	r2,-8(fp)
    14fc:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	10800017 	ldw	r2,0(r2)
    1508:	10c00044 	addi	r3,r2,1
    150c:	e0bffe17 	ldw	r2,-8(fp)
    1510:	10c00015 	stw	r3,0(r2)
}
    1514:	e037883a 	mov	sp,fp
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	defffb04 	addi	sp,sp,-20
    1528:	df000415 	stw	fp,16(sp)
    152c:	df000404 	addi	fp,sp,16
    1530:	e13ffe15 	stw	r4,-8(fp)
    1534:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	e0bffc15 	stw	r2,-16(fp)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1544:	e0bffc17 	ldw	r2,-16(fp)
    1548:	10bfffd8 	cmpnei	r2,r2,-1
    154c:	1000041e 	bne	r2,zero,1560 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800417 	ldw	r2,16(r2)
    1558:	e0bffd15 	stw	r2,-12(fp)
    155c:	00000c06 	br	1590 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10800204 	addi	r2,r2,8
    1568:	e0bffd15 	stw	r2,-12(fp)
    156c:	00000306 	br	157c <vListInsert+0x58>
    1570:	e0bffd17 	ldw	r2,-12(fp)
    1574:	10800117 	ldw	r2,4(r2)
    1578:	e0bffd15 	stw	r2,-12(fp)
    157c:	e0bffd17 	ldw	r2,-12(fp)
    1580:	10800117 	ldw	r2,4(r2)
    1584:	10c00017 	ldw	r3,0(r2)
    1588:	e0bffc17 	ldw	r2,-16(fp)
    158c:	10fff82e 	bgeu	r2,r3,1570 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1590:	e0bffd17 	ldw	r2,-12(fp)
    1594:	10c00117 	ldw	r3,4(r2)
    1598:	e0bfff17 	ldw	r2,-4(fp)
    159c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c00117 	ldw	r3,4(r2)
    15a8:	e0bfff17 	ldw	r2,-4(fp)
    15ac:	18800215 	stw	r2,8(r3)
	pxNewListItem->pxPrevious = pxIterator;
    15b0:	e0ffff17 	ldw	r3,-4(fp)
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	18800215 	stw	r2,8(r3)
	pxIterator->pxNext = pxNewListItem;
    15bc:	e0fffd17 	ldw	r3,-12(fp)
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	18800115 	stw	r2,4(r3)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15c8:	e0ffff17 	ldw	r3,-4(fp)
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	10c00044 	addi	r3,r2,1
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00015 	stw	r3,0(r2)
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	df000017 	ldw	fp,0(sp)
    15f0:	dec00104 	addi	sp,sp,4
    15f4:	f800283a 	ret

000015f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15f8:	defffd04 	addi	sp,sp,-12
    15fc:	df000215 	stw	fp,8(sp)
    1600:	df000204 	addi	fp,sp,8
    1604:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	10800417 	ldw	r2,16(r2)
    1610:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1614:	e0bfff17 	ldw	r2,-4(fp)
    1618:	10c00117 	ldw	r3,4(r2)
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	10800217 	ldw	r2,8(r2)
    1624:	18800215 	stw	r2,8(r3)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1628:	e0bfff17 	ldw	r2,-4(fp)
    162c:	10c00217 	ldw	r3,8(r2)
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	10800117 	ldw	r2,4(r2)
    1638:	18800115 	stw	r2,4(r3)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	10c00117 	ldw	r3,4(r2)
    1644:	e0bfff17 	ldw	r2,-4(fp)
    1648:	1880041e 	bne	r3,r2,165c <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    164c:	e0bfff17 	ldw	r2,-4(fp)
    1650:	10c00217 	ldw	r3,8(r2)
    1654:	e0bffe17 	ldw	r2,-8(fp)
    1658:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    165c:	e0bfff17 	ldw	r2,-4(fp)
    1660:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	10800017 	ldw	r2,0(r2)
    166c:	10ffffc4 	addi	r3,r2,-1
    1670:	e0bffe17 	ldw	r2,-8(fp)
    1674:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10800017 	ldw	r2,0(r2)
}
    1680:	e037883a 	mov	sp,fp
    1684:	df000017 	ldw	fp,0(sp)
    1688:	dec00104 	addi	sp,sp,4
    168c:	f800283a 	ret

00001690 <vApplicationStackOverflowHook>:
#define configTICK_RATE_HZ 1000
#define configCPU_CLOCK_HZ TIMER1MS_FREQ
#define SYS_CLK_IRQ TIMER1MS_IRQ
//stack overflow hook
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName )
{
    1690:	defffc04 	addi	sp,sp,-16
    1694:	dfc00315 	stw	ra,12(sp)
    1698:	df000215 	stw	fp,8(sp)
    169c:	df000204 	addi	fp,sp,8
    16a0:	e13ffe15 	stw	r4,-8(fp)
    16a4:	e17fff15 	stw	r5,-4(fp)
	printf("[free_rtos] Application stack overflow at task: %s\n", pcTaskName);
    16a8:	01020034 	movhi	r4,2048
    16ac:	21000004 	addi	r4,r4,0
    16b0:	e17fff17 	ldw	r5,-4(fp)
    16b4:	000745c0 	call	745c <printf>
}
    16b8:	e037883a 	mov	sp,fp
    16bc:	dfc00117 	ldw	ra,4(sp)
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00204 	addi	sp,sp,8
    16c8:	f800283a 	ret

000016cc <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
    16cc:	defffe04 	addi	sp,sp,-8
    16d0:	df000115 	stw	fp,4(sp)
    16d4:	df000104 	addi	fp,sp,4
    16d8:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	16800015 	stw	gp,0(r2)
}
    16e4:	e037883a 	mov	sp,fp
    16e8:	df000017 	ldw	fp,0(sp)
    16ec:	dec00104 	addi	sp,sp,4
    16f0:	f800283a 	ret

000016f4 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
    16f4:	defff904 	addi	sp,sp,-28
    16f8:	dfc00615 	stw	ra,24(sp)
    16fc:	df000515 	stw	fp,20(sp)
    1700:	df000504 	addi	fp,sp,20
    1704:	e13ffd15 	stw	r4,-12(fp)
    1708:	e17ffe15 	stw	r5,-8(fp)
    170c:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
    1710:	e0bffd17 	ldw	r2,-12(fp)
    1714:	10bfff04 	addi	r2,r2,-4
    1718:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
    171c:	e13ffc04 	addi	r4,fp,-16
    1720:	00016cc0 	call	16cc <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    1724:	e0fffd17 	ldw	r3,-12(fp)
    1728:	00b7abb4 	movhi	r2,57006
    172c:	10afbbc4 	addi	r2,r2,-16657
    1730:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
    1734:	e0bffd17 	ldw	r2,-12(fp)
    1738:	10bfff04 	addi	r2,r2,-4
    173c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
    1740:	e0bffb17 	ldw	r2,-20(fp)
    1744:	1007883a 	mov	r3,r2
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1750:	e0bffd17 	ldw	r2,-12(fp)
    1754:	10bfff04 	addi	r2,r2,-4
    1758:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
    175c:	e0fffc17 	ldw	r3,-16(fp)
    1760:	e0bffd17 	ldw	r2,-12(fp)
    1764:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
    1768:	e0bffd17 	ldw	r2,-12(fp)
    176c:	10bff704 	addi	r2,r2,-36
    1770:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
    1774:	e0bffe17 	ldw	r2,-8(fp)
    1778:	1007883a 	mov	r3,r2
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	10bfff04 	addi	r2,r2,-4
    178c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
    1790:	e0fffd17 	ldw	r3,-12(fp)
    1794:	00800044 	movi	r2,1
    1798:	18800015 	stw	r2,0(r3)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
    179c:	e0bffd17 	ldw	r2,-12(fp)
    17a0:	10bff404 	addi	r2,r2,-48
    17a4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	1007883a 	mov	r3,r2
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
    17b8:	e0bffd17 	ldw	r2,-12(fp)
    17bc:	10bffb04 	addi	r2,r2,-20
    17c0:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
    17c4:	e0bffd17 	ldw	r2,-12(fp)
}
    17c8:	e037883a 	mov	sp,fp
    17cc:	dfc00117 	ldw	ra,4(sp)
    17d0:	df000017 	ldw	fp,0(sp)
    17d4:	dec00204 	addi	sp,sp,8
    17d8:	f800283a 	ret

000017dc <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
    17dc:	defffe04 	addi	sp,sp,-8
    17e0:	dfc00115 	stw	ra,4(sp)
    17e4:	df000015 	stw	fp,0(sp)
    17e8:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    17ec:	00018300 	call	1830 <prvSetupTimerInterrupt>
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
    17f0:	00800034 	movhi	r2,0
    17f4:	10803104 	addi	r2,r2,196
    17f8:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
    17fc:	0005883a 	mov	r2,zero
}
    1800:	e037883a 	mov	sp,fp
    1804:	dfc00117 	ldw	ra,4(sp)
    1808:	df000017 	ldw	fp,0(sp)
    180c:	dec00204 	addi	sp,sp,8
    1810:	f800283a 	ret

00001814 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1814:	deffff04 	addi	sp,sp,-4
    1818:	df000015 	stw	fp,0(sp)
    181c:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
    1820:	e037883a 	mov	sp,fp
    1824:	df000017 	ldw	fp,0(sp)
    1828:	dec00104 	addi	sp,sp,4
    182c:	f800283a 	ret

00001830 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1830:	defffe04 	addi	sp,sp,-8
    1834:	dfc00115 	stw	ra,4(sp)
    1838:	df000015 	stw	fp,0(sp)
    183c:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
    1840:	0009883a 	mov	r4,zero
    1844:	000b883a 	mov	r5,zero
    1848:	01800034 	movhi	r6,0
    184c:	31863204 	addi	r6,r6,6344
    1850:	00019140 	call	1914 <alt_irq_register>
    1854:	10bffa98 	cmpnei	r2,r2,-22
    1858:	1000021e 	bne	r2,zero,1864 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
    185c:	003da03a 	break	0
    1860:	00001006 	br	18a4 <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
    1864:	00c00134 	movhi	r3,4
    1868:	18cc1104 	addi	r3,r3,12356
    186c:	00800204 	movi	r2,8
    1870:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
    1874:	00c00134 	movhi	r3,4
    1878:	18cc1204 	addi	r3,r3,12360
    187c:	00a1a814 	movui	r2,34464
    1880:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
    1884:	00c00134 	movhi	r3,4
    1888:	18cc1304 	addi	r3,r3,12364
    188c:	00800044 	movi	r2,1
    1890:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
    1894:	00c00134 	movhi	r3,4
    1898:	18cc1104 	addi	r3,r3,12356
    189c:	008001c4 	movi	r2,7
    18a0:	18800035 	stwio	r2,0(r3)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18a4:	00c00134 	movhi	r3,4
    18a8:	18cc1004 	addi	r3,r3,12352
    18ac:	00bfff84 	movi	r2,-2
    18b0:	18800035 	stwio	r2,0(r3)
}
    18b4:	e037883a 	mov	sp,fp
    18b8:	dfc00117 	ldw	ra,4(sp)
    18bc:	df000017 	ldw	fp,0(sp)
    18c0:	dec00204 	addi	sp,sp,8
    18c4:	f800283a 	ret

000018c8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
    18c8:	defffc04 	addi	sp,sp,-16
    18cc:	dfc00315 	stw	ra,12(sp)
    18d0:	df000215 	stw	fp,8(sp)
    18d4:	df000204 	addi	fp,sp,8
    18d8:	e13ffe15 	stw	r4,-8(fp)
    18dc:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
    18e0:	00031dc0 	call	31dc <xTaskIncrementTick>
    18e4:	1005003a 	cmpeq	r2,r2,zero
    18e8:	1000011e 	bne	r2,zero,18f0 <vPortSysTickHandler+0x28>
	{
        vTaskSwitchContext();
    18ec:	00033b80 	call	33b8 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18f0:	00c00134 	movhi	r3,4
    18f4:	18cc1004 	addi	r3,r3,12352
    18f8:	00bfff84 	movi	r2,-2
    18fc:	18800035 	stwio	r2,0(r3)
}
    1900:	e037883a 	mov	sp,fp
    1904:	dfc00117 	ldw	ra,4(sp)
    1908:	df000017 	ldw	fp,0(sp)
    190c:	dec00204 	addi	sp,sp,8
    1910:	f800283a 	ret

00001914 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
    1914:	defff004 	addi	sp,sp,-64
    1918:	df000f15 	stw	fp,60(sp)
    191c:	df000f04 	addi	fp,sp,60
    1920:	e13ffc15 	stw	r4,-16(fp)
    1924:	e17ffd15 	stw	r5,-12(fp)
    1928:	e1bffe15 	stw	r6,-8(fp)
	int rc = -EINVAL;  
    192c:	00bffa84 	movi	r2,-22
    1930:	e0bffb15 	stw	r2,-20(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
    1934:	e0bffc17 	ldw	r2,-16(fp)
    1938:	10800828 	cmpgeui	r2,r2,32
    193c:	10005c1e 	bne	r2,zero,1ab0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1940:	0005303a 	rdctl	r2,status
    1944:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1948:	e0fff917 	ldw	r3,-28(fp)
    194c:	00bfff84 	movi	r2,-2
    1950:	1884703a 	and	r2,r3,r2
    1954:	1001703a 	wrctl	status,r2
  
  return context;
    1958:	e0bff917 	ldw	r2,-28(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all ();
    195c:	e0bffa15 	stw	r2,-24(fp)
	
		alt_irq[id].handler = handler;
    1960:	e0bffc17 	ldw	r2,-16(fp)
    1964:	00c20234 	movhi	r3,2056
    1968:	18fe7604 	addi	r3,r3,-1576
    196c:	100490fa 	slli	r2,r2,3
    1970:	10c7883a 	add	r3,r2,r3
    1974:	e0bffe17 	ldw	r2,-8(fp)
    1978:	18800015 	stw	r2,0(r3)
		alt_irq[id].context = context;
    197c:	e0bffc17 	ldw	r2,-16(fp)
    1980:	00c20234 	movhi	r3,2056
    1984:	18fe7604 	addi	r3,r3,-1576
    1988:	100490fa 	slli	r2,r2,3
    198c:	10c5883a 	add	r2,r2,r3
    1990:	10c00104 	addi	r3,r2,4
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	18800015 	stw	r2,0(r3)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    199c:	e0bffe17 	ldw	r2,-8(fp)
    19a0:	1005003a 	cmpeq	r2,r2,zero
    19a4:	1000201e 	bne	r2,zero,1a28 <alt_irq_register+0x114>
    19a8:	e0bffc17 	ldw	r2,-16(fp)
    19ac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19b0:	0005303a 	rdctl	r2,status
    19b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19b8:	e0fff617 	ldw	r3,-40(fp)
    19bc:	00bfff84 	movi	r2,-2
    19c0:	1884703a 	and	r2,r3,r2
    19c4:	1001703a 	wrctl	status,r2
  
  return context;
    19c8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    19cc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    19d0:	e0fff717 	ldw	r3,-36(fp)
    19d4:	00800044 	movi	r2,1
    19d8:	10c4983a 	sll	r2,r2,r3
    19dc:	1007883a 	mov	r3,r2
    19e0:	00820034 	movhi	r2,2048
    19e4:	1089f304 	addi	r2,r2,10188
    19e8:	10800017 	ldw	r2,0(r2)
    19ec:	1886b03a 	or	r3,r3,r2
    19f0:	00820034 	movhi	r2,2048
    19f4:	1089f304 	addi	r2,r2,10188
    19f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19fc:	00820034 	movhi	r2,2048
    1a00:	1089f304 	addi	r2,r2,10188
    1a04:	10800017 	ldw	r2,0(r2)
    1a08:	100170fa 	wrctl	ienable,r2
    1a0c:	e0bff817 	ldw	r2,-32(fp)
    1a10:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a14:	e0bff517 	ldw	r2,-44(fp)
    1a18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a1c:	0005883a 	mov	r2,zero
    1a20:	e0bfff15 	stw	r2,-4(fp)
    1a24:	00002006 	br	1aa8 <alt_irq_register+0x194>
    1a28:	e0bffc17 	ldw	r2,-16(fp)
    1a2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a30:	0005303a 	rdctl	r2,status
    1a34:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a38:	e0fff217 	ldw	r3,-56(fp)
    1a3c:	00bfff84 	movi	r2,-2
    1a40:	1884703a 	and	r2,r3,r2
    1a44:	1001703a 	wrctl	status,r2
  
  return context;
    1a48:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a4c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    1a50:	e0fff317 	ldw	r3,-52(fp)
    1a54:	00800044 	movi	r2,1
    1a58:	10c4983a 	sll	r2,r2,r3
    1a5c:	0084303a 	nor	r2,zero,r2
    1a60:	1007883a 	mov	r3,r2
    1a64:	00820034 	movhi	r2,2048
    1a68:	1089f304 	addi	r2,r2,10188
    1a6c:	10800017 	ldw	r2,0(r2)
    1a70:	1886703a 	and	r3,r3,r2
    1a74:	00820034 	movhi	r2,2048
    1a78:	1089f304 	addi	r2,r2,10188
    1a7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a80:	00820034 	movhi	r2,2048
    1a84:	1089f304 	addi	r2,r2,10188
    1a88:	10800017 	ldw	r2,0(r2)
    1a8c:	100170fa 	wrctl	ienable,r2
    1a90:	e0bff417 	ldw	r2,-48(fp)
    1a94:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a98:	e0bff117 	ldw	r2,-60(fp)
    1a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1aa0:	0005883a 	mov	r2,zero
    1aa4:	e0bfff15 	stw	r2,-4(fp)
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	e0bffb15 	stw	r2,-20(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
    1ab0:	e0bffb17 	ldw	r2,-20(fp)
}
    1ab4:	e037883a 	mov	sp,fp
    1ab8:	df000017 	ldw	fp,0(sp)
    1abc:	dec00104 	addi	sp,sp,4
    1ac0:	f800283a 	ret

00001ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1ac4:	defffb04 	addi	sp,sp,-20
    1ac8:	dfc00415 	stw	ra,16(sp)
    1acc:	df000315 	stw	fp,12(sp)
    1ad0:	df000304 	addi	fp,sp,12
    1ad4:	e13ffe15 	stw	r4,-8(fp)
    1ad8:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1adc:	e0bffe17 	ldw	r2,-8(fp)
    1ae0:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1ae4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ae8:	e0bffd17 	ldw	r2,-12(fp)
    1aec:	11000017 	ldw	r4,0(r2)
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10c00f17 	ldw	r3,60(r2)
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	10801017 	ldw	r2,64(r2)
    1b00:	1885383a 	mul	r2,r3,r2
    1b04:	2087883a 	add	r3,r4,r2
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10c00115 	stw	r3,4(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1b18:	e0bffd17 	ldw	r2,-12(fp)
    1b1c:	10c00017 	ldw	r3,0(r2)
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	10c00215 	stw	r3,8(r2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1b28:	e0bffd17 	ldw	r2,-12(fp)
    1b2c:	11000017 	ldw	r4,0(r2)
    1b30:	e0bffd17 	ldw	r2,-12(fp)
    1b34:	10800f17 	ldw	r2,60(r2)
    1b38:	10ffffc4 	addi	r3,r2,-1
    1b3c:	e0bffd17 	ldw	r2,-12(fp)
    1b40:	10801017 	ldw	r2,64(r2)
    1b44:	1885383a 	mul	r2,r3,r2
    1b48:	2087883a 	add	r3,r4,r2
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10c00315 	stw	r3,12(r2)
		pxQueue->xRxLock = queueUNLOCKED;
    1b54:	e0fffd17 	ldw	r3,-12(fp)
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	18801115 	stw	r2,68(r3)
		pxQueue->xTxLock = queueUNLOCKED;
    1b60:	e0fffd17 	ldw	r3,-12(fp)
    1b64:	00bfffc4 	movi	r2,-1
    1b68:	18801215 	stw	r2,72(r3)

		if( xNewQueue == pdFALSE )
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
    1b70:	1004c03a 	cmpne	r2,r2,zero
    1b74:	10000b1e 	bne	r2,zero,1ba4 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	10800417 	ldw	r2,16(r2)
    1b80:	1005003a 	cmpeq	r2,r2,zero
    1b84:	10000d1e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1b88:	e0bffd17 	ldw	r2,-12(fp)
    1b8c:	11000404 	addi	r4,r2,16
    1b90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1b94:	10800058 	cmpnei	r2,r2,1
    1b98:	1000081e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1b9c:	003b683a 	trap	0
    1ba0:	00000606 	br	1bbc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1ba4:	e0bffd17 	ldw	r2,-12(fp)
    1ba8:	11000404 	addi	r4,r2,16
    1bac:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	11000904 	addi	r4,r2,36
    1bb8:	00014040 	call	1404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1bbc:	00041680 	call	4168 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1bc0:	00800044 	movi	r2,1
}
    1bc4:	e037883a 	mov	sp,fp
    1bc8:	dfc00117 	ldw	ra,4(sp)
    1bcc:	df000017 	ldw	fp,0(sp)
    1bd0:	dec00204 	addi	sp,sp,8
    1bd4:	f800283a 	ret

00001bd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1bd8:	defff704 	addi	sp,sp,-36
    1bdc:	dfc00815 	stw	ra,32(sp)
    1be0:	df000715 	stw	fp,28(sp)
    1be4:	df000704 	addi	fp,sp,28
    1be8:	e13ffd15 	stw	r4,-12(fp)
    1bec:	e17ffe15 	stw	r5,-8(fp)
    1bf0:	e1bfff05 	stb	r6,-4(fp)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    1bf4:	e03ffa15 	stw	zero,-24(fp)
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    1bf8:	e0bffe17 	ldw	r2,-8(fp)
    1bfc:	1004c03a 	cmpne	r2,r2,zero
    1c00:	1000021e 	bne	r2,zero,1c0c <xQueueGenericCreate+0x34>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
    1c04:	e03ffb15 	stw	zero,-20(fp)
    1c08:	00000506 	br	1c20 <xQueueGenericCreate+0x48>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c0c:	e0fffd17 	ldw	r3,-12(fp)
    1c10:	e0bffe17 	ldw	r2,-8(fp)
    1c14:	1885383a 	mul	r2,r3,r2
    1c18:	10800044 	addi	r2,r2,1
    1c1c:	e0bffb15 	stw	r2,-20(fp)
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1c20:	e0bffb17 	ldw	r2,-20(fp)
    1c24:	11001304 	addi	r4,r2,76
    1c28:	0000fbc0 	call	fbc <pvPortMalloc>
    1c2c:	e0bff915 	stw	r2,-28(fp)

	if( pcAllocatedBuffer != NULL )
    1c30:	e0bff917 	ldw	r2,-28(fp)
    1c34:	1005003a 	cmpeq	r2,r2,zero
    1c38:	1000181e 	bne	r2,zero,1c9c <xQueueGenericCreate+0xc4>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
    1c3c:	e0bff917 	ldw	r2,-28(fp)
    1c40:	e0bffc15 	stw	r2,-16(fp)

		if( uxItemSize == ( UBaseType_t ) 0 )
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	1004c03a 	cmpne	r2,r2,zero
    1c4c:	1000041e 	bne	r2,zero,1c60 <xQueueGenericCreate+0x88>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1c50:	e0fffc17 	ldw	r3,-16(fp)
    1c54:	e0bffc17 	ldw	r2,-16(fp)
    1c58:	10c00015 	stw	r3,0(r2)
    1c5c:	00000406 	br	1c70 <xQueueGenericCreate+0x98>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
    1c60:	e0bff917 	ldw	r2,-28(fp)
    1c64:	10c01304 	addi	r3,r2,76
    1c68:	e0bffc17 	ldw	r2,-16(fp)
    1c6c:	10c00015 	stw	r3,0(r2)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    1c70:	e0fffc17 	ldw	r3,-16(fp)
    1c74:	e0bffd17 	ldw	r2,-12(fp)
    1c78:	18800f15 	stw	r2,60(r3)
		pxNewQueue->uxItemSize = uxItemSize;
    1c7c:	e0fffc17 	ldw	r3,-16(fp)
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	18801015 	stw	r2,64(r3)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1c88:	e13ffc17 	ldw	r4,-16(fp)
    1c8c:	01400044 	movi	r5,1
    1c90:	0001ac40 	call	1ac4 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    1c94:	e0bffc17 	ldw	r2,-16(fp)
    1c98:	e0bffa15 	stw	r2,-24(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    1c9c:	e0bffa17 	ldw	r2,-24(fp)
}
    1ca0:	e037883a 	mov	sp,fp
    1ca4:	dfc00117 	ldw	ra,4(sp)
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00204 	addi	sp,sp,8
    1cb0:	f800283a 	ret

00001cb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1cb4:	defffc04 	addi	sp,sp,-16
    1cb8:	dfc00315 	stw	ra,12(sp)
    1cbc:	df000215 	stw	fp,8(sp)
    1cc0:	df000204 	addi	fp,sp,8
    1cc4:	e13fff05 	stb	r4,-4(fp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1cc8:	01001304 	movi	r4,76
    1ccc:	0000fbc0 	call	fbc <pvPortMalloc>
    1cd0:	e0bffe15 	stw	r2,-8(fp)
		if( pxNewQueue != NULL )
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	1005003a 	cmpeq	r2,r2,zero
    1cdc:	1000201e 	bne	r2,zero,1d60 <xQueueCreateMutex+0xac>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1cf0:	e0bffe17 	ldw	r2,-8(fp)
    1cf4:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1d08:	e0fffe17 	ldw	r3,-8(fp)
    1d0c:	00800044 	movi	r2,1
    1d10:	18800f15 	stw	r2,60(r3)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
    1d1c:	e0fffe17 	ldw	r3,-8(fp)
    1d20:	00bfffc4 	movi	r2,-1
    1d24:	18801115 	stw	r2,68(r3)
			pxNewQueue->xTxLock = queueUNLOCKED;
    1d28:	e0fffe17 	ldw	r3,-8(fp)
    1d2c:	00bfffc4 	movi	r2,-1
    1d30:	18801215 	stw	r2,72(r3)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d34:	e0bffe17 	ldw	r2,-8(fp)
    1d38:	11000404 	addi	r4,r2,16
    1d3c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d40:	e0bffe17 	ldw	r2,-8(fp)
    1d44:	11000904 	addi	r4,r2,36
    1d48:	00014040 	call	1404 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1d4c:	e13ffe17 	ldw	r4,-8(fp)
    1d50:	000b883a 	mov	r5,zero
    1d54:	000d883a 	mov	r6,zero
    1d58:	000f883a 	mov	r7,zero
    1d5c:	0001f100 	call	1f10 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1d60:	e0bffe17 	ldw	r2,-8(fp)
	}
    1d64:	e037883a 	mov	sp,fp
    1d68:	dfc00117 	ldw	ra,4(sp)
    1d6c:	df000017 	ldw	fp,0(sp)
    1d70:	dec00204 	addi	sp,sp,8
    1d74:	f800283a 	ret

00001d78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    1d78:	defffa04 	addi	sp,sp,-24
    1d7c:	dfc00515 	stw	ra,20(sp)
    1d80:	df000415 	stw	fp,16(sp)
    1d84:	dc000315 	stw	r16,12(sp)
    1d88:	df000304 	addi	fp,sp,12
    1d8c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1d90:	e0bfff17 	ldw	r2,-4(fp)
    1d94:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	14000117 	ldw	r16,4(r2)
    1da0:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1da4:	8080111e 	bne	r16,r2,1dec <xQueueGiveMutexRecursive+0x74>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    1da8:	e0bffd17 	ldw	r2,-12(fp)
    1dac:	10800317 	ldw	r2,12(r2)
    1db0:	10ffffc4 	addi	r3,r2,-1
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	10800317 	ldw	r2,12(r2)
    1dc4:	1004c03a 	cmpne	r2,r2,zero
    1dc8:	1000051e 	bne	r2,zero,1de0 <xQueueGiveMutexRecursive+0x68>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1dcc:	e13ffd17 	ldw	r4,-12(fp)
    1dd0:	000b883a 	mov	r5,zero
    1dd4:	000d883a 	mov	r6,zero
    1dd8:	000f883a 	mov	r7,zero
    1ddc:	0001f100 	call	1f10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    1de0:	00800044 	movi	r2,1
    1de4:	e0bffe15 	stw	r2,-8(fp)
    1de8:	00000106 	br	1df0 <xQueueGiveMutexRecursive+0x78>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    1dec:	e03ffe15 	stw	zero,-8(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1df0:	e0bffe17 	ldw	r2,-8(fp)
	}
    1df4:	e037883a 	mov	sp,fp
    1df8:	dfc00217 	ldw	ra,8(sp)
    1dfc:	df000117 	ldw	fp,4(sp)
    1e00:	dc000017 	ldw	r16,0(sp)
    1e04:	dec00304 	addi	sp,sp,12
    1e08:	f800283a 	ret

00001e0c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1e0c:	defff904 	addi	sp,sp,-28
    1e10:	dfc00615 	stw	ra,24(sp)
    1e14:	df000515 	stw	fp,20(sp)
    1e18:	dc000415 	stw	r16,16(sp)
    1e1c:	df000404 	addi	fp,sp,16
    1e20:	e13ffe15 	stw	r4,-8(fp)
    1e24:	e17fff15 	stw	r5,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1e30:	e0bffc17 	ldw	r2,-16(fp)
    1e34:	14000117 	ldw	r16,4(r2)
    1e38:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1e3c:	8080081e 	bne	r16,r2,1e60 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    1e40:	e0bffc17 	ldw	r2,-16(fp)
    1e44:	10800317 	ldw	r2,12(r2)
    1e48:	10c00044 	addi	r3,r2,1
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
    1e54:	00800044 	movi	r2,1
    1e58:	e0bffd15 	stw	r2,-12(fp)
    1e5c:	00000e06 	br	1e98 <xQueueTakeMutexRecursive+0x8c>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    1e60:	e13ffc17 	ldw	r4,-16(fp)
    1e64:	000b883a 	mov	r5,zero
    1e68:	e1bfff17 	ldw	r6,-4(fp)
    1e6c:	000f883a 	mov	r7,zero
    1e70:	00022800 	call	2280 <xQueueGenericReceive>
    1e74:	e0bffd15 	stw	r2,-12(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	10800058 	cmpnei	r2,r2,1
    1e80:	1000051e 	bne	r2,zero,1e98 <xQueueTakeMutexRecursive+0x8c>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    1e84:	e0bffc17 	ldw	r2,-16(fp)
    1e88:	10800317 	ldw	r2,12(r2)
    1e8c:	10c00044 	addi	r3,r2,1
    1e90:	e0bffc17 	ldw	r2,-16(fp)
    1e94:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1e98:	e0bffd17 	ldw	r2,-12(fp)
	}
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	dfc00217 	ldw	ra,8(sp)
    1ea4:	df000117 	ldw	fp,4(sp)
    1ea8:	dc000017 	ldw	r16,0(sp)
    1eac:	dec00304 	addi	sp,sp,12
    1eb0:	f800283a 	ret

00001eb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    1eb4:	defffb04 	addi	sp,sp,-20
    1eb8:	dfc00415 	stw	ra,16(sp)
    1ebc:	df000315 	stw	fp,12(sp)
    1ec0:	df000304 	addi	fp,sp,12
    1ec4:	e13ffe15 	stw	r4,-8(fp)
    1ec8:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    1ecc:	e13ffe17 	ldw	r4,-8(fp)
    1ed0:	000b883a 	mov	r5,zero
    1ed4:	01800084 	movi	r6,2
    1ed8:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    1edc:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	1005003a 	cmpeq	r2,r2,zero
    1ee8:	1000031e 	bne	r2,zero,1ef8 <xQueueCreateCountingSemaphore+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    1eec:	e0fffd17 	ldw	r3,-12(fp)
    1ef0:	e0bfff17 	ldw	r2,-4(fp)
    1ef4:	18800e15 	stw	r2,56(r3)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
	}
    1efc:	e037883a 	mov	sp,fp
    1f00:	dfc00117 	ldw	ra,4(sp)
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00204 	addi	sp,sp,8
    1f0c:	f800283a 	ret

00001f10 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1f10:	defff404 	addi	sp,sp,-48
    1f14:	dfc00b15 	stw	ra,44(sp)
    1f18:	df000a15 	stw	fp,40(sp)
    1f1c:	df000a04 	addi	fp,sp,40
    1f20:	e13ffb15 	stw	r4,-20(fp)
    1f24:	e17ffc15 	stw	r5,-16(fp)
    1f28:	e1bffd15 	stw	r6,-12(fp)
    1f2c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1f30:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f34:	e0bffb17 	ldw	r2,-20(fp)
    1f38:	e0bff615 	stw	r2,-40(fp)
    1f3c:	00000006 	br	1f40 <xQueueGenericSend+0x30>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f40:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f44:	e0bff617 	ldw	r2,-40(fp)
    1f48:	10c00e17 	ldw	r3,56(r2)
    1f4c:	e0bff617 	ldw	r2,-40(fp)
    1f50:	10800f17 	ldw	r2,60(r2)
    1f54:	18800336 	bltu	r3,r2,1f64 <xQueueGenericSend+0x54>
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	10800098 	cmpnei	r2,r2,2
    1f60:	1000181e 	bne	r2,zero,1fc4 <xQueueGenericSend+0xb4>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f64:	e13ff617 	ldw	r4,-40(fp)
    1f68:	e17ffc17 	ldw	r5,-16(fp)
    1f6c:	e1bffe17 	ldw	r6,-8(fp)
    1f70:	000270c0 	call	270c <prvCopyDataToQueue>
    1f74:	e0bff715 	stw	r2,-36(fp)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f78:	e0bff617 	ldw	r2,-40(fp)
    1f7c:	10800917 	ldw	r2,36(r2)
    1f80:	1005003a 	cmpeq	r2,r2,zero
    1f84:	1000071e 	bne	r2,zero,1fa4 <xQueueGenericSend+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f88:	e0bff617 	ldw	r2,-40(fp)
    1f8c:	11000904 	addi	r4,r2,36
    1f90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1f94:	10800058 	cmpnei	r2,r2,1
    1f98:	1000061e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f9c:	003b683a 	trap	0
    1fa0:	00000406 	br	1fb4 <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1fa4:	e0bff717 	ldw	r2,-36(fp)
    1fa8:	1005003a 	cmpeq	r2,r2,zero
    1fac:	1000011e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1fb0:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1fb4:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    1fb8:	00800044 	movi	r2,1
    1fbc:	e0bfff15 	stw	r2,-4(fp)
    1fc0:	00003906 	br	20a8 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	1004c03a 	cmpne	r2,r2,zero
    1fcc:	1000031e 	bne	r2,zero,1fdc <xQueueGenericSend+0xcc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1fd0:	00041680 	call	4168 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1fd4:	e03fff15 	stw	zero,-4(fp)
    1fd8:	00003306 	br	20a8 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
    1fdc:	e0bff817 	ldw	r2,-32(fp)
    1fe0:	1004c03a 	cmpne	r2,r2,zero
    1fe4:	1000041e 	bne	r2,zero,1ff8 <xQueueGenericSend+0xe8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1fe8:	e13ff904 	addi	r4,fp,-28
    1fec:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ff0:	00800044 	movi	r2,1
    1ff4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ff8:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ffc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2000:	00041140 	call	4114 <vTaskEnterCritical>
    2004:	e0bff617 	ldw	r2,-40(fp)
    2008:	10801117 	ldw	r2,68(r2)
    200c:	10bfffd8 	cmpnei	r2,r2,-1
    2010:	1000021e 	bne	r2,zero,201c <xQueueGenericSend+0x10c>
    2014:	e0bff617 	ldw	r2,-40(fp)
    2018:	10001115 	stw	zero,68(r2)
    201c:	e0bff617 	ldw	r2,-40(fp)
    2020:	10801217 	ldw	r2,72(r2)
    2024:	10bfffd8 	cmpnei	r2,r2,-1
    2028:	1000021e 	bne	r2,zero,2034 <xQueueGenericSend+0x124>
    202c:	e0bff617 	ldw	r2,-40(fp)
    2030:	10001215 	stw	zero,72(r2)
    2034:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2038:	e13ff904 	addi	r4,fp,-28
    203c:	e17ffd04 	addi	r5,fp,-12
    2040:	000380c0 	call	380c <xTaskCheckForTimeOut>
    2044:	1004c03a 	cmpne	r2,r2,zero
    2048:	1000131e 	bne	r2,zero,2098 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    204c:	e13ff617 	ldw	r4,-40(fp)
    2050:	0002ac40 	call	2ac4 <prvIsQueueFull>
    2054:	1005003a 	cmpeq	r2,r2,zero
    2058:	10000b1e 	bne	r2,zero,2088 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    205c:	e0bff617 	ldw	r2,-40(fp)
    2060:	11000404 	addi	r4,r2,16
    2064:	e17ffd17 	ldw	r5,-12(fp)
    2068:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    206c:	e13ff617 	ldw	r4,-40(fp)
    2070:	000293c0 	call	293c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2074:	00030180 	call	3018 <xTaskResumeAll>
    2078:	1004c03a 	cmpne	r2,r2,zero
    207c:	103fb01e 	bne	r2,zero,1f40 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
    2080:	003b683a 	trap	0
    2084:	003fae06 	br	1f40 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2088:	e13ff617 	ldw	r4,-40(fp)
    208c:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2090:	00030180 	call	3018 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2094:	003faa06 	br	1f40 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2098:	e13ff617 	ldw	r4,-40(fp)
    209c:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    20a0:	00030180 	call	3018 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    20a4:	e03fff15 	stw	zero,-4(fp)
    20a8:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    20ac:	e037883a 	mov	sp,fp
    20b0:	dfc00117 	ldw	ra,4(sp)
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00204 	addi	sp,sp,8
    20bc:	f800283a 	ret

000020c0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    20c0:	defff704 	addi	sp,sp,-36
    20c4:	dfc00815 	stw	ra,32(sp)
    20c8:	df000715 	stw	fp,28(sp)
    20cc:	df000704 	addi	fp,sp,28
    20d0:	e13ffc15 	stw	r4,-16(fp)
    20d4:	e17ffd15 	stw	r5,-12(fp)
    20d8:	e1bffe15 	stw	r6,-8(fp)
    20dc:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    20e0:	e0bffc17 	ldw	r2,-16(fp)
    20e4:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20e8:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20ec:	e0bff917 	ldw	r2,-28(fp)
    20f0:	10c00e17 	ldw	r3,56(r2)
    20f4:	e0bff917 	ldw	r2,-28(fp)
    20f8:	10800f17 	ldw	r2,60(r2)
    20fc:	18800336 	bltu	r3,r2,210c <xQueueGenericSendFromISR+0x4c>
    2100:	e0bfff17 	ldw	r2,-4(fp)
    2104:	10800098 	cmpnei	r2,r2,2
    2108:	1000201e 	bne	r2,zero,218c <xQueueGenericSendFromISR+0xcc>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    210c:	e13ff917 	ldw	r4,-28(fp)
    2110:	e17ffd17 	ldw	r5,-12(fp)
    2114:	e1bfff17 	ldw	r6,-4(fp)
    2118:	000270c0 	call	270c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    211c:	e0bff917 	ldw	r2,-28(fp)
    2120:	10801217 	ldw	r2,72(r2)
    2124:	10bfffd8 	cmpnei	r2,r2,-1
    2128:	1000101e 	bne	r2,zero,216c <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    212c:	e0bff917 	ldw	r2,-28(fp)
    2130:	10800917 	ldw	r2,36(r2)
    2134:	1005003a 	cmpeq	r2,r2,zero
    2138:	1000111e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    213c:	e0bff917 	ldw	r2,-28(fp)
    2140:	11000904 	addi	r4,r2,36
    2144:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2148:	1005003a 	cmpeq	r2,r2,zero
    214c:	10000c1e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2150:	e0bffe17 	ldw	r2,-8(fp)
    2154:	1005003a 	cmpeq	r2,r2,zero
    2158:	1000091e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    215c:	e0fffe17 	ldw	r3,-8(fp)
    2160:	00800044 	movi	r2,1
    2164:	18800015 	stw	r2,0(r3)
    2168:	00000506 	br	2180 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    216c:	e0bff917 	ldw	r2,-28(fp)
    2170:	10801217 	ldw	r2,72(r2)
    2174:	10c00044 	addi	r3,r2,1
    2178:	e0bff917 	ldw	r2,-28(fp)
    217c:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2180:	00800044 	movi	r2,1
    2184:	e0bffb15 	stw	r2,-20(fp)
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2188:	00000106 	br	2190 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    218c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2190:	e0bffb17 	ldw	r2,-20(fp)
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    21a8:	defff904 	addi	sp,sp,-28
    21ac:	dfc00615 	stw	ra,24(sp)
    21b0:	df000515 	stw	fp,20(sp)
    21b4:	df000504 	addi	fp,sp,20
    21b8:	e13ffe15 	stw	r4,-8(fp)
    21bc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    21c0:	e0bffe17 	ldw	r2,-8(fp)
    21c4:	e0bffb15 	stw	r2,-20(fp)
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21c8:	e03ffc15 	stw	zero,-16(fp)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    21cc:	e0bffb17 	ldw	r2,-20(fp)
    21d0:	10c00e17 	ldw	r3,56(r2)
    21d4:	e0bffb17 	ldw	r2,-20(fp)
    21d8:	10800f17 	ldw	r2,60(r2)
    21dc:	1880212e 	bgeu	r3,r2,2264 <xQueueGiveFromISR+0xbc>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
    21e0:	e0bffb17 	ldw	r2,-20(fp)
    21e4:	10800e17 	ldw	r2,56(r2)
    21e8:	10c00044 	addi	r3,r2,1
    21ec:	e0bffb17 	ldw	r2,-20(fp)
    21f0:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    21f4:	e0bffb17 	ldw	r2,-20(fp)
    21f8:	10801217 	ldw	r2,72(r2)
    21fc:	10bfffd8 	cmpnei	r2,r2,-1
    2200:	1000101e 	bne	r2,zero,2244 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2204:	e0bffb17 	ldw	r2,-20(fp)
    2208:	10800917 	ldw	r2,36(r2)
    220c:	1005003a 	cmpeq	r2,r2,zero
    2210:	1000111e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2214:	e0bffb17 	ldw	r2,-20(fp)
    2218:	11000904 	addi	r4,r2,36
    221c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2220:	1005003a 	cmpeq	r2,r2,zero
    2224:	10000c1e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2228:	e0bfff17 	ldw	r2,-4(fp)
    222c:	1005003a 	cmpeq	r2,r2,zero
    2230:	1000091e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2234:	e0ffff17 	ldw	r3,-4(fp)
    2238:	00800044 	movi	r2,1
    223c:	18800015 	stw	r2,0(r3)
    2240:	00000506 	br	2258 <xQueueGiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2244:	e0bffb17 	ldw	r2,-20(fp)
    2248:	10801217 	ldw	r2,72(r2)
    224c:	10c00044 	addi	r3,r2,1
    2250:	e0bffb17 	ldw	r2,-20(fp)
    2254:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2258:	00800044 	movi	r2,1
    225c:	e0bffd15 	stw	r2,-12(fp)
    2260:	00000106 	br	2268 <xQueueGiveFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2264:	e03ffd15 	stw	zero,-12(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2268:	e0bffd17 	ldw	r2,-12(fp)
}
    226c:	e037883a 	mov	sp,fp
    2270:	dfc00117 	ldw	ra,4(sp)
    2274:	df000017 	ldw	fp,0(sp)
    2278:	dec00204 	addi	sp,sp,8
    227c:	f800283a 	ret

00002280 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2280:	defff404 	addi	sp,sp,-48
    2284:	dfc00b15 	stw	ra,44(sp)
    2288:	df000a15 	stw	fp,40(sp)
    228c:	df000a04 	addi	fp,sp,40
    2290:	e13ffb15 	stw	r4,-20(fp)
    2294:	e17ffc15 	stw	r5,-16(fp)
    2298:	e1bffd15 	stw	r6,-12(fp)
    229c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE;
    22a0:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    22a4:	e0bffb17 	ldw	r2,-20(fp)
    22a8:	e0bff615 	stw	r2,-40(fp)
    22ac:	00000006 	br	22b0 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    22b0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    22b4:	e0bff617 	ldw	r2,-40(fp)
    22b8:	10800e17 	ldw	r2,56(r2)
    22bc:	1005003a 	cmpeq	r2,r2,zero
    22c0:	1000321e 	bne	r2,zero,238c <xQueueGenericReceive+0x10c>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    22c4:	e0bff617 	ldw	r2,-40(fp)
    22c8:	10800317 	ldw	r2,12(r2)
    22cc:	e0bff715 	stw	r2,-36(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    22d0:	e13ff617 	ldw	r4,-40(fp)
    22d4:	e17ffc17 	ldw	r5,-16(fp)
    22d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	1004c03a 	cmpne	r2,r2,zero
    22e4:	1000181e 	bne	r2,zero,2348 <xQueueGenericReceive+0xc8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    22e8:	e0bff617 	ldw	r2,-40(fp)
    22ec:	10800e17 	ldw	r2,56(r2)
    22f0:	10ffffc4 	addi	r3,r2,-1
    22f4:	e0bff617 	ldw	r2,-40(fp)
    22f8:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    22fc:	e0bff617 	ldw	r2,-40(fp)
    2300:	10800017 	ldw	r2,0(r2)
    2304:	1004c03a 	cmpne	r2,r2,zero
    2308:	1000041e 	bne	r2,zero,231c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    230c:	00042140 	call	4214 <pvTaskIncrementMutexHeldCount>
    2310:	1007883a 	mov	r3,r2
    2314:	e0bff617 	ldw	r2,-40(fp)
    2318:	10c00115 	stw	r3,4(r2)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    231c:	e0bff617 	ldw	r2,-40(fp)
    2320:	10800417 	ldw	r2,16(r2)
    2324:	1005003a 	cmpeq	r2,r2,zero
    2328:	1000141e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    232c:	e0bff617 	ldw	r2,-40(fp)
    2330:	11000404 	addi	r4,r2,16
    2334:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2338:	10800058 	cmpnei	r2,r2,1
    233c:	10000f1e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2340:	003b683a 	trap	0
    2344:	00000d06 	br	237c <xQueueGenericReceive+0xfc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2348:	e0fff617 	ldw	r3,-40(fp)
    234c:	e0bff717 	ldw	r2,-36(fp)
    2350:	18800315 	stw	r2,12(r3)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2354:	e0bff617 	ldw	r2,-40(fp)
    2358:	10800917 	ldw	r2,36(r2)
    235c:	1005003a 	cmpeq	r2,r2,zero
    2360:	1000061e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2364:	e0bff617 	ldw	r2,-40(fp)
    2368:	11000904 	addi	r4,r2,36
    236c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2370:	1005003a 	cmpeq	r2,r2,zero
    2374:	1000011e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2378:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    237c:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    2380:	00800044 	movi	r2,1
    2384:	e0bfff15 	stw	r2,-4(fp)
    2388:	00004206 	br	2494 <xQueueGenericReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    238c:	e0bffd17 	ldw	r2,-12(fp)
    2390:	1004c03a 	cmpne	r2,r2,zero
    2394:	1000031e 	bne	r2,zero,23a4 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2398:	00041680 	call	4168 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    239c:	e03fff15 	stw	zero,-4(fp)
    23a0:	00003c06 	br	2494 <xQueueGenericReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
    23a4:	e0bff817 	ldw	r2,-32(fp)
    23a8:	1004c03a 	cmpne	r2,r2,zero
    23ac:	1000041e 	bne	r2,zero,23c0 <xQueueGenericReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23b0:	e13ff904 	addi	r4,fp,-28
    23b4:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    23b8:	00800044 	movi	r2,1
    23bc:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    23c0:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23c4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23c8:	00041140 	call	4114 <vTaskEnterCritical>
    23cc:	e0bff617 	ldw	r2,-40(fp)
    23d0:	10801117 	ldw	r2,68(r2)
    23d4:	10bfffd8 	cmpnei	r2,r2,-1
    23d8:	1000021e 	bne	r2,zero,23e4 <xQueueGenericReceive+0x164>
    23dc:	e0bff617 	ldw	r2,-40(fp)
    23e0:	10001115 	stw	zero,68(r2)
    23e4:	e0bff617 	ldw	r2,-40(fp)
    23e8:	10801217 	ldw	r2,72(r2)
    23ec:	10bfffd8 	cmpnei	r2,r2,-1
    23f0:	1000021e 	bne	r2,zero,23fc <xQueueGenericReceive+0x17c>
    23f4:	e0bff617 	ldw	r2,-40(fp)
    23f8:	10001215 	stw	zero,72(r2)
    23fc:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2400:	e13ff904 	addi	r4,fp,-28
    2404:	e17ffd04 	addi	r5,fp,-12
    2408:	000380c0 	call	380c <xTaskCheckForTimeOut>
    240c:	1004c03a 	cmpne	r2,r2,zero
    2410:	10001c1e 	bne	r2,zero,2484 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2414:	e13ff617 	ldw	r4,-40(fp)
    2418:	0002a2c0 	call	2a2c <prvIsQueueEmpty>
    241c:	1005003a 	cmpeq	r2,r2,zero
    2420:	1000141e 	bne	r2,zero,2474 <xQueueGenericReceive+0x1f4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2424:	e0bff617 	ldw	r2,-40(fp)
    2428:	10800017 	ldw	r2,0(r2)
    242c:	1004c03a 	cmpne	r2,r2,zero
    2430:	1000051e 	bne	r2,zero,2448 <xQueueGenericReceive+0x1c8>
					{
						taskENTER_CRITICAL();
    2434:	00041140 	call	4114 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2438:	e0bff617 	ldw	r2,-40(fp)
    243c:	11000117 	ldw	r4,4(r2)
    2440:	0003ee80 	call	3ee8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2444:	00041680 	call	4168 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2448:	e0bff617 	ldw	r2,-40(fp)
    244c:	11000904 	addi	r4,r2,36
    2450:	e17ffd17 	ldw	r5,-12(fp)
    2454:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2458:	e13ff617 	ldw	r4,-40(fp)
    245c:	000293c0 	call	293c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2460:	00030180 	call	3018 <xTaskResumeAll>
    2464:	1004c03a 	cmpne	r2,r2,zero
    2468:	103f911e 	bne	r2,zero,22b0 <xQueueGenericReceive+0x30>
				{
					portYIELD_WITHIN_API();
    246c:	003b683a 	trap	0
    2470:	003f8f06 	br	22b0 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2474:	e13ff617 	ldw	r4,-40(fp)
    2478:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    247c:	00030180 	call	3018 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2480:	003f8b06 	br	22b0 <xQueueGenericReceive+0x30>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2484:	e13ff617 	ldw	r4,-40(fp)
    2488:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    248c:	00030180 	call	3018 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2490:	e03fff15 	stw	zero,-4(fp)
    2494:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    24ac:	defff804 	addi	sp,sp,-32
    24b0:	dfc00715 	stw	ra,28(sp)
    24b4:	df000615 	stw	fp,24(sp)
    24b8:	df000604 	addi	fp,sp,24
    24bc:	e13ffd15 	stw	r4,-12(fp)
    24c0:	e17ffe15 	stw	r5,-8(fp)
    24c4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24d0:	e03ffb15 	stw	zero,-20(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    24d4:	e0bffa17 	ldw	r2,-24(fp)
    24d8:	10800e17 	ldw	r2,56(r2)
    24dc:	1005003a 	cmpeq	r2,r2,zero
    24e0:	1000241e 	bne	r2,zero,2574 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24e4:	e13ffa17 	ldw	r4,-24(fp)
    24e8:	e17ffe17 	ldw	r5,-8(fp)
    24ec:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    24f0:	e0bffa17 	ldw	r2,-24(fp)
    24f4:	10800e17 	ldw	r2,56(r2)
    24f8:	10ffffc4 	addi	r3,r2,-1
    24fc:	e0bffa17 	ldw	r2,-24(fp)
    2500:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2504:	e0bffa17 	ldw	r2,-24(fp)
    2508:	10801117 	ldw	r2,68(r2)
    250c:	10bfffd8 	cmpnei	r2,r2,-1
    2510:	1000101e 	bne	r2,zero,2554 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2514:	e0bffa17 	ldw	r2,-24(fp)
    2518:	10800417 	ldw	r2,16(r2)
    251c:	1005003a 	cmpeq	r2,r2,zero
    2520:	1000111e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2524:	e0bffa17 	ldw	r2,-24(fp)
    2528:	11000404 	addi	r4,r2,16
    252c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2530:	1005003a 	cmpeq	r2,r2,zero
    2534:	10000c1e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2538:	e0bfff17 	ldw	r2,-4(fp)
    253c:	1005003a 	cmpeq	r2,r2,zero
    2540:	1000091e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2544:	e0ffff17 	ldw	r3,-4(fp)
    2548:	00800044 	movi	r2,1
    254c:	18800015 	stw	r2,0(r3)
    2550:	00000506 	br	2568 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	10801117 	ldw	r2,68(r2)
    255c:	10c00044 	addi	r3,r2,1
    2560:	e0bffa17 	ldw	r2,-24(fp)
    2564:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
    2568:	00800044 	movi	r2,1
    256c:	e0bffc15 	stw	r2,-16(fp)
    2570:	00000106 	br	2578 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
    2574:	e03ffc15 	stw	zero,-16(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2578:	e0bffc17 	ldw	r2,-16(fp)
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2590:	defff804 	addi	sp,sp,-32
    2594:	dfc00715 	stw	ra,28(sp)
    2598:	df000615 	stw	fp,24(sp)
    259c:	df000604 	addi	fp,sp,24
    25a0:	e13ffe15 	stw	r4,-8(fp)
    25a4:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    25b0:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    25b4:	e0bffa17 	ldw	r2,-24(fp)
    25b8:	10800e17 	ldw	r2,56(r2)
    25bc:	1005003a 	cmpeq	r2,r2,zero
    25c0:	10000c1e 	bne	r2,zero,25f4 <xQueuePeekFromISR+0x64>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    25c4:	e0bffa17 	ldw	r2,-24(fp)
    25c8:	10800317 	ldw	r2,12(r2)
    25cc:	e0bffb15 	stw	r2,-20(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    25d0:	e13ffa17 	ldw	r4,-24(fp)
    25d4:	e17fff17 	ldw	r5,-4(fp)
    25d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    25dc:	e0fffa17 	ldw	r3,-24(fp)
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	18800315 	stw	r2,12(r3)

			xReturn = pdPASS;
    25e8:	00800044 	movi	r2,1
    25ec:	e0bffd15 	stw	r2,-12(fp)
    25f0:	00000106 	br	25f8 <xQueuePeekFromISR+0x68>
		}
		else
		{
			xReturn = pdFAIL;
    25f4:	e03ffd15 	stw	zero,-12(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    25f8:	e0bffd17 	ldw	r2,-12(fp)
}
    25fc:	e037883a 	mov	sp,fp
    2600:	dfc00117 	ldw	ra,4(sp)
    2604:	df000017 	ldw	fp,0(sp)
    2608:	dec00204 	addi	sp,sp,8
    260c:	f800283a 	ret

00002610 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2610:	defffc04 	addi	sp,sp,-16
    2614:	dfc00315 	stw	ra,12(sp)
    2618:	df000215 	stw	fp,8(sp)
    261c:	df000204 	addi	fp,sp,8
    2620:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2624:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2628:	e0bfff17 	ldw	r2,-4(fp)
    262c:	10800e17 	ldw	r2,56(r2)
    2630:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2634:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    2638:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    263c:	e037883a 	mov	sp,fp
    2640:	dfc00117 	ldw	ra,4(sp)
    2644:	df000017 	ldw	fp,0(sp)
    2648:	dec00204 	addi	sp,sp,8
    264c:	f800283a 	ret

00002650 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2650:	defffb04 	addi	sp,sp,-20
    2654:	dfc00415 	stw	ra,16(sp)
    2658:	df000315 	stw	fp,12(sp)
    265c:	df000304 	addi	fp,sp,12
    2660:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2664:	e0bfff17 	ldw	r2,-4(fp)
    2668:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    266c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	10c00f17 	ldw	r3,60(r2)
    2678:	e0bffd17 	ldw	r2,-12(fp)
    267c:	10800e17 	ldw	r2,56(r2)
    2680:	1885c83a 	sub	r2,r3,r2
    2684:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2688:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    268c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2690:	e037883a 	mov	sp,fp
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret

000026a4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    26a4:	defffd04 	addi	sp,sp,-12
    26a8:	df000215 	stw	fp,8(sp)
    26ac:	df000204 	addi	fp,sp,8
    26b0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    26b4:	e0bfff17 	ldw	r2,-4(fp)
    26b8:	10800e17 	ldw	r2,56(r2)
    26bc:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
    26c0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    26c4:	e037883a 	mov	sp,fp
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    26d4:	defffc04 	addi	sp,sp,-16
    26d8:	dfc00315 	stw	ra,12(sp)
    26dc:	df000215 	stw	fp,8(sp)
    26e0:	df000204 	addi	fp,sp,8
    26e4:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26e8:	e0bfff17 	ldw	r2,-4(fp)
    26ec:	e0bffe15 	stw	r2,-8(fp)
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    26f0:	e13ffe17 	ldw	r4,-8(fp)
    26f4:	00011500 	call	1150 <vPortFree>
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    270c:	defffa04 	addi	sp,sp,-24
    2710:	dfc00515 	stw	ra,20(sp)
    2714:	df000415 	stw	fp,16(sp)
    2718:	df000404 	addi	fp,sp,16
    271c:	e13ffd15 	stw	r4,-12(fp)
    2720:	e17ffe15 	stw	r5,-8(fp)
    2724:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
    2728:	e03ffc15 	stw	zero,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	10801017 	ldw	r2,64(r2)
    2734:	1004c03a 	cmpne	r2,r2,zero
    2738:	10000b1e 	bne	r2,zero,2768 <prvCopyDataToQueue+0x5c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    273c:	e0bffd17 	ldw	r2,-12(fp)
    2740:	10800017 	ldw	r2,0(r2)
    2744:	1004c03a 	cmpne	r2,r2,zero
    2748:	10004a1e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	11000117 	ldw	r4,4(r2)
    2754:	00040180 	call	4018 <xTaskPriorityDisinherit>
    2758:	e0bffc15 	stw	r2,-16(fp)
				pxQueue->pxMutexHolder = NULL;
    275c:	e0bffd17 	ldw	r2,-12(fp)
    2760:	10000115 	stw	zero,4(r2)
    2764:	00004306 	br	2874 <prvCopyDataToQueue+0x168>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2768:	e0bfff17 	ldw	r2,-4(fp)
    276c:	1004c03a 	cmpne	r2,r2,zero
    2770:	1000191e 	bne	r2,zero,27d8 <prvCopyDataToQueue+0xcc>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00217 	ldw	r3,8(r2)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	11801017 	ldw	r6,64(r2)
    2784:	e0bffe17 	ldw	r2,-8(fp)
    2788:	1809883a 	mov	r4,r3
    278c:	100b883a 	mov	r5,r2
    2790:	00073240 	call	7324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2794:	e0bffd17 	ldw	r2,-12(fp)
    2798:	10c00217 	ldw	r3,8(r2)
    279c:	e0bffd17 	ldw	r2,-12(fp)
    27a0:	10801017 	ldw	r2,64(r2)
    27a4:	1887883a 	add	r3,r3,r2
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10c00217 	ldw	r3,8(r2)
    27b8:	e0bffd17 	ldw	r2,-12(fp)
    27bc:	10800117 	ldw	r2,4(r2)
    27c0:	18802c36 	bltu	r3,r2,2874 <prvCopyDataToQueue+0x168>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    27c4:	e0bffd17 	ldw	r2,-12(fp)
    27c8:	10c00017 	ldw	r3,0(r2)
    27cc:	e0bffd17 	ldw	r2,-12(fp)
    27d0:	10c00215 	stw	r3,8(r2)
    27d4:	00002706 	br	2874 <prvCopyDataToQueue+0x168>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	10c00317 	ldw	r3,12(r2)
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	11801017 	ldw	r6,64(r2)
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1809883a 	mov	r4,r3
    27f0:	100b883a 	mov	r5,r2
    27f4:	00073240 	call	7324 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    27f8:	e0bffd17 	ldw	r2,-12(fp)
    27fc:	10c00317 	ldw	r3,12(r2)
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10801017 	ldw	r2,64(r2)
    2808:	1887c83a 	sub	r3,r3,r2
    280c:	e0bffd17 	ldw	r2,-12(fp)
    2810:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2814:	e0bffd17 	ldw	r2,-12(fp)
    2818:	10c00317 	ldw	r3,12(r2)
    281c:	e0bffd17 	ldw	r2,-12(fp)
    2820:	10800017 	ldw	r2,0(r2)
    2824:	1880072e 	bgeu	r3,r2,2844 <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	10c00117 	ldw	r3,4(r2)
    2830:	e0bffd17 	ldw	r2,-12(fp)
    2834:	10801017 	ldw	r2,64(r2)
    2838:	1887c83a 	sub	r3,r3,r2
    283c:	e0bffd17 	ldw	r2,-12(fp)
    2840:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	10800098 	cmpnei	r2,r2,2
    284c:	1000091e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	10800e17 	ldw	r2,56(r2)
    2858:	1005003a 	cmpeq	r2,r2,zero
    285c:	1000051e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2860:	e0bffd17 	ldw	r2,-12(fp)
    2864:	10800e17 	ldw	r2,56(r2)
    2868:	10ffffc4 	addi	r3,r2,-1
    286c:	e0bffd17 	ldw	r2,-12(fp)
    2870:	10c00e15 	stw	r3,56(r2)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	10800e17 	ldw	r2,56(r2)
    287c:	10c00044 	addi	r3,r2,1
    2880:	e0bffd17 	ldw	r2,-12(fp)
    2884:	10c00e15 	stw	r3,56(r2)

	return xReturn;
    2888:	e0bffc17 	ldw	r2,-16(fp)
}
    288c:	e037883a 	mov	sp,fp
    2890:	dfc00117 	ldw	ra,4(sp)
    2894:	df000017 	ldw	fp,0(sp)
    2898:	dec00204 	addi	sp,sp,8
    289c:	f800283a 	ret

000028a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    28a0:	defffc04 	addi	sp,sp,-16
    28a4:	dfc00315 	stw	ra,12(sp)
    28a8:	df000215 	stw	fp,8(sp)
    28ac:	df000204 	addi	fp,sp,8
    28b0:	e13ffe15 	stw	r4,-8(fp)
    28b4:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    28b8:	e0bffe17 	ldw	r2,-8(fp)
    28bc:	10801017 	ldw	r2,64(r2)
    28c0:	1005003a 	cmpeq	r2,r2,zero
    28c4:	1000181e 	bne	r2,zero,2928 <prvCopyDataFromQueue+0x88>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    28c8:	e0bffe17 	ldw	r2,-8(fp)
    28cc:	10c00317 	ldw	r3,12(r2)
    28d0:	e0bffe17 	ldw	r2,-8(fp)
    28d4:	10801017 	ldw	r2,64(r2)
    28d8:	1887883a 	add	r3,r3,r2
    28dc:	e0bffe17 	ldw	r2,-8(fp)
    28e0:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	10c00317 	ldw	r3,12(r2)
    28ec:	e0bffe17 	ldw	r2,-8(fp)
    28f0:	10800117 	ldw	r2,4(r2)
    28f4:	18800436 	bltu	r3,r2,2908 <prvCopyDataFromQueue+0x68>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	10c00017 	ldw	r3,0(r2)
    2900:	e0bffe17 	ldw	r2,-8(fp)
    2904:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2908:	e0bffe17 	ldw	r2,-8(fp)
    290c:	10c00317 	ldw	r3,12(r2)
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	11801017 	ldw	r6,64(r2)
    2918:	e0bfff17 	ldw	r2,-4(fp)
    291c:	1009883a 	mov	r4,r2
    2920:	180b883a 	mov	r5,r3
    2924:	00073240 	call	7324 <memcpy>
	}
}
    2928:	e037883a 	mov	sp,fp
    292c:	dfc00117 	ldw	ra,4(sp)
    2930:	df000017 	ldw	fp,0(sp)
    2934:	dec00204 	addi	sp,sp,8
    2938:	f800283a 	ret

0000293c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    293c:	defffd04 	addi	sp,sp,-12
    2940:	dfc00215 	stw	ra,8(sp)
    2944:	df000115 	stw	fp,4(sp)
    2948:	df000104 	addi	fp,sp,4
    294c:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2950:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2954:	00000f06 	br	2994 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2958:	e0bfff17 	ldw	r2,-4(fp)
    295c:	10800917 	ldw	r2,36(r2)
    2960:	1005003a 	cmpeq	r2,r2,zero
    2964:	10000f1e 	bne	r2,zero,29a4 <prvUnlockQueue+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2968:	e0bfff17 	ldw	r2,-4(fp)
    296c:	11000904 	addi	r4,r2,36
    2970:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2974:	1005003a 	cmpeq	r2,r2,zero
    2978:	1000011e 	bne	r2,zero,2980 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    297c:	00038d00 	call	38d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	10801217 	ldw	r2,72(r2)
    2988:	10ffffc4 	addi	r3,r2,-1
    298c:	e0bfff17 	ldw	r2,-4(fp)
    2990:	10c01215 	stw	r3,72(r2)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2994:	e0bfff17 	ldw	r2,-4(fp)
    2998:	10801217 	ldw	r2,72(r2)
    299c:	10800048 	cmpgei	r2,r2,1
    29a0:	103fed1e 	bne	r2,zero,2958 <prvUnlockQueue+0x1c>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    29a4:	e0ffff17 	ldw	r3,-4(fp)
    29a8:	00bfffc4 	movi	r2,-1
    29ac:	18801215 	stw	r2,72(r3)
	}
	taskEXIT_CRITICAL();
    29b0:	00041680 	call	4168 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    29b4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29b8:	00000f06 	br	29f8 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    29bc:	e0bfff17 	ldw	r2,-4(fp)
    29c0:	10800417 	ldw	r2,16(r2)
    29c4:	1005003a 	cmpeq	r2,r2,zero
    29c8:	10000f1e 	bne	r2,zero,2a08 <prvUnlockQueue+0xcc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	11000404 	addi	r4,r2,16
    29d4:	000361c0 	call	361c <xTaskRemoveFromEventList>
    29d8:	1005003a 	cmpeq	r2,r2,zero
    29dc:	1000011e 	bne	r2,zero,29e4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    29e0:	00038d00 	call	38d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	10801117 	ldw	r2,68(r2)
    29ec:	10ffffc4 	addi	r3,r2,-1
    29f0:	e0bfff17 	ldw	r2,-4(fp)
    29f4:	10c01115 	stw	r3,68(r2)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	10801117 	ldw	r2,68(r2)
    2a00:	10800048 	cmpgei	r2,r2,1
    2a04:	103fed1e 	bne	r2,zero,29bc <prvUnlockQueue+0x80>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2a08:	e0ffff17 	ldw	r3,-4(fp)
    2a0c:	00bfffc4 	movi	r2,-1
    2a10:	18801115 	stw	r2,68(r3)
	}
	taskEXIT_CRITICAL();
    2a14:	00041680 	call	4168 <vTaskExitCritical>
}
    2a18:	e037883a 	mov	sp,fp
    2a1c:	dfc00117 	ldw	ra,4(sp)
    2a20:	df000017 	ldw	fp,0(sp)
    2a24:	dec00204 	addi	sp,sp,8
    2a28:	f800283a 	ret

00002a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2a2c:	defffc04 	addi	sp,sp,-16
    2a30:	dfc00315 	stw	ra,12(sp)
    2a34:	df000215 	stw	fp,8(sp)
    2a38:	df000204 	addi	fp,sp,8
    2a3c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a40:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2a44:	e0bfff17 	ldw	r2,-4(fp)
    2a48:	10800e17 	ldw	r2,56(r2)
    2a4c:	1004c03a 	cmpne	r2,r2,zero
    2a50:	1000031e 	bne	r2,zero,2a60 <prvIsQueueEmpty+0x34>
		{
			xReturn = pdTRUE;
    2a54:	00800044 	movi	r2,1
    2a58:	e0bffe15 	stw	r2,-8(fp)
    2a5c:	00000106 	br	2a64 <prvIsQueueEmpty+0x38>
		}
		else
		{
			xReturn = pdFALSE;
    2a60:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2a64:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2a68:	e0bffe17 	ldw	r2,-8(fp)
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	dfc00117 	ldw	ra,4(sp)
    2a74:	df000017 	ldw	fp,0(sp)
    2a78:	dec00204 	addi	sp,sp,8
    2a7c:	f800283a 	ret

00002a80 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2a80:	defffd04 	addi	sp,sp,-12
    2a84:	df000215 	stw	fp,8(sp)
    2a88:	df000204 	addi	fp,sp,8
    2a8c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2a90:	e0bfff17 	ldw	r2,-4(fp)
    2a94:	10800e17 	ldw	r2,56(r2)
    2a98:	1004c03a 	cmpne	r2,r2,zero
    2a9c:	1000031e 	bne	r2,zero,2aac <xQueueIsQueueEmptyFromISR+0x2c>
	{
		xReturn = pdTRUE;
    2aa0:	00800044 	movi	r2,1
    2aa4:	e0bffe15 	stw	r2,-8(fp)
    2aa8:	00000106 	br	2ab0 <xQueueIsQueueEmptyFromISR+0x30>
	}
	else
	{
		xReturn = pdFALSE;
    2aac:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2ab0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ab4:	e037883a 	mov	sp,fp
    2ab8:	df000017 	ldw	fp,0(sp)
    2abc:	dec00104 	addi	sp,sp,4
    2ac0:	f800283a 	ret

00002ac4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2ac4:	defffc04 	addi	sp,sp,-16
    2ac8:	dfc00315 	stw	ra,12(sp)
    2acc:	df000215 	stw	fp,8(sp)
    2ad0:	df000204 	addi	fp,sp,8
    2ad4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ad8:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2adc:	e0bfff17 	ldw	r2,-4(fp)
    2ae0:	10c00e17 	ldw	r3,56(r2)
    2ae4:	e0bfff17 	ldw	r2,-4(fp)
    2ae8:	10800f17 	ldw	r2,60(r2)
    2aec:	1880031e 	bne	r3,r2,2afc <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
    2af0:	00800044 	movi	r2,1
    2af4:	e0bffe15 	stw	r2,-8(fp)
    2af8:	00000106 	br	2b00 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
    2afc:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2b00:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2b04:	e0bffe17 	ldw	r2,-8(fp)
}
    2b08:	e037883a 	mov	sp,fp
    2b0c:	dfc00117 	ldw	ra,4(sp)
    2b10:	df000017 	ldw	fp,0(sp)
    2b14:	dec00204 	addi	sp,sp,8
    2b18:	f800283a 	ret

00002b1c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2b1c:	defffd04 	addi	sp,sp,-12
    2b20:	df000215 	stw	fp,8(sp)
    2b24:	df000204 	addi	fp,sp,8
    2b28:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2b2c:	e0bfff17 	ldw	r2,-4(fp)
    2b30:	10c00e17 	ldw	r3,56(r2)
    2b34:	e0bfff17 	ldw	r2,-4(fp)
    2b38:	10800f17 	ldw	r2,60(r2)
    2b3c:	1880031e 	bne	r3,r2,2b4c <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2b40:	00800044 	movi	r2,1
    2b44:	e0bffe15 	stw	r2,-8(fp)
    2b48:	00000106 	br	2b50 <xQueueIsQueueFullFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
    2b4c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2b50:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2b54:	e037883a 	mov	sp,fp
    2b58:	df000017 	ldw	fp,0(sp)
    2b5c:	dec00104 	addi	sp,sp,4
    2b60:	f800283a 	ret

00002b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2b64:	defffb04 	addi	sp,sp,-20
    2b68:	dfc00415 	stw	ra,16(sp)
    2b6c:	df000315 	stw	fp,12(sp)
    2b70:	df000304 	addi	fp,sp,12
    2b74:	e13ffe15 	stw	r4,-8(fp)
    2b78:	e17fff15 	stw	r5,-4(fp)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b7c:	e0bffe17 	ldw	r2,-8(fp)
    2b80:	e0bffd15 	stw	r2,-12(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2b84:	00041140 	call	4114 <vTaskEnterCritical>
    2b88:	e0bffd17 	ldw	r2,-12(fp)
    2b8c:	10801117 	ldw	r2,68(r2)
    2b90:	10bfffd8 	cmpnei	r2,r2,-1
    2b94:	1000021e 	bne	r2,zero,2ba0 <vQueueWaitForMessageRestricted+0x3c>
    2b98:	e0bffd17 	ldw	r2,-12(fp)
    2b9c:	10001115 	stw	zero,68(r2)
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10801217 	ldw	r2,72(r2)
    2ba8:	10bfffd8 	cmpnei	r2,r2,-1
    2bac:	1000021e 	bne	r2,zero,2bb8 <vQueueWaitForMessageRestricted+0x54>
    2bb0:	e0bffd17 	ldw	r2,-12(fp)
    2bb4:	10001215 	stw	zero,72(r2)
    2bb8:	00041680 	call	4168 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2bbc:	e0bffd17 	ldw	r2,-12(fp)
    2bc0:	10800e17 	ldw	r2,56(r2)
    2bc4:	1004c03a 	cmpne	r2,r2,zero
    2bc8:	1000041e 	bne	r2,zero,2bdc <vQueueWaitForMessageRestricted+0x78>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2bcc:	e0bffd17 	ldw	r2,-12(fp)
    2bd0:	11000904 	addi	r4,r2,36
    2bd4:	e17fff17 	ldw	r5,-4(fp)
    2bd8:	00035bc0 	call	35bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2bdc:	e13ffd17 	ldw	r4,-12(fp)
    2be0:	000293c0 	call	293c <prvUnlockQueue>
	}
    2be4:	e037883a 	mov	sp,fp
    2be8:	dfc00117 	ldw	ra,4(sp)
    2bec:	df000017 	ldw	fp,0(sp)
    2bf0:	dec00204 	addi	sp,sp,8
    2bf4:	f800283a 	ret

00002bf8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2bf8:	defff604 	addi	sp,sp,-40
    2bfc:	dfc00915 	stw	ra,36(sp)
    2c00:	df000815 	stw	fp,32(sp)
    2c04:	df000804 	addi	fp,sp,32
    2c08:	e13ffc15 	stw	r4,-16(fp)
    2c0c:	e17ffd15 	stw	r5,-12(fp)
    2c10:	e1ffff15 	stw	r7,-4(fp)
    2c14:	e1bffe0d 	sth	r6,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2c18:	e13ffe0b 	ldhu	r4,-8(fp)
    2c1c:	e1400417 	ldw	r5,16(fp)
    2c20:	0003c100 	call	3c10 <prvAllocateTCBAndStack>
    2c24:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
    2c28:	e0bffa17 	ldw	r2,-24(fp)
    2c2c:	1005003a 	cmpeq	r2,r2,zero
    2c30:	1000501e 	bne	r2,zero,2d74 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2c34:	e0bffa17 	ldw	r2,-24(fp)
    2c38:	10c00c17 	ldw	r3,48(r2)
    2c3c:	e0bffe0b 	ldhu	r2,-8(fp)
    2c40:	1085883a 	add	r2,r2,r2
    2c44:	1085883a 	add	r2,r2,r2
    2c48:	1885883a 	add	r2,r3,r2
    2c4c:	10bfff04 	addi	r2,r2,-4
    2c50:	e0bff915 	stw	r2,-28(fp)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2c54:	e0bff917 	ldw	r2,-28(fp)
    2c58:	1007883a 	mov	r3,r2
    2c5c:	00bfff04 	movi	r2,-4
    2c60:	1884703a 	and	r2,r3,r2
    2c64:	e0bff915 	stw	r2,-28(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2c68:	e0bffe0b 	ldhu	r2,-8(fp)
    2c6c:	d8800015 	stw	r2,0(sp)
    2c70:	e13ffa17 	ldw	r4,-24(fp)
    2c74:	e17ffd17 	ldw	r5,-12(fp)
    2c78:	e1800217 	ldw	r6,8(fp)
    2c7c:	e1c00517 	ldw	r7,20(fp)
    2c80:	00039100 	call	3910 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c84:	e13ff917 	ldw	r4,-28(fp)
    2c88:	e17ffc17 	ldw	r5,-16(fp)
    2c8c:	e1bfff17 	ldw	r6,-4(fp)
    2c90:	00016f40 	call	16f4 <pxPortInitialiseStack>
    2c94:	1007883a 	mov	r3,r2
    2c98:	e0bffa17 	ldw	r2,-24(fp)
    2c9c:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2ca0:	e0800317 	ldw	r2,12(fp)
    2ca4:	1005003a 	cmpeq	r2,r2,zero
    2ca8:	1000031e 	bne	r2,zero,2cb8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2cac:	e0c00317 	ldw	r3,12(fp)
    2cb0:	e0bffa17 	ldw	r2,-24(fp)
    2cb4:	18800015 	stw	r2,0(r3)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2cb8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    2cbc:	d0a02a17 	ldw	r2,-32600(gp)
    2cc0:	10800044 	addi	r2,r2,1
    2cc4:	d0a02a15 	stw	r2,-32600(gp)
			if( pxCurrentTCB == NULL )
    2cc8:	d0a02817 	ldw	r2,-32608(gp)
    2ccc:	1004c03a 	cmpne	r2,r2,zero
    2cd0:	1000071e 	bne	r2,zero,2cf0 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2cd4:	e0bffa17 	ldw	r2,-24(fp)
    2cd8:	d0a02815 	stw	r2,-32608(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2cdc:	d0a02a17 	ldw	r2,-32600(gp)
    2ce0:	10800058 	cmpnei	r2,r2,1
    2ce4:	10000b1e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2ce8:	0003a4c0 	call	3a4c <prvInitialiseTaskLists>
    2cec:	00000906 	br	2d14 <xTaskGenericCreate+0x11c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2cf0:	d0a02d17 	ldw	r2,-32588(gp)
    2cf4:	1004c03a 	cmpne	r2,r2,zero
    2cf8:	1000061e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2cfc:	d0a02817 	ldw	r2,-32608(gp)
    2d00:	10c00b17 	ldw	r3,44(r2)
    2d04:	e0800217 	ldw	r2,8(fp)
    2d08:	10c00236 	bltu	r2,r3,2d14 <xTaskGenericCreate+0x11c>
					{
						pxCurrentTCB = pxNewTCB;
    2d0c:	e0bffa17 	ldw	r2,-24(fp)
    2d10:	d0a02815 	stw	r2,-32608(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2d14:	d0a03117 	ldw	r2,-32572(gp)
    2d18:	10800044 	addi	r2,r2,1
    2d1c:	d0a03115 	stw	r2,-32572(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2d20:	e0bffa17 	ldw	r2,-24(fp)
    2d24:	10c00b17 	ldw	r3,44(r2)
    2d28:	d0a02c17 	ldw	r2,-32592(gp)
    2d2c:	10c0032e 	bgeu	r2,r3,2d3c <xTaskGenericCreate+0x144>
    2d30:	e0bffa17 	ldw	r2,-24(fp)
    2d34:	10800b17 	ldw	r2,44(r2)
    2d38:	d0a02c15 	stw	r2,-32592(gp)
    2d3c:	e0bffa17 	ldw	r2,-24(fp)
    2d40:	10800b17 	ldw	r2,44(r2)
    2d44:	10800524 	muli	r2,r2,20
    2d48:	1007883a 	mov	r3,r2
    2d4c:	00820234 	movhi	r2,2056
    2d50:	10be1204 	addi	r2,r2,-1976
    2d54:	1889883a 	add	r4,r3,r2
    2d58:	e0bffa17 	ldw	r2,-24(fp)
    2d5c:	11400104 	addi	r5,r2,4
    2d60:	000149c0 	call	149c <vListInsertEnd>

			xReturn = pdPASS;
    2d64:	00800044 	movi	r2,1
    2d68:	e0bffb15 	stw	r2,-20(fp)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2d6c:	00041680 	call	4168 <vTaskExitCritical>
    2d70:	00000206 	br	2d7c <xTaskGenericCreate+0x184>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2d74:	00bfffc4 	movi	r2,-1
    2d78:	e0bffb15 	stw	r2,-20(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	10800058 	cmpnei	r2,r2,1
    2d84:	1000081e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
	{
		if( xSchedulerRunning != pdFALSE )
    2d88:	d0a02d17 	ldw	r2,-32588(gp)
    2d8c:	1005003a 	cmpeq	r2,r2,zero
    2d90:	1000051e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2d94:	d0a02817 	ldw	r2,-32608(gp)
    2d98:	10c00b17 	ldw	r3,44(r2)
    2d9c:	e0800217 	ldw	r2,8(fp)
    2da0:	1880012e 	bgeu	r3,r2,2da8 <xTaskGenericCreate+0x1b0>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2da4:	003b683a 	trap	0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2da8:	e0bffb17 	ldw	r2,-20(fp)
}
    2dac:	e037883a 	mov	sp,fp
    2db0:	dfc00117 	ldw	ra,4(sp)
    2db4:	df000017 	ldw	fp,0(sp)
    2db8:	dec00204 	addi	sp,sp,8
    2dbc:	f800283a 	ret

00002dc0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2dc0:	defffb04 	addi	sp,sp,-20
    2dc4:	dfc00415 	stw	ra,16(sp)
    2dc8:	df000315 	stw	fp,12(sp)
    2dcc:	df000304 	addi	fp,sp,12
    2dd0:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2dd4:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2dd8:	e0bffe17 	ldw	r2,-8(fp)
    2ddc:	1004c03a 	cmpne	r2,r2,zero
    2de0:	1000031e 	bne	r2,zero,2df0 <vTaskDelete+0x30>
    2de4:	d0a02817 	ldw	r2,-32608(gp)
    2de8:	e0bfff15 	stw	r2,-4(fp)
    2dec:	00000206 	br	2df8 <vTaskDelete+0x38>
    2df0:	e0bffe17 	ldw	r2,-8(fp)
    2df4:	e0bfff15 	stw	r2,-4(fp)
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	e0bffd15 	stw	r2,-12(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	11000104 	addi	r4,r2,4
    2e08:	00015f80 	call	15f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2e0c:	e0bffd17 	ldw	r2,-12(fp)
    2e10:	10800a17 	ldw	r2,40(r2)
    2e14:	1005003a 	cmpeq	r2,r2,zero
    2e18:	1000031e 	bne	r2,zero,2e28 <vTaskDelete+0x68>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	11000604 	addi	r4,r2,24
    2e24:	00015f80 	call	15f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2e28:	e0bffd17 	ldw	r2,-12(fp)
    2e2c:	11400104 	addi	r5,r2,4
    2e30:	01020234 	movhi	r4,2056
    2e34:	213e5d04 	addi	r4,r4,-1676
    2e38:	000149c0 	call	149c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2e3c:	d0a02917 	ldw	r2,-32604(gp)
    2e40:	10800044 	addi	r2,r2,1
    2e44:	d0a02915 	stw	r2,-32604(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2e48:	d0a03117 	ldw	r2,-32572(gp)
    2e4c:	10800044 	addi	r2,r2,1
    2e50:	d0a03115 	stw	r2,-32572(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2e54:	00041680 	call	4168 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2e58:	d0a02d17 	ldw	r2,-32588(gp)
    2e5c:	1005003a 	cmpeq	r2,r2,zero
    2e60:	1000081e 	bne	r2,zero,2e84 <vTaskDelete+0xc4>
		{
			if( pxTCB == pxCurrentTCB )
    2e64:	d0e02817 	ldw	r3,-32608(gp)
    2e68:	e0bffd17 	ldw	r2,-12(fp)
    2e6c:	10c0021e 	bne	r2,r3,2e78 <vTaskDelete+0xb8>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    2e70:	003b683a 	trap	0
    2e74:	00000306 	br	2e84 <vTaskDelete+0xc4>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    2e78:	00041140 	call	4114 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2e7c:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    2e80:	00041680 	call	4168 <vTaskExitCritical>
			}
		}
	}
    2e84:	e037883a 	mov	sp,fp
    2e88:	dfc00117 	ldw	ra,4(sp)
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00204 	addi	sp,sp,8
    2e94:	f800283a 	ret

00002e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2e98:	defffb04 	addi	sp,sp,-20
    2e9c:	dfc00415 	stw	ra,16(sp)
    2ea0:	df000315 	stw	fp,12(sp)
    2ea4:	df000304 	addi	fp,sp,12
    2ea8:	e13fff15 	stw	r4,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2eac:	e03ffd15 	stw	zero,-12(fp)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2eb0:	e0bfff17 	ldw	r2,-4(fp)
    2eb4:	1005003a 	cmpeq	r2,r2,zero
    2eb8:	10000c1e 	bne	r2,zero,2eec <vTaskDelay+0x54>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2ebc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2ec0:	d0e02b17 	ldw	r3,-32596(gp)
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	1885883a 	add	r2,r3,r2
    2ecc:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2ed0:	d0a02817 	ldw	r2,-32608(gp)
    2ed4:	11000104 	addi	r4,r2,4
    2ed8:	00015f80 	call	15f8 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2edc:	e13ffe17 	ldw	r4,-8(fp)
    2ee0:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2ee4:	00030180 	call	3018 <xTaskResumeAll>
    2ee8:	e0bffd15 	stw	r2,-12(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2eec:	e0bffd17 	ldw	r2,-12(fp)
    2ef0:	1004c03a 	cmpne	r2,r2,zero
    2ef4:	1000011e 	bne	r2,zero,2efc <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
    2ef8:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2efc:	e037883a 	mov	sp,fp
    2f00:	dfc00117 	ldw	ra,4(sp)
    2f04:	df000017 	ldw	fp,0(sp)
    2f08:	dec00204 	addi	sp,sp,8
    2f0c:	f800283a 	ret

00002f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2f10:	defff804 	addi	sp,sp,-32
    2f14:	dfc00715 	stw	ra,28(sp)
    2f18:	df000615 	stw	fp,24(sp)
    2f1c:	df000604 	addi	fp,sp,24
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2f20:	d8000015 	stw	zero,0(sp)
    2f24:	d8000115 	stw	zero,4(sp)
    2f28:	d8000215 	stw	zero,8(sp)
    2f2c:	d8000315 	stw	zero,12(sp)
    2f30:	01000034 	movhi	r4,0
    2f34:	210e3d04 	addi	r4,r4,14580
    2f38:	01420034 	movhi	r5,2048
    2f3c:	29400d04 	addi	r5,r5,52
    2f40:	01840004 	movi	r6,4096
    2f44:	000f883a 	mov	r7,zero
    2f48:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    2f4c:	e0bfff15 	stw	r2,-4(fp)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2f50:	e0bfff17 	ldw	r2,-4(fp)
    2f54:	10800058 	cmpnei	r2,r2,1
    2f58:	1000021e 	bne	r2,zero,2f64 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
    2f5c:	000488c0 	call	488c <xTimerCreateTimerTask>
    2f60:	e0bfff15 	stw	r2,-4(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2f64:	e0bfff17 	ldw	r2,-4(fp)
    2f68:	10800058 	cmpnei	r2,r2,1
    2f6c:	10000a1e 	bne	r2,zero,2f98 <vTaskStartScheduler+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f70:	0005303a 	rdctl	r2,status
    2f74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f78:	e0fffe17 	ldw	r3,-8(fp)
    2f7c:	00bfff84 	movi	r2,-2
    2f80:	1884703a 	and	r2,r3,r2
    2f84:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2f88:	00800044 	movi	r2,1
    2f8c:	d0a02d15 	stw	r2,-32588(gp)
		xTickCount = ( TickType_t ) 0U;
    2f90:	d0202b15 	stw	zero,-32596(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f94:	00017dc0 	call	17dc <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    2f98:	e037883a 	mov	sp,fp
    2f9c:	dfc00117 	ldw	ra,4(sp)
    2fa0:	df000017 	ldw	fp,0(sp)
    2fa4:	dec00204 	addi	sp,sp,8
    2fa8:	f800283a 	ret

00002fac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2fac:	defffd04 	addi	sp,sp,-12
    2fb0:	dfc00215 	stw	ra,8(sp)
    2fb4:	df000115 	stw	fp,4(sp)
    2fb8:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2fbc:	0005303a 	rdctl	r2,status
    2fc0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fc4:	e0ffff17 	ldw	r3,-4(fp)
    2fc8:	00bfff84 	movi	r2,-2
    2fcc:	1884703a 	and	r2,r3,r2
    2fd0:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    2fd4:	d0202d15 	stw	zero,-32588(gp)
	vPortEndScheduler();
    2fd8:	00018140 	call	1814 <vPortEndScheduler>
}
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	dfc00117 	ldw	ra,4(sp)
    2fe4:	df000017 	ldw	fp,0(sp)
    2fe8:	dec00204 	addi	sp,sp,8
    2fec:	f800283a 	ret

00002ff0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2ff0:	deffff04 	addi	sp,sp,-4
    2ff4:	df000015 	stw	fp,0(sp)
    2ff8:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2ffc:	d0a03217 	ldw	r2,-32568(gp)
    3000:	10800044 	addi	r2,r2,1
    3004:	d0a03215 	stw	r2,-32568(gp)
}
    3008:	e037883a 	mov	sp,fp
    300c:	df000017 	ldw	fp,0(sp)
    3010:	dec00104 	addi	sp,sp,4
    3014:	f800283a 	ret

00003018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3018:	defffc04 	addi	sp,sp,-16
    301c:	dfc00315 	stw	ra,12(sp)
    3020:	df000215 	stw	fp,8(sp)
    3024:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3028:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    302c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    3030:	d0a03217 	ldw	r2,-32568(gp)
    3034:	10bfffc4 	addi	r2,r2,-1
    3038:	d0a03215 	stw	r2,-32568(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    303c:	d0a03217 	ldw	r2,-32568(gp)
    3040:	1004c03a 	cmpne	r2,r2,zero
    3044:	1000411e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3048:	d0a02a17 	ldw	r2,-32600(gp)
    304c:	1005003a 	cmpeq	r2,r2,zero
    3050:	10003e1e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3054:	00002306 	br	30e4 <xTaskResumeAll+0xcc>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3058:	00820234 	movhi	r2,2056
    305c:	10be5804 	addi	r2,r2,-1696
    3060:	10800317 	ldw	r2,12(r2)
    3064:	10800317 	ldw	r2,12(r2)
    3068:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    306c:	e0bfff17 	ldw	r2,-4(fp)
    3070:	11000604 	addi	r4,r2,24
    3074:	00015f80 	call	15f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3078:	e0bfff17 	ldw	r2,-4(fp)
    307c:	11000104 	addi	r4,r2,4
    3080:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3084:	e0bfff17 	ldw	r2,-4(fp)
    3088:	10c00b17 	ldw	r3,44(r2)
    308c:	d0a02c17 	ldw	r2,-32592(gp)
    3090:	10c0032e 	bgeu	r2,r3,30a0 <xTaskResumeAll+0x88>
    3094:	e0bfff17 	ldw	r2,-4(fp)
    3098:	10800b17 	ldw	r2,44(r2)
    309c:	d0a02c15 	stw	r2,-32592(gp)
    30a0:	e0bfff17 	ldw	r2,-4(fp)
    30a4:	10800b17 	ldw	r2,44(r2)
    30a8:	10800524 	muli	r2,r2,20
    30ac:	1007883a 	mov	r3,r2
    30b0:	00820234 	movhi	r2,2056
    30b4:	10be1204 	addi	r2,r2,-1976
    30b8:	1889883a 	add	r4,r3,r2
    30bc:	e0bfff17 	ldw	r2,-4(fp)
    30c0:	11400104 	addi	r5,r2,4
    30c4:	000149c0 	call	149c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	10c00b17 	ldw	r3,44(r2)
    30d0:	d0a02817 	ldw	r2,-32608(gp)
    30d4:	10800b17 	ldw	r2,44(r2)
    30d8:	18800236 	bltu	r3,r2,30e4 <xTaskResumeAll+0xcc>
					{
						xYieldPending = pdTRUE;
    30dc:	00800044 	movi	r2,1
    30e0:	d0a02f15 	stw	r2,-32580(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    30e4:	00820234 	movhi	r2,2056
    30e8:	10be5804 	addi	r2,r2,-1696
    30ec:	10800017 	ldw	r2,0(r2)
    30f0:	1004c03a 	cmpne	r2,r2,zero
    30f4:	103fd81e 	bne	r2,zero,3058 <xTaskResumeAll+0x40>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    30f8:	d0a02e17 	ldw	r2,-32584(gp)
    30fc:	1005003a 	cmpeq	r2,r2,zero
    3100:	10000c1e 	bne	r2,zero,3134 <xTaskResumeAll+0x11c>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3104:	00000806 	br	3128 <xTaskResumeAll+0x110>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3108:	00031dc0 	call	31dc <xTaskIncrementTick>
    310c:	1005003a 	cmpeq	r2,r2,zero
    3110:	1000021e 	bne	r2,zero,311c <xTaskResumeAll+0x104>
						{
							xYieldPending = pdTRUE;
    3114:	00800044 	movi	r2,1
    3118:	d0a02f15 	stw	r2,-32580(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    311c:	d0a02e17 	ldw	r2,-32584(gp)
    3120:	10bfffc4 	addi	r2,r2,-1
    3124:	d0a02e15 	stw	r2,-32584(gp)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3128:	d0a02e17 	ldw	r2,-32584(gp)
    312c:	1004c03a 	cmpne	r2,r2,zero
    3130:	103ff51e 	bne	r2,zero,3108 <xTaskResumeAll+0xf0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3134:	d0a02f17 	ldw	r2,-32580(gp)
    3138:	10800058 	cmpnei	r2,r2,1
    313c:	1000031e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3140:	00800044 	movi	r2,1
    3144:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3148:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    314c:	00041680 	call	4168 <vTaskExitCritical>

	return xAlreadyYielded;
    3150:	e0bffe17 	ldw	r2,-8(fp)
}
    3154:	e037883a 	mov	sp,fp
    3158:	dfc00117 	ldw	ra,4(sp)
    315c:	df000017 	ldw	fp,0(sp)
    3160:	dec00204 	addi	sp,sp,8
    3164:	f800283a 	ret

00003168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3168:	defffe04 	addi	sp,sp,-8
    316c:	df000115 	stw	fp,4(sp)
    3170:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    3174:	d0a02b17 	ldw	r2,-32596(gp)
    3178:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    317c:	e0bfff17 	ldw	r2,-4(fp)
}
    3180:	e037883a 	mov	sp,fp
    3184:	df000017 	ldw	fp,0(sp)
    3188:	dec00104 	addi	sp,sp,4
    318c:	f800283a 	ret

00003190 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3190:	defffd04 	addi	sp,sp,-12
    3194:	df000215 	stw	fp,8(sp)
    3198:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    319c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
    31a0:	d0a02b17 	ldw	r2,-32596(gp)
    31a4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31a8:	e0bfff17 	ldw	r2,-4(fp)
}
    31ac:	e037883a 	mov	sp,fp
    31b0:	df000017 	ldw	fp,0(sp)
    31b4:	dec00104 	addi	sp,sp,4
    31b8:	f800283a 	ret

000031bc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    31bc:	deffff04 	addi	sp,sp,-4
    31c0:	df000015 	stw	fp,0(sp)
    31c4:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    31c8:	d0a02a17 	ldw	r2,-32600(gp)
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00104 	addi	sp,sp,4
    31d8:	f800283a 	ret

000031dc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    31dc:	defff804 	addi	sp,sp,-32
    31e0:	dfc00715 	stw	ra,28(sp)
    31e4:	df000615 	stw	fp,24(sp)
    31e8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    31ec:	e03ffc15 	stw	zero,-16(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    31f0:	d0a03217 	ldw	r2,-32568(gp)
    31f4:	1004c03a 	cmpne	r2,r2,zero
    31f8:	1000611e 	bne	r2,zero,3380 <xTaskIncrementTick+0x1a4>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    31fc:	d0a02b17 	ldw	r2,-32596(gp)
    3200:	10800044 	addi	r2,r2,1
    3204:	d0a02b15 	stw	r2,-32596(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3208:	d0a02b17 	ldw	r2,-32596(gp)
    320c:	e0bffb15 	stw	r2,-20(fp)

			if( xConstTickCount == ( TickType_t ) 0U )
    3210:	e0bffb17 	ldw	r2,-20(fp)
    3214:	1004c03a 	cmpne	r2,r2,zero
    3218:	10000a1e 	bne	r2,zero,3244 <xTaskIncrementTick+0x68>
			{
				taskSWITCH_DELAYED_LISTS();
    321c:	d0a03317 	ldw	r2,-32564(gp)
    3220:	e0bffa15 	stw	r2,-24(fp)
    3224:	d0a03417 	ldw	r2,-32560(gp)
    3228:	d0a03315 	stw	r2,-32564(gp)
    322c:	e0bffa17 	ldw	r2,-24(fp)
    3230:	d0a03415 	stw	r2,-32560(gp)
    3234:	d0a03017 	ldw	r2,-32576(gp)
    3238:	10800044 	addi	r2,r2,1
    323c:	d0a03015 	stw	r2,-32576(gp)
    3240:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3244:	d0e00317 	ldw	r3,-32756(gp)
    3248:	e0bffb17 	ldw	r2,-20(fp)
    324c:	10c03f36 	bltu	r2,r3,334c <xTaskIncrementTick+0x170>
    3250:	00000006 	br	3254 <xTaskIncrementTick+0x78>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3254:	d0a03317 	ldw	r2,-32564(gp)
    3258:	10800017 	ldw	r2,0(r2)
    325c:	1004c03a 	cmpne	r2,r2,zero
    3260:	1000031e 	bne	r2,zero,3270 <xTaskIncrementTick+0x94>
    3264:	00800044 	movi	r2,1
    3268:	e0bfff05 	stb	r2,-4(fp)
    326c:	00000106 	br	3274 <xTaskIncrementTick+0x98>
    3270:	e03fff05 	stb	zero,-4(fp)
    3274:	e0bfff03 	ldbu	r2,-4(fp)
    3278:	1005003a 	cmpeq	r2,r2,zero
    327c:	1000031e 	bne	r2,zero,328c <xTaskIncrementTick+0xb0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3280:	00bfffc4 	movi	r2,-1
    3284:	d0a00315 	stw	r2,-32756(gp)
						break;
    3288:	00003006 	br	334c <xTaskIncrementTick+0x170>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    328c:	d0a03317 	ldw	r2,-32564(gp)
    3290:	10800317 	ldw	r2,12(r2)
    3294:	10800317 	ldw	r2,12(r2)
    3298:	e0bffe15 	stw	r2,-8(fp)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    329c:	e0bffe17 	ldw	r2,-8(fp)
    32a0:	10800117 	ldw	r2,4(r2)
    32a4:	e0bffd15 	stw	r2,-12(fp)

						if( xConstTickCount < xItemValue )
    32a8:	e0fffb17 	ldw	r3,-20(fp)
    32ac:	e0bffd17 	ldw	r2,-12(fp)
    32b0:	1880032e 	bgeu	r3,r2,32c0 <xTaskIncrementTick+0xe4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	d0a00315 	stw	r2,-32756(gp)
							break;
    32bc:	00002306 	br	334c <xTaskIncrementTick+0x170>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    32c0:	e0bffe17 	ldw	r2,-8(fp)
    32c4:	11000104 	addi	r4,r2,4
    32c8:	00015f80 	call	15f8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	10800a17 	ldw	r2,40(r2)
    32d4:	1005003a 	cmpeq	r2,r2,zero
    32d8:	1000031e 	bne	r2,zero,32e8 <xTaskIncrementTick+0x10c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	11000604 	addi	r4,r2,24
    32e4:	00015f80 	call	15f8 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    32e8:	e0bffe17 	ldw	r2,-8(fp)
    32ec:	10c00b17 	ldw	r3,44(r2)
    32f0:	d0a02c17 	ldw	r2,-32592(gp)
    32f4:	10c0032e 	bgeu	r2,r3,3304 <xTaskIncrementTick+0x128>
    32f8:	e0bffe17 	ldw	r2,-8(fp)
    32fc:	10800b17 	ldw	r2,44(r2)
    3300:	d0a02c15 	stw	r2,-32592(gp)
    3304:	e0bffe17 	ldw	r2,-8(fp)
    3308:	10800b17 	ldw	r2,44(r2)
    330c:	10800524 	muli	r2,r2,20
    3310:	1007883a 	mov	r3,r2
    3314:	00820234 	movhi	r2,2056
    3318:	10be1204 	addi	r2,r2,-1976
    331c:	1889883a 	add	r4,r3,r2
    3320:	e0bffe17 	ldw	r2,-8(fp)
    3324:	11400104 	addi	r5,r2,4
    3328:	000149c0 	call	149c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    332c:	e0bffe17 	ldw	r2,-8(fp)
    3330:	10c00b17 	ldw	r3,44(r2)
    3334:	d0a02817 	ldw	r2,-32608(gp)
    3338:	10800b17 	ldw	r2,44(r2)
    333c:	18bfc536 	bltu	r3,r2,3254 <xTaskIncrementTick+0x78>
							{
								xSwitchRequired = pdTRUE;
    3340:	00800044 	movi	r2,1
    3344:	e0bffc15 	stw	r2,-16(fp)
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    3348:	003fc206 	br	3254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    334c:	d0a02817 	ldw	r2,-32608(gp)
    3350:	10800b17 	ldw	r2,44(r2)
    3354:	10800524 	muli	r2,r2,20
    3358:	1007883a 	mov	r3,r2
    335c:	00820234 	movhi	r2,2056
    3360:	10be1204 	addi	r2,r2,-1976
    3364:	1885883a 	add	r2,r3,r2
    3368:	10800017 	ldw	r2,0(r2)
    336c:	108000b0 	cmpltui	r2,r2,2
    3370:	1000061e 	bne	r2,zero,338c <xTaskIncrementTick+0x1b0>
			{
				xSwitchRequired = pdTRUE;
    3374:	00800044 	movi	r2,1
    3378:	e0bffc15 	stw	r2,-16(fp)
    337c:	00000306 	br	338c <xTaskIncrementTick+0x1b0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3380:	d0a02e17 	ldw	r2,-32584(gp)
    3384:	10800044 	addi	r2,r2,1
    3388:	d0a02e15 	stw	r2,-32584(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    338c:	d0a02f17 	ldw	r2,-32580(gp)
    3390:	1005003a 	cmpeq	r2,r2,zero
    3394:	1000021e 	bne	r2,zero,33a0 <xTaskIncrementTick+0x1c4>
		{
			xSwitchRequired = pdTRUE;
    3398:	00800044 	movi	r2,1
    339c:	e0bffc15 	stw	r2,-16(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    33a0:	e0bffc17 	ldw	r2,-16(fp)
}
    33a4:	e037883a 	mov	sp,fp
    33a8:	dfc00117 	ldw	ra,4(sp)
    33ac:	df000017 	ldw	fp,0(sp)
    33b0:	dec00204 	addi	sp,sp,8
    33b4:	f800283a 	ret

000033b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    33b8:	defffd04 	addi	sp,sp,-12
    33bc:	dfc00215 	stw	ra,8(sp)
    33c0:	df000115 	stw	fp,4(sp)
    33c4:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    33c8:	d0a03217 	ldw	r2,-32568(gp)
    33cc:	1005003a 	cmpeq	r2,r2,zero
    33d0:	1000031e 	bne	r2,zero,33e0 <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    33d4:	00800044 	movi	r2,1
    33d8:	d0a02f15 	stw	r2,-32580(gp)
    33dc:	00003d06 	br	34d4 <vTaskSwitchContext+0x11c>
	}
	else
	{
		xYieldPending = pdFALSE;
    33e0:	d0202f15 	stw	zero,-32580(gp)
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    33e4:	d0a02817 	ldw	r2,-32608(gp)
    33e8:	10c00017 	ldw	r3,0(r2)
    33ec:	d0a02817 	ldw	r2,-32608(gp)
    33f0:	10800c17 	ldw	r2,48(r2)
    33f4:	10c00436 	bltu	r2,r3,3408 <vTaskSwitchContext+0x50>
    33f8:	d1202817 	ldw	r4,-32608(gp)
    33fc:	d0a02817 	ldw	r2,-32608(gp)
    3400:	11400d04 	addi	r5,r2,52
    3404:	00016900 	call	1690 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    3408:	d0a02817 	ldw	r2,-32608(gp)
    340c:	11000c17 	ldw	r4,48(r2)
    3410:	01420034 	movhi	r5,2048
    3414:	29400e44 	addi	r5,r5,57
    3418:	01800504 	movi	r6,20
    341c:	00072b00 	call	72b0 <memcmp>
    3420:	1005003a 	cmpeq	r2,r2,zero
    3424:	1000081e 	bne	r2,zero,3448 <vTaskSwitchContext+0x90>
    3428:	d1202817 	ldw	r4,-32608(gp)
    342c:	d0a02817 	ldw	r2,-32608(gp)
    3430:	11400d04 	addi	r5,r2,52
    3434:	00016900 	call	1690 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3438:	00000306 	br	3448 <vTaskSwitchContext+0x90>
    343c:	d0a02c17 	ldw	r2,-32592(gp)
    3440:	10bfffc4 	addi	r2,r2,-1
    3444:	d0a02c15 	stw	r2,-32592(gp)
    3448:	d0a02c17 	ldw	r2,-32592(gp)
    344c:	10800524 	muli	r2,r2,20
    3450:	1007883a 	mov	r3,r2
    3454:	00820234 	movhi	r2,2056
    3458:	10be1204 	addi	r2,r2,-1976
    345c:	1885883a 	add	r2,r3,r2
    3460:	10800017 	ldw	r2,0(r2)
    3464:	1005003a 	cmpeq	r2,r2,zero
    3468:	103ff41e 	bne	r2,zero,343c <vTaskSwitchContext+0x84>
    346c:	d0a02c17 	ldw	r2,-32592(gp)
    3470:	10800524 	muli	r2,r2,20
    3474:	1007883a 	mov	r3,r2
    3478:	00820234 	movhi	r2,2056
    347c:	10be1204 	addi	r2,r2,-1976
    3480:	1885883a 	add	r2,r3,r2
    3484:	e0bfff15 	stw	r2,-4(fp)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	10800117 	ldw	r2,4(r2)
    3490:	10c00117 	ldw	r3,4(r2)
    3494:	e0bfff17 	ldw	r2,-4(fp)
    3498:	10c00115 	stw	r3,4(r2)
    349c:	e0bfff17 	ldw	r2,-4(fp)
    34a0:	10c00117 	ldw	r3,4(r2)
    34a4:	e0bfff17 	ldw	r2,-4(fp)
    34a8:	10800204 	addi	r2,r2,8
    34ac:	1880051e 	bne	r3,r2,34c4 <vTaskSwitchContext+0x10c>
    34b0:	e0bfff17 	ldw	r2,-4(fp)
    34b4:	10800117 	ldw	r2,4(r2)
    34b8:	10c00117 	ldw	r3,4(r2)
    34bc:	e0bfff17 	ldw	r2,-4(fp)
    34c0:	10c00115 	stw	r3,4(r2)
    34c4:	e0bfff17 	ldw	r2,-4(fp)
    34c8:	10800117 	ldw	r2,4(r2)
    34cc:	10800317 	ldw	r2,12(r2)
    34d0:	d0a02815 	stw	r2,-32608(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    34d4:	e037883a 	mov	sp,fp
    34d8:	dfc00117 	ldw	ra,4(sp)
    34dc:	df000017 	ldw	fp,0(sp)
    34e0:	dec00204 	addi	sp,sp,8
    34e4:	f800283a 	ret

000034e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    34e8:	defffb04 	addi	sp,sp,-20
    34ec:	dfc00415 	stw	ra,16(sp)
    34f0:	df000315 	stw	fp,12(sp)
    34f4:	df000304 	addi	fp,sp,12
    34f8:	e13ffe15 	stw	r4,-8(fp)
    34fc:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3500:	d0a02817 	ldw	r2,-32608(gp)
    3504:	11400604 	addi	r5,r2,24
    3508:	e13ffe17 	ldw	r4,-8(fp)
    350c:	00015240 	call	1524 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3510:	d0a02817 	ldw	r2,-32608(gp)
    3514:	11000104 	addi	r4,r2,4
    3518:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    351c:	d0e02b17 	ldw	r3,-32596(gp)
    3520:	e0bfff17 	ldw	r2,-4(fp)
    3524:	1885883a 	add	r2,r3,r2
    3528:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    352c:	e13ffd17 	ldw	r4,-12(fp)
    3530:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3534:	e037883a 	mov	sp,fp
    3538:	dfc00117 	ldw	ra,4(sp)
    353c:	df000017 	ldw	fp,0(sp)
    3540:	dec00204 	addi	sp,sp,8
    3544:	f800283a 	ret

00003548 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3548:	defffa04 	addi	sp,sp,-24
    354c:	dfc00515 	stw	ra,20(sp)
    3550:	df000415 	stw	fp,16(sp)
    3554:	df000404 	addi	fp,sp,16
    3558:	e13ffd15 	stw	r4,-12(fp)
    355c:	e17ffe15 	stw	r5,-8(fp)
    3560:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3564:	d0e02817 	ldw	r3,-32608(gp)
    3568:	e0bffe17 	ldw	r2,-8(fp)
    356c:	10a00034 	orhi	r2,r2,32768
    3570:	18800615 	stw	r2,24(r3)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3574:	d0a02817 	ldw	r2,-32608(gp)
    3578:	11400604 	addi	r5,r2,24
    357c:	e13ffd17 	ldw	r4,-12(fp)
    3580:	000149c0 	call	149c <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3584:	d0a02817 	ldw	r2,-32608(gp)
    3588:	11000104 	addi	r4,r2,4
    358c:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3590:	d0e02b17 	ldw	r3,-32596(gp)
    3594:	e0bfff17 	ldw	r2,-4(fp)
    3598:	1885883a 	add	r2,r3,r2
    359c:	e0bffc15 	stw	r2,-16(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    35a0:	e13ffc17 	ldw	r4,-16(fp)
    35a4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35a8:	e037883a 	mov	sp,fp
    35ac:	dfc00117 	ldw	ra,4(sp)
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00204 	addi	sp,sp,8
    35b8:	f800283a 	ret

000035bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    35bc:	defffb04 	addi	sp,sp,-20
    35c0:	dfc00415 	stw	ra,16(sp)
    35c4:	df000315 	stw	fp,12(sp)
    35c8:	df000304 	addi	fp,sp,12
    35cc:	e13ffe15 	stw	r4,-8(fp)
    35d0:	e17fff15 	stw	r5,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    35d4:	d0a02817 	ldw	r2,-32608(gp)
    35d8:	11400604 	addi	r5,r2,24
    35dc:	e13ffe17 	ldw	r4,-8(fp)
    35e0:	000149c0 	call	149c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    35e4:	d0a02817 	ldw	r2,-32608(gp)
    35e8:	11000104 	addi	r4,r2,4
    35ec:	00015f80 	call	15f8 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    35f0:	d0e02b17 	ldw	r3,-32596(gp)
    35f4:	e0bfff17 	ldw	r2,-4(fp)
    35f8:	1885883a 	add	r2,r3,r2
    35fc:	e0bffd15 	stw	r2,-12(fp)

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3600:	e13ffd17 	ldw	r4,-12(fp)
    3604:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
    3608:	e037883a 	mov	sp,fp
    360c:	dfc00117 	ldw	ra,4(sp)
    3610:	df000017 	ldw	fp,0(sp)
    3614:	dec00204 	addi	sp,sp,8
    3618:	f800283a 	ret

0000361c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    361c:	defffb04 	addi	sp,sp,-20
    3620:	dfc00415 	stw	ra,16(sp)
    3624:	df000315 	stw	fp,12(sp)
    3628:	df000304 	addi	fp,sp,12
    362c:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3630:	e0bfff17 	ldw	r2,-4(fp)
    3634:	10800317 	ldw	r2,12(r2)
    3638:	10800317 	ldw	r2,12(r2)
    363c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3640:	e0bffe17 	ldw	r2,-8(fp)
    3644:	11000604 	addi	r4,r2,24
    3648:	00015f80 	call	15f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    364c:	d0a03217 	ldw	r2,-32568(gp)
    3650:	1004c03a 	cmpne	r2,r2,zero
    3654:	1000151e 	bne	r2,zero,36ac <xTaskRemoveFromEventList+0x90>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	11000104 	addi	r4,r2,4
    3660:	00015f80 	call	15f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3664:	e0bffe17 	ldw	r2,-8(fp)
    3668:	10c00b17 	ldw	r3,44(r2)
    366c:	d0a02c17 	ldw	r2,-32592(gp)
    3670:	10c0032e 	bgeu	r2,r3,3680 <xTaskRemoveFromEventList+0x64>
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800b17 	ldw	r2,44(r2)
    367c:	d0a02c15 	stw	r2,-32592(gp)
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800b17 	ldw	r2,44(r2)
    3688:	10800524 	muli	r2,r2,20
    368c:	1007883a 	mov	r3,r2
    3690:	00820234 	movhi	r2,2056
    3694:	10be1204 	addi	r2,r2,-1976
    3698:	1889883a 	add	r4,r3,r2
    369c:	e0bffe17 	ldw	r2,-8(fp)
    36a0:	11400104 	addi	r5,r2,4
    36a4:	000149c0 	call	149c <vListInsertEnd>
    36a8:	00000506 	br	36c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    36ac:	e0bffe17 	ldw	r2,-8(fp)
    36b0:	11400604 	addi	r5,r2,24
    36b4:	01020234 	movhi	r4,2056
    36b8:	213e5804 	addi	r4,r4,-1696
    36bc:	000149c0 	call	149c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    36c0:	e0bffe17 	ldw	r2,-8(fp)
    36c4:	10c00b17 	ldw	r3,44(r2)
    36c8:	d0a02817 	ldw	r2,-32608(gp)
    36cc:	10800b17 	ldw	r2,44(r2)
    36d0:	10c0052e 	bgeu	r2,r3,36e8 <xTaskRemoveFromEventList+0xcc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    36d4:	00800044 	movi	r2,1
    36d8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    36dc:	00800044 	movi	r2,1
    36e0:	d0a02f15 	stw	r2,-32580(gp)
    36e4:	00000106 	br	36ec <xTaskRemoveFromEventList+0xd0>
	}
	else
	{
		xReturn = pdFALSE;
    36e8:	e03ffd15 	stw	zero,-12(fp)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    36ec:	e0bffd17 	ldw	r2,-12(fp)
}
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3704:	defffa04 	addi	sp,sp,-24
    3708:	dfc00515 	stw	ra,20(sp)
    370c:	df000415 	stw	fp,16(sp)
    3710:	df000404 	addi	fp,sp,16
    3714:	e13ffe15 	stw	r4,-8(fp)
    3718:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    371c:	e0bfff17 	ldw	r2,-4(fp)
    3720:	10e00034 	orhi	r3,r2,32768
    3724:	e0bffe17 	ldw	r2,-8(fp)
    3728:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    372c:	e0bffe17 	ldw	r2,-8(fp)
    3730:	10800317 	ldw	r2,12(r2)
    3734:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3738:	e13ffe17 	ldw	r4,-8(fp)
    373c:	00015f80 	call	15f8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3740:	e0bffd17 	ldw	r2,-12(fp)
    3744:	11000104 	addi	r4,r2,4
    3748:	00015f80 	call	15f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    374c:	e0bffd17 	ldw	r2,-12(fp)
    3750:	10c00b17 	ldw	r3,44(r2)
    3754:	d0a02c17 	ldw	r2,-32592(gp)
    3758:	10c0032e 	bgeu	r2,r3,3768 <xTaskRemoveFromUnorderedEventList+0x64>
    375c:	e0bffd17 	ldw	r2,-12(fp)
    3760:	10800b17 	ldw	r2,44(r2)
    3764:	d0a02c15 	stw	r2,-32592(gp)
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	10800b17 	ldw	r2,44(r2)
    3770:	10800524 	muli	r2,r2,20
    3774:	1007883a 	mov	r3,r2
    3778:	00820234 	movhi	r2,2056
    377c:	10be1204 	addi	r2,r2,-1976
    3780:	1889883a 	add	r4,r3,r2
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	11400104 	addi	r5,r2,4
    378c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3790:	e0bffd17 	ldw	r2,-12(fp)
    3794:	10c00b17 	ldw	r3,44(r2)
    3798:	d0a02817 	ldw	r2,-32608(gp)
    379c:	10800b17 	ldw	r2,44(r2)
    37a0:	10c0052e 	bgeu	r2,r3,37b8 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    37a4:	00800044 	movi	r2,1
    37a8:	e0bffc15 	stw	r2,-16(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    37ac:	00800044 	movi	r2,1
    37b0:	d0a02f15 	stw	r2,-32580(gp)
    37b4:	00000106 	br	37bc <xTaskRemoveFromUnorderedEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    37b8:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
    37bc:	e0bffc17 	ldw	r2,-16(fp)
}
    37c0:	e037883a 	mov	sp,fp
    37c4:	dfc00117 	ldw	ra,4(sp)
    37c8:	df000017 	ldw	fp,0(sp)
    37cc:	dec00204 	addi	sp,sp,8
    37d0:	f800283a 	ret

000037d4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    37d4:	defffe04 	addi	sp,sp,-8
    37d8:	df000115 	stw	fp,4(sp)
    37dc:	df000104 	addi	fp,sp,4
    37e0:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    37e4:	d0e03017 	ldw	r3,-32576(gp)
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
    37f0:	d0e02b17 	ldw	r3,-32596(gp)
    37f4:	e0bfff17 	ldw	r2,-4(fp)
    37f8:	10c00115 	stw	r3,4(r2)
}
    37fc:	e037883a 	mov	sp,fp
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00104 	addi	sp,sp,4
    3808:	f800283a 	ret

0000380c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    380c:	defffa04 	addi	sp,sp,-24
    3810:	dfc00515 	stw	ra,20(sp)
    3814:	df000415 	stw	fp,16(sp)
    3818:	df000404 	addi	fp,sp,16
    381c:	e13ffe15 	stw	r4,-8(fp)
    3820:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3824:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3828:	d0a02b17 	ldw	r2,-32596(gp)
    382c:	e0bffc15 	stw	r2,-16(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3830:	e0bffe17 	ldw	r2,-8(fp)
    3834:	10c00017 	ldw	r3,0(r2)
    3838:	d0a03017 	ldw	r2,-32576(gp)
    383c:	18800726 	beq	r3,r2,385c <xTaskCheckForTimeOut+0x50>
    3840:	e0bffe17 	ldw	r2,-8(fp)
    3844:	10c00117 	ldw	r3,4(r2)
    3848:	e0bffc17 	ldw	r2,-16(fp)
    384c:	10c00336 	bltu	r2,r3,385c <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3850:	00800044 	movi	r2,1
    3854:	e0bffd15 	stw	r2,-12(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3858:	00001606 	br	38b4 <xTaskCheckForTimeOut+0xa8>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    385c:	e0bffe17 	ldw	r2,-8(fp)
    3860:	10c00117 	ldw	r3,4(r2)
    3864:	e0bffc17 	ldw	r2,-16(fp)
    3868:	10c7c83a 	sub	r3,r2,r3
    386c:	e0bfff17 	ldw	r2,-4(fp)
    3870:	10800017 	ldw	r2,0(r2)
    3874:	18800d2e 	bgeu	r3,r2,38ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3878:	e0bfff17 	ldw	r2,-4(fp)
    387c:	11000017 	ldw	r4,0(r2)
    3880:	e0bffe17 	ldw	r2,-8(fp)
    3884:	10c00117 	ldw	r3,4(r2)
    3888:	e0bffc17 	ldw	r2,-16(fp)
    388c:	10c5c83a 	sub	r2,r2,r3
    3890:	2087c83a 	sub	r3,r4,r2
    3894:	e0bfff17 	ldw	r2,-4(fp)
    3898:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
    389c:	e13ffe17 	ldw	r4,-8(fp)
    38a0:	00037d40 	call	37d4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    38a4:	e03ffd15 	stw	zero,-12(fp)
    38a8:	00000206 	br	38b4 <xTaskCheckForTimeOut+0xa8>
		}
		else
		{
			xReturn = pdTRUE;
    38ac:	00800044 	movi	r2,1
    38b0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
    38b4:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    38b8:	e0bffd17 	ldw	r2,-12(fp)
}
    38bc:	e037883a 	mov	sp,fp
    38c0:	dfc00117 	ldw	ra,4(sp)
    38c4:	df000017 	ldw	fp,0(sp)
    38c8:	dec00204 	addi	sp,sp,8
    38cc:	f800283a 	ret

000038d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    38d0:	deffff04 	addi	sp,sp,-4
    38d4:	df000015 	stw	fp,0(sp)
    38d8:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
    38dc:	00800044 	movi	r2,1
    38e0:	d0a02f15 	stw	r2,-32580(gp)
}
    38e4:	e037883a 	mov	sp,fp
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00104 	addi	sp,sp,4
    38f0:	f800283a 	ret

000038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    38f4:	defffd04 	addi	sp,sp,-12
    38f8:	dfc00215 	stw	ra,8(sp)
    38fc:	df000115 	stw	fp,4(sp)
    3900:	df000104 	addi	fp,sp,4
    3904:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3908:	0003af40 	call	3af4 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    390c:	003ffe06 	br	3908 <prvIdleTask+0x14>

00003910 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3910:	defff804 	addi	sp,sp,-32
    3914:	dfc00715 	stw	ra,28(sp)
    3918:	df000615 	stw	fp,24(sp)
    391c:	df000604 	addi	fp,sp,24
    3920:	e13ffb15 	stw	r4,-20(fp)
    3924:	e17ffc15 	stw	r5,-16(fp)
    3928:	e1bffd15 	stw	r6,-12(fp)
    392c:	e1fffe15 	stw	r7,-8(fp)
    3930:	e0800217 	ldw	r2,8(fp)
    3934:	e0bfff0d 	sth	r2,-4(fp)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3938:	e03ffa15 	stw	zero,-24(fp)
    393c:	00001506 	br	3994 <prvInitialiseTCBVariables+0x84>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3940:	e13ffa17 	ldw	r4,-24(fp)
    3944:	e0fffa17 	ldw	r3,-24(fp)
    3948:	e0bffc17 	ldw	r2,-16(fp)
    394c:	1885883a 	add	r2,r3,r2
    3950:	10c00003 	ldbu	r3,0(r2)
    3954:	e0bffb17 	ldw	r2,-20(fp)
    3958:	2085883a 	add	r2,r4,r2
    395c:	10800d04 	addi	r2,r2,52
    3960:	10c00005 	stb	r3,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3964:	e0fffa17 	ldw	r3,-24(fp)
    3968:	e0bffc17 	ldw	r2,-16(fp)
    396c:	1885883a 	add	r2,r3,r2
    3970:	10800003 	ldbu	r2,0(r2)
    3974:	10803fcc 	andi	r2,r2,255
    3978:	1080201c 	xori	r2,r2,128
    397c:	10bfe004 	addi	r2,r2,-128
    3980:	1005003a 	cmpeq	r2,r2,zero
    3984:	1000061e 	bne	r2,zero,39a0 <prvInitialiseTCBVariables+0x90>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3988:	e0bffa17 	ldw	r2,-24(fp)
    398c:	10800044 	addi	r2,r2,1
    3990:	e0bffa15 	stw	r2,-24(fp)
    3994:	e0bffa17 	ldw	r2,-24(fp)
    3998:	10800230 	cmpltui	r2,r2,8
    399c:	103fe81e 	bne	r2,zero,3940 <prvInitialiseTCBVariables+0x30>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    39a0:	e0bffb17 	ldw	r2,-20(fp)
    39a4:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    39a8:	e0bffd17 	ldw	r2,-12(fp)
    39ac:	10800330 	cmpltui	r2,r2,12
    39b0:	1000021e 	bne	r2,zero,39bc <prvInitialiseTCBVariables+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    39b4:	008002c4 	movi	r2,11
    39b8:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    39bc:	e0fffb17 	ldw	r3,-20(fp)
    39c0:	e0bffd17 	ldw	r2,-12(fp)
    39c4:	18800b15 	stw	r2,44(r3)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    39c8:	e0fffb17 	ldw	r3,-20(fp)
    39cc:	e0bffd17 	ldw	r2,-12(fp)
    39d0:	18801015 	stw	r2,64(r3)
		pxTCB->uxMutexesHeld = 0;
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	11000104 	addi	r4,r2,4
    39e4:	00014740 	call	1474 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    39e8:	e0bffb17 	ldw	r2,-20(fp)
    39ec:	11000604 	addi	r4,r2,24
    39f0:	00014740 	call	1474 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    39f4:	e0fffb17 	ldw	r3,-20(fp)
    39f8:	e0bffb17 	ldw	r2,-20(fp)
    39fc:	18800415 	stw	r2,16(r3)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a00:	00c00304 	movi	r3,12
    3a04:	e0bffd17 	ldw	r2,-12(fp)
    3a08:	1887c83a 	sub	r3,r3,r2
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3a14:	e0fffb17 	ldw	r3,-20(fp)
    3a18:	e0bffb17 	ldw	r2,-20(fp)
    3a1c:	18800915 	stw	r2,36(r3)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10000f15 	stw	zero,60(r2)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    3a28:	e0bffb17 	ldw	r2,-20(fp)
    3a2c:	10001215 	stw	zero,72(r2)
		pxTCB->eNotifyState = eNotWaitingNotification;
    3a30:	e0bffb17 	ldw	r2,-20(fp)
    3a34:	10001315 	stw	zero,76(r2)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    3a38:	e037883a 	mov	sp,fp
    3a3c:	dfc00117 	ldw	ra,4(sp)
    3a40:	df000017 	ldw	fp,0(sp)
    3a44:	dec00204 	addi	sp,sp,8
    3a48:	f800283a 	ret

00003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3a4c:	defffd04 	addi	sp,sp,-12
    3a50:	dfc00215 	stw	ra,8(sp)
    3a54:	df000115 	stw	fp,4(sp)
    3a58:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a5c:	e03fff15 	stw	zero,-4(fp)
    3a60:	00000a06 	br	3a8c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a64:	e0bfff17 	ldw	r2,-4(fp)
    3a68:	10800524 	muli	r2,r2,20
    3a6c:	1007883a 	mov	r3,r2
    3a70:	00820234 	movhi	r2,2056
    3a74:	10be1204 	addi	r2,r2,-1976
    3a78:	1889883a 	add	r4,r3,r2
    3a7c:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10800044 	addi	r2,r2,1
    3a88:	e0bfff15 	stw	r2,-4(fp)
    3a8c:	e0bfff17 	ldw	r2,-4(fp)
    3a90:	10800330 	cmpltui	r2,r2,12
    3a94:	103ff31e 	bne	r2,zero,3a64 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3a98:	01020234 	movhi	r4,2056
    3a9c:	213e4e04 	addi	r4,r4,-1736
    3aa0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3aa4:	01020234 	movhi	r4,2056
    3aa8:	213e5304 	addi	r4,r4,-1716
    3aac:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3ab0:	01020234 	movhi	r4,2056
    3ab4:	213e5804 	addi	r4,r4,-1696
    3ab8:	00014040 	call	1404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3abc:	01020234 	movhi	r4,2056
    3ac0:	213e5d04 	addi	r4,r4,-1676
    3ac4:	00014040 	call	1404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3ac8:	00820234 	movhi	r2,2056
    3acc:	10be4e04 	addi	r2,r2,-1736
    3ad0:	d0a03315 	stw	r2,-32564(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ad4:	00820234 	movhi	r2,2056
    3ad8:	10be5304 	addi	r2,r2,-1716
    3adc:	d0a03415 	stw	r2,-32560(gp)
}
    3ae0:	e037883a 	mov	sp,fp
    3ae4:	dfc00117 	ldw	ra,4(sp)
    3ae8:	df000017 	ldw	fp,0(sp)
    3aec:	dec00204 	addi	sp,sp,8
    3af0:	f800283a 	ret

00003af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3af4:	defffc04 	addi	sp,sp,-16
    3af8:	dfc00315 	stw	ra,12(sp)
    3afc:	df000215 	stw	fp,8(sp)
    3b00:	df000204 	addi	fp,sp,8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b04:	00001c06 	br	3b78 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
    3b08:	0002ff00 	call	2ff0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3b0c:	00820234 	movhi	r2,2056
    3b10:	10be5d04 	addi	r2,r2,-1676
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	1005003a 	cmpeq	r2,r2,zero
    3b1c:	e0bfff15 	stw	r2,-4(fp)
			}
			( void ) xTaskResumeAll();
    3b20:	00030180 	call	3018 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3b24:	e0bfff17 	ldw	r2,-4(fp)
    3b28:	1004c03a 	cmpne	r2,r2,zero
    3b2c:	1000121e 	bne	r2,zero,3b78 <prvCheckTasksWaitingTermination+0x84>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3b30:	00041140 	call	4114 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3b34:	00820234 	movhi	r2,2056
    3b38:	10be5d04 	addi	r2,r2,-1676
    3b3c:	10800317 	ldw	r2,12(r2)
    3b40:	10800317 	ldw	r2,12(r2)
    3b44:	e0bffe15 	stw	r2,-8(fp)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3b48:	e0bffe17 	ldw	r2,-8(fp)
    3b4c:	11000104 	addi	r4,r2,4
    3b50:	00015f80 	call	15f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
    3b54:	d0a02a17 	ldw	r2,-32600(gp)
    3b58:	10bfffc4 	addi	r2,r2,-1
    3b5c:	d0a02a15 	stw	r2,-32600(gp)
					--uxTasksDeleted;
    3b60:	d0a02917 	ldw	r2,-32604(gp)
    3b64:	10bfffc4 	addi	r2,r2,-1
    3b68:	d0a02915 	stw	r2,-32604(gp)
				}
				taskEXIT_CRITICAL();
    3b6c:	00041680 	call	4168 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
    3b70:	e13ffe17 	ldw	r4,-8(fp)
    3b74:	0003dc00 	call	3dc0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b78:	d0a02917 	ldw	r2,-32604(gp)
    3b7c:	1004c03a 	cmpne	r2,r2,zero
    3b80:	103fe11e 	bne	r2,zero,3b08 <prvCheckTasksWaitingTermination+0x14>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3b84:	e037883a 	mov	sp,fp
    3b88:	dfc00117 	ldw	ra,4(sp)
    3b8c:	df000017 	ldw	fp,0(sp)
    3b90:	dec00204 	addi	sp,sp,8
    3b94:	f800283a 	ret

00003b98 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3b98:	defffd04 	addi	sp,sp,-12
    3b9c:	dfc00215 	stw	ra,8(sp)
    3ba0:	df000115 	stw	fp,4(sp)
    3ba4:	df000104 	addi	fp,sp,4
    3ba8:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3bac:	d0e02817 	ldw	r3,-32608(gp)
    3bb0:	e0bfff17 	ldw	r2,-4(fp)
    3bb4:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xTickCount )
    3bb8:	d0e02b17 	ldw	r3,-32596(gp)
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	10c0052e 	bgeu	r2,r3,3bd8 <prvAddCurrentTaskToDelayedList+0x40>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bc4:	d1203417 	ldw	r4,-32560(gp)
    3bc8:	d0a02817 	ldw	r2,-32608(gp)
    3bcc:	11400104 	addi	r5,r2,4
    3bd0:	00015240 	call	1524 <vListInsert>
    3bd4:	00000906 	br	3bfc <prvAddCurrentTaskToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bd8:	d1203317 	ldw	r4,-32564(gp)
    3bdc:	d0a02817 	ldw	r2,-32608(gp)
    3be0:	11400104 	addi	r5,r2,4
    3be4:	00015240 	call	1524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3be8:	d0e00317 	ldw	r3,-32756(gp)
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	10c0022e 	bgeu	r2,r3,3bfc <prvAddCurrentTaskToDelayedList+0x64>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	d0a00315 	stw	r2,-32756(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3bfc:	e037883a 	mov	sp,fp
    3c00:	dfc00117 	ldw	ra,4(sp)
    3c04:	df000017 	ldw	fp,0(sp)
    3c08:	dec00204 	addi	sp,sp,8
    3c0c:	f800283a 	ret

00003c10 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    3c10:	defff904 	addi	sp,sp,-28
    3c14:	dfc00615 	stw	ra,24(sp)
    3c18:	df000515 	stw	fp,20(sp)
    3c1c:	df000504 	addi	fp,sp,20
    3c20:	e17ffe15 	stw	r5,-8(fp)
    3c24:	e13ffd0d 	sth	r4,-12(fp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c28:	e0bffe17 	ldw	r2,-8(fp)
    3c2c:	1004c03a 	cmpne	r2,r2,zero
    3c30:	1000071e 	bne	r2,zero,3c50 <prvAllocateTCBAndStack+0x40>
    3c34:	e0bffd0b 	ldhu	r2,-12(fp)
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	1085883a 	add	r2,r2,r2
    3c40:	1009883a 	mov	r4,r2
    3c44:	0000fbc0 	call	fbc <pvPortMalloc>
    3c48:	e0bfff15 	stw	r2,-4(fp)
    3c4c:	00000206 	br	3c58 <prvAllocateTCBAndStack+0x48>
    3c50:	e0bffe17 	ldw	r2,-8(fp)
    3c54:	e0bfff15 	stw	r2,-4(fp)
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	e0bffb15 	stw	r2,-20(fp)

		if( pxStack != NULL )
    3c60:	e0bffb17 	ldw	r2,-20(fp)
    3c64:	1005003a 	cmpeq	r2,r2,zero
    3c68:	10000d1e 	bne	r2,zero,3ca0 <prvAllocateTCBAndStack+0x90>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3c6c:	01001404 	movi	r4,80
    3c70:	0000fbc0 	call	fbc <pvPortMalloc>
    3c74:	e0bffc15 	stw	r2,-16(fp)

			if( pxNewTCB != NULL )
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	1005003a 	cmpeq	r2,r2,zero
    3c80:	1000041e 	bne	r2,zero,3c94 <prvAllocateTCBAndStack+0x84>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    3c84:	e0fffc17 	ldw	r3,-16(fp)
    3c88:	e0bffb17 	ldw	r2,-20(fp)
    3c8c:	18800c15 	stw	r2,48(r3)
    3c90:	00000406 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    3c94:	e13ffb17 	ldw	r4,-20(fp)
    3c98:	00011500 	call	1150 <vPortFree>
    3c9c:	00000106 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
		}
		else
		{
			pxNewTCB = NULL;
    3ca0:	e03ffc15 	stw	zero,-16(fp)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
    3ca4:	e0bffc17 	ldw	r2,-16(fp)
    3ca8:	1005003a 	cmpeq	r2,r2,zero
    3cac:	1000081e 	bne	r2,zero,3cd0 <prvAllocateTCBAndStack+0xc0>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3cb0:	e0bffc17 	ldw	r2,-16(fp)
    3cb4:	11000c17 	ldw	r4,48(r2)
    3cb8:	e0bffd0b 	ldhu	r2,-12(fp)
    3cbc:	1085883a 	add	r2,r2,r2
    3cc0:	1085883a 	add	r2,r2,r2
    3cc4:	100d883a 	mov	r6,r2
    3cc8:	01402944 	movi	r5,165
    3ccc:	00073c40 	call	73c4 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    3cd0:	e0bffc17 	ldw	r2,-16(fp)
}
    3cd4:	e037883a 	mov	sp,fp
    3cd8:	dfc00117 	ldw	ra,4(sp)
    3cdc:	df000017 	ldw	fp,0(sp)
    3ce0:	dec00204 	addi	sp,sp,8
    3ce4:	f800283a 	ret

00003ce8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    3ce8:	defffd04 	addi	sp,sp,-12
    3cec:	df000215 	stw	fp,8(sp)
    3cf0:	df000204 	addi	fp,sp,8
    3cf4:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
    3cf8:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cfc:	00000606 	br	3d18 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
    3d00:	e0bfff17 	ldw	r2,-4(fp)
    3d04:	10800044 	addi	r2,r2,1
    3d08:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
    3d0c:	e0bffe17 	ldw	r2,-8(fp)
    3d10:	10800044 	addi	r2,r2,1
    3d14:	e0bffe15 	stw	r2,-8(fp)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3d18:	e0bfff17 	ldw	r2,-4(fp)
    3d1c:	10800003 	ldbu	r2,0(r2)
    3d20:	10803fcc 	andi	r2,r2,255
    3d24:	10802960 	cmpeqi	r2,r2,165
    3d28:	103ff51e 	bne	r2,zero,3d00 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3d2c:	e0bffe17 	ldw	r2,-8(fp)
    3d30:	1004d0ba 	srli	r2,r2,2
    3d34:	e0bffe15 	stw	r2,-8(fp)

		return ( uint16_t ) ulCount;
    3d38:	e0bffe17 	ldw	r2,-8(fp)
    3d3c:	10bfffcc 	andi	r2,r2,65535
	}
    3d40:	e037883a 	mov	sp,fp
    3d44:	df000017 	ldw	fp,0(sp)
    3d48:	dec00104 	addi	sp,sp,4
    3d4c:	f800283a 	ret

00003d50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    3d50:	defff904 	addi	sp,sp,-28
    3d54:	dfc00615 	stw	ra,24(sp)
    3d58:	df000515 	stw	fp,20(sp)
    3d5c:	df000504 	addi	fp,sp,20
    3d60:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d64:	e0bffe17 	ldw	r2,-8(fp)
    3d68:	1004c03a 	cmpne	r2,r2,zero
    3d6c:	1000031e 	bne	r2,zero,3d7c <uxTaskGetStackHighWaterMark+0x2c>
    3d70:	d0a02817 	ldw	r2,-32608(gp)
    3d74:	e0bfff15 	stw	r2,-4(fp)
    3d78:	00000206 	br	3d84 <uxTaskGetStackHighWaterMark+0x34>
    3d7c:	e0bffe17 	ldw	r2,-8(fp)
    3d80:	e0bfff15 	stw	r2,-4(fp)
    3d84:	e0bfff17 	ldw	r2,-4(fp)
    3d88:	e0bffd15 	stw	r2,-12(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	10800c17 	ldw	r2,48(r2)
    3d94:	e0bffc15 	stw	r2,-16(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    3d98:	e13ffc17 	ldw	r4,-16(fp)
    3d9c:	0003ce80 	call	3ce8 <prvTaskCheckFreeStackSpace>
    3da0:	10bfffcc 	andi	r2,r2,65535
    3da4:	e0bffb15 	stw	r2,-20(fp)

		return uxReturn;
    3da8:	e0bffb17 	ldw	r2,-20(fp)
	}
    3dac:	e037883a 	mov	sp,fp
    3db0:	dfc00117 	ldw	ra,4(sp)
    3db4:	df000017 	ldw	fp,0(sp)
    3db8:	dec00204 	addi	sp,sp,8
    3dbc:	f800283a 	ret

00003dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3dc0:	defffd04 	addi	sp,sp,-12
    3dc4:	dfc00215 	stw	ra,8(sp)
    3dc8:	df000115 	stw	fp,4(sp)
    3dcc:	df000104 	addi	fp,sp,4
    3dd0:	e13fff15 	stw	r4,-4(fp)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    3dd4:	e0bfff17 	ldw	r2,-4(fp)
    3dd8:	11000c17 	ldw	r4,48(r2)
    3ddc:	00011500 	call	1150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    3de0:	e13fff17 	ldw	r4,-4(fp)
    3de4:	00011500 	call	1150 <vPortFree>
	}
    3de8:	e037883a 	mov	sp,fp
    3dec:	dfc00117 	ldw	ra,4(sp)
    3df0:	df000017 	ldw	fp,0(sp)
    3df4:	dec00204 	addi	sp,sp,8
    3df8:	f800283a 	ret

00003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3dfc:	defffd04 	addi	sp,sp,-12
    3e00:	df000215 	stw	fp,8(sp)
    3e04:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3e08:	d0a03317 	ldw	r2,-32564(gp)
    3e0c:	10800017 	ldw	r2,0(r2)
    3e10:	1004c03a 	cmpne	r2,r2,zero
    3e14:	1000031e 	bne	r2,zero,3e24 <prvResetNextTaskUnblockTime+0x28>
    3e18:	00800044 	movi	r2,1
    3e1c:	e0bfff05 	stb	r2,-4(fp)
    3e20:	00000106 	br	3e28 <prvResetNextTaskUnblockTime+0x2c>
    3e24:	e03fff05 	stb	zero,-4(fp)
    3e28:	e0bfff03 	ldbu	r2,-4(fp)
    3e2c:	1005003a 	cmpeq	r2,r2,zero
    3e30:	1000031e 	bne	r2,zero,3e40 <prvResetNextTaskUnblockTime+0x44>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3e34:	00bfffc4 	movi	r2,-1
    3e38:	d0a00315 	stw	r2,-32756(gp)
    3e3c:	00000706 	br	3e5c <prvResetNextTaskUnblockTime+0x60>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3e40:	d0a03317 	ldw	r2,-32564(gp)
    3e44:	10800317 	ldw	r2,12(r2)
    3e48:	10800317 	ldw	r2,12(r2)
    3e4c:	e0bffe15 	stw	r2,-8(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3e50:	e0bffe17 	ldw	r2,-8(fp)
    3e54:	10800117 	ldw	r2,4(r2)
    3e58:	d0a00315 	stw	r2,-32756(gp)
	}
}
    3e5c:	e037883a 	mov	sp,fp
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00104 	addi	sp,sp,4
    3e68:	f800283a 	ret

00003e6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3e6c:	defffe04 	addi	sp,sp,-8
    3e70:	df000115 	stw	fp,4(sp)
    3e74:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e78:	d0a02817 	ldw	r2,-32608(gp)
    3e7c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
    3e80:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e84:	e037883a 	mov	sp,fp
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00104 	addi	sp,sp,4
    3e90:	f800283a 	ret

00003e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3e94:	defffe04 	addi	sp,sp,-8
    3e98:	df000115 	stw	fp,4(sp)
    3e9c:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3ea0:	d0a02d17 	ldw	r2,-32588(gp)
    3ea4:	1004c03a 	cmpne	r2,r2,zero
    3ea8:	1000031e 	bne	r2,zero,3eb8 <xTaskGetSchedulerState+0x24>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3eac:	00800044 	movi	r2,1
    3eb0:	e0bfff15 	stw	r2,-4(fp)
    3eb4:	00000706 	br	3ed4 <xTaskGetSchedulerState+0x40>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3eb8:	d0a03217 	ldw	r2,-32568(gp)
    3ebc:	1004c03a 	cmpne	r2,r2,zero
    3ec0:	1000031e 	bne	r2,zero,3ed0 <xTaskGetSchedulerState+0x3c>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3ec4:	00800084 	movi	r2,2
    3ec8:	e0bfff15 	stw	r2,-4(fp)
    3ecc:	00000106 	br	3ed4 <xTaskGetSchedulerState+0x40>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3ed0:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
	}
    3ed8:	e037883a 	mov	sp,fp
    3edc:	df000017 	ldw	fp,0(sp)
    3ee0:	dec00104 	addi	sp,sp,4
    3ee4:	f800283a 	ret

00003ee8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3ee8:	defffb04 	addi	sp,sp,-20
    3eec:	dfc00415 	stw	ra,16(sp)
    3ef0:	df000315 	stw	fp,12(sp)
    3ef4:	df000304 	addi	fp,sp,12
    3ef8:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3efc:	e0bffe17 	ldw	r2,-8(fp)
    3f00:	e0bffd15 	stw	r2,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3f04:	e0bffe17 	ldw	r2,-8(fp)
    3f08:	1005003a 	cmpeq	r2,r2,zero
    3f0c:	10003d1e 	bne	r2,zero,4004 <vTaskPriorityInherit+0x11c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	10c00b17 	ldw	r3,44(r2)
    3f18:	d0a02817 	ldw	r2,-32608(gp)
    3f1c:	10800b17 	ldw	r2,44(r2)
    3f20:	1880382e 	bgeu	r3,r2,4004 <vTaskPriorityInherit+0x11c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3f24:	e0bffd17 	ldw	r2,-12(fp)
    3f28:	10800617 	ldw	r2,24(r2)
    3f2c:	1004803a 	cmplt	r2,r2,zero
    3f30:	1000061e 	bne	r2,zero,3f4c <vTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3f34:	d0a02817 	ldw	r2,-32608(gp)
    3f38:	10c00b17 	ldw	r3,44(r2)
    3f3c:	00800304 	movi	r2,12
    3f40:	10c7c83a 	sub	r3,r2,r3
    3f44:	e0bffd17 	ldw	r2,-12(fp)
    3f48:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3f4c:	e0bffd17 	ldw	r2,-12(fp)
    3f50:	11000517 	ldw	r4,20(r2)
    3f54:	e0bffd17 	ldw	r2,-12(fp)
    3f58:	10800b17 	ldw	r2,44(r2)
    3f5c:	10800524 	muli	r2,r2,20
    3f60:	1007883a 	mov	r3,r2
    3f64:	00820234 	movhi	r2,2056
    3f68:	10be1204 	addi	r2,r2,-1976
    3f6c:	1885883a 	add	r2,r3,r2
    3f70:	2080031e 	bne	r4,r2,3f80 <vTaskPriorityInherit+0x98>
    3f74:	00800044 	movi	r2,1
    3f78:	e0bfff05 	stb	r2,-4(fp)
    3f7c:	00000106 	br	3f84 <vTaskPriorityInherit+0x9c>
    3f80:	e03fff05 	stb	zero,-4(fp)
    3f84:	e0bfff03 	ldbu	r2,-4(fp)
    3f88:	1005003a 	cmpeq	r2,r2,zero
    3f8c:	1000191e 	bne	r2,zero,3ff4 <vTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	11000104 	addi	r4,r2,4
    3f98:	00015f80 	call	15f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f9c:	d0a02817 	ldw	r2,-32608(gp)
    3fa0:	10c00b17 	ldw	r3,44(r2)
    3fa4:	e0bffd17 	ldw	r2,-12(fp)
    3fa8:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxTCB );
    3fac:	e0bffd17 	ldw	r2,-12(fp)
    3fb0:	10c00b17 	ldw	r3,44(r2)
    3fb4:	d0a02c17 	ldw	r2,-32592(gp)
    3fb8:	10c0032e 	bgeu	r2,r3,3fc8 <vTaskPriorityInherit+0xe0>
    3fbc:	e0bffd17 	ldw	r2,-12(fp)
    3fc0:	10800b17 	ldw	r2,44(r2)
    3fc4:	d0a02c15 	stw	r2,-32592(gp)
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	10800b17 	ldw	r2,44(r2)
    3fd0:	10800524 	muli	r2,r2,20
    3fd4:	1007883a 	mov	r3,r2
    3fd8:	00820234 	movhi	r2,2056
    3fdc:	10be1204 	addi	r2,r2,-1976
    3fe0:	1889883a 	add	r4,r3,r2
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	11400104 	addi	r5,r2,4
    3fec:	000149c0 	call	149c <vListInsertEnd>
    3ff0:	00000406 	br	4004 <vTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3ff4:	d0a02817 	ldw	r2,-32608(gp)
    3ff8:	10c00b17 	ldw	r3,44(r2)
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10c00b15 	stw	r3,44(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4004:	e037883a 	mov	sp,fp
    4008:	dfc00117 	ldw	ra,4(sp)
    400c:	df000017 	ldw	fp,0(sp)
    4010:	dec00204 	addi	sp,sp,8
    4014:	f800283a 	ret

00004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4018:	defffb04 	addi	sp,sp,-20
    401c:	dfc00415 	stw	ra,16(sp)
    4020:	df000315 	stw	fp,12(sp)
    4024:	df000304 	addi	fp,sp,12
    4028:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    402c:	e0bfff17 	ldw	r2,-4(fp)
    4030:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
    4034:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
    4038:	e0bfff17 	ldw	r2,-4(fp)
    403c:	1005003a 	cmpeq	r2,r2,zero
    4040:	10002e1e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4044:	e0bffe17 	ldw	r2,-8(fp)
    4048:	10801117 	ldw	r2,68(r2)
    404c:	10ffffc4 	addi	r3,r2,-1
    4050:	e0bffe17 	ldw	r2,-8(fp)
    4054:	10c01115 	stw	r3,68(r2)

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	10c00b17 	ldw	r3,44(r2)
    4060:	e0bffe17 	ldw	r2,-8(fp)
    4064:	10801017 	ldw	r2,64(r2)
    4068:	18802426 	beq	r3,r2,40fc <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    406c:	e0bffe17 	ldw	r2,-8(fp)
    4070:	10801117 	ldw	r2,68(r2)
    4074:	1004c03a 	cmpne	r2,r2,zero
    4078:	1000201e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    407c:	e0bffe17 	ldw	r2,-8(fp)
    4080:	11000104 	addi	r4,r2,4
    4084:	00015f80 	call	15f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4088:	e0bffe17 	ldw	r2,-8(fp)
    408c:	10c01017 	ldw	r3,64(r2)
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4098:	e0bffe17 	ldw	r2,-8(fp)
    409c:	10c00b17 	ldw	r3,44(r2)
    40a0:	00800304 	movi	r2,12
    40a4:	10c7c83a 	sub	r3,r2,r3
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10c00b17 	ldw	r3,44(r2)
    40b8:	d0a02c17 	ldw	r2,-32592(gp)
    40bc:	10c0032e 	bgeu	r2,r3,40cc <xTaskPriorityDisinherit+0xb4>
    40c0:	e0bffe17 	ldw	r2,-8(fp)
    40c4:	10800b17 	ldw	r2,44(r2)
    40c8:	d0a02c15 	stw	r2,-32592(gp)
    40cc:	e0bffe17 	ldw	r2,-8(fp)
    40d0:	10800b17 	ldw	r2,44(r2)
    40d4:	10800524 	muli	r2,r2,20
    40d8:	1007883a 	mov	r3,r2
    40dc:	00820234 	movhi	r2,2056
    40e0:	10be1204 	addi	r2,r2,-1976
    40e4:	1889883a 	add	r4,r3,r2
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	11400104 	addi	r5,r2,4
    40f0:	000149c0 	call	149c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    40f4:	00800044 	movi	r2,1
    40f8:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    40fc:	e0bffd17 	ldw	r2,-12(fp)
	}
    4100:	e037883a 	mov	sp,fp
    4104:	dfc00117 	ldw	ra,4(sp)
    4108:	df000017 	ldw	fp,0(sp)
    410c:	dec00204 	addi	sp,sp,8
    4110:	f800283a 	ret

00004114 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    4114:	defffe04 	addi	sp,sp,-8
    4118:	df000115 	stw	fp,4(sp)
    411c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4120:	0005303a 	rdctl	r2,status
    4124:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4128:	e0ffff17 	ldw	r3,-4(fp)
    412c:	00bfff84 	movi	r2,-2
    4130:	1884703a 	and	r2,r3,r2
    4134:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    4138:	d0a02d17 	ldw	r2,-32588(gp)
    413c:	1005003a 	cmpeq	r2,r2,zero
    4140:	1000051e 	bne	r2,zero,4158 <vTaskEnterCritical+0x44>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    4144:	d0e02817 	ldw	r3,-32608(gp)
    4148:	18800f17 	ldw	r2,60(r3)
    414c:	10800044 	addi	r2,r2,1
    4150:	18800f15 	stw	r2,60(r3)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    4154:	d0a02817 	ldw	r2,-32608(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4158:	e037883a 	mov	sp,fp
    415c:	df000017 	ldw	fp,0(sp)
    4160:	dec00104 	addi	sp,sp,4
    4164:	f800283a 	ret

00004168 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    4168:	defffe04 	addi	sp,sp,-8
    416c:	df000115 	stw	fp,4(sp)
    4170:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
    4174:	d0a02d17 	ldw	r2,-32588(gp)
    4178:	1005003a 	cmpeq	r2,r2,zero
    417c:	1000101e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    4180:	d0a02817 	ldw	r2,-32608(gp)
    4184:	10800f17 	ldw	r2,60(r2)
    4188:	1005003a 	cmpeq	r2,r2,zero
    418c:	10000c1e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    4190:	d0e02817 	ldw	r3,-32608(gp)
    4194:	18800f17 	ldw	r2,60(r3)
    4198:	10bfffc4 	addi	r2,r2,-1
    419c:	18800f15 	stw	r2,60(r3)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    41a0:	d0a02817 	ldw	r2,-32608(gp)
    41a4:	10800f17 	ldw	r2,60(r2)
    41a8:	1004c03a 	cmpne	r2,r2,zero
    41ac:	1000041e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
    41b0:	00800044 	movi	r2,1
    41b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    41c0:	e037883a 	mov	sp,fp
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00104 	addi	sp,sp,4
    41cc:	f800283a 	ret

000041d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    41d0:	defffe04 	addi	sp,sp,-8
    41d4:	df000115 	stw	fp,4(sp)
    41d8:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    41dc:	d0a02817 	ldw	r2,-32608(gp)
    41e0:	10800617 	ldw	r2,24(r2)
    41e4:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41e8:	d1202817 	ldw	r4,-32608(gp)
    41ec:	d0a02817 	ldw	r2,-32608(gp)
    41f0:	10c00b17 	ldw	r3,44(r2)
    41f4:	00800304 	movi	r2,12
    41f8:	10c5c83a 	sub	r2,r2,r3
    41fc:	20800615 	stw	r2,24(r4)

	return uxReturn;
    4200:	e0bfff17 	ldw	r2,-4(fp)
}
    4204:	e037883a 	mov	sp,fp
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00104 	addi	sp,sp,4
    4210:	f800283a 	ret

00004214 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4214:	deffff04 	addi	sp,sp,-4
    4218:	df000015 	stw	fp,0(sp)
    421c:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4220:	d0a02817 	ldw	r2,-32608(gp)
    4224:	1005003a 	cmpeq	r2,r2,zero
    4228:	1000041e 	bne	r2,zero,423c <pvTaskIncrementMutexHeldCount+0x28>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    422c:	d0a02817 	ldw	r2,-32608(gp)
    4230:	10c01117 	ldw	r3,68(r2)
    4234:	18c00044 	addi	r3,r3,1
    4238:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
    423c:	d0a02817 	ldw	r2,-32608(gp)
	}
    4240:	e037883a 	mov	sp,fp
    4244:	df000017 	ldw	fp,0(sp)
    4248:	dec00104 	addi	sp,sp,4
    424c:	f800283a 	ret

00004250 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4250:	defffa04 	addi	sp,sp,-24
    4254:	dfc00515 	stw	ra,20(sp)
    4258:	df000415 	stw	fp,16(sp)
    425c:	df000404 	addi	fp,sp,16
    4260:	e13ffe15 	stw	r4,-8(fp)
    4264:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4268:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    426c:	d0a02817 	ldw	r2,-32608(gp)
    4270:	10801217 	ldw	r2,72(r2)
    4274:	1004c03a 	cmpne	r2,r2,zero
    4278:	1000101e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    427c:	d0e02817 	ldw	r3,-32608(gp)
    4280:	00800044 	movi	r2,1
    4284:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	1005003a 	cmpeq	r2,r2,zero
    4290:	10000a1e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4294:	d0a02817 	ldw	r2,-32608(gp)
    4298:	11000104 	addi	r4,r2,4
    429c:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    42a0:	d0e02b17 	ldw	r3,-32596(gp)
    42a4:	e0bfff17 	ldw	r2,-4(fp)
    42a8:	1885883a 	add	r2,r3,r2
    42ac:	e0bffd15 	stw	r2,-12(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    42b0:	e13ffd17 	ldw	r4,-12(fp)
    42b4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    42b8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    42bc:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    42c0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    42c4:	d0a02817 	ldw	r2,-32608(gp)
    42c8:	10801217 	ldw	r2,72(r2)
    42cc:	e0bffc15 	stw	r2,-16(fp)

			if( ulReturn != 0UL )
    42d0:	e0bffc17 	ldw	r2,-16(fp)
    42d4:	1005003a 	cmpeq	r2,r2,zero
    42d8:	10000a1e 	bne	r2,zero,4304 <ulTaskNotifyTake+0xb4>
			{
				if( xClearCountOnExit != pdFALSE )
    42dc:	e0bffe17 	ldw	r2,-8(fp)
    42e0:	1005003a 	cmpeq	r2,r2,zero
    42e4:	1000031e 	bne	r2,zero,42f4 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    42e8:	d0a02817 	ldw	r2,-32608(gp)
    42ec:	10001215 	stw	zero,72(r2)
    42f0:	00000406 	br	4304 <ulTaskNotifyTake+0xb4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    42f4:	d0a02817 	ldw	r2,-32608(gp)
    42f8:	10c01217 	ldw	r3,72(r2)
    42fc:	18ffffc4 	addi	r3,r3,-1
    4300:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4304:	d0a02817 	ldw	r2,-32608(gp)
    4308:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    430c:	00041680 	call	4168 <vTaskExitCritical>

		return ulReturn;
    4310:	e0bffc17 	ldw	r2,-16(fp)
	}
    4314:	e037883a 	mov	sp,fp
    4318:	dfc00117 	ldw	ra,4(sp)
    431c:	df000017 	ldw	fp,0(sp)
    4320:	dec00204 	addi	sp,sp,8
    4324:	f800283a 	ret

00004328 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4328:	defff804 	addi	sp,sp,-32
    432c:	dfc00715 	stw	ra,28(sp)
    4330:	df000615 	stw	fp,24(sp)
    4334:	df000604 	addi	fp,sp,24
    4338:	e13ffc15 	stw	r4,-16(fp)
    433c:	e17ffd15 	stw	r5,-12(fp)
    4340:	e1bffe15 	stw	r6,-8(fp)
    4344:	e1ffff15 	stw	r7,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4348:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    434c:	d0a02817 	ldw	r2,-32608(gp)
    4350:	10801317 	ldw	r2,76(r2)
    4354:	108000a0 	cmpeqi	r2,r2,2
    4358:	1000161e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    435c:	d0e02817 	ldw	r3,-32608(gp)
    4360:	19001217 	ldw	r4,72(r3)
    4364:	e0bffc17 	ldw	r2,-16(fp)
    4368:	0084303a 	nor	r2,zero,r2
    436c:	2084703a 	and	r2,r4,r2
    4370:	18801215 	stw	r2,72(r3)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    4374:	d0e02817 	ldw	r3,-32608(gp)
    4378:	00800044 	movi	r2,1
    437c:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	1005003a 	cmpeq	r2,r2,zero
    4388:	10000a1e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    438c:	d0a02817 	ldw	r2,-32608(gp)
    4390:	11000104 	addi	r4,r2,4
    4394:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4398:	d0e02b17 	ldw	r3,-32596(gp)
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	1885883a 	add	r2,r3,r2
    43a4:	e0bffb15 	stw	r2,-20(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    43a8:	e13ffb17 	ldw	r4,-20(fp)
    43ac:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    43b0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    43b4:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    43b8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			if( pulNotificationValue != NULL )
    43bc:	e0bffe17 	ldw	r2,-8(fp)
    43c0:	1005003a 	cmpeq	r2,r2,zero
    43c4:	1000041e 	bne	r2,zero,43d8 <xTaskNotifyWait+0xb0>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    43c8:	d0a02817 	ldw	r2,-32608(gp)
    43cc:	10c01217 	ldw	r3,72(r2)
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10c00015 	stw	r3,0(r2)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    43d8:	d0a02817 	ldw	r2,-32608(gp)
    43dc:	10801317 	ldw	r2,76(r2)
    43e0:	10800058 	cmpnei	r2,r2,1
    43e4:	1000021e 	bne	r2,zero,43f0 <xTaskNotifyWait+0xc8>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    43e8:	e03ffa15 	stw	zero,-24(fp)
    43ec:	00000806 	br	4410 <xTaskNotifyWait+0xe8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    43f0:	d0e02817 	ldw	r3,-32608(gp)
    43f4:	19001217 	ldw	r4,72(r3)
    43f8:	e0bffd17 	ldw	r2,-12(fp)
    43fc:	0084303a 	nor	r2,zero,r2
    4400:	2084703a 	and	r2,r4,r2
    4404:	18801215 	stw	r2,72(r3)
				xReturn = pdTRUE;
    4408:	00800044 	movi	r2,1
    440c:	e0bffa15 	stw	r2,-24(fp)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4410:	d0a02817 	ldw	r2,-32608(gp)
    4414:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4418:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    441c:	e0bffa17 	ldw	r2,-24(fp)
	}
    4420:	e037883a 	mov	sp,fp
    4424:	dfc00117 	ldw	ra,4(sp)
    4428:	df000017 	ldw	fp,0(sp)
    442c:	dec00204 	addi	sp,sp,8
    4430:	f800283a 	ret

00004434 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
    4434:	defff704 	addi	sp,sp,-36
    4438:	dfc00815 	stw	ra,32(sp)
    443c:	df000715 	stw	fp,28(sp)
    4440:	df000704 	addi	fp,sp,28
    4444:	e13ffc15 	stw	r4,-16(fp)
    4448:	e17ffd15 	stw	r5,-12(fp)
    444c:	e1bffe15 	stw	r6,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4450:	00800044 	movi	r2,1
    4454:	e0bff915 	stw	r2,-28(fp)

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4458:	e0bffc17 	ldw	r2,-16(fp)
    445c:	e0bffb15 	stw	r2,-20(fp)

		taskENTER_CRITICAL();
    4460:	00041140 	call	4114 <vTaskEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	10801317 	ldw	r2,76(r2)
    446c:	e0bffa15 	stw	r2,-24(fp)

			pxTCB->eNotifyState = eNotified;
    4470:	e0fffb17 	ldw	r3,-20(fp)
    4474:	00800084 	movi	r2,2
    4478:	18801315 	stw	r2,76(r3)

			switch( eAction )
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	e0bfff15 	stw	r2,-4(fp)
    4484:	e0ffff17 	ldw	r3,-4(fp)
    4488:	188000a0 	cmpeqi	r2,r3,2
    448c:	1000151e 	bne	r2,zero,44e4 <xTaskNotify+0xb0>
    4490:	e0ffff17 	ldw	r3,-4(fp)
    4494:	188000e8 	cmpgeui	r2,r3,3
    4498:	1000041e 	bne	r2,zero,44ac <xTaskNotify+0x78>
    449c:	e0ffff17 	ldw	r3,-4(fp)
    44a0:	18800060 	cmpeqi	r2,r3,1
    44a4:	1000081e 	bne	r2,zero,44c8 <xTaskNotify+0x94>
    44a8:	00002006 	br	452c <xTaskNotify+0xf8>
    44ac:	e0ffff17 	ldw	r3,-4(fp)
    44b0:	188000e0 	cmpeqi	r2,r3,3
    44b4:	1000111e 	bne	r2,zero,44fc <xTaskNotify+0xc8>
    44b8:	e0ffff17 	ldw	r3,-4(fp)
    44bc:	18800120 	cmpeqi	r2,r3,4
    44c0:	1000121e 	bne	r2,zero,450c <xTaskNotify+0xd8>
    44c4:	00001906 	br	452c <xTaskNotify+0xf8>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10c01217 	ldw	r3,72(r2)
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	1886b03a 	or	r3,r3,r2
    44d8:	e0bffb17 	ldw	r2,-20(fp)
    44dc:	10c01215 	stw	r3,72(r2)
					break;
    44e0:	00001206 	br	452c <xTaskNotify+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    44e4:	e0bffb17 	ldw	r2,-20(fp)
    44e8:	10801217 	ldw	r2,72(r2)
    44ec:	10c00044 	addi	r3,r2,1
    44f0:	e0bffb17 	ldw	r2,-20(fp)
    44f4:	10c01215 	stw	r3,72(r2)
					break;
    44f8:	00000c06 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    44fc:	e0fffb17 	ldw	r3,-20(fp)
    4500:	e0bffd17 	ldw	r2,-12(fp)
    4504:	18801215 	stw	r2,72(r3)
					break;
    4508:	00000806 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    450c:	e0bffa17 	ldw	r2,-24(fp)
    4510:	108000a0 	cmpeqi	r2,r2,2
    4514:	1000041e 	bne	r2,zero,4528 <xTaskNotify+0xf4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4518:	e0fffb17 	ldw	r3,-20(fp)
    451c:	e0bffd17 	ldw	r2,-12(fp)
    4520:	18801215 	stw	r2,72(r3)
    4524:	00000106 	br	452c <xTaskNotify+0xf8>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4528:	e03ff915 	stw	zero,-28(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    452c:	e0bffa17 	ldw	r2,-24(fp)
    4530:	10800058 	cmpnei	r2,r2,1
    4534:	10001a1e 	bne	r2,zero,45a0 <xTaskNotify+0x16c>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4538:	e0bffb17 	ldw	r2,-20(fp)
    453c:	11000104 	addi	r4,r2,4
    4540:	00015f80 	call	15f8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4544:	e0bffb17 	ldw	r2,-20(fp)
    4548:	10c00b17 	ldw	r3,44(r2)
    454c:	d0a02c17 	ldw	r2,-32592(gp)
    4550:	10c0032e 	bgeu	r2,r3,4560 <xTaskNotify+0x12c>
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10800b17 	ldw	r2,44(r2)
    455c:	d0a02c15 	stw	r2,-32592(gp)
    4560:	e0bffb17 	ldw	r2,-20(fp)
    4564:	10800b17 	ldw	r2,44(r2)
    4568:	10800524 	muli	r2,r2,20
    456c:	1007883a 	mov	r3,r2
    4570:	00820234 	movhi	r2,2056
    4574:	10be1204 	addi	r2,r2,-1976
    4578:	1889883a 	add	r4,r3,r2
    457c:	e0bffb17 	ldw	r2,-20(fp)
    4580:	11400104 	addi	r5,r2,4
    4584:	000149c0 	call	149c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4588:	e0bffb17 	ldw	r2,-20(fp)
    458c:	10c00b17 	ldw	r3,44(r2)
    4590:	d0a02817 	ldw	r2,-32608(gp)
    4594:	10800b17 	ldw	r2,44(r2)
    4598:	10c0012e 	bgeu	r2,r3,45a0 <xTaskNotify+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
    459c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    45a0:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    45a4:	e0bff917 	ldw	r2,-28(fp)
	}
    45a8:	e037883a 	mov	sp,fp
    45ac:	dfc00117 	ldw	ra,4(sp)
    45b0:	df000017 	ldw	fp,0(sp)
    45b4:	dec00204 	addi	sp,sp,8
    45b8:	f800283a 	ret

000045bc <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
    45bc:	defff504 	addi	sp,sp,-44
    45c0:	dfc00a15 	stw	ra,40(sp)
    45c4:	df000915 	stw	fp,36(sp)
    45c8:	df000904 	addi	fp,sp,36
    45cc:	e13ffb15 	stw	r4,-20(fp)
    45d0:	e17ffc15 	stw	r5,-16(fp)
    45d4:	e1bffd15 	stw	r6,-12(fp)
    45d8:	e1fffe15 	stw	r7,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    45dc:	00800044 	movi	r2,1
    45e0:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    45e4:	e0bffb17 	ldw	r2,-20(fp)
    45e8:	e0bffa15 	stw	r2,-24(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45ec:	e03ff715 	stw	zero,-36(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    45f0:	e0bffa17 	ldw	r2,-24(fp)
    45f4:	10801317 	ldw	r2,76(r2)
    45f8:	e0bff915 	stw	r2,-28(fp)

			pxTCB->eNotifyState = eNotified;
    45fc:	e0fffa17 	ldw	r3,-24(fp)
    4600:	00800084 	movi	r2,2
    4604:	18801315 	stw	r2,76(r3)

			switch( eAction )
    4608:	e0bffd17 	ldw	r2,-12(fp)
    460c:	e0bfff15 	stw	r2,-4(fp)
    4610:	e0ffff17 	ldw	r3,-4(fp)
    4614:	188000a0 	cmpeqi	r2,r3,2
    4618:	1000151e 	bne	r2,zero,4670 <xTaskNotifyFromISR+0xb4>
    461c:	e0ffff17 	ldw	r3,-4(fp)
    4620:	188000e8 	cmpgeui	r2,r3,3
    4624:	1000041e 	bne	r2,zero,4638 <xTaskNotifyFromISR+0x7c>
    4628:	e0ffff17 	ldw	r3,-4(fp)
    462c:	18800060 	cmpeqi	r2,r3,1
    4630:	1000081e 	bne	r2,zero,4654 <xTaskNotifyFromISR+0x98>
    4634:	00002006 	br	46b8 <xTaskNotifyFromISR+0xfc>
    4638:	e0ffff17 	ldw	r3,-4(fp)
    463c:	188000e0 	cmpeqi	r2,r3,3
    4640:	1000111e 	bne	r2,zero,4688 <xTaskNotifyFromISR+0xcc>
    4644:	e0ffff17 	ldw	r3,-4(fp)
    4648:	18800120 	cmpeqi	r2,r3,4
    464c:	1000121e 	bne	r2,zero,4698 <xTaskNotifyFromISR+0xdc>
    4650:	00001906 	br	46b8 <xTaskNotifyFromISR+0xfc>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4654:	e0bffa17 	ldw	r2,-24(fp)
    4658:	10c01217 	ldw	r3,72(r2)
    465c:	e0bffc17 	ldw	r2,-16(fp)
    4660:	1886b03a 	or	r3,r3,r2
    4664:	e0bffa17 	ldw	r2,-24(fp)
    4668:	10c01215 	stw	r3,72(r2)
					break;
    466c:	00001206 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4670:	e0bffa17 	ldw	r2,-24(fp)
    4674:	10801217 	ldw	r2,72(r2)
    4678:	10c00044 	addi	r3,r2,1
    467c:	e0bffa17 	ldw	r2,-24(fp)
    4680:	10c01215 	stw	r3,72(r2)
					break;
    4684:	00000c06 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4688:	e0fffa17 	ldw	r3,-24(fp)
    468c:	e0bffc17 	ldw	r2,-16(fp)
    4690:	18801215 	stw	r2,72(r3)
					break;
    4694:	00000806 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	108000a0 	cmpeqi	r2,r2,2
    46a0:	1000041e 	bne	r2,zero,46b4 <xTaskNotifyFromISR+0xf8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    46a4:	e0fffa17 	ldw	r3,-24(fp)
    46a8:	e0bffc17 	ldw	r2,-16(fp)
    46ac:	18801215 	stw	r2,72(r3)
    46b0:	00000106 	br	46b8 <xTaskNotifyFromISR+0xfc>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    46b4:	e03ff815 	stw	zero,-32(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    46b8:	e0bff917 	ldw	r2,-28(fp)
    46bc:	10800058 	cmpnei	r2,r2,1
    46c0:	1000281e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    46c4:	d0a03217 	ldw	r2,-32568(gp)
    46c8:	1004c03a 	cmpne	r2,r2,zero
    46cc:	1000151e 	bne	r2,zero,4724 <xTaskNotifyFromISR+0x168>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    46d0:	e0bffa17 	ldw	r2,-24(fp)
    46d4:	11000104 	addi	r4,r2,4
    46d8:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    46dc:	e0bffa17 	ldw	r2,-24(fp)
    46e0:	10c00b17 	ldw	r3,44(r2)
    46e4:	d0a02c17 	ldw	r2,-32592(gp)
    46e8:	10c0032e 	bgeu	r2,r3,46f8 <xTaskNotifyFromISR+0x13c>
    46ec:	e0bffa17 	ldw	r2,-24(fp)
    46f0:	10800b17 	ldw	r2,44(r2)
    46f4:	d0a02c15 	stw	r2,-32592(gp)
    46f8:	e0bffa17 	ldw	r2,-24(fp)
    46fc:	10800b17 	ldw	r2,44(r2)
    4700:	10800524 	muli	r2,r2,20
    4704:	1007883a 	mov	r3,r2
    4708:	00820234 	movhi	r2,2056
    470c:	10be1204 	addi	r2,r2,-1976
    4710:	1889883a 	add	r4,r3,r2
    4714:	e0bffa17 	ldw	r2,-24(fp)
    4718:	11400104 	addi	r5,r2,4
    471c:	000149c0 	call	149c <vListInsertEnd>
    4720:	00000506 	br	4738 <xTaskNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4724:	e0bffa17 	ldw	r2,-24(fp)
    4728:	11400604 	addi	r5,r2,24
    472c:	01020234 	movhi	r4,2056
    4730:	213e5804 	addi	r4,r4,-1696
    4734:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4738:	e0bffa17 	ldw	r2,-24(fp)
    473c:	10c00b17 	ldw	r3,44(r2)
    4740:	d0a02817 	ldw	r2,-32608(gp)
    4744:	10800b17 	ldw	r2,44(r2)
    4748:	10c0062e 	bgeu	r2,r3,4764 <xTaskNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    474c:	e0bffe17 	ldw	r2,-8(fp)
    4750:	1005003a 	cmpeq	r2,r2,zero
    4754:	1000031e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4758:	e0fffe17 	ldw	r3,-8(fp)
    475c:	00800044 	movi	r2,1
    4760:	18800015 	stw	r2,0(r3)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    4764:	e0bff817 	ldw	r2,-32(fp)
	}
    4768:	e037883a 	mov	sp,fp
    476c:	dfc00117 	ldw	ra,4(sp)
    4770:	df000017 	ldw	fp,0(sp)
    4774:	dec00204 	addi	sp,sp,8
    4778:	f800283a 	ret

0000477c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    477c:	defff904 	addi	sp,sp,-28
    4780:	dfc00615 	stw	ra,24(sp)
    4784:	df000515 	stw	fp,20(sp)
    4788:	df000504 	addi	fp,sp,20
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4794:	e0bffe17 	ldw	r2,-8(fp)
    4798:	e0bffd15 	stw	r2,-12(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    479c:	e03ffb15 	stw	zero,-20(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    47a0:	e0bffd17 	ldw	r2,-12(fp)
    47a4:	10801317 	ldw	r2,76(r2)
    47a8:	e0bffc15 	stw	r2,-16(fp)
			pxTCB->eNotifyState = eNotified;
    47ac:	e0fffd17 	ldw	r3,-12(fp)
    47b0:	00800084 	movi	r2,2
    47b4:	18801315 	stw	r2,76(r3)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    47b8:	e0bffd17 	ldw	r2,-12(fp)
    47bc:	10801217 	ldw	r2,72(r2)
    47c0:	10c00044 	addi	r3,r2,1
    47c4:	e0bffd17 	ldw	r2,-12(fp)
    47c8:	10c01215 	stw	r3,72(r2)

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10800058 	cmpnei	r2,r2,1
    47d4:	1000281e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47d8:	d0a03217 	ldw	r2,-32568(gp)
    47dc:	1004c03a 	cmpne	r2,r2,zero
    47e0:	1000151e 	bne	r2,zero,4838 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    47e4:	e0bffd17 	ldw	r2,-12(fp)
    47e8:	11000104 	addi	r4,r2,4
    47ec:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    47f0:	e0bffd17 	ldw	r2,-12(fp)
    47f4:	10c00b17 	ldw	r3,44(r2)
    47f8:	d0a02c17 	ldw	r2,-32592(gp)
    47fc:	10c0032e 	bgeu	r2,r3,480c <vTaskNotifyGiveFromISR+0x90>
    4800:	e0bffd17 	ldw	r2,-12(fp)
    4804:	10800b17 	ldw	r2,44(r2)
    4808:	d0a02c15 	stw	r2,-32592(gp)
    480c:	e0bffd17 	ldw	r2,-12(fp)
    4810:	10800b17 	ldw	r2,44(r2)
    4814:	10800524 	muli	r2,r2,20
    4818:	1007883a 	mov	r3,r2
    481c:	00820234 	movhi	r2,2056
    4820:	10be1204 	addi	r2,r2,-1976
    4824:	1889883a 	add	r4,r3,r2
    4828:	e0bffd17 	ldw	r2,-12(fp)
    482c:	11400104 	addi	r5,r2,4
    4830:	000149c0 	call	149c <vListInsertEnd>
    4834:	00000506 	br	484c <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4838:	e0bffd17 	ldw	r2,-12(fp)
    483c:	11400604 	addi	r5,r2,24
    4840:	01020234 	movhi	r4,2056
    4844:	213e5804 	addi	r4,r4,-1696
    4848:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10c00b17 	ldw	r3,44(r2)
    4854:	d0a02817 	ldw	r2,-32608(gp)
    4858:	10800b17 	ldw	r2,44(r2)
    485c:	10c0062e 	bgeu	r2,r3,4878 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	1005003a 	cmpeq	r2,r2,zero
    4868:	1000031e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    486c:	e0ffff17 	ldw	r3,-4(fp)
    4870:	00800044 	movi	r2,1
    4874:	18800015 	stw	r2,0(r3)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4878:	e037883a 	mov	sp,fp
    487c:	dfc00117 	ldw	ra,4(sp)
    4880:	df000017 	ldw	fp,0(sp)
    4884:	dec00204 	addi	sp,sp,8
    4888:	f800283a 	ret

0000488c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    488c:	defff904 	addi	sp,sp,-28
    4890:	dfc00615 	stw	ra,24(sp)
    4894:	df000515 	stw	fp,20(sp)
    4898:	df000504 	addi	fp,sp,20
BaseType_t xReturn = pdFAIL;
    489c:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    48a0:	00050440 	call	5044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    48a4:	d0a03517 	ldw	r2,-32556(gp)
    48a8:	1005003a 	cmpeq	r2,r2,zero
    48ac:	10000d1e 	bne	r2,zero,48e4 <xTimerCreateTimerTask+0x58>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    48b0:	008000c4 	movi	r2,3
    48b4:	d8800015 	stw	r2,0(sp)
    48b8:	d8000115 	stw	zero,4(sp)
    48bc:	d8000215 	stw	zero,8(sp)
    48c0:	d8000315 	stw	zero,12(sp)
    48c4:	01000034 	movhi	r4,0
    48c8:	2112d404 	addi	r4,r4,19280
    48cc:	01420034 	movhi	r5,2048
    48d0:	29401404 	addi	r5,r5,80
    48d4:	01820004 	movi	r6,2048
    48d8:	000f883a 	mov	r7,zero
    48dc:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    48e0:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    48e4:	e0bfff17 	ldw	r2,-4(fp)
}
    48e8:	e037883a 	mov	sp,fp
    48ec:	dfc00117 	ldw	ra,4(sp)
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00204 	addi	sp,sp,8
    48f8:	f800283a 	ret

000048fc <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    48fc:	defff904 	addi	sp,sp,-28
    4900:	dfc00615 	stw	ra,24(sp)
    4904:	df000515 	stw	fp,20(sp)
    4908:	df000504 	addi	fp,sp,20
    490c:	e13ffc15 	stw	r4,-16(fp)
    4910:	e17ffd15 	stw	r5,-12(fp)
    4914:	e1bffe15 	stw	r6,-8(fp)
    4918:	e1ffff15 	stw	r7,-4(fp)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1004c03a 	cmpne	r2,r2,zero
    4924:	1000021e 	bne	r2,zero,4930 <xTimerCreate+0x34>
	{
		pxNewTimer = NULL;
    4928:	e03ffb15 	stw	zero,-20(fp)
    492c:	00001906 	br	4994 <xTimerCreate+0x98>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4930:	01000a04 	movi	r4,40
    4934:	0000fbc0 	call	fbc <pvPortMalloc>
    4938:	e0bffb15 	stw	r2,-20(fp)
		if( pxNewTimer != NULL )
    493c:	e0bffb17 	ldw	r2,-20(fp)
    4940:	1005003a 	cmpeq	r2,r2,zero
    4944:	1000131e 	bne	r2,zero,4994 <xTimerCreate+0x98>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    4948:	00050440 	call	5044 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    494c:	e0fffb17 	ldw	r3,-20(fp)
    4950:	e0bffc17 	ldw	r2,-16(fp)
    4954:	18800015 	stw	r2,0(r3)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4958:	e0fffb17 	ldw	r3,-20(fp)
    495c:	e0bffd17 	ldw	r2,-12(fp)
    4960:	18800615 	stw	r2,24(r3)
			pxNewTimer->uxAutoReload = uxAutoReload;
    4964:	e0fffb17 	ldw	r3,-20(fp)
    4968:	e0bffe17 	ldw	r2,-8(fp)
    496c:	18800715 	stw	r2,28(r3)
			pxNewTimer->pvTimerID = pvTimerID;
    4970:	e0fffb17 	ldw	r3,-20(fp)
    4974:	e0bfff17 	ldw	r2,-4(fp)
    4978:	18800815 	stw	r2,32(r3)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    497c:	e0fffb17 	ldw	r3,-20(fp)
    4980:	e0800217 	ldw	r2,8(fp)
    4984:	18800915 	stw	r2,36(r3)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    4988:	e0bffb17 	ldw	r2,-20(fp)
    498c:	11000104 	addi	r4,r2,4
    4990:	00014740 	call	1474 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
    4994:	e0bffb17 	ldw	r2,-20(fp)
}
    4998:	e037883a 	mov	sp,fp
    499c:	dfc00117 	ldw	ra,4(sp)
    49a0:	df000017 	ldw	fp,0(sp)
    49a4:	dec00204 	addi	sp,sp,8
    49a8:	f800283a 	ret

000049ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    49ac:	defff604 	addi	sp,sp,-40
    49b0:	dfc00915 	stw	ra,36(sp)
    49b4:	df000815 	stw	fp,32(sp)
    49b8:	df000804 	addi	fp,sp,32
    49bc:	e13ffc15 	stw	r4,-16(fp)
    49c0:	e17ffd15 	stw	r5,-12(fp)
    49c4:	e1bffe15 	stw	r6,-8(fp)
    49c8:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
    49cc:	e03ff815 	stw	zero,-32(fp)
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    49d0:	d0a03517 	ldw	r2,-32556(gp)
    49d4:	1005003a 	cmpeq	r2,r2,zero
    49d8:	1000201e 	bne	r2,zero,4a5c <xTimerGenericCommand+0xb0>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    49dc:	e0bffd17 	ldw	r2,-12(fp)
    49e0:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    49e4:	e0bffe17 	ldw	r2,-8(fp)
    49e8:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    49ec:	e0bffc17 	ldw	r2,-16(fp)
    49f0:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	10800188 	cmpgei	r2,r2,6
    49fc:	1000111e 	bne	r2,zero,4a44 <xTimerGenericCommand+0x98>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a00:	0003e940 	call	3e94 <xTaskGetSchedulerState>
    4a04:	10800098 	cmpnei	r2,r2,2
    4a08:	1000071e 	bne	r2,zero,4a28 <xTimerGenericCommand+0x7c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4a0c:	d1203517 	ldw	r4,-32556(gp)
    4a10:	e17ff904 	addi	r5,fp,-28
    4a14:	e1800217 	ldw	r6,8(fp)
    4a18:	000f883a 	mov	r7,zero
    4a1c:	0001f100 	call	1f10 <xQueueGenericSend>
    4a20:	e0bff815 	stw	r2,-32(fp)
    4a24:	00000d06 	br	4a5c <xTimerGenericCommand+0xb0>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4a28:	d1203517 	ldw	r4,-32556(gp)
    4a2c:	e17ff904 	addi	r5,fp,-28
    4a30:	000d883a 	mov	r6,zero
    4a34:	000f883a 	mov	r7,zero
    4a38:	0001f100 	call	1f10 <xQueueGenericSend>
    4a3c:	e0bff815 	stw	r2,-32(fp)
    4a40:	00000606 	br	4a5c <xTimerGenericCommand+0xb0>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4a44:	d1203517 	ldw	r4,-32556(gp)
    4a48:	e17ff904 	addi	r5,fp,-28
    4a4c:	e1bfff17 	ldw	r6,-4(fp)
    4a50:	000f883a 	mov	r7,zero
    4a54:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
    4a58:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    4a5c:	e0bff817 	ldw	r2,-32(fp)
}
    4a60:	e037883a 	mov	sp,fp
    4a64:	dfc00117 	ldw	ra,4(sp)
    4a68:	df000017 	ldw	fp,0(sp)
    4a6c:	dec00204 	addi	sp,sp,8
    4a70:	f800283a 	ret

00004a74 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
    4a74:	defffd04 	addi	sp,sp,-12
    4a78:	df000215 	stw	fp,8(sp)
    4a7c:	df000204 	addi	fp,sp,8
    4a80:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    4a84:	e0bfff17 	ldw	r2,-4(fp)
    4a88:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pcTimerName;
    4a8c:	e0bffe17 	ldw	r2,-8(fp)
    4a90:	10800017 	ldw	r2,0(r2)
}
    4a94:	e037883a 	mov	sp,fp
    4a98:	df000017 	ldw	fp,0(sp)
    4a9c:	dec00104 	addi	sp,sp,4
    4aa0:	f800283a 	ret

00004aa4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    4aa4:	defff904 	addi	sp,sp,-28
    4aa8:	dfc00615 	stw	ra,24(sp)
    4aac:	df000515 	stw	fp,20(sp)
    4ab0:	df000504 	addi	fp,sp,20
    4ab4:	e13ffe15 	stw	r4,-8(fp)
    4ab8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4abc:	d0a03717 	ldw	r2,-32548(gp)
    4ac0:	10800317 	ldw	r2,12(r2)
    4ac4:	10800317 	ldw	r2,12(r2)
    4ac8:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4acc:	e0bffc17 	ldw	r2,-16(fp)
    4ad0:	11000104 	addi	r4,r2,4
    4ad4:	00015f80 	call	15f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4ad8:	e0bffc17 	ldw	r2,-16(fp)
    4adc:	10800717 	ldw	r2,28(r2)
    4ae0:	10800058 	cmpnei	r2,r2,1
    4ae4:	1000111e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    4ae8:	e0bffc17 	ldw	r2,-16(fp)
    4aec:	10c00617 	ldw	r3,24(r2)
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	188b883a 	add	r5,r3,r2
    4af8:	e13ffc17 	ldw	r4,-16(fp)
    4afc:	e1bfff17 	ldw	r6,-4(fp)
    4b00:	e1fffe17 	ldw	r7,-8(fp)
    4b04:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4b08:	10800058 	cmpnei	r2,r2,1
    4b0c:	1000071e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4b10:	d8000015 	stw	zero,0(sp)
    4b14:	e13ffc17 	ldw	r4,-16(fp)
    4b18:	000b883a 	mov	r5,zero
    4b1c:	e1bffe17 	ldw	r6,-8(fp)
    4b20:	000f883a 	mov	r7,zero
    4b24:	00049ac0 	call	49ac <xTimerGenericCommand>
    4b28:	e0bffd15 	stw	r2,-12(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4b2c:	e0bffc17 	ldw	r2,-16(fp)
    4b30:	10800917 	ldw	r2,36(r2)
    4b34:	e13ffc17 	ldw	r4,-16(fp)
    4b38:	103ee83a 	callr	r2
}
    4b3c:	e037883a 	mov	sp,fp
    4b40:	dfc00117 	ldw	ra,4(sp)
    4b44:	df000017 	ldw	fp,0(sp)
    4b48:	dec00204 	addi	sp,sp,8
    4b4c:	f800283a 	ret

00004b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4b50:	defffb04 	addi	sp,sp,-20
    4b54:	dfc00415 	stw	ra,16(sp)
    4b58:	df000315 	stw	fp,12(sp)
    4b5c:	df000304 	addi	fp,sp,12
    4b60:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    4b64:	e13ffe04 	addi	r4,fp,-8
    4b68:	0004c240 	call	4c24 <prvGetNextExpireTime>
    4b6c:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    4b70:	e17ffe17 	ldw	r5,-8(fp)
    4b74:	e13ffd17 	ldw	r4,-12(fp)
    4b78:	0004b840 	call	4b84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    4b7c:	0004db40 	call	4db4 <prvProcessReceivedCommands>
	}
    4b80:	003ff806 	br	4b64 <prvTimerTask+0x14>

00004b84 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    4b84:	defffa04 	addi	sp,sp,-24
    4b88:	dfc00515 	stw	ra,20(sp)
    4b8c:	df000415 	stw	fp,16(sp)
    4b90:	df000404 	addi	fp,sp,16
    4b94:	e13ffe15 	stw	r4,-8(fp)
    4b98:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4b9c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4ba0:	e13ffd04 	addi	r4,fp,-12
    4ba4:	0004c840 	call	4c84 <prvSampleTimeNow>
    4ba8:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
    4bac:	e0bffd17 	ldw	r2,-12(fp)
    4bb0:	1004c03a 	cmpne	r2,r2,zero
    4bb4:	1000151e 	bne	r2,zero,4c0c <prvProcessTimerOrBlockTask+0x88>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4bb8:	e0bfff17 	ldw	r2,-4(fp)
    4bbc:	1004c03a 	cmpne	r2,r2,zero
    4bc0:	1000081e 	bne	r2,zero,4be4 <prvProcessTimerOrBlockTask+0x60>
    4bc4:	e0fffe17 	ldw	r3,-8(fp)
    4bc8:	e0bffc17 	ldw	r2,-16(fp)
    4bcc:	10c00536 	bltu	r2,r3,4be4 <prvProcessTimerOrBlockTask+0x60>
			{
				( void ) xTaskResumeAll();
    4bd0:	00030180 	call	3018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4bd4:	e13ffe17 	ldw	r4,-8(fp)
    4bd8:	e17ffc17 	ldw	r5,-16(fp)
    4bdc:	0004aa40 	call	4aa4 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4be0:	00000b06 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4be4:	d1203517 	ldw	r4,-32556(gp)
    4be8:	e0fffe17 	ldw	r3,-8(fp)
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	188bc83a 	sub	r5,r3,r2
    4bf4:	0002b640 	call	2b64 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    4bf8:	00030180 	call	3018 <xTaskResumeAll>
    4bfc:	1004c03a 	cmpne	r2,r2,zero
    4c00:	1000031e 	bne	r2,zero,4c10 <prvProcessTimerOrBlockTask+0x8c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    4c04:	003b683a 	trap	0
    4c08:	00000106 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4c0c:	00030180 	call	3018 <xTaskResumeAll>
		}
	}
}
    4c10:	e037883a 	mov	sp,fp
    4c14:	dfc00117 	ldw	ra,4(sp)
    4c18:	df000017 	ldw	fp,0(sp)
    4c1c:	dec00204 	addi	sp,sp,8
    4c20:	f800283a 	ret

00004c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    4c24:	defffd04 	addi	sp,sp,-12
    4c28:	df000215 	stw	fp,8(sp)
    4c2c:	df000204 	addi	fp,sp,8
    4c30:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4c34:	d0a03717 	ldw	r2,-32548(gp)
    4c38:	10800017 	ldw	r2,0(r2)
    4c3c:	1007003a 	cmpeq	r3,r2,zero
    4c40:	e0bfff17 	ldw	r2,-4(fp)
    4c44:	10c00015 	stw	r3,0(r2)
	if( *pxListWasEmpty == pdFALSE )
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	10800017 	ldw	r2,0(r2)
    4c50:	1004c03a 	cmpne	r2,r2,zero
    4c54:	1000051e 	bne	r2,zero,4c6c <prvGetNextExpireTime+0x48>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4c58:	d0a03717 	ldw	r2,-32548(gp)
    4c5c:	10800317 	ldw	r2,12(r2)
    4c60:	10800017 	ldw	r2,0(r2)
    4c64:	e0bffe15 	stw	r2,-8(fp)
    4c68:	00000106 	br	4c70 <prvGetNextExpireTime+0x4c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4c6c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
    4c70:	e0bffe17 	ldw	r2,-8(fp)
}
    4c74:	e037883a 	mov	sp,fp
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00104 	addi	sp,sp,4
    4c80:	f800283a 	ret

00004c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4c84:	defffc04 	addi	sp,sp,-16
    4c88:	dfc00315 	stw	ra,12(sp)
    4c8c:	df000215 	stw	fp,8(sp)
    4c90:	df000204 	addi	fp,sp,8
    4c94:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    4c98:	00031680 	call	3168 <xTaskGetTickCount>
    4c9c:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
    4ca0:	d0e03617 	ldw	r3,-32552(gp)
    4ca4:	e0bffe17 	ldw	r2,-8(fp)
    4ca8:	10c0052e 	bgeu	r2,r3,4cc0 <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
    4cac:	0004f400 	call	4f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    4cb0:	e0ffff17 	ldw	r3,-4(fp)
    4cb4:	00800044 	movi	r2,1
    4cb8:	18800015 	stw	r2,0(r3)
    4cbc:	00000206 	br	4cc8 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4cc0:	e0bfff17 	ldw	r2,-4(fp)
    4cc4:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
    4cc8:	e0bffe17 	ldw	r2,-8(fp)
    4ccc:	d0a03615 	stw	r2,-32552(gp)

	return xTimeNow;
    4cd0:	e0bffe17 	ldw	r2,-8(fp)
}
    4cd4:	e037883a 	mov	sp,fp
    4cd8:	dfc00117 	ldw	ra,4(sp)
    4cdc:	df000017 	ldw	fp,0(sp)
    4ce0:	dec00204 	addi	sp,sp,8
    4ce4:	f800283a 	ret

00004ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4ce8:	defff904 	addi	sp,sp,-28
    4cec:	dfc00615 	stw	ra,24(sp)
    4cf0:	df000515 	stw	fp,20(sp)
    4cf4:	df000504 	addi	fp,sp,20
    4cf8:	e13ffc15 	stw	r4,-16(fp)
    4cfc:	e17ffd15 	stw	r5,-12(fp)
    4d00:	e1bffe15 	stw	r6,-8(fp)
    4d04:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
    4d08:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4d0c:	e0fffc17 	ldw	r3,-16(fp)
    4d10:	e0bffd17 	ldw	r2,-12(fp)
    4d14:	18800115 	stw	r2,4(r3)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4d18:	e0fffc17 	ldw	r3,-16(fp)
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	18800415 	stw	r2,16(r3)

	if( xNextExpiryTime <= xTimeNow )
    4d24:	e0fffd17 	ldw	r3,-12(fp)
    4d28:	e0bffe17 	ldw	r2,-8(fp)
    4d2c:	10c00e36 	bltu	r2,r3,4d68 <prvInsertTimerInActiveList+0x80>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4d30:	e0fffe17 	ldw	r3,-8(fp)
    4d34:	e0bfff17 	ldw	r2,-4(fp)
    4d38:	1887c83a 	sub	r3,r3,r2
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	10800617 	ldw	r2,24(r2)
    4d44:	18800336 	bltu	r3,r2,4d54 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4d48:	00800044 	movi	r2,1
    4d4c:	e0bffb15 	stw	r2,-20(fp)
    4d50:	00001206 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4d54:	d1203817 	ldw	r4,-32544(gp)
    4d58:	e0bffc17 	ldw	r2,-16(fp)
    4d5c:	11400104 	addi	r5,r2,4
    4d60:	00015240 	call	1524 <vListInsert>
    4d64:	00000d06 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d68:	e0fffe17 	ldw	r3,-8(fp)
    4d6c:	e0bfff17 	ldw	r2,-4(fp)
    4d70:	1880062e 	bgeu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
    4d74:	e0fffd17 	ldw	r3,-12(fp)
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	18800336 	bltu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4d80:	00800044 	movi	r2,1
    4d84:	e0bffb15 	stw	r2,-20(fp)
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d88:	00000406 	br	4d9c <prvInsertTimerInActiveList+0xb4>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d8c:	d1203717 	ldw	r4,-32548(gp)
    4d90:	e0bffc17 	ldw	r2,-16(fp)
    4d94:	11400104 	addi	r5,r2,4
    4d98:	00015240 	call	1524 <vListInsert>
		}
	}

	return xProcessTimerNow;
    4d9c:	e0bffb17 	ldw	r2,-20(fp)
}
    4da0:	e037883a 	mov	sp,fp
    4da4:	dfc00117 	ldw	ra,4(sp)
    4da8:	df000017 	ldw	fp,0(sp)
    4dac:	dec00204 	addi	sp,sp,8
    4db0:	f800283a 	ret

00004db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    4db4:	defff504 	addi	sp,sp,-44
    4db8:	dfc00a15 	stw	ra,40(sp)
    4dbc:	df000915 	stw	fp,36(sp)
    4dc0:	df000904 	addi	fp,sp,36
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4dc4:	00005206 	br	4f10 <prvProcessReceivedCommands+0x15c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4dc8:	e0bffb17 	ldw	r2,-20(fp)
    4dcc:	1004803a 	cmplt	r2,r2,zero
    4dd0:	10004f1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4dd4:	e0bffd17 	ldw	r2,-12(fp)
    4dd8:	e0bffa15 	stw	r2,-24(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4ddc:	e0bffa17 	ldw	r2,-24(fp)
    4de0:	10800517 	ldw	r2,20(r2)
    4de4:	1005003a 	cmpeq	r2,r2,zero
    4de8:	1000031e 	bne	r2,zero,4df8 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4dec:	e0bffa17 	ldw	r2,-24(fp)
    4df0:	11000104 	addi	r4,r2,4
    4df4:	00015f80 	call	15f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4df8:	e13ffe04 	addi	r4,fp,-8
    4dfc:	0004c840 	call	4c84 <prvSampleTimeNow>
    4e00:	e0bff815 	stw	r2,-32(fp)

			switch( xMessage.xMessageID )
    4e04:	e0bffb17 	ldw	r2,-20(fp)
    4e08:	e0bfff15 	stw	r2,-4(fp)
    4e0c:	e0ffff17 	ldw	r3,-4(fp)
    4e10:	188002a8 	cmpgeui	r2,r3,10
    4e14:	10003e1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
    4e18:	e13fff17 	ldw	r4,-4(fp)
    4e1c:	e13fff17 	ldw	r4,-4(fp)
    4e20:	2105883a 	add	r2,r4,r4
    4e24:	1087883a 	add	r3,r2,r2
    4e28:	00800034 	movhi	r2,0
    4e2c:	10938f04 	addi	r2,r2,20028
    4e30:	1885883a 	add	r2,r3,r2
    4e34:	10800017 	ldw	r2,0(r2)
    4e38:	1000683a 	jmp	r2
    4e3c:	00004e64 	muli	zero,zero,313
    4e40:	00004e64 	muli	zero,zero,313
    4e44:	00004e64 	muli	zero,zero,313
    4e48:	00004f10 	cmplti	zero,zero,316
    4e4c:	00004ed8 	cmpnei	zero,zero,315
    4e50:	00004f08 	cmpgei	zero,zero,316
    4e54:	00004e64 	muli	zero,zero,313
    4e58:	00004e64 	muli	zero,zero,313
    4e5c:	00004f10 	cmplti	zero,zero,316
    4e60:	00004ed8 	cmpnei	zero,zero,315
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4e64:	e0fffc17 	ldw	r3,-16(fp)
    4e68:	e0bffa17 	ldw	r2,-24(fp)
    4e6c:	10800617 	ldw	r2,24(r2)
    4e70:	188b883a 	add	r5,r3,r2
    4e74:	e1fffc17 	ldw	r7,-16(fp)
    4e78:	e13ffa17 	ldw	r4,-24(fp)
    4e7c:	e1bff817 	ldw	r6,-32(fp)
    4e80:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4e84:	10800058 	cmpnei	r2,r2,1
    4e88:	1000211e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e8c:	e0bffa17 	ldw	r2,-24(fp)
    4e90:	10800917 	ldw	r2,36(r2)
    4e94:	e13ffa17 	ldw	r4,-24(fp)
    4e98:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4e9c:	e0bffa17 	ldw	r2,-24(fp)
    4ea0:	10800717 	ldw	r2,28(r2)
    4ea4:	10800058 	cmpnei	r2,r2,1
    4ea8:	1000191e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4eac:	e0fffc17 	ldw	r3,-16(fp)
    4eb0:	e0bffa17 	ldw	r2,-24(fp)
    4eb4:	10800617 	ldw	r2,24(r2)
    4eb8:	188d883a 	add	r6,r3,r2
    4ebc:	d8000015 	stw	zero,0(sp)
    4ec0:	e13ffa17 	ldw	r4,-24(fp)
    4ec4:	000b883a 	mov	r5,zero
    4ec8:	000f883a 	mov	r7,zero
    4ecc:	00049ac0 	call	49ac <xTimerGenericCommand>
    4ed0:	e0bff915 	stw	r2,-28(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    4ed4:	00000e06 	br	4f10 <prvProcessReceivedCommands+0x15c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4ed8:	e0fffc17 	ldw	r3,-16(fp)
    4edc:	e0bffa17 	ldw	r2,-24(fp)
    4ee0:	10c00615 	stw	r3,24(r2)
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4ee4:	e0bffa17 	ldw	r2,-24(fp)
    4ee8:	10c00617 	ldw	r3,24(r2)
    4eec:	e0bff817 	ldw	r2,-32(fp)
    4ef0:	188b883a 	add	r5,r3,r2
    4ef4:	e13ffa17 	ldw	r4,-24(fp)
    4ef8:	e1bff817 	ldw	r6,-32(fp)
    4efc:	e1fff817 	ldw	r7,-32(fp)
    4f00:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
					break;
    4f04:	00000206 	br	4f10 <prvProcessReceivedCommands+0x15c>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4f08:	e13ffa17 	ldw	r4,-24(fp)
    4f0c:	00011500 	call	1150 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4f10:	d1203517 	ldw	r4,-32556(gp)
    4f14:	e17ffb04 	addi	r5,fp,-20
    4f18:	000d883a 	mov	r6,zero
    4f1c:	000f883a 	mov	r7,zero
    4f20:	00022800 	call	2280 <xQueueGenericReceive>
    4f24:	1004c03a 	cmpne	r2,r2,zero
    4f28:	103fa71e 	bne	r2,zero,4dc8 <prvProcessReceivedCommands+0x14>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    4f2c:	e037883a 	mov	sp,fp
    4f30:	dfc00117 	ldw	ra,4(sp)
    4f34:	df000017 	ldw	fp,0(sp)
    4f38:	dec00204 	addi	sp,sp,8
    4f3c:	f800283a 	ret

00004f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4f40:	defff804 	addi	sp,sp,-32
    4f44:	dfc00715 	stw	ra,28(sp)
    4f48:	df000615 	stw	fp,24(sp)
    4f4c:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4f50:	00002d06 	br	5008 <prvSwitchTimerLists+0xc8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f54:	d0a03717 	ldw	r2,-32548(gp)
    4f58:	10800317 	ldw	r2,12(r2)
    4f5c:	10800017 	ldw	r2,0(r2)
    4f60:	e0bfff15 	stw	r2,-4(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f64:	d0a03717 	ldw	r2,-32548(gp)
    4f68:	10800317 	ldw	r2,12(r2)
    4f6c:	10800317 	ldw	r2,12(r2)
    4f70:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4f74:	e0bffc17 	ldw	r2,-16(fp)
    4f78:	11000104 	addi	r4,r2,4
    4f7c:	00015f80 	call	15f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4f80:	e0bffc17 	ldw	r2,-16(fp)
    4f84:	10800917 	ldw	r2,36(r2)
    4f88:	e13ffc17 	ldw	r4,-16(fp)
    4f8c:	103ee83a 	callr	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	10800717 	ldw	r2,28(r2)
    4f98:	10800058 	cmpnei	r2,r2,1
    4f9c:	10001a1e 	bne	r2,zero,5008 <prvSwitchTimerLists+0xc8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4fa0:	e0bffc17 	ldw	r2,-16(fp)
    4fa4:	10c00617 	ldw	r3,24(r2)
    4fa8:	e0bfff17 	ldw	r2,-4(fp)
    4fac:	1885883a 	add	r2,r3,r2
    4fb0:	e0bffe15 	stw	r2,-8(fp)
			if( xReloadTime > xNextExpireTime )
    4fb4:	e0fffe17 	ldw	r3,-8(fp)
    4fb8:	e0bfff17 	ldw	r2,-4(fp)
    4fbc:	10c00b2e 	bgeu	r2,r3,4fec <prvSwitchTimerLists+0xac>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4fc0:	e0fffc17 	ldw	r3,-16(fp)
    4fc4:	e0bffe17 	ldw	r2,-8(fp)
    4fc8:	18800115 	stw	r2,4(r3)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4fcc:	e0fffc17 	ldw	r3,-16(fp)
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	18800415 	stw	r2,16(r3)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4fd8:	d1203717 	ldw	r4,-32548(gp)
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	11400104 	addi	r5,r2,4
    4fe4:	00015240 	call	1524 <vListInsert>
    4fe8:	00000706 	br	5008 <prvSwitchTimerLists+0xc8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fec:	d8000015 	stw	zero,0(sp)
    4ff0:	e13ffc17 	ldw	r4,-16(fp)
    4ff4:	000b883a 	mov	r5,zero
    4ff8:	e1bfff17 	ldw	r6,-4(fp)
    4ffc:	000f883a 	mov	r7,zero
    5000:	00049ac0 	call	49ac <xTimerGenericCommand>
    5004:	e0bffb15 	stw	r2,-20(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5008:	d0a03717 	ldw	r2,-32548(gp)
    500c:	10800017 	ldw	r2,0(r2)
    5010:	1004c03a 	cmpne	r2,r2,zero
    5014:	103fcf1e 	bne	r2,zero,4f54 <prvSwitchTimerLists+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    5018:	d0a03717 	ldw	r2,-32548(gp)
    501c:	e0bffd15 	stw	r2,-12(fp)
	pxCurrentTimerList = pxOverflowTimerList;
    5020:	d0a03817 	ldw	r2,-32544(gp)
    5024:	d0a03715 	stw	r2,-32548(gp)
	pxOverflowTimerList = pxTemp;
    5028:	e0bffd17 	ldw	r2,-12(fp)
    502c:	d0a03815 	stw	r2,-32544(gp)
}
    5030:	e037883a 	mov	sp,fp
    5034:	dfc00117 	ldw	ra,4(sp)
    5038:	df000017 	ldw	fp,0(sp)
    503c:	dec00204 	addi	sp,sp,8
    5040:	f800283a 	ret

00005044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5044:	defffe04 	addi	sp,sp,-8
    5048:	dfc00115 	stw	ra,4(sp)
    504c:	df000015 	stw	fp,0(sp)
    5050:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5054:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
    5058:	d0a03517 	ldw	r2,-32556(gp)
    505c:	1004c03a 	cmpne	r2,r2,zero
    5060:	1000111e 	bne	r2,zero,50a8 <prvCheckForValidListAndQueue+0x64>
		{
			vListInitialise( &xActiveTimerList1 );
    5064:	01020234 	movhi	r4,2056
    5068:	213e6204 	addi	r4,r4,-1656
    506c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5070:	01020234 	movhi	r4,2056
    5074:	213e6704 	addi	r4,r4,-1636
    5078:	00014040 	call	1404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    507c:	00820234 	movhi	r2,2056
    5080:	10be6204 	addi	r2,r2,-1656
    5084:	d0a03715 	stw	r2,-32548(gp)
			pxOverflowTimerList = &xActiveTimerList2;
    5088:	00820234 	movhi	r2,2056
    508c:	10be6704 	addi	r2,r2,-1636
    5090:	d0a03815 	stw	r2,-32544(gp)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5094:	01000284 	movi	r4,10
    5098:	01400304 	movi	r5,12
    509c:	000d883a 	mov	r6,zero
    50a0:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    50a4:	d0a03515 	stw	r2,-32556(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    50a8:	00041680 	call	4168 <vTaskExitCritical>
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	dfc00117 	ldw	ra,4(sp)
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00204 	addi	sp,sp,8
    50bc:	f800283a 	ret

000050c0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    50c0:	defffb04 	addi	sp,sp,-20
    50c4:	dfc00415 	stw	ra,16(sp)
    50c8:	df000315 	stw	fp,12(sp)
    50cc:	df000304 	addi	fp,sp,12
    50d0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    50d4:	e0bfff17 	ldw	r2,-4(fp)
    50d8:	e0bffd15 	stw	r2,-12(fp)

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    50dc:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    50e0:	e0bffd17 	ldw	r2,-12(fp)
    50e4:	10800517 	ldw	r2,20(r2)
    50e8:	1004c03a 	cmpne	r2,r2,zero
    50ec:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    50f0:	00041680 	call	4168 <vTaskExitCritical>

	return xTimerIsInActiveList;
    50f4:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
    50f8:	e037883a 	mov	sp,fp
    50fc:	dfc00117 	ldw	ra,4(sp)
    5100:	df000017 	ldw	fp,0(sp)
    5104:	dec00204 	addi	sp,sp,8
    5108:	f800283a 	ret

0000510c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    510c:	defffd04 	addi	sp,sp,-12
    5110:	df000215 	stw	fp,8(sp)
    5114:	df000204 	addi	fp,sp,8
    5118:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
    511c:	e0bfff17 	ldw	r2,-4(fp)
    5120:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pvTimerID;
    5124:	e0bffe17 	ldw	r2,-8(fp)
    5128:	10800817 	ldw	r2,32(r2)
}
    512c:	e037883a 	mov	sp,fp
    5130:	df000017 	ldw	fp,0(sp)
    5134:	dec00104 	addi	sp,sp,4
    5138:	f800283a 	ret

0000513c <PRVGADraw_Task>:
}Line;


/****** VGA display ******/

void PRVGADraw_Task(void *pvParameters ){
    513c:	defe5b04 	addi	sp,sp,-1684
    5140:	dfc1a415 	stw	ra,1680(sp)
    5144:	df01a315 	stw	fp,1676(sp)
    5148:	dc81a215 	stw	r18,1672(sp)
    514c:	dc41a115 	stw	r17,1668(sp)
    5150:	dc01a015 	stw	r16,1664(sp)
    5154:	df01a004 	addi	fp,sp,1664
    5158:	e13fff15 	stw	r4,-4(fp)


	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
    515c:	01020034 	movhi	r4,2048
    5160:	21001604 	addi	r4,r4,88
    5164:	00154cc0 	call	154cc <alt_up_pixel_buffer_dma_open_dev>
    5168:	e0be6615 	stw	r2,-1640(fp)
	if(pixel_buf == NULL){
    516c:	e0be6617 	ldw	r2,-1640(fp)
    5170:	1004c03a 	cmpne	r2,r2,zero
    5174:	1000031e 	bne	r2,zero,5184 <PRVGADraw_Task+0x48>
		printf("can't find pixel buffer device\n");
    5178:	01020034 	movhi	r4,2048
    517c:	21001d04 	addi	r4,r4,116
    5180:	00075980 	call	7598 <puts>
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);
    5184:	e13e6617 	ldw	r4,-1640(fp)
    5188:	000b883a 	mov	r5,zero
    518c:	00157900 	call	15790 <alt_up_pixel_buffer_dma_clear_screen>

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
    5190:	01020034 	movhi	r4,2048
    5194:	21002504 	addi	r4,r4,148
    5198:	001524c0 	call	1524c <alt_up_char_buffer_open_dev>
    519c:	e0be6515 	stw	r2,-1644(fp)
	if(char_buf == NULL){
    51a0:	e0be6517 	ldw	r2,-1644(fp)
    51a4:	1004c03a 	cmpne	r2,r2,zero
    51a8:	1000031e 	bne	r2,zero,51b8 <PRVGADraw_Task+0x7c>
		printf("can't find char buffer device\n");
    51ac:	01020034 	movhi	r4,2048
    51b0:	21002f04 	addi	r4,r4,188
    51b4:	00075980 	call	7598 <puts>
	}
	alt_up_char_buffer_clear(char_buf);
    51b8:	e13e6517 	ldw	r4,-1644(fp)
    51bc:	00154700 	call	15470 <alt_up_char_buffer_clear>



	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51c0:	00900034 	movhi	r2,16384
    51c4:	10bfffc4 	addi	r2,r2,-1
    51c8:	d8800015 	stw	r2,0(sp)
    51cc:	d8000115 	stw	zero,4(sp)
    51d0:	e13e6617 	ldw	r4,-1640(fp)
    51d4:	01401904 	movi	r5,100
    51d8:	01809384 	movi	r6,590
    51dc:	01c03204 	movi	r7,200
    51e0:	0015de80 	call	15de8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51e4:	00900034 	movhi	r2,16384
    51e8:	10bfffc4 	addi	r2,r2,-1
    51ec:	d8800015 	stw	r2,0(sp)
    51f0:	d8000115 	stw	zero,4(sp)
    51f4:	e13e6617 	ldw	r4,-1640(fp)
    51f8:	01401904 	movi	r5,100
    51fc:	01809384 	movi	r6,590
    5200:	01c04b04 	movi	r7,300
    5204:	0015de80 	call	15de8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5208:	00900034 	movhi	r2,16384
    520c:	10bfffc4 	addi	r2,r2,-1
    5210:	d8800015 	stw	r2,0(sp)
    5214:	d8000115 	stw	zero,4(sp)
    5218:	e13e6617 	ldw	r4,-1640(fp)
    521c:	01401904 	movi	r5,100
    5220:	01800c84 	movi	r6,50
    5224:	01c03204 	movi	r7,200
    5228:	00161380 	call	16138 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    522c:	00900034 	movhi	r2,16384
    5230:	10bfffc4 	addi	r2,r2,-1
    5234:	d8800015 	stw	r2,0(sp)
    5238:	d8000115 	stw	zero,4(sp)
    523c:	e13e6617 	ldw	r4,-1640(fp)
    5240:	01401904 	movi	r5,100
    5244:	01803704 	movi	r6,220
    5248:	01c04b04 	movi	r7,300
    524c:	00161380 	call	16138 <alt_up_pixel_buffer_dma_draw_vline>

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
    5250:	e13e6517 	ldw	r4,-1644(fp)
    5254:	01420034 	movhi	r5,2048
    5258:	29403704 	addi	r5,r5,220
    525c:	01800104 	movi	r6,4
    5260:	01c00104 	movi	r7,4
    5264:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
    5268:	e13e6517 	ldw	r4,-1644(fp)
    526c:	01420034 	movhi	r5,2048
    5270:	29403b04 	addi	r5,r5,236
    5274:	01800284 	movi	r6,10
    5278:	01c001c4 	movi	r7,7
    527c:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
    5280:	e13e6517 	ldw	r4,-1644(fp)
    5284:	01420034 	movhi	r5,2048
    5288:	29403c04 	addi	r5,r5,240
    528c:	01800284 	movi	r6,10
    5290:	01c00304 	movi	r7,12
    5294:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
    5298:	e13e6517 	ldw	r4,-1644(fp)
    529c:	01420034 	movhi	r5,2048
    52a0:	29403d04 	addi	r5,r5,244
    52a4:	01800284 	movi	r6,10
    52a8:	01c00444 	movi	r7,17
    52ac:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "46", 10, 22);
    52b0:	e13e6517 	ldw	r4,-1644(fp)
    52b4:	01420034 	movhi	r5,2048
    52b8:	29403e04 	addi	r5,r5,248
    52bc:	01800284 	movi	r6,10
    52c0:	01c00584 	movi	r7,22
    52c4:	001535c0 	call	1535c <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
    52c8:	e13e6517 	ldw	r4,-1644(fp)
    52cc:	01420034 	movhi	r5,2048
    52d0:	29403f04 	addi	r5,r5,252
    52d4:	01800104 	movi	r6,4
    52d8:	01c00684 	movi	r7,26
    52dc:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
    52e0:	e13e6517 	ldw	r4,-1644(fp)
    52e4:	01420034 	movhi	r5,2048
    52e8:	29404204 	addi	r5,r5,264
    52ec:	01800284 	movi	r6,10
    52f0:	01c00704 	movi	r7,28
    52f4:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
    52f8:	e13e6517 	ldw	r4,-1644(fp)
    52fc:	01420034 	movhi	r5,2048
    5300:	29404304 	addi	r5,r5,268
    5304:	01800284 	movi	r6,10
    5308:	01c00784 	movi	r7,30
    530c:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
    5310:	e13e6517 	ldw	r4,-1644(fp)
    5314:	01420034 	movhi	r5,2048
    5318:	29404404 	addi	r5,r5,272
    531c:	01800284 	movi	r6,10
    5320:	01c00804 	movi	r7,32
    5324:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
    5328:	e13e6517 	ldw	r4,-1644(fp)
    532c:	01420034 	movhi	r5,2048
    5330:	29404504 	addi	r5,r5,276
    5334:	01800244 	movi	r6,9
    5338:	01c00884 	movi	r7,34
    533c:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);
    5340:	e13e6517 	ldw	r4,-1644(fp)
    5344:	01420034 	movhi	r5,2048
    5348:	29404604 	addi	r5,r5,280
    534c:	01800244 	movi	r6,9
    5350:	01c00904 	movi	r7,36
    5354:	001535c0 	call	1535c <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "Frequency threshold:", 4, 46);
    5358:	e13e6517 	ldw	r4,-1644(fp)
    535c:	01420034 	movhi	r5,2048
    5360:	29404704 	addi	r5,r5,284
    5364:	01800104 	movi	r6,4
    5368:	01c00b84 	movi	r7,46
    536c:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, freqStr, 30, 46);
    5370:	e13e6517 	ldw	r4,-1644(fp)
    5374:	01420034 	movhi	r5,2048
    5378:	29423f04 	addi	r5,r5,2300
    537c:	01800784 	movi	r6,30
    5380:	01c00b84 	movi	r7,46
    5384:	001535c0 	call	1535c <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "RoC threshold:", 4, 50);
    5388:	e13e6517 	ldw	r4,-1644(fp)
    538c:	01420034 	movhi	r5,2048
    5390:	29404d04 	addi	r5,r5,308
    5394:	01800104 	movi	r6,4
    5398:	01c00c84 	movi	r7,50
    539c:	001535c0 	call	1535c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, ROCStr, 30, 50);
    53a0:	e13e6517 	ldw	r4,-1644(fp)
    53a4:	01420034 	movhi	r5,2048
    53a8:	29424204 	addi	r5,r5,2312
    53ac:	01800784 	movi	r6,30
    53b0:	01c00c84 	movi	r7,50
    53b4:	001535c0 	call	1535c <alt_up_char_buffer_string>

	double freq[100], dfreq[100];
	int i = 99, j = 0;
    53b8:	008018c4 	movi	r2,99
    53bc:	e0be6415 	stw	r2,-1648(fp)
    53c0:	e03e6315 	stw	zero,-1652(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    53c4:	0000da06 	br	5730 <PRVGADraw_Task+0x5f4>
			xQueueReceive( Q_freq_data, freq+i, 0 );
    53c8:	d1203a17 	ldw	r4,-32536(gp)
    53cc:	e0be6417 	ldw	r2,-1648(fp)
    53d0:	100490fa 	slli	r2,r2,3
    53d4:	e17e6704 	addi	r5,fp,-1636
    53d8:	288b883a 	add	r5,r5,r2
    53dc:	000d883a 	mov	r6,zero
    53e0:	000f883a 	mov	r7,zero
    53e4:	00022800 	call	2280 <xQueueGenericReceive>

			//calculate frequency RoC

			if(i==0){
    53e8:	e0be6417 	ldw	r2,-1648(fp)
    53ec:	1004c03a 	cmpne	r2,r2,zero
    53f0:	1000451e 	bne	r2,zero,5508 <PRVGADraw_Task+0x3cc>
				dfreq[0] = (freq[0]-freq[99]) * 2.0 * freq[0] * freq[99] / (freq[0]+freq[99]);
    53f4:	e17e6717 	ldw	r5,-1636(fp)
    53f8:	e1be6817 	ldw	r6,-1632(fp)
    53fc:	e0bf2d17 	ldw	r2,-844(fp)
    5400:	e0ff2e17 	ldw	r3,-840(fp)
    5404:	2809883a 	mov	r4,r5
    5408:	300b883a 	mov	r5,r6
    540c:	100d883a 	mov	r6,r2
    5410:	180f883a 	mov	r7,r3
    5414:	000631c0 	call	631c <__subdf3>
    5418:	1009883a 	mov	r4,r2
    541c:	180b883a 	mov	r5,r3
    5420:	2005883a 	mov	r2,r4
    5424:	2807883a 	mov	r3,r5
    5428:	1009883a 	mov	r4,r2
    542c:	180b883a 	mov	r5,r3
    5430:	100d883a 	mov	r6,r2
    5434:	180f883a 	mov	r7,r3
    5438:	000639c0 	call	639c <__adddf3>
    543c:	1009883a 	mov	r4,r2
    5440:	180b883a 	mov	r5,r3
    5444:	200d883a 	mov	r6,r4
    5448:	280f883a 	mov	r7,r5
    544c:	e0be6717 	ldw	r2,-1636(fp)
    5450:	e0fe6817 	ldw	r3,-1632(fp)
    5454:	3009883a 	mov	r4,r6
    5458:	380b883a 	mov	r5,r7
    545c:	100d883a 	mov	r6,r2
    5460:	180f883a 	mov	r7,r3
    5464:	00064100 	call	6410 <__muldf3>
    5468:	1009883a 	mov	r4,r2
    546c:	180b883a 	mov	r5,r3
    5470:	200d883a 	mov	r6,r4
    5474:	280f883a 	mov	r7,r5
    5478:	e0bf2d17 	ldw	r2,-844(fp)
    547c:	e0ff2e17 	ldw	r3,-840(fp)
    5480:	3009883a 	mov	r4,r6
    5484:	380b883a 	mov	r5,r7
    5488:	100d883a 	mov	r6,r2
    548c:	180f883a 	mov	r7,r3
    5490:	00064100 	call	6410 <__muldf3>
    5494:	1009883a 	mov	r4,r2
    5498:	180b883a 	mov	r5,r3
    549c:	2021883a 	mov	r16,r4
    54a0:	2823883a 	mov	r17,r5
    54a4:	e17e6717 	ldw	r5,-1636(fp)
    54a8:	e1be6817 	ldw	r6,-1632(fp)
    54ac:	e0bf2d17 	ldw	r2,-844(fp)
    54b0:	e0ff2e17 	ldw	r3,-840(fp)
    54b4:	2809883a 	mov	r4,r5
    54b8:	300b883a 	mov	r5,r6
    54bc:	100d883a 	mov	r6,r2
    54c0:	180f883a 	mov	r7,r3
    54c4:	000639c0 	call	639c <__adddf3>
    54c8:	1009883a 	mov	r4,r2
    54cc:	180b883a 	mov	r5,r3
    54d0:	2005883a 	mov	r2,r4
    54d4:	2807883a 	mov	r3,r5
    54d8:	8009883a 	mov	r4,r16
    54dc:	880b883a 	mov	r5,r17
    54e0:	100d883a 	mov	r6,r2
    54e4:	180f883a 	mov	r7,r3
    54e8:	00067d40 	call	67d4 <__divdf3>
    54ec:	1009883a 	mov	r4,r2
    54f0:	180b883a 	mov	r5,r3
    54f4:	2005883a 	mov	r2,r4
    54f8:	2807883a 	mov	r3,r5
    54fc:	e0bf2f15 	stw	r2,-836(fp)
    5500:	e0ff3015 	stw	r3,-832(fp)
    5504:	00006a06 	br	56b0 <PRVGADraw_Task+0x574>
			}
			else{
				dfreq[i] = (freq[i]-freq[i-1]) * 2.0 * freq[i]* freq[i-1] / (freq[i]+freq[i-1]);
    5508:	e4be6417 	ldw	r18,-1648(fp)
    550c:	e0be6417 	ldw	r2,-1648(fp)
    5510:	100490fa 	slli	r2,r2,3
    5514:	e0fe6304 	addi	r3,fp,-1652
    5518:	10c5883a 	add	r2,r2,r3
    551c:	10800404 	addi	r2,r2,16
    5520:	11400017 	ldw	r5,0(r2)
    5524:	11800117 	ldw	r6,4(r2)
    5528:	e0be6417 	ldw	r2,-1648(fp)
    552c:	10bfffc4 	addi	r2,r2,-1
    5530:	100490fa 	slli	r2,r2,3
    5534:	e0fe6304 	addi	r3,fp,-1652
    5538:	10c5883a 	add	r2,r2,r3
    553c:	11000404 	addi	r4,r2,16
    5540:	20800017 	ldw	r2,0(r4)
    5544:	20c00117 	ldw	r3,4(r4)
    5548:	2809883a 	mov	r4,r5
    554c:	300b883a 	mov	r5,r6
    5550:	100d883a 	mov	r6,r2
    5554:	180f883a 	mov	r7,r3
    5558:	000631c0 	call	631c <__subdf3>
    555c:	1009883a 	mov	r4,r2
    5560:	180b883a 	mov	r5,r3
    5564:	2005883a 	mov	r2,r4
    5568:	2807883a 	mov	r3,r5
    556c:	1009883a 	mov	r4,r2
    5570:	180b883a 	mov	r5,r3
    5574:	100d883a 	mov	r6,r2
    5578:	180f883a 	mov	r7,r3
    557c:	000639c0 	call	639c <__adddf3>
    5580:	1009883a 	mov	r4,r2
    5584:	180b883a 	mov	r5,r3
    5588:	200d883a 	mov	r6,r4
    558c:	280f883a 	mov	r7,r5
    5590:	e0be6417 	ldw	r2,-1648(fp)
    5594:	100490fa 	slli	r2,r2,3
    5598:	e17e6304 	addi	r5,fp,-1652
    559c:	1145883a 	add	r2,r2,r5
    55a0:	11000404 	addi	r4,r2,16
    55a4:	20800017 	ldw	r2,0(r4)
    55a8:	20c00117 	ldw	r3,4(r4)
    55ac:	3009883a 	mov	r4,r6
    55b0:	380b883a 	mov	r5,r7
    55b4:	100d883a 	mov	r6,r2
    55b8:	180f883a 	mov	r7,r3
    55bc:	00064100 	call	6410 <__muldf3>
    55c0:	1009883a 	mov	r4,r2
    55c4:	180b883a 	mov	r5,r3
    55c8:	200d883a 	mov	r6,r4
    55cc:	280f883a 	mov	r7,r5
    55d0:	e0be6417 	ldw	r2,-1648(fp)
    55d4:	10bfffc4 	addi	r2,r2,-1
    55d8:	100490fa 	slli	r2,r2,3
    55dc:	e0fe6304 	addi	r3,fp,-1652
    55e0:	10c5883a 	add	r2,r2,r3
    55e4:	11000404 	addi	r4,r2,16
    55e8:	20800017 	ldw	r2,0(r4)
    55ec:	20c00117 	ldw	r3,4(r4)
    55f0:	3009883a 	mov	r4,r6
    55f4:	380b883a 	mov	r5,r7
    55f8:	100d883a 	mov	r6,r2
    55fc:	180f883a 	mov	r7,r3
    5600:	00064100 	call	6410 <__muldf3>
    5604:	1009883a 	mov	r4,r2
    5608:	180b883a 	mov	r5,r3
    560c:	2021883a 	mov	r16,r4
    5610:	2823883a 	mov	r17,r5
    5614:	e0be6417 	ldw	r2,-1648(fp)
    5618:	100490fa 	slli	r2,r2,3
    561c:	e17e6304 	addi	r5,fp,-1652
    5620:	1145883a 	add	r2,r2,r5
    5624:	10800404 	addi	r2,r2,16
    5628:	11400017 	ldw	r5,0(r2)
    562c:	11800117 	ldw	r6,4(r2)
    5630:	e0be6417 	ldw	r2,-1648(fp)
    5634:	10bfffc4 	addi	r2,r2,-1
    5638:	100490fa 	slli	r2,r2,3
    563c:	e0fe6304 	addi	r3,fp,-1652
    5640:	10c5883a 	add	r2,r2,r3
    5644:	11000404 	addi	r4,r2,16
    5648:	20800017 	ldw	r2,0(r4)
    564c:	20c00117 	ldw	r3,4(r4)
    5650:	2809883a 	mov	r4,r5
    5654:	300b883a 	mov	r5,r6
    5658:	100d883a 	mov	r6,r2
    565c:	180f883a 	mov	r7,r3
    5660:	000639c0 	call	639c <__adddf3>
    5664:	1009883a 	mov	r4,r2
    5668:	180b883a 	mov	r5,r3
    566c:	2005883a 	mov	r2,r4
    5670:	2807883a 	mov	r3,r5
    5674:	8009883a 	mov	r4,r16
    5678:	880b883a 	mov	r5,r17
    567c:	100d883a 	mov	r6,r2
    5680:	180f883a 	mov	r7,r3
    5684:	00067d40 	call	67d4 <__divdf3>
    5688:	1009883a 	mov	r4,r2
    568c:	180b883a 	mov	r5,r3
    5690:	2005883a 	mov	r2,r4
    5694:	2807883a 	mov	r3,r5
    5698:	900890fa 	slli	r4,r18,3
    569c:	e17e6304 	addi	r5,fp,-1652
    56a0:	2149883a 	add	r4,r4,r5
    56a4:	2100cc04 	addi	r4,r4,816
    56a8:	20800015 	stw	r2,0(r4)
    56ac:	20c00115 	stw	r3,4(r4)
			}

			if (dfreq[i] > 100.0){
    56b0:	e0be6417 	ldw	r2,-1648(fp)
    56b4:	100490fa 	slli	r2,r2,3
    56b8:	e0fe6304 	addi	r3,fp,-1652
    56bc:	10c5883a 	add	r2,r2,r3
    56c0:	1100cc04 	addi	r4,r2,816
    56c4:	20800017 	ldw	r2,0(r4)
    56c8:	20c00117 	ldw	r3,4(r4)
    56cc:	1009883a 	mov	r4,r2
    56d0:	180b883a 	mov	r5,r3
    56d4:	000d883a 	mov	r6,zero
    56d8:	01d01674 	movhi	r7,16473
    56dc:	0006a2c0 	call	6a2c <__gtdf2>
    56e0:	10800048 	cmpgei	r2,r2,1
    56e4:	1000011e 	bne	r2,zero,56ec <PRVGADraw_Task+0x5b0>
    56e8:	00000806 	br	570c <PRVGADraw_Task+0x5d0>
				dfreq[i] = 100.0;
    56ec:	e0be6417 	ldw	r2,-1648(fp)
    56f0:	100490fa 	slli	r2,r2,3
    56f4:	e17e6304 	addi	r5,fp,-1652
    56f8:	1145883a 	add	r2,r2,r5
    56fc:	10c0cc04 	addi	r3,r2,816
    5700:	18000015 	stw	zero,0(r3)
    5704:	00901674 	movhi	r2,16473
    5708:	18800115 	stw	r2,4(r3)
			}


			i =	++i%100; //point to the next data (oldest) to be overwritten
    570c:	e0be6417 	ldw	r2,-1648(fp)
    5710:	10800044 	addi	r2,r2,1
    5714:	e0be6415 	stw	r2,-1648(fp)
    5718:	e0fe6417 	ldw	r3,-1648(fp)
    571c:	00801904 	movi	r2,100
    5720:	1885283a 	div	r2,r3,r2
    5724:	10801924 	muli	r2,r2,100
    5728:	1885c83a 	sub	r2,r3,r2
    572c:	e0be6415 	stw	r2,-1648(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    5730:	d1203a17 	ldw	r4,-32536(gp)
    5734:	00026100 	call	2610 <uxQueueMessagesWaiting>
    5738:	1004c03a 	cmpne	r2,r2,zero
    573c:	103f221e 	bne	r2,zero,53c8 <PRVGADraw_Task+0x28c>
			i =	++i%100; //point to the next data (oldest) to be overwritten

		}

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
    5740:	008031c4 	movi	r2,199
    5744:	d8800015 	stw	r2,0(sp)
    5748:	d8000115 	stw	zero,4(sp)
    574c:	d8000215 	stw	zero,8(sp)
    5750:	e13e6617 	ldw	r4,-1640(fp)
    5754:	01401944 	movi	r5,101
    5758:	000d883a 	mov	r6,zero
    575c:	01c09fc4 	movi	r7,639
    5760:	00158f40 	call	158f4 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);
    5764:	00804ac4 	movi	r2,299
    5768:	d8800015 	stw	r2,0(sp)
    576c:	d8000115 	stw	zero,4(sp)
    5770:	d8000215 	stw	zero,8(sp)
    5774:	e13e6617 	ldw	r4,-1640(fp)
    5778:	01401944 	movi	r5,101
    577c:	01803244 	movi	r6,201
    5780:	01c09fc4 	movi	r7,639
    5784:	00158f40 	call	158f4 <alt_up_pixel_buffer_dma_draw_box>

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5788:	e03e6315 	stw	zero,-1652(fp)
    578c:	00010e06 	br	5bc8 <PRVGADraw_Task+0xa8c>
			if (((int)(freq[(i+j)%100]) > MIN_FREQ) && ((int)(freq[(i+j+1)%100]) > MIN_FREQ)){
    5790:	e0fe6417 	ldw	r3,-1648(fp)
    5794:	e0be6317 	ldw	r2,-1652(fp)
    5798:	1887883a 	add	r3,r3,r2
    579c:	00801904 	movi	r2,100
    57a0:	1885283a 	div	r2,r3,r2
    57a4:	10801924 	muli	r2,r2,100
    57a8:	1885c83a 	sub	r2,r3,r2
    57ac:	100490fa 	slli	r2,r2,3
    57b0:	e0fe6304 	addi	r3,fp,-1652
    57b4:	10c5883a 	add	r2,r2,r3
    57b8:	11000404 	addi	r4,r2,16
    57bc:	20800017 	ldw	r2,0(r4)
    57c0:	20c00117 	ldw	r3,4(r4)
    57c4:	1009883a 	mov	r4,r2
    57c8:	180b883a 	mov	r5,r3
    57cc:	0006bac0 	call	6bac <__fixdfsi>
    57d0:	1009883a 	mov	r4,r2
    57d4:	0006ab40 	call	6ab4 <__floatsidf>
    57d8:	100b883a 	mov	r5,r2
    57dc:	180d883a 	mov	r6,r3
    57e0:	2809883a 	mov	r4,r5
    57e4:	300b883a 	mov	r5,r6
    57e8:	000d883a 	mov	r6,zero
    57ec:	01d011f4 	movhi	r7,16455
    57f0:	39e00004 	addi	r7,r7,-32768
    57f4:	0006a2c0 	call	6a2c <__gtdf2>
    57f8:	10800048 	cmpgei	r2,r2,1
    57fc:	1000011e 	bne	r2,zero,5804 <PRVGADraw_Task+0x6c8>
    5800:	0000ee06 	br	5bbc <PRVGADraw_Task+0xa80>
    5804:	e0fe6417 	ldw	r3,-1648(fp)
    5808:	e0be6317 	ldw	r2,-1652(fp)
    580c:	1885883a 	add	r2,r3,r2
    5810:	10c00044 	addi	r3,r2,1
    5814:	00801904 	movi	r2,100
    5818:	1885283a 	div	r2,r3,r2
    581c:	10801924 	muli	r2,r2,100
    5820:	1885c83a 	sub	r2,r3,r2
    5824:	100490fa 	slli	r2,r2,3
    5828:	e17e6304 	addi	r5,fp,-1652
    582c:	1145883a 	add	r2,r2,r5
    5830:	11000404 	addi	r4,r2,16
    5834:	20800017 	ldw	r2,0(r4)
    5838:	20c00117 	ldw	r3,4(r4)
    583c:	1009883a 	mov	r4,r2
    5840:	180b883a 	mov	r5,r3
    5844:	0006bac0 	call	6bac <__fixdfsi>
    5848:	1009883a 	mov	r4,r2
    584c:	0006ab40 	call	6ab4 <__floatsidf>
    5850:	100b883a 	mov	r5,r2
    5854:	180d883a 	mov	r6,r3
    5858:	2809883a 	mov	r4,r5
    585c:	300b883a 	mov	r5,r6
    5860:	000d883a 	mov	r6,zero
    5864:	01d011f4 	movhi	r7,16455
    5868:	39e00004 	addi	r7,r7,-32768
    586c:	0006a2c0 	call	6a2c <__gtdf2>
    5870:	10800048 	cmpgei	r2,r2,1
    5874:	1000011e 	bne	r2,zero,587c <PRVGADraw_Task+0x740>
    5878:	0000d006 	br	5bbc <PRVGADraw_Task+0xa80>
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
    587c:	e0be6317 	ldw	r2,-1652(fp)
    5880:	10800164 	muli	r2,r2,5
    5884:	10801944 	addi	r2,r2,101
    5888:	e0bff715 	stw	r2,-36(fp)
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j)%100] - MIN_FREQ));
    588c:	e0fe6417 	ldw	r3,-1648(fp)
    5890:	e0be6317 	ldw	r2,-1652(fp)
    5894:	1887883a 	add	r3,r3,r2
    5898:	00801904 	movi	r2,100
    589c:	1885283a 	div	r2,r3,r2
    58a0:	10801924 	muli	r2,r2,100
    58a4:	1885c83a 	sub	r2,r3,r2
    58a8:	100490fa 	slli	r2,r2,3
    58ac:	e0fe6304 	addi	r3,fp,-1652
    58b0:	10c5883a 	add	r2,r2,r3
    58b4:	11000404 	addi	r4,r2,16
    58b8:	20800017 	ldw	r2,0(r4)
    58bc:	20c00117 	ldw	r3,4(r4)
    58c0:	1009883a 	mov	r4,r2
    58c4:	180b883a 	mov	r5,r3
    58c8:	000d883a 	mov	r6,zero
    58cc:	01d011f4 	movhi	r7,16455
    58d0:	39e00004 	addi	r7,r7,-32768
    58d4:	000631c0 	call	631c <__subdf3>
    58d8:	1009883a 	mov	r4,r2
    58dc:	180b883a 	mov	r5,r3
    58e0:	2005883a 	mov	r2,r4
    58e4:	2807883a 	mov	r3,r5
    58e8:	1009883a 	mov	r4,r2
    58ec:	180b883a 	mov	r5,r3
    58f0:	000d883a 	mov	r6,zero
    58f4:	01f00d34 	movhi	r7,49204
    58f8:	00064100 	call	6410 <__muldf3>
    58fc:	1009883a 	mov	r4,r2
    5900:	180b883a 	mov	r5,r3
    5904:	2005883a 	mov	r2,r4
    5908:	2807883a 	mov	r3,r5
    590c:	1009883a 	mov	r4,r2
    5910:	180b883a 	mov	r5,r3
    5914:	000d883a 	mov	r6,zero
    5918:	01d01a74 	movhi	r7,16489
    591c:	39f80004 	addi	r7,r7,-8192
    5920:	000639c0 	call	639c <__adddf3>
    5924:	1009883a 	mov	r4,r2
    5928:	180b883a 	mov	r5,r3
    592c:	2005883a 	mov	r2,r4
    5930:	2807883a 	mov	r3,r5
    5934:	1009883a 	mov	r4,r2
    5938:	180b883a 	mov	r5,r3
    593c:	0006bac0 	call	6bac <__fixdfsi>
    5940:	e0bff815 	stw	r2,-32(fp)

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
    5944:	e0be6317 	ldw	r2,-1652(fp)
    5948:	10800164 	muli	r2,r2,5
    594c:	10801a84 	addi	r2,r2,106
    5950:	e0bff915 	stw	r2,-28(fp)
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j+1)%100] - MIN_FREQ));
    5954:	e0fe6417 	ldw	r3,-1648(fp)
    5958:	e0be6317 	ldw	r2,-1652(fp)
    595c:	1885883a 	add	r2,r3,r2
    5960:	10c00044 	addi	r3,r2,1
    5964:	00801904 	movi	r2,100
    5968:	1885283a 	div	r2,r3,r2
    596c:	10801924 	muli	r2,r2,100
    5970:	1885c83a 	sub	r2,r3,r2
    5974:	100490fa 	slli	r2,r2,3
    5978:	e17e6304 	addi	r5,fp,-1652
    597c:	1145883a 	add	r2,r2,r5
    5980:	11000404 	addi	r4,r2,16
    5984:	20800017 	ldw	r2,0(r4)
    5988:	20c00117 	ldw	r3,4(r4)
    598c:	1009883a 	mov	r4,r2
    5990:	180b883a 	mov	r5,r3
    5994:	000d883a 	mov	r6,zero
    5998:	01d011f4 	movhi	r7,16455
    599c:	39e00004 	addi	r7,r7,-32768
    59a0:	000631c0 	call	631c <__subdf3>
    59a4:	1009883a 	mov	r4,r2
    59a8:	180b883a 	mov	r5,r3
    59ac:	2005883a 	mov	r2,r4
    59b0:	2807883a 	mov	r3,r5
    59b4:	1009883a 	mov	r4,r2
    59b8:	180b883a 	mov	r5,r3
    59bc:	000d883a 	mov	r6,zero
    59c0:	01f00d34 	movhi	r7,49204
    59c4:	00064100 	call	6410 <__muldf3>
    59c8:	1009883a 	mov	r4,r2
    59cc:	180b883a 	mov	r5,r3
    59d0:	2005883a 	mov	r2,r4
    59d4:	2807883a 	mov	r3,r5
    59d8:	1009883a 	mov	r4,r2
    59dc:	180b883a 	mov	r5,r3
    59e0:	000d883a 	mov	r6,zero
    59e4:	01d01a74 	movhi	r7,16489
    59e8:	39f80004 	addi	r7,r7,-8192
    59ec:	000639c0 	call	639c <__adddf3>
    59f0:	1009883a 	mov	r4,r2
    59f4:	180b883a 	mov	r5,r3
    59f8:	2005883a 	mov	r2,r4
    59fc:	2807883a 	mov	r3,r5
    5a00:	1009883a 	mov	r4,r2
    5a04:	180b883a 	mov	r5,r3
    5a08:	0006bac0 	call	6bac <__fixdfsi>
    5a0c:	e0bffa15 	stw	r2,-24(fp)

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
    5a10:	e0be6317 	ldw	r2,-1652(fp)
    5a14:	10800164 	muli	r2,r2,5
    5a18:	10801944 	addi	r2,r2,101
    5a1c:	e0bffb15 	stw	r2,-20(fp)
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j)%100]);
    5a20:	e0fe6417 	ldw	r3,-1648(fp)
    5a24:	e0be6317 	ldw	r2,-1652(fp)
    5a28:	1887883a 	add	r3,r3,r2
    5a2c:	00801904 	movi	r2,100
    5a30:	1885283a 	div	r2,r3,r2
    5a34:	10801924 	muli	r2,r2,100
    5a38:	1885c83a 	sub	r2,r3,r2
    5a3c:	100490fa 	slli	r2,r2,3
    5a40:	e0fe6304 	addi	r3,fp,-1652
    5a44:	10c5883a 	add	r2,r2,r3
    5a48:	1100cc04 	addi	r4,r2,816
    5a4c:	20800017 	ldw	r2,0(r4)
    5a50:	20c00117 	ldw	r3,4(r4)
    5a54:	1009883a 	mov	r4,r2
    5a58:	180b883a 	mov	r5,r3
    5a5c:	000d883a 	mov	r6,zero
    5a60:	01eff834 	movhi	r7,49120
    5a64:	00064100 	call	6410 <__muldf3>
    5a68:	1009883a 	mov	r4,r2
    5a6c:	180b883a 	mov	r5,r3
    5a70:	2005883a 	mov	r2,r4
    5a74:	2807883a 	mov	r3,r5
    5a78:	1009883a 	mov	r4,r2
    5a7c:	180b883a 	mov	r5,r3
    5a80:	000d883a 	mov	r6,zero
    5a84:	01d01c34 	movhi	r7,16496
    5a88:	39cc0004 	addi	r7,r7,12288
    5a8c:	000639c0 	call	639c <__adddf3>
    5a90:	1009883a 	mov	r4,r2
    5a94:	180b883a 	mov	r5,r3
    5a98:	2005883a 	mov	r2,r4
    5a9c:	2807883a 	mov	r3,r5
    5aa0:	1009883a 	mov	r4,r2
    5aa4:	180b883a 	mov	r5,r3
    5aa8:	0006bac0 	call	6bac <__fixdfsi>
    5aac:	e0bffc15 	stw	r2,-16(fp)

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
    5ab0:	e0be6317 	ldw	r2,-1652(fp)
    5ab4:	10800164 	muli	r2,r2,5
    5ab8:	10801a84 	addi	r2,r2,106
    5abc:	e0bffd15 	stw	r2,-12(fp)
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j+1)%100]);
    5ac0:	e0fe6417 	ldw	r3,-1648(fp)
    5ac4:	e0be6317 	ldw	r2,-1652(fp)
    5ac8:	1885883a 	add	r2,r3,r2
    5acc:	10c00044 	addi	r3,r2,1
    5ad0:	00801904 	movi	r2,100
    5ad4:	1885283a 	div	r2,r3,r2
    5ad8:	10801924 	muli	r2,r2,100
    5adc:	1885c83a 	sub	r2,r3,r2
    5ae0:	100490fa 	slli	r2,r2,3
    5ae4:	e17e6304 	addi	r5,fp,-1652
    5ae8:	1145883a 	add	r2,r2,r5
    5aec:	1100cc04 	addi	r4,r2,816
    5af0:	20800017 	ldw	r2,0(r4)
    5af4:	20c00117 	ldw	r3,4(r4)
    5af8:	1009883a 	mov	r4,r2
    5afc:	180b883a 	mov	r5,r3
    5b00:	000d883a 	mov	r6,zero
    5b04:	01eff834 	movhi	r7,49120
    5b08:	00064100 	call	6410 <__muldf3>
    5b0c:	1009883a 	mov	r4,r2
    5b10:	180b883a 	mov	r5,r3
    5b14:	2005883a 	mov	r2,r4
    5b18:	2807883a 	mov	r3,r5
    5b1c:	1009883a 	mov	r4,r2
    5b20:	180b883a 	mov	r5,r3
    5b24:	000d883a 	mov	r6,zero
    5b28:	01d01c34 	movhi	r7,16496
    5b2c:	39cc0004 	addi	r7,r7,12288
    5b30:	000639c0 	call	639c <__adddf3>
    5b34:	1009883a 	mov	r4,r2
    5b38:	180b883a 	mov	r5,r3
    5b3c:	2005883a 	mov	r2,r4
    5b40:	2807883a 	mov	r3,r5
    5b44:	1009883a 	mov	r4,r2
    5b48:	180b883a 	mov	r5,r3
    5b4c:	0006bac0 	call	6bac <__fixdfsi>
    5b50:	e0bffe15 	stw	r2,-8(fp)

				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
    5b54:	e0bff717 	ldw	r2,-36(fp)
    5b58:	100b883a 	mov	r5,r2
    5b5c:	e0bff817 	ldw	r2,-32(fp)
    5b60:	100d883a 	mov	r6,r2
    5b64:	e0bff917 	ldw	r2,-28(fp)
    5b68:	100f883a 	mov	r7,r2
    5b6c:	e0bffa17 	ldw	r2,-24(fp)
    5b70:	d8800015 	stw	r2,0(sp)
    5b74:	0080ffc4 	movi	r2,1023
    5b78:	d8800115 	stw	r2,4(sp)
    5b7c:	d8000215 	stw	zero,8(sp)
    5b80:	e13e6617 	ldw	r4,-1640(fp)
    5b84:	001669c0 	call	1669c <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
    5b88:	e0bffb17 	ldw	r2,-20(fp)
    5b8c:	100b883a 	mov	r5,r2
    5b90:	e0bffc17 	ldw	r2,-16(fp)
    5b94:	100d883a 	mov	r6,r2
    5b98:	e0bffd17 	ldw	r2,-12(fp)
    5b9c:	100f883a 	mov	r7,r2
    5ba0:	e0bffe17 	ldw	r2,-8(fp)
    5ba4:	d8800015 	stw	r2,0(sp)
    5ba8:	0080ffc4 	movi	r2,1023
    5bac:	d8800115 	stw	r2,4(sp)
    5bb0:	d8000215 	stw	zero,8(sp)
    5bb4:	e13e6617 	ldw	r4,-1640(fp)
    5bb8:	001669c0 	call	1669c <alt_up_pixel_buffer_dma_draw_line>

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5bbc:	e0be6317 	ldw	r2,-1652(fp)
    5bc0:	10800044 	addi	r2,r2,1
    5bc4:	e0be6315 	stw	r2,-1652(fp)
    5bc8:	e0be6317 	ldw	r2,-1652(fp)
    5bcc:	108018d0 	cmplti	r2,r2,99
    5bd0:	103eef1e 	bne	r2,zero,5790 <PRVGADraw_Task+0x654>
				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}
		vTaskDelay(10);
    5bd4:	01000284 	movi	r4,10
    5bd8:	0002e980 	call	2e98 <vTaskDelay>

	}
    5bdc:	003ed406 	br	5730 <PRVGADraw_Task+0x5f4>

00005be0 <print_status_task>:
}

// The following test prints out status information every 3 seconds.
void print_status_task(void *pvParameters)
{
    5be0:	defffd04 	addi	sp,sp,-12
    5be4:	dfc00215 	stw	ra,8(sp)
    5be8:	df000115 	stw	fp,4(sp)
    5bec:	df000104 	addi	fp,sp,4
    5bf0:	e13fff15 	stw	r4,-4(fp)
	while (1)
	{
		vTaskDelay(3000);
    5bf4:	0102ee04 	movi	r4,3000
    5bf8:	0002e980 	call	2e98 <vTaskDelay>
		printf("****************************************************************\n");
    5bfc:	01020034 	movhi	r4,2048
    5c00:	21005104 	addi	r4,r4,324
    5c04:	00075980 	call	7598 <puts>
		printf("Hello From FreeRTOS Running on NIOS II.  Here is the status:\n");
    5c08:	01020034 	movhi	r4,2048
    5c0c:	21006204 	addi	r4,r4,392
    5c10:	00075980 	call	7598 <puts>
		printf("\n");
    5c14:	01000284 	movi	r4,10
    5c18:	00074d40 	call	74d4 <putchar>
		printf("The current frequency is:         %lf\n", temp);
    5c1c:	d0a00417 	ldw	r2,-32752(gp)
    5c20:	01020034 	movhi	r4,2048
    5c24:	2109b504 	addi	r4,r4,9940
    5c28:	20c00017 	ldw	r3,0(r4)
    5c2c:	01020034 	movhi	r4,2048
    5c30:	21007204 	addi	r4,r4,456
    5c34:	100b883a 	mov	r5,r2
    5c38:	180d883a 	mov	r6,r3
    5c3c:	000745c0 	call	745c <printf>
		printf("\n");
    5c40:	01000284 	movi	r4,10
    5c44:	00074d40 	call	74d4 <putchar>
		printf("The frequency threshold is: %lf\n",freqThresh );
    5c48:	d0a00617 	ldw	r2,-32744(gp)
    5c4c:	01020034 	movhi	r4,2048
    5c50:	2109b704 	addi	r4,r4,9948
    5c54:	20c00017 	ldw	r3,0(r4)
    5c58:	01020034 	movhi	r4,2048
    5c5c:	21007c04 	addi	r4,r4,496
    5c60:	100b883a 	mov	r5,r2
    5c64:	180d883a 	mov	r6,r3
    5c68:	000745c0 	call	745c <printf>
		printf("\n");
    5c6c:	01000284 	movi	r4,10
    5c70:	00074d40 	call	74d4 <putchar>
		printf("The current ROC is : %lf\n", ROCThresh);
    5c74:	d0a00817 	ldw	r2,-32736(gp)
    5c78:	01020034 	movhi	r4,2048
    5c7c:	2109b904 	addi	r4,r4,9956
    5c80:	20c00017 	ldw	r3,0(r4)
    5c84:	01020034 	movhi	r4,2048
    5c88:	21008504 	addi	r4,r4,532
    5c8c:	100b883a 	mov	r5,r2
    5c90:	180d883a 	mov	r6,r3
    5c94:	000745c0 	call	745c <printf>
		printf("\n");
    5c98:	01000284 	movi	r4,10
    5c9c:	00074d40 	call	74d4 <putchar>
		printf("The ROC threshold is: %lf\n", ROCThresh);
    5ca0:	d0a00817 	ldw	r2,-32736(gp)
    5ca4:	01020034 	movhi	r4,2048
    5ca8:	2109b904 	addi	r4,r4,9956
    5cac:	20c00017 	ldw	r3,0(r4)
    5cb0:	01020034 	movhi	r4,2048
    5cb4:	21008c04 	addi	r4,r4,560
    5cb8:	100b883a 	mov	r5,r2
    5cbc:	180d883a 	mov	r6,r3
    5cc0:	000745c0 	call	745c <printf>
		printf("\n");
    5cc4:	01000284 	movi	r4,10
    5cc8:	00074d40 	call	74d4 <putchar>
		printf("****************************************************************\n");
    5ccc:	01020034 	movhi	r4,2048
    5cd0:	21005104 	addi	r4,r4,324
    5cd4:	00075980 	call	7598 <puts>
		printf("\n");
    5cd8:	01000284 	movi	r4,10
    5cdc:	00074d40 	call	74d4 <putchar>
	}
    5ce0:	003fc406 	br	5bf4 <print_status_task+0x14>

00005ce4 <keyboard_control_task>:
}

void keyboard_control_task(void *pvParameters)
{
    5ce4:	defffe04 	addi	sp,sp,-8
    5ce8:	df000115 	stw	fp,4(sp)
    5cec:	df000104 	addi	fp,sp,4
    5cf0:	e13fff15 	stw	r4,-4(fp)
	while (1)
	{

	}
    5cf4:	003fff06 	br	5cf4 <keyboard_control_task+0x10>

00005cf8 <freq_relay>:
}


void freq_relay(){
    5cf8:	defffe04 	addi	sp,sp,-8
    5cfc:	dfc00115 	stw	ra,4(sp)
    5d00:	df000015 	stw	fp,0(sp)
    5d04:	d839883a 	mov	fp,sp
	#define SAMPLING_FREQ 16000.0
	temp = SAMPLING_FREQ/(double)IORD(FREQUENCY_ANALYSER_BASE, 0);
    5d08:	00800134 	movhi	r2,4
    5d0c:	108c4004 	addi	r2,r2,12544
    5d10:	11000037 	ldwio	r4,0(r2)
    5d14:	0006ab40 	call	6ab4 <__floatsidf>
    5d18:	100f883a 	mov	r7,r2
    5d1c:	1811883a 	mov	r8,r3
    5d20:	0009883a 	mov	r4,zero
    5d24:	015033f4 	movhi	r5,16591
    5d28:	29500004 	addi	r5,r5,16384
    5d2c:	380d883a 	mov	r6,r7
    5d30:	400f883a 	mov	r7,r8
    5d34:	00067d40 	call	67d4 <__divdf3>
    5d38:	1009883a 	mov	r4,r2
    5d3c:	180b883a 	mov	r5,r3
    5d40:	2005883a 	mov	r2,r4
    5d44:	2807883a 	mov	r3,r5
    5d48:	d0a00415 	stw	r2,-32752(gp)
    5d4c:	01020034 	movhi	r4,2048
    5d50:	2109b504 	addi	r4,r4,9940
    5d54:	20c00015 	stw	r3,0(r4)
	sprintf(freqStr, "%f", freqThresh);
    5d58:	d0a00617 	ldw	r2,-32744(gp)
    5d5c:	01020034 	movhi	r4,2048
    5d60:	2109b704 	addi	r4,r4,9948
    5d64:	20c00017 	ldw	r3,0(r4)
    5d68:	01020034 	movhi	r4,2048
    5d6c:	21023f04 	addi	r4,r4,2300
    5d70:	01420034 	movhi	r5,2048
    5d74:	29409304 	addi	r5,r5,588
    5d78:	100d883a 	mov	r6,r2
    5d7c:	180f883a 	mov	r7,r3
    5d80:	00075ac0 	call	75ac <sprintf>
	sprintf(ROCStr, "%f", ROCThresh);
    5d84:	d0a00817 	ldw	r2,-32736(gp)
    5d88:	01020034 	movhi	r4,2048
    5d8c:	2109b904 	addi	r4,r4,9956
    5d90:	20c00017 	ldw	r3,0(r4)
    5d94:	01020034 	movhi	r4,2048
    5d98:	21024204 	addi	r4,r4,2312
    5d9c:	01420034 	movhi	r5,2048
    5da0:	29409304 	addi	r5,r5,588
    5da4:	100d883a 	mov	r6,r2
    5da8:	180f883a 	mov	r7,r3
    5dac:	00075ac0 	call	75ac <sprintf>
	//printf("%f Hz\n", temp);
	xQueueSendToBackFromISR( Q_freq_data, &temp, pdFALSE );
    5db0:	d1203a17 	ldw	r4,-32536(gp)
    5db4:	d1600404 	addi	r5,gp,-32752
    5db8:	000d883a 	mov	r6,zero
    5dbc:	000f883a 	mov	r7,zero
    5dc0:	00020c00 	call	20c0 <xQueueGenericSendFromISR>

	return;
}
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	dfc00117 	ldw	ra,4(sp)
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00204 	addi	sp,sp,8
    5dd4:	f800283a 	ret

00005dd8 <ps2_isr>:

void ps2_isr(void* ps2_device, alt_u32 id){
    5dd8:	defffb04 	addi	sp,sp,-20
    5ddc:	dfc00415 	stw	ra,16(sp)
    5de0:	df000315 	stw	fp,12(sp)
    5de4:	df000304 	addi	fp,sp,12
    5de8:	e13ffe15 	stw	r4,-8(fp)
    5dec:	e17fff15 	stw	r5,-4(fp)
	unsigned char byte;
	alt_up_ps2_read_data_byte_timeout(ps2_device, &byte);
    5df0:	e13ffe17 	ldw	r4,-8(fp)
    5df4:	e17ffd04 	addi	r5,fp,-12
    5df8:	0014ec00 	call	14ec0 <alt_up_ps2_read_data_byte_timeout>

	printf("Scan code: %x\n", byte);
    5dfc:	e0bffd03 	ldbu	r2,-12(fp)
    5e00:	11403fcc 	andi	r5,r2,255
    5e04:	01020034 	movhi	r4,2048
    5e08:	21009404 	addi	r4,r4,592
    5e0c:	000745c0 	call	745c <printf>
}
    5e10:	e037883a 	mov	sp,fp
    5e14:	dfc00117 	ldw	ra,4(sp)
    5e18:	df000017 	ldw	fp,0(sp)
    5e1c:	dec00204 	addi	sp,sp,8
    5e20:	f800283a 	ret

00005e24 <main>:

int main()
{
    5e24:	defff904 	addi	sp,sp,-28
    5e28:	dfc00615 	stw	ra,24(sp)
    5e2c:	df000515 	stw	fp,20(sp)
    5e30:	df000504 	addi	fp,sp,20
	Q_freq_data = xQueueCreate( 100, sizeof(double) );
    5e34:	01001904 	movi	r4,100
    5e38:	01400204 	movi	r5,8
    5e3c:	000d883a 	mov	r6,zero
    5e40:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    5e44:	d0a03a15 	stw	r2,-32536(gp)
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
    5e48:	01020034 	movhi	r4,2048
    5e4c:	21009804 	addi	r4,r4,608
    5e50:	00151880 	call	15188 <alt_up_ps2_open_dev>
    5e54:	e0bfff15 	stw	r2,-4(fp)

	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay);
    5e58:	010001c4 	movi	r4,7
    5e5c:	000b883a 	mov	r5,zero
    5e60:	01800034 	movhi	r6,0
    5e64:	31973e04 	addi	r6,r6,23800
    5e68:	00019140 	call	1914 <alt_irq_register>

	alt_up_ps2_enable_read_interrupt(ps2_device);
    5e6c:	e13fff17 	ldw	r4,-4(fp)
    5e70:	0014cc00 	call	14cc0 <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
    5e74:	01000084 	movi	r4,2
    5e78:	e17fff17 	ldw	r5,-4(fp)
    5e7c:	01800034 	movhi	r6,0
    5e80:	31977604 	addi	r6,r6,24024
    5e84:	00019140 	call	1914 <alt_irq_register>

	xTaskCreate( PRVGADraw_Task, "DrawTsk", configMINIMAL_STACK_SIZE, NULL, PRVGADraw_Task_P, &PRVGADraw );
    5e88:	00800044 	movi	r2,1
    5e8c:	d8800015 	stw	r2,0(sp)
    5e90:	d0a03b04 	addi	r2,gp,-32532
    5e94:	d8800115 	stw	r2,4(sp)
    5e98:	d8000215 	stw	zero,8(sp)
    5e9c:	d8000315 	stw	zero,12(sp)
    5ea0:	01000034 	movhi	r4,0
    5ea4:	21144f04 	addi	r4,r4,20796
    5ea8:	01420034 	movhi	r5,2048
    5eac:	29409b04 	addi	r5,r5,620
    5eb0:	01840004 	movi	r6,4096
    5eb4:	000f883a 	mov	r7,zero
    5eb8:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	//xTaskCreate(print_status_task, "print_status_task", configMINIMAL_STACK_SIZE, NULL, PRINT_STATUS_TASK_PRIORITY, NULL);
	xTaskCreate(keyboard_control_task, "keyboardTsk", configMINIMAL_STACK_SIZE, NULL, PRINT_STATUS_TASK_PRIORITY, &keyboardTaskHandle);
    5ebc:	00800084 	movi	r2,2
    5ec0:	d8800015 	stw	r2,0(sp)
    5ec4:	d0a03904 	addi	r2,gp,-32540
    5ec8:	d8800115 	stw	r2,4(sp)
    5ecc:	d8000215 	stw	zero,8(sp)
    5ed0:	d8000315 	stw	zero,12(sp)
    5ed4:	01000034 	movhi	r4,0
    5ed8:	21173904 	addi	r4,r4,23780
    5edc:	01420034 	movhi	r5,2048
    5ee0:	29409d04 	addi	r5,r5,628
    5ee4:	01840004 	movi	r6,4096
    5ee8:	000f883a 	mov	r7,zero
    5eec:	0002bf80 	call	2bf8 <xTaskGenericCreate>


	vTaskStartScheduler();
    5ef0:	0002f100 	call	2f10 <vTaskStartScheduler>

	while(1)

  return 0;
    5ef4:	0005883a 	mov	r2,zero
}
    5ef8:	e037883a 	mov	sp,fp
    5efc:	dfc00117 	ldw	ra,4(sp)
    5f00:	df000017 	ldw	fp,0(sp)
    5f04:	dec00204 	addi	sp,sp,8
    5f08:	f800283a 	ret

00005f0c <_fpadd_parts>:
    5f0c:	defff804 	addi	sp,sp,-32
    5f10:	dcc00315 	stw	r19,12(sp)
    5f14:	2027883a 	mov	r19,r4
    5f18:	21000017 	ldw	r4,0(r4)
    5f1c:	00c00044 	movi	r3,1
    5f20:	dd400515 	stw	r21,20(sp)
    5f24:	dd000415 	stw	r20,16(sp)
    5f28:	ddc00715 	stw	r23,28(sp)
    5f2c:	dd800615 	stw	r22,24(sp)
    5f30:	dc800215 	stw	r18,8(sp)
    5f34:	dc400115 	stw	r17,4(sp)
    5f38:	dc000015 	stw	r16,0(sp)
    5f3c:	282b883a 	mov	r21,r5
    5f40:	3029883a 	mov	r20,r6
    5f44:	1900632e 	bgeu	r3,r4,60d4 <_fpadd_parts+0x1c8>
    5f48:	28800017 	ldw	r2,0(r5)
    5f4c:	1880812e 	bgeu	r3,r2,6154 <_fpadd_parts+0x248>
    5f50:	00c00104 	movi	r3,4
    5f54:	20c0dc26 	beq	r4,r3,62c8 <_fpadd_parts+0x3bc>
    5f58:	10c07e26 	beq	r2,r3,6154 <_fpadd_parts+0x248>
    5f5c:	00c00084 	movi	r3,2
    5f60:	10c06726 	beq	r2,r3,6100 <_fpadd_parts+0x1f4>
    5f64:	20c07b26 	beq	r4,r3,6154 <_fpadd_parts+0x248>
    5f68:	9dc00217 	ldw	r23,8(r19)
    5f6c:	28c00217 	ldw	r3,8(r5)
    5f70:	9c400317 	ldw	r17,12(r19)
    5f74:	2bc00317 	ldw	r15,12(r5)
    5f78:	b8cdc83a 	sub	r6,r23,r3
    5f7c:	9c800417 	ldw	r18,16(r19)
    5f80:	2c000417 	ldw	r16,16(r5)
    5f84:	3009883a 	mov	r4,r6
    5f88:	30009716 	blt	r6,zero,61e8 <_fpadd_parts+0x2dc>
    5f8c:	00800fc4 	movi	r2,63
    5f90:	11806b16 	blt	r2,r6,6140 <_fpadd_parts+0x234>
    5f94:	0100a40e 	bge	zero,r4,6228 <_fpadd_parts+0x31c>
    5f98:	35bff804 	addi	r22,r6,-32
    5f9c:	b000bc16 	blt	r22,zero,6290 <_fpadd_parts+0x384>
    5fa0:	8596d83a 	srl	r11,r16,r22
    5fa4:	0019883a 	mov	r12,zero
    5fa8:	0013883a 	mov	r9,zero
    5fac:	01000044 	movi	r4,1
    5fb0:	0015883a 	mov	r10,zero
    5fb4:	b000be16 	blt	r22,zero,62b0 <_fpadd_parts+0x3a4>
    5fb8:	2590983a 	sll	r8,r4,r22
    5fbc:	000f883a 	mov	r7,zero
    5fc0:	00bfffc4 	movi	r2,-1
    5fc4:	3889883a 	add	r4,r7,r2
    5fc8:	408b883a 	add	r5,r8,r2
    5fcc:	21cd803a 	cmpltu	r6,r4,r7
    5fd0:	314b883a 	add	r5,r6,r5
    5fd4:	7904703a 	and	r2,r15,r4
    5fd8:	8146703a 	and	r3,r16,r5
    5fdc:	10c4b03a 	or	r2,r2,r3
    5fe0:	10000226 	beq	r2,zero,5fec <_fpadd_parts+0xe0>
    5fe4:	02400044 	movi	r9,1
    5fe8:	0015883a 	mov	r10,zero
    5fec:	5a5eb03a 	or	r15,r11,r9
    5ff0:	62a0b03a 	or	r16,r12,r10
    5ff4:	99400117 	ldw	r5,4(r19)
    5ff8:	a8800117 	ldw	r2,4(r21)
    5ffc:	28806e26 	beq	r5,r2,61b8 <_fpadd_parts+0x2ac>
    6000:	28006626 	beq	r5,zero,619c <_fpadd_parts+0x290>
    6004:	7c45c83a 	sub	r2,r15,r17
    6008:	7889803a 	cmpltu	r4,r15,r2
    600c:	8487c83a 	sub	r3,r16,r18
    6010:	1909c83a 	sub	r4,r3,r4
    6014:	100d883a 	mov	r6,r2
    6018:	200f883a 	mov	r7,r4
    601c:	38007716 	blt	r7,zero,61fc <_fpadd_parts+0x2f0>
    6020:	a5c00215 	stw	r23,8(r20)
    6024:	a1c00415 	stw	r7,16(r20)
    6028:	a0000115 	stw	zero,4(r20)
    602c:	a1800315 	stw	r6,12(r20)
    6030:	a2000317 	ldw	r8,12(r20)
    6034:	a2400417 	ldw	r9,16(r20)
    6038:	00bfffc4 	movi	r2,-1
    603c:	408b883a 	add	r5,r8,r2
    6040:	2a09803a 	cmpltu	r4,r5,r8
    6044:	488d883a 	add	r6,r9,r2
    6048:	01c40034 	movhi	r7,4096
    604c:	39ffffc4 	addi	r7,r7,-1
    6050:	218d883a 	add	r6,r4,r6
    6054:	39801736 	bltu	r7,r6,60b4 <_fpadd_parts+0x1a8>
    6058:	31c06526 	beq	r6,r7,61f0 <_fpadd_parts+0x2e4>
    605c:	a3000217 	ldw	r12,8(r20)
    6060:	4209883a 	add	r4,r8,r8
    6064:	00bfffc4 	movi	r2,-1
    6068:	220f803a 	cmpltu	r7,r4,r8
    606c:	4a4b883a 	add	r5,r9,r9
    6070:	394f883a 	add	r7,r7,r5
    6074:	2095883a 	add	r10,r4,r2
    6078:	3897883a 	add	r11,r7,r2
    607c:	510d803a 	cmpltu	r6,r10,r4
    6080:	6099883a 	add	r12,r12,r2
    6084:	32d7883a 	add	r11,r6,r11
    6088:	00840034 	movhi	r2,4096
    608c:	10bfffc4 	addi	r2,r2,-1
    6090:	2011883a 	mov	r8,r4
    6094:	3813883a 	mov	r9,r7
    6098:	a1000315 	stw	r4,12(r20)
    609c:	a1c00415 	stw	r7,16(r20)
    60a0:	a3000215 	stw	r12,8(r20)
    60a4:	12c00336 	bltu	r2,r11,60b4 <_fpadd_parts+0x1a8>
    60a8:	58bfed1e 	bne	r11,r2,6060 <_fpadd_parts+0x154>
    60ac:	00bfff84 	movi	r2,-2
    60b0:	12bfeb2e 	bgeu	r2,r10,6060 <_fpadd_parts+0x154>
    60b4:	a2800417 	ldw	r10,16(r20)
    60b8:	008000c4 	movi	r2,3
    60bc:	00c80034 	movhi	r3,8192
    60c0:	18ffffc4 	addi	r3,r3,-1
    60c4:	a2400317 	ldw	r9,12(r20)
    60c8:	a0800015 	stw	r2,0(r20)
    60cc:	1a802336 	bltu	r3,r10,615c <_fpadd_parts+0x250>
    60d0:	a027883a 	mov	r19,r20
    60d4:	9805883a 	mov	r2,r19
    60d8:	ddc00717 	ldw	r23,28(sp)
    60dc:	dd800617 	ldw	r22,24(sp)
    60e0:	dd400517 	ldw	r21,20(sp)
    60e4:	dd000417 	ldw	r20,16(sp)
    60e8:	dcc00317 	ldw	r19,12(sp)
    60ec:	dc800217 	ldw	r18,8(sp)
    60f0:	dc400117 	ldw	r17,4(sp)
    60f4:	dc000017 	ldw	r16,0(sp)
    60f8:	dec00804 	addi	sp,sp,32
    60fc:	f800283a 	ret
    6100:	20fff41e 	bne	r4,r3,60d4 <_fpadd_parts+0x1c8>
    6104:	31000015 	stw	r4,0(r6)
    6108:	98800117 	ldw	r2,4(r19)
    610c:	30800115 	stw	r2,4(r6)
    6110:	98c00217 	ldw	r3,8(r19)
    6114:	30c00215 	stw	r3,8(r6)
    6118:	98800317 	ldw	r2,12(r19)
    611c:	30800315 	stw	r2,12(r6)
    6120:	98c00417 	ldw	r3,16(r19)
    6124:	30c00415 	stw	r3,16(r6)
    6128:	98800117 	ldw	r2,4(r19)
    612c:	28c00117 	ldw	r3,4(r5)
    6130:	3027883a 	mov	r19,r6
    6134:	10c4703a 	and	r2,r2,r3
    6138:	30800115 	stw	r2,4(r6)
    613c:	003fe506 	br	60d4 <_fpadd_parts+0x1c8>
    6140:	1dc02616 	blt	r3,r23,61dc <_fpadd_parts+0x2d0>
    6144:	0023883a 	mov	r17,zero
    6148:	182f883a 	mov	r23,r3
    614c:	0025883a 	mov	r18,zero
    6150:	003fa806 	br	5ff4 <_fpadd_parts+0xe8>
    6154:	a827883a 	mov	r19,r21
    6158:	003fde06 	br	60d4 <_fpadd_parts+0x1c8>
    615c:	01800044 	movi	r6,1
    6160:	500497fa 	slli	r2,r10,31
    6164:	4808d07a 	srli	r4,r9,1
    6168:	518ad83a 	srl	r5,r10,r6
    616c:	a2000217 	ldw	r8,8(r20)
    6170:	1108b03a 	or	r4,r2,r4
    6174:	0007883a 	mov	r3,zero
    6178:	4984703a 	and	r2,r9,r6
    617c:	208cb03a 	or	r6,r4,r2
    6180:	28ceb03a 	or	r7,r5,r3
    6184:	42000044 	addi	r8,r8,1
    6188:	a027883a 	mov	r19,r20
    618c:	a1c00415 	stw	r7,16(r20)
    6190:	a2000215 	stw	r8,8(r20)
    6194:	a1800315 	stw	r6,12(r20)
    6198:	003fce06 	br	60d4 <_fpadd_parts+0x1c8>
    619c:	8bc5c83a 	sub	r2,r17,r15
    61a0:	8889803a 	cmpltu	r4,r17,r2
    61a4:	9407c83a 	sub	r3,r18,r16
    61a8:	1909c83a 	sub	r4,r3,r4
    61ac:	100d883a 	mov	r6,r2
    61b0:	200f883a 	mov	r7,r4
    61b4:	003f9906 	br	601c <_fpadd_parts+0x110>
    61b8:	7c45883a 	add	r2,r15,r17
    61bc:	13c9803a 	cmpltu	r4,r2,r15
    61c0:	8487883a 	add	r3,r16,r18
    61c4:	20c9883a 	add	r4,r4,r3
    61c8:	a1400115 	stw	r5,4(r20)
    61cc:	a5c00215 	stw	r23,8(r20)
    61d0:	a0800315 	stw	r2,12(r20)
    61d4:	a1000415 	stw	r4,16(r20)
    61d8:	003fb606 	br	60b4 <_fpadd_parts+0x1a8>
    61dc:	001f883a 	mov	r15,zero
    61e0:	0021883a 	mov	r16,zero
    61e4:	003f8306 	br	5ff4 <_fpadd_parts+0xe8>
    61e8:	018dc83a 	sub	r6,zero,r6
    61ec:	003f6706 	br	5f8c <_fpadd_parts+0x80>
    61f0:	00bfff84 	movi	r2,-2
    61f4:	117faf36 	bltu	r2,r5,60b4 <_fpadd_parts+0x1a8>
    61f8:	003f9806 	br	605c <_fpadd_parts+0x150>
    61fc:	0005883a 	mov	r2,zero
    6200:	1189c83a 	sub	r4,r2,r6
    6204:	1105803a 	cmpltu	r2,r2,r4
    6208:	01cbc83a 	sub	r5,zero,r7
    620c:	2885c83a 	sub	r2,r5,r2
    6210:	01800044 	movi	r6,1
    6214:	a1800115 	stw	r6,4(r20)
    6218:	a5c00215 	stw	r23,8(r20)
    621c:	a1000315 	stw	r4,12(r20)
    6220:	a0800415 	stw	r2,16(r20)
    6224:	003f8206 	br	6030 <_fpadd_parts+0x124>
    6228:	203f7226 	beq	r4,zero,5ff4 <_fpadd_parts+0xe8>
    622c:	35bff804 	addi	r22,r6,-32
    6230:	b9af883a 	add	r23,r23,r6
    6234:	b0003116 	blt	r22,zero,62fc <_fpadd_parts+0x3f0>
    6238:	959ad83a 	srl	r13,r18,r22
    623c:	001d883a 	mov	r14,zero
    6240:	000f883a 	mov	r7,zero
    6244:	01000044 	movi	r4,1
    6248:	0011883a 	mov	r8,zero
    624c:	b0002516 	blt	r22,zero,62e4 <_fpadd_parts+0x3d8>
    6250:	2594983a 	sll	r10,r4,r22
    6254:	0013883a 	mov	r9,zero
    6258:	00bfffc4 	movi	r2,-1
    625c:	4889883a 	add	r4,r9,r2
    6260:	508b883a 	add	r5,r10,r2
    6264:	224d803a 	cmpltu	r6,r4,r9
    6268:	314b883a 	add	r5,r6,r5
    626c:	8904703a 	and	r2,r17,r4
    6270:	9146703a 	and	r3,r18,r5
    6274:	10c4b03a 	or	r2,r2,r3
    6278:	10000226 	beq	r2,zero,6284 <_fpadd_parts+0x378>
    627c:	01c00044 	movi	r7,1
    6280:	0011883a 	mov	r8,zero
    6284:	69e2b03a 	or	r17,r13,r7
    6288:	7224b03a 	or	r18,r14,r8
    628c:	003f5906 	br	5ff4 <_fpadd_parts+0xe8>
    6290:	8407883a 	add	r3,r16,r16
    6294:	008007c4 	movi	r2,31
    6298:	1185c83a 	sub	r2,r2,r6
    629c:	1886983a 	sll	r3,r3,r2
    62a0:	7996d83a 	srl	r11,r15,r6
    62a4:	8198d83a 	srl	r12,r16,r6
    62a8:	1ad6b03a 	or	r11,r3,r11
    62ac:	003f3e06 	br	5fa8 <_fpadd_parts+0x9c>
    62b0:	2006d07a 	srli	r3,r4,1
    62b4:	008007c4 	movi	r2,31
    62b8:	1185c83a 	sub	r2,r2,r6
    62bc:	1890d83a 	srl	r8,r3,r2
    62c0:	218e983a 	sll	r7,r4,r6
    62c4:	003f3e06 	br	5fc0 <_fpadd_parts+0xb4>
    62c8:	113f821e 	bne	r2,r4,60d4 <_fpadd_parts+0x1c8>
    62cc:	28c00117 	ldw	r3,4(r5)
    62d0:	98800117 	ldw	r2,4(r19)
    62d4:	10ff7f26 	beq	r2,r3,60d4 <_fpadd_parts+0x1c8>
    62d8:	04c20034 	movhi	r19,2048
    62dc:	9cc0a004 	addi	r19,r19,640
    62e0:	003f7c06 	br	60d4 <_fpadd_parts+0x1c8>
    62e4:	2006d07a 	srli	r3,r4,1
    62e8:	008007c4 	movi	r2,31
    62ec:	1185c83a 	sub	r2,r2,r6
    62f0:	1894d83a 	srl	r10,r3,r2
    62f4:	2192983a 	sll	r9,r4,r6
    62f8:	003fd706 	br	6258 <_fpadd_parts+0x34c>
    62fc:	9487883a 	add	r3,r18,r18
    6300:	008007c4 	movi	r2,31
    6304:	1185c83a 	sub	r2,r2,r6
    6308:	1886983a 	sll	r3,r3,r2
    630c:	899ad83a 	srl	r13,r17,r6
    6310:	919cd83a 	srl	r14,r18,r6
    6314:	1b5ab03a 	or	r13,r3,r13
    6318:	003fc906 	br	6240 <_fpadd_parts+0x334>

0000631c <__subdf3>:
    631c:	deffea04 	addi	sp,sp,-88
    6320:	dcc01415 	stw	r19,80(sp)
    6324:	dcc00404 	addi	r19,sp,16
    6328:	2011883a 	mov	r8,r4
    632c:	2813883a 	mov	r9,r5
    6330:	dc401315 	stw	r17,76(sp)
    6334:	d809883a 	mov	r4,sp
    6338:	980b883a 	mov	r5,r19
    633c:	dc400904 	addi	r17,sp,36
    6340:	dfc01515 	stw	ra,84(sp)
    6344:	da400115 	stw	r9,4(sp)
    6348:	d9c00315 	stw	r7,12(sp)
    634c:	da000015 	stw	r8,0(sp)
    6350:	d9800215 	stw	r6,8(sp)
    6354:	00070b00 	call	70b0 <__unpack_d>
    6358:	d9000204 	addi	r4,sp,8
    635c:	880b883a 	mov	r5,r17
    6360:	00070b00 	call	70b0 <__unpack_d>
    6364:	d8800a17 	ldw	r2,40(sp)
    6368:	880b883a 	mov	r5,r17
    636c:	9809883a 	mov	r4,r19
    6370:	d9800e04 	addi	r6,sp,56
    6374:	1080005c 	xori	r2,r2,1
    6378:	d8800a15 	stw	r2,40(sp)
    637c:	0005f0c0 	call	5f0c <_fpadd_parts>
    6380:	1009883a 	mov	r4,r2
    6384:	0006d9c0 	call	6d9c <__pack_d>
    6388:	dfc01517 	ldw	ra,84(sp)
    638c:	dcc01417 	ldw	r19,80(sp)
    6390:	dc401317 	ldw	r17,76(sp)
    6394:	dec01604 	addi	sp,sp,88
    6398:	f800283a 	ret

0000639c <__adddf3>:
    639c:	deffea04 	addi	sp,sp,-88
    63a0:	dcc01415 	stw	r19,80(sp)
    63a4:	dcc00404 	addi	r19,sp,16
    63a8:	2011883a 	mov	r8,r4
    63ac:	2813883a 	mov	r9,r5
    63b0:	dc401315 	stw	r17,76(sp)
    63b4:	d809883a 	mov	r4,sp
    63b8:	980b883a 	mov	r5,r19
    63bc:	dc400904 	addi	r17,sp,36
    63c0:	dfc01515 	stw	ra,84(sp)
    63c4:	da400115 	stw	r9,4(sp)
    63c8:	d9c00315 	stw	r7,12(sp)
    63cc:	da000015 	stw	r8,0(sp)
    63d0:	d9800215 	stw	r6,8(sp)
    63d4:	00070b00 	call	70b0 <__unpack_d>
    63d8:	d9000204 	addi	r4,sp,8
    63dc:	880b883a 	mov	r5,r17
    63e0:	00070b00 	call	70b0 <__unpack_d>
    63e4:	d9800e04 	addi	r6,sp,56
    63e8:	9809883a 	mov	r4,r19
    63ec:	880b883a 	mov	r5,r17
    63f0:	0005f0c0 	call	5f0c <_fpadd_parts>
    63f4:	1009883a 	mov	r4,r2
    63f8:	0006d9c0 	call	6d9c <__pack_d>
    63fc:	dfc01517 	ldw	ra,84(sp)
    6400:	dcc01417 	ldw	r19,80(sp)
    6404:	dc401317 	ldw	r17,76(sp)
    6408:	dec01604 	addi	sp,sp,88
    640c:	f800283a 	ret

00006410 <__muldf3>:
    6410:	deffe004 	addi	sp,sp,-128
    6414:	dc401815 	stw	r17,96(sp)
    6418:	dc400404 	addi	r17,sp,16
    641c:	2011883a 	mov	r8,r4
    6420:	2813883a 	mov	r9,r5
    6424:	dc001715 	stw	r16,92(sp)
    6428:	d809883a 	mov	r4,sp
    642c:	880b883a 	mov	r5,r17
    6430:	dc000904 	addi	r16,sp,36
    6434:	dfc01f15 	stw	ra,124(sp)
    6438:	da400115 	stw	r9,4(sp)
    643c:	d9c00315 	stw	r7,12(sp)
    6440:	da000015 	stw	r8,0(sp)
    6444:	d9800215 	stw	r6,8(sp)
    6448:	ddc01e15 	stw	r23,120(sp)
    644c:	dd801d15 	stw	r22,116(sp)
    6450:	dd401c15 	stw	r21,112(sp)
    6454:	dd001b15 	stw	r20,108(sp)
    6458:	dcc01a15 	stw	r19,104(sp)
    645c:	dc801915 	stw	r18,100(sp)
    6460:	00070b00 	call	70b0 <__unpack_d>
    6464:	d9000204 	addi	r4,sp,8
    6468:	800b883a 	mov	r5,r16
    646c:	00070b00 	call	70b0 <__unpack_d>
    6470:	d9000417 	ldw	r4,16(sp)
    6474:	00800044 	movi	r2,1
    6478:	1100102e 	bgeu	r2,r4,64bc <__muldf3+0xac>
    647c:	d8c00917 	ldw	r3,36(sp)
    6480:	10c0062e 	bgeu	r2,r3,649c <__muldf3+0x8c>
    6484:	00800104 	movi	r2,4
    6488:	20800a26 	beq	r4,r2,64b4 <__muldf3+0xa4>
    648c:	1880cc26 	beq	r3,r2,67c0 <__muldf3+0x3b0>
    6490:	00800084 	movi	r2,2
    6494:	20800926 	beq	r4,r2,64bc <__muldf3+0xac>
    6498:	1880191e 	bne	r3,r2,6500 <__muldf3+0xf0>
    649c:	d8c00a17 	ldw	r3,40(sp)
    64a0:	d8800517 	ldw	r2,20(sp)
    64a4:	8009883a 	mov	r4,r16
    64a8:	10c4c03a 	cmpne	r2,r2,r3
    64ac:	d8800a15 	stw	r2,40(sp)
    64b0:	00000706 	br	64d0 <__muldf3+0xc0>
    64b4:	00800084 	movi	r2,2
    64b8:	1880c326 	beq	r3,r2,67c8 <__muldf3+0x3b8>
    64bc:	d8800517 	ldw	r2,20(sp)
    64c0:	d8c00a17 	ldw	r3,40(sp)
    64c4:	8809883a 	mov	r4,r17
    64c8:	10c4c03a 	cmpne	r2,r2,r3
    64cc:	d8800515 	stw	r2,20(sp)
    64d0:	0006d9c0 	call	6d9c <__pack_d>
    64d4:	dfc01f17 	ldw	ra,124(sp)
    64d8:	ddc01e17 	ldw	r23,120(sp)
    64dc:	dd801d17 	ldw	r22,116(sp)
    64e0:	dd401c17 	ldw	r21,112(sp)
    64e4:	dd001b17 	ldw	r20,108(sp)
    64e8:	dcc01a17 	ldw	r19,104(sp)
    64ec:	dc801917 	ldw	r18,100(sp)
    64f0:	dc401817 	ldw	r17,96(sp)
    64f4:	dc001717 	ldw	r16,92(sp)
    64f8:	dec02004 	addi	sp,sp,128
    64fc:	f800283a 	ret
    6500:	dd800717 	ldw	r22,28(sp)
    6504:	dc800c17 	ldw	r18,48(sp)
    6508:	002b883a 	mov	r21,zero
    650c:	0023883a 	mov	r17,zero
    6510:	a80b883a 	mov	r5,r21
    6514:	b00d883a 	mov	r6,r22
    6518:	880f883a 	mov	r7,r17
    651c:	ddc00817 	ldw	r23,32(sp)
    6520:	dcc00d17 	ldw	r19,52(sp)
    6524:	9009883a 	mov	r4,r18
    6528:	0006c840 	call	6c84 <__muldi3>
    652c:	001b883a 	mov	r13,zero
    6530:	680f883a 	mov	r7,r13
    6534:	b009883a 	mov	r4,r22
    6538:	000b883a 	mov	r5,zero
    653c:	980d883a 	mov	r6,r19
    6540:	b82d883a 	mov	r22,r23
    6544:	002f883a 	mov	r23,zero
    6548:	db401615 	stw	r13,88(sp)
    654c:	d8801315 	stw	r2,76(sp)
    6550:	d8c01415 	stw	r3,80(sp)
    6554:	dcc01515 	stw	r19,84(sp)
    6558:	0006c840 	call	6c84 <__muldi3>
    655c:	b00d883a 	mov	r6,r22
    6560:	000b883a 	mov	r5,zero
    6564:	9009883a 	mov	r4,r18
    6568:	b80f883a 	mov	r7,r23
    656c:	1021883a 	mov	r16,r2
    6570:	1823883a 	mov	r17,r3
    6574:	0006c840 	call	6c84 <__muldi3>
    6578:	8085883a 	add	r2,r16,r2
    657c:	140d803a 	cmpltu	r6,r2,r16
    6580:	88c7883a 	add	r3,r17,r3
    6584:	30cd883a 	add	r6,r6,r3
    6588:	1029883a 	mov	r20,r2
    658c:	302b883a 	mov	r21,r6
    6590:	da801317 	ldw	r10,76(sp)
    6594:	dac01417 	ldw	r11,80(sp)
    6598:	db001517 	ldw	r12,84(sp)
    659c:	db401617 	ldw	r13,88(sp)
    65a0:	3440612e 	bgeu	r6,r17,6728 <__muldf3+0x318>
    65a4:	0009883a 	mov	r4,zero
    65a8:	5105883a 	add	r2,r10,r4
    65ac:	128d803a 	cmpltu	r6,r2,r10
    65b0:	5d07883a 	add	r3,r11,r20
    65b4:	30cd883a 	add	r6,r6,r3
    65b8:	0021883a 	mov	r16,zero
    65bc:	04400044 	movi	r17,1
    65c0:	1025883a 	mov	r18,r2
    65c4:	3027883a 	mov	r19,r6
    65c8:	32c06236 	bltu	r6,r11,6754 <__muldf3+0x344>
    65cc:	59807a26 	beq	r11,r6,67b8 <__muldf3+0x3a8>
    65d0:	680b883a 	mov	r5,r13
    65d4:	b80f883a 	mov	r7,r23
    65d8:	6009883a 	mov	r4,r12
    65dc:	b00d883a 	mov	r6,r22
    65e0:	0006c840 	call	6c84 <__muldi3>
    65e4:	1009883a 	mov	r4,r2
    65e8:	000f883a 	mov	r7,zero
    65ec:	1545883a 	add	r2,r2,r21
    65f0:	1111803a 	cmpltu	r8,r2,r4
    65f4:	19c7883a 	add	r3,r3,r7
    65f8:	40c7883a 	add	r3,r8,r3
    65fc:	88cb883a 	add	r5,r17,r3
    6600:	d8c00617 	ldw	r3,24(sp)
    6604:	8089883a 	add	r4,r16,r2
    6608:	d8800b17 	ldw	r2,44(sp)
    660c:	18c00104 	addi	r3,r3,4
    6610:	240d803a 	cmpltu	r6,r4,r16
    6614:	10c7883a 	add	r3,r2,r3
    6618:	2013883a 	mov	r9,r4
    661c:	d8800a17 	ldw	r2,40(sp)
    6620:	d9000517 	ldw	r4,20(sp)
    6624:	314d883a 	add	r6,r6,r5
    6628:	3015883a 	mov	r10,r6
    662c:	2088c03a 	cmpne	r4,r4,r2
    6630:	00880034 	movhi	r2,8192
    6634:	10bfffc4 	addi	r2,r2,-1
    6638:	d9000f15 	stw	r4,60(sp)
    663c:	d8c01015 	stw	r3,64(sp)
    6640:	1180162e 	bgeu	r2,r6,669c <__muldf3+0x28c>
    6644:	1811883a 	mov	r8,r3
    6648:	101f883a 	mov	r15,r2
    664c:	980497fa 	slli	r2,r19,31
    6650:	9016d07a 	srli	r11,r18,1
    6654:	500697fa 	slli	r3,r10,31
    6658:	480cd07a 	srli	r6,r9,1
    665c:	500ed07a 	srli	r7,r10,1
    6660:	12d6b03a 	or	r11,r2,r11
    6664:	00800044 	movi	r2,1
    6668:	198cb03a 	or	r6,r3,r6
    666c:	4888703a 	and	r4,r9,r2
    6670:	9818d07a 	srli	r12,r19,1
    6674:	001b883a 	mov	r13,zero
    6678:	03a00034 	movhi	r14,32768
    667c:	3013883a 	mov	r9,r6
    6680:	3815883a 	mov	r10,r7
    6684:	4091883a 	add	r8,r8,r2
    6688:	20000226 	beq	r4,zero,6694 <__muldf3+0x284>
    668c:	5b64b03a 	or	r18,r11,r13
    6690:	63a6b03a 	or	r19,r12,r14
    6694:	7abfed36 	bltu	r15,r10,664c <__muldf3+0x23c>
    6698:	da001015 	stw	r8,64(sp)
    669c:	00840034 	movhi	r2,4096
    66a0:	10bfffc4 	addi	r2,r2,-1
    66a4:	12801436 	bltu	r2,r10,66f8 <__muldf3+0x2e8>
    66a8:	da001017 	ldw	r8,64(sp)
    66ac:	101f883a 	mov	r15,r2
    66b0:	4a45883a 	add	r2,r9,r9
    66b4:	124d803a 	cmpltu	r6,r2,r9
    66b8:	5287883a 	add	r3,r10,r10
    66bc:	9497883a 	add	r11,r18,r18
    66c0:	5c8f803a 	cmpltu	r7,r11,r18
    66c4:	9cd9883a 	add	r12,r19,r19
    66c8:	01000044 	movi	r4,1
    66cc:	30cd883a 	add	r6,r6,r3
    66d0:	3b0f883a 	add	r7,r7,r12
    66d4:	423fffc4 	addi	r8,r8,-1
    66d8:	1013883a 	mov	r9,r2
    66dc:	3015883a 	mov	r10,r6
    66e0:	111ab03a 	or	r13,r2,r4
    66e4:	98003016 	blt	r19,zero,67a8 <__muldf3+0x398>
    66e8:	5825883a 	mov	r18,r11
    66ec:	3827883a 	mov	r19,r7
    66f0:	7abfef2e 	bgeu	r15,r10,66b0 <__muldf3+0x2a0>
    66f4:	da001015 	stw	r8,64(sp)
    66f8:	00803fc4 	movi	r2,255
    66fc:	488e703a 	and	r7,r9,r2
    6700:	00802004 	movi	r2,128
    6704:	0007883a 	mov	r3,zero
    6708:	0011883a 	mov	r8,zero
    670c:	38801826 	beq	r7,r2,6770 <__muldf3+0x360>
    6710:	008000c4 	movi	r2,3
    6714:	d9000e04 	addi	r4,sp,56
    6718:	da801215 	stw	r10,72(sp)
    671c:	d8800e15 	stw	r2,56(sp)
    6720:	da401115 	stw	r9,68(sp)
    6724:	003f6a06 	br	64d0 <__muldf3+0xc0>
    6728:	89802126 	beq	r17,r6,67b0 <__muldf3+0x3a0>
    672c:	0009883a 	mov	r4,zero
    6730:	5105883a 	add	r2,r10,r4
    6734:	128d803a 	cmpltu	r6,r2,r10
    6738:	5d07883a 	add	r3,r11,r20
    673c:	30cd883a 	add	r6,r6,r3
    6740:	0021883a 	mov	r16,zero
    6744:	0023883a 	mov	r17,zero
    6748:	1025883a 	mov	r18,r2
    674c:	3027883a 	mov	r19,r6
    6750:	32ff9e2e 	bgeu	r6,r11,65cc <__muldf3+0x1bc>
    6754:	00800044 	movi	r2,1
    6758:	8089883a 	add	r4,r16,r2
    675c:	240d803a 	cmpltu	r6,r4,r16
    6760:	344d883a 	add	r6,r6,r17
    6764:	2021883a 	mov	r16,r4
    6768:	3023883a 	mov	r17,r6
    676c:	003f9806 	br	65d0 <__muldf3+0x1c0>
    6770:	403fe71e 	bne	r8,zero,6710 <__muldf3+0x300>
    6774:	01004004 	movi	r4,256
    6778:	4904703a 	and	r2,r9,r4
    677c:	10c4b03a 	or	r2,r2,r3
    6780:	103fe31e 	bne	r2,zero,6710 <__muldf3+0x300>
    6784:	94c4b03a 	or	r2,r18,r19
    6788:	103fe126 	beq	r2,zero,6710 <__muldf3+0x300>
    678c:	49c5883a 	add	r2,r9,r7
    6790:	1251803a 	cmpltu	r8,r2,r9
    6794:	4291883a 	add	r8,r8,r10
    6798:	013fc004 	movi	r4,-256
    679c:	1112703a 	and	r9,r2,r4
    67a0:	4015883a 	mov	r10,r8
    67a4:	003fda06 	br	6710 <__muldf3+0x300>
    67a8:	6813883a 	mov	r9,r13
    67ac:	003fce06 	br	66e8 <__muldf3+0x2d8>
    67b0:	143f7c36 	bltu	r2,r16,65a4 <__muldf3+0x194>
    67b4:	003fdd06 	br	672c <__muldf3+0x31c>
    67b8:	12bf852e 	bgeu	r2,r10,65d0 <__muldf3+0x1c0>
    67bc:	003fe506 	br	6754 <__muldf3+0x344>
    67c0:	00800084 	movi	r2,2
    67c4:	20bf351e 	bne	r4,r2,649c <__muldf3+0x8c>
    67c8:	01020034 	movhi	r4,2048
    67cc:	2100a004 	addi	r4,r4,640
    67d0:	003f3f06 	br	64d0 <__muldf3+0xc0>

000067d4 <__divdf3>:
    67d4:	deffed04 	addi	sp,sp,-76
    67d8:	dcc01115 	stw	r19,68(sp)
    67dc:	dcc00404 	addi	r19,sp,16
    67e0:	2011883a 	mov	r8,r4
    67e4:	2813883a 	mov	r9,r5
    67e8:	dc000e15 	stw	r16,56(sp)
    67ec:	d809883a 	mov	r4,sp
    67f0:	980b883a 	mov	r5,r19
    67f4:	dc000904 	addi	r16,sp,36
    67f8:	dfc01215 	stw	ra,72(sp)
    67fc:	da400115 	stw	r9,4(sp)
    6800:	d9c00315 	stw	r7,12(sp)
    6804:	da000015 	stw	r8,0(sp)
    6808:	d9800215 	stw	r6,8(sp)
    680c:	dc801015 	stw	r18,64(sp)
    6810:	dc400f15 	stw	r17,60(sp)
    6814:	00070b00 	call	70b0 <__unpack_d>
    6818:	d9000204 	addi	r4,sp,8
    681c:	800b883a 	mov	r5,r16
    6820:	00070b00 	call	70b0 <__unpack_d>
    6824:	d9000417 	ldw	r4,16(sp)
    6828:	00800044 	movi	r2,1
    682c:	11000b2e 	bgeu	r2,r4,685c <__divdf3+0x88>
    6830:	d9400917 	ldw	r5,36(sp)
    6834:	1140762e 	bgeu	r2,r5,6a10 <__divdf3+0x23c>
    6838:	d8800517 	ldw	r2,20(sp)
    683c:	d8c00a17 	ldw	r3,40(sp)
    6840:	01800104 	movi	r6,4
    6844:	10c4f03a 	xor	r2,r2,r3
    6848:	d8800515 	stw	r2,20(sp)
    684c:	21800226 	beq	r4,r6,6858 <__divdf3+0x84>
    6850:	00800084 	movi	r2,2
    6854:	2080141e 	bne	r4,r2,68a8 <__divdf3+0xd4>
    6858:	29000926 	beq	r5,r4,6880 <__divdf3+0xac>
    685c:	9809883a 	mov	r4,r19
    6860:	0006d9c0 	call	6d9c <__pack_d>
    6864:	dfc01217 	ldw	ra,72(sp)
    6868:	dcc01117 	ldw	r19,68(sp)
    686c:	dc801017 	ldw	r18,64(sp)
    6870:	dc400f17 	ldw	r17,60(sp)
    6874:	dc000e17 	ldw	r16,56(sp)
    6878:	dec01304 	addi	sp,sp,76
    687c:	f800283a 	ret
    6880:	01020034 	movhi	r4,2048
    6884:	2100a004 	addi	r4,r4,640
    6888:	0006d9c0 	call	6d9c <__pack_d>
    688c:	dfc01217 	ldw	ra,72(sp)
    6890:	dcc01117 	ldw	r19,68(sp)
    6894:	dc801017 	ldw	r18,64(sp)
    6898:	dc400f17 	ldw	r17,60(sp)
    689c:	dc000e17 	ldw	r16,56(sp)
    68a0:	dec01304 	addi	sp,sp,76
    68a4:	f800283a 	ret
    68a8:	29805b26 	beq	r5,r6,6a18 <__divdf3+0x244>
    68ac:	28802d26 	beq	r5,r2,6964 <__divdf3+0x190>
    68b0:	d8c00617 	ldw	r3,24(sp)
    68b4:	d8800b17 	ldw	r2,44(sp)
    68b8:	d9c00817 	ldw	r7,32(sp)
    68bc:	dc400d17 	ldw	r17,52(sp)
    68c0:	188bc83a 	sub	r5,r3,r2
    68c4:	d9800717 	ldw	r6,28(sp)
    68c8:	dc000c17 	ldw	r16,48(sp)
    68cc:	d9400615 	stw	r5,24(sp)
    68d0:	3c403836 	bltu	r7,r17,69b4 <__divdf3+0x1e0>
    68d4:	89c03626 	beq	r17,r7,69b0 <__divdf3+0x1dc>
    68d8:	0015883a 	mov	r10,zero
    68dc:	001d883a 	mov	r14,zero
    68e0:	02c40034 	movhi	r11,4096
    68e4:	001f883a 	mov	r15,zero
    68e8:	003f883a 	mov	ra,zero
    68ec:	04800f44 	movi	r18,61
    68f0:	00000f06 	br	6930 <__divdf3+0x15c>
    68f4:	601d883a 	mov	r14,r12
    68f8:	681f883a 	mov	r15,r13
    68fc:	400d883a 	mov	r6,r8
    6900:	100f883a 	mov	r7,r2
    6904:	3191883a 	add	r8,r6,r6
    6908:	5808d07a 	srli	r4,r11,1
    690c:	4185803a 	cmpltu	r2,r8,r6
    6910:	39d3883a 	add	r9,r7,r7
    6914:	28c6b03a 	or	r3,r5,r3
    6918:	1245883a 	add	r2,r2,r9
    691c:	1815883a 	mov	r10,r3
    6920:	2017883a 	mov	r11,r4
    6924:	400d883a 	mov	r6,r8
    6928:	100f883a 	mov	r7,r2
    692c:	fc801726 	beq	ra,r18,698c <__divdf3+0x1b8>
    6930:	580a97fa 	slli	r5,r11,31
    6934:	5006d07a 	srli	r3,r10,1
    6938:	ffc00044 	addi	ra,ra,1
    693c:	3c7ff136 	bltu	r7,r17,6904 <__divdf3+0x130>
    6940:	3411c83a 	sub	r8,r6,r16
    6944:	3205803a 	cmpltu	r2,r6,r8
    6948:	3c53c83a 	sub	r9,r7,r17
    694c:	7298b03a 	or	r12,r14,r10
    6950:	7adab03a 	or	r13,r15,r11
    6954:	4885c83a 	sub	r2,r9,r2
    6958:	89ffe61e 	bne	r17,r7,68f4 <__divdf3+0x120>
    695c:	343fe936 	bltu	r6,r16,6904 <__divdf3+0x130>
    6960:	003fe406 	br	68f4 <__divdf3+0x120>
    6964:	9809883a 	mov	r4,r19
    6968:	d9800415 	stw	r6,16(sp)
    696c:	0006d9c0 	call	6d9c <__pack_d>
    6970:	dfc01217 	ldw	ra,72(sp)
    6974:	dcc01117 	ldw	r19,68(sp)
    6978:	dc801017 	ldw	r18,64(sp)
    697c:	dc400f17 	ldw	r17,60(sp)
    6980:	dc000e17 	ldw	r16,56(sp)
    6984:	dec01304 	addi	sp,sp,76
    6988:	f800283a 	ret
    698c:	00803fc4 	movi	r2,255
    6990:	7090703a 	and	r8,r14,r2
    6994:	00802004 	movi	r2,128
    6998:	0007883a 	mov	r3,zero
    699c:	0013883a 	mov	r9,zero
    69a0:	40800d26 	beq	r8,r2,69d8 <__divdf3+0x204>
    69a4:	dbc00815 	stw	r15,32(sp)
    69a8:	db800715 	stw	r14,28(sp)
    69ac:	003fab06 	br	685c <__divdf3+0x88>
    69b0:	343fc92e 	bgeu	r6,r16,68d8 <__divdf3+0x104>
    69b4:	3185883a 	add	r2,r6,r6
    69b8:	1189803a 	cmpltu	r4,r2,r6
    69bc:	39c7883a 	add	r3,r7,r7
    69c0:	20c9883a 	add	r4,r4,r3
    69c4:	297fffc4 	addi	r5,r5,-1
    69c8:	100d883a 	mov	r6,r2
    69cc:	200f883a 	mov	r7,r4
    69d0:	d9400615 	stw	r5,24(sp)
    69d4:	003fc006 	br	68d8 <__divdf3+0x104>
    69d8:	483ff21e 	bne	r9,zero,69a4 <__divdf3+0x1d0>
    69dc:	01004004 	movi	r4,256
    69e0:	7104703a 	and	r2,r14,r4
    69e4:	10c4b03a 	or	r2,r2,r3
    69e8:	103fee1e 	bne	r2,zero,69a4 <__divdf3+0x1d0>
    69ec:	31c4b03a 	or	r2,r6,r7
    69f0:	103fec26 	beq	r2,zero,69a4 <__divdf3+0x1d0>
    69f4:	7205883a 	add	r2,r14,r8
    69f8:	1391803a 	cmpltu	r8,r2,r14
    69fc:	43d1883a 	add	r8,r8,r15
    6a00:	013fc004 	movi	r4,-256
    6a04:	111c703a 	and	r14,r2,r4
    6a08:	401f883a 	mov	r15,r8
    6a0c:	003fe506 	br	69a4 <__divdf3+0x1d0>
    6a10:	8009883a 	mov	r4,r16
    6a14:	003f9206 	br	6860 <__divdf3+0x8c>
    6a18:	9809883a 	mov	r4,r19
    6a1c:	d8000715 	stw	zero,28(sp)
    6a20:	d8000815 	stw	zero,32(sp)
    6a24:	d8000615 	stw	zero,24(sp)
    6a28:	003f8d06 	br	6860 <__divdf3+0x8c>

00006a2c <__gtdf2>:
    6a2c:	deffef04 	addi	sp,sp,-68
    6a30:	dc400f15 	stw	r17,60(sp)
    6a34:	dc400404 	addi	r17,sp,16
    6a38:	2005883a 	mov	r2,r4
    6a3c:	2807883a 	mov	r3,r5
    6a40:	dc000e15 	stw	r16,56(sp)
    6a44:	d809883a 	mov	r4,sp
    6a48:	880b883a 	mov	r5,r17
    6a4c:	dc000904 	addi	r16,sp,36
    6a50:	d8c00115 	stw	r3,4(sp)
    6a54:	d8800015 	stw	r2,0(sp)
    6a58:	d9800215 	stw	r6,8(sp)
    6a5c:	dfc01015 	stw	ra,64(sp)
    6a60:	d9c00315 	stw	r7,12(sp)
    6a64:	00070b00 	call	70b0 <__unpack_d>
    6a68:	d9000204 	addi	r4,sp,8
    6a6c:	800b883a 	mov	r5,r16
    6a70:	00070b00 	call	70b0 <__unpack_d>
    6a74:	d8800417 	ldw	r2,16(sp)
    6a78:	00c00044 	movi	r3,1
    6a7c:	01bfffc4 	movi	r6,-1
    6a80:	1880062e 	bgeu	r3,r2,6a9c <__gtdf2+0x70>
    6a84:	d8800917 	ldw	r2,36(sp)
    6a88:	8809883a 	mov	r4,r17
    6a8c:	800b883a 	mov	r5,r16
    6a90:	1880022e 	bgeu	r3,r2,6a9c <__gtdf2+0x70>
    6a94:	00071e80 	call	71e8 <__fpcmp_parts_d>
    6a98:	100d883a 	mov	r6,r2
    6a9c:	3005883a 	mov	r2,r6
    6aa0:	dfc01017 	ldw	ra,64(sp)
    6aa4:	dc400f17 	ldw	r17,60(sp)
    6aa8:	dc000e17 	ldw	r16,56(sp)
    6aac:	dec01104 	addi	sp,sp,68
    6ab0:	f800283a 	ret

00006ab4 <__floatsidf>:
    6ab4:	2006d7fa 	srli	r3,r4,31
    6ab8:	defff604 	addi	sp,sp,-40
    6abc:	008000c4 	movi	r2,3
    6ac0:	dfc00915 	stw	ra,36(sp)
    6ac4:	dcc00815 	stw	r19,32(sp)
    6ac8:	dc800715 	stw	r18,28(sp)
    6acc:	dc400615 	stw	r17,24(sp)
    6ad0:	dc000515 	stw	r16,20(sp)
    6ad4:	d8800015 	stw	r2,0(sp)
    6ad8:	d8c00115 	stw	r3,4(sp)
    6adc:	20000f1e 	bne	r4,zero,6b1c <__floatsidf+0x68>
    6ae0:	00800084 	movi	r2,2
    6ae4:	d8800015 	stw	r2,0(sp)
    6ae8:	d809883a 	mov	r4,sp
    6aec:	0006d9c0 	call	6d9c <__pack_d>
    6af0:	1009883a 	mov	r4,r2
    6af4:	180b883a 	mov	r5,r3
    6af8:	2005883a 	mov	r2,r4
    6afc:	2807883a 	mov	r3,r5
    6b00:	dfc00917 	ldw	ra,36(sp)
    6b04:	dcc00817 	ldw	r19,32(sp)
    6b08:	dc800717 	ldw	r18,28(sp)
    6b0c:	dc400617 	ldw	r17,24(sp)
    6b10:	dc000517 	ldw	r16,20(sp)
    6b14:	dec00a04 	addi	sp,sp,40
    6b18:	f800283a 	ret
    6b1c:	00800f04 	movi	r2,60
    6b20:	1807003a 	cmpeq	r3,r3,zero
    6b24:	d8800215 	stw	r2,8(sp)
    6b28:	18001126 	beq	r3,zero,6b70 <__floatsidf+0xbc>
    6b2c:	0027883a 	mov	r19,zero
    6b30:	2025883a 	mov	r18,r4
    6b34:	d9000315 	stw	r4,12(sp)
    6b38:	dcc00415 	stw	r19,16(sp)
    6b3c:	0006d1c0 	call	6d1c <__clzsi2>
    6b40:	11000744 	addi	r4,r2,29
    6b44:	013fe80e 	bge	zero,r4,6ae8 <__floatsidf+0x34>
    6b48:	10bfff44 	addi	r2,r2,-3
    6b4c:	10000c16 	blt	r2,zero,6b80 <__floatsidf+0xcc>
    6b50:	90a2983a 	sll	r17,r18,r2
    6b54:	0021883a 	mov	r16,zero
    6b58:	d8800217 	ldw	r2,8(sp)
    6b5c:	dc400415 	stw	r17,16(sp)
    6b60:	dc000315 	stw	r16,12(sp)
    6b64:	1105c83a 	sub	r2,r2,r4
    6b68:	d8800215 	stw	r2,8(sp)
    6b6c:	003fde06 	br	6ae8 <__floatsidf+0x34>
    6b70:	00a00034 	movhi	r2,32768
    6b74:	20800a26 	beq	r4,r2,6ba0 <__floatsidf+0xec>
    6b78:	0109c83a 	sub	r4,zero,r4
    6b7c:	003feb06 	br	6b2c <__floatsidf+0x78>
    6b80:	9006d07a 	srli	r3,r18,1
    6b84:	008007c4 	movi	r2,31
    6b88:	1105c83a 	sub	r2,r2,r4
    6b8c:	1886d83a 	srl	r3,r3,r2
    6b90:	9922983a 	sll	r17,r19,r4
    6b94:	9120983a 	sll	r16,r18,r4
    6b98:	1c62b03a 	or	r17,r3,r17
    6b9c:	003fee06 	br	6b58 <__floatsidf+0xa4>
    6ba0:	0009883a 	mov	r4,zero
    6ba4:	01707834 	movhi	r5,49632
    6ba8:	003fd306 	br	6af8 <__floatsidf+0x44>

00006bac <__fixdfsi>:
    6bac:	defff804 	addi	sp,sp,-32
    6bb0:	2005883a 	mov	r2,r4
    6bb4:	2807883a 	mov	r3,r5
    6bb8:	d809883a 	mov	r4,sp
    6bbc:	d9400204 	addi	r5,sp,8
    6bc0:	d8c00115 	stw	r3,4(sp)
    6bc4:	d8800015 	stw	r2,0(sp)
    6bc8:	dfc00715 	stw	ra,28(sp)
    6bcc:	00070b00 	call	70b0 <__unpack_d>
    6bd0:	d8c00217 	ldw	r3,8(sp)
    6bd4:	00800084 	movi	r2,2
    6bd8:	1880051e 	bne	r3,r2,6bf0 <__fixdfsi+0x44>
    6bdc:	0007883a 	mov	r3,zero
    6be0:	1805883a 	mov	r2,r3
    6be4:	dfc00717 	ldw	ra,28(sp)
    6be8:	dec00804 	addi	sp,sp,32
    6bec:	f800283a 	ret
    6bf0:	00800044 	movi	r2,1
    6bf4:	10fff92e 	bgeu	r2,r3,6bdc <__fixdfsi+0x30>
    6bf8:	00800104 	movi	r2,4
    6bfc:	18800426 	beq	r3,r2,6c10 <__fixdfsi+0x64>
    6c00:	d8c00417 	ldw	r3,16(sp)
    6c04:	183ff516 	blt	r3,zero,6bdc <__fixdfsi+0x30>
    6c08:	00800784 	movi	r2,30
    6c0c:	10c0080e 	bge	r2,r3,6c30 <__fixdfsi+0x84>
    6c10:	d8800317 	ldw	r2,12(sp)
    6c14:	1000121e 	bne	r2,zero,6c60 <__fixdfsi+0xb4>
    6c18:	00e00034 	movhi	r3,32768
    6c1c:	18ffffc4 	addi	r3,r3,-1
    6c20:	1805883a 	mov	r2,r3
    6c24:	dfc00717 	ldw	ra,28(sp)
    6c28:	dec00804 	addi	sp,sp,32
    6c2c:	f800283a 	ret
    6c30:	00800f04 	movi	r2,60
    6c34:	10d1c83a 	sub	r8,r2,r3
    6c38:	40bff804 	addi	r2,r8,-32
    6c3c:	d9800517 	ldw	r6,20(sp)
    6c40:	d9c00617 	ldw	r7,24(sp)
    6c44:	10000816 	blt	r2,zero,6c68 <__fixdfsi+0xbc>
    6c48:	3888d83a 	srl	r4,r7,r2
    6c4c:	d8800317 	ldw	r2,12(sp)
    6c50:	2007883a 	mov	r3,r4
    6c54:	103fe226 	beq	r2,zero,6be0 <__fixdfsi+0x34>
    6c58:	0107c83a 	sub	r3,zero,r4
    6c5c:	003fe006 	br	6be0 <__fixdfsi+0x34>
    6c60:	00e00034 	movhi	r3,32768
    6c64:	003fde06 	br	6be0 <__fixdfsi+0x34>
    6c68:	39c7883a 	add	r3,r7,r7
    6c6c:	008007c4 	movi	r2,31
    6c70:	1205c83a 	sub	r2,r2,r8
    6c74:	1886983a 	sll	r3,r3,r2
    6c78:	3208d83a 	srl	r4,r6,r8
    6c7c:	1908b03a 	or	r4,r3,r4
    6c80:	003ff206 	br	6c4c <__fixdfsi+0xa0>

00006c84 <__muldi3>:
    6c84:	2011883a 	mov	r8,r4
    6c88:	427fffcc 	andi	r9,r8,65535
    6c8c:	4018d43a 	srli	r12,r8,16
    6c90:	32bfffcc 	andi	r10,r6,65535
    6c94:	3016d43a 	srli	r11,r6,16
    6c98:	4a85383a 	mul	r2,r9,r10
    6c9c:	6295383a 	mul	r10,r12,r10
    6ca0:	4ad3383a 	mul	r9,r9,r11
    6ca4:	113fffcc 	andi	r4,r2,65535
    6ca8:	1004d43a 	srli	r2,r2,16
    6cac:	4a93883a 	add	r9,r9,r10
    6cb0:	3807883a 	mov	r3,r7
    6cb4:	1245883a 	add	r2,r2,r9
    6cb8:	280f883a 	mov	r7,r5
    6cbc:	180b883a 	mov	r5,r3
    6cc0:	1006943a 	slli	r3,r2,16
    6cc4:	defffd04 	addi	sp,sp,-12
    6cc8:	dc800215 	stw	r18,8(sp)
    6ccc:	1907883a 	add	r3,r3,r4
    6cd0:	dc400115 	stw	r17,4(sp)
    6cd4:	dc000015 	stw	r16,0(sp)
    6cd8:	4165383a 	mul	r18,r8,r5
    6cdc:	31e3383a 	mul	r17,r6,r7
    6ce0:	1012d43a 	srli	r9,r2,16
    6ce4:	62d9383a 	mul	r12,r12,r11
    6ce8:	181f883a 	mov	r15,r3
    6cec:	1280022e 	bgeu	r2,r10,6cf8 <__muldi3+0x74>
    6cf0:	00800074 	movhi	r2,1
    6cf4:	6099883a 	add	r12,r12,r2
    6cf8:	624d883a 	add	r6,r12,r9
    6cfc:	9187883a 	add	r3,r18,r6
    6d00:	88c7883a 	add	r3,r17,r3
    6d04:	7805883a 	mov	r2,r15
    6d08:	dc800217 	ldw	r18,8(sp)
    6d0c:	dc400117 	ldw	r17,4(sp)
    6d10:	dc000017 	ldw	r16,0(sp)
    6d14:	dec00304 	addi	sp,sp,12
    6d18:	f800283a 	ret

00006d1c <__clzsi2>:
    6d1c:	00bfffd4 	movui	r2,65535
    6d20:	11000e36 	bltu	r2,r4,6d5c <__clzsi2+0x40>
    6d24:	00803fc4 	movi	r2,255
    6d28:	01400204 	movi	r5,8
    6d2c:	0007883a 	mov	r3,zero
    6d30:	11001036 	bltu	r2,r4,6d74 <__clzsi2+0x58>
    6d34:	000b883a 	mov	r5,zero
    6d38:	20c6d83a 	srl	r3,r4,r3
    6d3c:	00820034 	movhi	r2,2048
    6d40:	1080a504 	addi	r2,r2,660
    6d44:	1887883a 	add	r3,r3,r2
    6d48:	18800003 	ldbu	r2,0(r3)
    6d4c:	00c00804 	movi	r3,32
    6d50:	2885883a 	add	r2,r5,r2
    6d54:	1885c83a 	sub	r2,r3,r2
    6d58:	f800283a 	ret
    6d5c:	01400404 	movi	r5,16
    6d60:	00804034 	movhi	r2,256
    6d64:	10bfffc4 	addi	r2,r2,-1
    6d68:	2807883a 	mov	r3,r5
    6d6c:	113ff22e 	bgeu	r2,r4,6d38 <__clzsi2+0x1c>
    6d70:	01400604 	movi	r5,24
    6d74:	2807883a 	mov	r3,r5
    6d78:	20c6d83a 	srl	r3,r4,r3
    6d7c:	00820034 	movhi	r2,2048
    6d80:	1080a504 	addi	r2,r2,660
    6d84:	1887883a 	add	r3,r3,r2
    6d88:	18800003 	ldbu	r2,0(r3)
    6d8c:	00c00804 	movi	r3,32
    6d90:	2885883a 	add	r2,r5,r2
    6d94:	1885c83a 	sub	r2,r3,r2
    6d98:	f800283a 	ret

00006d9c <__pack_d>:
    6d9c:	20c00017 	ldw	r3,0(r4)
    6da0:	defffd04 	addi	sp,sp,-12
    6da4:	dc000015 	stw	r16,0(sp)
    6da8:	dc800215 	stw	r18,8(sp)
    6dac:	dc400115 	stw	r17,4(sp)
    6db0:	00800044 	movi	r2,1
    6db4:	22000317 	ldw	r8,12(r4)
    6db8:	001f883a 	mov	r15,zero
    6dbc:	22400417 	ldw	r9,16(r4)
    6dc0:	24000117 	ldw	r16,4(r4)
    6dc4:	10c0552e 	bgeu	r2,r3,6f1c <__pack_d+0x180>
    6dc8:	00800104 	movi	r2,4
    6dcc:	18804f26 	beq	r3,r2,6f0c <__pack_d+0x170>
    6dd0:	00800084 	movi	r2,2
    6dd4:	18800226 	beq	r3,r2,6de0 <__pack_d+0x44>
    6dd8:	4244b03a 	or	r2,r8,r9
    6ddc:	10001a1e 	bne	r2,zero,6e48 <__pack_d+0xac>
    6de0:	000d883a 	mov	r6,zero
    6de4:	000f883a 	mov	r7,zero
    6de8:	0011883a 	mov	r8,zero
    6dec:	00800434 	movhi	r2,16
    6df0:	10bfffc4 	addi	r2,r2,-1
    6df4:	301d883a 	mov	r14,r6
    6df8:	3884703a 	and	r2,r7,r2
    6dfc:	400a953a 	slli	r5,r8,20
    6e00:	79bffc2c 	andhi	r6,r15,65520
    6e04:	308cb03a 	or	r6,r6,r2
    6e08:	00e00434 	movhi	r3,32784
    6e0c:	18ffffc4 	addi	r3,r3,-1
    6e10:	800497fa 	slli	r2,r16,31
    6e14:	30c6703a 	and	r3,r6,r3
    6e18:	1946b03a 	or	r3,r3,r5
    6e1c:	01600034 	movhi	r5,32768
    6e20:	297fffc4 	addi	r5,r5,-1
    6e24:	194a703a 	and	r5,r3,r5
    6e28:	288ab03a 	or	r5,r5,r2
    6e2c:	2807883a 	mov	r3,r5
    6e30:	7005883a 	mov	r2,r14
    6e34:	dc800217 	ldw	r18,8(sp)
    6e38:	dc400117 	ldw	r17,4(sp)
    6e3c:	dc000017 	ldw	r16,0(sp)
    6e40:	dec00304 	addi	sp,sp,12
    6e44:	f800283a 	ret
    6e48:	21000217 	ldw	r4,8(r4)
    6e4c:	00bf0084 	movi	r2,-1022
    6e50:	20803f16 	blt	r4,r2,6f50 <__pack_d+0x1b4>
    6e54:	0080ffc4 	movi	r2,1023
    6e58:	11002c16 	blt	r2,r4,6f0c <__pack_d+0x170>
    6e5c:	00803fc4 	movi	r2,255
    6e60:	408c703a 	and	r6,r8,r2
    6e64:	00802004 	movi	r2,128
    6e68:	0007883a 	mov	r3,zero
    6e6c:	000f883a 	mov	r7,zero
    6e70:	2280ffc4 	addi	r10,r4,1023
    6e74:	30801e26 	beq	r6,r2,6ef0 <__pack_d+0x154>
    6e78:	00801fc4 	movi	r2,127
    6e7c:	4089883a 	add	r4,r8,r2
    6e80:	220d803a 	cmpltu	r6,r4,r8
    6e84:	324d883a 	add	r6,r6,r9
    6e88:	2011883a 	mov	r8,r4
    6e8c:	3013883a 	mov	r9,r6
    6e90:	00880034 	movhi	r2,8192
    6e94:	10bfffc4 	addi	r2,r2,-1
    6e98:	12400d36 	bltu	r2,r9,6ed0 <__pack_d+0x134>
    6e9c:	4804963a 	slli	r2,r9,24
    6ea0:	400cd23a 	srli	r6,r8,8
    6ea4:	480ed23a 	srli	r7,r9,8
    6ea8:	013fffc4 	movi	r4,-1
    6eac:	118cb03a 	or	r6,r2,r6
    6eb0:	01400434 	movhi	r5,16
    6eb4:	297fffc4 	addi	r5,r5,-1
    6eb8:	3104703a 	and	r2,r6,r4
    6ebc:	3946703a 	and	r3,r7,r5
    6ec0:	5201ffcc 	andi	r8,r10,2047
    6ec4:	100d883a 	mov	r6,r2
    6ec8:	180f883a 	mov	r7,r3
    6ecc:	003fc706 	br	6dec <__pack_d+0x50>
    6ed0:	480897fa 	slli	r4,r9,31
    6ed4:	4004d07a 	srli	r2,r8,1
    6ed8:	4806d07a 	srli	r3,r9,1
    6edc:	52800044 	addi	r10,r10,1
    6ee0:	2084b03a 	or	r2,r4,r2
    6ee4:	1011883a 	mov	r8,r2
    6ee8:	1813883a 	mov	r9,r3
    6eec:	003feb06 	br	6e9c <__pack_d+0x100>
    6ef0:	383fe11e 	bne	r7,zero,6e78 <__pack_d+0xdc>
    6ef4:	01004004 	movi	r4,256
    6ef8:	4104703a 	and	r2,r8,r4
    6efc:	10c4b03a 	or	r2,r2,r3
    6f00:	103fe326 	beq	r2,zero,6e90 <__pack_d+0xf4>
    6f04:	3005883a 	mov	r2,r6
    6f08:	003fdc06 	br	6e7c <__pack_d+0xe0>
    6f0c:	000d883a 	mov	r6,zero
    6f10:	000f883a 	mov	r7,zero
    6f14:	0201ffc4 	movi	r8,2047
    6f18:	003fb406 	br	6dec <__pack_d+0x50>
    6f1c:	0005883a 	mov	r2,zero
    6f20:	00c00234 	movhi	r3,8
    6f24:	408cb03a 	or	r6,r8,r2
    6f28:	48ceb03a 	or	r7,r9,r3
    6f2c:	013fffc4 	movi	r4,-1
    6f30:	01400434 	movhi	r5,16
    6f34:	297fffc4 	addi	r5,r5,-1
    6f38:	3104703a 	and	r2,r6,r4
    6f3c:	3946703a 	and	r3,r7,r5
    6f40:	100d883a 	mov	r6,r2
    6f44:	180f883a 	mov	r7,r3
    6f48:	0201ffc4 	movi	r8,2047
    6f4c:	003fa706 	br	6dec <__pack_d+0x50>
    6f50:	1109c83a 	sub	r4,r2,r4
    6f54:	00800e04 	movi	r2,56
    6f58:	11004316 	blt	r2,r4,7068 <__pack_d+0x2cc>
    6f5c:	21fff804 	addi	r7,r4,-32
    6f60:	38004516 	blt	r7,zero,7078 <__pack_d+0x2dc>
    6f64:	49d8d83a 	srl	r12,r9,r7
    6f68:	001b883a 	mov	r13,zero
    6f6c:	0023883a 	mov	r17,zero
    6f70:	01400044 	movi	r5,1
    6f74:	0025883a 	mov	r18,zero
    6f78:	38004716 	blt	r7,zero,7098 <__pack_d+0x2fc>
    6f7c:	29d6983a 	sll	r11,r5,r7
    6f80:	0015883a 	mov	r10,zero
    6f84:	00bfffc4 	movi	r2,-1
    6f88:	5089883a 	add	r4,r10,r2
    6f8c:	588b883a 	add	r5,r11,r2
    6f90:	228d803a 	cmpltu	r6,r4,r10
    6f94:	314b883a 	add	r5,r6,r5
    6f98:	4104703a 	and	r2,r8,r4
    6f9c:	4946703a 	and	r3,r9,r5
    6fa0:	10c4b03a 	or	r2,r2,r3
    6fa4:	10000226 	beq	r2,zero,6fb0 <__pack_d+0x214>
    6fa8:	04400044 	movi	r17,1
    6fac:	0025883a 	mov	r18,zero
    6fb0:	00803fc4 	movi	r2,255
    6fb4:	644eb03a 	or	r7,r12,r17
    6fb8:	3892703a 	and	r9,r7,r2
    6fbc:	00802004 	movi	r2,128
    6fc0:	6c90b03a 	or	r8,r13,r18
    6fc4:	0015883a 	mov	r10,zero
    6fc8:	48801626 	beq	r9,r2,7024 <__pack_d+0x288>
    6fcc:	01001fc4 	movi	r4,127
    6fd0:	3905883a 	add	r2,r7,r4
    6fd4:	11cd803a 	cmpltu	r6,r2,r7
    6fd8:	320d883a 	add	r6,r6,r8
    6fdc:	100f883a 	mov	r7,r2
    6fe0:	00840034 	movhi	r2,4096
    6fe4:	10bfffc4 	addi	r2,r2,-1
    6fe8:	3011883a 	mov	r8,r6
    6fec:	0007883a 	mov	r3,zero
    6ff0:	11801b36 	bltu	r2,r6,7060 <__pack_d+0x2c4>
    6ff4:	4004963a 	slli	r2,r8,24
    6ff8:	3808d23a 	srli	r4,r7,8
    6ffc:	400ad23a 	srli	r5,r8,8
    7000:	1813883a 	mov	r9,r3
    7004:	1108b03a 	or	r4,r2,r4
    7008:	00bfffc4 	movi	r2,-1
    700c:	00c00434 	movhi	r3,16
    7010:	18ffffc4 	addi	r3,r3,-1
    7014:	208c703a 	and	r6,r4,r2
    7018:	28ce703a 	and	r7,r5,r3
    701c:	4a01ffcc 	andi	r8,r9,2047
    7020:	003f7206 	br	6dec <__pack_d+0x50>
    7024:	503fe91e 	bne	r10,zero,6fcc <__pack_d+0x230>
    7028:	01004004 	movi	r4,256
    702c:	3904703a 	and	r2,r7,r4
    7030:	0007883a 	mov	r3,zero
    7034:	10c4b03a 	or	r2,r2,r3
    7038:	10000626 	beq	r2,zero,7054 <__pack_d+0x2b8>
    703c:	3a45883a 	add	r2,r7,r9
    7040:	11cd803a 	cmpltu	r6,r2,r7
    7044:	320d883a 	add	r6,r6,r8
    7048:	100f883a 	mov	r7,r2
    704c:	3011883a 	mov	r8,r6
    7050:	0007883a 	mov	r3,zero
    7054:	00840034 	movhi	r2,4096
    7058:	10bfffc4 	addi	r2,r2,-1
    705c:	123fe52e 	bgeu	r2,r8,6ff4 <__pack_d+0x258>
    7060:	00c00044 	movi	r3,1
    7064:	003fe306 	br	6ff4 <__pack_d+0x258>
    7068:	0009883a 	mov	r4,zero
    706c:	0013883a 	mov	r9,zero
    7070:	000b883a 	mov	r5,zero
    7074:	003fe406 	br	7008 <__pack_d+0x26c>
    7078:	4a47883a 	add	r3,r9,r9
    707c:	008007c4 	movi	r2,31
    7080:	1105c83a 	sub	r2,r2,r4
    7084:	1886983a 	sll	r3,r3,r2
    7088:	4118d83a 	srl	r12,r8,r4
    708c:	491ad83a 	srl	r13,r9,r4
    7090:	1b18b03a 	or	r12,r3,r12
    7094:	003fb506 	br	6f6c <__pack_d+0x1d0>
    7098:	2806d07a 	srli	r3,r5,1
    709c:	008007c4 	movi	r2,31
    70a0:	1105c83a 	sub	r2,r2,r4
    70a4:	1896d83a 	srl	r11,r3,r2
    70a8:	2914983a 	sll	r10,r5,r4
    70ac:	003fb506 	br	6f84 <__pack_d+0x1e8>

000070b0 <__unpack_d>:
    70b0:	20c00117 	ldw	r3,4(r4)
    70b4:	22400017 	ldw	r9,0(r4)
    70b8:	00800434 	movhi	r2,16
    70bc:	10bfffc4 	addi	r2,r2,-1
    70c0:	1808d53a 	srli	r4,r3,20
    70c4:	180cd7fa 	srli	r6,r3,31
    70c8:	1894703a 	and	r10,r3,r2
    70cc:	2201ffcc 	andi	r8,r4,2047
    70d0:	281b883a 	mov	r13,r5
    70d4:	4817883a 	mov	r11,r9
    70d8:	29800115 	stw	r6,4(r5)
    70dc:	5019883a 	mov	r12,r10
    70e0:	40001e1e 	bne	r8,zero,715c <__unpack_d+0xac>
    70e4:	4a84b03a 	or	r2,r9,r10
    70e8:	10001926 	beq	r2,zero,7150 <__unpack_d+0xa0>
    70ec:	4804d63a 	srli	r2,r9,24
    70f0:	500c923a 	slli	r6,r10,8
    70f4:	013f0084 	movi	r4,-1022
    70f8:	00c40034 	movhi	r3,4096
    70fc:	18ffffc4 	addi	r3,r3,-1
    7100:	118cb03a 	or	r6,r2,r6
    7104:	008000c4 	movi	r2,3
    7108:	480a923a 	slli	r5,r9,8
    710c:	68800015 	stw	r2,0(r13)
    7110:	69000215 	stw	r4,8(r13)
    7114:	19800b36 	bltu	r3,r6,7144 <__unpack_d+0x94>
    7118:	200f883a 	mov	r7,r4
    711c:	1811883a 	mov	r8,r3
    7120:	2945883a 	add	r2,r5,r5
    7124:	1149803a 	cmpltu	r4,r2,r5
    7128:	3187883a 	add	r3,r6,r6
    712c:	20c9883a 	add	r4,r4,r3
    7130:	100b883a 	mov	r5,r2
    7134:	200d883a 	mov	r6,r4
    7138:	39ffffc4 	addi	r7,r7,-1
    713c:	413ff82e 	bgeu	r8,r4,7120 <__unpack_d+0x70>
    7140:	69c00215 	stw	r7,8(r13)
    7144:	69800415 	stw	r6,16(r13)
    7148:	69400315 	stw	r5,12(r13)
    714c:	f800283a 	ret
    7150:	00800084 	movi	r2,2
    7154:	28800015 	stw	r2,0(r5)
    7158:	f800283a 	ret
    715c:	0081ffc4 	movi	r2,2047
    7160:	40800f26 	beq	r8,r2,71a0 <__unpack_d+0xf0>
    7164:	480cd63a 	srli	r6,r9,24
    7168:	5006923a 	slli	r3,r10,8
    716c:	4804923a 	slli	r2,r9,8
    7170:	0009883a 	mov	r4,zero
    7174:	30c6b03a 	or	r3,r6,r3
    7178:	01440034 	movhi	r5,4096
    717c:	110cb03a 	or	r6,r2,r4
    7180:	423f0044 	addi	r8,r8,-1023
    7184:	194eb03a 	or	r7,r3,r5
    7188:	008000c4 	movi	r2,3
    718c:	69c00415 	stw	r7,16(r13)
    7190:	6a000215 	stw	r8,8(r13)
    7194:	68800015 	stw	r2,0(r13)
    7198:	69800315 	stw	r6,12(r13)
    719c:	f800283a 	ret
    71a0:	4a84b03a 	or	r2,r9,r10
    71a4:	1000031e 	bne	r2,zero,71b4 <__unpack_d+0x104>
    71a8:	00800104 	movi	r2,4
    71ac:	28800015 	stw	r2,0(r5)
    71b0:	f800283a 	ret
    71b4:	0009883a 	mov	r4,zero
    71b8:	01400234 	movhi	r5,8
    71bc:	4904703a 	and	r2,r9,r4
    71c0:	5146703a 	and	r3,r10,r5
    71c4:	10c4b03a 	or	r2,r2,r3
    71c8:	10000526 	beq	r2,zero,71e0 <__unpack_d+0x130>
    71cc:	00800044 	movi	r2,1
    71d0:	68800015 	stw	r2,0(r13)
    71d4:	6b000415 	stw	r12,16(r13)
    71d8:	6ac00315 	stw	r11,12(r13)
    71dc:	f800283a 	ret
    71e0:	68000015 	stw	zero,0(r13)
    71e4:	003ffb06 	br	71d4 <__unpack_d+0x124>

000071e8 <__fpcmp_parts_d>:
    71e8:	21800017 	ldw	r6,0(r4)
    71ec:	00c00044 	movi	r3,1
    71f0:	19800a2e 	bgeu	r3,r6,721c <__fpcmp_parts_d+0x34>
    71f4:	28800017 	ldw	r2,0(r5)
    71f8:	1880082e 	bgeu	r3,r2,721c <__fpcmp_parts_d+0x34>
    71fc:	00c00104 	movi	r3,4
    7200:	30c02626 	beq	r6,r3,729c <__fpcmp_parts_d+0xb4>
    7204:	10c02226 	beq	r2,r3,7290 <__fpcmp_parts_d+0xa8>
    7208:	00c00084 	movi	r3,2
    720c:	30c00526 	beq	r6,r3,7224 <__fpcmp_parts_d+0x3c>
    7210:	10c0071e 	bne	r2,r3,7230 <__fpcmp_parts_d+0x48>
    7214:	20800117 	ldw	r2,4(r4)
    7218:	1000091e 	bne	r2,zero,7240 <__fpcmp_parts_d+0x58>
    721c:	00800044 	movi	r2,1
    7220:	f800283a 	ret
    7224:	10c01a1e 	bne	r2,r3,7290 <__fpcmp_parts_d+0xa8>
    7228:	0005883a 	mov	r2,zero
    722c:	f800283a 	ret
    7230:	22000117 	ldw	r8,4(r4)
    7234:	28800117 	ldw	r2,4(r5)
    7238:	40800326 	beq	r8,r2,7248 <__fpcmp_parts_d+0x60>
    723c:	403ff726 	beq	r8,zero,721c <__fpcmp_parts_d+0x34>
    7240:	00bfffc4 	movi	r2,-1
    7244:	f800283a 	ret
    7248:	20c00217 	ldw	r3,8(r4)
    724c:	28800217 	ldw	r2,8(r5)
    7250:	10fffa16 	blt	r2,r3,723c <__fpcmp_parts_d+0x54>
    7254:	18800916 	blt	r3,r2,727c <__fpcmp_parts_d+0x94>
    7258:	21c00417 	ldw	r7,16(r4)
    725c:	28c00417 	ldw	r3,16(r5)
    7260:	21800317 	ldw	r6,12(r4)
    7264:	28800317 	ldw	r2,12(r5)
    7268:	19fff436 	bltu	r3,r7,723c <__fpcmp_parts_d+0x54>
    726c:	38c00526 	beq	r7,r3,7284 <__fpcmp_parts_d+0x9c>
    7270:	38c00236 	bltu	r7,r3,727c <__fpcmp_parts_d+0x94>
    7274:	19ffec1e 	bne	r3,r7,7228 <__fpcmp_parts_d+0x40>
    7278:	30bfeb2e 	bgeu	r6,r2,7228 <__fpcmp_parts_d+0x40>
    727c:	403fe71e 	bne	r8,zero,721c <__fpcmp_parts_d+0x34>
    7280:	003fef06 	br	7240 <__fpcmp_parts_d+0x58>
    7284:	11bffa2e 	bgeu	r2,r6,7270 <__fpcmp_parts_d+0x88>
    7288:	403fe426 	beq	r8,zero,721c <__fpcmp_parts_d+0x34>
    728c:	003fec06 	br	7240 <__fpcmp_parts_d+0x58>
    7290:	28800117 	ldw	r2,4(r5)
    7294:	103fe11e 	bne	r2,zero,721c <__fpcmp_parts_d+0x34>
    7298:	003fe906 	br	7240 <__fpcmp_parts_d+0x58>
    729c:	11bfdd1e 	bne	r2,r6,7214 <__fpcmp_parts_d+0x2c>
    72a0:	28c00117 	ldw	r3,4(r5)
    72a4:	20800117 	ldw	r2,4(r4)
    72a8:	1885c83a 	sub	r2,r3,r2
    72ac:	f800283a 	ret

000072b0 <memcmp>:
    72b0:	00c000c4 	movi	r3,3
    72b4:	1980032e 	bgeu	r3,r6,72c4 <memcmp+0x14>
    72b8:	2144b03a 	or	r2,r4,r5
    72bc:	10c4703a 	and	r2,r2,r3
    72c0:	10000f26 	beq	r2,zero,7300 <memcmp+0x50>
    72c4:	31ffffc4 	addi	r7,r6,-1
    72c8:	3000061e 	bne	r6,zero,72e4 <memcmp+0x34>
    72cc:	00000a06 	br	72f8 <memcmp+0x48>
    72d0:	39ffffc4 	addi	r7,r7,-1
    72d4:	00bfffc4 	movi	r2,-1
    72d8:	21000044 	addi	r4,r4,1
    72dc:	29400044 	addi	r5,r5,1
    72e0:	38800526 	beq	r7,r2,72f8 <memcmp+0x48>
    72e4:	20c00003 	ldbu	r3,0(r4)
    72e8:	28800003 	ldbu	r2,0(r5)
    72ec:	18bff826 	beq	r3,r2,72d0 <memcmp+0x20>
    72f0:	1885c83a 	sub	r2,r3,r2
    72f4:	f800283a 	ret
    72f8:	0005883a 	mov	r2,zero
    72fc:	f800283a 	ret
    7300:	180f883a 	mov	r7,r3
    7304:	20c00017 	ldw	r3,0(r4)
    7308:	28800017 	ldw	r2,0(r5)
    730c:	18bfed1e 	bne	r3,r2,72c4 <memcmp+0x14>
    7310:	31bfff04 	addi	r6,r6,-4
    7314:	21000104 	addi	r4,r4,4
    7318:	29400104 	addi	r5,r5,4
    731c:	39bff936 	bltu	r7,r6,7304 <memcmp+0x54>
    7320:	003fe806 	br	72c4 <memcmp+0x14>

00007324 <memcpy>:
    7324:	01c003c4 	movi	r7,15
    7328:	2007883a 	mov	r3,r4
    732c:	3980032e 	bgeu	r7,r6,733c <memcpy+0x18>
    7330:	2904b03a 	or	r2,r5,r4
    7334:	108000cc 	andi	r2,r2,3
    7338:	10000926 	beq	r2,zero,7360 <memcpy+0x3c>
    733c:	30000626 	beq	r6,zero,7358 <memcpy+0x34>
    7340:	30cd883a 	add	r6,r6,r3
    7344:	28800003 	ldbu	r2,0(r5)
    7348:	29400044 	addi	r5,r5,1
    734c:	18800005 	stb	r2,0(r3)
    7350:	18c00044 	addi	r3,r3,1
    7354:	30fffb1e 	bne	r6,r3,7344 <memcpy+0x20>
    7358:	2005883a 	mov	r2,r4
    735c:	f800283a 	ret
    7360:	3811883a 	mov	r8,r7
    7364:	200f883a 	mov	r7,r4
    7368:	28c00017 	ldw	r3,0(r5)
    736c:	31bffc04 	addi	r6,r6,-16
    7370:	38c00015 	stw	r3,0(r7)
    7374:	28800117 	ldw	r2,4(r5)
    7378:	38800115 	stw	r2,4(r7)
    737c:	28c00217 	ldw	r3,8(r5)
    7380:	38c00215 	stw	r3,8(r7)
    7384:	28800317 	ldw	r2,12(r5)
    7388:	29400404 	addi	r5,r5,16
    738c:	38800315 	stw	r2,12(r7)
    7390:	39c00404 	addi	r7,r7,16
    7394:	41bff436 	bltu	r8,r6,7368 <memcpy+0x44>
    7398:	008000c4 	movi	r2,3
    739c:	1180072e 	bgeu	r2,r6,73bc <memcpy+0x98>
    73a0:	1007883a 	mov	r3,r2
    73a4:	28800017 	ldw	r2,0(r5)
    73a8:	31bfff04 	addi	r6,r6,-4
    73ac:	29400104 	addi	r5,r5,4
    73b0:	38800015 	stw	r2,0(r7)
    73b4:	39c00104 	addi	r7,r7,4
    73b8:	19bffa36 	bltu	r3,r6,73a4 <memcpy+0x80>
    73bc:	3807883a 	mov	r3,r7
    73c0:	003fde06 	br	733c <memcpy+0x18>

000073c4 <memset>:
    73c4:	008000c4 	movi	r2,3
    73c8:	29403fcc 	andi	r5,r5,255
    73cc:	2007883a 	mov	r3,r4
    73d0:	1180022e 	bgeu	r2,r6,73dc <memset+0x18>
    73d4:	2084703a 	and	r2,r4,r2
    73d8:	10000826 	beq	r2,zero,73fc <memset+0x38>
    73dc:	30000526 	beq	r6,zero,73f4 <memset+0x30>
    73e0:	2805883a 	mov	r2,r5
    73e4:	30cd883a 	add	r6,r6,r3
    73e8:	18800005 	stb	r2,0(r3)
    73ec:	18c00044 	addi	r3,r3,1
    73f0:	19bffd1e 	bne	r3,r6,73e8 <memset+0x24>
    73f4:	2005883a 	mov	r2,r4
    73f8:	f800283a 	ret
    73fc:	2804923a 	slli	r2,r5,8
    7400:	020003c4 	movi	r8,15
    7404:	200f883a 	mov	r7,r4
    7408:	2884b03a 	or	r2,r5,r2
    740c:	1006943a 	slli	r3,r2,16
    7410:	10c6b03a 	or	r3,r2,r3
    7414:	41800a2e 	bgeu	r8,r6,7440 <memset+0x7c>
    7418:	4005883a 	mov	r2,r8
    741c:	31bffc04 	addi	r6,r6,-16
    7420:	38c00015 	stw	r3,0(r7)
    7424:	38c00115 	stw	r3,4(r7)
    7428:	38c00215 	stw	r3,8(r7)
    742c:	38c00315 	stw	r3,12(r7)
    7430:	39c00404 	addi	r7,r7,16
    7434:	11bff936 	bltu	r2,r6,741c <memset+0x58>
    7438:	008000c4 	movi	r2,3
    743c:	1180052e 	bgeu	r2,r6,7454 <memset+0x90>
    7440:	31bfff04 	addi	r6,r6,-4
    7444:	008000c4 	movi	r2,3
    7448:	38c00015 	stw	r3,0(r7)
    744c:	39c00104 	addi	r7,r7,4
    7450:	11bffb36 	bltu	r2,r6,7440 <memset+0x7c>
    7454:	3807883a 	mov	r3,r7
    7458:	003fe006 	br	73dc <memset+0x18>

0000745c <printf>:
    745c:	defffb04 	addi	sp,sp,-20
    7460:	dfc00115 	stw	ra,4(sp)
    7464:	d9400215 	stw	r5,8(sp)
    7468:	d9800315 	stw	r6,12(sp)
    746c:	d9c00415 	stw	r7,16(sp)
    7470:	00820034 	movhi	r2,2048
    7474:	1089ba04 	addi	r2,r2,9960
    7478:	10c00017 	ldw	r3,0(r2)
    747c:	200b883a 	mov	r5,r4
    7480:	d8800204 	addi	r2,sp,8
    7484:	19000217 	ldw	r4,8(r3)
    7488:	100d883a 	mov	r6,r2
    748c:	d8800015 	stw	r2,0(sp)
    7490:	00095f80 	call	95f8 <__vfprintf_internal>
    7494:	dfc00117 	ldw	ra,4(sp)
    7498:	dec00504 	addi	sp,sp,20
    749c:	f800283a 	ret

000074a0 <_printf_r>:
    74a0:	defffc04 	addi	sp,sp,-16
    74a4:	dfc00115 	stw	ra,4(sp)
    74a8:	d9800215 	stw	r6,8(sp)
    74ac:	d9c00315 	stw	r7,12(sp)
    74b0:	280d883a 	mov	r6,r5
    74b4:	21400217 	ldw	r5,8(r4)
    74b8:	d8c00204 	addi	r3,sp,8
    74bc:	180f883a 	mov	r7,r3
    74c0:	d8c00015 	stw	r3,0(sp)
    74c4:	000774c0 	call	774c <___vfprintf_internal_r>
    74c8:	dfc00117 	ldw	ra,4(sp)
    74cc:	dec00404 	addi	sp,sp,16
    74d0:	f800283a 	ret

000074d4 <putchar>:
    74d4:	00820034 	movhi	r2,2048
    74d8:	1089ba04 	addi	r2,r2,9960
    74dc:	11800017 	ldw	r6,0(r2)
    74e0:	200b883a 	mov	r5,r4
    74e4:	3009883a 	mov	r4,r6
    74e8:	31800217 	ldw	r6,8(r6)
    74ec:	000dac41 	jmpi	dac4 <_putc_r>

000074f0 <_putchar_r>:
    74f0:	21800217 	ldw	r6,8(r4)
    74f4:	000dac41 	jmpi	dac4 <_putc_r>

000074f8 <_puts_r>:
    74f8:	defff604 	addi	sp,sp,-40
    74fc:	dc400715 	stw	r17,28(sp)
    7500:	2023883a 	mov	r17,r4
    7504:	2809883a 	mov	r4,r5
    7508:	dfc00915 	stw	ra,36(sp)
    750c:	dcc00815 	stw	r19,32(sp)
    7510:	2827883a 	mov	r19,r5
    7514:	00076800 	call	7680 <strlen>
    7518:	89400217 	ldw	r5,8(r17)
    751c:	00c20034 	movhi	r3,2048
    7520:	18c0e504 	addi	r3,r3,916
    7524:	01c00044 	movi	r7,1
    7528:	12000044 	addi	r8,r2,1
    752c:	d8c00515 	stw	r3,20(sp)
    7530:	d9c00615 	stw	r7,24(sp)
    7534:	d8c00304 	addi	r3,sp,12
    7538:	01c00084 	movi	r7,2
    753c:	8809883a 	mov	r4,r17
    7540:	d80d883a 	mov	r6,sp
    7544:	d8c00015 	stw	r3,0(sp)
    7548:	dcc00315 	stw	r19,12(sp)
    754c:	da000215 	stw	r8,8(sp)
    7550:	d9c00115 	stw	r7,4(sp)
    7554:	d8800415 	stw	r2,16(sp)
    7558:	000b8540 	call	b854 <__sfvwrite_r>
    755c:	00ffffc4 	movi	r3,-1
    7560:	10000626 	beq	r2,zero,757c <_puts_r+0x84>
    7564:	1805883a 	mov	r2,r3
    7568:	dfc00917 	ldw	ra,36(sp)
    756c:	dcc00817 	ldw	r19,32(sp)
    7570:	dc400717 	ldw	r17,28(sp)
    7574:	dec00a04 	addi	sp,sp,40
    7578:	f800283a 	ret
    757c:	00c00284 	movi	r3,10
    7580:	1805883a 	mov	r2,r3
    7584:	dfc00917 	ldw	ra,36(sp)
    7588:	dcc00817 	ldw	r19,32(sp)
    758c:	dc400717 	ldw	r17,28(sp)
    7590:	dec00a04 	addi	sp,sp,40
    7594:	f800283a 	ret

00007598 <puts>:
    7598:	00820034 	movhi	r2,2048
    759c:	1089ba04 	addi	r2,r2,9960
    75a0:	200b883a 	mov	r5,r4
    75a4:	11000017 	ldw	r4,0(r2)
    75a8:	00074f81 	jmpi	74f8 <_puts_r>

000075ac <sprintf>:
    75ac:	deffe504 	addi	sp,sp,-108
    75b0:	2013883a 	mov	r9,r4
    75b4:	dfc01815 	stw	ra,96(sp)
    75b8:	d9801915 	stw	r6,100(sp)
    75bc:	d9c01a15 	stw	r7,104(sp)
    75c0:	d8801904 	addi	r2,sp,100
    75c4:	d8800015 	stw	r2,0(sp)
    75c8:	00820034 	movhi	r2,2048
    75cc:	1089ba04 	addi	r2,r2,9960
    75d0:	11000017 	ldw	r4,0(r2)
    75d4:	d9c00017 	ldw	r7,0(sp)
    75d8:	00808204 	movi	r2,520
    75dc:	00e00034 	movhi	r3,32768
    75e0:	18ffffc4 	addi	r3,r3,-1
    75e4:	280d883a 	mov	r6,r5
    75e8:	d880040d 	sth	r2,16(sp)
    75ec:	d9400104 	addi	r5,sp,4
    75f0:	00bfffc4 	movi	r2,-1
    75f4:	d8c00615 	stw	r3,24(sp)
    75f8:	d8c00315 	stw	r3,12(sp)
    75fc:	da400515 	stw	r9,20(sp)
    7600:	d880048d 	sth	r2,18(sp)
    7604:	da400115 	stw	r9,4(sp)
    7608:	000774c0 	call	774c <___vfprintf_internal_r>
    760c:	d8c00117 	ldw	r3,4(sp)
    7610:	18000005 	stb	zero,0(r3)
    7614:	dfc01817 	ldw	ra,96(sp)
    7618:	dec01b04 	addi	sp,sp,108
    761c:	f800283a 	ret

00007620 <_sprintf_r>:
    7620:	deffe604 	addi	sp,sp,-104
    7624:	2813883a 	mov	r9,r5
    7628:	dfc01815 	stw	ra,96(sp)
    762c:	d9c01915 	stw	r7,100(sp)
    7630:	d8801904 	addi	r2,sp,100
    7634:	d8800015 	stw	r2,0(sp)
    7638:	100f883a 	mov	r7,r2
    763c:	00808204 	movi	r2,520
    7640:	00e00034 	movhi	r3,32768
    7644:	18ffffc4 	addi	r3,r3,-1
    7648:	d880040d 	sth	r2,16(sp)
    764c:	d9400104 	addi	r5,sp,4
    7650:	00bfffc4 	movi	r2,-1
    7654:	d8c00615 	stw	r3,24(sp)
    7658:	d8c00315 	stw	r3,12(sp)
    765c:	da400515 	stw	r9,20(sp)
    7660:	d880048d 	sth	r2,18(sp)
    7664:	da400115 	stw	r9,4(sp)
    7668:	000774c0 	call	774c <___vfprintf_internal_r>
    766c:	d8c00117 	ldw	r3,4(sp)
    7670:	18000005 	stb	zero,0(r3)
    7674:	dfc01817 	ldw	ra,96(sp)
    7678:	dec01a04 	addi	sp,sp,104
    767c:	f800283a 	ret

00007680 <strlen>:
    7680:	208000cc 	andi	r2,r4,3
    7684:	2011883a 	mov	r8,r4
    7688:	1000161e 	bne	r2,zero,76e4 <strlen+0x64>
    768c:	20c00017 	ldw	r3,0(r4)
    7690:	017fbff4 	movhi	r5,65279
    7694:	297fbfc4 	addi	r5,r5,-257
    7698:	01e02074 	movhi	r7,32897
    769c:	39e02004 	addi	r7,r7,-32640
    76a0:	1945883a 	add	r2,r3,r5
    76a4:	11c4703a 	and	r2,r2,r7
    76a8:	00c6303a 	nor	r3,zero,r3
    76ac:	1886703a 	and	r3,r3,r2
    76b0:	18000c1e 	bne	r3,zero,76e4 <strlen+0x64>
    76b4:	280d883a 	mov	r6,r5
    76b8:	380b883a 	mov	r5,r7
    76bc:	21000104 	addi	r4,r4,4
    76c0:	20800017 	ldw	r2,0(r4)
    76c4:	1187883a 	add	r3,r2,r6
    76c8:	1946703a 	and	r3,r3,r5
    76cc:	0084303a 	nor	r2,zero,r2
    76d0:	10c4703a 	and	r2,r2,r3
    76d4:	103ff926 	beq	r2,zero,76bc <strlen+0x3c>
    76d8:	20800007 	ldb	r2,0(r4)
    76dc:	10000326 	beq	r2,zero,76ec <strlen+0x6c>
    76e0:	21000044 	addi	r4,r4,1
    76e4:	20800007 	ldb	r2,0(r4)
    76e8:	103ffd1e 	bne	r2,zero,76e0 <strlen+0x60>
    76ec:	2205c83a 	sub	r2,r4,r8
    76f0:	f800283a 	ret

000076f4 <__sprint_r>:
    76f4:	30800217 	ldw	r2,8(r6)
    76f8:	defffe04 	addi	sp,sp,-8
    76fc:	dc000015 	stw	r16,0(sp)
    7700:	dfc00115 	stw	ra,4(sp)
    7704:	3021883a 	mov	r16,r6
    7708:	0007883a 	mov	r3,zero
    770c:	1000061e 	bne	r2,zero,7728 <__sprint_r+0x34>
    7710:	1805883a 	mov	r2,r3
    7714:	30000115 	stw	zero,4(r6)
    7718:	dfc00117 	ldw	ra,4(sp)
    771c:	dc000017 	ldw	r16,0(sp)
    7720:	dec00204 	addi	sp,sp,8
    7724:	f800283a 	ret
    7728:	000b8540 	call	b854 <__sfvwrite_r>
    772c:	1007883a 	mov	r3,r2
    7730:	1805883a 	mov	r2,r3
    7734:	80000115 	stw	zero,4(r16)
    7738:	80000215 	stw	zero,8(r16)
    773c:	dfc00117 	ldw	ra,4(sp)
    7740:	dc000017 	ldw	r16,0(sp)
    7744:	dec00204 	addi	sp,sp,8
    7748:	f800283a 	ret

0000774c <___vfprintf_internal_r>:
    774c:	defea404 	addi	sp,sp,-1392
    7750:	dd815815 	stw	r22,1376(sp)
    7754:	dc015215 	stw	r16,1352(sp)
    7758:	d9c15115 	stw	r7,1348(sp)
    775c:	dfc15b15 	stw	ra,1388(sp)
    7760:	df015a15 	stw	fp,1384(sp)
    7764:	ddc15915 	stw	r23,1380(sp)
    7768:	dd415715 	stw	r21,1372(sp)
    776c:	dd015615 	stw	r20,1368(sp)
    7770:	dcc15515 	stw	r19,1364(sp)
    7774:	dc815415 	stw	r18,1360(sp)
    7778:	dc415315 	stw	r17,1356(sp)
    777c:	282d883a 	mov	r22,r5
    7780:	3021883a 	mov	r16,r6
    7784:	d9014f15 	stw	r4,1340(sp)
    7788:	000be780 	call	be78 <_localeconv_r>
    778c:	10800017 	ldw	r2,0(r2)
    7790:	d9c15117 	ldw	r7,1348(sp)
    7794:	d8814915 	stw	r2,1316(sp)
    7798:	d8814f17 	ldw	r2,1340(sp)
    779c:	10000226 	beq	r2,zero,77a8 <___vfprintf_internal_r+0x5c>
    77a0:	10800e17 	ldw	r2,56(r2)
    77a4:	10020d26 	beq	r2,zero,7fdc <___vfprintf_internal_r+0x890>
    77a8:	b080030b 	ldhu	r2,12(r22)
    77ac:	1080020c 	andi	r2,r2,8
    77b0:	10020e26 	beq	r2,zero,7fec <___vfprintf_internal_r+0x8a0>
    77b4:	b0800417 	ldw	r2,16(r22)
    77b8:	10020c26 	beq	r2,zero,7fec <___vfprintf_internal_r+0x8a0>
    77bc:	b200030b 	ldhu	r8,12(r22)
    77c0:	00800284 	movi	r2,10
    77c4:	40c0068c 	andi	r3,r8,26
    77c8:	18802f1e 	bne	r3,r2,7888 <___vfprintf_internal_r+0x13c>
    77cc:	b080038f 	ldh	r2,14(r22)
    77d0:	10002d16 	blt	r2,zero,7888 <___vfprintf_internal_r+0x13c>
    77d4:	b240038b 	ldhu	r9,14(r22)
    77d8:	b2800717 	ldw	r10,28(r22)
    77dc:	b2c00917 	ldw	r11,36(r22)
    77e0:	d9014f17 	ldw	r4,1340(sp)
    77e4:	dc402904 	addi	r17,sp,164
    77e8:	d8804004 	addi	r2,sp,256
    77ec:	00c10004 	movi	r3,1024
    77f0:	423fff4c 	andi	r8,r8,65533
    77f4:	800d883a 	mov	r6,r16
    77f8:	880b883a 	mov	r5,r17
    77fc:	da002c0d 	sth	r8,176(sp)
    7800:	da402c8d 	sth	r9,178(sp)
    7804:	da803015 	stw	r10,192(sp)
    7808:	dac03215 	stw	r11,200(sp)
    780c:	d8802d15 	stw	r2,180(sp)
    7810:	d8c02e15 	stw	r3,184(sp)
    7814:	d8802915 	stw	r2,164(sp)
    7818:	d8c02b15 	stw	r3,172(sp)
    781c:	d8002f15 	stw	zero,188(sp)
    7820:	000774c0 	call	774c <___vfprintf_internal_r>
    7824:	d8814b15 	stw	r2,1324(sp)
    7828:	10000416 	blt	r2,zero,783c <___vfprintf_internal_r+0xf0>
    782c:	d9014f17 	ldw	r4,1340(sp)
    7830:	880b883a 	mov	r5,r17
    7834:	000af240 	call	af24 <_fflush_r>
    7838:	1002321e 	bne	r2,zero,8104 <___vfprintf_internal_r+0x9b8>
    783c:	d8802c0b 	ldhu	r2,176(sp)
    7840:	1080100c 	andi	r2,r2,64
    7844:	10000326 	beq	r2,zero,7854 <___vfprintf_internal_r+0x108>
    7848:	b080030b 	ldhu	r2,12(r22)
    784c:	10801014 	ori	r2,r2,64
    7850:	b080030d 	sth	r2,12(r22)
    7854:	d8814b17 	ldw	r2,1324(sp)
    7858:	dfc15b17 	ldw	ra,1388(sp)
    785c:	df015a17 	ldw	fp,1384(sp)
    7860:	ddc15917 	ldw	r23,1380(sp)
    7864:	dd815817 	ldw	r22,1376(sp)
    7868:	dd415717 	ldw	r21,1372(sp)
    786c:	dd015617 	ldw	r20,1368(sp)
    7870:	dcc15517 	ldw	r19,1364(sp)
    7874:	dc815417 	ldw	r18,1360(sp)
    7878:	dc415317 	ldw	r17,1356(sp)
    787c:	dc015217 	ldw	r16,1352(sp)
    7880:	dec15c04 	addi	sp,sp,1392
    7884:	f800283a 	ret
    7888:	0005883a 	mov	r2,zero
    788c:	0007883a 	mov	r3,zero
    7890:	dd401904 	addi	r21,sp,100
    7894:	d8814215 	stw	r2,1288(sp)
    7898:	802f883a 	mov	r23,r16
    789c:	d8c14315 	stw	r3,1292(sp)
    78a0:	d8014b15 	stw	zero,1324(sp)
    78a4:	d8014815 	stw	zero,1312(sp)
    78a8:	d8014415 	stw	zero,1296(sp)
    78ac:	d8014715 	stw	zero,1308(sp)
    78b0:	dd400c15 	stw	r21,48(sp)
    78b4:	d8000e15 	stw	zero,56(sp)
    78b8:	d8000d15 	stw	zero,52(sp)
    78bc:	b8800007 	ldb	r2,0(r23)
    78c0:	10001926 	beq	r2,zero,7928 <___vfprintf_internal_r+0x1dc>
    78c4:	00c00944 	movi	r3,37
    78c8:	10c01726 	beq	r2,r3,7928 <___vfprintf_internal_r+0x1dc>
    78cc:	b821883a 	mov	r16,r23
    78d0:	00000106 	br	78d8 <___vfprintf_internal_r+0x18c>
    78d4:	10c00326 	beq	r2,r3,78e4 <___vfprintf_internal_r+0x198>
    78d8:	84000044 	addi	r16,r16,1
    78dc:	80800007 	ldb	r2,0(r16)
    78e0:	103ffc1e 	bne	r2,zero,78d4 <___vfprintf_internal_r+0x188>
    78e4:	85e7c83a 	sub	r19,r16,r23
    78e8:	98000e26 	beq	r19,zero,7924 <___vfprintf_internal_r+0x1d8>
    78ec:	dc800e17 	ldw	r18,56(sp)
    78f0:	dc400d17 	ldw	r17,52(sp)
    78f4:	008001c4 	movi	r2,7
    78f8:	94e5883a 	add	r18,r18,r19
    78fc:	8c400044 	addi	r17,r17,1
    7900:	adc00015 	stw	r23,0(r21)
    7904:	dc800e15 	stw	r18,56(sp)
    7908:	acc00115 	stw	r19,4(r21)
    790c:	dc400d15 	stw	r17,52(sp)
    7910:	14428b16 	blt	r2,r17,8340 <___vfprintf_internal_r+0xbf4>
    7914:	ad400204 	addi	r21,r21,8
    7918:	d9014b17 	ldw	r4,1324(sp)
    791c:	24c9883a 	add	r4,r4,r19
    7920:	d9014b15 	stw	r4,1324(sp)
    7924:	802f883a 	mov	r23,r16
    7928:	b8800007 	ldb	r2,0(r23)
    792c:	10013c26 	beq	r2,zero,7e20 <___vfprintf_internal_r+0x6d4>
    7930:	bdc00044 	addi	r23,r23,1
    7934:	d8000405 	stb	zero,16(sp)
    7938:	b8c00007 	ldb	r3,0(r23)
    793c:	04ffffc4 	movi	r19,-1
    7940:	d8014c15 	stw	zero,1328(sp)
    7944:	d8014a15 	stw	zero,1320(sp)
    7948:	d8c14d15 	stw	r3,1332(sp)
    794c:	bdc00044 	addi	r23,r23,1
    7950:	d9414d17 	ldw	r5,1332(sp)
    7954:	00801604 	movi	r2,88
    7958:	28fff804 	addi	r3,r5,-32
    795c:	10c06036 	bltu	r2,r3,7ae0 <___vfprintf_internal_r+0x394>
    7960:	18c5883a 	add	r2,r3,r3
    7964:	1085883a 	add	r2,r2,r2
    7968:	00c00034 	movhi	r3,0
    796c:	18de5f04 	addi	r3,r3,31100
    7970:	10c5883a 	add	r2,r2,r3
    7974:	11000017 	ldw	r4,0(r2)
    7978:	2000683a 	jmp	r4
    797c:	000088f0 	cmpltui	zero,zero,547
    7980:	00007ae0 	cmpeqi	zero,zero,491
    7984:	00007ae0 	cmpeqi	zero,zero,491
    7988:	000088dc 	xori	zero,zero,547
    798c:	00007ae0 	cmpeqi	zero,zero,491
    7990:	00007ae0 	cmpeqi	zero,zero,491
    7994:	00007ae0 	cmpeqi	zero,zero,491
    7998:	00007ae0 	cmpeqi	zero,zero,491
    799c:	00007ae0 	cmpeqi	zero,zero,491
    79a0:	00007ae0 	cmpeqi	zero,zero,491
    79a4:	000086bc 	xorhi	zero,zero,538
    79a8:	000088cc 	andi	zero,zero,547
    79ac:	00007ae0 	cmpeqi	zero,zero,491
    79b0:	000086d4 	movui	zero,539
    79b4:	00008968 	cmpgeui	zero,zero,549
    79b8:	00007ae0 	cmpeqi	zero,zero,491
    79bc:	00008954 	movui	zero,549
    79c0:	0000891c 	xori	zero,zero,548
    79c4:	0000891c 	xori	zero,zero,548
    79c8:	0000891c 	xori	zero,zero,548
    79cc:	0000891c 	xori	zero,zero,548
    79d0:	0000891c 	xori	zero,zero,548
    79d4:	0000891c 	xori	zero,zero,548
    79d8:	0000891c 	xori	zero,zero,548
    79dc:	0000891c 	xori	zero,zero,548
    79e0:	0000891c 	xori	zero,zero,548
    79e4:	00007ae0 	cmpeqi	zero,zero,491
    79e8:	00007ae0 	cmpeqi	zero,zero,491
    79ec:	00007ae0 	cmpeqi	zero,zero,491
    79f0:	00007ae0 	cmpeqi	zero,zero,491
    79f4:	00007ae0 	cmpeqi	zero,zero,491
    79f8:	00007ae0 	cmpeqi	zero,zero,491
    79fc:	00007ae0 	cmpeqi	zero,zero,491
    7a00:	00007ae0 	cmpeqi	zero,zero,491
    7a04:	00007ae0 	cmpeqi	zero,zero,491
    7a08:	00007ae0 	cmpeqi	zero,zero,491
    7a0c:	00008138 	rdprs	zero,zero,516
    7a10:	000087a4 	muli	zero,zero,542
    7a14:	00007ae0 	cmpeqi	zero,zero,491
    7a18:	000087a4 	muli	zero,zero,542
    7a1c:	00007ae0 	cmpeqi	zero,zero,491
    7a20:	00007ae0 	cmpeqi	zero,zero,491
    7a24:	00007ae0 	cmpeqi	zero,zero,491
    7a28:	00007ae0 	cmpeqi	zero,zero,491
    7a2c:	00008908 	cmpgei	zero,zero,548
    7a30:	00007ae0 	cmpeqi	zero,zero,491
    7a34:	00007ae0 	cmpeqi	zero,zero,491
    7a38:	000081ec 	andhi	zero,zero,519
    7a3c:	00007ae0 	cmpeqi	zero,zero,491
    7a40:	00007ae0 	cmpeqi	zero,zero,491
    7a44:	00007ae0 	cmpeqi	zero,zero,491
    7a48:	00007ae0 	cmpeqi	zero,zero,491
    7a4c:	00007ae0 	cmpeqi	zero,zero,491
    7a50:	00008238 	rdprs	zero,zero,520
    7a54:	00007ae0 	cmpeqi	zero,zero,491
    7a58:	00007ae0 	cmpeqi	zero,zero,491
    7a5c:	00008858 	cmpnei	zero,zero,545
    7a60:	00007ae0 	cmpeqi	zero,zero,491
    7a64:	00007ae0 	cmpeqi	zero,zero,491
    7a68:	00007ae0 	cmpeqi	zero,zero,491
    7a6c:	00007ae0 	cmpeqi	zero,zero,491
    7a70:	00007ae0 	cmpeqi	zero,zero,491
    7a74:	00007ae0 	cmpeqi	zero,zero,491
    7a78:	00007ae0 	cmpeqi	zero,zero,491
    7a7c:	00007ae0 	cmpeqi	zero,zero,491
    7a80:	00007ae0 	cmpeqi	zero,zero,491
    7a84:	00007ae0 	cmpeqi	zero,zero,491
    7a88:	0000882c 	andhi	zero,zero,544
    7a8c:	00008144 	movi	zero,517
    7a90:	000087a4 	muli	zero,zero,542
    7a94:	000087a4 	muli	zero,zero,542
    7a98:	000087a4 	muli	zero,zero,542
    7a9c:	00008790 	cmplti	zero,zero,542
    7aa0:	00008144 	movi	zero,517
    7aa4:	00007ae0 	cmpeqi	zero,zero,491
    7aa8:	00007ae0 	cmpeqi	zero,zero,491
    7aac:	00008718 	cmpnei	zero,zero,540
    7ab0:	00007ae0 	cmpeqi	zero,zero,491
    7ab4:	000086e8 	cmpgeui	zero,zero,539
    7ab8:	000081f8 	rdprs	zero,zero,519
    7abc:	00008748 	cmpgei	zero,zero,541
    7ac0:	00008734 	movhi	zero,540
    7ac4:	00007ae0 	cmpeqi	zero,zero,491
    7ac8:	000089c4 	movi	zero,551
    7acc:	00007ae0 	cmpeqi	zero,zero,491
    7ad0:	00008244 	movi	zero,521
    7ad4:	00007ae0 	cmpeqi	zero,zero,491
    7ad8:	00007ae0 	cmpeqi	zero,zero,491
    7adc:	000088bc 	xorhi	zero,zero,546
    7ae0:	d9014d17 	ldw	r4,1332(sp)
    7ae4:	2000ce26 	beq	r4,zero,7e20 <___vfprintf_internal_r+0x6d4>
    7ae8:	01400044 	movi	r5,1
    7aec:	d9800f04 	addi	r6,sp,60
    7af0:	d9c14015 	stw	r7,1280(sp)
    7af4:	d9414515 	stw	r5,1300(sp)
    7af8:	d9814115 	stw	r6,1284(sp)
    7afc:	280f883a 	mov	r7,r5
    7b00:	d9000f05 	stb	r4,60(sp)
    7b04:	d8000405 	stb	zero,16(sp)
    7b08:	d8014615 	stw	zero,1304(sp)
    7b0c:	d8c14c17 	ldw	r3,1328(sp)
    7b10:	1880008c 	andi	r2,r3,2
    7b14:	1005003a 	cmpeq	r2,r2,zero
    7b18:	d8815015 	stw	r2,1344(sp)
    7b1c:	1000031e 	bne	r2,zero,7b2c <___vfprintf_internal_r+0x3e0>
    7b20:	d9014517 	ldw	r4,1300(sp)
    7b24:	21000084 	addi	r4,r4,2
    7b28:	d9014515 	stw	r4,1300(sp)
    7b2c:	d9414c17 	ldw	r5,1328(sp)
    7b30:	2940210c 	andi	r5,r5,132
    7b34:	d9414e15 	stw	r5,1336(sp)
    7b38:	28002d1e 	bne	r5,zero,7bf0 <___vfprintf_internal_r+0x4a4>
    7b3c:	d9814a17 	ldw	r6,1320(sp)
    7b40:	d8814517 	ldw	r2,1300(sp)
    7b44:	30a1c83a 	sub	r16,r6,r2
    7b48:	0400290e 	bge	zero,r16,7bf0 <___vfprintf_internal_r+0x4a4>
    7b4c:	00800404 	movi	r2,16
    7b50:	1404580e 	bge	r2,r16,8cb4 <___vfprintf_internal_r+0x1568>
    7b54:	dc800e17 	ldw	r18,56(sp)
    7b58:	dc400d17 	ldw	r17,52(sp)
    7b5c:	1027883a 	mov	r19,r2
    7b60:	07020034 	movhi	fp,2048
    7b64:	e7010184 	addi	fp,fp,1030
    7b68:	050001c4 	movi	r20,7
    7b6c:	00000306 	br	7b7c <___vfprintf_internal_r+0x430>
    7b70:	843ffc04 	addi	r16,r16,-16
    7b74:	ad400204 	addi	r21,r21,8
    7b78:	9c00130e 	bge	r19,r16,7bc8 <___vfprintf_internal_r+0x47c>
    7b7c:	94800404 	addi	r18,r18,16
    7b80:	8c400044 	addi	r17,r17,1
    7b84:	af000015 	stw	fp,0(r21)
    7b88:	acc00115 	stw	r19,4(r21)
    7b8c:	dc800e15 	stw	r18,56(sp)
    7b90:	dc400d15 	stw	r17,52(sp)
    7b94:	a47ff60e 	bge	r20,r17,7b70 <___vfprintf_internal_r+0x424>
    7b98:	d9014f17 	ldw	r4,1340(sp)
    7b9c:	b00b883a 	mov	r5,r22
    7ba0:	d9800c04 	addi	r6,sp,48
    7ba4:	d9c15115 	stw	r7,1348(sp)
    7ba8:	00076f40 	call	76f4 <__sprint_r>
    7bac:	d9c15117 	ldw	r7,1348(sp)
    7bb0:	10009e1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    7bb4:	843ffc04 	addi	r16,r16,-16
    7bb8:	dc800e17 	ldw	r18,56(sp)
    7bbc:	dc400d17 	ldw	r17,52(sp)
    7bc0:	dd401904 	addi	r21,sp,100
    7bc4:	9c3fed16 	blt	r19,r16,7b7c <___vfprintf_internal_r+0x430>
    7bc8:	9425883a 	add	r18,r18,r16
    7bcc:	8c400044 	addi	r17,r17,1
    7bd0:	008001c4 	movi	r2,7
    7bd4:	af000015 	stw	fp,0(r21)
    7bd8:	ac000115 	stw	r16,4(r21)
    7bdc:	dc800e15 	stw	r18,56(sp)
    7be0:	dc400d15 	stw	r17,52(sp)
    7be4:	1441f516 	blt	r2,r17,83bc <___vfprintf_internal_r+0xc70>
    7be8:	ad400204 	addi	r21,r21,8
    7bec:	00000206 	br	7bf8 <___vfprintf_internal_r+0x4ac>
    7bf0:	dc800e17 	ldw	r18,56(sp)
    7bf4:	dc400d17 	ldw	r17,52(sp)
    7bf8:	d8800407 	ldb	r2,16(sp)
    7bfc:	10000b26 	beq	r2,zero,7c2c <___vfprintf_internal_r+0x4e0>
    7c00:	00800044 	movi	r2,1
    7c04:	94800044 	addi	r18,r18,1
    7c08:	8c400044 	addi	r17,r17,1
    7c0c:	a8800115 	stw	r2,4(r21)
    7c10:	d8c00404 	addi	r3,sp,16
    7c14:	008001c4 	movi	r2,7
    7c18:	a8c00015 	stw	r3,0(r21)
    7c1c:	dc800e15 	stw	r18,56(sp)
    7c20:	dc400d15 	stw	r17,52(sp)
    7c24:	1441da16 	blt	r2,r17,8390 <___vfprintf_internal_r+0xc44>
    7c28:	ad400204 	addi	r21,r21,8
    7c2c:	d9015017 	ldw	r4,1344(sp)
    7c30:	20000b1e 	bne	r4,zero,7c60 <___vfprintf_internal_r+0x514>
    7c34:	d8800444 	addi	r2,sp,17
    7c38:	94800084 	addi	r18,r18,2
    7c3c:	8c400044 	addi	r17,r17,1
    7c40:	a8800015 	stw	r2,0(r21)
    7c44:	00c00084 	movi	r3,2
    7c48:	008001c4 	movi	r2,7
    7c4c:	a8c00115 	stw	r3,4(r21)
    7c50:	dc800e15 	stw	r18,56(sp)
    7c54:	dc400d15 	stw	r17,52(sp)
    7c58:	1441c216 	blt	r2,r17,8364 <___vfprintf_internal_r+0xc18>
    7c5c:	ad400204 	addi	r21,r21,8
    7c60:	d9414e17 	ldw	r5,1336(sp)
    7c64:	00802004 	movi	r2,128
    7c68:	2880b126 	beq	r5,r2,7f30 <___vfprintf_internal_r+0x7e4>
    7c6c:	d8c14617 	ldw	r3,1304(sp)
    7c70:	19e1c83a 	sub	r16,r3,r7
    7c74:	0400260e 	bge	zero,r16,7d10 <___vfprintf_internal_r+0x5c4>
    7c78:	00800404 	movi	r2,16
    7c7c:	1403c90e 	bge	r2,r16,8ba4 <___vfprintf_internal_r+0x1458>
    7c80:	1027883a 	mov	r19,r2
    7c84:	07020034 	movhi	fp,2048
    7c88:	e700fd84 	addi	fp,fp,1014
    7c8c:	050001c4 	movi	r20,7
    7c90:	00000306 	br	7ca0 <___vfprintf_internal_r+0x554>
    7c94:	843ffc04 	addi	r16,r16,-16
    7c98:	ad400204 	addi	r21,r21,8
    7c9c:	9c00130e 	bge	r19,r16,7cec <___vfprintf_internal_r+0x5a0>
    7ca0:	94800404 	addi	r18,r18,16
    7ca4:	8c400044 	addi	r17,r17,1
    7ca8:	af000015 	stw	fp,0(r21)
    7cac:	acc00115 	stw	r19,4(r21)
    7cb0:	dc800e15 	stw	r18,56(sp)
    7cb4:	dc400d15 	stw	r17,52(sp)
    7cb8:	a47ff60e 	bge	r20,r17,7c94 <___vfprintf_internal_r+0x548>
    7cbc:	d9014f17 	ldw	r4,1340(sp)
    7cc0:	b00b883a 	mov	r5,r22
    7cc4:	d9800c04 	addi	r6,sp,48
    7cc8:	d9c15115 	stw	r7,1348(sp)
    7ccc:	00076f40 	call	76f4 <__sprint_r>
    7cd0:	d9c15117 	ldw	r7,1348(sp)
    7cd4:	1000551e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    7cd8:	843ffc04 	addi	r16,r16,-16
    7cdc:	dc800e17 	ldw	r18,56(sp)
    7ce0:	dc400d17 	ldw	r17,52(sp)
    7ce4:	dd401904 	addi	r21,sp,100
    7ce8:	9c3fed16 	blt	r19,r16,7ca0 <___vfprintf_internal_r+0x554>
    7cec:	9425883a 	add	r18,r18,r16
    7cf0:	8c400044 	addi	r17,r17,1
    7cf4:	008001c4 	movi	r2,7
    7cf8:	af000015 	stw	fp,0(r21)
    7cfc:	ac000115 	stw	r16,4(r21)
    7d00:	dc800e15 	stw	r18,56(sp)
    7d04:	dc400d15 	stw	r17,52(sp)
    7d08:	14418216 	blt	r2,r17,8314 <___vfprintf_internal_r+0xbc8>
    7d0c:	ad400204 	addi	r21,r21,8
    7d10:	d9014c17 	ldw	r4,1328(sp)
    7d14:	2080400c 	andi	r2,r4,256
    7d18:	10004a1e 	bne	r2,zero,7e44 <___vfprintf_internal_r+0x6f8>
    7d1c:	d9414117 	ldw	r5,1284(sp)
    7d20:	91e5883a 	add	r18,r18,r7
    7d24:	8c400044 	addi	r17,r17,1
    7d28:	008001c4 	movi	r2,7
    7d2c:	a9400015 	stw	r5,0(r21)
    7d30:	a9c00115 	stw	r7,4(r21)
    7d34:	dc800e15 	stw	r18,56(sp)
    7d38:	dc400d15 	stw	r17,52(sp)
    7d3c:	14416716 	blt	r2,r17,82dc <___vfprintf_internal_r+0xb90>
    7d40:	a8c00204 	addi	r3,r21,8
    7d44:	d9814c17 	ldw	r6,1328(sp)
    7d48:	3080010c 	andi	r2,r6,4
    7d4c:	10002826 	beq	r2,zero,7df0 <___vfprintf_internal_r+0x6a4>
    7d50:	d8814a17 	ldw	r2,1320(sp)
    7d54:	d9014517 	ldw	r4,1300(sp)
    7d58:	1121c83a 	sub	r16,r2,r4
    7d5c:	0400240e 	bge	zero,r16,7df0 <___vfprintf_internal_r+0x6a4>
    7d60:	00800404 	movi	r2,16
    7d64:	14044f0e 	bge	r2,r16,8ea4 <___vfprintf_internal_r+0x1758>
    7d68:	dc400d17 	ldw	r17,52(sp)
    7d6c:	1027883a 	mov	r19,r2
    7d70:	07020034 	movhi	fp,2048
    7d74:	e7010184 	addi	fp,fp,1030
    7d78:	050001c4 	movi	r20,7
    7d7c:	00000306 	br	7d8c <___vfprintf_internal_r+0x640>
    7d80:	843ffc04 	addi	r16,r16,-16
    7d84:	18c00204 	addi	r3,r3,8
    7d88:	9c00110e 	bge	r19,r16,7dd0 <___vfprintf_internal_r+0x684>
    7d8c:	94800404 	addi	r18,r18,16
    7d90:	8c400044 	addi	r17,r17,1
    7d94:	1f000015 	stw	fp,0(r3)
    7d98:	1cc00115 	stw	r19,4(r3)
    7d9c:	dc800e15 	stw	r18,56(sp)
    7da0:	dc400d15 	stw	r17,52(sp)
    7da4:	a47ff60e 	bge	r20,r17,7d80 <___vfprintf_internal_r+0x634>
    7da8:	d9014f17 	ldw	r4,1340(sp)
    7dac:	b00b883a 	mov	r5,r22
    7db0:	d9800c04 	addi	r6,sp,48
    7db4:	00076f40 	call	76f4 <__sprint_r>
    7db8:	10001c1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    7dbc:	843ffc04 	addi	r16,r16,-16
    7dc0:	dc800e17 	ldw	r18,56(sp)
    7dc4:	dc400d17 	ldw	r17,52(sp)
    7dc8:	d8c01904 	addi	r3,sp,100
    7dcc:	9c3fef16 	blt	r19,r16,7d8c <___vfprintf_internal_r+0x640>
    7dd0:	9425883a 	add	r18,r18,r16
    7dd4:	8c400044 	addi	r17,r17,1
    7dd8:	008001c4 	movi	r2,7
    7ddc:	1f000015 	stw	fp,0(r3)
    7de0:	1c000115 	stw	r16,4(r3)
    7de4:	dc800e15 	stw	r18,56(sp)
    7de8:	dc400d15 	stw	r17,52(sp)
    7dec:	1440cb16 	blt	r2,r17,811c <___vfprintf_internal_r+0x9d0>
    7df0:	d8814a17 	ldw	r2,1320(sp)
    7df4:	d9414517 	ldw	r5,1300(sp)
    7df8:	1140010e 	bge	r2,r5,7e00 <___vfprintf_internal_r+0x6b4>
    7dfc:	2805883a 	mov	r2,r5
    7e00:	d9814b17 	ldw	r6,1324(sp)
    7e04:	308d883a 	add	r6,r6,r2
    7e08:	d9814b15 	stw	r6,1324(sp)
    7e0c:	90013b1e 	bne	r18,zero,82fc <___vfprintf_internal_r+0xbb0>
    7e10:	d9c14017 	ldw	r7,1280(sp)
    7e14:	dd401904 	addi	r21,sp,100
    7e18:	d8000d15 	stw	zero,52(sp)
    7e1c:	003ea706 	br	78bc <___vfprintf_internal_r+0x170>
    7e20:	d8800e17 	ldw	r2,56(sp)
    7e24:	10053f1e 	bne	r2,zero,9324 <___vfprintf_internal_r+0x1bd8>
    7e28:	d8000d15 	stw	zero,52(sp)
    7e2c:	b080030b 	ldhu	r2,12(r22)
    7e30:	1080100c 	andi	r2,r2,64
    7e34:	103e8726 	beq	r2,zero,7854 <___vfprintf_internal_r+0x108>
    7e38:	00bfffc4 	movi	r2,-1
    7e3c:	d8814b15 	stw	r2,1324(sp)
    7e40:	003e8406 	br	7854 <___vfprintf_internal_r+0x108>
    7e44:	d9814d17 	ldw	r6,1332(sp)
    7e48:	00801944 	movi	r2,101
    7e4c:	11806e16 	blt	r2,r6,8008 <___vfprintf_internal_r+0x8bc>
    7e50:	d9414717 	ldw	r5,1308(sp)
    7e54:	00c00044 	movi	r3,1
    7e58:	1943430e 	bge	r3,r5,8b68 <___vfprintf_internal_r+0x141c>
    7e5c:	d8814117 	ldw	r2,1284(sp)
    7e60:	94800044 	addi	r18,r18,1
    7e64:	8c400044 	addi	r17,r17,1
    7e68:	a8800015 	stw	r2,0(r21)
    7e6c:	008001c4 	movi	r2,7
    7e70:	a8c00115 	stw	r3,4(r21)
    7e74:	dc800e15 	stw	r18,56(sp)
    7e78:	dc400d15 	stw	r17,52(sp)
    7e7c:	1441ca16 	blt	r2,r17,85a8 <___vfprintf_internal_r+0xe5c>
    7e80:	a8c00204 	addi	r3,r21,8
    7e84:	d9014917 	ldw	r4,1316(sp)
    7e88:	00800044 	movi	r2,1
    7e8c:	94800044 	addi	r18,r18,1
    7e90:	8c400044 	addi	r17,r17,1
    7e94:	18800115 	stw	r2,4(r3)
    7e98:	008001c4 	movi	r2,7
    7e9c:	19000015 	stw	r4,0(r3)
    7ea0:	dc800e15 	stw	r18,56(sp)
    7ea4:	dc400d15 	stw	r17,52(sp)
    7ea8:	1441b616 	blt	r2,r17,8584 <___vfprintf_internal_r+0xe38>
    7eac:	1cc00204 	addi	r19,r3,8
    7eb0:	d9014217 	ldw	r4,1288(sp)
    7eb4:	d9414317 	ldw	r5,1292(sp)
    7eb8:	000d883a 	mov	r6,zero
    7ebc:	000f883a 	mov	r7,zero
    7ec0:	000f67c0 	call	f67c <__nedf2>
    7ec4:	10017426 	beq	r2,zero,8498 <___vfprintf_internal_r+0xd4c>
    7ec8:	d9414717 	ldw	r5,1308(sp)
    7ecc:	d9814117 	ldw	r6,1284(sp)
    7ed0:	8c400044 	addi	r17,r17,1
    7ed4:	2c85883a 	add	r2,r5,r18
    7ed8:	14bfffc4 	addi	r18,r2,-1
    7edc:	28bfffc4 	addi	r2,r5,-1
    7ee0:	30c00044 	addi	r3,r6,1
    7ee4:	98800115 	stw	r2,4(r19)
    7ee8:	008001c4 	movi	r2,7
    7eec:	98c00015 	stw	r3,0(r19)
    7ef0:	dc800e15 	stw	r18,56(sp)
    7ef4:	dc400d15 	stw	r17,52(sp)
    7ef8:	14418e16 	blt	r2,r17,8534 <___vfprintf_internal_r+0xde8>
    7efc:	9cc00204 	addi	r19,r19,8
    7f00:	d9414817 	ldw	r5,1312(sp)
    7f04:	d8800804 	addi	r2,sp,32
    7f08:	8c400044 	addi	r17,r17,1
    7f0c:	9165883a 	add	r18,r18,r5
    7f10:	98800015 	stw	r2,0(r19)
    7f14:	008001c4 	movi	r2,7
    7f18:	99400115 	stw	r5,4(r19)
    7f1c:	dc800e15 	stw	r18,56(sp)
    7f20:	dc400d15 	stw	r17,52(sp)
    7f24:	1440ed16 	blt	r2,r17,82dc <___vfprintf_internal_r+0xb90>
    7f28:	98c00204 	addi	r3,r19,8
    7f2c:	003f8506 	br	7d44 <___vfprintf_internal_r+0x5f8>
    7f30:	d9814a17 	ldw	r6,1320(sp)
    7f34:	d8814517 	ldw	r2,1300(sp)
    7f38:	30a1c83a 	sub	r16,r6,r2
    7f3c:	043f4b0e 	bge	zero,r16,7c6c <___vfprintf_internal_r+0x520>
    7f40:	00800404 	movi	r2,16
    7f44:	1404340e 	bge	r2,r16,9018 <___vfprintf_internal_r+0x18cc>
    7f48:	1027883a 	mov	r19,r2
    7f4c:	07020034 	movhi	fp,2048
    7f50:	e700fd84 	addi	fp,fp,1014
    7f54:	050001c4 	movi	r20,7
    7f58:	00000306 	br	7f68 <___vfprintf_internal_r+0x81c>
    7f5c:	843ffc04 	addi	r16,r16,-16
    7f60:	ad400204 	addi	r21,r21,8
    7f64:	9c00130e 	bge	r19,r16,7fb4 <___vfprintf_internal_r+0x868>
    7f68:	94800404 	addi	r18,r18,16
    7f6c:	8c400044 	addi	r17,r17,1
    7f70:	af000015 	stw	fp,0(r21)
    7f74:	acc00115 	stw	r19,4(r21)
    7f78:	dc800e15 	stw	r18,56(sp)
    7f7c:	dc400d15 	stw	r17,52(sp)
    7f80:	a47ff60e 	bge	r20,r17,7f5c <___vfprintf_internal_r+0x810>
    7f84:	d9014f17 	ldw	r4,1340(sp)
    7f88:	b00b883a 	mov	r5,r22
    7f8c:	d9800c04 	addi	r6,sp,48
    7f90:	d9c15115 	stw	r7,1348(sp)
    7f94:	00076f40 	call	76f4 <__sprint_r>
    7f98:	d9c15117 	ldw	r7,1348(sp)
    7f9c:	103fa31e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    7fa0:	843ffc04 	addi	r16,r16,-16
    7fa4:	dc800e17 	ldw	r18,56(sp)
    7fa8:	dc400d17 	ldw	r17,52(sp)
    7fac:	dd401904 	addi	r21,sp,100
    7fb0:	9c3fed16 	blt	r19,r16,7f68 <___vfprintf_internal_r+0x81c>
    7fb4:	9425883a 	add	r18,r18,r16
    7fb8:	8c400044 	addi	r17,r17,1
    7fbc:	008001c4 	movi	r2,7
    7fc0:	af000015 	stw	fp,0(r21)
    7fc4:	ac000115 	stw	r16,4(r21)
    7fc8:	dc800e15 	stw	r18,56(sp)
    7fcc:	dc400d15 	stw	r17,52(sp)
    7fd0:	14416116 	blt	r2,r17,8558 <___vfprintf_internal_r+0xe0c>
    7fd4:	ad400204 	addi	r21,r21,8
    7fd8:	003f2406 	br	7c6c <___vfprintf_internal_r+0x520>
    7fdc:	d9014f17 	ldw	r4,1340(sp)
    7fe0:	000b1bc0 	call	b1bc <__sinit>
    7fe4:	d9c15117 	ldw	r7,1348(sp)
    7fe8:	003def06 	br	77a8 <___vfprintf_internal_r+0x5c>
    7fec:	d9014f17 	ldw	r4,1340(sp)
    7ff0:	b00b883a 	mov	r5,r22
    7ff4:	d9c15115 	stw	r7,1348(sp)
    7ff8:	000961c0 	call	961c <__swsetup_r>
    7ffc:	d9c15117 	ldw	r7,1348(sp)
    8000:	103dee26 	beq	r2,zero,77bc <___vfprintf_internal_r+0x70>
    8004:	003f8c06 	br	7e38 <___vfprintf_internal_r+0x6ec>
    8008:	d9014217 	ldw	r4,1288(sp)
    800c:	d9414317 	ldw	r5,1292(sp)
    8010:	000d883a 	mov	r6,zero
    8014:	000f883a 	mov	r7,zero
    8018:	000f5f40 	call	f5f4 <__eqdf2>
    801c:	1000f21e 	bne	r2,zero,83e8 <___vfprintf_internal_r+0xc9c>
    8020:	00820034 	movhi	r2,2048
    8024:	1080fd04 	addi	r2,r2,1012
    8028:	94800044 	addi	r18,r18,1
    802c:	8c400044 	addi	r17,r17,1
    8030:	a8800015 	stw	r2,0(r21)
    8034:	00c00044 	movi	r3,1
    8038:	008001c4 	movi	r2,7
    803c:	a8c00115 	stw	r3,4(r21)
    8040:	dc800e15 	stw	r18,56(sp)
    8044:	dc400d15 	stw	r17,52(sp)
    8048:	1442fa16 	blt	r2,r17,8c34 <___vfprintf_internal_r+0x14e8>
    804c:	a8c00204 	addi	r3,r21,8
    8050:	d8800517 	ldw	r2,20(sp)
    8054:	d9014717 	ldw	r4,1308(sp)
    8058:	11015c0e 	bge	r2,r4,85cc <___vfprintf_internal_r+0xe80>
    805c:	dc400d17 	ldw	r17,52(sp)
    8060:	d9814917 	ldw	r6,1316(sp)
    8064:	00800044 	movi	r2,1
    8068:	94800044 	addi	r18,r18,1
    806c:	8c400044 	addi	r17,r17,1
    8070:	18800115 	stw	r2,4(r3)
    8074:	008001c4 	movi	r2,7
    8078:	19800015 	stw	r6,0(r3)
    807c:	dc800e15 	stw	r18,56(sp)
    8080:	dc400d15 	stw	r17,52(sp)
    8084:	14431016 	blt	r2,r17,8cc8 <___vfprintf_internal_r+0x157c>
    8088:	18c00204 	addi	r3,r3,8
    808c:	d8814717 	ldw	r2,1308(sp)
    8090:	143fffc4 	addi	r16,r2,-1
    8094:	043f2b0e 	bge	zero,r16,7d44 <___vfprintf_internal_r+0x5f8>
    8098:	00800404 	movi	r2,16
    809c:	1402a20e 	bge	r2,r16,8b28 <___vfprintf_internal_r+0x13dc>
    80a0:	dc400d17 	ldw	r17,52(sp)
    80a4:	1027883a 	mov	r19,r2
    80a8:	07020034 	movhi	fp,2048
    80ac:	e700fd84 	addi	fp,fp,1014
    80b0:	050001c4 	movi	r20,7
    80b4:	00000306 	br	80c4 <___vfprintf_internal_r+0x978>
    80b8:	18c00204 	addi	r3,r3,8
    80bc:	843ffc04 	addi	r16,r16,-16
    80c0:	9c029c0e 	bge	r19,r16,8b34 <___vfprintf_internal_r+0x13e8>
    80c4:	94800404 	addi	r18,r18,16
    80c8:	8c400044 	addi	r17,r17,1
    80cc:	1f000015 	stw	fp,0(r3)
    80d0:	1cc00115 	stw	r19,4(r3)
    80d4:	dc800e15 	stw	r18,56(sp)
    80d8:	dc400d15 	stw	r17,52(sp)
    80dc:	a47ff60e 	bge	r20,r17,80b8 <___vfprintf_internal_r+0x96c>
    80e0:	d9014f17 	ldw	r4,1340(sp)
    80e4:	b00b883a 	mov	r5,r22
    80e8:	d9800c04 	addi	r6,sp,48
    80ec:	00076f40 	call	76f4 <__sprint_r>
    80f0:	103f4e1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    80f4:	dc800e17 	ldw	r18,56(sp)
    80f8:	dc400d17 	ldw	r17,52(sp)
    80fc:	d8c01904 	addi	r3,sp,100
    8100:	003fee06 	br	80bc <___vfprintf_internal_r+0x970>
    8104:	d8802c0b 	ldhu	r2,176(sp)
    8108:	00ffffc4 	movi	r3,-1
    810c:	d8c14b15 	stw	r3,1324(sp)
    8110:	1080100c 	andi	r2,r2,64
    8114:	103dcc1e 	bne	r2,zero,7848 <___vfprintf_internal_r+0xfc>
    8118:	003dce06 	br	7854 <___vfprintf_internal_r+0x108>
    811c:	d9014f17 	ldw	r4,1340(sp)
    8120:	b00b883a 	mov	r5,r22
    8124:	d9800c04 	addi	r6,sp,48
    8128:	00076f40 	call	76f4 <__sprint_r>
    812c:	103f3f1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8130:	dc800e17 	ldw	r18,56(sp)
    8134:	003f2e06 	br	7df0 <___vfprintf_internal_r+0x6a4>
    8138:	d9414c17 	ldw	r5,1328(sp)
    813c:	29400414 	ori	r5,r5,16
    8140:	d9414c15 	stw	r5,1328(sp)
    8144:	d9814c17 	ldw	r6,1328(sp)
    8148:	3080080c 	andi	r2,r6,32
    814c:	10014f1e 	bne	r2,zero,868c <___vfprintf_internal_r+0xf40>
    8150:	d8c14c17 	ldw	r3,1328(sp)
    8154:	1880040c 	andi	r2,r3,16
    8158:	1002ea1e 	bne	r2,zero,8d04 <___vfprintf_internal_r+0x15b8>
    815c:	d9014c17 	ldw	r4,1328(sp)
    8160:	2080100c 	andi	r2,r4,64
    8164:	1002e726 	beq	r2,zero,8d04 <___vfprintf_internal_r+0x15b8>
    8168:	3880000f 	ldh	r2,0(r7)
    816c:	39c00104 	addi	r7,r7,4
    8170:	d9c14015 	stw	r7,1280(sp)
    8174:	1023d7fa 	srai	r17,r2,31
    8178:	1021883a 	mov	r16,r2
    817c:	88037216 	blt	r17,zero,8f48 <___vfprintf_internal_r+0x17fc>
    8180:	01000044 	movi	r4,1
    8184:	98000416 	blt	r19,zero,8198 <___vfprintf_internal_r+0xa4c>
    8188:	d8c14c17 	ldw	r3,1328(sp)
    818c:	00bfdfc4 	movi	r2,-129
    8190:	1886703a 	and	r3,r3,r2
    8194:	d8c14c15 	stw	r3,1328(sp)
    8198:	8444b03a 	or	r2,r16,r17
    819c:	1002261e 	bne	r2,zero,8a38 <___vfprintf_internal_r+0x12ec>
    81a0:	9802251e 	bne	r19,zero,8a38 <___vfprintf_internal_r+0x12ec>
    81a4:	20803fcc 	andi	r2,r4,255
    81a8:	10029b26 	beq	r2,zero,8c18 <___vfprintf_internal_r+0x14cc>
    81ac:	d8c01904 	addi	r3,sp,100
    81b0:	dd000f04 	addi	r20,sp,60
    81b4:	d8c14115 	stw	r3,1284(sp)
    81b8:	d8c14117 	ldw	r3,1284(sp)
    81bc:	dcc14515 	stw	r19,1300(sp)
    81c0:	a0c5c83a 	sub	r2,r20,r3
    81c4:	11c00a04 	addi	r7,r2,40
    81c8:	99c0010e 	bge	r19,r7,81d0 <___vfprintf_internal_r+0xa84>
    81cc:	d9c14515 	stw	r7,1300(sp)
    81d0:	dcc14615 	stw	r19,1304(sp)
    81d4:	d8800407 	ldb	r2,16(sp)
    81d8:	103e4c26 	beq	r2,zero,7b0c <___vfprintf_internal_r+0x3c0>
    81dc:	d8814517 	ldw	r2,1300(sp)
    81e0:	10800044 	addi	r2,r2,1
    81e4:	d8814515 	stw	r2,1300(sp)
    81e8:	003e4806 	br	7b0c <___vfprintf_internal_r+0x3c0>
    81ec:	d9814c17 	ldw	r6,1328(sp)
    81f0:	31800414 	ori	r6,r6,16
    81f4:	d9814c15 	stw	r6,1328(sp)
    81f8:	d8c14c17 	ldw	r3,1328(sp)
    81fc:	1880080c 	andi	r2,r3,32
    8200:	1001271e 	bne	r2,zero,86a0 <___vfprintf_internal_r+0xf54>
    8204:	d9414c17 	ldw	r5,1328(sp)
    8208:	2880040c 	andi	r2,r5,16
    820c:	1002b61e 	bne	r2,zero,8ce8 <___vfprintf_internal_r+0x159c>
    8210:	d9814c17 	ldw	r6,1328(sp)
    8214:	3080100c 	andi	r2,r6,64
    8218:	1002b326 	beq	r2,zero,8ce8 <___vfprintf_internal_r+0x159c>
    821c:	3c00000b 	ldhu	r16,0(r7)
    8220:	0009883a 	mov	r4,zero
    8224:	39c00104 	addi	r7,r7,4
    8228:	0023883a 	mov	r17,zero
    822c:	d9c14015 	stw	r7,1280(sp)
    8230:	d8000405 	stb	zero,16(sp)
    8234:	003fd306 	br	8184 <___vfprintf_internal_r+0xa38>
    8238:	d9014c17 	ldw	r4,1328(sp)
    823c:	21000414 	ori	r4,r4,16
    8240:	d9014c15 	stw	r4,1328(sp)
    8244:	d9414c17 	ldw	r5,1328(sp)
    8248:	2880080c 	andi	r2,r5,32
    824c:	1001081e 	bne	r2,zero,8670 <___vfprintf_internal_r+0xf24>
    8250:	d8c14c17 	ldw	r3,1328(sp)
    8254:	1880040c 	andi	r2,r3,16
    8258:	1002b01e 	bne	r2,zero,8d1c <___vfprintf_internal_r+0x15d0>
    825c:	d9014c17 	ldw	r4,1328(sp)
    8260:	2080100c 	andi	r2,r4,64
    8264:	1002ad26 	beq	r2,zero,8d1c <___vfprintf_internal_r+0x15d0>
    8268:	3c00000b 	ldhu	r16,0(r7)
    826c:	01000044 	movi	r4,1
    8270:	39c00104 	addi	r7,r7,4
    8274:	0023883a 	mov	r17,zero
    8278:	d9c14015 	stw	r7,1280(sp)
    827c:	d8000405 	stb	zero,16(sp)
    8280:	003fc006 	br	8184 <___vfprintf_internal_r+0xa38>
    8284:	d9014f17 	ldw	r4,1340(sp)
    8288:	b00b883a 	mov	r5,r22
    828c:	d9800c04 	addi	r6,sp,48
    8290:	00076f40 	call	76f4 <__sprint_r>
    8294:	103ee51e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8298:	dc800e17 	ldw	r18,56(sp)
    829c:	d8c01904 	addi	r3,sp,100
    82a0:	d9814c17 	ldw	r6,1328(sp)
    82a4:	3080004c 	andi	r2,r6,1
    82a8:	1005003a 	cmpeq	r2,r2,zero
    82ac:	103ea51e 	bne	r2,zero,7d44 <___vfprintf_internal_r+0x5f8>
    82b0:	00800044 	movi	r2,1
    82b4:	dc400d17 	ldw	r17,52(sp)
    82b8:	18800115 	stw	r2,4(r3)
    82bc:	d8814917 	ldw	r2,1316(sp)
    82c0:	94800044 	addi	r18,r18,1
    82c4:	8c400044 	addi	r17,r17,1
    82c8:	18800015 	stw	r2,0(r3)
    82cc:	008001c4 	movi	r2,7
    82d0:	dc800e15 	stw	r18,56(sp)
    82d4:	dc400d15 	stw	r17,52(sp)
    82d8:	14421e0e 	bge	r2,r17,8b54 <___vfprintf_internal_r+0x1408>
    82dc:	d9014f17 	ldw	r4,1340(sp)
    82e0:	b00b883a 	mov	r5,r22
    82e4:	d9800c04 	addi	r6,sp,48
    82e8:	00076f40 	call	76f4 <__sprint_r>
    82ec:	103ecf1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    82f0:	dc800e17 	ldw	r18,56(sp)
    82f4:	d8c01904 	addi	r3,sp,100
    82f8:	003e9206 	br	7d44 <___vfprintf_internal_r+0x5f8>
    82fc:	d9014f17 	ldw	r4,1340(sp)
    8300:	b00b883a 	mov	r5,r22
    8304:	d9800c04 	addi	r6,sp,48
    8308:	00076f40 	call	76f4 <__sprint_r>
    830c:	103ec026 	beq	r2,zero,7e10 <___vfprintf_internal_r+0x6c4>
    8310:	003ec606 	br	7e2c <___vfprintf_internal_r+0x6e0>
    8314:	d9014f17 	ldw	r4,1340(sp)
    8318:	b00b883a 	mov	r5,r22
    831c:	d9800c04 	addi	r6,sp,48
    8320:	d9c15115 	stw	r7,1348(sp)
    8324:	00076f40 	call	76f4 <__sprint_r>
    8328:	d9c15117 	ldw	r7,1348(sp)
    832c:	103ebf1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8330:	dc800e17 	ldw	r18,56(sp)
    8334:	dc400d17 	ldw	r17,52(sp)
    8338:	dd401904 	addi	r21,sp,100
    833c:	003e7406 	br	7d10 <___vfprintf_internal_r+0x5c4>
    8340:	d9014f17 	ldw	r4,1340(sp)
    8344:	b00b883a 	mov	r5,r22
    8348:	d9800c04 	addi	r6,sp,48
    834c:	d9c15115 	stw	r7,1348(sp)
    8350:	00076f40 	call	76f4 <__sprint_r>
    8354:	d9c15117 	ldw	r7,1348(sp)
    8358:	103eb41e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    835c:	dd401904 	addi	r21,sp,100
    8360:	003d6d06 	br	7918 <___vfprintf_internal_r+0x1cc>
    8364:	d9014f17 	ldw	r4,1340(sp)
    8368:	b00b883a 	mov	r5,r22
    836c:	d9800c04 	addi	r6,sp,48
    8370:	d9c15115 	stw	r7,1348(sp)
    8374:	00076f40 	call	76f4 <__sprint_r>
    8378:	d9c15117 	ldw	r7,1348(sp)
    837c:	103eab1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8380:	dc800e17 	ldw	r18,56(sp)
    8384:	dc400d17 	ldw	r17,52(sp)
    8388:	dd401904 	addi	r21,sp,100
    838c:	003e3406 	br	7c60 <___vfprintf_internal_r+0x514>
    8390:	d9014f17 	ldw	r4,1340(sp)
    8394:	b00b883a 	mov	r5,r22
    8398:	d9800c04 	addi	r6,sp,48
    839c:	d9c15115 	stw	r7,1348(sp)
    83a0:	00076f40 	call	76f4 <__sprint_r>
    83a4:	d9c15117 	ldw	r7,1348(sp)
    83a8:	103ea01e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    83ac:	dc800e17 	ldw	r18,56(sp)
    83b0:	dc400d17 	ldw	r17,52(sp)
    83b4:	dd401904 	addi	r21,sp,100
    83b8:	003e1c06 	br	7c2c <___vfprintf_internal_r+0x4e0>
    83bc:	d9014f17 	ldw	r4,1340(sp)
    83c0:	b00b883a 	mov	r5,r22
    83c4:	d9800c04 	addi	r6,sp,48
    83c8:	d9c15115 	stw	r7,1348(sp)
    83cc:	00076f40 	call	76f4 <__sprint_r>
    83d0:	d9c15117 	ldw	r7,1348(sp)
    83d4:	103e951e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    83d8:	dc800e17 	ldw	r18,56(sp)
    83dc:	dc400d17 	ldw	r17,52(sp)
    83e0:	dd401904 	addi	r21,sp,100
    83e4:	003e0406 	br	7bf8 <___vfprintf_internal_r+0x4ac>
    83e8:	d9000517 	ldw	r4,20(sp)
    83ec:	0102520e 	bge	zero,r4,8d38 <___vfprintf_internal_r+0x15ec>
    83f0:	d9814717 	ldw	r6,1308(sp)
    83f4:	21807a16 	blt	r4,r6,85e0 <___vfprintf_internal_r+0xe94>
    83f8:	d8814117 	ldw	r2,1284(sp)
    83fc:	91a5883a 	add	r18,r18,r6
    8400:	8c400044 	addi	r17,r17,1
    8404:	a8800015 	stw	r2,0(r21)
    8408:	008001c4 	movi	r2,7
    840c:	a9800115 	stw	r6,4(r21)
    8410:	dc800e15 	stw	r18,56(sp)
    8414:	dc400d15 	stw	r17,52(sp)
    8418:	1442f616 	blt	r2,r17,8ff4 <___vfprintf_internal_r+0x18a8>
    841c:	a8c00204 	addi	r3,r21,8
    8420:	d9414717 	ldw	r5,1308(sp)
    8424:	2161c83a 	sub	r16,r4,r5
    8428:	043f9d0e 	bge	zero,r16,82a0 <___vfprintf_internal_r+0xb54>
    842c:	00800404 	movi	r2,16
    8430:	1402130e 	bge	r2,r16,8c80 <___vfprintf_internal_r+0x1534>
    8434:	dc400d17 	ldw	r17,52(sp)
    8438:	1027883a 	mov	r19,r2
    843c:	07020034 	movhi	fp,2048
    8440:	e700fd84 	addi	fp,fp,1014
    8444:	050001c4 	movi	r20,7
    8448:	00000306 	br	8458 <___vfprintf_internal_r+0xd0c>
    844c:	18c00204 	addi	r3,r3,8
    8450:	843ffc04 	addi	r16,r16,-16
    8454:	9c020d0e 	bge	r19,r16,8c8c <___vfprintf_internal_r+0x1540>
    8458:	94800404 	addi	r18,r18,16
    845c:	8c400044 	addi	r17,r17,1
    8460:	1f000015 	stw	fp,0(r3)
    8464:	1cc00115 	stw	r19,4(r3)
    8468:	dc800e15 	stw	r18,56(sp)
    846c:	dc400d15 	stw	r17,52(sp)
    8470:	a47ff60e 	bge	r20,r17,844c <___vfprintf_internal_r+0xd00>
    8474:	d9014f17 	ldw	r4,1340(sp)
    8478:	b00b883a 	mov	r5,r22
    847c:	d9800c04 	addi	r6,sp,48
    8480:	00076f40 	call	76f4 <__sprint_r>
    8484:	103e691e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8488:	dc800e17 	ldw	r18,56(sp)
    848c:	dc400d17 	ldw	r17,52(sp)
    8490:	d8c01904 	addi	r3,sp,100
    8494:	003fee06 	br	8450 <___vfprintf_internal_r+0xd04>
    8498:	d8814717 	ldw	r2,1308(sp)
    849c:	143fffc4 	addi	r16,r2,-1
    84a0:	043e970e 	bge	zero,r16,7f00 <___vfprintf_internal_r+0x7b4>
    84a4:	00800404 	movi	r2,16
    84a8:	1400180e 	bge	r2,r16,850c <___vfprintf_internal_r+0xdc0>
    84ac:	1029883a 	mov	r20,r2
    84b0:	07020034 	movhi	fp,2048
    84b4:	e700fd84 	addi	fp,fp,1014
    84b8:	054001c4 	movi	r21,7
    84bc:	00000306 	br	84cc <___vfprintf_internal_r+0xd80>
    84c0:	9cc00204 	addi	r19,r19,8
    84c4:	843ffc04 	addi	r16,r16,-16
    84c8:	a400120e 	bge	r20,r16,8514 <___vfprintf_internal_r+0xdc8>
    84cc:	94800404 	addi	r18,r18,16
    84d0:	8c400044 	addi	r17,r17,1
    84d4:	9f000015 	stw	fp,0(r19)
    84d8:	9d000115 	stw	r20,4(r19)
    84dc:	dc800e15 	stw	r18,56(sp)
    84e0:	dc400d15 	stw	r17,52(sp)
    84e4:	ac7ff60e 	bge	r21,r17,84c0 <___vfprintf_internal_r+0xd74>
    84e8:	d9014f17 	ldw	r4,1340(sp)
    84ec:	b00b883a 	mov	r5,r22
    84f0:	d9800c04 	addi	r6,sp,48
    84f4:	00076f40 	call	76f4 <__sprint_r>
    84f8:	103e4c1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    84fc:	dc800e17 	ldw	r18,56(sp)
    8500:	dc400d17 	ldw	r17,52(sp)
    8504:	dcc01904 	addi	r19,sp,100
    8508:	003fee06 	br	84c4 <___vfprintf_internal_r+0xd78>
    850c:	07020034 	movhi	fp,2048
    8510:	e700fd84 	addi	fp,fp,1014
    8514:	9425883a 	add	r18,r18,r16
    8518:	8c400044 	addi	r17,r17,1
    851c:	008001c4 	movi	r2,7
    8520:	9f000015 	stw	fp,0(r19)
    8524:	9c000115 	stw	r16,4(r19)
    8528:	dc800e15 	stw	r18,56(sp)
    852c:	dc400d15 	stw	r17,52(sp)
    8530:	147e720e 	bge	r2,r17,7efc <___vfprintf_internal_r+0x7b0>
    8534:	d9014f17 	ldw	r4,1340(sp)
    8538:	b00b883a 	mov	r5,r22
    853c:	d9800c04 	addi	r6,sp,48
    8540:	00076f40 	call	76f4 <__sprint_r>
    8544:	103e391e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8548:	dc800e17 	ldw	r18,56(sp)
    854c:	dc400d17 	ldw	r17,52(sp)
    8550:	dcc01904 	addi	r19,sp,100
    8554:	003e6a06 	br	7f00 <___vfprintf_internal_r+0x7b4>
    8558:	d9014f17 	ldw	r4,1340(sp)
    855c:	b00b883a 	mov	r5,r22
    8560:	d9800c04 	addi	r6,sp,48
    8564:	d9c15115 	stw	r7,1348(sp)
    8568:	00076f40 	call	76f4 <__sprint_r>
    856c:	d9c15117 	ldw	r7,1348(sp)
    8570:	103e2e1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8574:	dc800e17 	ldw	r18,56(sp)
    8578:	dc400d17 	ldw	r17,52(sp)
    857c:	dd401904 	addi	r21,sp,100
    8580:	003dba06 	br	7c6c <___vfprintf_internal_r+0x520>
    8584:	d9014f17 	ldw	r4,1340(sp)
    8588:	b00b883a 	mov	r5,r22
    858c:	d9800c04 	addi	r6,sp,48
    8590:	00076f40 	call	76f4 <__sprint_r>
    8594:	103e251e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8598:	dc800e17 	ldw	r18,56(sp)
    859c:	dc400d17 	ldw	r17,52(sp)
    85a0:	dcc01904 	addi	r19,sp,100
    85a4:	003e4206 	br	7eb0 <___vfprintf_internal_r+0x764>
    85a8:	d9014f17 	ldw	r4,1340(sp)
    85ac:	b00b883a 	mov	r5,r22
    85b0:	d9800c04 	addi	r6,sp,48
    85b4:	00076f40 	call	76f4 <__sprint_r>
    85b8:	103e1c1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    85bc:	dc800e17 	ldw	r18,56(sp)
    85c0:	dc400d17 	ldw	r17,52(sp)
    85c4:	d8c01904 	addi	r3,sp,100
    85c8:	003e2e06 	br	7e84 <___vfprintf_internal_r+0x738>
    85cc:	d9414c17 	ldw	r5,1328(sp)
    85d0:	2880004c 	andi	r2,r5,1
    85d4:	1005003a 	cmpeq	r2,r2,zero
    85d8:	103dda1e 	bne	r2,zero,7d44 <___vfprintf_internal_r+0x5f8>
    85dc:	003e9f06 	br	805c <___vfprintf_internal_r+0x910>
    85e0:	d8c14117 	ldw	r3,1284(sp)
    85e4:	9125883a 	add	r18,r18,r4
    85e8:	8c400044 	addi	r17,r17,1
    85ec:	008001c4 	movi	r2,7
    85f0:	a8c00015 	stw	r3,0(r21)
    85f4:	a9000115 	stw	r4,4(r21)
    85f8:	dc800e15 	stw	r18,56(sp)
    85fc:	dc400d15 	stw	r17,52(sp)
    8600:	14426616 	blt	r2,r17,8f9c <___vfprintf_internal_r+0x1850>
    8604:	a8c00204 	addi	r3,r21,8
    8608:	d9414917 	ldw	r5,1316(sp)
    860c:	00800044 	movi	r2,1
    8610:	94800044 	addi	r18,r18,1
    8614:	8c400044 	addi	r17,r17,1
    8618:	18800115 	stw	r2,4(r3)
    861c:	008001c4 	movi	r2,7
    8620:	19400015 	stw	r5,0(r3)
    8624:	dc800e15 	stw	r18,56(sp)
    8628:	dc400d15 	stw	r17,52(sp)
    862c:	2021883a 	mov	r16,r4
    8630:	14425016 	blt	r2,r17,8f74 <___vfprintf_internal_r+0x1828>
    8634:	19400204 	addi	r5,r3,8
    8638:	d9814717 	ldw	r6,1308(sp)
    863c:	8c400044 	addi	r17,r17,1
    8640:	dc400d15 	stw	r17,52(sp)
    8644:	3107c83a 	sub	r3,r6,r4
    8648:	d9014117 	ldw	r4,1284(sp)
    864c:	90e5883a 	add	r18,r18,r3
    8650:	28c00115 	stw	r3,4(r5)
    8654:	8105883a 	add	r2,r16,r4
    8658:	28800015 	stw	r2,0(r5)
    865c:	008001c4 	movi	r2,7
    8660:	dc800e15 	stw	r18,56(sp)
    8664:	147f1d16 	blt	r2,r17,82dc <___vfprintf_internal_r+0xb90>
    8668:	28c00204 	addi	r3,r5,8
    866c:	003db506 	br	7d44 <___vfprintf_internal_r+0x5f8>
    8670:	3c000017 	ldw	r16,0(r7)
    8674:	3c400117 	ldw	r17,4(r7)
    8678:	39800204 	addi	r6,r7,8
    867c:	01000044 	movi	r4,1
    8680:	d9814015 	stw	r6,1280(sp)
    8684:	d8000405 	stb	zero,16(sp)
    8688:	003ebe06 	br	8184 <___vfprintf_internal_r+0xa38>
    868c:	3c000017 	ldw	r16,0(r7)
    8690:	3c400117 	ldw	r17,4(r7)
    8694:	38800204 	addi	r2,r7,8
    8698:	d8814015 	stw	r2,1280(sp)
    869c:	003eb706 	br	817c <___vfprintf_internal_r+0xa30>
    86a0:	3c000017 	ldw	r16,0(r7)
    86a4:	3c400117 	ldw	r17,4(r7)
    86a8:	39000204 	addi	r4,r7,8
    86ac:	d9014015 	stw	r4,1280(sp)
    86b0:	0009883a 	mov	r4,zero
    86b4:	d8000405 	stb	zero,16(sp)
    86b8:	003eb206 	br	8184 <___vfprintf_internal_r+0xa38>
    86bc:	38c00017 	ldw	r3,0(r7)
    86c0:	39c00104 	addi	r7,r7,4
    86c4:	d8c14a15 	stw	r3,1320(sp)
    86c8:	1800d10e 	bge	r3,zero,8a10 <___vfprintf_internal_r+0x12c4>
    86cc:	00c7c83a 	sub	r3,zero,r3
    86d0:	d8c14a15 	stw	r3,1320(sp)
    86d4:	d9014c17 	ldw	r4,1328(sp)
    86d8:	b8c00007 	ldb	r3,0(r23)
    86dc:	21000114 	ori	r4,r4,4
    86e0:	d9014c15 	stw	r4,1328(sp)
    86e4:	003c9806 	br	7948 <___vfprintf_internal_r+0x1fc>
    86e8:	d9814c17 	ldw	r6,1328(sp)
    86ec:	3080080c 	andi	r2,r6,32
    86f0:	1001f026 	beq	r2,zero,8eb4 <___vfprintf_internal_r+0x1768>
    86f4:	d9014b17 	ldw	r4,1324(sp)
    86f8:	38800017 	ldw	r2,0(r7)
    86fc:	39c00104 	addi	r7,r7,4
    8700:	d9c14015 	stw	r7,1280(sp)
    8704:	2007d7fa 	srai	r3,r4,31
    8708:	d9c14017 	ldw	r7,1280(sp)
    870c:	11000015 	stw	r4,0(r2)
    8710:	10c00115 	stw	r3,4(r2)
    8714:	003c6906 	br	78bc <___vfprintf_internal_r+0x170>
    8718:	b8c00007 	ldb	r3,0(r23)
    871c:	00801b04 	movi	r2,108
    8720:	18824f26 	beq	r3,r2,9060 <___vfprintf_internal_r+0x1914>
    8724:	d9414c17 	ldw	r5,1328(sp)
    8728:	29400414 	ori	r5,r5,16
    872c:	d9414c15 	stw	r5,1328(sp)
    8730:	003c8506 	br	7948 <___vfprintf_internal_r+0x1fc>
    8734:	d9814c17 	ldw	r6,1328(sp)
    8738:	b8c00007 	ldb	r3,0(r23)
    873c:	31800814 	ori	r6,r6,32
    8740:	d9814c15 	stw	r6,1328(sp)
    8744:	003c8006 	br	7948 <___vfprintf_internal_r+0x1fc>
    8748:	d8814c17 	ldw	r2,1328(sp)
    874c:	3c000017 	ldw	r16,0(r7)
    8750:	00c01e04 	movi	r3,120
    8754:	10800094 	ori	r2,r2,2
    8758:	d8814c15 	stw	r2,1328(sp)
    875c:	39c00104 	addi	r7,r7,4
    8760:	01420034 	movhi	r5,2048
    8764:	2940e604 	addi	r5,r5,920
    8768:	00800c04 	movi	r2,48
    876c:	0023883a 	mov	r17,zero
    8770:	01000084 	movi	r4,2
    8774:	d9c14015 	stw	r7,1280(sp)
    8778:	d8c14d15 	stw	r3,1332(sp)
    877c:	d9414415 	stw	r5,1296(sp)
    8780:	d8800445 	stb	r2,17(sp)
    8784:	d8c00485 	stb	r3,18(sp)
    8788:	d8000405 	stb	zero,16(sp)
    878c:	003e7d06 	br	8184 <___vfprintf_internal_r+0xa38>
    8790:	d8814c17 	ldw	r2,1328(sp)
    8794:	b8c00007 	ldb	r3,0(r23)
    8798:	10801014 	ori	r2,r2,64
    879c:	d8814c15 	stw	r2,1328(sp)
    87a0:	003c6906 	br	7948 <___vfprintf_internal_r+0x1fc>
    87a4:	d9414c17 	ldw	r5,1328(sp)
    87a8:	2880020c 	andi	r2,r5,8
    87ac:	1001df26 	beq	r2,zero,8f2c <___vfprintf_internal_r+0x17e0>
    87b0:	39800017 	ldw	r6,0(r7)
    87b4:	38800204 	addi	r2,r7,8
    87b8:	d8814015 	stw	r2,1280(sp)
    87bc:	d9814215 	stw	r6,1288(sp)
    87c0:	39c00117 	ldw	r7,4(r7)
    87c4:	d9c14315 	stw	r7,1292(sp)
    87c8:	d9014217 	ldw	r4,1288(sp)
    87cc:	d9414317 	ldw	r5,1292(sp)
    87d0:	000e1a00 	call	e1a0 <__isinfd>
    87d4:	10021726 	beq	r2,zero,9034 <___vfprintf_internal_r+0x18e8>
    87d8:	d9014217 	ldw	r4,1288(sp)
    87dc:	d9414317 	ldw	r5,1292(sp)
    87e0:	000d883a 	mov	r6,zero
    87e4:	000f883a 	mov	r7,zero
    87e8:	000f78c0 	call	f78c <__ltdf2>
    87ec:	1002ca16 	blt	r2,zero,9318 <___vfprintf_internal_r+0x1bcc>
    87f0:	d9414d17 	ldw	r5,1332(sp)
    87f4:	008011c4 	movi	r2,71
    87f8:	11420a16 	blt	r2,r5,9024 <___vfprintf_internal_r+0x18d8>
    87fc:	01820034 	movhi	r6,2048
    8800:	3180eb04 	addi	r6,r6,940
    8804:	d9814115 	stw	r6,1284(sp)
    8808:	d9014c17 	ldw	r4,1328(sp)
    880c:	00c000c4 	movi	r3,3
    8810:	00bfdfc4 	movi	r2,-129
    8814:	2088703a 	and	r4,r4,r2
    8818:	180f883a 	mov	r7,r3
    881c:	d8c14515 	stw	r3,1300(sp)
    8820:	d9014c15 	stw	r4,1328(sp)
    8824:	d8014615 	stw	zero,1304(sp)
    8828:	003e6a06 	br	81d4 <___vfprintf_internal_r+0xa88>
    882c:	38800017 	ldw	r2,0(r7)
    8830:	00c00044 	movi	r3,1
    8834:	39c00104 	addi	r7,r7,4
    8838:	d9c14015 	stw	r7,1280(sp)
    883c:	d9000f04 	addi	r4,sp,60
    8840:	180f883a 	mov	r7,r3
    8844:	d8c14515 	stw	r3,1300(sp)
    8848:	d9014115 	stw	r4,1284(sp)
    884c:	d8800f05 	stb	r2,60(sp)
    8850:	d8000405 	stb	zero,16(sp)
    8854:	003cac06 	br	7b08 <___vfprintf_internal_r+0x3bc>
    8858:	01420034 	movhi	r5,2048
    885c:	2940f104 	addi	r5,r5,964
    8860:	d9414415 	stw	r5,1296(sp)
    8864:	d9814c17 	ldw	r6,1328(sp)
    8868:	3080080c 	andi	r2,r6,32
    886c:	1000f926 	beq	r2,zero,8c54 <___vfprintf_internal_r+0x1508>
    8870:	3c000017 	ldw	r16,0(r7)
    8874:	3c400117 	ldw	r17,4(r7)
    8878:	38800204 	addi	r2,r7,8
    887c:	d8814015 	stw	r2,1280(sp)
    8880:	d9414c17 	ldw	r5,1328(sp)
    8884:	2880004c 	andi	r2,r5,1
    8888:	1005003a 	cmpeq	r2,r2,zero
    888c:	1000b31e 	bne	r2,zero,8b5c <___vfprintf_internal_r+0x1410>
    8890:	8444b03a 	or	r2,r16,r17
    8894:	1000b126 	beq	r2,zero,8b5c <___vfprintf_internal_r+0x1410>
    8898:	d9814d17 	ldw	r6,1332(sp)
    889c:	29400094 	ori	r5,r5,2
    88a0:	00800c04 	movi	r2,48
    88a4:	01000084 	movi	r4,2
    88a8:	d9414c15 	stw	r5,1328(sp)
    88ac:	d8800445 	stb	r2,17(sp)
    88b0:	d9800485 	stb	r6,18(sp)
    88b4:	d8000405 	stb	zero,16(sp)
    88b8:	003e3206 	br	8184 <___vfprintf_internal_r+0xa38>
    88bc:	01820034 	movhi	r6,2048
    88c0:	3180e604 	addi	r6,r6,920
    88c4:	d9814415 	stw	r6,1296(sp)
    88c8:	003fe606 	br	8864 <___vfprintf_internal_r+0x1118>
    88cc:	00800ac4 	movi	r2,43
    88d0:	d8800405 	stb	r2,16(sp)
    88d4:	b8c00007 	ldb	r3,0(r23)
    88d8:	003c1b06 	br	7948 <___vfprintf_internal_r+0x1fc>
    88dc:	d8814c17 	ldw	r2,1328(sp)
    88e0:	b8c00007 	ldb	r3,0(r23)
    88e4:	10800054 	ori	r2,r2,1
    88e8:	d8814c15 	stw	r2,1328(sp)
    88ec:	003c1606 	br	7948 <___vfprintf_internal_r+0x1fc>
    88f0:	d8800407 	ldb	r2,16(sp)
    88f4:	1000461e 	bne	r2,zero,8a10 <___vfprintf_internal_r+0x12c4>
    88f8:	00800804 	movi	r2,32
    88fc:	d8800405 	stb	r2,16(sp)
    8900:	b8c00007 	ldb	r3,0(r23)
    8904:	003c1006 	br	7948 <___vfprintf_internal_r+0x1fc>
    8908:	d9814c17 	ldw	r6,1328(sp)
    890c:	b8c00007 	ldb	r3,0(r23)
    8910:	31800214 	ori	r6,r6,8
    8914:	d9814c15 	stw	r6,1328(sp)
    8918:	003c0b06 	br	7948 <___vfprintf_internal_r+0x1fc>
    891c:	0007883a 	mov	r3,zero
    8920:	01000244 	movi	r4,9
    8924:	188002a4 	muli	r2,r3,10
    8928:	b8c00007 	ldb	r3,0(r23)
    892c:	d9814d17 	ldw	r6,1332(sp)
    8930:	bdc00044 	addi	r23,r23,1
    8934:	d8c14d15 	stw	r3,1332(sp)
    8938:	d9414d17 	ldw	r5,1332(sp)
    893c:	3085883a 	add	r2,r6,r2
    8940:	10fff404 	addi	r3,r2,-48
    8944:	28bff404 	addi	r2,r5,-48
    8948:	20bff62e 	bgeu	r4,r2,8924 <___vfprintf_internal_r+0x11d8>
    894c:	d8c14a15 	stw	r3,1320(sp)
    8950:	003bff06 	br	7950 <___vfprintf_internal_r+0x204>
    8954:	d9414c17 	ldw	r5,1328(sp)
    8958:	b8c00007 	ldb	r3,0(r23)
    895c:	29402014 	ori	r5,r5,128
    8960:	d9414c15 	stw	r5,1328(sp)
    8964:	003bf806 	br	7948 <___vfprintf_internal_r+0x1fc>
    8968:	b8c00007 	ldb	r3,0(r23)
    896c:	00800a84 	movi	r2,42
    8970:	bdc00044 	addi	r23,r23,1
    8974:	18831526 	beq	r3,r2,95cc <___vfprintf_internal_r+0x1e80>
    8978:	d8c14d15 	stw	r3,1332(sp)
    897c:	18bff404 	addi	r2,r3,-48
    8980:	00c00244 	movi	r3,9
    8984:	18827836 	bltu	r3,r2,9368 <___vfprintf_internal_r+0x1c1c>
    8988:	000d883a 	mov	r6,zero
    898c:	308002a4 	muli	r2,r6,10
    8990:	b9800007 	ldb	r6,0(r23)
    8994:	d9414d17 	ldw	r5,1332(sp)
    8998:	bdc00044 	addi	r23,r23,1
    899c:	d9814d15 	stw	r6,1332(sp)
    89a0:	d9014d17 	ldw	r4,1332(sp)
    89a4:	1145883a 	add	r2,r2,r5
    89a8:	11bff404 	addi	r6,r2,-48
    89ac:	20bff404 	addi	r2,r4,-48
    89b0:	18bff62e 	bgeu	r3,r2,898c <___vfprintf_internal_r+0x1240>
    89b4:	3027883a 	mov	r19,r6
    89b8:	303be50e 	bge	r6,zero,7950 <___vfprintf_internal_r+0x204>
    89bc:	04ffffc4 	movi	r19,-1
    89c0:	003be306 	br	7950 <___vfprintf_internal_r+0x204>
    89c4:	d8000405 	stb	zero,16(sp)
    89c8:	39800017 	ldw	r6,0(r7)
    89cc:	39c00104 	addi	r7,r7,4
    89d0:	d9c14015 	stw	r7,1280(sp)
    89d4:	d9814115 	stw	r6,1284(sp)
    89d8:	3001c926 	beq	r6,zero,9100 <___vfprintf_internal_r+0x19b4>
    89dc:	98000e16 	blt	r19,zero,8a18 <___vfprintf_internal_r+0x12cc>
    89e0:	d9014117 	ldw	r4,1284(sp)
    89e4:	000b883a 	mov	r5,zero
    89e8:	980d883a 	mov	r6,r19
    89ec:	000c8080 	call	c808 <memchr>
    89f0:	10025926 	beq	r2,zero,9358 <___vfprintf_internal_r+0x1c0c>
    89f4:	d8c14117 	ldw	r3,1284(sp)
    89f8:	10cfc83a 	sub	r7,r2,r3
    89fc:	99c19e16 	blt	r19,r7,9078 <___vfprintf_internal_r+0x192c>
    8a00:	d9c14515 	stw	r7,1300(sp)
    8a04:	38000916 	blt	r7,zero,8a2c <___vfprintf_internal_r+0x12e0>
    8a08:	d8014615 	stw	zero,1304(sp)
    8a0c:	003df106 	br	81d4 <___vfprintf_internal_r+0xa88>
    8a10:	b8c00007 	ldb	r3,0(r23)
    8a14:	003bcc06 	br	7948 <___vfprintf_internal_r+0x1fc>
    8a18:	d9014117 	ldw	r4,1284(sp)
    8a1c:	00076800 	call	7680 <strlen>
    8a20:	d8814515 	stw	r2,1300(sp)
    8a24:	100f883a 	mov	r7,r2
    8a28:	103ff70e 	bge	r2,zero,8a08 <___vfprintf_internal_r+0x12bc>
    8a2c:	d8014515 	stw	zero,1300(sp)
    8a30:	d8014615 	stw	zero,1304(sp)
    8a34:	003de706 	br	81d4 <___vfprintf_internal_r+0xa88>
    8a38:	20c03fcc 	andi	r3,r4,255
    8a3c:	00800044 	movi	r2,1
    8a40:	18802d26 	beq	r3,r2,8af8 <___vfprintf_internal_r+0x13ac>
    8a44:	18800e36 	bltu	r3,r2,8a80 <___vfprintf_internal_r+0x1334>
    8a48:	00800084 	movi	r2,2
    8a4c:	1880fa26 	beq	r3,r2,8e38 <___vfprintf_internal_r+0x16ec>
    8a50:	01020034 	movhi	r4,2048
    8a54:	2100f604 	addi	r4,r4,984
    8a58:	00076800 	call	7680 <strlen>
    8a5c:	100f883a 	mov	r7,r2
    8a60:	dcc14515 	stw	r19,1300(sp)
    8a64:	9880010e 	bge	r19,r2,8a6c <___vfprintf_internal_r+0x1320>
    8a68:	d8814515 	stw	r2,1300(sp)
    8a6c:	00820034 	movhi	r2,2048
    8a70:	1080f604 	addi	r2,r2,984
    8a74:	dcc14615 	stw	r19,1304(sp)
    8a78:	d8814115 	stw	r2,1284(sp)
    8a7c:	003dd506 	br	81d4 <___vfprintf_internal_r+0xa88>
    8a80:	d9401904 	addi	r5,sp,100
    8a84:	dd000f04 	addi	r20,sp,60
    8a88:	d9414115 	stw	r5,1284(sp)
    8a8c:	880a977a 	slli	r5,r17,29
    8a90:	d9814117 	ldw	r6,1284(sp)
    8a94:	8004d0fa 	srli	r2,r16,3
    8a98:	8806d0fa 	srli	r3,r17,3
    8a9c:	810001cc 	andi	r4,r16,7
    8aa0:	2884b03a 	or	r2,r5,r2
    8aa4:	31bfffc4 	addi	r6,r6,-1
    8aa8:	21000c04 	addi	r4,r4,48
    8aac:	d9814115 	stw	r6,1284(sp)
    8ab0:	10cab03a 	or	r5,r2,r3
    8ab4:	31000005 	stb	r4,0(r6)
    8ab8:	1021883a 	mov	r16,r2
    8abc:	1823883a 	mov	r17,r3
    8ac0:	283ff21e 	bne	r5,zero,8a8c <___vfprintf_internal_r+0x1340>
    8ac4:	d8c14c17 	ldw	r3,1328(sp)
    8ac8:	1880004c 	andi	r2,r3,1
    8acc:	1005003a 	cmpeq	r2,r2,zero
    8ad0:	103db91e 	bne	r2,zero,81b8 <___vfprintf_internal_r+0xa6c>
    8ad4:	20803fcc 	andi	r2,r4,255
    8ad8:	1080201c 	xori	r2,r2,128
    8adc:	10bfe004 	addi	r2,r2,-128
    8ae0:	00c00c04 	movi	r3,48
    8ae4:	10fdb426 	beq	r2,r3,81b8 <___vfprintf_internal_r+0xa6c>
    8ae8:	31bfffc4 	addi	r6,r6,-1
    8aec:	d9814115 	stw	r6,1284(sp)
    8af0:	30c00005 	stb	r3,0(r6)
    8af4:	003db006 	br	81b8 <___vfprintf_internal_r+0xa6c>
    8af8:	88800068 	cmpgeui	r2,r17,1
    8afc:	10002c1e 	bne	r2,zero,8bb0 <___vfprintf_internal_r+0x1464>
    8b00:	8800021e 	bne	r17,zero,8b0c <___vfprintf_internal_r+0x13c0>
    8b04:	00800244 	movi	r2,9
    8b08:	14002936 	bltu	r2,r16,8bb0 <___vfprintf_internal_r+0x1464>
    8b0c:	d90018c4 	addi	r4,sp,99
    8b10:	dd000f04 	addi	r20,sp,60
    8b14:	d9014115 	stw	r4,1284(sp)
    8b18:	d9014117 	ldw	r4,1284(sp)
    8b1c:	80800c04 	addi	r2,r16,48
    8b20:	20800005 	stb	r2,0(r4)
    8b24:	003da406 	br	81b8 <___vfprintf_internal_r+0xa6c>
    8b28:	dc400d17 	ldw	r17,52(sp)
    8b2c:	07020034 	movhi	fp,2048
    8b30:	e700fd84 	addi	fp,fp,1014
    8b34:	9425883a 	add	r18,r18,r16
    8b38:	8c400044 	addi	r17,r17,1
    8b3c:	008001c4 	movi	r2,7
    8b40:	1f000015 	stw	fp,0(r3)
    8b44:	1c000115 	stw	r16,4(r3)
    8b48:	dc800e15 	stw	r18,56(sp)
    8b4c:	dc400d15 	stw	r17,52(sp)
    8b50:	147de216 	blt	r2,r17,82dc <___vfprintf_internal_r+0xb90>
    8b54:	18c00204 	addi	r3,r3,8
    8b58:	003c7a06 	br	7d44 <___vfprintf_internal_r+0x5f8>
    8b5c:	01000084 	movi	r4,2
    8b60:	d8000405 	stb	zero,16(sp)
    8b64:	003d8706 	br	8184 <___vfprintf_internal_r+0xa38>
    8b68:	d9814c17 	ldw	r6,1328(sp)
    8b6c:	30c4703a 	and	r2,r6,r3
    8b70:	1005003a 	cmpeq	r2,r2,zero
    8b74:	103cb926 	beq	r2,zero,7e5c <___vfprintf_internal_r+0x710>
    8b78:	d9014117 	ldw	r4,1284(sp)
    8b7c:	94800044 	addi	r18,r18,1
    8b80:	8c400044 	addi	r17,r17,1
    8b84:	008001c4 	movi	r2,7
    8b88:	a9000015 	stw	r4,0(r21)
    8b8c:	a8c00115 	stw	r3,4(r21)
    8b90:	dc800e15 	stw	r18,56(sp)
    8b94:	dc400d15 	stw	r17,52(sp)
    8b98:	147e6616 	blt	r2,r17,8534 <___vfprintf_internal_r+0xde8>
    8b9c:	acc00204 	addi	r19,r21,8
    8ba0:	003cd706 	br	7f00 <___vfprintf_internal_r+0x7b4>
    8ba4:	07020034 	movhi	fp,2048
    8ba8:	e700fd84 	addi	fp,fp,1014
    8bac:	003c4f06 	br	7cec <___vfprintf_internal_r+0x5a0>
    8bb0:	dd000f04 	addi	r20,sp,60
    8bb4:	dc801904 	addi	r18,sp,100
    8bb8:	8009883a 	mov	r4,r16
    8bbc:	880b883a 	mov	r5,r17
    8bc0:	01800284 	movi	r6,10
    8bc4:	000f883a 	mov	r7,zero
    8bc8:	000f0440 	call	f044 <__umoddi3>
    8bcc:	12000c04 	addi	r8,r2,48
    8bd0:	94bfffc4 	addi	r18,r18,-1
    8bd4:	8009883a 	mov	r4,r16
    8bd8:	880b883a 	mov	r5,r17
    8bdc:	01800284 	movi	r6,10
    8be0:	000f883a 	mov	r7,zero
    8be4:	92000005 	stb	r8,0(r18)
    8be8:	000ea680 	call	ea68 <__udivdi3>
    8bec:	1009883a 	mov	r4,r2
    8bf0:	1021883a 	mov	r16,r2
    8bf4:	18800068 	cmpgeui	r2,r3,1
    8bf8:	1823883a 	mov	r17,r3
    8bfc:	103fee1e 	bne	r2,zero,8bb8 <___vfprintf_internal_r+0x146c>
    8c00:	1800021e 	bne	r3,zero,8c0c <___vfprintf_internal_r+0x14c0>
    8c04:	00800244 	movi	r2,9
    8c08:	113feb36 	bltu	r2,r4,8bb8 <___vfprintf_internal_r+0x146c>
    8c0c:	94bfffc4 	addi	r18,r18,-1
    8c10:	dc814115 	stw	r18,1284(sp)
    8c14:	003fc006 	br	8b18 <___vfprintf_internal_r+0x13cc>
    8c18:	d9014c17 	ldw	r4,1328(sp)
    8c1c:	2080004c 	andi	r2,r4,1
    8c20:	10009a1e 	bne	r2,zero,8e8c <___vfprintf_internal_r+0x1740>
    8c24:	d9401904 	addi	r5,sp,100
    8c28:	dd000f04 	addi	r20,sp,60
    8c2c:	d9414115 	stw	r5,1284(sp)
    8c30:	003d6106 	br	81b8 <___vfprintf_internal_r+0xa6c>
    8c34:	d9014f17 	ldw	r4,1340(sp)
    8c38:	b00b883a 	mov	r5,r22
    8c3c:	d9800c04 	addi	r6,sp,48
    8c40:	00076f40 	call	76f4 <__sprint_r>
    8c44:	103c791e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8c48:	dc800e17 	ldw	r18,56(sp)
    8c4c:	d8c01904 	addi	r3,sp,100
    8c50:	003cff06 	br	8050 <___vfprintf_internal_r+0x904>
    8c54:	d8c14c17 	ldw	r3,1328(sp)
    8c58:	1880040c 	andi	r2,r3,16
    8c5c:	1000711e 	bne	r2,zero,8e24 <___vfprintf_internal_r+0x16d8>
    8c60:	d9014c17 	ldw	r4,1328(sp)
    8c64:	2080100c 	andi	r2,r4,64
    8c68:	10006e26 	beq	r2,zero,8e24 <___vfprintf_internal_r+0x16d8>
    8c6c:	3c00000b 	ldhu	r16,0(r7)
    8c70:	0023883a 	mov	r17,zero
    8c74:	39c00104 	addi	r7,r7,4
    8c78:	d9c14015 	stw	r7,1280(sp)
    8c7c:	003f0006 	br	8880 <___vfprintf_internal_r+0x1134>
    8c80:	dc400d17 	ldw	r17,52(sp)
    8c84:	07020034 	movhi	fp,2048
    8c88:	e700fd84 	addi	fp,fp,1014
    8c8c:	9425883a 	add	r18,r18,r16
    8c90:	8c400044 	addi	r17,r17,1
    8c94:	008001c4 	movi	r2,7
    8c98:	1f000015 	stw	fp,0(r3)
    8c9c:	1c000115 	stw	r16,4(r3)
    8ca0:	dc800e15 	stw	r18,56(sp)
    8ca4:	dc400d15 	stw	r17,52(sp)
    8ca8:	147d7616 	blt	r2,r17,8284 <___vfprintf_internal_r+0xb38>
    8cac:	18c00204 	addi	r3,r3,8
    8cb0:	003d7b06 	br	82a0 <___vfprintf_internal_r+0xb54>
    8cb4:	dc800e17 	ldw	r18,56(sp)
    8cb8:	dc400d17 	ldw	r17,52(sp)
    8cbc:	07020034 	movhi	fp,2048
    8cc0:	e7010184 	addi	fp,fp,1030
    8cc4:	003bc006 	br	7bc8 <___vfprintf_internal_r+0x47c>
    8cc8:	d9014f17 	ldw	r4,1340(sp)
    8ccc:	b00b883a 	mov	r5,r22
    8cd0:	d9800c04 	addi	r6,sp,48
    8cd4:	00076f40 	call	76f4 <__sprint_r>
    8cd8:	103c541e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8cdc:	dc800e17 	ldw	r18,56(sp)
    8ce0:	d8c01904 	addi	r3,sp,100
    8ce4:	003ce906 	br	808c <___vfprintf_internal_r+0x940>
    8ce8:	3c000017 	ldw	r16,0(r7)
    8cec:	0009883a 	mov	r4,zero
    8cf0:	39c00104 	addi	r7,r7,4
    8cf4:	0023883a 	mov	r17,zero
    8cf8:	d9c14015 	stw	r7,1280(sp)
    8cfc:	d8000405 	stb	zero,16(sp)
    8d00:	003d2006 	br	8184 <___vfprintf_internal_r+0xa38>
    8d04:	38800017 	ldw	r2,0(r7)
    8d08:	39c00104 	addi	r7,r7,4
    8d0c:	d9c14015 	stw	r7,1280(sp)
    8d10:	1023d7fa 	srai	r17,r2,31
    8d14:	1021883a 	mov	r16,r2
    8d18:	003d1806 	br	817c <___vfprintf_internal_r+0xa30>
    8d1c:	3c000017 	ldw	r16,0(r7)
    8d20:	01000044 	movi	r4,1
    8d24:	39c00104 	addi	r7,r7,4
    8d28:	0023883a 	mov	r17,zero
    8d2c:	d9c14015 	stw	r7,1280(sp)
    8d30:	d8000405 	stb	zero,16(sp)
    8d34:	003d1306 	br	8184 <___vfprintf_internal_r+0xa38>
    8d38:	00820034 	movhi	r2,2048
    8d3c:	1080fd04 	addi	r2,r2,1012
    8d40:	94800044 	addi	r18,r18,1
    8d44:	8c400044 	addi	r17,r17,1
    8d48:	a8800015 	stw	r2,0(r21)
    8d4c:	00c00044 	movi	r3,1
    8d50:	008001c4 	movi	r2,7
    8d54:	a8c00115 	stw	r3,4(r21)
    8d58:	dc800e15 	stw	r18,56(sp)
    8d5c:	dc400d15 	stw	r17,52(sp)
    8d60:	1440ca16 	blt	r2,r17,908c <___vfprintf_internal_r+0x1940>
    8d64:	a8c00204 	addi	r3,r21,8
    8d68:	2000061e 	bne	r4,zero,8d84 <___vfprintf_internal_r+0x1638>
    8d6c:	d9414717 	ldw	r5,1308(sp)
    8d70:	2800041e 	bne	r5,zero,8d84 <___vfprintf_internal_r+0x1638>
    8d74:	d9814c17 	ldw	r6,1328(sp)
    8d78:	3080004c 	andi	r2,r6,1
    8d7c:	1005003a 	cmpeq	r2,r2,zero
    8d80:	103bf01e 	bne	r2,zero,7d44 <___vfprintf_internal_r+0x5f8>
    8d84:	00800044 	movi	r2,1
    8d88:	dc400d17 	ldw	r17,52(sp)
    8d8c:	18800115 	stw	r2,4(r3)
    8d90:	d8814917 	ldw	r2,1316(sp)
    8d94:	94800044 	addi	r18,r18,1
    8d98:	8c400044 	addi	r17,r17,1
    8d9c:	18800015 	stw	r2,0(r3)
    8da0:	008001c4 	movi	r2,7
    8da4:	dc800e15 	stw	r18,56(sp)
    8da8:	dc400d15 	stw	r17,52(sp)
    8dac:	1440ca16 	blt	r2,r17,90d8 <___vfprintf_internal_r+0x198c>
    8db0:	18c00204 	addi	r3,r3,8
    8db4:	0121c83a 	sub	r16,zero,r4
    8db8:	0400500e 	bge	zero,r16,8efc <___vfprintf_internal_r+0x17b0>
    8dbc:	00800404 	movi	r2,16
    8dc0:	1400800e 	bge	r2,r16,8fc4 <___vfprintf_internal_r+0x1878>
    8dc4:	1027883a 	mov	r19,r2
    8dc8:	07020034 	movhi	fp,2048
    8dcc:	e700fd84 	addi	fp,fp,1014
    8dd0:	050001c4 	movi	r20,7
    8dd4:	00000306 	br	8de4 <___vfprintf_internal_r+0x1698>
    8dd8:	18c00204 	addi	r3,r3,8
    8ddc:	843ffc04 	addi	r16,r16,-16
    8de0:	9c007a0e 	bge	r19,r16,8fcc <___vfprintf_internal_r+0x1880>
    8de4:	94800404 	addi	r18,r18,16
    8de8:	8c400044 	addi	r17,r17,1
    8dec:	1f000015 	stw	fp,0(r3)
    8df0:	1cc00115 	stw	r19,4(r3)
    8df4:	dc800e15 	stw	r18,56(sp)
    8df8:	dc400d15 	stw	r17,52(sp)
    8dfc:	a47ff60e 	bge	r20,r17,8dd8 <___vfprintf_internal_r+0x168c>
    8e00:	d9014f17 	ldw	r4,1340(sp)
    8e04:	b00b883a 	mov	r5,r22
    8e08:	d9800c04 	addi	r6,sp,48
    8e0c:	00076f40 	call	76f4 <__sprint_r>
    8e10:	103c061e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8e14:	dc800e17 	ldw	r18,56(sp)
    8e18:	dc400d17 	ldw	r17,52(sp)
    8e1c:	d8c01904 	addi	r3,sp,100
    8e20:	003fee06 	br	8ddc <___vfprintf_internal_r+0x1690>
    8e24:	3c000017 	ldw	r16,0(r7)
    8e28:	0023883a 	mov	r17,zero
    8e2c:	39c00104 	addi	r7,r7,4
    8e30:	d9c14015 	stw	r7,1280(sp)
    8e34:	003e9206 	br	8880 <___vfprintf_internal_r+0x1134>
    8e38:	d9401904 	addi	r5,sp,100
    8e3c:	dd000f04 	addi	r20,sp,60
    8e40:	d9414115 	stw	r5,1284(sp)
    8e44:	d9814417 	ldw	r6,1296(sp)
    8e48:	880a973a 	slli	r5,r17,28
    8e4c:	8004d13a 	srli	r2,r16,4
    8e50:	810003cc 	andi	r4,r16,15
    8e54:	3109883a 	add	r4,r6,r4
    8e58:	2884b03a 	or	r2,r5,r2
    8e5c:	21400003 	ldbu	r5,0(r4)
    8e60:	d9014117 	ldw	r4,1284(sp)
    8e64:	8806d13a 	srli	r3,r17,4
    8e68:	1021883a 	mov	r16,r2
    8e6c:	213fffc4 	addi	r4,r4,-1
    8e70:	d9014115 	stw	r4,1284(sp)
    8e74:	d9814117 	ldw	r6,1284(sp)
    8e78:	10c8b03a 	or	r4,r2,r3
    8e7c:	1823883a 	mov	r17,r3
    8e80:	31400005 	stb	r5,0(r6)
    8e84:	203fef1e 	bne	r4,zero,8e44 <___vfprintf_internal_r+0x16f8>
    8e88:	003ccb06 	br	81b8 <___vfprintf_internal_r+0xa6c>
    8e8c:	00800c04 	movi	r2,48
    8e90:	d98018c4 	addi	r6,sp,99
    8e94:	dd000f04 	addi	r20,sp,60
    8e98:	d88018c5 	stb	r2,99(sp)
    8e9c:	d9814115 	stw	r6,1284(sp)
    8ea0:	003cc506 	br	81b8 <___vfprintf_internal_r+0xa6c>
    8ea4:	dc400d17 	ldw	r17,52(sp)
    8ea8:	07020034 	movhi	fp,2048
    8eac:	e7010184 	addi	fp,fp,1030
    8eb0:	003bc706 	br	7dd0 <___vfprintf_internal_r+0x684>
    8eb4:	d9414c17 	ldw	r5,1328(sp)
    8eb8:	2880040c 	andi	r2,r5,16
    8ebc:	10007c26 	beq	r2,zero,90b0 <___vfprintf_internal_r+0x1964>
    8ec0:	38800017 	ldw	r2,0(r7)
    8ec4:	39c00104 	addi	r7,r7,4
    8ec8:	d9c14015 	stw	r7,1280(sp)
    8ecc:	d9814b17 	ldw	r6,1324(sp)
    8ed0:	d9c14017 	ldw	r7,1280(sp)
    8ed4:	11800015 	stw	r6,0(r2)
    8ed8:	003a7806 	br	78bc <___vfprintf_internal_r+0x170>
    8edc:	d9014f17 	ldw	r4,1340(sp)
    8ee0:	b00b883a 	mov	r5,r22
    8ee4:	d9800c04 	addi	r6,sp,48
    8ee8:	00076f40 	call	76f4 <__sprint_r>
    8eec:	103bcf1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8ef0:	dc800e17 	ldw	r18,56(sp)
    8ef4:	dc400d17 	ldw	r17,52(sp)
    8ef8:	d8c01904 	addi	r3,sp,100
    8efc:	d9014717 	ldw	r4,1308(sp)
    8f00:	d9414117 	ldw	r5,1284(sp)
    8f04:	8c400044 	addi	r17,r17,1
    8f08:	9125883a 	add	r18,r18,r4
    8f0c:	008001c4 	movi	r2,7
    8f10:	19400015 	stw	r5,0(r3)
    8f14:	19000115 	stw	r4,4(r3)
    8f18:	dc800e15 	stw	r18,56(sp)
    8f1c:	dc400d15 	stw	r17,52(sp)
    8f20:	147cee16 	blt	r2,r17,82dc <___vfprintf_internal_r+0xb90>
    8f24:	18c00204 	addi	r3,r3,8
    8f28:	003b8606 	br	7d44 <___vfprintf_internal_r+0x5f8>
    8f2c:	38c00017 	ldw	r3,0(r7)
    8f30:	39000204 	addi	r4,r7,8
    8f34:	d9014015 	stw	r4,1280(sp)
    8f38:	d8c14215 	stw	r3,1288(sp)
    8f3c:	39c00117 	ldw	r7,4(r7)
    8f40:	d9c14315 	stw	r7,1292(sp)
    8f44:	003e2006 	br	87c8 <___vfprintf_internal_r+0x107c>
    8f48:	0005883a 	mov	r2,zero
    8f4c:	1409c83a 	sub	r4,r2,r16
    8f50:	1105803a 	cmpltu	r2,r2,r4
    8f54:	044bc83a 	sub	r5,zero,r17
    8f58:	2885c83a 	sub	r2,r5,r2
    8f5c:	2021883a 	mov	r16,r4
    8f60:	1023883a 	mov	r17,r2
    8f64:	01000044 	movi	r4,1
    8f68:	00800b44 	movi	r2,45
    8f6c:	d8800405 	stb	r2,16(sp)
    8f70:	003c8406 	br	8184 <___vfprintf_internal_r+0xa38>
    8f74:	d9014f17 	ldw	r4,1340(sp)
    8f78:	b00b883a 	mov	r5,r22
    8f7c:	d9800c04 	addi	r6,sp,48
    8f80:	00076f40 	call	76f4 <__sprint_r>
    8f84:	103ba91e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8f88:	dc800e17 	ldw	r18,56(sp)
    8f8c:	dc400d17 	ldw	r17,52(sp)
    8f90:	d9000517 	ldw	r4,20(sp)
    8f94:	d9401904 	addi	r5,sp,100
    8f98:	003da706 	br	8638 <___vfprintf_internal_r+0xeec>
    8f9c:	d9014f17 	ldw	r4,1340(sp)
    8fa0:	b00b883a 	mov	r5,r22
    8fa4:	d9800c04 	addi	r6,sp,48
    8fa8:	00076f40 	call	76f4 <__sprint_r>
    8fac:	103b9f1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    8fb0:	dc800e17 	ldw	r18,56(sp)
    8fb4:	dc400d17 	ldw	r17,52(sp)
    8fb8:	d9000517 	ldw	r4,20(sp)
    8fbc:	d8c01904 	addi	r3,sp,100
    8fc0:	003d9106 	br	8608 <___vfprintf_internal_r+0xebc>
    8fc4:	07020034 	movhi	fp,2048
    8fc8:	e700fd84 	addi	fp,fp,1014
    8fcc:	9425883a 	add	r18,r18,r16
    8fd0:	8c400044 	addi	r17,r17,1
    8fd4:	008001c4 	movi	r2,7
    8fd8:	1f000015 	stw	fp,0(r3)
    8fdc:	1c000115 	stw	r16,4(r3)
    8fe0:	dc800e15 	stw	r18,56(sp)
    8fe4:	dc400d15 	stw	r17,52(sp)
    8fe8:	147fbc16 	blt	r2,r17,8edc <___vfprintf_internal_r+0x1790>
    8fec:	18c00204 	addi	r3,r3,8
    8ff0:	003fc206 	br	8efc <___vfprintf_internal_r+0x17b0>
    8ff4:	d9014f17 	ldw	r4,1340(sp)
    8ff8:	b00b883a 	mov	r5,r22
    8ffc:	d9800c04 	addi	r6,sp,48
    9000:	00076f40 	call	76f4 <__sprint_r>
    9004:	103b891e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    9008:	dc800e17 	ldw	r18,56(sp)
    900c:	d9000517 	ldw	r4,20(sp)
    9010:	d8c01904 	addi	r3,sp,100
    9014:	003d0206 	br	8420 <___vfprintf_internal_r+0xcd4>
    9018:	07020034 	movhi	fp,2048
    901c:	e700fd84 	addi	fp,fp,1014
    9020:	003be406 	br	7fb4 <___vfprintf_internal_r+0x868>
    9024:	00820034 	movhi	r2,2048
    9028:	1080ec04 	addi	r2,r2,944
    902c:	d8814115 	stw	r2,1284(sp)
    9030:	003df506 	br	8808 <___vfprintf_internal_r+0x10bc>
    9034:	d9014217 	ldw	r4,1288(sp)
    9038:	d9414317 	ldw	r5,1292(sp)
    903c:	000e1e00 	call	e1e0 <__isnand>
    9040:	10003926 	beq	r2,zero,9128 <___vfprintf_internal_r+0x19dc>
    9044:	d9414d17 	ldw	r5,1332(sp)
    9048:	008011c4 	movi	r2,71
    904c:	1140ce16 	blt	r2,r5,9388 <___vfprintf_internal_r+0x1c3c>
    9050:	01820034 	movhi	r6,2048
    9054:	3180ed04 	addi	r6,r6,948
    9058:	d9814115 	stw	r6,1284(sp)
    905c:	003dea06 	br	8808 <___vfprintf_internal_r+0x10bc>
    9060:	d9014c17 	ldw	r4,1328(sp)
    9064:	bdc00044 	addi	r23,r23,1
    9068:	b8c00007 	ldb	r3,0(r23)
    906c:	21000814 	ori	r4,r4,32
    9070:	d9014c15 	stw	r4,1328(sp)
    9074:	003a3406 	br	7948 <___vfprintf_internal_r+0x1fc>
    9078:	dcc14515 	stw	r19,1300(sp)
    907c:	98011016 	blt	r19,zero,94c0 <___vfprintf_internal_r+0x1d74>
    9080:	980f883a 	mov	r7,r19
    9084:	d8014615 	stw	zero,1304(sp)
    9088:	003c5206 	br	81d4 <___vfprintf_internal_r+0xa88>
    908c:	d9014f17 	ldw	r4,1340(sp)
    9090:	b00b883a 	mov	r5,r22
    9094:	d9800c04 	addi	r6,sp,48
    9098:	00076f40 	call	76f4 <__sprint_r>
    909c:	103b631e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    90a0:	dc800e17 	ldw	r18,56(sp)
    90a4:	d9000517 	ldw	r4,20(sp)
    90a8:	d8c01904 	addi	r3,sp,100
    90ac:	003f2e06 	br	8d68 <___vfprintf_internal_r+0x161c>
    90b0:	d8c14c17 	ldw	r3,1328(sp)
    90b4:	1880100c 	andi	r2,r3,64
    90b8:	1000a026 	beq	r2,zero,933c <___vfprintf_internal_r+0x1bf0>
    90bc:	38800017 	ldw	r2,0(r7)
    90c0:	39c00104 	addi	r7,r7,4
    90c4:	d9c14015 	stw	r7,1280(sp)
    90c8:	d9014b17 	ldw	r4,1324(sp)
    90cc:	d9c14017 	ldw	r7,1280(sp)
    90d0:	1100000d 	sth	r4,0(r2)
    90d4:	0039f906 	br	78bc <___vfprintf_internal_r+0x170>
    90d8:	d9014f17 	ldw	r4,1340(sp)
    90dc:	b00b883a 	mov	r5,r22
    90e0:	d9800c04 	addi	r6,sp,48
    90e4:	00076f40 	call	76f4 <__sprint_r>
    90e8:	103b501e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    90ec:	dc800e17 	ldw	r18,56(sp)
    90f0:	dc400d17 	ldw	r17,52(sp)
    90f4:	d9000517 	ldw	r4,20(sp)
    90f8:	d8c01904 	addi	r3,sp,100
    90fc:	003f2d06 	br	8db4 <___vfprintf_internal_r+0x1668>
    9100:	00800184 	movi	r2,6
    9104:	14c09a36 	bltu	r2,r19,9370 <___vfprintf_internal_r+0x1c24>
    9108:	dcc14515 	stw	r19,1300(sp)
    910c:	9800010e 	bge	r19,zero,9114 <___vfprintf_internal_r+0x19c8>
    9110:	d8014515 	stw	zero,1300(sp)
    9114:	00820034 	movhi	r2,2048
    9118:	1080ef04 	addi	r2,r2,956
    911c:	980f883a 	mov	r7,r19
    9120:	d8814115 	stw	r2,1284(sp)
    9124:	003a7806 	br	7b08 <___vfprintf_internal_r+0x3bc>
    9128:	00bfffc4 	movi	r2,-1
    912c:	9880e226 	beq	r19,r2,94b8 <___vfprintf_internal_r+0x1d6c>
    9130:	d9414d17 	ldw	r5,1332(sp)
    9134:	008019c4 	movi	r2,103
    9138:	2880dc26 	beq	r5,r2,94ac <___vfprintf_internal_r+0x1d60>
    913c:	008011c4 	movi	r2,71
    9140:	2880da26 	beq	r5,r2,94ac <___vfprintf_internal_r+0x1d60>
    9144:	d9414c17 	ldw	r5,1328(sp)
    9148:	d9014317 	ldw	r4,1292(sp)
    914c:	d9814217 	ldw	r6,1288(sp)
    9150:	29404014 	ori	r5,r5,256
    9154:	d9414c15 	stw	r5,1328(sp)
    9158:	2000cc16 	blt	r4,zero,948c <___vfprintf_internal_r+0x1d40>
    915c:	3021883a 	mov	r16,r6
    9160:	2023883a 	mov	r17,r4
    9164:	0039883a 	mov	fp,zero
    9168:	d9414d17 	ldw	r5,1332(sp)
    916c:	00801984 	movi	r2,102
    9170:	2880b726 	beq	r5,r2,9450 <___vfprintf_internal_r+0x1d04>
    9174:	00801184 	movi	r2,70
    9178:	2880b526 	beq	r5,r2,9450 <___vfprintf_internal_r+0x1d04>
    917c:	00801944 	movi	r2,101
    9180:	2880c826 	beq	r5,r2,94a4 <___vfprintf_internal_r+0x1d58>
    9184:	00801144 	movi	r2,69
    9188:	2880c626 	beq	r5,r2,94a4 <___vfprintf_internal_r+0x1d58>
    918c:	9829883a 	mov	r20,r19
    9190:	d9014f17 	ldw	r4,1340(sp)
    9194:	d8800504 	addi	r2,sp,20
    9198:	880d883a 	mov	r6,r17
    919c:	d8800115 	stw	r2,4(sp)
    91a0:	d8c00604 	addi	r3,sp,24
    91a4:	d8800704 	addi	r2,sp,28
    91a8:	800b883a 	mov	r5,r16
    91ac:	01c00084 	movi	r7,2
    91b0:	d8c00215 	stw	r3,8(sp)
    91b4:	d8800315 	stw	r2,12(sp)
    91b8:	dd000015 	stw	r20,0(sp)
    91bc:	00099700 	call	9970 <_dtoa_r>
    91c0:	d9814d17 	ldw	r6,1332(sp)
    91c4:	d8814115 	stw	r2,1284(sp)
    91c8:	008019c4 	movi	r2,103
    91cc:	30809526 	beq	r6,r2,9424 <___vfprintf_internal_r+0x1cd8>
    91d0:	d8c14d17 	ldw	r3,1332(sp)
    91d4:	008011c4 	movi	r2,71
    91d8:	18809226 	beq	r3,r2,9424 <___vfprintf_internal_r+0x1cd8>
    91dc:	d9414117 	ldw	r5,1284(sp)
    91e0:	d9814d17 	ldw	r6,1332(sp)
    91e4:	00801984 	movi	r2,102
    91e8:	2d25883a 	add	r18,r5,r20
    91ec:	30808626 	beq	r6,r2,9408 <___vfprintf_internal_r+0x1cbc>
    91f0:	00801184 	movi	r2,70
    91f4:	30808426 	beq	r6,r2,9408 <___vfprintf_internal_r+0x1cbc>
    91f8:	000d883a 	mov	r6,zero
    91fc:	000f883a 	mov	r7,zero
    9200:	880b883a 	mov	r5,r17
    9204:	8009883a 	mov	r4,r16
    9208:	000f5f40 	call	f5f4 <__eqdf2>
    920c:	1000751e 	bne	r2,zero,93e4 <___vfprintf_internal_r+0x1c98>
    9210:	9005883a 	mov	r2,r18
    9214:	dc800715 	stw	r18,28(sp)
    9218:	d9014117 	ldw	r4,1284(sp)
    921c:	d9414d17 	ldw	r5,1332(sp)
    9220:	00c019c4 	movi	r3,103
    9224:	1125c83a 	sub	r18,r2,r4
    9228:	28c06826 	beq	r5,r3,93cc <___vfprintf_internal_r+0x1c80>
    922c:	008011c4 	movi	r2,71
    9230:	28806626 	beq	r5,r2,93cc <___vfprintf_internal_r+0x1c80>
    9234:	d9000517 	ldw	r4,20(sp)
    9238:	d8c14d17 	ldw	r3,1332(sp)
    923c:	00801944 	movi	r2,101
    9240:	10c05516 	blt	r2,r3,9398 <___vfprintf_internal_r+0x1c4c>
    9244:	213fffc4 	addi	r4,r4,-1
    9248:	d9000515 	stw	r4,20(sp)
    924c:	d8c00805 	stb	r3,32(sp)
    9250:	2021883a 	mov	r16,r4
    9254:	2000c116 	blt	r4,zero,955c <___vfprintf_internal_r+0x1e10>
    9258:	00800ac4 	movi	r2,43
    925c:	d8800845 	stb	r2,33(sp)
    9260:	00800244 	movi	r2,9
    9264:	1400af0e 	bge	r2,r16,9524 <___vfprintf_internal_r+0x1dd8>
    9268:	1027883a 	mov	r19,r2
    926c:	dc400b84 	addi	r17,sp,46
    9270:	8009883a 	mov	r4,r16
    9274:	01400284 	movi	r5,10
    9278:	000fa840 	call	fa84 <__modsi3>
    927c:	10800c04 	addi	r2,r2,48
    9280:	8c7fffc4 	addi	r17,r17,-1
    9284:	8009883a 	mov	r4,r16
    9288:	01400284 	movi	r5,10
    928c:	88800005 	stb	r2,0(r17)
    9290:	000fa240 	call	fa24 <__divsi3>
    9294:	1021883a 	mov	r16,r2
    9298:	98bff516 	blt	r19,r2,9270 <___vfprintf_internal_r+0x1b24>
    929c:	10c00c04 	addi	r3,r2,48
    92a0:	d88009c4 	addi	r2,sp,39
    92a4:	108001c4 	addi	r2,r2,7
    92a8:	897fffc4 	addi	r5,r17,-1
    92ac:	88ffffc5 	stb	r3,-1(r17)
    92b0:	2880a72e 	bgeu	r5,r2,9550 <___vfprintf_internal_r+0x1e04>
    92b4:	1009883a 	mov	r4,r2
    92b8:	d9800804 	addi	r6,sp,32
    92bc:	d8c00884 	addi	r3,sp,34
    92c0:	28800003 	ldbu	r2,0(r5)
    92c4:	29400044 	addi	r5,r5,1
    92c8:	18800005 	stb	r2,0(r3)
    92cc:	18c00044 	addi	r3,r3,1
    92d0:	293ffb36 	bltu	r5,r4,92c0 <___vfprintf_internal_r+0x1b74>
    92d4:	1987c83a 	sub	r3,r3,r6
    92d8:	00800044 	movi	r2,1
    92dc:	d8c14815 	stw	r3,1312(sp)
    92e0:	90cf883a 	add	r7,r18,r3
    92e4:	1480960e 	bge	r2,r18,9540 <___vfprintf_internal_r+0x1df4>
    92e8:	39c00044 	addi	r7,r7,1
    92ec:	d9c14515 	stw	r7,1300(sp)
    92f0:	38003416 	blt	r7,zero,93c4 <___vfprintf_internal_r+0x1c78>
    92f4:	e0803fcc 	andi	r2,fp,255
    92f8:	1080201c 	xori	r2,r2,128
    92fc:	10bfe004 	addi	r2,r2,-128
    9300:	10004e26 	beq	r2,zero,943c <___vfprintf_internal_r+0x1cf0>
    9304:	00800b44 	movi	r2,45
    9308:	dc814715 	stw	r18,1308(sp)
    930c:	d8014615 	stw	zero,1304(sp)
    9310:	d8800405 	stb	r2,16(sp)
    9314:	003bb106 	br	81dc <___vfprintf_internal_r+0xa90>
    9318:	00800b44 	movi	r2,45
    931c:	d8800405 	stb	r2,16(sp)
    9320:	003d3306 	br	87f0 <___vfprintf_internal_r+0x10a4>
    9324:	d9014f17 	ldw	r4,1340(sp)
    9328:	b00b883a 	mov	r5,r22
    932c:	d9800c04 	addi	r6,sp,48
    9330:	00076f40 	call	76f4 <__sprint_r>
    9334:	103abd1e 	bne	r2,zero,7e2c <___vfprintf_internal_r+0x6e0>
    9338:	003abb06 	br	7e28 <___vfprintf_internal_r+0x6dc>
    933c:	38800017 	ldw	r2,0(r7)
    9340:	39c00104 	addi	r7,r7,4
    9344:	d9c14015 	stw	r7,1280(sp)
    9348:	d9414b17 	ldw	r5,1324(sp)
    934c:	d9c14017 	ldw	r7,1280(sp)
    9350:	11400015 	stw	r5,0(r2)
    9354:	00395906 	br	78bc <___vfprintf_internal_r+0x170>
    9358:	980f883a 	mov	r7,r19
    935c:	dcc14515 	stw	r19,1300(sp)
    9360:	d8014615 	stw	zero,1304(sp)
    9364:	003b9b06 	br	81d4 <___vfprintf_internal_r+0xa88>
    9368:	0027883a 	mov	r19,zero
    936c:	00397806 	br	7950 <___vfprintf_internal_r+0x204>
    9370:	00c20034 	movhi	r3,2048
    9374:	18c0ef04 	addi	r3,r3,956
    9378:	100f883a 	mov	r7,r2
    937c:	d8814515 	stw	r2,1300(sp)
    9380:	d8c14115 	stw	r3,1284(sp)
    9384:	0039e006 	br	7b08 <___vfprintf_internal_r+0x3bc>
    9388:	00820034 	movhi	r2,2048
    938c:	1080ee04 	addi	r2,r2,952
    9390:	d8814115 	stw	r2,1284(sp)
    9394:	003d1c06 	br	8808 <___vfprintf_internal_r+0x10bc>
    9398:	d9414d17 	ldw	r5,1332(sp)
    939c:	00801984 	movi	r2,102
    93a0:	28804926 	beq	r5,r2,94c8 <___vfprintf_internal_r+0x1d7c>
    93a4:	200f883a 	mov	r7,r4
    93a8:	24805716 	blt	r4,r18,9508 <___vfprintf_internal_r+0x1dbc>
    93ac:	d9414c17 	ldw	r5,1328(sp)
    93b0:	2880004c 	andi	r2,r5,1
    93b4:	10000126 	beq	r2,zero,93bc <___vfprintf_internal_r+0x1c70>
    93b8:	21c00044 	addi	r7,r4,1
    93bc:	d9c14515 	stw	r7,1300(sp)
    93c0:	383fcc0e 	bge	r7,zero,92f4 <___vfprintf_internal_r+0x1ba8>
    93c4:	d8014515 	stw	zero,1300(sp)
    93c8:	003fca06 	br	92f4 <___vfprintf_internal_r+0x1ba8>
    93cc:	d9000517 	ldw	r4,20(sp)
    93d0:	00bfff04 	movi	r2,-4
    93d4:	1100480e 	bge	r2,r4,94f8 <___vfprintf_internal_r+0x1dac>
    93d8:	99004716 	blt	r19,r4,94f8 <___vfprintf_internal_r+0x1dac>
    93dc:	d8c14d15 	stw	r3,1332(sp)
    93e0:	003ff006 	br	93a4 <___vfprintf_internal_r+0x1c58>
    93e4:	d8800717 	ldw	r2,28(sp)
    93e8:	14bf8b2e 	bgeu	r2,r18,9218 <___vfprintf_internal_r+0x1acc>
    93ec:	9007883a 	mov	r3,r18
    93f0:	01000c04 	movi	r4,48
    93f4:	11000005 	stb	r4,0(r2)
    93f8:	10800044 	addi	r2,r2,1
    93fc:	d8800715 	stw	r2,28(sp)
    9400:	18bffc1e 	bne	r3,r2,93f4 <___vfprintf_internal_r+0x1ca8>
    9404:	003f8406 	br	9218 <___vfprintf_internal_r+0x1acc>
    9408:	d8814117 	ldw	r2,1284(sp)
    940c:	10c00007 	ldb	r3,0(r2)
    9410:	00800c04 	movi	r2,48
    9414:	18805b26 	beq	r3,r2,9584 <___vfprintf_internal_r+0x1e38>
    9418:	d9000517 	ldw	r4,20(sp)
    941c:	9125883a 	add	r18,r18,r4
    9420:	003f7506 	br	91f8 <___vfprintf_internal_r+0x1aac>
    9424:	d9014c17 	ldw	r4,1328(sp)
    9428:	2080004c 	andi	r2,r4,1
    942c:	1005003a 	cmpeq	r2,r2,zero
    9430:	103f6a26 	beq	r2,zero,91dc <___vfprintf_internal_r+0x1a90>
    9434:	d8800717 	ldw	r2,28(sp)
    9438:	003f7706 	br	9218 <___vfprintf_internal_r+0x1acc>
    943c:	d9c14515 	stw	r7,1300(sp)
    9440:	38004d16 	blt	r7,zero,9578 <___vfprintf_internal_r+0x1e2c>
    9444:	dc814715 	stw	r18,1308(sp)
    9448:	d8014615 	stw	zero,1304(sp)
    944c:	003b6106 	br	81d4 <___vfprintf_internal_r+0xa88>
    9450:	d9014f17 	ldw	r4,1340(sp)
    9454:	d8800504 	addi	r2,sp,20
    9458:	d8800115 	stw	r2,4(sp)
    945c:	d8c00604 	addi	r3,sp,24
    9460:	d8800704 	addi	r2,sp,28
    9464:	800b883a 	mov	r5,r16
    9468:	880d883a 	mov	r6,r17
    946c:	01c000c4 	movi	r7,3
    9470:	d8c00215 	stw	r3,8(sp)
    9474:	d8800315 	stw	r2,12(sp)
    9478:	dcc00015 	stw	r19,0(sp)
    947c:	9829883a 	mov	r20,r19
    9480:	00099700 	call	9970 <_dtoa_r>
    9484:	d8814115 	stw	r2,1284(sp)
    9488:	003f5106 	br	91d0 <___vfprintf_internal_r+0x1a84>
    948c:	d8c14217 	ldw	r3,1288(sp)
    9490:	d9014317 	ldw	r4,1292(sp)
    9494:	07000b44 	movi	fp,45
    9498:	1821883a 	mov	r16,r3
    949c:	2460003c 	xorhi	r17,r4,32768
    94a0:	003f3106 	br	9168 <___vfprintf_internal_r+0x1a1c>
    94a4:	9d000044 	addi	r20,r19,1
    94a8:	003f3906 	br	9190 <___vfprintf_internal_r+0x1a44>
    94ac:	983f251e 	bne	r19,zero,9144 <___vfprintf_internal_r+0x19f8>
    94b0:	04c00044 	movi	r19,1
    94b4:	003f2306 	br	9144 <___vfprintf_internal_r+0x19f8>
    94b8:	04c00184 	movi	r19,6
    94bc:	003f2106 	br	9144 <___vfprintf_internal_r+0x19f8>
    94c0:	d8014515 	stw	zero,1300(sp)
    94c4:	003eee06 	br	9080 <___vfprintf_internal_r+0x1934>
    94c8:	200f883a 	mov	r7,r4
    94cc:	0100370e 	bge	zero,r4,95ac <___vfprintf_internal_r+0x1e60>
    94d0:	9800031e 	bne	r19,zero,94e0 <___vfprintf_internal_r+0x1d94>
    94d4:	d9814c17 	ldw	r6,1328(sp)
    94d8:	3080004c 	andi	r2,r6,1
    94dc:	103fb726 	beq	r2,zero,93bc <___vfprintf_internal_r+0x1c70>
    94e0:	20800044 	addi	r2,r4,1
    94e4:	98a7883a 	add	r19,r19,r2
    94e8:	dcc14515 	stw	r19,1300(sp)
    94ec:	980f883a 	mov	r7,r19
    94f0:	983f800e 	bge	r19,zero,92f4 <___vfprintf_internal_r+0x1ba8>
    94f4:	003fb306 	br	93c4 <___vfprintf_internal_r+0x1c78>
    94f8:	d9814d17 	ldw	r6,1332(sp)
    94fc:	31bfff84 	addi	r6,r6,-2
    9500:	d9814d15 	stw	r6,1332(sp)
    9504:	003f4c06 	br	9238 <___vfprintf_internal_r+0x1aec>
    9508:	0100180e 	bge	zero,r4,956c <___vfprintf_internal_r+0x1e20>
    950c:	00800044 	movi	r2,1
    9510:	1485883a 	add	r2,r2,r18
    9514:	d8814515 	stw	r2,1300(sp)
    9518:	100f883a 	mov	r7,r2
    951c:	103f750e 	bge	r2,zero,92f4 <___vfprintf_internal_r+0x1ba8>
    9520:	003fa806 	br	93c4 <___vfprintf_internal_r+0x1c78>
    9524:	80c00c04 	addi	r3,r16,48
    9528:	00800c04 	movi	r2,48
    952c:	d8c008c5 	stb	r3,35(sp)
    9530:	d9800804 	addi	r6,sp,32
    9534:	d8c00904 	addi	r3,sp,36
    9538:	d8800885 	stb	r2,34(sp)
    953c:	003f6506 	br	92d4 <___vfprintf_internal_r+0x1b88>
    9540:	d9014c17 	ldw	r4,1328(sp)
    9544:	2084703a 	and	r2,r4,r2
    9548:	103f9c26 	beq	r2,zero,93bc <___vfprintf_internal_r+0x1c70>
    954c:	003f6606 	br	92e8 <___vfprintf_internal_r+0x1b9c>
    9550:	d9800804 	addi	r6,sp,32
    9554:	d8c00884 	addi	r3,sp,34
    9558:	003f5e06 	br	92d4 <___vfprintf_internal_r+0x1b88>
    955c:	00800b44 	movi	r2,45
    9560:	0121c83a 	sub	r16,zero,r4
    9564:	d8800845 	stb	r2,33(sp)
    9568:	003f3d06 	br	9260 <___vfprintf_internal_r+0x1b14>
    956c:	00800084 	movi	r2,2
    9570:	1105c83a 	sub	r2,r2,r4
    9574:	003fe606 	br	9510 <___vfprintf_internal_r+0x1dc4>
    9578:	d8014515 	stw	zero,1300(sp)
    957c:	dc814715 	stw	r18,1308(sp)
    9580:	003fb106 	br	9448 <___vfprintf_internal_r+0x1cfc>
    9584:	000d883a 	mov	r6,zero
    9588:	000f883a 	mov	r7,zero
    958c:	8009883a 	mov	r4,r16
    9590:	880b883a 	mov	r5,r17
    9594:	000f67c0 	call	f67c <__nedf2>
    9598:	103f9f26 	beq	r2,zero,9418 <___vfprintf_internal_r+0x1ccc>
    959c:	00800044 	movi	r2,1
    95a0:	1509c83a 	sub	r4,r2,r20
    95a4:	d9000515 	stw	r4,20(sp)
    95a8:	003f9b06 	br	9418 <___vfprintf_internal_r+0x1ccc>
    95ac:	98000d1e 	bne	r19,zero,95e4 <___vfprintf_internal_r+0x1e98>
    95b0:	d8c14c17 	ldw	r3,1328(sp)
    95b4:	1880004c 	andi	r2,r3,1
    95b8:	10000a1e 	bne	r2,zero,95e4 <___vfprintf_internal_r+0x1e98>
    95bc:	01000044 	movi	r4,1
    95c0:	200f883a 	mov	r7,r4
    95c4:	d9014515 	stw	r4,1300(sp)
    95c8:	003f4a06 	br	92f4 <___vfprintf_internal_r+0x1ba8>
    95cc:	3cc00017 	ldw	r19,0(r7)
    95d0:	39c00104 	addi	r7,r7,4
    95d4:	983d0e0e 	bge	r19,zero,8a10 <___vfprintf_internal_r+0x12c4>
    95d8:	b8c00007 	ldb	r3,0(r23)
    95dc:	04ffffc4 	movi	r19,-1
    95e0:	0038d906 	br	7948 <___vfprintf_internal_r+0x1fc>
    95e4:	9cc00084 	addi	r19,r19,2
    95e8:	dcc14515 	stw	r19,1300(sp)
    95ec:	980f883a 	mov	r7,r19
    95f0:	983f400e 	bge	r19,zero,92f4 <___vfprintf_internal_r+0x1ba8>
    95f4:	003f7306 	br	93c4 <___vfprintf_internal_r+0x1c78>

000095f8 <__vfprintf_internal>:
    95f8:	00820034 	movhi	r2,2048
    95fc:	1089ba04 	addi	r2,r2,9960
    9600:	2013883a 	mov	r9,r4
    9604:	11000017 	ldw	r4,0(r2)
    9608:	2805883a 	mov	r2,r5
    960c:	300f883a 	mov	r7,r6
    9610:	480b883a 	mov	r5,r9
    9614:	100d883a 	mov	r6,r2
    9618:	000774c1 	jmpi	774c <___vfprintf_internal_r>

0000961c <__swsetup_r>:
    961c:	00820034 	movhi	r2,2048
    9620:	1089ba04 	addi	r2,r2,9960
    9624:	10c00017 	ldw	r3,0(r2)
    9628:	defffd04 	addi	sp,sp,-12
    962c:	dc400115 	stw	r17,4(sp)
    9630:	dc000015 	stw	r16,0(sp)
    9634:	dfc00215 	stw	ra,8(sp)
    9638:	2023883a 	mov	r17,r4
    963c:	2821883a 	mov	r16,r5
    9640:	18000226 	beq	r3,zero,964c <__swsetup_r+0x30>
    9644:	18800e17 	ldw	r2,56(r3)
    9648:	10001f26 	beq	r2,zero,96c8 <__swsetup_r+0xac>
    964c:	8100030b 	ldhu	r4,12(r16)
    9650:	2080020c 	andi	r2,r4,8
    9654:	10002826 	beq	r2,zero,96f8 <__swsetup_r+0xdc>
    9658:	81400417 	ldw	r5,16(r16)
    965c:	28001d26 	beq	r5,zero,96d4 <__swsetup_r+0xb8>
    9660:	2080004c 	andi	r2,r4,1
    9664:	1005003a 	cmpeq	r2,r2,zero
    9668:	10000b26 	beq	r2,zero,9698 <__swsetup_r+0x7c>
    966c:	2080008c 	andi	r2,r4,2
    9670:	10001226 	beq	r2,zero,96bc <__swsetup_r+0xa0>
    9674:	0005883a 	mov	r2,zero
    9678:	80800215 	stw	r2,8(r16)
    967c:	28000b26 	beq	r5,zero,96ac <__swsetup_r+0x90>
    9680:	0005883a 	mov	r2,zero
    9684:	dfc00217 	ldw	ra,8(sp)
    9688:	dc400117 	ldw	r17,4(sp)
    968c:	dc000017 	ldw	r16,0(sp)
    9690:	dec00304 	addi	sp,sp,12
    9694:	f800283a 	ret
    9698:	80800517 	ldw	r2,20(r16)
    969c:	80000215 	stw	zero,8(r16)
    96a0:	0085c83a 	sub	r2,zero,r2
    96a4:	80800615 	stw	r2,24(r16)
    96a8:	283ff51e 	bne	r5,zero,9680 <__swsetup_r+0x64>
    96ac:	2080200c 	andi	r2,r4,128
    96b0:	103ff326 	beq	r2,zero,9680 <__swsetup_r+0x64>
    96b4:	00bfffc4 	movi	r2,-1
    96b8:	003ff206 	br	9684 <__swsetup_r+0x68>
    96bc:	80800517 	ldw	r2,20(r16)
    96c0:	80800215 	stw	r2,8(r16)
    96c4:	003fed06 	br	967c <__swsetup_r+0x60>
    96c8:	1809883a 	mov	r4,r3
    96cc:	000b1bc0 	call	b1bc <__sinit>
    96d0:	003fde06 	br	964c <__swsetup_r+0x30>
    96d4:	20c0a00c 	andi	r3,r4,640
    96d8:	00808004 	movi	r2,512
    96dc:	18bfe026 	beq	r3,r2,9660 <__swsetup_r+0x44>
    96e0:	8809883a 	mov	r4,r17
    96e4:	800b883a 	mov	r5,r16
    96e8:	000bf340 	call	bf34 <__smakebuf_r>
    96ec:	8100030b 	ldhu	r4,12(r16)
    96f0:	81400417 	ldw	r5,16(r16)
    96f4:	003fda06 	br	9660 <__swsetup_r+0x44>
    96f8:	2080040c 	andi	r2,r4,16
    96fc:	103fed26 	beq	r2,zero,96b4 <__swsetup_r+0x98>
    9700:	2080010c 	andi	r2,r4,4
    9704:	10001226 	beq	r2,zero,9750 <__swsetup_r+0x134>
    9708:	81400c17 	ldw	r5,48(r16)
    970c:	28000526 	beq	r5,zero,9724 <__swsetup_r+0x108>
    9710:	80801004 	addi	r2,r16,64
    9714:	28800226 	beq	r5,r2,9720 <__swsetup_r+0x104>
    9718:	8809883a 	mov	r4,r17
    971c:	000b5400 	call	b540 <_free_r>
    9720:	80000c15 	stw	zero,48(r16)
    9724:	8080030b 	ldhu	r2,12(r16)
    9728:	81400417 	ldw	r5,16(r16)
    972c:	80000115 	stw	zero,4(r16)
    9730:	10bff6cc 	andi	r2,r2,65499
    9734:	8080030d 	sth	r2,12(r16)
    9738:	81400015 	stw	r5,0(r16)
    973c:	8080030b 	ldhu	r2,12(r16)
    9740:	10800214 	ori	r2,r2,8
    9744:	113fffcc 	andi	r4,r2,65535
    9748:	8080030d 	sth	r2,12(r16)
    974c:	003fc306 	br	965c <__swsetup_r+0x40>
    9750:	81400417 	ldw	r5,16(r16)
    9754:	003ff906 	br	973c <__swsetup_r+0x120>

00009758 <quorem>:
    9758:	28c00417 	ldw	r3,16(r5)
    975c:	20800417 	ldw	r2,16(r4)
    9760:	defff604 	addi	sp,sp,-40
    9764:	ddc00715 	stw	r23,28(sp)
    9768:	dd400515 	stw	r21,20(sp)
    976c:	dfc00915 	stw	ra,36(sp)
    9770:	df000815 	stw	fp,32(sp)
    9774:	dd800615 	stw	r22,24(sp)
    9778:	dd000415 	stw	r20,16(sp)
    977c:	dcc00315 	stw	r19,12(sp)
    9780:	dc800215 	stw	r18,8(sp)
    9784:	dc400115 	stw	r17,4(sp)
    9788:	dc000015 	stw	r16,0(sp)
    978c:	202f883a 	mov	r23,r4
    9790:	282b883a 	mov	r21,r5
    9794:	10c07416 	blt	r2,r3,9968 <quorem+0x210>
    9798:	1c7fffc4 	addi	r17,r3,-1
    979c:	8c45883a 	add	r2,r17,r17
    97a0:	1085883a 	add	r2,r2,r2
    97a4:	2c000504 	addi	r16,r5,20
    97a8:	24c00504 	addi	r19,r4,20
    97ac:	14ed883a 	add	r22,r2,r19
    97b0:	80a5883a 	add	r18,r16,r2
    97b4:	b7000017 	ldw	fp,0(r22)
    97b8:	91400017 	ldw	r5,0(r18)
    97bc:	e009883a 	mov	r4,fp
    97c0:	29400044 	addi	r5,r5,1
    97c4:	000fae40 	call	fae4 <__udivsi3>
    97c8:	1029883a 	mov	r20,r2
    97cc:	10003c1e 	bne	r2,zero,98c0 <quorem+0x168>
    97d0:	a80b883a 	mov	r5,r21
    97d4:	b809883a 	mov	r4,r23
    97d8:	000cb280 	call	cb28 <__mcmp>
    97dc:	10002b16 	blt	r2,zero,988c <quorem+0x134>
    97e0:	a5000044 	addi	r20,r20,1
    97e4:	980f883a 	mov	r7,r19
    97e8:	0011883a 	mov	r8,zero
    97ec:	0009883a 	mov	r4,zero
    97f0:	81400017 	ldw	r5,0(r16)
    97f4:	38c00017 	ldw	r3,0(r7)
    97f8:	84000104 	addi	r16,r16,4
    97fc:	28bfffcc 	andi	r2,r5,65535
    9800:	2085883a 	add	r2,r4,r2
    9804:	11bfffcc 	andi	r6,r2,65535
    9808:	193fffcc 	andi	r4,r3,65535
    980c:	1004d43a 	srli	r2,r2,16
    9810:	280ad43a 	srli	r5,r5,16
    9814:	2189c83a 	sub	r4,r4,r6
    9818:	2209883a 	add	r4,r4,r8
    981c:	1806d43a 	srli	r3,r3,16
    9820:	288b883a 	add	r5,r5,r2
    9824:	200dd43a 	srai	r6,r4,16
    9828:	28bfffcc 	andi	r2,r5,65535
    982c:	1887c83a 	sub	r3,r3,r2
    9830:	1987883a 	add	r3,r3,r6
    9834:	3900000d 	sth	r4,0(r7)
    9838:	38c0008d 	sth	r3,2(r7)
    983c:	2808d43a 	srli	r4,r5,16
    9840:	39c00104 	addi	r7,r7,4
    9844:	1811d43a 	srai	r8,r3,16
    9848:	943fe92e 	bgeu	r18,r16,97f0 <quorem+0x98>
    984c:	8c45883a 	add	r2,r17,r17
    9850:	1085883a 	add	r2,r2,r2
    9854:	9885883a 	add	r2,r19,r2
    9858:	10c00017 	ldw	r3,0(r2)
    985c:	18000b1e 	bne	r3,zero,988c <quorem+0x134>
    9860:	113fff04 	addi	r4,r2,-4
    9864:	9900082e 	bgeu	r19,r4,9888 <quorem+0x130>
    9868:	10bfff17 	ldw	r2,-4(r2)
    986c:	10000326 	beq	r2,zero,987c <quorem+0x124>
    9870:	00000506 	br	9888 <quorem+0x130>
    9874:	20800017 	ldw	r2,0(r4)
    9878:	1000031e 	bne	r2,zero,9888 <quorem+0x130>
    987c:	213fff04 	addi	r4,r4,-4
    9880:	8c7fffc4 	addi	r17,r17,-1
    9884:	993ffb36 	bltu	r19,r4,9874 <quorem+0x11c>
    9888:	bc400415 	stw	r17,16(r23)
    988c:	a005883a 	mov	r2,r20
    9890:	dfc00917 	ldw	ra,36(sp)
    9894:	df000817 	ldw	fp,32(sp)
    9898:	ddc00717 	ldw	r23,28(sp)
    989c:	dd800617 	ldw	r22,24(sp)
    98a0:	dd400517 	ldw	r21,20(sp)
    98a4:	dd000417 	ldw	r20,16(sp)
    98a8:	dcc00317 	ldw	r19,12(sp)
    98ac:	dc800217 	ldw	r18,8(sp)
    98b0:	dc400117 	ldw	r17,4(sp)
    98b4:	dc000017 	ldw	r16,0(sp)
    98b8:	dec00a04 	addi	sp,sp,40
    98bc:	f800283a 	ret
    98c0:	980f883a 	mov	r7,r19
    98c4:	8011883a 	mov	r8,r16
    98c8:	0013883a 	mov	r9,zero
    98cc:	000d883a 	mov	r6,zero
    98d0:	40c00017 	ldw	r3,0(r8)
    98d4:	39000017 	ldw	r4,0(r7)
    98d8:	42000104 	addi	r8,r8,4
    98dc:	18bfffcc 	andi	r2,r3,65535
    98e0:	a085383a 	mul	r2,r20,r2
    98e4:	1806d43a 	srli	r3,r3,16
    98e8:	217fffcc 	andi	r5,r4,65535
    98ec:	3085883a 	add	r2,r6,r2
    98f0:	11bfffcc 	andi	r6,r2,65535
    98f4:	a0c7383a 	mul	r3,r20,r3
    98f8:	1004d43a 	srli	r2,r2,16
    98fc:	298bc83a 	sub	r5,r5,r6
    9900:	2a4b883a 	add	r5,r5,r9
    9904:	2008d43a 	srli	r4,r4,16
    9908:	1887883a 	add	r3,r3,r2
    990c:	280dd43a 	srai	r6,r5,16
    9910:	18bfffcc 	andi	r2,r3,65535
    9914:	2089c83a 	sub	r4,r4,r2
    9918:	2189883a 	add	r4,r4,r6
    991c:	3900008d 	sth	r4,2(r7)
    9920:	3940000d 	sth	r5,0(r7)
    9924:	180cd43a 	srli	r6,r3,16
    9928:	39c00104 	addi	r7,r7,4
    992c:	2013d43a 	srai	r9,r4,16
    9930:	923fe72e 	bgeu	r18,r8,98d0 <quorem+0x178>
    9934:	e03fa61e 	bne	fp,zero,97d0 <quorem+0x78>
    9938:	b0ffff04 	addi	r3,r22,-4
    993c:	98c0082e 	bgeu	r19,r3,9960 <quorem+0x208>
    9940:	b0bfff17 	ldw	r2,-4(r22)
    9944:	10000326 	beq	r2,zero,9954 <quorem+0x1fc>
    9948:	00000506 	br	9960 <quorem+0x208>
    994c:	18800017 	ldw	r2,0(r3)
    9950:	1000031e 	bne	r2,zero,9960 <quorem+0x208>
    9954:	18ffff04 	addi	r3,r3,-4
    9958:	8c7fffc4 	addi	r17,r17,-1
    995c:	98fffb36 	bltu	r19,r3,994c <quorem+0x1f4>
    9960:	bc400415 	stw	r17,16(r23)
    9964:	003f9a06 	br	97d0 <quorem+0x78>
    9968:	0005883a 	mov	r2,zero
    996c:	003fc806 	br	9890 <quorem+0x138>

00009970 <_dtoa_r>:
    9970:	22001017 	ldw	r8,64(r4)
    9974:	deffda04 	addi	sp,sp,-152
    9978:	dd402115 	stw	r21,132(sp)
    997c:	dd002015 	stw	r20,128(sp)
    9980:	dc801e15 	stw	r18,120(sp)
    9984:	dc401d15 	stw	r17,116(sp)
    9988:	dfc02515 	stw	ra,148(sp)
    998c:	df002415 	stw	fp,144(sp)
    9990:	ddc02315 	stw	r23,140(sp)
    9994:	dd802215 	stw	r22,136(sp)
    9998:	dcc01f15 	stw	r19,124(sp)
    999c:	dc001c15 	stw	r16,112(sp)
    99a0:	d9001615 	stw	r4,88(sp)
    99a4:	3023883a 	mov	r17,r6
    99a8:	2829883a 	mov	r20,r5
    99ac:	d9c01715 	stw	r7,92(sp)
    99b0:	dc802817 	ldw	r18,160(sp)
    99b4:	302b883a 	mov	r21,r6
    99b8:	40000a26 	beq	r8,zero,99e4 <_dtoa_r+0x74>
    99bc:	20801117 	ldw	r2,68(r4)
    99c0:	400b883a 	mov	r5,r8
    99c4:	40800115 	stw	r2,4(r8)
    99c8:	20c01117 	ldw	r3,68(r4)
    99cc:	00800044 	movi	r2,1
    99d0:	10c4983a 	sll	r2,r2,r3
    99d4:	40800215 	stw	r2,8(r8)
    99d8:	000c9cc0 	call	c9cc <_Bfree>
    99dc:	d8c01617 	ldw	r3,88(sp)
    99e0:	18001015 	stw	zero,64(r3)
    99e4:	8800a316 	blt	r17,zero,9c74 <_dtoa_r+0x304>
    99e8:	90000015 	stw	zero,0(r18)
    99ec:	a8dffc2c 	andhi	r3,r21,32752
    99f0:	009ffc34 	movhi	r2,32752
    99f4:	18809126 	beq	r3,r2,9c3c <_dtoa_r+0x2cc>
    99f8:	000d883a 	mov	r6,zero
    99fc:	000f883a 	mov	r7,zero
    9a00:	a009883a 	mov	r4,r20
    9a04:	a80b883a 	mov	r5,r21
    9a08:	dd001215 	stw	r20,72(sp)
    9a0c:	dd401315 	stw	r21,76(sp)
    9a10:	000f67c0 	call	f67c <__nedf2>
    9a14:	1000171e 	bne	r2,zero,9a74 <_dtoa_r+0x104>
    9a18:	d9802717 	ldw	r6,156(sp)
    9a1c:	00800044 	movi	r2,1
    9a20:	30800015 	stw	r2,0(r6)
    9a24:	d8802917 	ldw	r2,164(sp)
    9a28:	10029b26 	beq	r2,zero,a498 <_dtoa_r+0xb28>
    9a2c:	d9002917 	ldw	r4,164(sp)
    9a30:	00820034 	movhi	r2,2048
    9a34:	1080fd44 	addi	r2,r2,1013
    9a38:	10ffffc4 	addi	r3,r2,-1
    9a3c:	20800015 	stw	r2,0(r4)
    9a40:	1805883a 	mov	r2,r3
    9a44:	dfc02517 	ldw	ra,148(sp)
    9a48:	df002417 	ldw	fp,144(sp)
    9a4c:	ddc02317 	ldw	r23,140(sp)
    9a50:	dd802217 	ldw	r22,136(sp)
    9a54:	dd402117 	ldw	r21,132(sp)
    9a58:	dd002017 	ldw	r20,128(sp)
    9a5c:	dcc01f17 	ldw	r19,124(sp)
    9a60:	dc801e17 	ldw	r18,120(sp)
    9a64:	dc401d17 	ldw	r17,116(sp)
    9a68:	dc001c17 	ldw	r16,112(sp)
    9a6c:	dec02604 	addi	sp,sp,152
    9a70:	f800283a 	ret
    9a74:	d9001617 	ldw	r4,88(sp)
    9a78:	d9401217 	ldw	r5,72(sp)
    9a7c:	d8800104 	addi	r2,sp,4
    9a80:	a80d883a 	mov	r6,r21
    9a84:	d9c00204 	addi	r7,sp,8
    9a88:	d8800015 	stw	r2,0(sp)
    9a8c:	000d0080 	call	d008 <__d2b>
    9a90:	d8800715 	stw	r2,28(sp)
    9a94:	a804d53a 	srli	r2,r21,20
    9a98:	1101ffcc 	andi	r4,r2,2047
    9a9c:	20008626 	beq	r4,zero,9cb8 <_dtoa_r+0x348>
    9aa0:	d8c01217 	ldw	r3,72(sp)
    9aa4:	00800434 	movhi	r2,16
    9aa8:	10bfffc4 	addi	r2,r2,-1
    9aac:	ddc00117 	ldw	r23,4(sp)
    9ab0:	a884703a 	and	r2,r21,r2
    9ab4:	1811883a 	mov	r8,r3
    9ab8:	124ffc34 	orhi	r9,r2,16368
    9abc:	25bf0044 	addi	r22,r4,-1023
    9ac0:	d8000815 	stw	zero,32(sp)
    9ac4:	0005883a 	mov	r2,zero
    9ac8:	00cffe34 	movhi	r3,16376
    9acc:	480b883a 	mov	r5,r9
    9ad0:	4009883a 	mov	r4,r8
    9ad4:	180f883a 	mov	r7,r3
    9ad8:	100d883a 	mov	r6,r2
    9adc:	000631c0 	call	631c <__subdf3>
    9ae0:	0218dbf4 	movhi	r8,25455
    9ae4:	4210d844 	addi	r8,r8,17249
    9ae8:	024ff4f4 	movhi	r9,16339
    9aec:	4a61e9c4 	addi	r9,r9,-30809
    9af0:	480f883a 	mov	r7,r9
    9af4:	400d883a 	mov	r6,r8
    9af8:	180b883a 	mov	r5,r3
    9afc:	1009883a 	mov	r4,r2
    9b00:	00064100 	call	6410 <__muldf3>
    9b04:	0222d874 	movhi	r8,35681
    9b08:	42322cc4 	addi	r8,r8,-14157
    9b0c:	024ff1f4 	movhi	r9,16327
    9b10:	4a628a04 	addi	r9,r9,-30168
    9b14:	480f883a 	mov	r7,r9
    9b18:	400d883a 	mov	r6,r8
    9b1c:	180b883a 	mov	r5,r3
    9b20:	1009883a 	mov	r4,r2
    9b24:	000639c0 	call	639c <__adddf3>
    9b28:	b009883a 	mov	r4,r22
    9b2c:	1021883a 	mov	r16,r2
    9b30:	1823883a 	mov	r17,r3
    9b34:	0006ab40 	call	6ab4 <__floatsidf>
    9b38:	021427f4 	movhi	r8,20639
    9b3c:	421e7ec4 	addi	r8,r8,31227
    9b40:	024ff4f4 	movhi	r9,16339
    9b44:	4a5104c4 	addi	r9,r9,17427
    9b48:	480f883a 	mov	r7,r9
    9b4c:	400d883a 	mov	r6,r8
    9b50:	180b883a 	mov	r5,r3
    9b54:	1009883a 	mov	r4,r2
    9b58:	00064100 	call	6410 <__muldf3>
    9b5c:	180f883a 	mov	r7,r3
    9b60:	880b883a 	mov	r5,r17
    9b64:	100d883a 	mov	r6,r2
    9b68:	8009883a 	mov	r4,r16
    9b6c:	000639c0 	call	639c <__adddf3>
    9b70:	1009883a 	mov	r4,r2
    9b74:	180b883a 	mov	r5,r3
    9b78:	1021883a 	mov	r16,r2
    9b7c:	1823883a 	mov	r17,r3
    9b80:	0006bac0 	call	6bac <__fixdfsi>
    9b84:	000d883a 	mov	r6,zero
    9b88:	000f883a 	mov	r7,zero
    9b8c:	8009883a 	mov	r4,r16
    9b90:	880b883a 	mov	r5,r17
    9b94:	d8800d15 	stw	r2,52(sp)
    9b98:	000f78c0 	call	f78c <__ltdf2>
    9b9c:	10031716 	blt	r2,zero,a7fc <_dtoa_r+0xe8c>
    9ba0:	d8c00d17 	ldw	r3,52(sp)
    9ba4:	00800584 	movi	r2,22
    9ba8:	10c1482e 	bgeu	r2,r3,a0cc <_dtoa_r+0x75c>
    9bac:	01000044 	movi	r4,1
    9bb0:	d9000c15 	stw	r4,48(sp)
    9bb4:	bd85c83a 	sub	r2,r23,r22
    9bb8:	11bfffc4 	addi	r6,r2,-1
    9bbc:	30030b16 	blt	r6,zero,a7ec <_dtoa_r+0xe7c>
    9bc0:	d9800a15 	stw	r6,40(sp)
    9bc4:	d8001115 	stw	zero,68(sp)
    9bc8:	d8c00d17 	ldw	r3,52(sp)
    9bcc:	1802ff16 	blt	r3,zero,a7cc <_dtoa_r+0xe5c>
    9bd0:	d9000a17 	ldw	r4,40(sp)
    9bd4:	d8c00915 	stw	r3,36(sp)
    9bd8:	d8001015 	stw	zero,64(sp)
    9bdc:	20c9883a 	add	r4,r4,r3
    9be0:	d9000a15 	stw	r4,40(sp)
    9be4:	d9001717 	ldw	r4,92(sp)
    9be8:	00800244 	movi	r2,9
    9bec:	11004636 	bltu	r2,r4,9d08 <_dtoa_r+0x398>
    9bf0:	00800144 	movi	r2,5
    9bf4:	11020416 	blt	r2,r4,a408 <_dtoa_r+0xa98>
    9bf8:	04400044 	movi	r17,1
    9bfc:	d8c01717 	ldw	r3,92(sp)
    9c00:	00800144 	movi	r2,5
    9c04:	10c1ed36 	bltu	r2,r3,a3bc <_dtoa_r+0xa4c>
    9c08:	18c5883a 	add	r2,r3,r3
    9c0c:	1085883a 	add	r2,r2,r2
    9c10:	00c00074 	movhi	r3,1
    9c14:	18e70904 	addi	r3,r3,-25564
    9c18:	10c5883a 	add	r2,r2,r3
    9c1c:	11000017 	ldw	r4,0(r2)
    9c20:	2000683a 	jmp	r4
    9c24:	00009d10 	cmplti	zero,zero,628
    9c28:	00009d10 	cmplti	zero,zero,628
    9c2c:	0000a710 	cmplti	zero,zero,668
    9c30:	0000a6e8 	cmpgeui	zero,zero,667
    9c34:	0000a72c 	andhi	zero,zero,668
    9c38:	0000a738 	rdprs	zero,zero,668
    9c3c:	d9002717 	ldw	r4,156(sp)
    9c40:	0089c3c4 	movi	r2,9999
    9c44:	20800015 	stw	r2,0(r4)
    9c48:	a0001026 	beq	r20,zero,9c8c <_dtoa_r+0x31c>
    9c4c:	00c20034 	movhi	r3,2048
    9c50:	18c10904 	addi	r3,r3,1060
    9c54:	d9802917 	ldw	r6,164(sp)
    9c58:	303f7926 	beq	r6,zero,9a40 <_dtoa_r+0xd0>
    9c5c:	188000c7 	ldb	r2,3(r3)
    9c60:	190000c4 	addi	r4,r3,3
    9c64:	1000101e 	bne	r2,zero,9ca8 <_dtoa_r+0x338>
    9c68:	d8802917 	ldw	r2,164(sp)
    9c6c:	11000015 	stw	r4,0(r2)
    9c70:	003f7306 	br	9a40 <_dtoa_r+0xd0>
    9c74:	00a00034 	movhi	r2,32768
    9c78:	10bfffc4 	addi	r2,r2,-1
    9c7c:	00c00044 	movi	r3,1
    9c80:	88aa703a 	and	r21,r17,r2
    9c84:	90c00015 	stw	r3,0(r18)
    9c88:	003f5806 	br	99ec <_dtoa_r+0x7c>
    9c8c:	00800434 	movhi	r2,16
    9c90:	10bfffc4 	addi	r2,r2,-1
    9c94:	a884703a 	and	r2,r21,r2
    9c98:	103fec1e 	bne	r2,zero,9c4c <_dtoa_r+0x2dc>
    9c9c:	00c20034 	movhi	r3,2048
    9ca0:	18c10604 	addi	r3,r3,1048
    9ca4:	003feb06 	br	9c54 <_dtoa_r+0x2e4>
    9ca8:	d8802917 	ldw	r2,164(sp)
    9cac:	19000204 	addi	r4,r3,8
    9cb0:	11000015 	stw	r4,0(r2)
    9cb4:	003f6206 	br	9a40 <_dtoa_r+0xd0>
    9cb8:	ddc00117 	ldw	r23,4(sp)
    9cbc:	d8800217 	ldw	r2,8(sp)
    9cc0:	01000804 	movi	r4,32
    9cc4:	b8c10c84 	addi	r3,r23,1074
    9cc8:	18a3883a 	add	r17,r3,r2
    9ccc:	2441b80e 	bge	r4,r17,a3b0 <_dtoa_r+0xa40>
    9cd0:	00c01004 	movi	r3,64
    9cd4:	1c47c83a 	sub	r3,r3,r17
    9cd8:	88bff804 	addi	r2,r17,-32
    9cdc:	a8c6983a 	sll	r3,r21,r3
    9ce0:	a084d83a 	srl	r2,r20,r2
    9ce4:	1888b03a 	or	r4,r3,r2
    9ce8:	000f8140 	call	f814 <__floatunsidf>
    9cec:	1011883a 	mov	r8,r2
    9cf0:	00bf8434 	movhi	r2,65040
    9cf4:	01000044 	movi	r4,1
    9cf8:	10d3883a 	add	r9,r2,r3
    9cfc:	8dbef344 	addi	r22,r17,-1075
    9d00:	d9000815 	stw	r4,32(sp)
    9d04:	003f6f06 	br	9ac4 <_dtoa_r+0x154>
    9d08:	d8001715 	stw	zero,92(sp)
    9d0c:	04400044 	movi	r17,1
    9d10:	00bfffc4 	movi	r2,-1
    9d14:	00c00044 	movi	r3,1
    9d18:	d8800e15 	stw	r2,56(sp)
    9d1c:	d8002615 	stw	zero,152(sp)
    9d20:	d8800f15 	stw	r2,60(sp)
    9d24:	d8c00b15 	stw	r3,44(sp)
    9d28:	1021883a 	mov	r16,r2
    9d2c:	d8801617 	ldw	r2,88(sp)
    9d30:	10001115 	stw	zero,68(r2)
    9d34:	d8801617 	ldw	r2,88(sp)
    9d38:	11401117 	ldw	r5,68(r2)
    9d3c:	1009883a 	mov	r4,r2
    9d40:	000cf4c0 	call	cf4c <_Balloc>
    9d44:	d8c01617 	ldw	r3,88(sp)
    9d48:	d8800515 	stw	r2,20(sp)
    9d4c:	18801015 	stw	r2,64(r3)
    9d50:	00800384 	movi	r2,14
    9d54:	14006836 	bltu	r2,r16,9ef8 <_dtoa_r+0x588>
    9d58:	8805003a 	cmpeq	r2,r17,zero
    9d5c:	1000661e 	bne	r2,zero,9ef8 <_dtoa_r+0x588>
    9d60:	d9000d17 	ldw	r4,52(sp)
    9d64:	0102300e 	bge	zero,r4,a628 <_dtoa_r+0xcb8>
    9d68:	208003cc 	andi	r2,r4,15
    9d6c:	100490fa 	slli	r2,r2,3
    9d70:	2025d13a 	srai	r18,r4,4
    9d74:	00c20034 	movhi	r3,2048
    9d78:	18c11b04 	addi	r3,r3,1132
    9d7c:	10c5883a 	add	r2,r2,r3
    9d80:	90c0040c 	andi	r3,r18,16
    9d84:	14000017 	ldw	r16,0(r2)
    9d88:	14400117 	ldw	r17,4(r2)
    9d8c:	18036a1e 	bne	r3,zero,ab38 <_dtoa_r+0x11c8>
    9d90:	05800084 	movi	r22,2
    9d94:	90001026 	beq	r18,zero,9dd8 <_dtoa_r+0x468>
    9d98:	04c20034 	movhi	r19,2048
    9d9c:	9cc14d04 	addi	r19,r19,1332
    9da0:	9080004c 	andi	r2,r18,1
    9da4:	1005003a 	cmpeq	r2,r2,zero
    9da8:	1000081e 	bne	r2,zero,9dcc <_dtoa_r+0x45c>
    9dac:	99800017 	ldw	r6,0(r19)
    9db0:	99c00117 	ldw	r7,4(r19)
    9db4:	880b883a 	mov	r5,r17
    9db8:	8009883a 	mov	r4,r16
    9dbc:	00064100 	call	6410 <__muldf3>
    9dc0:	1021883a 	mov	r16,r2
    9dc4:	b5800044 	addi	r22,r22,1
    9dc8:	1823883a 	mov	r17,r3
    9dcc:	9025d07a 	srai	r18,r18,1
    9dd0:	9cc00204 	addi	r19,r19,8
    9dd4:	903ff21e 	bne	r18,zero,9da0 <_dtoa_r+0x430>
    9dd8:	a80b883a 	mov	r5,r21
    9ddc:	a009883a 	mov	r4,r20
    9de0:	880f883a 	mov	r7,r17
    9de4:	800d883a 	mov	r6,r16
    9de8:	00067d40 	call	67d4 <__divdf3>
    9dec:	1029883a 	mov	r20,r2
    9df0:	182b883a 	mov	r21,r3
    9df4:	d8c00c17 	ldw	r3,48(sp)
    9df8:	1805003a 	cmpeq	r2,r3,zero
    9dfc:	1000081e 	bne	r2,zero,9e20 <_dtoa_r+0x4b0>
    9e00:	0005883a 	mov	r2,zero
    9e04:	00cffc34 	movhi	r3,16368
    9e08:	180f883a 	mov	r7,r3
    9e0c:	a009883a 	mov	r4,r20
    9e10:	a80b883a 	mov	r5,r21
    9e14:	100d883a 	mov	r6,r2
    9e18:	000f78c0 	call	f78c <__ltdf2>
    9e1c:	1003fe16 	blt	r2,zero,ae18 <_dtoa_r+0x14a8>
    9e20:	b009883a 	mov	r4,r22
    9e24:	0006ab40 	call	6ab4 <__floatsidf>
    9e28:	180b883a 	mov	r5,r3
    9e2c:	1009883a 	mov	r4,r2
    9e30:	a00d883a 	mov	r6,r20
    9e34:	a80f883a 	mov	r7,r21
    9e38:	00064100 	call	6410 <__muldf3>
    9e3c:	0011883a 	mov	r8,zero
    9e40:	02500734 	movhi	r9,16412
    9e44:	1009883a 	mov	r4,r2
    9e48:	180b883a 	mov	r5,r3
    9e4c:	480f883a 	mov	r7,r9
    9e50:	400d883a 	mov	r6,r8
    9e54:	000639c0 	call	639c <__adddf3>
    9e58:	d9000f17 	ldw	r4,60(sp)
    9e5c:	102d883a 	mov	r22,r2
    9e60:	00bf3034 	movhi	r2,64704
    9e64:	18b9883a 	add	fp,r3,r2
    9e68:	e02f883a 	mov	r23,fp
    9e6c:	20028f1e 	bne	r4,zero,a8ac <_dtoa_r+0xf3c>
    9e70:	0005883a 	mov	r2,zero
    9e74:	00d00534 	movhi	r3,16404
    9e78:	a009883a 	mov	r4,r20
    9e7c:	a80b883a 	mov	r5,r21
    9e80:	180f883a 	mov	r7,r3
    9e84:	100d883a 	mov	r6,r2
    9e88:	000631c0 	call	631c <__subdf3>
    9e8c:	1009883a 	mov	r4,r2
    9e90:	e00f883a 	mov	r7,fp
    9e94:	180b883a 	mov	r5,r3
    9e98:	b00d883a 	mov	r6,r22
    9e9c:	1025883a 	mov	r18,r2
    9ea0:	1827883a 	mov	r19,r3
    9ea4:	0006a2c0 	call	6a2c <__gtdf2>
    9ea8:	00834f16 	blt	zero,r2,abe8 <_dtoa_r+0x1278>
    9eac:	e0e0003c 	xorhi	r3,fp,32768
    9eb0:	9009883a 	mov	r4,r18
    9eb4:	980b883a 	mov	r5,r19
    9eb8:	180f883a 	mov	r7,r3
    9ebc:	b00d883a 	mov	r6,r22
    9ec0:	000f78c0 	call	f78c <__ltdf2>
    9ec4:	1000080e 	bge	r2,zero,9ee8 <_dtoa_r+0x578>
    9ec8:	0027883a 	mov	r19,zero
    9ecc:	0025883a 	mov	r18,zero
    9ed0:	d8802617 	ldw	r2,152(sp)
    9ed4:	df000517 	ldw	fp,20(sp)
    9ed8:	d8000615 	stw	zero,24(sp)
    9edc:	0084303a 	nor	r2,zero,r2
    9ee0:	d8800d15 	stw	r2,52(sp)
    9ee4:	00019b06 	br	a554 <_dtoa_r+0xbe4>
    9ee8:	d9801217 	ldw	r6,72(sp)
    9eec:	d8801317 	ldw	r2,76(sp)
    9ef0:	3029883a 	mov	r20,r6
    9ef4:	102b883a 	mov	r21,r2
    9ef8:	d8c00217 	ldw	r3,8(sp)
    9efc:	18008516 	blt	r3,zero,a114 <_dtoa_r+0x7a4>
    9f00:	d9000d17 	ldw	r4,52(sp)
    9f04:	00800384 	movi	r2,14
    9f08:	11008216 	blt	r2,r4,a114 <_dtoa_r+0x7a4>
    9f0c:	200490fa 	slli	r2,r4,3
    9f10:	d9802617 	ldw	r6,152(sp)
    9f14:	00c20034 	movhi	r3,2048
    9f18:	18c11b04 	addi	r3,r3,1132
    9f1c:	10c5883a 	add	r2,r2,r3
    9f20:	14800017 	ldw	r18,0(r2)
    9f24:	14c00117 	ldw	r19,4(r2)
    9f28:	30031e16 	blt	r6,zero,aba4 <_dtoa_r+0x1234>
    9f2c:	d9000517 	ldw	r4,20(sp)
    9f30:	d8c00f17 	ldw	r3,60(sp)
    9f34:	a823883a 	mov	r17,r21
    9f38:	a021883a 	mov	r16,r20
    9f3c:	192b883a 	add	r21,r3,r4
    9f40:	2039883a 	mov	fp,r4
    9f44:	00000f06 	br	9f84 <_dtoa_r+0x614>
    9f48:	0005883a 	mov	r2,zero
    9f4c:	00d00934 	movhi	r3,16420
    9f50:	5009883a 	mov	r4,r10
    9f54:	580b883a 	mov	r5,r11
    9f58:	180f883a 	mov	r7,r3
    9f5c:	100d883a 	mov	r6,r2
    9f60:	00064100 	call	6410 <__muldf3>
    9f64:	180b883a 	mov	r5,r3
    9f68:	000d883a 	mov	r6,zero
    9f6c:	000f883a 	mov	r7,zero
    9f70:	1009883a 	mov	r4,r2
    9f74:	1021883a 	mov	r16,r2
    9f78:	1823883a 	mov	r17,r3
    9f7c:	000f67c0 	call	f67c <__nedf2>
    9f80:	10004526 	beq	r2,zero,a098 <_dtoa_r+0x728>
    9f84:	900d883a 	mov	r6,r18
    9f88:	980f883a 	mov	r7,r19
    9f8c:	8009883a 	mov	r4,r16
    9f90:	880b883a 	mov	r5,r17
    9f94:	00067d40 	call	67d4 <__divdf3>
    9f98:	180b883a 	mov	r5,r3
    9f9c:	1009883a 	mov	r4,r2
    9fa0:	0006bac0 	call	6bac <__fixdfsi>
    9fa4:	1009883a 	mov	r4,r2
    9fa8:	1029883a 	mov	r20,r2
    9fac:	0006ab40 	call	6ab4 <__floatsidf>
    9fb0:	180f883a 	mov	r7,r3
    9fb4:	9009883a 	mov	r4,r18
    9fb8:	980b883a 	mov	r5,r19
    9fbc:	100d883a 	mov	r6,r2
    9fc0:	00064100 	call	6410 <__muldf3>
    9fc4:	180f883a 	mov	r7,r3
    9fc8:	880b883a 	mov	r5,r17
    9fcc:	8009883a 	mov	r4,r16
    9fd0:	100d883a 	mov	r6,r2
    9fd4:	000631c0 	call	631c <__subdf3>
    9fd8:	1015883a 	mov	r10,r2
    9fdc:	a0800c04 	addi	r2,r20,48
    9fe0:	e0800005 	stb	r2,0(fp)
    9fe4:	e7000044 	addi	fp,fp,1
    9fe8:	1817883a 	mov	r11,r3
    9fec:	e57fd61e 	bne	fp,r21,9f48 <_dtoa_r+0x5d8>
    9ff0:	500d883a 	mov	r6,r10
    9ff4:	180f883a 	mov	r7,r3
    9ff8:	5009883a 	mov	r4,r10
    9ffc:	180b883a 	mov	r5,r3
    a000:	000639c0 	call	639c <__adddf3>
    a004:	100d883a 	mov	r6,r2
    a008:	9009883a 	mov	r4,r18
    a00c:	980b883a 	mov	r5,r19
    a010:	180f883a 	mov	r7,r3
    a014:	1021883a 	mov	r16,r2
    a018:	1823883a 	mov	r17,r3
    a01c:	000f78c0 	call	f78c <__ltdf2>
    a020:	10000816 	blt	r2,zero,a044 <_dtoa_r+0x6d4>
    a024:	980b883a 	mov	r5,r19
    a028:	800d883a 	mov	r6,r16
    a02c:	880f883a 	mov	r7,r17
    a030:	9009883a 	mov	r4,r18
    a034:	000f5f40 	call	f5f4 <__eqdf2>
    a038:	1000171e 	bne	r2,zero,a098 <_dtoa_r+0x728>
    a03c:	a080004c 	andi	r2,r20,1
    a040:	10001526 	beq	r2,zero,a098 <_dtoa_r+0x728>
    a044:	d8800d17 	ldw	r2,52(sp)
    a048:	d8800415 	stw	r2,16(sp)
    a04c:	e009883a 	mov	r4,fp
    a050:	213fffc4 	addi	r4,r4,-1
    a054:	20c00007 	ldb	r3,0(r4)
    a058:	00800e44 	movi	r2,57
    a05c:	1880081e 	bne	r3,r2,a080 <_dtoa_r+0x710>
    a060:	d8800517 	ldw	r2,20(sp)
    a064:	113ffa1e 	bne	r2,r4,a050 <_dtoa_r+0x6e0>
    a068:	d8c00417 	ldw	r3,16(sp)
    a06c:	d9800517 	ldw	r6,20(sp)
    a070:	00800c04 	movi	r2,48
    a074:	18c00044 	addi	r3,r3,1
    a078:	d8c00415 	stw	r3,16(sp)
    a07c:	30800005 	stb	r2,0(r6)
    a080:	20800003 	ldbu	r2,0(r4)
    a084:	d8c00417 	ldw	r3,16(sp)
    a088:	27000044 	addi	fp,r4,1
    a08c:	10800044 	addi	r2,r2,1
    a090:	d8c00d15 	stw	r3,52(sp)
    a094:	20800005 	stb	r2,0(r4)
    a098:	d9001617 	ldw	r4,88(sp)
    a09c:	d9400717 	ldw	r5,28(sp)
    a0a0:	000c9cc0 	call	c9cc <_Bfree>
    a0a4:	e0000005 	stb	zero,0(fp)
    a0a8:	d9800d17 	ldw	r6,52(sp)
    a0ac:	d8c02717 	ldw	r3,156(sp)
    a0b0:	d9002917 	ldw	r4,164(sp)
    a0b4:	30800044 	addi	r2,r6,1
    a0b8:	18800015 	stw	r2,0(r3)
    a0bc:	20029c26 	beq	r4,zero,ab30 <_dtoa_r+0x11c0>
    a0c0:	d8c00517 	ldw	r3,20(sp)
    a0c4:	27000015 	stw	fp,0(r4)
    a0c8:	003e5d06 	br	9a40 <_dtoa_r+0xd0>
    a0cc:	d9800d17 	ldw	r6,52(sp)
    a0d0:	00c20034 	movhi	r3,2048
    a0d4:	18c11b04 	addi	r3,r3,1132
    a0d8:	d9001217 	ldw	r4,72(sp)
    a0dc:	300490fa 	slli	r2,r6,3
    a0e0:	d9401317 	ldw	r5,76(sp)
    a0e4:	10c5883a 	add	r2,r2,r3
    a0e8:	12000017 	ldw	r8,0(r2)
    a0ec:	12400117 	ldw	r9,4(r2)
    a0f0:	400d883a 	mov	r6,r8
    a0f4:	480f883a 	mov	r7,r9
    a0f8:	000f78c0 	call	f78c <__ltdf2>
    a0fc:	1000030e 	bge	r2,zero,a10c <_dtoa_r+0x79c>
    a100:	d8800d17 	ldw	r2,52(sp)
    a104:	10bfffc4 	addi	r2,r2,-1
    a108:	d8800d15 	stw	r2,52(sp)
    a10c:	d8000c15 	stw	zero,48(sp)
    a110:	003ea806 	br	9bb4 <_dtoa_r+0x244>
    a114:	d9000b17 	ldw	r4,44(sp)
    a118:	202cc03a 	cmpne	r22,r4,zero
    a11c:	b000c71e 	bne	r22,zero,a43c <_dtoa_r+0xacc>
    a120:	dc001117 	ldw	r16,68(sp)
    a124:	dc801017 	ldw	r18,64(sp)
    a128:	0027883a 	mov	r19,zero
    a12c:	04000b0e 	bge	zero,r16,a15c <_dtoa_r+0x7ec>
    a130:	d8c00a17 	ldw	r3,40(sp)
    a134:	00c0090e 	bge	zero,r3,a15c <_dtoa_r+0x7ec>
    a138:	8005883a 	mov	r2,r16
    a13c:	1c011316 	blt	r3,r16,a58c <_dtoa_r+0xc1c>
    a140:	d9000a17 	ldw	r4,40(sp)
    a144:	d9801117 	ldw	r6,68(sp)
    a148:	80a1c83a 	sub	r16,r16,r2
    a14c:	2089c83a 	sub	r4,r4,r2
    a150:	308dc83a 	sub	r6,r6,r2
    a154:	d9000a15 	stw	r4,40(sp)
    a158:	d9801115 	stw	r6,68(sp)
    a15c:	d8801017 	ldw	r2,64(sp)
    a160:	0080150e 	bge	zero,r2,a1b8 <_dtoa_r+0x848>
    a164:	d8c00b17 	ldw	r3,44(sp)
    a168:	1805003a 	cmpeq	r2,r3,zero
    a16c:	1001c91e 	bne	r2,zero,a894 <_dtoa_r+0xf24>
    a170:	04800e0e 	bge	zero,r18,a1ac <_dtoa_r+0x83c>
    a174:	d9001617 	ldw	r4,88(sp)
    a178:	980b883a 	mov	r5,r19
    a17c:	900d883a 	mov	r6,r18
    a180:	000d7800 	call	d780 <__pow5mult>
    a184:	d9001617 	ldw	r4,88(sp)
    a188:	d9800717 	ldw	r6,28(sp)
    a18c:	100b883a 	mov	r5,r2
    a190:	1027883a 	mov	r19,r2
    a194:	000d45c0 	call	d45c <__multiply>
    a198:	d9001617 	ldw	r4,88(sp)
    a19c:	d9400717 	ldw	r5,28(sp)
    a1a0:	1023883a 	mov	r17,r2
    a1a4:	000c9cc0 	call	c9cc <_Bfree>
    a1a8:	dc400715 	stw	r17,28(sp)
    a1ac:	d9001017 	ldw	r4,64(sp)
    a1b0:	248dc83a 	sub	r6,r4,r18
    a1b4:	30010e1e 	bne	r6,zero,a5f0 <_dtoa_r+0xc80>
    a1b8:	d9001617 	ldw	r4,88(sp)
    a1bc:	04400044 	movi	r17,1
    a1c0:	880b883a 	mov	r5,r17
    a1c4:	000d6440 	call	d644 <__i2b>
    a1c8:	d9800917 	ldw	r6,36(sp)
    a1cc:	1025883a 	mov	r18,r2
    a1d0:	0180040e 	bge	zero,r6,a1e4 <_dtoa_r+0x874>
    a1d4:	d9001617 	ldw	r4,88(sp)
    a1d8:	100b883a 	mov	r5,r2
    a1dc:	000d7800 	call	d780 <__pow5mult>
    a1e0:	1025883a 	mov	r18,r2
    a1e4:	d8801717 	ldw	r2,92(sp)
    a1e8:	8880f30e 	bge	r17,r2,a5b8 <_dtoa_r+0xc48>
    a1ec:	0023883a 	mov	r17,zero
    a1f0:	d9800917 	ldw	r6,36(sp)
    a1f4:	30019e1e 	bne	r6,zero,a870 <_dtoa_r+0xf00>
    a1f8:	00c00044 	movi	r3,1
    a1fc:	d9000a17 	ldw	r4,40(sp)
    a200:	20c5883a 	add	r2,r4,r3
    a204:	10c007cc 	andi	r3,r2,31
    a208:	1800841e 	bne	r3,zero,a41c <_dtoa_r+0xaac>
    a20c:	00800704 	movi	r2,28
    a210:	d9000a17 	ldw	r4,40(sp)
    a214:	d9801117 	ldw	r6,68(sp)
    a218:	80a1883a 	add	r16,r16,r2
    a21c:	2089883a 	add	r4,r4,r2
    a220:	308d883a 	add	r6,r6,r2
    a224:	d9000a15 	stw	r4,40(sp)
    a228:	d9801115 	stw	r6,68(sp)
    a22c:	d8801117 	ldw	r2,68(sp)
    a230:	0080050e 	bge	zero,r2,a248 <_dtoa_r+0x8d8>
    a234:	d9400717 	ldw	r5,28(sp)
    a238:	d9001617 	ldw	r4,88(sp)
    a23c:	100d883a 	mov	r6,r2
    a240:	000d3100 	call	d310 <__lshift>
    a244:	d8800715 	stw	r2,28(sp)
    a248:	d8c00a17 	ldw	r3,40(sp)
    a24c:	00c0050e 	bge	zero,r3,a264 <_dtoa_r+0x8f4>
    a250:	d9001617 	ldw	r4,88(sp)
    a254:	900b883a 	mov	r5,r18
    a258:	180d883a 	mov	r6,r3
    a25c:	000d3100 	call	d310 <__lshift>
    a260:	1025883a 	mov	r18,r2
    a264:	d9000c17 	ldw	r4,48(sp)
    a268:	2005003a 	cmpeq	r2,r4,zero
    a26c:	10016f26 	beq	r2,zero,a82c <_dtoa_r+0xebc>
    a270:	d9000f17 	ldw	r4,60(sp)
    a274:	0102170e 	bge	zero,r4,aad4 <_dtoa_r+0x1164>
    a278:	d9800b17 	ldw	r6,44(sp)
    a27c:	3005003a 	cmpeq	r2,r6,zero
    a280:	1000881e 	bne	r2,zero,a4a4 <_dtoa_r+0xb34>
    a284:	0400050e 	bge	zero,r16,a29c <_dtoa_r+0x92c>
    a288:	d9001617 	ldw	r4,88(sp)
    a28c:	980b883a 	mov	r5,r19
    a290:	800d883a 	mov	r6,r16
    a294:	000d3100 	call	d310 <__lshift>
    a298:	1027883a 	mov	r19,r2
    a29c:	8804c03a 	cmpne	r2,r17,zero
    a2a0:	1002541e 	bne	r2,zero,abf4 <_dtoa_r+0x1284>
    a2a4:	980b883a 	mov	r5,r19
    a2a8:	dd800517 	ldw	r22,20(sp)
    a2ac:	dcc00615 	stw	r19,24(sp)
    a2b0:	a700004c 	andi	fp,r20,1
    a2b4:	2827883a 	mov	r19,r5
    a2b8:	d9000717 	ldw	r4,28(sp)
    a2bc:	900b883a 	mov	r5,r18
    a2c0:	00097580 	call	9758 <quorem>
    a2c4:	d9000717 	ldw	r4,28(sp)
    a2c8:	d9400617 	ldw	r5,24(sp)
    a2cc:	1023883a 	mov	r17,r2
    a2d0:	8dc00c04 	addi	r23,r17,48
    a2d4:	000cb280 	call	cb28 <__mcmp>
    a2d8:	d9001617 	ldw	r4,88(sp)
    a2dc:	900b883a 	mov	r5,r18
    a2e0:	980d883a 	mov	r6,r19
    a2e4:	1029883a 	mov	r20,r2
    a2e8:	000d1840 	call	d184 <__mdiff>
    a2ec:	102b883a 	mov	r21,r2
    a2f0:	10800317 	ldw	r2,12(r2)
    a2f4:	1001281e 	bne	r2,zero,a798 <_dtoa_r+0xe28>
    a2f8:	d9000717 	ldw	r4,28(sp)
    a2fc:	a80b883a 	mov	r5,r21
    a300:	000cb280 	call	cb28 <__mcmp>
    a304:	d9001617 	ldw	r4,88(sp)
    a308:	1021883a 	mov	r16,r2
    a30c:	a80b883a 	mov	r5,r21
    a310:	000c9cc0 	call	c9cc <_Bfree>
    a314:	8000041e 	bne	r16,zero,a328 <_dtoa_r+0x9b8>
    a318:	d8801717 	ldw	r2,92(sp)
    a31c:	1000021e 	bne	r2,zero,a328 <_dtoa_r+0x9b8>
    a320:	e004c03a 	cmpne	r2,fp,zero
    a324:	10011726 	beq	r2,zero,a784 <_dtoa_r+0xe14>
    a328:	a0010616 	blt	r20,zero,a744 <_dtoa_r+0xdd4>
    a32c:	a000041e 	bne	r20,zero,a340 <_dtoa_r+0x9d0>
    a330:	d8c01717 	ldw	r3,92(sp)
    a334:	1800021e 	bne	r3,zero,a340 <_dtoa_r+0x9d0>
    a338:	e004c03a 	cmpne	r2,fp,zero
    a33c:	10010126 	beq	r2,zero,a744 <_dtoa_r+0xdd4>
    a340:	04023d16 	blt	zero,r16,ac38 <_dtoa_r+0x12c8>
    a344:	b5c00005 	stb	r23,0(r22)
    a348:	d9800517 	ldw	r6,20(sp)
    a34c:	d9000f17 	ldw	r4,60(sp)
    a350:	b5800044 	addi	r22,r22,1
    a354:	3105883a 	add	r2,r6,r4
    a358:	b0806526 	beq	r22,r2,a4f0 <_dtoa_r+0xb80>
    a35c:	d9400717 	ldw	r5,28(sp)
    a360:	d9001617 	ldw	r4,88(sp)
    a364:	01800284 	movi	r6,10
    a368:	000f883a 	mov	r7,zero
    a36c:	000d6800 	call	d680 <__multadd>
    a370:	d8800715 	stw	r2,28(sp)
    a374:	d8800617 	ldw	r2,24(sp)
    a378:	14c10c26 	beq	r2,r19,a7ac <_dtoa_r+0xe3c>
    a37c:	d9400617 	ldw	r5,24(sp)
    a380:	d9001617 	ldw	r4,88(sp)
    a384:	01800284 	movi	r6,10
    a388:	000f883a 	mov	r7,zero
    a38c:	000d6800 	call	d680 <__multadd>
    a390:	d9001617 	ldw	r4,88(sp)
    a394:	980b883a 	mov	r5,r19
    a398:	01800284 	movi	r6,10
    a39c:	000f883a 	mov	r7,zero
    a3a0:	d8800615 	stw	r2,24(sp)
    a3a4:	000d6800 	call	d680 <__multadd>
    a3a8:	1027883a 	mov	r19,r2
    a3ac:	003fc206 	br	a2b8 <_dtoa_r+0x948>
    a3b0:	2445c83a 	sub	r2,r4,r17
    a3b4:	a088983a 	sll	r4,r20,r2
    a3b8:	003e4b06 	br	9ce8 <_dtoa_r+0x378>
    a3bc:	01bfffc4 	movi	r6,-1
    a3c0:	00800044 	movi	r2,1
    a3c4:	d9800e15 	stw	r6,56(sp)
    a3c8:	d9800f15 	stw	r6,60(sp)
    a3cc:	d8800b15 	stw	r2,44(sp)
    a3d0:	d8c01617 	ldw	r3,88(sp)
    a3d4:	008005c4 	movi	r2,23
    a3d8:	18001115 	stw	zero,68(r3)
    a3dc:	1580082e 	bgeu	r2,r22,a400 <_dtoa_r+0xa90>
    a3e0:	00c00104 	movi	r3,4
    a3e4:	0009883a 	mov	r4,zero
    a3e8:	18c7883a 	add	r3,r3,r3
    a3ec:	18800504 	addi	r2,r3,20
    a3f0:	21000044 	addi	r4,r4,1
    a3f4:	b0bffc2e 	bgeu	r22,r2,a3e8 <_dtoa_r+0xa78>
    a3f8:	d9801617 	ldw	r6,88(sp)
    a3fc:	31001115 	stw	r4,68(r6)
    a400:	dc000f17 	ldw	r16,60(sp)
    a404:	003e4b06 	br	9d34 <_dtoa_r+0x3c4>
    a408:	d9801717 	ldw	r6,92(sp)
    a40c:	0023883a 	mov	r17,zero
    a410:	31bfff04 	addi	r6,r6,-4
    a414:	d9801715 	stw	r6,92(sp)
    a418:	003df806 	br	9bfc <_dtoa_r+0x28c>
    a41c:	00800804 	movi	r2,32
    a420:	10c9c83a 	sub	r4,r2,r3
    a424:	00c00104 	movi	r3,4
    a428:	19005a16 	blt	r3,r4,a594 <_dtoa_r+0xc24>
    a42c:	008000c4 	movi	r2,3
    a430:	113f7e16 	blt	r2,r4,a22c <_dtoa_r+0x8bc>
    a434:	20800704 	addi	r2,r4,28
    a438:	003f7506 	br	a210 <_dtoa_r+0x8a0>
    a43c:	d9801717 	ldw	r6,92(sp)
    a440:	00800044 	movi	r2,1
    a444:	1180a10e 	bge	r2,r6,a6cc <_dtoa_r+0xd5c>
    a448:	d9800f17 	ldw	r6,60(sp)
    a44c:	d8c01017 	ldw	r3,64(sp)
    a450:	30bfffc4 	addi	r2,r6,-1
    a454:	1881c616 	blt	r3,r2,ab70 <_dtoa_r+0x1200>
    a458:	18a5c83a 	sub	r18,r3,r2
    a45c:	d8800f17 	ldw	r2,60(sp)
    a460:	10026216 	blt	r2,zero,adec <_dtoa_r+0x147c>
    a464:	dc001117 	ldw	r16,68(sp)
    a468:	1007883a 	mov	r3,r2
    a46c:	d9800a17 	ldw	r6,40(sp)
    a470:	d8801117 	ldw	r2,68(sp)
    a474:	d9001617 	ldw	r4,88(sp)
    a478:	30cd883a 	add	r6,r6,r3
    a47c:	10c5883a 	add	r2,r2,r3
    a480:	01400044 	movi	r5,1
    a484:	d9800a15 	stw	r6,40(sp)
    a488:	d8801115 	stw	r2,68(sp)
    a48c:	000d6440 	call	d644 <__i2b>
    a490:	1027883a 	mov	r19,r2
    a494:	003f2506 	br	a12c <_dtoa_r+0x7bc>
    a498:	00c20034 	movhi	r3,2048
    a49c:	18c0fd04 	addi	r3,r3,1012
    a4a0:	003d6706 	br	9a40 <_dtoa_r+0xd0>
    a4a4:	dd800517 	ldw	r22,20(sp)
    a4a8:	04000044 	movi	r16,1
    a4ac:	00000706 	br	a4cc <_dtoa_r+0xb5c>
    a4b0:	d9400717 	ldw	r5,28(sp)
    a4b4:	d9001617 	ldw	r4,88(sp)
    a4b8:	01800284 	movi	r6,10
    a4bc:	000f883a 	mov	r7,zero
    a4c0:	000d6800 	call	d680 <__multadd>
    a4c4:	d8800715 	stw	r2,28(sp)
    a4c8:	84000044 	addi	r16,r16,1
    a4cc:	d9000717 	ldw	r4,28(sp)
    a4d0:	900b883a 	mov	r5,r18
    a4d4:	00097580 	call	9758 <quorem>
    a4d8:	15c00c04 	addi	r23,r2,48
    a4dc:	b5c00005 	stb	r23,0(r22)
    a4e0:	d8c00f17 	ldw	r3,60(sp)
    a4e4:	b5800044 	addi	r22,r22,1
    a4e8:	80fff116 	blt	r16,r3,a4b0 <_dtoa_r+0xb40>
    a4ec:	d8000615 	stw	zero,24(sp)
    a4f0:	d9400717 	ldw	r5,28(sp)
    a4f4:	d9001617 	ldw	r4,88(sp)
    a4f8:	01800044 	movi	r6,1
    a4fc:	000d3100 	call	d310 <__lshift>
    a500:	1009883a 	mov	r4,r2
    a504:	900b883a 	mov	r5,r18
    a508:	d8800715 	stw	r2,28(sp)
    a50c:	000cb280 	call	cb28 <__mcmp>
    a510:	00803c0e 	bge	zero,r2,a604 <_dtoa_r+0xc94>
    a514:	b009883a 	mov	r4,r22
    a518:	213fffc4 	addi	r4,r4,-1
    a51c:	21400003 	ldbu	r5,0(r4)
    a520:	00800e44 	movi	r2,57
    a524:	28c03fcc 	andi	r3,r5,255
    a528:	18c0201c 	xori	r3,r3,128
    a52c:	18ffe004 	addi	r3,r3,-128
    a530:	1881981e 	bne	r3,r2,ab94 <_dtoa_r+0x1224>
    a534:	d9800517 	ldw	r6,20(sp)
    a538:	21bff71e 	bne	r4,r6,a518 <_dtoa_r+0xba8>
    a53c:	d8800d17 	ldw	r2,52(sp)
    a540:	37000044 	addi	fp,r6,1
    a544:	10800044 	addi	r2,r2,1
    a548:	d8800d15 	stw	r2,52(sp)
    a54c:	00800c44 	movi	r2,49
    a550:	30800005 	stb	r2,0(r6)
    a554:	d9001617 	ldw	r4,88(sp)
    a558:	900b883a 	mov	r5,r18
    a55c:	000c9cc0 	call	c9cc <_Bfree>
    a560:	983ecd26 	beq	r19,zero,a098 <_dtoa_r+0x728>
    a564:	d8c00617 	ldw	r3,24(sp)
    a568:	18000426 	beq	r3,zero,a57c <_dtoa_r+0xc0c>
    a56c:	1cc00326 	beq	r3,r19,a57c <_dtoa_r+0xc0c>
    a570:	d9001617 	ldw	r4,88(sp)
    a574:	180b883a 	mov	r5,r3
    a578:	000c9cc0 	call	c9cc <_Bfree>
    a57c:	d9001617 	ldw	r4,88(sp)
    a580:	980b883a 	mov	r5,r19
    a584:	000c9cc0 	call	c9cc <_Bfree>
    a588:	003ec306 	br	a098 <_dtoa_r+0x728>
    a58c:	1805883a 	mov	r2,r3
    a590:	003eeb06 	br	a140 <_dtoa_r+0x7d0>
    a594:	d9800a17 	ldw	r6,40(sp)
    a598:	d8c01117 	ldw	r3,68(sp)
    a59c:	20bfff04 	addi	r2,r4,-4
    a5a0:	308d883a 	add	r6,r6,r2
    a5a4:	1887883a 	add	r3,r3,r2
    a5a8:	80a1883a 	add	r16,r16,r2
    a5ac:	d9800a15 	stw	r6,40(sp)
    a5b0:	d8c01115 	stw	r3,68(sp)
    a5b4:	003f1d06 	br	a22c <_dtoa_r+0x8bc>
    a5b8:	a03f0c1e 	bne	r20,zero,a1ec <_dtoa_r+0x87c>
    a5bc:	00800434 	movhi	r2,16
    a5c0:	10bfffc4 	addi	r2,r2,-1
    a5c4:	a884703a 	and	r2,r21,r2
    a5c8:	103f081e 	bne	r2,zero,a1ec <_dtoa_r+0x87c>
    a5cc:	a89ffc2c 	andhi	r2,r21,32752
    a5d0:	103f0626 	beq	r2,zero,a1ec <_dtoa_r+0x87c>
    a5d4:	d8c01117 	ldw	r3,68(sp)
    a5d8:	d9000a17 	ldw	r4,40(sp)
    a5dc:	18c00044 	addi	r3,r3,1
    a5e0:	21000044 	addi	r4,r4,1
    a5e4:	d8c01115 	stw	r3,68(sp)
    a5e8:	d9000a15 	stw	r4,40(sp)
    a5ec:	003f0006 	br	a1f0 <_dtoa_r+0x880>
    a5f0:	d9400717 	ldw	r5,28(sp)
    a5f4:	d9001617 	ldw	r4,88(sp)
    a5f8:	000d7800 	call	d780 <__pow5mult>
    a5fc:	d8800715 	stw	r2,28(sp)
    a600:	003eed06 	br	a1b8 <_dtoa_r+0x848>
    a604:	1000021e 	bne	r2,zero,a610 <_dtoa_r+0xca0>
    a608:	b880004c 	andi	r2,r23,1
    a60c:	103fc11e 	bne	r2,zero,a514 <_dtoa_r+0xba4>
    a610:	b5bfffc4 	addi	r22,r22,-1
    a614:	b0c00007 	ldb	r3,0(r22)
    a618:	00800c04 	movi	r2,48
    a61c:	18bffc26 	beq	r3,r2,a610 <_dtoa_r+0xca0>
    a620:	b7000044 	addi	fp,r22,1
    a624:	003fcb06 	br	a554 <_dtoa_r+0xbe4>
    a628:	d9800d17 	ldw	r6,52(sp)
    a62c:	018fc83a 	sub	r7,zero,r6
    a630:	3801f726 	beq	r7,zero,ae10 <_dtoa_r+0x14a0>
    a634:	398003cc 	andi	r6,r7,15
    a638:	300c90fa 	slli	r6,r6,3
    a63c:	01420034 	movhi	r5,2048
    a640:	29411b04 	addi	r5,r5,1132
    a644:	d9001217 	ldw	r4,72(sp)
    a648:	314d883a 	add	r6,r6,r5
    a64c:	30c00117 	ldw	r3,4(r6)
    a650:	30800017 	ldw	r2,0(r6)
    a654:	d9401317 	ldw	r5,76(sp)
    a658:	3821d13a 	srai	r16,r7,4
    a65c:	100d883a 	mov	r6,r2
    a660:	180f883a 	mov	r7,r3
    a664:	00064100 	call	6410 <__muldf3>
    a668:	1011883a 	mov	r8,r2
    a66c:	1813883a 	mov	r9,r3
    a670:	1029883a 	mov	r20,r2
    a674:	182b883a 	mov	r21,r3
    a678:	8001e526 	beq	r16,zero,ae10 <_dtoa_r+0x14a0>
    a67c:	05800084 	movi	r22,2
    a680:	04420034 	movhi	r17,2048
    a684:	8c414d04 	addi	r17,r17,1332
    a688:	8080004c 	andi	r2,r16,1
    a68c:	1005003a 	cmpeq	r2,r2,zero
    a690:	1000081e 	bne	r2,zero,a6b4 <_dtoa_r+0xd44>
    a694:	89800017 	ldw	r6,0(r17)
    a698:	89c00117 	ldw	r7,4(r17)
    a69c:	480b883a 	mov	r5,r9
    a6a0:	4009883a 	mov	r4,r8
    a6a4:	00064100 	call	6410 <__muldf3>
    a6a8:	1011883a 	mov	r8,r2
    a6ac:	b5800044 	addi	r22,r22,1
    a6b0:	1813883a 	mov	r9,r3
    a6b4:	8021d07a 	srai	r16,r16,1
    a6b8:	8c400204 	addi	r17,r17,8
    a6bc:	803ff21e 	bne	r16,zero,a688 <_dtoa_r+0xd18>
    a6c0:	4029883a 	mov	r20,r8
    a6c4:	482b883a 	mov	r21,r9
    a6c8:	003dca06 	br	9df4 <_dtoa_r+0x484>
    a6cc:	d9000817 	ldw	r4,32(sp)
    a6d0:	2005003a 	cmpeq	r2,r4,zero
    a6d4:	1001f61e 	bne	r2,zero,aeb0 <_dtoa_r+0x1540>
    a6d8:	dc001117 	ldw	r16,68(sp)
    a6dc:	dc801017 	ldw	r18,64(sp)
    a6e0:	18c10cc4 	addi	r3,r3,1075
    a6e4:	003f6106 	br	a46c <_dtoa_r+0xafc>
    a6e8:	d8000b15 	stw	zero,44(sp)
    a6ec:	d9802617 	ldw	r6,152(sp)
    a6f0:	d8c00d17 	ldw	r3,52(sp)
    a6f4:	30800044 	addi	r2,r6,1
    a6f8:	18ad883a 	add	r22,r3,r2
    a6fc:	b13fffc4 	addi	r4,r22,-1
    a700:	d9000e15 	stw	r4,56(sp)
    a704:	0581f60e 	bge	zero,r22,aee0 <_dtoa_r+0x1570>
    a708:	dd800f15 	stw	r22,60(sp)
    a70c:	003f3006 	br	a3d0 <_dtoa_r+0xa60>
    a710:	d8000b15 	stw	zero,44(sp)
    a714:	d9002617 	ldw	r4,152(sp)
    a718:	0101eb0e 	bge	zero,r4,aec8 <_dtoa_r+0x1558>
    a71c:	202d883a 	mov	r22,r4
    a720:	d9000e15 	stw	r4,56(sp)
    a724:	d9000f15 	stw	r4,60(sp)
    a728:	003f2906 	br	a3d0 <_dtoa_r+0xa60>
    a72c:	01800044 	movi	r6,1
    a730:	d9800b15 	stw	r6,44(sp)
    a734:	003ff706 	br	a714 <_dtoa_r+0xda4>
    a738:	01000044 	movi	r4,1
    a73c:	d9000b15 	stw	r4,44(sp)
    a740:	003fea06 	br	a6ec <_dtoa_r+0xd7c>
    a744:	04000c0e 	bge	zero,r16,a778 <_dtoa_r+0xe08>
    a748:	d9400717 	ldw	r5,28(sp)
    a74c:	d9001617 	ldw	r4,88(sp)
    a750:	01800044 	movi	r6,1
    a754:	000d3100 	call	d310 <__lshift>
    a758:	1009883a 	mov	r4,r2
    a75c:	900b883a 	mov	r5,r18
    a760:	d8800715 	stw	r2,28(sp)
    a764:	000cb280 	call	cb28 <__mcmp>
    a768:	0081e00e 	bge	zero,r2,aeec <_dtoa_r+0x157c>
    a76c:	bdc00044 	addi	r23,r23,1
    a770:	00800e84 	movi	r2,58
    a774:	b881a226 	beq	r23,r2,ae00 <_dtoa_r+0x1490>
    a778:	b7000044 	addi	fp,r22,1
    a77c:	b5c00005 	stb	r23,0(r22)
    a780:	003f7406 	br	a554 <_dtoa_r+0xbe4>
    a784:	00800e44 	movi	r2,57
    a788:	b8819d26 	beq	r23,r2,ae00 <_dtoa_r+0x1490>
    a78c:	053ffa0e 	bge	zero,r20,a778 <_dtoa_r+0xe08>
    a790:	8dc00c44 	addi	r23,r17,49
    a794:	003ff806 	br	a778 <_dtoa_r+0xe08>
    a798:	d9001617 	ldw	r4,88(sp)
    a79c:	a80b883a 	mov	r5,r21
    a7a0:	04000044 	movi	r16,1
    a7a4:	000c9cc0 	call	c9cc <_Bfree>
    a7a8:	003edf06 	br	a328 <_dtoa_r+0x9b8>
    a7ac:	d9001617 	ldw	r4,88(sp)
    a7b0:	980b883a 	mov	r5,r19
    a7b4:	01800284 	movi	r6,10
    a7b8:	000f883a 	mov	r7,zero
    a7bc:	000d6800 	call	d680 <__multadd>
    a7c0:	1027883a 	mov	r19,r2
    a7c4:	d8800615 	stw	r2,24(sp)
    a7c8:	003ebb06 	br	a2b8 <_dtoa_r+0x948>
    a7cc:	d9801117 	ldw	r6,68(sp)
    a7d0:	d8800d17 	ldw	r2,52(sp)
    a7d4:	d8000915 	stw	zero,36(sp)
    a7d8:	308dc83a 	sub	r6,r6,r2
    a7dc:	0087c83a 	sub	r3,zero,r2
    a7e0:	d9801115 	stw	r6,68(sp)
    a7e4:	d8c01015 	stw	r3,64(sp)
    a7e8:	003cfe06 	br	9be4 <_dtoa_r+0x274>
    a7ec:	018dc83a 	sub	r6,zero,r6
    a7f0:	d9801115 	stw	r6,68(sp)
    a7f4:	d8000a15 	stw	zero,40(sp)
    a7f8:	003cf306 	br	9bc8 <_dtoa_r+0x258>
    a7fc:	d9000d17 	ldw	r4,52(sp)
    a800:	0006ab40 	call	6ab4 <__floatsidf>
    a804:	880b883a 	mov	r5,r17
    a808:	8009883a 	mov	r4,r16
    a80c:	180f883a 	mov	r7,r3
    a810:	100d883a 	mov	r6,r2
    a814:	000f67c0 	call	f67c <__nedf2>
    a818:	103ce126 	beq	r2,zero,9ba0 <_dtoa_r+0x230>
    a81c:	d9800d17 	ldw	r6,52(sp)
    a820:	31bfffc4 	addi	r6,r6,-1
    a824:	d9800d15 	stw	r6,52(sp)
    a828:	003cdd06 	br	9ba0 <_dtoa_r+0x230>
    a82c:	d9000717 	ldw	r4,28(sp)
    a830:	900b883a 	mov	r5,r18
    a834:	000cb280 	call	cb28 <__mcmp>
    a838:	103e8d0e 	bge	r2,zero,a270 <_dtoa_r+0x900>
    a83c:	d9400717 	ldw	r5,28(sp)
    a840:	d9001617 	ldw	r4,88(sp)
    a844:	01800284 	movi	r6,10
    a848:	000f883a 	mov	r7,zero
    a84c:	000d6800 	call	d680 <__multadd>
    a850:	d9800d17 	ldw	r6,52(sp)
    a854:	d8800715 	stw	r2,28(sp)
    a858:	31bfffc4 	addi	r6,r6,-1
    a85c:	d9800d15 	stw	r6,52(sp)
    a860:	b001a71e 	bne	r22,zero,af00 <_dtoa_r+0x1590>
    a864:	d8800e17 	ldw	r2,56(sp)
    a868:	d8800f15 	stw	r2,60(sp)
    a86c:	003e8006 	br	a270 <_dtoa_r+0x900>
    a870:	90800417 	ldw	r2,16(r18)
    a874:	1085883a 	add	r2,r2,r2
    a878:	1085883a 	add	r2,r2,r2
    a87c:	1485883a 	add	r2,r2,r18
    a880:	11000417 	ldw	r4,16(r2)
    a884:	000c9f40 	call	c9f4 <__hi0bits>
    a888:	00c00804 	movi	r3,32
    a88c:	1887c83a 	sub	r3,r3,r2
    a890:	003e5a06 	br	a1fc <_dtoa_r+0x88c>
    a894:	d9400717 	ldw	r5,28(sp)
    a898:	d9801017 	ldw	r6,64(sp)
    a89c:	d9001617 	ldw	r4,88(sp)
    a8a0:	000d7800 	call	d780 <__pow5mult>
    a8a4:	d8800715 	stw	r2,28(sp)
    a8a8:	003e4306 	br	a1b8 <_dtoa_r+0x848>
    a8ac:	d9800f17 	ldw	r6,60(sp)
    a8b0:	d8800d17 	ldw	r2,52(sp)
    a8b4:	d9800315 	stw	r6,12(sp)
    a8b8:	d8800415 	stw	r2,16(sp)
    a8bc:	d8c00b17 	ldw	r3,44(sp)
    a8c0:	1805003a 	cmpeq	r2,r3,zero
    a8c4:	1000e21e 	bne	r2,zero,ac50 <_dtoa_r+0x12e0>
    a8c8:	d9000317 	ldw	r4,12(sp)
    a8cc:	0005883a 	mov	r2,zero
    a8d0:	00cff834 	movhi	r3,16352
    a8d4:	200c90fa 	slli	r6,r4,3
    a8d8:	01020034 	movhi	r4,2048
    a8dc:	21011b04 	addi	r4,r4,1132
    a8e0:	180b883a 	mov	r5,r3
    a8e4:	310d883a 	add	r6,r6,r4
    a8e8:	327fff17 	ldw	r9,-4(r6)
    a8ec:	323ffe17 	ldw	r8,-8(r6)
    a8f0:	1009883a 	mov	r4,r2
    a8f4:	480f883a 	mov	r7,r9
    a8f8:	400d883a 	mov	r6,r8
    a8fc:	00067d40 	call	67d4 <__divdf3>
    a900:	180b883a 	mov	r5,r3
    a904:	b00d883a 	mov	r6,r22
    a908:	b80f883a 	mov	r7,r23
    a90c:	1009883a 	mov	r4,r2
    a910:	000631c0 	call	631c <__subdf3>
    a914:	a80b883a 	mov	r5,r21
    a918:	a009883a 	mov	r4,r20
    a91c:	d8c01915 	stw	r3,100(sp)
    a920:	d8801815 	stw	r2,96(sp)
    a924:	0006bac0 	call	6bac <__fixdfsi>
    a928:	1009883a 	mov	r4,r2
    a92c:	1027883a 	mov	r19,r2
    a930:	0006ab40 	call	6ab4 <__floatsidf>
    a934:	a80b883a 	mov	r5,r21
    a938:	a009883a 	mov	r4,r20
    a93c:	180f883a 	mov	r7,r3
    a940:	100d883a 	mov	r6,r2
    a944:	000631c0 	call	631c <__subdf3>
    a948:	d9801817 	ldw	r6,96(sp)
    a94c:	1823883a 	mov	r17,r3
    a950:	d8801415 	stw	r2,80(sp)
    a954:	302d883a 	mov	r22,r6
    a958:	d9800517 	ldw	r6,20(sp)
    a95c:	9cc00c04 	addi	r19,r19,48
    a960:	dc401515 	stw	r17,84(sp)
    a964:	d8c01917 	ldw	r3,100(sp)
    a968:	34c00005 	stb	r19,0(r6)
    a96c:	d8800517 	ldw	r2,20(sp)
    a970:	d9401917 	ldw	r5,100(sp)
    a974:	d9801417 	ldw	r6,80(sp)
    a978:	b009883a 	mov	r4,r22
    a97c:	880f883a 	mov	r7,r17
    a980:	182f883a 	mov	r23,r3
    a984:	17000044 	addi	fp,r2,1
    a988:	0006a2c0 	call	6a2c <__gtdf2>
    a98c:	00804e16 	blt	zero,r2,aac8 <_dtoa_r+0x1158>
    a990:	d9801417 	ldw	r6,80(sp)
    a994:	0005883a 	mov	r2,zero
    a998:	00cffc34 	movhi	r3,16368
    a99c:	180b883a 	mov	r5,r3
    a9a0:	880f883a 	mov	r7,r17
    a9a4:	1009883a 	mov	r4,r2
    a9a8:	000631c0 	call	631c <__subdf3>
    a9ac:	d9401917 	ldw	r5,100(sp)
    a9b0:	180f883a 	mov	r7,r3
    a9b4:	b009883a 	mov	r4,r22
    a9b8:	100d883a 	mov	r6,r2
    a9bc:	0006a2c0 	call	6a2c <__gtdf2>
    a9c0:	00bda216 	blt	zero,r2,a04c <_dtoa_r+0x6dc>
    a9c4:	d8c00317 	ldw	r3,12(sp)
    a9c8:	00800044 	movi	r2,1
    a9cc:	10c01216 	blt	r2,r3,aa18 <_dtoa_r+0x10a8>
    a9d0:	003d4506 	br	9ee8 <_dtoa_r+0x578>
    a9d4:	d9801417 	ldw	r6,80(sp)
    a9d8:	0005883a 	mov	r2,zero
    a9dc:	00cffc34 	movhi	r3,16368
    a9e0:	180b883a 	mov	r5,r3
    a9e4:	880f883a 	mov	r7,r17
    a9e8:	1009883a 	mov	r4,r2
    a9ec:	000631c0 	call	631c <__subdf3>
    a9f0:	d9c01b17 	ldw	r7,108(sp)
    a9f4:	180b883a 	mov	r5,r3
    a9f8:	1009883a 	mov	r4,r2
    a9fc:	b00d883a 	mov	r6,r22
    aa00:	000f78c0 	call	f78c <__ltdf2>
    aa04:	103d9116 	blt	r2,zero,a04c <_dtoa_r+0x6dc>
    aa08:	d9800517 	ldw	r6,20(sp)
    aa0c:	d9000317 	ldw	r4,12(sp)
    aa10:	3105883a 	add	r2,r6,r4
    aa14:	e0bd3426 	beq	fp,r2,9ee8 <_dtoa_r+0x578>
    aa18:	04500934 	movhi	r17,16420
    aa1c:	0021883a 	mov	r16,zero
    aa20:	b80b883a 	mov	r5,r23
    aa24:	b009883a 	mov	r4,r22
    aa28:	800d883a 	mov	r6,r16
    aa2c:	880f883a 	mov	r7,r17
    aa30:	00064100 	call	6410 <__muldf3>
    aa34:	d9401517 	ldw	r5,84(sp)
    aa38:	d9001417 	ldw	r4,80(sp)
    aa3c:	880f883a 	mov	r7,r17
    aa40:	000d883a 	mov	r6,zero
    aa44:	d8801a15 	stw	r2,104(sp)
    aa48:	d8c01b15 	stw	r3,108(sp)
    aa4c:	00064100 	call	6410 <__muldf3>
    aa50:	180b883a 	mov	r5,r3
    aa54:	1009883a 	mov	r4,r2
    aa58:	1823883a 	mov	r17,r3
    aa5c:	1021883a 	mov	r16,r2
    aa60:	0006bac0 	call	6bac <__fixdfsi>
    aa64:	1009883a 	mov	r4,r2
    aa68:	102b883a 	mov	r21,r2
    aa6c:	0006ab40 	call	6ab4 <__floatsidf>
    aa70:	880b883a 	mov	r5,r17
    aa74:	8009883a 	mov	r4,r16
    aa78:	180f883a 	mov	r7,r3
    aa7c:	100d883a 	mov	r6,r2
    aa80:	000631c0 	call	631c <__subdf3>
    aa84:	1021883a 	mov	r16,r2
    aa88:	d9001b17 	ldw	r4,108(sp)
    aa8c:	1823883a 	mov	r17,r3
    aa90:	dc001415 	stw	r16,80(sp)
    aa94:	ad400c04 	addi	r21,r21,48
    aa98:	dc401515 	stw	r17,84(sp)
    aa9c:	d8801a17 	ldw	r2,104(sp)
    aaa0:	e5400005 	stb	r21,0(fp)
    aaa4:	202f883a 	mov	r23,r4
    aaa8:	d9c01b17 	ldw	r7,108(sp)
    aaac:	d9001417 	ldw	r4,80(sp)
    aab0:	880b883a 	mov	r5,r17
    aab4:	100d883a 	mov	r6,r2
    aab8:	102d883a 	mov	r22,r2
    aabc:	e7000044 	addi	fp,fp,1
    aac0:	000f78c0 	call	f78c <__ltdf2>
    aac4:	103fc30e 	bge	r2,zero,a9d4 <_dtoa_r+0x1064>
    aac8:	d9000417 	ldw	r4,16(sp)
    aacc:	d9000d15 	stw	r4,52(sp)
    aad0:	003d7106 	br	a098 <_dtoa_r+0x728>
    aad4:	d9801717 	ldw	r6,92(sp)
    aad8:	00800084 	movi	r2,2
    aadc:	11bde60e 	bge	r2,r6,a278 <_dtoa_r+0x908>
    aae0:	203cfb1e 	bne	r4,zero,9ed0 <_dtoa_r+0x560>
    aae4:	d9001617 	ldw	r4,88(sp)
    aae8:	900b883a 	mov	r5,r18
    aaec:	01800144 	movi	r6,5
    aaf0:	000f883a 	mov	r7,zero
    aaf4:	000d6800 	call	d680 <__multadd>
    aaf8:	d9000717 	ldw	r4,28(sp)
    aafc:	100b883a 	mov	r5,r2
    ab00:	1025883a 	mov	r18,r2
    ab04:	000cb280 	call	cb28 <__mcmp>
    ab08:	00bcf10e 	bge	zero,r2,9ed0 <_dtoa_r+0x560>
    ab0c:	d8c00d17 	ldw	r3,52(sp)
    ab10:	d9000517 	ldw	r4,20(sp)
    ab14:	d8000615 	stw	zero,24(sp)
    ab18:	18c00044 	addi	r3,r3,1
    ab1c:	d8c00d15 	stw	r3,52(sp)
    ab20:	00800c44 	movi	r2,49
    ab24:	27000044 	addi	fp,r4,1
    ab28:	20800005 	stb	r2,0(r4)
    ab2c:	003e8906 	br	a554 <_dtoa_r+0xbe4>
    ab30:	d8c00517 	ldw	r3,20(sp)
    ab34:	003bc206 	br	9a40 <_dtoa_r+0xd0>
    ab38:	01820034 	movhi	r6,2048
    ab3c:	31814d04 	addi	r6,r6,1332
    ab40:	30c00917 	ldw	r3,36(r6)
    ab44:	30800817 	ldw	r2,32(r6)
    ab48:	d9001217 	ldw	r4,72(sp)
    ab4c:	d9401317 	ldw	r5,76(sp)
    ab50:	180f883a 	mov	r7,r3
    ab54:	100d883a 	mov	r6,r2
    ab58:	00067d40 	call	67d4 <__divdf3>
    ab5c:	948003cc 	andi	r18,r18,15
    ab60:	058000c4 	movi	r22,3
    ab64:	1029883a 	mov	r20,r2
    ab68:	182b883a 	mov	r21,r3
    ab6c:	003c8906 	br	9d94 <_dtoa_r+0x424>
    ab70:	d9001017 	ldw	r4,64(sp)
    ab74:	d9800917 	ldw	r6,36(sp)
    ab78:	0025883a 	mov	r18,zero
    ab7c:	1105c83a 	sub	r2,r2,r4
    ab80:	2089883a 	add	r4,r4,r2
    ab84:	308d883a 	add	r6,r6,r2
    ab88:	d9001015 	stw	r4,64(sp)
    ab8c:	d9800915 	stw	r6,36(sp)
    ab90:	003e3206 	br	a45c <_dtoa_r+0xaec>
    ab94:	28800044 	addi	r2,r5,1
    ab98:	27000044 	addi	fp,r4,1
    ab9c:	20800005 	stb	r2,0(r4)
    aba0:	003e6c06 	br	a554 <_dtoa_r+0xbe4>
    aba4:	d8800f17 	ldw	r2,60(sp)
    aba8:	00bce016 	blt	zero,r2,9f2c <_dtoa_r+0x5bc>
    abac:	d9800f17 	ldw	r6,60(sp)
    abb0:	303cc51e 	bne	r6,zero,9ec8 <_dtoa_r+0x558>
    abb4:	0005883a 	mov	r2,zero
    abb8:	00d00534 	movhi	r3,16404
    abbc:	980b883a 	mov	r5,r19
    abc0:	180f883a 	mov	r7,r3
    abc4:	9009883a 	mov	r4,r18
    abc8:	100d883a 	mov	r6,r2
    abcc:	00064100 	call	6410 <__muldf3>
    abd0:	180b883a 	mov	r5,r3
    abd4:	a80f883a 	mov	r7,r21
    abd8:	1009883a 	mov	r4,r2
    abdc:	a00d883a 	mov	r6,r20
    abe0:	000f7040 	call	f704 <__gedf2>
    abe4:	103cb80e 	bge	r2,zero,9ec8 <_dtoa_r+0x558>
    abe8:	0027883a 	mov	r19,zero
    abec:	0025883a 	mov	r18,zero
    abf0:	003fc606 	br	ab0c <_dtoa_r+0x119c>
    abf4:	99400117 	ldw	r5,4(r19)
    abf8:	d9001617 	ldw	r4,88(sp)
    abfc:	000cf4c0 	call	cf4c <_Balloc>
    ac00:	99800417 	ldw	r6,16(r19)
    ac04:	11000304 	addi	r4,r2,12
    ac08:	99400304 	addi	r5,r19,12
    ac0c:	318d883a 	add	r6,r6,r6
    ac10:	318d883a 	add	r6,r6,r6
    ac14:	31800204 	addi	r6,r6,8
    ac18:	1023883a 	mov	r17,r2
    ac1c:	00073240 	call	7324 <memcpy>
    ac20:	d9001617 	ldw	r4,88(sp)
    ac24:	880b883a 	mov	r5,r17
    ac28:	01800044 	movi	r6,1
    ac2c:	000d3100 	call	d310 <__lshift>
    ac30:	100b883a 	mov	r5,r2
    ac34:	003d9c06 	br	a2a8 <_dtoa_r+0x938>
    ac38:	00800e44 	movi	r2,57
    ac3c:	b8807026 	beq	r23,r2,ae00 <_dtoa_r+0x1490>
    ac40:	b8800044 	addi	r2,r23,1
    ac44:	b7000044 	addi	fp,r22,1
    ac48:	b0800005 	stb	r2,0(r22)
    ac4c:	003e4106 	br	a554 <_dtoa_r+0xbe4>
    ac50:	d8800317 	ldw	r2,12(sp)
    ac54:	01820034 	movhi	r6,2048
    ac58:	31811b04 	addi	r6,r6,1132
    ac5c:	b009883a 	mov	r4,r22
    ac60:	100e90fa 	slli	r7,r2,3
    ac64:	b80b883a 	mov	r5,r23
    ac68:	398f883a 	add	r7,r7,r6
    ac6c:	38bffe17 	ldw	r2,-8(r7)
    ac70:	d9800517 	ldw	r6,20(sp)
    ac74:	38ffff17 	ldw	r3,-4(r7)
    ac78:	37000044 	addi	fp,r6,1
    ac7c:	180f883a 	mov	r7,r3
    ac80:	100d883a 	mov	r6,r2
    ac84:	00064100 	call	6410 <__muldf3>
    ac88:	a80b883a 	mov	r5,r21
    ac8c:	a009883a 	mov	r4,r20
    ac90:	182f883a 	mov	r23,r3
    ac94:	102d883a 	mov	r22,r2
    ac98:	0006bac0 	call	6bac <__fixdfsi>
    ac9c:	1009883a 	mov	r4,r2
    aca0:	1027883a 	mov	r19,r2
    aca4:	0006ab40 	call	6ab4 <__floatsidf>
    aca8:	a80b883a 	mov	r5,r21
    acac:	a009883a 	mov	r4,r20
    acb0:	180f883a 	mov	r7,r3
    acb4:	100d883a 	mov	r6,r2
    acb8:	000631c0 	call	631c <__subdf3>
    acbc:	180b883a 	mov	r5,r3
    acc0:	d8c00517 	ldw	r3,20(sp)
    acc4:	9cc00c04 	addi	r19,r19,48
    acc8:	1009883a 	mov	r4,r2
    accc:	1cc00005 	stb	r19,0(r3)
    acd0:	2021883a 	mov	r16,r4
    acd4:	d9000317 	ldw	r4,12(sp)
    acd8:	00800044 	movi	r2,1
    acdc:	2823883a 	mov	r17,r5
    ace0:	20802226 	beq	r4,r2,ad6c <_dtoa_r+0x13fc>
    ace4:	1029883a 	mov	r20,r2
    ace8:	0005883a 	mov	r2,zero
    acec:	00d00934 	movhi	r3,16420
    acf0:	180f883a 	mov	r7,r3
    acf4:	100d883a 	mov	r6,r2
    acf8:	880b883a 	mov	r5,r17
    acfc:	8009883a 	mov	r4,r16
    ad00:	00064100 	call	6410 <__muldf3>
    ad04:	180b883a 	mov	r5,r3
    ad08:	1009883a 	mov	r4,r2
    ad0c:	1823883a 	mov	r17,r3
    ad10:	1021883a 	mov	r16,r2
    ad14:	0006bac0 	call	6bac <__fixdfsi>
    ad18:	1009883a 	mov	r4,r2
    ad1c:	102b883a 	mov	r21,r2
    ad20:	0006ab40 	call	6ab4 <__floatsidf>
    ad24:	880b883a 	mov	r5,r17
    ad28:	8009883a 	mov	r4,r16
    ad2c:	180f883a 	mov	r7,r3
    ad30:	100d883a 	mov	r6,r2
    ad34:	000631c0 	call	631c <__subdf3>
    ad38:	180b883a 	mov	r5,r3
    ad3c:	d8c00517 	ldw	r3,20(sp)
    ad40:	1009883a 	mov	r4,r2
    ad44:	ad400c04 	addi	r21,r21,48
    ad48:	1d05883a 	add	r2,r3,r20
    ad4c:	15400005 	stb	r21,0(r2)
    ad50:	2021883a 	mov	r16,r4
    ad54:	d9000317 	ldw	r4,12(sp)
    ad58:	a5000044 	addi	r20,r20,1
    ad5c:	2823883a 	mov	r17,r5
    ad60:	a13fe11e 	bne	r20,r4,ace8 <_dtoa_r+0x1378>
    ad64:	e505883a 	add	r2,fp,r20
    ad68:	173fffc4 	addi	fp,r2,-1
    ad6c:	0025883a 	mov	r18,zero
    ad70:	04cff834 	movhi	r19,16352
    ad74:	b009883a 	mov	r4,r22
    ad78:	b80b883a 	mov	r5,r23
    ad7c:	900d883a 	mov	r6,r18
    ad80:	980f883a 	mov	r7,r19
    ad84:	000639c0 	call	639c <__adddf3>
    ad88:	180b883a 	mov	r5,r3
    ad8c:	1009883a 	mov	r4,r2
    ad90:	800d883a 	mov	r6,r16
    ad94:	880f883a 	mov	r7,r17
    ad98:	000f78c0 	call	f78c <__ltdf2>
    ad9c:	103cab16 	blt	r2,zero,a04c <_dtoa_r+0x6dc>
    ada0:	0009883a 	mov	r4,zero
    ada4:	980b883a 	mov	r5,r19
    ada8:	b80f883a 	mov	r7,r23
    adac:	b00d883a 	mov	r6,r22
    adb0:	000631c0 	call	631c <__subdf3>
    adb4:	180b883a 	mov	r5,r3
    adb8:	880f883a 	mov	r7,r17
    adbc:	1009883a 	mov	r4,r2
    adc0:	800d883a 	mov	r6,r16
    adc4:	0006a2c0 	call	6a2c <__gtdf2>
    adc8:	00bc470e 	bge	zero,r2,9ee8 <_dtoa_r+0x578>
    adcc:	00c00c04 	movi	r3,48
    add0:	e73fffc4 	addi	fp,fp,-1
    add4:	e0800007 	ldb	r2,0(fp)
    add8:	10fffd26 	beq	r2,r3,add0 <_dtoa_r+0x1460>
    addc:	d9800417 	ldw	r6,16(sp)
    ade0:	e7000044 	addi	fp,fp,1
    ade4:	d9800d15 	stw	r6,52(sp)
    ade8:	003cab06 	br	a098 <_dtoa_r+0x728>
    adec:	d8c00f17 	ldw	r3,60(sp)
    adf0:	d9001117 	ldw	r4,68(sp)
    adf4:	20e1c83a 	sub	r16,r4,r3
    adf8:	0007883a 	mov	r3,zero
    adfc:	003d9b06 	br	a46c <_dtoa_r+0xafc>
    ae00:	00800e44 	movi	r2,57
    ae04:	b0800005 	stb	r2,0(r22)
    ae08:	b5800044 	addi	r22,r22,1
    ae0c:	003dc106 	br	a514 <_dtoa_r+0xba4>
    ae10:	05800084 	movi	r22,2
    ae14:	003bf706 	br	9df4 <_dtoa_r+0x484>
    ae18:	d9000f17 	ldw	r4,60(sp)
    ae1c:	013c000e 	bge	zero,r4,9e20 <_dtoa_r+0x4b0>
    ae20:	d9800e17 	ldw	r6,56(sp)
    ae24:	01bc300e 	bge	zero,r6,9ee8 <_dtoa_r+0x578>
    ae28:	0005883a 	mov	r2,zero
    ae2c:	00d00934 	movhi	r3,16420
    ae30:	a80b883a 	mov	r5,r21
    ae34:	180f883a 	mov	r7,r3
    ae38:	a009883a 	mov	r4,r20
    ae3c:	100d883a 	mov	r6,r2
    ae40:	00064100 	call	6410 <__muldf3>
    ae44:	b1000044 	addi	r4,r22,1
    ae48:	1021883a 	mov	r16,r2
    ae4c:	1823883a 	mov	r17,r3
    ae50:	0006ab40 	call	6ab4 <__floatsidf>
    ae54:	880b883a 	mov	r5,r17
    ae58:	8009883a 	mov	r4,r16
    ae5c:	180f883a 	mov	r7,r3
    ae60:	100d883a 	mov	r6,r2
    ae64:	00064100 	call	6410 <__muldf3>
    ae68:	0011883a 	mov	r8,zero
    ae6c:	02500734 	movhi	r9,16412
    ae70:	180b883a 	mov	r5,r3
    ae74:	480f883a 	mov	r7,r9
    ae78:	1009883a 	mov	r4,r2
    ae7c:	400d883a 	mov	r6,r8
    ae80:	000639c0 	call	639c <__adddf3>
    ae84:	102d883a 	mov	r22,r2
    ae88:	00bf3034 	movhi	r2,64704
    ae8c:	10ef883a 	add	r23,r2,r3
    ae90:	d8800d17 	ldw	r2,52(sp)
    ae94:	d8c00e17 	ldw	r3,56(sp)
    ae98:	8029883a 	mov	r20,r16
    ae9c:	10bfffc4 	addi	r2,r2,-1
    aea0:	882b883a 	mov	r21,r17
    aea4:	d8800415 	stw	r2,16(sp)
    aea8:	d8c00315 	stw	r3,12(sp)
    aeac:	003e8306 	br	a8bc <_dtoa_r+0xf4c>
    aeb0:	d8800117 	ldw	r2,4(sp)
    aeb4:	dc001117 	ldw	r16,68(sp)
    aeb8:	dc801017 	ldw	r18,64(sp)
    aebc:	00c00d84 	movi	r3,54
    aec0:	1887c83a 	sub	r3,r3,r2
    aec4:	003d6906 	br	a46c <_dtoa_r+0xafc>
    aec8:	01800044 	movi	r6,1
    aecc:	3021883a 	mov	r16,r6
    aed0:	d9800f15 	stw	r6,60(sp)
    aed4:	d9802615 	stw	r6,152(sp)
    aed8:	d9800e15 	stw	r6,56(sp)
    aedc:	003b9306 	br	9d2c <_dtoa_r+0x3bc>
    aee0:	b021883a 	mov	r16,r22
    aee4:	dd800f15 	stw	r22,60(sp)
    aee8:	003b9006 	br	9d2c <_dtoa_r+0x3bc>
    aeec:	103e221e 	bne	r2,zero,a778 <_dtoa_r+0xe08>
    aef0:	b880004c 	andi	r2,r23,1
    aef4:	1005003a 	cmpeq	r2,r2,zero
    aef8:	103e1f1e 	bne	r2,zero,a778 <_dtoa_r+0xe08>
    aefc:	003e1b06 	br	a76c <_dtoa_r+0xdfc>
    af00:	d9001617 	ldw	r4,88(sp)
    af04:	980b883a 	mov	r5,r19
    af08:	01800284 	movi	r6,10
    af0c:	000f883a 	mov	r7,zero
    af10:	000d6800 	call	d680 <__multadd>
    af14:	d8c00e17 	ldw	r3,56(sp)
    af18:	1027883a 	mov	r19,r2
    af1c:	d8c00f15 	stw	r3,60(sp)
    af20:	003cd306 	br	a270 <_dtoa_r+0x900>

0000af24 <_fflush_r>:
    af24:	defffb04 	addi	sp,sp,-20
    af28:	dcc00315 	stw	r19,12(sp)
    af2c:	dc800215 	stw	r18,8(sp)
    af30:	dfc00415 	stw	ra,16(sp)
    af34:	dc400115 	stw	r17,4(sp)
    af38:	dc000015 	stw	r16,0(sp)
    af3c:	2027883a 	mov	r19,r4
    af40:	2825883a 	mov	r18,r5
    af44:	20000226 	beq	r4,zero,af50 <_fflush_r+0x2c>
    af48:	20800e17 	ldw	r2,56(r4)
    af4c:	10005626 	beq	r2,zero,b0a8 <_fflush_r+0x184>
    af50:	9100030b 	ldhu	r4,12(r18)
    af54:	20ffffcc 	andi	r3,r4,65535
    af58:	18e0001c 	xori	r3,r3,32768
    af5c:	18e00004 	addi	r3,r3,-32768
    af60:	1880020c 	andi	r2,r3,8
    af64:	1000261e 	bne	r2,zero,b000 <_fflush_r+0xdc>
    af68:	90c00117 	ldw	r3,4(r18)
    af6c:	20820014 	ori	r2,r4,2048
    af70:	9080030d 	sth	r2,12(r18)
    af74:	1009883a 	mov	r4,r2
    af78:	00c0400e 	bge	zero,r3,b07c <_fflush_r+0x158>
    af7c:	92000a17 	ldw	r8,40(r18)
    af80:	40004026 	beq	r8,zero,b084 <_fflush_r+0x160>
    af84:	2084000c 	andi	r2,r4,4096
    af88:	10005326 	beq	r2,zero,b0d8 <_fflush_r+0x1b4>
    af8c:	94001417 	ldw	r16,80(r18)
    af90:	9080030b 	ldhu	r2,12(r18)
    af94:	1080010c 	andi	r2,r2,4
    af98:	1000481e 	bne	r2,zero,b0bc <_fflush_r+0x198>
    af9c:	91400717 	ldw	r5,28(r18)
    afa0:	9809883a 	mov	r4,r19
    afa4:	800d883a 	mov	r6,r16
    afa8:	000f883a 	mov	r7,zero
    afac:	403ee83a 	callr	r8
    afb0:	8080261e 	bne	r16,r2,b04c <_fflush_r+0x128>
    afb4:	9080030b 	ldhu	r2,12(r18)
    afb8:	91000417 	ldw	r4,16(r18)
    afbc:	90000115 	stw	zero,4(r18)
    afc0:	10bdffcc 	andi	r2,r2,63487
    afc4:	10ffffcc 	andi	r3,r2,65535
    afc8:	18c4000c 	andi	r3,r3,4096
    afcc:	9080030d 	sth	r2,12(r18)
    afd0:	91000015 	stw	r4,0(r18)
    afd4:	18002b26 	beq	r3,zero,b084 <_fflush_r+0x160>
    afd8:	0007883a 	mov	r3,zero
    afdc:	1805883a 	mov	r2,r3
    afe0:	94001415 	stw	r16,80(r18)
    afe4:	dfc00417 	ldw	ra,16(sp)
    afe8:	dcc00317 	ldw	r19,12(sp)
    afec:	dc800217 	ldw	r18,8(sp)
    aff0:	dc400117 	ldw	r17,4(sp)
    aff4:	dc000017 	ldw	r16,0(sp)
    aff8:	dec00504 	addi	sp,sp,20
    affc:	f800283a 	ret
    b000:	94400417 	ldw	r17,16(r18)
    b004:	88001f26 	beq	r17,zero,b084 <_fflush_r+0x160>
    b008:	90800017 	ldw	r2,0(r18)
    b00c:	18c000cc 	andi	r3,r3,3
    b010:	94400015 	stw	r17,0(r18)
    b014:	1461c83a 	sub	r16,r2,r17
    b018:	18002526 	beq	r3,zero,b0b0 <_fflush_r+0x18c>
    b01c:	0005883a 	mov	r2,zero
    b020:	90800215 	stw	r2,8(r18)
    b024:	0400170e 	bge	zero,r16,b084 <_fflush_r+0x160>
    b028:	90c00917 	ldw	r3,36(r18)
    b02c:	91400717 	ldw	r5,28(r18)
    b030:	880d883a 	mov	r6,r17
    b034:	800f883a 	mov	r7,r16
    b038:	9809883a 	mov	r4,r19
    b03c:	183ee83a 	callr	r3
    b040:	88a3883a 	add	r17,r17,r2
    b044:	80a1c83a 	sub	r16,r16,r2
    b048:	00bff616 	blt	zero,r2,b024 <_fflush_r+0x100>
    b04c:	9080030b 	ldhu	r2,12(r18)
    b050:	00ffffc4 	movi	r3,-1
    b054:	10801014 	ori	r2,r2,64
    b058:	9080030d 	sth	r2,12(r18)
    b05c:	1805883a 	mov	r2,r3
    b060:	dfc00417 	ldw	ra,16(sp)
    b064:	dcc00317 	ldw	r19,12(sp)
    b068:	dc800217 	ldw	r18,8(sp)
    b06c:	dc400117 	ldw	r17,4(sp)
    b070:	dc000017 	ldw	r16,0(sp)
    b074:	dec00504 	addi	sp,sp,20
    b078:	f800283a 	ret
    b07c:	90800f17 	ldw	r2,60(r18)
    b080:	00bfbe16 	blt	zero,r2,af7c <_fflush_r+0x58>
    b084:	0007883a 	mov	r3,zero
    b088:	1805883a 	mov	r2,r3
    b08c:	dfc00417 	ldw	ra,16(sp)
    b090:	dcc00317 	ldw	r19,12(sp)
    b094:	dc800217 	ldw	r18,8(sp)
    b098:	dc400117 	ldw	r17,4(sp)
    b09c:	dc000017 	ldw	r16,0(sp)
    b0a0:	dec00504 	addi	sp,sp,20
    b0a4:	f800283a 	ret
    b0a8:	000b1bc0 	call	b1bc <__sinit>
    b0ac:	003fa806 	br	af50 <_fflush_r+0x2c>
    b0b0:	90800517 	ldw	r2,20(r18)
    b0b4:	90800215 	stw	r2,8(r18)
    b0b8:	003fda06 	br	b024 <_fflush_r+0x100>
    b0bc:	90800117 	ldw	r2,4(r18)
    b0c0:	90c00c17 	ldw	r3,48(r18)
    b0c4:	80a1c83a 	sub	r16,r16,r2
    b0c8:	183fb426 	beq	r3,zero,af9c <_fflush_r+0x78>
    b0cc:	90800f17 	ldw	r2,60(r18)
    b0d0:	80a1c83a 	sub	r16,r16,r2
    b0d4:	003fb106 	br	af9c <_fflush_r+0x78>
    b0d8:	91400717 	ldw	r5,28(r18)
    b0dc:	9809883a 	mov	r4,r19
    b0e0:	000d883a 	mov	r6,zero
    b0e4:	01c00044 	movi	r7,1
    b0e8:	403ee83a 	callr	r8
    b0ec:	1021883a 	mov	r16,r2
    b0f0:	00bfffc4 	movi	r2,-1
    b0f4:	80800226 	beq	r16,r2,b100 <_fflush_r+0x1dc>
    b0f8:	92000a17 	ldw	r8,40(r18)
    b0fc:	003fa406 	br	af90 <_fflush_r+0x6c>
    b100:	98c00017 	ldw	r3,0(r19)
    b104:	00800744 	movi	r2,29
    b108:	18bfde26 	beq	r3,r2,b084 <_fflush_r+0x160>
    b10c:	9080030b 	ldhu	r2,12(r18)
    b110:	8007883a 	mov	r3,r16
    b114:	10801014 	ori	r2,r2,64
    b118:	9080030d 	sth	r2,12(r18)
    b11c:	003fcf06 	br	b05c <_fflush_r+0x138>

0000b120 <fflush>:
    b120:	01400074 	movhi	r5,1
    b124:	296bc904 	addi	r5,r5,-20700
    b128:	2007883a 	mov	r3,r4
    b12c:	20000526 	beq	r4,zero,b144 <fflush+0x24>
    b130:	00820034 	movhi	r2,2048
    b134:	1089ba04 	addi	r2,r2,9960
    b138:	11000017 	ldw	r4,0(r2)
    b13c:	180b883a 	mov	r5,r3
    b140:	000af241 	jmpi	af24 <_fflush_r>
    b144:	00820034 	movhi	r2,2048
    b148:	1089bb04 	addi	r2,r2,9964
    b14c:	11000017 	ldw	r4,0(r2)
    b150:	000bcf01 	jmpi	bcf0 <_fwalk_reent>

0000b154 <std>:
    b154:	00800074 	movhi	r2,1
    b158:	10b8a004 	addi	r2,r2,-7552
    b15c:	20800b15 	stw	r2,44(r4)
    b160:	00800074 	movhi	r2,1
    b164:	10b8db04 	addi	r2,r2,-7316
    b168:	20800815 	stw	r2,32(r4)
    b16c:	00c00074 	movhi	r3,1
    b170:	18f8bc04 	addi	r3,r3,-7440
    b174:	00800074 	movhi	r2,1
    b178:	10b8a204 	addi	r2,r2,-7544
    b17c:	2140030d 	sth	r5,12(r4)
    b180:	2180038d 	sth	r6,14(r4)
    b184:	20c00915 	stw	r3,36(r4)
    b188:	20800a15 	stw	r2,40(r4)
    b18c:	20000015 	stw	zero,0(r4)
    b190:	20000115 	stw	zero,4(r4)
    b194:	20000215 	stw	zero,8(r4)
    b198:	20000415 	stw	zero,16(r4)
    b19c:	20000515 	stw	zero,20(r4)
    b1a0:	20000615 	stw	zero,24(r4)
    b1a4:	21000715 	stw	r4,28(r4)
    b1a8:	f800283a 	ret

0000b1ac <__sfp_lock_acquire>:
    b1ac:	f800283a 	ret

0000b1b0 <__sfp_lock_release>:
    b1b0:	f800283a 	ret

0000b1b4 <__sinit_lock_acquire>:
    b1b4:	f800283a 	ret

0000b1b8 <__sinit_lock_release>:
    b1b8:	f800283a 	ret

0000b1bc <__sinit>:
    b1bc:	20800e17 	ldw	r2,56(r4)
    b1c0:	defffd04 	addi	sp,sp,-12
    b1c4:	dc400115 	stw	r17,4(sp)
    b1c8:	dc000015 	stw	r16,0(sp)
    b1cc:	dfc00215 	stw	ra,8(sp)
    b1d0:	04400044 	movi	r17,1
    b1d4:	01400104 	movi	r5,4
    b1d8:	000d883a 	mov	r6,zero
    b1dc:	2021883a 	mov	r16,r4
    b1e0:	2200bb04 	addi	r8,r4,748
    b1e4:	200f883a 	mov	r7,r4
    b1e8:	10000526 	beq	r2,zero,b200 <__sinit+0x44>
    b1ec:	dfc00217 	ldw	ra,8(sp)
    b1f0:	dc400117 	ldw	r17,4(sp)
    b1f4:	dc000017 	ldw	r16,0(sp)
    b1f8:	dec00304 	addi	sp,sp,12
    b1fc:	f800283a 	ret
    b200:	21000117 	ldw	r4,4(r4)
    b204:	00800074 	movhi	r2,1
    b208:	10aca804 	addi	r2,r2,-19808
    b20c:	00c000c4 	movi	r3,3
    b210:	80800f15 	stw	r2,60(r16)
    b214:	80c0b915 	stw	r3,740(r16)
    b218:	8200ba15 	stw	r8,744(r16)
    b21c:	84400e15 	stw	r17,56(r16)
    b220:	8000b815 	stw	zero,736(r16)
    b224:	000b1540 	call	b154 <std>
    b228:	81000217 	ldw	r4,8(r16)
    b22c:	880d883a 	mov	r6,r17
    b230:	800f883a 	mov	r7,r16
    b234:	01400284 	movi	r5,10
    b238:	000b1540 	call	b154 <std>
    b23c:	81000317 	ldw	r4,12(r16)
    b240:	800f883a 	mov	r7,r16
    b244:	01400484 	movi	r5,18
    b248:	01800084 	movi	r6,2
    b24c:	dfc00217 	ldw	ra,8(sp)
    b250:	dc400117 	ldw	r17,4(sp)
    b254:	dc000017 	ldw	r16,0(sp)
    b258:	dec00304 	addi	sp,sp,12
    b25c:	000b1541 	jmpi	b154 <std>

0000b260 <__fp_lock>:
    b260:	0005883a 	mov	r2,zero
    b264:	f800283a 	ret

0000b268 <__fp_unlock>:
    b268:	0005883a 	mov	r2,zero
    b26c:	f800283a 	ret

0000b270 <__fp_unlock_all>:
    b270:	00820034 	movhi	r2,2048
    b274:	1089ba04 	addi	r2,r2,9960
    b278:	11000017 	ldw	r4,0(r2)
    b27c:	01400074 	movhi	r5,1
    b280:	296c9a04 	addi	r5,r5,-19864
    b284:	000bdb81 	jmpi	bdb8 <_fwalk>

0000b288 <__fp_lock_all>:
    b288:	00820034 	movhi	r2,2048
    b28c:	1089ba04 	addi	r2,r2,9960
    b290:	11000017 	ldw	r4,0(r2)
    b294:	01400074 	movhi	r5,1
    b298:	296c9804 	addi	r5,r5,-19872
    b29c:	000bdb81 	jmpi	bdb8 <_fwalk>

0000b2a0 <_cleanup_r>:
    b2a0:	01400074 	movhi	r5,1
    b2a4:	297a2004 	addi	r5,r5,-6016
    b2a8:	000bdb81 	jmpi	bdb8 <_fwalk>

0000b2ac <_cleanup>:
    b2ac:	00820034 	movhi	r2,2048
    b2b0:	1089bb04 	addi	r2,r2,9964
    b2b4:	11000017 	ldw	r4,0(r2)
    b2b8:	000b2a01 	jmpi	b2a0 <_cleanup_r>

0000b2bc <__sfmoreglue>:
    b2bc:	defffc04 	addi	sp,sp,-16
    b2c0:	dc400115 	stw	r17,4(sp)
    b2c4:	2c401724 	muli	r17,r5,92
    b2c8:	dc800215 	stw	r18,8(sp)
    b2cc:	2825883a 	mov	r18,r5
    b2d0:	89400304 	addi	r5,r17,12
    b2d4:	dc000015 	stw	r16,0(sp)
    b2d8:	dfc00315 	stw	ra,12(sp)
    b2dc:	000c0c80 	call	c0c8 <_malloc_r>
    b2e0:	0021883a 	mov	r16,zero
    b2e4:	880d883a 	mov	r6,r17
    b2e8:	000b883a 	mov	r5,zero
    b2ec:	10000626 	beq	r2,zero,b308 <__sfmoreglue+0x4c>
    b2f0:	11000304 	addi	r4,r2,12
    b2f4:	14800115 	stw	r18,4(r2)
    b2f8:	10000015 	stw	zero,0(r2)
    b2fc:	11000215 	stw	r4,8(r2)
    b300:	1021883a 	mov	r16,r2
    b304:	00073c40 	call	73c4 <memset>
    b308:	8005883a 	mov	r2,r16
    b30c:	dfc00317 	ldw	ra,12(sp)
    b310:	dc800217 	ldw	r18,8(sp)
    b314:	dc400117 	ldw	r17,4(sp)
    b318:	dc000017 	ldw	r16,0(sp)
    b31c:	dec00404 	addi	sp,sp,16
    b320:	f800283a 	ret

0000b324 <__sfp>:
    b324:	defffd04 	addi	sp,sp,-12
    b328:	00820034 	movhi	r2,2048
    b32c:	1089bb04 	addi	r2,r2,9964
    b330:	dc000015 	stw	r16,0(sp)
    b334:	14000017 	ldw	r16,0(r2)
    b338:	dc400115 	stw	r17,4(sp)
    b33c:	dfc00215 	stw	ra,8(sp)
    b340:	80800e17 	ldw	r2,56(r16)
    b344:	2023883a 	mov	r17,r4
    b348:	10002626 	beq	r2,zero,b3e4 <__sfp+0xc0>
    b34c:	8400b804 	addi	r16,r16,736
    b350:	80800117 	ldw	r2,4(r16)
    b354:	81000217 	ldw	r4,8(r16)
    b358:	10ffffc4 	addi	r3,r2,-1
    b35c:	18000916 	blt	r3,zero,b384 <__sfp+0x60>
    b360:	2080030f 	ldh	r2,12(r4)
    b364:	10000b26 	beq	r2,zero,b394 <__sfp+0x70>
    b368:	017fffc4 	movi	r5,-1
    b36c:	00000206 	br	b378 <__sfp+0x54>
    b370:	2080030f 	ldh	r2,12(r4)
    b374:	10000726 	beq	r2,zero,b394 <__sfp+0x70>
    b378:	18ffffc4 	addi	r3,r3,-1
    b37c:	21001704 	addi	r4,r4,92
    b380:	197ffb1e 	bne	r3,r5,b370 <__sfp+0x4c>
    b384:	80800017 	ldw	r2,0(r16)
    b388:	10001926 	beq	r2,zero,b3f0 <__sfp+0xcc>
    b38c:	1021883a 	mov	r16,r2
    b390:	003fef06 	br	b350 <__sfp+0x2c>
    b394:	00bfffc4 	movi	r2,-1
    b398:	00c00044 	movi	r3,1
    b39c:	2080038d 	sth	r2,14(r4)
    b3a0:	20c0030d 	sth	r3,12(r4)
    b3a4:	20000015 	stw	zero,0(r4)
    b3a8:	20000215 	stw	zero,8(r4)
    b3ac:	20000115 	stw	zero,4(r4)
    b3b0:	20000415 	stw	zero,16(r4)
    b3b4:	20000515 	stw	zero,20(r4)
    b3b8:	20000615 	stw	zero,24(r4)
    b3bc:	20000c15 	stw	zero,48(r4)
    b3c0:	20000d15 	stw	zero,52(r4)
    b3c4:	20001115 	stw	zero,68(r4)
    b3c8:	20001215 	stw	zero,72(r4)
    b3cc:	2005883a 	mov	r2,r4
    b3d0:	dfc00217 	ldw	ra,8(sp)
    b3d4:	dc400117 	ldw	r17,4(sp)
    b3d8:	dc000017 	ldw	r16,0(sp)
    b3dc:	dec00304 	addi	sp,sp,12
    b3e0:	f800283a 	ret
    b3e4:	8009883a 	mov	r4,r16
    b3e8:	000b1bc0 	call	b1bc <__sinit>
    b3ec:	003fd706 	br	b34c <__sfp+0x28>
    b3f0:	8809883a 	mov	r4,r17
    b3f4:	01400104 	movi	r5,4
    b3f8:	000b2bc0 	call	b2bc <__sfmoreglue>
    b3fc:	80800015 	stw	r2,0(r16)
    b400:	103fe21e 	bne	r2,zero,b38c <__sfp+0x68>
    b404:	00800304 	movi	r2,12
    b408:	0009883a 	mov	r4,zero
    b40c:	88800015 	stw	r2,0(r17)
    b410:	003fee06 	br	b3cc <__sfp+0xa8>

0000b414 <_malloc_trim_r>:
    b414:	defffb04 	addi	sp,sp,-20
    b418:	dcc00315 	stw	r19,12(sp)
    b41c:	04c20034 	movhi	r19,2048
    b420:	9cc34804 	addi	r19,r19,3360
    b424:	dc800215 	stw	r18,8(sp)
    b428:	dc400115 	stw	r17,4(sp)
    b42c:	dc000015 	stw	r16,0(sp)
    b430:	2823883a 	mov	r17,r5
    b434:	2025883a 	mov	r18,r4
    b438:	dfc00415 	stw	ra,16(sp)
    b43c:	001008c0 	call	1008c <__malloc_lock>
    b440:	98800217 	ldw	r2,8(r19)
    b444:	9009883a 	mov	r4,r18
    b448:	000b883a 	mov	r5,zero
    b44c:	10c00117 	ldw	r3,4(r2)
    b450:	00bfff04 	movi	r2,-4
    b454:	18a0703a 	and	r16,r3,r2
    b458:	8463c83a 	sub	r17,r16,r17
    b45c:	8c43fbc4 	addi	r17,r17,4079
    b460:	8822d33a 	srli	r17,r17,12
    b464:	0083ffc4 	movi	r2,4095
    b468:	8c7fffc4 	addi	r17,r17,-1
    b46c:	8822933a 	slli	r17,r17,12
    b470:	1440060e 	bge	r2,r17,b48c <_malloc_trim_r+0x78>
    b474:	000e2100 	call	e210 <_sbrk_r>
    b478:	98c00217 	ldw	r3,8(r19)
    b47c:	9009883a 	mov	r4,r18
    b480:	044bc83a 	sub	r5,zero,r17
    b484:	80c7883a 	add	r3,r16,r3
    b488:	10c00926 	beq	r2,r3,b4b0 <_malloc_trim_r+0x9c>
    b48c:	00100ac0 	call	100ac <__malloc_unlock>
    b490:	0005883a 	mov	r2,zero
    b494:	dfc00417 	ldw	ra,16(sp)
    b498:	dcc00317 	ldw	r19,12(sp)
    b49c:	dc800217 	ldw	r18,8(sp)
    b4a0:	dc400117 	ldw	r17,4(sp)
    b4a4:	dc000017 	ldw	r16,0(sp)
    b4a8:	dec00504 	addi	sp,sp,20
    b4ac:	f800283a 	ret
    b4b0:	9009883a 	mov	r4,r18
    b4b4:	000e2100 	call	e210 <_sbrk_r>
    b4b8:	844dc83a 	sub	r6,r16,r17
    b4bc:	00ffffc4 	movi	r3,-1
    b4c0:	9009883a 	mov	r4,r18
    b4c4:	000b883a 	mov	r5,zero
    b4c8:	01c20234 	movhi	r7,2056
    b4cc:	39fe6c04 	addi	r7,r7,-1616
    b4d0:	31800054 	ori	r6,r6,1
    b4d4:	10c00926 	beq	r2,r3,b4fc <_malloc_trim_r+0xe8>
    b4d8:	38800017 	ldw	r2,0(r7)
    b4dc:	98c00217 	ldw	r3,8(r19)
    b4e0:	9009883a 	mov	r4,r18
    b4e4:	1445c83a 	sub	r2,r2,r17
    b4e8:	38800015 	stw	r2,0(r7)
    b4ec:	19800115 	stw	r6,4(r3)
    b4f0:	00100ac0 	call	100ac <__malloc_unlock>
    b4f4:	00800044 	movi	r2,1
    b4f8:	003fe606 	br	b494 <_malloc_trim_r+0x80>
    b4fc:	000e2100 	call	e210 <_sbrk_r>
    b500:	99800217 	ldw	r6,8(r19)
    b504:	100f883a 	mov	r7,r2
    b508:	9009883a 	mov	r4,r18
    b50c:	1187c83a 	sub	r3,r2,r6
    b510:	008003c4 	movi	r2,15
    b514:	19400054 	ori	r5,r3,1
    b518:	10ffdc0e 	bge	r2,r3,b48c <_malloc_trim_r+0x78>
    b51c:	00820034 	movhi	r2,2048
    b520:	1089bf04 	addi	r2,r2,9980
    b524:	10c00017 	ldw	r3,0(r2)
    b528:	00820234 	movhi	r2,2056
    b52c:	10be6c04 	addi	r2,r2,-1616
    b530:	31400115 	stw	r5,4(r6)
    b534:	38c7c83a 	sub	r3,r7,r3
    b538:	10c00015 	stw	r3,0(r2)
    b53c:	003fd306 	br	b48c <_malloc_trim_r+0x78>

0000b540 <_free_r>:
    b540:	defffd04 	addi	sp,sp,-12
    b544:	dc400115 	stw	r17,4(sp)
    b548:	dc000015 	stw	r16,0(sp)
    b54c:	dfc00215 	stw	ra,8(sp)
    b550:	2821883a 	mov	r16,r5
    b554:	2023883a 	mov	r17,r4
    b558:	28005a26 	beq	r5,zero,b6c4 <_free_r+0x184>
    b55c:	001008c0 	call	1008c <__malloc_lock>
    b560:	823ffe04 	addi	r8,r16,-8
    b564:	41400117 	ldw	r5,4(r8)
    b568:	00bfff84 	movi	r2,-2
    b56c:	02820034 	movhi	r10,2048
    b570:	52834804 	addi	r10,r10,3360
    b574:	288e703a 	and	r7,r5,r2
    b578:	41cd883a 	add	r6,r8,r7
    b57c:	30c00117 	ldw	r3,4(r6)
    b580:	51000217 	ldw	r4,8(r10)
    b584:	00bfff04 	movi	r2,-4
    b588:	1892703a 	and	r9,r3,r2
    b58c:	5017883a 	mov	r11,r10
    b590:	31006726 	beq	r6,r4,b730 <_free_r+0x1f0>
    b594:	2880004c 	andi	r2,r5,1
    b598:	1005003a 	cmpeq	r2,r2,zero
    b59c:	32400115 	stw	r9,4(r6)
    b5a0:	10001a1e 	bne	r2,zero,b60c <_free_r+0xcc>
    b5a4:	000b883a 	mov	r5,zero
    b5a8:	3247883a 	add	r3,r6,r9
    b5ac:	18800117 	ldw	r2,4(r3)
    b5b0:	1080004c 	andi	r2,r2,1
    b5b4:	1000231e 	bne	r2,zero,b644 <_free_r+0x104>
    b5b8:	280ac03a 	cmpne	r5,r5,zero
    b5bc:	3a4f883a 	add	r7,r7,r9
    b5c0:	2800451e 	bne	r5,zero,b6d8 <_free_r+0x198>
    b5c4:	31000217 	ldw	r4,8(r6)
    b5c8:	00820034 	movhi	r2,2048
    b5cc:	10834a04 	addi	r2,r2,3368
    b5d0:	20807b26 	beq	r4,r2,b7c0 <_free_r+0x280>
    b5d4:	30800317 	ldw	r2,12(r6)
    b5d8:	3a07883a 	add	r3,r7,r8
    b5dc:	19c00015 	stw	r7,0(r3)
    b5e0:	11000215 	stw	r4,8(r2)
    b5e4:	20800315 	stw	r2,12(r4)
    b5e8:	38800054 	ori	r2,r7,1
    b5ec:	40800115 	stw	r2,4(r8)
    b5f0:	28001a26 	beq	r5,zero,b65c <_free_r+0x11c>
    b5f4:	8809883a 	mov	r4,r17
    b5f8:	dfc00217 	ldw	ra,8(sp)
    b5fc:	dc400117 	ldw	r17,4(sp)
    b600:	dc000017 	ldw	r16,0(sp)
    b604:	dec00304 	addi	sp,sp,12
    b608:	00100ac1 	jmpi	100ac <__malloc_unlock>
    b60c:	80bffe17 	ldw	r2,-8(r16)
    b610:	50c00204 	addi	r3,r10,8
    b614:	4091c83a 	sub	r8,r8,r2
    b618:	41000217 	ldw	r4,8(r8)
    b61c:	388f883a 	add	r7,r7,r2
    b620:	20c06126 	beq	r4,r3,b7a8 <_free_r+0x268>
    b624:	40800317 	ldw	r2,12(r8)
    b628:	3247883a 	add	r3,r6,r9
    b62c:	000b883a 	mov	r5,zero
    b630:	11000215 	stw	r4,8(r2)
    b634:	20800315 	stw	r2,12(r4)
    b638:	18800117 	ldw	r2,4(r3)
    b63c:	1080004c 	andi	r2,r2,1
    b640:	103fdd26 	beq	r2,zero,b5b8 <_free_r+0x78>
    b644:	38800054 	ori	r2,r7,1
    b648:	3a07883a 	add	r3,r7,r8
    b64c:	280ac03a 	cmpne	r5,r5,zero
    b650:	40800115 	stw	r2,4(r8)
    b654:	19c00015 	stw	r7,0(r3)
    b658:	283fe61e 	bne	r5,zero,b5f4 <_free_r+0xb4>
    b65c:	00807fc4 	movi	r2,511
    b660:	11c01f2e 	bgeu	r2,r7,b6e0 <_free_r+0x1a0>
    b664:	3806d27a 	srli	r3,r7,9
    b668:	1800481e 	bne	r3,zero,b78c <_free_r+0x24c>
    b66c:	3804d0fa 	srli	r2,r7,3
    b670:	100690fa 	slli	r3,r2,3
    b674:	1acd883a 	add	r6,r3,r11
    b678:	31400217 	ldw	r5,8(r6)
    b67c:	31405926 	beq	r6,r5,b7e4 <_free_r+0x2a4>
    b680:	28800117 	ldw	r2,4(r5)
    b684:	00ffff04 	movi	r3,-4
    b688:	10c4703a 	and	r2,r2,r3
    b68c:	3880022e 	bgeu	r7,r2,b698 <_free_r+0x158>
    b690:	29400217 	ldw	r5,8(r5)
    b694:	317ffa1e 	bne	r6,r5,b680 <_free_r+0x140>
    b698:	29800317 	ldw	r6,12(r5)
    b69c:	41800315 	stw	r6,12(r8)
    b6a0:	41400215 	stw	r5,8(r8)
    b6a4:	8809883a 	mov	r4,r17
    b6a8:	2a000315 	stw	r8,12(r5)
    b6ac:	32000215 	stw	r8,8(r6)
    b6b0:	dfc00217 	ldw	ra,8(sp)
    b6b4:	dc400117 	ldw	r17,4(sp)
    b6b8:	dc000017 	ldw	r16,0(sp)
    b6bc:	dec00304 	addi	sp,sp,12
    b6c0:	00100ac1 	jmpi	100ac <__malloc_unlock>
    b6c4:	dfc00217 	ldw	ra,8(sp)
    b6c8:	dc400117 	ldw	r17,4(sp)
    b6cc:	dc000017 	ldw	r16,0(sp)
    b6d0:	dec00304 	addi	sp,sp,12
    b6d4:	f800283a 	ret
    b6d8:	31000217 	ldw	r4,8(r6)
    b6dc:	003fbd06 	br	b5d4 <_free_r+0x94>
    b6e0:	3806d0fa 	srli	r3,r7,3
    b6e4:	00800044 	movi	r2,1
    b6e8:	51400117 	ldw	r5,4(r10)
    b6ec:	180890fa 	slli	r4,r3,3
    b6f0:	1807d0ba 	srai	r3,r3,2
    b6f4:	22c9883a 	add	r4,r4,r11
    b6f8:	21800217 	ldw	r6,8(r4)
    b6fc:	10c4983a 	sll	r2,r2,r3
    b700:	41000315 	stw	r4,12(r8)
    b704:	41800215 	stw	r6,8(r8)
    b708:	288ab03a 	or	r5,r5,r2
    b70c:	22000215 	stw	r8,8(r4)
    b710:	8809883a 	mov	r4,r17
    b714:	51400115 	stw	r5,4(r10)
    b718:	32000315 	stw	r8,12(r6)
    b71c:	dfc00217 	ldw	ra,8(sp)
    b720:	dc400117 	ldw	r17,4(sp)
    b724:	dc000017 	ldw	r16,0(sp)
    b728:	dec00304 	addi	sp,sp,12
    b72c:	00100ac1 	jmpi	100ac <__malloc_unlock>
    b730:	2880004c 	andi	r2,r5,1
    b734:	3a4d883a 	add	r6,r7,r9
    b738:	1000071e 	bne	r2,zero,b758 <_free_r+0x218>
    b73c:	80bffe17 	ldw	r2,-8(r16)
    b740:	4091c83a 	sub	r8,r8,r2
    b744:	41000317 	ldw	r4,12(r8)
    b748:	40c00217 	ldw	r3,8(r8)
    b74c:	308d883a 	add	r6,r6,r2
    b750:	20c00215 	stw	r3,8(r4)
    b754:	19000315 	stw	r4,12(r3)
    b758:	00820034 	movhi	r2,2048
    b75c:	1089be04 	addi	r2,r2,9976
    b760:	11000017 	ldw	r4,0(r2)
    b764:	30c00054 	ori	r3,r6,1
    b768:	52000215 	stw	r8,8(r10)
    b76c:	40c00115 	stw	r3,4(r8)
    b770:	313fa036 	bltu	r6,r4,b5f4 <_free_r+0xb4>
    b774:	00820034 	movhi	r2,2048
    b778:	1089ef04 	addi	r2,r2,10172
    b77c:	11400017 	ldw	r5,0(r2)
    b780:	8809883a 	mov	r4,r17
    b784:	000b4140 	call	b414 <_malloc_trim_r>
    b788:	003f9a06 	br	b5f4 <_free_r+0xb4>
    b78c:	00800104 	movi	r2,4
    b790:	10c0072e 	bgeu	r2,r3,b7b0 <_free_r+0x270>
    b794:	00800504 	movi	r2,20
    b798:	10c01936 	bltu	r2,r3,b800 <_free_r+0x2c0>
    b79c:	188016c4 	addi	r2,r3,91
    b7a0:	100690fa 	slli	r3,r2,3
    b7a4:	003fb306 	br	b674 <_free_r+0x134>
    b7a8:	01400044 	movi	r5,1
    b7ac:	003f7e06 	br	b5a8 <_free_r+0x68>
    b7b0:	3804d1ba 	srli	r2,r7,6
    b7b4:	10800e04 	addi	r2,r2,56
    b7b8:	100690fa 	slli	r3,r2,3
    b7bc:	003fad06 	br	b674 <_free_r+0x134>
    b7c0:	22000315 	stw	r8,12(r4)
    b7c4:	22000215 	stw	r8,8(r4)
    b7c8:	3a05883a 	add	r2,r7,r8
    b7cc:	38c00054 	ori	r3,r7,1
    b7d0:	11c00015 	stw	r7,0(r2)
    b7d4:	41000215 	stw	r4,8(r8)
    b7d8:	40c00115 	stw	r3,4(r8)
    b7dc:	41000315 	stw	r4,12(r8)
    b7e0:	003f8406 	br	b5f4 <_free_r+0xb4>
    b7e4:	1005d0ba 	srai	r2,r2,2
    b7e8:	00c00044 	movi	r3,1
    b7ec:	51000117 	ldw	r4,4(r10)
    b7f0:	1886983a 	sll	r3,r3,r2
    b7f4:	20c8b03a 	or	r4,r4,r3
    b7f8:	51000115 	stw	r4,4(r10)
    b7fc:	003fa706 	br	b69c <_free_r+0x15c>
    b800:	00801504 	movi	r2,84
    b804:	10c00436 	bltu	r2,r3,b818 <_free_r+0x2d8>
    b808:	3804d33a 	srli	r2,r7,12
    b80c:	10801b84 	addi	r2,r2,110
    b810:	100690fa 	slli	r3,r2,3
    b814:	003f9706 	br	b674 <_free_r+0x134>
    b818:	00805504 	movi	r2,340
    b81c:	10c00436 	bltu	r2,r3,b830 <_free_r+0x2f0>
    b820:	3804d3fa 	srli	r2,r7,15
    b824:	10801dc4 	addi	r2,r2,119
    b828:	100690fa 	slli	r3,r2,3
    b82c:	003f9106 	br	b674 <_free_r+0x134>
    b830:	00815504 	movi	r2,1364
    b834:	10c0032e 	bgeu	r2,r3,b844 <_free_r+0x304>
    b838:	00801f84 	movi	r2,126
    b83c:	00c0fc04 	movi	r3,1008
    b840:	003f8c06 	br	b674 <_free_r+0x134>
    b844:	3804d4ba 	srli	r2,r7,18
    b848:	10801f04 	addi	r2,r2,124
    b84c:	100690fa 	slli	r3,r2,3
    b850:	003f8806 	br	b674 <_free_r+0x134>

0000b854 <__sfvwrite_r>:
    b854:	30800217 	ldw	r2,8(r6)
    b858:	defff504 	addi	sp,sp,-44
    b85c:	df000915 	stw	fp,36(sp)
    b860:	dd800715 	stw	r22,28(sp)
    b864:	dc800315 	stw	r18,12(sp)
    b868:	dfc00a15 	stw	ra,40(sp)
    b86c:	ddc00815 	stw	r23,32(sp)
    b870:	dd400615 	stw	r21,24(sp)
    b874:	dd000515 	stw	r20,20(sp)
    b878:	dcc00415 	stw	r19,16(sp)
    b87c:	dc400215 	stw	r17,8(sp)
    b880:	dc000115 	stw	r16,4(sp)
    b884:	302d883a 	mov	r22,r6
    b888:	2039883a 	mov	fp,r4
    b88c:	2825883a 	mov	r18,r5
    b890:	10001c26 	beq	r2,zero,b904 <__sfvwrite_r+0xb0>
    b894:	29c0030b 	ldhu	r7,12(r5)
    b898:	3880020c 	andi	r2,r7,8
    b89c:	10002726 	beq	r2,zero,b93c <__sfvwrite_r+0xe8>
    b8a0:	28800417 	ldw	r2,16(r5)
    b8a4:	10002526 	beq	r2,zero,b93c <__sfvwrite_r+0xe8>
    b8a8:	3880008c 	andi	r2,r7,2
    b8ac:	b5400017 	ldw	r21,0(r22)
    b8b0:	10002826 	beq	r2,zero,b954 <__sfvwrite_r+0x100>
    b8b4:	0021883a 	mov	r16,zero
    b8b8:	0023883a 	mov	r17,zero
    b8bc:	880d883a 	mov	r6,r17
    b8c0:	e009883a 	mov	r4,fp
    b8c4:	00810004 	movi	r2,1024
    b8c8:	80006e26 	beq	r16,zero,ba84 <__sfvwrite_r+0x230>
    b8cc:	800f883a 	mov	r7,r16
    b8d0:	91400717 	ldw	r5,28(r18)
    b8d4:	1400012e 	bgeu	r2,r16,b8dc <__sfvwrite_r+0x88>
    b8d8:	100f883a 	mov	r7,r2
    b8dc:	90c00917 	ldw	r3,36(r18)
    b8e0:	183ee83a 	callr	r3
    b8e4:	1007883a 	mov	r3,r2
    b8e8:	80a1c83a 	sub	r16,r16,r2
    b8ec:	88a3883a 	add	r17,r17,r2
    b8f0:	00806d0e 	bge	zero,r2,baa8 <__sfvwrite_r+0x254>
    b8f4:	b0800217 	ldw	r2,8(r22)
    b8f8:	10c5c83a 	sub	r2,r2,r3
    b8fc:	b0800215 	stw	r2,8(r22)
    b900:	103fee1e 	bne	r2,zero,b8bc <__sfvwrite_r+0x68>
    b904:	0009883a 	mov	r4,zero
    b908:	2005883a 	mov	r2,r4
    b90c:	dfc00a17 	ldw	ra,40(sp)
    b910:	df000917 	ldw	fp,36(sp)
    b914:	ddc00817 	ldw	r23,32(sp)
    b918:	dd800717 	ldw	r22,28(sp)
    b91c:	dd400617 	ldw	r21,24(sp)
    b920:	dd000517 	ldw	r20,20(sp)
    b924:	dcc00417 	ldw	r19,16(sp)
    b928:	dc800317 	ldw	r18,12(sp)
    b92c:	dc400217 	ldw	r17,8(sp)
    b930:	dc000117 	ldw	r16,4(sp)
    b934:	dec00b04 	addi	sp,sp,44
    b938:	f800283a 	ret
    b93c:	000961c0 	call	961c <__swsetup_r>
    b940:	1000e41e 	bne	r2,zero,bcd4 <__sfvwrite_r+0x480>
    b944:	91c0030b 	ldhu	r7,12(r18)
    b948:	b5400017 	ldw	r21,0(r22)
    b94c:	3880008c 	andi	r2,r7,2
    b950:	103fd81e 	bne	r2,zero,b8b4 <__sfvwrite_r+0x60>
    b954:	3880004c 	andi	r2,r7,1
    b958:	1005003a 	cmpeq	r2,r2,zero
    b95c:	10005726 	beq	r2,zero,babc <__sfvwrite_r+0x268>
    b960:	0029883a 	mov	r20,zero
    b964:	002f883a 	mov	r23,zero
    b968:	a0004226 	beq	r20,zero,ba74 <__sfvwrite_r+0x220>
    b96c:	3880800c 	andi	r2,r7,512
    b970:	94000217 	ldw	r16,8(r18)
    b974:	10008b26 	beq	r2,zero,bba4 <__sfvwrite_r+0x350>
    b978:	800d883a 	mov	r6,r16
    b97c:	a400a536 	bltu	r20,r16,bc14 <__sfvwrite_r+0x3c0>
    b980:	3881200c 	andi	r2,r7,1152
    b984:	10002726 	beq	r2,zero,ba24 <__sfvwrite_r+0x1d0>
    b988:	90800517 	ldw	r2,20(r18)
    b98c:	92000417 	ldw	r8,16(r18)
    b990:	91400017 	ldw	r5,0(r18)
    b994:	1087883a 	add	r3,r2,r2
    b998:	1887883a 	add	r3,r3,r2
    b99c:	1808d7fa 	srli	r4,r3,31
    b9a0:	2a21c83a 	sub	r16,r5,r8
    b9a4:	80800044 	addi	r2,r16,1
    b9a8:	20c9883a 	add	r4,r4,r3
    b9ac:	2027d07a 	srai	r19,r4,1
    b9b0:	a085883a 	add	r2,r20,r2
    b9b4:	980d883a 	mov	r6,r19
    b9b8:	9880022e 	bgeu	r19,r2,b9c4 <__sfvwrite_r+0x170>
    b9bc:	1027883a 	mov	r19,r2
    b9c0:	100d883a 	mov	r6,r2
    b9c4:	3881000c 	andi	r2,r7,1024
    b9c8:	1000b826 	beq	r2,zero,bcac <__sfvwrite_r+0x458>
    b9cc:	300b883a 	mov	r5,r6
    b9d0:	e009883a 	mov	r4,fp
    b9d4:	000c0c80 	call	c0c8 <_malloc_r>
    b9d8:	10003126 	beq	r2,zero,baa0 <__sfvwrite_r+0x24c>
    b9dc:	91400417 	ldw	r5,16(r18)
    b9e0:	1009883a 	mov	r4,r2
    b9e4:	800d883a 	mov	r6,r16
    b9e8:	1023883a 	mov	r17,r2
    b9ec:	00073240 	call	7324 <memcpy>
    b9f0:	90c0030b 	ldhu	r3,12(r18)
    b9f4:	00beffc4 	movi	r2,-1025
    b9f8:	1886703a 	and	r3,r3,r2
    b9fc:	18c02014 	ori	r3,r3,128
    ba00:	90c0030d 	sth	r3,12(r18)
    ba04:	9c07c83a 	sub	r3,r19,r16
    ba08:	8c05883a 	add	r2,r17,r16
    ba0c:	a00d883a 	mov	r6,r20
    ba10:	a021883a 	mov	r16,r20
    ba14:	90800015 	stw	r2,0(r18)
    ba18:	90c00215 	stw	r3,8(r18)
    ba1c:	94400415 	stw	r17,16(r18)
    ba20:	94c00515 	stw	r19,20(r18)
    ba24:	91000017 	ldw	r4,0(r18)
    ba28:	b80b883a 	mov	r5,r23
    ba2c:	a023883a 	mov	r17,r20
    ba30:	000c8ec0 	call	c8ec <memmove>
    ba34:	90c00217 	ldw	r3,8(r18)
    ba38:	90800017 	ldw	r2,0(r18)
    ba3c:	a027883a 	mov	r19,r20
    ba40:	1c07c83a 	sub	r3,r3,r16
    ba44:	1405883a 	add	r2,r2,r16
    ba48:	90c00215 	stw	r3,8(r18)
    ba4c:	a021883a 	mov	r16,r20
    ba50:	90800015 	stw	r2,0(r18)
    ba54:	b0800217 	ldw	r2,8(r22)
    ba58:	1405c83a 	sub	r2,r2,r16
    ba5c:	b0800215 	stw	r2,8(r22)
    ba60:	103fa826 	beq	r2,zero,b904 <__sfvwrite_r+0xb0>
    ba64:	a469c83a 	sub	r20,r20,r17
    ba68:	91c0030b 	ldhu	r7,12(r18)
    ba6c:	bcef883a 	add	r23,r23,r19
    ba70:	a03fbe1e 	bne	r20,zero,b96c <__sfvwrite_r+0x118>
    ba74:	adc00017 	ldw	r23,0(r21)
    ba78:	ad000117 	ldw	r20,4(r21)
    ba7c:	ad400204 	addi	r21,r21,8
    ba80:	003fb906 	br	b968 <__sfvwrite_r+0x114>
    ba84:	ac400017 	ldw	r17,0(r21)
    ba88:	ac000117 	ldw	r16,4(r21)
    ba8c:	ad400204 	addi	r21,r21,8
    ba90:	003f8a06 	br	b8bc <__sfvwrite_r+0x68>
    ba94:	91400417 	ldw	r5,16(r18)
    ba98:	e009883a 	mov	r4,fp
    ba9c:	000b5400 	call	b540 <_free_r>
    baa0:	00800304 	movi	r2,12
    baa4:	e0800015 	stw	r2,0(fp)
    baa8:	9080030b 	ldhu	r2,12(r18)
    baac:	013fffc4 	movi	r4,-1
    bab0:	10801014 	ori	r2,r2,64
    bab4:	9080030d 	sth	r2,12(r18)
    bab8:	003f9306 	br	b908 <__sfvwrite_r+0xb4>
    babc:	0027883a 	mov	r19,zero
    bac0:	002f883a 	mov	r23,zero
    bac4:	d8000015 	stw	zero,0(sp)
    bac8:	0029883a 	mov	r20,zero
    bacc:	98001e26 	beq	r19,zero,bb48 <__sfvwrite_r+0x2f4>
    bad0:	d8c00017 	ldw	r3,0(sp)
    bad4:	1804c03a 	cmpne	r2,r3,zero
    bad8:	10005e26 	beq	r2,zero,bc54 <__sfvwrite_r+0x400>
    badc:	9821883a 	mov	r16,r19
    bae0:	a4c0012e 	bgeu	r20,r19,bae8 <__sfvwrite_r+0x294>
    bae4:	a021883a 	mov	r16,r20
    bae8:	91000017 	ldw	r4,0(r18)
    baec:	90800417 	ldw	r2,16(r18)
    baf0:	91800217 	ldw	r6,8(r18)
    baf4:	91c00517 	ldw	r7,20(r18)
    baf8:	1100022e 	bgeu	r2,r4,bb04 <__sfvwrite_r+0x2b0>
    bafc:	31e3883a 	add	r17,r6,r7
    bb00:	8c001616 	blt	r17,r16,bb5c <__sfvwrite_r+0x308>
    bb04:	81c03816 	blt	r16,r7,bbe8 <__sfvwrite_r+0x394>
    bb08:	90c00917 	ldw	r3,36(r18)
    bb0c:	91400717 	ldw	r5,28(r18)
    bb10:	e009883a 	mov	r4,fp
    bb14:	b80d883a 	mov	r6,r23
    bb18:	183ee83a 	callr	r3
    bb1c:	1023883a 	mov	r17,r2
    bb20:	00bfe10e 	bge	zero,r2,baa8 <__sfvwrite_r+0x254>
    bb24:	a469c83a 	sub	r20,r20,r17
    bb28:	a0001826 	beq	r20,zero,bb8c <__sfvwrite_r+0x338>
    bb2c:	b0800217 	ldw	r2,8(r22)
    bb30:	1445c83a 	sub	r2,r2,r17
    bb34:	b0800215 	stw	r2,8(r22)
    bb38:	103f7226 	beq	r2,zero,b904 <__sfvwrite_r+0xb0>
    bb3c:	9c67c83a 	sub	r19,r19,r17
    bb40:	bc6f883a 	add	r23,r23,r17
    bb44:	983fe21e 	bne	r19,zero,bad0 <__sfvwrite_r+0x27c>
    bb48:	adc00017 	ldw	r23,0(r21)
    bb4c:	acc00117 	ldw	r19,4(r21)
    bb50:	ad400204 	addi	r21,r21,8
    bb54:	d8000015 	stw	zero,0(sp)
    bb58:	003fdc06 	br	bacc <__sfvwrite_r+0x278>
    bb5c:	b80b883a 	mov	r5,r23
    bb60:	880d883a 	mov	r6,r17
    bb64:	000c8ec0 	call	c8ec <memmove>
    bb68:	90c00017 	ldw	r3,0(r18)
    bb6c:	e009883a 	mov	r4,fp
    bb70:	900b883a 	mov	r5,r18
    bb74:	1c47883a 	add	r3,r3,r17
    bb78:	90c00015 	stw	r3,0(r18)
    bb7c:	000af240 	call	af24 <_fflush_r>
    bb80:	103fc91e 	bne	r2,zero,baa8 <__sfvwrite_r+0x254>
    bb84:	a469c83a 	sub	r20,r20,r17
    bb88:	a03fe81e 	bne	r20,zero,bb2c <__sfvwrite_r+0x2d8>
    bb8c:	e009883a 	mov	r4,fp
    bb90:	900b883a 	mov	r5,r18
    bb94:	000af240 	call	af24 <_fflush_r>
    bb98:	103fc31e 	bne	r2,zero,baa8 <__sfvwrite_r+0x254>
    bb9c:	d8000015 	stw	zero,0(sp)
    bba0:	003fe206 	br	bb2c <__sfvwrite_r+0x2d8>
    bba4:	91000017 	ldw	r4,0(r18)
    bba8:	90800417 	ldw	r2,16(r18)
    bbac:	1100022e 	bgeu	r2,r4,bbb8 <__sfvwrite_r+0x364>
    bbb0:	8023883a 	mov	r17,r16
    bbb4:	85003136 	bltu	r16,r20,bc7c <__sfvwrite_r+0x428>
    bbb8:	91c00517 	ldw	r7,20(r18)
    bbbc:	a1c01836 	bltu	r20,r7,bc20 <__sfvwrite_r+0x3cc>
    bbc0:	90c00917 	ldw	r3,36(r18)
    bbc4:	91400717 	ldw	r5,28(r18)
    bbc8:	e009883a 	mov	r4,fp
    bbcc:	b80d883a 	mov	r6,r23
    bbd0:	183ee83a 	callr	r3
    bbd4:	1021883a 	mov	r16,r2
    bbd8:	00bfb30e 	bge	zero,r2,baa8 <__sfvwrite_r+0x254>
    bbdc:	1023883a 	mov	r17,r2
    bbe0:	1027883a 	mov	r19,r2
    bbe4:	003f9b06 	br	ba54 <__sfvwrite_r+0x200>
    bbe8:	b80b883a 	mov	r5,r23
    bbec:	800d883a 	mov	r6,r16
    bbf0:	000c8ec0 	call	c8ec <memmove>
    bbf4:	90c00217 	ldw	r3,8(r18)
    bbf8:	90800017 	ldw	r2,0(r18)
    bbfc:	8023883a 	mov	r17,r16
    bc00:	1c07c83a 	sub	r3,r3,r16
    bc04:	1405883a 	add	r2,r2,r16
    bc08:	90c00215 	stw	r3,8(r18)
    bc0c:	90800015 	stw	r2,0(r18)
    bc10:	003fc406 	br	bb24 <__sfvwrite_r+0x2d0>
    bc14:	a00d883a 	mov	r6,r20
    bc18:	a021883a 	mov	r16,r20
    bc1c:	003f8106 	br	ba24 <__sfvwrite_r+0x1d0>
    bc20:	b80b883a 	mov	r5,r23
    bc24:	a00d883a 	mov	r6,r20
    bc28:	000c8ec0 	call	c8ec <memmove>
    bc2c:	90c00217 	ldw	r3,8(r18)
    bc30:	90800017 	ldw	r2,0(r18)
    bc34:	a021883a 	mov	r16,r20
    bc38:	1d07c83a 	sub	r3,r3,r20
    bc3c:	1505883a 	add	r2,r2,r20
    bc40:	a023883a 	mov	r17,r20
    bc44:	a027883a 	mov	r19,r20
    bc48:	90c00215 	stw	r3,8(r18)
    bc4c:	90800015 	stw	r2,0(r18)
    bc50:	003f8006 	br	ba54 <__sfvwrite_r+0x200>
    bc54:	b809883a 	mov	r4,r23
    bc58:	01400284 	movi	r5,10
    bc5c:	980d883a 	mov	r6,r19
    bc60:	000c8080 	call	c808 <memchr>
    bc64:	10001726 	beq	r2,zero,bcc4 <__sfvwrite_r+0x470>
    bc68:	15c5c83a 	sub	r2,r2,r23
    bc6c:	15000044 	addi	r20,r2,1
    bc70:	00800044 	movi	r2,1
    bc74:	d8800015 	stw	r2,0(sp)
    bc78:	003f9806 	br	badc <__sfvwrite_r+0x288>
    bc7c:	b80b883a 	mov	r5,r23
    bc80:	800d883a 	mov	r6,r16
    bc84:	000c8ec0 	call	c8ec <memmove>
    bc88:	90c00017 	ldw	r3,0(r18)
    bc8c:	e009883a 	mov	r4,fp
    bc90:	900b883a 	mov	r5,r18
    bc94:	1c07883a 	add	r3,r3,r16
    bc98:	90c00015 	stw	r3,0(r18)
    bc9c:	8027883a 	mov	r19,r16
    bca0:	000af240 	call	af24 <_fflush_r>
    bca4:	103f6b26 	beq	r2,zero,ba54 <__sfvwrite_r+0x200>
    bca8:	003f7f06 	br	baa8 <__sfvwrite_r+0x254>
    bcac:	400b883a 	mov	r5,r8
    bcb0:	e009883a 	mov	r4,fp
    bcb4:	000dbac0 	call	dbac <_realloc_r>
    bcb8:	103f7626 	beq	r2,zero,ba94 <__sfvwrite_r+0x240>
    bcbc:	1023883a 	mov	r17,r2
    bcc0:	003f5006 	br	ba04 <__sfvwrite_r+0x1b0>
    bcc4:	00c00044 	movi	r3,1
    bcc8:	9d000044 	addi	r20,r19,1
    bccc:	d8c00015 	stw	r3,0(sp)
    bcd0:	003f8206 	br	badc <__sfvwrite_r+0x288>
    bcd4:	9080030b 	ldhu	r2,12(r18)
    bcd8:	00c00244 	movi	r3,9
    bcdc:	013fffc4 	movi	r4,-1
    bce0:	10801014 	ori	r2,r2,64
    bce4:	9080030d 	sth	r2,12(r18)
    bce8:	e0c00015 	stw	r3,0(fp)
    bcec:	003f0606 	br	b908 <__sfvwrite_r+0xb4>

0000bcf0 <_fwalk_reent>:
    bcf0:	defff704 	addi	sp,sp,-36
    bcf4:	dcc00315 	stw	r19,12(sp)
    bcf8:	24c0b804 	addi	r19,r4,736
    bcfc:	dd800615 	stw	r22,24(sp)
    bd00:	dd400515 	stw	r21,20(sp)
    bd04:	dfc00815 	stw	ra,32(sp)
    bd08:	ddc00715 	stw	r23,28(sp)
    bd0c:	dd000415 	stw	r20,16(sp)
    bd10:	dc800215 	stw	r18,8(sp)
    bd14:	dc400115 	stw	r17,4(sp)
    bd18:	dc000015 	stw	r16,0(sp)
    bd1c:	202b883a 	mov	r21,r4
    bd20:	282d883a 	mov	r22,r5
    bd24:	000b1ac0 	call	b1ac <__sfp_lock_acquire>
    bd28:	98002126 	beq	r19,zero,bdb0 <_fwalk_reent+0xc0>
    bd2c:	002f883a 	mov	r23,zero
    bd30:	9c800117 	ldw	r18,4(r19)
    bd34:	9c000217 	ldw	r16,8(r19)
    bd38:	90bfffc4 	addi	r2,r18,-1
    bd3c:	10000d16 	blt	r2,zero,bd74 <_fwalk_reent+0x84>
    bd40:	0023883a 	mov	r17,zero
    bd44:	053fffc4 	movi	r20,-1
    bd48:	8080030f 	ldh	r2,12(r16)
    bd4c:	8c400044 	addi	r17,r17,1
    bd50:	10000626 	beq	r2,zero,bd6c <_fwalk_reent+0x7c>
    bd54:	8080038f 	ldh	r2,14(r16)
    bd58:	800b883a 	mov	r5,r16
    bd5c:	a809883a 	mov	r4,r21
    bd60:	15000226 	beq	r2,r20,bd6c <_fwalk_reent+0x7c>
    bd64:	b03ee83a 	callr	r22
    bd68:	b8aeb03a 	or	r23,r23,r2
    bd6c:	84001704 	addi	r16,r16,92
    bd70:	947ff51e 	bne	r18,r17,bd48 <_fwalk_reent+0x58>
    bd74:	9cc00017 	ldw	r19,0(r19)
    bd78:	983fed1e 	bne	r19,zero,bd30 <_fwalk_reent+0x40>
    bd7c:	000b1b00 	call	b1b0 <__sfp_lock_release>
    bd80:	b805883a 	mov	r2,r23
    bd84:	dfc00817 	ldw	ra,32(sp)
    bd88:	ddc00717 	ldw	r23,28(sp)
    bd8c:	dd800617 	ldw	r22,24(sp)
    bd90:	dd400517 	ldw	r21,20(sp)
    bd94:	dd000417 	ldw	r20,16(sp)
    bd98:	dcc00317 	ldw	r19,12(sp)
    bd9c:	dc800217 	ldw	r18,8(sp)
    bda0:	dc400117 	ldw	r17,4(sp)
    bda4:	dc000017 	ldw	r16,0(sp)
    bda8:	dec00904 	addi	sp,sp,36
    bdac:	f800283a 	ret
    bdb0:	002f883a 	mov	r23,zero
    bdb4:	003ff106 	br	bd7c <_fwalk_reent+0x8c>

0000bdb8 <_fwalk>:
    bdb8:	defff804 	addi	sp,sp,-32
    bdbc:	dcc00315 	stw	r19,12(sp)
    bdc0:	24c0b804 	addi	r19,r4,736
    bdc4:	dd400515 	stw	r21,20(sp)
    bdc8:	dfc00715 	stw	ra,28(sp)
    bdcc:	dd800615 	stw	r22,24(sp)
    bdd0:	dd000415 	stw	r20,16(sp)
    bdd4:	dc800215 	stw	r18,8(sp)
    bdd8:	dc400115 	stw	r17,4(sp)
    bddc:	dc000015 	stw	r16,0(sp)
    bde0:	282b883a 	mov	r21,r5
    bde4:	000b1ac0 	call	b1ac <__sfp_lock_acquire>
    bde8:	98001f26 	beq	r19,zero,be68 <_fwalk+0xb0>
    bdec:	002d883a 	mov	r22,zero
    bdf0:	9c800117 	ldw	r18,4(r19)
    bdf4:	9c000217 	ldw	r16,8(r19)
    bdf8:	90bfffc4 	addi	r2,r18,-1
    bdfc:	10000c16 	blt	r2,zero,be30 <_fwalk+0x78>
    be00:	0023883a 	mov	r17,zero
    be04:	053fffc4 	movi	r20,-1
    be08:	8080030f 	ldh	r2,12(r16)
    be0c:	8c400044 	addi	r17,r17,1
    be10:	10000526 	beq	r2,zero,be28 <_fwalk+0x70>
    be14:	8080038f 	ldh	r2,14(r16)
    be18:	8009883a 	mov	r4,r16
    be1c:	15000226 	beq	r2,r20,be28 <_fwalk+0x70>
    be20:	a83ee83a 	callr	r21
    be24:	b0acb03a 	or	r22,r22,r2
    be28:	84001704 	addi	r16,r16,92
    be2c:	947ff61e 	bne	r18,r17,be08 <_fwalk+0x50>
    be30:	9cc00017 	ldw	r19,0(r19)
    be34:	983fee1e 	bne	r19,zero,bdf0 <_fwalk+0x38>
    be38:	000b1b00 	call	b1b0 <__sfp_lock_release>
    be3c:	b005883a 	mov	r2,r22
    be40:	dfc00717 	ldw	ra,28(sp)
    be44:	dd800617 	ldw	r22,24(sp)
    be48:	dd400517 	ldw	r21,20(sp)
    be4c:	dd000417 	ldw	r20,16(sp)
    be50:	dcc00317 	ldw	r19,12(sp)
    be54:	dc800217 	ldw	r18,8(sp)
    be58:	dc400117 	ldw	r17,4(sp)
    be5c:	dc000017 	ldw	r16,0(sp)
    be60:	dec00804 	addi	sp,sp,32
    be64:	f800283a 	ret
    be68:	002d883a 	mov	r22,zero
    be6c:	003ff206 	br	be38 <_fwalk+0x80>

0000be70 <__locale_charset>:
    be70:	d0a00d17 	ldw	r2,-32716(gp)
    be74:	f800283a 	ret

0000be78 <_localeconv_r>:
    be78:	00820034 	movhi	r2,2048
    be7c:	10810f04 	addi	r2,r2,1084
    be80:	f800283a 	ret

0000be84 <localeconv>:
    be84:	00820034 	movhi	r2,2048
    be88:	1089ba04 	addi	r2,r2,9960
    be8c:	11000017 	ldw	r4,0(r2)
    be90:	000be781 	jmpi	be78 <_localeconv_r>

0000be94 <_setlocale_r>:
    be94:	defffc04 	addi	sp,sp,-16
    be98:	00c20034 	movhi	r3,2048
    be9c:	18c10a04 	addi	r3,r3,1064
    bea0:	dc800215 	stw	r18,8(sp)
    bea4:	dc400115 	stw	r17,4(sp)
    bea8:	dc000015 	stw	r16,0(sp)
    beac:	2023883a 	mov	r17,r4
    beb0:	2825883a 	mov	r18,r5
    beb4:	dfc00315 	stw	ra,12(sp)
    beb8:	3021883a 	mov	r16,r6
    bebc:	3009883a 	mov	r4,r6
    bec0:	180b883a 	mov	r5,r3
    bec4:	30000926 	beq	r6,zero,beec <_setlocale_r+0x58>
    bec8:	000e3cc0 	call	e3cc <strcmp>
    becc:	8009883a 	mov	r4,r16
    bed0:	01420034 	movhi	r5,2048
    bed4:	2940f504 	addi	r5,r5,980
    bed8:	10000b1e 	bne	r2,zero,bf08 <_setlocale_r+0x74>
    bedc:	8c000d15 	stw	r16,52(r17)
    bee0:	8c800c15 	stw	r18,48(r17)
    bee4:	00c20034 	movhi	r3,2048
    bee8:	18c10a04 	addi	r3,r3,1064
    beec:	1805883a 	mov	r2,r3
    bef0:	dfc00317 	ldw	ra,12(sp)
    bef4:	dc800217 	ldw	r18,8(sp)
    bef8:	dc400117 	ldw	r17,4(sp)
    befc:	dc000017 	ldw	r16,0(sp)
    bf00:	dec00404 	addi	sp,sp,16
    bf04:	f800283a 	ret
    bf08:	000e3cc0 	call	e3cc <strcmp>
    bf0c:	0007883a 	mov	r3,zero
    bf10:	103ff226 	beq	r2,zero,bedc <_setlocale_r+0x48>
    bf14:	003ff506 	br	beec <_setlocale_r+0x58>

0000bf18 <setlocale>:
    bf18:	01820034 	movhi	r6,2048
    bf1c:	3189ba04 	addi	r6,r6,9960
    bf20:	2007883a 	mov	r3,r4
    bf24:	31000017 	ldw	r4,0(r6)
    bf28:	280d883a 	mov	r6,r5
    bf2c:	180b883a 	mov	r5,r3
    bf30:	000be941 	jmpi	be94 <_setlocale_r>

0000bf34 <__smakebuf_r>:
    bf34:	2880030b 	ldhu	r2,12(r5)
    bf38:	deffed04 	addi	sp,sp,-76
    bf3c:	dc401015 	stw	r17,64(sp)
    bf40:	1080008c 	andi	r2,r2,2
    bf44:	dc000f15 	stw	r16,60(sp)
    bf48:	dfc01215 	stw	ra,72(sp)
    bf4c:	dc801115 	stw	r18,68(sp)
    bf50:	2821883a 	mov	r16,r5
    bf54:	2023883a 	mov	r17,r4
    bf58:	10000b26 	beq	r2,zero,bf88 <__smakebuf_r+0x54>
    bf5c:	28c010c4 	addi	r3,r5,67
    bf60:	00800044 	movi	r2,1
    bf64:	28800515 	stw	r2,20(r5)
    bf68:	28c00415 	stw	r3,16(r5)
    bf6c:	28c00015 	stw	r3,0(r5)
    bf70:	dfc01217 	ldw	ra,72(sp)
    bf74:	dc801117 	ldw	r18,68(sp)
    bf78:	dc401017 	ldw	r17,64(sp)
    bf7c:	dc000f17 	ldw	r16,60(sp)
    bf80:	dec01304 	addi	sp,sp,76
    bf84:	f800283a 	ret
    bf88:	2940038f 	ldh	r5,14(r5)
    bf8c:	28002116 	blt	r5,zero,c014 <__smakebuf_r+0xe0>
    bf90:	d80d883a 	mov	r6,sp
    bf94:	000e8940 	call	e894 <_fstat_r>
    bf98:	10001e16 	blt	r2,zero,c014 <__smakebuf_r+0xe0>
    bf9c:	d8800117 	ldw	r2,4(sp)
    bfa0:	00e00014 	movui	r3,32768
    bfa4:	113c000c 	andi	r4,r2,61440
    bfa8:	20c03126 	beq	r4,r3,c070 <__smakebuf_r+0x13c>
    bfac:	8080030b 	ldhu	r2,12(r16)
    bfb0:	00c80004 	movi	r3,8192
    bfb4:	10820014 	ori	r2,r2,2048
    bfb8:	8080030d 	sth	r2,12(r16)
    bfbc:	20c01e26 	beq	r4,r3,c038 <__smakebuf_r+0x104>
    bfc0:	04810004 	movi	r18,1024
    bfc4:	8809883a 	mov	r4,r17
    bfc8:	900b883a 	mov	r5,r18
    bfcc:	000c0c80 	call	c0c8 <_malloc_r>
    bfd0:	1009883a 	mov	r4,r2
    bfd4:	10003126 	beq	r2,zero,c09c <__smakebuf_r+0x168>
    bfd8:	80c0030b 	ldhu	r3,12(r16)
    bfdc:	00800074 	movhi	r2,1
    bfe0:	10aca804 	addi	r2,r2,-19808
    bfe4:	88800f15 	stw	r2,60(r17)
    bfe8:	18c02014 	ori	r3,r3,128
    bfec:	84800515 	stw	r18,20(r16)
    bff0:	80c0030d 	sth	r3,12(r16)
    bff4:	81000415 	stw	r4,16(r16)
    bff8:	81000015 	stw	r4,0(r16)
    bffc:	dfc01217 	ldw	ra,72(sp)
    c000:	dc801117 	ldw	r18,68(sp)
    c004:	dc401017 	ldw	r17,64(sp)
    c008:	dc000f17 	ldw	r16,60(sp)
    c00c:	dec01304 	addi	sp,sp,76
    c010:	f800283a 	ret
    c014:	80c0030b 	ldhu	r3,12(r16)
    c018:	1880200c 	andi	r2,r3,128
    c01c:	10000426 	beq	r2,zero,c030 <__smakebuf_r+0xfc>
    c020:	04801004 	movi	r18,64
    c024:	18820014 	ori	r2,r3,2048
    c028:	8080030d 	sth	r2,12(r16)
    c02c:	003fe506 	br	bfc4 <__smakebuf_r+0x90>
    c030:	04810004 	movi	r18,1024
    c034:	003ffb06 	br	c024 <__smakebuf_r+0xf0>
    c038:	8140038f 	ldh	r5,14(r16)
    c03c:	8809883a 	mov	r4,r17
    c040:	000e9080 	call	e908 <_isatty_r>
    c044:	103fde26 	beq	r2,zero,bfc0 <__smakebuf_r+0x8c>
    c048:	8080030b 	ldhu	r2,12(r16)
    c04c:	80c010c4 	addi	r3,r16,67
    c050:	04810004 	movi	r18,1024
    c054:	10800054 	ori	r2,r2,1
    c058:	8080030d 	sth	r2,12(r16)
    c05c:	00800044 	movi	r2,1
    c060:	80c00415 	stw	r3,16(r16)
    c064:	80800515 	stw	r2,20(r16)
    c068:	80c00015 	stw	r3,0(r16)
    c06c:	003fd506 	br	bfc4 <__smakebuf_r+0x90>
    c070:	80c00a17 	ldw	r3,40(r16)
    c074:	00800074 	movhi	r2,1
    c078:	10b8a204 	addi	r2,r2,-7544
    c07c:	18bfcb1e 	bne	r3,r2,bfac <__smakebuf_r+0x78>
    c080:	8080030b 	ldhu	r2,12(r16)
    c084:	00c10004 	movi	r3,1024
    c088:	1825883a 	mov	r18,r3
    c08c:	10c4b03a 	or	r2,r2,r3
    c090:	8080030d 	sth	r2,12(r16)
    c094:	80c01315 	stw	r3,76(r16)
    c098:	003fca06 	br	bfc4 <__smakebuf_r+0x90>
    c09c:	8100030b 	ldhu	r4,12(r16)
    c0a0:	2080800c 	andi	r2,r4,512
    c0a4:	103fb21e 	bne	r2,zero,bf70 <__smakebuf_r+0x3c>
    c0a8:	80c010c4 	addi	r3,r16,67
    c0ac:	21000094 	ori	r4,r4,2
    c0b0:	00800044 	movi	r2,1
    c0b4:	80800515 	stw	r2,20(r16)
    c0b8:	8100030d 	sth	r4,12(r16)
    c0bc:	80c00415 	stw	r3,16(r16)
    c0c0:	80c00015 	stw	r3,0(r16)
    c0c4:	003faa06 	br	bf70 <__smakebuf_r+0x3c>

0000c0c8 <_malloc_r>:
    c0c8:	defff604 	addi	sp,sp,-40
    c0cc:	28c002c4 	addi	r3,r5,11
    c0d0:	00800584 	movi	r2,22
    c0d4:	dc800215 	stw	r18,8(sp)
    c0d8:	dfc00915 	stw	ra,36(sp)
    c0dc:	df000815 	stw	fp,32(sp)
    c0e0:	ddc00715 	stw	r23,28(sp)
    c0e4:	dd800615 	stw	r22,24(sp)
    c0e8:	dd400515 	stw	r21,20(sp)
    c0ec:	dd000415 	stw	r20,16(sp)
    c0f0:	dcc00315 	stw	r19,12(sp)
    c0f4:	dc400115 	stw	r17,4(sp)
    c0f8:	dc000015 	stw	r16,0(sp)
    c0fc:	2025883a 	mov	r18,r4
    c100:	10c01236 	bltu	r2,r3,c14c <_malloc_r+0x84>
    c104:	04400404 	movi	r17,16
    c108:	8940142e 	bgeu	r17,r5,c15c <_malloc_r+0x94>
    c10c:	00800304 	movi	r2,12
    c110:	0007883a 	mov	r3,zero
    c114:	90800015 	stw	r2,0(r18)
    c118:	1805883a 	mov	r2,r3
    c11c:	dfc00917 	ldw	ra,36(sp)
    c120:	df000817 	ldw	fp,32(sp)
    c124:	ddc00717 	ldw	r23,28(sp)
    c128:	dd800617 	ldw	r22,24(sp)
    c12c:	dd400517 	ldw	r21,20(sp)
    c130:	dd000417 	ldw	r20,16(sp)
    c134:	dcc00317 	ldw	r19,12(sp)
    c138:	dc800217 	ldw	r18,8(sp)
    c13c:	dc400117 	ldw	r17,4(sp)
    c140:	dc000017 	ldw	r16,0(sp)
    c144:	dec00a04 	addi	sp,sp,40
    c148:	f800283a 	ret
    c14c:	00bffe04 	movi	r2,-8
    c150:	18a2703a 	and	r17,r3,r2
    c154:	883fed16 	blt	r17,zero,c10c <_malloc_r+0x44>
    c158:	897fec36 	bltu	r17,r5,c10c <_malloc_r+0x44>
    c15c:	9009883a 	mov	r4,r18
    c160:	001008c0 	call	1008c <__malloc_lock>
    c164:	00807dc4 	movi	r2,503
    c168:	14402b2e 	bgeu	r2,r17,c218 <_malloc_r+0x150>
    c16c:	8806d27a 	srli	r3,r17,9
    c170:	18003f1e 	bne	r3,zero,c270 <_malloc_r+0x1a8>
    c174:	880cd0fa 	srli	r6,r17,3
    c178:	300490fa 	slli	r2,r6,3
    c17c:	02c20034 	movhi	r11,2048
    c180:	5ac34804 	addi	r11,r11,3360
    c184:	12cb883a 	add	r5,r2,r11
    c188:	2c000317 	ldw	r16,12(r5)
    c18c:	580f883a 	mov	r7,r11
    c190:	2c00041e 	bne	r5,r16,c1a4 <_malloc_r+0xdc>
    c194:	00000a06 	br	c1c0 <_malloc_r+0xf8>
    c198:	1800860e 	bge	r3,zero,c3b4 <_malloc_r+0x2ec>
    c19c:	84000317 	ldw	r16,12(r16)
    c1a0:	2c000726 	beq	r5,r16,c1c0 <_malloc_r+0xf8>
    c1a4:	80800117 	ldw	r2,4(r16)
    c1a8:	00ffff04 	movi	r3,-4
    c1ac:	10c8703a 	and	r4,r2,r3
    c1b0:	2447c83a 	sub	r3,r4,r17
    c1b4:	008003c4 	movi	r2,15
    c1b8:	10fff70e 	bge	r2,r3,c198 <_malloc_r+0xd0>
    c1bc:	31bfffc4 	addi	r6,r6,-1
    c1c0:	32400044 	addi	r9,r6,1
    c1c4:	02820034 	movhi	r10,2048
    c1c8:	52834a04 	addi	r10,r10,3368
    c1cc:	54000217 	ldw	r16,8(r10)
    c1d0:	8280a026 	beq	r16,r10,c454 <_malloc_r+0x38c>
    c1d4:	80800117 	ldw	r2,4(r16)
    c1d8:	00ffff04 	movi	r3,-4
    c1dc:	10ca703a 	and	r5,r2,r3
    c1e0:	2c4dc83a 	sub	r6,r5,r17
    c1e4:	008003c4 	movi	r2,15
    c1e8:	11808316 	blt	r2,r6,c3f8 <_malloc_r+0x330>
    c1ec:	52800315 	stw	r10,12(r10)
    c1f0:	52800215 	stw	r10,8(r10)
    c1f4:	30002916 	blt	r6,zero,c29c <_malloc_r+0x1d4>
    c1f8:	8147883a 	add	r3,r16,r5
    c1fc:	18800117 	ldw	r2,4(r3)
    c200:	9009883a 	mov	r4,r18
    c204:	10800054 	ori	r2,r2,1
    c208:	18800115 	stw	r2,4(r3)
    c20c:	00100ac0 	call	100ac <__malloc_unlock>
    c210:	80c00204 	addi	r3,r16,8
    c214:	003fc006 	br	c118 <_malloc_r+0x50>
    c218:	02c20034 	movhi	r11,2048
    c21c:	5ac34804 	addi	r11,r11,3360
    c220:	8ac5883a 	add	r2,r17,r11
    c224:	14000317 	ldw	r16,12(r2)
    c228:	580f883a 	mov	r7,r11
    c22c:	8806d0fa 	srli	r3,r17,3
    c230:	14006c26 	beq	r2,r16,c3e4 <_malloc_r+0x31c>
    c234:	80c00117 	ldw	r3,4(r16)
    c238:	00bfff04 	movi	r2,-4
    c23c:	81800317 	ldw	r6,12(r16)
    c240:	1886703a 	and	r3,r3,r2
    c244:	80c7883a 	add	r3,r16,r3
    c248:	18800117 	ldw	r2,4(r3)
    c24c:	81400217 	ldw	r5,8(r16)
    c250:	9009883a 	mov	r4,r18
    c254:	10800054 	ori	r2,r2,1
    c258:	18800115 	stw	r2,4(r3)
    c25c:	31400215 	stw	r5,8(r6)
    c260:	29800315 	stw	r6,12(r5)
    c264:	00100ac0 	call	100ac <__malloc_unlock>
    c268:	80c00204 	addi	r3,r16,8
    c26c:	003faa06 	br	c118 <_malloc_r+0x50>
    c270:	00800104 	movi	r2,4
    c274:	10c0052e 	bgeu	r2,r3,c28c <_malloc_r+0x1c4>
    c278:	00800504 	movi	r2,20
    c27c:	10c07836 	bltu	r2,r3,c460 <_malloc_r+0x398>
    c280:	198016c4 	addi	r6,r3,91
    c284:	300490fa 	slli	r2,r6,3
    c288:	003fbc06 	br	c17c <_malloc_r+0xb4>
    c28c:	8804d1ba 	srli	r2,r17,6
    c290:	11800e04 	addi	r6,r2,56
    c294:	300490fa 	slli	r2,r6,3
    c298:	003fb806 	br	c17c <_malloc_r+0xb4>
    c29c:	00807fc4 	movi	r2,511
    c2a0:	1140bb36 	bltu	r2,r5,c590 <_malloc_r+0x4c8>
    c2a4:	2806d0fa 	srli	r3,r5,3
    c2a8:	573ffe04 	addi	fp,r10,-8
    c2ac:	00800044 	movi	r2,1
    c2b0:	180890fa 	slli	r4,r3,3
    c2b4:	1807d0ba 	srai	r3,r3,2
    c2b8:	e1c00117 	ldw	r7,4(fp)
    c2bc:	5909883a 	add	r4,r11,r4
    c2c0:	21400217 	ldw	r5,8(r4)
    c2c4:	10c4983a 	sll	r2,r2,r3
    c2c8:	81000315 	stw	r4,12(r16)
    c2cc:	81400215 	stw	r5,8(r16)
    c2d0:	388eb03a 	or	r7,r7,r2
    c2d4:	2c000315 	stw	r16,12(r5)
    c2d8:	24000215 	stw	r16,8(r4)
    c2dc:	e1c00115 	stw	r7,4(fp)
    c2e0:	4807883a 	mov	r3,r9
    c2e4:	4800cd16 	blt	r9,zero,c61c <_malloc_r+0x554>
    c2e8:	1807d0ba 	srai	r3,r3,2
    c2ec:	00800044 	movi	r2,1
    c2f0:	10c8983a 	sll	r4,r2,r3
    c2f4:	39004436 	bltu	r7,r4,c408 <_malloc_r+0x340>
    c2f8:	21c4703a 	and	r2,r4,r7
    c2fc:	10000a1e 	bne	r2,zero,c328 <_malloc_r+0x260>
    c300:	2109883a 	add	r4,r4,r4
    c304:	00bfff04 	movi	r2,-4
    c308:	4884703a 	and	r2,r9,r2
    c30c:	3906703a 	and	r3,r7,r4
    c310:	12400104 	addi	r9,r2,4
    c314:	1800041e 	bne	r3,zero,c328 <_malloc_r+0x260>
    c318:	2109883a 	add	r4,r4,r4
    c31c:	3904703a 	and	r2,r7,r4
    c320:	4a400104 	addi	r9,r9,4
    c324:	103ffc26 	beq	r2,zero,c318 <_malloc_r+0x250>
    c328:	480490fa 	slli	r2,r9,3
    c32c:	4819883a 	mov	r12,r9
    c330:	023fff04 	movi	r8,-4
    c334:	589b883a 	add	r13,r11,r2
    c338:	6807883a 	mov	r3,r13
    c33c:	014003c4 	movi	r5,15
    c340:	1c000317 	ldw	r16,12(r3)
    c344:	1c00041e 	bne	r3,r16,c358 <_malloc_r+0x290>
    c348:	0000a706 	br	c5e8 <_malloc_r+0x520>
    c34c:	3000ab0e 	bge	r6,zero,c5fc <_malloc_r+0x534>
    c350:	84000317 	ldw	r16,12(r16)
    c354:	1c00a426 	beq	r3,r16,c5e8 <_malloc_r+0x520>
    c358:	80800117 	ldw	r2,4(r16)
    c35c:	1204703a 	and	r2,r2,r8
    c360:	144dc83a 	sub	r6,r2,r17
    c364:	29bff90e 	bge	r5,r6,c34c <_malloc_r+0x284>
    c368:	81000317 	ldw	r4,12(r16)
    c36c:	80c00217 	ldw	r3,8(r16)
    c370:	89400054 	ori	r5,r17,1
    c374:	8445883a 	add	r2,r16,r17
    c378:	20c00215 	stw	r3,8(r4)
    c37c:	19000315 	stw	r4,12(r3)
    c380:	81400115 	stw	r5,4(r16)
    c384:	1187883a 	add	r3,r2,r6
    c388:	31000054 	ori	r4,r6,1
    c38c:	50800315 	stw	r2,12(r10)
    c390:	50800215 	stw	r2,8(r10)
    c394:	19800015 	stw	r6,0(r3)
    c398:	11000115 	stw	r4,4(r2)
    c39c:	12800215 	stw	r10,8(r2)
    c3a0:	12800315 	stw	r10,12(r2)
    c3a4:	9009883a 	mov	r4,r18
    c3a8:	00100ac0 	call	100ac <__malloc_unlock>
    c3ac:	80c00204 	addi	r3,r16,8
    c3b0:	003f5906 	br	c118 <_malloc_r+0x50>
    c3b4:	8109883a 	add	r4,r16,r4
    c3b8:	20800117 	ldw	r2,4(r4)
    c3bc:	80c00217 	ldw	r3,8(r16)
    c3c0:	81400317 	ldw	r5,12(r16)
    c3c4:	10800054 	ori	r2,r2,1
    c3c8:	20800115 	stw	r2,4(r4)
    c3cc:	28c00215 	stw	r3,8(r5)
    c3d0:	19400315 	stw	r5,12(r3)
    c3d4:	9009883a 	mov	r4,r18
    c3d8:	00100ac0 	call	100ac <__malloc_unlock>
    c3dc:	80c00204 	addi	r3,r16,8
    c3e0:	003f4d06 	br	c118 <_malloc_r+0x50>
    c3e4:	80800204 	addi	r2,r16,8
    c3e8:	14000317 	ldw	r16,12(r2)
    c3ec:	143f911e 	bne	r2,r16,c234 <_malloc_r+0x16c>
    c3f0:	1a400084 	addi	r9,r3,2
    c3f4:	003f7306 	br	c1c4 <_malloc_r+0xfc>
    c3f8:	88c00054 	ori	r3,r17,1
    c3fc:	8445883a 	add	r2,r16,r17
    c400:	80c00115 	stw	r3,4(r16)
    c404:	003fdf06 	br	c384 <_malloc_r+0x2bc>
    c408:	e4000217 	ldw	r16,8(fp)
    c40c:	00bfff04 	movi	r2,-4
    c410:	80c00117 	ldw	r3,4(r16)
    c414:	802d883a 	mov	r22,r16
    c418:	18aa703a 	and	r21,r3,r2
    c41c:	ac401636 	bltu	r21,r17,c478 <_malloc_r+0x3b0>
    c420:	ac49c83a 	sub	r4,r21,r17
    c424:	008003c4 	movi	r2,15
    c428:	1100130e 	bge	r2,r4,c478 <_malloc_r+0x3b0>
    c42c:	88800054 	ori	r2,r17,1
    c430:	8447883a 	add	r3,r16,r17
    c434:	80800115 	stw	r2,4(r16)
    c438:	20800054 	ori	r2,r4,1
    c43c:	18800115 	stw	r2,4(r3)
    c440:	e0c00215 	stw	r3,8(fp)
    c444:	9009883a 	mov	r4,r18
    c448:	00100ac0 	call	100ac <__malloc_unlock>
    c44c:	80c00204 	addi	r3,r16,8
    c450:	003f3106 	br	c118 <_malloc_r+0x50>
    c454:	39c00117 	ldw	r7,4(r7)
    c458:	573ffe04 	addi	fp,r10,-8
    c45c:	003fa006 	br	c2e0 <_malloc_r+0x218>
    c460:	00801504 	movi	r2,84
    c464:	10c06736 	bltu	r2,r3,c604 <_malloc_r+0x53c>
    c468:	8804d33a 	srli	r2,r17,12
    c46c:	11801b84 	addi	r6,r2,110
    c470:	300490fa 	slli	r2,r6,3
    c474:	003f4106 	br	c17c <_malloc_r+0xb4>
    c478:	d0a03f17 	ldw	r2,-32516(gp)
    c47c:	d0e00f17 	ldw	r3,-32708(gp)
    c480:	053fffc4 	movi	r20,-1
    c484:	10800404 	addi	r2,r2,16
    c488:	88a7883a 	add	r19,r17,r2
    c48c:	1d000326 	beq	r3,r20,c49c <_malloc_r+0x3d4>
    c490:	98c3ffc4 	addi	r3,r19,4095
    c494:	00bc0004 	movi	r2,-4096
    c498:	18a6703a 	and	r19,r3,r2
    c49c:	9009883a 	mov	r4,r18
    c4a0:	980b883a 	mov	r5,r19
    c4a4:	000e2100 	call	e210 <_sbrk_r>
    c4a8:	1009883a 	mov	r4,r2
    c4ac:	15000426 	beq	r2,r20,c4c0 <_malloc_r+0x3f8>
    c4b0:	854b883a 	add	r5,r16,r21
    c4b4:	1029883a 	mov	r20,r2
    c4b8:	11405a2e 	bgeu	r2,r5,c624 <_malloc_r+0x55c>
    c4bc:	87000c26 	beq	r16,fp,c4f0 <_malloc_r+0x428>
    c4c0:	e4000217 	ldw	r16,8(fp)
    c4c4:	80c00117 	ldw	r3,4(r16)
    c4c8:	00bfff04 	movi	r2,-4
    c4cc:	1884703a 	and	r2,r3,r2
    c4d0:	14400336 	bltu	r2,r17,c4e0 <_malloc_r+0x418>
    c4d4:	1449c83a 	sub	r4,r2,r17
    c4d8:	008003c4 	movi	r2,15
    c4dc:	113fd316 	blt	r2,r4,c42c <_malloc_r+0x364>
    c4e0:	9009883a 	mov	r4,r18
    c4e4:	00100ac0 	call	100ac <__malloc_unlock>
    c4e8:	0007883a 	mov	r3,zero
    c4ec:	003f0a06 	br	c118 <_malloc_r+0x50>
    c4f0:	05c20234 	movhi	r23,2056
    c4f4:	bdfe6c04 	addi	r23,r23,-1616
    c4f8:	b8800017 	ldw	r2,0(r23)
    c4fc:	988d883a 	add	r6,r19,r2
    c500:	b9800015 	stw	r6,0(r23)
    c504:	d0e00f17 	ldw	r3,-32708(gp)
    c508:	00bfffc4 	movi	r2,-1
    c50c:	18808e26 	beq	r3,r2,c748 <_malloc_r+0x680>
    c510:	2145c83a 	sub	r2,r4,r5
    c514:	3085883a 	add	r2,r6,r2
    c518:	b8800015 	stw	r2,0(r23)
    c51c:	20c001cc 	andi	r3,r4,7
    c520:	18005f1e 	bne	r3,zero,c6a0 <_malloc_r+0x5d8>
    c524:	000b883a 	mov	r5,zero
    c528:	a4c5883a 	add	r2,r20,r19
    c52c:	1083ffcc 	andi	r2,r2,4095
    c530:	00c40004 	movi	r3,4096
    c534:	1887c83a 	sub	r3,r3,r2
    c538:	28e7883a 	add	r19,r5,r3
    c53c:	9009883a 	mov	r4,r18
    c540:	980b883a 	mov	r5,r19
    c544:	000e2100 	call	e210 <_sbrk_r>
    c548:	1007883a 	mov	r3,r2
    c54c:	00bfffc4 	movi	r2,-1
    c550:	18807a26 	beq	r3,r2,c73c <_malloc_r+0x674>
    c554:	1d05c83a 	sub	r2,r3,r20
    c558:	9885883a 	add	r2,r19,r2
    c55c:	10c00054 	ori	r3,r2,1
    c560:	b8800017 	ldw	r2,0(r23)
    c564:	a021883a 	mov	r16,r20
    c568:	a0c00115 	stw	r3,4(r20)
    c56c:	9885883a 	add	r2,r19,r2
    c570:	b8800015 	stw	r2,0(r23)
    c574:	e5000215 	stw	r20,8(fp)
    c578:	b7003626 	beq	r22,fp,c654 <_malloc_r+0x58c>
    c57c:	018003c4 	movi	r6,15
    c580:	35404b36 	bltu	r6,r21,c6b0 <_malloc_r+0x5e8>
    c584:	00800044 	movi	r2,1
    c588:	a0800115 	stw	r2,4(r20)
    c58c:	003fcd06 	br	c4c4 <_malloc_r+0x3fc>
    c590:	2808d27a 	srli	r4,r5,9
    c594:	2000371e 	bne	r4,zero,c674 <_malloc_r+0x5ac>
    c598:	2808d0fa 	srli	r4,r5,3
    c59c:	200690fa 	slli	r3,r4,3
    c5a0:	1ad1883a 	add	r8,r3,r11
    c5a4:	41800217 	ldw	r6,8(r8)
    c5a8:	41805b26 	beq	r8,r6,c718 <_malloc_r+0x650>
    c5ac:	30800117 	ldw	r2,4(r6)
    c5b0:	00ffff04 	movi	r3,-4
    c5b4:	10c4703a 	and	r2,r2,r3
    c5b8:	2880022e 	bgeu	r5,r2,c5c4 <_malloc_r+0x4fc>
    c5bc:	31800217 	ldw	r6,8(r6)
    c5c0:	41bffa1e 	bne	r8,r6,c5ac <_malloc_r+0x4e4>
    c5c4:	32000317 	ldw	r8,12(r6)
    c5c8:	39c00117 	ldw	r7,4(r7)
    c5cc:	82000315 	stw	r8,12(r16)
    c5d0:	81800215 	stw	r6,8(r16)
    c5d4:	07020034 	movhi	fp,2048
    c5d8:	e7034804 	addi	fp,fp,3360
    c5dc:	34000315 	stw	r16,12(r6)
    c5e0:	44000215 	stw	r16,8(r8)
    c5e4:	003f3e06 	br	c2e0 <_malloc_r+0x218>
    c5e8:	63000044 	addi	r12,r12,1
    c5ec:	608000cc 	andi	r2,r12,3
    c5f0:	10005d26 	beq	r2,zero,c768 <_malloc_r+0x6a0>
    c5f4:	18c00204 	addi	r3,r3,8
    c5f8:	003f5106 	br	c340 <_malloc_r+0x278>
    c5fc:	8089883a 	add	r4,r16,r2
    c600:	003f6d06 	br	c3b8 <_malloc_r+0x2f0>
    c604:	00805504 	movi	r2,340
    c608:	10c02036 	bltu	r2,r3,c68c <_malloc_r+0x5c4>
    c60c:	8804d3fa 	srli	r2,r17,15
    c610:	11801dc4 	addi	r6,r2,119
    c614:	300490fa 	slli	r2,r6,3
    c618:	003ed806 	br	c17c <_malloc_r+0xb4>
    c61c:	48c000c4 	addi	r3,r9,3
    c620:	003f3106 	br	c2e8 <_malloc_r+0x220>
    c624:	05c20234 	movhi	r23,2056
    c628:	bdfe6c04 	addi	r23,r23,-1616
    c62c:	b8800017 	ldw	r2,0(r23)
    c630:	988d883a 	add	r6,r19,r2
    c634:	b9800015 	stw	r6,0(r23)
    c638:	293fb21e 	bne	r5,r4,c504 <_malloc_r+0x43c>
    c63c:	2083ffcc 	andi	r2,r4,4095
    c640:	103fb01e 	bne	r2,zero,c504 <_malloc_r+0x43c>
    c644:	e4000217 	ldw	r16,8(fp)
    c648:	9d45883a 	add	r2,r19,r21
    c64c:	10800054 	ori	r2,r2,1
    c650:	80800115 	stw	r2,4(r16)
    c654:	b8c00017 	ldw	r3,0(r23)
    c658:	d0a04017 	ldw	r2,-32512(gp)
    c65c:	10c0012e 	bgeu	r2,r3,c664 <_malloc_r+0x59c>
    c660:	d0e04015 	stw	r3,-32512(gp)
    c664:	d0a04117 	ldw	r2,-32508(gp)
    c668:	10ff962e 	bgeu	r2,r3,c4c4 <_malloc_r+0x3fc>
    c66c:	d0e04115 	stw	r3,-32508(gp)
    c670:	003f9406 	br	c4c4 <_malloc_r+0x3fc>
    c674:	00800104 	movi	r2,4
    c678:	11001e36 	bltu	r2,r4,c6f4 <_malloc_r+0x62c>
    c67c:	2804d1ba 	srli	r2,r5,6
    c680:	11000e04 	addi	r4,r2,56
    c684:	200690fa 	slli	r3,r4,3
    c688:	003fc506 	br	c5a0 <_malloc_r+0x4d8>
    c68c:	00815504 	movi	r2,1364
    c690:	10c01d2e 	bgeu	r2,r3,c708 <_malloc_r+0x640>
    c694:	01801f84 	movi	r6,126
    c698:	0080fc04 	movi	r2,1008
    c69c:	003eb706 	br	c17c <_malloc_r+0xb4>
    c6a0:	00800204 	movi	r2,8
    c6a4:	10cbc83a 	sub	r5,r2,r3
    c6a8:	2169883a 	add	r20,r4,r5
    c6ac:	003f9e06 	br	c528 <_malloc_r+0x460>
    c6b0:	00bffe04 	movi	r2,-8
    c6b4:	a93ffd04 	addi	r4,r21,-12
    c6b8:	2088703a 	and	r4,r4,r2
    c6bc:	b10b883a 	add	r5,r22,r4
    c6c0:	00c00144 	movi	r3,5
    c6c4:	28c00215 	stw	r3,8(r5)
    c6c8:	28c00115 	stw	r3,4(r5)
    c6cc:	b0800117 	ldw	r2,4(r22)
    c6d0:	1080004c 	andi	r2,r2,1
    c6d4:	2084b03a 	or	r2,r4,r2
    c6d8:	b0800115 	stw	r2,4(r22)
    c6dc:	313fdd2e 	bgeu	r6,r4,c654 <_malloc_r+0x58c>
    c6e0:	b1400204 	addi	r5,r22,8
    c6e4:	9009883a 	mov	r4,r18
    c6e8:	000b5400 	call	b540 <_free_r>
    c6ec:	e4000217 	ldw	r16,8(fp)
    c6f0:	003fd806 	br	c654 <_malloc_r+0x58c>
    c6f4:	00800504 	movi	r2,20
    c6f8:	11001536 	bltu	r2,r4,c750 <_malloc_r+0x688>
    c6fc:	210016c4 	addi	r4,r4,91
    c700:	200690fa 	slli	r3,r4,3
    c704:	003fa606 	br	c5a0 <_malloc_r+0x4d8>
    c708:	8804d4ba 	srli	r2,r17,18
    c70c:	11801f04 	addi	r6,r2,124
    c710:	300490fa 	slli	r2,r6,3
    c714:	003e9906 	br	c17c <_malloc_r+0xb4>
    c718:	2009d0ba 	srai	r4,r4,2
    c71c:	01420034 	movhi	r5,2048
    c720:	29434804 	addi	r5,r5,3360
    c724:	00c00044 	movi	r3,1
    c728:	28800117 	ldw	r2,4(r5)
    c72c:	1906983a 	sll	r3,r3,r4
    c730:	10c4b03a 	or	r2,r2,r3
    c734:	28800115 	stw	r2,4(r5)
    c738:	003fa306 	br	c5c8 <_malloc_r+0x500>
    c73c:	0027883a 	mov	r19,zero
    c740:	00c00044 	movi	r3,1
    c744:	003f8606 	br	c560 <_malloc_r+0x498>
    c748:	d1200f15 	stw	r4,-32708(gp)
    c74c:	003f7306 	br	c51c <_malloc_r+0x454>
    c750:	00801504 	movi	r2,84
    c754:	11001936 	bltu	r2,r4,c7bc <_malloc_r+0x6f4>
    c758:	2804d33a 	srli	r2,r5,12
    c75c:	11001b84 	addi	r4,r2,110
    c760:	200690fa 	slli	r3,r4,3
    c764:	003f8e06 	br	c5a0 <_malloc_r+0x4d8>
    c768:	480b883a 	mov	r5,r9
    c76c:	6807883a 	mov	r3,r13
    c770:	288000cc 	andi	r2,r5,3
    c774:	18fffe04 	addi	r3,r3,-8
    c778:	297fffc4 	addi	r5,r5,-1
    c77c:	10001526 	beq	r2,zero,c7d4 <_malloc_r+0x70c>
    c780:	18800217 	ldw	r2,8(r3)
    c784:	10fffa26 	beq	r2,r3,c770 <_malloc_r+0x6a8>
    c788:	2109883a 	add	r4,r4,r4
    c78c:	393f1e36 	bltu	r7,r4,c408 <_malloc_r+0x340>
    c790:	203f1d26 	beq	r4,zero,c408 <_malloc_r+0x340>
    c794:	21c4703a 	and	r2,r4,r7
    c798:	10000226 	beq	r2,zero,c7a4 <_malloc_r+0x6dc>
    c79c:	6013883a 	mov	r9,r12
    c7a0:	003ee106 	br	c328 <_malloc_r+0x260>
    c7a4:	2109883a 	add	r4,r4,r4
    c7a8:	3904703a 	and	r2,r7,r4
    c7ac:	63000104 	addi	r12,r12,4
    c7b0:	103ffc26 	beq	r2,zero,c7a4 <_malloc_r+0x6dc>
    c7b4:	6013883a 	mov	r9,r12
    c7b8:	003edb06 	br	c328 <_malloc_r+0x260>
    c7bc:	00805504 	movi	r2,340
    c7c0:	11000836 	bltu	r2,r4,c7e4 <_malloc_r+0x71c>
    c7c4:	2804d3fa 	srli	r2,r5,15
    c7c8:	11001dc4 	addi	r4,r2,119
    c7cc:	200690fa 	slli	r3,r4,3
    c7d0:	003f7306 	br	c5a0 <_malloc_r+0x4d8>
    c7d4:	0104303a 	nor	r2,zero,r4
    c7d8:	388e703a 	and	r7,r7,r2
    c7dc:	e1c00115 	stw	r7,4(fp)
    c7e0:	003fe906 	br	c788 <_malloc_r+0x6c0>
    c7e4:	00815504 	movi	r2,1364
    c7e8:	1100032e 	bgeu	r2,r4,c7f8 <_malloc_r+0x730>
    c7ec:	01001f84 	movi	r4,126
    c7f0:	00c0fc04 	movi	r3,1008
    c7f4:	003f6a06 	br	c5a0 <_malloc_r+0x4d8>
    c7f8:	2804d4ba 	srli	r2,r5,18
    c7fc:	11001f04 	addi	r4,r2,124
    c800:	200690fa 	slli	r3,r4,3
    c804:	003f6606 	br	c5a0 <_malloc_r+0x4d8>

0000c808 <memchr>:
    c808:	008000c4 	movi	r2,3
    c80c:	29403fcc 	andi	r5,r5,255
    c810:	2007883a 	mov	r3,r4
    c814:	1180022e 	bgeu	r2,r6,c820 <memchr+0x18>
    c818:	2084703a 	and	r2,r4,r2
    c81c:	10000b26 	beq	r2,zero,c84c <memchr+0x44>
    c820:	313fffc4 	addi	r4,r6,-1
    c824:	3000051e 	bne	r6,zero,c83c <memchr+0x34>
    c828:	00002c06 	br	c8dc <memchr+0xd4>
    c82c:	213fffc4 	addi	r4,r4,-1
    c830:	00bfffc4 	movi	r2,-1
    c834:	18c00044 	addi	r3,r3,1
    c838:	20802826 	beq	r4,r2,c8dc <memchr+0xd4>
    c83c:	18800003 	ldbu	r2,0(r3)
    c840:	28bffa1e 	bne	r5,r2,c82c <memchr+0x24>
    c844:	1805883a 	mov	r2,r3
    c848:	f800283a 	ret
    c84c:	0011883a 	mov	r8,zero
    c850:	0007883a 	mov	r3,zero
    c854:	01c00104 	movi	r7,4
    c858:	4004923a 	slli	r2,r8,8
    c85c:	18c00044 	addi	r3,r3,1
    c860:	1151883a 	add	r8,r2,r5
    c864:	19fffc1e 	bne	r3,r7,c858 <memchr+0x50>
    c868:	02bfbff4 	movhi	r10,65279
    c86c:	52bfbfc4 	addi	r10,r10,-257
    c870:	02602074 	movhi	r9,32897
    c874:	4a602004 	addi	r9,r9,-32640
    c878:	02c000c4 	movi	r11,3
    c87c:	20800017 	ldw	r2,0(r4)
    c880:	31bfff04 	addi	r6,r6,-4
    c884:	200f883a 	mov	r7,r4
    c888:	1204f03a 	xor	r2,r2,r8
    c88c:	1287883a 	add	r3,r2,r10
    c890:	1a46703a 	and	r3,r3,r9
    c894:	0084303a 	nor	r2,zero,r2
    c898:	10c4703a 	and	r2,r2,r3
    c89c:	10000b26 	beq	r2,zero,c8cc <memchr+0xc4>
    c8a0:	20800003 	ldbu	r2,0(r4)
    c8a4:	28800f26 	beq	r5,r2,c8e4 <memchr+0xdc>
    c8a8:	20800043 	ldbu	r2,1(r4)
    c8ac:	21c00044 	addi	r7,r4,1
    c8b0:	28800c26 	beq	r5,r2,c8e4 <memchr+0xdc>
    c8b4:	20800083 	ldbu	r2,2(r4)
    c8b8:	21c00084 	addi	r7,r4,2
    c8bc:	28800926 	beq	r5,r2,c8e4 <memchr+0xdc>
    c8c0:	208000c3 	ldbu	r2,3(r4)
    c8c4:	21c000c4 	addi	r7,r4,3
    c8c8:	28800626 	beq	r5,r2,c8e4 <memchr+0xdc>
    c8cc:	21000104 	addi	r4,r4,4
    c8d0:	59bfea36 	bltu	r11,r6,c87c <memchr+0x74>
    c8d4:	2007883a 	mov	r3,r4
    c8d8:	003fd106 	br	c820 <memchr+0x18>
    c8dc:	0005883a 	mov	r2,zero
    c8e0:	f800283a 	ret
    c8e4:	3805883a 	mov	r2,r7
    c8e8:	f800283a 	ret

0000c8ec <memmove>:
    c8ec:	2807883a 	mov	r3,r5
    c8f0:	2011883a 	mov	r8,r4
    c8f4:	29000c2e 	bgeu	r5,r4,c928 <memmove+0x3c>
    c8f8:	298f883a 	add	r7,r5,r6
    c8fc:	21c00a2e 	bgeu	r4,r7,c928 <memmove+0x3c>
    c900:	30000726 	beq	r6,zero,c920 <memmove+0x34>
    c904:	2187883a 	add	r3,r4,r6
    c908:	198dc83a 	sub	r6,r3,r6
    c90c:	39ffffc4 	addi	r7,r7,-1
    c910:	38800003 	ldbu	r2,0(r7)
    c914:	18ffffc4 	addi	r3,r3,-1
    c918:	18800005 	stb	r2,0(r3)
    c91c:	19bffb1e 	bne	r3,r6,c90c <memmove+0x20>
    c920:	2005883a 	mov	r2,r4
    c924:	f800283a 	ret
    c928:	01c003c4 	movi	r7,15
    c92c:	39800a36 	bltu	r7,r6,c958 <memmove+0x6c>
    c930:	303ffb26 	beq	r6,zero,c920 <memmove+0x34>
    c934:	400f883a 	mov	r7,r8
    c938:	320d883a 	add	r6,r6,r8
    c93c:	28800003 	ldbu	r2,0(r5)
    c940:	29400044 	addi	r5,r5,1
    c944:	38800005 	stb	r2,0(r7)
    c948:	39c00044 	addi	r7,r7,1
    c94c:	39bffb1e 	bne	r7,r6,c93c <memmove+0x50>
    c950:	2005883a 	mov	r2,r4
    c954:	f800283a 	ret
    c958:	1904b03a 	or	r2,r3,r4
    c95c:	108000cc 	andi	r2,r2,3
    c960:	103ff31e 	bne	r2,zero,c930 <memmove+0x44>
    c964:	3811883a 	mov	r8,r7
    c968:	180b883a 	mov	r5,r3
    c96c:	200f883a 	mov	r7,r4
    c970:	28c00017 	ldw	r3,0(r5)
    c974:	31bffc04 	addi	r6,r6,-16
    c978:	38c00015 	stw	r3,0(r7)
    c97c:	28800117 	ldw	r2,4(r5)
    c980:	38800115 	stw	r2,4(r7)
    c984:	28c00217 	ldw	r3,8(r5)
    c988:	38c00215 	stw	r3,8(r7)
    c98c:	28800317 	ldw	r2,12(r5)
    c990:	29400404 	addi	r5,r5,16
    c994:	38800315 	stw	r2,12(r7)
    c998:	39c00404 	addi	r7,r7,16
    c99c:	41bff436 	bltu	r8,r6,c970 <memmove+0x84>
    c9a0:	008000c4 	movi	r2,3
    c9a4:	1180072e 	bgeu	r2,r6,c9c4 <memmove+0xd8>
    c9a8:	1007883a 	mov	r3,r2
    c9ac:	28800017 	ldw	r2,0(r5)
    c9b0:	31bfff04 	addi	r6,r6,-4
    c9b4:	29400104 	addi	r5,r5,4
    c9b8:	38800015 	stw	r2,0(r7)
    c9bc:	39c00104 	addi	r7,r7,4
    c9c0:	19bffa36 	bltu	r3,r6,c9ac <memmove+0xc0>
    c9c4:	3811883a 	mov	r8,r7
    c9c8:	003fd906 	br	c930 <memmove+0x44>

0000c9cc <_Bfree>:
    c9cc:	28000826 	beq	r5,zero,c9f0 <_Bfree+0x24>
    c9d0:	28800117 	ldw	r2,4(r5)
    c9d4:	21001317 	ldw	r4,76(r4)
    c9d8:	1085883a 	add	r2,r2,r2
    c9dc:	1085883a 	add	r2,r2,r2
    c9e0:	1105883a 	add	r2,r2,r4
    c9e4:	10c00017 	ldw	r3,0(r2)
    c9e8:	28c00015 	stw	r3,0(r5)
    c9ec:	11400015 	stw	r5,0(r2)
    c9f0:	f800283a 	ret

0000c9f4 <__hi0bits>:
    c9f4:	20bfffec 	andhi	r2,r4,65535
    c9f8:	10001426 	beq	r2,zero,ca4c <__hi0bits+0x58>
    c9fc:	0007883a 	mov	r3,zero
    ca00:	20bfc02c 	andhi	r2,r4,65280
    ca04:	1000021e 	bne	r2,zero,ca10 <__hi0bits+0x1c>
    ca08:	2008923a 	slli	r4,r4,8
    ca0c:	18c00204 	addi	r3,r3,8
    ca10:	20bc002c 	andhi	r2,r4,61440
    ca14:	1000021e 	bne	r2,zero,ca20 <__hi0bits+0x2c>
    ca18:	2008913a 	slli	r4,r4,4
    ca1c:	18c00104 	addi	r3,r3,4
    ca20:	20b0002c 	andhi	r2,r4,49152
    ca24:	1000031e 	bne	r2,zero,ca34 <__hi0bits+0x40>
    ca28:	2105883a 	add	r2,r4,r4
    ca2c:	18c00084 	addi	r3,r3,2
    ca30:	1089883a 	add	r4,r2,r2
    ca34:	20000316 	blt	r4,zero,ca44 <__hi0bits+0x50>
    ca38:	2090002c 	andhi	r2,r4,16384
    ca3c:	10000626 	beq	r2,zero,ca58 <__hi0bits+0x64>
    ca40:	18c00044 	addi	r3,r3,1
    ca44:	1805883a 	mov	r2,r3
    ca48:	f800283a 	ret
    ca4c:	2008943a 	slli	r4,r4,16
    ca50:	00c00404 	movi	r3,16
    ca54:	003fea06 	br	ca00 <__hi0bits+0xc>
    ca58:	00c00804 	movi	r3,32
    ca5c:	1805883a 	mov	r2,r3
    ca60:	f800283a 	ret

0000ca64 <__lo0bits>:
    ca64:	20c00017 	ldw	r3,0(r4)
    ca68:	188001cc 	andi	r2,r3,7
    ca6c:	10000a26 	beq	r2,zero,ca98 <__lo0bits+0x34>
    ca70:	1880004c 	andi	r2,r3,1
    ca74:	1005003a 	cmpeq	r2,r2,zero
    ca78:	10002126 	beq	r2,zero,cb00 <__lo0bits+0x9c>
    ca7c:	1880008c 	andi	r2,r3,2
    ca80:	1000251e 	bne	r2,zero,cb18 <__lo0bits+0xb4>
    ca84:	1804d0ba 	srli	r2,r3,2
    ca88:	01400084 	movi	r5,2
    ca8c:	20800015 	stw	r2,0(r4)
    ca90:	2805883a 	mov	r2,r5
    ca94:	f800283a 	ret
    ca98:	18bfffcc 	andi	r2,r3,65535
    ca9c:	10001526 	beq	r2,zero,caf4 <__lo0bits+0x90>
    caa0:	000b883a 	mov	r5,zero
    caa4:	18803fcc 	andi	r2,r3,255
    caa8:	1000021e 	bne	r2,zero,cab4 <__lo0bits+0x50>
    caac:	1806d23a 	srli	r3,r3,8
    cab0:	29400204 	addi	r5,r5,8
    cab4:	188003cc 	andi	r2,r3,15
    cab8:	1000021e 	bne	r2,zero,cac4 <__lo0bits+0x60>
    cabc:	1806d13a 	srli	r3,r3,4
    cac0:	29400104 	addi	r5,r5,4
    cac4:	188000cc 	andi	r2,r3,3
    cac8:	1000021e 	bne	r2,zero,cad4 <__lo0bits+0x70>
    cacc:	1806d0ba 	srli	r3,r3,2
    cad0:	29400084 	addi	r5,r5,2
    cad4:	1880004c 	andi	r2,r3,1
    cad8:	1000031e 	bne	r2,zero,cae8 <__lo0bits+0x84>
    cadc:	1806d07a 	srli	r3,r3,1
    cae0:	18000a26 	beq	r3,zero,cb0c <__lo0bits+0xa8>
    cae4:	29400044 	addi	r5,r5,1
    cae8:	2805883a 	mov	r2,r5
    caec:	20c00015 	stw	r3,0(r4)
    caf0:	f800283a 	ret
    caf4:	1806d43a 	srli	r3,r3,16
    caf8:	01400404 	movi	r5,16
    cafc:	003fe906 	br	caa4 <__lo0bits+0x40>
    cb00:	000b883a 	mov	r5,zero
    cb04:	2805883a 	mov	r2,r5
    cb08:	f800283a 	ret
    cb0c:	01400804 	movi	r5,32
    cb10:	2805883a 	mov	r2,r5
    cb14:	f800283a 	ret
    cb18:	1804d07a 	srli	r2,r3,1
    cb1c:	01400044 	movi	r5,1
    cb20:	20800015 	stw	r2,0(r4)
    cb24:	003fda06 	br	ca90 <__lo0bits+0x2c>

0000cb28 <__mcmp>:
    cb28:	20800417 	ldw	r2,16(r4)
    cb2c:	28c00417 	ldw	r3,16(r5)
    cb30:	10cfc83a 	sub	r7,r2,r3
    cb34:	38000c1e 	bne	r7,zero,cb68 <__mcmp+0x40>
    cb38:	18c5883a 	add	r2,r3,r3
    cb3c:	1085883a 	add	r2,r2,r2
    cb40:	10c00504 	addi	r3,r2,20
    cb44:	21000504 	addi	r4,r4,20
    cb48:	28cb883a 	add	r5,r5,r3
    cb4c:	2085883a 	add	r2,r4,r2
    cb50:	10bfff04 	addi	r2,r2,-4
    cb54:	297fff04 	addi	r5,r5,-4
    cb58:	11800017 	ldw	r6,0(r2)
    cb5c:	28c00017 	ldw	r3,0(r5)
    cb60:	30c0031e 	bne	r6,r3,cb70 <__mcmp+0x48>
    cb64:	20bffa36 	bltu	r4,r2,cb50 <__mcmp+0x28>
    cb68:	3805883a 	mov	r2,r7
    cb6c:	f800283a 	ret
    cb70:	30c00336 	bltu	r6,r3,cb80 <__mcmp+0x58>
    cb74:	01c00044 	movi	r7,1
    cb78:	3805883a 	mov	r2,r7
    cb7c:	f800283a 	ret
    cb80:	01ffffc4 	movi	r7,-1
    cb84:	003ff806 	br	cb68 <__mcmp+0x40>

0000cb88 <__ulp>:
    cb88:	295ffc2c 	andhi	r5,r5,32752
    cb8c:	013f3034 	movhi	r4,64704
    cb90:	290b883a 	add	r5,r5,r4
    cb94:	0145c83a 	sub	r2,zero,r5
    cb98:	1007d53a 	srai	r3,r2,20
    cb9c:	000d883a 	mov	r6,zero
    cba0:	0140040e 	bge	zero,r5,cbb4 <__ulp+0x2c>
    cba4:	280f883a 	mov	r7,r5
    cba8:	3807883a 	mov	r3,r7
    cbac:	3005883a 	mov	r2,r6
    cbb0:	f800283a 	ret
    cbb4:	008004c4 	movi	r2,19
    cbb8:	193ffb04 	addi	r4,r3,-20
    cbbc:	10c00c0e 	bge	r2,r3,cbf0 <__ulp+0x68>
    cbc0:	008007c4 	movi	r2,31
    cbc4:	1107c83a 	sub	r3,r2,r4
    cbc8:	00800784 	movi	r2,30
    cbcc:	01400044 	movi	r5,1
    cbd0:	11000216 	blt	r2,r4,cbdc <__ulp+0x54>
    cbd4:	00800044 	movi	r2,1
    cbd8:	10ca983a 	sll	r5,r2,r3
    cbdc:	000f883a 	mov	r7,zero
    cbe0:	280d883a 	mov	r6,r5
    cbe4:	3807883a 	mov	r3,r7
    cbe8:	3005883a 	mov	r2,r6
    cbec:	f800283a 	ret
    cbf0:	00800234 	movhi	r2,8
    cbf4:	10cfd83a 	sra	r7,r2,r3
    cbf8:	000d883a 	mov	r6,zero
    cbfc:	3005883a 	mov	r2,r6
    cc00:	3807883a 	mov	r3,r7
    cc04:	f800283a 	ret

0000cc08 <__b2d>:
    cc08:	20800417 	ldw	r2,16(r4)
    cc0c:	defff904 	addi	sp,sp,-28
    cc10:	dd000415 	stw	r20,16(sp)
    cc14:	1085883a 	add	r2,r2,r2
    cc18:	25000504 	addi	r20,r4,20
    cc1c:	1085883a 	add	r2,r2,r2
    cc20:	dc000015 	stw	r16,0(sp)
    cc24:	a0a1883a 	add	r16,r20,r2
    cc28:	dd400515 	stw	r21,20(sp)
    cc2c:	857fff17 	ldw	r21,-4(r16)
    cc30:	dc400115 	stw	r17,4(sp)
    cc34:	dfc00615 	stw	ra,24(sp)
    cc38:	a809883a 	mov	r4,r21
    cc3c:	2823883a 	mov	r17,r5
    cc40:	dcc00315 	stw	r19,12(sp)
    cc44:	dc800215 	stw	r18,8(sp)
    cc48:	000c9f40 	call	c9f4 <__hi0bits>
    cc4c:	100b883a 	mov	r5,r2
    cc50:	00800804 	movi	r2,32
    cc54:	1145c83a 	sub	r2,r2,r5
    cc58:	88800015 	stw	r2,0(r17)
    cc5c:	00800284 	movi	r2,10
    cc60:	80ffff04 	addi	r3,r16,-4
    cc64:	11401416 	blt	r2,r5,ccb8 <__b2d+0xb0>
    cc68:	008002c4 	movi	r2,11
    cc6c:	1149c83a 	sub	r4,r2,r5
    cc70:	a0c02736 	bltu	r20,r3,cd10 <__b2d+0x108>
    cc74:	000d883a 	mov	r6,zero
    cc78:	28800544 	addi	r2,r5,21
    cc7c:	a906d83a 	srl	r3,r21,r4
    cc80:	a884983a 	sll	r2,r21,r2
    cc84:	1ccffc34 	orhi	r19,r3,16368
    cc88:	11a4b03a 	or	r18,r2,r6
    cc8c:	9005883a 	mov	r2,r18
    cc90:	9807883a 	mov	r3,r19
    cc94:	dfc00617 	ldw	ra,24(sp)
    cc98:	dd400517 	ldw	r21,20(sp)
    cc9c:	dd000417 	ldw	r20,16(sp)
    cca0:	dcc00317 	ldw	r19,12(sp)
    cca4:	dc800217 	ldw	r18,8(sp)
    cca8:	dc400117 	ldw	r17,4(sp)
    ccac:	dc000017 	ldw	r16,0(sp)
    ccb0:	dec00704 	addi	sp,sp,28
    ccb4:	f800283a 	ret
    ccb8:	a0c00e36 	bltu	r20,r3,ccf4 <__b2d+0xec>
    ccbc:	293ffd44 	addi	r4,r5,-11
    ccc0:	000d883a 	mov	r6,zero
    ccc4:	20000f26 	beq	r4,zero,cd04 <__b2d+0xfc>
    ccc8:	00800804 	movi	r2,32
    cccc:	110bc83a 	sub	r5,r2,r4
    ccd0:	a0c01236 	bltu	r20,r3,cd1c <__b2d+0x114>
    ccd4:	000f883a 	mov	r7,zero
    ccd8:	a904983a 	sll	r2,r21,r4
    ccdc:	3146d83a 	srl	r3,r6,r5
    cce0:	3108983a 	sll	r4,r6,r4
    cce4:	108ffc34 	orhi	r2,r2,16368
    cce8:	18a6b03a 	or	r19,r3,r2
    ccec:	3924b03a 	or	r18,r7,r4
    ccf0:	003fe606 	br	cc8c <__b2d+0x84>
    ccf4:	293ffd44 	addi	r4,r5,-11
    ccf8:	81bffe17 	ldw	r6,-8(r16)
    ccfc:	80fffe04 	addi	r3,r16,-8
    cd00:	203ff11e 	bne	r4,zero,ccc8 <__b2d+0xc0>
    cd04:	accffc34 	orhi	r19,r21,16368
    cd08:	3025883a 	mov	r18,r6
    cd0c:	003fdf06 	br	cc8c <__b2d+0x84>
    cd10:	18bfff17 	ldw	r2,-4(r3)
    cd14:	110cd83a 	srl	r6,r2,r4
    cd18:	003fd706 	br	cc78 <__b2d+0x70>
    cd1c:	18bfff17 	ldw	r2,-4(r3)
    cd20:	114ed83a 	srl	r7,r2,r5
    cd24:	003fec06 	br	ccd8 <__b2d+0xd0>

0000cd28 <__ratio>:
    cd28:	defff904 	addi	sp,sp,-28
    cd2c:	dc400215 	stw	r17,8(sp)
    cd30:	2823883a 	mov	r17,r5
    cd34:	d80b883a 	mov	r5,sp
    cd38:	dfc00615 	stw	ra,24(sp)
    cd3c:	dd000515 	stw	r20,20(sp)
    cd40:	dcc00415 	stw	r19,16(sp)
    cd44:	dc800315 	stw	r18,12(sp)
    cd48:	2025883a 	mov	r18,r4
    cd4c:	000cc080 	call	cc08 <__b2d>
    cd50:	8809883a 	mov	r4,r17
    cd54:	d9400104 	addi	r5,sp,4
    cd58:	1027883a 	mov	r19,r2
    cd5c:	1829883a 	mov	r20,r3
    cd60:	000cc080 	call	cc08 <__b2d>
    cd64:	89000417 	ldw	r4,16(r17)
    cd68:	91c00417 	ldw	r7,16(r18)
    cd6c:	d9800117 	ldw	r6,4(sp)
    cd70:	180b883a 	mov	r5,r3
    cd74:	390fc83a 	sub	r7,r7,r4
    cd78:	1009883a 	mov	r4,r2
    cd7c:	d8800017 	ldw	r2,0(sp)
    cd80:	380e917a 	slli	r7,r7,5
    cd84:	2011883a 	mov	r8,r4
    cd88:	1185c83a 	sub	r2,r2,r6
    cd8c:	11c5883a 	add	r2,r2,r7
    cd90:	1006953a 	slli	r3,r2,20
    cd94:	2813883a 	mov	r9,r5
    cd98:	00800d0e 	bge	zero,r2,cdd0 <__ratio+0xa8>
    cd9c:	1d29883a 	add	r20,r3,r20
    cda0:	a00b883a 	mov	r5,r20
    cda4:	480f883a 	mov	r7,r9
    cda8:	9809883a 	mov	r4,r19
    cdac:	400d883a 	mov	r6,r8
    cdb0:	00067d40 	call	67d4 <__divdf3>
    cdb4:	dfc00617 	ldw	ra,24(sp)
    cdb8:	dd000517 	ldw	r20,20(sp)
    cdbc:	dcc00417 	ldw	r19,16(sp)
    cdc0:	dc800317 	ldw	r18,12(sp)
    cdc4:	dc400217 	ldw	r17,8(sp)
    cdc8:	dec00704 	addi	sp,sp,28
    cdcc:	f800283a 	ret
    cdd0:	28d3c83a 	sub	r9,r5,r3
    cdd4:	003ff206 	br	cda0 <__ratio+0x78>

0000cdd8 <_mprec_log10>:
    cdd8:	defffe04 	addi	sp,sp,-8
    cddc:	008005c4 	movi	r2,23
    cde0:	dc000015 	stw	r16,0(sp)
    cde4:	dfc00115 	stw	ra,4(sp)
    cde8:	2021883a 	mov	r16,r4
    cdec:	11000c16 	blt	r2,r4,ce20 <_mprec_log10+0x48>
    cdf0:	200490fa 	slli	r2,r4,3
    cdf4:	00c20034 	movhi	r3,2048
    cdf8:	18c11b04 	addi	r3,r3,1132
    cdfc:	10c5883a 	add	r2,r2,r3
    ce00:	12400117 	ldw	r9,4(r2)
    ce04:	12000017 	ldw	r8,0(r2)
    ce08:	4807883a 	mov	r3,r9
    ce0c:	4005883a 	mov	r2,r8
    ce10:	dfc00117 	ldw	ra,4(sp)
    ce14:	dc000017 	ldw	r16,0(sp)
    ce18:	dec00204 	addi	sp,sp,8
    ce1c:	f800283a 	ret
    ce20:	0011883a 	mov	r8,zero
    ce24:	024ffc34 	movhi	r9,16368
    ce28:	0005883a 	mov	r2,zero
    ce2c:	00d00934 	movhi	r3,16420
    ce30:	480b883a 	mov	r5,r9
    ce34:	4009883a 	mov	r4,r8
    ce38:	180f883a 	mov	r7,r3
    ce3c:	100d883a 	mov	r6,r2
    ce40:	00064100 	call	6410 <__muldf3>
    ce44:	843fffc4 	addi	r16,r16,-1
    ce48:	1011883a 	mov	r8,r2
    ce4c:	1813883a 	mov	r9,r3
    ce50:	803ff51e 	bne	r16,zero,ce28 <_mprec_log10+0x50>
    ce54:	4005883a 	mov	r2,r8
    ce58:	4807883a 	mov	r3,r9
    ce5c:	dfc00117 	ldw	ra,4(sp)
    ce60:	dc000017 	ldw	r16,0(sp)
    ce64:	dec00204 	addi	sp,sp,8
    ce68:	f800283a 	ret

0000ce6c <__copybits>:
    ce6c:	297fffc4 	addi	r5,r5,-1
    ce70:	30800417 	ldw	r2,16(r6)
    ce74:	280bd17a 	srai	r5,r5,5
    ce78:	31800504 	addi	r6,r6,20
    ce7c:	1085883a 	add	r2,r2,r2
    ce80:	294b883a 	add	r5,r5,r5
    ce84:	294b883a 	add	r5,r5,r5
    ce88:	1085883a 	add	r2,r2,r2
    ce8c:	290b883a 	add	r5,r5,r4
    ce90:	3087883a 	add	r3,r6,r2
    ce94:	29400104 	addi	r5,r5,4
    ce98:	30c0052e 	bgeu	r6,r3,ceb0 <__copybits+0x44>
    ce9c:	30800017 	ldw	r2,0(r6)
    cea0:	31800104 	addi	r6,r6,4
    cea4:	20800015 	stw	r2,0(r4)
    cea8:	21000104 	addi	r4,r4,4
    ceac:	30fffb36 	bltu	r6,r3,ce9c <__copybits+0x30>
    ceb0:	2140032e 	bgeu	r4,r5,cec0 <__copybits+0x54>
    ceb4:	20000015 	stw	zero,0(r4)
    ceb8:	21000104 	addi	r4,r4,4
    cebc:	217ffd36 	bltu	r4,r5,ceb4 <__copybits+0x48>
    cec0:	f800283a 	ret

0000cec4 <__any_on>:
    cec4:	20800417 	ldw	r2,16(r4)
    cec8:	2807d17a 	srai	r3,r5,5
    cecc:	21000504 	addi	r4,r4,20
    ced0:	10c00d0e 	bge	r2,r3,cf08 <__any_on+0x44>
    ced4:	1085883a 	add	r2,r2,r2
    ced8:	1085883a 	add	r2,r2,r2
    cedc:	208d883a 	add	r6,r4,r2
    cee0:	2180182e 	bgeu	r4,r6,cf44 <__any_on+0x80>
    cee4:	30bfff17 	ldw	r2,-4(r6)
    cee8:	30ffff04 	addi	r3,r6,-4
    ceec:	1000041e 	bne	r2,zero,cf00 <__any_on+0x3c>
    cef0:	20c0142e 	bgeu	r4,r3,cf44 <__any_on+0x80>
    cef4:	18ffff04 	addi	r3,r3,-4
    cef8:	18800017 	ldw	r2,0(r3)
    cefc:	103ffc26 	beq	r2,zero,cef0 <__any_on+0x2c>
    cf00:	00800044 	movi	r2,1
    cf04:	f800283a 	ret
    cf08:	18800a0e 	bge	r3,r2,cf34 <__any_on+0x70>
    cf0c:	294007cc 	andi	r5,r5,31
    cf10:	28000826 	beq	r5,zero,cf34 <__any_on+0x70>
    cf14:	18c5883a 	add	r2,r3,r3
    cf18:	1085883a 	add	r2,r2,r2
    cf1c:	208d883a 	add	r6,r4,r2
    cf20:	30c00017 	ldw	r3,0(r6)
    cf24:	1944d83a 	srl	r2,r3,r5
    cf28:	1144983a 	sll	r2,r2,r5
    cf2c:	18bff41e 	bne	r3,r2,cf00 <__any_on+0x3c>
    cf30:	003feb06 	br	cee0 <__any_on+0x1c>
    cf34:	18c5883a 	add	r2,r3,r3
    cf38:	1085883a 	add	r2,r2,r2
    cf3c:	208d883a 	add	r6,r4,r2
    cf40:	003fe706 	br	cee0 <__any_on+0x1c>
    cf44:	0005883a 	mov	r2,zero
    cf48:	f800283a 	ret

0000cf4c <_Balloc>:
    cf4c:	20c01317 	ldw	r3,76(r4)
    cf50:	defffb04 	addi	sp,sp,-20
    cf54:	dcc00315 	stw	r19,12(sp)
    cf58:	dc800215 	stw	r18,8(sp)
    cf5c:	dfc00415 	stw	ra,16(sp)
    cf60:	2825883a 	mov	r18,r5
    cf64:	dc400115 	stw	r17,4(sp)
    cf68:	dc000015 	stw	r16,0(sp)
    cf6c:	2027883a 	mov	r19,r4
    cf70:	01800404 	movi	r6,16
    cf74:	01400104 	movi	r5,4
    cf78:	18001726 	beq	r3,zero,cfd8 <_Balloc+0x8c>
    cf7c:	01400044 	movi	r5,1
    cf80:	9485883a 	add	r2,r18,r18
    cf84:	2ca2983a 	sll	r17,r5,r18
    cf88:	1085883a 	add	r2,r2,r2
    cf8c:	10c7883a 	add	r3,r2,r3
    cf90:	1c000017 	ldw	r16,0(r3)
    cf94:	8c4d883a 	add	r6,r17,r17
    cf98:	318d883a 	add	r6,r6,r6
    cf9c:	9809883a 	mov	r4,r19
    cfa0:	31800504 	addi	r6,r6,20
    cfa4:	80001226 	beq	r16,zero,cff0 <_Balloc+0xa4>
    cfa8:	80800017 	ldw	r2,0(r16)
    cfac:	18800015 	stw	r2,0(r3)
    cfb0:	80000415 	stw	zero,16(r16)
    cfb4:	80000315 	stw	zero,12(r16)
    cfb8:	8005883a 	mov	r2,r16
    cfbc:	dfc00417 	ldw	ra,16(sp)
    cfc0:	dcc00317 	ldw	r19,12(sp)
    cfc4:	dc800217 	ldw	r18,8(sp)
    cfc8:	dc400117 	ldw	r17,4(sp)
    cfcc:	dc000017 	ldw	r16,0(sp)
    cfd0:	dec00504 	addi	sp,sp,20
    cfd4:	f800283a 	ret
    cfd8:	000e64c0 	call	e64c <_calloc_r>
    cfdc:	1007883a 	mov	r3,r2
    cfe0:	0021883a 	mov	r16,zero
    cfe4:	98801315 	stw	r2,76(r19)
    cfe8:	103fe41e 	bne	r2,zero,cf7c <_Balloc+0x30>
    cfec:	003ff206 	br	cfb8 <_Balloc+0x6c>
    cff0:	000e64c0 	call	e64c <_calloc_r>
    cff4:	103ff026 	beq	r2,zero,cfb8 <_Balloc+0x6c>
    cff8:	1021883a 	mov	r16,r2
    cffc:	14800115 	stw	r18,4(r2)
    d000:	14400215 	stw	r17,8(r2)
    d004:	003fea06 	br	cfb0 <_Balloc+0x64>

0000d008 <__d2b>:
    d008:	defff504 	addi	sp,sp,-44
    d00c:	dcc00515 	stw	r19,20(sp)
    d010:	04c00044 	movi	r19,1
    d014:	dc000215 	stw	r16,8(sp)
    d018:	2821883a 	mov	r16,r5
    d01c:	980b883a 	mov	r5,r19
    d020:	ddc00915 	stw	r23,36(sp)
    d024:	dd800815 	stw	r22,32(sp)
    d028:	dd400715 	stw	r21,28(sp)
    d02c:	dd000615 	stw	r20,24(sp)
    d030:	dc800415 	stw	r18,16(sp)
    d034:	dc400315 	stw	r17,12(sp)
    d038:	dfc00a15 	stw	ra,40(sp)
    d03c:	3023883a 	mov	r17,r6
    d040:	382d883a 	mov	r22,r7
    d044:	ddc00b17 	ldw	r23,44(sp)
    d048:	000cf4c0 	call	cf4c <_Balloc>
    d04c:	1025883a 	mov	r18,r2
    d050:	00a00034 	movhi	r2,32768
    d054:	10bfffc4 	addi	r2,r2,-1
    d058:	8888703a 	and	r4,r17,r2
    d05c:	202ad53a 	srli	r21,r4,20
    d060:	00800434 	movhi	r2,16
    d064:	10bfffc4 	addi	r2,r2,-1
    d068:	8886703a 	and	r3,r17,r2
    d06c:	a829003a 	cmpeq	r20,r21,zero
    d070:	800b883a 	mov	r5,r16
    d074:	d8c00115 	stw	r3,4(sp)
    d078:	94000504 	addi	r16,r18,20
    d07c:	a000021e 	bne	r20,zero,d088 <__d2b+0x80>
    d080:	18c00434 	orhi	r3,r3,16
    d084:	d8c00115 	stw	r3,4(sp)
    d088:	28002726 	beq	r5,zero,d128 <__d2b+0x120>
    d08c:	d809883a 	mov	r4,sp
    d090:	d9400015 	stw	r5,0(sp)
    d094:	000ca640 	call	ca64 <__lo0bits>
    d098:	100d883a 	mov	r6,r2
    d09c:	10003526 	beq	r2,zero,d174 <__d2b+0x16c>
    d0a0:	d8c00117 	ldw	r3,4(sp)
    d0a4:	00800804 	movi	r2,32
    d0a8:	1185c83a 	sub	r2,r2,r6
    d0ac:	d9000017 	ldw	r4,0(sp)
    d0b0:	1886983a 	sll	r3,r3,r2
    d0b4:	1906b03a 	or	r3,r3,r4
    d0b8:	90c00515 	stw	r3,20(r18)
    d0bc:	d8c00117 	ldw	r3,4(sp)
    d0c0:	1986d83a 	srl	r3,r3,r6
    d0c4:	d8c00115 	stw	r3,4(sp)
    d0c8:	180b003a 	cmpeq	r5,r3,zero
    d0cc:	00800084 	movi	r2,2
    d0d0:	114bc83a 	sub	r5,r2,r5
    d0d4:	80c00115 	stw	r3,4(r16)
    d0d8:	91400415 	stw	r5,16(r18)
    d0dc:	a0001a1e 	bne	r20,zero,d148 <__d2b+0x140>
    d0e0:	3545883a 	add	r2,r6,r21
    d0e4:	10bef344 	addi	r2,r2,-1075
    d0e8:	00c00d44 	movi	r3,53
    d0ec:	b0800015 	stw	r2,0(r22)
    d0f0:	1987c83a 	sub	r3,r3,r6
    d0f4:	b8c00015 	stw	r3,0(r23)
    d0f8:	9005883a 	mov	r2,r18
    d0fc:	dfc00a17 	ldw	ra,40(sp)
    d100:	ddc00917 	ldw	r23,36(sp)
    d104:	dd800817 	ldw	r22,32(sp)
    d108:	dd400717 	ldw	r21,28(sp)
    d10c:	dd000617 	ldw	r20,24(sp)
    d110:	dcc00517 	ldw	r19,20(sp)
    d114:	dc800417 	ldw	r18,16(sp)
    d118:	dc400317 	ldw	r17,12(sp)
    d11c:	dc000217 	ldw	r16,8(sp)
    d120:	dec00b04 	addi	sp,sp,44
    d124:	f800283a 	ret
    d128:	d9000104 	addi	r4,sp,4
    d12c:	000ca640 	call	ca64 <__lo0bits>
    d130:	11800804 	addi	r6,r2,32
    d134:	d8800117 	ldw	r2,4(sp)
    d138:	94c00415 	stw	r19,16(r18)
    d13c:	980b883a 	mov	r5,r19
    d140:	90800515 	stw	r2,20(r18)
    d144:	a03fe626 	beq	r20,zero,d0e0 <__d2b+0xd8>
    d148:	2945883a 	add	r2,r5,r5
    d14c:	1085883a 	add	r2,r2,r2
    d150:	1405883a 	add	r2,r2,r16
    d154:	113fff17 	ldw	r4,-4(r2)
    d158:	30fef384 	addi	r3,r6,-1074
    d15c:	2820917a 	slli	r16,r5,5
    d160:	b0c00015 	stw	r3,0(r22)
    d164:	000c9f40 	call	c9f4 <__hi0bits>
    d168:	80a1c83a 	sub	r16,r16,r2
    d16c:	bc000015 	stw	r16,0(r23)
    d170:	003fe106 	br	d0f8 <__d2b+0xf0>
    d174:	d8800017 	ldw	r2,0(sp)
    d178:	90800515 	stw	r2,20(r18)
    d17c:	d8c00117 	ldw	r3,4(sp)
    d180:	003fd106 	br	d0c8 <__d2b+0xc0>

0000d184 <__mdiff>:
    d184:	defffb04 	addi	sp,sp,-20
    d188:	dc000015 	stw	r16,0(sp)
    d18c:	2821883a 	mov	r16,r5
    d190:	dc800215 	stw	r18,8(sp)
    d194:	300b883a 	mov	r5,r6
    d198:	2025883a 	mov	r18,r4
    d19c:	8009883a 	mov	r4,r16
    d1a0:	dc400115 	stw	r17,4(sp)
    d1a4:	dfc00415 	stw	ra,16(sp)
    d1a8:	dcc00315 	stw	r19,12(sp)
    d1ac:	3023883a 	mov	r17,r6
    d1b0:	000cb280 	call	cb28 <__mcmp>
    d1b4:	10004226 	beq	r2,zero,d2c0 <__mdiff+0x13c>
    d1b8:	10005016 	blt	r2,zero,d2fc <__mdiff+0x178>
    d1bc:	0027883a 	mov	r19,zero
    d1c0:	81400117 	ldw	r5,4(r16)
    d1c4:	9009883a 	mov	r4,r18
    d1c8:	000cf4c0 	call	cf4c <_Balloc>
    d1cc:	1019883a 	mov	r12,r2
    d1d0:	82800417 	ldw	r10,16(r16)
    d1d4:	88800417 	ldw	r2,16(r17)
    d1d8:	81800504 	addi	r6,r16,20
    d1dc:	5287883a 	add	r3,r10,r10
    d1e0:	1085883a 	add	r2,r2,r2
    d1e4:	18c7883a 	add	r3,r3,r3
    d1e8:	1085883a 	add	r2,r2,r2
    d1ec:	8a000504 	addi	r8,r17,20
    d1f0:	64c00315 	stw	r19,12(r12)
    d1f4:	30db883a 	add	r13,r6,r3
    d1f8:	4097883a 	add	r11,r8,r2
    d1fc:	61c00504 	addi	r7,r12,20
    d200:	0013883a 	mov	r9,zero
    d204:	31000017 	ldw	r4,0(r6)
    d208:	41400017 	ldw	r5,0(r8)
    d20c:	42000104 	addi	r8,r8,4
    d210:	20bfffcc 	andi	r2,r4,65535
    d214:	28ffffcc 	andi	r3,r5,65535
    d218:	10c5c83a 	sub	r2,r2,r3
    d21c:	1245883a 	add	r2,r2,r9
    d220:	2008d43a 	srli	r4,r4,16
    d224:	280ad43a 	srli	r5,r5,16
    d228:	1007d43a 	srai	r3,r2,16
    d22c:	3880000d 	sth	r2,0(r7)
    d230:	2149c83a 	sub	r4,r4,r5
    d234:	20c9883a 	add	r4,r4,r3
    d238:	3900008d 	sth	r4,2(r7)
    d23c:	31800104 	addi	r6,r6,4
    d240:	39c00104 	addi	r7,r7,4
    d244:	2013d43a 	srai	r9,r4,16
    d248:	42ffee36 	bltu	r8,r11,d204 <__mdiff+0x80>
    d24c:	33400c2e 	bgeu	r6,r13,d280 <__mdiff+0xfc>
    d250:	30800017 	ldw	r2,0(r6)
    d254:	31800104 	addi	r6,r6,4
    d258:	10ffffcc 	andi	r3,r2,65535
    d25c:	1a47883a 	add	r3,r3,r9
    d260:	1004d43a 	srli	r2,r2,16
    d264:	1809d43a 	srai	r4,r3,16
    d268:	38c0000d 	sth	r3,0(r7)
    d26c:	1105883a 	add	r2,r2,r4
    d270:	3880008d 	sth	r2,2(r7)
    d274:	1013d43a 	srai	r9,r2,16
    d278:	39c00104 	addi	r7,r7,4
    d27c:	337ff436 	bltu	r6,r13,d250 <__mdiff+0xcc>
    d280:	38bfff17 	ldw	r2,-4(r7)
    d284:	38ffff04 	addi	r3,r7,-4
    d288:	1000041e 	bne	r2,zero,d29c <__mdiff+0x118>
    d28c:	18ffff04 	addi	r3,r3,-4
    d290:	18800017 	ldw	r2,0(r3)
    d294:	52bfffc4 	addi	r10,r10,-1
    d298:	103ffc26 	beq	r2,zero,d28c <__mdiff+0x108>
    d29c:	6005883a 	mov	r2,r12
    d2a0:	62800415 	stw	r10,16(r12)
    d2a4:	dfc00417 	ldw	ra,16(sp)
    d2a8:	dcc00317 	ldw	r19,12(sp)
    d2ac:	dc800217 	ldw	r18,8(sp)
    d2b0:	dc400117 	ldw	r17,4(sp)
    d2b4:	dc000017 	ldw	r16,0(sp)
    d2b8:	dec00504 	addi	sp,sp,20
    d2bc:	f800283a 	ret
    d2c0:	9009883a 	mov	r4,r18
    d2c4:	000b883a 	mov	r5,zero
    d2c8:	000cf4c0 	call	cf4c <_Balloc>
    d2cc:	1019883a 	mov	r12,r2
    d2d0:	00800044 	movi	r2,1
    d2d4:	60800415 	stw	r2,16(r12)
    d2d8:	6005883a 	mov	r2,r12
    d2dc:	60000515 	stw	zero,20(r12)
    d2e0:	dfc00417 	ldw	ra,16(sp)
    d2e4:	dcc00317 	ldw	r19,12(sp)
    d2e8:	dc800217 	ldw	r18,8(sp)
    d2ec:	dc400117 	ldw	r17,4(sp)
    d2f0:	dc000017 	ldw	r16,0(sp)
    d2f4:	dec00504 	addi	sp,sp,20
    d2f8:	f800283a 	ret
    d2fc:	880d883a 	mov	r6,r17
    d300:	04c00044 	movi	r19,1
    d304:	8023883a 	mov	r17,r16
    d308:	3021883a 	mov	r16,r6
    d30c:	003fac06 	br	d1c0 <__mdiff+0x3c>

0000d310 <__lshift>:
    d310:	defff904 	addi	sp,sp,-28
    d314:	28800417 	ldw	r2,16(r5)
    d318:	dc000015 	stw	r16,0(sp)
    d31c:	3021d17a 	srai	r16,r6,5
    d320:	28c00217 	ldw	r3,8(r5)
    d324:	10800044 	addi	r2,r2,1
    d328:	dc400115 	stw	r17,4(sp)
    d32c:	80a3883a 	add	r17,r16,r2
    d330:	dd400515 	stw	r21,20(sp)
    d334:	dd000415 	stw	r20,16(sp)
    d338:	dc800215 	stw	r18,8(sp)
    d33c:	dfc00615 	stw	ra,24(sp)
    d340:	2825883a 	mov	r18,r5
    d344:	dcc00315 	stw	r19,12(sp)
    d348:	3029883a 	mov	r20,r6
    d34c:	202b883a 	mov	r21,r4
    d350:	29400117 	ldw	r5,4(r5)
    d354:	1c40030e 	bge	r3,r17,d364 <__lshift+0x54>
    d358:	18c7883a 	add	r3,r3,r3
    d35c:	29400044 	addi	r5,r5,1
    d360:	1c7ffd16 	blt	r3,r17,d358 <__lshift+0x48>
    d364:	a809883a 	mov	r4,r21
    d368:	000cf4c0 	call	cf4c <_Balloc>
    d36c:	1027883a 	mov	r19,r2
    d370:	11400504 	addi	r5,r2,20
    d374:	0400090e 	bge	zero,r16,d39c <__lshift+0x8c>
    d378:	2805883a 	mov	r2,r5
    d37c:	0007883a 	mov	r3,zero
    d380:	18c00044 	addi	r3,r3,1
    d384:	10000015 	stw	zero,0(r2)
    d388:	10800104 	addi	r2,r2,4
    d38c:	80fffc1e 	bne	r16,r3,d380 <__lshift+0x70>
    d390:	8405883a 	add	r2,r16,r16
    d394:	1085883a 	add	r2,r2,r2
    d398:	288b883a 	add	r5,r5,r2
    d39c:	90800417 	ldw	r2,16(r18)
    d3a0:	91000504 	addi	r4,r18,20
    d3a4:	a18007cc 	andi	r6,r20,31
    d3a8:	1085883a 	add	r2,r2,r2
    d3ac:	1085883a 	add	r2,r2,r2
    d3b0:	208f883a 	add	r7,r4,r2
    d3b4:	30001e26 	beq	r6,zero,d430 <__lshift+0x120>
    d3b8:	00800804 	movi	r2,32
    d3bc:	1191c83a 	sub	r8,r2,r6
    d3c0:	0007883a 	mov	r3,zero
    d3c4:	20800017 	ldw	r2,0(r4)
    d3c8:	1184983a 	sll	r2,r2,r6
    d3cc:	1884b03a 	or	r2,r3,r2
    d3d0:	28800015 	stw	r2,0(r5)
    d3d4:	20c00017 	ldw	r3,0(r4)
    d3d8:	21000104 	addi	r4,r4,4
    d3dc:	29400104 	addi	r5,r5,4
    d3e0:	1a06d83a 	srl	r3,r3,r8
    d3e4:	21fff736 	bltu	r4,r7,d3c4 <__lshift+0xb4>
    d3e8:	28c00015 	stw	r3,0(r5)
    d3ec:	18000126 	beq	r3,zero,d3f4 <__lshift+0xe4>
    d3f0:	8c400044 	addi	r17,r17,1
    d3f4:	88bfffc4 	addi	r2,r17,-1
    d3f8:	98800415 	stw	r2,16(r19)
    d3fc:	a809883a 	mov	r4,r21
    d400:	900b883a 	mov	r5,r18
    d404:	000c9cc0 	call	c9cc <_Bfree>
    d408:	9805883a 	mov	r2,r19
    d40c:	dfc00617 	ldw	ra,24(sp)
    d410:	dd400517 	ldw	r21,20(sp)
    d414:	dd000417 	ldw	r20,16(sp)
    d418:	dcc00317 	ldw	r19,12(sp)
    d41c:	dc800217 	ldw	r18,8(sp)
    d420:	dc400117 	ldw	r17,4(sp)
    d424:	dc000017 	ldw	r16,0(sp)
    d428:	dec00704 	addi	sp,sp,28
    d42c:	f800283a 	ret
    d430:	20800017 	ldw	r2,0(r4)
    d434:	21000104 	addi	r4,r4,4
    d438:	28800015 	stw	r2,0(r5)
    d43c:	29400104 	addi	r5,r5,4
    d440:	21ffec2e 	bgeu	r4,r7,d3f4 <__lshift+0xe4>
    d444:	20800017 	ldw	r2,0(r4)
    d448:	21000104 	addi	r4,r4,4
    d44c:	28800015 	stw	r2,0(r5)
    d450:	29400104 	addi	r5,r5,4
    d454:	21fff636 	bltu	r4,r7,d430 <__lshift+0x120>
    d458:	003fe606 	br	d3f4 <__lshift+0xe4>

0000d45c <__multiply>:
    d45c:	defff904 	addi	sp,sp,-28
    d460:	dcc00315 	stw	r19,12(sp)
    d464:	dc800215 	stw	r18,8(sp)
    d468:	2cc00417 	ldw	r19,16(r5)
    d46c:	34800417 	ldw	r18,16(r6)
    d470:	dd000415 	stw	r20,16(sp)
    d474:	dc400115 	stw	r17,4(sp)
    d478:	dfc00615 	stw	ra,24(sp)
    d47c:	dd400515 	stw	r21,20(sp)
    d480:	dc000015 	stw	r16,0(sp)
    d484:	2823883a 	mov	r17,r5
    d488:	3029883a 	mov	r20,r6
    d48c:	9c80040e 	bge	r19,r18,d4a0 <__multiply+0x44>
    d490:	9027883a 	mov	r19,r18
    d494:	2c800417 	ldw	r18,16(r5)
    d498:	2829883a 	mov	r20,r5
    d49c:	3023883a 	mov	r17,r6
    d4a0:	88800217 	ldw	r2,8(r17)
    d4a4:	9ca1883a 	add	r16,r19,r18
    d4a8:	89400117 	ldw	r5,4(r17)
    d4ac:	1400010e 	bge	r2,r16,d4b4 <__multiply+0x58>
    d4b0:	29400044 	addi	r5,r5,1
    d4b4:	000cf4c0 	call	cf4c <_Balloc>
    d4b8:	102b883a 	mov	r21,r2
    d4bc:	8405883a 	add	r2,r16,r16
    d4c0:	1085883a 	add	r2,r2,r2
    d4c4:	a9000504 	addi	r4,r21,20
    d4c8:	209d883a 	add	r14,r4,r2
    d4cc:	2380042e 	bgeu	r4,r14,d4e0 <__multiply+0x84>
    d4d0:	2005883a 	mov	r2,r4
    d4d4:	10000015 	stw	zero,0(r2)
    d4d8:	10800104 	addi	r2,r2,4
    d4dc:	13bffd36 	bltu	r2,r14,d4d4 <__multiply+0x78>
    d4e0:	9485883a 	add	r2,r18,r18
    d4e4:	9cc7883a 	add	r3,r19,r19
    d4e8:	a1800504 	addi	r6,r20,20
    d4ec:	1085883a 	add	r2,r2,r2
    d4f0:	8b400504 	addi	r13,r17,20
    d4f4:	18c7883a 	add	r3,r3,r3
    d4f8:	309f883a 	add	r15,r6,r2
    d4fc:	68d7883a 	add	r11,r13,r3
    d500:	33c03b2e 	bgeu	r6,r15,d5f0 <__multiply+0x194>
    d504:	2019883a 	mov	r12,r4
    d508:	30800017 	ldw	r2,0(r6)
    d50c:	127fffcc 	andi	r9,r2,65535
    d510:	48001826 	beq	r9,zero,d574 <__multiply+0x118>
    d514:	6811883a 	mov	r8,r13
    d518:	600f883a 	mov	r7,r12
    d51c:	0015883a 	mov	r10,zero
    d520:	40c00017 	ldw	r3,0(r8)
    d524:	39400017 	ldw	r5,0(r7)
    d528:	42000104 	addi	r8,r8,4
    d52c:	193fffcc 	andi	r4,r3,65535
    d530:	4909383a 	mul	r4,r9,r4
    d534:	1806d43a 	srli	r3,r3,16
    d538:	28bfffcc 	andi	r2,r5,65535
    d53c:	5085883a 	add	r2,r10,r2
    d540:	2089883a 	add	r4,r4,r2
    d544:	48c7383a 	mul	r3,r9,r3
    d548:	280ad43a 	srli	r5,r5,16
    d54c:	2004d43a 	srli	r2,r4,16
    d550:	3900000d 	sth	r4,0(r7)
    d554:	1947883a 	add	r3,r3,r5
    d558:	10c5883a 	add	r2,r2,r3
    d55c:	3880008d 	sth	r2,2(r7)
    d560:	1014d43a 	srli	r10,r2,16
    d564:	39c00104 	addi	r7,r7,4
    d568:	42ffed36 	bltu	r8,r11,d520 <__multiply+0xc4>
    d56c:	3a800015 	stw	r10,0(r7)
    d570:	30800017 	ldw	r2,0(r6)
    d574:	1012d43a 	srli	r9,r2,16
    d578:	48001926 	beq	r9,zero,d5e0 <__multiply+0x184>
    d57c:	60800017 	ldw	r2,0(r12)
    d580:	6811883a 	mov	r8,r13
    d584:	600f883a 	mov	r7,r12
    d588:	0015883a 	mov	r10,zero
    d58c:	100b883a 	mov	r5,r2
    d590:	41000017 	ldw	r4,0(r8)
    d594:	2806d43a 	srli	r3,r5,16
    d598:	3880000d 	sth	r2,0(r7)
    d59c:	20bfffcc 	andi	r2,r4,65535
    d5a0:	4885383a 	mul	r2,r9,r2
    d5a4:	50c7883a 	add	r3,r10,r3
    d5a8:	2008d43a 	srli	r4,r4,16
    d5ac:	10c5883a 	add	r2,r2,r3
    d5b0:	3880008d 	sth	r2,2(r7)
    d5b4:	39c00104 	addi	r7,r7,4
    d5b8:	39400017 	ldw	r5,0(r7)
    d5bc:	4909383a 	mul	r4,r9,r4
    d5c0:	1004d43a 	srli	r2,r2,16
    d5c4:	28ffffcc 	andi	r3,r5,65535
    d5c8:	20c9883a 	add	r4,r4,r3
    d5cc:	1105883a 	add	r2,r2,r4
    d5d0:	42000104 	addi	r8,r8,4
    d5d4:	1014d43a 	srli	r10,r2,16
    d5d8:	42ffed36 	bltu	r8,r11,d590 <__multiply+0x134>
    d5dc:	38800015 	stw	r2,0(r7)
    d5e0:	31800104 	addi	r6,r6,4
    d5e4:	33c0022e 	bgeu	r6,r15,d5f0 <__multiply+0x194>
    d5e8:	63000104 	addi	r12,r12,4
    d5ec:	003fc606 	br	d508 <__multiply+0xac>
    d5f0:	0400090e 	bge	zero,r16,d618 <__multiply+0x1bc>
    d5f4:	70bfff17 	ldw	r2,-4(r14)
    d5f8:	70ffff04 	addi	r3,r14,-4
    d5fc:	10000326 	beq	r2,zero,d60c <__multiply+0x1b0>
    d600:	00000506 	br	d618 <__multiply+0x1bc>
    d604:	18800017 	ldw	r2,0(r3)
    d608:	1000031e 	bne	r2,zero,d618 <__multiply+0x1bc>
    d60c:	843fffc4 	addi	r16,r16,-1
    d610:	18ffff04 	addi	r3,r3,-4
    d614:	803ffb1e 	bne	r16,zero,d604 <__multiply+0x1a8>
    d618:	a805883a 	mov	r2,r21
    d61c:	ac000415 	stw	r16,16(r21)
    d620:	dfc00617 	ldw	ra,24(sp)
    d624:	dd400517 	ldw	r21,20(sp)
    d628:	dd000417 	ldw	r20,16(sp)
    d62c:	dcc00317 	ldw	r19,12(sp)
    d630:	dc800217 	ldw	r18,8(sp)
    d634:	dc400117 	ldw	r17,4(sp)
    d638:	dc000017 	ldw	r16,0(sp)
    d63c:	dec00704 	addi	sp,sp,28
    d640:	f800283a 	ret

0000d644 <__i2b>:
    d644:	defffd04 	addi	sp,sp,-12
    d648:	dc000015 	stw	r16,0(sp)
    d64c:	04000044 	movi	r16,1
    d650:	dc800115 	stw	r18,4(sp)
    d654:	2825883a 	mov	r18,r5
    d658:	800b883a 	mov	r5,r16
    d65c:	dfc00215 	stw	ra,8(sp)
    d660:	000cf4c0 	call	cf4c <_Balloc>
    d664:	14000415 	stw	r16,16(r2)
    d668:	14800515 	stw	r18,20(r2)
    d66c:	dfc00217 	ldw	ra,8(sp)
    d670:	dc800117 	ldw	r18,4(sp)
    d674:	dc000017 	ldw	r16,0(sp)
    d678:	dec00304 	addi	sp,sp,12
    d67c:	f800283a 	ret

0000d680 <__multadd>:
    d680:	defffa04 	addi	sp,sp,-24
    d684:	dc800215 	stw	r18,8(sp)
    d688:	2c800417 	ldw	r18,16(r5)
    d68c:	dd000415 	stw	r20,16(sp)
    d690:	dcc00315 	stw	r19,12(sp)
    d694:	dc000015 	stw	r16,0(sp)
    d698:	dfc00515 	stw	ra,20(sp)
    d69c:	3821883a 	mov	r16,r7
    d6a0:	dc400115 	stw	r17,4(sp)
    d6a4:	2827883a 	mov	r19,r5
    d6a8:	2029883a 	mov	r20,r4
    d6ac:	2a000504 	addi	r8,r5,20
    d6b0:	000f883a 	mov	r7,zero
    d6b4:	40800017 	ldw	r2,0(r8)
    d6b8:	39c00044 	addi	r7,r7,1
    d6bc:	10ffffcc 	andi	r3,r2,65535
    d6c0:	1987383a 	mul	r3,r3,r6
    d6c4:	1004d43a 	srli	r2,r2,16
    d6c8:	1c07883a 	add	r3,r3,r16
    d6cc:	180ad43a 	srli	r5,r3,16
    d6d0:	1185383a 	mul	r2,r2,r6
    d6d4:	18ffffcc 	andi	r3,r3,65535
    d6d8:	1145883a 	add	r2,r2,r5
    d6dc:	1008943a 	slli	r4,r2,16
    d6e0:	1020d43a 	srli	r16,r2,16
    d6e4:	20c9883a 	add	r4,r4,r3
    d6e8:	41000015 	stw	r4,0(r8)
    d6ec:	42000104 	addi	r8,r8,4
    d6f0:	3cbff016 	blt	r7,r18,d6b4 <__multadd+0x34>
    d6f4:	80000826 	beq	r16,zero,d718 <__multadd+0x98>
    d6f8:	98800217 	ldw	r2,8(r19)
    d6fc:	90800f0e 	bge	r18,r2,d73c <__multadd+0xbc>
    d700:	9485883a 	add	r2,r18,r18
    d704:	1085883a 	add	r2,r2,r2
    d708:	14c5883a 	add	r2,r2,r19
    d70c:	90c00044 	addi	r3,r18,1
    d710:	14000515 	stw	r16,20(r2)
    d714:	98c00415 	stw	r3,16(r19)
    d718:	9805883a 	mov	r2,r19
    d71c:	dfc00517 	ldw	ra,20(sp)
    d720:	dd000417 	ldw	r20,16(sp)
    d724:	dcc00317 	ldw	r19,12(sp)
    d728:	dc800217 	ldw	r18,8(sp)
    d72c:	dc400117 	ldw	r17,4(sp)
    d730:	dc000017 	ldw	r16,0(sp)
    d734:	dec00604 	addi	sp,sp,24
    d738:	f800283a 	ret
    d73c:	99400117 	ldw	r5,4(r19)
    d740:	a009883a 	mov	r4,r20
    d744:	29400044 	addi	r5,r5,1
    d748:	000cf4c0 	call	cf4c <_Balloc>
    d74c:	99800417 	ldw	r6,16(r19)
    d750:	99400304 	addi	r5,r19,12
    d754:	11000304 	addi	r4,r2,12
    d758:	318d883a 	add	r6,r6,r6
    d75c:	318d883a 	add	r6,r6,r6
    d760:	31800204 	addi	r6,r6,8
    d764:	1023883a 	mov	r17,r2
    d768:	00073240 	call	7324 <memcpy>
    d76c:	980b883a 	mov	r5,r19
    d770:	a009883a 	mov	r4,r20
    d774:	000c9cc0 	call	c9cc <_Bfree>
    d778:	8827883a 	mov	r19,r17
    d77c:	003fe006 	br	d700 <__multadd+0x80>

0000d780 <__pow5mult>:
    d780:	defffa04 	addi	sp,sp,-24
    d784:	308000cc 	andi	r2,r6,3
    d788:	dd000415 	stw	r20,16(sp)
    d78c:	dcc00315 	stw	r19,12(sp)
    d790:	dc000015 	stw	r16,0(sp)
    d794:	dfc00515 	stw	ra,20(sp)
    d798:	dc800215 	stw	r18,8(sp)
    d79c:	dc400115 	stw	r17,4(sp)
    d7a0:	3021883a 	mov	r16,r6
    d7a4:	2027883a 	mov	r19,r4
    d7a8:	2829883a 	mov	r20,r5
    d7ac:	10002b1e 	bne	r2,zero,d85c <__pow5mult+0xdc>
    d7b0:	8025d0ba 	srai	r18,r16,2
    d7b4:	90001b26 	beq	r18,zero,d824 <__pow5mult+0xa4>
    d7b8:	9c001217 	ldw	r16,72(r19)
    d7bc:	8000081e 	bne	r16,zero,d7e0 <__pow5mult+0x60>
    d7c0:	00003006 	br	d884 <__pow5mult+0x104>
    d7c4:	800b883a 	mov	r5,r16
    d7c8:	800d883a 	mov	r6,r16
    d7cc:	9809883a 	mov	r4,r19
    d7d0:	90001426 	beq	r18,zero,d824 <__pow5mult+0xa4>
    d7d4:	80800017 	ldw	r2,0(r16)
    d7d8:	10001b26 	beq	r2,zero,d848 <__pow5mult+0xc8>
    d7dc:	1021883a 	mov	r16,r2
    d7e0:	9080004c 	andi	r2,r18,1
    d7e4:	1005003a 	cmpeq	r2,r2,zero
    d7e8:	9025d07a 	srai	r18,r18,1
    d7ec:	800d883a 	mov	r6,r16
    d7f0:	9809883a 	mov	r4,r19
    d7f4:	a00b883a 	mov	r5,r20
    d7f8:	103ff21e 	bne	r2,zero,d7c4 <__pow5mult+0x44>
    d7fc:	000d45c0 	call	d45c <__multiply>
    d800:	a00b883a 	mov	r5,r20
    d804:	9809883a 	mov	r4,r19
    d808:	1023883a 	mov	r17,r2
    d80c:	000c9cc0 	call	c9cc <_Bfree>
    d810:	8829883a 	mov	r20,r17
    d814:	800b883a 	mov	r5,r16
    d818:	800d883a 	mov	r6,r16
    d81c:	9809883a 	mov	r4,r19
    d820:	903fec1e 	bne	r18,zero,d7d4 <__pow5mult+0x54>
    d824:	a005883a 	mov	r2,r20
    d828:	dfc00517 	ldw	ra,20(sp)
    d82c:	dd000417 	ldw	r20,16(sp)
    d830:	dcc00317 	ldw	r19,12(sp)
    d834:	dc800217 	ldw	r18,8(sp)
    d838:	dc400117 	ldw	r17,4(sp)
    d83c:	dc000017 	ldw	r16,0(sp)
    d840:	dec00604 	addi	sp,sp,24
    d844:	f800283a 	ret
    d848:	000d45c0 	call	d45c <__multiply>
    d84c:	80800015 	stw	r2,0(r16)
    d850:	1021883a 	mov	r16,r2
    d854:	10000015 	stw	zero,0(r2)
    d858:	003fe106 	br	d7e0 <__pow5mult+0x60>
    d85c:	1085883a 	add	r2,r2,r2
    d860:	00c20034 	movhi	r3,2048
    d864:	18c16104 	addi	r3,r3,1412
    d868:	1085883a 	add	r2,r2,r2
    d86c:	10c5883a 	add	r2,r2,r3
    d870:	11bfff17 	ldw	r6,-4(r2)
    d874:	000f883a 	mov	r7,zero
    d878:	000d6800 	call	d680 <__multadd>
    d87c:	1029883a 	mov	r20,r2
    d880:	003fcb06 	br	d7b0 <__pow5mult+0x30>
    d884:	9809883a 	mov	r4,r19
    d888:	01409c44 	movi	r5,625
    d88c:	000d6440 	call	d644 <__i2b>
    d890:	98801215 	stw	r2,72(r19)
    d894:	1021883a 	mov	r16,r2
    d898:	10000015 	stw	zero,0(r2)
    d89c:	003fd006 	br	d7e0 <__pow5mult+0x60>

0000d8a0 <__s2b>:
    d8a0:	defff904 	addi	sp,sp,-28
    d8a4:	dcc00315 	stw	r19,12(sp)
    d8a8:	dc800215 	stw	r18,8(sp)
    d8ac:	2827883a 	mov	r19,r5
    d8b0:	2025883a 	mov	r18,r4
    d8b4:	01400244 	movi	r5,9
    d8b8:	39000204 	addi	r4,r7,8
    d8bc:	dd000415 	stw	r20,16(sp)
    d8c0:	dc400115 	stw	r17,4(sp)
    d8c4:	dfc00615 	stw	ra,24(sp)
    d8c8:	dd400515 	stw	r21,20(sp)
    d8cc:	dc000015 	stw	r16,0(sp)
    d8d0:	3829883a 	mov	r20,r7
    d8d4:	3023883a 	mov	r17,r6
    d8d8:	000fa240 	call	fa24 <__divsi3>
    d8dc:	00c00044 	movi	r3,1
    d8e0:	1880350e 	bge	r3,r2,d9b8 <__s2b+0x118>
    d8e4:	000b883a 	mov	r5,zero
    d8e8:	18c7883a 	add	r3,r3,r3
    d8ec:	29400044 	addi	r5,r5,1
    d8f0:	18bffd16 	blt	r3,r2,d8e8 <__s2b+0x48>
    d8f4:	9009883a 	mov	r4,r18
    d8f8:	000cf4c0 	call	cf4c <_Balloc>
    d8fc:	1011883a 	mov	r8,r2
    d900:	d8800717 	ldw	r2,28(sp)
    d904:	00c00044 	movi	r3,1
    d908:	01800244 	movi	r6,9
    d90c:	40800515 	stw	r2,20(r8)
    d910:	40c00415 	stw	r3,16(r8)
    d914:	3440260e 	bge	r6,r17,d9b0 <__s2b+0x110>
    d918:	3021883a 	mov	r16,r6
    d91c:	99ab883a 	add	r21,r19,r6
    d920:	9c05883a 	add	r2,r19,r16
    d924:	11c00007 	ldb	r7,0(r2)
    d928:	400b883a 	mov	r5,r8
    d92c:	9009883a 	mov	r4,r18
    d930:	39fff404 	addi	r7,r7,-48
    d934:	01800284 	movi	r6,10
    d938:	000d6800 	call	d680 <__multadd>
    d93c:	84000044 	addi	r16,r16,1
    d940:	1011883a 	mov	r8,r2
    d944:	8c3ff61e 	bne	r17,r16,d920 <__s2b+0x80>
    d948:	ac45883a 	add	r2,r21,r17
    d94c:	117ffe04 	addi	r5,r2,-8
    d950:	880d883a 	mov	r6,r17
    d954:	35000c0e 	bge	r6,r20,d988 <__s2b+0xe8>
    d958:	a185c83a 	sub	r2,r20,r6
    d95c:	2821883a 	mov	r16,r5
    d960:	28a3883a 	add	r17,r5,r2
    d964:	81c00007 	ldb	r7,0(r16)
    d968:	400b883a 	mov	r5,r8
    d96c:	9009883a 	mov	r4,r18
    d970:	39fff404 	addi	r7,r7,-48
    d974:	01800284 	movi	r6,10
    d978:	000d6800 	call	d680 <__multadd>
    d97c:	84000044 	addi	r16,r16,1
    d980:	1011883a 	mov	r8,r2
    d984:	847ff71e 	bne	r16,r17,d964 <__s2b+0xc4>
    d988:	4005883a 	mov	r2,r8
    d98c:	dfc00617 	ldw	ra,24(sp)
    d990:	dd400517 	ldw	r21,20(sp)
    d994:	dd000417 	ldw	r20,16(sp)
    d998:	dcc00317 	ldw	r19,12(sp)
    d99c:	dc800217 	ldw	r18,8(sp)
    d9a0:	dc400117 	ldw	r17,4(sp)
    d9a4:	dc000017 	ldw	r16,0(sp)
    d9a8:	dec00704 	addi	sp,sp,28
    d9ac:	f800283a 	ret
    d9b0:	99400284 	addi	r5,r19,10
    d9b4:	003fe706 	br	d954 <__s2b+0xb4>
    d9b8:	000b883a 	mov	r5,zero
    d9bc:	003fcd06 	br	d8f4 <__s2b+0x54>

0000d9c0 <putc>:
    d9c0:	defffc04 	addi	sp,sp,-16
    d9c4:	dc800215 	stw	r18,8(sp)
    d9c8:	04820034 	movhi	r18,2048
    d9cc:	9489ba04 	addi	r18,r18,9960
    d9d0:	90c00017 	ldw	r3,0(r18)
    d9d4:	dc400115 	stw	r17,4(sp)
    d9d8:	dc000015 	stw	r16,0(sp)
    d9dc:	dfc00315 	stw	ra,12(sp)
    d9e0:	2023883a 	mov	r17,r4
    d9e4:	2821883a 	mov	r16,r5
    d9e8:	18000226 	beq	r3,zero,d9f4 <putc+0x34>
    d9ec:	18800e17 	ldw	r2,56(r3)
    d9f0:	10001126 	beq	r2,zero,da38 <putc+0x78>
    d9f4:	80800217 	ldw	r2,8(r16)
    d9f8:	10ffffc4 	addi	r3,r2,-1
    d9fc:	80c00215 	stw	r3,8(r16)
    da00:	18001316 	blt	r3,zero,da50 <putc+0x90>
    da04:	80800017 	ldw	r2,0(r16)
    da08:	14400005 	stb	r17,0(r2)
    da0c:	80c00017 	ldw	r3,0(r16)
    da10:	18800044 	addi	r2,r3,1
    da14:	18c00003 	ldbu	r3,0(r3)
    da18:	80800015 	stw	r2,0(r16)
    da1c:	1805883a 	mov	r2,r3
    da20:	dfc00317 	ldw	ra,12(sp)
    da24:	dc800217 	ldw	r18,8(sp)
    da28:	dc400117 	ldw	r17,4(sp)
    da2c:	dc000017 	ldw	r16,0(sp)
    da30:	dec00404 	addi	sp,sp,16
    da34:	f800283a 	ret
    da38:	1809883a 	mov	r4,r3
    da3c:	000b1bc0 	call	b1bc <__sinit>
    da40:	80800217 	ldw	r2,8(r16)
    da44:	10ffffc4 	addi	r3,r2,-1
    da48:	80c00215 	stw	r3,8(r16)
    da4c:	183fed0e 	bge	r3,zero,da04 <putc+0x44>
    da50:	80800617 	ldw	r2,24(r16)
    da54:	18800f16 	blt	r3,r2,da94 <putc+0xd4>
    da58:	80800017 	ldw	r2,0(r16)
    da5c:	14400005 	stb	r17,0(r2)
    da60:	81000017 	ldw	r4,0(r16)
    da64:	00800284 	movi	r2,10
    da68:	20c00003 	ldbu	r3,0(r4)
    da6c:	18801226 	beq	r3,r2,dab8 <putc+0xf8>
    da70:	20800044 	addi	r2,r4,1
    da74:	80800015 	stw	r2,0(r16)
    da78:	1805883a 	mov	r2,r3
    da7c:	dfc00317 	ldw	ra,12(sp)
    da80:	dc800217 	ldw	r18,8(sp)
    da84:	dc400117 	ldw	r17,4(sp)
    da88:	dc000017 	ldw	r16,0(sp)
    da8c:	dec00404 	addi	sp,sp,16
    da90:	f800283a 	ret
    da94:	91000017 	ldw	r4,0(r18)
    da98:	880b883a 	mov	r5,r17
    da9c:	800d883a 	mov	r6,r16
    daa0:	dfc00317 	ldw	ra,12(sp)
    daa4:	dc800217 	ldw	r18,8(sp)
    daa8:	dc400117 	ldw	r17,4(sp)
    daac:	dc000017 	ldw	r16,0(sp)
    dab0:	dec00404 	addi	sp,sp,16
    dab4:	000e4881 	jmpi	e488 <__swbuf_r>
    dab8:	91000017 	ldw	r4,0(r18)
    dabc:	180b883a 	mov	r5,r3
    dac0:	003ff606 	br	da9c <putc+0xdc>

0000dac4 <_putc_r>:
    dac4:	defffc04 	addi	sp,sp,-16
    dac8:	dc400215 	stw	r17,8(sp)
    dacc:	dc000115 	stw	r16,4(sp)
    dad0:	dfc00315 	stw	ra,12(sp)
    dad4:	2021883a 	mov	r16,r4
    dad8:	2823883a 	mov	r17,r5
    dadc:	20000226 	beq	r4,zero,dae8 <_putc_r+0x24>
    dae0:	20800e17 	ldw	r2,56(r4)
    dae4:	10001026 	beq	r2,zero,db28 <_putc_r+0x64>
    dae8:	30800217 	ldw	r2,8(r6)
    daec:	10ffffc4 	addi	r3,r2,-1
    daf0:	30c00215 	stw	r3,8(r6)
    daf4:	18001316 	blt	r3,zero,db44 <_putc_r+0x80>
    daf8:	30800017 	ldw	r2,0(r6)
    dafc:	14400005 	stb	r17,0(r2)
    db00:	30c00017 	ldw	r3,0(r6)
    db04:	18800044 	addi	r2,r3,1
    db08:	18c00003 	ldbu	r3,0(r3)
    db0c:	30800015 	stw	r2,0(r6)
    db10:	1805883a 	mov	r2,r3
    db14:	dfc00317 	ldw	ra,12(sp)
    db18:	dc400217 	ldw	r17,8(sp)
    db1c:	dc000117 	ldw	r16,4(sp)
    db20:	dec00404 	addi	sp,sp,16
    db24:	f800283a 	ret
    db28:	d9800015 	stw	r6,0(sp)
    db2c:	000b1bc0 	call	b1bc <__sinit>
    db30:	d9800017 	ldw	r6,0(sp)
    db34:	30800217 	ldw	r2,8(r6)
    db38:	10ffffc4 	addi	r3,r2,-1
    db3c:	30c00215 	stw	r3,8(r6)
    db40:	183fed0e 	bge	r3,zero,daf8 <_putc_r+0x34>
    db44:	30800617 	ldw	r2,24(r6)
    db48:	18800e16 	blt	r3,r2,db84 <_putc_r+0xc0>
    db4c:	30800017 	ldw	r2,0(r6)
    db50:	14400005 	stb	r17,0(r2)
    db54:	31000017 	ldw	r4,0(r6)
    db58:	00800284 	movi	r2,10
    db5c:	20c00003 	ldbu	r3,0(r4)
    db60:	18800f26 	beq	r3,r2,dba0 <_putc_r+0xdc>
    db64:	20800044 	addi	r2,r4,1
    db68:	30800015 	stw	r2,0(r6)
    db6c:	1805883a 	mov	r2,r3
    db70:	dfc00317 	ldw	ra,12(sp)
    db74:	dc400217 	ldw	r17,8(sp)
    db78:	dc000117 	ldw	r16,4(sp)
    db7c:	dec00404 	addi	sp,sp,16
    db80:	f800283a 	ret
    db84:	8009883a 	mov	r4,r16
    db88:	880b883a 	mov	r5,r17
    db8c:	dfc00317 	ldw	ra,12(sp)
    db90:	dc400217 	ldw	r17,8(sp)
    db94:	dc000117 	ldw	r16,4(sp)
    db98:	dec00404 	addi	sp,sp,16
    db9c:	000e4881 	jmpi	e488 <__swbuf_r>
    dba0:	8009883a 	mov	r4,r16
    dba4:	180b883a 	mov	r5,r3
    dba8:	003ff806 	br	db8c <_putc_r+0xc8>

0000dbac <_realloc_r>:
    dbac:	defff404 	addi	sp,sp,-48
    dbb0:	dd800815 	stw	r22,32(sp)
    dbb4:	dc800415 	stw	r18,16(sp)
    dbb8:	dc400315 	stw	r17,12(sp)
    dbbc:	dfc00b15 	stw	ra,44(sp)
    dbc0:	df000a15 	stw	fp,40(sp)
    dbc4:	ddc00915 	stw	r23,36(sp)
    dbc8:	dd400715 	stw	r21,28(sp)
    dbcc:	dd000615 	stw	r20,24(sp)
    dbd0:	dcc00515 	stw	r19,20(sp)
    dbd4:	dc000215 	stw	r16,8(sp)
    dbd8:	2825883a 	mov	r18,r5
    dbdc:	3023883a 	mov	r17,r6
    dbe0:	202d883a 	mov	r22,r4
    dbe4:	2800c926 	beq	r5,zero,df0c <_realloc_r+0x360>
    dbe8:	001008c0 	call	1008c <__malloc_lock>
    dbec:	943ffe04 	addi	r16,r18,-8
    dbf0:	88c002c4 	addi	r3,r17,11
    dbf4:	00800584 	movi	r2,22
    dbf8:	82000117 	ldw	r8,4(r16)
    dbfc:	10c01b2e 	bgeu	r2,r3,dc6c <_realloc_r+0xc0>
    dc00:	00bffe04 	movi	r2,-8
    dc04:	188e703a 	and	r7,r3,r2
    dc08:	3839883a 	mov	fp,r7
    dc0c:	38001a16 	blt	r7,zero,dc78 <_realloc_r+0xcc>
    dc10:	e4401936 	bltu	fp,r17,dc78 <_realloc_r+0xcc>
    dc14:	013fff04 	movi	r4,-4
    dc18:	4126703a 	and	r19,r8,r4
    dc1c:	99c02616 	blt	r19,r7,dcb8 <_realloc_r+0x10c>
    dc20:	802b883a 	mov	r21,r16
    dc24:	9829883a 	mov	r20,r19
    dc28:	84000204 	addi	r16,r16,8
    dc2c:	a80f883a 	mov	r7,r21
    dc30:	a70dc83a 	sub	r6,r20,fp
    dc34:	008003c4 	movi	r2,15
    dc38:	1180c136 	bltu	r2,r6,df40 <_realloc_r+0x394>
    dc3c:	38800117 	ldw	r2,4(r7)
    dc40:	a549883a 	add	r4,r20,r21
    dc44:	1080004c 	andi	r2,r2,1
    dc48:	a084b03a 	or	r2,r20,r2
    dc4c:	38800115 	stw	r2,4(r7)
    dc50:	20c00117 	ldw	r3,4(r4)
    dc54:	18c00054 	ori	r3,r3,1
    dc58:	20c00115 	stw	r3,4(r4)
    dc5c:	b009883a 	mov	r4,r22
    dc60:	00100ac0 	call	100ac <__malloc_unlock>
    dc64:	8023883a 	mov	r17,r16
    dc68:	00000606 	br	dc84 <_realloc_r+0xd8>
    dc6c:	01c00404 	movi	r7,16
    dc70:	3839883a 	mov	fp,r7
    dc74:	e47fe72e 	bgeu	fp,r17,dc14 <_realloc_r+0x68>
    dc78:	00800304 	movi	r2,12
    dc7c:	0023883a 	mov	r17,zero
    dc80:	b0800015 	stw	r2,0(r22)
    dc84:	8805883a 	mov	r2,r17
    dc88:	dfc00b17 	ldw	ra,44(sp)
    dc8c:	df000a17 	ldw	fp,40(sp)
    dc90:	ddc00917 	ldw	r23,36(sp)
    dc94:	dd800817 	ldw	r22,32(sp)
    dc98:	dd400717 	ldw	r21,28(sp)
    dc9c:	dd000617 	ldw	r20,24(sp)
    dca0:	dcc00517 	ldw	r19,20(sp)
    dca4:	dc800417 	ldw	r18,16(sp)
    dca8:	dc400317 	ldw	r17,12(sp)
    dcac:	dc000217 	ldw	r16,8(sp)
    dcb0:	dec00c04 	addi	sp,sp,48
    dcb4:	f800283a 	ret
    dcb8:	00820034 	movhi	r2,2048
    dcbc:	10834804 	addi	r2,r2,3360
    dcc0:	12400217 	ldw	r9,8(r2)
    dcc4:	84cd883a 	add	r6,r16,r19
    dcc8:	802b883a 	mov	r21,r16
    dccc:	3240b926 	beq	r6,r9,dfb4 <_realloc_r+0x408>
    dcd0:	31400117 	ldw	r5,4(r6)
    dcd4:	00bfff84 	movi	r2,-2
    dcd8:	2884703a 	and	r2,r5,r2
    dcdc:	1185883a 	add	r2,r2,r6
    dce0:	10c00117 	ldw	r3,4(r2)
    dce4:	18c0004c 	andi	r3,r3,1
    dce8:	1807003a 	cmpeq	r3,r3,zero
    dcec:	1800a326 	beq	r3,zero,df7c <_realloc_r+0x3d0>
    dcf0:	2908703a 	and	r4,r5,r4
    dcf4:	9929883a 	add	r20,r19,r4
    dcf8:	a1c0a30e 	bge	r20,r7,df88 <_realloc_r+0x3dc>
    dcfc:	4080004c 	andi	r2,r8,1
    dd00:	1000551e 	bne	r2,zero,de58 <_realloc_r+0x2ac>
    dd04:	80800017 	ldw	r2,0(r16)
    dd08:	80afc83a 	sub	r23,r16,r2
    dd0c:	b8c00117 	ldw	r3,4(r23)
    dd10:	00bfff04 	movi	r2,-4
    dd14:	1884703a 	and	r2,r3,r2
    dd18:	30002e26 	beq	r6,zero,ddd4 <_realloc_r+0x228>
    dd1c:	3240b926 	beq	r6,r9,e004 <_realloc_r+0x458>
    dd20:	98a9883a 	add	r20,r19,r2
    dd24:	2509883a 	add	r4,r4,r20
    dd28:	d9000015 	stw	r4,0(sp)
    dd2c:	21c02a16 	blt	r4,r7,ddd8 <_realloc_r+0x22c>
    dd30:	30800317 	ldw	r2,12(r6)
    dd34:	30c00217 	ldw	r3,8(r6)
    dd38:	01400904 	movi	r5,36
    dd3c:	99bfff04 	addi	r6,r19,-4
    dd40:	18800315 	stw	r2,12(r3)
    dd44:	10c00215 	stw	r3,8(r2)
    dd48:	b9000317 	ldw	r4,12(r23)
    dd4c:	b8800217 	ldw	r2,8(r23)
    dd50:	b82b883a 	mov	r21,r23
    dd54:	bc000204 	addi	r16,r23,8
    dd58:	20800215 	stw	r2,8(r4)
    dd5c:	11000315 	stw	r4,12(r2)
    dd60:	2980e436 	bltu	r5,r6,e0f4 <_realloc_r+0x548>
    dd64:	008004c4 	movi	r2,19
    dd68:	9009883a 	mov	r4,r18
    dd6c:	8011883a 	mov	r8,r16
    dd70:	11800f2e 	bgeu	r2,r6,ddb0 <_realloc_r+0x204>
    dd74:	90800017 	ldw	r2,0(r18)
    dd78:	ba000404 	addi	r8,r23,16
    dd7c:	91000204 	addi	r4,r18,8
    dd80:	b8800215 	stw	r2,8(r23)
    dd84:	90c00117 	ldw	r3,4(r18)
    dd88:	008006c4 	movi	r2,27
    dd8c:	b8c00315 	stw	r3,12(r23)
    dd90:	1180072e 	bgeu	r2,r6,ddb0 <_realloc_r+0x204>
    dd94:	90c00217 	ldw	r3,8(r18)
    dd98:	ba000604 	addi	r8,r23,24
    dd9c:	91000404 	addi	r4,r18,16
    dda0:	b8c00415 	stw	r3,16(r23)
    dda4:	90800317 	ldw	r2,12(r18)
    dda8:	b8800515 	stw	r2,20(r23)
    ddac:	3140e726 	beq	r6,r5,e14c <_realloc_r+0x5a0>
    ddb0:	20800017 	ldw	r2,0(r4)
    ddb4:	dd000017 	ldw	r20,0(sp)
    ddb8:	b80f883a 	mov	r7,r23
    ddbc:	40800015 	stw	r2,0(r8)
    ddc0:	20c00117 	ldw	r3,4(r4)
    ddc4:	40c00115 	stw	r3,4(r8)
    ddc8:	20800217 	ldw	r2,8(r4)
    ddcc:	40800215 	stw	r2,8(r8)
    ddd0:	003f9706 	br	dc30 <_realloc_r+0x84>
    ddd4:	98a9883a 	add	r20,r19,r2
    ddd8:	a1c01f16 	blt	r20,r7,de58 <_realloc_r+0x2ac>
    dddc:	b8c00317 	ldw	r3,12(r23)
    dde0:	b8800217 	ldw	r2,8(r23)
    dde4:	99bfff04 	addi	r6,r19,-4
    dde8:	01400904 	movi	r5,36
    ddec:	b82b883a 	mov	r21,r23
    ddf0:	18800215 	stw	r2,8(r3)
    ddf4:	10c00315 	stw	r3,12(r2)
    ddf8:	bc000204 	addi	r16,r23,8
    ddfc:	2980c336 	bltu	r5,r6,e10c <_realloc_r+0x560>
    de00:	008004c4 	movi	r2,19
    de04:	9009883a 	mov	r4,r18
    de08:	8011883a 	mov	r8,r16
    de0c:	11800f2e 	bgeu	r2,r6,de4c <_realloc_r+0x2a0>
    de10:	90800017 	ldw	r2,0(r18)
    de14:	ba000404 	addi	r8,r23,16
    de18:	91000204 	addi	r4,r18,8
    de1c:	b8800215 	stw	r2,8(r23)
    de20:	90c00117 	ldw	r3,4(r18)
    de24:	008006c4 	movi	r2,27
    de28:	b8c00315 	stw	r3,12(r23)
    de2c:	1180072e 	bgeu	r2,r6,de4c <_realloc_r+0x2a0>
    de30:	90c00217 	ldw	r3,8(r18)
    de34:	ba000604 	addi	r8,r23,24
    de38:	91000404 	addi	r4,r18,16
    de3c:	b8c00415 	stw	r3,16(r23)
    de40:	90800317 	ldw	r2,12(r18)
    de44:	b8800515 	stw	r2,20(r23)
    de48:	3140c726 	beq	r6,r5,e168 <_realloc_r+0x5bc>
    de4c:	20800017 	ldw	r2,0(r4)
    de50:	b80f883a 	mov	r7,r23
    de54:	003fd906 	br	ddbc <_realloc_r+0x210>
    de58:	880b883a 	mov	r5,r17
    de5c:	b009883a 	mov	r4,r22
    de60:	000c0c80 	call	c0c8 <_malloc_r>
    de64:	1023883a 	mov	r17,r2
    de68:	10002526 	beq	r2,zero,df00 <_realloc_r+0x354>
    de6c:	80800117 	ldw	r2,4(r16)
    de70:	00ffff84 	movi	r3,-2
    de74:	893ffe04 	addi	r4,r17,-8
    de78:	10c4703a 	and	r2,r2,r3
    de7c:	8085883a 	add	r2,r16,r2
    de80:	20809526 	beq	r4,r2,e0d8 <_realloc_r+0x52c>
    de84:	99bfff04 	addi	r6,r19,-4
    de88:	01c00904 	movi	r7,36
    de8c:	39804536 	bltu	r7,r6,dfa4 <_realloc_r+0x3f8>
    de90:	008004c4 	movi	r2,19
    de94:	9009883a 	mov	r4,r18
    de98:	880b883a 	mov	r5,r17
    de9c:	11800f2e 	bgeu	r2,r6,dedc <_realloc_r+0x330>
    dea0:	90800017 	ldw	r2,0(r18)
    dea4:	89400204 	addi	r5,r17,8
    dea8:	91000204 	addi	r4,r18,8
    deac:	88800015 	stw	r2,0(r17)
    deb0:	90c00117 	ldw	r3,4(r18)
    deb4:	008006c4 	movi	r2,27
    deb8:	88c00115 	stw	r3,4(r17)
    debc:	1180072e 	bgeu	r2,r6,dedc <_realloc_r+0x330>
    dec0:	90c00217 	ldw	r3,8(r18)
    dec4:	89400404 	addi	r5,r17,16
    dec8:	91000404 	addi	r4,r18,16
    decc:	88c00215 	stw	r3,8(r17)
    ded0:	90800317 	ldw	r2,12(r18)
    ded4:	88800315 	stw	r2,12(r17)
    ded8:	31c09126 	beq	r6,r7,e120 <_realloc_r+0x574>
    dedc:	20800017 	ldw	r2,0(r4)
    dee0:	28800015 	stw	r2,0(r5)
    dee4:	20c00117 	ldw	r3,4(r4)
    dee8:	28c00115 	stw	r3,4(r5)
    deec:	20800217 	ldw	r2,8(r4)
    def0:	28800215 	stw	r2,8(r5)
    def4:	900b883a 	mov	r5,r18
    def8:	b009883a 	mov	r4,r22
    defc:	000b5400 	call	b540 <_free_r>
    df00:	b009883a 	mov	r4,r22
    df04:	00100ac0 	call	100ac <__malloc_unlock>
    df08:	003f5e06 	br	dc84 <_realloc_r+0xd8>
    df0c:	300b883a 	mov	r5,r6
    df10:	dfc00b17 	ldw	ra,44(sp)
    df14:	df000a17 	ldw	fp,40(sp)
    df18:	ddc00917 	ldw	r23,36(sp)
    df1c:	dd800817 	ldw	r22,32(sp)
    df20:	dd400717 	ldw	r21,28(sp)
    df24:	dd000617 	ldw	r20,24(sp)
    df28:	dcc00517 	ldw	r19,20(sp)
    df2c:	dc800417 	ldw	r18,16(sp)
    df30:	dc400317 	ldw	r17,12(sp)
    df34:	dc000217 	ldw	r16,8(sp)
    df38:	dec00c04 	addi	sp,sp,48
    df3c:	000c0c81 	jmpi	c0c8 <_malloc_r>
    df40:	38800117 	ldw	r2,4(r7)
    df44:	e54b883a 	add	r5,fp,r21
    df48:	31000054 	ori	r4,r6,1
    df4c:	1080004c 	andi	r2,r2,1
    df50:	1704b03a 	or	r2,r2,fp
    df54:	38800115 	stw	r2,4(r7)
    df58:	29000115 	stw	r4,4(r5)
    df5c:	2987883a 	add	r3,r5,r6
    df60:	18800117 	ldw	r2,4(r3)
    df64:	29400204 	addi	r5,r5,8
    df68:	b009883a 	mov	r4,r22
    df6c:	10800054 	ori	r2,r2,1
    df70:	18800115 	stw	r2,4(r3)
    df74:	000b5400 	call	b540 <_free_r>
    df78:	003f3806 	br	dc5c <_realloc_r+0xb0>
    df7c:	000d883a 	mov	r6,zero
    df80:	0009883a 	mov	r4,zero
    df84:	003f5d06 	br	dcfc <_realloc_r+0x150>
    df88:	30c00217 	ldw	r3,8(r6)
    df8c:	30800317 	ldw	r2,12(r6)
    df90:	800f883a 	mov	r7,r16
    df94:	84000204 	addi	r16,r16,8
    df98:	10c00215 	stw	r3,8(r2)
    df9c:	18800315 	stw	r2,12(r3)
    dfa0:	003f2306 	br	dc30 <_realloc_r+0x84>
    dfa4:	8809883a 	mov	r4,r17
    dfa8:	900b883a 	mov	r5,r18
    dfac:	000c8ec0 	call	c8ec <memmove>
    dfb0:	003fd006 	br	def4 <_realloc_r+0x348>
    dfb4:	30800117 	ldw	r2,4(r6)
    dfb8:	e0c00404 	addi	r3,fp,16
    dfbc:	1108703a 	and	r4,r2,r4
    dfc0:	9905883a 	add	r2,r19,r4
    dfc4:	10ff4d16 	blt	r2,r3,dcfc <_realloc_r+0x150>
    dfc8:	1705c83a 	sub	r2,r2,fp
    dfcc:	870b883a 	add	r5,r16,fp
    dfd0:	10800054 	ori	r2,r2,1
    dfd4:	28800115 	stw	r2,4(r5)
    dfd8:	80c00117 	ldw	r3,4(r16)
    dfdc:	00820034 	movhi	r2,2048
    dfe0:	10834804 	addi	r2,r2,3360
    dfe4:	b009883a 	mov	r4,r22
    dfe8:	18c0004c 	andi	r3,r3,1
    dfec:	e0c6b03a 	or	r3,fp,r3
    dff0:	11400215 	stw	r5,8(r2)
    dff4:	80c00115 	stw	r3,4(r16)
    dff8:	00100ac0 	call	100ac <__malloc_unlock>
    dffc:	84400204 	addi	r17,r16,8
    e000:	003f2006 	br	dc84 <_realloc_r+0xd8>
    e004:	98a9883a 	add	r20,r19,r2
    e008:	2509883a 	add	r4,r4,r20
    e00c:	e0800404 	addi	r2,fp,16
    e010:	d9000115 	stw	r4,4(sp)
    e014:	20bf7016 	blt	r4,r2,ddd8 <_realloc_r+0x22c>
    e018:	b8c00317 	ldw	r3,12(r23)
    e01c:	b8800217 	ldw	r2,8(r23)
    e020:	99bfff04 	addi	r6,r19,-4
    e024:	01400904 	movi	r5,36
    e028:	18800215 	stw	r2,8(r3)
    e02c:	10c00315 	stw	r3,12(r2)
    e030:	bc400204 	addi	r17,r23,8
    e034:	29804136 	bltu	r5,r6,e13c <_realloc_r+0x590>
    e038:	008004c4 	movi	r2,19
    e03c:	9009883a 	mov	r4,r18
    e040:	880f883a 	mov	r7,r17
    e044:	11800f2e 	bgeu	r2,r6,e084 <_realloc_r+0x4d8>
    e048:	90800017 	ldw	r2,0(r18)
    e04c:	b9c00404 	addi	r7,r23,16
    e050:	91000204 	addi	r4,r18,8
    e054:	b8800215 	stw	r2,8(r23)
    e058:	90c00117 	ldw	r3,4(r18)
    e05c:	008006c4 	movi	r2,27
    e060:	b8c00315 	stw	r3,12(r23)
    e064:	1180072e 	bgeu	r2,r6,e084 <_realloc_r+0x4d8>
    e068:	90c00217 	ldw	r3,8(r18)
    e06c:	b9c00604 	addi	r7,r23,24
    e070:	91000404 	addi	r4,r18,16
    e074:	b8c00415 	stw	r3,16(r23)
    e078:	90800317 	ldw	r2,12(r18)
    e07c:	b8800515 	stw	r2,20(r23)
    e080:	31404026 	beq	r6,r5,e184 <_realloc_r+0x5d8>
    e084:	20800017 	ldw	r2,0(r4)
    e088:	38800015 	stw	r2,0(r7)
    e08c:	20c00117 	ldw	r3,4(r4)
    e090:	38c00115 	stw	r3,4(r7)
    e094:	20800217 	ldw	r2,8(r4)
    e098:	38800215 	stw	r2,8(r7)
    e09c:	d8c00117 	ldw	r3,4(sp)
    e0a0:	bf0b883a 	add	r5,r23,fp
    e0a4:	b009883a 	mov	r4,r22
    e0a8:	1f05c83a 	sub	r2,r3,fp
    e0ac:	10800054 	ori	r2,r2,1
    e0b0:	28800115 	stw	r2,4(r5)
    e0b4:	b8c00117 	ldw	r3,4(r23)
    e0b8:	00820034 	movhi	r2,2048
    e0bc:	10834804 	addi	r2,r2,3360
    e0c0:	11400215 	stw	r5,8(r2)
    e0c4:	18c0004c 	andi	r3,r3,1
    e0c8:	e0c6b03a 	or	r3,fp,r3
    e0cc:	b8c00115 	stw	r3,4(r23)
    e0d0:	00100ac0 	call	100ac <__malloc_unlock>
    e0d4:	003eeb06 	br	dc84 <_realloc_r+0xd8>
    e0d8:	20800117 	ldw	r2,4(r4)
    e0dc:	00ffff04 	movi	r3,-4
    e0e0:	800f883a 	mov	r7,r16
    e0e4:	10c4703a 	and	r2,r2,r3
    e0e8:	98a9883a 	add	r20,r19,r2
    e0ec:	84000204 	addi	r16,r16,8
    e0f0:	003ecf06 	br	dc30 <_realloc_r+0x84>
    e0f4:	900b883a 	mov	r5,r18
    e0f8:	8009883a 	mov	r4,r16
    e0fc:	000c8ec0 	call	c8ec <memmove>
    e100:	dd000017 	ldw	r20,0(sp)
    e104:	b80f883a 	mov	r7,r23
    e108:	003ec906 	br	dc30 <_realloc_r+0x84>
    e10c:	900b883a 	mov	r5,r18
    e110:	8009883a 	mov	r4,r16
    e114:	000c8ec0 	call	c8ec <memmove>
    e118:	b80f883a 	mov	r7,r23
    e11c:	003ec406 	br	dc30 <_realloc_r+0x84>
    e120:	90c00417 	ldw	r3,16(r18)
    e124:	89400604 	addi	r5,r17,24
    e128:	91000604 	addi	r4,r18,24
    e12c:	88c00415 	stw	r3,16(r17)
    e130:	90800517 	ldw	r2,20(r18)
    e134:	88800515 	stw	r2,20(r17)
    e138:	003f6806 	br	dedc <_realloc_r+0x330>
    e13c:	900b883a 	mov	r5,r18
    e140:	8809883a 	mov	r4,r17
    e144:	000c8ec0 	call	c8ec <memmove>
    e148:	003fd406 	br	e09c <_realloc_r+0x4f0>
    e14c:	90c00417 	ldw	r3,16(r18)
    e150:	91000604 	addi	r4,r18,24
    e154:	ba000804 	addi	r8,r23,32
    e158:	b8c00615 	stw	r3,24(r23)
    e15c:	90800517 	ldw	r2,20(r18)
    e160:	b8800715 	stw	r2,28(r23)
    e164:	003f1206 	br	ddb0 <_realloc_r+0x204>
    e168:	90c00417 	ldw	r3,16(r18)
    e16c:	91000604 	addi	r4,r18,24
    e170:	ba000804 	addi	r8,r23,32
    e174:	b8c00615 	stw	r3,24(r23)
    e178:	90800517 	ldw	r2,20(r18)
    e17c:	b8800715 	stw	r2,28(r23)
    e180:	003f3206 	br	de4c <_realloc_r+0x2a0>
    e184:	90c00417 	ldw	r3,16(r18)
    e188:	91000604 	addi	r4,r18,24
    e18c:	b9c00804 	addi	r7,r23,32
    e190:	b8c00615 	stw	r3,24(r23)
    e194:	90800517 	ldw	r2,20(r18)
    e198:	b8800715 	stw	r2,28(r23)
    e19c:	003fb906 	br	e084 <_realloc_r+0x4d8>

0000e1a0 <__isinfd>:
    e1a0:	200d883a 	mov	r6,r4
    e1a4:	0109c83a 	sub	r4,zero,r4
    e1a8:	2188b03a 	or	r4,r4,r6
    e1ac:	2008d7fa 	srli	r4,r4,31
    e1b0:	00a00034 	movhi	r2,32768
    e1b4:	10bfffc4 	addi	r2,r2,-1
    e1b8:	1144703a 	and	r2,r2,r5
    e1bc:	2088b03a 	or	r4,r4,r2
    e1c0:	009ffc34 	movhi	r2,32752
    e1c4:	1105c83a 	sub	r2,r2,r4
    e1c8:	0087c83a 	sub	r3,zero,r2
    e1cc:	10c4b03a 	or	r2,r2,r3
    e1d0:	1004d7fa 	srli	r2,r2,31
    e1d4:	00c00044 	movi	r3,1
    e1d8:	1885c83a 	sub	r2,r3,r2
    e1dc:	f800283a 	ret

0000e1e0 <__isnand>:
    e1e0:	200d883a 	mov	r6,r4
    e1e4:	0109c83a 	sub	r4,zero,r4
    e1e8:	2188b03a 	or	r4,r4,r6
    e1ec:	2008d7fa 	srli	r4,r4,31
    e1f0:	00a00034 	movhi	r2,32768
    e1f4:	10bfffc4 	addi	r2,r2,-1
    e1f8:	1144703a 	and	r2,r2,r5
    e1fc:	2088b03a 	or	r4,r4,r2
    e200:	009ffc34 	movhi	r2,32752
    e204:	1105c83a 	sub	r2,r2,r4
    e208:	1004d7fa 	srli	r2,r2,31
    e20c:	f800283a 	ret

0000e210 <_sbrk_r>:
    e210:	defffd04 	addi	sp,sp,-12
    e214:	dc000015 	stw	r16,0(sp)
    e218:	04020034 	movhi	r16,2048
    e21c:	8409f204 	addi	r16,r16,10184
    e220:	dc400115 	stw	r17,4(sp)
    e224:	80000015 	stw	zero,0(r16)
    e228:	2023883a 	mov	r17,r4
    e22c:	2809883a 	mov	r4,r5
    e230:	dfc00215 	stw	ra,8(sp)
    e234:	00102ac0 	call	102ac <sbrk>
    e238:	1007883a 	mov	r3,r2
    e23c:	00bfffc4 	movi	r2,-1
    e240:	18800626 	beq	r3,r2,e25c <_sbrk_r+0x4c>
    e244:	1805883a 	mov	r2,r3
    e248:	dfc00217 	ldw	ra,8(sp)
    e24c:	dc400117 	ldw	r17,4(sp)
    e250:	dc000017 	ldw	r16,0(sp)
    e254:	dec00304 	addi	sp,sp,12
    e258:	f800283a 	ret
    e25c:	80800017 	ldw	r2,0(r16)
    e260:	103ff826 	beq	r2,zero,e244 <_sbrk_r+0x34>
    e264:	88800015 	stw	r2,0(r17)
    e268:	1805883a 	mov	r2,r3
    e26c:	dfc00217 	ldw	ra,8(sp)
    e270:	dc400117 	ldw	r17,4(sp)
    e274:	dc000017 	ldw	r16,0(sp)
    e278:	dec00304 	addi	sp,sp,12
    e27c:	f800283a 	ret

0000e280 <__sclose>:
    e280:	2940038f 	ldh	r5,14(r5)
    e284:	000e7001 	jmpi	e700 <_close_r>

0000e288 <__sseek>:
    e288:	defffe04 	addi	sp,sp,-8
    e28c:	dc000015 	stw	r16,0(sp)
    e290:	2821883a 	mov	r16,r5
    e294:	2940038f 	ldh	r5,14(r5)
    e298:	dfc00115 	stw	ra,4(sp)
    e29c:	000e9780 	call	e978 <_lseek_r>
    e2a0:	1007883a 	mov	r3,r2
    e2a4:	00bfffc4 	movi	r2,-1
    e2a8:	18800926 	beq	r3,r2,e2d0 <__sseek+0x48>
    e2ac:	8080030b 	ldhu	r2,12(r16)
    e2b0:	80c01415 	stw	r3,80(r16)
    e2b4:	10840014 	ori	r2,r2,4096
    e2b8:	8080030d 	sth	r2,12(r16)
    e2bc:	1805883a 	mov	r2,r3
    e2c0:	dfc00117 	ldw	ra,4(sp)
    e2c4:	dc000017 	ldw	r16,0(sp)
    e2c8:	dec00204 	addi	sp,sp,8
    e2cc:	f800283a 	ret
    e2d0:	8080030b 	ldhu	r2,12(r16)
    e2d4:	10bbffcc 	andi	r2,r2,61439
    e2d8:	8080030d 	sth	r2,12(r16)
    e2dc:	1805883a 	mov	r2,r3
    e2e0:	dfc00117 	ldw	ra,4(sp)
    e2e4:	dc000017 	ldw	r16,0(sp)
    e2e8:	dec00204 	addi	sp,sp,8
    e2ec:	f800283a 	ret

0000e2f0 <__swrite>:
    e2f0:	2880030b 	ldhu	r2,12(r5)
    e2f4:	defffb04 	addi	sp,sp,-20
    e2f8:	dcc00315 	stw	r19,12(sp)
    e2fc:	1080400c 	andi	r2,r2,256
    e300:	dc800215 	stw	r18,8(sp)
    e304:	dc400115 	stw	r17,4(sp)
    e308:	dc000015 	stw	r16,0(sp)
    e30c:	3027883a 	mov	r19,r6
    e310:	3825883a 	mov	r18,r7
    e314:	dfc00415 	stw	ra,16(sp)
    e318:	2821883a 	mov	r16,r5
    e31c:	000d883a 	mov	r6,zero
    e320:	01c00084 	movi	r7,2
    e324:	2023883a 	mov	r17,r4
    e328:	10000226 	beq	r2,zero,e334 <__swrite+0x44>
    e32c:	2940038f 	ldh	r5,14(r5)
    e330:	000e9780 	call	e978 <_lseek_r>
    e334:	8080030b 	ldhu	r2,12(r16)
    e338:	8140038f 	ldh	r5,14(r16)
    e33c:	8809883a 	mov	r4,r17
    e340:	10bbffcc 	andi	r2,r2,61439
    e344:	980d883a 	mov	r6,r19
    e348:	900f883a 	mov	r7,r18
    e34c:	8080030d 	sth	r2,12(r16)
    e350:	dfc00417 	ldw	ra,16(sp)
    e354:	dcc00317 	ldw	r19,12(sp)
    e358:	dc800217 	ldw	r18,8(sp)
    e35c:	dc400117 	ldw	r17,4(sp)
    e360:	dc000017 	ldw	r16,0(sp)
    e364:	dec00504 	addi	sp,sp,20
    e368:	000e5d41 	jmpi	e5d4 <_write_r>

0000e36c <__sread>:
    e36c:	defffe04 	addi	sp,sp,-8
    e370:	dc000015 	stw	r16,0(sp)
    e374:	2821883a 	mov	r16,r5
    e378:	2940038f 	ldh	r5,14(r5)
    e37c:	dfc00115 	stw	ra,4(sp)
    e380:	000e9f00 	call	e9f0 <_read_r>
    e384:	1007883a 	mov	r3,r2
    e388:	10000816 	blt	r2,zero,e3ac <__sread+0x40>
    e38c:	80801417 	ldw	r2,80(r16)
    e390:	10c5883a 	add	r2,r2,r3
    e394:	80801415 	stw	r2,80(r16)
    e398:	1805883a 	mov	r2,r3
    e39c:	dfc00117 	ldw	ra,4(sp)
    e3a0:	dc000017 	ldw	r16,0(sp)
    e3a4:	dec00204 	addi	sp,sp,8
    e3a8:	f800283a 	ret
    e3ac:	8080030b 	ldhu	r2,12(r16)
    e3b0:	10bbffcc 	andi	r2,r2,61439
    e3b4:	8080030d 	sth	r2,12(r16)
    e3b8:	1805883a 	mov	r2,r3
    e3bc:	dfc00117 	ldw	ra,4(sp)
    e3c0:	dc000017 	ldw	r16,0(sp)
    e3c4:	dec00204 	addi	sp,sp,8
    e3c8:	f800283a 	ret

0000e3cc <strcmp>:
    e3cc:	2144b03a 	or	r2,r4,r5
    e3d0:	108000cc 	andi	r2,r2,3
    e3d4:	10001d1e 	bne	r2,zero,e44c <strcmp+0x80>
    e3d8:	200f883a 	mov	r7,r4
    e3dc:	28800017 	ldw	r2,0(r5)
    e3e0:	21000017 	ldw	r4,0(r4)
    e3e4:	280d883a 	mov	r6,r5
    e3e8:	2080161e 	bne	r4,r2,e444 <strcmp+0x78>
    e3ec:	023fbff4 	movhi	r8,65279
    e3f0:	423fbfc4 	addi	r8,r8,-257
    e3f4:	2207883a 	add	r3,r4,r8
    e3f8:	01602074 	movhi	r5,32897
    e3fc:	29602004 	addi	r5,r5,-32640
    e400:	1946703a 	and	r3,r3,r5
    e404:	0104303a 	nor	r2,zero,r4
    e408:	10c4703a 	and	r2,r2,r3
    e40c:	10001c1e 	bne	r2,zero,e480 <strcmp+0xb4>
    e410:	4013883a 	mov	r9,r8
    e414:	2811883a 	mov	r8,r5
    e418:	00000106 	br	e420 <strcmp+0x54>
    e41c:	1800181e 	bne	r3,zero,e480 <strcmp+0xb4>
    e420:	39c00104 	addi	r7,r7,4
    e424:	39000017 	ldw	r4,0(r7)
    e428:	31800104 	addi	r6,r6,4
    e42c:	31400017 	ldw	r5,0(r6)
    e430:	2245883a 	add	r2,r4,r9
    e434:	1204703a 	and	r2,r2,r8
    e438:	0106303a 	nor	r3,zero,r4
    e43c:	1886703a 	and	r3,r3,r2
    e440:	217ff626 	beq	r4,r5,e41c <strcmp+0x50>
    e444:	3809883a 	mov	r4,r7
    e448:	300b883a 	mov	r5,r6
    e44c:	20c00007 	ldb	r3,0(r4)
    e450:	1800051e 	bne	r3,zero,e468 <strcmp+0x9c>
    e454:	00000606 	br	e470 <strcmp+0xa4>
    e458:	21000044 	addi	r4,r4,1
    e45c:	20c00007 	ldb	r3,0(r4)
    e460:	29400044 	addi	r5,r5,1
    e464:	18000226 	beq	r3,zero,e470 <strcmp+0xa4>
    e468:	28800007 	ldb	r2,0(r5)
    e46c:	18bffa26 	beq	r3,r2,e458 <strcmp+0x8c>
    e470:	20c00003 	ldbu	r3,0(r4)
    e474:	28800003 	ldbu	r2,0(r5)
    e478:	1885c83a 	sub	r2,r3,r2
    e47c:	f800283a 	ret
    e480:	0005883a 	mov	r2,zero
    e484:	f800283a 	ret

0000e488 <__swbuf_r>:
    e488:	defffc04 	addi	sp,sp,-16
    e48c:	dc400215 	stw	r17,8(sp)
    e490:	dc000115 	stw	r16,4(sp)
    e494:	dfc00315 	stw	ra,12(sp)
    e498:	2023883a 	mov	r17,r4
    e49c:	2821883a 	mov	r16,r5
    e4a0:	20000226 	beq	r4,zero,e4ac <__swbuf_r+0x24>
    e4a4:	20800e17 	ldw	r2,56(r4)
    e4a8:	10002f26 	beq	r2,zero,e568 <__swbuf_r+0xe0>
    e4ac:	3080030b 	ldhu	r2,12(r6)
    e4b0:	30c00617 	ldw	r3,24(r6)
    e4b4:	1080020c 	andi	r2,r2,8
    e4b8:	30c00215 	stw	r3,8(r6)
    e4bc:	10002226 	beq	r2,zero,e548 <__swbuf_r+0xc0>
    e4c0:	30c00417 	ldw	r3,16(r6)
    e4c4:	18002026 	beq	r3,zero,e548 <__swbuf_r+0xc0>
    e4c8:	31000017 	ldw	r4,0(r6)
    e4cc:	30800517 	ldw	r2,20(r6)
    e4d0:	20c7c83a 	sub	r3,r4,r3
    e4d4:	18802f0e 	bge	r3,r2,e594 <__swbuf_r+0x10c>
    e4d8:	19400044 	addi	r5,r3,1
    e4dc:	30800217 	ldw	r2,8(r6)
    e4e0:	84003fcc 	andi	r16,r16,255
    e4e4:	20c00044 	addi	r3,r4,1
    e4e8:	10bfffc4 	addi	r2,r2,-1
    e4ec:	30800215 	stw	r2,8(r6)
    e4f0:	24000005 	stb	r16,0(r4)
    e4f4:	30800517 	ldw	r2,20(r6)
    e4f8:	30c00015 	stw	r3,0(r6)
    e4fc:	11400c26 	beq	r2,r5,e530 <__swbuf_r+0xa8>
    e500:	3080030b 	ldhu	r2,12(r6)
    e504:	1080004c 	andi	r2,r2,1
    e508:	1005003a 	cmpeq	r2,r2,zero
    e50c:	10000626 	beq	r2,zero,e528 <__swbuf_r+0xa0>
    e510:	8005883a 	mov	r2,r16
    e514:	dfc00317 	ldw	ra,12(sp)
    e518:	dc400217 	ldw	r17,8(sp)
    e51c:	dc000117 	ldw	r16,4(sp)
    e520:	dec00404 	addi	sp,sp,16
    e524:	f800283a 	ret
    e528:	00800284 	movi	r2,10
    e52c:	80bff81e 	bne	r16,r2,e510 <__swbuf_r+0x88>
    e530:	8809883a 	mov	r4,r17
    e534:	300b883a 	mov	r5,r6
    e538:	000af240 	call	af24 <_fflush_r>
    e53c:	103ff426 	beq	r2,zero,e510 <__swbuf_r+0x88>
    e540:	043fffc4 	movi	r16,-1
    e544:	003ff206 	br	e510 <__swbuf_r+0x88>
    e548:	300b883a 	mov	r5,r6
    e54c:	8809883a 	mov	r4,r17
    e550:	d9800015 	stw	r6,0(sp)
    e554:	000961c0 	call	961c <__swsetup_r>
    e558:	d9800017 	ldw	r6,0(sp)
    e55c:	1000061e 	bne	r2,zero,e578 <__swbuf_r+0xf0>
    e560:	30c00417 	ldw	r3,16(r6)
    e564:	003fd806 	br	e4c8 <__swbuf_r+0x40>
    e568:	d9800015 	stw	r6,0(sp)
    e56c:	000b1bc0 	call	b1bc <__sinit>
    e570:	d9800017 	ldw	r6,0(sp)
    e574:	003fcd06 	br	e4ac <__swbuf_r+0x24>
    e578:	3080030b 	ldhu	r2,12(r6)
    e57c:	00c00244 	movi	r3,9
    e580:	043fffc4 	movi	r16,-1
    e584:	10801014 	ori	r2,r2,64
    e588:	3080030d 	sth	r2,12(r6)
    e58c:	88c00015 	stw	r3,0(r17)
    e590:	003fdf06 	br	e510 <__swbuf_r+0x88>
    e594:	300b883a 	mov	r5,r6
    e598:	8809883a 	mov	r4,r17
    e59c:	d9800015 	stw	r6,0(sp)
    e5a0:	000af240 	call	af24 <_fflush_r>
    e5a4:	d9800017 	ldw	r6,0(sp)
    e5a8:	103fe51e 	bne	r2,zero,e540 <__swbuf_r+0xb8>
    e5ac:	31000017 	ldw	r4,0(r6)
    e5b0:	01400044 	movi	r5,1
    e5b4:	003fc906 	br	e4dc <__swbuf_r+0x54>

0000e5b8 <__swbuf>:
    e5b8:	01820034 	movhi	r6,2048
    e5bc:	3189ba04 	addi	r6,r6,9960
    e5c0:	2007883a 	mov	r3,r4
    e5c4:	31000017 	ldw	r4,0(r6)
    e5c8:	280d883a 	mov	r6,r5
    e5cc:	180b883a 	mov	r5,r3
    e5d0:	000e4881 	jmpi	e488 <__swbuf_r>

0000e5d4 <_write_r>:
    e5d4:	defffd04 	addi	sp,sp,-12
    e5d8:	dc000015 	stw	r16,0(sp)
    e5dc:	04020034 	movhi	r16,2048
    e5e0:	8409f204 	addi	r16,r16,10184
    e5e4:	dc400115 	stw	r17,4(sp)
    e5e8:	80000015 	stw	zero,0(r16)
    e5ec:	2023883a 	mov	r17,r4
    e5f0:	2809883a 	mov	r4,r5
    e5f4:	300b883a 	mov	r5,r6
    e5f8:	380d883a 	mov	r6,r7
    e5fc:	dfc00215 	stw	ra,8(sp)
    e600:	00103680 	call	10368 <write>
    e604:	1007883a 	mov	r3,r2
    e608:	00bfffc4 	movi	r2,-1
    e60c:	18800626 	beq	r3,r2,e628 <_write_r+0x54>
    e610:	1805883a 	mov	r2,r3
    e614:	dfc00217 	ldw	ra,8(sp)
    e618:	dc400117 	ldw	r17,4(sp)
    e61c:	dc000017 	ldw	r16,0(sp)
    e620:	dec00304 	addi	sp,sp,12
    e624:	f800283a 	ret
    e628:	80800017 	ldw	r2,0(r16)
    e62c:	103ff826 	beq	r2,zero,e610 <_write_r+0x3c>
    e630:	88800015 	stw	r2,0(r17)
    e634:	1805883a 	mov	r2,r3
    e638:	dfc00217 	ldw	ra,8(sp)
    e63c:	dc400117 	ldw	r17,4(sp)
    e640:	dc000017 	ldw	r16,0(sp)
    e644:	dec00304 	addi	sp,sp,12
    e648:	f800283a 	ret

0000e64c <_calloc_r>:
    e64c:	298b383a 	mul	r5,r5,r6
    e650:	defffe04 	addi	sp,sp,-8
    e654:	dc000015 	stw	r16,0(sp)
    e658:	dfc00115 	stw	ra,4(sp)
    e65c:	000c0c80 	call	c0c8 <_malloc_r>
    e660:	1021883a 	mov	r16,r2
    e664:	01c00904 	movi	r7,36
    e668:	10000d26 	beq	r2,zero,e6a0 <_calloc_r+0x54>
    e66c:	10ffff17 	ldw	r3,-4(r2)
    e670:	1009883a 	mov	r4,r2
    e674:	00bfff04 	movi	r2,-4
    e678:	1886703a 	and	r3,r3,r2
    e67c:	1887883a 	add	r3,r3,r2
    e680:	180d883a 	mov	r6,r3
    e684:	000b883a 	mov	r5,zero
    e688:	38c01736 	bltu	r7,r3,e6e8 <_calloc_r+0x9c>
    e68c:	008004c4 	movi	r2,19
    e690:	10c00836 	bltu	r2,r3,e6b4 <_calloc_r+0x68>
    e694:	20000215 	stw	zero,8(r4)
    e698:	20000015 	stw	zero,0(r4)
    e69c:	20000115 	stw	zero,4(r4)
    e6a0:	8005883a 	mov	r2,r16
    e6a4:	dfc00117 	ldw	ra,4(sp)
    e6a8:	dc000017 	ldw	r16,0(sp)
    e6ac:	dec00204 	addi	sp,sp,8
    e6b0:	f800283a 	ret
    e6b4:	008006c4 	movi	r2,27
    e6b8:	80000015 	stw	zero,0(r16)
    e6bc:	80000115 	stw	zero,4(r16)
    e6c0:	81000204 	addi	r4,r16,8
    e6c4:	10fff32e 	bgeu	r2,r3,e694 <_calloc_r+0x48>
    e6c8:	80000215 	stw	zero,8(r16)
    e6cc:	80000315 	stw	zero,12(r16)
    e6d0:	81000404 	addi	r4,r16,16
    e6d4:	19ffef1e 	bne	r3,r7,e694 <_calloc_r+0x48>
    e6d8:	81000604 	addi	r4,r16,24
    e6dc:	80000415 	stw	zero,16(r16)
    e6e0:	80000515 	stw	zero,20(r16)
    e6e4:	003feb06 	br	e694 <_calloc_r+0x48>
    e6e8:	00073c40 	call	73c4 <memset>
    e6ec:	8005883a 	mov	r2,r16
    e6f0:	dfc00117 	ldw	ra,4(sp)
    e6f4:	dc000017 	ldw	r16,0(sp)
    e6f8:	dec00204 	addi	sp,sp,8
    e6fc:	f800283a 	ret

0000e700 <_close_r>:
    e700:	defffd04 	addi	sp,sp,-12
    e704:	dc000015 	stw	r16,0(sp)
    e708:	04020034 	movhi	r16,2048
    e70c:	8409f204 	addi	r16,r16,10184
    e710:	dc400115 	stw	r17,4(sp)
    e714:	80000015 	stw	zero,0(r16)
    e718:	2023883a 	mov	r17,r4
    e71c:	2809883a 	mov	r4,r5
    e720:	dfc00215 	stw	ra,8(sp)
    e724:	000faf40 	call	faf4 <close>
    e728:	1007883a 	mov	r3,r2
    e72c:	00bfffc4 	movi	r2,-1
    e730:	18800626 	beq	r3,r2,e74c <_close_r+0x4c>
    e734:	1805883a 	mov	r2,r3
    e738:	dfc00217 	ldw	ra,8(sp)
    e73c:	dc400117 	ldw	r17,4(sp)
    e740:	dc000017 	ldw	r16,0(sp)
    e744:	dec00304 	addi	sp,sp,12
    e748:	f800283a 	ret
    e74c:	80800017 	ldw	r2,0(r16)
    e750:	103ff826 	beq	r2,zero,e734 <_close_r+0x34>
    e754:	88800015 	stw	r2,0(r17)
    e758:	1805883a 	mov	r2,r3
    e75c:	dfc00217 	ldw	ra,8(sp)
    e760:	dc400117 	ldw	r17,4(sp)
    e764:	dc000017 	ldw	r16,0(sp)
    e768:	dec00304 	addi	sp,sp,12
    e76c:	f800283a 	ret

0000e770 <_fclose_r>:
    e770:	defffc04 	addi	sp,sp,-16
    e774:	dc400115 	stw	r17,4(sp)
    e778:	dc000015 	stw	r16,0(sp)
    e77c:	dfc00315 	stw	ra,12(sp)
    e780:	dc800215 	stw	r18,8(sp)
    e784:	2821883a 	mov	r16,r5
    e788:	2023883a 	mov	r17,r4
    e78c:	28002926 	beq	r5,zero,e834 <_fclose_r+0xc4>
    e790:	000b1ac0 	call	b1ac <__sfp_lock_acquire>
    e794:	88000226 	beq	r17,zero,e7a0 <_fclose_r+0x30>
    e798:	88800e17 	ldw	r2,56(r17)
    e79c:	10002d26 	beq	r2,zero,e854 <_fclose_r+0xe4>
    e7a0:	8080030f 	ldh	r2,12(r16)
    e7a4:	10002226 	beq	r2,zero,e830 <_fclose_r+0xc0>
    e7a8:	8809883a 	mov	r4,r17
    e7ac:	800b883a 	mov	r5,r16
    e7b0:	000af240 	call	af24 <_fflush_r>
    e7b4:	1025883a 	mov	r18,r2
    e7b8:	80800b17 	ldw	r2,44(r16)
    e7bc:	10000426 	beq	r2,zero,e7d0 <_fclose_r+0x60>
    e7c0:	81400717 	ldw	r5,28(r16)
    e7c4:	8809883a 	mov	r4,r17
    e7c8:	103ee83a 	callr	r2
    e7cc:	10002a16 	blt	r2,zero,e878 <_fclose_r+0x108>
    e7d0:	8080030b 	ldhu	r2,12(r16)
    e7d4:	1080200c 	andi	r2,r2,128
    e7d8:	1000231e 	bne	r2,zero,e868 <_fclose_r+0xf8>
    e7dc:	81400c17 	ldw	r5,48(r16)
    e7e0:	28000526 	beq	r5,zero,e7f8 <_fclose_r+0x88>
    e7e4:	80801004 	addi	r2,r16,64
    e7e8:	28800226 	beq	r5,r2,e7f4 <_fclose_r+0x84>
    e7ec:	8809883a 	mov	r4,r17
    e7f0:	000b5400 	call	b540 <_free_r>
    e7f4:	80000c15 	stw	zero,48(r16)
    e7f8:	81401117 	ldw	r5,68(r16)
    e7fc:	28000326 	beq	r5,zero,e80c <_fclose_r+0x9c>
    e800:	8809883a 	mov	r4,r17
    e804:	000b5400 	call	b540 <_free_r>
    e808:	80001115 	stw	zero,68(r16)
    e80c:	8000030d 	sth	zero,12(r16)
    e810:	000b1b00 	call	b1b0 <__sfp_lock_release>
    e814:	9005883a 	mov	r2,r18
    e818:	dfc00317 	ldw	ra,12(sp)
    e81c:	dc800217 	ldw	r18,8(sp)
    e820:	dc400117 	ldw	r17,4(sp)
    e824:	dc000017 	ldw	r16,0(sp)
    e828:	dec00404 	addi	sp,sp,16
    e82c:	f800283a 	ret
    e830:	000b1b00 	call	b1b0 <__sfp_lock_release>
    e834:	0025883a 	mov	r18,zero
    e838:	9005883a 	mov	r2,r18
    e83c:	dfc00317 	ldw	ra,12(sp)
    e840:	dc800217 	ldw	r18,8(sp)
    e844:	dc400117 	ldw	r17,4(sp)
    e848:	dc000017 	ldw	r16,0(sp)
    e84c:	dec00404 	addi	sp,sp,16
    e850:	f800283a 	ret
    e854:	8809883a 	mov	r4,r17
    e858:	000b1bc0 	call	b1bc <__sinit>
    e85c:	8080030f 	ldh	r2,12(r16)
    e860:	103fd11e 	bne	r2,zero,e7a8 <_fclose_r+0x38>
    e864:	003ff206 	br	e830 <_fclose_r+0xc0>
    e868:	81400417 	ldw	r5,16(r16)
    e86c:	8809883a 	mov	r4,r17
    e870:	000b5400 	call	b540 <_free_r>
    e874:	003fd906 	br	e7dc <_fclose_r+0x6c>
    e878:	04bfffc4 	movi	r18,-1
    e87c:	003fd406 	br	e7d0 <_fclose_r+0x60>

0000e880 <fclose>:
    e880:	00820034 	movhi	r2,2048
    e884:	1089ba04 	addi	r2,r2,9960
    e888:	200b883a 	mov	r5,r4
    e88c:	11000017 	ldw	r4,0(r2)
    e890:	000e7701 	jmpi	e770 <_fclose_r>

0000e894 <_fstat_r>:
    e894:	defffd04 	addi	sp,sp,-12
    e898:	dc000015 	stw	r16,0(sp)
    e89c:	04020034 	movhi	r16,2048
    e8a0:	8409f204 	addi	r16,r16,10184
    e8a4:	dc400115 	stw	r17,4(sp)
    e8a8:	80000015 	stw	zero,0(r16)
    e8ac:	2023883a 	mov	r17,r4
    e8b0:	2809883a 	mov	r4,r5
    e8b4:	300b883a 	mov	r5,r6
    e8b8:	dfc00215 	stw	ra,8(sp)
    e8bc:	000fc7c0 	call	fc7c <fstat>
    e8c0:	1007883a 	mov	r3,r2
    e8c4:	00bfffc4 	movi	r2,-1
    e8c8:	18800626 	beq	r3,r2,e8e4 <_fstat_r+0x50>
    e8cc:	1805883a 	mov	r2,r3
    e8d0:	dfc00217 	ldw	ra,8(sp)
    e8d4:	dc400117 	ldw	r17,4(sp)
    e8d8:	dc000017 	ldw	r16,0(sp)
    e8dc:	dec00304 	addi	sp,sp,12
    e8e0:	f800283a 	ret
    e8e4:	80800017 	ldw	r2,0(r16)
    e8e8:	103ff826 	beq	r2,zero,e8cc <_fstat_r+0x38>
    e8ec:	88800015 	stw	r2,0(r17)
    e8f0:	1805883a 	mov	r2,r3
    e8f4:	dfc00217 	ldw	ra,8(sp)
    e8f8:	dc400117 	ldw	r17,4(sp)
    e8fc:	dc000017 	ldw	r16,0(sp)
    e900:	dec00304 	addi	sp,sp,12
    e904:	f800283a 	ret

0000e908 <_isatty_r>:
    e908:	defffd04 	addi	sp,sp,-12
    e90c:	dc000015 	stw	r16,0(sp)
    e910:	04020034 	movhi	r16,2048
    e914:	8409f204 	addi	r16,r16,10184
    e918:	dc400115 	stw	r17,4(sp)
    e91c:	80000015 	stw	zero,0(r16)
    e920:	2023883a 	mov	r17,r4
    e924:	2809883a 	mov	r4,r5
    e928:	dfc00215 	stw	ra,8(sp)
    e92c:	000fdb00 	call	fdb0 <isatty>
    e930:	1007883a 	mov	r3,r2
    e934:	00bfffc4 	movi	r2,-1
    e938:	18800626 	beq	r3,r2,e954 <_isatty_r+0x4c>
    e93c:	1805883a 	mov	r2,r3
    e940:	dfc00217 	ldw	ra,8(sp)
    e944:	dc400117 	ldw	r17,4(sp)
    e948:	dc000017 	ldw	r16,0(sp)
    e94c:	dec00304 	addi	sp,sp,12
    e950:	f800283a 	ret
    e954:	80800017 	ldw	r2,0(r16)
    e958:	103ff826 	beq	r2,zero,e93c <_isatty_r+0x34>
    e95c:	88800015 	stw	r2,0(r17)
    e960:	1805883a 	mov	r2,r3
    e964:	dfc00217 	ldw	ra,8(sp)
    e968:	dc400117 	ldw	r17,4(sp)
    e96c:	dc000017 	ldw	r16,0(sp)
    e970:	dec00304 	addi	sp,sp,12
    e974:	f800283a 	ret

0000e978 <_lseek_r>:
    e978:	defffd04 	addi	sp,sp,-12
    e97c:	dc000015 	stw	r16,0(sp)
    e980:	04020034 	movhi	r16,2048
    e984:	8409f204 	addi	r16,r16,10184
    e988:	dc400115 	stw	r17,4(sp)
    e98c:	80000015 	stw	zero,0(r16)
    e990:	2023883a 	mov	r17,r4
    e994:	2809883a 	mov	r4,r5
    e998:	300b883a 	mov	r5,r6
    e99c:	380d883a 	mov	r6,r7
    e9a0:	dfc00215 	stw	ra,8(sp)
    e9a4:	000fed00 	call	fed0 <lseek>
    e9a8:	1007883a 	mov	r3,r2
    e9ac:	00bfffc4 	movi	r2,-1
    e9b0:	18800626 	beq	r3,r2,e9cc <_lseek_r+0x54>
    e9b4:	1805883a 	mov	r2,r3
    e9b8:	dfc00217 	ldw	ra,8(sp)
    e9bc:	dc400117 	ldw	r17,4(sp)
    e9c0:	dc000017 	ldw	r16,0(sp)
    e9c4:	dec00304 	addi	sp,sp,12
    e9c8:	f800283a 	ret
    e9cc:	80800017 	ldw	r2,0(r16)
    e9d0:	103ff826 	beq	r2,zero,e9b4 <_lseek_r+0x3c>
    e9d4:	88800015 	stw	r2,0(r17)
    e9d8:	1805883a 	mov	r2,r3
    e9dc:	dfc00217 	ldw	ra,8(sp)
    e9e0:	dc400117 	ldw	r17,4(sp)
    e9e4:	dc000017 	ldw	r16,0(sp)
    e9e8:	dec00304 	addi	sp,sp,12
    e9ec:	f800283a 	ret

0000e9f0 <_read_r>:
    e9f0:	defffd04 	addi	sp,sp,-12
    e9f4:	dc000015 	stw	r16,0(sp)
    e9f8:	04020034 	movhi	r16,2048
    e9fc:	8409f204 	addi	r16,r16,10184
    ea00:	dc400115 	stw	r17,4(sp)
    ea04:	80000015 	stw	zero,0(r16)
    ea08:	2023883a 	mov	r17,r4
    ea0c:	2809883a 	mov	r4,r5
    ea10:	300b883a 	mov	r5,r6
    ea14:	380d883a 	mov	r6,r7
    ea18:	dfc00215 	stw	ra,8(sp)
    ea1c:	00100cc0 	call	100cc <read>
    ea20:	1007883a 	mov	r3,r2
    ea24:	00bfffc4 	movi	r2,-1
    ea28:	18800626 	beq	r3,r2,ea44 <_read_r+0x54>
    ea2c:	1805883a 	mov	r2,r3
    ea30:	dfc00217 	ldw	ra,8(sp)
    ea34:	dc400117 	ldw	r17,4(sp)
    ea38:	dc000017 	ldw	r16,0(sp)
    ea3c:	dec00304 	addi	sp,sp,12
    ea40:	f800283a 	ret
    ea44:	80800017 	ldw	r2,0(r16)
    ea48:	103ff826 	beq	r2,zero,ea2c <_read_r+0x3c>
    ea4c:	88800015 	stw	r2,0(r17)
    ea50:	1805883a 	mov	r2,r3
    ea54:	dfc00217 	ldw	ra,8(sp)
    ea58:	dc400117 	ldw	r17,4(sp)
    ea5c:	dc000017 	ldw	r16,0(sp)
    ea60:	dec00304 	addi	sp,sp,12
    ea64:	f800283a 	ret

0000ea68 <__udivdi3>:
    ea68:	defff004 	addi	sp,sp,-64
    ea6c:	2005883a 	mov	r2,r4
    ea70:	3011883a 	mov	r8,r6
    ea74:	df000e15 	stw	fp,56(sp)
    ea78:	dd000a15 	stw	r20,40(sp)
    ea7c:	dc000615 	stw	r16,24(sp)
    ea80:	dfc00f15 	stw	ra,60(sp)
    ea84:	ddc00d15 	stw	r23,52(sp)
    ea88:	dd800c15 	stw	r22,48(sp)
    ea8c:	dd400b15 	stw	r21,44(sp)
    ea90:	dcc00915 	stw	r19,36(sp)
    ea94:	dc800815 	stw	r18,32(sp)
    ea98:	dc400715 	stw	r17,28(sp)
    ea9c:	4021883a 	mov	r16,r8
    eaa0:	1039883a 	mov	fp,r2
    eaa4:	2829883a 	mov	r20,r5
    eaa8:	38003b1e 	bne	r7,zero,eb98 <__udivdi3+0x130>
    eaac:	2a005c36 	bltu	r5,r8,ec20 <__udivdi3+0x1b8>
    eab0:	4000a626 	beq	r8,zero,ed4c <__udivdi3+0x2e4>
    eab4:	00bfffd4 	movui	r2,65535
    eab8:	14009e36 	bltu	r2,r16,ed34 <__udivdi3+0x2cc>
    eabc:	00803fc4 	movi	r2,255
    eac0:	14013d36 	bltu	r2,r16,efb8 <__udivdi3+0x550>
    eac4:	000b883a 	mov	r5,zero
    eac8:	0005883a 	mov	r2,zero
    eacc:	8084d83a 	srl	r2,r16,r2
    ead0:	01020034 	movhi	r4,2048
    ead4:	2100a504 	addi	r4,r4,660
    ead8:	01800804 	movi	r6,32
    eadc:	1105883a 	add	r2,r2,r4
    eae0:	10c00003 	ldbu	r3,0(r2)
    eae4:	28c7883a 	add	r3,r5,r3
    eae8:	30edc83a 	sub	r22,r6,r3
    eaec:	b000ee1e 	bne	r22,zero,eea8 <__udivdi3+0x440>
    eaf0:	802ad43a 	srli	r21,r16,16
    eaf4:	00800044 	movi	r2,1
    eaf8:	a423c83a 	sub	r17,r20,r16
    eafc:	85ffffcc 	andi	r23,r16,65535
    eb00:	d8800315 	stw	r2,12(sp)
    eb04:	8809883a 	mov	r4,r17
    eb08:	a80b883a 	mov	r5,r21
    eb0c:	000fae40 	call	fae4 <__udivsi3>
    eb10:	8809883a 	mov	r4,r17
    eb14:	a80b883a 	mov	r5,r21
    eb18:	102d883a 	mov	r22,r2
    eb1c:	000faec0 	call	faec <__umodsi3>
    eb20:	1004943a 	slli	r2,r2,16
    eb24:	e006d43a 	srli	r3,fp,16
    eb28:	bda3383a 	mul	r17,r23,r22
    eb2c:	10c4b03a 	or	r2,r2,r3
    eb30:	1440042e 	bgeu	r2,r17,eb44 <__udivdi3+0xdc>
    eb34:	1405883a 	add	r2,r2,r16
    eb38:	b5bfffc4 	addi	r22,r22,-1
    eb3c:	14000136 	bltu	r2,r16,eb44 <__udivdi3+0xdc>
    eb40:	14413d36 	bltu	r2,r17,f038 <__udivdi3+0x5d0>
    eb44:	1463c83a 	sub	r17,r2,r17
    eb48:	8809883a 	mov	r4,r17
    eb4c:	a80b883a 	mov	r5,r21
    eb50:	000fae40 	call	fae4 <__udivsi3>
    eb54:	8809883a 	mov	r4,r17
    eb58:	a80b883a 	mov	r5,r21
    eb5c:	1029883a 	mov	r20,r2
    eb60:	000faec0 	call	faec <__umodsi3>
    eb64:	1004943a 	slli	r2,r2,16
    eb68:	bd09383a 	mul	r4,r23,r20
    eb6c:	e0ffffcc 	andi	r3,fp,65535
    eb70:	10c4b03a 	or	r2,r2,r3
    eb74:	1100042e 	bgeu	r2,r4,eb88 <__udivdi3+0x120>
    eb78:	8085883a 	add	r2,r16,r2
    eb7c:	a53fffc4 	addi	r20,r20,-1
    eb80:	14000136 	bltu	r2,r16,eb88 <__udivdi3+0x120>
    eb84:	11012036 	bltu	r2,r4,f008 <__udivdi3+0x5a0>
    eb88:	b004943a 	slli	r2,r22,16
    eb8c:	d9000317 	ldw	r4,12(sp)
    eb90:	a084b03a 	or	r2,r20,r2
    eb94:	00001506 	br	ebec <__udivdi3+0x184>
    eb98:	380d883a 	mov	r6,r7
    eb9c:	29c06236 	bltu	r5,r7,ed28 <__udivdi3+0x2c0>
    eba0:	00bfffd4 	movui	r2,65535
    eba4:	11c05a36 	bltu	r2,r7,ed10 <__udivdi3+0x2a8>
    eba8:	00803fc4 	movi	r2,255
    ebac:	11c0fc36 	bltu	r2,r7,efa0 <__udivdi3+0x538>
    ebb0:	000b883a 	mov	r5,zero
    ebb4:	0005883a 	mov	r2,zero
    ebb8:	3084d83a 	srl	r2,r6,r2
    ebbc:	01020034 	movhi	r4,2048
    ebc0:	2100a504 	addi	r4,r4,660
    ebc4:	01c00804 	movi	r7,32
    ebc8:	1105883a 	add	r2,r2,r4
    ebcc:	10c00003 	ldbu	r3,0(r2)
    ebd0:	28c7883a 	add	r3,r5,r3
    ebd4:	38efc83a 	sub	r23,r7,r3
    ebd8:	b800691e 	bne	r23,zero,ed80 <__udivdi3+0x318>
    ebdc:	35000136 	bltu	r6,r20,ebe4 <__udivdi3+0x17c>
    ebe0:	e4005136 	bltu	fp,r16,ed28 <__udivdi3+0x2c0>
    ebe4:	00800044 	movi	r2,1
    ebe8:	0009883a 	mov	r4,zero
    ebec:	2007883a 	mov	r3,r4
    ebf0:	dfc00f17 	ldw	ra,60(sp)
    ebf4:	df000e17 	ldw	fp,56(sp)
    ebf8:	ddc00d17 	ldw	r23,52(sp)
    ebfc:	dd800c17 	ldw	r22,48(sp)
    ec00:	dd400b17 	ldw	r21,44(sp)
    ec04:	dd000a17 	ldw	r20,40(sp)
    ec08:	dcc00917 	ldw	r19,36(sp)
    ec0c:	dc800817 	ldw	r18,32(sp)
    ec10:	dc400717 	ldw	r17,28(sp)
    ec14:	dc000617 	ldw	r16,24(sp)
    ec18:	dec01004 	addi	sp,sp,64
    ec1c:	f800283a 	ret
    ec20:	00bfffd4 	movui	r2,65535
    ec24:	12005036 	bltu	r2,r8,ed68 <__udivdi3+0x300>
    ec28:	00803fc4 	movi	r2,255
    ec2c:	1200e836 	bltu	r2,r8,efd0 <__udivdi3+0x568>
    ec30:	000b883a 	mov	r5,zero
    ec34:	0005883a 	mov	r2,zero
    ec38:	8084d83a 	srl	r2,r16,r2
    ec3c:	01020034 	movhi	r4,2048
    ec40:	2100a504 	addi	r4,r4,660
    ec44:	01800804 	movi	r6,32
    ec48:	1105883a 	add	r2,r2,r4
    ec4c:	10c00003 	ldbu	r3,0(r2)
    ec50:	28c7883a 	add	r3,r5,r3
    ec54:	30cbc83a 	sub	r5,r6,r3
    ec58:	28000626 	beq	r5,zero,ec74 <__udivdi3+0x20c>
    ec5c:	3145c83a 	sub	r2,r6,r5
    ec60:	e084d83a 	srl	r2,fp,r2
    ec64:	a146983a 	sll	r3,r20,r5
    ec68:	e178983a 	sll	fp,fp,r5
    ec6c:	8160983a 	sll	r16,r16,r5
    ec70:	18a8b03a 	or	r20,r3,r2
    ec74:	802ad43a 	srli	r21,r16,16
    ec78:	a009883a 	mov	r4,r20
    ec7c:	85ffffcc 	andi	r23,r16,65535
    ec80:	a80b883a 	mov	r5,r21
    ec84:	000fae40 	call	fae4 <__udivsi3>
    ec88:	a009883a 	mov	r4,r20
    ec8c:	a80b883a 	mov	r5,r21
    ec90:	102d883a 	mov	r22,r2
    ec94:	000faec0 	call	faec <__umodsi3>
    ec98:	1004943a 	slli	r2,r2,16
    ec9c:	e006d43a 	srli	r3,fp,16
    eca0:	bda3383a 	mul	r17,r23,r22
    eca4:	10c4b03a 	or	r2,r2,r3
    eca8:	1440042e 	bgeu	r2,r17,ecbc <__udivdi3+0x254>
    ecac:	1405883a 	add	r2,r2,r16
    ecb0:	b5bfffc4 	addi	r22,r22,-1
    ecb4:	14000136 	bltu	r2,r16,ecbc <__udivdi3+0x254>
    ecb8:	1440d536 	bltu	r2,r17,f010 <__udivdi3+0x5a8>
    ecbc:	1463c83a 	sub	r17,r2,r17
    ecc0:	8809883a 	mov	r4,r17
    ecc4:	a80b883a 	mov	r5,r21
    ecc8:	000fae40 	call	fae4 <__udivsi3>
    eccc:	8809883a 	mov	r4,r17
    ecd0:	a80b883a 	mov	r5,r21
    ecd4:	1029883a 	mov	r20,r2
    ecd8:	000faec0 	call	faec <__umodsi3>
    ecdc:	1004943a 	slli	r2,r2,16
    ece0:	bd09383a 	mul	r4,r23,r20
    ece4:	e0ffffcc 	andi	r3,fp,65535
    ece8:	10c4b03a 	or	r2,r2,r3
    ecec:	1100042e 	bgeu	r2,r4,ed00 <__udivdi3+0x298>
    ecf0:	8085883a 	add	r2,r16,r2
    ecf4:	a53fffc4 	addi	r20,r20,-1
    ecf8:	14000136 	bltu	r2,r16,ed00 <__udivdi3+0x298>
    ecfc:	1100c736 	bltu	r2,r4,f01c <__udivdi3+0x5b4>
    ed00:	b004943a 	slli	r2,r22,16
    ed04:	0009883a 	mov	r4,zero
    ed08:	a084b03a 	or	r2,r20,r2
    ed0c:	003fb706 	br	ebec <__udivdi3+0x184>
    ed10:	00804034 	movhi	r2,256
    ed14:	10bfffc4 	addi	r2,r2,-1
    ed18:	11c0a436 	bltu	r2,r7,efac <__udivdi3+0x544>
    ed1c:	01400404 	movi	r5,16
    ed20:	2805883a 	mov	r2,r5
    ed24:	003fa406 	br	ebb8 <__udivdi3+0x150>
    ed28:	0005883a 	mov	r2,zero
    ed2c:	0009883a 	mov	r4,zero
    ed30:	003fae06 	br	ebec <__udivdi3+0x184>
    ed34:	00804034 	movhi	r2,256
    ed38:	10bfffc4 	addi	r2,r2,-1
    ed3c:	1400a136 	bltu	r2,r16,efc4 <__udivdi3+0x55c>
    ed40:	01400404 	movi	r5,16
    ed44:	2805883a 	mov	r2,r5
    ed48:	003f6006 	br	eacc <__udivdi3+0x64>
    ed4c:	01000044 	movi	r4,1
    ed50:	000b883a 	mov	r5,zero
    ed54:	000fae40 	call	fae4 <__udivsi3>
    ed58:	1021883a 	mov	r16,r2
    ed5c:	00bfffd4 	movui	r2,65535
    ed60:	143ff436 	bltu	r2,r16,ed34 <__udivdi3+0x2cc>
    ed64:	003f5506 	br	eabc <__udivdi3+0x54>
    ed68:	00804034 	movhi	r2,256
    ed6c:	10bfffc4 	addi	r2,r2,-1
    ed70:	12009a36 	bltu	r2,r8,efdc <__udivdi3+0x574>
    ed74:	01400404 	movi	r5,16
    ed78:	2805883a 	mov	r2,r5
    ed7c:	003fae06 	br	ec38 <__udivdi3+0x1d0>
    ed80:	3dc5c83a 	sub	r2,r7,r23
    ed84:	35c8983a 	sll	r4,r6,r23
    ed88:	8086d83a 	srl	r3,r16,r2
    ed8c:	a0a2d83a 	srl	r17,r20,r2
    ed90:	e084d83a 	srl	r2,fp,r2
    ed94:	20eab03a 	or	r21,r4,r3
    ed98:	a82cd43a 	srli	r22,r21,16
    ed9c:	a5c6983a 	sll	r3,r20,r23
    eda0:	8809883a 	mov	r4,r17
    eda4:	b00b883a 	mov	r5,r22
    eda8:	1886b03a 	or	r3,r3,r2
    edac:	d8c00215 	stw	r3,8(sp)
    edb0:	000fae40 	call	fae4 <__udivsi3>
    edb4:	8809883a 	mov	r4,r17
    edb8:	b00b883a 	mov	r5,r22
    edbc:	1029883a 	mov	r20,r2
    edc0:	000faec0 	call	faec <__umodsi3>
    edc4:	a8ffffcc 	andi	r3,r21,65535
    edc8:	d8c00515 	stw	r3,20(sp)
    edcc:	d9000217 	ldw	r4,8(sp)
    edd0:	d9400517 	ldw	r5,20(sp)
    edd4:	1004943a 	slli	r2,r2,16
    edd8:	2006d43a 	srli	r3,r4,16
    eddc:	85e0983a 	sll	r16,r16,r23
    ede0:	2d23383a 	mul	r17,r5,r20
    ede4:	10c4b03a 	or	r2,r2,r3
    ede8:	dc000015 	stw	r16,0(sp)
    edec:	1440032e 	bgeu	r2,r17,edfc <__udivdi3+0x394>
    edf0:	1545883a 	add	r2,r2,r21
    edf4:	a53fffc4 	addi	r20,r20,-1
    edf8:	15407f2e 	bgeu	r2,r21,eff8 <__udivdi3+0x590>
    edfc:	1463c83a 	sub	r17,r2,r17
    ee00:	8809883a 	mov	r4,r17
    ee04:	b00b883a 	mov	r5,r22
    ee08:	000fae40 	call	fae4 <__udivsi3>
    ee0c:	8809883a 	mov	r4,r17
    ee10:	b00b883a 	mov	r5,r22
    ee14:	1021883a 	mov	r16,r2
    ee18:	000faec0 	call	faec <__umodsi3>
    ee1c:	d8c00517 	ldw	r3,20(sp)
    ee20:	d9000217 	ldw	r4,8(sp)
    ee24:	1004943a 	slli	r2,r2,16
    ee28:	1c0f383a 	mul	r7,r3,r16
    ee2c:	20ffffcc 	andi	r3,r4,65535
    ee30:	10e2b03a 	or	r17,r2,r3
    ee34:	89c0032e 	bgeu	r17,r7,ee44 <__udivdi3+0x3dc>
    ee38:	8d63883a 	add	r17,r17,r21
    ee3c:	843fffc4 	addi	r16,r16,-1
    ee40:	8d40692e 	bgeu	r17,r21,efe8 <__udivdi3+0x580>
    ee44:	a008943a 	slli	r4,r20,16
    ee48:	d9400017 	ldw	r5,0(sp)
    ee4c:	89e3c83a 	sub	r17,r17,r7
    ee50:	8110b03a 	or	r8,r16,r4
    ee54:	280cd43a 	srli	r6,r5,16
    ee58:	28ffffcc 	andi	r3,r5,65535
    ee5c:	40bfffcc 	andi	r2,r8,65535
    ee60:	400ad43a 	srli	r5,r8,16
    ee64:	10d3383a 	mul	r9,r2,r3
    ee68:	1185383a 	mul	r2,r2,r6
    ee6c:	28c7383a 	mul	r3,r5,r3
    ee70:	4808d43a 	srli	r4,r9,16
    ee74:	298b383a 	mul	r5,r5,r6
    ee78:	10c5883a 	add	r2,r2,r3
    ee7c:	2089883a 	add	r4,r4,r2
    ee80:	20c0022e 	bgeu	r4,r3,ee8c <__udivdi3+0x424>
    ee84:	00800074 	movhi	r2,1
    ee88:	288b883a 	add	r5,r5,r2
    ee8c:	2004d43a 	srli	r2,r4,16
    ee90:	288b883a 	add	r5,r5,r2
    ee94:	89403f36 	bltu	r17,r5,ef94 <__udivdi3+0x52c>
    ee98:	89403926 	beq	r17,r5,ef80 <__udivdi3+0x518>
    ee9c:	4005883a 	mov	r2,r8
    eea0:	0009883a 	mov	r4,zero
    eea4:	003f5106 	br	ebec <__udivdi3+0x184>
    eea8:	85a0983a 	sll	r16,r16,r22
    eeac:	3585c83a 	sub	r2,r6,r22
    eeb0:	a0a2d83a 	srl	r17,r20,r2
    eeb4:	802ad43a 	srli	r21,r16,16
    eeb8:	e084d83a 	srl	r2,fp,r2
    eebc:	a586983a 	sll	r3,r20,r22
    eec0:	8809883a 	mov	r4,r17
    eec4:	a80b883a 	mov	r5,r21
    eec8:	1886b03a 	or	r3,r3,r2
    eecc:	d8c00115 	stw	r3,4(sp)
    eed0:	000fae40 	call	fae4 <__udivsi3>
    eed4:	8809883a 	mov	r4,r17
    eed8:	a80b883a 	mov	r5,r21
    eedc:	d8800415 	stw	r2,16(sp)
    eee0:	000faec0 	call	faec <__umodsi3>
    eee4:	d9000117 	ldw	r4,4(sp)
    eee8:	d9400417 	ldw	r5,16(sp)
    eeec:	1004943a 	slli	r2,r2,16
    eef0:	85ffffcc 	andi	r23,r16,65535
    eef4:	2006d43a 	srli	r3,r4,16
    eef8:	b963383a 	mul	r17,r23,r5
    eefc:	10c4b03a 	or	r2,r2,r3
    ef00:	1440042e 	bgeu	r2,r17,ef14 <__udivdi3+0x4ac>
    ef04:	297fffc4 	addi	r5,r5,-1
    ef08:	1405883a 	add	r2,r2,r16
    ef0c:	d9400415 	stw	r5,16(sp)
    ef10:	1400442e 	bgeu	r2,r16,f024 <__udivdi3+0x5bc>
    ef14:	1463c83a 	sub	r17,r2,r17
    ef18:	8809883a 	mov	r4,r17
    ef1c:	a80b883a 	mov	r5,r21
    ef20:	000fae40 	call	fae4 <__udivsi3>
    ef24:	8809883a 	mov	r4,r17
    ef28:	a80b883a 	mov	r5,r21
    ef2c:	1029883a 	mov	r20,r2
    ef30:	000faec0 	call	faec <__umodsi3>
    ef34:	d9400117 	ldw	r5,4(sp)
    ef38:	1004943a 	slli	r2,r2,16
    ef3c:	bd09383a 	mul	r4,r23,r20
    ef40:	28ffffcc 	andi	r3,r5,65535
    ef44:	10c6b03a 	or	r3,r2,r3
    ef48:	1900062e 	bgeu	r3,r4,ef64 <__udivdi3+0x4fc>
    ef4c:	1c07883a 	add	r3,r3,r16
    ef50:	a53fffc4 	addi	r20,r20,-1
    ef54:	1c000336 	bltu	r3,r16,ef64 <__udivdi3+0x4fc>
    ef58:	1900022e 	bgeu	r3,r4,ef64 <__udivdi3+0x4fc>
    ef5c:	a53fffc4 	addi	r20,r20,-1
    ef60:	1c07883a 	add	r3,r3,r16
    ef64:	d9400417 	ldw	r5,16(sp)
    ef68:	e5b8983a 	sll	fp,fp,r22
    ef6c:	1923c83a 	sub	r17,r3,r4
    ef70:	2804943a 	slli	r2,r5,16
    ef74:	a0a8b03a 	or	r20,r20,r2
    ef78:	dd000315 	stw	r20,12(sp)
    ef7c:	003ee106 	br	eb04 <__udivdi3+0x9c>
    ef80:	2004943a 	slli	r2,r4,16
    ef84:	e5c8983a 	sll	r4,fp,r23
    ef88:	48ffffcc 	andi	r3,r9,65535
    ef8c:	10c5883a 	add	r2,r2,r3
    ef90:	20bfc22e 	bgeu	r4,r2,ee9c <__udivdi3+0x434>
    ef94:	40bfffc4 	addi	r2,r8,-1
    ef98:	0009883a 	mov	r4,zero
    ef9c:	003f1306 	br	ebec <__udivdi3+0x184>
    efa0:	01400204 	movi	r5,8
    efa4:	2805883a 	mov	r2,r5
    efa8:	003f0306 	br	ebb8 <__udivdi3+0x150>
    efac:	01400604 	movi	r5,24
    efb0:	2805883a 	mov	r2,r5
    efb4:	003f0006 	br	ebb8 <__udivdi3+0x150>
    efb8:	01400204 	movi	r5,8
    efbc:	2805883a 	mov	r2,r5
    efc0:	003ec206 	br	eacc <__udivdi3+0x64>
    efc4:	01400604 	movi	r5,24
    efc8:	2805883a 	mov	r2,r5
    efcc:	003ebf06 	br	eacc <__udivdi3+0x64>
    efd0:	01400204 	movi	r5,8
    efd4:	2805883a 	mov	r2,r5
    efd8:	003f1706 	br	ec38 <__udivdi3+0x1d0>
    efdc:	01400604 	movi	r5,24
    efe0:	2805883a 	mov	r2,r5
    efe4:	003f1406 	br	ec38 <__udivdi3+0x1d0>
    efe8:	89ff962e 	bgeu	r17,r7,ee44 <__udivdi3+0x3dc>
    efec:	8d63883a 	add	r17,r17,r21
    eff0:	843fffc4 	addi	r16,r16,-1
    eff4:	003f9306 	br	ee44 <__udivdi3+0x3dc>
    eff8:	147f802e 	bgeu	r2,r17,edfc <__udivdi3+0x394>
    effc:	a53fffc4 	addi	r20,r20,-1
    f000:	1545883a 	add	r2,r2,r21
    f004:	003f7d06 	br	edfc <__udivdi3+0x394>
    f008:	a53fffc4 	addi	r20,r20,-1
    f00c:	003ede06 	br	eb88 <__udivdi3+0x120>
    f010:	b5bfffc4 	addi	r22,r22,-1
    f014:	1405883a 	add	r2,r2,r16
    f018:	003f2806 	br	ecbc <__udivdi3+0x254>
    f01c:	a53fffc4 	addi	r20,r20,-1
    f020:	003f3706 	br	ed00 <__udivdi3+0x298>
    f024:	147fbb2e 	bgeu	r2,r17,ef14 <__udivdi3+0x4ac>
    f028:	297fffc4 	addi	r5,r5,-1
    f02c:	1405883a 	add	r2,r2,r16
    f030:	d9400415 	stw	r5,16(sp)
    f034:	003fb706 	br	ef14 <__udivdi3+0x4ac>
    f038:	b5bfffc4 	addi	r22,r22,-1
    f03c:	1405883a 	add	r2,r2,r16
    f040:	003ec006 	br	eb44 <__udivdi3+0xdc>

0000f044 <__umoddi3>:
    f044:	defff104 	addi	sp,sp,-60
    f048:	dd800b15 	stw	r22,44(sp)
    f04c:	dd000915 	stw	r20,36(sp)
    f050:	dc000515 	stw	r16,20(sp)
    f054:	dfc00e15 	stw	ra,56(sp)
    f058:	df000d15 	stw	fp,52(sp)
    f05c:	ddc00c15 	stw	r23,48(sp)
    f060:	dd400a15 	stw	r21,40(sp)
    f064:	dcc00815 	stw	r19,32(sp)
    f068:	dc800715 	stw	r18,28(sp)
    f06c:	dc400615 	stw	r17,24(sp)
    f070:	3021883a 	mov	r16,r6
    f074:	202d883a 	mov	r22,r4
    f078:	2829883a 	mov	r20,r5
    f07c:	38002b1e 	bne	r7,zero,f12c <__umoddi3+0xe8>
    f080:	29805036 	bltu	r5,r6,f1c4 <__umoddi3+0x180>
    f084:	30008a26 	beq	r6,zero,f2b0 <__umoddi3+0x26c>
    f088:	00bfffd4 	movui	r2,65535
    f08c:	14008236 	bltu	r2,r16,f298 <__umoddi3+0x254>
    f090:	00803fc4 	movi	r2,255
    f094:	14013636 	bltu	r2,r16,f570 <__umoddi3+0x52c>
    f098:	000b883a 	mov	r5,zero
    f09c:	0005883a 	mov	r2,zero
    f0a0:	8084d83a 	srl	r2,r16,r2
    f0a4:	01020034 	movhi	r4,2048
    f0a8:	2100a504 	addi	r4,r4,660
    f0ac:	01800804 	movi	r6,32
    f0b0:	1105883a 	add	r2,r2,r4
    f0b4:	10c00003 	ldbu	r3,0(r2)
    f0b8:	28c7883a 	add	r3,r5,r3
    f0bc:	30efc83a 	sub	r23,r6,r3
    f0c0:	b800941e 	bne	r23,zero,f314 <__umoddi3+0x2d0>
    f0c4:	802ad43a 	srli	r21,r16,16
    f0c8:	a423c83a 	sub	r17,r20,r16
    f0cc:	0039883a 	mov	fp,zero
    f0d0:	853fffcc 	andi	r20,r16,65535
    f0d4:	8809883a 	mov	r4,r17
    f0d8:	a80b883a 	mov	r5,r21
    f0dc:	000fae40 	call	fae4 <__udivsi3>
    f0e0:	8809883a 	mov	r4,r17
    f0e4:	a80b883a 	mov	r5,r21
    f0e8:	a0a3383a 	mul	r17,r20,r2
    f0ec:	000faec0 	call	faec <__umodsi3>
    f0f0:	1004943a 	slli	r2,r2,16
    f0f4:	b006d43a 	srli	r3,r22,16
    f0f8:	10c4b03a 	or	r2,r2,r3
    f0fc:	1440032e 	bgeu	r2,r17,f10c <__umoddi3+0xc8>
    f100:	1405883a 	add	r2,r2,r16
    f104:	14000136 	bltu	r2,r16,f10c <__umoddi3+0xc8>
    f108:	14413536 	bltu	r2,r17,f5e0 <__umoddi3+0x59c>
    f10c:	1463c83a 	sub	r17,r2,r17
    f110:	8809883a 	mov	r4,r17
    f114:	a80b883a 	mov	r5,r21
    f118:	000fae40 	call	fae4 <__udivsi3>
    f11c:	8809883a 	mov	r4,r17
    f120:	a0a3383a 	mul	r17,r20,r2
    f124:	a80b883a 	mov	r5,r21
    f128:	00004d06 	br	f260 <__umoddi3+0x21c>
    f12c:	380d883a 	mov	r6,r7
    f130:	29c0102e 	bgeu	r5,r7,f174 <__umoddi3+0x130>
    f134:	2011883a 	mov	r8,r4
    f138:	2813883a 	mov	r9,r5
    f13c:	4005883a 	mov	r2,r8
    f140:	4807883a 	mov	r3,r9
    f144:	dfc00e17 	ldw	ra,56(sp)
    f148:	df000d17 	ldw	fp,52(sp)
    f14c:	ddc00c17 	ldw	r23,48(sp)
    f150:	dd800b17 	ldw	r22,44(sp)
    f154:	dd400a17 	ldw	r21,40(sp)
    f158:	dd000917 	ldw	r20,36(sp)
    f15c:	dcc00817 	ldw	r19,32(sp)
    f160:	dc800717 	ldw	r18,28(sp)
    f164:	dc400617 	ldw	r17,24(sp)
    f168:	dc000517 	ldw	r16,20(sp)
    f16c:	dec00f04 	addi	sp,sp,60
    f170:	f800283a 	ret
    f174:	00bfffd4 	movui	r2,65535
    f178:	11c05a36 	bltu	r2,r7,f2e4 <__umoddi3+0x2a0>
    f17c:	00803fc4 	movi	r2,255
    f180:	11c0fe36 	bltu	r2,r7,f57c <__umoddi3+0x538>
    f184:	000b883a 	mov	r5,zero
    f188:	0005883a 	mov	r2,zero
    f18c:	3084d83a 	srl	r2,r6,r2
    f190:	01020034 	movhi	r4,2048
    f194:	2100a504 	addi	r4,r4,660
    f198:	01c00804 	movi	r7,32
    f19c:	1105883a 	add	r2,r2,r4
    f1a0:	10c00003 	ldbu	r3,0(r2)
    f1a4:	28c7883a 	add	r3,r5,r3
    f1a8:	38ebc83a 	sub	r21,r7,r3
    f1ac:	a800851e 	bne	r21,zero,f3c4 <__umoddi3+0x380>
    f1b0:	35005236 	bltu	r6,r20,f2fc <__umoddi3+0x2b8>
    f1b4:	b400512e 	bgeu	r22,r16,f2fc <__umoddi3+0x2b8>
    f1b8:	b011883a 	mov	r8,r22
    f1bc:	a013883a 	mov	r9,r20
    f1c0:	003fde06 	br	f13c <__umoddi3+0xf8>
    f1c4:	00bfffd4 	movui	r2,65535
    f1c8:	11804036 	bltu	r2,r6,f2cc <__umoddi3+0x288>
    f1cc:	00803fc4 	movi	r2,255
    f1d0:	1180ed36 	bltu	r2,r6,f588 <__umoddi3+0x544>
    f1d4:	000b883a 	mov	r5,zero
    f1d8:	0005883a 	mov	r2,zero
    f1dc:	8084d83a 	srl	r2,r16,r2
    f1e0:	01020034 	movhi	r4,2048
    f1e4:	2100a504 	addi	r4,r4,660
    f1e8:	01800804 	movi	r6,32
    f1ec:	1105883a 	add	r2,r2,r4
    f1f0:	10c00003 	ldbu	r3,0(r2)
    f1f4:	28c7883a 	add	r3,r5,r3
    f1f8:	30c7c83a 	sub	r3,r6,r3
    f1fc:	1800bf1e 	bne	r3,zero,f4fc <__umoddi3+0x4b8>
    f200:	0039883a 	mov	fp,zero
    f204:	802ad43a 	srli	r21,r16,16
    f208:	a009883a 	mov	r4,r20
    f20c:	85ffffcc 	andi	r23,r16,65535
    f210:	a80b883a 	mov	r5,r21
    f214:	000fae40 	call	fae4 <__udivsi3>
    f218:	a009883a 	mov	r4,r20
    f21c:	a80b883a 	mov	r5,r21
    f220:	b8a3383a 	mul	r17,r23,r2
    f224:	000faec0 	call	faec <__umodsi3>
    f228:	1004943a 	slli	r2,r2,16
    f22c:	b006d43a 	srli	r3,r22,16
    f230:	10c4b03a 	or	r2,r2,r3
    f234:	1440032e 	bgeu	r2,r17,f244 <__umoddi3+0x200>
    f238:	1405883a 	add	r2,r2,r16
    f23c:	14000136 	bltu	r2,r16,f244 <__umoddi3+0x200>
    f240:	1440e536 	bltu	r2,r17,f5d8 <__umoddi3+0x594>
    f244:	1463c83a 	sub	r17,r2,r17
    f248:	8809883a 	mov	r4,r17
    f24c:	a80b883a 	mov	r5,r21
    f250:	000fae40 	call	fae4 <__udivsi3>
    f254:	8809883a 	mov	r4,r17
    f258:	b8a3383a 	mul	r17,r23,r2
    f25c:	a80b883a 	mov	r5,r21
    f260:	000faec0 	call	faec <__umodsi3>
    f264:	1004943a 	slli	r2,r2,16
    f268:	b0ffffcc 	andi	r3,r22,65535
    f26c:	10c4b03a 	or	r2,r2,r3
    f270:	1440042e 	bgeu	r2,r17,f284 <__umoddi3+0x240>
    f274:	1405883a 	add	r2,r2,r16
    f278:	14000236 	bltu	r2,r16,f284 <__umoddi3+0x240>
    f27c:	1440012e 	bgeu	r2,r17,f284 <__umoddi3+0x240>
    f280:	1405883a 	add	r2,r2,r16
    f284:	1445c83a 	sub	r2,r2,r17
    f288:	1724d83a 	srl	r18,r2,fp
    f28c:	0013883a 	mov	r9,zero
    f290:	9011883a 	mov	r8,r18
    f294:	003fa906 	br	f13c <__umoddi3+0xf8>
    f298:	00804034 	movhi	r2,256
    f29c:	10bfffc4 	addi	r2,r2,-1
    f2a0:	1400b036 	bltu	r2,r16,f564 <__umoddi3+0x520>
    f2a4:	01400404 	movi	r5,16
    f2a8:	2805883a 	mov	r2,r5
    f2ac:	003f7c06 	br	f0a0 <__umoddi3+0x5c>
    f2b0:	01000044 	movi	r4,1
    f2b4:	000b883a 	mov	r5,zero
    f2b8:	000fae40 	call	fae4 <__udivsi3>
    f2bc:	1021883a 	mov	r16,r2
    f2c0:	00bfffd4 	movui	r2,65535
    f2c4:	143ff436 	bltu	r2,r16,f298 <__umoddi3+0x254>
    f2c8:	003f7106 	br	f090 <__umoddi3+0x4c>
    f2cc:	00804034 	movhi	r2,256
    f2d0:	10bfffc4 	addi	r2,r2,-1
    f2d4:	1180af36 	bltu	r2,r6,f594 <__umoddi3+0x550>
    f2d8:	01400404 	movi	r5,16
    f2dc:	2805883a 	mov	r2,r5
    f2e0:	003fbe06 	br	f1dc <__umoddi3+0x198>
    f2e4:	00804034 	movhi	r2,256
    f2e8:	10bfffc4 	addi	r2,r2,-1
    f2ec:	11c0ac36 	bltu	r2,r7,f5a0 <__umoddi3+0x55c>
    f2f0:	01400404 	movi	r5,16
    f2f4:	2805883a 	mov	r2,r5
    f2f8:	003fa406 	br	f18c <__umoddi3+0x148>
    f2fc:	b409c83a 	sub	r4,r22,r16
    f300:	b105803a 	cmpltu	r2,r22,r4
    f304:	a187c83a 	sub	r3,r20,r6
    f308:	18a9c83a 	sub	r20,r3,r2
    f30c:	202d883a 	mov	r22,r4
    f310:	003fa906 	br	f1b8 <__umoddi3+0x174>
    f314:	85e0983a 	sll	r16,r16,r23
    f318:	35c5c83a 	sub	r2,r6,r23
    f31c:	a0a2d83a 	srl	r17,r20,r2
    f320:	802ad43a 	srli	r21,r16,16
    f324:	b084d83a 	srl	r2,r22,r2
    f328:	a5c6983a 	sll	r3,r20,r23
    f32c:	8809883a 	mov	r4,r17
    f330:	a80b883a 	mov	r5,r21
    f334:	1886b03a 	or	r3,r3,r2
    f338:	d8c00115 	stw	r3,4(sp)
    f33c:	853fffcc 	andi	r20,r16,65535
    f340:	000fae40 	call	fae4 <__udivsi3>
    f344:	8809883a 	mov	r4,r17
    f348:	a80b883a 	mov	r5,r21
    f34c:	a0a3383a 	mul	r17,r20,r2
    f350:	000faec0 	call	faec <__umodsi3>
    f354:	d9000117 	ldw	r4,4(sp)
    f358:	1004943a 	slli	r2,r2,16
    f35c:	b839883a 	mov	fp,r23
    f360:	2006d43a 	srli	r3,r4,16
    f364:	10c4b03a 	or	r2,r2,r3
    f368:	1440022e 	bgeu	r2,r17,f374 <__umoddi3+0x330>
    f36c:	1405883a 	add	r2,r2,r16
    f370:	1400962e 	bgeu	r2,r16,f5cc <__umoddi3+0x588>
    f374:	1463c83a 	sub	r17,r2,r17
    f378:	8809883a 	mov	r4,r17
    f37c:	a80b883a 	mov	r5,r21
    f380:	000fae40 	call	fae4 <__udivsi3>
    f384:	8809883a 	mov	r4,r17
    f388:	a80b883a 	mov	r5,r21
    f38c:	a0a3383a 	mul	r17,r20,r2
    f390:	000faec0 	call	faec <__umodsi3>
    f394:	d9400117 	ldw	r5,4(sp)
    f398:	1004943a 	slli	r2,r2,16
    f39c:	28ffffcc 	andi	r3,r5,65535
    f3a0:	10c4b03a 	or	r2,r2,r3
    f3a4:	1440042e 	bgeu	r2,r17,f3b8 <__umoddi3+0x374>
    f3a8:	1405883a 	add	r2,r2,r16
    f3ac:	14000236 	bltu	r2,r16,f3b8 <__umoddi3+0x374>
    f3b0:	1440012e 	bgeu	r2,r17,f3b8 <__umoddi3+0x374>
    f3b4:	1405883a 	add	r2,r2,r16
    f3b8:	b5ec983a 	sll	r22,r22,r23
    f3bc:	1463c83a 	sub	r17,r2,r17
    f3c0:	003f4406 	br	f0d4 <__umoddi3+0x90>
    f3c4:	3d4fc83a 	sub	r7,r7,r21
    f3c8:	3546983a 	sll	r3,r6,r21
    f3cc:	81c4d83a 	srl	r2,r16,r7
    f3d0:	a1e2d83a 	srl	r17,r20,r7
    f3d4:	a54c983a 	sll	r6,r20,r21
    f3d8:	18aeb03a 	or	r23,r3,r2
    f3dc:	b828d43a 	srli	r20,r23,16
    f3e0:	b1c4d83a 	srl	r2,r22,r7
    f3e4:	8809883a 	mov	r4,r17
    f3e8:	a00b883a 	mov	r5,r20
    f3ec:	308cb03a 	or	r6,r6,r2
    f3f0:	d9c00315 	stw	r7,12(sp)
    f3f4:	d9800215 	stw	r6,8(sp)
    f3f8:	000fae40 	call	fae4 <__udivsi3>
    f3fc:	8809883a 	mov	r4,r17
    f400:	a00b883a 	mov	r5,r20
    f404:	1039883a 	mov	fp,r2
    f408:	000faec0 	call	faec <__umodsi3>
    f40c:	b8ffffcc 	andi	r3,r23,65535
    f410:	d8c00415 	stw	r3,16(sp)
    f414:	d9000217 	ldw	r4,8(sp)
    f418:	d9400417 	ldw	r5,16(sp)
    f41c:	1004943a 	slli	r2,r2,16
    f420:	2006d43a 	srli	r3,r4,16
    f424:	8560983a 	sll	r16,r16,r21
    f428:	2f23383a 	mul	r17,r5,fp
    f42c:	10c4b03a 	or	r2,r2,r3
    f430:	dc000015 	stw	r16,0(sp)
    f434:	b56c983a 	sll	r22,r22,r21
    f438:	1440032e 	bgeu	r2,r17,f448 <__umoddi3+0x404>
    f43c:	15c5883a 	add	r2,r2,r23
    f440:	e73fffc4 	addi	fp,fp,-1
    f444:	15c05d2e 	bgeu	r2,r23,f5bc <__umoddi3+0x578>
    f448:	1463c83a 	sub	r17,r2,r17
    f44c:	8809883a 	mov	r4,r17
    f450:	a00b883a 	mov	r5,r20
    f454:	000fae40 	call	fae4 <__udivsi3>
    f458:	8809883a 	mov	r4,r17
    f45c:	a00b883a 	mov	r5,r20
    f460:	1021883a 	mov	r16,r2
    f464:	000faec0 	call	faec <__umodsi3>
    f468:	d8c00417 	ldw	r3,16(sp)
    f46c:	d9000217 	ldw	r4,8(sp)
    f470:	1004943a 	slli	r2,r2,16
    f474:	1c23383a 	mul	r17,r3,r16
    f478:	20ffffcc 	andi	r3,r4,65535
    f47c:	10ceb03a 	or	r7,r2,r3
    f480:	3c40032e 	bgeu	r7,r17,f490 <__umoddi3+0x44c>
    f484:	3dcf883a 	add	r7,r7,r23
    f488:	843fffc4 	addi	r16,r16,-1
    f48c:	3dc0472e 	bgeu	r7,r23,f5ac <__umoddi3+0x568>
    f490:	e004943a 	slli	r2,fp,16
    f494:	d9400017 	ldw	r5,0(sp)
    f498:	3c4fc83a 	sub	r7,r7,r17
    f49c:	8084b03a 	or	r2,r16,r2
    f4a0:	28ffffcc 	andi	r3,r5,65535
    f4a4:	280cd43a 	srli	r6,r5,16
    f4a8:	100ad43a 	srli	r5,r2,16
    f4ac:	10bfffcc 	andi	r2,r2,65535
    f4b0:	10d1383a 	mul	r8,r2,r3
    f4b4:	28c7383a 	mul	r3,r5,r3
    f4b8:	1185383a 	mul	r2,r2,r6
    f4bc:	4008d43a 	srli	r4,r8,16
    f4c0:	298b383a 	mul	r5,r5,r6
    f4c4:	10c5883a 	add	r2,r2,r3
    f4c8:	2089883a 	add	r4,r4,r2
    f4cc:	20c0022e 	bgeu	r4,r3,f4d8 <__umoddi3+0x494>
    f4d0:	00800074 	movhi	r2,1
    f4d4:	288b883a 	add	r5,r5,r2
    f4d8:	2004d43a 	srli	r2,r4,16
    f4dc:	2008943a 	slli	r4,r4,16
    f4e0:	40ffffcc 	andi	r3,r8,65535
    f4e4:	288b883a 	add	r5,r5,r2
    f4e8:	20c9883a 	add	r4,r4,r3
    f4ec:	39400b36 	bltu	r7,r5,f51c <__umoddi3+0x4d8>
    f4f0:	39403d26 	beq	r7,r5,f5e8 <__umoddi3+0x5a4>
    f4f4:	394bc83a 	sub	r5,r7,r5
    f4f8:	00000f06 	br	f538 <__umoddi3+0x4f4>
    f4fc:	30c5c83a 	sub	r2,r6,r3
    f500:	1839883a 	mov	fp,r3
    f504:	b084d83a 	srl	r2,r22,r2
    f508:	a0c6983a 	sll	r3,r20,r3
    f50c:	8720983a 	sll	r16,r16,fp
    f510:	b72c983a 	sll	r22,r22,fp
    f514:	18a8b03a 	or	r20,r3,r2
    f518:	003f3a06 	br	f204 <__umoddi3+0x1c0>
    f51c:	d8c00017 	ldw	r3,0(sp)
    f520:	20c5c83a 	sub	r2,r4,r3
    f524:	2089803a 	cmpltu	r4,r4,r2
    f528:	2dc7c83a 	sub	r3,r5,r23
    f52c:	1907c83a 	sub	r3,r3,r4
    f530:	38cbc83a 	sub	r5,r7,r3
    f534:	1009883a 	mov	r4,r2
    f538:	b105c83a 	sub	r2,r22,r4
    f53c:	b087803a 	cmpltu	r3,r22,r2
    f540:	28c7c83a 	sub	r3,r5,r3
    f544:	d9400317 	ldw	r5,12(sp)
    f548:	1544d83a 	srl	r2,r2,r21
    f54c:	1948983a 	sll	r4,r3,r5
    f550:	1d46d83a 	srl	r3,r3,r21
    f554:	20a4b03a 	or	r18,r4,r2
    f558:	9011883a 	mov	r8,r18
    f55c:	1813883a 	mov	r9,r3
    f560:	003ef606 	br	f13c <__umoddi3+0xf8>
    f564:	01400604 	movi	r5,24
    f568:	2805883a 	mov	r2,r5
    f56c:	003ecc06 	br	f0a0 <__umoddi3+0x5c>
    f570:	01400204 	movi	r5,8
    f574:	2805883a 	mov	r2,r5
    f578:	003ec906 	br	f0a0 <__umoddi3+0x5c>
    f57c:	01400204 	movi	r5,8
    f580:	2805883a 	mov	r2,r5
    f584:	003f0106 	br	f18c <__umoddi3+0x148>
    f588:	01400204 	movi	r5,8
    f58c:	2805883a 	mov	r2,r5
    f590:	003f1206 	br	f1dc <__umoddi3+0x198>
    f594:	01400604 	movi	r5,24
    f598:	2805883a 	mov	r2,r5
    f59c:	003f0f06 	br	f1dc <__umoddi3+0x198>
    f5a0:	01400604 	movi	r5,24
    f5a4:	2805883a 	mov	r2,r5
    f5a8:	003ef806 	br	f18c <__umoddi3+0x148>
    f5ac:	3c7fb82e 	bgeu	r7,r17,f490 <__umoddi3+0x44c>
    f5b0:	843fffc4 	addi	r16,r16,-1
    f5b4:	3dcf883a 	add	r7,r7,r23
    f5b8:	003fb506 	br	f490 <__umoddi3+0x44c>
    f5bc:	147fa22e 	bgeu	r2,r17,f448 <__umoddi3+0x404>
    f5c0:	e73fffc4 	addi	fp,fp,-1
    f5c4:	15c5883a 	add	r2,r2,r23
    f5c8:	003f9f06 	br	f448 <__umoddi3+0x404>
    f5cc:	147f692e 	bgeu	r2,r17,f374 <__umoddi3+0x330>
    f5d0:	1405883a 	add	r2,r2,r16
    f5d4:	003f6706 	br	f374 <__umoddi3+0x330>
    f5d8:	1405883a 	add	r2,r2,r16
    f5dc:	003f1906 	br	f244 <__umoddi3+0x200>
    f5e0:	1405883a 	add	r2,r2,r16
    f5e4:	003ec906 	br	f10c <__umoddi3+0xc8>
    f5e8:	b13fcc36 	bltu	r22,r4,f51c <__umoddi3+0x4d8>
    f5ec:	000b883a 	mov	r5,zero
    f5f0:	003fd106 	br	f538 <__umoddi3+0x4f4>

0000f5f4 <__eqdf2>:
    f5f4:	deffef04 	addi	sp,sp,-68
    f5f8:	dc400f15 	stw	r17,60(sp)
    f5fc:	dc400404 	addi	r17,sp,16
    f600:	2005883a 	mov	r2,r4
    f604:	2807883a 	mov	r3,r5
    f608:	dc000e15 	stw	r16,56(sp)
    f60c:	d809883a 	mov	r4,sp
    f610:	880b883a 	mov	r5,r17
    f614:	dc000904 	addi	r16,sp,36
    f618:	d8c00115 	stw	r3,4(sp)
    f61c:	d8800015 	stw	r2,0(sp)
    f620:	d9800215 	stw	r6,8(sp)
    f624:	dfc01015 	stw	ra,64(sp)
    f628:	d9c00315 	stw	r7,12(sp)
    f62c:	00070b00 	call	70b0 <__unpack_d>
    f630:	d9000204 	addi	r4,sp,8
    f634:	800b883a 	mov	r5,r16
    f638:	00070b00 	call	70b0 <__unpack_d>
    f63c:	d8800417 	ldw	r2,16(sp)
    f640:	00c00044 	movi	r3,1
    f644:	180d883a 	mov	r6,r3
    f648:	1880062e 	bgeu	r3,r2,f664 <__eqdf2+0x70>
    f64c:	d8800917 	ldw	r2,36(sp)
    f650:	8809883a 	mov	r4,r17
    f654:	800b883a 	mov	r5,r16
    f658:	1880022e 	bgeu	r3,r2,f664 <__eqdf2+0x70>
    f65c:	00071e80 	call	71e8 <__fpcmp_parts_d>
    f660:	100d883a 	mov	r6,r2
    f664:	3005883a 	mov	r2,r6
    f668:	dfc01017 	ldw	ra,64(sp)
    f66c:	dc400f17 	ldw	r17,60(sp)
    f670:	dc000e17 	ldw	r16,56(sp)
    f674:	dec01104 	addi	sp,sp,68
    f678:	f800283a 	ret

0000f67c <__nedf2>:
    f67c:	deffef04 	addi	sp,sp,-68
    f680:	dc400f15 	stw	r17,60(sp)
    f684:	dc400404 	addi	r17,sp,16
    f688:	2005883a 	mov	r2,r4
    f68c:	2807883a 	mov	r3,r5
    f690:	dc000e15 	stw	r16,56(sp)
    f694:	d809883a 	mov	r4,sp
    f698:	880b883a 	mov	r5,r17
    f69c:	dc000904 	addi	r16,sp,36
    f6a0:	d8c00115 	stw	r3,4(sp)
    f6a4:	d8800015 	stw	r2,0(sp)
    f6a8:	d9800215 	stw	r6,8(sp)
    f6ac:	dfc01015 	stw	ra,64(sp)
    f6b0:	d9c00315 	stw	r7,12(sp)
    f6b4:	00070b00 	call	70b0 <__unpack_d>
    f6b8:	d9000204 	addi	r4,sp,8
    f6bc:	800b883a 	mov	r5,r16
    f6c0:	00070b00 	call	70b0 <__unpack_d>
    f6c4:	d8800417 	ldw	r2,16(sp)
    f6c8:	00c00044 	movi	r3,1
    f6cc:	180d883a 	mov	r6,r3
    f6d0:	1880062e 	bgeu	r3,r2,f6ec <__nedf2+0x70>
    f6d4:	d8800917 	ldw	r2,36(sp)
    f6d8:	8809883a 	mov	r4,r17
    f6dc:	800b883a 	mov	r5,r16
    f6e0:	1880022e 	bgeu	r3,r2,f6ec <__nedf2+0x70>
    f6e4:	00071e80 	call	71e8 <__fpcmp_parts_d>
    f6e8:	100d883a 	mov	r6,r2
    f6ec:	3005883a 	mov	r2,r6
    f6f0:	dfc01017 	ldw	ra,64(sp)
    f6f4:	dc400f17 	ldw	r17,60(sp)
    f6f8:	dc000e17 	ldw	r16,56(sp)
    f6fc:	dec01104 	addi	sp,sp,68
    f700:	f800283a 	ret

0000f704 <__gedf2>:
    f704:	deffef04 	addi	sp,sp,-68
    f708:	dc400f15 	stw	r17,60(sp)
    f70c:	dc400404 	addi	r17,sp,16
    f710:	2005883a 	mov	r2,r4
    f714:	2807883a 	mov	r3,r5
    f718:	dc000e15 	stw	r16,56(sp)
    f71c:	d809883a 	mov	r4,sp
    f720:	880b883a 	mov	r5,r17
    f724:	dc000904 	addi	r16,sp,36
    f728:	d8c00115 	stw	r3,4(sp)
    f72c:	d8800015 	stw	r2,0(sp)
    f730:	d9800215 	stw	r6,8(sp)
    f734:	dfc01015 	stw	ra,64(sp)
    f738:	d9c00315 	stw	r7,12(sp)
    f73c:	00070b00 	call	70b0 <__unpack_d>
    f740:	d9000204 	addi	r4,sp,8
    f744:	800b883a 	mov	r5,r16
    f748:	00070b00 	call	70b0 <__unpack_d>
    f74c:	d8800417 	ldw	r2,16(sp)
    f750:	00c00044 	movi	r3,1
    f754:	01bfffc4 	movi	r6,-1
    f758:	1880062e 	bgeu	r3,r2,f774 <__gedf2+0x70>
    f75c:	d8800917 	ldw	r2,36(sp)
    f760:	8809883a 	mov	r4,r17
    f764:	800b883a 	mov	r5,r16
    f768:	1880022e 	bgeu	r3,r2,f774 <__gedf2+0x70>
    f76c:	00071e80 	call	71e8 <__fpcmp_parts_d>
    f770:	100d883a 	mov	r6,r2
    f774:	3005883a 	mov	r2,r6
    f778:	dfc01017 	ldw	ra,64(sp)
    f77c:	dc400f17 	ldw	r17,60(sp)
    f780:	dc000e17 	ldw	r16,56(sp)
    f784:	dec01104 	addi	sp,sp,68
    f788:	f800283a 	ret

0000f78c <__ltdf2>:
    f78c:	deffef04 	addi	sp,sp,-68
    f790:	dc400f15 	stw	r17,60(sp)
    f794:	dc400404 	addi	r17,sp,16
    f798:	2005883a 	mov	r2,r4
    f79c:	2807883a 	mov	r3,r5
    f7a0:	dc000e15 	stw	r16,56(sp)
    f7a4:	d809883a 	mov	r4,sp
    f7a8:	880b883a 	mov	r5,r17
    f7ac:	dc000904 	addi	r16,sp,36
    f7b0:	d8c00115 	stw	r3,4(sp)
    f7b4:	d8800015 	stw	r2,0(sp)
    f7b8:	d9800215 	stw	r6,8(sp)
    f7bc:	dfc01015 	stw	ra,64(sp)
    f7c0:	d9c00315 	stw	r7,12(sp)
    f7c4:	00070b00 	call	70b0 <__unpack_d>
    f7c8:	d9000204 	addi	r4,sp,8
    f7cc:	800b883a 	mov	r5,r16
    f7d0:	00070b00 	call	70b0 <__unpack_d>
    f7d4:	d8800417 	ldw	r2,16(sp)
    f7d8:	00c00044 	movi	r3,1
    f7dc:	180d883a 	mov	r6,r3
    f7e0:	1880062e 	bgeu	r3,r2,f7fc <__ltdf2+0x70>
    f7e4:	d8800917 	ldw	r2,36(sp)
    f7e8:	8809883a 	mov	r4,r17
    f7ec:	800b883a 	mov	r5,r16
    f7f0:	1880022e 	bgeu	r3,r2,f7fc <__ltdf2+0x70>
    f7f4:	00071e80 	call	71e8 <__fpcmp_parts_d>
    f7f8:	100d883a 	mov	r6,r2
    f7fc:	3005883a 	mov	r2,r6
    f800:	dfc01017 	ldw	ra,64(sp)
    f804:	dc400f17 	ldw	r17,60(sp)
    f808:	dc000e17 	ldw	r16,56(sp)
    f80c:	dec01104 	addi	sp,sp,68
    f810:	f800283a 	ret

0000f814 <__floatunsidf>:
    f814:	defff204 	addi	sp,sp,-56
    f818:	dfc00d15 	stw	ra,52(sp)
    f81c:	ddc00c15 	stw	r23,48(sp)
    f820:	dd800b15 	stw	r22,44(sp)
    f824:	dd400a15 	stw	r21,40(sp)
    f828:	dd000915 	stw	r20,36(sp)
    f82c:	dcc00815 	stw	r19,32(sp)
    f830:	dc800715 	stw	r18,28(sp)
    f834:	dc400615 	stw	r17,24(sp)
    f838:	dc000515 	stw	r16,20(sp)
    f83c:	d8000115 	stw	zero,4(sp)
    f840:	20000f1e 	bne	r4,zero,f880 <__floatunsidf+0x6c>
    f844:	00800084 	movi	r2,2
    f848:	d8800015 	stw	r2,0(sp)
    f84c:	d809883a 	mov	r4,sp
    f850:	0006d9c0 	call	6d9c <__pack_d>
    f854:	dfc00d17 	ldw	ra,52(sp)
    f858:	ddc00c17 	ldw	r23,48(sp)
    f85c:	dd800b17 	ldw	r22,44(sp)
    f860:	dd400a17 	ldw	r21,40(sp)
    f864:	dd000917 	ldw	r20,36(sp)
    f868:	dcc00817 	ldw	r19,32(sp)
    f86c:	dc800717 	ldw	r18,28(sp)
    f870:	dc400617 	ldw	r17,24(sp)
    f874:	dc000517 	ldw	r16,20(sp)
    f878:	dec00e04 	addi	sp,sp,56
    f87c:	f800283a 	ret
    f880:	008000c4 	movi	r2,3
    f884:	00c00f04 	movi	r3,60
    f888:	002f883a 	mov	r23,zero
    f88c:	202d883a 	mov	r22,r4
    f890:	d8800015 	stw	r2,0(sp)
    f894:	d8c00215 	stw	r3,8(sp)
    f898:	d9000315 	stw	r4,12(sp)
    f89c:	ddc00415 	stw	r23,16(sp)
    f8a0:	0006d1c0 	call	6d1c <__clzsi2>
    f8a4:	12400744 	addi	r9,r2,29
    f8a8:	48000b16 	blt	r9,zero,f8d8 <__floatunsidf+0xc4>
    f8ac:	483fe726 	beq	r9,zero,f84c <__floatunsidf+0x38>
    f8b0:	10bfff44 	addi	r2,r2,-3
    f8b4:	10002e16 	blt	r2,zero,f970 <__floatunsidf+0x15c>
    f8b8:	b0a2983a 	sll	r17,r22,r2
    f8bc:	0021883a 	mov	r16,zero
    f8c0:	d8800217 	ldw	r2,8(sp)
    f8c4:	dc400415 	stw	r17,16(sp)
    f8c8:	dc000315 	stw	r16,12(sp)
    f8cc:	1245c83a 	sub	r2,r2,r9
    f8d0:	d8800215 	stw	r2,8(sp)
    f8d4:	003fdd06 	br	f84c <__floatunsidf+0x38>
    f8d8:	0255c83a 	sub	r10,zero,r9
    f8dc:	51bff804 	addi	r6,r10,-32
    f8e0:	30001b16 	blt	r6,zero,f950 <__floatunsidf+0x13c>
    f8e4:	b9a8d83a 	srl	r20,r23,r6
    f8e8:	002b883a 	mov	r21,zero
    f8ec:	000f883a 	mov	r7,zero
    f8f0:	01000044 	movi	r4,1
    f8f4:	0011883a 	mov	r8,zero
    f8f8:	30002516 	blt	r6,zero,f990 <__floatunsidf+0x17c>
    f8fc:	21a6983a 	sll	r19,r4,r6
    f900:	0025883a 	mov	r18,zero
    f904:	00bfffc4 	movi	r2,-1
    f908:	9089883a 	add	r4,r18,r2
    f90c:	988b883a 	add	r5,r19,r2
    f910:	248d803a 	cmpltu	r6,r4,r18
    f914:	314b883a 	add	r5,r6,r5
    f918:	b104703a 	and	r2,r22,r4
    f91c:	b946703a 	and	r3,r23,r5
    f920:	10c4b03a 	or	r2,r2,r3
    f924:	10000226 	beq	r2,zero,f930 <__floatunsidf+0x11c>
    f928:	01c00044 	movi	r7,1
    f92c:	0011883a 	mov	r8,zero
    f930:	d9000217 	ldw	r4,8(sp)
    f934:	a1c4b03a 	or	r2,r20,r7
    f938:	aa06b03a 	or	r3,r21,r8
    f93c:	2249c83a 	sub	r4,r4,r9
    f940:	d8c00415 	stw	r3,16(sp)
    f944:	d9000215 	stw	r4,8(sp)
    f948:	d8800315 	stw	r2,12(sp)
    f94c:	003fbf06 	br	f84c <__floatunsidf+0x38>
    f950:	bdc7883a 	add	r3,r23,r23
    f954:	008007c4 	movi	r2,31
    f958:	1285c83a 	sub	r2,r2,r10
    f95c:	1886983a 	sll	r3,r3,r2
    f960:	b2a8d83a 	srl	r20,r22,r10
    f964:	baaad83a 	srl	r21,r23,r10
    f968:	1d28b03a 	or	r20,r3,r20
    f96c:	003fdf06 	br	f8ec <__floatunsidf+0xd8>
    f970:	b006d07a 	srli	r3,r22,1
    f974:	008007c4 	movi	r2,31
    f978:	1245c83a 	sub	r2,r2,r9
    f97c:	1886d83a 	srl	r3,r3,r2
    f980:	ba62983a 	sll	r17,r23,r9
    f984:	b260983a 	sll	r16,r22,r9
    f988:	1c62b03a 	or	r17,r3,r17
    f98c:	003fcc06 	br	f8c0 <__floatunsidf+0xac>
    f990:	2006d07a 	srli	r3,r4,1
    f994:	008007c4 	movi	r2,31
    f998:	1285c83a 	sub	r2,r2,r10
    f99c:	18a6d83a 	srl	r19,r3,r2
    f9a0:	22a4983a 	sll	r18,r4,r10
    f9a4:	003fd706 	br	f904 <__floatunsidf+0xf0>

0000f9a8 <udivmodsi4>:
    f9a8:	29001b2e 	bgeu	r5,r4,fa18 <udivmodsi4+0x70>
    f9ac:	28001a16 	blt	r5,zero,fa18 <udivmodsi4+0x70>
    f9b0:	00800044 	movi	r2,1
    f9b4:	0007883a 	mov	r3,zero
    f9b8:	01c007c4 	movi	r7,31
    f9bc:	00000306 	br	f9cc <udivmodsi4+0x24>
    f9c0:	19c01326 	beq	r3,r7,fa10 <udivmodsi4+0x68>
    f9c4:	18c00044 	addi	r3,r3,1
    f9c8:	28000416 	blt	r5,zero,f9dc <udivmodsi4+0x34>
    f9cc:	294b883a 	add	r5,r5,r5
    f9d0:	1085883a 	add	r2,r2,r2
    f9d4:	293ffa36 	bltu	r5,r4,f9c0 <udivmodsi4+0x18>
    f9d8:	10000d26 	beq	r2,zero,fa10 <udivmodsi4+0x68>
    f9dc:	0007883a 	mov	r3,zero
    f9e0:	21400236 	bltu	r4,r5,f9ec <udivmodsi4+0x44>
    f9e4:	2149c83a 	sub	r4,r4,r5
    f9e8:	1886b03a 	or	r3,r3,r2
    f9ec:	1004d07a 	srli	r2,r2,1
    f9f0:	280ad07a 	srli	r5,r5,1
    f9f4:	103ffa1e 	bne	r2,zero,f9e0 <udivmodsi4+0x38>
    f9f8:	30000226 	beq	r6,zero,fa04 <udivmodsi4+0x5c>
    f9fc:	2005883a 	mov	r2,r4
    fa00:	f800283a 	ret
    fa04:	1809883a 	mov	r4,r3
    fa08:	2005883a 	mov	r2,r4
    fa0c:	f800283a 	ret
    fa10:	0007883a 	mov	r3,zero
    fa14:	003ff806 	br	f9f8 <udivmodsi4+0x50>
    fa18:	00800044 	movi	r2,1
    fa1c:	0007883a 	mov	r3,zero
    fa20:	003fef06 	br	f9e0 <udivmodsi4+0x38>

0000fa24 <__divsi3>:
    fa24:	defffe04 	addi	sp,sp,-8
    fa28:	dc000015 	stw	r16,0(sp)
    fa2c:	dfc00115 	stw	ra,4(sp)
    fa30:	0021883a 	mov	r16,zero
    fa34:	20000c16 	blt	r4,zero,fa68 <__divsi3+0x44>
    fa38:	000d883a 	mov	r6,zero
    fa3c:	28000e16 	blt	r5,zero,fa78 <__divsi3+0x54>
    fa40:	000f9a80 	call	f9a8 <udivmodsi4>
    fa44:	1007883a 	mov	r3,r2
    fa48:	8005003a 	cmpeq	r2,r16,zero
    fa4c:	1000011e 	bne	r2,zero,fa54 <__divsi3+0x30>
    fa50:	00c7c83a 	sub	r3,zero,r3
    fa54:	1805883a 	mov	r2,r3
    fa58:	dfc00117 	ldw	ra,4(sp)
    fa5c:	dc000017 	ldw	r16,0(sp)
    fa60:	dec00204 	addi	sp,sp,8
    fa64:	f800283a 	ret
    fa68:	0109c83a 	sub	r4,zero,r4
    fa6c:	04000044 	movi	r16,1
    fa70:	000d883a 	mov	r6,zero
    fa74:	283ff20e 	bge	r5,zero,fa40 <__divsi3+0x1c>
    fa78:	014bc83a 	sub	r5,zero,r5
    fa7c:	8021003a 	cmpeq	r16,r16,zero
    fa80:	003fef06 	br	fa40 <__divsi3+0x1c>

0000fa84 <__modsi3>:
    fa84:	deffff04 	addi	sp,sp,-4
    fa88:	dfc00015 	stw	ra,0(sp)
    fa8c:	01800044 	movi	r6,1
    fa90:	2807883a 	mov	r3,r5
    fa94:	20000416 	blt	r4,zero,faa8 <__modsi3+0x24>
    fa98:	28000c16 	blt	r5,zero,facc <__modsi3+0x48>
    fa9c:	dfc00017 	ldw	ra,0(sp)
    faa0:	dec00104 	addi	sp,sp,4
    faa4:	000f9a81 	jmpi	f9a8 <udivmodsi4>
    faa8:	0109c83a 	sub	r4,zero,r4
    faac:	28000b16 	blt	r5,zero,fadc <__modsi3+0x58>
    fab0:	180b883a 	mov	r5,r3
    fab4:	01800044 	movi	r6,1
    fab8:	000f9a80 	call	f9a8 <udivmodsi4>
    fabc:	0085c83a 	sub	r2,zero,r2
    fac0:	dfc00017 	ldw	ra,0(sp)
    fac4:	dec00104 	addi	sp,sp,4
    fac8:	f800283a 	ret
    facc:	014bc83a 	sub	r5,zero,r5
    fad0:	dfc00017 	ldw	ra,0(sp)
    fad4:	dec00104 	addi	sp,sp,4
    fad8:	000f9a81 	jmpi	f9a8 <udivmodsi4>
    fadc:	0147c83a 	sub	r3,zero,r5
    fae0:	003ff306 	br	fab0 <__modsi3+0x2c>

0000fae4 <__udivsi3>:
    fae4:	000d883a 	mov	r6,zero
    fae8:	000f9a81 	jmpi	f9a8 <udivmodsi4>

0000faec <__umodsi3>:
    faec:	01800044 	movi	r6,1
    faf0:	000f9a81 	jmpi	f9a8 <udivmodsi4>

0000faf4 <close>:
    faf4:	defff804 	addi	sp,sp,-32
    faf8:	dfc00715 	stw	ra,28(sp)
    fafc:	df000615 	stw	fp,24(sp)
    fb00:	df000604 	addi	fp,sp,24
    fb04:	e13ffc15 	stw	r4,-16(fp)
    fb08:	e0bffc17 	ldw	r2,-16(fp)
    fb0c:	1004803a 	cmplt	r2,r2,zero
    fb10:	1000081e 	bne	r2,zero,fb34 <close+0x40>
    fb14:	e0bffc17 	ldw	r2,-16(fp)
    fb18:	10800324 	muli	r2,r2,12
    fb1c:	1007883a 	mov	r3,r2
    fb20:	00820034 	movhi	r2,2048
    fb24:	10845404 	addi	r2,r2,4432
    fb28:	1887883a 	add	r3,r3,r2
    fb2c:	e0ffff15 	stw	r3,-4(fp)
    fb30:	00000106 	br	fb38 <close+0x44>
    fb34:	e03fff15 	stw	zero,-4(fp)
    fb38:	e0bfff17 	ldw	r2,-4(fp)
    fb3c:	e0bffb15 	stw	r2,-20(fp)
    fb40:	e0bffb17 	ldw	r2,-20(fp)
    fb44:	1005003a 	cmpeq	r2,r2,zero
    fb48:	10001d1e 	bne	r2,zero,fbc0 <close+0xcc>
    fb4c:	e0bffb17 	ldw	r2,-20(fp)
    fb50:	10800017 	ldw	r2,0(r2)
    fb54:	10800417 	ldw	r2,16(r2)
    fb58:	1005003a 	cmpeq	r2,r2,zero
    fb5c:	1000071e 	bne	r2,zero,fb7c <close+0x88>
    fb60:	e0bffb17 	ldw	r2,-20(fp)
    fb64:	10800017 	ldw	r2,0(r2)
    fb68:	10800417 	ldw	r2,16(r2)
    fb6c:	e13ffb17 	ldw	r4,-20(fp)
    fb70:	103ee83a 	callr	r2
    fb74:	e0bffe15 	stw	r2,-8(fp)
    fb78:	00000106 	br	fb80 <close+0x8c>
    fb7c:	e03ffe15 	stw	zero,-8(fp)
    fb80:	e0bffe17 	ldw	r2,-8(fp)
    fb84:	e0bffa15 	stw	r2,-24(fp)
    fb88:	e13ffc17 	ldw	r4,-16(fp)
    fb8c:	001024c0 	call	1024c <alt_release_fd>
    fb90:	e0bffa17 	ldw	r2,-24(fp)
    fb94:	1004403a 	cmpge	r2,r2,zero
    fb98:	1000071e 	bne	r2,zero,fbb8 <close+0xc4>
    fb9c:	000fbf00 	call	fbf0 <alt_get_errno>
    fba0:	e0fffa17 	ldw	r3,-24(fp)
    fba4:	00c7c83a 	sub	r3,zero,r3
    fba8:	10c00015 	stw	r3,0(r2)
    fbac:	00bfffc4 	movi	r2,-1
    fbb0:	e0bffd15 	stw	r2,-12(fp)
    fbb4:	00000806 	br	fbd8 <close+0xe4>
    fbb8:	e03ffd15 	stw	zero,-12(fp)
    fbbc:	00000606 	br	fbd8 <close+0xe4>
    fbc0:	000fbf00 	call	fbf0 <alt_get_errno>
    fbc4:	1007883a 	mov	r3,r2
    fbc8:	00801444 	movi	r2,81
    fbcc:	18800015 	stw	r2,0(r3)
    fbd0:	00bfffc4 	movi	r2,-1
    fbd4:	e0bffd15 	stw	r2,-12(fp)
    fbd8:	e0bffd17 	ldw	r2,-12(fp)
    fbdc:	e037883a 	mov	sp,fp
    fbe0:	dfc00117 	ldw	ra,4(sp)
    fbe4:	df000017 	ldw	fp,0(sp)
    fbe8:	dec00204 	addi	sp,sp,8
    fbec:	f800283a 	ret

0000fbf0 <alt_get_errno>:
    fbf0:	defffd04 	addi	sp,sp,-12
    fbf4:	dfc00215 	stw	ra,8(sp)
    fbf8:	df000115 	stw	fp,4(sp)
    fbfc:	df000104 	addi	fp,sp,4
    fc00:	00820034 	movhi	r2,2048
    fc04:	1089c504 	addi	r2,r2,10004
    fc08:	10800017 	ldw	r2,0(r2)
    fc0c:	1005003a 	cmpeq	r2,r2,zero
    fc10:	1000061e 	bne	r2,zero,fc2c <alt_get_errno+0x3c>
    fc14:	00820034 	movhi	r2,2048
    fc18:	1089c504 	addi	r2,r2,10004
    fc1c:	10800017 	ldw	r2,0(r2)
    fc20:	103ee83a 	callr	r2
    fc24:	e0bfff15 	stw	r2,-4(fp)
    fc28:	00000306 	br	fc38 <alt_get_errno+0x48>
    fc2c:	00820034 	movhi	r2,2048
    fc30:	1089f204 	addi	r2,r2,10184
    fc34:	e0bfff15 	stw	r2,-4(fp)
    fc38:	e0bfff17 	ldw	r2,-4(fp)
    fc3c:	e037883a 	mov	sp,fp
    fc40:	dfc00117 	ldw	ra,4(sp)
    fc44:	df000017 	ldw	fp,0(sp)
    fc48:	dec00204 	addi	sp,sp,8
    fc4c:	f800283a 	ret

0000fc50 <alt_dev_null_write>:
    fc50:	defffc04 	addi	sp,sp,-16
    fc54:	df000315 	stw	fp,12(sp)
    fc58:	df000304 	addi	fp,sp,12
    fc5c:	e13ffd15 	stw	r4,-12(fp)
    fc60:	e17ffe15 	stw	r5,-8(fp)
    fc64:	e1bfff15 	stw	r6,-4(fp)
    fc68:	e0bfff17 	ldw	r2,-4(fp)
    fc6c:	e037883a 	mov	sp,fp
    fc70:	df000017 	ldw	fp,0(sp)
    fc74:	dec00104 	addi	sp,sp,4
    fc78:	f800283a 	ret

0000fc7c <fstat>:
    fc7c:	defff904 	addi	sp,sp,-28
    fc80:	dfc00615 	stw	ra,24(sp)
    fc84:	df000515 	stw	fp,20(sp)
    fc88:	df000504 	addi	fp,sp,20
    fc8c:	e13ffc15 	stw	r4,-16(fp)
    fc90:	e17ffd15 	stw	r5,-12(fp)
    fc94:	e0bffc17 	ldw	r2,-16(fp)
    fc98:	1004803a 	cmplt	r2,r2,zero
    fc9c:	1000081e 	bne	r2,zero,fcc0 <fstat+0x44>
    fca0:	e0bffc17 	ldw	r2,-16(fp)
    fca4:	10800324 	muli	r2,r2,12
    fca8:	1007883a 	mov	r3,r2
    fcac:	00820034 	movhi	r2,2048
    fcb0:	10845404 	addi	r2,r2,4432
    fcb4:	1887883a 	add	r3,r3,r2
    fcb8:	e0ffff15 	stw	r3,-4(fp)
    fcbc:	00000106 	br	fcc4 <fstat+0x48>
    fcc0:	e03fff15 	stw	zero,-4(fp)
    fcc4:	e0bfff17 	ldw	r2,-4(fp)
    fcc8:	e0bffb15 	stw	r2,-20(fp)
    fccc:	e0bffb17 	ldw	r2,-20(fp)
    fcd0:	1005003a 	cmpeq	r2,r2,zero
    fcd4:	1000121e 	bne	r2,zero,fd20 <fstat+0xa4>
    fcd8:	e0bffb17 	ldw	r2,-20(fp)
    fcdc:	10800017 	ldw	r2,0(r2)
    fce0:	10800817 	ldw	r2,32(r2)
    fce4:	1005003a 	cmpeq	r2,r2,zero
    fce8:	1000081e 	bne	r2,zero,fd0c <fstat+0x90>
    fcec:	e0bffb17 	ldw	r2,-20(fp)
    fcf0:	10800017 	ldw	r2,0(r2)
    fcf4:	10800817 	ldw	r2,32(r2)
    fcf8:	e13ffb17 	ldw	r4,-20(fp)
    fcfc:	e17ffd17 	ldw	r5,-12(fp)
    fd00:	103ee83a 	callr	r2
    fd04:	e0bffe15 	stw	r2,-8(fp)
    fd08:	00000b06 	br	fd38 <fstat+0xbc>
    fd0c:	e0fffd17 	ldw	r3,-12(fp)
    fd10:	00880004 	movi	r2,8192
    fd14:	18800115 	stw	r2,4(r3)
    fd18:	e03ffe15 	stw	zero,-8(fp)
    fd1c:	00000606 	br	fd38 <fstat+0xbc>
    fd20:	000fd500 	call	fd50 <alt_get_errno>
    fd24:	1007883a 	mov	r3,r2
    fd28:	00801444 	movi	r2,81
    fd2c:	18800015 	stw	r2,0(r3)
    fd30:	00bfffc4 	movi	r2,-1
    fd34:	e0bffe15 	stw	r2,-8(fp)
    fd38:	e0bffe17 	ldw	r2,-8(fp)
    fd3c:	e037883a 	mov	sp,fp
    fd40:	dfc00117 	ldw	ra,4(sp)
    fd44:	df000017 	ldw	fp,0(sp)
    fd48:	dec00204 	addi	sp,sp,8
    fd4c:	f800283a 	ret

0000fd50 <alt_get_errno>:
    fd50:	defffd04 	addi	sp,sp,-12
    fd54:	dfc00215 	stw	ra,8(sp)
    fd58:	df000115 	stw	fp,4(sp)
    fd5c:	df000104 	addi	fp,sp,4
    fd60:	00820034 	movhi	r2,2048
    fd64:	1089c504 	addi	r2,r2,10004
    fd68:	10800017 	ldw	r2,0(r2)
    fd6c:	1005003a 	cmpeq	r2,r2,zero
    fd70:	1000061e 	bne	r2,zero,fd8c <alt_get_errno+0x3c>
    fd74:	00820034 	movhi	r2,2048
    fd78:	1089c504 	addi	r2,r2,10004
    fd7c:	10800017 	ldw	r2,0(r2)
    fd80:	103ee83a 	callr	r2
    fd84:	e0bfff15 	stw	r2,-4(fp)
    fd88:	00000306 	br	fd98 <alt_get_errno+0x48>
    fd8c:	00820034 	movhi	r2,2048
    fd90:	1089f204 	addi	r2,r2,10184
    fd94:	e0bfff15 	stw	r2,-4(fp)
    fd98:	e0bfff17 	ldw	r2,-4(fp)
    fd9c:	e037883a 	mov	sp,fp
    fda0:	dfc00117 	ldw	ra,4(sp)
    fda4:	df000017 	ldw	fp,0(sp)
    fda8:	dec00204 	addi	sp,sp,8
    fdac:	f800283a 	ret

0000fdb0 <isatty>:
    fdb0:	deffeb04 	addi	sp,sp,-84
    fdb4:	dfc01415 	stw	ra,80(sp)
    fdb8:	df001315 	stw	fp,76(sp)
    fdbc:	df001304 	addi	fp,sp,76
    fdc0:	e13ffd15 	stw	r4,-12(fp)
    fdc4:	e0bffd17 	ldw	r2,-12(fp)
    fdc8:	1004803a 	cmplt	r2,r2,zero
    fdcc:	1000081e 	bne	r2,zero,fdf0 <isatty+0x40>
    fdd0:	e0bffd17 	ldw	r2,-12(fp)
    fdd4:	10800324 	muli	r2,r2,12
    fdd8:	1007883a 	mov	r3,r2
    fddc:	00820034 	movhi	r2,2048
    fde0:	10845404 	addi	r2,r2,4432
    fde4:	1887883a 	add	r3,r3,r2
    fde8:	e0ffff15 	stw	r3,-4(fp)
    fdec:	00000106 	br	fdf4 <isatty+0x44>
    fdf0:	e03fff15 	stw	zero,-4(fp)
    fdf4:	e0bfff17 	ldw	r2,-4(fp)
    fdf8:	e0bfed15 	stw	r2,-76(fp)
    fdfc:	e0bfed17 	ldw	r2,-76(fp)
    fe00:	1005003a 	cmpeq	r2,r2,zero
    fe04:	10000f1e 	bne	r2,zero,fe44 <isatty+0x94>
    fe08:	e0bfed17 	ldw	r2,-76(fp)
    fe0c:	10800017 	ldw	r2,0(r2)
    fe10:	10800817 	ldw	r2,32(r2)
    fe14:	1004c03a 	cmpne	r2,r2,zero
    fe18:	1000031e 	bne	r2,zero,fe28 <isatty+0x78>
    fe1c:	00800044 	movi	r2,1
    fe20:	e0bffe15 	stw	r2,-8(fp)
    fe24:	00000c06 	br	fe58 <isatty+0xa8>
    fe28:	e17fee04 	addi	r5,fp,-72
    fe2c:	e13ffd17 	ldw	r4,-12(fp)
    fe30:	000fc7c0 	call	fc7c <fstat>
    fe34:	e0bfef17 	ldw	r2,-68(fp)
    fe38:	10880020 	cmpeqi	r2,r2,8192
    fe3c:	e0bffe15 	stw	r2,-8(fp)
    fe40:	00000506 	br	fe58 <isatty+0xa8>
    fe44:	000fe700 	call	fe70 <alt_get_errno>
    fe48:	1007883a 	mov	r3,r2
    fe4c:	00801444 	movi	r2,81
    fe50:	18800015 	stw	r2,0(r3)
    fe54:	e03ffe15 	stw	zero,-8(fp)
    fe58:	e0bffe17 	ldw	r2,-8(fp)
    fe5c:	e037883a 	mov	sp,fp
    fe60:	dfc00117 	ldw	ra,4(sp)
    fe64:	df000017 	ldw	fp,0(sp)
    fe68:	dec00204 	addi	sp,sp,8
    fe6c:	f800283a 	ret

0000fe70 <alt_get_errno>:
    fe70:	defffd04 	addi	sp,sp,-12
    fe74:	dfc00215 	stw	ra,8(sp)
    fe78:	df000115 	stw	fp,4(sp)
    fe7c:	df000104 	addi	fp,sp,4
    fe80:	00820034 	movhi	r2,2048
    fe84:	1089c504 	addi	r2,r2,10004
    fe88:	10800017 	ldw	r2,0(r2)
    fe8c:	1005003a 	cmpeq	r2,r2,zero
    fe90:	1000061e 	bne	r2,zero,feac <alt_get_errno+0x3c>
    fe94:	00820034 	movhi	r2,2048
    fe98:	1089c504 	addi	r2,r2,10004
    fe9c:	10800017 	ldw	r2,0(r2)
    fea0:	103ee83a 	callr	r2
    fea4:	e0bfff15 	stw	r2,-4(fp)
    fea8:	00000306 	br	feb8 <alt_get_errno+0x48>
    feac:	00820034 	movhi	r2,2048
    feb0:	1089f204 	addi	r2,r2,10184
    feb4:	e0bfff15 	stw	r2,-4(fp)
    feb8:	e0bfff17 	ldw	r2,-4(fp)
    febc:	e037883a 	mov	sp,fp
    fec0:	dfc00117 	ldw	ra,4(sp)
    fec4:	df000017 	ldw	fp,0(sp)
    fec8:	dec00204 	addi	sp,sp,8
    fecc:	f800283a 	ret

0000fed0 <lseek>:
    fed0:	defff804 	addi	sp,sp,-32
    fed4:	dfc00715 	stw	ra,28(sp)
    fed8:	df000615 	stw	fp,24(sp)
    fedc:	df000604 	addi	fp,sp,24
    fee0:	e13ffc15 	stw	r4,-16(fp)
    fee4:	e17ffd15 	stw	r5,-12(fp)
    fee8:	e1bffe15 	stw	r6,-8(fp)
    feec:	e03ffa15 	stw	zero,-24(fp)
    fef0:	e0bffc17 	ldw	r2,-16(fp)
    fef4:	1004803a 	cmplt	r2,r2,zero
    fef8:	1000081e 	bne	r2,zero,ff1c <lseek+0x4c>
    fefc:	e0bffc17 	ldw	r2,-16(fp)
    ff00:	10800324 	muli	r2,r2,12
    ff04:	1007883a 	mov	r3,r2
    ff08:	00820034 	movhi	r2,2048
    ff0c:	10845404 	addi	r2,r2,4432
    ff10:	1887883a 	add	r3,r3,r2
    ff14:	e0ffff15 	stw	r3,-4(fp)
    ff18:	00000106 	br	ff20 <lseek+0x50>
    ff1c:	e03fff15 	stw	zero,-4(fp)
    ff20:	e0bfff17 	ldw	r2,-4(fp)
    ff24:	e0bffb15 	stw	r2,-20(fp)
    ff28:	e0bffb17 	ldw	r2,-20(fp)
    ff2c:	1005003a 	cmpeq	r2,r2,zero
    ff30:	1000111e 	bne	r2,zero,ff78 <lseek+0xa8>
    ff34:	e0bffb17 	ldw	r2,-20(fp)
    ff38:	10800017 	ldw	r2,0(r2)
    ff3c:	10800717 	ldw	r2,28(r2)
    ff40:	1005003a 	cmpeq	r2,r2,zero
    ff44:	1000091e 	bne	r2,zero,ff6c <lseek+0x9c>
    ff48:	e0bffb17 	ldw	r2,-20(fp)
    ff4c:	10800017 	ldw	r2,0(r2)
    ff50:	10800717 	ldw	r2,28(r2)
    ff54:	e13ffb17 	ldw	r4,-20(fp)
    ff58:	e17ffd17 	ldw	r5,-12(fp)
    ff5c:	e1bffe17 	ldw	r6,-8(fp)
    ff60:	103ee83a 	callr	r2
    ff64:	e0bffa15 	stw	r2,-24(fp)
    ff68:	00000506 	br	ff80 <lseek+0xb0>
    ff6c:	00bfde84 	movi	r2,-134
    ff70:	e0bffa15 	stw	r2,-24(fp)
    ff74:	00000206 	br	ff80 <lseek+0xb0>
    ff78:	00bfebc4 	movi	r2,-81
    ff7c:	e0bffa15 	stw	r2,-24(fp)
    ff80:	e0bffa17 	ldw	r2,-24(fp)
    ff84:	1004403a 	cmpge	r2,r2,zero
    ff88:	1000071e 	bne	r2,zero,ffa8 <lseek+0xd8>
    ff8c:	000ffc00 	call	ffc0 <alt_get_errno>
    ff90:	1007883a 	mov	r3,r2
    ff94:	e0bffa17 	ldw	r2,-24(fp)
    ff98:	0085c83a 	sub	r2,zero,r2
    ff9c:	18800015 	stw	r2,0(r3)
    ffa0:	00bfffc4 	movi	r2,-1
    ffa4:	e0bffa15 	stw	r2,-24(fp)
    ffa8:	e0bffa17 	ldw	r2,-24(fp)
    ffac:	e037883a 	mov	sp,fp
    ffb0:	dfc00117 	ldw	ra,4(sp)
    ffb4:	df000017 	ldw	fp,0(sp)
    ffb8:	dec00204 	addi	sp,sp,8
    ffbc:	f800283a 	ret

0000ffc0 <alt_get_errno>:
    ffc0:	defffd04 	addi	sp,sp,-12
    ffc4:	dfc00215 	stw	ra,8(sp)
    ffc8:	df000115 	stw	fp,4(sp)
    ffcc:	df000104 	addi	fp,sp,4
    ffd0:	00820034 	movhi	r2,2048
    ffd4:	1089c504 	addi	r2,r2,10004
    ffd8:	10800017 	ldw	r2,0(r2)
    ffdc:	1005003a 	cmpeq	r2,r2,zero
    ffe0:	1000061e 	bne	r2,zero,fffc <alt_get_errno+0x3c>
    ffe4:	00820034 	movhi	r2,2048
    ffe8:	1089c504 	addi	r2,r2,10004
    ffec:	10800017 	ldw	r2,0(r2)
    fff0:	103ee83a 	callr	r2
    fff4:	e0bfff15 	stw	r2,-4(fp)
    fff8:	00000306 	br	10008 <alt_get_errno+0x48>
    fffc:	00820034 	movhi	r2,2048
   10000:	1089f204 	addi	r2,r2,10184
   10004:	e0bfff15 	stw	r2,-4(fp)
   10008:	e0bfff17 	ldw	r2,-4(fp)
   1000c:	e037883a 	mov	sp,fp
   10010:	dfc00117 	ldw	ra,4(sp)
   10014:	df000017 	ldw	fp,0(sp)
   10018:	dec00204 	addi	sp,sp,8
   1001c:	f800283a 	ret

00010020 <alt_main>:
   10020:	defffd04 	addi	sp,sp,-12
   10024:	dfc00215 	stw	ra,8(sp)
   10028:	df000115 	stw	fp,4(sp)
   1002c:	df000104 	addi	fp,sp,4
   10030:	0009883a 	mov	r4,zero
   10034:	00104e80 	call	104e8 <alt_irq_init>
   10038:	001051c0 	call	1051c <alt_sys_init>
   1003c:	01020034 	movhi	r4,2048
   10040:	21016704 	addi	r4,r4,1436
   10044:	01420034 	movhi	r5,2048
   10048:	29416704 	addi	r5,r5,1436
   1004c:	01820034 	movhi	r6,2048
   10050:	31816704 	addi	r6,r6,1436
   10054:	00170080 	call	17008 <alt_io_redirect>
   10058:	0016d180 	call	16d18 <_do_ctors>
   1005c:	01000074 	movhi	r4,1
   10060:	211b5f04 	addi	r4,r4,28028
   10064:	00180fc0 	call	180fc <atexit>
   10068:	d1204417 	ldw	r4,-32496(gp)
   1006c:	d1604517 	ldw	r5,-32492(gp)
   10070:	d1a04617 	ldw	r6,-32488(gp)
   10074:	0005e240 	call	5e24 <main>
   10078:	e0bfff15 	stw	r2,-4(fp)
   1007c:	01000044 	movi	r4,1
   10080:	000faf40 	call	faf4 <close>
   10084:	e13fff17 	ldw	r4,-4(fp)
   10088:	00181100 	call	18110 <exit>

0001008c <__malloc_lock>:
   1008c:	defffe04 	addi	sp,sp,-8
   10090:	df000115 	stw	fp,4(sp)
   10094:	df000104 	addi	fp,sp,4
   10098:	e13fff15 	stw	r4,-4(fp)
   1009c:	e037883a 	mov	sp,fp
   100a0:	df000017 	ldw	fp,0(sp)
   100a4:	dec00104 	addi	sp,sp,4
   100a8:	f800283a 	ret

000100ac <__malloc_unlock>:
   100ac:	defffe04 	addi	sp,sp,-8
   100b0:	df000115 	stw	fp,4(sp)
   100b4:	df000104 	addi	fp,sp,4
   100b8:	e13fff15 	stw	r4,-4(fp)
   100bc:	e037883a 	mov	sp,fp
   100c0:	df000017 	ldw	fp,0(sp)
   100c4:	dec00104 	addi	sp,sp,4
   100c8:	f800283a 	ret

000100cc <read>:
   100cc:	defff704 	addi	sp,sp,-36
   100d0:	dfc00815 	stw	ra,32(sp)
   100d4:	df000715 	stw	fp,28(sp)
   100d8:	df000704 	addi	fp,sp,28
   100dc:	e13ffb15 	stw	r4,-20(fp)
   100e0:	e17ffc15 	stw	r5,-16(fp)
   100e4:	e1bffd15 	stw	r6,-12(fp)
   100e8:	e0bffb17 	ldw	r2,-20(fp)
   100ec:	1004803a 	cmplt	r2,r2,zero
   100f0:	1000081e 	bne	r2,zero,10114 <read+0x48>
   100f4:	e0bffb17 	ldw	r2,-20(fp)
   100f8:	10800324 	muli	r2,r2,12
   100fc:	1007883a 	mov	r3,r2
   10100:	00820034 	movhi	r2,2048
   10104:	10845404 	addi	r2,r2,4432
   10108:	1887883a 	add	r3,r3,r2
   1010c:	e0ffff15 	stw	r3,-4(fp)
   10110:	00000106 	br	10118 <read+0x4c>
   10114:	e03fff15 	stw	zero,-4(fp)
   10118:	e0bfff17 	ldw	r2,-4(fp)
   1011c:	e0bffa15 	stw	r2,-24(fp)
   10120:	e0bffa17 	ldw	r2,-24(fp)
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000241e 	bne	r2,zero,101bc <read+0xf0>
   1012c:	e0bffa17 	ldw	r2,-24(fp)
   10130:	10800217 	ldw	r2,8(r2)
   10134:	108000cc 	andi	r2,r2,3
   10138:	10800060 	cmpeqi	r2,r2,1
   1013c:	10001a1e 	bne	r2,zero,101a8 <read+0xdc>
   10140:	e0bffa17 	ldw	r2,-24(fp)
   10144:	10800017 	ldw	r2,0(r2)
   10148:	10800517 	ldw	r2,20(r2)
   1014c:	1005003a 	cmpeq	r2,r2,zero
   10150:	1000151e 	bne	r2,zero,101a8 <read+0xdc>
   10154:	e0bffa17 	ldw	r2,-24(fp)
   10158:	10800017 	ldw	r2,0(r2)
   1015c:	10800517 	ldw	r2,20(r2)
   10160:	e17ffc17 	ldw	r5,-16(fp)
   10164:	e1bffd17 	ldw	r6,-12(fp)
   10168:	e13ffa17 	ldw	r4,-24(fp)
   1016c:	103ee83a 	callr	r2
   10170:	e0bff915 	stw	r2,-28(fp)
   10174:	e0bff917 	ldw	r2,-28(fp)
   10178:	1004403a 	cmpge	r2,r2,zero
   1017c:	1000071e 	bne	r2,zero,1019c <read+0xd0>
   10180:	00101ec0 	call	101ec <alt_get_errno>
   10184:	e0fff917 	ldw	r3,-28(fp)
   10188:	00c7c83a 	sub	r3,zero,r3
   1018c:	10c00015 	stw	r3,0(r2)
   10190:	00bfffc4 	movi	r2,-1
   10194:	e0bffe15 	stw	r2,-8(fp)
   10198:	00000e06 	br	101d4 <read+0x108>
   1019c:	e0bff917 	ldw	r2,-28(fp)
   101a0:	e0bffe15 	stw	r2,-8(fp)
   101a4:	00000b06 	br	101d4 <read+0x108>
   101a8:	00101ec0 	call	101ec <alt_get_errno>
   101ac:	1007883a 	mov	r3,r2
   101b0:	00800344 	movi	r2,13
   101b4:	18800015 	stw	r2,0(r3)
   101b8:	00000406 	br	101cc <read+0x100>
   101bc:	00101ec0 	call	101ec <alt_get_errno>
   101c0:	1007883a 	mov	r3,r2
   101c4:	00801444 	movi	r2,81
   101c8:	18800015 	stw	r2,0(r3)
   101cc:	00bfffc4 	movi	r2,-1
   101d0:	e0bffe15 	stw	r2,-8(fp)
   101d4:	e0bffe17 	ldw	r2,-8(fp)
   101d8:	e037883a 	mov	sp,fp
   101dc:	dfc00117 	ldw	ra,4(sp)
   101e0:	df000017 	ldw	fp,0(sp)
   101e4:	dec00204 	addi	sp,sp,8
   101e8:	f800283a 	ret

000101ec <alt_get_errno>:
   101ec:	defffd04 	addi	sp,sp,-12
   101f0:	dfc00215 	stw	ra,8(sp)
   101f4:	df000115 	stw	fp,4(sp)
   101f8:	df000104 	addi	fp,sp,4
   101fc:	00820034 	movhi	r2,2048
   10200:	1089c504 	addi	r2,r2,10004
   10204:	10800017 	ldw	r2,0(r2)
   10208:	1005003a 	cmpeq	r2,r2,zero
   1020c:	1000061e 	bne	r2,zero,10228 <alt_get_errno+0x3c>
   10210:	00820034 	movhi	r2,2048
   10214:	1089c504 	addi	r2,r2,10004
   10218:	10800017 	ldw	r2,0(r2)
   1021c:	103ee83a 	callr	r2
   10220:	e0bfff15 	stw	r2,-4(fp)
   10224:	00000306 	br	10234 <alt_get_errno+0x48>
   10228:	00820034 	movhi	r2,2048
   1022c:	1089f204 	addi	r2,r2,10184
   10230:	e0bfff15 	stw	r2,-4(fp)
   10234:	e0bfff17 	ldw	r2,-4(fp)
   10238:	e037883a 	mov	sp,fp
   1023c:	dfc00117 	ldw	ra,4(sp)
   10240:	df000017 	ldw	fp,0(sp)
   10244:	dec00204 	addi	sp,sp,8
   10248:	f800283a 	ret

0001024c <alt_release_fd>:
   1024c:	defffe04 	addi	sp,sp,-8
   10250:	df000115 	stw	fp,4(sp)
   10254:	df000104 	addi	fp,sp,4
   10258:	e13fff15 	stw	r4,-4(fp)
   1025c:	e0bfff17 	ldw	r2,-4(fp)
   10260:	108000d0 	cmplti	r2,r2,3
   10264:	10000d1e 	bne	r2,zero,1029c <alt_release_fd+0x50>
   10268:	e0bfff17 	ldw	r2,-4(fp)
   1026c:	00c20034 	movhi	r3,2048
   10270:	18c45404 	addi	r3,r3,4432
   10274:	10800324 	muli	r2,r2,12
   10278:	10c5883a 	add	r2,r2,r3
   1027c:	10800204 	addi	r2,r2,8
   10280:	10000015 	stw	zero,0(r2)
   10284:	e0bfff17 	ldw	r2,-4(fp)
   10288:	00c20034 	movhi	r3,2048
   1028c:	18c45404 	addi	r3,r3,4432
   10290:	10800324 	muli	r2,r2,12
   10294:	10c5883a 	add	r2,r2,r3
   10298:	10000015 	stw	zero,0(r2)
   1029c:	e037883a 	mov	sp,fp
   102a0:	df000017 	ldw	fp,0(sp)
   102a4:	dec00104 	addi	sp,sp,4
   102a8:	f800283a 	ret

000102ac <sbrk>:
   102ac:	defff804 	addi	sp,sp,-32
   102b0:	df000715 	stw	fp,28(sp)
   102b4:	df000704 	addi	fp,sp,28
   102b8:	e13ffe15 	stw	r4,-8(fp)
   102bc:	0005303a 	rdctl	r2,status
   102c0:	e0bffb15 	stw	r2,-20(fp)
   102c4:	e0fffb17 	ldw	r3,-20(fp)
   102c8:	00bfff84 	movi	r2,-2
   102cc:	1884703a 	and	r2,r3,r2
   102d0:	1001703a 	wrctl	status,r2
   102d4:	e0bffb17 	ldw	r2,-20(fp)
   102d8:	e0bffd15 	stw	r2,-12(fp)
   102dc:	d0a01717 	ldw	r2,-32676(gp)
   102e0:	10c000c4 	addi	r3,r2,3
   102e4:	00bfff04 	movi	r2,-4
   102e8:	1884703a 	and	r2,r3,r2
   102ec:	d0a01715 	stw	r2,-32676(gp)
   102f0:	d0e01717 	ldw	r3,-32676(gp)
   102f4:	e0bffe17 	ldw	r2,-8(fp)
   102f8:	1887883a 	add	r3,r3,r2
   102fc:	00840034 	movhi	r2,4096
   10300:	10800004 	addi	r2,r2,0
   10304:	10c0072e 	bgeu	r2,r3,10324 <sbrk+0x78>
   10308:	e0bffd17 	ldw	r2,-12(fp)
   1030c:	e0bffa15 	stw	r2,-24(fp)
   10310:	e0bffa17 	ldw	r2,-24(fp)
   10314:	1001703a 	wrctl	status,r2
   10318:	00bfffc4 	movi	r2,-1
   1031c:	e0bfff15 	stw	r2,-4(fp)
   10320:	00000c06 	br	10354 <sbrk+0xa8>
   10324:	d0a01717 	ldw	r2,-32676(gp)
   10328:	e0bffc15 	stw	r2,-16(fp)
   1032c:	d0e01717 	ldw	r3,-32676(gp)
   10330:	e0bffe17 	ldw	r2,-8(fp)
   10334:	1885883a 	add	r2,r3,r2
   10338:	d0a01715 	stw	r2,-32676(gp)
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	e0bff915 	stw	r2,-28(fp)
   10344:	e0bff917 	ldw	r2,-28(fp)
   10348:	1001703a 	wrctl	status,r2
   1034c:	e0bffc17 	ldw	r2,-16(fp)
   10350:	e0bfff15 	stw	r2,-4(fp)
   10354:	e0bfff17 	ldw	r2,-4(fp)
   10358:	e037883a 	mov	sp,fp
   1035c:	df000017 	ldw	fp,0(sp)
   10360:	dec00104 	addi	sp,sp,4
   10364:	f800283a 	ret

00010368 <write>:
   10368:	defff704 	addi	sp,sp,-36
   1036c:	dfc00815 	stw	ra,32(sp)
   10370:	df000715 	stw	fp,28(sp)
   10374:	df000704 	addi	fp,sp,28
   10378:	e13ffb15 	stw	r4,-20(fp)
   1037c:	e17ffc15 	stw	r5,-16(fp)
   10380:	e1bffd15 	stw	r6,-12(fp)
   10384:	e0bffb17 	ldw	r2,-20(fp)
   10388:	1004803a 	cmplt	r2,r2,zero
   1038c:	1000081e 	bne	r2,zero,103b0 <write+0x48>
   10390:	e0bffb17 	ldw	r2,-20(fp)
   10394:	10800324 	muli	r2,r2,12
   10398:	1007883a 	mov	r3,r2
   1039c:	00820034 	movhi	r2,2048
   103a0:	10845404 	addi	r2,r2,4432
   103a4:	1887883a 	add	r3,r3,r2
   103a8:	e0ffff15 	stw	r3,-4(fp)
   103ac:	00000106 	br	103b4 <write+0x4c>
   103b0:	e03fff15 	stw	zero,-4(fp)
   103b4:	e0bfff17 	ldw	r2,-4(fp)
   103b8:	e0bffa15 	stw	r2,-24(fp)
   103bc:	e0bffa17 	ldw	r2,-24(fp)
   103c0:	1005003a 	cmpeq	r2,r2,zero
   103c4:	1000241e 	bne	r2,zero,10458 <write+0xf0>
   103c8:	e0bffa17 	ldw	r2,-24(fp)
   103cc:	10800217 	ldw	r2,8(r2)
   103d0:	108000cc 	andi	r2,r2,3
   103d4:	1005003a 	cmpeq	r2,r2,zero
   103d8:	10001a1e 	bne	r2,zero,10444 <write+0xdc>
   103dc:	e0bffa17 	ldw	r2,-24(fp)
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	10800617 	ldw	r2,24(r2)
   103e8:	1005003a 	cmpeq	r2,r2,zero
   103ec:	1000151e 	bne	r2,zero,10444 <write+0xdc>
   103f0:	e0bffa17 	ldw	r2,-24(fp)
   103f4:	10800017 	ldw	r2,0(r2)
   103f8:	10800617 	ldw	r2,24(r2)
   103fc:	e17ffc17 	ldw	r5,-16(fp)
   10400:	e1bffd17 	ldw	r6,-12(fp)
   10404:	e13ffa17 	ldw	r4,-24(fp)
   10408:	103ee83a 	callr	r2
   1040c:	e0bff915 	stw	r2,-28(fp)
   10410:	e0bff917 	ldw	r2,-28(fp)
   10414:	1004403a 	cmpge	r2,r2,zero
   10418:	1000071e 	bne	r2,zero,10438 <write+0xd0>
   1041c:	00104880 	call	10488 <alt_get_errno>
   10420:	e0fff917 	ldw	r3,-28(fp)
   10424:	00c7c83a 	sub	r3,zero,r3
   10428:	10c00015 	stw	r3,0(r2)
   1042c:	00bfffc4 	movi	r2,-1
   10430:	e0bffe15 	stw	r2,-8(fp)
   10434:	00000e06 	br	10470 <write+0x108>
   10438:	e0bff917 	ldw	r2,-28(fp)
   1043c:	e0bffe15 	stw	r2,-8(fp)
   10440:	00000b06 	br	10470 <write+0x108>
   10444:	00104880 	call	10488 <alt_get_errno>
   10448:	1007883a 	mov	r3,r2
   1044c:	00800344 	movi	r2,13
   10450:	18800015 	stw	r2,0(r3)
   10454:	00000406 	br	10468 <write+0x100>
   10458:	00104880 	call	10488 <alt_get_errno>
   1045c:	1007883a 	mov	r3,r2
   10460:	00801444 	movi	r2,81
   10464:	18800015 	stw	r2,0(r3)
   10468:	00bfffc4 	movi	r2,-1
   1046c:	e0bffe15 	stw	r2,-8(fp)
   10470:	e0bffe17 	ldw	r2,-8(fp)
   10474:	e037883a 	mov	sp,fp
   10478:	dfc00117 	ldw	ra,4(sp)
   1047c:	df000017 	ldw	fp,0(sp)
   10480:	dec00204 	addi	sp,sp,8
   10484:	f800283a 	ret

00010488 <alt_get_errno>:
   10488:	defffd04 	addi	sp,sp,-12
   1048c:	dfc00215 	stw	ra,8(sp)
   10490:	df000115 	stw	fp,4(sp)
   10494:	df000104 	addi	fp,sp,4
   10498:	00820034 	movhi	r2,2048
   1049c:	1089c504 	addi	r2,r2,10004
   104a0:	10800017 	ldw	r2,0(r2)
   104a4:	1005003a 	cmpeq	r2,r2,zero
   104a8:	1000061e 	bne	r2,zero,104c4 <alt_get_errno+0x3c>
   104ac:	00820034 	movhi	r2,2048
   104b0:	1089c504 	addi	r2,r2,10004
   104b4:	10800017 	ldw	r2,0(r2)
   104b8:	103ee83a 	callr	r2
   104bc:	e0bfff15 	stw	r2,-4(fp)
   104c0:	00000306 	br	104d0 <alt_get_errno+0x48>
   104c4:	00820034 	movhi	r2,2048
   104c8:	1089f204 	addi	r2,r2,10184
   104cc:	e0bfff15 	stw	r2,-4(fp)
   104d0:	e0bfff17 	ldw	r2,-4(fp)
   104d4:	e037883a 	mov	sp,fp
   104d8:	dfc00117 	ldw	ra,4(sp)
   104dc:	df000017 	ldw	fp,0(sp)
   104e0:	dec00204 	addi	sp,sp,8
   104e4:	f800283a 	ret

000104e8 <alt_irq_init>:
   104e8:	defffd04 	addi	sp,sp,-12
   104ec:	dfc00215 	stw	ra,8(sp)
   104f0:	df000115 	stw	fp,4(sp)
   104f4:	df000104 	addi	fp,sp,4
   104f8:	e13fff15 	stw	r4,-4(fp)
   104fc:	00175180 	call	17518 <altera_nios2_qsys_irq_init>
   10500:	00800044 	movi	r2,1
   10504:	1001703a 	wrctl	status,r2
   10508:	e037883a 	mov	sp,fp
   1050c:	dfc00117 	ldw	ra,4(sp)
   10510:	df000017 	ldw	fp,0(sp)
   10514:	dec00204 	addi	sp,sp,8
   10518:	f800283a 	ret

0001051c <alt_sys_init>:
   1051c:	defffd04 	addi	sp,sp,-12
   10520:	dfc00215 	stw	ra,8(sp)
   10524:	df000115 	stw	fp,4(sp)
   10528:	df000104 	addi	fp,sp,4
   1052c:	01000134 	movhi	r4,4
   10530:	210c1004 	addi	r4,r4,12352
   10534:	000b883a 	mov	r5,zero
   10538:	000d883a 	mov	r6,zero
   1053c:	01c0fa04 	movi	r7,1000
   10540:	00140940 	call	14094 <alt_avalon_timer_sc_init>
   10544:	01020034 	movhi	r4,2048
   10548:	2104b404 	addi	r4,r4,4816
   1054c:	00108c00 	call	108c0 <alt_flash_cfi_init>
   10550:	01020034 	movhi	r4,2048
   10554:	2104f404 	addi	r4,r4,5072
   10558:	000b883a 	mov	r5,zero
   1055c:	01800144 	movi	r6,5
   10560:	00127880 	call	12788 <altera_avalon_jtag_uart_init>
   10564:	01020034 	movhi	r4,2048
   10568:	2104ea04 	addi	r4,r4,5032
   1056c:	00108880 	call	10888 <alt_dev_reg>
   10570:	01020034 	movhi	r4,2048
   10574:	21090c04 	addi	r4,r4,9264
   10578:	0013e8c0 	call	13e8c <altera_avalon_lcd_16207_init>
   1057c:	01020034 	movhi	r4,2048
   10580:	21090204 	addi	r4,r4,9224
   10584:	00108880 	call	10888 <alt_dev_reg>
   10588:	01020034 	movhi	r4,2048
   1058c:	21095404 	addi	r4,r4,9552
   10590:	000b883a 	mov	r5,zero
   10594:	018000c4 	movi	r6,3
   10598:	00142140 	call	14214 <altera_avalon_uart_init>
   1059c:	01020034 	movhi	r4,2048
   105a0:	21094a04 	addi	r4,r4,9512
   105a4:	00108880 	call	10888 <alt_dev_reg>
   105a8:	01020034 	movhi	r4,2048
   105ac:	21097b04 	addi	r4,r4,9708
   105b0:	0014bf40 	call	14bf4 <alt_up_ps2_init>
   105b4:	01020034 	movhi	r4,2048
   105b8:	21097b04 	addi	r4,r4,9708
   105bc:	00108880 	call	10888 <alt_dev_reg>
   105c0:	00820034 	movhi	r2,2048
   105c4:	10898904 	addi	r2,r2,9764
   105c8:	10800a17 	ldw	r2,40(r2)
   105cc:	10800104 	addi	r2,r2,4
   105d0:	10800017 	ldw	r2,0(r2)
   105d4:	10ffffcc 	andi	r3,r2,65535
   105d8:	00820034 	movhi	r2,2048
   105dc:	10898904 	addi	r2,r2,9764
   105e0:	10c00c15 	stw	r3,48(r2)
   105e4:	00820034 	movhi	r2,2048
   105e8:	10898904 	addi	r2,r2,9764
   105ec:	10800a17 	ldw	r2,40(r2)
   105f0:	10800104 	addi	r2,r2,4
   105f4:	10800017 	ldw	r2,0(r2)
   105f8:	1005d43a 	srai	r2,r2,16
   105fc:	10ffffcc 	andi	r3,r2,65535
   10600:	00820034 	movhi	r2,2048
   10604:	10898904 	addi	r2,r2,9764
   10608:	10c00d15 	stw	r3,52(r2)
   1060c:	00820034 	movhi	r2,2048
   10610:	10898904 	addi	r2,r2,9764
   10614:	10800c17 	ldw	r2,48(r2)
   10618:	10801068 	cmpgeui	r2,r2,65
   1061c:	1000081e 	bne	r2,zero,10640 <alt_sys_init+0x124>
   10620:	00c20034 	movhi	r3,2048
   10624:	18c98904 	addi	r3,r3,9764
   10628:	00800fc4 	movi	r2,63
   1062c:	18800f15 	stw	r2,60(r3)
   10630:	00c20034 	movhi	r3,2048
   10634:	18c98904 	addi	r3,r3,9764
   10638:	00800184 	movi	r2,6
   1063c:	18801015 	stw	r2,64(r3)
   10640:	00820034 	movhi	r2,2048
   10644:	10898904 	addi	r2,r2,9764
   10648:	10800d17 	ldw	r2,52(r2)
   1064c:	10800868 	cmpgeui	r2,r2,33
   10650:	1000041e 	bne	r2,zero,10664 <alt_sys_init+0x148>
   10654:	00c20034 	movhi	r3,2048
   10658:	18c98904 	addi	r3,r3,9764
   1065c:	008007c4 	movi	r2,31
   10660:	18801115 	stw	r2,68(r3)
   10664:	01020034 	movhi	r4,2048
   10668:	21098904 	addi	r4,r4,9764
   1066c:	00151c80 	call	151c8 <alt_up_char_buffer_init>
   10670:	01020034 	movhi	r4,2048
   10674:	21098904 	addi	r4,r4,9764
   10678:	00108880 	call	10888 <alt_dev_reg>
   1067c:	00820034 	movhi	r2,2048
   10680:	10899b04 	addi	r2,r2,9836
   10684:	10800a17 	ldw	r2,40(r2)
   10688:	10800017 	ldw	r2,0(r2)
   1068c:	1007883a 	mov	r3,r2
   10690:	00820034 	movhi	r2,2048
   10694:	10899b04 	addi	r2,r2,9836
   10698:	10c00b15 	stw	r3,44(r2)
   1069c:	00820034 	movhi	r2,2048
   106a0:	10899b04 	addi	r2,r2,9836
   106a4:	10800a17 	ldw	r2,40(r2)
   106a8:	10800104 	addi	r2,r2,4
   106ac:	10800017 	ldw	r2,0(r2)
   106b0:	1007883a 	mov	r3,r2
   106b4:	00820034 	movhi	r2,2048
   106b8:	10899b04 	addi	r2,r2,9836
   106bc:	10c00c15 	stw	r3,48(r2)
   106c0:	00820034 	movhi	r2,2048
   106c4:	10899b04 	addi	r2,r2,9836
   106c8:	10800a17 	ldw	r2,40(r2)
   106cc:	10800204 	addi	r2,r2,8
   106d0:	10800017 	ldw	r2,0(r2)
   106d4:	10ffffcc 	andi	r3,r2,65535
   106d8:	00820034 	movhi	r2,2048
   106dc:	10899b04 	addi	r2,r2,9836
   106e0:	10c00f15 	stw	r3,60(r2)
   106e4:	00820034 	movhi	r2,2048
   106e8:	10899b04 	addi	r2,r2,9836
   106ec:	10800a17 	ldw	r2,40(r2)
   106f0:	10800204 	addi	r2,r2,8
   106f4:	10800017 	ldw	r2,0(r2)
   106f8:	1005d43a 	srai	r2,r2,16
   106fc:	10ffffcc 	andi	r3,r2,65535
   10700:	00820034 	movhi	r2,2048
   10704:	10899b04 	addi	r2,r2,9836
   10708:	10c01015 	stw	r3,64(r2)
   1070c:	00820034 	movhi	r2,2048
   10710:	10899b04 	addi	r2,r2,9836
   10714:	10800a17 	ldw	r2,40(r2)
   10718:	10800304 	addi	r2,r2,12
   1071c:	10800017 	ldw	r2,0(r2)
   10720:	1005d07a 	srai	r2,r2,1
   10724:	10c0004c 	andi	r3,r2,1
   10728:	00820034 	movhi	r2,2048
   1072c:	10899b04 	addi	r2,r2,9836
   10730:	10c00d15 	stw	r3,52(r2)
   10734:	00820034 	movhi	r2,2048
   10738:	10899b04 	addi	r2,r2,9836
   1073c:	10800a17 	ldw	r2,40(r2)
   10740:	10800304 	addi	r2,r2,12
   10744:	10800017 	ldw	r2,0(r2)
   10748:	1005d13a 	srai	r2,r2,4
   1074c:	10c003cc 	andi	r3,r2,15
   10750:	00820034 	movhi	r2,2048
   10754:	10899b04 	addi	r2,r2,9836
   10758:	10c00e15 	stw	r3,56(r2)
   1075c:	00820034 	movhi	r2,2048
   10760:	10899b04 	addi	r2,r2,9836
   10764:	10800a17 	ldw	r2,40(r2)
   10768:	10800304 	addi	r2,r2,12
   1076c:	10800017 	ldw	r2,0(r2)
   10770:	1005d43a 	srai	r2,r2,16
   10774:	1007883a 	mov	r3,r2
   10778:	00bfffc4 	movi	r2,-1
   1077c:	1884703a 	and	r2,r3,r2
   10780:	e0bfff45 	stb	r2,-3(fp)
   10784:	00820034 	movhi	r2,2048
   10788:	10899b04 	addi	r2,r2,9836
   1078c:	10800a17 	ldw	r2,40(r2)
   10790:	10800304 	addi	r2,r2,12
   10794:	10800017 	ldw	r2,0(r2)
   10798:	1005d63a 	srai	r2,r2,24
   1079c:	1007883a 	mov	r3,r2
   107a0:	00bfffc4 	movi	r2,-1
   107a4:	1884703a 	and	r2,r3,r2
   107a8:	e0bfff05 	stb	r2,-4(fp)
   107ac:	00820034 	movhi	r2,2048
   107b0:	10899b04 	addi	r2,r2,9836
   107b4:	10800e17 	ldw	r2,56(r2)
   107b8:	10800058 	cmpnei	r2,r2,1
   107bc:	1000041e 	bne	r2,zero,107d0 <alt_sys_init+0x2b4>
   107c0:	00820034 	movhi	r2,2048
   107c4:	10899b04 	addi	r2,r2,9836
   107c8:	10001115 	stw	zero,68(r2)
   107cc:	00000e06 	br	10808 <alt_sys_init+0x2ec>
   107d0:	00820034 	movhi	r2,2048
   107d4:	10899b04 	addi	r2,r2,9836
   107d8:	10800e17 	ldw	r2,56(r2)
   107dc:	10800098 	cmpnei	r2,r2,2
   107e0:	1000051e 	bne	r2,zero,107f8 <alt_sys_init+0x2dc>
   107e4:	00c20034 	movhi	r3,2048
   107e8:	18c99b04 	addi	r3,r3,9836
   107ec:	00800044 	movi	r2,1
   107f0:	18801115 	stw	r2,68(r3)
   107f4:	00000406 	br	10808 <alt_sys_init+0x2ec>
   107f8:	00c20034 	movhi	r3,2048
   107fc:	18c99b04 	addi	r3,r3,9836
   10800:	00800084 	movi	r2,2
   10804:	18801115 	stw	r2,68(r3)
   10808:	e0ffff43 	ldbu	r3,-3(fp)
   1080c:	00800804 	movi	r2,32
   10810:	10c7c83a 	sub	r3,r2,r3
   10814:	00bfffc4 	movi	r2,-1
   10818:	10c6d83a 	srl	r3,r2,r3
   1081c:	00820034 	movhi	r2,2048
   10820:	10899b04 	addi	r2,r2,9836
   10824:	10c01215 	stw	r3,72(r2)
   10828:	e0ffff43 	ldbu	r3,-3(fp)
   1082c:	00820034 	movhi	r2,2048
   10830:	10899b04 	addi	r2,r2,9836
   10834:	10801117 	ldw	r2,68(r2)
   10838:	1887883a 	add	r3,r3,r2
   1083c:	00820034 	movhi	r2,2048
   10840:	10899b04 	addi	r2,r2,9836
   10844:	10c01315 	stw	r3,76(r2)
   10848:	e0ffff03 	ldbu	r3,-4(fp)
   1084c:	00800804 	movi	r2,32
   10850:	10c7c83a 	sub	r3,r2,r3
   10854:	00bfffc4 	movi	r2,-1
   10858:	10c6d83a 	srl	r3,r2,r3
   1085c:	00820034 	movhi	r2,2048
   10860:	10899b04 	addi	r2,r2,9836
   10864:	10c01415 	stw	r3,80(r2)
   10868:	01020034 	movhi	r4,2048
   1086c:	21099b04 	addi	r4,r4,9836
   10870:	00108880 	call	10888 <alt_dev_reg>
   10874:	e037883a 	mov	sp,fp
   10878:	dfc00117 	ldw	ra,4(sp)
   1087c:	df000017 	ldw	fp,0(sp)
   10880:	dec00204 	addi	sp,sp,8
   10884:	f800283a 	ret

00010888 <alt_dev_reg>:
   10888:	defffd04 	addi	sp,sp,-12
   1088c:	dfc00215 	stw	ra,8(sp)
   10890:	df000115 	stw	fp,4(sp)
   10894:	df000104 	addi	fp,sp,4
   10898:	e13fff15 	stw	r4,-4(fp)
   1089c:	e13fff17 	ldw	r4,-4(fp)
   108a0:	01420034 	movhi	r5,2048
   108a4:	2949c204 	addi	r5,r5,9992
   108a8:	0016c040 	call	16c04 <alt_dev_llist_insert>
   108ac:	e037883a 	mov	sp,fp
   108b0:	dfc00117 	ldw	ra,4(sp)
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00204 	addi	sp,sp,8
   108bc:	f800283a 	ret

000108c0 <alt_flash_cfi_init>:
   108c0:	defffc04 	addi	sp,sp,-16
   108c4:	dfc00315 	stw	ra,12(sp)
   108c8:	df000215 	stw	fp,8(sp)
   108cc:	df000204 	addi	fp,sp,8
   108d0:	e13fff15 	stw	r4,-4(fp)
   108d4:	e03ffe15 	stw	zero,-8(fp)
   108d8:	e13fff17 	ldw	r4,-4(fp)
   108dc:	0011db80 	call	11db8 <alt_read_cfi_width>
   108e0:	e0bffe15 	stw	r2,-8(fp)
   108e4:	e0bffe17 	ldw	r2,-8(fp)
   108e8:	1004c03a 	cmpne	r2,r2,zero
   108ec:	1000031e 	bne	r2,zero,108fc <alt_flash_cfi_init+0x3c>
   108f0:	e13fff17 	ldw	r4,-4(fp)
   108f4:	00114d00 	call	114d0 <alt_set_flash_width_func>
   108f8:	e0bffe15 	stw	r2,-8(fp)
   108fc:	e0bffe17 	ldw	r2,-8(fp)
   10900:	1004c03a 	cmpne	r2,r2,zero
   10904:	1000031e 	bne	r2,zero,10914 <alt_flash_cfi_init+0x54>
   10908:	e13fff17 	ldw	r4,-4(fp)
   1090c:	00117d80 	call	117d8 <alt_read_cfi_table>
   10910:	e0bffe15 	stw	r2,-8(fp)
   10914:	e0bffe17 	ldw	r2,-8(fp)
   10918:	1004c03a 	cmpne	r2,r2,zero
   1091c:	1000031e 	bne	r2,zero,1092c <alt_flash_cfi_init+0x6c>
   10920:	e13fff17 	ldw	r4,-4(fp)
   10924:	00116b00 	call	116b0 <alt_set_flash_algorithm_func>
   10928:	e0bffe15 	stw	r2,-8(fp)
   1092c:	e0bffe17 	ldw	r2,-8(fp)
   10930:	1004c03a 	cmpne	r2,r2,zero
   10934:	1000031e 	bne	r2,zero,10944 <alt_flash_cfi_init+0x84>
   10938:	e13fff17 	ldw	r4,-4(fp)
   1093c:	001095c0 	call	1095c <alt_flash_device_register>
   10940:	e0bffe15 	stw	r2,-8(fp)
   10944:	e0bffe17 	ldw	r2,-8(fp)
   10948:	e037883a 	mov	sp,fp
   1094c:	dfc00117 	ldw	ra,4(sp)
   10950:	df000017 	ldw	fp,0(sp)
   10954:	dec00204 	addi	sp,sp,8
   10958:	f800283a 	ret

0001095c <alt_flash_device_register>:
   1095c:	defffd04 	addi	sp,sp,-12
   10960:	dfc00215 	stw	ra,8(sp)
   10964:	df000115 	stw	fp,4(sp)
   10968:	df000104 	addi	fp,sp,4
   1096c:	e13fff15 	stw	r4,-4(fp)
   10970:	e13fff17 	ldw	r4,-4(fp)
   10974:	01420034 	movhi	r5,2048
   10978:	2949c904 	addi	r5,r5,10020
   1097c:	0016c040 	call	16c04 <alt_dev_llist_insert>
   10980:	e037883a 	mov	sp,fp
   10984:	dfc00117 	ldw	ra,4(sp)
   10988:	df000017 	ldw	fp,0(sp)
   1098c:	dec00204 	addi	sp,sp,8
   10990:	f800283a 	ret

00010994 <alt_flash_cfi_write>:
   10994:	deffef04 	addi	sp,sp,-68
   10998:	dfc01015 	stw	ra,64(sp)
   1099c:	df000f15 	stw	fp,60(sp)
   109a0:	df000f04 	addi	fp,sp,60
   109a4:	e13ffa15 	stw	r4,-24(fp)
   109a8:	e17ffb15 	stw	r5,-20(fp)
   109ac:	e1bffc15 	stw	r6,-16(fp)
   109b0:	e1fffd15 	stw	r7,-12(fp)
   109b4:	e03ff915 	stw	zero,-28(fp)
   109b8:	e0bffd17 	ldw	r2,-12(fp)
   109bc:	e0bff515 	stw	r2,-44(fp)
   109c0:	e0bffb17 	ldw	r2,-20(fp)
   109c4:	e0bff315 	stw	r2,-52(fp)
   109c8:	e0bffa17 	ldw	r2,-24(fp)
   109cc:	e0bff215 	stw	r2,-56(fp)
   109d0:	e03ff815 	stw	zero,-32(fp)
   109d4:	00008e06 	br	10c10 <alt_flash_cfi_write+0x27c>
   109d8:	e0bff817 	ldw	r2,-32(fp)
   109dc:	e0fff217 	ldw	r3,-56(fp)
   109e0:	1004913a 	slli	r2,r2,4
   109e4:	10c5883a 	add	r2,r2,r3
   109e8:	10800d04 	addi	r2,r2,52
   109ec:	10c00017 	ldw	r3,0(r2)
   109f0:	e0bffb17 	ldw	r2,-20(fp)
   109f4:	10c08316 	blt	r2,r3,10c04 <alt_flash_cfi_write+0x270>
   109f8:	e0bff817 	ldw	r2,-32(fp)
   109fc:	e0fff217 	ldw	r3,-56(fp)
   10a00:	1004913a 	slli	r2,r2,4
   10a04:	10c5883a 	add	r2,r2,r3
   10a08:	10800d04 	addi	r2,r2,52
   10a0c:	11000017 	ldw	r4,0(r2)
   10a10:	e0bff817 	ldw	r2,-32(fp)
   10a14:	e0fff217 	ldw	r3,-56(fp)
   10a18:	1004913a 	slli	r2,r2,4
   10a1c:	10c5883a 	add	r2,r2,r3
   10a20:	10800e04 	addi	r2,r2,56
   10a24:	10800017 	ldw	r2,0(r2)
   10a28:	2087883a 	add	r3,r4,r2
   10a2c:	e0bffb17 	ldw	r2,-20(fp)
   10a30:	10c0740e 	bge	r2,r3,10c04 <alt_flash_cfi_write+0x270>
   10a34:	e0bff817 	ldw	r2,-32(fp)
   10a38:	e0fff217 	ldw	r3,-56(fp)
   10a3c:	1004913a 	slli	r2,r2,4
   10a40:	10c5883a 	add	r2,r2,r3
   10a44:	10800d04 	addi	r2,r2,52
   10a48:	10800017 	ldw	r2,0(r2)
   10a4c:	e0bff415 	stw	r2,-48(fp)
   10a50:	e03ff715 	stw	zero,-36(fp)
   10a54:	00006306 	br	10be4 <alt_flash_cfi_write+0x250>
   10a58:	e0fffb17 	ldw	r3,-20(fp)
   10a5c:	e0bff417 	ldw	r2,-48(fp)
   10a60:	18805416 	blt	r3,r2,10bb4 <alt_flash_cfi_write+0x220>
   10a64:	e0bff817 	ldw	r2,-32(fp)
   10a68:	e0fff217 	ldw	r3,-56(fp)
   10a6c:	1004913a 	slli	r2,r2,4
   10a70:	10c5883a 	add	r2,r2,r3
   10a74:	10801004 	addi	r2,r2,64
   10a78:	10c00017 	ldw	r3,0(r2)
   10a7c:	e0bff417 	ldw	r2,-48(fp)
   10a80:	1887883a 	add	r3,r3,r2
   10a84:	e0bffb17 	ldw	r2,-20(fp)
   10a88:	10c04a0e 	bge	r2,r3,10bb4 <alt_flash_cfi_write+0x220>
   10a8c:	e0bff817 	ldw	r2,-32(fp)
   10a90:	e0fff217 	ldw	r3,-56(fp)
   10a94:	1004913a 	slli	r2,r2,4
   10a98:	10c5883a 	add	r2,r2,r3
   10a9c:	10801004 	addi	r2,r2,64
   10aa0:	10c00017 	ldw	r3,0(r2)
   10aa4:	e0bff417 	ldw	r2,-48(fp)
   10aa8:	1887883a 	add	r3,r3,r2
   10aac:	e0bffb17 	ldw	r2,-20(fp)
   10ab0:	1885c83a 	sub	r2,r3,r2
   10ab4:	e0bff615 	stw	r2,-40(fp)
   10ab8:	e0bff617 	ldw	r2,-40(fp)
   10abc:	e0bfff15 	stw	r2,-4(fp)
   10ac0:	e0fffd17 	ldw	r3,-12(fp)
   10ac4:	e0fffe15 	stw	r3,-8(fp)
   10ac8:	e0bfff17 	ldw	r2,-4(fp)
   10acc:	e0fffe17 	ldw	r3,-8(fp)
   10ad0:	10c0020e 	bge	r2,r3,10adc <alt_flash_cfi_write+0x148>
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
   10ad8:	e0bffe15 	stw	r2,-8(fp)
   10adc:	e0fffe17 	ldw	r3,-8(fp)
   10ae0:	e0fff615 	stw	r3,-40(fp)
   10ae4:	e0bff217 	ldw	r2,-56(fp)
   10ae8:	10800a17 	ldw	r2,40(r2)
   10aec:	1007883a 	mov	r3,r2
   10af0:	e0bffb17 	ldw	r2,-20(fp)
   10af4:	188b883a 	add	r5,r3,r2
   10af8:	e1bff617 	ldw	r6,-40(fp)
   10afc:	e13ffc17 	ldw	r4,-16(fp)
   10b00:	00072b00 	call	72b0 <memcmp>
   10b04:	1005003a 	cmpeq	r2,r2,zero
   10b08:	1000131e 	bne	r2,zero,10b58 <alt_flash_cfi_write+0x1c4>
   10b0c:	e0bff217 	ldw	r2,-56(fp)
   10b10:	10800817 	ldw	r2,32(r2)
   10b14:	e13ff217 	ldw	r4,-56(fp)
   10b18:	e17ff417 	ldw	r5,-48(fp)
   10b1c:	103ee83a 	callr	r2
   10b20:	e0bff915 	stw	r2,-28(fp)
   10b24:	e0bff917 	ldw	r2,-28(fp)
   10b28:	1004c03a 	cmpne	r2,r2,zero
   10b2c:	10000a1e 	bne	r2,zero,10b58 <alt_flash_cfi_write+0x1c4>
   10b30:	e0bff217 	ldw	r2,-56(fp)
   10b34:	10c00917 	ldw	r3,36(r2)
   10b38:	e13ff217 	ldw	r4,-56(fp)
   10b3c:	e0bff617 	ldw	r2,-40(fp)
   10b40:	d8800015 	stw	r2,0(sp)
   10b44:	e17ff417 	ldw	r5,-48(fp)
   10b48:	e1bffb17 	ldw	r6,-20(fp)
   10b4c:	e1fffc17 	ldw	r7,-16(fp)
   10b50:	183ee83a 	callr	r3
   10b54:	e0bff915 	stw	r2,-28(fp)
   10b58:	e0fffd17 	ldw	r3,-12(fp)
   10b5c:	e0bff617 	ldw	r2,-40(fp)
   10b60:	18802f26 	beq	r3,r2,10c20 <alt_flash_cfi_write+0x28c>
   10b64:	e0bff917 	ldw	r2,-28(fp)
   10b68:	1004c03a 	cmpne	r2,r2,zero
   10b6c:	10002c1e 	bne	r2,zero,10c20 <alt_flash_cfi_write+0x28c>
   10b70:	e0fffd17 	ldw	r3,-12(fp)
   10b74:	e0bff617 	ldw	r2,-40(fp)
   10b78:	1885c83a 	sub	r2,r3,r2
   10b7c:	e0bffd15 	stw	r2,-12(fp)
   10b80:	e0bff817 	ldw	r2,-32(fp)
   10b84:	e0fff217 	ldw	r3,-56(fp)
   10b88:	1004913a 	slli	r2,r2,4
   10b8c:	10c5883a 	add	r2,r2,r3
   10b90:	10801004 	addi	r2,r2,64
   10b94:	10c00017 	ldw	r3,0(r2)
   10b98:	e0bff417 	ldw	r2,-48(fp)
   10b9c:	1885883a 	add	r2,r3,r2
   10ba0:	e0bffb15 	stw	r2,-20(fp)
   10ba4:	e0fffc17 	ldw	r3,-16(fp)
   10ba8:	e0bff617 	ldw	r2,-40(fp)
   10bac:	1885883a 	add	r2,r3,r2
   10bb0:	e0bffc15 	stw	r2,-16(fp)
   10bb4:	e0bff817 	ldw	r2,-32(fp)
   10bb8:	e0fff217 	ldw	r3,-56(fp)
   10bbc:	1004913a 	slli	r2,r2,4
   10bc0:	10c5883a 	add	r2,r2,r3
   10bc4:	10801004 	addi	r2,r2,64
   10bc8:	10c00017 	ldw	r3,0(r2)
   10bcc:	e0bff417 	ldw	r2,-48(fp)
   10bd0:	10c5883a 	add	r2,r2,r3
   10bd4:	e0bff415 	stw	r2,-48(fp)
   10bd8:	e0bff717 	ldw	r2,-36(fp)
   10bdc:	10800044 	addi	r2,r2,1
   10be0:	e0bff715 	stw	r2,-36(fp)
   10be4:	e0bff817 	ldw	r2,-32(fp)
   10be8:	e0fff217 	ldw	r3,-56(fp)
   10bec:	1004913a 	slli	r2,r2,4
   10bf0:	10c5883a 	add	r2,r2,r3
   10bf4:	10800f04 	addi	r2,r2,60
   10bf8:	10c00017 	ldw	r3,0(r2)
   10bfc:	e0bff717 	ldw	r2,-36(fp)
   10c00:	10ff9516 	blt	r2,r3,10a58 <alt_flash_cfi_write+0xc4>
   10c04:	e0bff817 	ldw	r2,-32(fp)
   10c08:	10800044 	addi	r2,r2,1
   10c0c:	e0bff815 	stw	r2,-32(fp)
   10c10:	e0bff217 	ldw	r2,-56(fp)
   10c14:	10c00c17 	ldw	r3,48(r2)
   10c18:	e0bff817 	ldw	r2,-32(fp)
   10c1c:	10ff6e16 	blt	r2,r3,109d8 <alt_flash_cfi_write+0x44>
   10c20:	e0bff217 	ldw	r2,-56(fp)
   10c24:	10800a17 	ldw	r2,40(r2)
   10c28:	1007883a 	mov	r3,r2
   10c2c:	e0bff317 	ldw	r2,-52(fp)
   10c30:	1889883a 	add	r4,r3,r2
   10c34:	e17ff517 	ldw	r5,-44(fp)
   10c38:	0016b8c0 	call	16b8c <alt_dcache_flush>
   10c3c:	e0bff917 	ldw	r2,-28(fp)
   10c40:	e037883a 	mov	sp,fp
   10c44:	dfc00117 	ldw	ra,4(sp)
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00204 	addi	sp,sp,8
   10c50:	f800283a 	ret

00010c54 <alt_flash_cfi_get_info>:
   10c54:	defffa04 	addi	sp,sp,-24
   10c58:	df000515 	stw	fp,20(sp)
   10c5c:	df000504 	addi	fp,sp,20
   10c60:	e13ffd15 	stw	r4,-12(fp)
   10c64:	e17ffe15 	stw	r5,-8(fp)
   10c68:	e1bfff15 	stw	r6,-4(fp)
   10c6c:	e03ffc15 	stw	zero,-16(fp)
   10c70:	e0bffd17 	ldw	r2,-12(fp)
   10c74:	e0bffb15 	stw	r2,-20(fp)
   10c78:	e0bffb17 	ldw	r2,-20(fp)
   10c7c:	10c00c17 	ldw	r3,48(r2)
   10c80:	e0bfff17 	ldw	r2,-4(fp)
   10c84:	10c00015 	stw	r3,0(r2)
   10c88:	e0bffb17 	ldw	r2,-20(fp)
   10c8c:	10800c17 	ldw	r2,48(r2)
   10c90:	1004c03a 	cmpne	r2,r2,zero
   10c94:	1000031e 	bne	r2,zero,10ca4 <alt_flash_cfi_get_info+0x50>
   10c98:	00bffec4 	movi	r2,-5
   10c9c:	e0bffc15 	stw	r2,-16(fp)
   10ca0:	00000b06 	br	10cd0 <alt_flash_cfi_get_info+0x7c>
   10ca4:	e0bffb17 	ldw	r2,-20(fp)
   10ca8:	10800c17 	ldw	r2,48(r2)
   10cac:	10800250 	cmplti	r2,r2,9
   10cb0:	1000031e 	bne	r2,zero,10cc0 <alt_flash_cfi_get_info+0x6c>
   10cb4:	00bffd04 	movi	r2,-12
   10cb8:	e0bffc15 	stw	r2,-16(fp)
   10cbc:	00000406 	br	10cd0 <alt_flash_cfi_get_info+0x7c>
   10cc0:	e0bffb17 	ldw	r2,-20(fp)
   10cc4:	10c00d04 	addi	r3,r2,52
   10cc8:	e0bffe17 	ldw	r2,-8(fp)
   10ccc:	10c00015 	stw	r3,0(r2)
   10cd0:	e0bffc17 	ldw	r2,-16(fp)
   10cd4:	e037883a 	mov	sp,fp
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00104 	addi	sp,sp,4
   10ce0:	f800283a 	ret

00010ce4 <alt_flash_cfi_read>:
   10ce4:	defff904 	addi	sp,sp,-28
   10ce8:	dfc00615 	stw	ra,24(sp)
   10cec:	df000515 	stw	fp,20(sp)
   10cf0:	df000504 	addi	fp,sp,20
   10cf4:	e13ffc15 	stw	r4,-16(fp)
   10cf8:	e17ffd15 	stw	r5,-12(fp)
   10cfc:	e1bffe15 	stw	r6,-8(fp)
   10d00:	e1ffff15 	stw	r7,-4(fp)
   10d04:	e0bffc17 	ldw	r2,-16(fp)
   10d08:	e0bffb15 	stw	r2,-20(fp)
   10d0c:	e0bffb17 	ldw	r2,-20(fp)
   10d10:	10800a17 	ldw	r2,40(r2)
   10d14:	1007883a 	mov	r3,r2
   10d18:	e0bffd17 	ldw	r2,-12(fp)
   10d1c:	1887883a 	add	r3,r3,r2
   10d20:	e1bfff17 	ldw	r6,-4(fp)
   10d24:	e0bffe17 	ldw	r2,-8(fp)
   10d28:	1009883a 	mov	r4,r2
   10d2c:	180b883a 	mov	r5,r3
   10d30:	00073240 	call	7324 <memcpy>
   10d34:	0005883a 	mov	r2,zero
   10d38:	e037883a 	mov	sp,fp
   10d3c:	dfc00117 	ldw	ra,4(sp)
   10d40:	df000017 	ldw	fp,0(sp)
   10d44:	dec00204 	addi	sp,sp,8
   10d48:	f800283a 	ret

00010d4c <alt_write_value_to_flash>:
   10d4c:	defffa04 	addi	sp,sp,-24
   10d50:	df000515 	stw	fp,20(sp)
   10d54:	df000504 	addi	fp,sp,20
   10d58:	e13ffd15 	stw	r4,-12(fp)
   10d5c:	e17ffe15 	stw	r5,-8(fp)
   10d60:	e1bfff15 	stw	r6,-4(fp)
   10d64:	e0bffd17 	ldw	r2,-12(fp)
   10d68:	10802e17 	ldw	r2,184(r2)
   10d6c:	10800058 	cmpnei	r2,r2,1
   10d70:	10000b1e 	bne	r2,zero,10da0 <alt_write_value_to_flash+0x54>
   10d74:	e0bffd17 	ldw	r2,-12(fp)
   10d78:	10800a17 	ldw	r2,40(r2)
   10d7c:	1007883a 	mov	r3,r2
   10d80:	e0bffe17 	ldw	r2,-8(fp)
   10d84:	1889883a 	add	r4,r3,r2
   10d88:	e0bfff17 	ldw	r2,-4(fp)
   10d8c:	10800003 	ldbu	r2,0(r2)
   10d90:	10c03fcc 	andi	r3,r2,255
   10d94:	2005883a 	mov	r2,r4
   10d98:	10c00025 	stbio	r3,0(r2)
   10d9c:	00004006 	br	10ea0 <alt_write_value_to_flash+0x154>
   10da0:	e0bffd17 	ldw	r2,-12(fp)
   10da4:	10802e17 	ldw	r2,184(r2)
   10da8:	10800098 	cmpnei	r2,r2,2
   10dac:	1000151e 	bne	r2,zero,10e04 <alt_write_value_to_flash+0xb8>
   10db0:	e0bfff17 	ldw	r2,-4(fp)
   10db4:	10800003 	ldbu	r2,0(r2)
   10db8:	10803fcc 	andi	r2,r2,255
   10dbc:	e0bffc0d 	sth	r2,-16(fp)
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	10800044 	addi	r2,r2,1
   10dc8:	10800003 	ldbu	r2,0(r2)
   10dcc:	10803fcc 	andi	r2,r2,255
   10dd0:	1004923a 	slli	r2,r2,8
   10dd4:	1007883a 	mov	r3,r2
   10dd8:	e0bffc0b 	ldhu	r2,-16(fp)
   10ddc:	1884b03a 	or	r2,r3,r2
   10de0:	e0bffc0d 	sth	r2,-16(fp)
   10de4:	e0bffd17 	ldw	r2,-12(fp)
   10de8:	10800a17 	ldw	r2,40(r2)
   10dec:	1007883a 	mov	r3,r2
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	1885883a 	add	r2,r3,r2
   10df8:	e0fffc0b 	ldhu	r3,-16(fp)
   10dfc:	10c0002d 	sthio	r3,0(r2)
   10e00:	00002706 	br	10ea0 <alt_write_value_to_flash+0x154>
   10e04:	e0bffd17 	ldw	r2,-12(fp)
   10e08:	10802e17 	ldw	r2,184(r2)
   10e0c:	10800118 	cmpnei	r2,r2,4
   10e10:	1000231e 	bne	r2,zero,10ea0 <alt_write_value_to_flash+0x154>
   10e14:	e0bfff17 	ldw	r2,-4(fp)
   10e18:	10800003 	ldbu	r2,0(r2)
   10e1c:	10803fcc 	andi	r2,r2,255
   10e20:	e0bffb15 	stw	r2,-20(fp)
   10e24:	e0bfff17 	ldw	r2,-4(fp)
   10e28:	10800044 	addi	r2,r2,1
   10e2c:	10800003 	ldbu	r2,0(r2)
   10e30:	10803fcc 	andi	r2,r2,255
   10e34:	1006923a 	slli	r3,r2,8
   10e38:	e0bffb17 	ldw	r2,-20(fp)
   10e3c:	10c4b03a 	or	r2,r2,r3
   10e40:	e0bffb15 	stw	r2,-20(fp)
   10e44:	e0bfff17 	ldw	r2,-4(fp)
   10e48:	10800084 	addi	r2,r2,2
   10e4c:	10800003 	ldbu	r2,0(r2)
   10e50:	10803fcc 	andi	r2,r2,255
   10e54:	1006943a 	slli	r3,r2,16
   10e58:	e0bffb17 	ldw	r2,-20(fp)
   10e5c:	10c4b03a 	or	r2,r2,r3
   10e60:	e0bffb15 	stw	r2,-20(fp)
   10e64:	e0bfff17 	ldw	r2,-4(fp)
   10e68:	108000c4 	addi	r2,r2,3
   10e6c:	10800003 	ldbu	r2,0(r2)
   10e70:	10803fcc 	andi	r2,r2,255
   10e74:	1006963a 	slli	r3,r2,24
   10e78:	e0bffb17 	ldw	r2,-20(fp)
   10e7c:	10c4b03a 	or	r2,r2,r3
   10e80:	e0bffb15 	stw	r2,-20(fp)
   10e84:	e0bffd17 	ldw	r2,-12(fp)
   10e88:	10800a17 	ldw	r2,40(r2)
   10e8c:	1007883a 	mov	r3,r2
   10e90:	e0bffe17 	ldw	r2,-8(fp)
   10e94:	1885883a 	add	r2,r3,r2
   10e98:	e0fffb17 	ldw	r3,-20(fp)
   10e9c:	10c00035 	stwio	r3,0(r2)
   10ea0:	e037883a 	mov	sp,fp
   10ea4:	df000017 	ldw	fp,0(sp)
   10ea8:	dec00104 	addi	sp,sp,4
   10eac:	f800283a 	ret

00010eb0 <alt_flash_program_block>:
   10eb0:	defff304 	addi	sp,sp,-52
   10eb4:	dfc00c15 	stw	ra,48(sp)
   10eb8:	df000b15 	stw	fp,44(sp)
   10ebc:	df000b04 	addi	fp,sp,44
   10ec0:	e13ffc15 	stw	r4,-16(fp)
   10ec4:	e17ffd15 	stw	r5,-12(fp)
   10ec8:	e1bffe15 	stw	r6,-8(fp)
   10ecc:	e1ffff15 	stw	r7,-4(fp)
   10ed0:	e03ffa15 	stw	zero,-24(fp)
   10ed4:	e0bffc17 	ldw	r2,-16(fp)
   10ed8:	10800a17 	ldw	r2,40(r2)
   10edc:	1007883a 	mov	r3,r2
   10ee0:	e0bffd17 	ldw	r2,-12(fp)
   10ee4:	1885883a 	add	r2,r3,r2
   10ee8:	1009883a 	mov	r4,r2
   10eec:	e0bffc17 	ldw	r2,-16(fp)
   10ef0:	10c02e17 	ldw	r3,184(r2)
   10ef4:	20c5283a 	div	r2,r4,r3
   10ef8:	10c5383a 	mul	r2,r2,r3
   10efc:	2085c83a 	sub	r2,r4,r2
   10f00:	e0bff915 	stw	r2,-28(fp)
   10f04:	e0bff917 	ldw	r2,-28(fp)
   10f08:	1005003a 	cmpeq	r2,r2,zero
   10f0c:	10003a1e 	bne	r2,zero,10ff8 <alt_flash_program_block+0x148>
   10f10:	e0bffc17 	ldw	r2,-16(fp)
   10f14:	10c02e17 	ldw	r3,184(r2)
   10f18:	e0bff917 	ldw	r2,-28(fp)
   10f1c:	1885c83a 	sub	r2,r3,r2
   10f20:	e0bff815 	stw	r2,-32(fp)
   10f24:	e03ff615 	stw	zero,-40(fp)
   10f28:	00001206 	br	10f74 <alt_flash_program_block+0xc4>
   10f2c:	e17ff617 	ldw	r5,-40(fp)
   10f30:	e0bffc17 	ldw	r2,-16(fp)
   10f34:	10800a17 	ldw	r2,40(r2)
   10f38:	1009883a 	mov	r4,r2
   10f3c:	e0fffd17 	ldw	r3,-12(fp)
   10f40:	e0bff917 	ldw	r2,-28(fp)
   10f44:	1887c83a 	sub	r3,r3,r2
   10f48:	e0bff617 	ldw	r2,-40(fp)
   10f4c:	1885883a 	add	r2,r3,r2
   10f50:	2085883a 	add	r2,r4,r2
   10f54:	10800023 	ldbuio	r2,0(r2)
   10f58:	1007883a 	mov	r3,r2
   10f5c:	e0bffb04 	addi	r2,fp,-20
   10f60:	1145883a 	add	r2,r2,r5
   10f64:	10c00005 	stb	r3,0(r2)
   10f68:	e0bff617 	ldw	r2,-40(fp)
   10f6c:	10800044 	addi	r2,r2,1
   10f70:	e0bff615 	stw	r2,-40(fp)
   10f74:	e0fff617 	ldw	r3,-40(fp)
   10f78:	e0bff917 	ldw	r2,-28(fp)
   10f7c:	18bfeb16 	blt	r3,r2,10f2c <alt_flash_program_block+0x7c>
   10f80:	e03ff615 	stw	zero,-40(fp)
   10f84:	00000e06 	br	10fc0 <alt_flash_program_block+0x110>
   10f88:	e0fff917 	ldw	r3,-28(fp)
   10f8c:	e0bff617 	ldw	r2,-40(fp)
   10f90:	1889883a 	add	r4,r3,r2
   10f94:	e0bff617 	ldw	r2,-40(fp)
   10f98:	1007883a 	mov	r3,r2
   10f9c:	e0bffe17 	ldw	r2,-8(fp)
   10fa0:	1885883a 	add	r2,r3,r2
   10fa4:	10c00003 	ldbu	r3,0(r2)
   10fa8:	e0bffb04 	addi	r2,fp,-20
   10fac:	1105883a 	add	r2,r2,r4
   10fb0:	10c00005 	stb	r3,0(r2)
   10fb4:	e0bff617 	ldw	r2,-40(fp)
   10fb8:	10800044 	addi	r2,r2,1
   10fbc:	e0bff615 	stw	r2,-40(fp)
   10fc0:	e0fff617 	ldw	r3,-40(fp)
   10fc4:	e0bff817 	ldw	r2,-32(fp)
   10fc8:	18bfef16 	blt	r3,r2,10f88 <alt_flash_program_block+0xd8>
   10fcc:	e0fffd17 	ldw	r3,-12(fp)
   10fd0:	e0bff917 	ldw	r2,-28(fp)
   10fd4:	188bc83a 	sub	r5,r3,r2
   10fd8:	e1bffb04 	addi	r6,fp,-20
   10fdc:	e0800217 	ldw	r2,8(fp)
   10fe0:	e13ffc17 	ldw	r4,-16(fp)
   10fe4:	103ee83a 	callr	r2
   10fe8:	e0bffa15 	stw	r2,-24(fp)
   10fec:	e0bff817 	ldw	r2,-32(fp)
   10ff0:	e0bff615 	stw	r2,-40(fp)
   10ff4:	00000106 	br	10ffc <alt_flash_program_block+0x14c>
   10ff8:	e03ff615 	stw	zero,-40(fp)
   10ffc:	e0fffd17 	ldw	r3,-12(fp)
   11000:	e0bfff17 	ldw	r2,-4(fp)
   11004:	1889883a 	add	r4,r3,r2
   11008:	e0bffc17 	ldw	r2,-16(fp)
   1100c:	10c02e17 	ldw	r3,184(r2)
   11010:	20c5283a 	div	r2,r4,r3
   11014:	10c5383a 	mul	r2,r2,r3
   11018:	2085c83a 	sub	r2,r4,r2
   1101c:	e0bff715 	stw	r2,-36(fp)
   11020:	00001006 	br	11064 <alt_flash_program_block+0x1b4>
   11024:	e0fffd17 	ldw	r3,-12(fp)
   11028:	e0bff617 	ldw	r2,-40(fp)
   1102c:	188b883a 	add	r5,r3,r2
   11030:	e0bff617 	ldw	r2,-40(fp)
   11034:	1007883a 	mov	r3,r2
   11038:	e0bffe17 	ldw	r2,-8(fp)
   1103c:	188d883a 	add	r6,r3,r2
   11040:	e0800217 	ldw	r2,8(fp)
   11044:	e13ffc17 	ldw	r4,-16(fp)
   11048:	103ee83a 	callr	r2
   1104c:	e0bffa15 	stw	r2,-24(fp)
   11050:	e0bffc17 	ldw	r2,-16(fp)
   11054:	10c02e17 	ldw	r3,184(r2)
   11058:	e0bff617 	ldw	r2,-40(fp)
   1105c:	10c5883a 	add	r2,r2,r3
   11060:	e0bff615 	stw	r2,-40(fp)
   11064:	e0bffa17 	ldw	r2,-24(fp)
   11068:	1004c03a 	cmpne	r2,r2,zero
   1106c:	1000051e 	bne	r2,zero,11084 <alt_flash_program_block+0x1d4>
   11070:	e0ffff17 	ldw	r3,-4(fp)
   11074:	e0bff717 	ldw	r2,-36(fp)
   11078:	1887c83a 	sub	r3,r3,r2
   1107c:	e0bff617 	ldw	r2,-40(fp)
   11080:	10ffe816 	blt	r2,r3,11024 <alt_flash_program_block+0x174>
   11084:	e0bff717 	ldw	r2,-36(fp)
   11088:	1005003a 	cmpeq	r2,r2,zero
   1108c:	10003c1e 	bne	r2,zero,11180 <alt_flash_program_block+0x2d0>
   11090:	e0bffa17 	ldw	r2,-24(fp)
   11094:	1004c03a 	cmpne	r2,r2,zero
   11098:	1000391e 	bne	r2,zero,11180 <alt_flash_program_block+0x2d0>
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	10c02e17 	ldw	r3,184(r2)
   110a4:	e0bff717 	ldw	r2,-36(fp)
   110a8:	1885c83a 	sub	r2,r3,r2
   110ac:	e0bff915 	stw	r2,-28(fp)
   110b0:	e03ff515 	stw	zero,-44(fp)
   110b4:	00000e06 	br	110f0 <alt_flash_program_block+0x240>
   110b8:	e13ff517 	ldw	r4,-44(fp)
   110bc:	e0bff617 	ldw	r2,-40(fp)
   110c0:	1007883a 	mov	r3,r2
   110c4:	e0bffe17 	ldw	r2,-8(fp)
   110c8:	1887883a 	add	r3,r3,r2
   110cc:	e0bff517 	ldw	r2,-44(fp)
   110d0:	1885883a 	add	r2,r3,r2
   110d4:	10c00003 	ldbu	r3,0(r2)
   110d8:	e0bffb04 	addi	r2,fp,-20
   110dc:	1105883a 	add	r2,r2,r4
   110e0:	10c00005 	stb	r3,0(r2)
   110e4:	e0bff517 	ldw	r2,-44(fp)
   110e8:	10800044 	addi	r2,r2,1
   110ec:	e0bff515 	stw	r2,-44(fp)
   110f0:	e0fff517 	ldw	r3,-44(fp)
   110f4:	e0bff717 	ldw	r2,-36(fp)
   110f8:	18bfef16 	blt	r3,r2,110b8 <alt_flash_program_block+0x208>
   110fc:	e03ff515 	stw	zero,-44(fp)
   11100:	00001406 	br	11154 <alt_flash_program_block+0x2a4>
   11104:	e0fff717 	ldw	r3,-36(fp)
   11108:	e0bff517 	ldw	r2,-44(fp)
   1110c:	188b883a 	add	r5,r3,r2
   11110:	e0bffc17 	ldw	r2,-16(fp)
   11114:	10800a17 	ldw	r2,40(r2)
   11118:	1009883a 	mov	r4,r2
   1111c:	e0fffd17 	ldw	r3,-12(fp)
   11120:	e0bfff17 	ldw	r2,-4(fp)
   11124:	1887883a 	add	r3,r3,r2
   11128:	e0bff517 	ldw	r2,-44(fp)
   1112c:	1885883a 	add	r2,r3,r2
   11130:	2085883a 	add	r2,r4,r2
   11134:	10800023 	ldbuio	r2,0(r2)
   11138:	1007883a 	mov	r3,r2
   1113c:	e0bffb04 	addi	r2,fp,-20
   11140:	1145883a 	add	r2,r2,r5
   11144:	10c00005 	stb	r3,0(r2)
   11148:	e0bff517 	ldw	r2,-44(fp)
   1114c:	10800044 	addi	r2,r2,1
   11150:	e0bff515 	stw	r2,-44(fp)
   11154:	e0fff517 	ldw	r3,-44(fp)
   11158:	e0bff917 	ldw	r2,-28(fp)
   1115c:	18bfe916 	blt	r3,r2,11104 <alt_flash_program_block+0x254>
   11160:	e0fffd17 	ldw	r3,-12(fp)
   11164:	e0bff617 	ldw	r2,-40(fp)
   11168:	188b883a 	add	r5,r3,r2
   1116c:	e1bffb04 	addi	r6,fp,-20
   11170:	e0800217 	ldw	r2,8(fp)
   11174:	e13ffc17 	ldw	r4,-16(fp)
   11178:	103ee83a 	callr	r2
   1117c:	e0bffa15 	stw	r2,-24(fp)
   11180:	e0bffa17 	ldw	r2,-24(fp)
   11184:	e037883a 	mov	sp,fp
   11188:	dfc00117 	ldw	ra,4(sp)
   1118c:	df000017 	ldw	fp,0(sp)
   11190:	dec00204 	addi	sp,sp,8
   11194:	f800283a 	ret

00011198 <alt_read_query_entry_8bit>:
   11198:	defffd04 	addi	sp,sp,-12
   1119c:	df000215 	stw	fp,8(sp)
   111a0:	df000204 	addi	fp,sp,8
   111a4:	e13ffe15 	stw	r4,-8(fp)
   111a8:	e17fff15 	stw	r5,-4(fp)
   111ac:	e0bffe17 	ldw	r2,-8(fp)
   111b0:	10800a17 	ldw	r2,40(r2)
   111b4:	1007883a 	mov	r3,r2
   111b8:	e0bfff17 	ldw	r2,-4(fp)
   111bc:	1885883a 	add	r2,r3,r2
   111c0:	10800023 	ldbuio	r2,0(r2)
   111c4:	10803fcc 	andi	r2,r2,255
   111c8:	e037883a 	mov	sp,fp
   111cc:	df000017 	ldw	fp,0(sp)
   111d0:	dec00104 	addi	sp,sp,4
   111d4:	f800283a 	ret

000111d8 <alt_read_query_entry_16bit>:
   111d8:	defffd04 	addi	sp,sp,-12
   111dc:	df000215 	stw	fp,8(sp)
   111e0:	df000204 	addi	fp,sp,8
   111e4:	e13ffe15 	stw	r4,-8(fp)
   111e8:	e17fff15 	stw	r5,-4(fp)
   111ec:	e0bffe17 	ldw	r2,-8(fp)
   111f0:	10800a17 	ldw	r2,40(r2)
   111f4:	1007883a 	mov	r3,r2
   111f8:	e0bfff17 	ldw	r2,-4(fp)
   111fc:	1085883a 	add	r2,r2,r2
   11200:	1885883a 	add	r2,r3,r2
   11204:	1080002b 	ldhuio	r2,0(r2)
   11208:	10803fcc 	andi	r2,r2,255
   1120c:	e037883a 	mov	sp,fp
   11210:	df000017 	ldw	fp,0(sp)
   11214:	dec00104 	addi	sp,sp,4
   11218:	f800283a 	ret

0001121c <alt_read_query_entry_32bit>:
   1121c:	defffd04 	addi	sp,sp,-12
   11220:	df000215 	stw	fp,8(sp)
   11224:	df000204 	addi	fp,sp,8
   11228:	e13ffe15 	stw	r4,-8(fp)
   1122c:	e17fff15 	stw	r5,-4(fp)
   11230:	e0bffe17 	ldw	r2,-8(fp)
   11234:	10800a17 	ldw	r2,40(r2)
   11238:	1007883a 	mov	r3,r2
   1123c:	e0bfff17 	ldw	r2,-4(fp)
   11240:	1085883a 	add	r2,r2,r2
   11244:	1085883a 	add	r2,r2,r2
   11248:	1885883a 	add	r2,r3,r2
   1124c:	10800037 	ldwio	r2,0(r2)
   11250:	10803fcc 	andi	r2,r2,255
   11254:	e037883a 	mov	sp,fp
   11258:	df000017 	ldw	fp,0(sp)
   1125c:	dec00104 	addi	sp,sp,4
   11260:	f800283a 	ret

00011264 <alt_write_flash_command_8bit_device_8bit_mode>:
   11264:	defffc04 	addi	sp,sp,-16
   11268:	df000315 	stw	fp,12(sp)
   1126c:	df000304 	addi	fp,sp,12
   11270:	e13ffd15 	stw	r4,-12(fp)
   11274:	e17ffe15 	stw	r5,-8(fp)
   11278:	e1bfff05 	stb	r6,-4(fp)
   1127c:	e0fffd17 	ldw	r3,-12(fp)
   11280:	e0bffe17 	ldw	r2,-8(fp)
   11284:	1885883a 	add	r2,r3,r2
   11288:	e0ffff03 	ldbu	r3,-4(fp)
   1128c:	10c00025 	stbio	r3,0(r2)
   11290:	e037883a 	mov	sp,fp
   11294:	df000017 	ldw	fp,0(sp)
   11298:	dec00104 	addi	sp,sp,4
   1129c:	f800283a 	ret

000112a0 <alt_write_flash_command_16bit_device_8bit_mode>:
   112a0:	defffc04 	addi	sp,sp,-16
   112a4:	df000315 	stw	fp,12(sp)
   112a8:	df000304 	addi	fp,sp,12
   112ac:	e13ffd15 	stw	r4,-12(fp)
   112b0:	e17ffe15 	stw	r5,-8(fp)
   112b4:	e1bfff05 	stb	r6,-4(fp)
   112b8:	e0bffe17 	ldw	r2,-8(fp)
   112bc:	1080004c 	andi	r2,r2,1
   112c0:	10803fcc 	andi	r2,r2,255
   112c4:	1005003a 	cmpeq	r2,r2,zero
   112c8:	1000081e 	bne	r2,zero,112ec <alt_write_flash_command_16bit_device_8bit_mode+0x4c>
   112cc:	e0bffe17 	ldw	r2,-8(fp)
   112d0:	1085883a 	add	r2,r2,r2
   112d4:	1007883a 	mov	r3,r2
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	1885883a 	add	r2,r3,r2
   112e0:	e0ffff03 	ldbu	r3,-4(fp)
   112e4:	10c00025 	stbio	r3,0(r2)
   112e8:	00000806 	br	1130c <alt_write_flash_command_16bit_device_8bit_mode+0x6c>
   112ec:	e0bffe17 	ldw	r2,-8(fp)
   112f0:	1085883a 	add	r2,r2,r2
   112f4:	1007883a 	mov	r3,r2
   112f8:	e0bffd17 	ldw	r2,-12(fp)
   112fc:	1885883a 	add	r2,r3,r2
   11300:	10800044 	addi	r2,r2,1
   11304:	e0ffff03 	ldbu	r3,-4(fp)
   11308:	10c00025 	stbio	r3,0(r2)
   1130c:	e037883a 	mov	sp,fp
   11310:	df000017 	ldw	fp,0(sp)
   11314:	dec00104 	addi	sp,sp,4
   11318:	f800283a 	ret

0001131c <alt_write_flash_command_32bit_device_8bit_mode>:
   1131c:	defffc04 	addi	sp,sp,-16
   11320:	df000315 	stw	fp,12(sp)
   11324:	df000304 	addi	fp,sp,12
   11328:	e13ffd15 	stw	r4,-12(fp)
   1132c:	e17ffe15 	stw	r5,-8(fp)
   11330:	e1bfff05 	stb	r6,-4(fp)
   11334:	e0bffe17 	ldw	r2,-8(fp)
   11338:	1085883a 	add	r2,r2,r2
   1133c:	1085883a 	add	r2,r2,r2
   11340:	1007883a 	mov	r3,r2
   11344:	e0bffd17 	ldw	r2,-12(fp)
   11348:	1885883a 	add	r2,r3,r2
   1134c:	e0ffff03 	ldbu	r3,-4(fp)
   11350:	10c00025 	stbio	r3,0(r2)
   11354:	e037883a 	mov	sp,fp
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00104 	addi	sp,sp,4
   11360:	f800283a 	ret

00011364 <alt_write_flash_command_16bit_device_16bit_mode>:
   11364:	defffc04 	addi	sp,sp,-16
   11368:	df000315 	stw	fp,12(sp)
   1136c:	df000304 	addi	fp,sp,12
   11370:	e13ffd15 	stw	r4,-12(fp)
   11374:	e17ffe15 	stw	r5,-8(fp)
   11378:	e1bfff05 	stb	r6,-4(fp)
   1137c:	e0bffe17 	ldw	r2,-8(fp)
   11380:	1085883a 	add	r2,r2,r2
   11384:	1007883a 	mov	r3,r2
   11388:	e0bffd17 	ldw	r2,-12(fp)
   1138c:	1885883a 	add	r2,r3,r2
   11390:	e0ffff03 	ldbu	r3,-4(fp)
   11394:	10c0002d 	sthio	r3,0(r2)
   11398:	e037883a 	mov	sp,fp
   1139c:	df000017 	ldw	fp,0(sp)
   113a0:	dec00104 	addi	sp,sp,4
   113a4:	f800283a 	ret

000113a8 <alt_write_flash_command_32bit_device_16bit_mode>:
   113a8:	defffc04 	addi	sp,sp,-16
   113ac:	df000315 	stw	fp,12(sp)
   113b0:	df000304 	addi	fp,sp,12
   113b4:	e13ffd15 	stw	r4,-12(fp)
   113b8:	e17ffe15 	stw	r5,-8(fp)
   113bc:	e1bfff05 	stb	r6,-4(fp)
   113c0:	e0bffe17 	ldw	r2,-8(fp)
   113c4:	1085883a 	add	r2,r2,r2
   113c8:	1085883a 	add	r2,r2,r2
   113cc:	1007883a 	mov	r3,r2
   113d0:	e0bffd17 	ldw	r2,-12(fp)
   113d4:	1885883a 	add	r2,r3,r2
   113d8:	e0ffff03 	ldbu	r3,-4(fp)
   113dc:	10c0002d 	sthio	r3,0(r2)
   113e0:	e037883a 	mov	sp,fp
   113e4:	df000017 	ldw	fp,0(sp)
   113e8:	dec00104 	addi	sp,sp,4
   113ec:	f800283a 	ret

000113f0 <alt_write_flash_command_32bit_device_32bit_mode>:
   113f0:	defffc04 	addi	sp,sp,-16
   113f4:	df000315 	stw	fp,12(sp)
   113f8:	df000304 	addi	fp,sp,12
   113fc:	e13ffd15 	stw	r4,-12(fp)
   11400:	e17ffe15 	stw	r5,-8(fp)
   11404:	e1bfff05 	stb	r6,-4(fp)
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	1085883a 	add	r2,r2,r2
   11410:	1085883a 	add	r2,r2,r2
   11414:	1007883a 	mov	r3,r2
   11418:	e0bffd17 	ldw	r2,-12(fp)
   1141c:	1885883a 	add	r2,r3,r2
   11420:	e0ffff03 	ldbu	r3,-4(fp)
   11424:	10c00035 	stwio	r3,0(r2)
   11428:	e037883a 	mov	sp,fp
   1142c:	df000017 	ldw	fp,0(sp)
   11430:	dec00104 	addi	sp,sp,4
   11434:	f800283a 	ret

00011438 <alt_write_native_8bit>:
   11438:	defffd04 	addi	sp,sp,-12
   1143c:	df000215 	stw	fp,8(sp)
   11440:	df000204 	addi	fp,sp,8
   11444:	e13ffe15 	stw	r4,-8(fp)
   11448:	e17fff15 	stw	r5,-4(fp)
   1144c:	e0bfff17 	ldw	r2,-4(fp)
   11450:	10c03fcc 	andi	r3,r2,255
   11454:	e0bffe17 	ldw	r2,-8(fp)
   11458:	10c00025 	stbio	r3,0(r2)
   1145c:	e037883a 	mov	sp,fp
   11460:	df000017 	ldw	fp,0(sp)
   11464:	dec00104 	addi	sp,sp,4
   11468:	f800283a 	ret

0001146c <alt_write_native_16bit>:
   1146c:	defffd04 	addi	sp,sp,-12
   11470:	df000215 	stw	fp,8(sp)
   11474:	df000204 	addi	fp,sp,8
   11478:	e13ffe15 	stw	r4,-8(fp)
   1147c:	e17fff15 	stw	r5,-4(fp)
   11480:	e0bfff17 	ldw	r2,-4(fp)
   11484:	10ffffcc 	andi	r3,r2,65535
   11488:	e0bffe17 	ldw	r2,-8(fp)
   1148c:	10c0002d 	sthio	r3,0(r2)
   11490:	e037883a 	mov	sp,fp
   11494:	df000017 	ldw	fp,0(sp)
   11498:	dec00104 	addi	sp,sp,4
   1149c:	f800283a 	ret

000114a0 <alt_write_native_32bit>:
   114a0:	defffd04 	addi	sp,sp,-12
   114a4:	df000215 	stw	fp,8(sp)
   114a8:	df000204 	addi	fp,sp,8
   114ac:	e13ffe15 	stw	r4,-8(fp)
   114b0:	e17fff15 	stw	r5,-4(fp)
   114b4:	e0ffff17 	ldw	r3,-4(fp)
   114b8:	e0bffe17 	ldw	r2,-8(fp)
   114bc:	10c00035 	stwio	r3,0(r2)
   114c0:	e037883a 	mov	sp,fp
   114c4:	df000017 	ldw	fp,0(sp)
   114c8:	dec00104 	addi	sp,sp,4
   114cc:	f800283a 	ret

000114d0 <alt_set_flash_width_func>:
   114d0:	defffb04 	addi	sp,sp,-20
   114d4:	df000415 	stw	fp,16(sp)
   114d8:	df000404 	addi	fp,sp,16
   114dc:	e13ffd15 	stw	r4,-12(fp)
   114e0:	e03ffc15 	stw	zero,-16(fp)
   114e4:	e0bffd17 	ldw	r2,-12(fp)
   114e8:	10802e17 	ldw	r2,184(r2)
   114ec:	e0bfff15 	stw	r2,-4(fp)
   114f0:	e0ffff17 	ldw	r3,-4(fp)
   114f4:	188000a0 	cmpeqi	r2,r3,2
   114f8:	1000261e 	bne	r2,zero,11594 <alt_set_flash_width_func+0xc4>
   114fc:	e0ffff17 	ldw	r3,-4(fp)
   11500:	18800120 	cmpeqi	r2,r3,4
   11504:	1000391e 	bne	r2,zero,115ec <alt_set_flash_width_func+0x11c>
   11508:	e0ffff17 	ldw	r3,-4(fp)
   1150c:	18800060 	cmpeqi	r2,r3,1
   11510:	1000011e 	bne	r2,zero,11518 <alt_set_flash_width_func+0x48>
   11514:	00003e06 	br	11610 <alt_set_flash_width_func+0x140>
   11518:	e0fffd17 	ldw	r3,-12(fp)
   1151c:	00800074 	movhi	r2,1
   11520:	10850e04 	addi	r2,r2,5176
   11524:	18803515 	stw	r2,212(r3)
   11528:	e0bffd17 	ldw	r2,-12(fp)
   1152c:	10802f17 	ldw	r2,188(r2)
   11530:	10800058 	cmpnei	r2,r2,1
   11534:	1000051e 	bne	r2,zero,1154c <alt_set_flash_width_func+0x7c>
   11538:	e0fffd17 	ldw	r3,-12(fp)
   1153c:	00800074 	movhi	r2,1
   11540:	10849904 	addi	r2,r2,4708
   11544:	18803315 	stw	r2,204(r3)
   11548:	00003306 	br	11618 <alt_set_flash_width_func+0x148>
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	10802f17 	ldw	r2,188(r2)
   11554:	10800098 	cmpnei	r2,r2,2
   11558:	1000051e 	bne	r2,zero,11570 <alt_set_flash_width_func+0xa0>
   1155c:	e0fffd17 	ldw	r3,-12(fp)
   11560:	00800074 	movhi	r2,1
   11564:	1084a804 	addi	r2,r2,4768
   11568:	18803315 	stw	r2,204(r3)
   1156c:	00002a06 	br	11618 <alt_set_flash_width_func+0x148>
   11570:	e0bffd17 	ldw	r2,-12(fp)
   11574:	10802f17 	ldw	r2,188(r2)
   11578:	10800118 	cmpnei	r2,r2,4
   1157c:	1000261e 	bne	r2,zero,11618 <alt_set_flash_width_func+0x148>
   11580:	e0fffd17 	ldw	r3,-12(fp)
   11584:	00800074 	movhi	r2,1
   11588:	1084c704 	addi	r2,r2,4892
   1158c:	18803315 	stw	r2,204(r3)
   11590:	00002106 	br	11618 <alt_set_flash_width_func+0x148>
   11594:	e0fffd17 	ldw	r3,-12(fp)
   11598:	00800074 	movhi	r2,1
   1159c:	10851b04 	addi	r2,r2,5228
   115a0:	18803515 	stw	r2,212(r3)
   115a4:	e0bffd17 	ldw	r2,-12(fp)
   115a8:	10802f17 	ldw	r2,188(r2)
   115ac:	10800098 	cmpnei	r2,r2,2
   115b0:	1000051e 	bne	r2,zero,115c8 <alt_set_flash_width_func+0xf8>
   115b4:	e0fffd17 	ldw	r3,-12(fp)
   115b8:	00800074 	movhi	r2,1
   115bc:	1084d904 	addi	r2,r2,4964
   115c0:	18803315 	stw	r2,204(r3)
   115c4:	00001406 	br	11618 <alt_set_flash_width_func+0x148>
   115c8:	e0bffd17 	ldw	r2,-12(fp)
   115cc:	10802f17 	ldw	r2,188(r2)
   115d0:	10800118 	cmpnei	r2,r2,4
   115d4:	1000101e 	bne	r2,zero,11618 <alt_set_flash_width_func+0x148>
   115d8:	e0fffd17 	ldw	r3,-12(fp)
   115dc:	00800074 	movhi	r2,1
   115e0:	1084ea04 	addi	r2,r2,5032
   115e4:	18803315 	stw	r2,204(r3)
   115e8:	00000b06 	br	11618 <alt_set_flash_width_func+0x148>
   115ec:	e0fffd17 	ldw	r3,-12(fp)
   115f0:	00800074 	movhi	r2,1
   115f4:	10852804 	addi	r2,r2,5280
   115f8:	18803515 	stw	r2,212(r3)
   115fc:	e0fffd17 	ldw	r3,-12(fp)
   11600:	00800074 	movhi	r2,1
   11604:	1084fc04 	addi	r2,r2,5104
   11608:	18803315 	stw	r2,204(r3)
   1160c:	00000206 	br	11618 <alt_set_flash_width_func+0x148>
   11610:	00bffcc4 	movi	r2,-13
   11614:	e0bffc15 	stw	r2,-16(fp)
   11618:	e0bffc17 	ldw	r2,-16(fp)
   1161c:	1004c03a 	cmpne	r2,r2,zero
   11620:	10001e1e 	bne	r2,zero,1169c <alt_set_flash_width_func+0x1cc>
   11624:	e0bffd17 	ldw	r2,-12(fp)
   11628:	10802f17 	ldw	r2,188(r2)
   1162c:	e0bffe15 	stw	r2,-8(fp)
   11630:	e0fffe17 	ldw	r3,-8(fp)
   11634:	188000a0 	cmpeqi	r2,r3,2
   11638:	10000c1e 	bne	r2,zero,1166c <alt_set_flash_width_func+0x19c>
   1163c:	e0fffe17 	ldw	r3,-8(fp)
   11640:	18800120 	cmpeqi	r2,r3,4
   11644:	10000e1e 	bne	r2,zero,11680 <alt_set_flash_width_func+0x1b0>
   11648:	e0fffe17 	ldw	r3,-8(fp)
   1164c:	18800060 	cmpeqi	r2,r3,1
   11650:	1000011e 	bne	r2,zero,11658 <alt_set_flash_width_func+0x188>
   11654:	00000f06 	br	11694 <alt_set_flash_width_func+0x1c4>
   11658:	e0fffd17 	ldw	r3,-12(fp)
   1165c:	00800074 	movhi	r2,1
   11660:	10846604 	addi	r2,r2,4504
   11664:	18803415 	stw	r2,208(r3)
   11668:	00000c06 	br	1169c <alt_set_flash_width_func+0x1cc>
   1166c:	e0fffd17 	ldw	r3,-12(fp)
   11670:	00800074 	movhi	r2,1
   11674:	10847604 	addi	r2,r2,4568
   11678:	18803415 	stw	r2,208(r3)
   1167c:	00000706 	br	1169c <alt_set_flash_width_func+0x1cc>
   11680:	e0fffd17 	ldw	r3,-12(fp)
   11684:	00800074 	movhi	r2,1
   11688:	10848704 	addi	r2,r2,4636
   1168c:	18803415 	stw	r2,208(r3)
   11690:	00000206 	br	1169c <alt_set_flash_width_func+0x1cc>
   11694:	00bffcc4 	movi	r2,-13
   11698:	e0bffc15 	stw	r2,-16(fp)
   1169c:	e0bffc17 	ldw	r2,-16(fp)
   116a0:	e037883a 	mov	sp,fp
   116a4:	df000017 	ldw	fp,0(sp)
   116a8:	dec00104 	addi	sp,sp,4
   116ac:	f800283a 	ret

000116b0 <alt_set_flash_algorithm_func>:
   116b0:	defffc04 	addi	sp,sp,-16
   116b4:	df000315 	stw	fp,12(sp)
   116b8:	df000304 	addi	fp,sp,12
   116bc:	e13ffe15 	stw	r4,-8(fp)
   116c0:	e03ffd15 	stw	zero,-12(fp)
   116c4:	e0bffe17 	ldw	r2,-8(fp)
   116c8:	10802d17 	ldw	r2,180(r2)
   116cc:	e0bfff15 	stw	r2,-4(fp)
   116d0:	e0ffff17 	ldw	r3,-4(fp)
   116d4:	188000a0 	cmpeqi	r2,r3,2
   116d8:	1000071e 	bne	r2,zero,116f8 <alt_set_flash_algorithm_func+0x48>
   116dc:	e0ffff17 	ldw	r3,-4(fp)
   116e0:	188000e0 	cmpeqi	r2,r3,3
   116e4:	10000d1e 	bne	r2,zero,1171c <alt_set_flash_algorithm_func+0x6c>
   116e8:	e0ffff17 	ldw	r3,-4(fp)
   116ec:	18800060 	cmpeqi	r2,r3,1
   116f0:	10000a1e 	bne	r2,zero,1171c <alt_set_flash_algorithm_func+0x6c>
   116f4:	00001206 	br	11740 <alt_set_flash_algorithm_func+0x90>
   116f8:	e0fffe17 	ldw	r3,-8(fp)
   116fc:	00800074 	movhi	r2,1
   11700:	109d6804 	addi	r2,r2,30112
   11704:	18800815 	stw	r2,32(r3)
   11708:	e0fffe17 	ldw	r3,-8(fp)
   1170c:	00800074 	movhi	r2,1
   11710:	109d4e04 	addi	r2,r2,30008
   11714:	18800915 	stw	r2,36(r3)
   11718:	00000b06 	br	11748 <alt_set_flash_algorithm_func+0x98>
   1171c:	e0fffe17 	ldw	r3,-8(fp)
   11720:	00800074 	movhi	r2,1
   11724:	109e8704 	addi	r2,r2,31260
   11728:	18800815 	stw	r2,32(r3)
   1172c:	e0fffe17 	ldw	r3,-8(fp)
   11730:	00800074 	movhi	r2,1
   11734:	109e6604 	addi	r2,r2,31128
   11738:	18800915 	stw	r2,36(r3)
   1173c:	00000206 	br	11748 <alt_set_flash_algorithm_func+0x98>
   11740:	00bffec4 	movi	r2,-5
   11744:	e0bffd15 	stw	r2,-12(fp)
   11748:	e0bffd17 	ldw	r2,-12(fp)
   1174c:	e037883a 	mov	sp,fp
   11750:	df000017 	ldw	fp,0(sp)
   11754:	dec00104 	addi	sp,sp,4
   11758:	f800283a 	ret

0001175c <alt_read_16bit_query_entry>:
   1175c:	defffb04 	addi	sp,sp,-20
   11760:	dfc00415 	stw	ra,16(sp)
   11764:	df000315 	stw	fp,12(sp)
   11768:	df000304 	addi	fp,sp,12
   1176c:	e13ffe15 	stw	r4,-8(fp)
   11770:	e17fff15 	stw	r5,-4(fp)
   11774:	e0bffe17 	ldw	r2,-8(fp)
   11778:	10803417 	ldw	r2,208(r2)
   1177c:	e13ffe17 	ldw	r4,-8(fp)
   11780:	e17fff17 	ldw	r5,-4(fp)
   11784:	103ee83a 	callr	r2
   11788:	10803fcc 	andi	r2,r2,255
   1178c:	e0bffd0d 	sth	r2,-12(fp)
   11790:	e0bffe17 	ldw	r2,-8(fp)
   11794:	10c03417 	ldw	r3,208(r2)
   11798:	e0bfff17 	ldw	r2,-4(fp)
   1179c:	11400044 	addi	r5,r2,1
   117a0:	e13ffe17 	ldw	r4,-8(fp)
   117a4:	183ee83a 	callr	r3
   117a8:	10803fcc 	andi	r2,r2,255
   117ac:	1004923a 	slli	r2,r2,8
   117b0:	1007883a 	mov	r3,r2
   117b4:	e0bffd0b 	ldhu	r2,-12(fp)
   117b8:	1884b03a 	or	r2,r3,r2
   117bc:	e0bffd0d 	sth	r2,-12(fp)
   117c0:	e0bffd0b 	ldhu	r2,-12(fp)
   117c4:	e037883a 	mov	sp,fp
   117c8:	dfc00117 	ldw	ra,4(sp)
   117cc:	df000017 	ldw	fp,0(sp)
   117d0:	dec00204 	addi	sp,sp,8
   117d4:	f800283a 	ret

000117d8 <alt_read_cfi_table>:
   117d8:	defff104 	addi	sp,sp,-60
   117dc:	dfc00e15 	stw	ra,56(sp)
   117e0:	df000d15 	stw	fp,52(sp)
   117e4:	dc000c15 	stw	r16,48(sp)
   117e8:	df000c04 	addi	fp,sp,48
   117ec:	e13ffe15 	stw	r4,-8(fp)
   117f0:	e03ffa15 	stw	zero,-24(fp)
   117f4:	e03ff915 	stw	zero,-28(fp)
   117f8:	e03ff515 	stw	zero,-44(fp)
   117fc:	e13ffe17 	ldw	r4,-8(fp)
   11800:	00125640 	call	12564 <alt_check_primary_table>
   11804:	e0bffa15 	stw	r2,-24(fp)
   11808:	e0bffa17 	ldw	r2,-24(fp)
   1180c:	1004c03a 	cmpne	r2,r2,zero
   11810:	1001621e 	bne	r2,zero,11d9c <alt_read_cfi_table+0x5c4>
   11814:	e0bffe17 	ldw	r2,-8(fp)
   11818:	10803417 	ldw	r2,208(r2)
   1181c:	e13ffe17 	ldw	r4,-8(fp)
   11820:	014004c4 	movi	r5,19
   11824:	103ee83a 	callr	r2
   11828:	10c03fcc 	andi	r3,r2,255
   1182c:	e0bffe17 	ldw	r2,-8(fp)
   11830:	10c02d15 	stw	r3,180(r2)
   11834:	e0bffe17 	ldw	r2,-8(fp)
   11838:	10803417 	ldw	r2,208(r2)
   1183c:	e13ffe17 	ldw	r4,-8(fp)
   11840:	014007c4 	movi	r5,31
   11844:	103ee83a 	callr	r2
   11848:	10803fcc 	andi	r2,r2,255
   1184c:	e0bff715 	stw	r2,-36(fp)
   11850:	e0bffe17 	ldw	r2,-8(fp)
   11854:	10803417 	ldw	r2,208(r2)
   11858:	e13ffe17 	ldw	r4,-8(fp)
   1185c:	014008c4 	movi	r5,35
   11860:	103ee83a 	callr	r2
   11864:	10803fcc 	andi	r2,r2,255
   11868:	e0bff615 	stw	r2,-40(fp)
   1186c:	e0bff717 	ldw	r2,-36(fp)
   11870:	1005003a 	cmpeq	r2,r2,zero
   11874:	1000031e 	bne	r2,zero,11884 <alt_read_cfi_table+0xac>
   11878:	e0bff617 	ldw	r2,-40(fp)
   1187c:	1004c03a 	cmpne	r2,r2,zero
   11880:	1000041e 	bne	r2,zero,11894 <alt_read_cfi_table+0xbc>
   11884:	e0fffe17 	ldw	r3,-8(fp)
   11888:	0080fa04 	movi	r2,1000
   1188c:	18803015 	stw	r2,192(r3)
   11890:	00000706 	br	118b0 <alt_read_cfi_table+0xd8>
   11894:	00c00044 	movi	r3,1
   11898:	e0bff717 	ldw	r2,-36(fp)
   1189c:	1886983a 	sll	r3,r3,r2
   118a0:	e0bff617 	ldw	r2,-40(fp)
   118a4:	1886983a 	sll	r3,r3,r2
   118a8:	e0bffe17 	ldw	r2,-8(fp)
   118ac:	10c03015 	stw	r3,192(r2)
   118b0:	e0bffe17 	ldw	r2,-8(fp)
   118b4:	10803417 	ldw	r2,208(r2)
   118b8:	e13ffe17 	ldw	r4,-8(fp)
   118bc:	01400844 	movi	r5,33
   118c0:	103ee83a 	callr	r2
   118c4:	10803fcc 	andi	r2,r2,255
   118c8:	e0bff715 	stw	r2,-36(fp)
   118cc:	e0bffe17 	ldw	r2,-8(fp)
   118d0:	10803417 	ldw	r2,208(r2)
   118d4:	e13ffe17 	ldw	r4,-8(fp)
   118d8:	01400944 	movi	r5,37
   118dc:	103ee83a 	callr	r2
   118e0:	10803fcc 	andi	r2,r2,255
   118e4:	e0bff615 	stw	r2,-40(fp)
   118e8:	e0bff717 	ldw	r2,-36(fp)
   118ec:	1005003a 	cmpeq	r2,r2,zero
   118f0:	1000031e 	bne	r2,zero,11900 <alt_read_cfi_table+0x128>
   118f4:	e0bff617 	ldw	r2,-40(fp)
   118f8:	1004c03a 	cmpne	r2,r2,zero
   118fc:	1000051e 	bne	r2,zero,11914 <alt_read_cfi_table+0x13c>
   11900:	e0fffe17 	ldw	r3,-8(fp)
   11904:	00804c74 	movhi	r2,305
   11908:	108b4004 	addi	r2,r2,11520
   1190c:	18803115 	stw	r2,196(r3)
   11910:	00000806 	br	11934 <alt_read_cfi_table+0x15c>
   11914:	00c00044 	movi	r3,1
   11918:	e0bff717 	ldw	r2,-36(fp)
   1191c:	1886983a 	sll	r3,r3,r2
   11920:	e0bff617 	ldw	r2,-40(fp)
   11924:	1884983a 	sll	r2,r3,r2
   11928:	10c0fa24 	muli	r3,r2,1000
   1192c:	e0bffe17 	ldw	r2,-8(fp)
   11930:	10c03115 	stw	r3,196(r2)
   11934:	e0bffe17 	ldw	r2,-8(fp)
   11938:	10803417 	ldw	r2,208(r2)
   1193c:	e13ffe17 	ldw	r4,-8(fp)
   11940:	014009c4 	movi	r5,39
   11944:	103ee83a 	callr	r2
   11948:	10c03fcc 	andi	r3,r2,255
   1194c:	00800044 	movi	r2,1
   11950:	10c4983a 	sll	r2,r2,r3
   11954:	e0bffb15 	stw	r2,-20(fp)
   11958:	e0bffe17 	ldw	r2,-8(fp)
   1195c:	10803417 	ldw	r2,208(r2)
   11960:	e13ffe17 	ldw	r4,-8(fp)
   11964:	01400b04 	movi	r5,44
   11968:	103ee83a 	callr	r2
   1196c:	10c03fcc 	andi	r3,r2,255
   11970:	e0bffe17 	ldw	r2,-8(fp)
   11974:	10c00c15 	stw	r3,48(r2)
   11978:	e0bffe17 	ldw	r2,-8(fp)
   1197c:	10800c17 	ldw	r2,48(r2)
   11980:	10800250 	cmplti	r2,r2,9
   11984:	1000031e 	bne	r2,zero,11994 <alt_read_cfi_table+0x1bc>
   11988:	00bffd04 	movi	r2,-12
   1198c:	e0bffa15 	stw	r2,-24(fp)
   11990:	00005e06 	br	11b0c <alt_read_cfi_table+0x334>
   11994:	e03ffd15 	stw	zero,-12(fp)
   11998:	00005306 	br	11ae8 <alt_read_cfi_table+0x310>
   1199c:	e43ffd17 	ldw	r16,-12(fp)
   119a0:	e0bffd17 	ldw	r2,-12(fp)
   119a4:	1085883a 	add	r2,r2,r2
   119a8:	1085883a 	add	r2,r2,r2
   119ac:	11400b44 	addi	r5,r2,45
   119b0:	e13ffe17 	ldw	r4,-8(fp)
   119b4:	001175c0 	call	1175c <alt_read_16bit_query_entry>
   119b8:	113fffcc 	andi	r4,r2,65535
   119bc:	e0fffe17 	ldw	r3,-8(fp)
   119c0:	8004913a 	slli	r2,r16,4
   119c4:	10c5883a 	add	r2,r2,r3
   119c8:	10800f04 	addi	r2,r2,60
   119cc:	11000015 	stw	r4,0(r2)
   119d0:	e17ffd17 	ldw	r5,-12(fp)
   119d4:	e0bffd17 	ldw	r2,-12(fp)
   119d8:	e0fffe17 	ldw	r3,-8(fp)
   119dc:	1004913a 	slli	r2,r2,4
   119e0:	10c5883a 	add	r2,r2,r3
   119e4:	10800f04 	addi	r2,r2,60
   119e8:	10800017 	ldw	r2,0(r2)
   119ec:	11000044 	addi	r4,r2,1
   119f0:	e0fffe17 	ldw	r3,-8(fp)
   119f4:	2804913a 	slli	r2,r5,4
   119f8:	10c5883a 	add	r2,r2,r3
   119fc:	10800f04 	addi	r2,r2,60
   11a00:	11000015 	stw	r4,0(r2)
   11a04:	e43ffd17 	ldw	r16,-12(fp)
   11a08:	e0bffd17 	ldw	r2,-12(fp)
   11a0c:	1085883a 	add	r2,r2,r2
   11a10:	1085883a 	add	r2,r2,r2
   11a14:	11400bc4 	addi	r5,r2,47
   11a18:	e13ffe17 	ldw	r4,-8(fp)
   11a1c:	001175c0 	call	1175c <alt_read_16bit_query_entry>
   11a20:	113fffcc 	andi	r4,r2,65535
   11a24:	e0fffe17 	ldw	r3,-8(fp)
   11a28:	8004913a 	slli	r2,r16,4
   11a2c:	10c5883a 	add	r2,r2,r3
   11a30:	10801004 	addi	r2,r2,64
   11a34:	11000015 	stw	r4,0(r2)
   11a38:	e17ffd17 	ldw	r5,-12(fp)
   11a3c:	e0bffd17 	ldw	r2,-12(fp)
   11a40:	e0fffe17 	ldw	r3,-8(fp)
   11a44:	1004913a 	slli	r2,r2,4
   11a48:	10c5883a 	add	r2,r2,r3
   11a4c:	10801004 	addi	r2,r2,64
   11a50:	10800017 	ldw	r2,0(r2)
   11a54:	1008923a 	slli	r4,r2,8
   11a58:	e0fffe17 	ldw	r3,-8(fp)
   11a5c:	2804913a 	slli	r2,r5,4
   11a60:	10c5883a 	add	r2,r2,r3
   11a64:	10801004 	addi	r2,r2,64
   11a68:	11000015 	stw	r4,0(r2)
   11a6c:	e17ffd17 	ldw	r5,-12(fp)
   11a70:	e0bffd17 	ldw	r2,-12(fp)
   11a74:	e0fffe17 	ldw	r3,-8(fp)
   11a78:	1004913a 	slli	r2,r2,4
   11a7c:	10c5883a 	add	r2,r2,r3
   11a80:	10800f04 	addi	r2,r2,60
   11a84:	11000017 	ldw	r4,0(r2)
   11a88:	e0bffd17 	ldw	r2,-12(fp)
   11a8c:	e0fffe17 	ldw	r3,-8(fp)
   11a90:	1004913a 	slli	r2,r2,4
   11a94:	10c5883a 	add	r2,r2,r3
   11a98:	10801004 	addi	r2,r2,64
   11a9c:	10800017 	ldw	r2,0(r2)
   11aa0:	2089383a 	mul	r4,r4,r2
   11aa4:	e0fffe17 	ldw	r3,-8(fp)
   11aa8:	2804913a 	slli	r2,r5,4
   11aac:	10c5883a 	add	r2,r2,r3
   11ab0:	10800e04 	addi	r2,r2,56
   11ab4:	11000015 	stw	r4,0(r2)
   11ab8:	e0bffd17 	ldw	r2,-12(fp)
   11abc:	e0fffe17 	ldw	r3,-8(fp)
   11ac0:	1004913a 	slli	r2,r2,4
   11ac4:	10c5883a 	add	r2,r2,r3
   11ac8:	10800e04 	addi	r2,r2,56
   11acc:	10c00017 	ldw	r3,0(r2)
   11ad0:	e0bff917 	ldw	r2,-28(fp)
   11ad4:	10c5883a 	add	r2,r2,r3
   11ad8:	e0bff915 	stw	r2,-28(fp)
   11adc:	e0bffd17 	ldw	r2,-12(fp)
   11ae0:	10800044 	addi	r2,r2,1
   11ae4:	e0bffd15 	stw	r2,-12(fp)
   11ae8:	e0bffe17 	ldw	r2,-8(fp)
   11aec:	10c00c17 	ldw	r3,48(r2)
   11af0:	e0bffd17 	ldw	r2,-12(fp)
   11af4:	10ffa916 	blt	r2,r3,1199c <alt_read_cfi_table+0x1c4>
   11af8:	e0fff917 	ldw	r3,-28(fp)
   11afc:	e0bffb17 	ldw	r2,-20(fp)
   11b00:	18800226 	beq	r3,r2,11b0c <alt_read_cfi_table+0x334>
   11b04:	00bffb44 	movi	r2,-19
   11b08:	e0bffa15 	stw	r2,-24(fp)
   11b0c:	e0bffe17 	ldw	r2,-8(fp)
   11b10:	10c03417 	ldw	r3,208(r2)
   11b14:	e0bffe17 	ldw	r2,-8(fp)
   11b18:	10803217 	ldw	r2,200(r2)
   11b1c:	114003c4 	addi	r5,r2,15
   11b20:	e13ffe17 	ldw	r4,-8(fp)
   11b24:	183ee83a 	callr	r3
   11b28:	e0bff405 	stb	r2,-48(fp)
   11b2c:	e0bffe17 	ldw	r2,-8(fp)
   11b30:	10802d17 	ldw	r2,180(r2)
   11b34:	10800098 	cmpnei	r2,r2,2
   11b38:	1000601e 	bne	r2,zero,11cbc <alt_read_cfi_table+0x4e4>
   11b3c:	e0bff403 	ldbu	r2,-48(fp)
   11b40:	108000d8 	cmpnei	r2,r2,3
   11b44:	10005d1e 	bne	r2,zero,11cbc <alt_read_cfi_table+0x4e4>
   11b48:	e0bffe17 	ldw	r2,-8(fp)
   11b4c:	10800c17 	ldw	r2,48(r2)
   11b50:	10bfffc4 	addi	r2,r2,-1
   11b54:	e0bffd15 	stw	r2,-12(fp)
   11b58:	e03ffc15 	stw	zero,-16(fp)
   11b5c:	00005406 	br	11cb0 <alt_read_cfi_table+0x4d8>
   11b60:	e0bffd17 	ldw	r2,-12(fp)
   11b64:	e0fffe17 	ldw	r3,-8(fp)
   11b68:	1004913a 	slli	r2,r2,4
   11b6c:	10c5883a 	add	r2,r2,r3
   11b70:	10800e04 	addi	r2,r2,56
   11b74:	10800017 	ldw	r2,0(r2)
   11b78:	e0bff815 	stw	r2,-32(fp)
   11b7c:	e17ffd17 	ldw	r5,-12(fp)
   11b80:	e0bffc17 	ldw	r2,-16(fp)
   11b84:	e0fffe17 	ldw	r3,-8(fp)
   11b88:	1004913a 	slli	r2,r2,4
   11b8c:	10c5883a 	add	r2,r2,r3
   11b90:	10800e04 	addi	r2,r2,56
   11b94:	11000017 	ldw	r4,0(r2)
   11b98:	e0fffe17 	ldw	r3,-8(fp)
   11b9c:	2804913a 	slli	r2,r5,4
   11ba0:	10c5883a 	add	r2,r2,r3
   11ba4:	10800e04 	addi	r2,r2,56
   11ba8:	11000015 	stw	r4,0(r2)
   11bac:	e0bffc17 	ldw	r2,-16(fp)
   11bb0:	e0fffe17 	ldw	r3,-8(fp)
   11bb4:	1004913a 	slli	r2,r2,4
   11bb8:	10c5883a 	add	r2,r2,r3
   11bbc:	10c00e04 	addi	r3,r2,56
   11bc0:	e0bff817 	ldw	r2,-32(fp)
   11bc4:	18800015 	stw	r2,0(r3)
   11bc8:	e0bffd17 	ldw	r2,-12(fp)
   11bcc:	e0fffe17 	ldw	r3,-8(fp)
   11bd0:	1004913a 	slli	r2,r2,4
   11bd4:	10c5883a 	add	r2,r2,r3
   11bd8:	10801004 	addi	r2,r2,64
   11bdc:	10800017 	ldw	r2,0(r2)
   11be0:	e0bff815 	stw	r2,-32(fp)
   11be4:	e17ffd17 	ldw	r5,-12(fp)
   11be8:	e0bffc17 	ldw	r2,-16(fp)
   11bec:	e0fffe17 	ldw	r3,-8(fp)
   11bf0:	1004913a 	slli	r2,r2,4
   11bf4:	10c5883a 	add	r2,r2,r3
   11bf8:	10801004 	addi	r2,r2,64
   11bfc:	11000017 	ldw	r4,0(r2)
   11c00:	e0fffe17 	ldw	r3,-8(fp)
   11c04:	2804913a 	slli	r2,r5,4
   11c08:	10c5883a 	add	r2,r2,r3
   11c0c:	10801004 	addi	r2,r2,64
   11c10:	11000015 	stw	r4,0(r2)
   11c14:	e0bffc17 	ldw	r2,-16(fp)
   11c18:	e0fffe17 	ldw	r3,-8(fp)
   11c1c:	1004913a 	slli	r2,r2,4
   11c20:	10c5883a 	add	r2,r2,r3
   11c24:	10c01004 	addi	r3,r2,64
   11c28:	e0bff817 	ldw	r2,-32(fp)
   11c2c:	18800015 	stw	r2,0(r3)
   11c30:	e0bffd17 	ldw	r2,-12(fp)
   11c34:	e0fffe17 	ldw	r3,-8(fp)
   11c38:	1004913a 	slli	r2,r2,4
   11c3c:	10c5883a 	add	r2,r2,r3
   11c40:	10800f04 	addi	r2,r2,60
   11c44:	10800017 	ldw	r2,0(r2)
   11c48:	e0bff815 	stw	r2,-32(fp)
   11c4c:	e17ffd17 	ldw	r5,-12(fp)
   11c50:	e0bffc17 	ldw	r2,-16(fp)
   11c54:	e0fffe17 	ldw	r3,-8(fp)
   11c58:	1004913a 	slli	r2,r2,4
   11c5c:	10c5883a 	add	r2,r2,r3
   11c60:	10800f04 	addi	r2,r2,60
   11c64:	11000017 	ldw	r4,0(r2)
   11c68:	e0fffe17 	ldw	r3,-8(fp)
   11c6c:	2804913a 	slli	r2,r5,4
   11c70:	10c5883a 	add	r2,r2,r3
   11c74:	10800f04 	addi	r2,r2,60
   11c78:	11000015 	stw	r4,0(r2)
   11c7c:	e0bffc17 	ldw	r2,-16(fp)
   11c80:	e0fffe17 	ldw	r3,-8(fp)
   11c84:	1004913a 	slli	r2,r2,4
   11c88:	10c5883a 	add	r2,r2,r3
   11c8c:	10c00f04 	addi	r3,r2,60
   11c90:	e0bff817 	ldw	r2,-32(fp)
   11c94:	18800015 	stw	r2,0(r3)
   11c98:	e0bffd17 	ldw	r2,-12(fp)
   11c9c:	10bfffc4 	addi	r2,r2,-1
   11ca0:	e0bffd15 	stw	r2,-12(fp)
   11ca4:	e0bffc17 	ldw	r2,-16(fp)
   11ca8:	10800044 	addi	r2,r2,1
   11cac:	e0bffc15 	stw	r2,-16(fp)
   11cb0:	e0fffc17 	ldw	r3,-16(fp)
   11cb4:	e0bffd17 	ldw	r2,-12(fp)
   11cb8:	10ffa90e 	bge	r2,r3,11b60 <alt_read_cfi_table+0x388>
   11cbc:	e03ffd15 	stw	zero,-12(fp)
   11cc0:	00001306 	br	11d10 <alt_read_cfi_table+0x538>
   11cc4:	e0bffd17 	ldw	r2,-12(fp)
   11cc8:	e0fffe17 	ldw	r3,-8(fp)
   11ccc:	1004913a 	slli	r2,r2,4
   11cd0:	10c5883a 	add	r2,r2,r3
   11cd4:	10c00d04 	addi	r3,r2,52
   11cd8:	e0bff517 	ldw	r2,-44(fp)
   11cdc:	18800015 	stw	r2,0(r3)
   11ce0:	e0bffd17 	ldw	r2,-12(fp)
   11ce4:	e0fffe17 	ldw	r3,-8(fp)
   11ce8:	1004913a 	slli	r2,r2,4
   11cec:	10c5883a 	add	r2,r2,r3
   11cf0:	10800e04 	addi	r2,r2,56
   11cf4:	10c00017 	ldw	r3,0(r2)
   11cf8:	e0bff517 	ldw	r2,-44(fp)
   11cfc:	10c5883a 	add	r2,r2,r3
   11d00:	e0bff515 	stw	r2,-44(fp)
   11d04:	e0bffd17 	ldw	r2,-12(fp)
   11d08:	10800044 	addi	r2,r2,1
   11d0c:	e0bffd15 	stw	r2,-12(fp)
   11d10:	e0bffe17 	ldw	r2,-8(fp)
   11d14:	10c00c17 	ldw	r3,48(r2)
   11d18:	e0bffd17 	ldw	r2,-12(fp)
   11d1c:	10ffe916 	blt	r2,r3,11cc4 <alt_read_cfi_table+0x4ec>
   11d20:	e0bffe17 	ldw	r2,-8(fp)
   11d24:	10802d17 	ldw	r2,180(r2)
   11d28:	e0bfff15 	stw	r2,-4(fp)
   11d2c:	e0ffff17 	ldw	r3,-4(fp)
   11d30:	188000a0 	cmpeqi	r2,r3,2
   11d34:	1000071e 	bne	r2,zero,11d54 <alt_read_cfi_table+0x57c>
   11d38:	e0ffff17 	ldw	r3,-4(fp)
   11d3c:	188000e0 	cmpeqi	r2,r3,3
   11d40:	10000c1e 	bne	r2,zero,11d74 <alt_read_cfi_table+0x59c>
   11d44:	e0ffff17 	ldw	r3,-4(fp)
   11d48:	18800060 	cmpeqi	r2,r3,1
   11d4c:	1000091e 	bne	r2,zero,11d74 <alt_read_cfi_table+0x59c>
   11d50:	00001006 	br	11d94 <alt_read_cfi_table+0x5bc>
   11d54:	e0bffe17 	ldw	r2,-8(fp)
   11d58:	10c03317 	ldw	r3,204(r2)
   11d5c:	e0bffe17 	ldw	r2,-8(fp)
   11d60:	11000a17 	ldw	r4,40(r2)
   11d64:	01401544 	movi	r5,85
   11d68:	01803c04 	movi	r6,240
   11d6c:	183ee83a 	callr	r3
   11d70:	00000a06 	br	11d9c <alt_read_cfi_table+0x5c4>
   11d74:	e0bffe17 	ldw	r2,-8(fp)
   11d78:	10c03317 	ldw	r3,204(r2)
   11d7c:	e0bffe17 	ldw	r2,-8(fp)
   11d80:	11000a17 	ldw	r4,40(r2)
   11d84:	01401544 	movi	r5,85
   11d88:	01803fc4 	movi	r6,255
   11d8c:	183ee83a 	callr	r3
   11d90:	00000206 	br	11d9c <alt_read_cfi_table+0x5c4>
   11d94:	00bffec4 	movi	r2,-5
   11d98:	e0bffa15 	stw	r2,-24(fp)
   11d9c:	e0bffa17 	ldw	r2,-24(fp)
   11da0:	e037883a 	mov	sp,fp
   11da4:	dfc00217 	ldw	ra,8(sp)
   11da8:	df000117 	ldw	fp,4(sp)
   11dac:	dc000017 	ldw	r16,0(sp)
   11db0:	dec00304 	addi	sp,sp,12
   11db4:	f800283a 	ret

00011db8 <alt_read_cfi_width>:
   11db8:	defff704 	addi	sp,sp,-36
   11dbc:	dfc00815 	stw	ra,32(sp)
   11dc0:	df000715 	stw	fp,28(sp)
   11dc4:	df000704 	addi	fp,sp,28
   11dc8:	e13fff15 	stw	r4,-4(fp)
   11dcc:	e03ff915 	stw	zero,-28(fp)
   11dd0:	e0bfff17 	ldw	r2,-4(fp)
   11dd4:	11000a17 	ldw	r4,40(r2)
   11dd8:	01401544 	movi	r5,85
   11ddc:	01802604 	movi	r6,152
   11de0:	00112640 	call	11264 <alt_write_flash_command_8bit_device_8bit_mode>
   11de4:	e03ffb15 	stw	zero,-20(fp)
   11de8:	00000f06 	br	11e28 <alt_read_cfi_width+0x70>
   11dec:	e13ffb17 	ldw	r4,-20(fp)
   11df0:	e0bfff17 	ldw	r2,-4(fp)
   11df4:	10800a17 	ldw	r2,40(r2)
   11df8:	1007883a 	mov	r3,r2
   11dfc:	e0bffb17 	ldw	r2,-20(fp)
   11e00:	1885883a 	add	r2,r3,r2
   11e04:	10800404 	addi	r2,r2,16
   11e08:	10800023 	ldbuio	r2,0(r2)
   11e0c:	1007883a 	mov	r3,r2
   11e10:	e0bffc04 	addi	r2,fp,-16
   11e14:	1105883a 	add	r2,r2,r4
   11e18:	10c00005 	stb	r3,0(r2)
   11e1c:	e0bffb17 	ldw	r2,-20(fp)
   11e20:	10800044 	addi	r2,r2,1
   11e24:	e0bffb15 	stw	r2,-20(fp)
   11e28:	e0bffb17 	ldw	r2,-20(fp)
   11e2c:	108000d0 	cmplti	r2,r2,3
   11e30:	103fee1e 	bne	r2,zero,11dec <alt_read_cfi_width+0x34>
   11e34:	e0bffc03 	ldbu	r2,-16(fp)
   11e38:	10803fcc 	andi	r2,r2,255
   11e3c:	10801458 	cmpnei	r2,r2,81
   11e40:	10001d1e 	bne	r2,zero,11eb8 <alt_read_cfi_width+0x100>
   11e44:	e0bffc43 	ldbu	r2,-15(fp)
   11e48:	10803fcc 	andi	r2,r2,255
   11e4c:	10801498 	cmpnei	r2,r2,82
   11e50:	1000191e 	bne	r2,zero,11eb8 <alt_read_cfi_width+0x100>
   11e54:	e0bffc83 	ldbu	r2,-14(fp)
   11e58:	10803fcc 	andi	r2,r2,255
   11e5c:	10801658 	cmpnei	r2,r2,89
   11e60:	1000151e 	bne	r2,zero,11eb8 <alt_read_cfi_width+0x100>
   11e64:	e0ffff17 	ldw	r3,-4(fp)
   11e68:	00800044 	movi	r2,1
   11e6c:	18802e15 	stw	r2,184(r3)
   11e70:	e0ffff17 	ldw	r3,-4(fp)
   11e74:	00800044 	movi	r2,1
   11e78:	18802f15 	stw	r2,188(r3)
   11e7c:	e0bfff17 	ldw	r2,-4(fp)
   11e80:	10800a17 	ldw	r2,40(r2)
   11e84:	10800a04 	addi	r2,r2,40
   11e88:	1080002b 	ldhuio	r2,0(r2)
   11e8c:	e0bffa0d 	sth	r2,-24(fp)
   11e90:	e0bffa0b 	ldhu	r2,-24(fp)
   11e94:	10800044 	addi	r2,r2,1
   11e98:	e0bffa0d 	sth	r2,-24(fp)
   11e9c:	e0bffa0b 	ldhu	r2,-24(fp)
   11ea0:	1080004c 	andi	r2,r2,1
   11ea4:	1004c03a 	cmpne	r2,r2,zero
   11ea8:	1001a81e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   11eac:	00bffb44 	movi	r2,-19
   11eb0:	e0bff915 	stw	r2,-28(fp)
   11eb4:	0001a506 	br	1254c <alt_read_cfi_width+0x794>
   11eb8:	e0bfff17 	ldw	r2,-4(fp)
   11ebc:	11000a17 	ldw	r4,40(r2)
   11ec0:	01401544 	movi	r5,85
   11ec4:	01802604 	movi	r6,152
   11ec8:	00112a00 	call	112a0 <alt_write_flash_command_16bit_device_8bit_mode>
   11ecc:	e03ffb15 	stw	zero,-20(fp)
   11ed0:	00000f06 	br	11f10 <alt_read_cfi_width+0x158>
   11ed4:	e13ffb17 	ldw	r4,-20(fp)
   11ed8:	e0bfff17 	ldw	r2,-4(fp)
   11edc:	10800a17 	ldw	r2,40(r2)
   11ee0:	1007883a 	mov	r3,r2
   11ee4:	e0bffb17 	ldw	r2,-20(fp)
   11ee8:	1885883a 	add	r2,r3,r2
   11eec:	10800804 	addi	r2,r2,32
   11ef0:	10800023 	ldbuio	r2,0(r2)
   11ef4:	1007883a 	mov	r3,r2
   11ef8:	e0bffc04 	addi	r2,fp,-16
   11efc:	1105883a 	add	r2,r2,r4
   11f00:	10c00005 	stb	r3,0(r2)
   11f04:	e0bffb17 	ldw	r2,-20(fp)
   11f08:	10800044 	addi	r2,r2,1
   11f0c:	e0bffb15 	stw	r2,-20(fp)
   11f10:	e0bffb17 	ldw	r2,-20(fp)
   11f14:	10800190 	cmplti	r2,r2,6
   11f18:	103fee1e 	bne	r2,zero,11ed4 <alt_read_cfi_width+0x11c>
   11f1c:	e0bffc03 	ldbu	r2,-16(fp)
   11f20:	10803fcc 	andi	r2,r2,255
   11f24:	10801458 	cmpnei	r2,r2,81
   11f28:	1000291e 	bne	r2,zero,11fd0 <alt_read_cfi_width+0x218>
   11f2c:	e0bffc43 	ldbu	r2,-15(fp)
   11f30:	10803fcc 	andi	r2,r2,255
   11f34:	10801458 	cmpnei	r2,r2,81
   11f38:	1000251e 	bne	r2,zero,11fd0 <alt_read_cfi_width+0x218>
   11f3c:	e0bffc83 	ldbu	r2,-14(fp)
   11f40:	10803fcc 	andi	r2,r2,255
   11f44:	10801498 	cmpnei	r2,r2,82
   11f48:	1000211e 	bne	r2,zero,11fd0 <alt_read_cfi_width+0x218>
   11f4c:	e0bffcc3 	ldbu	r2,-13(fp)
   11f50:	10803fcc 	andi	r2,r2,255
   11f54:	10801498 	cmpnei	r2,r2,82
   11f58:	10001d1e 	bne	r2,zero,11fd0 <alt_read_cfi_width+0x218>
   11f5c:	e0bffd03 	ldbu	r2,-12(fp)
   11f60:	10803fcc 	andi	r2,r2,255
   11f64:	10801658 	cmpnei	r2,r2,89
   11f68:	1000191e 	bne	r2,zero,11fd0 <alt_read_cfi_width+0x218>
   11f6c:	e0bffd43 	ldbu	r2,-11(fp)
   11f70:	10803fcc 	andi	r2,r2,255
   11f74:	10801658 	cmpnei	r2,r2,89
   11f78:	1000151e 	bne	r2,zero,11fd0 <alt_read_cfi_width+0x218>
   11f7c:	e0ffff17 	ldw	r3,-4(fp)
   11f80:	00800044 	movi	r2,1
   11f84:	18802e15 	stw	r2,184(r3)
   11f88:	e0ffff17 	ldw	r3,-4(fp)
   11f8c:	00800084 	movi	r2,2
   11f90:	18802f15 	stw	r2,188(r3)
   11f94:	e0bfff17 	ldw	r2,-4(fp)
   11f98:	10800a17 	ldw	r2,40(r2)
   11f9c:	10801404 	addi	r2,r2,80
   11fa0:	1080002b 	ldhuio	r2,0(r2)
   11fa4:	e0bffa0d 	sth	r2,-24(fp)
   11fa8:	e0bffa0b 	ldhu	r2,-24(fp)
   11fac:	10800044 	addi	r2,r2,1
   11fb0:	e0bffa0d 	sth	r2,-24(fp)
   11fb4:	e0bffa0b 	ldhu	r2,-24(fp)
   11fb8:	1080004c 	andi	r2,r2,1
   11fbc:	1004c03a 	cmpne	r2,r2,zero
   11fc0:	1001621e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   11fc4:	00bffb44 	movi	r2,-19
   11fc8:	e0bff915 	stw	r2,-28(fp)
   11fcc:	00015f06 	br	1254c <alt_read_cfi_width+0x794>
   11fd0:	e0bfff17 	ldw	r2,-4(fp)
   11fd4:	11000a17 	ldw	r4,40(r2)
   11fd8:	01401544 	movi	r5,85
   11fdc:	01802604 	movi	r6,152
   11fe0:	00113640 	call	11364 <alt_write_flash_command_16bit_device_16bit_mode>
   11fe4:	e03ffb15 	stw	zero,-20(fp)
   11fe8:	00000f06 	br	12028 <alt_read_cfi_width+0x270>
   11fec:	e13ffb17 	ldw	r4,-20(fp)
   11ff0:	e0bfff17 	ldw	r2,-4(fp)
   11ff4:	10800a17 	ldw	r2,40(r2)
   11ff8:	1007883a 	mov	r3,r2
   11ffc:	e0bffb17 	ldw	r2,-20(fp)
   12000:	1885883a 	add	r2,r3,r2
   12004:	10800804 	addi	r2,r2,32
   12008:	10800023 	ldbuio	r2,0(r2)
   1200c:	1007883a 	mov	r3,r2
   12010:	e0bffc04 	addi	r2,fp,-16
   12014:	1105883a 	add	r2,r2,r4
   12018:	10c00005 	stb	r3,0(r2)
   1201c:	e0bffb17 	ldw	r2,-20(fp)
   12020:	10800044 	addi	r2,r2,1
   12024:	e0bffb15 	stw	r2,-20(fp)
   12028:	e0bffb17 	ldw	r2,-20(fp)
   1202c:	10800190 	cmplti	r2,r2,6
   12030:	103fee1e 	bne	r2,zero,11fec <alt_read_cfi_width+0x234>
   12034:	e0bffc03 	ldbu	r2,-16(fp)
   12038:	10803fcc 	andi	r2,r2,255
   1203c:	10801458 	cmpnei	r2,r2,81
   12040:	1000291e 	bne	r2,zero,120e8 <alt_read_cfi_width+0x330>
   12044:	e0bffc43 	ldbu	r2,-15(fp)
   12048:	10803fcc 	andi	r2,r2,255
   1204c:	1004c03a 	cmpne	r2,r2,zero
   12050:	1000251e 	bne	r2,zero,120e8 <alt_read_cfi_width+0x330>
   12054:	e0bffc83 	ldbu	r2,-14(fp)
   12058:	10803fcc 	andi	r2,r2,255
   1205c:	10801498 	cmpnei	r2,r2,82
   12060:	1000211e 	bne	r2,zero,120e8 <alt_read_cfi_width+0x330>
   12064:	e0bffcc3 	ldbu	r2,-13(fp)
   12068:	10803fcc 	andi	r2,r2,255
   1206c:	1004c03a 	cmpne	r2,r2,zero
   12070:	10001d1e 	bne	r2,zero,120e8 <alt_read_cfi_width+0x330>
   12074:	e0bffd03 	ldbu	r2,-12(fp)
   12078:	10803fcc 	andi	r2,r2,255
   1207c:	10801658 	cmpnei	r2,r2,89
   12080:	1000191e 	bne	r2,zero,120e8 <alt_read_cfi_width+0x330>
   12084:	e0bffd43 	ldbu	r2,-11(fp)
   12088:	10803fcc 	andi	r2,r2,255
   1208c:	1004c03a 	cmpne	r2,r2,zero
   12090:	1000151e 	bne	r2,zero,120e8 <alt_read_cfi_width+0x330>
   12094:	e0ffff17 	ldw	r3,-4(fp)
   12098:	00800084 	movi	r2,2
   1209c:	18802e15 	stw	r2,184(r3)
   120a0:	e0ffff17 	ldw	r3,-4(fp)
   120a4:	00800084 	movi	r2,2
   120a8:	18802f15 	stw	r2,188(r3)
   120ac:	e0bfff17 	ldw	r2,-4(fp)
   120b0:	10800a17 	ldw	r2,40(r2)
   120b4:	10801404 	addi	r2,r2,80
   120b8:	1080002b 	ldhuio	r2,0(r2)
   120bc:	e0bffa0d 	sth	r2,-24(fp)
   120c0:	e0bffa0b 	ldhu	r2,-24(fp)
   120c4:	10800044 	addi	r2,r2,1
   120c8:	e0bffa0d 	sth	r2,-24(fp)
   120cc:	e0bffa0b 	ldhu	r2,-24(fp)
   120d0:	1080008c 	andi	r2,r2,2
   120d4:	1004c03a 	cmpne	r2,r2,zero
   120d8:	10011c1e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   120dc:	00bffb44 	movi	r2,-19
   120e0:	e0bff915 	stw	r2,-28(fp)
   120e4:	00011906 	br	1254c <alt_read_cfi_width+0x794>
   120e8:	e0bfff17 	ldw	r2,-4(fp)
   120ec:	11000a17 	ldw	r4,40(r2)
   120f0:	01401544 	movi	r5,85
   120f4:	01802604 	movi	r6,152
   120f8:	00113f00 	call	113f0 <alt_write_flash_command_32bit_device_32bit_mode>
   120fc:	e03ffb15 	stw	zero,-20(fp)
   12100:	00000f06 	br	12140 <alt_read_cfi_width+0x388>
   12104:	e13ffb17 	ldw	r4,-20(fp)
   12108:	e0bfff17 	ldw	r2,-4(fp)
   1210c:	10800a17 	ldw	r2,40(r2)
   12110:	1007883a 	mov	r3,r2
   12114:	e0bffb17 	ldw	r2,-20(fp)
   12118:	1885883a 	add	r2,r3,r2
   1211c:	10801004 	addi	r2,r2,64
   12120:	10800023 	ldbuio	r2,0(r2)
   12124:	1007883a 	mov	r3,r2
   12128:	e0bffc04 	addi	r2,fp,-16
   1212c:	1105883a 	add	r2,r2,r4
   12130:	10c00005 	stb	r3,0(r2)
   12134:	e0bffb17 	ldw	r2,-20(fp)
   12138:	10800044 	addi	r2,r2,1
   1213c:	e0bffb15 	stw	r2,-20(fp)
   12140:	e0bffb17 	ldw	r2,-20(fp)
   12144:	10800310 	cmplti	r2,r2,12
   12148:	103fee1e 	bne	r2,zero,12104 <alt_read_cfi_width+0x34c>
   1214c:	e0bffc03 	ldbu	r2,-16(fp)
   12150:	10803fcc 	andi	r2,r2,255
   12154:	10801458 	cmpnei	r2,r2,81
   12158:	1000411e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   1215c:	e0bffc43 	ldbu	r2,-15(fp)
   12160:	10803fcc 	andi	r2,r2,255
   12164:	1004c03a 	cmpne	r2,r2,zero
   12168:	10003d1e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   1216c:	e0bffc83 	ldbu	r2,-14(fp)
   12170:	10803fcc 	andi	r2,r2,255
   12174:	1004c03a 	cmpne	r2,r2,zero
   12178:	1000391e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   1217c:	e0bffcc3 	ldbu	r2,-13(fp)
   12180:	10803fcc 	andi	r2,r2,255
   12184:	1004c03a 	cmpne	r2,r2,zero
   12188:	1000351e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   1218c:	e0bffd03 	ldbu	r2,-12(fp)
   12190:	10803fcc 	andi	r2,r2,255
   12194:	10801498 	cmpnei	r2,r2,82
   12198:	1000311e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   1219c:	e0bffd43 	ldbu	r2,-11(fp)
   121a0:	10803fcc 	andi	r2,r2,255
   121a4:	1004c03a 	cmpne	r2,r2,zero
   121a8:	10002d1e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   121ac:	e0bffd83 	ldbu	r2,-10(fp)
   121b0:	10803fcc 	andi	r2,r2,255
   121b4:	1004c03a 	cmpne	r2,r2,zero
   121b8:	1000291e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   121bc:	e0bffdc3 	ldbu	r2,-9(fp)
   121c0:	10803fcc 	andi	r2,r2,255
   121c4:	1004c03a 	cmpne	r2,r2,zero
   121c8:	1000251e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   121cc:	e0bffe03 	ldbu	r2,-8(fp)
   121d0:	10803fcc 	andi	r2,r2,255
   121d4:	10801658 	cmpnei	r2,r2,89
   121d8:	1000211e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   121dc:	e0bffe43 	ldbu	r2,-7(fp)
   121e0:	10803fcc 	andi	r2,r2,255
   121e4:	1004c03a 	cmpne	r2,r2,zero
   121e8:	10001d1e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   121ec:	e0bffe83 	ldbu	r2,-6(fp)
   121f0:	10803fcc 	andi	r2,r2,255
   121f4:	1004c03a 	cmpne	r2,r2,zero
   121f8:	1000191e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   121fc:	e0bffec3 	ldbu	r2,-5(fp)
   12200:	10803fcc 	andi	r2,r2,255
   12204:	1004c03a 	cmpne	r2,r2,zero
   12208:	1000151e 	bne	r2,zero,12260 <alt_read_cfi_width+0x4a8>
   1220c:	e0ffff17 	ldw	r3,-4(fp)
   12210:	00800104 	movi	r2,4
   12214:	18802e15 	stw	r2,184(r3)
   12218:	e0ffff17 	ldw	r3,-4(fp)
   1221c:	00800104 	movi	r2,4
   12220:	18802f15 	stw	r2,188(r3)
   12224:	e0bfff17 	ldw	r2,-4(fp)
   12228:	10800a17 	ldw	r2,40(r2)
   1222c:	10802804 	addi	r2,r2,160
   12230:	10800037 	ldwio	r2,0(r2)
   12234:	e0bffa0d 	sth	r2,-24(fp)
   12238:	e0bffa0b 	ldhu	r2,-24(fp)
   1223c:	10800044 	addi	r2,r2,1
   12240:	e0bffa0d 	sth	r2,-24(fp)
   12244:	e0bffa0b 	ldhu	r2,-24(fp)
   12248:	1080010c 	andi	r2,r2,4
   1224c:	1004c03a 	cmpne	r2,r2,zero
   12250:	1000be1e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   12254:	00bffb44 	movi	r2,-19
   12258:	e0bff915 	stw	r2,-28(fp)
   1225c:	0000bb06 	br	1254c <alt_read_cfi_width+0x794>
   12260:	e0bfff17 	ldw	r2,-4(fp)
   12264:	11000a17 	ldw	r4,40(r2)
   12268:	01401544 	movi	r5,85
   1226c:	01802604 	movi	r6,152
   12270:	00113a80 	call	113a8 <alt_write_flash_command_32bit_device_16bit_mode>
   12274:	e03ffb15 	stw	zero,-20(fp)
   12278:	00000f06 	br	122b8 <alt_read_cfi_width+0x500>
   1227c:	e13ffb17 	ldw	r4,-20(fp)
   12280:	e0bfff17 	ldw	r2,-4(fp)
   12284:	10800a17 	ldw	r2,40(r2)
   12288:	1007883a 	mov	r3,r2
   1228c:	e0bffb17 	ldw	r2,-20(fp)
   12290:	1885883a 	add	r2,r3,r2
   12294:	10801004 	addi	r2,r2,64
   12298:	10800023 	ldbuio	r2,0(r2)
   1229c:	1007883a 	mov	r3,r2
   122a0:	e0bffc04 	addi	r2,fp,-16
   122a4:	1105883a 	add	r2,r2,r4
   122a8:	10c00005 	stb	r3,0(r2)
   122ac:	e0bffb17 	ldw	r2,-20(fp)
   122b0:	10800044 	addi	r2,r2,1
   122b4:	e0bffb15 	stw	r2,-20(fp)
   122b8:	e0bffb17 	ldw	r2,-20(fp)
   122bc:	10800310 	cmplti	r2,r2,12
   122c0:	103fee1e 	bne	r2,zero,1227c <alt_read_cfi_width+0x4c4>
   122c4:	e0bffc03 	ldbu	r2,-16(fp)
   122c8:	10803fcc 	andi	r2,r2,255
   122cc:	10801458 	cmpnei	r2,r2,81
   122d0:	1000411e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   122d4:	e0bffc43 	ldbu	r2,-15(fp)
   122d8:	10803fcc 	andi	r2,r2,255
   122dc:	1004c03a 	cmpne	r2,r2,zero
   122e0:	10003d1e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   122e4:	e0bffc83 	ldbu	r2,-14(fp)
   122e8:	10803fcc 	andi	r2,r2,255
   122ec:	10801458 	cmpnei	r2,r2,81
   122f0:	1000391e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   122f4:	e0bffcc3 	ldbu	r2,-13(fp)
   122f8:	10803fcc 	andi	r2,r2,255
   122fc:	1004c03a 	cmpne	r2,r2,zero
   12300:	1000351e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12304:	e0bffd03 	ldbu	r2,-12(fp)
   12308:	10803fcc 	andi	r2,r2,255
   1230c:	10801498 	cmpnei	r2,r2,82
   12310:	1000311e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12314:	e0bffd43 	ldbu	r2,-11(fp)
   12318:	10803fcc 	andi	r2,r2,255
   1231c:	1004c03a 	cmpne	r2,r2,zero
   12320:	10002d1e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12324:	e0bffd83 	ldbu	r2,-10(fp)
   12328:	10803fcc 	andi	r2,r2,255
   1232c:	10801498 	cmpnei	r2,r2,82
   12330:	1000291e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12334:	e0bffdc3 	ldbu	r2,-9(fp)
   12338:	10803fcc 	andi	r2,r2,255
   1233c:	1004c03a 	cmpne	r2,r2,zero
   12340:	1000251e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12344:	e0bffe03 	ldbu	r2,-8(fp)
   12348:	10803fcc 	andi	r2,r2,255
   1234c:	10801658 	cmpnei	r2,r2,89
   12350:	1000211e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12354:	e0bffe43 	ldbu	r2,-7(fp)
   12358:	10803fcc 	andi	r2,r2,255
   1235c:	1004c03a 	cmpne	r2,r2,zero
   12360:	10001d1e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12364:	e0bffe83 	ldbu	r2,-6(fp)
   12368:	10803fcc 	andi	r2,r2,255
   1236c:	10801658 	cmpnei	r2,r2,89
   12370:	1000191e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12374:	e0bffec3 	ldbu	r2,-5(fp)
   12378:	10803fcc 	andi	r2,r2,255
   1237c:	1004c03a 	cmpne	r2,r2,zero
   12380:	1000151e 	bne	r2,zero,123d8 <alt_read_cfi_width+0x620>
   12384:	e0ffff17 	ldw	r3,-4(fp)
   12388:	00800084 	movi	r2,2
   1238c:	18802e15 	stw	r2,184(r3)
   12390:	e0ffff17 	ldw	r3,-4(fp)
   12394:	00800104 	movi	r2,4
   12398:	18802f15 	stw	r2,188(r3)
   1239c:	e0bfff17 	ldw	r2,-4(fp)
   123a0:	10800a17 	ldw	r2,40(r2)
   123a4:	10802804 	addi	r2,r2,160
   123a8:	10800037 	ldwio	r2,0(r2)
   123ac:	e0bffa0d 	sth	r2,-24(fp)
   123b0:	e0bffa0b 	ldhu	r2,-24(fp)
   123b4:	10800044 	addi	r2,r2,1
   123b8:	e0bffa0d 	sth	r2,-24(fp)
   123bc:	e0bffa0b 	ldhu	r2,-24(fp)
   123c0:	1080010c 	andi	r2,r2,4
   123c4:	1004c03a 	cmpne	r2,r2,zero
   123c8:	1000601e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   123cc:	00bffb44 	movi	r2,-19
   123d0:	e0bff915 	stw	r2,-28(fp)
   123d4:	00005d06 	br	1254c <alt_read_cfi_width+0x794>
   123d8:	e0bfff17 	ldw	r2,-4(fp)
   123dc:	11000a17 	ldw	r4,40(r2)
   123e0:	01401544 	movi	r5,85
   123e4:	01802604 	movi	r6,152
   123e8:	001131c0 	call	1131c <alt_write_flash_command_32bit_device_8bit_mode>
   123ec:	e03ffb15 	stw	zero,-20(fp)
   123f0:	00000f06 	br	12430 <alt_read_cfi_width+0x678>
   123f4:	e13ffb17 	ldw	r4,-20(fp)
   123f8:	e0bfff17 	ldw	r2,-4(fp)
   123fc:	10800a17 	ldw	r2,40(r2)
   12400:	1007883a 	mov	r3,r2
   12404:	e0bffb17 	ldw	r2,-20(fp)
   12408:	1885883a 	add	r2,r3,r2
   1240c:	10801004 	addi	r2,r2,64
   12410:	10800023 	ldbuio	r2,0(r2)
   12414:	1007883a 	mov	r3,r2
   12418:	e0bffc04 	addi	r2,fp,-16
   1241c:	1105883a 	add	r2,r2,r4
   12420:	10c00005 	stb	r3,0(r2)
   12424:	e0bffb17 	ldw	r2,-20(fp)
   12428:	10800044 	addi	r2,r2,1
   1242c:	e0bffb15 	stw	r2,-20(fp)
   12430:	e0bffb17 	ldw	r2,-20(fp)
   12434:	10800310 	cmplti	r2,r2,12
   12438:	103fee1e 	bne	r2,zero,123f4 <alt_read_cfi_width+0x63c>
   1243c:	e0bffc03 	ldbu	r2,-16(fp)
   12440:	10803fcc 	andi	r2,r2,255
   12444:	10801458 	cmpnei	r2,r2,81
   12448:	1000401e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   1244c:	e0bffc43 	ldbu	r2,-15(fp)
   12450:	10803fcc 	andi	r2,r2,255
   12454:	10801458 	cmpnei	r2,r2,81
   12458:	10003c1e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   1245c:	e0bffc83 	ldbu	r2,-14(fp)
   12460:	10803fcc 	andi	r2,r2,255
   12464:	10801458 	cmpnei	r2,r2,81
   12468:	1000381e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   1246c:	e0bffcc3 	ldbu	r2,-13(fp)
   12470:	10803fcc 	andi	r2,r2,255
   12474:	10801458 	cmpnei	r2,r2,81
   12478:	1000341e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   1247c:	e0bffd03 	ldbu	r2,-12(fp)
   12480:	10803fcc 	andi	r2,r2,255
   12484:	10801498 	cmpnei	r2,r2,82
   12488:	1000301e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   1248c:	e0bffd43 	ldbu	r2,-11(fp)
   12490:	10803fcc 	andi	r2,r2,255
   12494:	10801498 	cmpnei	r2,r2,82
   12498:	10002c1e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   1249c:	e0bffd83 	ldbu	r2,-10(fp)
   124a0:	10803fcc 	andi	r2,r2,255
   124a4:	10801498 	cmpnei	r2,r2,82
   124a8:	1000281e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   124ac:	e0bffdc3 	ldbu	r2,-9(fp)
   124b0:	10803fcc 	andi	r2,r2,255
   124b4:	10801498 	cmpnei	r2,r2,82
   124b8:	1000241e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   124bc:	e0bffe03 	ldbu	r2,-8(fp)
   124c0:	10803fcc 	andi	r2,r2,255
   124c4:	10801658 	cmpnei	r2,r2,89
   124c8:	1000201e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   124cc:	e0bffe43 	ldbu	r2,-7(fp)
   124d0:	10803fcc 	andi	r2,r2,255
   124d4:	10801658 	cmpnei	r2,r2,89
   124d8:	10001c1e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   124dc:	e0bffe83 	ldbu	r2,-6(fp)
   124e0:	10803fcc 	andi	r2,r2,255
   124e4:	10801658 	cmpnei	r2,r2,89
   124e8:	1000181e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   124ec:	e0bffec3 	ldbu	r2,-5(fp)
   124f0:	10803fcc 	andi	r2,r2,255
   124f4:	10801658 	cmpnei	r2,r2,89
   124f8:	1000141e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   124fc:	e0ffff17 	ldw	r3,-4(fp)
   12500:	00800044 	movi	r2,1
   12504:	18802e15 	stw	r2,184(r3)
   12508:	e0ffff17 	ldw	r3,-4(fp)
   1250c:	00800104 	movi	r2,4
   12510:	18802f15 	stw	r2,188(r3)
   12514:	e0bfff17 	ldw	r2,-4(fp)
   12518:	10800a17 	ldw	r2,40(r2)
   1251c:	10802804 	addi	r2,r2,160
   12520:	10800037 	ldwio	r2,0(r2)
   12524:	e0bffa0d 	sth	r2,-24(fp)
   12528:	e0bffa0b 	ldhu	r2,-24(fp)
   1252c:	10800044 	addi	r2,r2,1
   12530:	e0bffa0d 	sth	r2,-24(fp)
   12534:	e0bffa0b 	ldhu	r2,-24(fp)
   12538:	1080010c 	andi	r2,r2,4
   1253c:	1004c03a 	cmpne	r2,r2,zero
   12540:	1000021e 	bne	r2,zero,1254c <alt_read_cfi_width+0x794>
   12544:	00bffb44 	movi	r2,-19
   12548:	e0bff915 	stw	r2,-28(fp)
   1254c:	e0bff917 	ldw	r2,-28(fp)
   12550:	e037883a 	mov	sp,fp
   12554:	dfc00117 	ldw	ra,4(sp)
   12558:	df000017 	ldw	fp,0(sp)
   1255c:	dec00204 	addi	sp,sp,8
   12560:	f800283a 	ret

00012564 <alt_check_primary_table>:
   12564:	defff904 	addi	sp,sp,-28
   12568:	dfc00615 	stw	ra,24(sp)
   1256c:	df000515 	stw	fp,20(sp)
   12570:	dc000415 	stw	r16,16(sp)
   12574:	df000404 	addi	fp,sp,16
   12578:	e13fff15 	stw	r4,-4(fp)
   1257c:	e03ffc15 	stw	zero,-16(fp)
   12580:	e13fff17 	ldw	r4,-4(fp)
   12584:	01400544 	movi	r5,21
   12588:	001175c0 	call	1175c <alt_read_16bit_query_entry>
   1258c:	10ffffcc 	andi	r3,r2,65535
   12590:	e0bfff17 	ldw	r2,-4(fp)
   12594:	10c03215 	stw	r3,200(r2)
   12598:	e03ffd15 	stw	zero,-12(fp)
   1259c:	00001006 	br	125e0 <alt_check_primary_table+0x7c>
   125a0:	e43ffd17 	ldw	r16,-12(fp)
   125a4:	e0bfff17 	ldw	r2,-4(fp)
   125a8:	11803417 	ldw	r6,208(r2)
   125ac:	e0bfff17 	ldw	r2,-4(fp)
   125b0:	10c03217 	ldw	r3,200(r2)
   125b4:	e0bffd17 	ldw	r2,-12(fp)
   125b8:	188b883a 	add	r5,r3,r2
   125bc:	e13fff17 	ldw	r4,-4(fp)
   125c0:	303ee83a 	callr	r6
   125c4:	1007883a 	mov	r3,r2
   125c8:	e0bffe04 	addi	r2,fp,-8
   125cc:	1405883a 	add	r2,r2,r16
   125d0:	10c00005 	stb	r3,0(r2)
   125d4:	e0bffd17 	ldw	r2,-12(fp)
   125d8:	10800044 	addi	r2,r2,1
   125dc:	e0bffd15 	stw	r2,-12(fp)
   125e0:	e0bffd17 	ldw	r2,-12(fp)
   125e4:	108000d0 	cmplti	r2,r2,3
   125e8:	103fed1e 	bne	r2,zero,125a0 <alt_check_primary_table+0x3c>
   125ec:	e0bffe03 	ldbu	r2,-8(fp)
   125f0:	10803fcc 	andi	r2,r2,255
   125f4:	10801418 	cmpnei	r2,r2,80
   125f8:	1000081e 	bne	r2,zero,1261c <alt_check_primary_table+0xb8>
   125fc:	e0bffe43 	ldbu	r2,-7(fp)
   12600:	10803fcc 	andi	r2,r2,255
   12604:	10801498 	cmpnei	r2,r2,82
   12608:	1000041e 	bne	r2,zero,1261c <alt_check_primary_table+0xb8>
   1260c:	e0bffe83 	ldbu	r2,-6(fp)
   12610:	10803fcc 	andi	r2,r2,255
   12614:	10801260 	cmpeqi	r2,r2,73
   12618:	1000021e 	bne	r2,zero,12624 <alt_check_primary_table+0xc0>
   1261c:	00bffb44 	movi	r2,-19
   12620:	e0bffc15 	stw	r2,-16(fp)
   12624:	e0bffc17 	ldw	r2,-16(fp)
   12628:	e037883a 	mov	sp,fp
   1262c:	dfc00217 	ldw	ra,8(sp)
   12630:	df000117 	ldw	fp,4(sp)
   12634:	dc000017 	ldw	r16,0(sp)
   12638:	dec00304 	addi	sp,sp,12
   1263c:	f800283a 	ret

00012640 <altera_avalon_jtag_uart_read_fd>:
   12640:	defffa04 	addi	sp,sp,-24
   12644:	dfc00515 	stw	ra,20(sp)
   12648:	df000415 	stw	fp,16(sp)
   1264c:	df000404 	addi	fp,sp,16
   12650:	e13ffd15 	stw	r4,-12(fp)
   12654:	e17ffe15 	stw	r5,-8(fp)
   12658:	e1bfff15 	stw	r6,-4(fp)
   1265c:	e0bffd17 	ldw	r2,-12(fp)
   12660:	10800017 	ldw	r2,0(r2)
   12664:	e0bffc15 	stw	r2,-16(fp)
   12668:	e0bffc17 	ldw	r2,-16(fp)
   1266c:	11000a04 	addi	r4,r2,40
   12670:	e0bffd17 	ldw	r2,-12(fp)
   12674:	11c00217 	ldw	r7,8(r2)
   12678:	e17ffe17 	ldw	r5,-8(fp)
   1267c:	e1bfff17 	ldw	r6,-4(fp)
   12680:	0012c840 	call	12c84 <altera_avalon_jtag_uart_read>
   12684:	e037883a 	mov	sp,fp
   12688:	dfc00117 	ldw	ra,4(sp)
   1268c:	df000017 	ldw	fp,0(sp)
   12690:	dec00204 	addi	sp,sp,8
   12694:	f800283a 	ret

00012698 <altera_avalon_jtag_uart_write_fd>:
   12698:	defffa04 	addi	sp,sp,-24
   1269c:	dfc00515 	stw	ra,20(sp)
   126a0:	df000415 	stw	fp,16(sp)
   126a4:	df000404 	addi	fp,sp,16
   126a8:	e13ffd15 	stw	r4,-12(fp)
   126ac:	e17ffe15 	stw	r5,-8(fp)
   126b0:	e1bfff15 	stw	r6,-4(fp)
   126b4:	e0bffd17 	ldw	r2,-12(fp)
   126b8:	10800017 	ldw	r2,0(r2)
   126bc:	e0bffc15 	stw	r2,-16(fp)
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	11000a04 	addi	r4,r2,40
   126c8:	e0bffd17 	ldw	r2,-12(fp)
   126cc:	11c00217 	ldw	r7,8(r2)
   126d0:	e17ffe17 	ldw	r5,-8(fp)
   126d4:	e1bfff17 	ldw	r6,-4(fp)
   126d8:	0012ea80 	call	12ea8 <altera_avalon_jtag_uart_write>
   126dc:	e037883a 	mov	sp,fp
   126e0:	dfc00117 	ldw	ra,4(sp)
   126e4:	df000017 	ldw	fp,0(sp)
   126e8:	dec00204 	addi	sp,sp,8
   126ec:	f800283a 	ret

000126f0 <altera_avalon_jtag_uart_close_fd>:
   126f0:	defffc04 	addi	sp,sp,-16
   126f4:	dfc00315 	stw	ra,12(sp)
   126f8:	df000215 	stw	fp,8(sp)
   126fc:	df000204 	addi	fp,sp,8
   12700:	e13fff15 	stw	r4,-4(fp)
   12704:	e0bfff17 	ldw	r2,-4(fp)
   12708:	10800017 	ldw	r2,0(r2)
   1270c:	e0bffe15 	stw	r2,-8(fp)
   12710:	e0bffe17 	ldw	r2,-8(fp)
   12714:	11000a04 	addi	r4,r2,40
   12718:	e0bfff17 	ldw	r2,-4(fp)
   1271c:	11400217 	ldw	r5,8(r2)
   12720:	0012b1c0 	call	12b1c <altera_avalon_jtag_uart_close>
   12724:	e037883a 	mov	sp,fp
   12728:	dfc00117 	ldw	ra,4(sp)
   1272c:	df000017 	ldw	fp,0(sp)
   12730:	dec00204 	addi	sp,sp,8
   12734:	f800283a 	ret

00012738 <altera_avalon_jtag_uart_ioctl_fd>:
   12738:	defffa04 	addi	sp,sp,-24
   1273c:	dfc00515 	stw	ra,20(sp)
   12740:	df000415 	stw	fp,16(sp)
   12744:	df000404 	addi	fp,sp,16
   12748:	e13ffd15 	stw	r4,-12(fp)
   1274c:	e17ffe15 	stw	r5,-8(fp)
   12750:	e1bfff15 	stw	r6,-4(fp)
   12754:	e0bffd17 	ldw	r2,-12(fp)
   12758:	10800017 	ldw	r2,0(r2)
   1275c:	e0bffc15 	stw	r2,-16(fp)
   12760:	e0bffc17 	ldw	r2,-16(fp)
   12764:	11000a04 	addi	r4,r2,40
   12768:	e17ffe17 	ldw	r5,-8(fp)
   1276c:	e1bfff17 	ldw	r6,-4(fp)
   12770:	0012b900 	call	12b90 <altera_avalon_jtag_uart_ioctl>
   12774:	e037883a 	mov	sp,fp
   12778:	dfc00117 	ldw	ra,4(sp)
   1277c:	df000017 	ldw	fp,0(sp)
   12780:	dec00204 	addi	sp,sp,8
   12784:	f800283a 	ret

00012788 <altera_avalon_jtag_uart_init>:
   12788:	defffb04 	addi	sp,sp,-20
   1278c:	dfc00415 	stw	ra,16(sp)
   12790:	df000315 	stw	fp,12(sp)
   12794:	df000304 	addi	fp,sp,12
   12798:	e13ffd15 	stw	r4,-12(fp)
   1279c:	e17ffe15 	stw	r5,-8(fp)
   127a0:	e1bfff15 	stw	r6,-4(fp)
   127a4:	e0fffd17 	ldw	r3,-12(fp)
   127a8:	00800044 	movi	r2,1
   127ac:	18800815 	stw	r2,32(r3)
   127b0:	e0bffd17 	ldw	r2,-12(fp)
   127b4:	10800017 	ldw	r2,0(r2)
   127b8:	11000104 	addi	r4,r2,4
   127bc:	e0bffd17 	ldw	r2,-12(fp)
   127c0:	10800817 	ldw	r2,32(r2)
   127c4:	1007883a 	mov	r3,r2
   127c8:	2005883a 	mov	r2,r4
   127cc:	10c00035 	stwio	r3,0(r2)
   127d0:	e13fff17 	ldw	r4,-4(fp)
   127d4:	e17ffd17 	ldw	r5,-12(fp)
   127d8:	01800074 	movhi	r6,1
   127dc:	318a1004 	addi	r6,r6,10304
   127e0:	00019140 	call	1914 <alt_irq_register>
   127e4:	e0bffd17 	ldw	r2,-12(fp)
   127e8:	10000915 	stw	zero,36(r2)
   127ec:	e0bffd17 	ldw	r2,-12(fp)
   127f0:	11000204 	addi	r4,r2,8
   127f4:	00820034 	movhi	r2,2048
   127f8:	1089f704 	addi	r2,r2,10204
   127fc:	10800017 	ldw	r2,0(r2)
   12800:	100b883a 	mov	r5,r2
   12804:	01800074 	movhi	r6,1
   12808:	318a9b04 	addi	r6,r6,10860
   1280c:	e1fffd17 	ldw	r7,-12(fp)
   12810:	0016a380 	call	16a38 <alt_alarm_start>
   12814:	1004403a 	cmpge	r2,r2,zero
   12818:	1000041e 	bne	r2,zero,1282c <altera_avalon_jtag_uart_init+0xa4>
   1281c:	e0fffd17 	ldw	r3,-12(fp)
   12820:	00a00034 	movhi	r2,32768
   12824:	10bfffc4 	addi	r2,r2,-1
   12828:	18800115 	stw	r2,4(r3)
   1282c:	e037883a 	mov	sp,fp
   12830:	dfc00117 	ldw	ra,4(sp)
   12834:	df000017 	ldw	fp,0(sp)
   12838:	dec00204 	addi	sp,sp,8
   1283c:	f800283a 	ret

00012840 <altera_avalon_jtag_uart_irq>:
   12840:	defff704 	addi	sp,sp,-36
   12844:	df000815 	stw	fp,32(sp)
   12848:	df000804 	addi	fp,sp,32
   1284c:	e13ffe15 	stw	r4,-8(fp)
   12850:	e17fff15 	stw	r5,-4(fp)
   12854:	e0bffe17 	ldw	r2,-8(fp)
   12858:	e0bffd15 	stw	r2,-12(fp)
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	10800017 	ldw	r2,0(r2)
   12864:	e0bffc15 	stw	r2,-16(fp)
   12868:	00000006 	br	1286c <altera_avalon_jtag_uart_irq+0x2c>
   1286c:	e0bffc17 	ldw	r2,-16(fp)
   12870:	10800104 	addi	r2,r2,4
   12874:	10800037 	ldwio	r2,0(r2)
   12878:	e0bffb15 	stw	r2,-20(fp)
   1287c:	e0bffb17 	ldw	r2,-20(fp)
   12880:	1080c00c 	andi	r2,r2,768
   12884:	1005003a 	cmpeq	r2,r2,zero
   12888:	1000741e 	bne	r2,zero,12a5c <altera_avalon_jtag_uart_irq+0x21c>
   1288c:	e0bffb17 	ldw	r2,-20(fp)
   12890:	1080400c 	andi	r2,r2,256
   12894:	1005003a 	cmpeq	r2,r2,zero
   12898:	1000351e 	bne	r2,zero,12970 <altera_avalon_jtag_uart_irq+0x130>
   1289c:	00800074 	movhi	r2,1
   128a0:	e0bffa15 	stw	r2,-24(fp)
   128a4:	e0bffd17 	ldw	r2,-12(fp)
   128a8:	10800a17 	ldw	r2,40(r2)
   128ac:	10800044 	addi	r2,r2,1
   128b0:	1081ffcc 	andi	r2,r2,2047
   128b4:	e0bff915 	stw	r2,-28(fp)
   128b8:	e0bffd17 	ldw	r2,-12(fp)
   128bc:	10c00b17 	ldw	r3,44(r2)
   128c0:	e0bff917 	ldw	r2,-28(fp)
   128c4:	18801626 	beq	r3,r2,12920 <altera_avalon_jtag_uart_irq+0xe0>
   128c8:	e0bffc17 	ldw	r2,-16(fp)
   128cc:	10800037 	ldwio	r2,0(r2)
   128d0:	e0bffa15 	stw	r2,-24(fp)
   128d4:	e0bffa17 	ldw	r2,-24(fp)
   128d8:	10a0000c 	andi	r2,r2,32768
   128dc:	1005003a 	cmpeq	r2,r2,zero
   128e0:	10000f1e 	bne	r2,zero,12920 <altera_avalon_jtag_uart_irq+0xe0>
   128e4:	e0bffd17 	ldw	r2,-12(fp)
   128e8:	10c00a17 	ldw	r3,40(r2)
   128ec:	e0bffa17 	ldw	r2,-24(fp)
   128f0:	1009883a 	mov	r4,r2
   128f4:	e0bffd17 	ldw	r2,-12(fp)
   128f8:	1885883a 	add	r2,r3,r2
   128fc:	10800e04 	addi	r2,r2,56
   12900:	11000005 	stb	r4,0(r2)
   12904:	e0bffd17 	ldw	r2,-12(fp)
   12908:	10800a17 	ldw	r2,40(r2)
   1290c:	10800044 	addi	r2,r2,1
   12910:	10c1ffcc 	andi	r3,r2,2047
   12914:	e0bffd17 	ldw	r2,-12(fp)
   12918:	10c00a15 	stw	r3,40(r2)
   1291c:	003fe106 	br	128a4 <altera_avalon_jtag_uart_irq+0x64>
   12920:	e0bffa17 	ldw	r2,-24(fp)
   12924:	10bfffec 	andhi	r2,r2,65535
   12928:	1005003a 	cmpeq	r2,r2,zero
   1292c:	1000101e 	bne	r2,zero,12970 <altera_avalon_jtag_uart_irq+0x130>
   12930:	e0bffd17 	ldw	r2,-12(fp)
   12934:	10c00817 	ldw	r3,32(r2)
   12938:	00bfff84 	movi	r2,-2
   1293c:	1886703a 	and	r3,r3,r2
   12940:	e0bffd17 	ldw	r2,-12(fp)
   12944:	10c00815 	stw	r3,32(r2)
   12948:	e0bffc17 	ldw	r2,-16(fp)
   1294c:	11000104 	addi	r4,r2,4
   12950:	e0bffd17 	ldw	r2,-12(fp)
   12954:	10800817 	ldw	r2,32(r2)
   12958:	1007883a 	mov	r3,r2
   1295c:	2005883a 	mov	r2,r4
   12960:	10c00035 	stwio	r3,0(r2)
   12964:	e0bffc17 	ldw	r2,-16(fp)
   12968:	10800104 	addi	r2,r2,4
   1296c:	10800037 	ldwio	r2,0(r2)
   12970:	e0bffb17 	ldw	r2,-20(fp)
   12974:	1080800c 	andi	r2,r2,512
   12978:	1005003a 	cmpeq	r2,r2,zero
   1297c:	103fbb1e 	bne	r2,zero,1286c <altera_avalon_jtag_uart_irq+0x2c>
   12980:	e0bffb17 	ldw	r2,-20(fp)
   12984:	10bfffec 	andhi	r2,r2,65535
   12988:	1004d43a 	srli	r2,r2,16
   1298c:	e0bff815 	stw	r2,-32(fp)
   12990:	00001506 	br	129e8 <altera_avalon_jtag_uart_irq+0x1a8>
   12994:	e13ffc17 	ldw	r4,-16(fp)
   12998:	e0bffd17 	ldw	r2,-12(fp)
   1299c:	10c00d17 	ldw	r3,52(r2)
   129a0:	e0bffd17 	ldw	r2,-12(fp)
   129a4:	1885883a 	add	r2,r3,r2
   129a8:	10820e04 	addi	r2,r2,2104
   129ac:	10800003 	ldbu	r2,0(r2)
   129b0:	10c03fcc 	andi	r3,r2,255
   129b4:	18c0201c 	xori	r3,r3,128
   129b8:	18ffe004 	addi	r3,r3,-128
   129bc:	2005883a 	mov	r2,r4
   129c0:	10c00035 	stwio	r3,0(r2)
   129c4:	e0bffd17 	ldw	r2,-12(fp)
   129c8:	10800d17 	ldw	r2,52(r2)
   129cc:	10800044 	addi	r2,r2,1
   129d0:	10c1ffcc 	andi	r3,r2,2047
   129d4:	e0bffd17 	ldw	r2,-12(fp)
   129d8:	10c00d15 	stw	r3,52(r2)
   129dc:	e0bff817 	ldw	r2,-32(fp)
   129e0:	10bfffc4 	addi	r2,r2,-1
   129e4:	e0bff815 	stw	r2,-32(fp)
   129e8:	e0bff817 	ldw	r2,-32(fp)
   129ec:	1005003a 	cmpeq	r2,r2,zero
   129f0:	1000051e 	bne	r2,zero,12a08 <altera_avalon_jtag_uart_irq+0x1c8>
   129f4:	e0bffd17 	ldw	r2,-12(fp)
   129f8:	10c00d17 	ldw	r3,52(r2)
   129fc:	e0bffd17 	ldw	r2,-12(fp)
   12a00:	10800c17 	ldw	r2,48(r2)
   12a04:	18bfe31e 	bne	r3,r2,12994 <altera_avalon_jtag_uart_irq+0x154>
   12a08:	e0bff817 	ldw	r2,-32(fp)
   12a0c:	1005003a 	cmpeq	r2,r2,zero
   12a10:	103f961e 	bne	r2,zero,1286c <altera_avalon_jtag_uart_irq+0x2c>
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	10c00817 	ldw	r3,32(r2)
   12a1c:	00bfff44 	movi	r2,-3
   12a20:	1886703a 	and	r3,r3,r2
   12a24:	e0bffd17 	ldw	r2,-12(fp)
   12a28:	10c00815 	stw	r3,32(r2)
   12a2c:	e0bffd17 	ldw	r2,-12(fp)
   12a30:	10800017 	ldw	r2,0(r2)
   12a34:	11000104 	addi	r4,r2,4
   12a38:	e0bffd17 	ldw	r2,-12(fp)
   12a3c:	10800817 	ldw	r2,32(r2)
   12a40:	1007883a 	mov	r3,r2
   12a44:	2005883a 	mov	r2,r4
   12a48:	10c00035 	stwio	r3,0(r2)
   12a4c:	e0bffc17 	ldw	r2,-16(fp)
   12a50:	10800104 	addi	r2,r2,4
   12a54:	10800037 	ldwio	r2,0(r2)
   12a58:	003f8406 	br	1286c <altera_avalon_jtag_uart_irq+0x2c>
   12a5c:	e037883a 	mov	sp,fp
   12a60:	df000017 	ldw	fp,0(sp)
   12a64:	dec00104 	addi	sp,sp,4
   12a68:	f800283a 	ret

00012a6c <altera_avalon_jtag_uart_timeout>:
   12a6c:	defffc04 	addi	sp,sp,-16
   12a70:	df000315 	stw	fp,12(sp)
   12a74:	df000304 	addi	fp,sp,12
   12a78:	e13fff15 	stw	r4,-4(fp)
   12a7c:	e0bfff17 	ldw	r2,-4(fp)
   12a80:	e0bffe15 	stw	r2,-8(fp)
   12a84:	e0bffe17 	ldw	r2,-8(fp)
   12a88:	10800017 	ldw	r2,0(r2)
   12a8c:	10800104 	addi	r2,r2,4
   12a90:	10800037 	ldwio	r2,0(r2)
   12a94:	e0bffd15 	stw	r2,-12(fp)
   12a98:	e0bffd17 	ldw	r2,-12(fp)
   12a9c:	1081000c 	andi	r2,r2,1024
   12aa0:	1005003a 	cmpeq	r2,r2,zero
   12aa4:	10000c1e 	bne	r2,zero,12ad8 <altera_avalon_jtag_uart_timeout+0x6c>
   12aa8:	e0bffe17 	ldw	r2,-8(fp)
   12aac:	10800017 	ldw	r2,0(r2)
   12ab0:	11000104 	addi	r4,r2,4
   12ab4:	e0bffe17 	ldw	r2,-8(fp)
   12ab8:	10800817 	ldw	r2,32(r2)
   12abc:	10810014 	ori	r2,r2,1024
   12ac0:	1007883a 	mov	r3,r2
   12ac4:	2005883a 	mov	r2,r4
   12ac8:	10c00035 	stwio	r3,0(r2)
   12acc:	e0bffe17 	ldw	r2,-8(fp)
   12ad0:	10000915 	stw	zero,36(r2)
   12ad4:	00000a06 	br	12b00 <altera_avalon_jtag_uart_timeout+0x94>
   12ad8:	e0bffe17 	ldw	r2,-8(fp)
   12adc:	10c00917 	ldw	r3,36(r2)
   12ae0:	00a00034 	movhi	r2,32768
   12ae4:	10bfff04 	addi	r2,r2,-4
   12ae8:	10c00536 	bltu	r2,r3,12b00 <altera_avalon_jtag_uart_timeout+0x94>
   12aec:	e0bffe17 	ldw	r2,-8(fp)
   12af0:	10800917 	ldw	r2,36(r2)
   12af4:	10c00044 	addi	r3,r2,1
   12af8:	e0bffe17 	ldw	r2,-8(fp)
   12afc:	10c00915 	stw	r3,36(r2)
   12b00:	00820034 	movhi	r2,2048
   12b04:	1089f704 	addi	r2,r2,10204
   12b08:	10800017 	ldw	r2,0(r2)
   12b0c:	e037883a 	mov	sp,fp
   12b10:	df000017 	ldw	fp,0(sp)
   12b14:	dec00104 	addi	sp,sp,4
   12b18:	f800283a 	ret

00012b1c <altera_avalon_jtag_uart_close>:
   12b1c:	defffc04 	addi	sp,sp,-16
   12b20:	df000315 	stw	fp,12(sp)
   12b24:	df000304 	addi	fp,sp,12
   12b28:	e13ffd15 	stw	r4,-12(fp)
   12b2c:	e17ffe15 	stw	r5,-8(fp)
   12b30:	00000706 	br	12b50 <altera_avalon_jtag_uart_close+0x34>
   12b34:	e0bffe17 	ldw	r2,-8(fp)
   12b38:	1090000c 	andi	r2,r2,16384
   12b3c:	1005003a 	cmpeq	r2,r2,zero
   12b40:	1000031e 	bne	r2,zero,12b50 <altera_avalon_jtag_uart_close+0x34>
   12b44:	00bffd44 	movi	r2,-11
   12b48:	e0bfff15 	stw	r2,-4(fp)
   12b4c:	00000b06 	br	12b7c <altera_avalon_jtag_uart_close+0x60>
   12b50:	e0bffd17 	ldw	r2,-12(fp)
   12b54:	10c00d17 	ldw	r3,52(r2)
   12b58:	e0bffd17 	ldw	r2,-12(fp)
   12b5c:	10800c17 	ldw	r2,48(r2)
   12b60:	18800526 	beq	r3,r2,12b78 <altera_avalon_jtag_uart_close+0x5c>
   12b64:	e0bffd17 	ldw	r2,-12(fp)
   12b68:	10c00917 	ldw	r3,36(r2)
   12b6c:	e0bffd17 	ldw	r2,-12(fp)
   12b70:	10800117 	ldw	r2,4(r2)
   12b74:	18bfef36 	bltu	r3,r2,12b34 <altera_avalon_jtag_uart_close+0x18>
   12b78:	e03fff15 	stw	zero,-4(fp)
   12b7c:	e0bfff17 	ldw	r2,-4(fp)
   12b80:	e037883a 	mov	sp,fp
   12b84:	df000017 	ldw	fp,0(sp)
   12b88:	dec00104 	addi	sp,sp,4
   12b8c:	f800283a 	ret

00012b90 <altera_avalon_jtag_uart_ioctl>:
   12b90:	defff804 	addi	sp,sp,-32
   12b94:	df000715 	stw	fp,28(sp)
   12b98:	df000704 	addi	fp,sp,28
   12b9c:	e13ffb15 	stw	r4,-20(fp)
   12ba0:	e17ffc15 	stw	r5,-16(fp)
   12ba4:	e1bffd15 	stw	r6,-12(fp)
   12ba8:	00bff9c4 	movi	r2,-25
   12bac:	e0bffa15 	stw	r2,-24(fp)
   12bb0:	e0bffc17 	ldw	r2,-16(fp)
   12bb4:	e0bfff15 	stw	r2,-4(fp)
   12bb8:	e0ffff17 	ldw	r3,-4(fp)
   12bbc:	189a8060 	cmpeqi	r2,r3,27137
   12bc0:	1000041e 	bne	r2,zero,12bd4 <altera_avalon_jtag_uart_ioctl+0x44>
   12bc4:	e0ffff17 	ldw	r3,-4(fp)
   12bc8:	189a80a0 	cmpeqi	r2,r3,27138
   12bcc:	10001b1e 	bne	r2,zero,12c3c <altera_avalon_jtag_uart_ioctl+0xac>
   12bd0:	00002706 	br	12c70 <altera_avalon_jtag_uart_ioctl+0xe0>
   12bd4:	e0bffb17 	ldw	r2,-20(fp)
   12bd8:	10c00117 	ldw	r3,4(r2)
   12bdc:	00a00034 	movhi	r2,32768
   12be0:	10bfffc4 	addi	r2,r2,-1
   12be4:	18802226 	beq	r3,r2,12c70 <altera_avalon_jtag_uart_ioctl+0xe0>
   12be8:	e0bffd17 	ldw	r2,-12(fp)
   12bec:	10800017 	ldw	r2,0(r2)
   12bf0:	e0bff915 	stw	r2,-28(fp)
   12bf4:	e0bff917 	ldw	r2,-28(fp)
   12bf8:	10800090 	cmplti	r2,r2,2
   12bfc:	1000071e 	bne	r2,zero,12c1c <altera_avalon_jtag_uart_ioctl+0x8c>
   12c00:	e0fff917 	ldw	r3,-28(fp)
   12c04:	00a00034 	movhi	r2,32768
   12c08:	10bfffc4 	addi	r2,r2,-1
   12c0c:	18800326 	beq	r3,r2,12c1c <altera_avalon_jtag_uart_ioctl+0x8c>
   12c10:	e0bff917 	ldw	r2,-28(fp)
   12c14:	e0bffe15 	stw	r2,-8(fp)
   12c18:	00000306 	br	12c28 <altera_avalon_jtag_uart_ioctl+0x98>
   12c1c:	00e00034 	movhi	r3,32768
   12c20:	18ffff84 	addi	r3,r3,-2
   12c24:	e0fffe15 	stw	r3,-8(fp)
   12c28:	e0bffb17 	ldw	r2,-20(fp)
   12c2c:	e0fffe17 	ldw	r3,-8(fp)
   12c30:	10c00115 	stw	r3,4(r2)
   12c34:	e03ffa15 	stw	zero,-24(fp)
   12c38:	00000d06 	br	12c70 <altera_avalon_jtag_uart_ioctl+0xe0>
   12c3c:	e0bffb17 	ldw	r2,-20(fp)
   12c40:	10c00117 	ldw	r3,4(r2)
   12c44:	00a00034 	movhi	r2,32768
   12c48:	10bfffc4 	addi	r2,r2,-1
   12c4c:	18800826 	beq	r3,r2,12c70 <altera_avalon_jtag_uart_ioctl+0xe0>
   12c50:	e13ffd17 	ldw	r4,-12(fp)
   12c54:	e0bffb17 	ldw	r2,-20(fp)
   12c58:	10c00917 	ldw	r3,36(r2)
   12c5c:	e0bffb17 	ldw	r2,-20(fp)
   12c60:	10800117 	ldw	r2,4(r2)
   12c64:	1885803a 	cmpltu	r2,r3,r2
   12c68:	20800015 	stw	r2,0(r4)
   12c6c:	e03ffa15 	stw	zero,-24(fp)
   12c70:	e0bffa17 	ldw	r2,-24(fp)
   12c74:	e037883a 	mov	sp,fp
   12c78:	df000017 	ldw	fp,0(sp)
   12c7c:	dec00104 	addi	sp,sp,4
   12c80:	f800283a 	ret

00012c84 <altera_avalon_jtag_uart_read>:
   12c84:	defff204 	addi	sp,sp,-56
   12c88:	dfc00d15 	stw	ra,52(sp)
   12c8c:	df000c15 	stw	fp,48(sp)
   12c90:	df000c04 	addi	fp,sp,48
   12c94:	e13ffb15 	stw	r4,-20(fp)
   12c98:	e17ffc15 	stw	r5,-16(fp)
   12c9c:	e1bffd15 	stw	r6,-12(fp)
   12ca0:	e1fffe15 	stw	r7,-8(fp)
   12ca4:	e0bffc17 	ldw	r2,-16(fp)
   12ca8:	e0bffa15 	stw	r2,-24(fp)
   12cac:	00004806 	br	12dd0 <altera_avalon_jtag_uart_read+0x14c>
   12cb0:	e0bffb17 	ldw	r2,-20(fp)
   12cb4:	10800a17 	ldw	r2,40(r2)
   12cb8:	e0bff715 	stw	r2,-36(fp)
   12cbc:	e0bffb17 	ldw	r2,-20(fp)
   12cc0:	10800b17 	ldw	r2,44(r2)
   12cc4:	e0bff615 	stw	r2,-40(fp)
   12cc8:	e0fff717 	ldw	r3,-36(fp)
   12ccc:	e0bff617 	ldw	r2,-40(fp)
   12cd0:	18800536 	bltu	r3,r2,12ce8 <altera_avalon_jtag_uart_read+0x64>
   12cd4:	e0bff717 	ldw	r2,-36(fp)
   12cd8:	e0fff617 	ldw	r3,-40(fp)
   12cdc:	10c5c83a 	sub	r2,r2,r3
   12ce0:	e0bff815 	stw	r2,-32(fp)
   12ce4:	00000406 	br	12cf8 <altera_avalon_jtag_uart_read+0x74>
   12ce8:	00820004 	movi	r2,2048
   12cec:	e0fff617 	ldw	r3,-40(fp)
   12cf0:	10c5c83a 	sub	r2,r2,r3
   12cf4:	e0bff815 	stw	r2,-32(fp)
   12cf8:	e0bff817 	ldw	r2,-32(fp)
   12cfc:	1005003a 	cmpeq	r2,r2,zero
   12d00:	10001f1e 	bne	r2,zero,12d80 <altera_avalon_jtag_uart_read+0xfc>
   12d04:	e0fffd17 	ldw	r3,-12(fp)
   12d08:	e0bff817 	ldw	r2,-32(fp)
   12d0c:	1880022e 	bgeu	r3,r2,12d18 <altera_avalon_jtag_uart_read+0x94>
   12d10:	e0bffd17 	ldw	r2,-12(fp)
   12d14:	e0bff815 	stw	r2,-32(fp)
   12d18:	e0bffb17 	ldw	r2,-20(fp)
   12d1c:	10c00e04 	addi	r3,r2,56
   12d20:	e0bff617 	ldw	r2,-40(fp)
   12d24:	1887883a 	add	r3,r3,r2
   12d28:	e0bffa17 	ldw	r2,-24(fp)
   12d2c:	1009883a 	mov	r4,r2
   12d30:	180b883a 	mov	r5,r3
   12d34:	e1bff817 	ldw	r6,-32(fp)
   12d38:	00073240 	call	7324 <memcpy>
   12d3c:	e0fff817 	ldw	r3,-32(fp)
   12d40:	e0bffa17 	ldw	r2,-24(fp)
   12d44:	10c5883a 	add	r2,r2,r3
   12d48:	e0bffa15 	stw	r2,-24(fp)
   12d4c:	e0fffd17 	ldw	r3,-12(fp)
   12d50:	e0bff817 	ldw	r2,-32(fp)
   12d54:	1885c83a 	sub	r2,r3,r2
   12d58:	e0bffd15 	stw	r2,-12(fp)
   12d5c:	e0fff617 	ldw	r3,-40(fp)
   12d60:	e0bff817 	ldw	r2,-32(fp)
   12d64:	1885883a 	add	r2,r3,r2
   12d68:	10c1ffcc 	andi	r3,r2,2047
   12d6c:	e0bffb17 	ldw	r2,-20(fp)
   12d70:	10c00b15 	stw	r3,44(r2)
   12d74:	e0bffd17 	ldw	r2,-12(fp)
   12d78:	10800048 	cmpgei	r2,r2,1
   12d7c:	103fcc1e 	bne	r2,zero,12cb0 <altera_avalon_jtag_uart_read+0x2c>
   12d80:	e0fffa17 	ldw	r3,-24(fp)
   12d84:	e0bffc17 	ldw	r2,-16(fp)
   12d88:	1880141e 	bne	r3,r2,12ddc <altera_avalon_jtag_uart_read+0x158>
   12d8c:	e0bffe17 	ldw	r2,-8(fp)
   12d90:	1090000c 	andi	r2,r2,16384
   12d94:	1004c03a 	cmpne	r2,r2,zero
   12d98:	1000101e 	bne	r2,zero,12ddc <altera_avalon_jtag_uart_read+0x158>
   12d9c:	e0bffb17 	ldw	r2,-20(fp)
   12da0:	10c00a17 	ldw	r3,40(r2)
   12da4:	e0bff717 	ldw	r2,-36(fp)
   12da8:	1880051e 	bne	r3,r2,12dc0 <altera_avalon_jtag_uart_read+0x13c>
   12dac:	e0bffb17 	ldw	r2,-20(fp)
   12db0:	10c00917 	ldw	r3,36(r2)
   12db4:	e0bffb17 	ldw	r2,-20(fp)
   12db8:	10800117 	ldw	r2,4(r2)
   12dbc:	18bff736 	bltu	r3,r2,12d9c <altera_avalon_jtag_uart_read+0x118>
   12dc0:	e0bffb17 	ldw	r2,-20(fp)
   12dc4:	10c00a17 	ldw	r3,40(r2)
   12dc8:	e0bff717 	ldw	r2,-36(fp)
   12dcc:	18800326 	beq	r3,r2,12ddc <altera_avalon_jtag_uart_read+0x158>
   12dd0:	e0bffd17 	ldw	r2,-12(fp)
   12dd4:	10800048 	cmpgei	r2,r2,1
   12dd8:	103fb51e 	bne	r2,zero,12cb0 <altera_avalon_jtag_uart_read+0x2c>
   12ddc:	e0fffa17 	ldw	r3,-24(fp)
   12de0:	e0bffc17 	ldw	r2,-16(fp)
   12de4:	18801926 	beq	r3,r2,12e4c <altera_avalon_jtag_uart_read+0x1c8>
   12de8:	0005303a 	rdctl	r2,status
   12dec:	e0bff515 	stw	r2,-44(fp)
   12df0:	e0fff517 	ldw	r3,-44(fp)
   12df4:	00bfff84 	movi	r2,-2
   12df8:	1884703a 	and	r2,r3,r2
   12dfc:	1001703a 	wrctl	status,r2
   12e00:	e0bff517 	ldw	r2,-44(fp)
   12e04:	e0bff915 	stw	r2,-28(fp)
   12e08:	e0bffb17 	ldw	r2,-20(fp)
   12e0c:	10800817 	ldw	r2,32(r2)
   12e10:	10c00054 	ori	r3,r2,1
   12e14:	e0bffb17 	ldw	r2,-20(fp)
   12e18:	10c00815 	stw	r3,32(r2)
   12e1c:	e0bffb17 	ldw	r2,-20(fp)
   12e20:	10800017 	ldw	r2,0(r2)
   12e24:	11000104 	addi	r4,r2,4
   12e28:	e0bffb17 	ldw	r2,-20(fp)
   12e2c:	10800817 	ldw	r2,32(r2)
   12e30:	1007883a 	mov	r3,r2
   12e34:	2005883a 	mov	r2,r4
   12e38:	10c00035 	stwio	r3,0(r2)
   12e3c:	e0bff917 	ldw	r2,-28(fp)
   12e40:	e0bff415 	stw	r2,-48(fp)
   12e44:	e0bff417 	ldw	r2,-48(fp)
   12e48:	1001703a 	wrctl	status,r2
   12e4c:	e0fffa17 	ldw	r3,-24(fp)
   12e50:	e0bffc17 	ldw	r2,-16(fp)
   12e54:	18800526 	beq	r3,r2,12e6c <altera_avalon_jtag_uart_read+0x1e8>
   12e58:	e0fffa17 	ldw	r3,-24(fp)
   12e5c:	e0bffc17 	ldw	r2,-16(fp)
   12e60:	1887c83a 	sub	r3,r3,r2
   12e64:	e0ffff15 	stw	r3,-4(fp)
   12e68:	00000906 	br	12e90 <altera_avalon_jtag_uart_read+0x20c>
   12e6c:	e0bffe17 	ldw	r2,-8(fp)
   12e70:	1090000c 	andi	r2,r2,16384
   12e74:	1005003a 	cmpeq	r2,r2,zero
   12e78:	1000031e 	bne	r2,zero,12e88 <altera_avalon_jtag_uart_read+0x204>
   12e7c:	00bffd44 	movi	r2,-11
   12e80:	e0bfff15 	stw	r2,-4(fp)
   12e84:	00000206 	br	12e90 <altera_avalon_jtag_uart_read+0x20c>
   12e88:	00bffec4 	movi	r2,-5
   12e8c:	e0bfff15 	stw	r2,-4(fp)
   12e90:	e0bfff17 	ldw	r2,-4(fp)
   12e94:	e037883a 	mov	sp,fp
   12e98:	dfc00117 	ldw	ra,4(sp)
   12e9c:	df000017 	ldw	fp,0(sp)
   12ea0:	dec00204 	addi	sp,sp,8
   12ea4:	f800283a 	ret

00012ea8 <altera_avalon_jtag_uart_write>:
   12ea8:	defff204 	addi	sp,sp,-56
   12eac:	dfc00d15 	stw	ra,52(sp)
   12eb0:	df000c15 	stw	fp,48(sp)
   12eb4:	df000c04 	addi	fp,sp,48
   12eb8:	e13ffb15 	stw	r4,-20(fp)
   12ebc:	e17ffc15 	stw	r5,-16(fp)
   12ec0:	e1bffd15 	stw	r6,-12(fp)
   12ec4:	e1fffe15 	stw	r7,-8(fp)
   12ec8:	e03ff915 	stw	zero,-28(fp)
   12ecc:	e0bffc17 	ldw	r2,-16(fp)
   12ed0:	e0bff615 	stw	r2,-40(fp)
   12ed4:	00003a06 	br	12fc0 <altera_avalon_jtag_uart_write+0x118>
   12ed8:	e0bffb17 	ldw	r2,-20(fp)
   12edc:	10800c17 	ldw	r2,48(r2)
   12ee0:	e0bffa15 	stw	r2,-24(fp)
   12ee4:	e0bffb17 	ldw	r2,-20(fp)
   12ee8:	10800d17 	ldw	r2,52(r2)
   12eec:	e0bff915 	stw	r2,-28(fp)
   12ef0:	e0fffa17 	ldw	r3,-24(fp)
   12ef4:	e0bff917 	ldw	r2,-28(fp)
   12ef8:	1880062e 	bgeu	r3,r2,12f14 <altera_avalon_jtag_uart_write+0x6c>
   12efc:	e0fff917 	ldw	r3,-28(fp)
   12f00:	e0bffa17 	ldw	r2,-24(fp)
   12f04:	1885c83a 	sub	r2,r3,r2
   12f08:	10bfffc4 	addi	r2,r2,-1
   12f0c:	e0bff815 	stw	r2,-32(fp)
   12f10:	00000c06 	br	12f44 <altera_avalon_jtag_uart_write+0x9c>
   12f14:	e0bff917 	ldw	r2,-28(fp)
   12f18:	1005003a 	cmpeq	r2,r2,zero
   12f1c:	1000051e 	bne	r2,zero,12f34 <altera_avalon_jtag_uart_write+0x8c>
   12f20:	00820004 	movi	r2,2048
   12f24:	e0fffa17 	ldw	r3,-24(fp)
   12f28:	10c5c83a 	sub	r2,r2,r3
   12f2c:	e0bff815 	stw	r2,-32(fp)
   12f30:	00000406 	br	12f44 <altera_avalon_jtag_uart_write+0x9c>
   12f34:	0081ffc4 	movi	r2,2047
   12f38:	e0fffa17 	ldw	r3,-24(fp)
   12f3c:	10c5c83a 	sub	r2,r2,r3
   12f40:	e0bff815 	stw	r2,-32(fp)
   12f44:	e0bff817 	ldw	r2,-32(fp)
   12f48:	1005003a 	cmpeq	r2,r2,zero
   12f4c:	10001f1e 	bne	r2,zero,12fcc <altera_avalon_jtag_uart_write+0x124>
   12f50:	e0fffd17 	ldw	r3,-12(fp)
   12f54:	e0bff817 	ldw	r2,-32(fp)
   12f58:	1880022e 	bgeu	r3,r2,12f64 <altera_avalon_jtag_uart_write+0xbc>
   12f5c:	e0bffd17 	ldw	r2,-12(fp)
   12f60:	e0bff815 	stw	r2,-32(fp)
   12f64:	e0bffb17 	ldw	r2,-20(fp)
   12f68:	10c20e04 	addi	r3,r2,2104
   12f6c:	e0bffa17 	ldw	r2,-24(fp)
   12f70:	1885883a 	add	r2,r3,r2
   12f74:	e0fffc17 	ldw	r3,-16(fp)
   12f78:	1009883a 	mov	r4,r2
   12f7c:	180b883a 	mov	r5,r3
   12f80:	e1bff817 	ldw	r6,-32(fp)
   12f84:	00073240 	call	7324 <memcpy>
   12f88:	e0fff817 	ldw	r3,-32(fp)
   12f8c:	e0bffc17 	ldw	r2,-16(fp)
   12f90:	10c5883a 	add	r2,r2,r3
   12f94:	e0bffc15 	stw	r2,-16(fp)
   12f98:	e0fffd17 	ldw	r3,-12(fp)
   12f9c:	e0bff817 	ldw	r2,-32(fp)
   12fa0:	1885c83a 	sub	r2,r3,r2
   12fa4:	e0bffd15 	stw	r2,-12(fp)
   12fa8:	e0fffa17 	ldw	r3,-24(fp)
   12fac:	e0bff817 	ldw	r2,-32(fp)
   12fb0:	1885883a 	add	r2,r3,r2
   12fb4:	10c1ffcc 	andi	r3,r2,2047
   12fb8:	e0bffb17 	ldw	r2,-20(fp)
   12fbc:	10c00c15 	stw	r3,48(r2)
   12fc0:	e0bffd17 	ldw	r2,-12(fp)
   12fc4:	10800048 	cmpgei	r2,r2,1
   12fc8:	103fc31e 	bne	r2,zero,12ed8 <altera_avalon_jtag_uart_write+0x30>
   12fcc:	0005303a 	rdctl	r2,status
   12fd0:	e0bff515 	stw	r2,-44(fp)
   12fd4:	e0fff517 	ldw	r3,-44(fp)
   12fd8:	00bfff84 	movi	r2,-2
   12fdc:	1884703a 	and	r2,r3,r2
   12fe0:	1001703a 	wrctl	status,r2
   12fe4:	e0bff517 	ldw	r2,-44(fp)
   12fe8:	e0bff715 	stw	r2,-36(fp)
   12fec:	e0bffb17 	ldw	r2,-20(fp)
   12ff0:	10800817 	ldw	r2,32(r2)
   12ff4:	10c00094 	ori	r3,r2,2
   12ff8:	e0bffb17 	ldw	r2,-20(fp)
   12ffc:	10c00815 	stw	r3,32(r2)
   13000:	e0bffb17 	ldw	r2,-20(fp)
   13004:	10800017 	ldw	r2,0(r2)
   13008:	11000104 	addi	r4,r2,4
   1300c:	e0bffb17 	ldw	r2,-20(fp)
   13010:	10800817 	ldw	r2,32(r2)
   13014:	1007883a 	mov	r3,r2
   13018:	2005883a 	mov	r2,r4
   1301c:	10c00035 	stwio	r3,0(r2)
   13020:	e0bff717 	ldw	r2,-36(fp)
   13024:	e0bff415 	stw	r2,-48(fp)
   13028:	e0bff417 	ldw	r2,-48(fp)
   1302c:	1001703a 	wrctl	status,r2
   13030:	e0bffd17 	ldw	r2,-12(fp)
   13034:	10800050 	cmplti	r2,r2,1
   13038:	1000111e 	bne	r2,zero,13080 <altera_avalon_jtag_uart_write+0x1d8>
   1303c:	e0bffe17 	ldw	r2,-8(fp)
   13040:	1090000c 	andi	r2,r2,16384
   13044:	1004c03a 	cmpne	r2,r2,zero
   13048:	1000101e 	bne	r2,zero,1308c <altera_avalon_jtag_uart_write+0x1e4>
   1304c:	e0bffb17 	ldw	r2,-20(fp)
   13050:	10c00d17 	ldw	r3,52(r2)
   13054:	e0bff917 	ldw	r2,-28(fp)
   13058:	1880051e 	bne	r3,r2,13070 <altera_avalon_jtag_uart_write+0x1c8>
   1305c:	e0bffb17 	ldw	r2,-20(fp)
   13060:	10c00917 	ldw	r3,36(r2)
   13064:	e0bffb17 	ldw	r2,-20(fp)
   13068:	10800117 	ldw	r2,4(r2)
   1306c:	18bff736 	bltu	r3,r2,1304c <altera_avalon_jtag_uart_write+0x1a4>
   13070:	e0bffb17 	ldw	r2,-20(fp)
   13074:	10c00d17 	ldw	r3,52(r2)
   13078:	e0bff917 	ldw	r2,-28(fp)
   1307c:	18800326 	beq	r3,r2,1308c <altera_avalon_jtag_uart_write+0x1e4>
   13080:	e0bffd17 	ldw	r2,-12(fp)
   13084:	10800048 	cmpgei	r2,r2,1
   13088:	103fcd1e 	bne	r2,zero,12fc0 <altera_avalon_jtag_uart_write+0x118>
   1308c:	e0fffc17 	ldw	r3,-16(fp)
   13090:	e0bff617 	ldw	r2,-40(fp)
   13094:	18800526 	beq	r3,r2,130ac <altera_avalon_jtag_uart_write+0x204>
   13098:	e0fffc17 	ldw	r3,-16(fp)
   1309c:	e0bff617 	ldw	r2,-40(fp)
   130a0:	1887c83a 	sub	r3,r3,r2
   130a4:	e0ffff15 	stw	r3,-4(fp)
   130a8:	00000906 	br	130d0 <altera_avalon_jtag_uart_write+0x228>
   130ac:	e0bffe17 	ldw	r2,-8(fp)
   130b0:	1090000c 	andi	r2,r2,16384
   130b4:	1005003a 	cmpeq	r2,r2,zero
   130b8:	1000031e 	bne	r2,zero,130c8 <altera_avalon_jtag_uart_write+0x220>
   130bc:	00bffd44 	movi	r2,-11
   130c0:	e0bfff15 	stw	r2,-4(fp)
   130c4:	00000206 	br	130d0 <altera_avalon_jtag_uart_write+0x228>
   130c8:	00bffec4 	movi	r2,-5
   130cc:	e0bfff15 	stw	r2,-4(fp)
   130d0:	e0bfff17 	ldw	r2,-4(fp)
   130d4:	e037883a 	mov	sp,fp
   130d8:	dfc00117 	ldw	ra,4(sp)
   130dc:	df000017 	ldw	fp,0(sp)
   130e0:	dec00204 	addi	sp,sp,8
   130e4:	f800283a 	ret

000130e8 <lcd_write_command>:
   130e8:	defffa04 	addi	sp,sp,-24
   130ec:	dfc00515 	stw	ra,20(sp)
   130f0:	df000415 	stw	fp,16(sp)
   130f4:	df000404 	addi	fp,sp,16
   130f8:	e13ffe15 	stw	r4,-8(fp)
   130fc:	e17fff05 	stb	r5,-4(fp)
   13100:	e0bffe17 	ldw	r2,-8(fp)
   13104:	10800017 	ldw	r2,0(r2)
   13108:	e0bffd15 	stw	r2,-12(fp)
   1310c:	008003f4 	movhi	r2,15
   13110:	10909004 	addi	r2,r2,16960
   13114:	e0bffc15 	stw	r2,-16(fp)
   13118:	e0bffe17 	ldw	r2,-8(fp)
   1311c:	10800803 	ldbu	r2,32(r2)
   13120:	10803fcc 	andi	r2,r2,255
   13124:	1080201c 	xori	r2,r2,128
   13128:	10bfe004 	addi	r2,r2,-128
   1312c:	1004c03a 	cmpne	r2,r2,zero
   13130:	1000161e 	bne	r2,zero,1318c <lcd_write_command+0xa4>
   13134:	00000a06 	br	13160 <lcd_write_command+0x78>
   13138:	e0bffc17 	ldw	r2,-16(fp)
   1313c:	10bfffc4 	addi	r2,r2,-1
   13140:	e0bffc15 	stw	r2,-16(fp)
   13144:	e0bffc17 	ldw	r2,-16(fp)
   13148:	1004c03a 	cmpne	r2,r2,zero
   1314c:	1000041e 	bne	r2,zero,13160 <lcd_write_command+0x78>
   13150:	e0fffe17 	ldw	r3,-8(fp)
   13154:	00800044 	movi	r2,1
   13158:	18800805 	stb	r2,32(r3)
   1315c:	00000b06 	br	1318c <lcd_write_command+0xa4>
   13160:	e0bffd17 	ldw	r2,-12(fp)
   13164:	10800104 	addi	r2,r2,4
   13168:	10800037 	ldwio	r2,0(r2)
   1316c:	1080200c 	andi	r2,r2,128
   13170:	1004c03a 	cmpne	r2,r2,zero
   13174:	103ff01e 	bne	r2,zero,13138 <lcd_write_command+0x50>
   13178:	01001904 	movi	r4,100
   1317c:	00174e80 	call	174e8 <usleep>
   13180:	e0bffd17 	ldw	r2,-12(fp)
   13184:	e0ffff03 	ldbu	r3,-4(fp)
   13188:	10c00035 	stwio	r3,0(r2)
   1318c:	e037883a 	mov	sp,fp
   13190:	dfc00117 	ldw	ra,4(sp)
   13194:	df000017 	ldw	fp,0(sp)
   13198:	dec00204 	addi	sp,sp,8
   1319c:	f800283a 	ret

000131a0 <lcd_write_data>:
   131a0:	defffa04 	addi	sp,sp,-24
   131a4:	dfc00515 	stw	ra,20(sp)
   131a8:	df000415 	stw	fp,16(sp)
   131ac:	df000404 	addi	fp,sp,16
   131b0:	e13ffe15 	stw	r4,-8(fp)
   131b4:	e17fff05 	stb	r5,-4(fp)
   131b8:	e0bffe17 	ldw	r2,-8(fp)
   131bc:	10800017 	ldw	r2,0(r2)
   131c0:	e0bffd15 	stw	r2,-12(fp)
   131c4:	008003f4 	movhi	r2,15
   131c8:	10909004 	addi	r2,r2,16960
   131cc:	e0bffc15 	stw	r2,-16(fp)
   131d0:	e0bffe17 	ldw	r2,-8(fp)
   131d4:	10800803 	ldbu	r2,32(r2)
   131d8:	10803fcc 	andi	r2,r2,255
   131dc:	1080201c 	xori	r2,r2,128
   131e0:	10bfe004 	addi	r2,r2,-128
   131e4:	1004c03a 	cmpne	r2,r2,zero
   131e8:	10001d1e 	bne	r2,zero,13260 <lcd_write_data+0xc0>
   131ec:	00000a06 	br	13218 <lcd_write_data+0x78>
   131f0:	e0bffc17 	ldw	r2,-16(fp)
   131f4:	10bfffc4 	addi	r2,r2,-1
   131f8:	e0bffc15 	stw	r2,-16(fp)
   131fc:	e0bffc17 	ldw	r2,-16(fp)
   13200:	1004c03a 	cmpne	r2,r2,zero
   13204:	1000041e 	bne	r2,zero,13218 <lcd_write_data+0x78>
   13208:	e0fffe17 	ldw	r3,-8(fp)
   1320c:	00800044 	movi	r2,1
   13210:	18800805 	stb	r2,32(r3)
   13214:	00001206 	br	13260 <lcd_write_data+0xc0>
   13218:	e0bffd17 	ldw	r2,-12(fp)
   1321c:	10800104 	addi	r2,r2,4
   13220:	10800037 	ldwio	r2,0(r2)
   13224:	1080200c 	andi	r2,r2,128
   13228:	1004c03a 	cmpne	r2,r2,zero
   1322c:	103ff01e 	bne	r2,zero,131f0 <lcd_write_data+0x50>
   13230:	01001904 	movi	r4,100
   13234:	00174e80 	call	174e8 <usleep>
   13238:	e0bffd17 	ldw	r2,-12(fp)
   1323c:	10800204 	addi	r2,r2,8
   13240:	e0ffff03 	ldbu	r3,-4(fp)
   13244:	10c00035 	stwio	r3,0(r2)
   13248:	e0bffe17 	ldw	r2,-8(fp)
   1324c:	108008c3 	ldbu	r2,35(r2)
   13250:	10800044 	addi	r2,r2,1
   13254:	1007883a 	mov	r3,r2
   13258:	e0bffe17 	ldw	r2,-8(fp)
   1325c:	10c008c5 	stb	r3,35(r2)
   13260:	e037883a 	mov	sp,fp
   13264:	dfc00117 	ldw	ra,4(sp)
   13268:	df000017 	ldw	fp,0(sp)
   1326c:	dec00204 	addi	sp,sp,8
   13270:	f800283a 	ret

00013274 <lcd_clear_screen>:
   13274:	defffc04 	addi	sp,sp,-16
   13278:	dfc00315 	stw	ra,12(sp)
   1327c:	df000215 	stw	fp,8(sp)
   13280:	df000204 	addi	fp,sp,8
   13284:	e13fff15 	stw	r4,-4(fp)
   13288:	e13fff17 	ldw	r4,-4(fp)
   1328c:	01400044 	movi	r5,1
   13290:	00130e80 	call	130e8 <lcd_write_command>
   13294:	e0bfff17 	ldw	r2,-4(fp)
   13298:	10000845 	stb	zero,33(r2)
   1329c:	e0bfff17 	ldw	r2,-4(fp)
   132a0:	10000885 	stb	zero,34(r2)
   132a4:	e0bfff17 	ldw	r2,-4(fp)
   132a8:	100008c5 	stb	zero,35(r2)
   132ac:	e03ffe15 	stw	zero,-8(fp)
   132b0:	00001906 	br	13318 <lcd_clear_screen+0xa4>
   132b4:	e0bffe17 	ldw	r2,-8(fp)
   132b8:	10801924 	muli	r2,r2,100
   132bc:	10c01004 	addi	r3,r2,64
   132c0:	e0bfff17 	ldw	r2,-4(fp)
   132c4:	1889883a 	add	r4,r3,r2
   132c8:	01400804 	movi	r5,32
   132cc:	01801444 	movi	r6,81
   132d0:	00073c40 	call	73c4 <memset>
   132d4:	e0bffe17 	ldw	r2,-8(fp)
   132d8:	10801924 	muli	r2,r2,100
   132dc:	10c00c04 	addi	r3,r2,48
   132e0:	e0bfff17 	ldw	r2,-4(fp)
   132e4:	1889883a 	add	r4,r3,r2
   132e8:	01400804 	movi	r5,32
   132ec:	01800404 	movi	r6,16
   132f0:	00073c40 	call	73c4 <memset>
   132f4:	e0bffe17 	ldw	r2,-8(fp)
   132f8:	e0ffff17 	ldw	r3,-4(fp)
   132fc:	10801924 	muli	r2,r2,100
   13300:	10c5883a 	add	r2,r2,r3
   13304:	10802404 	addi	r2,r2,144
   13308:	10000045 	stb	zero,1(r2)
   1330c:	e0bffe17 	ldw	r2,-8(fp)
   13310:	10800044 	addi	r2,r2,1
   13314:	e0bffe15 	stw	r2,-8(fp)
   13318:	e0bffe17 	ldw	r2,-8(fp)
   1331c:	10800090 	cmplti	r2,r2,2
   13320:	103fe41e 	bne	r2,zero,132b4 <lcd_clear_screen+0x40>
   13324:	e037883a 	mov	sp,fp
   13328:	dfc00117 	ldw	ra,4(sp)
   1332c:	df000017 	ldw	fp,0(sp)
   13330:	dec00204 	addi	sp,sp,8
   13334:	f800283a 	ret

00013338 <lcd_repaint_screen>:
   13338:	defff704 	addi	sp,sp,-36
   1333c:	dfc00815 	stw	ra,32(sp)
   13340:	df000715 	stw	fp,28(sp)
   13344:	df000704 	addi	fp,sp,28
   13348:	e13fff15 	stw	r4,-4(fp)
   1334c:	e0bfff17 	ldw	r2,-4(fp)
   13350:	10800943 	ldbu	r2,37(r2)
   13354:	10803fcc 	andi	r2,r2,255
   13358:	1080201c 	xori	r2,r2,128
   1335c:	10bfe004 	addi	r2,r2,-128
   13360:	e0bffc15 	stw	r2,-16(fp)
   13364:	e03ffe15 	stw	zero,-8(fp)
   13368:	00006606 	br	13504 <lcd_repaint_screen+0x1cc>
   1336c:	e0bffe17 	ldw	r2,-8(fp)
   13370:	e0ffff17 	ldw	r3,-4(fp)
   13374:	10801924 	muli	r2,r2,100
   13378:	10c5883a 	add	r2,r2,r3
   1337c:	10802404 	addi	r2,r2,144
   13380:	10800043 	ldbu	r2,1(r2)
   13384:	10803fcc 	andi	r2,r2,255
   13388:	1080201c 	xori	r2,r2,128
   1338c:	10bfe004 	addi	r2,r2,-128
   13390:	e0bffb15 	stw	r2,-20(fp)
   13394:	e0bffe17 	ldw	r2,-8(fp)
   13398:	e0ffff17 	ldw	r3,-4(fp)
   1339c:	10801924 	muli	r2,r2,100
   133a0:	10c5883a 	add	r2,r2,r3
   133a4:	10802404 	addi	r2,r2,144
   133a8:	10800083 	ldbu	r2,2(r2)
   133ac:	10c03fcc 	andi	r3,r2,255
   133b0:	e0bffc17 	ldw	r2,-16(fp)
   133b4:	1885383a 	mul	r2,r3,r2
   133b8:	1005d23a 	srai	r2,r2,8
   133bc:	e0bffa15 	stw	r2,-24(fp)
   133c0:	e0fffa17 	ldw	r3,-24(fp)
   133c4:	e0bffb17 	ldw	r2,-20(fp)
   133c8:	18800116 	blt	r3,r2,133d0 <lcd_repaint_screen+0x98>
   133cc:	e03ffa15 	stw	zero,-24(fp)
   133d0:	e03ffd15 	stw	zero,-12(fp)
   133d4:	00004506 	br	134ec <lcd_repaint_screen+0x1b4>
   133d8:	e17ffe17 	ldw	r5,-8(fp)
   133dc:	e0fffd17 	ldw	r3,-12(fp)
   133e0:	e0bffa17 	ldw	r2,-24(fp)
   133e4:	1889883a 	add	r4,r3,r2
   133e8:	e0bffb17 	ldw	r2,-20(fp)
   133ec:	2087283a 	div	r3,r4,r2
   133f0:	e0bffb17 	ldw	r2,-20(fp)
   133f4:	1885383a 	mul	r2,r3,r2
   133f8:	2089c83a 	sub	r4,r4,r2
   133fc:	e0ffff17 	ldw	r3,-4(fp)
   13400:	28801924 	muli	r2,r5,100
   13404:	10c5883a 	add	r2,r2,r3
   13408:	1105883a 	add	r2,r2,r4
   1340c:	10801004 	addi	r2,r2,64
   13410:	10800003 	ldbu	r2,0(r2)
   13414:	e0bff945 	stb	r2,-27(fp)
   13418:	e0bffe17 	ldw	r2,-8(fp)
   1341c:	e13ffd17 	ldw	r4,-12(fp)
   13420:	e0ffff17 	ldw	r3,-4(fp)
   13424:	10801924 	muli	r2,r2,100
   13428:	10c5883a 	add	r2,r2,r3
   1342c:	1105883a 	add	r2,r2,r4
   13430:	10800c04 	addi	r2,r2,48
   13434:	10800003 	ldbu	r2,0(r2)
   13438:	10c03fcc 	andi	r3,r2,255
   1343c:	18c0201c 	xori	r3,r3,128
   13440:	18ffe004 	addi	r3,r3,-128
   13444:	e0bff947 	ldb	r2,-27(fp)
   13448:	18802526 	beq	r3,r2,134e0 <lcd_repaint_screen+0x1a8>
   1344c:	e0fffe17 	ldw	r3,-8(fp)
   13450:	d0a01804 	addi	r2,gp,-32672
   13454:	1885883a 	add	r2,r3,r2
   13458:	10800003 	ldbu	r2,0(r2)
   1345c:	1007883a 	mov	r3,r2
   13460:	e0bffd17 	ldw	r2,-12(fp)
   13464:	1885883a 	add	r2,r3,r2
   13468:	e0bff905 	stb	r2,-28(fp)
   1346c:	e0fff903 	ldbu	r3,-28(fp)
   13470:	e0bfff17 	ldw	r2,-4(fp)
   13474:	108008c3 	ldbu	r2,35(r2)
   13478:	10803fcc 	andi	r2,r2,255
   1347c:	1080201c 	xori	r2,r2,128
   13480:	10bfe004 	addi	r2,r2,-128
   13484:	18800926 	beq	r3,r2,134ac <lcd_repaint_screen+0x174>
   13488:	e0fff903 	ldbu	r3,-28(fp)
   1348c:	00bfe004 	movi	r2,-128
   13490:	1884b03a 	or	r2,r3,r2
   13494:	11403fcc 	andi	r5,r2,255
   13498:	e13fff17 	ldw	r4,-4(fp)
   1349c:	00130e80 	call	130e8 <lcd_write_command>
   134a0:	e0fff903 	ldbu	r3,-28(fp)
   134a4:	e0bfff17 	ldw	r2,-4(fp)
   134a8:	10c008c5 	stb	r3,35(r2)
   134ac:	e0bff943 	ldbu	r2,-27(fp)
   134b0:	11403fcc 	andi	r5,r2,255
   134b4:	e13fff17 	ldw	r4,-4(fp)
   134b8:	00131a00 	call	131a0 <lcd_write_data>
   134bc:	e0bffe17 	ldw	r2,-8(fp)
   134c0:	e13ffd17 	ldw	r4,-12(fp)
   134c4:	e0ffff17 	ldw	r3,-4(fp)
   134c8:	10801924 	muli	r2,r2,100
   134cc:	10c5883a 	add	r2,r2,r3
   134d0:	1105883a 	add	r2,r2,r4
   134d4:	10c00c04 	addi	r3,r2,48
   134d8:	e0bff943 	ldbu	r2,-27(fp)
   134dc:	18800005 	stb	r2,0(r3)
   134e0:	e0bffd17 	ldw	r2,-12(fp)
   134e4:	10800044 	addi	r2,r2,1
   134e8:	e0bffd15 	stw	r2,-12(fp)
   134ec:	e0bffd17 	ldw	r2,-12(fp)
   134f0:	10800410 	cmplti	r2,r2,16
   134f4:	103fb81e 	bne	r2,zero,133d8 <lcd_repaint_screen+0xa0>
   134f8:	e0bffe17 	ldw	r2,-8(fp)
   134fc:	10800044 	addi	r2,r2,1
   13500:	e0bffe15 	stw	r2,-8(fp)
   13504:	e0bffe17 	ldw	r2,-8(fp)
   13508:	10800090 	cmplti	r2,r2,2
   1350c:	103f971e 	bne	r2,zero,1336c <lcd_repaint_screen+0x34>
   13510:	e037883a 	mov	sp,fp
   13514:	dfc00117 	ldw	ra,4(sp)
   13518:	df000017 	ldw	fp,0(sp)
   1351c:	dec00204 	addi	sp,sp,8
   13520:	f800283a 	ret

00013524 <lcd_scroll_up>:
   13524:	defffc04 	addi	sp,sp,-16
   13528:	dfc00315 	stw	ra,12(sp)
   1352c:	df000215 	stw	fp,8(sp)
   13530:	df000204 	addi	fp,sp,8
   13534:	e13fff15 	stw	r4,-4(fp)
   13538:	e03ffe15 	stw	zero,-8(fp)
   1353c:	00001d06 	br	135b4 <lcd_scroll_up+0x90>
   13540:	e0bffe17 	ldw	r2,-8(fp)
   13544:	10800048 	cmpgei	r2,r2,1
   13548:	10000f1e 	bne	r2,zero,13588 <lcd_scroll_up+0x64>
   1354c:	e0bffe17 	ldw	r2,-8(fp)
   13550:	10801924 	muli	r2,r2,100
   13554:	10c01004 	addi	r3,r2,64
   13558:	e0bfff17 	ldw	r2,-4(fp)
   1355c:	1889883a 	add	r4,r3,r2
   13560:	e0bffe17 	ldw	r2,-8(fp)
   13564:	10800044 	addi	r2,r2,1
   13568:	10801924 	muli	r2,r2,100
   1356c:	10c01004 	addi	r3,r2,64
   13570:	e0bfff17 	ldw	r2,-4(fp)
   13574:	1885883a 	add	r2,r3,r2
   13578:	100b883a 	mov	r5,r2
   1357c:	01801404 	movi	r6,80
   13580:	00073240 	call	7324 <memcpy>
   13584:	00000806 	br	135a8 <lcd_scroll_up+0x84>
   13588:	e0bffe17 	ldw	r2,-8(fp)
   1358c:	10801924 	muli	r2,r2,100
   13590:	10c01004 	addi	r3,r2,64
   13594:	e0bfff17 	ldw	r2,-4(fp)
   13598:	1889883a 	add	r4,r3,r2
   1359c:	01400804 	movi	r5,32
   135a0:	01801404 	movi	r6,80
   135a4:	00073c40 	call	73c4 <memset>
   135a8:	e0bffe17 	ldw	r2,-8(fp)
   135ac:	10800044 	addi	r2,r2,1
   135b0:	e0bffe15 	stw	r2,-8(fp)
   135b4:	e0bffe17 	ldw	r2,-8(fp)
   135b8:	10800090 	cmplti	r2,r2,2
   135bc:	103fe01e 	bne	r2,zero,13540 <lcd_scroll_up+0x1c>
   135c0:	e0bfff17 	ldw	r2,-4(fp)
   135c4:	10800883 	ldbu	r2,34(r2)
   135c8:	10bfffc4 	addi	r2,r2,-1
   135cc:	1007883a 	mov	r3,r2
   135d0:	e0bfff17 	ldw	r2,-4(fp)
   135d4:	10c00885 	stb	r3,34(r2)
   135d8:	e037883a 	mov	sp,fp
   135dc:	dfc00117 	ldw	ra,4(sp)
   135e0:	df000017 	ldw	fp,0(sp)
   135e4:	dec00204 	addi	sp,sp,8
   135e8:	f800283a 	ret

000135ec <lcd_handle_escape>:
   135ec:	defff804 	addi	sp,sp,-32
   135f0:	dfc00715 	stw	ra,28(sp)
   135f4:	df000615 	stw	fp,24(sp)
   135f8:	df000604 	addi	fp,sp,24
   135fc:	e13ffd15 	stw	r4,-12(fp)
   13600:	e17ffe05 	stb	r5,-8(fp)
   13604:	e03ffc15 	stw	zero,-16(fp)
   13608:	e03ffb15 	stw	zero,-20(fp)
   1360c:	e0bffd17 	ldw	r2,-12(fp)
   13610:	10800a03 	ldbu	r2,40(r2)
   13614:	10803fcc 	andi	r2,r2,255
   13618:	1080201c 	xori	r2,r2,128
   1361c:	10bfe004 	addi	r2,r2,-128
   13620:	108016d8 	cmpnei	r2,r2,91
   13624:	1000491e 	bne	r2,zero,1374c <lcd_handle_escape+0x160>
   13628:	e0bffd17 	ldw	r2,-12(fp)
   1362c:	10800a04 	addi	r2,r2,40
   13630:	10800044 	addi	r2,r2,1
   13634:	e0bffa15 	stw	r2,-24(fp)
   13638:	00000d06 	br	13670 <lcd_handle_escape+0x84>
   1363c:	e0bffc17 	ldw	r2,-16(fp)
   13640:	10c002a4 	muli	r3,r2,10
   13644:	e0bffa17 	ldw	r2,-24(fp)
   13648:	10800003 	ldbu	r2,0(r2)
   1364c:	10803fcc 	andi	r2,r2,255
   13650:	1080201c 	xori	r2,r2,128
   13654:	10bfe004 	addi	r2,r2,-128
   13658:	1885883a 	add	r2,r3,r2
   1365c:	10bff404 	addi	r2,r2,-48
   13660:	e0bffc15 	stw	r2,-16(fp)
   13664:	e0bffa17 	ldw	r2,-24(fp)
   13668:	10800044 	addi	r2,r2,1
   1366c:	e0bffa15 	stw	r2,-24(fp)
   13670:	e0bffa17 	ldw	r2,-24(fp)
   13674:	10800003 	ldbu	r2,0(r2)
   13678:	10803fcc 	andi	r2,r2,255
   1367c:	1080201c 	xori	r2,r2,128
   13680:	10bfe004 	addi	r2,r2,-128
   13684:	1007883a 	mov	r3,r2
   13688:	00820034 	movhi	r2,2048
   1368c:	1089cd04 	addi	r2,r2,10036
   13690:	10800017 	ldw	r2,0(r2)
   13694:	1885883a 	add	r2,r3,r2
   13698:	10800003 	ldbu	r2,0(r2)
   1369c:	10803fcc 	andi	r2,r2,255
   136a0:	1080010c 	andi	r2,r2,4
   136a4:	1004c03a 	cmpne	r2,r2,zero
   136a8:	103fe41e 	bne	r2,zero,1363c <lcd_handle_escape+0x50>
   136ac:	e0bffa17 	ldw	r2,-24(fp)
   136b0:	10800003 	ldbu	r2,0(r2)
   136b4:	10803fcc 	andi	r2,r2,255
   136b8:	1080201c 	xori	r2,r2,128
   136bc:	10bfe004 	addi	r2,r2,-128
   136c0:	10800ed8 	cmpnei	r2,r2,59
   136c4:	1000231e 	bne	r2,zero,13754 <lcd_handle_escape+0x168>
   136c8:	e0bffa17 	ldw	r2,-24(fp)
   136cc:	10800044 	addi	r2,r2,1
   136d0:	e0bffa15 	stw	r2,-24(fp)
   136d4:	00000d06 	br	1370c <lcd_handle_escape+0x120>
   136d8:	e0bffb17 	ldw	r2,-20(fp)
   136dc:	10c002a4 	muli	r3,r2,10
   136e0:	e0bffa17 	ldw	r2,-24(fp)
   136e4:	10800003 	ldbu	r2,0(r2)
   136e8:	10803fcc 	andi	r2,r2,255
   136ec:	1080201c 	xori	r2,r2,128
   136f0:	10bfe004 	addi	r2,r2,-128
   136f4:	1885883a 	add	r2,r3,r2
   136f8:	10bff404 	addi	r2,r2,-48
   136fc:	e0bffb15 	stw	r2,-20(fp)
   13700:	e0bffa17 	ldw	r2,-24(fp)
   13704:	10800044 	addi	r2,r2,1
   13708:	e0bffa15 	stw	r2,-24(fp)
   1370c:	e0bffa17 	ldw	r2,-24(fp)
   13710:	10800003 	ldbu	r2,0(r2)
   13714:	10803fcc 	andi	r2,r2,255
   13718:	1080201c 	xori	r2,r2,128
   1371c:	10bfe004 	addi	r2,r2,-128
   13720:	1007883a 	mov	r3,r2
   13724:	00820034 	movhi	r2,2048
   13728:	1089cd04 	addi	r2,r2,10036
   1372c:	10800017 	ldw	r2,0(r2)
   13730:	1885883a 	add	r2,r3,r2
   13734:	10800003 	ldbu	r2,0(r2)
   13738:	10803fcc 	andi	r2,r2,255
   1373c:	1080010c 	andi	r2,r2,4
   13740:	1004c03a 	cmpne	r2,r2,zero
   13744:	103fe41e 	bne	r2,zero,136d8 <lcd_handle_escape+0xec>
   13748:	00000206 	br	13754 <lcd_handle_escape+0x168>
   1374c:	00bfffc4 	movi	r2,-1
   13750:	e0bffc15 	stw	r2,-16(fp)
   13754:	e0bffe07 	ldb	r2,-8(fp)
   13758:	e0bfff15 	stw	r2,-4(fp)
   1375c:	e0ffff17 	ldw	r3,-4(fp)
   13760:	188012a0 	cmpeqi	r2,r3,74
   13764:	10002f1e 	bne	r2,zero,13824 <lcd_handle_escape+0x238>
   13768:	e0ffff17 	ldw	r3,-4(fp)
   1376c:	188012c8 	cmpgei	r2,r3,75
   13770:	1000041e 	bne	r2,zero,13784 <lcd_handle_escape+0x198>
   13774:	e0ffff17 	ldw	r3,-4(fp)
   13778:	18801220 	cmpeqi	r2,r3,72
   1377c:	1000081e 	bne	r2,zero,137a0 <lcd_handle_escape+0x1b4>
   13780:	00004906 	br	138a8 <lcd_handle_escape+0x2bc>
   13784:	e0ffff17 	ldw	r3,-4(fp)
   13788:	188012e0 	cmpeqi	r2,r3,75
   1378c:	10002b1e 	bne	r2,zero,1383c <lcd_handle_escape+0x250>
   13790:	e0ffff17 	ldw	r3,-4(fp)
   13794:	188019a0 	cmpeqi	r2,r3,102
   13798:	1000011e 	bne	r2,zero,137a0 <lcd_handle_escape+0x1b4>
   1379c:	00004206 	br	138a8 <lcd_handle_escape+0x2bc>
   137a0:	e0bffb17 	ldw	r2,-20(fp)
   137a4:	10800050 	cmplti	r2,r2,1
   137a8:	1000051e 	bne	r2,zero,137c0 <lcd_handle_escape+0x1d4>
   137ac:	e0bffb17 	ldw	r2,-20(fp)
   137b0:	10bfffc4 	addi	r2,r2,-1
   137b4:	1007883a 	mov	r3,r2
   137b8:	e0bffd17 	ldw	r2,-12(fp)
   137bc:	10c00845 	stb	r3,33(r2)
   137c0:	e0bffc17 	ldw	r2,-16(fp)
   137c4:	10800050 	cmplti	r2,r2,1
   137c8:	1000371e 	bne	r2,zero,138a8 <lcd_handle_escape+0x2bc>
   137cc:	e0bffc17 	ldw	r2,-16(fp)
   137d0:	10bfffc4 	addi	r2,r2,-1
   137d4:	1007883a 	mov	r3,r2
   137d8:	e0bffd17 	ldw	r2,-12(fp)
   137dc:	10c00885 	stb	r3,34(r2)
   137e0:	e0bffd17 	ldw	r2,-12(fp)
   137e4:	10800883 	ldbu	r2,34(r2)
   137e8:	10803fcc 	andi	r2,r2,255
   137ec:	10800170 	cmpltui	r2,r2,5
   137f0:	1000061e 	bne	r2,zero,1380c <lcd_handle_escape+0x220>
   137f4:	e0fffd17 	ldw	r3,-12(fp)
   137f8:	00800104 	movi	r2,4
   137fc:	18800885 	stb	r2,34(r3)
   13800:	00000206 	br	1380c <lcd_handle_escape+0x220>
   13804:	e13ffd17 	ldw	r4,-12(fp)
   13808:	00135240 	call	13524 <lcd_scroll_up>
   1380c:	e0bffd17 	ldw	r2,-12(fp)
   13810:	10800883 	ldbu	r2,34(r2)
   13814:	10803fcc 	andi	r2,r2,255
   13818:	108000e8 	cmpgeui	r2,r2,3
   1381c:	103ff91e 	bne	r2,zero,13804 <lcd_handle_escape+0x218>
   13820:	00002106 	br	138a8 <lcd_handle_escape+0x2bc>
   13824:	e0bffc17 	ldw	r2,-16(fp)
   13828:	10800098 	cmpnei	r2,r2,2
   1382c:	10001e1e 	bne	r2,zero,138a8 <lcd_handle_escape+0x2bc>
   13830:	e13ffd17 	ldw	r4,-12(fp)
   13834:	00132740 	call	13274 <lcd_clear_screen>
   13838:	00001b06 	br	138a8 <lcd_handle_escape+0x2bc>
   1383c:	e0bffc17 	ldw	r2,-16(fp)
   13840:	10800048 	cmpgei	r2,r2,1
   13844:	1000181e 	bne	r2,zero,138a8 <lcd_handle_escape+0x2bc>
   13848:	e0bffd17 	ldw	r2,-12(fp)
   1384c:	10800843 	ldbu	r2,33(r2)
   13850:	10803fcc 	andi	r2,r2,255
   13854:	10801428 	cmpgeui	r2,r2,80
   13858:	1000131e 	bne	r2,zero,138a8 <lcd_handle_escape+0x2bc>
   1385c:	e0bffd17 	ldw	r2,-12(fp)
   13860:	10800883 	ldbu	r2,34(r2)
   13864:	10803fcc 	andi	r2,r2,255
   13868:	10801924 	muli	r2,r2,100
   1386c:	10c01004 	addi	r3,r2,64
   13870:	e0bffd17 	ldw	r2,-12(fp)
   13874:	1887883a 	add	r3,r3,r2
   13878:	e0bffd17 	ldw	r2,-12(fp)
   1387c:	10800843 	ldbu	r2,33(r2)
   13880:	10803fcc 	andi	r2,r2,255
   13884:	1889883a 	add	r4,r3,r2
   13888:	e0bffd17 	ldw	r2,-12(fp)
   1388c:	10800843 	ldbu	r2,33(r2)
   13890:	10c03fcc 	andi	r3,r2,255
   13894:	00801404 	movi	r2,80
   13898:	10c5c83a 	sub	r2,r2,r3
   1389c:	100d883a 	mov	r6,r2
   138a0:	01400804 	movi	r5,32
   138a4:	00073c40 	call	73c4 <memset>
   138a8:	e037883a 	mov	sp,fp
   138ac:	dfc00117 	ldw	ra,4(sp)
   138b0:	df000017 	ldw	fp,0(sp)
   138b4:	dec00204 	addi	sp,sp,8
   138b8:	f800283a 	ret

000138bc <altera_avalon_lcd_16207_write>:
   138bc:	defff304 	addi	sp,sp,-52
   138c0:	dfc00c15 	stw	ra,48(sp)
   138c4:	df000b15 	stw	fp,44(sp)
   138c8:	df000b04 	addi	fp,sp,44
   138cc:	e13ffc15 	stw	r4,-16(fp)
   138d0:	e17ffd15 	stw	r5,-12(fp)
   138d4:	e1bffe15 	stw	r6,-8(fp)
   138d8:	e1ffff15 	stw	r7,-4(fp)
   138dc:	e0bffe17 	ldw	r2,-8(fp)
   138e0:	1007883a 	mov	r3,r2
   138e4:	e0bffd17 	ldw	r2,-12(fp)
   138e8:	10c5883a 	add	r2,r2,r3
   138ec:	e0bffb15 	stw	r2,-20(fp)
   138f0:	e0fffc17 	ldw	r3,-16(fp)
   138f4:	00800044 	movi	r2,1
   138f8:	188009c5 	stb	r2,39(r3)
   138fc:	0000a206 	br	13b88 <altera_avalon_lcd_16207_write+0x2cc>
   13900:	e0bffd17 	ldw	r2,-12(fp)
   13904:	10800003 	ldbu	r2,0(r2)
   13908:	e0bff805 	stb	r2,-32(fp)
   1390c:	e0bffc17 	ldw	r2,-16(fp)
   13910:	10800903 	ldbu	r2,36(r2)
   13914:	10803fcc 	andi	r2,r2,255
   13918:	1080201c 	xori	r2,r2,128
   1391c:	10bfe004 	addi	r2,r2,-128
   13920:	1004803a 	cmplt	r2,r2,zero
   13924:	10003b1e 	bne	r2,zero,13a14 <altera_avalon_lcd_16207_write+0x158>
   13928:	e0bffc17 	ldw	r2,-16(fp)
   1392c:	10800903 	ldbu	r2,36(r2)
   13930:	10803fcc 	andi	r2,r2,255
   13934:	1080201c 	xori	r2,r2,128
   13938:	10bfe004 	addi	r2,r2,-128
   1393c:	e0bff715 	stw	r2,-36(fp)
   13940:	e0bff717 	ldw	r2,-36(fp)
   13944:	1004c03a 	cmpne	r2,r2,zero
   13948:	1000031e 	bne	r2,zero,13958 <altera_avalon_lcd_16207_write+0x9c>
   1394c:	e0bff807 	ldb	r2,-32(fp)
   13950:	108016d8 	cmpnei	r2,r2,91
   13954:	1000111e 	bne	r2,zero,1399c <altera_avalon_lcd_16207_write+0xe0>
   13958:	e0bff717 	ldw	r2,-36(fp)
   1395c:	1005003a 	cmpeq	r2,r2,zero
   13960:	10001a1e 	bne	r2,zero,139cc <altera_avalon_lcd_16207_write+0x110>
   13964:	e0bff807 	ldb	r2,-32(fp)
   13968:	1007883a 	mov	r3,r2
   1396c:	00820034 	movhi	r2,2048
   13970:	1089cd04 	addi	r2,r2,10036
   13974:	10800017 	ldw	r2,0(r2)
   13978:	1885883a 	add	r2,r3,r2
   1397c:	10800003 	ldbu	r2,0(r2)
   13980:	10803fcc 	andi	r2,r2,255
   13984:	1080010c 	andi	r2,r2,4
   13988:	1004c03a 	cmpne	r2,r2,zero
   1398c:	10000f1e 	bne	r2,zero,139cc <altera_avalon_lcd_16207_write+0x110>
   13990:	e0bff807 	ldb	r2,-32(fp)
   13994:	10800ee0 	cmpeqi	r2,r2,59
   13998:	10000c1e 	bne	r2,zero,139cc <altera_avalon_lcd_16207_write+0x110>
   1399c:	e0fff717 	ldw	r3,-36(fp)
   139a0:	e0bffc17 	ldw	r2,-16(fp)
   139a4:	1885883a 	add	r2,r3,r2
   139a8:	10800a04 	addi	r2,r2,40
   139ac:	10000005 	stb	zero,0(r2)
   139b0:	e17ff807 	ldb	r5,-32(fp)
   139b4:	e13ffc17 	ldw	r4,-16(fp)
   139b8:	00135ec0 	call	135ec <lcd_handle_escape>
   139bc:	e0fffc17 	ldw	r3,-16(fp)
   139c0:	00bfffc4 	movi	r2,-1
   139c4:	18800905 	stb	r2,36(r3)
   139c8:	00006c06 	br	13b7c <altera_avalon_lcd_16207_write+0x2c0>
   139cc:	e0bffc17 	ldw	r2,-16(fp)
   139d0:	10800903 	ldbu	r2,36(r2)
   139d4:	10803fcc 	andi	r2,r2,255
   139d8:	108001e8 	cmpgeui	r2,r2,7
   139dc:	1000671e 	bne	r2,zero,13b7c <altera_avalon_lcd_16207_write+0x2c0>
   139e0:	e0fff717 	ldw	r3,-36(fp)
   139e4:	e0bffc17 	ldw	r2,-16(fp)
   139e8:	1885883a 	add	r2,r3,r2
   139ec:	10c00a04 	addi	r3,r2,40
   139f0:	e0bff803 	ldbu	r2,-32(fp)
   139f4:	18800005 	stb	r2,0(r3)
   139f8:	e0bffc17 	ldw	r2,-16(fp)
   139fc:	10800903 	ldbu	r2,36(r2)
   13a00:	10800044 	addi	r2,r2,1
   13a04:	1007883a 	mov	r3,r2
   13a08:	e0bffc17 	ldw	r2,-16(fp)
   13a0c:	10c00905 	stb	r3,36(r2)
   13a10:	00005a06 	br	13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13a14:	e0bff807 	ldb	r2,-32(fp)
   13a18:	108006d8 	cmpnei	r2,r2,27
   13a1c:	1000031e 	bne	r2,zero,13a2c <altera_avalon_lcd_16207_write+0x170>
   13a20:	e0bffc17 	ldw	r2,-16(fp)
   13a24:	10000905 	stb	zero,36(r2)
   13a28:	00005406 	br	13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13a2c:	e0bff807 	ldb	r2,-32(fp)
   13a30:	10800358 	cmpnei	r2,r2,13
   13a34:	1000031e 	bne	r2,zero,13a44 <altera_avalon_lcd_16207_write+0x188>
   13a38:	e0bffc17 	ldw	r2,-16(fp)
   13a3c:	10000845 	stb	zero,33(r2)
   13a40:	00004e06 	br	13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13a44:	e0bff807 	ldb	r2,-32(fp)
   13a48:	10800298 	cmpnei	r2,r2,10
   13a4c:	1000101e 	bne	r2,zero,13a90 <altera_avalon_lcd_16207_write+0x1d4>
   13a50:	e0bffc17 	ldw	r2,-16(fp)
   13a54:	10000845 	stb	zero,33(r2)
   13a58:	e0bffc17 	ldw	r2,-16(fp)
   13a5c:	10800883 	ldbu	r2,34(r2)
   13a60:	10800044 	addi	r2,r2,1
   13a64:	1007883a 	mov	r3,r2
   13a68:	e0bffc17 	ldw	r2,-16(fp)
   13a6c:	10c00885 	stb	r3,34(r2)
   13a70:	e0bffc17 	ldw	r2,-16(fp)
   13a74:	10800883 	ldbu	r2,34(r2)
   13a78:	10803fcc 	andi	r2,r2,255
   13a7c:	108000f0 	cmpltui	r2,r2,3
   13a80:	10003e1e 	bne	r2,zero,13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13a84:	e13ffc17 	ldw	r4,-16(fp)
   13a88:	00135240 	call	13524 <lcd_scroll_up>
   13a8c:	00003b06 	br	13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13a90:	e0bff807 	ldb	r2,-32(fp)
   13a94:	10800218 	cmpnei	r2,r2,8
   13a98:	10000c1e 	bne	r2,zero,13acc <altera_avalon_lcd_16207_write+0x210>
   13a9c:	e0bffc17 	ldw	r2,-16(fp)
   13aa0:	10800843 	ldbu	r2,33(r2)
   13aa4:	10803fcc 	andi	r2,r2,255
   13aa8:	1005003a 	cmpeq	r2,r2,zero
   13aac:	1000331e 	bne	r2,zero,13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13ab0:	e0bffc17 	ldw	r2,-16(fp)
   13ab4:	10800843 	ldbu	r2,33(r2)
   13ab8:	10bfffc4 	addi	r2,r2,-1
   13abc:	1007883a 	mov	r3,r2
   13ac0:	e0bffc17 	ldw	r2,-16(fp)
   13ac4:	10c00845 	stb	r3,33(r2)
   13ac8:	00002c06 	br	13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13acc:	e0bff807 	ldb	r2,-32(fp)
   13ad0:	1007883a 	mov	r3,r2
   13ad4:	00820034 	movhi	r2,2048
   13ad8:	1089cd04 	addi	r2,r2,10036
   13adc:	10800017 	ldw	r2,0(r2)
   13ae0:	1885883a 	add	r2,r3,r2
   13ae4:	10800003 	ldbu	r2,0(r2)
   13ae8:	10803fcc 	andi	r2,r2,255
   13aec:	1080201c 	xori	r2,r2,128
   13af0:	10bfe004 	addi	r2,r2,-128
   13af4:	108025cc 	andi	r2,r2,151
   13af8:	1005003a 	cmpeq	r2,r2,zero
   13afc:	10001f1e 	bne	r2,zero,13b7c <altera_avalon_lcd_16207_write+0x2c0>
   13b00:	e0bffc17 	ldw	r2,-16(fp)
   13b04:	10800883 	ldbu	r2,34(r2)
   13b08:	10803fcc 	andi	r2,r2,255
   13b0c:	108000b0 	cmpltui	r2,r2,2
   13b10:	1000021e 	bne	r2,zero,13b1c <altera_avalon_lcd_16207_write+0x260>
   13b14:	e13ffc17 	ldw	r4,-16(fp)
   13b18:	00135240 	call	13524 <lcd_scroll_up>
   13b1c:	e0bffc17 	ldw	r2,-16(fp)
   13b20:	10800843 	ldbu	r2,33(r2)
   13b24:	10803fcc 	andi	r2,r2,255
   13b28:	10801428 	cmpgeui	r2,r2,80
   13b2c:	10000d1e 	bne	r2,zero,13b64 <altera_avalon_lcd_16207_write+0x2a8>
   13b30:	e0bffc17 	ldw	r2,-16(fp)
   13b34:	10800883 	ldbu	r2,34(r2)
   13b38:	11003fcc 	andi	r4,r2,255
   13b3c:	e0bffc17 	ldw	r2,-16(fp)
   13b40:	10800843 	ldbu	r2,33(r2)
   13b44:	11403fcc 	andi	r5,r2,255
   13b48:	e0fffc17 	ldw	r3,-16(fp)
   13b4c:	20801924 	muli	r2,r4,100
   13b50:	10c5883a 	add	r2,r2,r3
   13b54:	1145883a 	add	r2,r2,r5
   13b58:	10c01004 	addi	r3,r2,64
   13b5c:	e0bff803 	ldbu	r2,-32(fp)
   13b60:	18800005 	stb	r2,0(r3)
   13b64:	e0bffc17 	ldw	r2,-16(fp)
   13b68:	10800843 	ldbu	r2,33(r2)
   13b6c:	10800044 	addi	r2,r2,1
   13b70:	1007883a 	mov	r3,r2
   13b74:	e0bffc17 	ldw	r2,-16(fp)
   13b78:	10c00845 	stb	r3,33(r2)
   13b7c:	e0bffd17 	ldw	r2,-12(fp)
   13b80:	10800044 	addi	r2,r2,1
   13b84:	e0bffd15 	stw	r2,-12(fp)
   13b88:	e0fffd17 	ldw	r3,-12(fp)
   13b8c:	e0bffb17 	ldw	r2,-20(fp)
   13b90:	18bf5b36 	bltu	r3,r2,13900 <altera_avalon_lcd_16207_write+0x44>
   13b94:	00800404 	movi	r2,16
   13b98:	e0bff915 	stw	r2,-28(fp)
   13b9c:	e03ffa15 	stw	zero,-24(fp)
   13ba0:	00003606 	br	13c7c <altera_avalon_lcd_16207_write+0x3c0>
   13ba4:	00801404 	movi	r2,80
   13ba8:	e0bff615 	stw	r2,-40(fp)
   13bac:	00001106 	br	13bf4 <altera_avalon_lcd_16207_write+0x338>
   13bb0:	e13ffa17 	ldw	r4,-24(fp)
   13bb4:	e0bff617 	ldw	r2,-40(fp)
   13bb8:	117fffc4 	addi	r5,r2,-1
   13bbc:	e0fffc17 	ldw	r3,-16(fp)
   13bc0:	20801924 	muli	r2,r4,100
   13bc4:	10c5883a 	add	r2,r2,r3
   13bc8:	1145883a 	add	r2,r2,r5
   13bcc:	10801004 	addi	r2,r2,64
   13bd0:	10800003 	ldbu	r2,0(r2)
   13bd4:	10803fcc 	andi	r2,r2,255
   13bd8:	1080201c 	xori	r2,r2,128
   13bdc:	10bfe004 	addi	r2,r2,-128
   13be0:	10800818 	cmpnei	r2,r2,32
   13be4:	1000061e 	bne	r2,zero,13c00 <altera_avalon_lcd_16207_write+0x344>
   13be8:	e0bff617 	ldw	r2,-40(fp)
   13bec:	10bfffc4 	addi	r2,r2,-1
   13bf0:	e0bff615 	stw	r2,-40(fp)
   13bf4:	e0bff617 	ldw	r2,-40(fp)
   13bf8:	10800048 	cmpgei	r2,r2,1
   13bfc:	103fec1e 	bne	r2,zero,13bb0 <altera_avalon_lcd_16207_write+0x2f4>
   13c00:	e0bff617 	ldw	r2,-40(fp)
   13c04:	10800448 	cmpgei	r2,r2,17
   13c08:	1000031e 	bne	r2,zero,13c18 <altera_avalon_lcd_16207_write+0x35c>
   13c0c:	00800404 	movi	r2,16
   13c10:	e0bff615 	stw	r2,-40(fp)
   13c14:	00000306 	br	13c24 <altera_avalon_lcd_16207_write+0x368>
   13c18:	e0bff617 	ldw	r2,-40(fp)
   13c1c:	10800044 	addi	r2,r2,1
   13c20:	e0bff615 	stw	r2,-40(fp)
   13c24:	e13ffa17 	ldw	r4,-24(fp)
   13c28:	e0bff617 	ldw	r2,-40(fp)
   13c2c:	100b883a 	mov	r5,r2
   13c30:	e0fffc17 	ldw	r3,-16(fp)
   13c34:	20801924 	muli	r2,r4,100
   13c38:	10c5883a 	add	r2,r2,r3
   13c3c:	10802404 	addi	r2,r2,144
   13c40:	11400045 	stb	r5,1(r2)
   13c44:	e0fff917 	ldw	r3,-28(fp)
   13c48:	e0bff617 	ldw	r2,-40(fp)
   13c4c:	1880020e 	bge	r3,r2,13c58 <altera_avalon_lcd_16207_write+0x39c>
   13c50:	e0bff617 	ldw	r2,-40(fp)
   13c54:	e0bff915 	stw	r2,-28(fp)
   13c58:	e0bffa17 	ldw	r2,-24(fp)
   13c5c:	e0fffc17 	ldw	r3,-16(fp)
   13c60:	10801924 	muli	r2,r2,100
   13c64:	10c5883a 	add	r2,r2,r3
   13c68:	10802404 	addi	r2,r2,144
   13c6c:	10000085 	stb	zero,2(r2)
   13c70:	e0bffa17 	ldw	r2,-24(fp)
   13c74:	10800044 	addi	r2,r2,1
   13c78:	e0bffa15 	stw	r2,-24(fp)
   13c7c:	e0bffa17 	ldw	r2,-24(fp)
   13c80:	10800090 	cmplti	r2,r2,2
   13c84:	103fc71e 	bne	r2,zero,13ba4 <altera_avalon_lcd_16207_write+0x2e8>
   13c88:	e0bff917 	ldw	r2,-28(fp)
   13c8c:	10800448 	cmpgei	r2,r2,17
   13c90:	1000031e 	bne	r2,zero,13ca0 <altera_avalon_lcd_16207_write+0x3e4>
   13c94:	e0bffc17 	ldw	r2,-16(fp)
   13c98:	10000985 	stb	zero,38(r2)
   13c9c:	00002d06 	br	13d54 <altera_avalon_lcd_16207_write+0x498>
   13ca0:	e0bff917 	ldw	r2,-28(fp)
   13ca4:	1085883a 	add	r2,r2,r2
   13ca8:	e0bff915 	stw	r2,-28(fp)
   13cac:	e0bff917 	ldw	r2,-28(fp)
   13cb0:	1007883a 	mov	r3,r2
   13cb4:	e0bffc17 	ldw	r2,-16(fp)
   13cb8:	10c00985 	stb	r3,38(r2)
   13cbc:	e03ffa15 	stw	zero,-24(fp)
   13cc0:	00002106 	br	13d48 <altera_avalon_lcd_16207_write+0x48c>
   13cc4:	e0bffa17 	ldw	r2,-24(fp)
   13cc8:	e0fffc17 	ldw	r3,-16(fp)
   13ccc:	10801924 	muli	r2,r2,100
   13cd0:	10c5883a 	add	r2,r2,r3
   13cd4:	10802404 	addi	r2,r2,144
   13cd8:	10800043 	ldbu	r2,1(r2)
   13cdc:	10803fcc 	andi	r2,r2,255
   13ce0:	1080201c 	xori	r2,r2,128
   13ce4:	10bfe004 	addi	r2,r2,-128
   13ce8:	10800450 	cmplti	r2,r2,17
   13cec:	1000131e 	bne	r2,zero,13d3c <altera_avalon_lcd_16207_write+0x480>
   13cf0:	e17ffa17 	ldw	r5,-24(fp)
   13cf4:	e0bffa17 	ldw	r2,-24(fp)
   13cf8:	e0fffc17 	ldw	r3,-16(fp)
   13cfc:	10801924 	muli	r2,r2,100
   13d00:	10c5883a 	add	r2,r2,r3
   13d04:	10802404 	addi	r2,r2,144
   13d08:	10800043 	ldbu	r2,1(r2)
   13d0c:	10803fcc 	andi	r2,r2,255
   13d10:	1080201c 	xori	r2,r2,128
   13d14:	10bfe004 	addi	r2,r2,-128
   13d18:	1006923a 	slli	r3,r2,8
   13d1c:	e0bff917 	ldw	r2,-28(fp)
   13d20:	1885283a 	div	r2,r3,r2
   13d24:	1009883a 	mov	r4,r2
   13d28:	e0fffc17 	ldw	r3,-16(fp)
   13d2c:	28801924 	muli	r2,r5,100
   13d30:	10c5883a 	add	r2,r2,r3
   13d34:	10802404 	addi	r2,r2,144
   13d38:	11000085 	stb	r4,2(r2)
   13d3c:	e0bffa17 	ldw	r2,-24(fp)
   13d40:	10800044 	addi	r2,r2,1
   13d44:	e0bffa15 	stw	r2,-24(fp)
   13d48:	e0bffa17 	ldw	r2,-24(fp)
   13d4c:	10800090 	cmplti	r2,r2,2
   13d50:	103fdc1e 	bne	r2,zero,13cc4 <altera_avalon_lcd_16207_write+0x408>
   13d54:	e0bffc17 	ldw	r2,-16(fp)
   13d58:	10800943 	ldbu	r2,37(r2)
   13d5c:	10803fcc 	andi	r2,r2,255
   13d60:	1080201c 	xori	r2,r2,128
   13d64:	10bfe004 	addi	r2,r2,-128
   13d68:	e0bff515 	stw	r2,-44(fp)
   13d6c:	e13ffc17 	ldw	r4,-16(fp)
   13d70:	00133380 	call	13338 <lcd_repaint_screen>
   13d74:	e0bffc17 	ldw	r2,-16(fp)
   13d78:	100009c5 	stb	zero,39(r2)
   13d7c:	e0bffc17 	ldw	r2,-16(fp)
   13d80:	10800943 	ldbu	r2,37(r2)
   13d84:	10c03fcc 	andi	r3,r2,255
   13d88:	18c0201c 	xori	r3,r3,128
   13d8c:	18ffe004 	addi	r3,r3,-128
   13d90:	e0bff517 	ldw	r2,-44(fp)
   13d94:	18800426 	beq	r3,r2,13da8 <altera_avalon_lcd_16207_write+0x4ec>
   13d98:	e0fffc17 	ldw	r3,-16(fp)
   13d9c:	00800044 	movi	r2,1
   13da0:	188009c5 	stb	r2,39(r3)
   13da4:	003feb06 	br	13d54 <altera_avalon_lcd_16207_write+0x498>
   13da8:	e0bffe17 	ldw	r2,-8(fp)
   13dac:	e037883a 	mov	sp,fp
   13db0:	dfc00117 	ldw	ra,4(sp)
   13db4:	df000017 	ldw	fp,0(sp)
   13db8:	dec00204 	addi	sp,sp,8
   13dbc:	f800283a 	ret

00013dc0 <alt_lcd_16207_timeout>:
   13dc0:	defffc04 	addi	sp,sp,-16
   13dc4:	dfc00315 	stw	ra,12(sp)
   13dc8:	df000215 	stw	fp,8(sp)
   13dcc:	df000204 	addi	fp,sp,8
   13dd0:	e13fff15 	stw	r4,-4(fp)
   13dd4:	e0bfff17 	ldw	r2,-4(fp)
   13dd8:	e0bffe15 	stw	r2,-8(fp)
   13ddc:	e0bffe17 	ldw	r2,-8(fp)
   13de0:	10800943 	ldbu	r2,37(r2)
   13de4:	10803fcc 	andi	r2,r2,255
   13de8:	1080201c 	xori	r2,r2,128
   13dec:	10bfe004 	addi	r2,r2,-128
   13df0:	10c00044 	addi	r3,r2,1
   13df4:	e0bffe17 	ldw	r2,-8(fp)
   13df8:	10800983 	ldbu	r2,38(r2)
   13dfc:	10803fcc 	andi	r2,r2,255
   13e00:	1080201c 	xori	r2,r2,128
   13e04:	10bfe004 	addi	r2,r2,-128
   13e08:	18800316 	blt	r3,r2,13e18 <alt_lcd_16207_timeout+0x58>
   13e0c:	e0bffe17 	ldw	r2,-8(fp)
   13e10:	10000945 	stb	zero,37(r2)
   13e14:	00000606 	br	13e30 <alt_lcd_16207_timeout+0x70>
   13e18:	e0bffe17 	ldw	r2,-8(fp)
   13e1c:	10800943 	ldbu	r2,37(r2)
   13e20:	10800044 	addi	r2,r2,1
   13e24:	1007883a 	mov	r3,r2
   13e28:	e0bffe17 	ldw	r2,-8(fp)
   13e2c:	10c00945 	stb	r3,37(r2)
   13e30:	e0bffe17 	ldw	r2,-8(fp)
   13e34:	10800983 	ldbu	r2,38(r2)
   13e38:	10803fcc 	andi	r2,r2,255
   13e3c:	1080201c 	xori	r2,r2,128
   13e40:	10bfe004 	addi	r2,r2,-128
   13e44:	10800050 	cmplti	r2,r2,1
   13e48:	1000091e 	bne	r2,zero,13e70 <alt_lcd_16207_timeout+0xb0>
   13e4c:	e0bffe17 	ldw	r2,-8(fp)
   13e50:	108009c3 	ldbu	r2,39(r2)
   13e54:	10803fcc 	andi	r2,r2,255
   13e58:	1080201c 	xori	r2,r2,128
   13e5c:	10bfe004 	addi	r2,r2,-128
   13e60:	1004c03a 	cmpne	r2,r2,zero
   13e64:	1000021e 	bne	r2,zero,13e70 <alt_lcd_16207_timeout+0xb0>
   13e68:	e13ffe17 	ldw	r4,-8(fp)
   13e6c:	00133380 	call	13338 <lcd_repaint_screen>
   13e70:	e0bffe17 	ldw	r2,-8(fp)
   13e74:	10800717 	ldw	r2,28(r2)
   13e78:	e037883a 	mov	sp,fp
   13e7c:	dfc00117 	ldw	ra,4(sp)
   13e80:	df000017 	ldw	fp,0(sp)
   13e84:	dec00204 	addi	sp,sp,8
   13e88:	f800283a 	ret

00013e8c <altera_avalon_lcd_16207_init>:
   13e8c:	defffc04 	addi	sp,sp,-16
   13e90:	dfc00315 	stw	ra,12(sp)
   13e94:	df000215 	stw	fp,8(sp)
   13e98:	df000204 	addi	fp,sp,8
   13e9c:	e13fff15 	stw	r4,-4(fp)
   13ea0:	e0bfff17 	ldw	r2,-4(fp)
   13ea4:	10800017 	ldw	r2,0(r2)
   13ea8:	e0bffe15 	stw	r2,-8(fp)
   13eac:	e0bfff17 	ldw	r2,-4(fp)
   13eb0:	10000805 	stb	zero,32(r2)
   13eb4:	010ea604 	movi	r4,15000
   13eb8:	00174e80 	call	174e8 <usleep>
   13ebc:	e0bffe17 	ldw	r2,-8(fp)
   13ec0:	1007883a 	mov	r3,r2
   13ec4:	00800c04 	movi	r2,48
   13ec8:	18800035 	stwio	r2,0(r3)
   13ecc:	01040104 	movi	r4,4100
   13ed0:	00174e80 	call	174e8 <usleep>
   13ed4:	e0bffe17 	ldw	r2,-8(fp)
   13ed8:	1007883a 	mov	r3,r2
   13edc:	00800c04 	movi	r2,48
   13ee0:	18800035 	stwio	r2,0(r3)
   13ee4:	0100fa04 	movi	r4,1000
   13ee8:	00174e80 	call	174e8 <usleep>
   13eec:	e0bffe17 	ldw	r2,-8(fp)
   13ef0:	1007883a 	mov	r3,r2
   13ef4:	00800c04 	movi	r2,48
   13ef8:	18800035 	stwio	r2,0(r3)
   13efc:	e13fff17 	ldw	r4,-4(fp)
   13f00:	01400e04 	movi	r5,56
   13f04:	00130e80 	call	130e8 <lcd_write_command>
   13f08:	e13fff17 	ldw	r4,-4(fp)
   13f0c:	01400204 	movi	r5,8
   13f10:	00130e80 	call	130e8 <lcd_write_command>
   13f14:	e13fff17 	ldw	r4,-4(fp)
   13f18:	00132740 	call	13274 <lcd_clear_screen>
   13f1c:	e13fff17 	ldw	r4,-4(fp)
   13f20:	01400184 	movi	r5,6
   13f24:	00130e80 	call	130e8 <lcd_write_command>
   13f28:	e13fff17 	ldw	r4,-4(fp)
   13f2c:	01400304 	movi	r5,12
   13f30:	00130e80 	call	130e8 <lcd_write_command>
   13f34:	e0ffff17 	ldw	r3,-4(fp)
   13f38:	00bfffc4 	movi	r2,-1
   13f3c:	18800905 	stb	r2,36(r3)
   13f40:	e0bfff17 	ldw	r2,-4(fp)
   13f44:	11000a04 	addi	r4,r2,40
   13f48:	000b883a 	mov	r5,zero
   13f4c:	01800204 	movi	r6,8
   13f50:	00073c40 	call	73c4 <memset>
   13f54:	e0bfff17 	ldw	r2,-4(fp)
   13f58:	10000945 	stb	zero,37(r2)
   13f5c:	e0bfff17 	ldw	r2,-4(fp)
   13f60:	10000985 	stb	zero,38(r2)
   13f64:	e0bfff17 	ldw	r2,-4(fp)
   13f68:	100009c5 	stb	zero,39(r2)
   13f6c:	00820034 	movhi	r2,2048
   13f70:	1089f704 	addi	r2,r2,10204
   13f74:	10800017 	ldw	r2,0(r2)
   13f78:	1007883a 	mov	r3,r2
   13f7c:	00800284 	movi	r2,10
   13f80:	1885203a 	divu	r2,r3,r2
   13f84:	1007883a 	mov	r3,r2
   13f88:	e0bfff17 	ldw	r2,-4(fp)
   13f8c:	10c00715 	stw	r3,28(r2)
   13f90:	e0bfff17 	ldw	r2,-4(fp)
   13f94:	11000104 	addi	r4,r2,4
   13f98:	e0bfff17 	ldw	r2,-4(fp)
   13f9c:	10800717 	ldw	r2,28(r2)
   13fa0:	100b883a 	mov	r5,r2
   13fa4:	01800074 	movhi	r6,1
   13fa8:	318f7004 	addi	r6,r6,15808
   13fac:	e1ffff17 	ldw	r7,-4(fp)
   13fb0:	0016a380 	call	16a38 <alt_alarm_start>
   13fb4:	e037883a 	mov	sp,fp
   13fb8:	dfc00117 	ldw	ra,4(sp)
   13fbc:	df000017 	ldw	fp,0(sp)
   13fc0:	dec00204 	addi	sp,sp,8
   13fc4:	f800283a 	ret

00013fc8 <altera_avalon_lcd_16207_write_fd>:
   13fc8:	defffa04 	addi	sp,sp,-24
   13fcc:	dfc00515 	stw	ra,20(sp)
   13fd0:	df000415 	stw	fp,16(sp)
   13fd4:	df000404 	addi	fp,sp,16
   13fd8:	e13ffd15 	stw	r4,-12(fp)
   13fdc:	e17ffe15 	stw	r5,-8(fp)
   13fe0:	e1bfff15 	stw	r6,-4(fp)
   13fe4:	e0bffd17 	ldw	r2,-12(fp)
   13fe8:	10800017 	ldw	r2,0(r2)
   13fec:	e0bffc15 	stw	r2,-16(fp)
   13ff0:	e0bffc17 	ldw	r2,-16(fp)
   13ff4:	11000a04 	addi	r4,r2,40
   13ff8:	e0bffd17 	ldw	r2,-12(fp)
   13ffc:	11c00217 	ldw	r7,8(r2)
   14000:	e17ffe17 	ldw	r5,-8(fp)
   14004:	e1bfff17 	ldw	r6,-4(fp)
   14008:	00138bc0 	call	138bc <altera_avalon_lcd_16207_write>
   1400c:	e037883a 	mov	sp,fp
   14010:	dfc00117 	ldw	ra,4(sp)
   14014:	df000017 	ldw	fp,0(sp)
   14018:	dec00204 	addi	sp,sp,8
   1401c:	f800283a 	ret

00014020 <alt_avalon_timer_sc_irq>:
   14020:	defff904 	addi	sp,sp,-28
   14024:	dfc00615 	stw	ra,24(sp)
   14028:	df000515 	stw	fp,20(sp)
   1402c:	df000504 	addi	fp,sp,20
   14030:	e13ffe15 	stw	r4,-8(fp)
   14034:	e17fff15 	stw	r5,-4(fp)
   14038:	e0bffe17 	ldw	r2,-8(fp)
   1403c:	10000035 	stwio	zero,0(r2)
   14040:	e0bffe17 	ldw	r2,-8(fp)
   14044:	10800104 	addi	r2,r2,4
   14048:	10800037 	ldwio	r2,0(r2)
   1404c:	0005303a 	rdctl	r2,status
   14050:	e0bffc15 	stw	r2,-16(fp)
   14054:	e0fffc17 	ldw	r3,-16(fp)
   14058:	00bfff84 	movi	r2,-2
   1405c:	1884703a 	and	r2,r3,r2
   14060:	1001703a 	wrctl	status,r2
   14064:	e0bffc17 	ldw	r2,-16(fp)
   14068:	e0bffd15 	stw	r2,-12(fp)
   1406c:	00173dc0 	call	173dc <alt_tick>
   14070:	e0bffd17 	ldw	r2,-12(fp)
   14074:	e0bffb15 	stw	r2,-20(fp)
   14078:	e0bffb17 	ldw	r2,-20(fp)
   1407c:	1001703a 	wrctl	status,r2
   14080:	e037883a 	mov	sp,fp
   14084:	dfc00117 	ldw	ra,4(sp)
   14088:	df000017 	ldw	fp,0(sp)
   1408c:	dec00204 	addi	sp,sp,8
   14090:	f800283a 	ret

00014094 <alt_avalon_timer_sc_init>:
   14094:	defff904 	addi	sp,sp,-28
   14098:	dfc00615 	stw	ra,24(sp)
   1409c:	df000515 	stw	fp,20(sp)
   140a0:	df000504 	addi	fp,sp,20
   140a4:	e13ffc15 	stw	r4,-16(fp)
   140a8:	e17ffd15 	stw	r5,-12(fp)
   140ac:	e1bffe15 	stw	r6,-8(fp)
   140b0:	e1ffff15 	stw	r7,-4(fp)
   140b4:	e0bfff17 	ldw	r2,-4(fp)
   140b8:	e0bffb15 	stw	r2,-20(fp)
   140bc:	00820034 	movhi	r2,2048
   140c0:	1089f704 	addi	r2,r2,10204
   140c4:	10800017 	ldw	r2,0(r2)
   140c8:	1004c03a 	cmpne	r2,r2,zero
   140cc:	1000041e 	bne	r2,zero,140e0 <alt_avalon_timer_sc_init+0x4c>
   140d0:	00c20034 	movhi	r3,2048
   140d4:	18c9f704 	addi	r3,r3,10204
   140d8:	e0bffb17 	ldw	r2,-20(fp)
   140dc:	18800015 	stw	r2,0(r3)
   140e0:	e0bffc17 	ldw	r2,-16(fp)
   140e4:	10800104 	addi	r2,r2,4
   140e8:	1007883a 	mov	r3,r2
   140ec:	008001c4 	movi	r2,7
   140f0:	18800035 	stwio	r2,0(r3)
   140f4:	e13ffe17 	ldw	r4,-8(fp)
   140f8:	e17ffc17 	ldw	r5,-16(fp)
   140fc:	01800074 	movhi	r6,1
   14100:	31900804 	addi	r6,r6,16416
   14104:	00019140 	call	1914 <alt_irq_register>
   14108:	e037883a 	mov	sp,fp
   1410c:	dfc00117 	ldw	ra,4(sp)
   14110:	df000017 	ldw	fp,0(sp)
   14114:	dec00204 	addi	sp,sp,8
   14118:	f800283a 	ret

0001411c <altera_avalon_uart_read_fd>:
   1411c:	defffa04 	addi	sp,sp,-24
   14120:	dfc00515 	stw	ra,20(sp)
   14124:	df000415 	stw	fp,16(sp)
   14128:	df000404 	addi	fp,sp,16
   1412c:	e13ffd15 	stw	r4,-12(fp)
   14130:	e17ffe15 	stw	r5,-8(fp)
   14134:	e1bfff15 	stw	r6,-4(fp)
   14138:	e0bffd17 	ldw	r2,-12(fp)
   1413c:	10800017 	ldw	r2,0(r2)
   14140:	e0bffc15 	stw	r2,-16(fp)
   14144:	e0bffc17 	ldw	r2,-16(fp)
   14148:	11000a04 	addi	r4,r2,40
   1414c:	e0bffd17 	ldw	r2,-12(fp)
   14150:	11c00217 	ldw	r7,8(r2)
   14154:	e17ffe17 	ldw	r5,-8(fp)
   14158:	e1bfff17 	ldw	r6,-4(fp)
   1415c:	00146100 	call	14610 <altera_avalon_uart_read>
   14160:	e037883a 	mov	sp,fp
   14164:	dfc00117 	ldw	ra,4(sp)
   14168:	df000017 	ldw	fp,0(sp)
   1416c:	dec00204 	addi	sp,sp,8
   14170:	f800283a 	ret

00014174 <altera_avalon_uart_write_fd>:
   14174:	defffa04 	addi	sp,sp,-24
   14178:	dfc00515 	stw	ra,20(sp)
   1417c:	df000415 	stw	fp,16(sp)
   14180:	df000404 	addi	fp,sp,16
   14184:	e13ffd15 	stw	r4,-12(fp)
   14188:	e17ffe15 	stw	r5,-8(fp)
   1418c:	e1bfff15 	stw	r6,-4(fp)
   14190:	e0bffd17 	ldw	r2,-12(fp)
   14194:	10800017 	ldw	r2,0(r2)
   14198:	e0bffc15 	stw	r2,-16(fp)
   1419c:	e0bffc17 	ldw	r2,-16(fp)
   141a0:	11000a04 	addi	r4,r2,40
   141a4:	e0bffd17 	ldw	r2,-12(fp)
   141a8:	11c00217 	ldw	r7,8(r2)
   141ac:	e17ffe17 	ldw	r5,-8(fp)
   141b0:	e1bfff17 	ldw	r6,-4(fp)
   141b4:	00148a00 	call	148a0 <altera_avalon_uart_write>
   141b8:	e037883a 	mov	sp,fp
   141bc:	dfc00117 	ldw	ra,4(sp)
   141c0:	df000017 	ldw	fp,0(sp)
   141c4:	dec00204 	addi	sp,sp,8
   141c8:	f800283a 	ret

000141cc <altera_avalon_uart_close_fd>:
   141cc:	defffc04 	addi	sp,sp,-16
   141d0:	dfc00315 	stw	ra,12(sp)
   141d4:	df000215 	stw	fp,8(sp)
   141d8:	df000204 	addi	fp,sp,8
   141dc:	e13fff15 	stw	r4,-4(fp)
   141e0:	e0bfff17 	ldw	r2,-4(fp)
   141e4:	10800017 	ldw	r2,0(r2)
   141e8:	e0bffe15 	stw	r2,-8(fp)
   141ec:	e0bffe17 	ldw	r2,-8(fp)
   141f0:	11000a04 	addi	r4,r2,40
   141f4:	e0bfff17 	ldw	r2,-4(fp)
   141f8:	11400217 	ldw	r5,8(r2)
   141fc:	00145b00 	call	145b0 <altera_avalon_uart_close>
   14200:	e037883a 	mov	sp,fp
   14204:	dfc00117 	ldw	ra,4(sp)
   14208:	df000017 	ldw	fp,0(sp)
   1420c:	dec00204 	addi	sp,sp,8
   14210:	f800283a 	ret

00014214 <altera_avalon_uart_init>:
   14214:	defff804 	addi	sp,sp,-32
   14218:	dfc00715 	stw	ra,28(sp)
   1421c:	df000615 	stw	fp,24(sp)
   14220:	df000604 	addi	fp,sp,24
   14224:	e13ffc15 	stw	r4,-16(fp)
   14228:	e17ffd15 	stw	r5,-12(fp)
   1422c:	e1bffe15 	stw	r6,-8(fp)
   14230:	e0bffc17 	ldw	r2,-16(fp)
   14234:	10800017 	ldw	r2,0(r2)
   14238:	e0bffb15 	stw	r2,-20(fp)
   1423c:	0005883a 	mov	r2,zero
   14240:	1004c03a 	cmpne	r2,r2,zero
   14244:	1000061e 	bne	r2,zero,14260 <altera_avalon_uart_init+0x4c>
   14248:	0005883a 	mov	r2,zero
   1424c:	1004c03a 	cmpne	r2,r2,zero
   14250:	1000031e 	bne	r2,zero,14260 <altera_avalon_uart_init+0x4c>
   14254:	0005883a 	mov	r2,zero
   14258:	1005003a 	cmpeq	r2,r2,zero
   1425c:	1000031e 	bne	r2,zero,1426c <altera_avalon_uart_init+0x58>
   14260:	00800044 	movi	r2,1
   14264:	e0bfff15 	stw	r2,-4(fp)
   14268:	00000106 	br	14270 <altera_avalon_uart_init+0x5c>
   1426c:	e03fff15 	stw	zero,-4(fp)
   14270:	e0bfff17 	ldw	r2,-4(fp)
   14274:	e0bffa15 	stw	r2,-24(fp)
   14278:	e0bffa17 	ldw	r2,-24(fp)
   1427c:	1004c03a 	cmpne	r2,r2,zero
   14280:	10000f1e 	bne	r2,zero,142c0 <altera_avalon_uart_init+0xac>
   14284:	e0fffc17 	ldw	r3,-16(fp)
   14288:	00832004 	movi	r2,3200
   1428c:	18800115 	stw	r2,4(r3)
   14290:	e0bffb17 	ldw	r2,-20(fp)
   14294:	11000304 	addi	r4,r2,12
   14298:	e0bffc17 	ldw	r2,-16(fp)
   1429c:	10800117 	ldw	r2,4(r2)
   142a0:	1007883a 	mov	r3,r2
   142a4:	2005883a 	mov	r2,r4
   142a8:	10c00035 	stwio	r3,0(r2)
   142ac:	e13ffe17 	ldw	r4,-8(fp)
   142b0:	e17ffc17 	ldw	r5,-16(fp)
   142b4:	01800074 	movhi	r6,1
   142b8:	3190b504 	addi	r6,r6,17108
   142bc:	00019140 	call	1914 <alt_irq_register>
   142c0:	e037883a 	mov	sp,fp
   142c4:	dfc00117 	ldw	ra,4(sp)
   142c8:	df000017 	ldw	fp,0(sp)
   142cc:	dec00204 	addi	sp,sp,8
   142d0:	f800283a 	ret

000142d4 <altera_avalon_uart_irq>:
   142d4:	defff904 	addi	sp,sp,-28
   142d8:	dfc00615 	stw	ra,24(sp)
   142dc:	df000515 	stw	fp,20(sp)
   142e0:	df000504 	addi	fp,sp,20
   142e4:	e13ffe15 	stw	r4,-8(fp)
   142e8:	e17fff15 	stw	r5,-4(fp)
   142ec:	e0bffe17 	ldw	r2,-8(fp)
   142f0:	e0bffc15 	stw	r2,-16(fp)
   142f4:	e0bffc17 	ldw	r2,-16(fp)
   142f8:	10800017 	ldw	r2,0(r2)
   142fc:	e0bffb15 	stw	r2,-20(fp)
   14300:	e0bffb17 	ldw	r2,-20(fp)
   14304:	10800204 	addi	r2,r2,8
   14308:	10800037 	ldwio	r2,0(r2)
   1430c:	e0bffd15 	stw	r2,-12(fp)
   14310:	e0bffb17 	ldw	r2,-20(fp)
   14314:	10800204 	addi	r2,r2,8
   14318:	10000035 	stwio	zero,0(r2)
   1431c:	e0bffb17 	ldw	r2,-20(fp)
   14320:	10800204 	addi	r2,r2,8
   14324:	10800037 	ldwio	r2,0(r2)
   14328:	e0bffd17 	ldw	r2,-12(fp)
   1432c:	1080200c 	andi	r2,r2,128
   14330:	1005003a 	cmpeq	r2,r2,zero
   14334:	1000031e 	bne	r2,zero,14344 <altera_avalon_uart_irq+0x70>
   14338:	e13ffc17 	ldw	r4,-16(fp)
   1433c:	e17ffd17 	ldw	r5,-12(fp)
   14340:	00143740 	call	14374 <altera_avalon_uart_rxirq>
   14344:	e0bffd17 	ldw	r2,-12(fp)
   14348:	1081100c 	andi	r2,r2,1088
   1434c:	1005003a 	cmpeq	r2,r2,zero
   14350:	1000031e 	bne	r2,zero,14360 <altera_avalon_uart_irq+0x8c>
   14354:	e13ffc17 	ldw	r4,-16(fp)
   14358:	e17ffd17 	ldw	r5,-12(fp)
   1435c:	00144540 	call	14454 <altera_avalon_uart_txirq>
   14360:	e037883a 	mov	sp,fp
   14364:	dfc00117 	ldw	ra,4(sp)
   14368:	df000017 	ldw	fp,0(sp)
   1436c:	dec00204 	addi	sp,sp,8
   14370:	f800283a 	ret

00014374 <altera_avalon_uart_rxirq>:
   14374:	defffc04 	addi	sp,sp,-16
   14378:	df000315 	stw	fp,12(sp)
   1437c:	df000304 	addi	fp,sp,12
   14380:	e13ffe15 	stw	r4,-8(fp)
   14384:	e17fff15 	stw	r5,-4(fp)
   14388:	e0bfff17 	ldw	r2,-4(fp)
   1438c:	108000cc 	andi	r2,r2,3
   14390:	1004c03a 	cmpne	r2,r2,zero
   14394:	10002b1e 	bne	r2,zero,14444 <altera_avalon_uart_rxirq+0xd0>
   14398:	e0bffe17 	ldw	r2,-8(fp)
   1439c:	10800317 	ldw	r2,12(r2)
   143a0:	e0bffe17 	ldw	r2,-8(fp)
   143a4:	10800317 	ldw	r2,12(r2)
   143a8:	10800044 	addi	r2,r2,1
   143ac:	10800fcc 	andi	r2,r2,63
   143b0:	e0bffd15 	stw	r2,-12(fp)
   143b4:	e0bffe17 	ldw	r2,-8(fp)
   143b8:	11000317 	ldw	r4,12(r2)
   143bc:	e0bffe17 	ldw	r2,-8(fp)
   143c0:	10800017 	ldw	r2,0(r2)
   143c4:	10800037 	ldwio	r2,0(r2)
   143c8:	1007883a 	mov	r3,r2
   143cc:	e0bffe17 	ldw	r2,-8(fp)
   143d0:	2085883a 	add	r2,r4,r2
   143d4:	10800704 	addi	r2,r2,28
   143d8:	10c00005 	stb	r3,0(r2)
   143dc:	e0fffe17 	ldw	r3,-8(fp)
   143e0:	e0bffd17 	ldw	r2,-12(fp)
   143e4:	18800315 	stw	r2,12(r3)
   143e8:	e0bffe17 	ldw	r2,-8(fp)
   143ec:	10800317 	ldw	r2,12(r2)
   143f0:	10800044 	addi	r2,r2,1
   143f4:	10800fcc 	andi	r2,r2,63
   143f8:	e0bffd15 	stw	r2,-12(fp)
   143fc:	e0bffe17 	ldw	r2,-8(fp)
   14400:	10c00217 	ldw	r3,8(r2)
   14404:	e0bffd17 	ldw	r2,-12(fp)
   14408:	18800e1e 	bne	r3,r2,14444 <altera_avalon_uart_rxirq+0xd0>
   1440c:	e0bffe17 	ldw	r2,-8(fp)
   14410:	10c00117 	ldw	r3,4(r2)
   14414:	00bfdfc4 	movi	r2,-129
   14418:	1886703a 	and	r3,r3,r2
   1441c:	e0bffe17 	ldw	r2,-8(fp)
   14420:	10c00115 	stw	r3,4(r2)
   14424:	e0bffe17 	ldw	r2,-8(fp)
   14428:	10800017 	ldw	r2,0(r2)
   1442c:	11000304 	addi	r4,r2,12
   14430:	e0bffe17 	ldw	r2,-8(fp)
   14434:	10800117 	ldw	r2,4(r2)
   14438:	1007883a 	mov	r3,r2
   1443c:	2005883a 	mov	r2,r4
   14440:	10c00035 	stwio	r3,0(r2)
   14444:	e037883a 	mov	sp,fp
   14448:	df000017 	ldw	fp,0(sp)
   1444c:	dec00104 	addi	sp,sp,4
   14450:	f800283a 	ret

00014454 <altera_avalon_uart_txirq>:
   14454:	defffd04 	addi	sp,sp,-12
   14458:	df000215 	stw	fp,8(sp)
   1445c:	df000204 	addi	fp,sp,8
   14460:	e13ffe15 	stw	r4,-8(fp)
   14464:	e17fff15 	stw	r5,-4(fp)
   14468:	e0bffe17 	ldw	r2,-8(fp)
   1446c:	10c00417 	ldw	r3,16(r2)
   14470:	e0bffe17 	ldw	r2,-8(fp)
   14474:	10800517 	ldw	r2,20(r2)
   14478:	18803626 	beq	r3,r2,14554 <altera_avalon_uart_txirq+0x100>
   1447c:	e0bffe17 	ldw	r2,-8(fp)
   14480:	10800617 	ldw	r2,24(r2)
   14484:	1080008c 	andi	r2,r2,2
   14488:	1005003a 	cmpeq	r2,r2,zero
   1448c:	1000041e 	bne	r2,zero,144a0 <altera_avalon_uart_txirq+0x4c>
   14490:	e0bfff17 	ldw	r2,-4(fp)
   14494:	1082000c 	andi	r2,r2,2048
   14498:	1005003a 	cmpeq	r2,r2,zero
   1449c:	10001e1e 	bne	r2,zero,14518 <altera_avalon_uart_txirq+0xc4>
   144a0:	e0bffe17 	ldw	r2,-8(fp)
   144a4:	10800417 	ldw	r2,16(r2)
   144a8:	e0bffe17 	ldw	r2,-8(fp)
   144ac:	10800017 	ldw	r2,0(r2)
   144b0:	11000104 	addi	r4,r2,4
   144b4:	e0bffe17 	ldw	r2,-8(fp)
   144b8:	10c00417 	ldw	r3,16(r2)
   144bc:	e0bffe17 	ldw	r2,-8(fp)
   144c0:	1885883a 	add	r2,r3,r2
   144c4:	10801704 	addi	r2,r2,92
   144c8:	10800003 	ldbu	r2,0(r2)
   144cc:	10c03fcc 	andi	r3,r2,255
   144d0:	2005883a 	mov	r2,r4
   144d4:	10c00035 	stwio	r3,0(r2)
   144d8:	e0bffe17 	ldw	r2,-8(fp)
   144dc:	10800417 	ldw	r2,16(r2)
   144e0:	10c00044 	addi	r3,r2,1
   144e4:	e0bffe17 	ldw	r2,-8(fp)
   144e8:	10c00415 	stw	r3,16(r2)
   144ec:	e0bffe17 	ldw	r2,-8(fp)
   144f0:	10800417 	ldw	r2,16(r2)
   144f4:	10c00fcc 	andi	r3,r2,63
   144f8:	e0bffe17 	ldw	r2,-8(fp)
   144fc:	10c00415 	stw	r3,16(r2)
   14500:	e0bffe17 	ldw	r2,-8(fp)
   14504:	10800117 	ldw	r2,4(r2)
   14508:	10c01014 	ori	r3,r2,64
   1450c:	e0bffe17 	ldw	r2,-8(fp)
   14510:	10c00115 	stw	r3,4(r2)
   14514:	00000f06 	br	14554 <altera_avalon_uart_txirq+0x100>
   14518:	e0bffe17 	ldw	r2,-8(fp)
   1451c:	10800017 	ldw	r2,0(r2)
   14520:	10800204 	addi	r2,r2,8
   14524:	10800037 	ldwio	r2,0(r2)
   14528:	e0bfff15 	stw	r2,-4(fp)
   1452c:	e0bfff17 	ldw	r2,-4(fp)
   14530:	1082000c 	andi	r2,r2,2048
   14534:	1004c03a 	cmpne	r2,r2,zero
   14538:	1000061e 	bne	r2,zero,14554 <altera_avalon_uart_txirq+0x100>
   1453c:	e0bffe17 	ldw	r2,-8(fp)
   14540:	10c00117 	ldw	r3,4(r2)
   14544:	00bfefc4 	movi	r2,-65
   14548:	1886703a 	and	r3,r3,r2
   1454c:	e0bffe17 	ldw	r2,-8(fp)
   14550:	10c00115 	stw	r3,4(r2)
   14554:	e0bffe17 	ldw	r2,-8(fp)
   14558:	10c00417 	ldw	r3,16(r2)
   1455c:	e0bffe17 	ldw	r2,-8(fp)
   14560:	10800517 	ldw	r2,20(r2)
   14564:	1880061e 	bne	r3,r2,14580 <altera_avalon_uart_txirq+0x12c>
   14568:	e0bffe17 	ldw	r2,-8(fp)
   1456c:	10c00117 	ldw	r3,4(r2)
   14570:	00beefc4 	movi	r2,-1089
   14574:	1886703a 	and	r3,r3,r2
   14578:	e0bffe17 	ldw	r2,-8(fp)
   1457c:	10c00115 	stw	r3,4(r2)
   14580:	e0bffe17 	ldw	r2,-8(fp)
   14584:	10800017 	ldw	r2,0(r2)
   14588:	11000304 	addi	r4,r2,12
   1458c:	e0bffe17 	ldw	r2,-8(fp)
   14590:	10800117 	ldw	r2,4(r2)
   14594:	1007883a 	mov	r3,r2
   14598:	2005883a 	mov	r2,r4
   1459c:	10c00035 	stwio	r3,0(r2)
   145a0:	e037883a 	mov	sp,fp
   145a4:	df000017 	ldw	fp,0(sp)
   145a8:	dec00104 	addi	sp,sp,4
   145ac:	f800283a 	ret

000145b0 <altera_avalon_uart_close>:
   145b0:	defffc04 	addi	sp,sp,-16
   145b4:	df000315 	stw	fp,12(sp)
   145b8:	df000304 	addi	fp,sp,12
   145bc:	e13ffd15 	stw	r4,-12(fp)
   145c0:	e17ffe15 	stw	r5,-8(fp)
   145c4:	00000706 	br	145e4 <altera_avalon_uart_close+0x34>
   145c8:	e0bffe17 	ldw	r2,-8(fp)
   145cc:	1090000c 	andi	r2,r2,16384
   145d0:	1005003a 	cmpeq	r2,r2,zero
   145d4:	1000031e 	bne	r2,zero,145e4 <altera_avalon_uart_close+0x34>
   145d8:	00bffd44 	movi	r2,-11
   145dc:	e0bfff15 	stw	r2,-4(fp)
   145e0:	00000606 	br	145fc <altera_avalon_uart_close+0x4c>
   145e4:	e0bffd17 	ldw	r2,-12(fp)
   145e8:	10c00417 	ldw	r3,16(r2)
   145ec:	e0bffd17 	ldw	r2,-12(fp)
   145f0:	10800517 	ldw	r2,20(r2)
   145f4:	18bff41e 	bne	r3,r2,145c8 <altera_avalon_uart_close+0x18>
   145f8:	e03fff15 	stw	zero,-4(fp)
   145fc:	e0bfff17 	ldw	r2,-4(fp)
   14600:	e037883a 	mov	sp,fp
   14604:	df000017 	ldw	fp,0(sp)
   14608:	dec00104 	addi	sp,sp,4
   1460c:	f800283a 	ret

00014610 <altera_avalon_uart_read>:
   14610:	defff004 	addi	sp,sp,-64
   14614:	dfc00f15 	stw	ra,60(sp)
   14618:	df000e15 	stw	fp,56(sp)
   1461c:	df000e04 	addi	fp,sp,56
   14620:	e13ffb15 	stw	r4,-20(fp)
   14624:	e17ffc15 	stw	r5,-16(fp)
   14628:	e1bffd15 	stw	r6,-12(fp)
   1462c:	e1fffe15 	stw	r7,-8(fp)
   14630:	e03ff705 	stb	zero,-36(fp)
   14634:	e03ff615 	stw	zero,-40(fp)
   14638:	e0bffe17 	ldw	r2,-8(fp)
   1463c:	1090000c 	andi	r2,r2,16384
   14640:	1005003a 	cmpeq	r2,r2,zero
   14644:	e0bff915 	stw	r2,-28(fp)
   14648:	e0bffb17 	ldw	r2,-20(fp)
   1464c:	10800217 	ldw	r2,8(r2)
   14650:	10800044 	addi	r2,r2,1
   14654:	10800fcc 	andi	r2,r2,63
   14658:	e0bff815 	stw	r2,-32(fp)
   1465c:	00001906 	br	146c4 <altera_avalon_uart_read+0xb4>
   14660:	e0bff617 	ldw	r2,-40(fp)
   14664:	10800044 	addi	r2,r2,1
   14668:	e0bff615 	stw	r2,-40(fp)
   1466c:	e0bffb17 	ldw	r2,-20(fp)
   14670:	10c00217 	ldw	r3,8(r2)
   14674:	e0bffb17 	ldw	r2,-20(fp)
   14678:	1885883a 	add	r2,r3,r2
   1467c:	10800704 	addi	r2,r2,28
   14680:	10800003 	ldbu	r2,0(r2)
   14684:	1007883a 	mov	r3,r2
   14688:	e0bffc17 	ldw	r2,-16(fp)
   1468c:	10c00005 	stb	r3,0(r2)
   14690:	e0bffc17 	ldw	r2,-16(fp)
   14694:	10800044 	addi	r2,r2,1
   14698:	e0bffc15 	stw	r2,-16(fp)
   1469c:	e0bffb17 	ldw	r2,-20(fp)
   146a0:	10800217 	ldw	r2,8(r2)
   146a4:	10c00044 	addi	r3,r2,1
   146a8:	e0bffb17 	ldw	r2,-20(fp)
   146ac:	10c00215 	stw	r3,8(r2)
   146b0:	e0bffb17 	ldw	r2,-20(fp)
   146b4:	10800217 	ldw	r2,8(r2)
   146b8:	10c00fcc 	andi	r3,r2,63
   146bc:	e0bffb17 	ldw	r2,-20(fp)
   146c0:	10c00215 	stw	r3,8(r2)
   146c4:	e0fff617 	ldw	r3,-40(fp)
   146c8:	e0bffd17 	ldw	r2,-12(fp)
   146cc:	1880050e 	bge	r3,r2,146e4 <altera_avalon_uart_read+0xd4>
   146d0:	e0bffb17 	ldw	r2,-20(fp)
   146d4:	10c00217 	ldw	r3,8(r2)
   146d8:	e0bffb17 	ldw	r2,-20(fp)
   146dc:	10800317 	ldw	r2,12(r2)
   146e0:	18bfdf1e 	bne	r3,r2,14660 <altera_avalon_uart_read+0x50>
   146e4:	e0bff617 	ldw	r2,-40(fp)
   146e8:	1004c03a 	cmpne	r2,r2,zero
   146ec:	1000271e 	bne	r2,zero,1478c <altera_avalon_uart_read+0x17c>
   146f0:	e0bffb17 	ldw	r2,-20(fp)
   146f4:	10c00217 	ldw	r3,8(r2)
   146f8:	e0bffb17 	ldw	r2,-20(fp)
   146fc:	10800317 	ldw	r2,12(r2)
   14700:	1880221e 	bne	r3,r2,1478c <altera_avalon_uart_read+0x17c>
   14704:	e0bff917 	ldw	r2,-28(fp)
   14708:	1004c03a 	cmpne	r2,r2,zero
   1470c:	1000061e 	bne	r2,zero,14728 <altera_avalon_uart_read+0x118>
   14710:	00148400 	call	14840 <alt_get_errno>
   14714:	00c002c4 	movi	r3,11
   14718:	10c00015 	stw	r3,0(r2)
   1471c:	00800044 	movi	r2,1
   14720:	e0bff705 	stb	r2,-36(fp)
   14724:	00001f06 	br	147a4 <altera_avalon_uart_read+0x194>
   14728:	0005303a 	rdctl	r2,status
   1472c:	e0bff515 	stw	r2,-44(fp)
   14730:	e0fff517 	ldw	r3,-44(fp)
   14734:	00bfff84 	movi	r2,-2
   14738:	1884703a 	and	r2,r3,r2
   1473c:	1001703a 	wrctl	status,r2
   14740:	e0bff517 	ldw	r2,-44(fp)
   14744:	e0bffa15 	stw	r2,-24(fp)
   14748:	e0bffb17 	ldw	r2,-20(fp)
   1474c:	10800117 	ldw	r2,4(r2)
   14750:	10c02014 	ori	r3,r2,128
   14754:	e0bffb17 	ldw	r2,-20(fp)
   14758:	10c00115 	stw	r3,4(r2)
   1475c:	e0bffb17 	ldw	r2,-20(fp)
   14760:	10800017 	ldw	r2,0(r2)
   14764:	11000304 	addi	r4,r2,12
   14768:	e0bffb17 	ldw	r2,-20(fp)
   1476c:	10800117 	ldw	r2,4(r2)
   14770:	1007883a 	mov	r3,r2
   14774:	2005883a 	mov	r2,r4
   14778:	10c00035 	stwio	r3,0(r2)
   1477c:	e0bffa17 	ldw	r2,-24(fp)
   14780:	e0bff415 	stw	r2,-48(fp)
   14784:	e0bff417 	ldw	r2,-48(fp)
   14788:	1001703a 	wrctl	status,r2
   1478c:	e0bff617 	ldw	r2,-40(fp)
   14790:	1004c03a 	cmpne	r2,r2,zero
   14794:	1000031e 	bne	r2,zero,147a4 <altera_avalon_uart_read+0x194>
   14798:	e0bffd17 	ldw	r2,-12(fp)
   1479c:	1004c03a 	cmpne	r2,r2,zero
   147a0:	103fc81e 	bne	r2,zero,146c4 <altera_avalon_uart_read+0xb4>
   147a4:	0005303a 	rdctl	r2,status
   147a8:	e0bff315 	stw	r2,-52(fp)
   147ac:	e0fff317 	ldw	r3,-52(fp)
   147b0:	00bfff84 	movi	r2,-2
   147b4:	1884703a 	and	r2,r3,r2
   147b8:	1001703a 	wrctl	status,r2
   147bc:	e0bff317 	ldw	r2,-52(fp)
   147c0:	e0bffa15 	stw	r2,-24(fp)
   147c4:	e0bffb17 	ldw	r2,-20(fp)
   147c8:	10800117 	ldw	r2,4(r2)
   147cc:	10c02014 	ori	r3,r2,128
   147d0:	e0bffb17 	ldw	r2,-20(fp)
   147d4:	10c00115 	stw	r3,4(r2)
   147d8:	e0bffb17 	ldw	r2,-20(fp)
   147dc:	10800017 	ldw	r2,0(r2)
   147e0:	11000304 	addi	r4,r2,12
   147e4:	e0bffb17 	ldw	r2,-20(fp)
   147e8:	10800117 	ldw	r2,4(r2)
   147ec:	1007883a 	mov	r3,r2
   147f0:	2005883a 	mov	r2,r4
   147f4:	10c00035 	stwio	r3,0(r2)
   147f8:	e0bffa17 	ldw	r2,-24(fp)
   147fc:	e0bff215 	stw	r2,-56(fp)
   14800:	e0bff217 	ldw	r2,-56(fp)
   14804:	1001703a 	wrctl	status,r2
   14808:	e0bff703 	ldbu	r2,-36(fp)
   1480c:	1005003a 	cmpeq	r2,r2,zero
   14810:	1000031e 	bne	r2,zero,14820 <altera_avalon_uart_read+0x210>
   14814:	00bffd04 	movi	r2,-12
   14818:	e0bfff15 	stw	r2,-4(fp)
   1481c:	00000206 	br	14828 <altera_avalon_uart_read+0x218>
   14820:	e0bff617 	ldw	r2,-40(fp)
   14824:	e0bfff15 	stw	r2,-4(fp)
   14828:	e0bfff17 	ldw	r2,-4(fp)
   1482c:	e037883a 	mov	sp,fp
   14830:	dfc00117 	ldw	ra,4(sp)
   14834:	df000017 	ldw	fp,0(sp)
   14838:	dec00204 	addi	sp,sp,8
   1483c:	f800283a 	ret

00014840 <alt_get_errno>:
   14840:	defffd04 	addi	sp,sp,-12
   14844:	dfc00215 	stw	ra,8(sp)
   14848:	df000115 	stw	fp,4(sp)
   1484c:	df000104 	addi	fp,sp,4
   14850:	00820034 	movhi	r2,2048
   14854:	1089c504 	addi	r2,r2,10004
   14858:	10800017 	ldw	r2,0(r2)
   1485c:	1005003a 	cmpeq	r2,r2,zero
   14860:	1000061e 	bne	r2,zero,1487c <alt_get_errno+0x3c>
   14864:	00820034 	movhi	r2,2048
   14868:	1089c504 	addi	r2,r2,10004
   1486c:	10800017 	ldw	r2,0(r2)
   14870:	103ee83a 	callr	r2
   14874:	e0bfff15 	stw	r2,-4(fp)
   14878:	00000306 	br	14888 <alt_get_errno+0x48>
   1487c:	00820034 	movhi	r2,2048
   14880:	1089f204 	addi	r2,r2,10184
   14884:	e0bfff15 	stw	r2,-4(fp)
   14888:	e0bfff17 	ldw	r2,-4(fp)
   1488c:	e037883a 	mov	sp,fp
   14890:	dfc00117 	ldw	ra,4(sp)
   14894:	df000017 	ldw	fp,0(sp)
   14898:	dec00204 	addi	sp,sp,8
   1489c:	f800283a 	ret

000148a0 <altera_avalon_uart_write>:
   148a0:	defff204 	addi	sp,sp,-56
   148a4:	dfc00d15 	stw	ra,52(sp)
   148a8:	df000c15 	stw	fp,48(sp)
   148ac:	df000c04 	addi	fp,sp,48
   148b0:	e13ffc15 	stw	r4,-16(fp)
   148b4:	e17ffd15 	stw	r5,-12(fp)
   148b8:	e1bffe15 	stw	r6,-8(fp)
   148bc:	e1ffff15 	stw	r7,-4(fp)
   148c0:	e0bffe17 	ldw	r2,-8(fp)
   148c4:	e0bff815 	stw	r2,-32(fp)
   148c8:	e0bfff17 	ldw	r2,-4(fp)
   148cc:	1090000c 	andi	r2,r2,16384
   148d0:	e0bffa15 	stw	r2,-24(fp)
   148d4:	00004006 	br	149d8 <altera_avalon_uart_write+0x138>
   148d8:	e0bffc17 	ldw	r2,-16(fp)
   148dc:	10800517 	ldw	r2,20(r2)
   148e0:	10800044 	addi	r2,r2,1
   148e4:	10800fcc 	andi	r2,r2,63
   148e8:	e0bff915 	stw	r2,-28(fp)
   148ec:	e0bffc17 	ldw	r2,-16(fp)
   148f0:	10c00417 	ldw	r3,16(r2)
   148f4:	e0bff917 	ldw	r2,-28(fp)
   148f8:	1880251e 	bne	r3,r2,14990 <altera_avalon_uart_write+0xf0>
   148fc:	e0bffa17 	ldw	r2,-24(fp)
   14900:	1005003a 	cmpeq	r2,r2,zero
   14904:	1000051e 	bne	r2,zero,1491c <altera_avalon_uart_write+0x7c>
   14908:	0014a680 	call	14a68 <alt_get_errno>
   1490c:	1007883a 	mov	r3,r2
   14910:	008002c4 	movi	r2,11
   14914:	18800015 	stw	r2,0(r3)
   14918:	00003206 	br	149e4 <altera_avalon_uart_write+0x144>
   1491c:	0005303a 	rdctl	r2,status
   14920:	e0bff715 	stw	r2,-36(fp)
   14924:	e0fff717 	ldw	r3,-36(fp)
   14928:	00bfff84 	movi	r2,-2
   1492c:	1884703a 	and	r2,r3,r2
   14930:	1001703a 	wrctl	status,r2
   14934:	e0bff717 	ldw	r2,-36(fp)
   14938:	e0bffb15 	stw	r2,-20(fp)
   1493c:	e0bffc17 	ldw	r2,-16(fp)
   14940:	10800117 	ldw	r2,4(r2)
   14944:	10c11014 	ori	r3,r2,1088
   14948:	e0bffc17 	ldw	r2,-16(fp)
   1494c:	10c00115 	stw	r3,4(r2)
   14950:	e0bffc17 	ldw	r2,-16(fp)
   14954:	10800017 	ldw	r2,0(r2)
   14958:	11000304 	addi	r4,r2,12
   1495c:	e0bffc17 	ldw	r2,-16(fp)
   14960:	10800117 	ldw	r2,4(r2)
   14964:	1007883a 	mov	r3,r2
   14968:	2005883a 	mov	r2,r4
   1496c:	10c00035 	stwio	r3,0(r2)
   14970:	e0bffb17 	ldw	r2,-20(fp)
   14974:	e0bff615 	stw	r2,-40(fp)
   14978:	e0bff617 	ldw	r2,-40(fp)
   1497c:	1001703a 	wrctl	status,r2
   14980:	e0bffc17 	ldw	r2,-16(fp)
   14984:	10c00417 	ldw	r3,16(r2)
   14988:	e0bff917 	ldw	r2,-28(fp)
   1498c:	18bffc26 	beq	r3,r2,14980 <altera_avalon_uart_write+0xe0>
   14990:	e0bff817 	ldw	r2,-32(fp)
   14994:	10bfffc4 	addi	r2,r2,-1
   14998:	e0bff815 	stw	r2,-32(fp)
   1499c:	e0bffc17 	ldw	r2,-16(fp)
   149a0:	10c00517 	ldw	r3,20(r2)
   149a4:	e0bffd17 	ldw	r2,-12(fp)
   149a8:	10800003 	ldbu	r2,0(r2)
   149ac:	1009883a 	mov	r4,r2
   149b0:	e0bffc17 	ldw	r2,-16(fp)
   149b4:	1885883a 	add	r2,r3,r2
   149b8:	10801704 	addi	r2,r2,92
   149bc:	11000005 	stb	r4,0(r2)
   149c0:	e0bffd17 	ldw	r2,-12(fp)
   149c4:	10800044 	addi	r2,r2,1
   149c8:	e0bffd15 	stw	r2,-12(fp)
   149cc:	e0fffc17 	ldw	r3,-16(fp)
   149d0:	e0bff917 	ldw	r2,-28(fp)
   149d4:	18800515 	stw	r2,20(r3)
   149d8:	e0bff817 	ldw	r2,-32(fp)
   149dc:	1004c03a 	cmpne	r2,r2,zero
   149e0:	103fbd1e 	bne	r2,zero,148d8 <altera_avalon_uart_write+0x38>
   149e4:	0005303a 	rdctl	r2,status
   149e8:	e0bff515 	stw	r2,-44(fp)
   149ec:	e0fff517 	ldw	r3,-44(fp)
   149f0:	00bfff84 	movi	r2,-2
   149f4:	1884703a 	and	r2,r3,r2
   149f8:	1001703a 	wrctl	status,r2
   149fc:	e0bff517 	ldw	r2,-44(fp)
   14a00:	e0bffb15 	stw	r2,-20(fp)
   14a04:	e0bffc17 	ldw	r2,-16(fp)
   14a08:	10800117 	ldw	r2,4(r2)
   14a0c:	10c11014 	ori	r3,r2,1088
   14a10:	e0bffc17 	ldw	r2,-16(fp)
   14a14:	10c00115 	stw	r3,4(r2)
   14a18:	e0bffc17 	ldw	r2,-16(fp)
   14a1c:	10800017 	ldw	r2,0(r2)
   14a20:	11000304 	addi	r4,r2,12
   14a24:	e0bffc17 	ldw	r2,-16(fp)
   14a28:	10800117 	ldw	r2,4(r2)
   14a2c:	1007883a 	mov	r3,r2
   14a30:	2005883a 	mov	r2,r4
   14a34:	10c00035 	stwio	r3,0(r2)
   14a38:	e0bffb17 	ldw	r2,-20(fp)
   14a3c:	e0bff415 	stw	r2,-48(fp)
   14a40:	e0bff417 	ldw	r2,-48(fp)
   14a44:	1001703a 	wrctl	status,r2
   14a48:	e0fffe17 	ldw	r3,-8(fp)
   14a4c:	e0bff817 	ldw	r2,-32(fp)
   14a50:	1885c83a 	sub	r2,r3,r2
   14a54:	e037883a 	mov	sp,fp
   14a58:	dfc00117 	ldw	ra,4(sp)
   14a5c:	df000017 	ldw	fp,0(sp)
   14a60:	dec00204 	addi	sp,sp,8
   14a64:	f800283a 	ret

00014a68 <alt_get_errno>:
   14a68:	defffd04 	addi	sp,sp,-12
   14a6c:	dfc00215 	stw	ra,8(sp)
   14a70:	df000115 	stw	fp,4(sp)
   14a74:	df000104 	addi	fp,sp,4
   14a78:	00820034 	movhi	r2,2048
   14a7c:	1089c504 	addi	r2,r2,10004
   14a80:	10800017 	ldw	r2,0(r2)
   14a84:	1005003a 	cmpeq	r2,r2,zero
   14a88:	1000061e 	bne	r2,zero,14aa4 <alt_get_errno+0x3c>
   14a8c:	00820034 	movhi	r2,2048
   14a90:	1089c504 	addi	r2,r2,10004
   14a94:	10800017 	ldw	r2,0(r2)
   14a98:	103ee83a 	callr	r2
   14a9c:	e0bfff15 	stw	r2,-4(fp)
   14aa0:	00000306 	br	14ab0 <alt_get_errno+0x48>
   14aa4:	00820034 	movhi	r2,2048
   14aa8:	1089f204 	addi	r2,r2,10184
   14aac:	e0bfff15 	stw	r2,-4(fp)
   14ab0:	e0bfff17 	ldw	r2,-4(fp)
   14ab4:	e037883a 	mov	sp,fp
   14ab8:	dfc00117 	ldw	ra,4(sp)
   14abc:	df000017 	ldw	fp,0(sp)
   14ac0:	dec00204 	addi	sp,sp,8
   14ac4:	f800283a 	ret

00014ac8 <read_RI_bit>:
   14ac8:	defffd04 	addi	sp,sp,-12
   14acc:	df000215 	stw	fp,8(sp)
   14ad0:	df000204 	addi	fp,sp,8
   14ad4:	e13fff15 	stw	r4,-4(fp)
   14ad8:	e0bfff17 	ldw	r2,-4(fp)
   14adc:	1080400c 	andi	r2,r2,256
   14ae0:	1004d23a 	srli	r2,r2,8
   14ae4:	e0bffe05 	stb	r2,-8(fp)
   14ae8:	e0bffe03 	ldbu	r2,-8(fp)
   14aec:	e037883a 	mov	sp,fp
   14af0:	df000017 	ldw	fp,0(sp)
   14af4:	dec00104 	addi	sp,sp,4
   14af8:	f800283a 	ret

00014afc <read_RE_bit>:
   14afc:	defffd04 	addi	sp,sp,-12
   14b00:	df000215 	stw	fp,8(sp)
   14b04:	df000204 	addi	fp,sp,8
   14b08:	e13fff15 	stw	r4,-4(fp)
   14b0c:	e0bfff17 	ldw	r2,-4(fp)
   14b10:	1080004c 	andi	r2,r2,1
   14b14:	e0bffe05 	stb	r2,-8(fp)
   14b18:	e0bffe03 	ldbu	r2,-8(fp)
   14b1c:	e037883a 	mov	sp,fp
   14b20:	df000017 	ldw	fp,0(sp)
   14b24:	dec00104 	addi	sp,sp,4
   14b28:	f800283a 	ret

00014b2c <read_CE_bit>:
   14b2c:	defffd04 	addi	sp,sp,-12
   14b30:	df000215 	stw	fp,8(sp)
   14b34:	df000204 	addi	fp,sp,8
   14b38:	e13fff15 	stw	r4,-4(fp)
   14b3c:	e0bfff17 	ldw	r2,-4(fp)
   14b40:	1081000c 	andi	r2,r2,1024
   14b44:	1004d2ba 	srli	r2,r2,10
   14b48:	e0bffe05 	stb	r2,-8(fp)
   14b4c:	e0bffe03 	ldbu	r2,-8(fp)
   14b50:	e037883a 	mov	sp,fp
   14b54:	df000017 	ldw	fp,0(sp)
   14b58:	dec00104 	addi	sp,sp,4
   14b5c:	f800283a 	ret

00014b60 <read_num_bytes_available>:
   14b60:	defffd04 	addi	sp,sp,-12
   14b64:	df000215 	stw	fp,8(sp)
   14b68:	df000204 	addi	fp,sp,8
   14b6c:	e13fff15 	stw	r4,-4(fp)
   14b70:	e0bfff17 	ldw	r2,-4(fp)
   14b74:	10bfffec 	andhi	r2,r2,65535
   14b78:	1004d43a 	srli	r2,r2,16
   14b7c:	e0bffe0d 	sth	r2,-8(fp)
   14b80:	e0bffe0b 	ldhu	r2,-8(fp)
   14b84:	e037883a 	mov	sp,fp
   14b88:	df000017 	ldw	fp,0(sp)
   14b8c:	dec00104 	addi	sp,sp,4
   14b90:	f800283a 	ret

00014b94 <read_data_valid>:
   14b94:	defffd04 	addi	sp,sp,-12
   14b98:	df000215 	stw	fp,8(sp)
   14b9c:	df000204 	addi	fp,sp,8
   14ba0:	e13fff15 	stw	r4,-4(fp)
   14ba4:	e0bfff17 	ldw	r2,-4(fp)
   14ba8:	10a0000c 	andi	r2,r2,32768
   14bac:	1004d3fa 	srli	r2,r2,15
   14bb0:	e0bffe05 	stb	r2,-8(fp)
   14bb4:	e0bffe03 	ldbu	r2,-8(fp)
   14bb8:	e037883a 	mov	sp,fp
   14bbc:	df000017 	ldw	fp,0(sp)
   14bc0:	dec00104 	addi	sp,sp,4
   14bc4:	f800283a 	ret

00014bc8 <read_data_byte>:
   14bc8:	defffd04 	addi	sp,sp,-12
   14bcc:	df000215 	stw	fp,8(sp)
   14bd0:	df000204 	addi	fp,sp,8
   14bd4:	e13fff15 	stw	r4,-4(fp)
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
   14bdc:	e0bffe05 	stb	r2,-8(fp)
   14be0:	e0bffe03 	ldbu	r2,-8(fp)
   14be4:	e037883a 	mov	sp,fp
   14be8:	df000017 	ldw	fp,0(sp)
   14bec:	dec00104 	addi	sp,sp,4
   14bf0:	f800283a 	ret

00014bf4 <alt_up_ps2_init>:
   14bf4:	defffb04 	addi	sp,sp,-20
   14bf8:	dfc00415 	stw	ra,16(sp)
   14bfc:	df000315 	stw	fp,12(sp)
   14c00:	df000304 	addi	fp,sp,12
   14c04:	e13fff15 	stw	r4,-4(fp)
   14c08:	e13fff17 	ldw	r4,-4(fp)
   14c0c:	01403fc4 	movi	r5,255
   14c10:	0014e540 	call	14e54 <alt_up_ps2_write_data_byte_with_ack>
   14c14:	e0bffd15 	stw	r2,-12(fp)
   14c18:	e0bffd17 	ldw	r2,-12(fp)
   14c1c:	1004c03a 	cmpne	r2,r2,zero
   14c20:	1000221e 	bne	r2,zero,14cac <alt_up_ps2_init+0xb8>
   14c24:	e17ffe04 	addi	r5,fp,-8
   14c28:	e13fff17 	ldw	r4,-4(fp)
   14c2c:	0014ec00 	call	14ec0 <alt_up_ps2_read_data_byte_timeout>
   14c30:	e0bffd15 	stw	r2,-12(fp)
   14c34:	e0bffd17 	ldw	r2,-12(fp)
   14c38:	1004c03a 	cmpne	r2,r2,zero
   14c3c:	10001b1e 	bne	r2,zero,14cac <alt_up_ps2_init+0xb8>
   14c40:	e0bffe03 	ldbu	r2,-8(fp)
   14c44:	10803fcc 	andi	r2,r2,255
   14c48:	10802a98 	cmpnei	r2,r2,170
   14c4c:	1000171e 	bne	r2,zero,14cac <alt_up_ps2_init+0xb8>
   14c50:	e17ffe04 	addi	r5,fp,-8
   14c54:	e13fff17 	ldw	r4,-4(fp)
   14c58:	0014ec00 	call	14ec0 <alt_up_ps2_read_data_byte_timeout>
   14c5c:	e0bffd15 	stw	r2,-12(fp)
   14c60:	e0bffd17 	ldw	r2,-12(fp)
   14c64:	10bfe318 	cmpnei	r2,r2,-116
   14c68:	1000041e 	bne	r2,zero,14c7c <alt_up_ps2_init+0x88>
   14c6c:	e0ffff17 	ldw	r3,-4(fp)
   14c70:	00800044 	movi	r2,1
   14c74:	18800d15 	stw	r2,52(r3)
   14c78:	00000c06 	br	14cac <alt_up_ps2_init+0xb8>
   14c7c:	e0bffd17 	ldw	r2,-12(fp)
   14c80:	1004c03a 	cmpne	r2,r2,zero
   14c84:	1000091e 	bne	r2,zero,14cac <alt_up_ps2_init+0xb8>
   14c88:	e0bffe03 	ldbu	r2,-8(fp)
   14c8c:	10803fcc 	andi	r2,r2,255
   14c90:	1004c03a 	cmpne	r2,r2,zero
   14c94:	1000051e 	bne	r2,zero,14cac <alt_up_ps2_init+0xb8>
   14c98:	e0bfff17 	ldw	r2,-4(fp)
   14c9c:	10000d15 	stw	zero,52(r2)
   14ca0:	e13fff17 	ldw	r4,-4(fp)
   14ca4:	01403d04 	movi	r5,244
   14ca8:	0014d6c0 	call	14d6c <alt_up_ps2_write_data_byte>
   14cac:	e037883a 	mov	sp,fp
   14cb0:	dfc00117 	ldw	ra,4(sp)
   14cb4:	df000017 	ldw	fp,0(sp)
   14cb8:	dec00204 	addi	sp,sp,8
   14cbc:	f800283a 	ret

00014cc0 <alt_up_ps2_enable_read_interrupt>:
   14cc0:	defffd04 	addi	sp,sp,-12
   14cc4:	df000215 	stw	fp,8(sp)
   14cc8:	df000204 	addi	fp,sp,8
   14ccc:	e13fff15 	stw	r4,-4(fp)
   14cd0:	e0bfff17 	ldw	r2,-4(fp)
   14cd4:	10800a17 	ldw	r2,40(r2)
   14cd8:	10800104 	addi	r2,r2,4
   14cdc:	10800037 	ldwio	r2,0(r2)
   14ce0:	e0bffe15 	stw	r2,-8(fp)
   14ce4:	e0bffe17 	ldw	r2,-8(fp)
   14ce8:	10800054 	ori	r2,r2,1
   14cec:	e0bffe15 	stw	r2,-8(fp)
   14cf0:	e0bfff17 	ldw	r2,-4(fp)
   14cf4:	10800a17 	ldw	r2,40(r2)
   14cf8:	10800104 	addi	r2,r2,4
   14cfc:	e0fffe17 	ldw	r3,-8(fp)
   14d00:	10c00035 	stwio	r3,0(r2)
   14d04:	e037883a 	mov	sp,fp
   14d08:	df000017 	ldw	fp,0(sp)
   14d0c:	dec00104 	addi	sp,sp,4
   14d10:	f800283a 	ret

00014d14 <alt_up_ps2_disable_read_interrupt>:
   14d14:	defffd04 	addi	sp,sp,-12
   14d18:	df000215 	stw	fp,8(sp)
   14d1c:	df000204 	addi	fp,sp,8
   14d20:	e13fff15 	stw	r4,-4(fp)
   14d24:	e0bfff17 	ldw	r2,-4(fp)
   14d28:	10800a17 	ldw	r2,40(r2)
   14d2c:	10800104 	addi	r2,r2,4
   14d30:	10800037 	ldwio	r2,0(r2)
   14d34:	e0bffe15 	stw	r2,-8(fp)
   14d38:	e0fffe17 	ldw	r3,-8(fp)
   14d3c:	00bfff84 	movi	r2,-2
   14d40:	1884703a 	and	r2,r3,r2
   14d44:	e0bffe15 	stw	r2,-8(fp)
   14d48:	e0bfff17 	ldw	r2,-4(fp)
   14d4c:	10800a17 	ldw	r2,40(r2)
   14d50:	10800104 	addi	r2,r2,4
   14d54:	e0fffe17 	ldw	r3,-8(fp)
   14d58:	10c00035 	stwio	r3,0(r2)
   14d5c:	e037883a 	mov	sp,fp
   14d60:	df000017 	ldw	fp,0(sp)
   14d64:	dec00104 	addi	sp,sp,4
   14d68:	f800283a 	ret

00014d6c <alt_up_ps2_write_data_byte>:
   14d6c:	defffa04 	addi	sp,sp,-24
   14d70:	dfc00515 	stw	ra,20(sp)
   14d74:	df000415 	stw	fp,16(sp)
   14d78:	df000404 	addi	fp,sp,16
   14d7c:	e13ffd15 	stw	r4,-12(fp)
   14d80:	e17ffe05 	stb	r5,-8(fp)
   14d84:	e0bffd17 	ldw	r2,-12(fp)
   14d88:	10800a17 	ldw	r2,40(r2)
   14d8c:	e0fffe03 	ldbu	r3,-8(fp)
   14d90:	10c00025 	stbio	r3,0(r2)
   14d94:	e0bffd17 	ldw	r2,-12(fp)
   14d98:	10800a17 	ldw	r2,40(r2)
   14d9c:	10800104 	addi	r2,r2,4
   14da0:	10800037 	ldwio	r2,0(r2)
   14da4:	e0bffc15 	stw	r2,-16(fp)
   14da8:	e13ffc17 	ldw	r4,-16(fp)
   14dac:	0014b2c0 	call	14b2c <read_CE_bit>
   14db0:	10803fcc 	andi	r2,r2,255
   14db4:	1005003a 	cmpeq	r2,r2,zero
   14db8:	1000031e 	bne	r2,zero,14dc8 <alt_up_ps2_write_data_byte+0x5c>
   14dbc:	00bffec4 	movi	r2,-5
   14dc0:	e0bfff15 	stw	r2,-4(fp)
   14dc4:	00000106 	br	14dcc <alt_up_ps2_write_data_byte+0x60>
   14dc8:	e03fff15 	stw	zero,-4(fp)
   14dcc:	e0bfff17 	ldw	r2,-4(fp)
   14dd0:	e037883a 	mov	sp,fp
   14dd4:	dfc00117 	ldw	ra,4(sp)
   14dd8:	df000017 	ldw	fp,0(sp)
   14ddc:	dec00204 	addi	sp,sp,8
   14de0:	f800283a 	ret

00014de4 <alt_up_ps2_wait_for_ack>:
   14de4:	defffb04 	addi	sp,sp,-20
   14de8:	dfc00415 	stw	ra,16(sp)
   14dec:	df000315 	stw	fp,12(sp)
   14df0:	df000304 	addi	fp,sp,12
   14df4:	e13ffe15 	stw	r4,-8(fp)
   14df8:	e03ffd45 	stb	zero,-11(fp)
   14dfc:	e03ffd05 	stb	zero,-12(fp)
   14e00:	e17ffd44 	addi	r5,fp,-11
   14e04:	e13ffe17 	ldw	r4,-8(fp)
   14e08:	0014ec00 	call	14ec0 <alt_up_ps2_read_data_byte_timeout>
   14e0c:	e0bffd05 	stb	r2,-12(fp)
   14e10:	e0bffd03 	ldbu	r2,-12(fp)
   14e14:	1004c03a 	cmpne	r2,r2,zero
   14e18:	1000061e 	bne	r2,zero,14e34 <alt_up_ps2_wait_for_ack+0x50>
   14e1c:	e0bffd43 	ldbu	r2,-11(fp)
   14e20:	10803fcc 	andi	r2,r2,255
   14e24:	10803e98 	cmpnei	r2,r2,250
   14e28:	103ff51e 	bne	r2,zero,14e00 <alt_up_ps2_wait_for_ack+0x1c>
   14e2c:	e03fff15 	stw	zero,-4(fp)
   14e30:	00000206 	br	14e3c <alt_up_ps2_wait_for_ack+0x58>
   14e34:	e0bffd03 	ldbu	r2,-12(fp)
   14e38:	e0bfff15 	stw	r2,-4(fp)
   14e3c:	e0bfff17 	ldw	r2,-4(fp)
   14e40:	e037883a 	mov	sp,fp
   14e44:	dfc00117 	ldw	ra,4(sp)
   14e48:	df000017 	ldw	fp,0(sp)
   14e4c:	dec00204 	addi	sp,sp,8
   14e50:	f800283a 	ret

00014e54 <alt_up_ps2_write_data_byte_with_ack>:
   14e54:	defff904 	addi	sp,sp,-28
   14e58:	dfc00615 	stw	ra,24(sp)
   14e5c:	df000515 	stw	fp,20(sp)
   14e60:	df000504 	addi	fp,sp,20
   14e64:	e13ffd15 	stw	r4,-12(fp)
   14e68:	e17ffe05 	stb	r5,-8(fp)
   14e6c:	e17ffe03 	ldbu	r5,-8(fp)
   14e70:	e13ffd17 	ldw	r4,-12(fp)
   14e74:	0014d6c0 	call	14d6c <alt_up_ps2_write_data_byte>
   14e78:	e0bffc15 	stw	r2,-16(fp)
   14e7c:	e0bffc17 	ldw	r2,-16(fp)
   14e80:	1005003a 	cmpeq	r2,r2,zero
   14e84:	1000031e 	bne	r2,zero,14e94 <alt_up_ps2_write_data_byte_with_ack+0x40>
   14e88:	e0bffc17 	ldw	r2,-16(fp)
   14e8c:	e0bfff15 	stw	r2,-4(fp)
   14e90:	00000506 	br	14ea8 <alt_up_ps2_write_data_byte_with_ack+0x54>
   14e94:	e13ffd17 	ldw	r4,-12(fp)
   14e98:	0014de40 	call	14de4 <alt_up_ps2_wait_for_ack>
   14e9c:	e0bffb15 	stw	r2,-20(fp)
   14ea0:	e0bffb17 	ldw	r2,-20(fp)
   14ea4:	e0bfff15 	stw	r2,-4(fp)
   14ea8:	e0bfff17 	ldw	r2,-4(fp)
   14eac:	e037883a 	mov	sp,fp
   14eb0:	dfc00117 	ldw	ra,4(sp)
   14eb4:	df000017 	ldw	fp,0(sp)
   14eb8:	dec00204 	addi	sp,sp,8
   14ebc:	f800283a 	ret

00014ec0 <alt_up_ps2_read_data_byte_timeout>:
   14ec0:	defff904 	addi	sp,sp,-28
   14ec4:	dfc00615 	stw	ra,24(sp)
   14ec8:	df000515 	stw	fp,20(sp)
   14ecc:	df000504 	addi	fp,sp,20
   14ed0:	e13ffd15 	stw	r4,-12(fp)
   14ed4:	e17ffe15 	stw	r5,-8(fp)
   14ed8:	e03ffc15 	stw	zero,-16(fp)
   14edc:	e03ffb15 	stw	zero,-20(fp)
   14ee0:	00000006 	br	14ee4 <alt_up_ps2_read_data_byte_timeout+0x24>
   14ee4:	e0bffb17 	ldw	r2,-20(fp)
   14ee8:	10800044 	addi	r2,r2,1
   14eec:	e0bffb15 	stw	r2,-20(fp)
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	10800a17 	ldw	r2,40(r2)
   14ef8:	10800037 	ldwio	r2,0(r2)
   14efc:	e0bffc15 	stw	r2,-16(fp)
   14f00:	e13ffc17 	ldw	r4,-16(fp)
   14f04:	0014b940 	call	14b94 <read_data_valid>
   14f08:	10803fcc 	andi	r2,r2,255
   14f0c:	1005003a 	cmpeq	r2,r2,zero
   14f10:	1000071e 	bne	r2,zero,14f30 <alt_up_ps2_read_data_byte_timeout+0x70>
   14f14:	e13ffc17 	ldw	r4,-16(fp)
   14f18:	0014bc80 	call	14bc8 <read_data_byte>
   14f1c:	1007883a 	mov	r3,r2
   14f20:	e0bffe17 	ldw	r2,-8(fp)
   14f24:	10c00005 	stb	r3,0(r2)
   14f28:	e03fff15 	stw	zero,-4(fp)
   14f2c:	00000a06 	br	14f58 <alt_up_ps2_read_data_byte_timeout+0x98>
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	10800c17 	ldw	r2,48(r2)
   14f38:	1005003a 	cmpeq	r2,r2,zero
   14f3c:	103fe91e 	bne	r2,zero,14ee4 <alt_up_ps2_read_data_byte_timeout+0x24>
   14f40:	e0bffd17 	ldw	r2,-12(fp)
   14f44:	10c00c17 	ldw	r3,48(r2)
   14f48:	e0bffb17 	ldw	r2,-20(fp)
   14f4c:	18bfe52e 	bgeu	r3,r2,14ee4 <alt_up_ps2_read_data_byte_timeout+0x24>
   14f50:	00bfe304 	movi	r2,-116
   14f54:	e0bfff15 	stw	r2,-4(fp)
   14f58:	e0bfff17 	ldw	r2,-4(fp)
   14f5c:	e037883a 	mov	sp,fp
   14f60:	dfc00117 	ldw	ra,4(sp)
   14f64:	df000017 	ldw	fp,0(sp)
   14f68:	dec00204 	addi	sp,sp,8
   14f6c:	f800283a 	ret

00014f70 <alt_up_ps2_read_data_byte>:
   14f70:	defffa04 	addi	sp,sp,-24
   14f74:	dfc00515 	stw	ra,20(sp)
   14f78:	df000415 	stw	fp,16(sp)
   14f7c:	df000404 	addi	fp,sp,16
   14f80:	e13ffd15 	stw	r4,-12(fp)
   14f84:	e17ffe15 	stw	r5,-8(fp)
   14f88:	e03ffc15 	stw	zero,-16(fp)
   14f8c:	e0bffd17 	ldw	r2,-12(fp)
   14f90:	10800a17 	ldw	r2,40(r2)
   14f94:	10800037 	ldwio	r2,0(r2)
   14f98:	e0bffc15 	stw	r2,-16(fp)
   14f9c:	e13ffc17 	ldw	r4,-16(fp)
   14fa0:	0014b940 	call	14b94 <read_data_valid>
   14fa4:	10803fcc 	andi	r2,r2,255
   14fa8:	1005003a 	cmpeq	r2,r2,zero
   14fac:	1000071e 	bne	r2,zero,14fcc <alt_up_ps2_read_data_byte+0x5c>
   14fb0:	e13ffc17 	ldw	r4,-16(fp)
   14fb4:	0014bc80 	call	14bc8 <read_data_byte>
   14fb8:	1007883a 	mov	r3,r2
   14fbc:	e0bffe17 	ldw	r2,-8(fp)
   14fc0:	10c00005 	stb	r3,0(r2)
   14fc4:	e03fff15 	stw	zero,-4(fp)
   14fc8:	00000206 	br	14fd4 <alt_up_ps2_read_data_byte+0x64>
   14fcc:	00bfffc4 	movi	r2,-1
   14fd0:	e0bfff15 	stw	r2,-4(fp)
   14fd4:	e0bfff17 	ldw	r2,-4(fp)
   14fd8:	e037883a 	mov	sp,fp
   14fdc:	dfc00117 	ldw	ra,4(sp)
   14fe0:	df000017 	ldw	fp,0(sp)
   14fe4:	dec00204 	addi	sp,sp,8
   14fe8:	f800283a 	ret

00014fec <alt_up_ps2_clear_fifo>:
   14fec:	defffb04 	addi	sp,sp,-20
   14ff0:	dfc00415 	stw	ra,16(sp)
   14ff4:	df000315 	stw	fp,12(sp)
   14ff8:	df000304 	addi	fp,sp,12
   14ffc:	e13fff15 	stw	r4,-4(fp)
   15000:	e03ffe0d 	sth	zero,-8(fp)
   15004:	e03ffd15 	stw	zero,-12(fp)
   15008:	e0bfff17 	ldw	r2,-4(fp)
   1500c:	10800a17 	ldw	r2,40(r2)
   15010:	10800037 	ldwio	r2,0(r2)
   15014:	e0bffd15 	stw	r2,-12(fp)
   15018:	e13ffd17 	ldw	r4,-12(fp)
   1501c:	0014b600 	call	14b60 <read_num_bytes_available>
   15020:	e0bffe0d 	sth	r2,-8(fp)
   15024:	e0bffe0b 	ldhu	r2,-8(fp)
   15028:	1004c03a 	cmpne	r2,r2,zero
   1502c:	103ff61e 	bne	r2,zero,15008 <alt_up_ps2_clear_fifo+0x1c>
   15030:	e037883a 	mov	sp,fp
   15034:	dfc00117 	ldw	ra,4(sp)
   15038:	df000017 	ldw	fp,0(sp)
   1503c:	dec00204 	addi	sp,sp,8
   15040:	f800283a 	ret

00015044 <alt_up_ps2_read_fd>:
   15044:	defff704 	addi	sp,sp,-36
   15048:	dfc00815 	stw	ra,32(sp)
   1504c:	df000715 	stw	fp,28(sp)
   15050:	df000704 	addi	fp,sp,28
   15054:	e13ffc15 	stw	r4,-16(fp)
   15058:	e17ffd15 	stw	r5,-12(fp)
   1505c:	e1bffe15 	stw	r6,-8(fp)
   15060:	e0bffc17 	ldw	r2,-16(fp)
   15064:	10800017 	ldw	r2,0(r2)
   15068:	e0bffb15 	stw	r2,-20(fp)
   1506c:	e03ffa15 	stw	zero,-24(fp)
   15070:	e03ff915 	stw	zero,-28(fp)
   15074:	e0fff917 	ldw	r3,-28(fp)
   15078:	e0bffe17 	ldw	r2,-8(fp)
   1507c:	18bffd16 	blt	r3,r2,15074 <alt_up_ps2_read_fd+0x30>
   15080:	e17ffd17 	ldw	r5,-12(fp)
   15084:	e0bffd17 	ldw	r2,-12(fp)
   15088:	10800044 	addi	r2,r2,1
   1508c:	e0bffd15 	stw	r2,-12(fp)
   15090:	e13ffb17 	ldw	r4,-20(fp)
   15094:	0014ec00 	call	14ec0 <alt_up_ps2_read_data_byte_timeout>
   15098:	e0bffa15 	stw	r2,-24(fp)
   1509c:	e0bffa17 	ldw	r2,-24(fp)
   150a0:	1005003a 	cmpeq	r2,r2,zero
   150a4:	1000031e 	bne	r2,zero,150b4 <alt_up_ps2_read_fd+0x70>
   150a8:	e0bff917 	ldw	r2,-28(fp)
   150ac:	e0bfff15 	stw	r2,-4(fp)
   150b0:	00000506 	br	150c8 <alt_up_ps2_read_fd+0x84>
   150b4:	e0bff917 	ldw	r2,-28(fp)
   150b8:	10800044 	addi	r2,r2,1
   150bc:	e0bff915 	stw	r2,-28(fp)
   150c0:	e0bff917 	ldw	r2,-28(fp)
   150c4:	e0bfff15 	stw	r2,-4(fp)
   150c8:	e0bfff17 	ldw	r2,-4(fp)
   150cc:	e037883a 	mov	sp,fp
   150d0:	dfc00117 	ldw	ra,4(sp)
   150d4:	df000017 	ldw	fp,0(sp)
   150d8:	dec00204 	addi	sp,sp,8
   150dc:	f800283a 	ret

000150e0 <alt_up_ps2_write_fd>:
   150e0:	defff704 	addi	sp,sp,-36
   150e4:	dfc00815 	stw	ra,32(sp)
   150e8:	df000715 	stw	fp,28(sp)
   150ec:	df000704 	addi	fp,sp,28
   150f0:	e13ffc15 	stw	r4,-16(fp)
   150f4:	e17ffd15 	stw	r5,-12(fp)
   150f8:	e1bffe15 	stw	r6,-8(fp)
   150fc:	e0bffc17 	ldw	r2,-16(fp)
   15100:	10800017 	ldw	r2,0(r2)
   15104:	e0bffb15 	stw	r2,-20(fp)
   15108:	e03ffa15 	stw	zero,-24(fp)
   1510c:	e03ff915 	stw	zero,-28(fp)
   15110:	00001206 	br	1515c <alt_up_ps2_write_fd+0x7c>
   15114:	e0bffd17 	ldw	r2,-12(fp)
   15118:	10800003 	ldbu	r2,0(r2)
   1511c:	11403fcc 	andi	r5,r2,255
   15120:	e0bffd17 	ldw	r2,-12(fp)
   15124:	10800044 	addi	r2,r2,1
   15128:	e0bffd15 	stw	r2,-12(fp)
   1512c:	e13ffb17 	ldw	r4,-20(fp)
   15130:	0014d6c0 	call	14d6c <alt_up_ps2_write_data_byte>
   15134:	e0bffa15 	stw	r2,-24(fp)
   15138:	e0bffa17 	ldw	r2,-24(fp)
   1513c:	1005003a 	cmpeq	r2,r2,zero
   15140:	1000031e 	bne	r2,zero,15150 <alt_up_ps2_write_fd+0x70>
   15144:	e0bff917 	ldw	r2,-28(fp)
   15148:	e0bfff15 	stw	r2,-4(fp)
   1514c:	00000806 	br	15170 <alt_up_ps2_write_fd+0x90>
   15150:	e0bff917 	ldw	r2,-28(fp)
   15154:	10800044 	addi	r2,r2,1
   15158:	e0bff915 	stw	r2,-28(fp)
   1515c:	e0fff917 	ldw	r3,-28(fp)
   15160:	e0bffe17 	ldw	r2,-8(fp)
   15164:	18bfeb16 	blt	r3,r2,15114 <alt_up_ps2_write_fd+0x34>
   15168:	e0bff917 	ldw	r2,-28(fp)
   1516c:	e0bfff15 	stw	r2,-4(fp)
   15170:	e0bfff17 	ldw	r2,-4(fp)
   15174:	e037883a 	mov	sp,fp
   15178:	dfc00117 	ldw	ra,4(sp)
   1517c:	df000017 	ldw	fp,0(sp)
   15180:	dec00204 	addi	sp,sp,8
   15184:	f800283a 	ret

00015188 <alt_up_ps2_open_dev>:
   15188:	defffc04 	addi	sp,sp,-16
   1518c:	dfc00315 	stw	ra,12(sp)
   15190:	df000215 	stw	fp,8(sp)
   15194:	df000204 	addi	fp,sp,8
   15198:	e13fff15 	stw	r4,-4(fp)
   1519c:	e13fff17 	ldw	r4,-4(fp)
   151a0:	01420034 	movhi	r5,2048
   151a4:	2949c204 	addi	r5,r5,9992
   151a8:	0016de00 	call	16de0 <alt_find_dev>
   151ac:	e0bffe15 	stw	r2,-8(fp)
   151b0:	e0bffe17 	ldw	r2,-8(fp)
   151b4:	e037883a 	mov	sp,fp
   151b8:	dfc00117 	ldw	ra,4(sp)
   151bc:	df000017 	ldw	fp,0(sp)
   151c0:	dec00204 	addi	sp,sp,8
   151c4:	f800283a 	ret

000151c8 <alt_up_char_buffer_init>:
   151c8:	defffc04 	addi	sp,sp,-16
   151cc:	dfc00315 	stw	ra,12(sp)
   151d0:	df000215 	stw	fp,8(sp)
   151d4:	df000204 	addi	fp,sp,8
   151d8:	e13fff15 	stw	r4,-4(fp)
   151dc:	e0bfff17 	ldw	r2,-4(fp)
   151e0:	10800217 	ldw	r2,8(r2)
   151e4:	e0bffe15 	stw	r2,-8(fp)
   151e8:	00000c06 	br	1521c <alt_up_char_buffer_init+0x54>
   151ec:	e13ffe17 	ldw	r4,-8(fp)
   151f0:	01420034 	movhi	r5,2048
   151f4:	29419704 	addi	r5,r5,1628
   151f8:	000e3cc0 	call	e3cc <strcmp>
   151fc:	1004c03a 	cmpne	r2,r2,zero
   15200:	1000031e 	bne	r2,zero,15210 <alt_up_char_buffer_init+0x48>
   15204:	e0bffe17 	ldw	r2,-8(fp)
   15208:	10000005 	stb	zero,0(r2)
   1520c:	00000a06 	br	15238 <alt_up_char_buffer_init+0x70>
   15210:	e0bffe17 	ldw	r2,-8(fp)
   15214:	10800044 	addi	r2,r2,1
   15218:	e0bffe15 	stw	r2,-8(fp)
   1521c:	e0bffe17 	ldw	r2,-8(fp)
   15220:	10800003 	ldbu	r2,0(r2)
   15224:	10803fcc 	andi	r2,r2,255
   15228:	1080201c 	xori	r2,r2,128
   1522c:	10bfe004 	addi	r2,r2,-128
   15230:	1004c03a 	cmpne	r2,r2,zero
   15234:	103fed1e 	bne	r2,zero,151ec <alt_up_char_buffer_init+0x24>
   15238:	e037883a 	mov	sp,fp
   1523c:	dfc00117 	ldw	ra,4(sp)
   15240:	df000017 	ldw	fp,0(sp)
   15244:	dec00204 	addi	sp,sp,8
   15248:	f800283a 	ret

0001524c <alt_up_char_buffer_open_dev>:
   1524c:	defffc04 	addi	sp,sp,-16
   15250:	dfc00315 	stw	ra,12(sp)
   15254:	df000215 	stw	fp,8(sp)
   15258:	df000204 	addi	fp,sp,8
   1525c:	e13fff15 	stw	r4,-4(fp)
   15260:	e13fff17 	ldw	r4,-4(fp)
   15264:	01420034 	movhi	r5,2048
   15268:	2949c204 	addi	r5,r5,9992
   1526c:	0016de00 	call	16de0 <alt_find_dev>
   15270:	e0bffe15 	stw	r2,-8(fp)
   15274:	e0bffe17 	ldw	r2,-8(fp)
   15278:	e037883a 	mov	sp,fp
   1527c:	dfc00117 	ldw	ra,4(sp)
   15280:	df000017 	ldw	fp,0(sp)
   15284:	dec00204 	addi	sp,sp,8
   15288:	f800283a 	ret

0001528c <alt_up_char_buffer_draw>:
   1528c:	defff904 	addi	sp,sp,-28
   15290:	df000615 	stw	fp,24(sp)
   15294:	df000604 	addi	fp,sp,24
   15298:	e13ffb15 	stw	r4,-20(fp)
   1529c:	e1bffd15 	stw	r6,-12(fp)
   152a0:	e1fffe15 	stw	r7,-8(fp)
   152a4:	e17ffc05 	stb	r5,-16(fp)
   152a8:	e0bffb17 	ldw	r2,-20(fp)
   152ac:	10c00c17 	ldw	r3,48(r2)
   152b0:	e0bffd17 	ldw	r2,-12(fp)
   152b4:	10c0042e 	bgeu	r2,r3,152c8 <alt_up_char_buffer_draw+0x3c>
   152b8:	e0bffb17 	ldw	r2,-20(fp)
   152bc:	10c00d17 	ldw	r3,52(r2)
   152c0:	e0bffe17 	ldw	r2,-8(fp)
   152c4:	10c00336 	bltu	r2,r3,152d4 <alt_up_char_buffer_draw+0x48>
   152c8:	00bfffc4 	movi	r2,-1
   152cc:	e0bfff15 	stw	r2,-4(fp)
   152d0:	00001d06 	br	15348 <alt_up_char_buffer_draw+0xbc>
   152d4:	e03ffa15 	stw	zero,-24(fp)
   152d8:	e0bffb17 	ldw	r2,-20(fp)
   152dc:	10c00f17 	ldw	r3,60(r2)
   152e0:	e0bffd17 	ldw	r2,-12(fp)
   152e4:	1886703a 	and	r3,r3,r2
   152e8:	e0bffb17 	ldw	r2,-20(fp)
   152ec:	10800e17 	ldw	r2,56(r2)
   152f0:	1886983a 	sll	r3,r3,r2
   152f4:	e0bffa17 	ldw	r2,-24(fp)
   152f8:	10c4b03a 	or	r2,r2,r3
   152fc:	e0bffa15 	stw	r2,-24(fp)
   15300:	e0bffb17 	ldw	r2,-20(fp)
   15304:	10c01117 	ldw	r3,68(r2)
   15308:	e0bffe17 	ldw	r2,-8(fp)
   1530c:	1886703a 	and	r3,r3,r2
   15310:	e0bffb17 	ldw	r2,-20(fp)
   15314:	10801017 	ldw	r2,64(r2)
   15318:	1886983a 	sll	r3,r3,r2
   1531c:	e0bffa17 	ldw	r2,-24(fp)
   15320:	10c4b03a 	or	r2,r2,r3
   15324:	e0bffa15 	stw	r2,-24(fp)
   15328:	e0bffb17 	ldw	r2,-20(fp)
   1532c:	10800b17 	ldw	r2,44(r2)
   15330:	1007883a 	mov	r3,r2
   15334:	e0bffa17 	ldw	r2,-24(fp)
   15338:	1885883a 	add	r2,r3,r2
   1533c:	e0fffc03 	ldbu	r3,-16(fp)
   15340:	10c00025 	stbio	r3,0(r2)
   15344:	e03fff15 	stw	zero,-4(fp)
   15348:	e0bfff17 	ldw	r2,-4(fp)
   1534c:	e037883a 	mov	sp,fp
   15350:	df000017 	ldw	fp,0(sp)
   15354:	dec00104 	addi	sp,sp,4
   15358:	f800283a 	ret

0001535c <alt_up_char_buffer_string>:
   1535c:	defff904 	addi	sp,sp,-28
   15360:	df000615 	stw	fp,24(sp)
   15364:	df000604 	addi	fp,sp,24
   15368:	e13ffb15 	stw	r4,-20(fp)
   1536c:	e17ffc15 	stw	r5,-16(fp)
   15370:	e1bffd15 	stw	r6,-12(fp)
   15374:	e1fffe15 	stw	r7,-8(fp)
   15378:	e0bffb17 	ldw	r2,-20(fp)
   1537c:	10c00c17 	ldw	r3,48(r2)
   15380:	e0bffd17 	ldw	r2,-12(fp)
   15384:	10c0042e 	bgeu	r2,r3,15398 <alt_up_char_buffer_string+0x3c>
   15388:	e0bffb17 	ldw	r2,-20(fp)
   1538c:	10c00d17 	ldw	r3,52(r2)
   15390:	e0bffe17 	ldw	r2,-8(fp)
   15394:	10c00336 	bltu	r2,r3,153a4 <alt_up_char_buffer_string+0x48>
   15398:	00bfffc4 	movi	r2,-1
   1539c:	e0bfff15 	stw	r2,-4(fp)
   153a0:	00002e06 	br	1545c <alt_up_char_buffer_string+0x100>
   153a4:	e03ffa15 	stw	zero,-24(fp)
   153a8:	e0bffb17 	ldw	r2,-20(fp)
   153ac:	10801017 	ldw	r2,64(r2)
   153b0:	1007883a 	mov	r3,r2
   153b4:	e0bffe17 	ldw	r2,-8(fp)
   153b8:	10c6983a 	sll	r3,r2,r3
   153bc:	e0bffd17 	ldw	r2,-12(fp)
   153c0:	1885883a 	add	r2,r3,r2
   153c4:	e0bffa15 	stw	r2,-24(fp)
   153c8:	00001c06 	br	1543c <alt_up_char_buffer_string+0xe0>
   153cc:	e0bffb17 	ldw	r2,-20(fp)
   153d0:	10800b17 	ldw	r2,44(r2)
   153d4:	1007883a 	mov	r3,r2
   153d8:	e0bffa17 	ldw	r2,-24(fp)
   153dc:	1889883a 	add	r4,r3,r2
   153e0:	e0bffc17 	ldw	r2,-16(fp)
   153e4:	10800003 	ldbu	r2,0(r2)
   153e8:	10c03fcc 	andi	r3,r2,255
   153ec:	18c0201c 	xori	r3,r3,128
   153f0:	18ffe004 	addi	r3,r3,-128
   153f4:	2005883a 	mov	r2,r4
   153f8:	10c00025 	stbio	r3,0(r2)
   153fc:	e0bffc17 	ldw	r2,-16(fp)
   15400:	10800044 	addi	r2,r2,1
   15404:	e0bffc15 	stw	r2,-16(fp)
   15408:	e0bffd17 	ldw	r2,-12(fp)
   1540c:	10800044 	addi	r2,r2,1
   15410:	e0bffd15 	stw	r2,-12(fp)
   15414:	e0bffb17 	ldw	r2,-20(fp)
   15418:	10c00c17 	ldw	r3,48(r2)
   1541c:	e0bffd17 	ldw	r2,-12(fp)
   15420:	10c00336 	bltu	r2,r3,15430 <alt_up_char_buffer_string+0xd4>
   15424:	00bfffc4 	movi	r2,-1
   15428:	e0bfff15 	stw	r2,-4(fp)
   1542c:	00000b06 	br	1545c <alt_up_char_buffer_string+0x100>
   15430:	e0bffa17 	ldw	r2,-24(fp)
   15434:	10800044 	addi	r2,r2,1
   15438:	e0bffa15 	stw	r2,-24(fp)
   1543c:	e0bffc17 	ldw	r2,-16(fp)
   15440:	10800003 	ldbu	r2,0(r2)
   15444:	10803fcc 	andi	r2,r2,255
   15448:	1080201c 	xori	r2,r2,128
   1544c:	10bfe004 	addi	r2,r2,-128
   15450:	1004c03a 	cmpne	r2,r2,zero
   15454:	103fdd1e 	bne	r2,zero,153cc <alt_up_char_buffer_string+0x70>
   15458:	e03fff15 	stw	zero,-4(fp)
   1545c:	e0bfff17 	ldw	r2,-4(fp)
   15460:	e037883a 	mov	sp,fp
   15464:	df000017 	ldw	fp,0(sp)
   15468:	dec00104 	addi	sp,sp,4
   1546c:	f800283a 	ret

00015470 <alt_up_char_buffer_clear>:
   15470:	defffe04 	addi	sp,sp,-8
   15474:	df000115 	stw	fp,4(sp)
   15478:	df000104 	addi	fp,sp,4
   1547c:	e13fff15 	stw	r4,-4(fp)
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	10800a17 	ldw	r2,40(r2)
   15488:	10800084 	addi	r2,r2,2
   1548c:	1007883a 	mov	r3,r2
   15490:	00800044 	movi	r2,1
   15494:	18800025 	stbio	r2,0(r3)
   15498:	e0bfff17 	ldw	r2,-4(fp)
   1549c:	10800a17 	ldw	r2,40(r2)
   154a0:	10800084 	addi	r2,r2,2
   154a4:	10800023 	ldbuio	r2,0(r2)
   154a8:	1080004c 	andi	r2,r2,1
   154ac:	10803fcc 	andi	r2,r2,255
   154b0:	1004c03a 	cmpne	r2,r2,zero
   154b4:	103ff81e 	bne	r2,zero,15498 <alt_up_char_buffer_clear+0x28>
   154b8:	0005883a 	mov	r2,zero
   154bc:	e037883a 	mov	sp,fp
   154c0:	df000017 	ldw	fp,0(sp)
   154c4:	dec00104 	addi	sp,sp,4
   154c8:	f800283a 	ret

000154cc <alt_up_pixel_buffer_dma_open_dev>:
   154cc:	defffc04 	addi	sp,sp,-16
   154d0:	dfc00315 	stw	ra,12(sp)
   154d4:	df000215 	stw	fp,8(sp)
   154d8:	df000204 	addi	fp,sp,8
   154dc:	e13fff15 	stw	r4,-4(fp)
   154e0:	e13fff17 	ldw	r4,-4(fp)
   154e4:	01420034 	movhi	r5,2048
   154e8:	2949c204 	addi	r5,r5,9992
   154ec:	0016de00 	call	16de0 <alt_find_dev>
   154f0:	e0bffe15 	stw	r2,-8(fp)
   154f4:	e0bffe17 	ldw	r2,-8(fp)
   154f8:	e037883a 	mov	sp,fp
   154fc:	dfc00117 	ldw	ra,4(sp)
   15500:	df000017 	ldw	fp,0(sp)
   15504:	dec00204 	addi	sp,sp,8
   15508:	f800283a 	ret

0001550c <alt_up_pixel_buffer_dma_draw>:
   1550c:	defff904 	addi	sp,sp,-28
   15510:	df000615 	stw	fp,24(sp)
   15514:	df000604 	addi	fp,sp,24
   15518:	e13ffb15 	stw	r4,-20(fp)
   1551c:	e17ffc15 	stw	r5,-16(fp)
   15520:	e1bffd15 	stw	r6,-12(fp)
   15524:	e1fffe15 	stw	r7,-8(fp)
   15528:	e0bffb17 	ldw	r2,-20(fp)
   1552c:	10c00f17 	ldw	r3,60(r2)
   15530:	e0bffd17 	ldw	r2,-12(fp)
   15534:	10c0042e 	bgeu	r2,r3,15548 <alt_up_pixel_buffer_dma_draw+0x3c>
   15538:	e0bffb17 	ldw	r2,-20(fp)
   1553c:	10c01017 	ldw	r3,64(r2)
   15540:	e0bffe17 	ldw	r2,-8(fp)
   15544:	10c00336 	bltu	r2,r3,15554 <alt_up_pixel_buffer_dma_draw+0x48>
   15548:	00bfffc4 	movi	r2,-1
   1554c:	e0bfff15 	stw	r2,-4(fp)
   15550:	00005106 	br	15698 <alt_up_pixel_buffer_dma_draw+0x18c>
   15554:	e03ffa15 	stw	zero,-24(fp)
   15558:	e0bffb17 	ldw	r2,-20(fp)
   1555c:	10800d17 	ldw	r2,52(r2)
   15560:	1004c03a 	cmpne	r2,r2,zero
   15564:	1000151e 	bne	r2,zero,155bc <alt_up_pixel_buffer_dma_draw+0xb0>
   15568:	e0bffb17 	ldw	r2,-20(fp)
   1556c:	10c01217 	ldw	r3,72(r2)
   15570:	e0bffd17 	ldw	r2,-12(fp)
   15574:	1886703a 	and	r3,r3,r2
   15578:	e0bffb17 	ldw	r2,-20(fp)
   1557c:	10801117 	ldw	r2,68(r2)
   15580:	1886983a 	sll	r3,r3,r2
   15584:	e0bffa17 	ldw	r2,-24(fp)
   15588:	10c4b03a 	or	r2,r2,r3
   1558c:	e0bffa15 	stw	r2,-24(fp)
   15590:	e0bffb17 	ldw	r2,-20(fp)
   15594:	10c01417 	ldw	r3,80(r2)
   15598:	e0bffe17 	ldw	r2,-8(fp)
   1559c:	1886703a 	and	r3,r3,r2
   155a0:	e0bffb17 	ldw	r2,-20(fp)
   155a4:	10801317 	ldw	r2,76(r2)
   155a8:	1886983a 	sll	r3,r3,r2
   155ac:	e0bffa17 	ldw	r2,-24(fp)
   155b0:	10c4b03a 	or	r2,r2,r3
   155b4:	e0bffa15 	stw	r2,-24(fp)
   155b8:	00001706 	br	15618 <alt_up_pixel_buffer_dma_draw+0x10c>
   155bc:	e0bffb17 	ldw	r2,-20(fp)
   155c0:	10c01217 	ldw	r3,72(r2)
   155c4:	e0bffd17 	ldw	r2,-12(fp)
   155c8:	1886703a 	and	r3,r3,r2
   155cc:	e0bffb17 	ldw	r2,-20(fp)
   155d0:	10801117 	ldw	r2,68(r2)
   155d4:	1886983a 	sll	r3,r3,r2
   155d8:	e0bffa17 	ldw	r2,-24(fp)
   155dc:	10c5883a 	add	r2,r2,r3
   155e0:	e0bffa15 	stw	r2,-24(fp)
   155e4:	e0bffb17 	ldw	r2,-20(fp)
   155e8:	10c01417 	ldw	r3,80(r2)
   155ec:	e0bffe17 	ldw	r2,-8(fp)
   155f0:	1886703a 	and	r3,r3,r2
   155f4:	e0bffb17 	ldw	r2,-20(fp)
   155f8:	10800f17 	ldw	r2,60(r2)
   155fc:	1887383a 	mul	r3,r3,r2
   15600:	e0bffb17 	ldw	r2,-20(fp)
   15604:	10801117 	ldw	r2,68(r2)
   15608:	1886983a 	sll	r3,r3,r2
   1560c:	e0bffa17 	ldw	r2,-24(fp)
   15610:	10c5883a 	add	r2,r2,r3
   15614:	e0bffa15 	stw	r2,-24(fp)
   15618:	e0bffb17 	ldw	r2,-20(fp)
   1561c:	10800e17 	ldw	r2,56(r2)
   15620:	10800058 	cmpnei	r2,r2,1
   15624:	1000081e 	bne	r2,zero,15648 <alt_up_pixel_buffer_dma_draw+0x13c>
   15628:	e0bffb17 	ldw	r2,-20(fp)
   1562c:	10800c17 	ldw	r2,48(r2)
   15630:	1007883a 	mov	r3,r2
   15634:	e0bffa17 	ldw	r2,-24(fp)
   15638:	1885883a 	add	r2,r3,r2
   1563c:	e0fffc17 	ldw	r3,-16(fp)
   15640:	10c00025 	stbio	r3,0(r2)
   15644:	00001306 	br	15694 <alt_up_pixel_buffer_dma_draw+0x188>
   15648:	e0bffb17 	ldw	r2,-20(fp)
   1564c:	10800e17 	ldw	r2,56(r2)
   15650:	10800098 	cmpnei	r2,r2,2
   15654:	1000081e 	bne	r2,zero,15678 <alt_up_pixel_buffer_dma_draw+0x16c>
   15658:	e0bffb17 	ldw	r2,-20(fp)
   1565c:	10800c17 	ldw	r2,48(r2)
   15660:	1007883a 	mov	r3,r2
   15664:	e0bffa17 	ldw	r2,-24(fp)
   15668:	1885883a 	add	r2,r3,r2
   1566c:	e0fffc17 	ldw	r3,-16(fp)
   15670:	10c0002d 	sthio	r3,0(r2)
   15674:	00000706 	br	15694 <alt_up_pixel_buffer_dma_draw+0x188>
   15678:	e0bffb17 	ldw	r2,-20(fp)
   1567c:	10800c17 	ldw	r2,48(r2)
   15680:	1007883a 	mov	r3,r2
   15684:	e0bffa17 	ldw	r2,-24(fp)
   15688:	1885883a 	add	r2,r3,r2
   1568c:	e0fffc17 	ldw	r3,-16(fp)
   15690:	10c00035 	stwio	r3,0(r2)
   15694:	e03fff15 	stw	zero,-4(fp)
   15698:	e0bfff17 	ldw	r2,-4(fp)
   1569c:	e037883a 	mov	sp,fp
   156a0:	df000017 	ldw	fp,0(sp)
   156a4:	dec00104 	addi	sp,sp,4
   156a8:	f800283a 	ret

000156ac <alt_up_pixel_buffer_dma_change_back_buffer_address>:
   156ac:	defffd04 	addi	sp,sp,-12
   156b0:	df000215 	stw	fp,8(sp)
   156b4:	df000204 	addi	fp,sp,8
   156b8:	e13ffe15 	stw	r4,-8(fp)
   156bc:	e17fff15 	stw	r5,-4(fp)
   156c0:	e0bffe17 	ldw	r2,-8(fp)
   156c4:	10800a17 	ldw	r2,40(r2)
   156c8:	10800104 	addi	r2,r2,4
   156cc:	e0ffff17 	ldw	r3,-4(fp)
   156d0:	10c00035 	stwio	r3,0(r2)
   156d4:	e0bffe17 	ldw	r2,-8(fp)
   156d8:	10800a17 	ldw	r2,40(r2)
   156dc:	10800104 	addi	r2,r2,4
   156e0:	10800037 	ldwio	r2,0(r2)
   156e4:	1007883a 	mov	r3,r2
   156e8:	e0bffe17 	ldw	r2,-8(fp)
   156ec:	10c00c15 	stw	r3,48(r2)
   156f0:	0005883a 	mov	r2,zero
   156f4:	e037883a 	mov	sp,fp
   156f8:	df000017 	ldw	fp,0(sp)
   156fc:	dec00104 	addi	sp,sp,4
   15700:	f800283a 	ret

00015704 <alt_up_pixel_buffer_dma_swap_buffers>:
   15704:	defffe04 	addi	sp,sp,-8
   15708:	df000115 	stw	fp,4(sp)
   1570c:	df000104 	addi	fp,sp,4
   15710:	e13fff15 	stw	r4,-4(fp)
   15714:	e0bfff17 	ldw	r2,-4(fp)
   15718:	11000c17 	ldw	r4,48(r2)
   1571c:	e0bfff17 	ldw	r2,-4(fp)
   15720:	10800a17 	ldw	r2,40(r2)
   15724:	1007883a 	mov	r3,r2
   15728:	00800044 	movi	r2,1
   1572c:	18800035 	stwio	r2,0(r3)
   15730:	e0bfff17 	ldw	r2,-4(fp)
   15734:	10c00b17 	ldw	r3,44(r2)
   15738:	e0bfff17 	ldw	r2,-4(fp)
   1573c:	10c00c15 	stw	r3,48(r2)
   15740:	e0bfff17 	ldw	r2,-4(fp)
   15744:	11000b15 	stw	r4,44(r2)
   15748:	0005883a 	mov	r2,zero
   1574c:	e037883a 	mov	sp,fp
   15750:	df000017 	ldw	fp,0(sp)
   15754:	dec00104 	addi	sp,sp,4
   15758:	f800283a 	ret

0001575c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
   1575c:	defffe04 	addi	sp,sp,-8
   15760:	df000115 	stw	fp,4(sp)
   15764:	df000104 	addi	fp,sp,4
   15768:	e13fff15 	stw	r4,-4(fp)
   1576c:	e0bfff17 	ldw	r2,-4(fp)
   15770:	10800a17 	ldw	r2,40(r2)
   15774:	10800304 	addi	r2,r2,12
   15778:	10800037 	ldwio	r2,0(r2)
   1577c:	1080004c 	andi	r2,r2,1
   15780:	e037883a 	mov	sp,fp
   15784:	df000017 	ldw	fp,0(sp)
   15788:	dec00104 	addi	sp,sp,4
   1578c:	f800283a 	ret

00015790 <alt_up_pixel_buffer_dma_clear_screen>:
   15790:	defff604 	addi	sp,sp,-40
   15794:	df000915 	stw	fp,36(sp)
   15798:	df000904 	addi	fp,sp,36
   1579c:	e13ff715 	stw	r4,-36(fp)
   157a0:	e17ff815 	stw	r5,-32(fp)
   157a4:	e0bff817 	ldw	r2,-32(fp)
   157a8:	10800058 	cmpnei	r2,r2,1
   157ac:	1000041e 	bne	r2,zero,157c0 <alt_up_pixel_buffer_dma_clear_screen+0x30>
   157b0:	e0bff717 	ldw	r2,-36(fp)
   157b4:	10800c17 	ldw	r2,48(r2)
   157b8:	e0bfff15 	stw	r2,-4(fp)
   157bc:	00000306 	br	157cc <alt_up_pixel_buffer_dma_clear_screen+0x3c>
   157c0:	e0bff717 	ldw	r2,-36(fp)
   157c4:	10800b17 	ldw	r2,44(r2)
   157c8:	e0bfff15 	stw	r2,-4(fp)
   157cc:	e0bff717 	ldw	r2,-36(fp)
   157d0:	10800f17 	ldw	r2,60(r2)
   157d4:	e0bffe15 	stw	r2,-8(fp)
   157d8:	e0bff717 	ldw	r2,-36(fp)
   157dc:	10800e17 	ldw	r2,56(r2)
   157e0:	10800098 	cmpnei	r2,r2,2
   157e4:	1000051e 	bne	r2,zero,157fc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
   157e8:	e0fffe17 	ldw	r3,-8(fp)
   157ec:	e0fffe17 	ldw	r3,-8(fp)
   157f0:	18c5883a 	add	r2,r3,r3
   157f4:	e0bffe15 	stw	r2,-8(fp)
   157f8:	00000506 	br	15810 <alt_up_pixel_buffer_dma_clear_screen+0x80>
   157fc:	e13ffe17 	ldw	r4,-8(fp)
   15800:	e13ffe17 	ldw	r4,-8(fp)
   15804:	2105883a 	add	r2,r4,r4
   15808:	1085883a 	add	r2,r2,r2
   1580c:	e0bffe15 	stw	r2,-8(fp)
   15810:	e0bff717 	ldw	r2,-36(fp)
   15814:	10801017 	ldw	r2,64(r2)
   15818:	e0bffd15 	stw	r2,-12(fp)
   1581c:	e0bff717 	ldw	r2,-36(fp)
   15820:	10800d17 	ldw	r2,52(r2)
   15824:	1004c03a 	cmpne	r2,r2,zero
   15828:	10001e1e 	bne	r2,zero,158a4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
   1582c:	e0bff717 	ldw	r2,-36(fp)
   15830:	10801317 	ldw	r2,76(r2)
   15834:	e0bffa15 	stw	r2,-24(fp)
   15838:	e03ffb15 	stw	zero,-20(fp)
   1583c:	00001506 	br	15894 <alt_up_pixel_buffer_dma_clear_screen+0x104>
   15840:	e03ffc15 	stw	zero,-16(fp)
   15844:	00000706 	br	15864 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
   15848:	e0ffff17 	ldw	r3,-4(fp)
   1584c:	e0bffc17 	ldw	r2,-16(fp)
   15850:	1885883a 	add	r2,r3,r2
   15854:	10000035 	stwio	zero,0(r2)
   15858:	e0bffc17 	ldw	r2,-16(fp)
   1585c:	10800104 	addi	r2,r2,4
   15860:	e0bffc15 	stw	r2,-16(fp)
   15864:	e0fffc17 	ldw	r3,-16(fp)
   15868:	e13ffe17 	ldw	r4,-8(fp)
   1586c:	193ff636 	bltu	r3,r4,15848 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
   15870:	e0fffa17 	ldw	r3,-24(fp)
   15874:	00800044 	movi	r2,1
   15878:	10c4983a 	sll	r2,r2,r3
   1587c:	e0ffff17 	ldw	r3,-4(fp)
   15880:	1887883a 	add	r3,r3,r2
   15884:	e0ffff15 	stw	r3,-4(fp)
   15888:	e13ffb17 	ldw	r4,-20(fp)
   1588c:	21000044 	addi	r4,r4,1
   15890:	e13ffb15 	stw	r4,-20(fp)
   15894:	e0bffb17 	ldw	r2,-20(fp)
   15898:	e0fffd17 	ldw	r3,-12(fp)
   1589c:	10ffe836 	bltu	r2,r3,15840 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   158a0:	00001006 	br	158e4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
   158a4:	e13ffd17 	ldw	r4,-12(fp)
   158a8:	e0bffe17 	ldw	r2,-8(fp)
   158ac:	2089383a 	mul	r4,r4,r2
   158b0:	e13ffd15 	stw	r4,-12(fp)
   158b4:	e03ff915 	stw	zero,-28(fp)
   158b8:	00000706 	br	158d8 <alt_up_pixel_buffer_dma_clear_screen+0x148>
   158bc:	e0ffff17 	ldw	r3,-4(fp)
   158c0:	e0bff917 	ldw	r2,-28(fp)
   158c4:	1885883a 	add	r2,r3,r2
   158c8:	10000035 	stwio	zero,0(r2)
   158cc:	e0fff917 	ldw	r3,-28(fp)
   158d0:	18c00104 	addi	r3,r3,4
   158d4:	e0fff915 	stw	r3,-28(fp)
   158d8:	e0bff917 	ldw	r2,-28(fp)
   158dc:	e13ffd17 	ldw	r4,-12(fp)
   158e0:	113ff636 	bltu	r2,r4,158bc <alt_up_pixel_buffer_dma_clear_screen+0x12c>
   158e4:	e037883a 	mov	sp,fp
   158e8:	df000017 	ldw	fp,0(sp)
   158ec:	dec00104 	addi	sp,sp,4
   158f0:	f800283a 	ret

000158f4 <alt_up_pixel_buffer_dma_draw_box>:
   158f4:	deffed04 	addi	sp,sp,-76
   158f8:	df001215 	stw	fp,72(sp)
   158fc:	df001204 	addi	fp,sp,72
   15900:	e13fee15 	stw	r4,-72(fp)
   15904:	e17fef15 	stw	r5,-68(fp)
   15908:	e1bff015 	stw	r6,-64(fp)
   1590c:	e1fff115 	stw	r7,-60(fp)
   15910:	e0bfee17 	ldw	r2,-72(fp)
   15914:	10800f17 	ldw	r2,60(r2)
   15918:	e0bffe15 	stw	r2,-8(fp)
   1591c:	e0bfee17 	ldw	r2,-72(fp)
   15920:	10801017 	ldw	r2,64(r2)
   15924:	e0bffd15 	stw	r2,-12(fp)
   15928:	e0bfef17 	ldw	r2,-68(fp)
   1592c:	e0bffb15 	stw	r2,-20(fp)
   15930:	e0fff117 	ldw	r3,-60(fp)
   15934:	e0fffa15 	stw	r3,-24(fp)
   15938:	e13ff017 	ldw	r4,-64(fp)
   1593c:	e13ff915 	stw	r4,-28(fp)
   15940:	e0800117 	ldw	r2,4(fp)
   15944:	e0bff815 	stw	r2,-32(fp)
   15948:	e0c00217 	ldw	r3,8(fp)
   1594c:	e0fff715 	stw	r3,-36(fp)
   15950:	e13ffa17 	ldw	r4,-24(fp)
   15954:	e0bffb17 	ldw	r2,-20(fp)
   15958:	2080062e 	bgeu	r4,r2,15974 <alt_up_pixel_buffer_dma_draw_box+0x80>
   1595c:	e0fffb17 	ldw	r3,-20(fp)
   15960:	e0fffc15 	stw	r3,-16(fp)
   15964:	e13ffa17 	ldw	r4,-24(fp)
   15968:	e13ffb15 	stw	r4,-20(fp)
   1596c:	e0bffc17 	ldw	r2,-16(fp)
   15970:	e0bffa15 	stw	r2,-24(fp)
   15974:	e0fff817 	ldw	r3,-32(fp)
   15978:	e13ff917 	ldw	r4,-28(fp)
   1597c:	1900062e 	bgeu	r3,r4,15998 <alt_up_pixel_buffer_dma_draw_box+0xa4>
   15980:	e0bff917 	ldw	r2,-28(fp)
   15984:	e0bffc15 	stw	r2,-16(fp)
   15988:	e0fff817 	ldw	r3,-32(fp)
   1598c:	e0fff915 	stw	r3,-28(fp)
   15990:	e13ffc17 	ldw	r4,-16(fp)
   15994:	e13ff815 	stw	r4,-32(fp)
   15998:	e0bffb17 	ldw	r2,-20(fp)
   1599c:	e0fffe17 	ldw	r3,-8(fp)
   159a0:	10c10d2e 	bgeu	r2,r3,15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   159a4:	e13ff917 	ldw	r4,-28(fp)
   159a8:	e0bffd17 	ldw	r2,-12(fp)
   159ac:	20800136 	bltu	r4,r2,159b4 <alt_up_pixel_buffer_dma_draw_box+0xc0>
   159b0:	00010906 	br	15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   159b4:	e0fffa17 	ldw	r3,-24(fp)
   159b8:	e13ffe17 	ldw	r4,-8(fp)
   159bc:	19000336 	bltu	r3,r4,159cc <alt_up_pixel_buffer_dma_draw_box+0xd8>
   159c0:	e0bffe17 	ldw	r2,-8(fp)
   159c4:	10bfffc4 	addi	r2,r2,-1
   159c8:	e0bffa15 	stw	r2,-24(fp)
   159cc:	e0fff817 	ldw	r3,-32(fp)
   159d0:	e13ffd17 	ldw	r4,-12(fp)
   159d4:	19000336 	bltu	r3,r4,159e4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
   159d8:	e0bffd17 	ldw	r2,-12(fp)
   159dc:	10bfffc4 	addi	r2,r2,-1
   159e0:	e0bff815 	stw	r2,-32(fp)
   159e4:	e0800317 	ldw	r2,12(fp)
   159e8:	10800058 	cmpnei	r2,r2,1
   159ec:	1000041e 	bne	r2,zero,15a00 <alt_up_pixel_buffer_dma_draw_box+0x10c>
   159f0:	e0bfee17 	ldw	r2,-72(fp)
   159f4:	10800c17 	ldw	r2,48(r2)
   159f8:	e0bfff15 	stw	r2,-4(fp)
   159fc:	00000306 	br	15a0c <alt_up_pixel_buffer_dma_draw_box+0x118>
   15a00:	e0bfee17 	ldw	r2,-72(fp)
   15a04:	10800b17 	ldw	r2,44(r2)
   15a08:	e0bfff15 	stw	r2,-4(fp)
   15a0c:	e0bfee17 	ldw	r2,-72(fp)
   15a10:	10800d17 	ldw	r2,52(r2)
   15a14:	1004c03a 	cmpne	r2,r2,zero
   15a18:	1000721e 	bne	r2,zero,15be4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
   15a1c:	e0bfee17 	ldw	r2,-72(fp)
   15a20:	10801317 	ldw	r2,76(r2)
   15a24:	e0bff415 	stw	r2,-48(fp)
   15a28:	e0bff417 	ldw	r2,-48(fp)
   15a2c:	e0fff917 	ldw	r3,-28(fp)
   15a30:	1884983a 	sll	r2,r3,r2
   15a34:	e13fff17 	ldw	r4,-4(fp)
   15a38:	2089883a 	add	r4,r4,r2
   15a3c:	e13fff15 	stw	r4,-4(fp)
   15a40:	e0bfee17 	ldw	r2,-72(fp)
   15a44:	10800e17 	ldw	r2,56(r2)
   15a48:	10800058 	cmpnei	r2,r2,1
   15a4c:	10001e1e 	bne	r2,zero,15ac8 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
   15a50:	e0bff917 	ldw	r2,-28(fp)
   15a54:	e0bff515 	stw	r2,-44(fp)
   15a58:	00001706 	br	15ab8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
   15a5c:	e0fffb17 	ldw	r3,-20(fp)
   15a60:	e0fff615 	stw	r3,-40(fp)
   15a64:	00000806 	br	15a88 <alt_up_pixel_buffer_dma_draw_box+0x194>
   15a68:	e0ffff17 	ldw	r3,-4(fp)
   15a6c:	e0bff617 	ldw	r2,-40(fp)
   15a70:	1885883a 	add	r2,r3,r2
   15a74:	e0fff717 	ldw	r3,-36(fp)
   15a78:	10c00025 	stbio	r3,0(r2)
   15a7c:	e13ff617 	ldw	r4,-40(fp)
   15a80:	21000044 	addi	r4,r4,1
   15a84:	e13ff615 	stw	r4,-40(fp)
   15a88:	e0bffa17 	ldw	r2,-24(fp)
   15a8c:	e0fff617 	ldw	r3,-40(fp)
   15a90:	10fff52e 	bgeu	r2,r3,15a68 <alt_up_pixel_buffer_dma_draw_box+0x174>
   15a94:	e0fff417 	ldw	r3,-48(fp)
   15a98:	00800044 	movi	r2,1
   15a9c:	10c4983a 	sll	r2,r2,r3
   15aa0:	e13fff17 	ldw	r4,-4(fp)
   15aa4:	2089883a 	add	r4,r4,r2
   15aa8:	e13fff15 	stw	r4,-4(fp)
   15aac:	e0bff517 	ldw	r2,-44(fp)
   15ab0:	10800044 	addi	r2,r2,1
   15ab4:	e0bff515 	stw	r2,-44(fp)
   15ab8:	e0fff817 	ldw	r3,-32(fp)
   15abc:	e13ff517 	ldw	r4,-44(fp)
   15ac0:	193fe62e 	bgeu	r3,r4,15a5c <alt_up_pixel_buffer_dma_draw_box+0x168>
   15ac4:	0000c406 	br	15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   15ac8:	e0bfee17 	ldw	r2,-72(fp)
   15acc:	10800e17 	ldw	r2,56(r2)
   15ad0:	10800098 	cmpnei	r2,r2,2
   15ad4:	1000211e 	bne	r2,zero,15b5c <alt_up_pixel_buffer_dma_draw_box+0x268>
   15ad8:	e0bff917 	ldw	r2,-28(fp)
   15adc:	e0bff515 	stw	r2,-44(fp)
   15ae0:	00001a06 	br	15b4c <alt_up_pixel_buffer_dma_draw_box+0x258>
   15ae4:	e0fffb17 	ldw	r3,-20(fp)
   15ae8:	e0fff615 	stw	r3,-40(fp)
   15aec:	00000b06 	br	15b1c <alt_up_pixel_buffer_dma_draw_box+0x228>
   15af0:	e13ff617 	ldw	r4,-40(fp)
   15af4:	e13ff617 	ldw	r4,-40(fp)
   15af8:	2105883a 	add	r2,r4,r4
   15afc:	1007883a 	mov	r3,r2
   15b00:	e0bfff17 	ldw	r2,-4(fp)
   15b04:	1885883a 	add	r2,r3,r2
   15b08:	e0fff717 	ldw	r3,-36(fp)
   15b0c:	10c0002d 	sthio	r3,0(r2)
   15b10:	e0bff617 	ldw	r2,-40(fp)
   15b14:	10800044 	addi	r2,r2,1
   15b18:	e0bff615 	stw	r2,-40(fp)
   15b1c:	e0fffa17 	ldw	r3,-24(fp)
   15b20:	e13ff617 	ldw	r4,-40(fp)
   15b24:	193ff22e 	bgeu	r3,r4,15af0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
   15b28:	e0fff417 	ldw	r3,-48(fp)
   15b2c:	00800044 	movi	r2,1
   15b30:	10c4983a 	sll	r2,r2,r3
   15b34:	e0ffff17 	ldw	r3,-4(fp)
   15b38:	1887883a 	add	r3,r3,r2
   15b3c:	e0ffff15 	stw	r3,-4(fp)
   15b40:	e13ff517 	ldw	r4,-44(fp)
   15b44:	21000044 	addi	r4,r4,1
   15b48:	e13ff515 	stw	r4,-44(fp)
   15b4c:	e0bff817 	ldw	r2,-32(fp)
   15b50:	e0fff517 	ldw	r3,-44(fp)
   15b54:	10ffe32e 	bgeu	r2,r3,15ae4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
   15b58:	00009f06 	br	15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   15b5c:	e13ff917 	ldw	r4,-28(fp)
   15b60:	e13ff515 	stw	r4,-44(fp)
   15b64:	00001b06 	br	15bd4 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
   15b68:	e0bffb17 	ldw	r2,-20(fp)
   15b6c:	e0bff615 	stw	r2,-40(fp)
   15b70:	00000c06 	br	15ba4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
   15b74:	e0fff617 	ldw	r3,-40(fp)
   15b78:	e0fff617 	ldw	r3,-40(fp)
   15b7c:	18c5883a 	add	r2,r3,r3
   15b80:	1085883a 	add	r2,r2,r2
   15b84:	1007883a 	mov	r3,r2
   15b88:	e0bfff17 	ldw	r2,-4(fp)
   15b8c:	1885883a 	add	r2,r3,r2
   15b90:	e0fff717 	ldw	r3,-36(fp)
   15b94:	10c00035 	stwio	r3,0(r2)
   15b98:	e13ff617 	ldw	r4,-40(fp)
   15b9c:	21000044 	addi	r4,r4,1
   15ba0:	e13ff615 	stw	r4,-40(fp)
   15ba4:	e0bffa17 	ldw	r2,-24(fp)
   15ba8:	e0fff617 	ldw	r3,-40(fp)
   15bac:	10fff12e 	bgeu	r2,r3,15b74 <alt_up_pixel_buffer_dma_draw_box+0x280>
   15bb0:	e0fff417 	ldw	r3,-48(fp)
   15bb4:	00800044 	movi	r2,1
   15bb8:	10c4983a 	sll	r2,r2,r3
   15bbc:	e13fff17 	ldw	r4,-4(fp)
   15bc0:	2089883a 	add	r4,r4,r2
   15bc4:	e13fff15 	stw	r4,-4(fp)
   15bc8:	e0bff517 	ldw	r2,-44(fp)
   15bcc:	10800044 	addi	r2,r2,1
   15bd0:	e0bff515 	stw	r2,-44(fp)
   15bd4:	e0fff817 	ldw	r3,-32(fp)
   15bd8:	e13ff517 	ldw	r4,-44(fp)
   15bdc:	193fe22e 	bgeu	r3,r4,15b68 <alt_up_pixel_buffer_dma_draw_box+0x274>
   15be0:	00007d06 	br	15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   15be4:	e0bfee17 	ldw	r2,-72(fp)
   15be8:	10800e17 	ldw	r2,56(r2)
   15bec:	10800058 	cmpnei	r2,r2,1
   15bf0:	1000221e 	bne	r2,zero,15c7c <alt_up_pixel_buffer_dma_draw_box+0x388>
   15bf4:	e0fff917 	ldw	r3,-28(fp)
   15bf8:	e13ffe17 	ldw	r4,-8(fp)
   15bfc:	1905383a 	mul	r2,r3,r4
   15c00:	e0ffff17 	ldw	r3,-4(fp)
   15c04:	1887883a 	add	r3,r3,r2
   15c08:	e0ffff15 	stw	r3,-4(fp)
   15c0c:	e13ff917 	ldw	r4,-28(fp)
   15c10:	e13ff215 	stw	r4,-56(fp)
   15c14:	00001506 	br	15c6c <alt_up_pixel_buffer_dma_draw_box+0x378>
   15c18:	e0bffb17 	ldw	r2,-20(fp)
   15c1c:	e0bff315 	stw	r2,-52(fp)
   15c20:	00000806 	br	15c44 <alt_up_pixel_buffer_dma_draw_box+0x350>
   15c24:	e0ffff17 	ldw	r3,-4(fp)
   15c28:	e0bff317 	ldw	r2,-52(fp)
   15c2c:	1885883a 	add	r2,r3,r2
   15c30:	e0fff717 	ldw	r3,-36(fp)
   15c34:	10c00025 	stbio	r3,0(r2)
   15c38:	e0fff317 	ldw	r3,-52(fp)
   15c3c:	18c00044 	addi	r3,r3,1
   15c40:	e0fff315 	stw	r3,-52(fp)
   15c44:	e13ffa17 	ldw	r4,-24(fp)
   15c48:	e0bff317 	ldw	r2,-52(fp)
   15c4c:	20bff52e 	bgeu	r4,r2,15c24 <alt_up_pixel_buffer_dma_draw_box+0x330>
   15c50:	e0ffff17 	ldw	r3,-4(fp)
   15c54:	e13ffe17 	ldw	r4,-8(fp)
   15c58:	1907883a 	add	r3,r3,r4
   15c5c:	e0ffff15 	stw	r3,-4(fp)
   15c60:	e0bff217 	ldw	r2,-56(fp)
   15c64:	10800044 	addi	r2,r2,1
   15c68:	e0bff215 	stw	r2,-56(fp)
   15c6c:	e0fff817 	ldw	r3,-32(fp)
   15c70:	e13ff217 	ldw	r4,-56(fp)
   15c74:	193fe82e 	bgeu	r3,r4,15c18 <alt_up_pixel_buffer_dma_draw_box+0x324>
   15c78:	00005706 	br	15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   15c7c:	e0bfee17 	ldw	r2,-72(fp)
   15c80:	10800e17 	ldw	r2,56(r2)
   15c84:	10800098 	cmpnei	r2,r2,2
   15c88:	1000291e 	bne	r2,zero,15d30 <alt_up_pixel_buffer_dma_draw_box+0x43c>
   15c8c:	e0fffe17 	ldw	r3,-8(fp)
   15c90:	e0fffe17 	ldw	r3,-8(fp)
   15c94:	18c5883a 	add	r2,r3,r3
   15c98:	e0bffe15 	stw	r2,-8(fp)
   15c9c:	e13ff917 	ldw	r4,-28(fp)
   15ca0:	e0fffe17 	ldw	r3,-8(fp)
   15ca4:	20c5383a 	mul	r2,r4,r3
   15ca8:	e13fff17 	ldw	r4,-4(fp)
   15cac:	2089883a 	add	r4,r4,r2
   15cb0:	e13fff15 	stw	r4,-4(fp)
   15cb4:	e0bff917 	ldw	r2,-28(fp)
   15cb8:	e0bff215 	stw	r2,-56(fp)
   15cbc:	00001806 	br	15d20 <alt_up_pixel_buffer_dma_draw_box+0x42c>
   15cc0:	e0fffb17 	ldw	r3,-20(fp)
   15cc4:	e0fff315 	stw	r3,-52(fp)
   15cc8:	00000b06 	br	15cf8 <alt_up_pixel_buffer_dma_draw_box+0x404>
   15ccc:	e13ff317 	ldw	r4,-52(fp)
   15cd0:	e13ff317 	ldw	r4,-52(fp)
   15cd4:	2105883a 	add	r2,r4,r4
   15cd8:	1007883a 	mov	r3,r2
   15cdc:	e0bfff17 	ldw	r2,-4(fp)
   15ce0:	1885883a 	add	r2,r3,r2
   15ce4:	e0fff717 	ldw	r3,-36(fp)
   15ce8:	10c0002d 	sthio	r3,0(r2)
   15cec:	e0bff317 	ldw	r2,-52(fp)
   15cf0:	10800044 	addi	r2,r2,1
   15cf4:	e0bff315 	stw	r2,-52(fp)
   15cf8:	e0fffa17 	ldw	r3,-24(fp)
   15cfc:	e13ff317 	ldw	r4,-52(fp)
   15d00:	193ff22e 	bgeu	r3,r4,15ccc <alt_up_pixel_buffer_dma_draw_box+0x3d8>
   15d04:	e0bfff17 	ldw	r2,-4(fp)
   15d08:	e0fffe17 	ldw	r3,-8(fp)
   15d0c:	10c5883a 	add	r2,r2,r3
   15d10:	e0bfff15 	stw	r2,-4(fp)
   15d14:	e13ff217 	ldw	r4,-56(fp)
   15d18:	21000044 	addi	r4,r4,1
   15d1c:	e13ff215 	stw	r4,-56(fp)
   15d20:	e0bff817 	ldw	r2,-32(fp)
   15d24:	e0fff217 	ldw	r3,-56(fp)
   15d28:	10ffe52e 	bgeu	r2,r3,15cc0 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   15d2c:	00002a06 	br	15dd8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   15d30:	e13ffe17 	ldw	r4,-8(fp)
   15d34:	e13ffe17 	ldw	r4,-8(fp)
   15d38:	2105883a 	add	r2,r4,r4
   15d3c:	1085883a 	add	r2,r2,r2
   15d40:	e0bffe15 	stw	r2,-8(fp)
   15d44:	e0fff917 	ldw	r3,-28(fp)
   15d48:	e13ffe17 	ldw	r4,-8(fp)
   15d4c:	1905383a 	mul	r2,r3,r4
   15d50:	e0ffff17 	ldw	r3,-4(fp)
   15d54:	1887883a 	add	r3,r3,r2
   15d58:	e0ffff15 	stw	r3,-4(fp)
   15d5c:	e13ff917 	ldw	r4,-28(fp)
   15d60:	e13ff215 	stw	r4,-56(fp)
   15d64:	00001906 	br	15dcc <alt_up_pixel_buffer_dma_draw_box+0x4d8>
   15d68:	e0bffb17 	ldw	r2,-20(fp)
   15d6c:	e0bff315 	stw	r2,-52(fp)
   15d70:	00000c06 	br	15da4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
   15d74:	e0fff317 	ldw	r3,-52(fp)
   15d78:	e0fff317 	ldw	r3,-52(fp)
   15d7c:	18c5883a 	add	r2,r3,r3
   15d80:	1085883a 	add	r2,r2,r2
   15d84:	1007883a 	mov	r3,r2
   15d88:	e0bfff17 	ldw	r2,-4(fp)
   15d8c:	1885883a 	add	r2,r3,r2
   15d90:	e0fff717 	ldw	r3,-36(fp)
   15d94:	10c00035 	stwio	r3,0(r2)
   15d98:	e13ff317 	ldw	r4,-52(fp)
   15d9c:	21000044 	addi	r4,r4,1
   15da0:	e13ff315 	stw	r4,-52(fp)
   15da4:	e0bffa17 	ldw	r2,-24(fp)
   15da8:	e0fff317 	ldw	r3,-52(fp)
   15dac:	10fff12e 	bgeu	r2,r3,15d74 <alt_up_pixel_buffer_dma_draw_box+0x480>
   15db0:	e13fff17 	ldw	r4,-4(fp)
   15db4:	e0bffe17 	ldw	r2,-8(fp)
   15db8:	2089883a 	add	r4,r4,r2
   15dbc:	e13fff15 	stw	r4,-4(fp)
   15dc0:	e0fff217 	ldw	r3,-56(fp)
   15dc4:	18c00044 	addi	r3,r3,1
   15dc8:	e0fff215 	stw	r3,-56(fp)
   15dcc:	e13ff817 	ldw	r4,-32(fp)
   15dd0:	e0bff217 	ldw	r2,-56(fp)
   15dd4:	20bfe42e 	bgeu	r4,r2,15d68 <alt_up_pixel_buffer_dma_draw_box+0x474>
   15dd8:	e037883a 	mov	sp,fp
   15ddc:	df000017 	ldw	fp,0(sp)
   15de0:	dec00104 	addi	sp,sp,4
   15de4:	f800283a 	ret

00015de8 <alt_up_pixel_buffer_dma_draw_hline>:
   15de8:	defff204 	addi	sp,sp,-56
   15dec:	df000d15 	stw	fp,52(sp)
   15df0:	df000d04 	addi	fp,sp,52
   15df4:	e13ff315 	stw	r4,-52(fp)
   15df8:	e17ff415 	stw	r5,-48(fp)
   15dfc:	e1bff515 	stw	r6,-44(fp)
   15e00:	e1fff615 	stw	r7,-40(fp)
   15e04:	e0bff317 	ldw	r2,-52(fp)
   15e08:	10800f17 	ldw	r2,60(r2)
   15e0c:	e0bffe15 	stw	r2,-8(fp)
   15e10:	e0bff317 	ldw	r2,-52(fp)
   15e14:	10801017 	ldw	r2,64(r2)
   15e18:	e0bffd15 	stw	r2,-12(fp)
   15e1c:	e0bff417 	ldw	r2,-48(fp)
   15e20:	e0bffc15 	stw	r2,-16(fp)
   15e24:	e0fff517 	ldw	r3,-44(fp)
   15e28:	e0fffb15 	stw	r3,-20(fp)
   15e2c:	e13ff617 	ldw	r4,-40(fp)
   15e30:	e13ffa15 	stw	r4,-24(fp)
   15e34:	e0800117 	ldw	r2,4(fp)
   15e38:	e0bff915 	stw	r2,-28(fp)
   15e3c:	e0fffb17 	ldw	r3,-20(fp)
   15e40:	e13ffc17 	ldw	r4,-16(fp)
   15e44:	1900042e 	bgeu	r3,r4,15e58 <alt_up_pixel_buffer_dma_draw_hline+0x70>
   15e48:	e0bffc17 	ldw	r2,-16(fp)
   15e4c:	e0fffb17 	ldw	r3,-20(fp)
   15e50:	e0fffc15 	stw	r3,-16(fp)
   15e54:	e0bffb15 	stw	r2,-20(fp)
   15e58:	e13ffc17 	ldw	r4,-16(fp)
   15e5c:	e0bffe17 	ldw	r2,-8(fp)
   15e60:	2080b12e 	bgeu	r4,r2,16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   15e64:	e0fffa17 	ldw	r3,-24(fp)
   15e68:	e13ffd17 	ldw	r4,-12(fp)
   15e6c:	19000136 	bltu	r3,r4,15e74 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
   15e70:	0000ad06 	br	16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   15e74:	e0bffb17 	ldw	r2,-20(fp)
   15e78:	e0fffe17 	ldw	r3,-8(fp)
   15e7c:	10c00336 	bltu	r2,r3,15e8c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
   15e80:	e13ffe17 	ldw	r4,-8(fp)
   15e84:	213fffc4 	addi	r4,r4,-1
   15e88:	e13ffb15 	stw	r4,-20(fp)
   15e8c:	e0800217 	ldw	r2,8(fp)
   15e90:	10800058 	cmpnei	r2,r2,1
   15e94:	1000041e 	bne	r2,zero,15ea8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
   15e98:	e0bff317 	ldw	r2,-52(fp)
   15e9c:	10800c17 	ldw	r2,48(r2)
   15ea0:	e0bfff15 	stw	r2,-4(fp)
   15ea4:	00000306 	br	15eb4 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
   15ea8:	e0bff317 	ldw	r2,-52(fp)
   15eac:	10800b17 	ldw	r2,44(r2)
   15eb0:	e0bfff15 	stw	r2,-4(fp)
   15eb4:	e0bff317 	ldw	r2,-52(fp)
   15eb8:	10800d17 	ldw	r2,52(r2)
   15ebc:	1004c03a 	cmpne	r2,r2,zero
   15ec0:	1000431e 	bne	r2,zero,15fd0 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
   15ec4:	e0bff317 	ldw	r2,-52(fp)
   15ec8:	10801317 	ldw	r2,76(r2)
   15ecc:	e0fffa17 	ldw	r3,-24(fp)
   15ed0:	1884983a 	sll	r2,r3,r2
   15ed4:	e13fff17 	ldw	r4,-4(fp)
   15ed8:	2089883a 	add	r4,r4,r2
   15edc:	e13fff15 	stw	r4,-4(fp)
   15ee0:	e0bff317 	ldw	r2,-52(fp)
   15ee4:	10800e17 	ldw	r2,56(r2)
   15ee8:	10800058 	cmpnei	r2,r2,1
   15eec:	10000f1e 	bne	r2,zero,15f2c <alt_up_pixel_buffer_dma_draw_hline+0x144>
   15ef0:	e0bffc17 	ldw	r2,-16(fp)
   15ef4:	e0bff815 	stw	r2,-32(fp)
   15ef8:	00000806 	br	15f1c <alt_up_pixel_buffer_dma_draw_hline+0x134>
   15efc:	e0ffff17 	ldw	r3,-4(fp)
   15f00:	e0bff817 	ldw	r2,-32(fp)
   15f04:	1885883a 	add	r2,r3,r2
   15f08:	e0fff917 	ldw	r3,-28(fp)
   15f0c:	10c00025 	stbio	r3,0(r2)
   15f10:	e0fff817 	ldw	r3,-32(fp)
   15f14:	18c00044 	addi	r3,r3,1
   15f18:	e0fff815 	stw	r3,-32(fp)
   15f1c:	e13ffb17 	ldw	r4,-20(fp)
   15f20:	e0bff817 	ldw	r2,-32(fp)
   15f24:	20bff52e 	bgeu	r4,r2,15efc <alt_up_pixel_buffer_dma_draw_hline+0x114>
   15f28:	00007f06 	br	16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   15f2c:	e0bff317 	ldw	r2,-52(fp)
   15f30:	10800e17 	ldw	r2,56(r2)
   15f34:	10800098 	cmpnei	r2,r2,2
   15f38:	1000121e 	bne	r2,zero,15f84 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
   15f3c:	e0fffc17 	ldw	r3,-16(fp)
   15f40:	e0fff815 	stw	r3,-32(fp)
   15f44:	00000b06 	br	15f74 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
   15f48:	e13ff817 	ldw	r4,-32(fp)
   15f4c:	e13ff817 	ldw	r4,-32(fp)
   15f50:	2105883a 	add	r2,r4,r4
   15f54:	1007883a 	mov	r3,r2
   15f58:	e0bfff17 	ldw	r2,-4(fp)
   15f5c:	1885883a 	add	r2,r3,r2
   15f60:	e0fff917 	ldw	r3,-28(fp)
   15f64:	10c0002d 	sthio	r3,0(r2)
   15f68:	e0bff817 	ldw	r2,-32(fp)
   15f6c:	10800044 	addi	r2,r2,1
   15f70:	e0bff815 	stw	r2,-32(fp)
   15f74:	e0fffb17 	ldw	r3,-20(fp)
   15f78:	e13ff817 	ldw	r4,-32(fp)
   15f7c:	193ff22e 	bgeu	r3,r4,15f48 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   15f80:	00006906 	br	16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   15f84:	e0bffc17 	ldw	r2,-16(fp)
   15f88:	e0bff815 	stw	r2,-32(fp)
   15f8c:	00000c06 	br	15fc0 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
   15f90:	e0fff817 	ldw	r3,-32(fp)
   15f94:	e0fff817 	ldw	r3,-32(fp)
   15f98:	18c5883a 	add	r2,r3,r3
   15f9c:	1085883a 	add	r2,r2,r2
   15fa0:	1007883a 	mov	r3,r2
   15fa4:	e0bfff17 	ldw	r2,-4(fp)
   15fa8:	1885883a 	add	r2,r3,r2
   15fac:	e0fff917 	ldw	r3,-28(fp)
   15fb0:	10c00035 	stwio	r3,0(r2)
   15fb4:	e13ff817 	ldw	r4,-32(fp)
   15fb8:	21000044 	addi	r4,r4,1
   15fbc:	e13ff815 	stw	r4,-32(fp)
   15fc0:	e0bffb17 	ldw	r2,-20(fp)
   15fc4:	e0fff817 	ldw	r3,-32(fp)
   15fc8:	10fff12e 	bgeu	r2,r3,15f90 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   15fcc:	00005606 	br	16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   15fd0:	e0bff317 	ldw	r2,-52(fp)
   15fd4:	10800e17 	ldw	r2,56(r2)
   15fd8:	10800058 	cmpnei	r2,r2,1
   15fdc:	1000151e 	bne	r2,zero,16034 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
   15fe0:	e13ffa17 	ldw	r4,-24(fp)
   15fe4:	e0fffe17 	ldw	r3,-8(fp)
   15fe8:	20c5383a 	mul	r2,r4,r3
   15fec:	e13fff17 	ldw	r4,-4(fp)
   15ff0:	2089883a 	add	r4,r4,r2
   15ff4:	e13fff15 	stw	r4,-4(fp)
   15ff8:	e0bffc17 	ldw	r2,-16(fp)
   15ffc:	e0bff715 	stw	r2,-36(fp)
   16000:	00000806 	br	16024 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
   16004:	e0ffff17 	ldw	r3,-4(fp)
   16008:	e0bff717 	ldw	r2,-36(fp)
   1600c:	1885883a 	add	r2,r3,r2
   16010:	e0fff917 	ldw	r3,-28(fp)
   16014:	10c00025 	stbio	r3,0(r2)
   16018:	e0fff717 	ldw	r3,-36(fp)
   1601c:	18c00044 	addi	r3,r3,1
   16020:	e0fff715 	stw	r3,-36(fp)
   16024:	e13ffb17 	ldw	r4,-20(fp)
   16028:	e0bff717 	ldw	r2,-36(fp)
   1602c:	20bff52e 	bgeu	r4,r2,16004 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   16030:	00003d06 	br	16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   16034:	e0bff317 	ldw	r2,-52(fp)
   16038:	10800e17 	ldw	r2,56(r2)
   1603c:	10800098 	cmpnei	r2,r2,2
   16040:	10001c1e 	bne	r2,zero,160b4 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
   16044:	e0fffe17 	ldw	r3,-8(fp)
   16048:	e0fffe17 	ldw	r3,-8(fp)
   1604c:	18c5883a 	add	r2,r3,r3
   16050:	e0bffe15 	stw	r2,-8(fp)
   16054:	e13ffa17 	ldw	r4,-24(fp)
   16058:	e0fffe17 	ldw	r3,-8(fp)
   1605c:	20c5383a 	mul	r2,r4,r3
   16060:	e13fff17 	ldw	r4,-4(fp)
   16064:	2089883a 	add	r4,r4,r2
   16068:	e13fff15 	stw	r4,-4(fp)
   1606c:	e0bffc17 	ldw	r2,-16(fp)
   16070:	e0bff715 	stw	r2,-36(fp)
   16074:	00000b06 	br	160a4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
   16078:	e0fff717 	ldw	r3,-36(fp)
   1607c:	e0fff717 	ldw	r3,-36(fp)
   16080:	18c5883a 	add	r2,r3,r3
   16084:	1007883a 	mov	r3,r2
   16088:	e0bfff17 	ldw	r2,-4(fp)
   1608c:	1885883a 	add	r2,r3,r2
   16090:	e0fff917 	ldw	r3,-28(fp)
   16094:	10c0002d 	sthio	r3,0(r2)
   16098:	e13ff717 	ldw	r4,-36(fp)
   1609c:	21000044 	addi	r4,r4,1
   160a0:	e13ff715 	stw	r4,-36(fp)
   160a4:	e0bffb17 	ldw	r2,-20(fp)
   160a8:	e0fff717 	ldw	r3,-36(fp)
   160ac:	10fff22e 	bgeu	r2,r3,16078 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   160b0:	00001d06 	br	16128 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   160b4:	e13ffe17 	ldw	r4,-8(fp)
   160b8:	e13ffe17 	ldw	r4,-8(fp)
   160bc:	2105883a 	add	r2,r4,r4
   160c0:	1085883a 	add	r2,r2,r2
   160c4:	e0bffe15 	stw	r2,-8(fp)
   160c8:	e0fffa17 	ldw	r3,-24(fp)
   160cc:	e13ffe17 	ldw	r4,-8(fp)
   160d0:	1905383a 	mul	r2,r3,r4
   160d4:	e0ffff17 	ldw	r3,-4(fp)
   160d8:	1887883a 	add	r3,r3,r2
   160dc:	e0ffff15 	stw	r3,-4(fp)
   160e0:	e13ffc17 	ldw	r4,-16(fp)
   160e4:	e13ff715 	stw	r4,-36(fp)
   160e8:	00000c06 	br	1611c <alt_up_pixel_buffer_dma_draw_hline+0x334>
   160ec:	e0fff717 	ldw	r3,-36(fp)
   160f0:	e0fff717 	ldw	r3,-36(fp)
   160f4:	18c5883a 	add	r2,r3,r3
   160f8:	1085883a 	add	r2,r2,r2
   160fc:	1007883a 	mov	r3,r2
   16100:	e0bfff17 	ldw	r2,-4(fp)
   16104:	1885883a 	add	r2,r3,r2
   16108:	e0fff917 	ldw	r3,-28(fp)
   1610c:	10c00035 	stwio	r3,0(r2)
   16110:	e13ff717 	ldw	r4,-36(fp)
   16114:	21000044 	addi	r4,r4,1
   16118:	e13ff715 	stw	r4,-36(fp)
   1611c:	e0bffb17 	ldw	r2,-20(fp)
   16120:	e0fff717 	ldw	r3,-36(fp)
   16124:	10fff12e 	bgeu	r2,r3,160ec <alt_up_pixel_buffer_dma_draw_hline+0x304>
   16128:	e037883a 	mov	sp,fp
   1612c:	df000017 	ldw	fp,0(sp)
   16130:	dec00104 	addi	sp,sp,4
   16134:	f800283a 	ret

00016138 <alt_up_pixel_buffer_dma_draw_vline>:
   16138:	defff104 	addi	sp,sp,-60
   1613c:	df000e15 	stw	fp,56(sp)
   16140:	df000e04 	addi	fp,sp,56
   16144:	e13ff215 	stw	r4,-56(fp)
   16148:	e17ff315 	stw	r5,-52(fp)
   1614c:	e1bff415 	stw	r6,-48(fp)
   16150:	e1fff515 	stw	r7,-44(fp)
   16154:	e0bff217 	ldw	r2,-56(fp)
   16158:	10800f17 	ldw	r2,60(r2)
   1615c:	e0bffe15 	stw	r2,-8(fp)
   16160:	e0bff217 	ldw	r2,-56(fp)
   16164:	10801017 	ldw	r2,64(r2)
   16168:	e0bffd15 	stw	r2,-12(fp)
   1616c:	e0bff317 	ldw	r2,-52(fp)
   16170:	e0bffc15 	stw	r2,-16(fp)
   16174:	e0fff417 	ldw	r3,-48(fp)
   16178:	e0fffb15 	stw	r3,-20(fp)
   1617c:	e13ff517 	ldw	r4,-44(fp)
   16180:	e13ffa15 	stw	r4,-24(fp)
   16184:	e0800117 	ldw	r2,4(fp)
   16188:	e0bff915 	stw	r2,-28(fp)
   1618c:	e0fffa17 	ldw	r3,-24(fp)
   16190:	e13ffb17 	ldw	r4,-20(fp)
   16194:	1900042e 	bgeu	r3,r4,161a8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
   16198:	e0bffb17 	ldw	r2,-20(fp)
   1619c:	e0fffa17 	ldw	r3,-24(fp)
   161a0:	e0fffb15 	stw	r3,-20(fp)
   161a4:	e0bffa15 	stw	r2,-24(fp)
   161a8:	e13ffc17 	ldw	r4,-16(fp)
   161ac:	e0bffe17 	ldw	r2,-8(fp)
   161b0:	2080d12e 	bgeu	r4,r2,164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   161b4:	e0fffb17 	ldw	r3,-20(fp)
   161b8:	e13ffd17 	ldw	r4,-12(fp)
   161bc:	19000136 	bltu	r3,r4,161c4 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
   161c0:	0000cd06 	br	164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   161c4:	e0bffa17 	ldw	r2,-24(fp)
   161c8:	e0fffd17 	ldw	r3,-12(fp)
   161cc:	10c00336 	bltu	r2,r3,161dc <alt_up_pixel_buffer_dma_draw_vline+0xa4>
   161d0:	e13ffd17 	ldw	r4,-12(fp)
   161d4:	213fffc4 	addi	r4,r4,-1
   161d8:	e13ffa15 	stw	r4,-24(fp)
   161dc:	e0800217 	ldw	r2,8(fp)
   161e0:	10800058 	cmpnei	r2,r2,1
   161e4:	1000041e 	bne	r2,zero,161f8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
   161e8:	e0bff217 	ldw	r2,-56(fp)
   161ec:	10800c17 	ldw	r2,48(r2)
   161f0:	e0bfff15 	stw	r2,-4(fp)
   161f4:	00000306 	br	16204 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
   161f8:	e0bff217 	ldw	r2,-56(fp)
   161fc:	10800b17 	ldw	r2,44(r2)
   16200:	e0bfff15 	stw	r2,-4(fp)
   16204:	e0bff217 	ldw	r2,-56(fp)
   16208:	10800d17 	ldw	r2,52(r2)
   1620c:	1004c03a 	cmpne	r2,r2,zero
   16210:	1000571e 	bne	r2,zero,16370 <alt_up_pixel_buffer_dma_draw_vline+0x238>
   16214:	e0bff217 	ldw	r2,-56(fp)
   16218:	10801317 	ldw	r2,76(r2)
   1621c:	e0bff715 	stw	r2,-36(fp)
   16220:	e0bff717 	ldw	r2,-36(fp)
   16224:	e0fffb17 	ldw	r3,-20(fp)
   16228:	1884983a 	sll	r2,r3,r2
   1622c:	e13fff17 	ldw	r4,-4(fp)
   16230:	2089883a 	add	r4,r4,r2
   16234:	e13fff15 	stw	r4,-4(fp)
   16238:	e0bff217 	ldw	r2,-56(fp)
   1623c:	10800e17 	ldw	r2,56(r2)
   16240:	10800058 	cmpnei	r2,r2,1
   16244:	1000151e 	bne	r2,zero,1629c <alt_up_pixel_buffer_dma_draw_vline+0x164>
   16248:	e0bffb17 	ldw	r2,-20(fp)
   1624c:	e0bff815 	stw	r2,-32(fp)
   16250:	00000e06 	br	1628c <alt_up_pixel_buffer_dma_draw_vline+0x154>
   16254:	e0ffff17 	ldw	r3,-4(fp)
   16258:	e0bffc17 	ldw	r2,-16(fp)
   1625c:	1885883a 	add	r2,r3,r2
   16260:	e0fff917 	ldw	r3,-28(fp)
   16264:	10c00025 	stbio	r3,0(r2)
   16268:	e0fff717 	ldw	r3,-36(fp)
   1626c:	00800044 	movi	r2,1
   16270:	10c4983a 	sll	r2,r2,r3
   16274:	e0ffff17 	ldw	r3,-4(fp)
   16278:	1887883a 	add	r3,r3,r2
   1627c:	e0ffff15 	stw	r3,-4(fp)
   16280:	e13ff817 	ldw	r4,-32(fp)
   16284:	21000044 	addi	r4,r4,1
   16288:	e13ff815 	stw	r4,-32(fp)
   1628c:	e0bffa17 	ldw	r2,-24(fp)
   16290:	e0fff817 	ldw	r3,-32(fp)
   16294:	10ffef2e 	bgeu	r2,r3,16254 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   16298:	00009706 	br	164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1629c:	e0bff217 	ldw	r2,-56(fp)
   162a0:	10800e17 	ldw	r2,56(r2)
   162a4:	10800098 	cmpnei	r2,r2,2
   162a8:	1000181e 	bne	r2,zero,1630c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
   162ac:	e13ffb17 	ldw	r4,-20(fp)
   162b0:	e13ff815 	stw	r4,-32(fp)
   162b4:	00001106 	br	162fc <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
   162b8:	e0fffc17 	ldw	r3,-16(fp)
   162bc:	e0fffc17 	ldw	r3,-16(fp)
   162c0:	18c5883a 	add	r2,r3,r3
   162c4:	1007883a 	mov	r3,r2
   162c8:	e0bfff17 	ldw	r2,-4(fp)
   162cc:	1885883a 	add	r2,r3,r2
   162d0:	e0fff917 	ldw	r3,-28(fp)
   162d4:	10c0002d 	sthio	r3,0(r2)
   162d8:	e0fff717 	ldw	r3,-36(fp)
   162dc:	00800044 	movi	r2,1
   162e0:	10c4983a 	sll	r2,r2,r3
   162e4:	e13fff17 	ldw	r4,-4(fp)
   162e8:	2089883a 	add	r4,r4,r2
   162ec:	e13fff15 	stw	r4,-4(fp)
   162f0:	e0bff817 	ldw	r2,-32(fp)
   162f4:	10800044 	addi	r2,r2,1
   162f8:	e0bff815 	stw	r2,-32(fp)
   162fc:	e0fffa17 	ldw	r3,-24(fp)
   16300:	e13ff817 	ldw	r4,-32(fp)
   16304:	193fec2e 	bgeu	r3,r4,162b8 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   16308:	00007b06 	br	164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1630c:	e0bffb17 	ldw	r2,-20(fp)
   16310:	e0bff815 	stw	r2,-32(fp)
   16314:	00001206 	br	16360 <alt_up_pixel_buffer_dma_draw_vline+0x228>
   16318:	e0fffc17 	ldw	r3,-16(fp)
   1631c:	e0fffc17 	ldw	r3,-16(fp)
   16320:	18c5883a 	add	r2,r3,r3
   16324:	1085883a 	add	r2,r2,r2
   16328:	1007883a 	mov	r3,r2
   1632c:	e0bfff17 	ldw	r2,-4(fp)
   16330:	1885883a 	add	r2,r3,r2
   16334:	e0fff917 	ldw	r3,-28(fp)
   16338:	10c00035 	stwio	r3,0(r2)
   1633c:	e0fff717 	ldw	r3,-36(fp)
   16340:	00800044 	movi	r2,1
   16344:	10c4983a 	sll	r2,r2,r3
   16348:	e13fff17 	ldw	r4,-4(fp)
   1634c:	2089883a 	add	r4,r4,r2
   16350:	e13fff15 	stw	r4,-4(fp)
   16354:	e0bff817 	ldw	r2,-32(fp)
   16358:	10800044 	addi	r2,r2,1
   1635c:	e0bff815 	stw	r2,-32(fp)
   16360:	e0fffa17 	ldw	r3,-24(fp)
   16364:	e13ff817 	ldw	r4,-32(fp)
   16368:	193feb2e 	bgeu	r3,r4,16318 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   1636c:	00006206 	br	164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   16370:	e0bff217 	ldw	r2,-56(fp)
   16374:	10800e17 	ldw	r2,56(r2)
   16378:	10800058 	cmpnei	r2,r2,1
   1637c:	1000191e 	bne	r2,zero,163e4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
   16380:	e0fffb17 	ldw	r3,-20(fp)
   16384:	e13ffe17 	ldw	r4,-8(fp)
   16388:	1905383a 	mul	r2,r3,r4
   1638c:	e0ffff17 	ldw	r3,-4(fp)
   16390:	1887883a 	add	r3,r3,r2
   16394:	e0ffff15 	stw	r3,-4(fp)
   16398:	e13ffb17 	ldw	r4,-20(fp)
   1639c:	e13ff615 	stw	r4,-40(fp)
   163a0:	00000c06 	br	163d4 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
   163a4:	e0ffff17 	ldw	r3,-4(fp)
   163a8:	e0bffc17 	ldw	r2,-16(fp)
   163ac:	1885883a 	add	r2,r3,r2
   163b0:	e0fff917 	ldw	r3,-28(fp)
   163b4:	10c00025 	stbio	r3,0(r2)
   163b8:	e0bfff17 	ldw	r2,-4(fp)
   163bc:	e0fffe17 	ldw	r3,-8(fp)
   163c0:	10c5883a 	add	r2,r2,r3
   163c4:	e0bfff15 	stw	r2,-4(fp)
   163c8:	e13ff617 	ldw	r4,-40(fp)
   163cc:	21000044 	addi	r4,r4,1
   163d0:	e13ff615 	stw	r4,-40(fp)
   163d4:	e0bffa17 	ldw	r2,-24(fp)
   163d8:	e0fff617 	ldw	r3,-40(fp)
   163dc:	10fff12e 	bgeu	r2,r3,163a4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   163e0:	00004506 	br	164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   163e4:	e0bff217 	ldw	r2,-56(fp)
   163e8:	10800e17 	ldw	r2,56(r2)
   163ec:	10800098 	cmpnei	r2,r2,2
   163f0:	1000201e 	bne	r2,zero,16474 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
   163f4:	e13ffe17 	ldw	r4,-8(fp)
   163f8:	e13ffe17 	ldw	r4,-8(fp)
   163fc:	2105883a 	add	r2,r4,r4
   16400:	e0bffe15 	stw	r2,-8(fp)
   16404:	e0fffb17 	ldw	r3,-20(fp)
   16408:	e13ffe17 	ldw	r4,-8(fp)
   1640c:	1905383a 	mul	r2,r3,r4
   16410:	e0ffff17 	ldw	r3,-4(fp)
   16414:	1887883a 	add	r3,r3,r2
   16418:	e0ffff15 	stw	r3,-4(fp)
   1641c:	e13ffb17 	ldw	r4,-20(fp)
   16420:	e13ff615 	stw	r4,-40(fp)
   16424:	00000f06 	br	16464 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
   16428:	e0fffc17 	ldw	r3,-16(fp)
   1642c:	e0fffc17 	ldw	r3,-16(fp)
   16430:	18c5883a 	add	r2,r3,r3
   16434:	1007883a 	mov	r3,r2
   16438:	e0bfff17 	ldw	r2,-4(fp)
   1643c:	1885883a 	add	r2,r3,r2
   16440:	e0fff917 	ldw	r3,-28(fp)
   16444:	10c0002d 	sthio	r3,0(r2)
   16448:	e13fff17 	ldw	r4,-4(fp)
   1644c:	e0bffe17 	ldw	r2,-8(fp)
   16450:	2089883a 	add	r4,r4,r2
   16454:	e13fff15 	stw	r4,-4(fp)
   16458:	e0fff617 	ldw	r3,-40(fp)
   1645c:	18c00044 	addi	r3,r3,1
   16460:	e0fff615 	stw	r3,-40(fp)
   16464:	e13ffa17 	ldw	r4,-24(fp)
   16468:	e0bff617 	ldw	r2,-40(fp)
   1646c:	20bfee2e 	bgeu	r4,r2,16428 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   16470:	00002106 	br	164f8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   16474:	e0fffe17 	ldw	r3,-8(fp)
   16478:	e0fffe17 	ldw	r3,-8(fp)
   1647c:	18c5883a 	add	r2,r3,r3
   16480:	1085883a 	add	r2,r2,r2
   16484:	e0bffe15 	stw	r2,-8(fp)
   16488:	e13ffb17 	ldw	r4,-20(fp)
   1648c:	e0fffe17 	ldw	r3,-8(fp)
   16490:	20c5383a 	mul	r2,r4,r3
   16494:	e13fff17 	ldw	r4,-4(fp)
   16498:	2089883a 	add	r4,r4,r2
   1649c:	e13fff15 	stw	r4,-4(fp)
   164a0:	e0bffb17 	ldw	r2,-20(fp)
   164a4:	e0bff615 	stw	r2,-40(fp)
   164a8:	00001006 	br	164ec <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
   164ac:	e0fffc17 	ldw	r3,-16(fp)
   164b0:	e0fffc17 	ldw	r3,-16(fp)
   164b4:	18c5883a 	add	r2,r3,r3
   164b8:	1085883a 	add	r2,r2,r2
   164bc:	1007883a 	mov	r3,r2
   164c0:	e0bfff17 	ldw	r2,-4(fp)
   164c4:	1885883a 	add	r2,r3,r2
   164c8:	e0fff917 	ldw	r3,-28(fp)
   164cc:	10c00035 	stwio	r3,0(r2)
   164d0:	e13fff17 	ldw	r4,-4(fp)
   164d4:	e0bffe17 	ldw	r2,-8(fp)
   164d8:	2089883a 	add	r4,r4,r2
   164dc:	e13fff15 	stw	r4,-4(fp)
   164e0:	e0fff617 	ldw	r3,-40(fp)
   164e4:	18c00044 	addi	r3,r3,1
   164e8:	e0fff615 	stw	r3,-40(fp)
   164ec:	e13ffa17 	ldw	r4,-24(fp)
   164f0:	e0bff617 	ldw	r2,-40(fp)
   164f4:	20bfed2e 	bgeu	r4,r2,164ac <alt_up_pixel_buffer_dma_draw_vline+0x374>
   164f8:	e037883a 	mov	sp,fp
   164fc:	df000017 	ldw	fp,0(sp)
   16500:	dec00104 	addi	sp,sp,4
   16504:	f800283a 	ret

00016508 <alt_up_pixel_buffer_dma_draw_rectangle>:
   16508:	defff804 	addi	sp,sp,-32
   1650c:	dfc00715 	stw	ra,28(sp)
   16510:	df000615 	stw	fp,24(sp)
   16514:	df000604 	addi	fp,sp,24
   16518:	e13ffc15 	stw	r4,-16(fp)
   1651c:	e17ffd15 	stw	r5,-12(fp)
   16520:	e1bffe15 	stw	r6,-8(fp)
   16524:	e1ffff15 	stw	r7,-4(fp)
   16528:	e0800317 	ldw	r2,12(fp)
   1652c:	d8800015 	stw	r2,0(sp)
   16530:	e0800417 	ldw	r2,16(fp)
   16534:	d8800115 	stw	r2,4(sp)
   16538:	e13ffc17 	ldw	r4,-16(fp)
   1653c:	e17ffd17 	ldw	r5,-12(fp)
   16540:	e1bfff17 	ldw	r6,-4(fp)
   16544:	e1fffe17 	ldw	r7,-8(fp)
   16548:	0015de80 	call	15de8 <alt_up_pixel_buffer_dma_draw_hline>
   1654c:	e0800317 	ldw	r2,12(fp)
   16550:	d8800015 	stw	r2,0(sp)
   16554:	e0800417 	ldw	r2,16(fp)
   16558:	d8800115 	stw	r2,4(sp)
   1655c:	e13ffc17 	ldw	r4,-16(fp)
   16560:	e17ffd17 	ldw	r5,-12(fp)
   16564:	e1bfff17 	ldw	r6,-4(fp)
   16568:	e1c00217 	ldw	r7,8(fp)
   1656c:	0015de80 	call	15de8 <alt_up_pixel_buffer_dma_draw_hline>
   16570:	e0800317 	ldw	r2,12(fp)
   16574:	d8800015 	stw	r2,0(sp)
   16578:	e0800417 	ldw	r2,16(fp)
   1657c:	d8800115 	stw	r2,4(sp)
   16580:	e13ffc17 	ldw	r4,-16(fp)
   16584:	e17ffd17 	ldw	r5,-12(fp)
   16588:	e1bffe17 	ldw	r6,-8(fp)
   1658c:	e1c00217 	ldw	r7,8(fp)
   16590:	00161380 	call	16138 <alt_up_pixel_buffer_dma_draw_vline>
   16594:	e0800317 	ldw	r2,12(fp)
   16598:	d8800015 	stw	r2,0(sp)
   1659c:	e0800417 	ldw	r2,16(fp)
   165a0:	d8800115 	stw	r2,4(sp)
   165a4:	e13ffc17 	ldw	r4,-16(fp)
   165a8:	e17fff17 	ldw	r5,-4(fp)
   165ac:	e1bffe17 	ldw	r6,-8(fp)
   165b0:	e1c00217 	ldw	r7,8(fp)
   165b4:	00161380 	call	16138 <alt_up_pixel_buffer_dma_draw_vline>
   165b8:	e037883a 	mov	sp,fp
   165bc:	dfc00117 	ldw	ra,4(sp)
   165c0:	df000017 	ldw	fp,0(sp)
   165c4:	dec00204 	addi	sp,sp,8
   165c8:	f800283a 	ret

000165cc <helper_plot_pixel>:
   165cc:	defffb04 	addi	sp,sp,-20
   165d0:	df000415 	stw	fp,16(sp)
   165d4:	df000404 	addi	fp,sp,16
   165d8:	e13ffc15 	stw	r4,-16(fp)
   165dc:	e17ffd15 	stw	r5,-12(fp)
   165e0:	e1bffe15 	stw	r6,-8(fp)
   165e4:	e1ffff15 	stw	r7,-4(fp)
   165e8:	e0c00217 	ldw	r3,8(fp)
   165ec:	1804c03a 	cmpne	r2,r3,zero
   165f0:	10000b1e 	bne	r2,zero,16620 <helper_plot_pixel+0x54>
   165f4:	e13ffd17 	ldw	r4,-12(fp)
   165f8:	e0ffff17 	ldw	r3,-4(fp)
   165fc:	20c5383a 	mul	r2,r4,r3
   16600:	e13ffe17 	ldw	r4,-8(fp)
   16604:	1105883a 	add	r2,r2,r4
   16608:	1007883a 	mov	r3,r2
   1660c:	e0bffc17 	ldw	r2,-16(fp)
   16610:	1885883a 	add	r2,r3,r2
   16614:	e0c00117 	ldw	r3,4(fp)
   16618:	10c00025 	stbio	r3,0(r2)
   1661c:	00001b06 	br	1668c <helper_plot_pixel+0xc0>
   16620:	e1000217 	ldw	r4,8(fp)
   16624:	20800058 	cmpnei	r2,r4,1
   16628:	10000c1e 	bne	r2,zero,1665c <helper_plot_pixel+0x90>
   1662c:	e0fffd17 	ldw	r3,-12(fp)
   16630:	e13fff17 	ldw	r4,-4(fp)
   16634:	1905383a 	mul	r2,r3,r4
   16638:	e0fffe17 	ldw	r3,-8(fp)
   1663c:	10c5883a 	add	r2,r2,r3
   16640:	1085883a 	add	r2,r2,r2
   16644:	1007883a 	mov	r3,r2
   16648:	e0bffc17 	ldw	r2,-16(fp)
   1664c:	1885883a 	add	r2,r3,r2
   16650:	e1000117 	ldw	r4,4(fp)
   16654:	1100002d 	sthio	r4,0(r2)
   16658:	00000c06 	br	1668c <helper_plot_pixel+0xc0>
   1665c:	e0fffd17 	ldw	r3,-12(fp)
   16660:	e13fff17 	ldw	r4,-4(fp)
   16664:	1905383a 	mul	r2,r3,r4
   16668:	e0fffe17 	ldw	r3,-8(fp)
   1666c:	10c5883a 	add	r2,r2,r3
   16670:	1085883a 	add	r2,r2,r2
   16674:	1085883a 	add	r2,r2,r2
   16678:	1007883a 	mov	r3,r2
   1667c:	e0bffc17 	ldw	r2,-16(fp)
   16680:	1885883a 	add	r2,r3,r2
   16684:	e1000117 	ldw	r4,4(fp)
   16688:	11000035 	stwio	r4,0(r2)
   1668c:	e037883a 	mov	sp,fp
   16690:	df000017 	ldw	fp,0(sp)
   16694:	dec00104 	addi	sp,sp,4
   16698:	f800283a 	ret

0001669c <alt_up_pixel_buffer_dma_draw_line>:
   1669c:	deffe404 	addi	sp,sp,-112
   166a0:	dfc01b15 	stw	ra,108(sp)
   166a4:	df001a15 	stw	fp,104(sp)
   166a8:	df001a04 	addi	fp,sp,104
   166ac:	e13fe815 	stw	r4,-96(fp)
   166b0:	e17fe915 	stw	r5,-92(fp)
   166b4:	e1bfea15 	stw	r6,-88(fp)
   166b8:	e1ffeb15 	stw	r7,-84(fp)
   166bc:	e0bfe917 	ldw	r2,-92(fp)
   166c0:	e0bffa15 	stw	r2,-24(fp)
   166c4:	e0ffea17 	ldw	r3,-88(fp)
   166c8:	e0fff915 	stw	r3,-28(fp)
   166cc:	e13feb17 	ldw	r4,-84(fp)
   166d0:	e13ff815 	stw	r4,-32(fp)
   166d4:	e0800217 	ldw	r2,8(fp)
   166d8:	e0bff715 	stw	r2,-36(fp)
   166dc:	e0fff717 	ldw	r3,-36(fp)
   166e0:	e13ff917 	ldw	r4,-28(fp)
   166e4:	1905c83a 	sub	r2,r3,r4
   166e8:	e0bfff15 	stw	r2,-4(fp)
   166ec:	e0ffff17 	ldw	r3,-4(fp)
   166f0:	1804403a 	cmpge	r2,r3,zero
   166f4:	1000031e 	bne	r2,zero,16704 <alt_up_pixel_buffer_dma_draw_line+0x68>
   166f8:	e13fff17 	ldw	r4,-4(fp)
   166fc:	0109c83a 	sub	r4,zero,r4
   16700:	e13fff15 	stw	r4,-4(fp)
   16704:	e0fff817 	ldw	r3,-32(fp)
   16708:	e13ffa17 	ldw	r4,-24(fp)
   1670c:	1905c83a 	sub	r2,r3,r4
   16710:	e0bffe15 	stw	r2,-8(fp)
   16714:	e0fffe17 	ldw	r3,-8(fp)
   16718:	1804403a 	cmpge	r2,r3,zero
   1671c:	1000031e 	bne	r2,zero,1672c <alt_up_pixel_buffer_dma_draw_line+0x90>
   16720:	e13ffe17 	ldw	r4,-8(fp)
   16724:	0109c83a 	sub	r4,zero,r4
   16728:	e13ffe15 	stw	r4,-8(fp)
   1672c:	e0fffe17 	ldw	r3,-8(fp)
   16730:	e13fff17 	ldw	r4,-4(fp)
   16734:	1904803a 	cmplt	r2,r3,r4
   16738:	e0bff605 	stb	r2,-40(fp)
   1673c:	e0bfe817 	ldw	r2,-96(fp)
   16740:	10800e17 	ldw	r2,56(r2)
   16744:	10800060 	cmpeqi	r2,r2,1
   16748:	10000c1e 	bne	r2,zero,1677c <alt_up_pixel_buffer_dma_draw_line+0xe0>
   1674c:	e0bfe817 	ldw	r2,-96(fp)
   16750:	10800e17 	ldw	r2,56(r2)
   16754:	10800098 	cmpnei	r2,r2,2
   16758:	1000031e 	bne	r2,zero,16768 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   1675c:	00800044 	movi	r2,1
   16760:	e0bffc15 	stw	r2,-16(fp)
   16764:	00000206 	br	16770 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   16768:	00c00084 	movi	r3,2
   1676c:	e0fffc15 	stw	r3,-16(fp)
   16770:	e13ffc17 	ldw	r4,-16(fp)
   16774:	e13ffd15 	stw	r4,-12(fp)
   16778:	00000106 	br	16780 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   1677c:	e03ffd15 	stw	zero,-12(fp)
   16780:	e0bffd17 	ldw	r2,-12(fp)
   16784:	e0bfef15 	stw	r2,-68(fp)
   16788:	e0c00317 	ldw	r3,12(fp)
   1678c:	e0ffee15 	stw	r3,-72(fp)
   16790:	e0bfe817 	ldw	r2,-96(fp)
   16794:	10800d17 	ldw	r2,52(r2)
   16798:	1004c03a 	cmpne	r2,r2,zero
   1679c:	1000091e 	bne	r2,zero,167c4 <alt_up_pixel_buffer_dma_draw_line+0x128>
   167a0:	e0bfe817 	ldw	r2,-96(fp)
   167a4:	10c01317 	ldw	r3,76(r2)
   167a8:	e0bfef17 	ldw	r2,-68(fp)
   167ac:	1885c83a 	sub	r2,r3,r2
   167b0:	1007883a 	mov	r3,r2
   167b4:	00800044 	movi	r2,1
   167b8:	10c4983a 	sll	r2,r2,r3
   167bc:	e0bffb15 	stw	r2,-20(fp)
   167c0:	00000306 	br	167d0 <alt_up_pixel_buffer_dma_draw_line+0x134>
   167c4:	e0bfe817 	ldw	r2,-96(fp)
   167c8:	10800f17 	ldw	r2,60(r2)
   167cc:	e0bffb15 	stw	r2,-20(fp)
   167d0:	e13ffb17 	ldw	r4,-20(fp)
   167d4:	e13fec15 	stw	r4,-80(fp)
   167d8:	e0800417 	ldw	r2,16(fp)
   167dc:	10800058 	cmpnei	r2,r2,1
   167e0:	1000041e 	bne	r2,zero,167f4 <alt_up_pixel_buffer_dma_draw_line+0x158>
   167e4:	e0bfe817 	ldw	r2,-96(fp)
   167e8:	10800c17 	ldw	r2,48(r2)
   167ec:	e0bfed15 	stw	r2,-76(fp)
   167f0:	00000306 	br	16800 <alt_up_pixel_buffer_dma_draw_line+0x164>
   167f4:	e0bfe817 	ldw	r2,-96(fp)
   167f8:	10800b17 	ldw	r2,44(r2)
   167fc:	e0bfed15 	stw	r2,-76(fp)
   16800:	e0fff603 	ldbu	r3,-40(fp)
   16804:	18803fcc 	andi	r2,r3,255
   16808:	1080201c 	xori	r2,r2,128
   1680c:	10bfe004 	addi	r2,r2,-128
   16810:	10800050 	cmplti	r2,r2,1
   16814:	10000c1e 	bne	r2,zero,16848 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
   16818:	e13ffa17 	ldw	r4,-24(fp)
   1681c:	e13ff315 	stw	r4,-52(fp)
   16820:	e0bff917 	ldw	r2,-28(fp)
   16824:	e0bffa15 	stw	r2,-24(fp)
   16828:	e0fff317 	ldw	r3,-52(fp)
   1682c:	e0fff915 	stw	r3,-28(fp)
   16830:	e13ff817 	ldw	r4,-32(fp)
   16834:	e13ff315 	stw	r4,-52(fp)
   16838:	e0bff717 	ldw	r2,-36(fp)
   1683c:	e0bff815 	stw	r2,-32(fp)
   16840:	e0fff317 	ldw	r3,-52(fp)
   16844:	e0fff715 	stw	r3,-36(fp)
   16848:	e13ff817 	ldw	r4,-32(fp)
   1684c:	e0bffa17 	ldw	r2,-24(fp)
   16850:	20800c0e 	bge	r4,r2,16884 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
   16854:	e0fffa17 	ldw	r3,-24(fp)
   16858:	e0fff315 	stw	r3,-52(fp)
   1685c:	e13ff817 	ldw	r4,-32(fp)
   16860:	e13ffa15 	stw	r4,-24(fp)
   16864:	e0bff317 	ldw	r2,-52(fp)
   16868:	e0bff815 	stw	r2,-32(fp)
   1686c:	e0fff917 	ldw	r3,-28(fp)
   16870:	e0fff315 	stw	r3,-52(fp)
   16874:	e13ff717 	ldw	r4,-36(fp)
   16878:	e13ff915 	stw	r4,-28(fp)
   1687c:	e0bff317 	ldw	r2,-52(fp)
   16880:	e0bff715 	stw	r2,-36(fp)
   16884:	e0fff817 	ldw	r3,-32(fp)
   16888:	e13ffa17 	ldw	r4,-24(fp)
   1688c:	1907c83a 	sub	r3,r3,r4
   16890:	e0fff515 	stw	r3,-44(fp)
   16894:	e0fff717 	ldw	r3,-36(fp)
   16898:	e13ff917 	ldw	r4,-28(fp)
   1689c:	1905c83a 	sub	r2,r3,r4
   168a0:	e0bff415 	stw	r2,-48(fp)
   168a4:	e0fff417 	ldw	r3,-48(fp)
   168a8:	1804403a 	cmpge	r2,r3,zero
   168ac:	1000031e 	bne	r2,zero,168bc <alt_up_pixel_buffer_dma_draw_line+0x220>
   168b0:	e13ff417 	ldw	r4,-48(fp)
   168b4:	0109c83a 	sub	r4,zero,r4
   168b8:	e13ff415 	stw	r4,-48(fp)
   168bc:	e0fff517 	ldw	r3,-44(fp)
   168c0:	1804d7fa 	srli	r2,r3,31
   168c4:	e13ff517 	ldw	r4,-44(fp)
   168c8:	1105883a 	add	r2,r2,r4
   168cc:	1005d07a 	srai	r2,r2,1
   168d0:	0085c83a 	sub	r2,zero,r2
   168d4:	e0bff315 	stw	r2,-52(fp)
   168d8:	e0bff917 	ldw	r2,-28(fp)
   168dc:	e0bff015 	stw	r2,-64(fp)
   168e0:	e0fff917 	ldw	r3,-28(fp)
   168e4:	e13ff717 	ldw	r4,-36(fp)
   168e8:	1900030e 	bge	r3,r4,168f8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
   168ec:	00800044 	movi	r2,1
   168f0:	e0bff215 	stw	r2,-56(fp)
   168f4:	00000206 	br	16900 <alt_up_pixel_buffer_dma_draw_line+0x264>
   168f8:	00ffffc4 	movi	r3,-1
   168fc:	e0fff215 	stw	r3,-56(fp)
   16900:	e13ff603 	ldbu	r4,-40(fp)
   16904:	20803fcc 	andi	r2,r4,255
   16908:	1080201c 	xori	r2,r2,128
   1690c:	10bfe004 	addi	r2,r2,-128
   16910:	10800058 	cmpnei	r2,r2,1
   16914:	1000221e 	bne	r2,zero,169a0 <alt_up_pixel_buffer_dma_draw_line+0x304>
   16918:	e0bffa17 	ldw	r2,-24(fp)
   1691c:	e0bff115 	stw	r2,-60(fp)
   16920:	00001b06 	br	16990 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
   16924:	e0ffee17 	ldw	r3,-72(fp)
   16928:	d8c00015 	stw	r3,0(sp)
   1692c:	e13fef17 	ldw	r4,-68(fp)
   16930:	d9000115 	stw	r4,4(sp)
   16934:	e13fed17 	ldw	r4,-76(fp)
   16938:	e17fec17 	ldw	r5,-80(fp)
   1693c:	e1bff017 	ldw	r6,-64(fp)
   16940:	e1fff117 	ldw	r7,-60(fp)
   16944:	00165cc0 	call	165cc <helper_plot_pixel>
   16948:	e0bff317 	ldw	r2,-52(fp)
   1694c:	e0fff417 	ldw	r3,-48(fp)
   16950:	10c5883a 	add	r2,r2,r3
   16954:	e0bff315 	stw	r2,-52(fp)
   16958:	e13ff317 	ldw	r4,-52(fp)
   1695c:	20800050 	cmplti	r2,r4,1
   16960:	1000081e 	bne	r2,zero,16984 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
   16964:	e0bff017 	ldw	r2,-64(fp)
   16968:	e0fff217 	ldw	r3,-56(fp)
   1696c:	10c5883a 	add	r2,r2,r3
   16970:	e0bff015 	stw	r2,-64(fp)
   16974:	e13ff317 	ldw	r4,-52(fp)
   16978:	e0bff517 	ldw	r2,-44(fp)
   1697c:	2089c83a 	sub	r4,r4,r2
   16980:	e13ff315 	stw	r4,-52(fp)
   16984:	e0fff117 	ldw	r3,-60(fp)
   16988:	18c00044 	addi	r3,r3,1
   1698c:	e0fff115 	stw	r3,-60(fp)
   16990:	e13ff817 	ldw	r4,-32(fp)
   16994:	e0bff117 	ldw	r2,-60(fp)
   16998:	20bfe20e 	bge	r4,r2,16924 <alt_up_pixel_buffer_dma_draw_line+0x288>
   1699c:	00002106 	br	16a24 <alt_up_pixel_buffer_dma_draw_line+0x388>
   169a0:	e0fffa17 	ldw	r3,-24(fp)
   169a4:	e0fff115 	stw	r3,-60(fp)
   169a8:	00001b06 	br	16a18 <alt_up_pixel_buffer_dma_draw_line+0x37c>
   169ac:	e13fee17 	ldw	r4,-72(fp)
   169b0:	d9000015 	stw	r4,0(sp)
   169b4:	e0bfef17 	ldw	r2,-68(fp)
   169b8:	d8800115 	stw	r2,4(sp)
   169bc:	e13fed17 	ldw	r4,-76(fp)
   169c0:	e17fec17 	ldw	r5,-80(fp)
   169c4:	e1bff117 	ldw	r6,-60(fp)
   169c8:	e1fff017 	ldw	r7,-64(fp)
   169cc:	00165cc0 	call	165cc <helper_plot_pixel>
   169d0:	e0fff317 	ldw	r3,-52(fp)
   169d4:	e13ff417 	ldw	r4,-48(fp)
   169d8:	1907883a 	add	r3,r3,r4
   169dc:	e0fff315 	stw	r3,-52(fp)
   169e0:	e0fff317 	ldw	r3,-52(fp)
   169e4:	18800050 	cmplti	r2,r3,1
   169e8:	1000081e 	bne	r2,zero,16a0c <alt_up_pixel_buffer_dma_draw_line+0x370>
   169ec:	e13ff017 	ldw	r4,-64(fp)
   169f0:	e0bff217 	ldw	r2,-56(fp)
   169f4:	2089883a 	add	r4,r4,r2
   169f8:	e13ff015 	stw	r4,-64(fp)
   169fc:	e0fff317 	ldw	r3,-52(fp)
   16a00:	e13ff517 	ldw	r4,-44(fp)
   16a04:	1907c83a 	sub	r3,r3,r4
   16a08:	e0fff315 	stw	r3,-52(fp)
   16a0c:	e0bff117 	ldw	r2,-60(fp)
   16a10:	10800044 	addi	r2,r2,1
   16a14:	e0bff115 	stw	r2,-60(fp)
   16a18:	e0fff817 	ldw	r3,-32(fp)
   16a1c:	e13ff117 	ldw	r4,-60(fp)
   16a20:	193fe20e 	bge	r3,r4,169ac <alt_up_pixel_buffer_dma_draw_line+0x310>
   16a24:	e037883a 	mov	sp,fp
   16a28:	dfc00117 	ldw	ra,4(sp)
   16a2c:	df000017 	ldw	fp,0(sp)
   16a30:	dec00204 	addi	sp,sp,8
   16a34:	f800283a 	ret

00016a38 <alt_alarm_start>:
   16a38:	defff404 	addi	sp,sp,-48
   16a3c:	df000b15 	stw	fp,44(sp)
   16a40:	df000b04 	addi	fp,sp,44
   16a44:	e13ffb15 	stw	r4,-20(fp)
   16a48:	e17ffc15 	stw	r5,-16(fp)
   16a4c:	e1bffd15 	stw	r6,-12(fp)
   16a50:	e1fffe15 	stw	r7,-8(fp)
   16a54:	e03ff915 	stw	zero,-28(fp)
   16a58:	00820034 	movhi	r2,2048
   16a5c:	1089f704 	addi	r2,r2,10204
   16a60:	10800017 	ldw	r2,0(r2)
   16a64:	1005003a 	cmpeq	r2,r2,zero
   16a68:	1000411e 	bne	r2,zero,16b70 <alt_alarm_start+0x138>
   16a6c:	e0bffb17 	ldw	r2,-20(fp)
   16a70:	1005003a 	cmpeq	r2,r2,zero
   16a74:	10003b1e 	bne	r2,zero,16b64 <alt_alarm_start+0x12c>
   16a78:	e0fffb17 	ldw	r3,-20(fp)
   16a7c:	e0bffd17 	ldw	r2,-12(fp)
   16a80:	18800315 	stw	r2,12(r3)
   16a84:	e0fffb17 	ldw	r3,-20(fp)
   16a88:	e0bffe17 	ldw	r2,-8(fp)
   16a8c:	18800515 	stw	r2,20(r3)
   16a90:	0005303a 	rdctl	r2,status
   16a94:	e0bff815 	stw	r2,-32(fp)
   16a98:	e0fff817 	ldw	r3,-32(fp)
   16a9c:	00bfff84 	movi	r2,-2
   16aa0:	1884703a 	and	r2,r3,r2
   16aa4:	1001703a 	wrctl	status,r2
   16aa8:	e0bff817 	ldw	r2,-32(fp)
   16aac:	e0bffa15 	stw	r2,-24(fp)
   16ab0:	00820034 	movhi	r2,2048
   16ab4:	1089f804 	addi	r2,r2,10208
   16ab8:	10800017 	ldw	r2,0(r2)
   16abc:	e0bff915 	stw	r2,-28(fp)
   16ac0:	e0fffc17 	ldw	r3,-16(fp)
   16ac4:	e0bff917 	ldw	r2,-28(fp)
   16ac8:	1885883a 	add	r2,r3,r2
   16acc:	10c00044 	addi	r3,r2,1
   16ad0:	e0bffb17 	ldw	r2,-20(fp)
   16ad4:	10c00215 	stw	r3,8(r2)
   16ad8:	e0bffb17 	ldw	r2,-20(fp)
   16adc:	10c00217 	ldw	r3,8(r2)
   16ae0:	e0bff917 	ldw	r2,-28(fp)
   16ae4:	1880042e 	bgeu	r3,r2,16af8 <alt_alarm_start+0xc0>
   16ae8:	e0fffb17 	ldw	r3,-20(fp)
   16aec:	00800044 	movi	r2,1
   16af0:	18800405 	stb	r2,16(r3)
   16af4:	00000206 	br	16b00 <alt_alarm_start+0xc8>
   16af8:	e0bffb17 	ldw	r2,-20(fp)
   16afc:	10000405 	stb	zero,16(r2)
   16b00:	e0fffb17 	ldw	r3,-20(fp)
   16b04:	00820034 	movhi	r2,2048
   16b08:	1089cb04 	addi	r2,r2,10028
   16b0c:	e0bff615 	stw	r2,-40(fp)
   16b10:	e0fff715 	stw	r3,-36(fp)
   16b14:	e0fff717 	ldw	r3,-36(fp)
   16b18:	e0bff617 	ldw	r2,-40(fp)
   16b1c:	18800115 	stw	r2,4(r3)
   16b20:	e0bff617 	ldw	r2,-40(fp)
   16b24:	10c00017 	ldw	r3,0(r2)
   16b28:	e0bff717 	ldw	r2,-36(fp)
   16b2c:	10c00015 	stw	r3,0(r2)
   16b30:	e0bff617 	ldw	r2,-40(fp)
   16b34:	10c00017 	ldw	r3,0(r2)
   16b38:	e0bff717 	ldw	r2,-36(fp)
   16b3c:	18800115 	stw	r2,4(r3)
   16b40:	e0fff617 	ldw	r3,-40(fp)
   16b44:	e0bff717 	ldw	r2,-36(fp)
   16b48:	18800015 	stw	r2,0(r3)
   16b4c:	e0bffa17 	ldw	r2,-24(fp)
   16b50:	e0bff515 	stw	r2,-44(fp)
   16b54:	e0bff517 	ldw	r2,-44(fp)
   16b58:	1001703a 	wrctl	status,r2
   16b5c:	e03fff15 	stw	zero,-4(fp)
   16b60:	00000506 	br	16b78 <alt_alarm_start+0x140>
   16b64:	00bffa84 	movi	r2,-22
   16b68:	e0bfff15 	stw	r2,-4(fp)
   16b6c:	00000206 	br	16b78 <alt_alarm_start+0x140>
   16b70:	00bfde84 	movi	r2,-134
   16b74:	e0bfff15 	stw	r2,-4(fp)
   16b78:	e0bfff17 	ldw	r2,-4(fp)
   16b7c:	e037883a 	mov	sp,fp
   16b80:	df000017 	ldw	fp,0(sp)
   16b84:	dec00104 	addi	sp,sp,4
   16b88:	f800283a 	ret

00016b8c <alt_dcache_flush>:
   16b8c:	defffb04 	addi	sp,sp,-20
   16b90:	df000415 	stw	fp,16(sp)
   16b94:	df000404 	addi	fp,sp,16
   16b98:	e13ffe15 	stw	r4,-8(fp)
   16b9c:	e17fff15 	stw	r5,-4(fp)
   16ba0:	e0fffe17 	ldw	r3,-8(fp)
   16ba4:	e0bfff17 	ldw	r2,-4(fp)
   16ba8:	1885883a 	add	r2,r3,r2
   16bac:	e0bffc15 	stw	r2,-16(fp)
   16bb0:	e0bffe17 	ldw	r2,-8(fp)
   16bb4:	e0bffd15 	stw	r2,-12(fp)
   16bb8:	00000506 	br	16bd0 <alt_dcache_flush+0x44>
   16bbc:	e0bffd17 	ldw	r2,-12(fp)
   16bc0:	1000001b 	flushda	0(r2)
   16bc4:	e0bffd17 	ldw	r2,-12(fp)
   16bc8:	10800804 	addi	r2,r2,32
   16bcc:	e0bffd15 	stw	r2,-12(fp)
   16bd0:	e0fffd17 	ldw	r3,-12(fp)
   16bd4:	e0bffc17 	ldw	r2,-16(fp)
   16bd8:	18bff836 	bltu	r3,r2,16bbc <alt_dcache_flush+0x30>
   16bdc:	e0bffe17 	ldw	r2,-8(fp)
   16be0:	108007cc 	andi	r2,r2,31
   16be4:	1005003a 	cmpeq	r2,r2,zero
   16be8:	1000021e 	bne	r2,zero,16bf4 <alt_dcache_flush+0x68>
   16bec:	e0bffd17 	ldw	r2,-12(fp)
   16bf0:	1000001b 	flushda	0(r2)
   16bf4:	e037883a 	mov	sp,fp
   16bf8:	df000017 	ldw	fp,0(sp)
   16bfc:	dec00104 	addi	sp,sp,4
   16c00:	f800283a 	ret

00016c04 <alt_dev_llist_insert>:
   16c04:	defff904 	addi	sp,sp,-28
   16c08:	dfc00615 	stw	ra,24(sp)
   16c0c:	df000515 	stw	fp,20(sp)
   16c10:	df000504 	addi	fp,sp,20
   16c14:	e13ffd15 	stw	r4,-12(fp)
   16c18:	e17ffe15 	stw	r5,-8(fp)
   16c1c:	e0bffd17 	ldw	r2,-12(fp)
   16c20:	1005003a 	cmpeq	r2,r2,zero
   16c24:	1000041e 	bne	r2,zero,16c38 <alt_dev_llist_insert+0x34>
   16c28:	e0bffd17 	ldw	r2,-12(fp)
   16c2c:	10800217 	ldw	r2,8(r2)
   16c30:	1004c03a 	cmpne	r2,r2,zero
   16c34:	1000071e 	bne	r2,zero,16c54 <alt_dev_llist_insert+0x50>
   16c38:	0016cb80 	call	16cb8 <alt_get_errno>
   16c3c:	1007883a 	mov	r3,r2
   16c40:	00800584 	movi	r2,22
   16c44:	18800015 	stw	r2,0(r3)
   16c48:	00bffa84 	movi	r2,-22
   16c4c:	e0bfff15 	stw	r2,-4(fp)
   16c50:	00001306 	br	16ca0 <alt_dev_llist_insert+0x9c>
   16c54:	e0fffd17 	ldw	r3,-12(fp)
   16c58:	e0bffe17 	ldw	r2,-8(fp)
   16c5c:	e0bffb15 	stw	r2,-20(fp)
   16c60:	e0fffc15 	stw	r3,-16(fp)
   16c64:	e0fffc17 	ldw	r3,-16(fp)
   16c68:	e0bffb17 	ldw	r2,-20(fp)
   16c6c:	18800115 	stw	r2,4(r3)
   16c70:	e0bffb17 	ldw	r2,-20(fp)
   16c74:	10c00017 	ldw	r3,0(r2)
   16c78:	e0bffc17 	ldw	r2,-16(fp)
   16c7c:	10c00015 	stw	r3,0(r2)
   16c80:	e0bffb17 	ldw	r2,-20(fp)
   16c84:	10c00017 	ldw	r3,0(r2)
   16c88:	e0bffc17 	ldw	r2,-16(fp)
   16c8c:	18800115 	stw	r2,4(r3)
   16c90:	e0fffb17 	ldw	r3,-20(fp)
   16c94:	e0bffc17 	ldw	r2,-16(fp)
   16c98:	18800015 	stw	r2,0(r3)
   16c9c:	e03fff15 	stw	zero,-4(fp)
   16ca0:	e0bfff17 	ldw	r2,-4(fp)
   16ca4:	e037883a 	mov	sp,fp
   16ca8:	dfc00117 	ldw	ra,4(sp)
   16cac:	df000017 	ldw	fp,0(sp)
   16cb0:	dec00204 	addi	sp,sp,8
   16cb4:	f800283a 	ret

00016cb8 <alt_get_errno>:
   16cb8:	defffd04 	addi	sp,sp,-12
   16cbc:	dfc00215 	stw	ra,8(sp)
   16cc0:	df000115 	stw	fp,4(sp)
   16cc4:	df000104 	addi	fp,sp,4
   16cc8:	00820034 	movhi	r2,2048
   16ccc:	1089c504 	addi	r2,r2,10004
   16cd0:	10800017 	ldw	r2,0(r2)
   16cd4:	1005003a 	cmpeq	r2,r2,zero
   16cd8:	1000061e 	bne	r2,zero,16cf4 <alt_get_errno+0x3c>
   16cdc:	00820034 	movhi	r2,2048
   16ce0:	1089c504 	addi	r2,r2,10004
   16ce4:	10800017 	ldw	r2,0(r2)
   16ce8:	103ee83a 	callr	r2
   16cec:	e0bfff15 	stw	r2,-4(fp)
   16cf0:	00000306 	br	16d00 <alt_get_errno+0x48>
   16cf4:	00820034 	movhi	r2,2048
   16cf8:	1089f204 	addi	r2,r2,10184
   16cfc:	e0bfff15 	stw	r2,-4(fp)
   16d00:	e0bfff17 	ldw	r2,-4(fp)
   16d04:	e037883a 	mov	sp,fp
   16d08:	dfc00117 	ldw	ra,4(sp)
   16d0c:	df000017 	ldw	fp,0(sp)
   16d10:	dec00204 	addi	sp,sp,8
   16d14:	f800283a 	ret

00016d18 <_do_ctors>:
   16d18:	defffd04 	addi	sp,sp,-12
   16d1c:	dfc00215 	stw	ra,8(sp)
   16d20:	df000115 	stw	fp,4(sp)
   16d24:	df000104 	addi	fp,sp,4
   16d28:	00bfff04 	movi	r2,-4
   16d2c:	00c000b4 	movhi	r3,2
   16d30:	18e12504 	addi	r3,r3,-31596
   16d34:	1885883a 	add	r2,r3,r2
   16d38:	e0bfff15 	stw	r2,-4(fp)
   16d3c:	00000606 	br	16d58 <_do_ctors+0x40>
   16d40:	e0bfff17 	ldw	r2,-4(fp)
   16d44:	10800017 	ldw	r2,0(r2)
   16d48:	103ee83a 	callr	r2
   16d4c:	e0bfff17 	ldw	r2,-4(fp)
   16d50:	10bfff04 	addi	r2,r2,-4
   16d54:	e0bfff15 	stw	r2,-4(fp)
   16d58:	e0ffff17 	ldw	r3,-4(fp)
   16d5c:	008000b4 	movhi	r2,2
   16d60:	10a12404 	addi	r2,r2,-31600
   16d64:	18bff62e 	bgeu	r3,r2,16d40 <_do_ctors+0x28>
   16d68:	e037883a 	mov	sp,fp
   16d6c:	dfc00117 	ldw	ra,4(sp)
   16d70:	df000017 	ldw	fp,0(sp)
   16d74:	dec00204 	addi	sp,sp,8
   16d78:	f800283a 	ret

00016d7c <_do_dtors>:
   16d7c:	defffd04 	addi	sp,sp,-12
   16d80:	dfc00215 	stw	ra,8(sp)
   16d84:	df000115 	stw	fp,4(sp)
   16d88:	df000104 	addi	fp,sp,4
   16d8c:	00bfff04 	movi	r2,-4
   16d90:	00c000b4 	movhi	r3,2
   16d94:	18e12504 	addi	r3,r3,-31596
   16d98:	1885883a 	add	r2,r3,r2
   16d9c:	e0bfff15 	stw	r2,-4(fp)
   16da0:	00000606 	br	16dbc <_do_dtors+0x40>
   16da4:	e0bfff17 	ldw	r2,-4(fp)
   16da8:	10800017 	ldw	r2,0(r2)
   16dac:	103ee83a 	callr	r2
   16db0:	e0bfff17 	ldw	r2,-4(fp)
   16db4:	10bfff04 	addi	r2,r2,-4
   16db8:	e0bfff15 	stw	r2,-4(fp)
   16dbc:	e0ffff17 	ldw	r3,-4(fp)
   16dc0:	008000b4 	movhi	r2,2
   16dc4:	10a12504 	addi	r2,r2,-31596
   16dc8:	18bff62e 	bgeu	r3,r2,16da4 <_do_dtors+0x28>
   16dcc:	e037883a 	mov	sp,fp
   16dd0:	dfc00117 	ldw	ra,4(sp)
   16dd4:	df000017 	ldw	fp,0(sp)
   16dd8:	dec00204 	addi	sp,sp,8
   16ddc:	f800283a 	ret

00016de0 <alt_find_dev>:
   16de0:	defff904 	addi	sp,sp,-28
   16de4:	dfc00615 	stw	ra,24(sp)
   16de8:	df000515 	stw	fp,20(sp)
   16dec:	df000504 	addi	fp,sp,20
   16df0:	e13ffd15 	stw	r4,-12(fp)
   16df4:	e17ffe15 	stw	r5,-8(fp)
   16df8:	e0bffe17 	ldw	r2,-8(fp)
   16dfc:	10800017 	ldw	r2,0(r2)
   16e00:	e0bffc15 	stw	r2,-16(fp)
   16e04:	e13ffd17 	ldw	r4,-12(fp)
   16e08:	00076800 	call	7680 <strlen>
   16e0c:	10800044 	addi	r2,r2,1
   16e10:	e0bffb15 	stw	r2,-20(fp)
   16e14:	00000d06 	br	16e4c <alt_find_dev+0x6c>
   16e18:	e0bffc17 	ldw	r2,-16(fp)
   16e1c:	11000217 	ldw	r4,8(r2)
   16e20:	e1bffb17 	ldw	r6,-20(fp)
   16e24:	e17ffd17 	ldw	r5,-12(fp)
   16e28:	00072b00 	call	72b0 <memcmp>
   16e2c:	1004c03a 	cmpne	r2,r2,zero
   16e30:	1000031e 	bne	r2,zero,16e40 <alt_find_dev+0x60>
   16e34:	e0bffc17 	ldw	r2,-16(fp)
   16e38:	e0bfff15 	stw	r2,-4(fp)
   16e3c:	00000706 	br	16e5c <alt_find_dev+0x7c>
   16e40:	e0bffc17 	ldw	r2,-16(fp)
   16e44:	10800017 	ldw	r2,0(r2)
   16e48:	e0bffc15 	stw	r2,-16(fp)
   16e4c:	e0fffe17 	ldw	r3,-8(fp)
   16e50:	e0bffc17 	ldw	r2,-16(fp)
   16e54:	10fff01e 	bne	r2,r3,16e18 <alt_find_dev+0x38>
   16e58:	e03fff15 	stw	zero,-4(fp)
   16e5c:	e0bfff17 	ldw	r2,-4(fp)
   16e60:	e037883a 	mov	sp,fp
   16e64:	dfc00117 	ldw	ra,4(sp)
   16e68:	df000017 	ldw	fp,0(sp)
   16e6c:	dec00204 	addi	sp,sp,8
   16e70:	f800283a 	ret

00016e74 <alt_flash_open_dev>:
   16e74:	defffb04 	addi	sp,sp,-20
   16e78:	dfc00415 	stw	ra,16(sp)
   16e7c:	df000315 	stw	fp,12(sp)
   16e80:	df000304 	addi	fp,sp,12
   16e84:	e13ffe15 	stw	r4,-8(fp)
   16e88:	e13ffe17 	ldw	r4,-8(fp)
   16e8c:	d1601904 	addi	r5,gp,-32668
   16e90:	0016de00 	call	16de0 <alt_find_dev>
   16e94:	e0bffd15 	stw	r2,-12(fp)
   16e98:	e0bffd17 	ldw	r2,-12(fp)
   16e9c:	1005003a 	cmpeq	r2,r2,zero
   16ea0:	10000b1e 	bne	r2,zero,16ed0 <alt_flash_open_dev+0x5c>
   16ea4:	e0bffd17 	ldw	r2,-12(fp)
   16ea8:	10800317 	ldw	r2,12(r2)
   16eac:	1005003a 	cmpeq	r2,r2,zero
   16eb0:	1000071e 	bne	r2,zero,16ed0 <alt_flash_open_dev+0x5c>
   16eb4:	e0bffd17 	ldw	r2,-12(fp)
   16eb8:	10800317 	ldw	r2,12(r2)
   16ebc:	e13ffd17 	ldw	r4,-12(fp)
   16ec0:	e17ffe17 	ldw	r5,-8(fp)
   16ec4:	103ee83a 	callr	r2
   16ec8:	e0bfff15 	stw	r2,-4(fp)
   16ecc:	00000206 	br	16ed8 <alt_flash_open_dev+0x64>
   16ed0:	e0bffd17 	ldw	r2,-12(fp)
   16ed4:	e0bfff15 	stw	r2,-4(fp)
   16ed8:	e0bfff17 	ldw	r2,-4(fp)
   16edc:	e037883a 	mov	sp,fp
   16ee0:	dfc00117 	ldw	ra,4(sp)
   16ee4:	df000017 	ldw	fp,0(sp)
   16ee8:	dec00204 	addi	sp,sp,8
   16eec:	f800283a 	ret

00016ef0 <alt_flash_close_dev>:
   16ef0:	defffd04 	addi	sp,sp,-12
   16ef4:	dfc00215 	stw	ra,8(sp)
   16ef8:	df000115 	stw	fp,4(sp)
   16efc:	df000104 	addi	fp,sp,4
   16f00:	e13fff15 	stw	r4,-4(fp)
   16f04:	e0bfff17 	ldw	r2,-4(fp)
   16f08:	1005003a 	cmpeq	r2,r2,zero
   16f0c:	1000081e 	bne	r2,zero,16f30 <alt_flash_close_dev+0x40>
   16f10:	e0bfff17 	ldw	r2,-4(fp)
   16f14:	10800417 	ldw	r2,16(r2)
   16f18:	1005003a 	cmpeq	r2,r2,zero
   16f1c:	1000041e 	bne	r2,zero,16f30 <alt_flash_close_dev+0x40>
   16f20:	e0bfff17 	ldw	r2,-4(fp)
   16f24:	10800417 	ldw	r2,16(r2)
   16f28:	e13fff17 	ldw	r4,-4(fp)
   16f2c:	103ee83a 	callr	r2
   16f30:	e037883a 	mov	sp,fp
   16f34:	dfc00117 	ldw	ra,4(sp)
   16f38:	df000017 	ldw	fp,0(sp)
   16f3c:	dec00204 	addi	sp,sp,8
   16f40:	f800283a 	ret

00016f44 <alt_open_fd>:
   16f44:	defff904 	addi	sp,sp,-28
   16f48:	dfc00615 	stw	ra,24(sp)
   16f4c:	df000515 	stw	fp,20(sp)
   16f50:	df000504 	addi	fp,sp,20
   16f54:	e13ffc15 	stw	r4,-16(fp)
   16f58:	e17ffd15 	stw	r5,-12(fp)
   16f5c:	e1bffe15 	stw	r6,-8(fp)
   16f60:	e1ffff15 	stw	r7,-4(fp)
   16f64:	e13ffd17 	ldw	r4,-12(fp)
   16f68:	e17ffe17 	ldw	r5,-8(fp)
   16f6c:	e1bfff17 	ldw	r6,-4(fp)
   16f70:	001715c0 	call	1715c <open>
   16f74:	e0bffb15 	stw	r2,-20(fp)
   16f78:	e0bffb17 	ldw	r2,-20(fp)
   16f7c:	1004803a 	cmplt	r2,r2,zero
   16f80:	10001c1e 	bne	r2,zero,16ff4 <alt_open_fd+0xb0>
   16f84:	e0bffb17 	ldw	r2,-20(fp)
   16f88:	00c20034 	movhi	r3,2048
   16f8c:	18c45404 	addi	r3,r3,4432
   16f90:	10800324 	muli	r2,r2,12
   16f94:	10c5883a 	add	r2,r2,r3
   16f98:	10c00017 	ldw	r3,0(r2)
   16f9c:	e0bffc17 	ldw	r2,-16(fp)
   16fa0:	10c00015 	stw	r3,0(r2)
   16fa4:	e0bffb17 	ldw	r2,-20(fp)
   16fa8:	00c20034 	movhi	r3,2048
   16fac:	18c45404 	addi	r3,r3,4432
   16fb0:	10800324 	muli	r2,r2,12
   16fb4:	10c5883a 	add	r2,r2,r3
   16fb8:	10800104 	addi	r2,r2,4
   16fbc:	10c00017 	ldw	r3,0(r2)
   16fc0:	e0bffc17 	ldw	r2,-16(fp)
   16fc4:	10c00115 	stw	r3,4(r2)
   16fc8:	e0bffb17 	ldw	r2,-20(fp)
   16fcc:	00c20034 	movhi	r3,2048
   16fd0:	18c45404 	addi	r3,r3,4432
   16fd4:	10800324 	muli	r2,r2,12
   16fd8:	10c5883a 	add	r2,r2,r3
   16fdc:	10800204 	addi	r2,r2,8
   16fe0:	10c00017 	ldw	r3,0(r2)
   16fe4:	e0bffc17 	ldw	r2,-16(fp)
   16fe8:	10c00215 	stw	r3,8(r2)
   16fec:	e13ffb17 	ldw	r4,-20(fp)
   16ff0:	001024c0 	call	1024c <alt_release_fd>
   16ff4:	e037883a 	mov	sp,fp
   16ff8:	dfc00117 	ldw	ra,4(sp)
   16ffc:	df000017 	ldw	fp,0(sp)
   17000:	dec00204 	addi	sp,sp,8
   17004:	f800283a 	ret

00017008 <alt_io_redirect>:
   17008:	defffb04 	addi	sp,sp,-20
   1700c:	dfc00415 	stw	ra,16(sp)
   17010:	df000315 	stw	fp,12(sp)
   17014:	df000304 	addi	fp,sp,12
   17018:	e13ffd15 	stw	r4,-12(fp)
   1701c:	e17ffe15 	stw	r5,-8(fp)
   17020:	e1bfff15 	stw	r6,-4(fp)
   17024:	01020034 	movhi	r4,2048
   17028:	21045704 	addi	r4,r4,4444
   1702c:	e17ffd17 	ldw	r5,-12(fp)
   17030:	01800044 	movi	r6,1
   17034:	01c07fc4 	movi	r7,511
   17038:	0016f440 	call	16f44 <alt_open_fd>
   1703c:	01020034 	movhi	r4,2048
   17040:	21045404 	addi	r4,r4,4432
   17044:	e17ffe17 	ldw	r5,-8(fp)
   17048:	000d883a 	mov	r6,zero
   1704c:	01c07fc4 	movi	r7,511
   17050:	0016f440 	call	16f44 <alt_open_fd>
   17054:	01020034 	movhi	r4,2048
   17058:	21045a04 	addi	r4,r4,4456
   1705c:	e17fff17 	ldw	r5,-4(fp)
   17060:	01800044 	movi	r6,1
   17064:	01c07fc4 	movi	r7,511
   17068:	0016f440 	call	16f44 <alt_open_fd>
   1706c:	e037883a 	mov	sp,fp
   17070:	dfc00117 	ldw	ra,4(sp)
   17074:	df000017 	ldw	fp,0(sp)
   17078:	dec00204 	addi	sp,sp,8
   1707c:	f800283a 	ret

00017080 <alt_file_locked>:
   17080:	defffc04 	addi	sp,sp,-16
   17084:	df000315 	stw	fp,12(sp)
   17088:	df000304 	addi	fp,sp,12
   1708c:	e13ffe15 	stw	r4,-8(fp)
   17090:	e0bffe17 	ldw	r2,-8(fp)
   17094:	10800217 	ldw	r2,8(r2)
   17098:	10d00034 	orhi	r3,r2,16384
   1709c:	e0bffe17 	ldw	r2,-8(fp)
   170a0:	10c00215 	stw	r3,8(r2)
   170a4:	e03ffd15 	stw	zero,-12(fp)
   170a8:	00002006 	br	1712c <alt_file_locked+0xac>
   170ac:	e0bffd17 	ldw	r2,-12(fp)
   170b0:	00c20034 	movhi	r3,2048
   170b4:	18c45404 	addi	r3,r3,4432
   170b8:	10800324 	muli	r2,r2,12
   170bc:	10c5883a 	add	r2,r2,r3
   170c0:	10c00017 	ldw	r3,0(r2)
   170c4:	e0bffe17 	ldw	r2,-8(fp)
   170c8:	10800017 	ldw	r2,0(r2)
   170cc:	1880141e 	bne	r3,r2,17120 <alt_file_locked+0xa0>
   170d0:	e0bffd17 	ldw	r2,-12(fp)
   170d4:	00c20034 	movhi	r3,2048
   170d8:	18c45404 	addi	r3,r3,4432
   170dc:	10800324 	muli	r2,r2,12
   170e0:	10c5883a 	add	r2,r2,r3
   170e4:	10800204 	addi	r2,r2,8
   170e8:	10800017 	ldw	r2,0(r2)
   170ec:	1004403a 	cmpge	r2,r2,zero
   170f0:	10000b1e 	bne	r2,zero,17120 <alt_file_locked+0xa0>
   170f4:	e0bffd17 	ldw	r2,-12(fp)
   170f8:	10800324 	muli	r2,r2,12
   170fc:	1007883a 	mov	r3,r2
   17100:	00820034 	movhi	r2,2048
   17104:	10845404 	addi	r2,r2,4432
   17108:	1887883a 	add	r3,r3,r2
   1710c:	e0bffe17 	ldw	r2,-8(fp)
   17110:	18800326 	beq	r3,r2,17120 <alt_file_locked+0xa0>
   17114:	00bffcc4 	movi	r2,-13
   17118:	e0bfff15 	stw	r2,-4(fp)
   1711c:	00000a06 	br	17148 <alt_file_locked+0xc8>
   17120:	e0bffd17 	ldw	r2,-12(fp)
   17124:	10800044 	addi	r2,r2,1
   17128:	e0bffd15 	stw	r2,-12(fp)
   1712c:	00820034 	movhi	r2,2048
   17130:	1089c404 	addi	r2,r2,10000
   17134:	10800017 	ldw	r2,0(r2)
   17138:	1007883a 	mov	r3,r2
   1713c:	e0bffd17 	ldw	r2,-12(fp)
   17140:	18bfda2e 	bgeu	r3,r2,170ac <alt_file_locked+0x2c>
   17144:	e03fff15 	stw	zero,-4(fp)
   17148:	e0bfff17 	ldw	r2,-4(fp)
   1714c:	e037883a 	mov	sp,fp
   17150:	df000017 	ldw	fp,0(sp)
   17154:	dec00104 	addi	sp,sp,4
   17158:	f800283a 	ret

0001715c <open>:
   1715c:	defff404 	addi	sp,sp,-48
   17160:	dfc00b15 	stw	ra,44(sp)
   17164:	df000a15 	stw	fp,40(sp)
   17168:	df000a04 	addi	fp,sp,40
   1716c:	e13ffb15 	stw	r4,-20(fp)
   17170:	e17ffc15 	stw	r5,-16(fp)
   17174:	e1bffd15 	stw	r6,-12(fp)
   17178:	00bfffc4 	movi	r2,-1
   1717c:	e0bff815 	stw	r2,-32(fp)
   17180:	00bffb44 	movi	r2,-19
   17184:	e0bff715 	stw	r2,-36(fp)
   17188:	e03ff615 	stw	zero,-40(fp)
   1718c:	e13ffb17 	ldw	r4,-20(fp)
   17190:	01420034 	movhi	r5,2048
   17194:	2949c204 	addi	r5,r5,9992
   17198:	0016de00 	call	16de0 <alt_find_dev>
   1719c:	e0bffa15 	stw	r2,-24(fp)
   171a0:	e0bffa17 	ldw	r2,-24(fp)
   171a4:	1004c03a 	cmpne	r2,r2,zero
   171a8:	1000051e 	bne	r2,zero,171c0 <open+0x64>
   171ac:	e13ffb17 	ldw	r4,-20(fp)
   171b0:	0017f240 	call	17f24 <alt_find_file>
   171b4:	e0bffa15 	stw	r2,-24(fp)
   171b8:	00800044 	movi	r2,1
   171bc:	e0bff615 	stw	r2,-40(fp)
   171c0:	e0bffa17 	ldw	r2,-24(fp)
   171c4:	1005003a 	cmpeq	r2,r2,zero
   171c8:	1000301e 	bne	r2,zero,1728c <open+0x130>
   171cc:	e13ffa17 	ldw	r4,-24(fp)
   171d0:	00180440 	call	18044 <alt_get_fd>
   171d4:	e0bff815 	stw	r2,-32(fp)
   171d8:	e0bff817 	ldw	r2,-32(fp)
   171dc:	1004403a 	cmpge	r2,r2,zero
   171e0:	1000031e 	bne	r2,zero,171f0 <open+0x94>
   171e4:	e0bff817 	ldw	r2,-32(fp)
   171e8:	e0bff715 	stw	r2,-36(fp)
   171ec:	00002906 	br	17294 <open+0x138>
   171f0:	e0bff817 	ldw	r2,-32(fp)
   171f4:	10800324 	muli	r2,r2,12
   171f8:	1007883a 	mov	r3,r2
   171fc:	00820034 	movhi	r2,2048
   17200:	10845404 	addi	r2,r2,4432
   17204:	1885883a 	add	r2,r3,r2
   17208:	e0bff915 	stw	r2,-28(fp)
   1720c:	e0fffc17 	ldw	r3,-16(fp)
   17210:	00900034 	movhi	r2,16384
   17214:	10bfffc4 	addi	r2,r2,-1
   17218:	1886703a 	and	r3,r3,r2
   1721c:	e0bff917 	ldw	r2,-28(fp)
   17220:	10c00215 	stw	r3,8(r2)
   17224:	e0bff617 	ldw	r2,-40(fp)
   17228:	1004c03a 	cmpne	r2,r2,zero
   1722c:	1000061e 	bne	r2,zero,17248 <open+0xec>
   17230:	e13ff917 	ldw	r4,-28(fp)
   17234:	00170800 	call	17080 <alt_file_locked>
   17238:	e0bff715 	stw	r2,-36(fp)
   1723c:	e0bff717 	ldw	r2,-36(fp)
   17240:	1004803a 	cmplt	r2,r2,zero
   17244:	1000131e 	bne	r2,zero,17294 <open+0x138>
   17248:	e0bffa17 	ldw	r2,-24(fp)
   1724c:	10800317 	ldw	r2,12(r2)
   17250:	1005003a 	cmpeq	r2,r2,zero
   17254:	1000091e 	bne	r2,zero,1727c <open+0x120>
   17258:	e0bffa17 	ldw	r2,-24(fp)
   1725c:	10800317 	ldw	r2,12(r2)
   17260:	e13ff917 	ldw	r4,-28(fp)
   17264:	e17ffb17 	ldw	r5,-20(fp)
   17268:	e1bffc17 	ldw	r6,-16(fp)
   1726c:	e1fffd17 	ldw	r7,-12(fp)
   17270:	103ee83a 	callr	r2
   17274:	e0bfff15 	stw	r2,-4(fp)
   17278:	00000106 	br	17280 <open+0x124>
   1727c:	e03fff15 	stw	zero,-4(fp)
   17280:	e0bfff17 	ldw	r2,-4(fp)
   17284:	e0bff715 	stw	r2,-36(fp)
   17288:	00000206 	br	17294 <open+0x138>
   1728c:	00bffb44 	movi	r2,-19
   17290:	e0bff715 	stw	r2,-36(fp)
   17294:	e0bff717 	ldw	r2,-36(fp)
   17298:	1004403a 	cmpge	r2,r2,zero
   1729c:	1000091e 	bne	r2,zero,172c4 <open+0x168>
   172a0:	e13ff817 	ldw	r4,-32(fp)
   172a4:	001024c0 	call	1024c <alt_release_fd>
   172a8:	00172e40 	call	172e4 <alt_get_errno>
   172ac:	e0fff717 	ldw	r3,-36(fp)
   172b0:	00c7c83a 	sub	r3,zero,r3
   172b4:	10c00015 	stw	r3,0(r2)
   172b8:	00bfffc4 	movi	r2,-1
   172bc:	e0bffe15 	stw	r2,-8(fp)
   172c0:	00000206 	br	172cc <open+0x170>
   172c4:	e0bff817 	ldw	r2,-32(fp)
   172c8:	e0bffe15 	stw	r2,-8(fp)
   172cc:	e0bffe17 	ldw	r2,-8(fp)
   172d0:	e037883a 	mov	sp,fp
   172d4:	dfc00117 	ldw	ra,4(sp)
   172d8:	df000017 	ldw	fp,0(sp)
   172dc:	dec00204 	addi	sp,sp,8
   172e0:	f800283a 	ret

000172e4 <alt_get_errno>:
   172e4:	defffd04 	addi	sp,sp,-12
   172e8:	dfc00215 	stw	ra,8(sp)
   172ec:	df000115 	stw	fp,4(sp)
   172f0:	df000104 	addi	fp,sp,4
   172f4:	00820034 	movhi	r2,2048
   172f8:	1089c504 	addi	r2,r2,10004
   172fc:	10800017 	ldw	r2,0(r2)
   17300:	1005003a 	cmpeq	r2,r2,zero
   17304:	1000061e 	bne	r2,zero,17320 <alt_get_errno+0x3c>
   17308:	00820034 	movhi	r2,2048
   1730c:	1089c504 	addi	r2,r2,10004
   17310:	10800017 	ldw	r2,0(r2)
   17314:	103ee83a 	callr	r2
   17318:	e0bfff15 	stw	r2,-4(fp)
   1731c:	00000306 	br	1732c <alt_get_errno+0x48>
   17320:	00820034 	movhi	r2,2048
   17324:	1089f204 	addi	r2,r2,10184
   17328:	e0bfff15 	stw	r2,-4(fp)
   1732c:	e0bfff17 	ldw	r2,-4(fp)
   17330:	e037883a 	mov	sp,fp
   17334:	dfc00117 	ldw	ra,4(sp)
   17338:	df000017 	ldw	fp,0(sp)
   1733c:	dec00204 	addi	sp,sp,8
   17340:	f800283a 	ret

00017344 <alt_alarm_stop>:
   17344:	defffa04 	addi	sp,sp,-24
   17348:	df000515 	stw	fp,20(sp)
   1734c:	df000504 	addi	fp,sp,20
   17350:	e13fff15 	stw	r4,-4(fp)
   17354:	0005303a 	rdctl	r2,status
   17358:	e0bffd15 	stw	r2,-12(fp)
   1735c:	e0fffd17 	ldw	r3,-12(fp)
   17360:	00bfff84 	movi	r2,-2
   17364:	1884703a 	and	r2,r3,r2
   17368:	1001703a 	wrctl	status,r2
   1736c:	e0bffd17 	ldw	r2,-12(fp)
   17370:	e0bffe15 	stw	r2,-8(fp)
   17374:	e0bfff17 	ldw	r2,-4(fp)
   17378:	e0bffc15 	stw	r2,-16(fp)
   1737c:	e0bffc17 	ldw	r2,-16(fp)
   17380:	10c00017 	ldw	r3,0(r2)
   17384:	e0bffc17 	ldw	r2,-16(fp)
   17388:	10800117 	ldw	r2,4(r2)
   1738c:	18800115 	stw	r2,4(r3)
   17390:	e0bffc17 	ldw	r2,-16(fp)
   17394:	10c00117 	ldw	r3,4(r2)
   17398:	e0bffc17 	ldw	r2,-16(fp)
   1739c:	10800017 	ldw	r2,0(r2)
   173a0:	18800015 	stw	r2,0(r3)
   173a4:	e0fffc17 	ldw	r3,-16(fp)
   173a8:	e0bffc17 	ldw	r2,-16(fp)
   173ac:	18800115 	stw	r2,4(r3)
   173b0:	e0fffc17 	ldw	r3,-16(fp)
   173b4:	e0bffc17 	ldw	r2,-16(fp)
   173b8:	18800015 	stw	r2,0(r3)
   173bc:	e0bffe17 	ldw	r2,-8(fp)
   173c0:	e0bffb15 	stw	r2,-20(fp)
   173c4:	e0bffb17 	ldw	r2,-20(fp)
   173c8:	1001703a 	wrctl	status,r2
   173cc:	e037883a 	mov	sp,fp
   173d0:	df000017 	ldw	fp,0(sp)
   173d4:	dec00104 	addi	sp,sp,4
   173d8:	f800283a 	ret

000173dc <alt_tick>:
   173dc:	defffb04 	addi	sp,sp,-20
   173e0:	dfc00415 	stw	ra,16(sp)
   173e4:	df000315 	stw	fp,12(sp)
   173e8:	df000304 	addi	fp,sp,12
   173ec:	d0a01b17 	ldw	r2,-32660(gp)
   173f0:	e0bffe15 	stw	r2,-8(fp)
   173f4:	d0a04817 	ldw	r2,-32480(gp)
   173f8:	10800044 	addi	r2,r2,1
   173fc:	d0a04815 	stw	r2,-32480(gp)
   17400:	00003106 	br	174c8 <alt_tick+0xec>
   17404:	e0bffe17 	ldw	r2,-8(fp)
   17408:	10800017 	ldw	r2,0(r2)
   1740c:	e0bfff15 	stw	r2,-4(fp)
   17410:	e0bffe17 	ldw	r2,-8(fp)
   17414:	10800403 	ldbu	r2,16(r2)
   17418:	10803fcc 	andi	r2,r2,255
   1741c:	1005003a 	cmpeq	r2,r2,zero
   17420:	1000051e 	bne	r2,zero,17438 <alt_tick+0x5c>
   17424:	d0a04817 	ldw	r2,-32480(gp)
   17428:	1004c03a 	cmpne	r2,r2,zero
   1742c:	1000021e 	bne	r2,zero,17438 <alt_tick+0x5c>
   17430:	e0bffe17 	ldw	r2,-8(fp)
   17434:	10000405 	stb	zero,16(r2)
   17438:	e0bffe17 	ldw	r2,-8(fp)
   1743c:	10c00217 	ldw	r3,8(r2)
   17440:	d0a04817 	ldw	r2,-32480(gp)
   17444:	10c01e36 	bltu	r2,r3,174c0 <alt_tick+0xe4>
   17448:	e0bffe17 	ldw	r2,-8(fp)
   1744c:	10800403 	ldbu	r2,16(r2)
   17450:	10803fcc 	andi	r2,r2,255
   17454:	1004c03a 	cmpne	r2,r2,zero
   17458:	1000191e 	bne	r2,zero,174c0 <alt_tick+0xe4>
   1745c:	e0bffe17 	ldw	r2,-8(fp)
   17460:	10c00317 	ldw	r3,12(r2)
   17464:	e0bffe17 	ldw	r2,-8(fp)
   17468:	11000517 	ldw	r4,20(r2)
   1746c:	183ee83a 	callr	r3
   17470:	e0bffd15 	stw	r2,-12(fp)
   17474:	e0bffd17 	ldw	r2,-12(fp)
   17478:	1004c03a 	cmpne	r2,r2,zero
   1747c:	1000031e 	bne	r2,zero,1748c <alt_tick+0xb0>
   17480:	e13ffe17 	ldw	r4,-8(fp)
   17484:	00173440 	call	17344 <alt_alarm_stop>
   17488:	00000d06 	br	174c0 <alt_tick+0xe4>
   1748c:	e0bffe17 	ldw	r2,-8(fp)
   17490:	10c00217 	ldw	r3,8(r2)
   17494:	e0bffd17 	ldw	r2,-12(fp)
   17498:	1887883a 	add	r3,r3,r2
   1749c:	e0bffe17 	ldw	r2,-8(fp)
   174a0:	10c00215 	stw	r3,8(r2)
   174a4:	e0bffe17 	ldw	r2,-8(fp)
   174a8:	10c00217 	ldw	r3,8(r2)
   174ac:	d0a04817 	ldw	r2,-32480(gp)
   174b0:	1880032e 	bgeu	r3,r2,174c0 <alt_tick+0xe4>
   174b4:	e0fffe17 	ldw	r3,-8(fp)
   174b8:	00800044 	movi	r2,1
   174bc:	18800405 	stb	r2,16(r3)
   174c0:	e0bfff17 	ldw	r2,-4(fp)
   174c4:	e0bffe15 	stw	r2,-8(fp)
   174c8:	d0e01b04 	addi	r3,gp,-32660
   174cc:	e0bffe17 	ldw	r2,-8(fp)
   174d0:	10ffcc1e 	bne	r2,r3,17404 <alt_tick+0x28>
   174d4:	e037883a 	mov	sp,fp
   174d8:	dfc00117 	ldw	ra,4(sp)
   174dc:	df000017 	ldw	fp,0(sp)
   174e0:	dec00204 	addi	sp,sp,8
   174e4:	f800283a 	ret

000174e8 <usleep>:
   174e8:	defffd04 	addi	sp,sp,-12
   174ec:	dfc00215 	stw	ra,8(sp)
   174f0:	df000115 	stw	fp,4(sp)
   174f4:	df000104 	addi	fp,sp,4
   174f8:	e13fff15 	stw	r4,-4(fp)
   174fc:	e13fff17 	ldw	r4,-4(fp)
   17500:	0017df80 	call	17df8 <alt_busy_sleep>
   17504:	e037883a 	mov	sp,fp
   17508:	dfc00117 	ldw	ra,4(sp)
   1750c:	df000017 	ldw	fp,0(sp)
   17510:	dec00204 	addi	sp,sp,8
   17514:	f800283a 	ret

00017518 <altera_nios2_qsys_irq_init>:
   17518:	deffff04 	addi	sp,sp,-4
   1751c:	df000015 	stw	fp,0(sp)
   17520:	d839883a 	mov	fp,sp
   17524:	000170fa 	wrctl	ienable,zero
   17528:	e037883a 	mov	sp,fp
   1752c:	df000017 	ldw	fp,0(sp)
   17530:	dec00104 	addi	sp,sp,4
   17534:	f800283a 	ret

00017538 <alt_program_amd>:
   17538:	defff704 	addi	sp,sp,-36
   1753c:	dfc00815 	stw	ra,32(sp)
   17540:	df000715 	stw	fp,28(sp)
   17544:	df000704 	addi	fp,sp,28
   17548:	e13ffc15 	stw	r4,-16(fp)
   1754c:	e17ffd15 	stw	r5,-12(fp)
   17550:	e1bffe15 	stw	r6,-8(fp)
   17554:	e1ffff15 	stw	r7,-4(fp)
   17558:	e03ffb15 	stw	zero,-20(fp)
   1755c:	e0bffc17 	ldw	r2,-16(fp)
   17560:	e0bffa15 	stw	r2,-24(fp)
   17564:	e1bfff17 	ldw	r6,-4(fp)
   17568:	00800074 	movhi	r2,1
   1756c:	109e3704 	addi	r2,r2,30940
   17570:	d8800015 	stw	r2,0(sp)
   17574:	e13ffa17 	ldw	r4,-24(fp)
   17578:	e17ffe17 	ldw	r5,-8(fp)
   1757c:	e1c00217 	ldw	r7,8(fp)
   17580:	0010eb00 	call	10eb0 <alt_flash_program_block>
   17584:	e0bffb15 	stw	r2,-20(fp)
   17588:	e0bffb17 	ldw	r2,-20(fp)
   1758c:	e037883a 	mov	sp,fp
   17590:	dfc00117 	ldw	ra,4(sp)
   17594:	df000017 	ldw	fp,0(sp)
   17598:	dec00204 	addi	sp,sp,8
   1759c:	f800283a 	ret

000175a0 <alt_erase_block_amd>:
   175a0:	defff804 	addi	sp,sp,-32
   175a4:	dfc00715 	stw	ra,28(sp)
   175a8:	df000615 	stw	fp,24(sp)
   175ac:	df000604 	addi	fp,sp,24
   175b0:	e13ffe15 	stw	r4,-8(fp)
   175b4:	e17fff15 	stw	r5,-4(fp)
   175b8:	e03ffc15 	stw	zero,-16(fp)
   175bc:	e0bffe17 	ldw	r2,-8(fp)
   175c0:	e0bffa15 	stw	r2,-24(fp)
   175c4:	e0bffa17 	ldw	r2,-24(fp)
   175c8:	10c03317 	ldw	r3,204(r2)
   175cc:	e0bffa17 	ldw	r2,-24(fp)
   175d0:	11000a17 	ldw	r4,40(r2)
   175d4:	01415544 	movi	r5,1365
   175d8:	01802a84 	movi	r6,170
   175dc:	183ee83a 	callr	r3
   175e0:	e0bffa17 	ldw	r2,-24(fp)
   175e4:	10c03317 	ldw	r3,204(r2)
   175e8:	e0bffa17 	ldw	r2,-24(fp)
   175ec:	11000a17 	ldw	r4,40(r2)
   175f0:	0140aa84 	movi	r5,682
   175f4:	01801544 	movi	r6,85
   175f8:	183ee83a 	callr	r3
   175fc:	e0bffa17 	ldw	r2,-24(fp)
   17600:	10c03317 	ldw	r3,204(r2)
   17604:	e0bffa17 	ldw	r2,-24(fp)
   17608:	11000a17 	ldw	r4,40(r2)
   1760c:	01415544 	movi	r5,1365
   17610:	01802004 	movi	r6,128
   17614:	183ee83a 	callr	r3
   17618:	e0bffa17 	ldw	r2,-24(fp)
   1761c:	10c03317 	ldw	r3,204(r2)
   17620:	e0bffa17 	ldw	r2,-24(fp)
   17624:	11000a17 	ldw	r4,40(r2)
   17628:	01415544 	movi	r5,1365
   1762c:	01802a84 	movi	r6,170
   17630:	183ee83a 	callr	r3
   17634:	e0bffa17 	ldw	r2,-24(fp)
   17638:	10c03317 	ldw	r3,204(r2)
   1763c:	e0bffa17 	ldw	r2,-24(fp)
   17640:	11000a17 	ldw	r4,40(r2)
   17644:	0140aa84 	movi	r5,682
   17648:	01801544 	movi	r6,85
   1764c:	183ee83a 	callr	r3
   17650:	e0bffa17 	ldw	r2,-24(fp)
   17654:	11803517 	ldw	r6,212(r2)
   17658:	e0bffa17 	ldw	r2,-24(fp)
   1765c:	10800a17 	ldw	r2,40(r2)
   17660:	1007883a 	mov	r3,r2
   17664:	e0bfff17 	ldw	r2,-4(fp)
   17668:	1889883a 	add	r4,r3,r2
   1766c:	01400c04 	movi	r5,48
   17670:	303ee83a 	callr	r6
   17674:	0109c404 	movi	r4,10000
   17678:	00174e80 	call	174e8 <usleep>
   1767c:	00800c84 	movi	r2,50
   17680:	e0bffb15 	stw	r2,-20(fp)
   17684:	e0bffa17 	ldw	r2,-24(fp)
   17688:	10800a17 	ldw	r2,40(r2)
   1768c:	1007883a 	mov	r3,r2
   17690:	e0bfff17 	ldw	r2,-4(fp)
   17694:	1885883a 	add	r2,r3,r2
   17698:	10800023 	ldbuio	r2,0(r2)
   1769c:	e0bffd05 	stb	r2,-12(fp)
   176a0:	0100fa04 	movi	r4,1000
   176a4:	00174e80 	call	174e8 <usleep>
   176a8:	e0bffb17 	ldw	r2,-20(fp)
   176ac:	10bfffc4 	addi	r2,r2,-1
   176b0:	e0bffb15 	stw	r2,-20(fp)
   176b4:	e0bffd03 	ldbu	r2,-12(fp)
   176b8:	10803fcc 	andi	r2,r2,255
   176bc:	1080020c 	andi	r2,r2,8
   176c0:	1004c03a 	cmpne	r2,r2,zero
   176c4:	1000031e 	bne	r2,zero,176d4 <alt_erase_block_amd+0x134>
   176c8:	e0bffb17 	ldw	r2,-20(fp)
   176cc:	10800048 	cmpgei	r2,r2,1
   176d0:	103fec1e 	bne	r2,zero,17684 <alt_erase_block_amd+0xe4>
   176d4:	e0bffa17 	ldw	r2,-24(fp)
   176d8:	10803117 	ldw	r2,196(r2)
   176dc:	e0bffb15 	stw	r2,-20(fp)
   176e0:	00001706 	br	17740 <alt_erase_block_amd+0x1a0>
   176e4:	e0bffa17 	ldw	r2,-24(fp)
   176e8:	10800a17 	ldw	r2,40(r2)
   176ec:	1007883a 	mov	r3,r2
   176f0:	e0bfff17 	ldw	r2,-4(fp)
   176f4:	1885883a 	add	r2,r3,r2
   176f8:	10800023 	ldbuio	r2,0(r2)
   176fc:	e0bffd05 	stb	r2,-12(fp)
   17700:	e0bffd03 	ldbu	r2,-12(fp)
   17704:	10803fcc 	andi	r2,r2,255
   17708:	1080201c 	xori	r2,r2,128
   1770c:	10bfe004 	addi	r2,r2,-128
   17710:	1004803a 	cmplt	r2,r2,zero
   17714:	10000d1e 	bne	r2,zero,1774c <alt_erase_block_amd+0x1ac>
   17718:	e0bffd03 	ldbu	r2,-12(fp)
   1771c:	10803fcc 	andi	r2,r2,255
   17720:	1080080c 	andi	r2,r2,32
   17724:	1004c03a 	cmpne	r2,r2,zero
   17728:	1000081e 	bne	r2,zero,1774c <alt_erase_block_amd+0x1ac>
   1772c:	0100fa04 	movi	r4,1000
   17730:	00174e80 	call	174e8 <usleep>
   17734:	e0bffb17 	ldw	r2,-20(fp)
   17738:	10bf0604 	addi	r2,r2,-1000
   1773c:	e0bffb15 	stw	r2,-20(fp)
   17740:	e0bffb17 	ldw	r2,-20(fp)
   17744:	10800048 	cmpgei	r2,r2,1
   17748:	103fe61e 	bne	r2,zero,176e4 <alt_erase_block_amd+0x144>
   1774c:	e0bffb17 	ldw	r2,-20(fp)
   17750:	10800048 	cmpgei	r2,r2,1
   17754:	1000031e 	bne	r2,zero,17764 <alt_erase_block_amd+0x1c4>
   17758:	00bfe304 	movi	r2,-116
   1775c:	e0bffc15 	stw	r2,-16(fp)
   17760:	00000f06 	br	177a0 <alt_erase_block_amd+0x200>
   17764:	e0bffa17 	ldw	r2,-24(fp)
   17768:	10800a17 	ldw	r2,40(r2)
   1776c:	1007883a 	mov	r3,r2
   17770:	e0bfff17 	ldw	r2,-4(fp)
   17774:	1885883a 	add	r2,r3,r2
   17778:	10800023 	ldbuio	r2,0(r2)
   1777c:	e0bffd05 	stb	r2,-12(fp)
   17780:	e0bffd03 	ldbu	r2,-12(fp)
   17784:	10803fcc 	andi	r2,r2,255
   17788:	1080201c 	xori	r2,r2,128
   1778c:	10bfe004 	addi	r2,r2,-128
   17790:	1004803a 	cmplt	r2,r2,zero
   17794:	1000021e 	bne	r2,zero,177a0 <alt_erase_block_amd+0x200>
   17798:	00bffec4 	movi	r2,-5
   1779c:	e0bffc15 	stw	r2,-16(fp)
   177a0:	e0bffc17 	ldw	r2,-16(fp)
   177a4:	e037883a 	mov	sp,fp
   177a8:	dfc00117 	ldw	ra,4(sp)
   177ac:	df000017 	ldw	fp,0(sp)
   177b0:	dec00204 	addi	sp,sp,8
   177b4:	f800283a 	ret

000177b8 <alt_wait_for_command_to_complete_amd>:
   177b8:	defff804 	addi	sp,sp,-32
   177bc:	dfc00715 	stw	ra,28(sp)
   177c0:	df000615 	stw	fp,24(sp)
   177c4:	df000604 	addi	fp,sp,24
   177c8:	e13ffd15 	stw	r4,-12(fp)
   177cc:	e17ffe15 	stw	r5,-8(fp)
   177d0:	e1bfff05 	stb	r6,-4(fp)
   177d4:	e0bffd17 	ldw	r2,-12(fp)
   177d8:	10803017 	ldw	r2,192(r2)
   177dc:	10801924 	muli	r2,r2,100
   177e0:	e0bffb15 	stw	r2,-20(fp)
   177e4:	e03ffa15 	stw	zero,-24(fp)
   177e8:	e0bffd17 	ldw	r2,-12(fp)
   177ec:	10800a17 	ldw	r2,40(r2)
   177f0:	1007883a 	mov	r3,r2
   177f4:	e0bffe17 	ldw	r2,-8(fp)
   177f8:	1885883a 	add	r2,r3,r2
   177fc:	10800023 	ldbuio	r2,0(r2)
   17800:	e0bffc05 	stb	r2,-16(fp)
   17804:	00001706 	br	17864 <alt_wait_for_command_to_complete_amd+0xac>
   17808:	e0bffc03 	ldbu	r2,-16(fp)
   1780c:	10803fcc 	andi	r2,r2,255
   17810:	10c0200c 	andi	r3,r2,128
   17814:	e0bfff03 	ldbu	r2,-4(fp)
   17818:	1080200c 	andi	r2,r2,128
   1781c:	18801426 	beq	r3,r2,17870 <alt_wait_for_command_to_complete_amd+0xb8>
   17820:	e0bffc03 	ldbu	r2,-16(fp)
   17824:	10803fcc 	andi	r2,r2,255
   17828:	1080080c 	andi	r2,r2,32
   1782c:	1004c03a 	cmpne	r2,r2,zero
   17830:	10000f1e 	bne	r2,zero,17870 <alt_wait_for_command_to_complete_amd+0xb8>
   17834:	01000044 	movi	r4,1
   17838:	00174e80 	call	174e8 <usleep>
   1783c:	e0bffb17 	ldw	r2,-20(fp)
   17840:	10bfffc4 	addi	r2,r2,-1
   17844:	e0bffb15 	stw	r2,-20(fp)
   17848:	e0bffd17 	ldw	r2,-12(fp)
   1784c:	10800a17 	ldw	r2,40(r2)
   17850:	1007883a 	mov	r3,r2
   17854:	e0bffe17 	ldw	r2,-8(fp)
   17858:	1885883a 	add	r2,r3,r2
   1785c:	10800023 	ldbuio	r2,0(r2)
   17860:	e0bffc05 	stb	r2,-16(fp)
   17864:	e0bffb17 	ldw	r2,-20(fp)
   17868:	10800048 	cmpgei	r2,r2,1
   1786c:	103fe61e 	bne	r2,zero,17808 <alt_wait_for_command_to_complete_amd+0x50>
   17870:	e0bffb17 	ldw	r2,-20(fp)
   17874:	1004c03a 	cmpne	r2,r2,zero
   17878:	1000031e 	bne	r2,zero,17888 <alt_wait_for_command_to_complete_amd+0xd0>
   1787c:	00bfe304 	movi	r2,-116
   17880:	e0bffa15 	stw	r2,-24(fp)
   17884:	00000f06 	br	178c4 <alt_wait_for_command_to_complete_amd+0x10c>
   17888:	e0bffd17 	ldw	r2,-12(fp)
   1788c:	10800a17 	ldw	r2,40(r2)
   17890:	1007883a 	mov	r3,r2
   17894:	e0bffe17 	ldw	r2,-8(fp)
   17898:	1885883a 	add	r2,r3,r2
   1789c:	10800023 	ldbuio	r2,0(r2)
   178a0:	e0bffc05 	stb	r2,-16(fp)
   178a4:	e0bffc03 	ldbu	r2,-16(fp)
   178a8:	10803fcc 	andi	r2,r2,255
   178ac:	10c0200c 	andi	r3,r2,128
   178b0:	e0bfff03 	ldbu	r2,-4(fp)
   178b4:	1080200c 	andi	r2,r2,128
   178b8:	18800226 	beq	r3,r2,178c4 <alt_wait_for_command_to_complete_amd+0x10c>
   178bc:	00bffec4 	movi	r2,-5
   178c0:	e0bffa15 	stw	r2,-24(fp)
   178c4:	e0bffa17 	ldw	r2,-24(fp)
   178c8:	e037883a 	mov	sp,fp
   178cc:	dfc00117 	ldw	ra,4(sp)
   178d0:	df000017 	ldw	fp,0(sp)
   178d4:	dec00204 	addi	sp,sp,8
   178d8:	f800283a 	ret

000178dc <alt_write_word_amd>:
   178dc:	defff904 	addi	sp,sp,-28
   178e0:	dfc00615 	stw	ra,24(sp)
   178e4:	df000515 	stw	fp,20(sp)
   178e8:	df000504 	addi	fp,sp,20
   178ec:	e13ffd15 	stw	r4,-12(fp)
   178f0:	e17ffe15 	stw	r5,-8(fp)
   178f4:	e1bfff15 	stw	r6,-4(fp)
   178f8:	e03ffc15 	stw	zero,-16(fp)
   178fc:	e0bffd17 	ldw	r2,-12(fp)
   17900:	10c03317 	ldw	r3,204(r2)
   17904:	e0bffd17 	ldw	r2,-12(fp)
   17908:	11000a17 	ldw	r4,40(r2)
   1790c:	01415544 	movi	r5,1365
   17910:	01802a84 	movi	r6,170
   17914:	183ee83a 	callr	r3
   17918:	e0bffd17 	ldw	r2,-12(fp)
   1791c:	10c03317 	ldw	r3,204(r2)
   17920:	e0bffd17 	ldw	r2,-12(fp)
   17924:	11000a17 	ldw	r4,40(r2)
   17928:	0140aa84 	movi	r5,682
   1792c:	01801544 	movi	r6,85
   17930:	183ee83a 	callr	r3
   17934:	e0bffd17 	ldw	r2,-12(fp)
   17938:	10c03317 	ldw	r3,204(r2)
   1793c:	e0bffd17 	ldw	r2,-12(fp)
   17940:	11000a17 	ldw	r4,40(r2)
   17944:	01415544 	movi	r5,1365
   17948:	01802804 	movi	r6,160
   1794c:	183ee83a 	callr	r3
   17950:	e0bfff17 	ldw	r2,-4(fp)
   17954:	10800003 	ldbu	r2,0(r2)
   17958:	e0bffb05 	stb	r2,-20(fp)
   1795c:	e13ffd17 	ldw	r4,-12(fp)
   17960:	e17ffe17 	ldw	r5,-8(fp)
   17964:	e1bfff17 	ldw	r6,-4(fp)
   17968:	0010d4c0 	call	10d4c <alt_write_value_to_flash>
   1796c:	e1bffb03 	ldbu	r6,-20(fp)
   17970:	e13ffd17 	ldw	r4,-12(fp)
   17974:	e17ffe17 	ldw	r5,-8(fp)
   17978:	00177b80 	call	177b8 <alt_wait_for_command_to_complete_amd>
   1797c:	e0bffc15 	stw	r2,-16(fp)
   17980:	e0bffc17 	ldw	r2,-16(fp)
   17984:	e037883a 	mov	sp,fp
   17988:	dfc00117 	ldw	ra,4(sp)
   1798c:	df000017 	ldw	fp,0(sp)
   17990:	dec00204 	addi	sp,sp,8
   17994:	f800283a 	ret

00017998 <alt_program_intel>:
   17998:	defff704 	addi	sp,sp,-36
   1799c:	dfc00815 	stw	ra,32(sp)
   179a0:	df000715 	stw	fp,28(sp)
   179a4:	df000704 	addi	fp,sp,28
   179a8:	e13ffc15 	stw	r4,-16(fp)
   179ac:	e17ffd15 	stw	r5,-12(fp)
   179b0:	e1bffe15 	stw	r6,-8(fp)
   179b4:	e1ffff15 	stw	r7,-4(fp)
   179b8:	e03ffb15 	stw	zero,-20(fp)
   179bc:	e0bffc17 	ldw	r2,-16(fp)
   179c0:	e0bffa15 	stw	r2,-24(fp)
   179c4:	e13ffa17 	ldw	r4,-24(fp)
   179c8:	e17ffd17 	ldw	r5,-12(fp)
   179cc:	0017b900 	call	17b90 <alt_unlock_block_intel>
   179d0:	e0bffb15 	stw	r2,-20(fp)
   179d4:	e0bffb17 	ldw	r2,-20(fp)
   179d8:	1004c03a 	cmpne	r2,r2,zero
   179dc:	1000091e 	bne	r2,zero,17a04 <alt_program_intel+0x6c>
   179e0:	e1bfff17 	ldw	r6,-4(fp)
   179e4:	00800074 	movhi	r2,1
   179e8:	109f4704 	addi	r2,r2,32028
   179ec:	d8800015 	stw	r2,0(sp)
   179f0:	e13ffa17 	ldw	r4,-24(fp)
   179f4:	e17ffe17 	ldw	r5,-8(fp)
   179f8:	e1c00217 	ldw	r7,8(fp)
   179fc:	0010eb00 	call	10eb0 <alt_flash_program_block>
   17a00:	e0bffb15 	stw	r2,-20(fp)
   17a04:	e0bffb17 	ldw	r2,-20(fp)
   17a08:	e037883a 	mov	sp,fp
   17a0c:	dfc00117 	ldw	ra,4(sp)
   17a10:	df000017 	ldw	fp,0(sp)
   17a14:	dec00204 	addi	sp,sp,8
   17a18:	f800283a 	ret

00017a1c <alt_erase_block_intel>:
   17a1c:	defff804 	addi	sp,sp,-32
   17a20:	dfc00715 	stw	ra,28(sp)
   17a24:	df000615 	stw	fp,24(sp)
   17a28:	df000604 	addi	fp,sp,24
   17a2c:	e13ffe15 	stw	r4,-8(fp)
   17a30:	e17fff15 	stw	r5,-4(fp)
   17a34:	e03ffc15 	stw	zero,-16(fp)
   17a38:	e0bffe17 	ldw	r2,-8(fp)
   17a3c:	e0bffb15 	stw	r2,-20(fp)
   17a40:	e0bffb17 	ldw	r2,-20(fp)
   17a44:	10803117 	ldw	r2,196(r2)
   17a48:	e0bffa15 	stw	r2,-24(fp)
   17a4c:	e13ffb17 	ldw	r4,-20(fp)
   17a50:	e17fff17 	ldw	r5,-4(fp)
   17a54:	0017b900 	call	17b90 <alt_unlock_block_intel>
   17a58:	e0bffc15 	stw	r2,-16(fp)
   17a5c:	e0bffc17 	ldw	r2,-16(fp)
   17a60:	1004c03a 	cmpne	r2,r2,zero
   17a64:	1000441e 	bne	r2,zero,17b78 <alt_erase_block_intel+0x15c>
   17a68:	e0bffb17 	ldw	r2,-20(fp)
   17a6c:	11803517 	ldw	r6,212(r2)
   17a70:	e0bffb17 	ldw	r2,-20(fp)
   17a74:	10800a17 	ldw	r2,40(r2)
   17a78:	1007883a 	mov	r3,r2
   17a7c:	e0bfff17 	ldw	r2,-4(fp)
   17a80:	1889883a 	add	r4,r3,r2
   17a84:	01400804 	movi	r5,32
   17a88:	303ee83a 	callr	r6
   17a8c:	e0bffb17 	ldw	r2,-20(fp)
   17a90:	11803517 	ldw	r6,212(r2)
   17a94:	e0bffb17 	ldw	r2,-20(fp)
   17a98:	10800a17 	ldw	r2,40(r2)
   17a9c:	1007883a 	mov	r3,r2
   17aa0:	e0bfff17 	ldw	r2,-4(fp)
   17aa4:	1889883a 	add	r4,r3,r2
   17aa8:	01403404 	movi	r5,208
   17aac:	303ee83a 	callr	r6
   17ab0:	e0bffb17 	ldw	r2,-20(fp)
   17ab4:	10800a17 	ldw	r2,40(r2)
   17ab8:	1007883a 	mov	r3,r2
   17abc:	e0bfff17 	ldw	r2,-4(fp)
   17ac0:	1885883a 	add	r2,r3,r2
   17ac4:	10800023 	ldbuio	r2,0(r2)
   17ac8:	e0bffd05 	stb	r2,-12(fp)
   17acc:	e0bffd03 	ldbu	r2,-12(fp)
   17ad0:	10803fcc 	andi	r2,r2,255
   17ad4:	1080201c 	xori	r2,r2,128
   17ad8:	10bfe004 	addi	r2,r2,-128
   17adc:	1004803a 	cmplt	r2,r2,zero
   17ae0:	1000081e 	bne	r2,zero,17b04 <alt_erase_block_intel+0xe8>
   17ae4:	0100fa04 	movi	r4,1000
   17ae8:	00174e80 	call	174e8 <usleep>
   17aec:	e0bffa17 	ldw	r2,-24(fp)
   17af0:	10bf0604 	addi	r2,r2,-1000
   17af4:	e0bffa15 	stw	r2,-24(fp)
   17af8:	e0bffa17 	ldw	r2,-24(fp)
   17afc:	10800048 	cmpgei	r2,r2,1
   17b00:	103feb1e 	bne	r2,zero,17ab0 <alt_erase_block_intel+0x94>
   17b04:	e0bffa17 	ldw	r2,-24(fp)
   17b08:	10800048 	cmpgei	r2,r2,1
   17b0c:	1000031e 	bne	r2,zero,17b1c <alt_erase_block_intel+0x100>
   17b10:	00bfe304 	movi	r2,-116
   17b14:	e0bffc15 	stw	r2,-16(fp)
   17b18:	00000e06 	br	17b54 <alt_erase_block_intel+0x138>
   17b1c:	e0bffd03 	ldbu	r2,-12(fp)
   17b20:	10803fcc 	andi	r2,r2,255
   17b24:	10801fcc 	andi	r2,r2,127
   17b28:	1005003a 	cmpeq	r2,r2,zero
   17b2c:	1000091e 	bne	r2,zero,17b54 <alt_erase_block_intel+0x138>
   17b30:	00bffec4 	movi	r2,-5
   17b34:	e0bffc15 	stw	r2,-16(fp)
   17b38:	e0bffb17 	ldw	r2,-20(fp)
   17b3c:	10800a17 	ldw	r2,40(r2)
   17b40:	1007883a 	mov	r3,r2
   17b44:	e0bfff17 	ldw	r2,-4(fp)
   17b48:	1885883a 	add	r2,r3,r2
   17b4c:	10800023 	ldbuio	r2,0(r2)
   17b50:	e0bffd05 	stb	r2,-12(fp)
   17b54:	e0bffb17 	ldw	r2,-20(fp)
   17b58:	11803517 	ldw	r6,212(r2)
   17b5c:	e0bffb17 	ldw	r2,-20(fp)
   17b60:	10800a17 	ldw	r2,40(r2)
   17b64:	1007883a 	mov	r3,r2
   17b68:	e0bfff17 	ldw	r2,-4(fp)
   17b6c:	1889883a 	add	r4,r3,r2
   17b70:	01403fc4 	movi	r5,255
   17b74:	303ee83a 	callr	r6
   17b78:	e0bffc17 	ldw	r2,-16(fp)
   17b7c:	e037883a 	mov	sp,fp
   17b80:	dfc00117 	ldw	ra,4(sp)
   17b84:	df000017 	ldw	fp,0(sp)
   17b88:	dec00204 	addi	sp,sp,8
   17b8c:	f800283a 	ret

00017b90 <alt_unlock_block_intel>:
   17b90:	defff904 	addi	sp,sp,-28
   17b94:	dfc00615 	stw	ra,24(sp)
   17b98:	df000515 	stw	fp,20(sp)
   17b9c:	df000504 	addi	fp,sp,20
   17ba0:	e13ffe15 	stw	r4,-8(fp)
   17ba4:	e17fff15 	stw	r5,-4(fp)
   17ba8:	e03ffc15 	stw	zero,-16(fp)
   17bac:	e0bffe17 	ldw	r2,-8(fp)
   17bb0:	10803017 	ldw	r2,192(r2)
   17bb4:	10801924 	muli	r2,r2,100
   17bb8:	e0bffb15 	stw	r2,-20(fp)
   17bbc:	e0bffe17 	ldw	r2,-8(fp)
   17bc0:	11803517 	ldw	r6,212(r2)
   17bc4:	e0bffe17 	ldw	r2,-8(fp)
   17bc8:	10800a17 	ldw	r2,40(r2)
   17bcc:	1007883a 	mov	r3,r2
   17bd0:	e0bfff17 	ldw	r2,-4(fp)
   17bd4:	1889883a 	add	r4,r3,r2
   17bd8:	01402404 	movi	r5,144
   17bdc:	303ee83a 	callr	r6
   17be0:	e0bffe17 	ldw	r2,-8(fp)
   17be4:	10800a17 	ldw	r2,40(r2)
   17be8:	1007883a 	mov	r3,r2
   17bec:	e0bfff17 	ldw	r2,-4(fp)
   17bf0:	1885883a 	add	r2,r3,r2
   17bf4:	10800104 	addi	r2,r2,4
   17bf8:	10800023 	ldbuio	r2,0(r2)
   17bfc:	e0bffd45 	stb	r2,-11(fp)
   17c00:	e0bffd43 	ldbu	r2,-11(fp)
   17c04:	1080004c 	andi	r2,r2,1
   17c08:	10803fcc 	andi	r2,r2,255
   17c0c:	1005003a 	cmpeq	r2,r2,zero
   17c10:	1000331e 	bne	r2,zero,17ce0 <alt_unlock_block_intel+0x150>
   17c14:	e0bffe17 	ldw	r2,-8(fp)
   17c18:	11803517 	ldw	r6,212(r2)
   17c1c:	e0bffe17 	ldw	r2,-8(fp)
   17c20:	10800a17 	ldw	r2,40(r2)
   17c24:	1007883a 	mov	r3,r2
   17c28:	e0bfff17 	ldw	r2,-4(fp)
   17c2c:	1889883a 	add	r4,r3,r2
   17c30:	01401804 	movi	r5,96
   17c34:	303ee83a 	callr	r6
   17c38:	e0bffe17 	ldw	r2,-8(fp)
   17c3c:	11803517 	ldw	r6,212(r2)
   17c40:	e0bffe17 	ldw	r2,-8(fp)
   17c44:	10800a17 	ldw	r2,40(r2)
   17c48:	1007883a 	mov	r3,r2
   17c4c:	e0bfff17 	ldw	r2,-4(fp)
   17c50:	1889883a 	add	r4,r3,r2
   17c54:	01403404 	movi	r5,208
   17c58:	303ee83a 	callr	r6
   17c5c:	e0bffe17 	ldw	r2,-8(fp)
   17c60:	10800a17 	ldw	r2,40(r2)
   17c64:	1007883a 	mov	r3,r2
   17c68:	e0bfff17 	ldw	r2,-4(fp)
   17c6c:	1885883a 	add	r2,r3,r2
   17c70:	10800023 	ldbuio	r2,0(r2)
   17c74:	e0bffd05 	stb	r2,-12(fp)
   17c78:	e0bffd03 	ldbu	r2,-12(fp)
   17c7c:	10803fcc 	andi	r2,r2,255
   17c80:	1080201c 	xori	r2,r2,128
   17c84:	10bfe004 	addi	r2,r2,-128
   17c88:	1004803a 	cmplt	r2,r2,zero
   17c8c:	1000081e 	bne	r2,zero,17cb0 <alt_unlock_block_intel+0x120>
   17c90:	e0bffb17 	ldw	r2,-20(fp)
   17c94:	10bfffc4 	addi	r2,r2,-1
   17c98:	e0bffb15 	stw	r2,-20(fp)
   17c9c:	01000044 	movi	r4,1
   17ca0:	00174e80 	call	174e8 <usleep>
   17ca4:	e0bffb17 	ldw	r2,-20(fp)
   17ca8:	10800048 	cmpgei	r2,r2,1
   17cac:	103feb1e 	bne	r2,zero,17c5c <alt_unlock_block_intel+0xcc>
   17cb0:	e0bffb17 	ldw	r2,-20(fp)
   17cb4:	1004c03a 	cmpne	r2,r2,zero
   17cb8:	1000031e 	bne	r2,zero,17cc8 <alt_unlock_block_intel+0x138>
   17cbc:	00bfe304 	movi	r2,-116
   17cc0:	e0bffc15 	stw	r2,-16(fp)
   17cc4:	00000606 	br	17ce0 <alt_unlock_block_intel+0x150>
   17cc8:	e0bffd03 	ldbu	r2,-12(fp)
   17ccc:	10801fcc 	andi	r2,r2,127
   17cd0:	1005003a 	cmpeq	r2,r2,zero
   17cd4:	1000021e 	bne	r2,zero,17ce0 <alt_unlock_block_intel+0x150>
   17cd8:	00bffec4 	movi	r2,-5
   17cdc:	e0bffc15 	stw	r2,-16(fp)
   17ce0:	e0bffe17 	ldw	r2,-8(fp)
   17ce4:	11803517 	ldw	r6,212(r2)
   17ce8:	e0bffe17 	ldw	r2,-8(fp)
   17cec:	10800a17 	ldw	r2,40(r2)
   17cf0:	1007883a 	mov	r3,r2
   17cf4:	e0bfff17 	ldw	r2,-4(fp)
   17cf8:	1889883a 	add	r4,r3,r2
   17cfc:	01403fc4 	movi	r5,255
   17d00:	303ee83a 	callr	r6
   17d04:	e0bffc17 	ldw	r2,-16(fp)
   17d08:	e037883a 	mov	sp,fp
   17d0c:	dfc00117 	ldw	ra,4(sp)
   17d10:	df000017 	ldw	fp,0(sp)
   17d14:	dec00204 	addi	sp,sp,8
   17d18:	f800283a 	ret

00017d1c <alt_write_word_intel>:
   17d1c:	defff904 	addi	sp,sp,-28
   17d20:	dfc00615 	stw	ra,24(sp)
   17d24:	df000515 	stw	fp,20(sp)
   17d28:	df000504 	addi	fp,sp,20
   17d2c:	e13ffd15 	stw	r4,-12(fp)
   17d30:	e17ffe15 	stw	r5,-8(fp)
   17d34:	e1bfff15 	stw	r6,-4(fp)
   17d38:	e03ffc15 	stw	zero,-16(fp)
   17d3c:	e0bffd17 	ldw	r2,-12(fp)
   17d40:	11803517 	ldw	r6,212(r2)
   17d44:	e0bffd17 	ldw	r2,-12(fp)
   17d48:	10800a17 	ldw	r2,40(r2)
   17d4c:	1007883a 	mov	r3,r2
   17d50:	e0bffe17 	ldw	r2,-8(fp)
   17d54:	1889883a 	add	r4,r3,r2
   17d58:	01401004 	movi	r5,64
   17d5c:	303ee83a 	callr	r6
   17d60:	e13ffd17 	ldw	r4,-12(fp)
   17d64:	e17ffe17 	ldw	r5,-8(fp)
   17d68:	e1bfff17 	ldw	r6,-4(fp)
   17d6c:	0010d4c0 	call	10d4c <alt_write_value_to_flash>
   17d70:	e0bffd17 	ldw	r2,-12(fp)
   17d74:	10800a17 	ldw	r2,40(r2)
   17d78:	1007883a 	mov	r3,r2
   17d7c:	e0bffe17 	ldw	r2,-8(fp)
   17d80:	1885883a 	add	r2,r3,r2
   17d84:	10800023 	ldbuio	r2,0(r2)
   17d88:	e0bffb05 	stb	r2,-20(fp)
   17d8c:	e0bffb03 	ldbu	r2,-20(fp)
   17d90:	10803fcc 	andi	r2,r2,255
   17d94:	1080201c 	xori	r2,r2,128
   17d98:	10bfe004 	addi	r2,r2,-128
   17d9c:	1004403a 	cmpge	r2,r2,zero
   17da0:	103ff31e 	bne	r2,zero,17d70 <alt_write_word_intel+0x54>
   17da4:	e0bffb03 	ldbu	r2,-20(fp)
   17da8:	10801fcc 	andi	r2,r2,127
   17dac:	1005003a 	cmpeq	r2,r2,zero
   17db0:	1000021e 	bne	r2,zero,17dbc <alt_write_word_intel+0xa0>
   17db4:	00bffec4 	movi	r2,-5
   17db8:	e0bffc15 	stw	r2,-16(fp)
   17dbc:	e0bffd17 	ldw	r2,-12(fp)
   17dc0:	11803517 	ldw	r6,212(r2)
   17dc4:	e0bffd17 	ldw	r2,-12(fp)
   17dc8:	10800a17 	ldw	r2,40(r2)
   17dcc:	1007883a 	mov	r3,r2
   17dd0:	e0bffe17 	ldw	r2,-8(fp)
   17dd4:	1889883a 	add	r4,r3,r2
   17dd8:	01403fc4 	movi	r5,255
   17ddc:	303ee83a 	callr	r6
   17de0:	e0bffc17 	ldw	r2,-16(fp)
   17de4:	e037883a 	mov	sp,fp
   17de8:	dfc00117 	ldw	ra,4(sp)
   17dec:	df000017 	ldw	fp,0(sp)
   17df0:	dec00204 	addi	sp,sp,8
   17df4:	f800283a 	ret

00017df8 <alt_busy_sleep>:
   17df8:	defffb04 	addi	sp,sp,-20
   17dfc:	df000415 	stw	fp,16(sp)
   17e00:	df000404 	addi	fp,sp,16
   17e04:	e13fff15 	stw	r4,-4(fp)
   17e08:	008000c4 	movi	r2,3
   17e0c:	e0bffc15 	stw	r2,-16(fp)
   17e10:	e0fffc17 	ldw	r3,-16(fp)
   17e14:	008003f4 	movhi	r2,15
   17e18:	10909004 	addi	r2,r2,16960
   17e1c:	1887383a 	mul	r3,r3,r2
   17e20:	00817db4 	movhi	r2,1526
   17e24:	10b84004 	addi	r2,r2,-7936
   17e28:	10c7203a 	divu	r3,r2,r3
   17e2c:	00a00034 	movhi	r2,32768
   17e30:	10bfffc4 	addi	r2,r2,-1
   17e34:	10c7203a 	divu	r3,r2,r3
   17e38:	e0bfff17 	ldw	r2,-4(fp)
   17e3c:	10c5203a 	divu	r2,r2,r3
   17e40:	e0bffd15 	stw	r2,-12(fp)
   17e44:	e0bffd17 	ldw	r2,-12(fp)
   17e48:	1005003a 	cmpeq	r2,r2,zero
   17e4c:	1000251e 	bne	r2,zero,17ee4 <alt_busy_sleep+0xec>
   17e50:	e03ffe15 	stw	zero,-8(fp)
   17e54:	00001406 	br	17ea8 <alt_busy_sleep+0xb0>
   17e58:	00a00034 	movhi	r2,32768
   17e5c:	10bfffc4 	addi	r2,r2,-1
   17e60:	10bfffc4 	addi	r2,r2,-1
   17e64:	103ffe1e 	bne	r2,zero,17e60 <alt_busy_sleep+0x68>
   17e68:	e0fffc17 	ldw	r3,-16(fp)
   17e6c:	008003f4 	movhi	r2,15
   17e70:	10909004 	addi	r2,r2,16960
   17e74:	1887383a 	mul	r3,r3,r2
   17e78:	00817db4 	movhi	r2,1526
   17e7c:	10b84004 	addi	r2,r2,-7936
   17e80:	10c7203a 	divu	r3,r2,r3
   17e84:	00a00034 	movhi	r2,32768
   17e88:	10bfffc4 	addi	r2,r2,-1
   17e8c:	10c7203a 	divu	r3,r2,r3
   17e90:	e0bfff17 	ldw	r2,-4(fp)
   17e94:	10c5c83a 	sub	r2,r2,r3
   17e98:	e0bfff15 	stw	r2,-4(fp)
   17e9c:	e0bffe17 	ldw	r2,-8(fp)
   17ea0:	10800044 	addi	r2,r2,1
   17ea4:	e0bffe15 	stw	r2,-8(fp)
   17ea8:	e0fffe17 	ldw	r3,-8(fp)
   17eac:	e0bffd17 	ldw	r2,-12(fp)
   17eb0:	18bfe916 	blt	r3,r2,17e58 <alt_busy_sleep+0x60>
   17eb4:	e0fffc17 	ldw	r3,-16(fp)
   17eb8:	008003f4 	movhi	r2,15
   17ebc:	10909004 	addi	r2,r2,16960
   17ec0:	1887383a 	mul	r3,r3,r2
   17ec4:	00817db4 	movhi	r2,1526
   17ec8:	10b84004 	addi	r2,r2,-7936
   17ecc:	10c7203a 	divu	r3,r2,r3
   17ed0:	e0bfff17 	ldw	r2,-4(fp)
   17ed4:	1885383a 	mul	r2,r3,r2
   17ed8:	10bfffc4 	addi	r2,r2,-1
   17edc:	103ffe1e 	bne	r2,zero,17ed8 <alt_busy_sleep+0xe0>
   17ee0:	00000b06 	br	17f10 <alt_busy_sleep+0x118>
   17ee4:	e0fffc17 	ldw	r3,-16(fp)
   17ee8:	008003f4 	movhi	r2,15
   17eec:	10909004 	addi	r2,r2,16960
   17ef0:	1887383a 	mul	r3,r3,r2
   17ef4:	00817db4 	movhi	r2,1526
   17ef8:	10b84004 	addi	r2,r2,-7936
   17efc:	10c7203a 	divu	r3,r2,r3
   17f00:	e0bfff17 	ldw	r2,-4(fp)
   17f04:	1885383a 	mul	r2,r3,r2
   17f08:	10bfffc4 	addi	r2,r2,-1
   17f0c:	00bffe16 	blt	zero,r2,17f08 <alt_busy_sleep+0x110>
   17f10:	0005883a 	mov	r2,zero
   17f14:	e037883a 	mov	sp,fp
   17f18:	df000017 	ldw	fp,0(sp)
   17f1c:	dec00104 	addi	sp,sp,4
   17f20:	f800283a 	ret

00017f24 <alt_find_file>:
   17f24:	defffa04 	addi	sp,sp,-24
   17f28:	dfc00515 	stw	ra,20(sp)
   17f2c:	df000415 	stw	fp,16(sp)
   17f30:	df000404 	addi	fp,sp,16
   17f34:	e13ffe15 	stw	r4,-8(fp)
   17f38:	00820034 	movhi	r2,2048
   17f3c:	1089c004 	addi	r2,r2,9984
   17f40:	10800017 	ldw	r2,0(r2)
   17f44:	e0bffd15 	stw	r2,-12(fp)
   17f48:	00003306 	br	18018 <alt_find_file+0xf4>
   17f4c:	e0bffd17 	ldw	r2,-12(fp)
   17f50:	11000217 	ldw	r4,8(r2)
   17f54:	00076800 	call	7680 <strlen>
   17f58:	e0bffc15 	stw	r2,-16(fp)
   17f5c:	e0bffd17 	ldw	r2,-12(fp)
   17f60:	10c00217 	ldw	r3,8(r2)
   17f64:	e0bffc17 	ldw	r2,-16(fp)
   17f68:	1885883a 	add	r2,r3,r2
   17f6c:	10bfffc4 	addi	r2,r2,-1
   17f70:	10800003 	ldbu	r2,0(r2)
   17f74:	10803fcc 	andi	r2,r2,255
   17f78:	1080201c 	xori	r2,r2,128
   17f7c:	10bfe004 	addi	r2,r2,-128
   17f80:	10800bd8 	cmpnei	r2,r2,47
   17f84:	1000031e 	bne	r2,zero,17f94 <alt_find_file+0x70>
   17f88:	e0bffc17 	ldw	r2,-16(fp)
   17f8c:	10bfffc4 	addi	r2,r2,-1
   17f90:	e0bffc15 	stw	r2,-16(fp)
   17f94:	e0bffc17 	ldw	r2,-16(fp)
   17f98:	1007883a 	mov	r3,r2
   17f9c:	e0bffe17 	ldw	r2,-8(fp)
   17fa0:	1885883a 	add	r2,r3,r2
   17fa4:	10800003 	ldbu	r2,0(r2)
   17fa8:	10803fcc 	andi	r2,r2,255
   17fac:	1080201c 	xori	r2,r2,128
   17fb0:	10bfe004 	addi	r2,r2,-128
   17fb4:	10800be0 	cmpeqi	r2,r2,47
   17fb8:	10000a1e 	bne	r2,zero,17fe4 <alt_find_file+0xc0>
   17fbc:	e0bffc17 	ldw	r2,-16(fp)
   17fc0:	1007883a 	mov	r3,r2
   17fc4:	e0bffe17 	ldw	r2,-8(fp)
   17fc8:	1885883a 	add	r2,r3,r2
   17fcc:	10800003 	ldbu	r2,0(r2)
   17fd0:	10803fcc 	andi	r2,r2,255
   17fd4:	1080201c 	xori	r2,r2,128
   17fd8:	10bfe004 	addi	r2,r2,-128
   17fdc:	1004c03a 	cmpne	r2,r2,zero
   17fe0:	10000a1e 	bne	r2,zero,1800c <alt_find_file+0xe8>
   17fe4:	e0bffd17 	ldw	r2,-12(fp)
   17fe8:	11000217 	ldw	r4,8(r2)
   17fec:	e1bffc17 	ldw	r6,-16(fp)
   17ff0:	e17ffe17 	ldw	r5,-8(fp)
   17ff4:	00072b00 	call	72b0 <memcmp>
   17ff8:	1004c03a 	cmpne	r2,r2,zero
   17ffc:	1000031e 	bne	r2,zero,1800c <alt_find_file+0xe8>
   18000:	e0bffd17 	ldw	r2,-12(fp)
   18004:	e0bfff15 	stw	r2,-4(fp)
   18008:	00000806 	br	1802c <alt_find_file+0x108>
   1800c:	e0bffd17 	ldw	r2,-12(fp)
   18010:	10800017 	ldw	r2,0(r2)
   18014:	e0bffd15 	stw	r2,-12(fp)
   18018:	00c20034 	movhi	r3,2048
   1801c:	18c9c004 	addi	r3,r3,9984
   18020:	e0bffd17 	ldw	r2,-12(fp)
   18024:	10ffc91e 	bne	r2,r3,17f4c <alt_find_file+0x28>
   18028:	e03fff15 	stw	zero,-4(fp)
   1802c:	e0bfff17 	ldw	r2,-4(fp)
   18030:	e037883a 	mov	sp,fp
   18034:	dfc00117 	ldw	ra,4(sp)
   18038:	df000017 	ldw	fp,0(sp)
   1803c:	dec00204 	addi	sp,sp,8
   18040:	f800283a 	ret

00018044 <alt_get_fd>:
   18044:	defffc04 	addi	sp,sp,-16
   18048:	df000315 	stw	fp,12(sp)
   1804c:	df000304 	addi	fp,sp,12
   18050:	e13fff15 	stw	r4,-4(fp)
   18054:	00bffa04 	movi	r2,-24
   18058:	e0bffd15 	stw	r2,-12(fp)
   1805c:	e03ffe15 	stw	zero,-8(fp)
   18060:	00001e06 	br	180dc <alt_get_fd+0x98>
   18064:	e0bffe17 	ldw	r2,-8(fp)
   18068:	00c20034 	movhi	r3,2048
   1806c:	18c45404 	addi	r3,r3,4432
   18070:	10800324 	muli	r2,r2,12
   18074:	10c5883a 	add	r2,r2,r3
   18078:	10800017 	ldw	r2,0(r2)
   1807c:	1004c03a 	cmpne	r2,r2,zero
   18080:	1000131e 	bne	r2,zero,180d0 <alt_get_fd+0x8c>
   18084:	e0bffe17 	ldw	r2,-8(fp)
   18088:	00c20034 	movhi	r3,2048
   1808c:	18c45404 	addi	r3,r3,4432
   18090:	10800324 	muli	r2,r2,12
   18094:	10c7883a 	add	r3,r2,r3
   18098:	e0bfff17 	ldw	r2,-4(fp)
   1809c:	18800015 	stw	r2,0(r3)
   180a0:	00820034 	movhi	r2,2048
   180a4:	1089c404 	addi	r2,r2,10000
   180a8:	10c00017 	ldw	r3,0(r2)
   180ac:	e0bffe17 	ldw	r2,-8(fp)
   180b0:	1880040e 	bge	r3,r2,180c4 <alt_get_fd+0x80>
   180b4:	00c20034 	movhi	r3,2048
   180b8:	18c9c404 	addi	r3,r3,10000
   180bc:	e0bffe17 	ldw	r2,-8(fp)
   180c0:	18800015 	stw	r2,0(r3)
   180c4:	e0bffe17 	ldw	r2,-8(fp)
   180c8:	e0bffd15 	stw	r2,-12(fp)
   180cc:	00000606 	br	180e8 <alt_get_fd+0xa4>
   180d0:	e0bffe17 	ldw	r2,-8(fp)
   180d4:	10800044 	addi	r2,r2,1
   180d8:	e0bffe15 	stw	r2,-8(fp)
   180dc:	e0bffe17 	ldw	r2,-8(fp)
   180e0:	10800810 	cmplti	r2,r2,32
   180e4:	103fdf1e 	bne	r2,zero,18064 <alt_get_fd+0x20>
   180e8:	e0bffd17 	ldw	r2,-12(fp)
   180ec:	e037883a 	mov	sp,fp
   180f0:	df000017 	ldw	fp,0(sp)
   180f4:	dec00104 	addi	sp,sp,4
   180f8:	f800283a 	ret

000180fc <atexit>:
   180fc:	200b883a 	mov	r5,r4
   18100:	000d883a 	mov	r6,zero
   18104:	0009883a 	mov	r4,zero
   18108:	000f883a 	mov	r7,zero
   1810c:	00181481 	jmpi	18148 <__register_exitproc>

00018110 <exit>:
   18110:	defffe04 	addi	sp,sp,-8
   18114:	000b883a 	mov	r5,zero
   18118:	dc000015 	stw	r16,0(sp)
   1811c:	dfc00115 	stw	ra,4(sp)
   18120:	2021883a 	mov	r16,r4
   18124:	00182800 	call	18280 <__call_exitprocs>
   18128:	00820034 	movhi	r2,2048
   1812c:	1089bb04 	addi	r2,r2,9964
   18130:	11000017 	ldw	r4,0(r2)
   18134:	20800f17 	ldw	r2,60(r4)
   18138:	10000126 	beq	r2,zero,18140 <exit+0x30>
   1813c:	103ee83a 	callr	r2
   18140:	8009883a 	mov	r4,r16
   18144:	00184700 	call	18470 <_exit>

00018148 <__register_exitproc>:
   18148:	defffa04 	addi	sp,sp,-24
   1814c:	00820034 	movhi	r2,2048
   18150:	1089bb04 	addi	r2,r2,9964
   18154:	dc000015 	stw	r16,0(sp)
   18158:	14000017 	ldw	r16,0(r2)
   1815c:	dd000415 	stw	r20,16(sp)
   18160:	2829883a 	mov	r20,r5
   18164:	81405217 	ldw	r5,328(r16)
   18168:	dcc00315 	stw	r19,12(sp)
   1816c:	dc800215 	stw	r18,8(sp)
   18170:	dc400115 	stw	r17,4(sp)
   18174:	dfc00515 	stw	ra,20(sp)
   18178:	2023883a 	mov	r17,r4
   1817c:	3027883a 	mov	r19,r6
   18180:	3825883a 	mov	r18,r7
   18184:	28002526 	beq	r5,zero,1821c <__register_exitproc+0xd4>
   18188:	29000117 	ldw	r4,4(r5)
   1818c:	008007c4 	movi	r2,31
   18190:	11002716 	blt	r2,r4,18230 <__register_exitproc+0xe8>
   18194:	8800101e 	bne	r17,zero,181d8 <__register_exitproc+0x90>
   18198:	2105883a 	add	r2,r4,r4
   1819c:	1085883a 	add	r2,r2,r2
   181a0:	20c00044 	addi	r3,r4,1
   181a4:	1145883a 	add	r2,r2,r5
   181a8:	0009883a 	mov	r4,zero
   181ac:	15000215 	stw	r20,8(r2)
   181b0:	28c00115 	stw	r3,4(r5)
   181b4:	2005883a 	mov	r2,r4
   181b8:	dfc00517 	ldw	ra,20(sp)
   181bc:	dd000417 	ldw	r20,16(sp)
   181c0:	dcc00317 	ldw	r19,12(sp)
   181c4:	dc800217 	ldw	r18,8(sp)
   181c8:	dc400117 	ldw	r17,4(sp)
   181cc:	dc000017 	ldw	r16,0(sp)
   181d0:	dec00604 	addi	sp,sp,24
   181d4:	f800283a 	ret
   181d8:	29802204 	addi	r6,r5,136
   181dc:	00800044 	movi	r2,1
   181e0:	110e983a 	sll	r7,r2,r4
   181e4:	30c04017 	ldw	r3,256(r6)
   181e8:	2105883a 	add	r2,r4,r4
   181ec:	1085883a 	add	r2,r2,r2
   181f0:	1185883a 	add	r2,r2,r6
   181f4:	19c6b03a 	or	r3,r3,r7
   181f8:	14802015 	stw	r18,128(r2)
   181fc:	14c00015 	stw	r19,0(r2)
   18200:	00800084 	movi	r2,2
   18204:	30c04015 	stw	r3,256(r6)
   18208:	88bfe31e 	bne	r17,r2,18198 <__register_exitproc+0x50>
   1820c:	30804117 	ldw	r2,260(r6)
   18210:	11c4b03a 	or	r2,r2,r7
   18214:	30804115 	stw	r2,260(r6)
   18218:	003fdf06 	br	18198 <__register_exitproc+0x50>
   1821c:	00820234 	movhi	r2,2056
   18220:	10beb604 	addi	r2,r2,-1320
   18224:	100b883a 	mov	r5,r2
   18228:	80805215 	stw	r2,328(r16)
   1822c:	003fd606 	br	18188 <__register_exitproc+0x40>
   18230:	00800034 	movhi	r2,0
   18234:	10800004 	addi	r2,r2,0
   18238:	1000021e 	bne	r2,zero,18244 <__register_exitproc+0xfc>
   1823c:	013fffc4 	movi	r4,-1
   18240:	003fdc06 	br	181b4 <__register_exitproc+0x6c>
   18244:	01006404 	movi	r4,400
   18248:	103ee83a 	callr	r2
   1824c:	1007883a 	mov	r3,r2
   18250:	103ffa26 	beq	r2,zero,1823c <__register_exitproc+0xf4>
   18254:	80805217 	ldw	r2,328(r16)
   18258:	180b883a 	mov	r5,r3
   1825c:	18000115 	stw	zero,4(r3)
   18260:	18800015 	stw	r2,0(r3)
   18264:	80c05215 	stw	r3,328(r16)
   18268:	18006215 	stw	zero,392(r3)
   1826c:	18006315 	stw	zero,396(r3)
   18270:	0009883a 	mov	r4,zero
   18274:	883fc826 	beq	r17,zero,18198 <__register_exitproc+0x50>
   18278:	003fd706 	br	181d8 <__register_exitproc+0x90>

0001827c <register_fini>:
   1827c:	f800283a 	ret

00018280 <__call_exitprocs>:
   18280:	00820034 	movhi	r2,2048
   18284:	1089bb04 	addi	r2,r2,9964
   18288:	10800017 	ldw	r2,0(r2)
   1828c:	defff304 	addi	sp,sp,-52
   18290:	df000b15 	stw	fp,44(sp)
   18294:	d8800115 	stw	r2,4(sp)
   18298:	00800034 	movhi	r2,0
   1829c:	10800004 	addi	r2,r2,0
   182a0:	1005003a 	cmpeq	r2,r2,zero
   182a4:	d8800215 	stw	r2,8(sp)
   182a8:	d8800117 	ldw	r2,4(sp)
   182ac:	dd400815 	stw	r21,32(sp)
   182b0:	dd000715 	stw	r20,28(sp)
   182b4:	10805204 	addi	r2,r2,328
   182b8:	dfc00c15 	stw	ra,48(sp)
   182bc:	ddc00a15 	stw	r23,40(sp)
   182c0:	dd800915 	stw	r22,36(sp)
   182c4:	dcc00615 	stw	r19,24(sp)
   182c8:	dc800515 	stw	r18,20(sp)
   182cc:	dc400415 	stw	r17,16(sp)
   182d0:	dc000315 	stw	r16,12(sp)
   182d4:	282b883a 	mov	r21,r5
   182d8:	2039883a 	mov	fp,r4
   182dc:	d8800015 	stw	r2,0(sp)
   182e0:	2829003a 	cmpeq	r20,r5,zero
   182e4:	d8800117 	ldw	r2,4(sp)
   182e8:	14405217 	ldw	r17,328(r2)
   182ec:	88001026 	beq	r17,zero,18330 <__call_exitprocs+0xb0>
   182f0:	ddc00017 	ldw	r23,0(sp)
   182f4:	88800117 	ldw	r2,4(r17)
   182f8:	8c802204 	addi	r18,r17,136
   182fc:	143fffc4 	addi	r16,r2,-1
   18300:	80000916 	blt	r16,zero,18328 <__call_exitprocs+0xa8>
   18304:	05bfffc4 	movi	r22,-1
   18308:	a000151e 	bne	r20,zero,18360 <__call_exitprocs+0xe0>
   1830c:	8409883a 	add	r4,r16,r16
   18310:	2105883a 	add	r2,r4,r4
   18314:	1485883a 	add	r2,r2,r18
   18318:	10c02017 	ldw	r3,128(r2)
   1831c:	a8c01126 	beq	r21,r3,18364 <__call_exitprocs+0xe4>
   18320:	843fffc4 	addi	r16,r16,-1
   18324:	85bff81e 	bne	r16,r22,18308 <__call_exitprocs+0x88>
   18328:	d8800217 	ldw	r2,8(sp)
   1832c:	10003126 	beq	r2,zero,183f4 <__call_exitprocs+0x174>
   18330:	dfc00c17 	ldw	ra,48(sp)
   18334:	df000b17 	ldw	fp,44(sp)
   18338:	ddc00a17 	ldw	r23,40(sp)
   1833c:	dd800917 	ldw	r22,36(sp)
   18340:	dd400817 	ldw	r21,32(sp)
   18344:	dd000717 	ldw	r20,28(sp)
   18348:	dcc00617 	ldw	r19,24(sp)
   1834c:	dc800517 	ldw	r18,20(sp)
   18350:	dc400417 	ldw	r17,16(sp)
   18354:	dc000317 	ldw	r16,12(sp)
   18358:	dec00d04 	addi	sp,sp,52
   1835c:	f800283a 	ret
   18360:	8409883a 	add	r4,r16,r16
   18364:	88c00117 	ldw	r3,4(r17)
   18368:	2105883a 	add	r2,r4,r4
   1836c:	1445883a 	add	r2,r2,r17
   18370:	18ffffc4 	addi	r3,r3,-1
   18374:	11800217 	ldw	r6,8(r2)
   18378:	1c001526 	beq	r3,r16,183d0 <__call_exitprocs+0x150>
   1837c:	10000215 	stw	zero,8(r2)
   18380:	303fe726 	beq	r6,zero,18320 <__call_exitprocs+0xa0>
   18384:	00c00044 	movi	r3,1
   18388:	1c06983a 	sll	r3,r3,r16
   1838c:	90804017 	ldw	r2,256(r18)
   18390:	8cc00117 	ldw	r19,4(r17)
   18394:	1884703a 	and	r2,r3,r2
   18398:	10001426 	beq	r2,zero,183ec <__call_exitprocs+0x16c>
   1839c:	90804117 	ldw	r2,260(r18)
   183a0:	1884703a 	and	r2,r3,r2
   183a4:	10000c1e 	bne	r2,zero,183d8 <__call_exitprocs+0x158>
   183a8:	2105883a 	add	r2,r4,r4
   183ac:	1485883a 	add	r2,r2,r18
   183b0:	11400017 	ldw	r5,0(r2)
   183b4:	e009883a 	mov	r4,fp
   183b8:	303ee83a 	callr	r6
   183bc:	88800117 	ldw	r2,4(r17)
   183c0:	98bfc81e 	bne	r19,r2,182e4 <__call_exitprocs+0x64>
   183c4:	b8800017 	ldw	r2,0(r23)
   183c8:	147fd526 	beq	r2,r17,18320 <__call_exitprocs+0xa0>
   183cc:	003fc506 	br	182e4 <__call_exitprocs+0x64>
   183d0:	8c000115 	stw	r16,4(r17)
   183d4:	003fea06 	br	18380 <__call_exitprocs+0x100>
   183d8:	2105883a 	add	r2,r4,r4
   183dc:	1485883a 	add	r2,r2,r18
   183e0:	11000017 	ldw	r4,0(r2)
   183e4:	303ee83a 	callr	r6
   183e8:	003ff406 	br	183bc <__call_exitprocs+0x13c>
   183ec:	303ee83a 	callr	r6
   183f0:	003ff206 	br	183bc <__call_exitprocs+0x13c>
   183f4:	88800117 	ldw	r2,4(r17)
   183f8:	1000081e 	bne	r2,zero,1841c <__call_exitprocs+0x19c>
   183fc:	89000017 	ldw	r4,0(r17)
   18400:	20000726 	beq	r4,zero,18420 <__call_exitprocs+0x1a0>
   18404:	b9000015 	stw	r4,0(r23)
   18408:	8809883a 	mov	r4,r17
   1840c:	00000000 	call	0 <__alt_mem_onchip_memory>
   18410:	bc400017 	ldw	r17,0(r23)
   18414:	883fb71e 	bne	r17,zero,182f4 <__call_exitprocs+0x74>
   18418:	003fc506 	br	18330 <__call_exitprocs+0xb0>
   1841c:	89000017 	ldw	r4,0(r17)
   18420:	882f883a 	mov	r23,r17
   18424:	2023883a 	mov	r17,r4
   18428:	883fb21e 	bne	r17,zero,182f4 <__call_exitprocs+0x74>
   1842c:	003fc006 	br	18330 <__call_exitprocs+0xb0>

00018430 <alt_sim_halt>:
   18430:	defffd04 	addi	sp,sp,-12
   18434:	df000215 	stw	fp,8(sp)
   18438:	df000204 	addi	fp,sp,8
   1843c:	e13fff15 	stw	r4,-4(fp)
   18440:	e0bfff17 	ldw	r2,-4(fp)
   18444:	e0bffe15 	stw	r2,-8(fp)
   18448:	e0bffe17 	ldw	r2,-8(fp)
   1844c:	1005003a 	cmpeq	r2,r2,zero
   18450:	1000021e 	bne	r2,zero,1845c <alt_sim_halt+0x2c>
   18454:	002af070 	cmpltui	zero,zero,43969
   18458:	00000106 	br	18460 <alt_sim_halt+0x30>
   1845c:	002af0b0 	cmpltui	zero,zero,43970
   18460:	e037883a 	mov	sp,fp
   18464:	df000017 	ldw	fp,0(sp)
   18468:	dec00104 	addi	sp,sp,4
   1846c:	f800283a 	ret

00018470 <_exit>:
   18470:	defffd04 	addi	sp,sp,-12
   18474:	dfc00215 	stw	ra,8(sp)
   18478:	df000115 	stw	fp,4(sp)
   1847c:	df000104 	addi	fp,sp,4
   18480:	e13fff15 	stw	r4,-4(fp)
   18484:	e13fff17 	ldw	r4,-4(fp)
   18488:	00184300 	call	18430 <alt_sim_halt>
   1848c:	003fff06 	br	1848c <_exit+0x1c>
   18490:	0001827c 	xorhi	zero,zero,1545
