
freertos_test.elf:     file format elf32-littlenios2
freertos_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001b180 memsz 0x0001b180 flags r-x
    LOAD off    0x0001d000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x0001d000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00002870 memsz 0x0008051c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01000000  01000000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001af58  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a0c  08000000  08000000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e64  08000a0c  08000a0c  0001da0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007df27  08002870  08002870  0001f870  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  0001f870  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010e8  00000000  00000000  0001f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000029ec  00000000  00000000  000209a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00036302  00000000  00000000  00023394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b1e4  00000000  00000000  00059696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001f254  00000000  00000000  0006487a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003414  00000000  00000000  00083ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ffd  00000000  00000000  00086ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011ac6  00000000  00000000  00089ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0009b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a08  00000000  00000000  0009b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a22af  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a22b2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a22b7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a22b8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a22b9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a22bd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a22c1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000a22c5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000a22ce  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000a22d7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000a22e0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000a22e5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000a0c l    d  .rwdata	00000000 .rwdata
08002870 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000028c l       .text	00000000 alt_after_alt_main
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 croutine.c
08002874 l     O .bss	00000004 uxTopCoRoutineReadyPriority
08002878 l     O .bss	00000004 xCoRoutineTickCount
0800287c l     O .bss	00000004 xLastTickCount
08002880 l     O .bss	00000004 xPassedTicks
00000780 l     F .text	0000009c prvInitialiseCoRoutineLists
08002930 l     O .bss	00000028 pxReadyCoRoutineLists
08002888 l     O .bss	00000004 pxOverflowDelayedCoRoutineList
08002884 l     O .bss	00000004 pxDelayedCoRoutineList
00000470 l     F .text	000000d4 prvCheckPendingReadyList
08002980 l     O .bss	00000014 xPendingReadyCoRoutineList
00000544 l     F .text	00000150 prvCheckDelayedList
08002958 l     O .bss	00000014 xDelayedCoRoutineList1
0800296c l     O .bss	00000014 xDelayedCoRoutineList2
00000000 l    df *ABS*	00000000 event_groups.c
00000f44 l     F .text	00000078 prvTestWaitCondition
00000000 l    df *ABS*	00000000 heap.c
080027f8 l     O .rwdata	00000002 heapSTRUCT_SIZE
080027fc l     O .rwdata	00000004 xTotalHeapSize
0800288c l     O .bss	00000004 pxEnd
08002800 l     O .rwdata	00000004 xFreeBytesRemaining
0000120c l     F .text	000000c0 prvHeapInit
08002890 l     O .bss	00000008 xStart
000012cc l     F .text	00000138 prvInsertBlockIntoFreeList
08002994 l     O .bss	0007d000 xHeap
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
000016cc l     F .text	00000028 prvReadGp
00001830 l     F .text	00000098 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 queue.c
0000270c l     F .text	00000194 prvCopyDataToQueue
00002ac4 l     F .text	00000058 prvIsQueueFull
0000293c l     F .text	000000f0 prvUnlockQueue
000028a0 l     F .text	0000009c prvCopyDataFromQueue
00002a2c l     F .text	00000054 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
0800289c l     O .bss	00000004 uxTasksDeleted
080028a0 l     O .bss	00000004 uxCurrentNumberOfTasks
080028a4 l     O .bss	00000004 xTickCount
080028a8 l     O .bss	00000004 uxTopReadyPriority
080028ac l     O .bss	00000004 xSchedulerRunning
080028b0 l     O .bss	00000004 uxPendedTicks
080028b4 l     O .bss	00000004 xYieldPending
080028b8 l     O .bss	00000004 xNumOfOverflows
080028bc l     O .bss	00000004 uxTaskNumber
08002804 l     O .rwdata	00000004 xNextTaskUnblockTime
080028c0 l     O .bss	00000004 uxSchedulerSuspended
00003c10 l     F .text	000000d8 prvAllocateTCBAndStack
00003910 l     F .text	0000013c prvInitialiseTCBVariables
00003a4c l     F .text	000000a8 prvInitialiseTaskLists
0807f994 l     O .bss	000000f0 pxReadyTasksLists
0807fac0 l     O .bss	00000014 xTasksWaitingTermination
00003dfc l     F .text	00000070 prvResetNextTaskUnblockTime
00003b98 l     F .text	00000078 prvAddCurrentTaskToDelayedList
000038f4 l     F .text	0000001c prvIdleTask
0807faac l     O .bss	00000014 xPendingReadyList
080028c4 l     O .bss	00000004 pxDelayedTaskList
080028c8 l     O .bss	00000004 pxOverflowDelayedTaskList
08000039 l     O .rodata	00000014 ucExpectedStackBytes.2768
00003af4 l     F .text	000000a4 prvCheckTasksWaitingTermination
0807fa84 l     O .bss	00000014 xDelayedTaskList1
0807fa98 l     O .bss	00000014 xDelayedTaskList2
00003dc0 l     F .text	0000003c prvDeleteTCB
00003ce8 l     F .text	00000068 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
080028cc l     O .bss	00000004 xTimerQueue
00005044 l     F .text	0000007c prvCheckForValidListAndQueue
00004b50 l     F .text	00000034 prvTimerTask
00004aa4 l     F .text	000000ac prvProcessExpiredTimer
080028d4 l     O .bss	00000004 pxCurrentTimerList
00004ce8 l     F .text	000000cc prvInsertTimerInActiveList
00004c24 l     F .text	00000060 prvGetNextExpireTime
00004b84 l     F .text	000000a0 prvProcessTimerOrBlockTask
00004db4 l     F .text	0000018c prvProcessReceivedCommands
00004c84 l     F .text	00000064 prvSampleTimeNow
080028d0 l     O .bss	00000004 xLastTime.2546
00004f40 l     F .text	00000104 prvSwitchTimerLists
080028d8 l     O .bss	00000004 pxOverflowTimerList
0807fad4 l     O .bss	00000014 xActiveTimerList1
0807fae8 l     O .bss	00000014 xActiveTimerList2
00000000 l    df *ABS*	00000000 FreeRTOS_freq_plot.c
080028e0 l     O .bss	00000004 Q_freq_data
00000000 l    df *ABS*	00000000 dp-bit.c
00006370 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strtod.c
00007c08 l     F .text	00000048 match
08000a38 l     O .rwdata	00000014 fpi.1950
08000464 l     O .rodata	00000028 tinytens
08000a24 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 vfprintf.c
00009274 l     F .text	00000058 __sprint_r
080004fa l     O .rodata	00000010 blanks.3452
080004ea l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000b2d8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000ccd4 l     F .text	00000058 std
0000cde0 l     F .text	00000008 __fp_lock
0000cde8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000d9f0 l     F .text	00000024 htinit
0000da7c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000e2e4 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 impure.c
08000a4c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800282c l     O .rwdata	00000004 charset
0800054c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08000694 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000123b8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
000128fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001295c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012a5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00012b7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00012ccc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00012ef8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08002854 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013194 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08001408 l     O .rwdata	000000d8 flash_controller
080014e0 l     O .rwdata	00001060 jtag_uart
08002540 l     O .rwdata	00000120 character_lcd
08002660 l     O .rwdata	000000c4 uart
08002724 l     O .rwdata	00000038 ps2
0800275c l     O .rwdata	00000048 video_character_buffer_with_dma
080027a4 l     O .rwdata	00000054 video_pixel_buffer_dma
00013594 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
00013668 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00014468 l     F .text	0000007c alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001554c l     F .text	0000022c altera_avalon_jtag_uart_irq
00015778 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
08002858 l     O .rwdata	00000004 colstart
00015df4 l     F .text	000000b8 lcd_write_command
00015eac l     F .text	000000d4 lcd_write_data
00015f80 l     F .text	000000c4 lcd_clear_screen
00016044 l     F .text	000001ec lcd_repaint_screen
00016230 l     F .text	000000c8 lcd_scroll_up
000162f8 l     F .text	000002d0 lcd_handle_escape
00016acc l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016d2c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00016fe0 l     F .text	000000a0 altera_avalon_uart_irq
00017080 l     F .text	000000e0 altera_avalon_uart_rxirq
00017160 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0001754c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00017774 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000199c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00019c50 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00019d8c l     F .text	000000dc alt_file_locked
00019ff0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0001a5e8 l     F .text	000000bc alt_write_word_amd
0001a4c4 l     F .text	00000124 alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0001a89c l     F .text	0000018c alt_unlock_block_intel
0001aa28 l     F .text	000000dc alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
08000889 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001af88 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001b13c l     F .text	00000040 alt_sim_halt
00007938 g     F .text	0000001c putchar
0000f4e0 g     F .text	00000094 _mprec_log10
0000f5cc g     F .text	00000088 __any_on
00011010 g     F .text	00000070 _isatty_r
0800066c g     O .rodata	00000028 __mprec_tinytens
00012d2c g     F .text	0000006c alt_main
00018e44 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0000795c g     F .text	000000a0 _puts_r
00013f28 g     F .text	00000048 alt_read_query_entry_32bit
00017a20 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
0808028c g     O .bss	00000100 alt_irq
00011080 g     F .text	00000078 _lseek_r
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
00003548 g     F .text	00000074 vTaskPlaceOnUnorderedEventList
000011d0 g     F .text	00000020 xPortGetFreeHeapSize
000136a0 g     F .text	000002c0 alt_flash_cfi_write
00000c9c g     F .text	0000003c xEventGroupGetBitsFromISR
00011f08 g     F .text	00000088 __eqdf2
0808051c g       *ABS*	00000000 __alt_heap_start
000048fc g     F .text	000000b0 xTimerCreate
000078c0 g     F .text	00000044 printf
0807fb24 g     O .bss	0000000a oddStr
00010990 g     F .text	00000068 __sseek
0000cd3c g     F .text	000000a4 __sinit
00010b90 g     F .text	00000130 __swbuf_r
00018068 g     F .text	00000114 alt_up_char_buffer_string
00017838 g     F .text	00000034 read_CE_bit
00002b64 g     F .text	00000094 vQueueWaitForMessageRestricted
0000e59c g     F .text	00000084 _setlocale_r
0000ce3c g     F .text	00000068 __sfmoreglue
00012db8 g     F .text	00000020 __malloc_unlock
00017bcc g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00007c50 g     F .text	000014e4 _strtod_r
0807fb2e g     O .bss	0000001e testStr
00017f98 g     F .text	000000d0 alt_up_char_buffer_draw
000008f0 g     F .text	00000184 xEventGroupSync
08002818 g     O .rwdata	00000008 ROCThresh
0000eff4 g     F .text	000000e0 memmove
0000081c g     F .text	00000080 xCoRoutineRemoveFromEventList
00004114 g     F .text	00000054 vTaskEnterCritical
0000ce2c g     F .text	00000010 _cleanup
000020c0 g     F .text	000000e8 xQueueGenericSendFromISR
0000f654 g     F .text	000000bc _Balloc
00018218 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00006e90 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
000140b4 g     F .text	00000048 alt_write_flash_command_32bit_device_16bit_mode
000181d8 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	00000000 __reset
00001d78 g     F .text	00000094 xQueueGiveMutexRecursive
08002898 g     O .bss	00000004 pxCurrentTCB
00010f9c g     F .text	00000074 _fstat_r
00013bbc g     F .text	000002e8 alt_flash_program_block
08002914 g     O .bss	00000004 errno
00012674 g     F .text	0000002c __make_fp
08002920 g     O .bss	00000004 alt_argv
00004434 g     F .text	00000188 xTaskNotify
0800a7f8 g       *ABS*	00000000 _gp
0001a1f4 g     F .text	00000030 usleep
000183b8 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00000a74 g     F .text	000001c0 xEventGroupWaitBits
08001288 g     O .rwdata	00000180 alt_fd_list
08000a18 g     O .rwdata	0000000a ROCStr
000017dc g     F .text	00000038 xPortStartScheduler
00007954 g     F .text	00000008 _putchar_r
080028e4 g     O .bss	00000004 checkIfFieldRequired
00002fac g     F .text	00000044 vTaskEndScheduler
00019aec g     F .text	00000094 alt_find_dev
00007788 g     F .text	000000a0 memcpy
000034e8 g     F .text	00000060 vTaskPlaceOnEventList
0000e330 g     F .text	00000248 __hexnan
00002bf8 g     F .text	000001c8 xTaskGenericCreate
0001817c g     F .text	0000005c alt_up_char_buffer_clear
0000ce20 g     F .text	0000000c _cleanup_r
00006f18 g     F .text	000000f8 __floatsidf
00019d14 g     F .text	00000078 alt_io_redirect
000120a0 g     F .text	00000088 __ltdf2
00002590 g     F .text	00000080 xQueuePeekFromISR
0001b1a0 g       *ABS*	00000000 __DTOR_END__
000079fc g     F .text	00000014 puts
00001150 g     F .text	00000080 vPortFree
0807fb4c g     O .bss	00000320 freq
00000290 g     F .text	00000140 xCoRoutineCreate
0000f430 g     F .text	000000b0 __ratio
01000000 g       *ABS*	00000000 __alt_mem_flash_controller
00018468 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00015990 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00007904 g     F .text	00000034 _printf_r
000124f4 g     F .text	00000008 __udivsi3
00012abc g     F .text	000000c0 isatty
0800057c g     O .rodata	000000c8 __mprec_tens
00003d50 g     F .text	00000070 uxTaskGetStackHighWaterMark
00018af4 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0000e578 g     F .text	00000008 __locale_charset
00011170 g     F .text	000000a4 __fixunsdfsi
0000149c g     F .text	00000088 vListInsertEnd
08002908 g     O .bss	00000004 __malloc_top_pad
0000089c g     F .text	00000054 xEventGroupCreate
08002828 g     O .rwdata	00000004 __mb_cur_max
0000e580 g     F .text	0000000c _localeconv_r
0000fd4c g     F .text	0000003c __i2b
0000d3d4 g     F .text	0000049c __sfvwrite_r
00010918 g     F .text	00000070 _sbrk_r
0001a6a4 g     F .text	00000084 alt_program_intel
000192d8 g     F .text	000000d0 helper_plot_pixel
000061ac g     F .text	0000008c freq_relay
00000ed4 g     F .text	00000038 vEventGroupSetBitsCallback
000110f8 g     F .text	00000078 _read_r
00001474 g     F .text	00000028 vListInitialiseItem
00019898 g     F .text	00000078 alt_dcache_flush
08000e4c g     O .rwdata	0000000c __lc_ctype
08002848 g     O .rwdata	00000004 alt_max_fd
00013ea4 g     F .text	00000040 alt_read_query_entry_8bit
000018c8 g     F .text	0000004c vPortSysTickHandler
00007514 g     F .text	00000138 __unpack_d
00010e78 g     F .text	00000110 _fclose_r
0001786c g     F .text	00000034 read_num_bytes_available
0001a728 g     F .text	00000174 alt_erase_block_intel
0000cca0 g     F .text	00000034 fflush
0800290c g     O .bss	00000004 __malloc_max_sbrked_mem
00001914 g     F .text	000001b0 alt_irq_register
000177d4 g     F .text	00000034 read_RI_bit
08002808 g     O .rwdata	00000008 temp
00006800 g     F .text	00000074 __adddf3
00011da0 g     F .text	00000078 __nesf2
0000f310 g     F .text	00000120 __b2d
0001849c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
000117f0 g     F .text	000005b0 __umoddi3
00012bdc g     F .text	000000f0 lseek
080028e8 g     O .bss	00000004 stableTaskHandle
08002824 g     O .rwdata	00000004 _global_impure_ptr
00000cd8 g     F .text	0000018c xEventGroupSetBits
000102b4 g     F .text	000005f4 _realloc_r
0808051c g       *ABS*	00000000 __bss_end
00018600 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0001a0e8 g     F .text	0000010c alt_tick
0808018c g     O .bss	00000100 __hexdig
00011214 g     F .text	000005dc __udivdi3
08000644 g     O .rodata	00000028 __mprec_bigtens
0000ffa8 g     F .text	00000120 __s2b
00012224 g     F .text	00000194 __floatunsidf
0000f230 g     F .text	00000060 __mcmp
00000fbc g     F .text	00000194 pvPortMalloc
00016f20 g     F .text	000000c0 altera_avalon_uart_init
000178d4 g     F .text	0000002c read_data_byte
0800286c g     O .rwdata	00000004 __ctype_ptr
0000ce08 g     F .text	00000018 __fp_lock_all
000026d4 g     F .text	00000038 vQueueDelete
00001814 g     F .text	0000001c vPortEndScheduler
00001404 g     F .text	00000070 vListInitialise
0001a050 g     F .text	00000098 alt_alarm_stop
00017808 g     F .text	00000030 read_RE_bit
08002918 g     O .bss	00000004 alt_irq_active
080028ec g     O .bss	00000001 previousbyte
0000017c g     F .exceptions	000000cc alt_irq_handler
08001260 g     O .rwdata	00000028 alt_dev_null
00003168 g     F .text	00000028 xTaskGetTickCount
00001f10 g     F .text	000001b0 xQueueGenericSend
00012504 g     F .text	000000c8 __unpack_f
000143bc g     F .text	000000ac alt_set_flash_algorithm_func
00017a78 g     F .text	00000078 alt_up_ps2_write_data_byte
0000f0fc g     F .text	00000070 __hi0bits
00019214 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00007010 g     F .text	000000d8 __fixdfsi
00004018 g     F .text	000000fc xTaskPriorityDisinherit
00013f70 g     F .text	0000003c alt_write_flash_command_8bit_device_8bit_mode
00009258 g     F .text	0000001c strtod
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
08002840 g     O .rwdata	00000008 alt_dev_list
00013074 g     F .text	00000120 write
000101cc g     F .text	000000e8 _putc_r
00011e18 g     F .text	00000078 __gtsf2
000193a8 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0000361c g     F .text	000000e8 xTaskRemoveFromEventList
00012988 g     F .text	000000d4 fstat
00000c34 g     F .text	00000068 xEventGroupClearBits
00012128 g     F .text	00000088 __ledf2
00005d7c g     F .text	000003e4 keyboard_control_task
00015270 g     F .text	000000dc alt_check_primary_table
0000fe88 g     F .text	00000120 __pow5mult
00006160 g     F .text	0000004c stabilityMonitorTask
080028fc g     O .bss	00000004 __nlocale_changed
000124fc g     F .text	00000008 __umodsi3
000139f0 g     F .text	00000068 alt_flash_cfi_read
00014144 g     F .text	00000034 alt_write_native_8bit
00005c78 g     F .text	00000104 print_status_task
0808051c g       *ABS*	00000000 end
08000a0c g     O .rwdata	0000000a freqStr
00017dec g     F .text	000000a8 alt_up_ps2_write_fd
000126a0 g     F .text	00000160 __pack_f
00013fac g     F .text	0000007c alt_write_flash_command_16bit_device_8bit_mode
000165c8 g     F .text	00000504 altera_avalon_lcd_16207_write
00002dc0 g     F .text	000000d8 vTaskDelete
00017ed4 g     F .text	00000084 alt_up_char_buffer_init
000175ac g     F .text	000001c8 altera_avalon_uart_write
000144e4 g     F .text	000005e0 alt_read_cfi_table
00015494 g     F .text	000000b8 altera_avalon_jtag_uart_init
00004214 g     F .text	0000003c pvTaskIncrementMutexHeldCount
0001b19c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
00016da0 g     F .text	00000088 alt_avalon_timer_sc_init
00016e80 g     F .text	00000058 altera_avalon_uart_write_fd
00007180 g     F .text	00000080 __clzsi2
00016ed8 g     F .text	00000048 altera_avalon_uart_close_fd
00015bb4 g     F .text	00000240 altera_avalon_jtag_uart_write
000135cc g     F .text	0000009c alt_flash_cfi_init
0000cd2c g     F .text	00000004 __sfp_lock_acquire
0000ef10 g     F .text	000000e4 memchr
000092cc g     F .text	00001eac ___vfprintf_internal_r
00007a84 g     F .text	00000060 _sprintf_r
0000380c g     F .text	000000c4 xTaskCheckForTimeOut
00000694 g     F .text	000000ec vCoRoutineSchedule
0000d0c0 g     F .text	00000314 _free_r
08002870 g     O .bss	00000004 pxCurrentCoRoutine
0001af8c g     F .text	000001b0 __call_exitprocs
08002900 g     O .bss	00000004 __mlocale_changed
00004250 g     F .text	000000d8 ulTaskNotifyTake
08002834 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	00000048 _start
08002928 g     O .bss	00000004 _alt_tick_rate
00002ff0 g     F .text	00000028 vTaskSuspendAll
00003190 g     F .text	0000002c xTaskGetTickCountFromISR
0000fa18 g     F .text	0000014c __lshift
0800292c g     O .bss	00000004 _alt_nticks
00012dd8 g     F .text	00000120 read
00013228 g     F .text	0000036c alt_sys_init
000015f8 g     F .text	00000098 uxListRemove
0001ae54 g     F .text	00000134 __register_exitproc
00017cf8 g     F .text	00000058 alt_up_ps2_clear_fifo
00013ee4 g     F .text	00000044 alt_read_query_entry_16bit
0000fb64 g     F .text	000001e8 __multiply
00015828 g     F .text	00000074 altera_avalon_jtag_uart_close
00003ee8 g     F .text	00000130 vTaskPriorityInherit
0807fafc g     O .bss	00000028 __malloc_current_mallinfo
000141dc g     F .text	000001e0 alt_set_flash_width_func
0000f710 g     F .text	0000017c __d2b
000033b8 g     F .text	00000130 vTaskSwitchContext
000045bc g     F .text	000001c0 xTaskNotifyFromISR
0001534c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001ad50 g     F .text	000000b8 alt_get_fd
000035bc g     F .text	00000060 vTaskPlaceOnEventListRestricted
0001ab04 g     F .text	0000012c alt_busy_sleep
0000764c g     F .text	000000c8 __fpcmp_parts_d
00010e08 g     F .text	00000070 _close_r
00004328 g     F .text	0000010c xTaskNotifyWait
0001a2ac g     F .text	00000218 alt_erase_block_amd
00007714 g     F .text	00000074 memcmp
000153fc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0808051c g       *ABS*	00000000 __alt_stack_base
00015444 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
080028f0 g     O .bss	00000004 PRVGADraw
000049ac g     F .text	000000c8 xTimerGenericCommand
0000b19c g     F .text	0000013c __swsetup_r
00014ac4 g     F .text	000007ac alt_read_cfi_width
00001690 g     F .text	0000003c vApplicationStackOverflowHook
00006c38 g     F .text	00000258 __divdf3
0000cea4 g     F .text	000000f0 __sfp
00007b58 g     F .text	000000b0 strncat
0000f574 g     F .text	00000058 __copybits
000031bc g     F .text	00000020 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
080028f4 g     O .bss	00000001 byte
08000e58 g     O .rwdata	00000408 __malloc_av_
0000cd38 g     F .text	00000004 __sinit_lock_release
00006874 g     F .text	000003c4 __muldf3
00010a74 g     F .text	00000060 __sread
0001ac30 g     F .text	00000120 alt_find_file
00019910 g     F .text	000000b4 alt_dev_llist_insert
00012d98 g     F .text	00000020 __malloc_lock
00012fb8 g     F .text	000000bc sbrk
00001e0c g     F .text	000000a8 xQueueTakeMutexRecursive
0000caa4 g     F .text	000001fc _fflush_r
00000e64 g     F .text	00000070 vEventGroupDelete
00010d54 g     F .text	000000b4 _calloc_r
0800285c g     O .rwdata	00000008 alt_flash_dev_list
00014070 g     F .text	00000044 alt_write_flash_command_16bit_device_16bit_mode
08002870 g       *ABS*	00000000 __bss_start
00007828 g     F .text	00000098 memset
00006288 g     F .text	000000e8 main
08002924 g     O .bss	00000004 alt_envp
08002910 g     O .bss	00000004 __malloc_max_total_mem
00018410 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00017f58 g     F .text	00000040 alt_up_char_buffer_open_dev
000153a4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00010cc0 g     F .text	0000001c __swbuf
00011e90 g     F .text	00000078 __ltsf2
00001524 g     F .text	000000d4 vListInsert
00016b98 g     F .text	0000013c altera_avalon_lcd_16207_init
00010988 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
00010f88 g     F .text	00000014 fclose
0000488c g     F .text	00000070 xTimerCreateTimerTask
00017c7c g     F .text	0000007c alt_up_ps2_read_data_byte
000121b0 g     F .text	00000074 __truncdfsf2
0808038c g     O .bss	00000190 _atexit0
0000b4f0 g     F .text	000015b4 _dtoa_r
0000e7d0 g     F .text	00000740 _malloc_r
00004a74 g     F .text	00000030 pcTimerGetTimerName
0800284c g     O .rwdata	00000004 alt_errno
000140fc g     F .text	00000048 alt_write_flash_command_32bit_device_32bit_mode
0000d938 g     F .text	000000b8 _fwalk
000024ac g     F .text	000000e4 xQueueReceiveFromISR
00013a58 g     F .text	00000164 alt_write_value_to_flash
00003e6c g     F .text	00000028 xTaskGetCurrentTaskHandle
00017e94 g     F .text	00000040 alt_up_ps2_open_dev
00014178 g     F .text	00000034 alt_write_native_16bit
000100c8 g     F .text	00000104 putc
00012434 g     F .text	00000060 __divsi3
0800033c g     O .rodata	00000014 __thenan_df
00001bd8 g     F .text	000000dc xQueueGenericCreate
0000cf94 g     F .text	0000012c _malloc_trim_r
000179cc g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0001b1a0 g       *ABS*	00000000 __CTOR_END__
00010ad4 g     F .text	000000bc strcmp
00001eb4 g     F .text	0000005c xQueueCreateCountingSemaphore
0001b1a0 g       *ABS*	00000000 __DTOR_LIST__
080028f8 g     O .bss	00000004 keyboardTaskHandle
00011f90 g     F .text	00000088 __nedf2
000131f4 g     F .text	00000034 alt_irq_init
00003704 g     F .text	000000d0 xTaskRemoveFromUnorderedEventList
00012f58 g     F .text	00000060 alt_release_fd
00003018 g     F .text	00000150 xTaskResumeAll
00002650 g     F .text	00000054 uxQueueSpacesAvailable
000178a0 g     F .text	00000034 read_data_valid
00007a10 g     F .text	00000074 sprintf
08000350 g     O .rodata	00000100 __clz_tab
00002f10 g     F .text	0000009c vTaskStartScheduler
08002904 g     O .bss	00000004 _PathLocale
0807fe6c g     O .bss	00000320 dfreq
00009134 g     F .text	00000124 strtof
00017b60 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0001ae08 g     F .text	00000014 atexit
00010cdc g     F .text	00000078 _write_r
0000e620 g     F .text	0000001c setlocale
00002b1c g     F .text	00000048 xQueueIsQueueFullFromISR
0000510c g     F .text	00000030 pvTimerGetTimerID
000003d0 g     F .text	000000a0 vCoRoutineAddToDelayedList
08002820 g     O .rwdata	00000004 _impure_ptr
0800291c g     O .bss	00000004 alt_argc
00019a88 g     F .text	00000064 _do_dtors
0000f290 g     F .text	00000080 __ulp
000108a8 g     F .text	00000040 __isinfd
0000cdf0 g     F .text	00000018 __fp_unlock_all
080028dc g     O .bss	00000001 keyboardMode
000038d0 g     F .text	00000024 vTaskMissedYield
00016cd4 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
08002838 g     O .rwdata	00000008 alt_fs_list
00014028 g     F .text	00000048 alt_write_flash_command_32bit_device_8bit_mode
00002610 g     F .text	00000040 uxQueueMessagesWaiting
00002280 g     F .text	0000022c xQueueGenericReceive
0000513c g     F .text	00000b3c PRVGADraw_Task
000031dc g     F .text	000001dc xTaskIncrementTick
0000e58c g     F .text	00000010 localeconv
0000da14 g     F .text	00000068 __hexdig_init
00001ac4 g     F .text	00000114 xQueueGenericReset
08002870 g       *ABS*	00000000 _edata
00016e28 g     F .text	00000058 altera_avalon_uart_read_fd
0808051c g       *ABS*	00000000 _end
00019b80 g     F .text	0000007c alt_flash_open_dev
0001589c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08000058 g     O .rodata	0000002c numbers
000011f0 g     F .text	0000001c vPortInitialiseBlocks
000050c0 g     F .text	0000004c xTimerIsTimerActive
000109f8 g     F .text	0000007c __swrite
08002830 g     O .rwdata	00000004 __malloc_trim_threshold
0001a224 g     F .text	00000020 altera_nios2_qsys_irq_init
0001ae1c g     F .text	00000038 exit
0000d870 g     F .text	000000c8 _fwalk_reent
00017900 g     F .text	000000cc alt_up_ps2_init
0000f88c g     F .text	0000018c __mdiff
00019bfc g     F .text	00000054 alt_flash_close_dev
00012494 g     F .text	00000060 __modsi3
00002e98 g     F .text	00000078 vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0000cd30 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
00003e94 g     F .text	00000054 xTaskGetSchedulerState
08000788 g     O .rodata	00000101 _ctype_
000172bc g     F .text	00000060 altera_avalon_uart_close
000125cc g     F .text	000000a8 __fpcmp_parts_f
0001b17c g     F .text	00000020 _exit
000108e8 g     F .text	00000030 __isnand
00019744 g     F .text	00000154 alt_alarm_start
000070e8 g     F .text	00000098 __muldi3
0000e63c g     F .text	00000194 __smakebuf_r
000141ac g     F .text	00000030 alt_write_native_32bit
00017af0 g     F .text	00000070 alt_up_ps2_wait_for_ack
00004168 g     F .text	00000068 vTaskExitCritical
00007ae4 g     F .text	00000074 strlen
000016f4 g     F .text	000000e8 pxPortInitialiseStack
00019e68 g     F .text	00000188 open
00006238 g     F .text	00000050 ps2_isr
00012018 g     F .text	00000088 __gedf2
0000db2c g     F .text	000007b8 __gethex
00013960 g     F .text	00000090 alt_flash_cfi_get_info
08002810 g     O .rwdata	00000008 freqThresh
000037d4 g     F .text	00000038 vTaskSetTimeOutState
08002850 g     O .rwdata	00000004 alt_priority_mask
0000b178 g     F .text	00000024 __vfprintf_internal
0001731c g     F .text	00000230 altera_avalon_uart_read
000026a4 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00002a80 g     F .text	00000044 xQueueIsQueueEmptyFromISR
00017d50 g     F .text	0000009c alt_up_ps2_read_fd
00006780 g     F .text	00000080 __subdf3
0000f16c g     F .text	000000c4 __lo0bits
08002864 g     O .rwdata	00000008 alt_alarm_list
00019a24 g     F .text	00000064 _do_ctors
000041d0 g     F .text	00000044 uxTaskResetEventItemValue
00001cb4 g     F .text	000000c4 xQueueCreateMutex
00012800 g     F .text	000000fc close
0001a244 g     F .text	00000068 alt_program_amd
0000477c g     F .text	00000110 vTaskNotifyGiveFromISR
00007200 g     F .text	00000314 __pack_d
00000f0c g     F .text	00000038 vEventGroupClearBitsCallback
000021a8 g     F .text	000000d8 xQueueGiveFromISR
00000000  w      *UND*	00000000 free
0000cd34 g     F .text	00000004 __sinit_lock_acquire
0000fd88 g     F .text	00000100 __multadd
0000f0d4 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
  20:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
  24:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
  28:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
  2c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
  30:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
  34:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
  38:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
  3c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
  40:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
  44:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
  48:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
  4c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
  68:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
  6c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
  70:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
  74:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
  78:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
  7c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
  80:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
  84:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
  88:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
  8c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
  90:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
  94:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06020034 	movhi	et,2048

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
  a0:	c60a2604 	addi	et,et,10392
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
  a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
  ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
  b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
  b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06020034 	movhi	et,2048

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
  c8:	c60a2604 	addi	et,et,10392
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
  cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
  d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
  d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
  dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
  e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
  e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
  ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
  f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
  f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
  f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
  fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 10c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 11c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 15c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 164:	003da03a 	break	0
  	br		restore_context			# its something else
 168:	003fda06 	br	d4 <restore_context>

0000016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 16c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 174:	00033b80 	call	33b8 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 178:	003fd206 	br	c4 <restore_sp_from_pxCurrentTCB>

0000017c <alt_irq_handler>:
 17c:	defff904 	addi	sp,sp,-28
 180:	dfc00615 	stw	ra,24(sp)
 184:	df000515 	stw	fp,20(sp)
 188:	df000504 	addi	fp,sp,20
 18c:	0005313a 	rdctl	r2,ipending
 190:	e0bffc15 	stw	r2,-16(fp)
 194:	e0bffc17 	ldw	r2,-16(fp)
 198:	e0bfff15 	stw	r2,-4(fp)
 19c:	e03ffd15 	stw	zero,-12(fp)
 1a0:	00800044 	movi	r2,1
 1a4:	e0bffe15 	stw	r2,-8(fp)
 1a8:	e0ffff17 	ldw	r3,-4(fp)
 1ac:	e0bffe17 	ldw	r2,-8(fp)
 1b0:	1884703a 	and	r2,r3,r2
 1b4:	1005003a 	cmpeq	r2,r2,zero
 1b8:	1000171e 	bne	r2,zero,218 <alt_irq_handler+0x9c>
 1bc:	e0bffd17 	ldw	r2,-12(fp)
 1c0:	00c20234 	movhi	r3,2056
 1c4:	18c0a304 	addi	r3,r3,652
 1c8:	100490fa 	slli	r2,r2,3
 1cc:	10c5883a 	add	r2,r2,r3
 1d0:	11800017 	ldw	r6,0(r2)
 1d4:	e0bffd17 	ldw	r2,-12(fp)
 1d8:	00c20234 	movhi	r3,2056
 1dc:	18c0a304 	addi	r3,r3,652
 1e0:	100490fa 	slli	r2,r2,3
 1e4:	10c5883a 	add	r2,r2,r3
 1e8:	10800104 	addi	r2,r2,4
 1ec:	11000017 	ldw	r4,0(r2)
 1f0:	e17ffd17 	ldw	r5,-12(fp)
 1f4:	303ee83a 	callr	r6
 1f8:	0005313a 	rdctl	r2,ipending
 1fc:	e0bffb15 	stw	r2,-20(fp)
 200:	e0bffb17 	ldw	r2,-20(fp)
 204:	e0bfff15 	stw	r2,-4(fp)
 208:	e0bfff17 	ldw	r2,-4(fp)
 20c:	1004c03a 	cmpne	r2,r2,zero
 210:	103fe21e 	bne	r2,zero,19c <alt_irq_handler+0x20>
 214:	00000706 	br	234 <alt_irq_handler+0xb8>
 218:	e0bffe17 	ldw	r2,-8(fp)
 21c:	1085883a 	add	r2,r2,r2
 220:	e0bffe15 	stw	r2,-8(fp)
 224:	e0bffd17 	ldw	r2,-12(fp)
 228:	10800044 	addi	r2,r2,1
 22c:	e0bffd15 	stw	r2,-12(fp)
 230:	003fdd06 	br	1a8 <alt_irq_handler+0x2c>
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:
     248:	00820014 	movui	r2,2048
     24c:	10000033 	initd	0(r2)
     250:	10bff804 	addi	r2,r2,-32
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>
     258:	06c40034 	movhi	sp,4096
     25c:	dec00014 	ori	sp,sp,0
     260:	06820034 	movhi	gp,2048
     264:	d6a9fe14 	ori	gp,gp,43000
     268:	00820034 	movhi	r2,2048
     26c:	108a1c14 	ori	r2,r2,10352
     270:	00c20234 	movhi	r3,2056
     274:	18c14714 	ori	r3,r3,1308
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>
     27c:	10000015 	stw	zero,0(r2)
     280:	10800104 	addi	r2,r2,4
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     288:	0012d2c0 	call	12d2c <alt_main>

0000028c <alt_after_alt_main>:
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     290:	defff904 	addi	sp,sp,-28
     294:	dfc00615 	stw	ra,24(sp)
     298:	df000515 	stw	fp,20(sp)
     29c:	df000504 	addi	fp,sp,20
     2a0:	e13ffd15 	stw	r4,-12(fp)
     2a4:	e17ffe15 	stw	r5,-8(fp)
     2a8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2ac:	01000e04 	movi	r4,56
     2b0:	0000fbc0 	call	fbc <pvPortMalloc>
     2b4:	e0bffb15 	stw	r2,-20(fp)
	if( pxCoRoutine )
     2b8:	e0bffb17 	ldw	r2,-20(fp)
     2bc:	1005003a 	cmpeq	r2,r2,zero
     2c0:	10003b1e 	bne	r2,zero,3b0 <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2c4:	d0a01e17 	ldw	r2,-32648(gp)
     2c8:	1004c03a 	cmpne	r2,r2,zero
     2cc:	1000031e 	bne	r2,zero,2dc <xCoRoutineCreate+0x4c>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2d0:	e0bffb17 	ldw	r2,-20(fp)
     2d4:	d0a01e15 	stw	r2,-32648(gp)
			prvInitialiseCoRoutineLists();
     2d8:	00007800 	call	780 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	108000b0 	cmpltui	r2,r2,2
     2e4:	1000021e 	bne	r2,zero,2f0 <xCoRoutineCreate+0x60>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2e8:	00800044 	movi	r2,1
     2ec:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2f0:	e0bffb17 	ldw	r2,-20(fp)
     2f4:	10000d0d 	sth	zero,52(r2)
		pxCoRoutine->uxPriority = uxPriority;
     2f8:	e0fffb17 	ldw	r3,-20(fp)
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	18800b15 	stw	r2,44(r3)
		pxCoRoutine->uxIndex = uxIndex;
     304:	e0fffb17 	ldw	r3,-20(fp)
     308:	e0bfff17 	ldw	r2,-4(fp)
     30c:	18800c15 	stw	r2,48(r3)
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     310:	e0fffb17 	ldw	r3,-20(fp)
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     31c:	e0bffb17 	ldw	r2,-20(fp)
     320:	11000104 	addi	r4,r2,4
     324:	00014740 	call	1474 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	11000604 	addi	r4,r2,24
     330:	00014740 	call	1474 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     334:	e0fffb17 	ldw	r3,-20(fp)
     338:	e0bffb17 	ldw	r2,-20(fp)
     33c:	18800415 	stw	r2,16(r3)
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     340:	e0fffb17 	ldw	r3,-20(fp)
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	18800915 	stw	r2,36(r3)

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     34c:	00c00084 	movi	r3,2
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	1887c83a 	sub	r3,r3,r2
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10c00615 	stw	r3,24(r2)

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     360:	e0bffb17 	ldw	r2,-20(fp)
     364:	10c00b17 	ldw	r3,44(r2)
     368:	d0a01f17 	ldw	r2,-32644(gp)
     36c:	10c0032e 	bgeu	r2,r3,37c <xCoRoutineCreate+0xec>
     370:	e0bffb17 	ldw	r2,-20(fp)
     374:	10800b17 	ldw	r2,44(r2)
     378:	d0a01f15 	stw	r2,-32644(gp)
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	10800b17 	ldw	r2,44(r2)
     384:	10800524 	muli	r2,r2,20
     388:	1007883a 	mov	r3,r2
     38c:	00820034 	movhi	r2,2048
     390:	108a4c04 	addi	r2,r2,10544
     394:	1889883a 	add	r4,r3,r2
     398:	e0bffb17 	ldw	r2,-20(fp)
     39c:	11400104 	addi	r5,r2,4
     3a0:	000149c0 	call	149c <vListInsertEnd>

		xReturn = pdPASS;
     3a4:	00800044 	movi	r2,1
     3a8:	e0bffc15 	stw	r2,-16(fp)
     3ac:	00000206 	br	3b8 <xCoRoutineCreate+0x128>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     3b0:	00bfffc4 	movi	r2,-1
     3b4:	e0bffc15 	stw	r2,-16(fp)
	}

	return xReturn;
     3b8:	e0bffc17 	ldw	r2,-16(fp)
}
     3bc:	e037883a 	mov	sp,fp
     3c0:	dfc00117 	ldw	ra,4(sp)
     3c4:	df000017 	ldw	fp,0(sp)
     3c8:	dec00204 	addi	sp,sp,8
     3cc:	f800283a 	ret

000003d0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     3d0:	defffb04 	addi	sp,sp,-20
     3d4:	dfc00415 	stw	ra,16(sp)
     3d8:	df000315 	stw	fp,12(sp)
     3dc:	df000304 	addi	fp,sp,12
     3e0:	e13ffe15 	stw	r4,-8(fp)
     3e4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3e8:	d0e02017 	ldw	r3,-32640(gp)
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	e0bffd15 	stw	r2,-12(fp)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3f8:	d0a01e17 	ldw	r2,-32648(gp)
     3fc:	11000104 	addi	r4,r2,4
     400:	00015f80 	call	15f8 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     404:	d0e01e17 	ldw	r3,-32648(gp)
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xCoRoutineTickCount )
     410:	d0e02017 	ldw	r3,-32640(gp)
     414:	e0bffd17 	ldw	r2,-12(fp)
     418:	10c0052e 	bgeu	r2,r3,430 <vCoRoutineAddToDelayedList+0x60>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     41c:	d1202417 	ldw	r4,-32624(gp)
     420:	d0a01e17 	ldw	r2,-32648(gp)
     424:	11400104 	addi	r5,r2,4
     428:	00015240 	call	1524 <vListInsert>
     42c:	00000406 	br	440 <vCoRoutineAddToDelayedList+0x70>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     430:	d1202317 	ldw	r4,-32628(gp)
     434:	d0a01e17 	ldw	r2,-32648(gp)
     438:	11400104 	addi	r5,r2,4
     43c:	00015240 	call	1524 <vListInsert>
	}

	if( pxEventList )
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	1005003a 	cmpeq	r2,r2,zero
     448:	1000041e 	bne	r2,zero,45c <vCoRoutineAddToDelayedList+0x8c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     44c:	d0a01e17 	ldw	r2,-32648(gp)
     450:	11400604 	addi	r5,r2,24
     454:	e13fff17 	ldw	r4,-4(fp)
     458:	00015240 	call	1524 <vListInsert>
	}
}
     45c:	e037883a 	mov	sp,fp
     460:	dfc00117 	ldw	ra,4(sp)
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00204 	addi	sp,sp,8
     46c:	f800283a 	ret

00000470 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     470:	defffb04 	addi	sp,sp,-20
     474:	dfc00415 	stw	ra,16(sp)
     478:	df000315 	stw	fp,12(sp)
     47c:	df000304 	addi	fp,sp,12
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     480:	00002606 	br	51c <prvCheckPendingReadyList+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     484:	0005303a 	rdctl	r2,status
     488:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	00bfff84 	movi	r2,-2
     494:	1884703a 	and	r2,r3,r2
     498:	1001703a 	wrctl	status,r2
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     49c:	00820034 	movhi	r2,2048
     4a0:	108a6004 	addi	r2,r2,10624
     4a4:	10800317 	ldw	r2,12(r2)
     4a8:	10800317 	ldw	r2,12(r2)
     4ac:	e0bfff15 	stw	r2,-4(fp)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	11000604 	addi	r4,r2,24
     4b8:	00015f80 	call	15f8 <uxListRemove>
     4bc:	00800044 	movi	r2,1
     4c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     4c4:	e0bffd17 	ldw	r2,-12(fp)
     4c8:	1001703a 	wrctl	status,r2
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     4cc:	e0bfff17 	ldw	r2,-4(fp)
     4d0:	11000104 	addi	r4,r2,4
     4d4:	00015f80 	call	15f8 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	10c00b17 	ldw	r3,44(r2)
     4e0:	d0a01f17 	ldw	r2,-32644(gp)
     4e4:	10c0032e 	bgeu	r2,r3,4f4 <prvCheckPendingReadyList+0x84>
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800b17 	ldw	r2,44(r2)
     4f0:	d0a01f15 	stw	r2,-32644(gp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10800b17 	ldw	r2,44(r2)
     4fc:	10800524 	muli	r2,r2,20
     500:	1007883a 	mov	r3,r2
     504:	00820034 	movhi	r2,2048
     508:	108a4c04 	addi	r2,r2,10544
     50c:	1889883a 	add	r4,r3,r2
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	11400104 	addi	r5,r2,4
     518:	000149c0 	call	149c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     51c:	00820034 	movhi	r2,2048
     520:	108a6004 	addi	r2,r2,10624
     524:	10800017 	ldw	r2,0(r2)
     528:	1004c03a 	cmpne	r2,r2,zero
     52c:	103fd51e 	bne	r2,zero,484 <prvCheckPendingReadyList+0x14>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     544:	defffa04 	addi	sp,sp,-24
     548:	dfc00515 	stw	ra,20(sp)
     54c:	df000415 	stw	fp,16(sp)
     550:	df000404 	addi	fp,sp,16
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     554:	00031680 	call	3168 <xTaskGetTickCount>
     558:	d0e02117 	ldw	r3,-32636(gp)
     55c:	10c5c83a 	sub	r2,r2,r3
     560:	d0a02215 	stw	r2,-32632(gp)
	while( xPassedTicks )
     564:	00004106 	br	66c <prvCheckDelayedList+0x128>
	{
		xCoRoutineTickCount++;
     568:	d0a02017 	ldw	r2,-32640(gp)
     56c:	10800044 	addi	r2,r2,1
     570:	d0a02015 	stw	r2,-32640(gp)
		xPassedTicks--;
     574:	d0a02217 	ldw	r2,-32632(gp)
     578:	10bfffc4 	addi	r2,r2,-1
     57c:	d0a02215 	stw	r2,-32632(gp)

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     580:	d0a02017 	ldw	r2,-32640(gp)
     584:	1004c03a 	cmpne	r2,r2,zero
     588:	1000341e 	bne	r2,zero,65c <prvCheckDelayedList+0x118>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     58c:	d0a02317 	ldw	r2,-32628(gp)
     590:	e0bffe15 	stw	r2,-8(fp)
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     594:	d0a02417 	ldw	r2,-32624(gp)
     598:	d0a02315 	stw	r2,-32628(gp)
			pxOverflowDelayedCoRoutineList = pxTemp;
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	d0a02415 	stw	r2,-32624(gp)
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5a4:	00002d06 	br	65c <prvCheckDelayedList+0x118>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     5a8:	d0a02317 	ldw	r2,-32628(gp)
     5ac:	10800317 	ldw	r2,12(r2)
     5b0:	10800317 	ldw	r2,12(r2)
     5b4:	e0bfff15 	stw	r2,-4(fp)

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     5b8:	e0bfff17 	ldw	r2,-4(fp)
     5bc:	10c00117 	ldw	r3,4(r2)
     5c0:	d0a02017 	ldw	r2,-32640(gp)
     5c4:	10c02936 	bltu	r2,r3,66c <prvCheckDelayedList+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     5c8:	0005303a 	rdctl	r2,status
     5cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     5d0:	e0fffd17 	ldw	r3,-12(fp)
     5d4:	00bfff84 	movi	r2,-2
     5d8:	1884703a 	and	r2,r3,r2
     5dc:	1001703a 	wrctl	status,r2
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	11000104 	addi	r4,r2,4
     5e8:	00015f80 	call	15f8 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	10800a17 	ldw	r2,40(r2)
     5f4:	1005003a 	cmpeq	r2,r2,zero
     5f8:	1000031e 	bne	r2,zero,608 <prvCheckDelayedList+0xc4>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     5fc:	e0bfff17 	ldw	r2,-4(fp)
     600:	11000604 	addi	r4,r2,24
     604:	00015f80 	call	15f8 <uxListRemove>
     608:	00800044 	movi	r2,1
     60c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	1001703a 	wrctl	status,r2
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10c00b17 	ldw	r3,44(r2)
     620:	d0a01f17 	ldw	r2,-32644(gp)
     624:	10c0032e 	bgeu	r2,r3,634 <prvCheckDelayedList+0xf0>
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	10800b17 	ldw	r2,44(r2)
     630:	d0a01f15 	stw	r2,-32644(gp)
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800b17 	ldw	r2,44(r2)
     63c:	10800524 	muli	r2,r2,20
     640:	1007883a 	mov	r3,r2
     644:	00820034 	movhi	r2,2048
     648:	108a4c04 	addi	r2,r2,10544
     64c:	1889883a 	add	r4,r3,r2
     650:	e0bfff17 	ldw	r2,-4(fp)
     654:	11400104 	addi	r5,r2,4
     658:	000149c0 	call	149c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     65c:	d0a02317 	ldw	r2,-32628(gp)
     660:	10800017 	ldw	r2,0(r2)
     664:	1004c03a 	cmpne	r2,r2,zero
     668:	103fcf1e 	bne	r2,zero,5a8 <prvCheckDelayedList+0x64>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     66c:	d0a02217 	ldw	r2,-32632(gp)
     670:	1004c03a 	cmpne	r2,r2,zero
     674:	103fbc1e 	bne	r2,zero,568 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     678:	d0a02017 	ldw	r2,-32640(gp)
     67c:	d0a02115 	stw	r2,-32636(gp)
}
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     694:	defffd04 	addi	sp,sp,-12
     698:	dfc00215 	stw	ra,8(sp)
     69c:	df000115 	stw	fp,4(sp)
     6a0:	df000104 	addi	fp,sp,4
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     6a4:	00004700 	call	470 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     6a8:	00005440 	call	544 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6ac:	00000606 	br	6c8 <vCoRoutineSchedule+0x34>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     6b0:	d0a01f17 	ldw	r2,-32644(gp)
     6b4:	1005003a 	cmpeq	r2,r2,zero
     6b8:	10002c1e 	bne	r2,zero,76c <vCoRoutineSchedule+0xd8>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     6bc:	d0a01f17 	ldw	r2,-32644(gp)
     6c0:	10bfffc4 	addi	r2,r2,-1
     6c4:	d0a01f15 	stw	r2,-32644(gp)

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6c8:	d0a01f17 	ldw	r2,-32644(gp)
     6cc:	10800524 	muli	r2,r2,20
     6d0:	1007883a 	mov	r3,r2
     6d4:	00820034 	movhi	r2,2048
     6d8:	108a4c04 	addi	r2,r2,10544
     6dc:	1885883a 	add	r2,r3,r2
     6e0:	10800017 	ldw	r2,0(r2)
     6e4:	1005003a 	cmpeq	r2,r2,zero
     6e8:	103ff11e 	bne	r2,zero,6b0 <vCoRoutineSchedule+0x1c>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     6ec:	d0a01f17 	ldw	r2,-32644(gp)
     6f0:	10800524 	muli	r2,r2,20
     6f4:	1007883a 	mov	r3,r2
     6f8:	00820034 	movhi	r2,2048
     6fc:	108a4c04 	addi	r2,r2,10544
     700:	1885883a 	add	r2,r3,r2
     704:	e0bfff15 	stw	r2,-4(fp)
     708:	e0bfff17 	ldw	r2,-4(fp)
     70c:	10800117 	ldw	r2,4(r2)
     710:	10c00117 	ldw	r3,4(r2)
     714:	e0bfff17 	ldw	r2,-4(fp)
     718:	10c00115 	stw	r3,4(r2)
     71c:	e0bfff17 	ldw	r2,-4(fp)
     720:	10c00117 	ldw	r3,4(r2)
     724:	e0bfff17 	ldw	r2,-4(fp)
     728:	10800204 	addi	r2,r2,8
     72c:	1880051e 	bne	r3,r2,744 <vCoRoutineSchedule+0xb0>
     730:	e0bfff17 	ldw	r2,-4(fp)
     734:	10800117 	ldw	r2,4(r2)
     738:	10c00117 	ldw	r3,4(r2)
     73c:	e0bfff17 	ldw	r2,-4(fp)
     740:	10c00115 	stw	r3,4(r2)
     744:	e0bfff17 	ldw	r2,-4(fp)
     748:	10800117 	ldw	r2,4(r2)
     74c:	10800317 	ldw	r2,12(r2)
     750:	d0a01e15 	stw	r2,-32648(gp)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     754:	d0a01e17 	ldw	r2,-32648(gp)
     758:	10c00017 	ldw	r3,0(r2)
     75c:	d1201e17 	ldw	r4,-32648(gp)
     760:	d0a01e17 	ldw	r2,-32648(gp)
     764:	11400c17 	ldw	r5,48(r2)
     768:	183ee83a 	callr	r3

	return;
}
     76c:	e037883a 	mov	sp,fp
     770:	dfc00117 	ldw	ra,4(sp)
     774:	df000017 	ldw	fp,0(sp)
     778:	dec00204 	addi	sp,sp,8
     77c:	f800283a 	ret

00000780 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     790:	e03fff15 	stw	zero,-4(fp)
     794:	00000a06 	br	7c0 <prvInitialiseCoRoutineLists+0x40>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     798:	e0bfff17 	ldw	r2,-4(fp)
     79c:	10800524 	muli	r2,r2,20
     7a0:	1007883a 	mov	r3,r2
     7a4:	00820034 	movhi	r2,2048
     7a8:	108a4c04 	addi	r2,r2,10544
     7ac:	1889883a 	add	r4,r3,r2
     7b0:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7b4:	e0bfff17 	ldw	r2,-4(fp)
     7b8:	10800044 	addi	r2,r2,1
     7bc:	e0bfff15 	stw	r2,-4(fp)
     7c0:	e0bfff17 	ldw	r2,-4(fp)
     7c4:	108000b0 	cmpltui	r2,r2,2
     7c8:	103ff31e 	bne	r2,zero,798 <prvInitialiseCoRoutineLists+0x18>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     7cc:	01020034 	movhi	r4,2048
     7d0:	210a5604 	addi	r4,r4,10584
     7d4:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     7d8:	01020034 	movhi	r4,2048
     7dc:	210a5b04 	addi	r4,r4,10604
     7e0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     7e4:	01020034 	movhi	r4,2048
     7e8:	210a6004 	addi	r4,r4,10624
     7ec:	00014040 	call	1404 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     7f0:	00820034 	movhi	r2,2048
     7f4:	108a5604 	addi	r2,r2,10584
     7f8:	d0a02315 	stw	r2,-32628(gp)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     7fc:	00820034 	movhi	r2,2048
     800:	108a5b04 	addi	r2,r2,10604
     804:	d0a02415 	stw	r2,-32624(gp)
}
     808:	e037883a 	mov	sp,fp
     80c:	dfc00117 	ldw	ra,4(sp)
     810:	df000017 	ldw	fp,0(sp)
     814:	dec00204 	addi	sp,sp,8
     818:	f800283a 	ret

0000081c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     81c:	defffb04 	addi	sp,sp,-20
     820:	dfc00415 	stw	ra,16(sp)
     824:	df000315 	stw	fp,12(sp)
     828:	df000304 	addi	fp,sp,12
     82c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10800317 	ldw	r2,12(r2)
     838:	10800317 	ldw	r2,12(r2)
     83c:	e0bffe15 	stw	r2,-8(fp)
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	11000604 	addi	r4,r2,24
     848:	00015f80 	call	15f8 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	11400604 	addi	r5,r2,24
     854:	01020034 	movhi	r4,2048
     858:	210a6004 	addi	r4,r4,10624
     85c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     860:	e0bffe17 	ldw	r2,-8(fp)
     864:	10c00b17 	ldw	r3,44(r2)
     868:	d0a01e17 	ldw	r2,-32648(gp)
     86c:	10800b17 	ldw	r2,44(r2)
     870:	18800336 	bltu	r3,r2,880 <xCoRoutineRemoveFromEventList+0x64>
	{
		xReturn = pdTRUE;
     874:	00800044 	movi	r2,1
     878:	e0bffd15 	stw	r2,-12(fp)
     87c:	00000106 	br	884 <xCoRoutineRemoveFromEventList+0x68>
	}
	else
	{
		xReturn = pdFALSE;
     880:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
     884:	e0bffd17 	ldw	r2,-12(fp)
}
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     89c:	defffd04 	addi	sp,sp,-12
     8a0:	dfc00215 	stw	ra,8(sp)
     8a4:	df000115 	stw	fp,4(sp)
     8a8:	df000104 	addi	fp,sp,4
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     8ac:	01000604 	movi	r4,24
     8b0:	0000fbc0 	call	fbc <pvPortMalloc>
     8b4:	e0bfff15 	stw	r2,-4(fp)
	if( pxEventBits != NULL )
     8b8:	e0bfff17 	ldw	r2,-4(fp)
     8bc:	1005003a 	cmpeq	r2,r2,zero
     8c0:	1000051e 	bne	r2,zero,8d8 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
     8c4:	e0bfff17 	ldw	r2,-4(fp)
     8c8:	10000015 	stw	zero,0(r2)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     8cc:	e0bfff17 	ldw	r2,-4(fp)
     8d0:	11000104 	addi	r4,r2,4
     8d4:	00014040 	call	1404 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
     8d8:	e0bfff17 	ldw	r2,-4(fp)
}
     8dc:	e037883a 	mov	sp,fp
     8e0:	dfc00117 	ldw	ra,4(sp)
     8e4:	df000017 	ldw	fp,0(sp)
     8e8:	dec00204 	addi	sp,sp,8
     8ec:	f800283a 	ret

000008f0 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     8f0:	defff504 	addi	sp,sp,-44
     8f4:	dfc00a15 	stw	ra,40(sp)
     8f8:	df000915 	stw	fp,36(sp)
     8fc:	df000904 	addi	fp,sp,36
     900:	e13ffc15 	stw	r4,-16(fp)
     904:	e17ffd15 	stw	r5,-12(fp)
     908:	e1bffe15 	stw	r6,-8(fp)
     90c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	e0bff915 	stw	r2,-28(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     918:	e03ff715 	stw	zero,-36(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     91c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     920:	e0bff917 	ldw	r2,-28(fp)
     924:	10800017 	ldw	r2,0(r2)
     928:	e0bffb15 	stw	r2,-20(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     92c:	e13ffc17 	ldw	r4,-16(fp)
     930:	e17ffd17 	ldw	r5,-12(fp)
     934:	0000cd80 	call	cd8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     938:	e0fffb17 	ldw	r3,-20(fp)
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	1886b03a 	or	r3,r3,r2
     944:	e0bffe17 	ldw	r2,-8(fp)
     948:	1886703a 	and	r3,r3,r2
     94c:	e0bffe17 	ldw	r2,-8(fp)
     950:	18800d1e 	bne	r3,r2,988 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     954:	e0fffb17 	ldw	r3,-20(fp)
     958:	e0bffd17 	ldw	r2,-12(fp)
     95c:	1884b03a 	or	r2,r3,r2
     960:	e0bffa15 	stw	r2,-24(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     964:	e0bff917 	ldw	r2,-28(fp)
     968:	10c00017 	ldw	r3,0(r2)
     96c:	e0bffe17 	ldw	r2,-8(fp)
     970:	0084303a 	nor	r2,zero,r2
     974:	1886703a 	and	r3,r3,r2
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
     980:	e03fff15 	stw	zero,-4(fp)
     984:	00000e06 	br	9c0 <xEventGroupSync+0xd0>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     988:	e0bfff17 	ldw	r2,-4(fp)
     98c:	1005003a 	cmpeq	r2,r2,zero
     990:	1000081e 	bne	r2,zero,9b4 <xEventGroupSync+0xc4>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     994:	e0bff917 	ldw	r2,-28(fp)
     998:	11000104 	addi	r4,r2,4
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	11414034 	orhi	r5,r2,1280
     9a4:	e1bfff17 	ldw	r6,-4(fp)
     9a8:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     9ac:	e03ffa15 	stw	zero,-24(fp)
     9b0:	00000306 	br	9c0 <xEventGroupSync+0xd0>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     9b4:	e0bff917 	ldw	r2,-28(fp)
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	e0bffa15 	stw	r2,-24(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     9c0:	00030180 	call	3018 <xTaskResumeAll>
     9c4:	e0bff815 	stw	r2,-32(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	1005003a 	cmpeq	r2,r2,zero
     9d0:	1000221e 	bne	r2,zero,a5c <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
     9d4:	e0bff817 	ldw	r2,-32(fp)
     9d8:	1004c03a 	cmpne	r2,r2,zero
     9dc:	1000011e 	bne	r2,zero,9e4 <xEventGroupSync+0xf4>
		{
			portYIELD_WITHIN_API();
     9e0:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     9e4:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     9e8:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     9ec:	e0bffa17 	ldw	r2,-24(fp)
     9f0:	1080802c 	andhi	r2,r2,512
     9f4:	1004c03a 	cmpne	r2,r2,zero
     9f8:	1000131e 	bne	r2,zero,a48 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     9fc:	00041140 	call	4114 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
     a00:	e0bff917 	ldw	r2,-28(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	e0bffa15 	stw	r2,-24(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a0c:	e0fffa17 	ldw	r3,-24(fp)
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	1886703a 	and	r3,r3,r2
     a18:	e0bffe17 	ldw	r2,-8(fp)
     a1c:	1880071e 	bne	r3,r2,a3c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10c00017 	ldw	r3,0(r2)
     a28:	e0bffe17 	ldw	r2,-8(fp)
     a2c:	0084303a 	nor	r2,zero,r2
     a30:	1886703a 	and	r3,r3,r2
     a34:	e0bff917 	ldw	r2,-28(fp)
     a38:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a3c:	00041680 	call	4168 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
     a40:	00800044 	movi	r2,1
     a44:	e0bff715 	stw	r2,-36(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a48:	e0bffa17 	ldw	r2,-24(fp)
     a4c:	00c04034 	movhi	r3,256
     a50:	18ffffc4 	addi	r3,r3,-1
     a54:	10c4703a 	and	r2,r2,r3
     a58:	e0bffa15 	stw	r2,-24(fp)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a5c:	e0bffa17 	ldw	r2,-24(fp)
}
     a60:	e037883a 	mov	sp,fp
     a64:	dfc00117 	ldw	ra,4(sp)
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00204 	addi	sp,sp,8
     a70:	f800283a 	ret

00000a74 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     a74:	defff304 	addi	sp,sp,-52
     a78:	dfc00c15 	stw	ra,48(sp)
     a7c:	df000b15 	stw	fp,44(sp)
     a80:	df000b04 	addi	fp,sp,44
     a84:	e13ffc15 	stw	r4,-16(fp)
     a88:	e17ffd15 	stw	r5,-12(fp)
     a8c:	e1bffe15 	stw	r6,-8(fp)
     a90:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	e0bffb15 	stw	r2,-20(fp)
EventBits_t uxReturn, uxControlBits = 0;
     a9c:	e03ff915 	stw	zero,-28(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     aa0:	e03ff615 	stw	zero,-40(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     aa4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     aa8:	e0bffb17 	ldw	r2,-20(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	e0bff515 	stw	r2,-44(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     ab4:	e13ff517 	ldw	r4,-44(fp)
     ab8:	e17ffd17 	ldw	r5,-12(fp)
     abc:	e1bfff17 	ldw	r6,-4(fp)
     ac0:	0000f440 	call	f44 <prvTestWaitCondition>
     ac4:	e0bff815 	stw	r2,-32(fp)

		if( xWaitConditionMet != pdFALSE )
     ac8:	e0bff817 	ldw	r2,-32(fp)
     acc:	1005003a 	cmpeq	r2,r2,zero
     ad0:	10000e1e 	bne	r2,zero,b0c <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     ad4:	e0bff517 	ldw	r2,-44(fp)
     ad8:	e0bffa15 	stw	r2,-24(fp)
			xTicksToWait = ( TickType_t ) 0;
     adc:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	1005003a 	cmpeq	r2,r2,zero
     ae8:	1000221e 	bne	r2,zero,b74 <xEventGroupWaitBits+0x100>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     aec:	e0bffb17 	ldw	r2,-20(fp)
     af0:	10c00017 	ldw	r3,0(r2)
     af4:	e0bffd17 	ldw	r2,-12(fp)
     af8:	0084303a 	nor	r2,zero,r2
     afc:	1886703a 	and	r3,r3,r2
     b00:	e0bffb17 	ldw	r2,-20(fp)
     b04:	10c00015 	stw	r3,0(r2)
     b08:	00001a06 	br	b74 <xEventGroupWaitBits+0x100>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     b0c:	e0800217 	ldw	r2,8(fp)
     b10:	1004c03a 	cmpne	r2,r2,zero
     b14:	1000031e 	bne	r2,zero,b24 <xEventGroupWaitBits+0xb0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     b18:	e0bff517 	ldw	r2,-44(fp)
     b1c:	e0bffa15 	stw	r2,-24(fp)
     b20:	00001406 	br	b74 <xEventGroupWaitBits+0x100>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     b24:	e0bffe17 	ldw	r2,-8(fp)
     b28:	1005003a 	cmpeq	r2,r2,zero
     b2c:	1000031e 	bne	r2,zero,b3c <xEventGroupWaitBits+0xc8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     b30:	e0bff917 	ldw	r2,-28(fp)
     b34:	10804034 	orhi	r2,r2,256
     b38:	e0bff915 	stw	r2,-28(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     b3c:	e0bfff17 	ldw	r2,-4(fp)
     b40:	1005003a 	cmpeq	r2,r2,zero
     b44:	1000031e 	bne	r2,zero,b54 <xEventGroupWaitBits+0xe0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     b48:	e0bff917 	ldw	r2,-28(fp)
     b4c:	10810034 	orhi	r2,r2,1024
     b50:	e0bff915 	stw	r2,-28(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     b54:	e0bffb17 	ldw	r2,-20(fp)
     b58:	11000104 	addi	r4,r2,4
     b5c:	e0fffd17 	ldw	r3,-12(fp)
     b60:	e0bff917 	ldw	r2,-28(fp)
     b64:	188ab03a 	or	r5,r3,r2
     b68:	e1800217 	ldw	r6,8(fp)
     b6c:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     b70:	e03ffa15 	stw	zero,-24(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     b74:	00030180 	call	3018 <xTaskResumeAll>
     b78:	e0bff715 	stw	r2,-36(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     b7c:	e0800217 	ldw	r2,8(fp)
     b80:	1005003a 	cmpeq	r2,r2,zero
     b84:	1000251e 	bne	r2,zero,c1c <xEventGroupWaitBits+0x1a8>
	{
		if( xAlreadyYielded == pdFALSE )
     b88:	e0bff717 	ldw	r2,-36(fp)
     b8c:	1004c03a 	cmpne	r2,r2,zero
     b90:	1000011e 	bne	r2,zero,b98 <xEventGroupWaitBits+0x124>
		{
			portYIELD_WITHIN_API();
     b94:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     b98:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     b9c:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     ba0:	e0bffa17 	ldw	r2,-24(fp)
     ba4:	1080802c 	andhi	r2,r2,512
     ba8:	1004c03a 	cmpne	r2,r2,zero
     bac:	1000161e 	bne	r2,zero,c08 <xEventGroupWaitBits+0x194>
		{
			taskENTER_CRITICAL();
     bb0:	00041140 	call	4114 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	10800017 	ldw	r2,0(r2)
     bbc:	e0bffa15 	stw	r2,-24(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     bc0:	e13ffa17 	ldw	r4,-24(fp)
     bc4:	e17ffd17 	ldw	r5,-12(fp)
     bc8:	e1bfff17 	ldw	r6,-4(fp)
     bcc:	0000f440 	call	f44 <prvTestWaitCondition>
     bd0:	1005003a 	cmpeq	r2,r2,zero
     bd4:	10000a1e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
				{
					if( xClearOnExit != pdFALSE )
     bd8:	e0bffe17 	ldw	r2,-8(fp)
     bdc:	1005003a 	cmpeq	r2,r2,zero
     be0:	1000071e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     be4:	e0bffb17 	ldw	r2,-20(fp)
     be8:	10c00017 	ldw	r3,0(r2)
     bec:	e0bffd17 	ldw	r2,-12(fp)
     bf0:	0084303a 	nor	r2,zero,r2
     bf4:	1886703a 	and	r3,r3,r2
     bf8:	e0bffb17 	ldw	r2,-20(fp)
     bfc:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     c00:	00041680 	call	4168 <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     c04:	e03ff615 	stw	zero,-40(fp)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     c08:	e0bffa17 	ldw	r2,-24(fp)
     c0c:	00c04034 	movhi	r3,256
     c10:	18ffffc4 	addi	r3,r3,-1
     c14:	10c4703a 	and	r2,r2,r3
     c18:	e0bffa15 	stw	r2,-24(fp)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     c1c:	e0bffa17 	ldw	r2,-24(fp)
}
     c20:	e037883a 	mov	sp,fp
     c24:	dfc00117 	ldw	ra,4(sp)
     c28:	df000017 	ldw	fp,0(sp)
     c2c:	dec00204 	addi	sp,sp,8
     c30:	f800283a 	ret

00000c34 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     c34:	defffa04 	addi	sp,sp,-24
     c38:	dfc00515 	stw	ra,20(sp)
     c3c:	df000415 	stw	fp,16(sp)
     c40:	df000404 	addi	fp,sp,16
     c44:	e13ffe15 	stw	r4,-8(fp)
     c48:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     c4c:	e0bffe17 	ldw	r2,-8(fp)
     c50:	e0bffd15 	stw	r2,-12(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     c54:	00041140 	call	4114 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     c58:	e0bffd17 	ldw	r2,-12(fp)
     c5c:	10800017 	ldw	r2,0(r2)
     c60:	e0bffc15 	stw	r2,-16(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	10c00017 	ldw	r3,0(r2)
     c6c:	e0bfff17 	ldw	r2,-4(fp)
     c70:	0084303a 	nor	r2,zero,r2
     c74:	1886703a 	and	r3,r3,r2
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
     c80:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
     c84:	e0bffc17 	ldw	r2,-16(fp)
}
     c88:	e037883a 	mov	sp,fp
     c8c:	dfc00117 	ldw	ra,4(sp)
     c90:	df000017 	ldw	fp,0(sp)
     c94:	dec00204 	addi	sp,sp,8
     c98:	f800283a 	ret

00000c9c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     c9c:	defffb04 	addi	sp,sp,-20
     ca0:	df000415 	stw	fp,16(sp)
     ca4:	df000404 	addi	fp,sp,16
     ca8:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	e0bffd15 	stw	r2,-12(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     cb4:	e03ffe15 	stw	zero,-8(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10800017 	ldw	r2,0(r2)
     cc0:	e0bffc15 	stw	r2,-16(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     cc4:	e0bffc17 	ldw	r2,-16(fp)
}
     cc8:	e037883a 	mov	sp,fp
     ccc:	df000017 	ldw	fp,0(sp)
     cd0:	dec00104 	addi	sp,sp,4
     cd4:	f800283a 	ret

00000cd8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cd8:	defff304 	addi	sp,sp,-52
     cdc:	dfc00c15 	stw	ra,48(sp)
     ce0:	df000b15 	stw	fp,44(sp)
     ce4:	df000b04 	addi	fp,sp,44
     ce8:	e13ffe15 	stw	r4,-8(fp)
     cec:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     cf0:	e03ff915 	stw	zero,-28(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cf4:	e0bffe17 	ldw	r2,-8(fp)
     cf8:	e0bff615 	stw	r2,-40(fp)
BaseType_t xMatchFound = pdFALSE;
     cfc:	e03ff515 	stw	zero,-44(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     d00:	e0bff617 	ldw	r2,-40(fp)
     d04:	10800104 	addi	r2,r2,4
     d08:	e0bffa15 	stw	r2,-24(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	10800204 	addi	r2,r2,8
     d14:	e0bffb15 	stw	r2,-20(fp)
	vTaskSuspendAll();
     d18:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     d1c:	e0bffa17 	ldw	r2,-24(fp)
     d20:	10800317 	ldw	r2,12(r2)
     d24:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     d28:	e0bff617 	ldw	r2,-40(fp)
     d2c:	10c00017 	ldw	r3,0(r2)
     d30:	e0bfff17 	ldw	r2,-4(fp)
     d34:	1886b03a 	or	r3,r3,r2
     d38:	e0bff617 	ldw	r2,-40(fp)
     d3c:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     d40:	00003606 	br	e1c <xEventGroupSetBits+0x144>
		{
			pxNext = listGET_NEXT( pxListItem );
     d44:	e0bffd17 	ldw	r2,-12(fp)
     d48:	10800117 	ldw	r2,4(r2)
     d4c:	e0bffc15 	stw	r2,-16(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800017 	ldw	r2,0(r2)
     d58:	e0bff815 	stw	r2,-32(fp)
			xMatchFound = pdFALSE;
     d5c:	e03ff515 	stw	zero,-44(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     d60:	e0bff817 	ldw	r2,-32(fp)
     d64:	10bfc02c 	andhi	r2,r2,65280
     d68:	e0bff715 	stw	r2,-36(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d6c:	e0fff817 	ldw	r3,-32(fp)
     d70:	00804034 	movhi	r2,256
     d74:	10bfffc4 	addi	r2,r2,-1
     d78:	1884703a 	and	r2,r3,r2
     d7c:	e0bff815 	stw	r2,-32(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d80:	e0bff717 	ldw	r2,-36(fp)
     d84:	1081002c 	andhi	r2,r2,1024
     d88:	1004c03a 	cmpne	r2,r2,zero
     d8c:	1000091e 	bne	r2,zero,db4 <xEventGroupSetBits+0xdc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     d90:	e0bff617 	ldw	r2,-40(fp)
     d94:	10c00017 	ldw	r3,0(r2)
     d98:	e0bff817 	ldw	r2,-32(fp)
     d9c:	1884703a 	and	r2,r3,r2
     da0:	1005003a 	cmpeq	r2,r2,zero
     da4:	10000b1e 	bne	r2,zero,dd4 <xEventGroupSetBits+0xfc>
				{
					xMatchFound = pdTRUE;
     da8:	00800044 	movi	r2,1
     dac:	e0bff515 	stw	r2,-44(fp)
     db0:	00000806 	br	dd4 <xEventGroupSetBits+0xfc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     db4:	e0bff617 	ldw	r2,-40(fp)
     db8:	10c00017 	ldw	r3,0(r2)
     dbc:	e0bff817 	ldw	r2,-32(fp)
     dc0:	1886703a 	and	r3,r3,r2
     dc4:	e0bff817 	ldw	r2,-32(fp)
     dc8:	1880021e 	bne	r3,r2,dd4 <xEventGroupSetBits+0xfc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     dcc:	00800044 	movi	r2,1
     dd0:	e0bff515 	stw	r2,-44(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     dd4:	e0bff517 	ldw	r2,-44(fp)
     dd8:	1005003a 	cmpeq	r2,r2,zero
     ddc:	10000d1e 	bne	r2,zero,e14 <xEventGroupSetBits+0x13c>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     de0:	e0bff717 	ldw	r2,-36(fp)
     de4:	1080402c 	andhi	r2,r2,256
     de8:	1005003a 	cmpeq	r2,r2,zero
     dec:	1000041e 	bne	r2,zero,e00 <xEventGroupSetBits+0x128>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     df0:	e0bff917 	ldw	r2,-28(fp)
     df4:	e0fff817 	ldw	r3,-32(fp)
     df8:	10c4b03a 	or	r2,r2,r3
     dfc:	e0bff915 	stw	r2,-28(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e00:	e0bff617 	ldw	r2,-40(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	11408034 	orhi	r5,r2,512
     e0c:	e13ffd17 	ldw	r4,-12(fp)
     e10:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     e14:	e0bffc17 	ldw	r2,-16(fp)
     e18:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     e1c:	e0fffd17 	ldw	r3,-12(fp)
     e20:	e0bffb17 	ldw	r2,-20(fp)
     e24:	18bfc71e 	bne	r3,r2,d44 <xEventGroupSetBits+0x6c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     e28:	e0bff617 	ldw	r2,-40(fp)
     e2c:	10c00017 	ldw	r3,0(r2)
     e30:	e0bff917 	ldw	r2,-28(fp)
     e34:	0084303a 	nor	r2,zero,r2
     e38:	1886703a 	and	r3,r3,r2
     e3c:	e0bff617 	ldw	r2,-40(fp)
     e40:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
     e44:	00030180 	call	3018 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     e48:	e0bff617 	ldw	r2,-40(fp)
     e4c:	10800017 	ldw	r2,0(r2)
}
     e50:	e037883a 	mov	sp,fp
     e54:	dfc00117 	ldw	ra,4(sp)
     e58:	df000017 	ldw	fp,0(sp)
     e5c:	dec00204 	addi	sp,sp,8
     e60:	f800283a 	ret

00000e64 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     e64:	defffb04 	addi	sp,sp,-20
     e68:	dfc00415 	stw	ra,16(sp)
     e6c:	df000315 	stw	fp,12(sp)
     e70:	df000304 	addi	fp,sp,12
     e74:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     e78:	e0bfff17 	ldw	r2,-4(fp)
     e7c:	e0bffe15 	stw	r2,-8(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	10800104 	addi	r2,r2,4
     e88:	e0bffd15 	stw	r2,-12(fp)

	vTaskSuspendAll();
     e8c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     e90:	00000406 	br	ea4 <vEventGroupDelete+0x40>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     e94:	e0bffd17 	ldw	r2,-12(fp)
     e98:	11000317 	ldw	r4,12(r2)
     e9c:	01408034 	movhi	r5,512
     ea0:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	1004c03a 	cmpne	r2,r2,zero
     eb0:	103ff81e 	bne	r2,zero,e94 <vEventGroupDelete+0x30>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
     eb4:	e13ffe17 	ldw	r4,-8(fp)
     eb8:	00011500 	call	1150 <vPortFree>
	}
	( void ) xTaskResumeAll();
     ebc:	00030180 	call	3018 <xTaskResumeAll>
}
     ec0:	e037883a 	mov	sp,fp
     ec4:	dfc00117 	ldw	ra,4(sp)
     ec8:	df000017 	ldw	fp,0(sp)
     ecc:	dec00204 	addi	sp,sp,8
     ed0:	f800283a 	ret

00000ed4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     ed4:	defffc04 	addi	sp,sp,-16
     ed8:	dfc00315 	stw	ra,12(sp)
     edc:	df000215 	stw	fp,8(sp)
     ee0:	df000204 	addi	fp,sp,8
     ee4:	e13ffe15 	stw	r4,-8(fp)
     ee8:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     eec:	e13ffe17 	ldw	r4,-8(fp)
     ef0:	e17fff17 	ldw	r5,-4(fp)
     ef4:	0000cd80 	call	cd8 <xEventGroupSetBits>
}
     ef8:	e037883a 	mov	sp,fp
     efc:	dfc00117 	ldw	ra,4(sp)
     f00:	df000017 	ldw	fp,0(sp)
     f04:	dec00204 	addi	sp,sp,8
     f08:	f800283a 	ret

00000f0c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     f0c:	defffc04 	addi	sp,sp,-16
     f10:	dfc00315 	stw	ra,12(sp)
     f14:	df000215 	stw	fp,8(sp)
     f18:	df000204 	addi	fp,sp,8
     f1c:	e13ffe15 	stw	r4,-8(fp)
     f20:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     f24:	e13ffe17 	ldw	r4,-8(fp)
     f28:	e17fff17 	ldw	r5,-4(fp)
     f2c:	0000c340 	call	c34 <xEventGroupClearBits>
}
     f30:	e037883a 	mov	sp,fp
     f34:	dfc00117 	ldw	ra,4(sp)
     f38:	df000017 	ldw	fp,0(sp)
     f3c:	dec00204 	addi	sp,sp,8
     f40:	f800283a 	ret

00000f44 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     f44:	defffb04 	addi	sp,sp,-20
     f48:	df000415 	stw	fp,16(sp)
     f4c:	df000404 	addi	fp,sp,16
     f50:	e13ffd15 	stw	r4,-12(fp)
     f54:	e17ffe15 	stw	r5,-8(fp)
     f58:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
     f5c:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
     f60:	e0bfff17 	ldw	r2,-4(fp)
     f64:	1004c03a 	cmpne	r2,r2,zero
     f68:	1000081e 	bne	r2,zero,f8c <prvTestWaitCondition+0x48>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f6c:	e0fffd17 	ldw	r3,-12(fp)
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	1884703a 	and	r2,r3,r2
     f78:	1005003a 	cmpeq	r2,r2,zero
     f7c:	10000a1e 	bne	r2,zero,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     f80:	00800044 	movi	r2,1
     f84:	e0bffc15 	stw	r2,-16(fp)
     f88:	00000706 	br	fa8 <prvTestWaitCondition+0x64>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     f8c:	e0fffd17 	ldw	r3,-12(fp)
     f90:	e0bffe17 	ldw	r2,-8(fp)
     f94:	1886703a 	and	r3,r3,r2
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	1880021e 	bne	r3,r2,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     fa0:	00800044 	movi	r2,1
     fa4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     fa8:	e0bffc17 	ldw	r2,-16(fp)
}
     fac:	e037883a 	mov	sp,fp
     fb0:	df000017 	ldw	fp,0(sp)
     fb4:	dec00104 	addi	sp,sp,4
     fb8:	f800283a 	ret

00000fbc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fbc:	defff904 	addi	sp,sp,-28
     fc0:	dfc00615 	stw	ra,24(sp)
     fc4:	df000515 	stw	fp,20(sp)
     fc8:	df000504 	addi	fp,sp,20
     fcc:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     fd0:	e03ffb15 	stw	zero,-20(fp)

        vTaskSuspendAll();
     fd4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
        {
                /* If this is the first call to malloc then the heap will require
                initialisation to setup the list of free blocks. */
                if( pxEnd == NULL )
     fd8:	d0a02517 	ldw	r2,-32620(gp)
     fdc:	1004c03a 	cmpne	r2,r2,zero
     fe0:	1000011e 	bne	r2,zero,fe8 <pvPortMalloc+0x2c>
                {
                        prvHeapInit();
     fe4:	000120c0 	call	120c <prvHeapInit>
                }

                /* The wanted size is increased so it can contain a xBlockLink
                structure in addition to the requested amount of bytes. */
                if( xWantedSize > 0 )
     fe8:	e0bfff17 	ldw	r2,-4(fp)
     fec:	1005003a 	cmpeq	r2,r2,zero
     ff0:	10000e1e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                {
                        xWantedSize += heapSTRUCT_SIZE;
     ff4:	d0a0000b 	ldhu	r2,-32768(gp)
     ff8:	10ffffcc 	andi	r3,r2,65535
     ffc:	e0bfff17 	ldw	r2,-4(fp)
    1000:	10c5883a 	add	r2,r2,r3
    1004:	e0bfff15 	stw	r2,-4(fp)

                        /* Ensure that blocks are always aligned to the required number of
                        bytes. */
                        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1008:	e0bfff17 	ldw	r2,-4(fp)
    100c:	108000cc 	andi	r2,r2,3
    1010:	1005003a 	cmpeq	r2,r2,zero
    1014:	1000051e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                        {
                                /* Byte alignment required. */
                                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1018:	e0ffff17 	ldw	r3,-4(fp)
    101c:	00bfff04 	movi	r2,-4
    1020:	1884703a 	and	r2,r3,r2
    1024:	10800104 	addi	r2,r2,4
    1028:	e0bfff15 	stw	r2,-4(fp)
                        }
                }

                if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
    102c:	e0bfff17 	ldw	r2,-4(fp)
    1030:	1005003a 	cmpeq	r2,r2,zero
    1034:	10003f1e 	bne	r2,zero,1134 <pvPortMalloc+0x178>
    1038:	d0e00117 	ldw	r3,-32764(gp)
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	10c03c2e 	bgeu	r2,r3,1134 <pvPortMalloc+0x178>
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
    1044:	d0a02604 	addi	r2,gp,-32616
    1048:	e0bffd15 	stw	r2,-12(fp)
                        pxBlock = xStart.pxNextFreeBlock;
    104c:	d0a02617 	ldw	r2,-32616(gp)
    1050:	e0bffe15 	stw	r2,-8(fp)
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1054:	00000506 	br	106c <pvPortMalloc+0xb0>
                        {
                                pxPreviousBlock = pxBlock;
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	e0bffd15 	stw	r2,-12(fp)
                                pxBlock = pxBlock->pxNextFreeBlock;
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10800017 	ldw	r2,0(r2)
    1068:	e0bffe15 	stw	r2,-8(fp)
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
                        pxBlock = xStart.pxNextFreeBlock;
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10c00117 	ldw	r3,4(r2)
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	1880042e 	bgeu	r3,r2,108c <pvPortMalloc+0xd0>
    107c:	e0bffe17 	ldw	r2,-8(fp)
    1080:	10800017 	ldw	r2,0(r2)
    1084:	1004c03a 	cmpne	r2,r2,zero
    1088:	103ff31e 	bne	r2,zero,1058 <pvPortMalloc+0x9c>
                                pxBlock = pxBlock->pxNextFreeBlock;
                        }

                        /* If the end marker was reached then a block of adequate size was
                        not found. */
                        if( pxBlock != pxEnd )
    108c:	d0e02517 	ldw	r3,-32620(gp)
    1090:	e0bffe17 	ldw	r2,-8(fp)
    1094:	10c02726 	beq	r2,r3,1134 <pvPortMalloc+0x178>
                        {
                                /* Return the memory space - jumping over the xBlockLink structure
                                at its start. */
                                pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1098:	e0bffd17 	ldw	r2,-12(fp)
    109c:	10800017 	ldw	r2,0(r2)
    10a0:	1007883a 	mov	r3,r2
    10a4:	d0a0000b 	ldhu	r2,-32768(gp)
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	1885883a 	add	r2,r3,r2
    10b0:	e0bffb15 	stw	r2,-20(fp)

                                /* This block is being returned for use so must be taken out of
                                the     list of free blocks. */
                                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10b4:	e0bffe17 	ldw	r2,-8(fp)
    10b8:	10c00017 	ldw	r3,0(r2)
    10bc:	e0bffd17 	ldw	r2,-12(fp)
    10c0:	10c00015 	stw	r3,0(r2)

                                /* If the block is larger than required it can be split into two. */
                                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10c4:	e0bffe17 	ldw	r2,-8(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1887c83a 	sub	r3,r3,r2
    10d4:	d0a0000b 	ldhu	r2,-32768(gp)
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c00f2e 	bgeu	r2,r3,1120 <pvPortMalloc+0x164>
                                {
                                        /* This block is to be split into two.  Create a new block
                                        following the number of bytes requested. The void cast is
                                        used to prevent byte alignment warnings from the compiler. */
                                        pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e4:	e0fffe17 	ldw	r3,-8(fp)
    10e8:	e0bfff17 	ldw	r2,-4(fp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	e0bffc15 	stw	r2,-16(fp)

                                        /* Calculate the sizes of two blocks split from the single
                                        block. */
                                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10f4:	e0bffe17 	ldw	r2,-8(fp)
    10f8:	10c00117 	ldw	r3,4(r2)
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1887c83a 	sub	r3,r3,r2
    1104:	e0bffc17 	ldw	r2,-16(fp)
    1108:	10c00115 	stw	r3,4(r2)
                                        pxBlock->xBlockSize = xWantedSize;
    110c:	e0fffe17 	ldw	r3,-8(fp)
    1110:	e0bfff17 	ldw	r2,-4(fp)
    1114:	18800115 	stw	r2,4(r3)

                                        /* Insert the new block into the list of free blocks. */
                                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1118:	e13ffc17 	ldw	r4,-16(fp)
    111c:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                                }

                                xFreeBytesRemaining -= pxBlock->xBlockSize;
    1120:	d0e00217 	ldw	r3,-32760(gp)
    1124:	e0bffe17 	ldw	r2,-8(fp)
    1128:	10800117 	ldw	r2,4(r2)
    112c:	1885c83a 	sub	r2,r3,r2
    1130:	d0a00215 	stw	r2,-32760(gp)
                        }
                }
        }
        xTaskResumeAll();
    1134:	00030180 	call	3018 <xTaskResumeAll>
                        vApplicationMallocFailedHook();
                }
        }
        #endif

        return pvReturn;
    1138:	e0bffb17 	ldw	r2,-20(fp)
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1150:	defffb04 	addi	sp,sp,-20
    1154:	dfc00415 	stw	ra,16(sp)
    1158:	df000315 	stw	fp,12(sp)
    115c:	df000304 	addi	fp,sp,12
    1160:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	e0bffe15 	stw	r2,-8(fp)
xBlockLink *pxLink;

        if( pv != NULL )
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	1005003a 	cmpeq	r2,r2,zero
    1174:	1000111e 	bne	r2,zero,11bc <vPortFree+0x6c>
        {
                /* The memory being freed will have an xBlockLink structure immediately
                before it. */
                puc -= heapSTRUCT_SIZE;
    1178:	d0a0000b 	ldhu	r2,-32768(gp)
    117c:	10bfffcc 	andi	r2,r2,65535
    1180:	1007883a 	mov	r3,r2
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10c5c83a 	sub	r2,r2,r3
    118c:	e0bffe15 	stw	r2,-8(fp)

                /* This casting is to keep the compiler from issuing warnings. */
                pxLink = ( void * ) puc;
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	e0bffd15 	stw	r2,-12(fp)

                vTaskSuspendAll();
    1198:	0002ff00 	call	2ff0 <vTaskSuspendAll>
                {
                        /* Add this block to the list of free blocks. */
                        xFreeBytesRemaining += pxLink->xBlockSize;
    119c:	e0bffd17 	ldw	r2,-12(fp)
    11a0:	10c00117 	ldw	r3,4(r2)
    11a4:	d0a00217 	ldw	r2,-32760(gp)
    11a8:	1885883a 	add	r2,r3,r2
    11ac:	d0a00215 	stw	r2,-32760(gp)
                        prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    11b0:	e13ffd17 	ldw	r4,-12(fp)
    11b4:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                }
                xTaskResumeAll();
    11b8:	00030180 	call	3018 <xTaskResumeAll>
        }
}
    11bc:	e037883a 	mov	sp,fp
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
    11cc:	f800283a 	ret

000011d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	df000015 	stw	fp,0(sp)
    11d8:	d839883a 	mov	fp,sp
        return xFreeBytesRemaining;
    11dc:	d0a00217 	ldw	r2,-32760(gp)
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	df000017 	ldw	fp,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	df000015 	stw	fp,0(sp)
    11f8:	d839883a 	mov	fp,sp
        /* This just exists to keep the linker quiet. */
}
    11fc:	e037883a 	mov	sp,fp
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00104 	addi	sp,sp,4
    1208:	f800283a 	ret

0000120c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    120c:	defffd04 	addi	sp,sp,-12
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
        /* Ensure the start of the heap is aligned. */
        configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

        /* xStart is used to hold a pointer to the first item in the list of free
        blocks.  The void cast is used to prevent compiler warnings. */
        xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
    1218:	00820034 	movhi	r2,2048
    121c:	108a6504 	addi	r2,r2,10644
    1220:	d0a02615 	stw	r2,-32616(gp)
        xStart.xBlockSize = ( size_t ) 0;
    1224:	00820034 	movhi	r2,2048
    1228:	108a2504 	addi	r2,r2,10388
    122c:	10000015 	stw	zero,0(r2)

        /* pxEnd is used to mark the end of the list of free blocks and is inserted
        at the end of the heap space. */
        pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
    1230:	d0a00117 	ldw	r2,-32764(gp)
    1234:	1007883a 	mov	r3,r2
    1238:	00820034 	movhi	r2,2048
    123c:	108a6504 	addi	r2,r2,10644
    1240:	1885883a 	add	r2,r3,r2
    1244:	e0bffe15 	stw	r2,-8(fp)
        pucHeapEnd -= heapSTRUCT_SIZE;
    1248:	d0a0000b 	ldhu	r2,-32768(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	1007883a 	mov	r3,r2
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	10c5c83a 	sub	r2,r2,r3
    125c:	e0bffe15 	stw	r2,-8(fp)
        pxEnd = ( void * ) pucHeapEnd;
    1260:	e0bffe17 	ldw	r2,-8(fp)
    1264:	d0a02515 	stw	r2,-32620(gp)
        configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
        pxEnd->xBlockSize = 0;
    1268:	d0a02517 	ldw	r2,-32620(gp)
    126c:	10000115 	stw	zero,4(r2)
        pxEnd->pxNextFreeBlock = NULL;
    1270:	d0a02517 	ldw	r2,-32620(gp)
    1274:	10000015 	stw	zero,0(r2)

        /* To start with there is a single free block that is sized to take up the
        entire heap space, minus the space taken by pxEnd. */
        pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
    1278:	00820034 	movhi	r2,2048
    127c:	108a6504 	addi	r2,r2,10644
    1280:	e0bfff15 	stw	r2,-4(fp)
        pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
    1284:	d0e00117 	ldw	r3,-32764(gp)
    1288:	d0a0000b 	ldhu	r2,-32768(gp)
    128c:	10bfffcc 	andi	r2,r2,65535
    1290:	1887c83a 	sub	r3,r3,r2
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10c00115 	stw	r3,4(r2)
        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129c:	d0e02517 	ldw	r3,-32620(gp)
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00015 	stw	r3,0(r2)

        /* The heap now contains pxEnd. */
        xFreeBytesRemaining -= heapSTRUCT_SIZE;
    12a8:	d0e00217 	ldw	r3,-32760(gp)
    12ac:	d0a0000b 	ldhu	r2,-32768(gp)
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	d0a00215 	stw	r2,-32760(gp)
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	df000017 	ldw	fp,0(sp)
    12c4:	dec00104 	addi	sp,sp,4
    12c8:	f800283a 	ret

000012cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
    12cc:	defffc04 	addi	sp,sp,-16
    12d0:	df000315 	stw	fp,12(sp)
    12d4:	df000304 	addi	fp,sp,12
    12d8:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxIterator;
unsigned char *puc;

        /* Iterate through the list until a block is found that has a higher address
        than the block being inserted. */
        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12dc:	d0a02604 	addi	r2,gp,-32616
    12e0:	e0bffe15 	stw	r2,-8(fp)
    12e4:	00000306 	br	12f4 <prvInsertBlockIntoFreeList+0x28>
    12e8:	e0bffe17 	ldw	r2,-8(fp)
    12ec:	10800017 	ldw	r2,0(r2)
    12f0:	e0bffe15 	stw	r2,-8(fp)
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10c00017 	ldw	r3,0(r2)
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	18bff936 	bltu	r3,r2,12e8 <prvInsertBlockIntoFreeList+0x1c>
                /* Nothing to do here, just iterate to the right position. */
        }

        /* Do the block being inserted, and the block it is being inserted after
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxIterator;
    1304:	e0bffe17 	ldw	r2,-8(fp)
    1308:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	10800117 	ldw	r2,4(r2)
    1314:	1007883a 	mov	r3,r2
    1318:	e0bffd17 	ldw	r2,-12(fp)
    131c:	1887883a 	add	r3,r3,r2
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	1880091e 	bne	r3,r2,134c <prvInsertBlockIntoFreeList+0x80>
        {
                pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1328:	e0bffe17 	ldw	r2,-8(fp)
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800117 	ldw	r2,4(r2)
    1338:	1887883a 	add	r3,r3,r2
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	10c00115 	stw	r3,4(r2)
                pxBlockToInsert = pxIterator;
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Do the block being inserted, and the block it is being inserted before
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxBlockToInsert;
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10800117 	ldw	r2,4(r2)
    135c:	1007883a 	mov	r3,r2
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	1887883a 	add	r3,r3,r2
    1368:	e0bffe17 	ldw	r2,-8(fp)
    136c:	10800017 	ldw	r2,0(r2)
    1370:	1880161e 	bne	r3,r2,13cc <prvInsertBlockIntoFreeList+0x100>
        {
                if( pxIterator->pxNextFreeBlock != pxEnd )
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	10c00017 	ldw	r3,0(r2)
    137c:	d0a02517 	ldw	r2,-32620(gp)
    1380:	18800e26 	beq	r3,r2,13bc <prvInsertBlockIntoFreeList+0xf0>
                {
                        /* Form one big block from the two blocks. */
                        pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c00117 	ldw	r3,4(r2)
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	10800017 	ldw	r2,0(r2)
    1394:	10800117 	ldw	r2,4(r2)
    1398:	1887883a 	add	r3,r3,r2
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	10c00115 	stw	r3,4(r2)
                        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10800017 	ldw	r2,0(r2)
    13ac:	10c00017 	ldw	r3,0(r2)
    13b0:	e0bfff17 	ldw	r2,-4(fp)
    13b4:	10c00015 	stw	r3,0(r2)
    13b8:	00000806 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
                else
                {
                        pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13bc:	d0e02517 	ldw	r3,-32620(gp)
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10c00015 	stw	r3,0(r2)
    13c8:	00000406 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
        }
        else
        {
                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	10c00017 	ldw	r3,0(r2)
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10c00015 	stw	r3,0(r2)

        /* If the block being inserted plugged a gab, so was merged with the block
        before and the block after, then it's pxNextFreeBlock pointer will have
        already been set, and should not be set here as that would make it point
        to itself. */
        if( pxIterator != pxBlockToInsert )
    13dc:	e0fffe17 	ldw	r3,-8(fp)
    13e0:	e0bfff17 	ldw	r2,-4(fp)
    13e4:	18800326 	beq	r3,r2,13f4 <prvInsertBlockIntoFreeList+0x128>
        {
                pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e8:	e0fffe17 	ldw	r3,-8(fp)
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	18800015 	stw	r2,0(r3)
        }
}
    13f4:	e037883a 	mov	sp,fp
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00104 	addi	sp,sp,4
    1400:	f800283a 	ret

00001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1404:	defffe04 	addi	sp,sp,-8
    1408:	df000115 	stw	fp,4(sp)
    140c:	df000104 	addi	fp,sp,4
    1410:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	10800204 	addi	r2,r2,8
    141c:	1007883a 	mov	r3,r2
    1420:	e0bfff17 	ldw	r2,-4(fp)
    1424:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1428:	e0ffff17 	ldw	r3,-4(fp)
    142c:	00bfffc4 	movi	r2,-1
    1430:	18800215 	stw	r2,8(r3)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800204 	addi	r2,r2,8
    143c:	1007883a 	mov	r3,r2
    1440:	e0bfff17 	ldw	r2,-4(fp)
    1444:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10800204 	addi	r2,r2,8
    1450:	1007883a 	mov	r3,r2
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    145c:	e0bfff17 	ldw	r2,-4(fp)
    1460:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1464:	e037883a 	mov	sp,fp
    1468:	df000017 	ldw	fp,0(sp)
    146c:	dec00104 	addi	sp,sp,4
    1470:	f800283a 	ret

00001474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1474:	defffe04 	addi	sp,sp,-8
    1478:	df000115 	stw	fp,4(sp)
    147c:	df000104 	addi	fp,sp,4
    1480:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1484:	e0bfff17 	ldw	r2,-4(fp)
    1488:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    148c:	e037883a 	mov	sp,fp
    1490:	df000017 	ldw	fp,0(sp)
    1494:	dec00104 	addi	sp,sp,4
    1498:	f800283a 	ret

0000149c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    149c:	defffc04 	addi	sp,sp,-16
    14a0:	df000315 	stw	fp,12(sp)
    14a4:	df000304 	addi	fp,sp,12
    14a8:	e13ffe15 	stw	r4,-8(fp)
    14ac:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	10800117 	ldw	r2,4(r2)
    14b8:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14bc:	e0ffff17 	ldw	r3,-4(fp)
    14c0:	e0bffd17 	ldw	r2,-12(fp)
    14c4:	18800115 	stw	r2,4(r3)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c8:	e0bffd17 	ldw	r2,-12(fp)
    14cc:	10c00217 	ldw	r3,8(r2)
    14d0:	e0bfff17 	ldw	r2,-4(fp)
    14d4:	10c00215 	stw	r3,8(r2)
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	10c00217 	ldw	r3,8(r2)
    14e0:	e0bfff17 	ldw	r2,-4(fp)
    14e4:	18800115 	stw	r2,4(r3)
	pxIndex->pxPrevious = pxNewListItem;
    14e8:	e0fffd17 	ldw	r3,-12(fp)
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	18800215 	stw	r2,8(r3)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14f4:	e0ffff17 	ldw	r3,-4(fp)
    14f8:	e0bffe17 	ldw	r2,-8(fp)
    14fc:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	10800017 	ldw	r2,0(r2)
    1508:	10c00044 	addi	r3,r2,1
    150c:	e0bffe17 	ldw	r2,-8(fp)
    1510:	10c00015 	stw	r3,0(r2)
}
    1514:	e037883a 	mov	sp,fp
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	defffb04 	addi	sp,sp,-20
    1528:	df000415 	stw	fp,16(sp)
    152c:	df000404 	addi	fp,sp,16
    1530:	e13ffe15 	stw	r4,-8(fp)
    1534:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	e0bffc15 	stw	r2,-16(fp)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1544:	e0bffc17 	ldw	r2,-16(fp)
    1548:	10bfffd8 	cmpnei	r2,r2,-1
    154c:	1000041e 	bne	r2,zero,1560 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800417 	ldw	r2,16(r2)
    1558:	e0bffd15 	stw	r2,-12(fp)
    155c:	00000c06 	br	1590 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10800204 	addi	r2,r2,8
    1568:	e0bffd15 	stw	r2,-12(fp)
    156c:	00000306 	br	157c <vListInsert+0x58>
    1570:	e0bffd17 	ldw	r2,-12(fp)
    1574:	10800117 	ldw	r2,4(r2)
    1578:	e0bffd15 	stw	r2,-12(fp)
    157c:	e0bffd17 	ldw	r2,-12(fp)
    1580:	10800117 	ldw	r2,4(r2)
    1584:	10c00017 	ldw	r3,0(r2)
    1588:	e0bffc17 	ldw	r2,-16(fp)
    158c:	10fff82e 	bgeu	r2,r3,1570 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1590:	e0bffd17 	ldw	r2,-12(fp)
    1594:	10c00117 	ldw	r3,4(r2)
    1598:	e0bfff17 	ldw	r2,-4(fp)
    159c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c00117 	ldw	r3,4(r2)
    15a8:	e0bfff17 	ldw	r2,-4(fp)
    15ac:	18800215 	stw	r2,8(r3)
	pxNewListItem->pxPrevious = pxIterator;
    15b0:	e0ffff17 	ldw	r3,-4(fp)
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	18800215 	stw	r2,8(r3)
	pxIterator->pxNext = pxNewListItem;
    15bc:	e0fffd17 	ldw	r3,-12(fp)
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	18800115 	stw	r2,4(r3)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15c8:	e0ffff17 	ldw	r3,-4(fp)
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	10c00044 	addi	r3,r2,1
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00015 	stw	r3,0(r2)
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	df000017 	ldw	fp,0(sp)
    15f0:	dec00104 	addi	sp,sp,4
    15f4:	f800283a 	ret

000015f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15f8:	defffd04 	addi	sp,sp,-12
    15fc:	df000215 	stw	fp,8(sp)
    1600:	df000204 	addi	fp,sp,8
    1604:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	10800417 	ldw	r2,16(r2)
    1610:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1614:	e0bfff17 	ldw	r2,-4(fp)
    1618:	10c00117 	ldw	r3,4(r2)
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	10800217 	ldw	r2,8(r2)
    1624:	18800215 	stw	r2,8(r3)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1628:	e0bfff17 	ldw	r2,-4(fp)
    162c:	10c00217 	ldw	r3,8(r2)
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	10800117 	ldw	r2,4(r2)
    1638:	18800115 	stw	r2,4(r3)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	10c00117 	ldw	r3,4(r2)
    1644:	e0bfff17 	ldw	r2,-4(fp)
    1648:	1880041e 	bne	r3,r2,165c <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    164c:	e0bfff17 	ldw	r2,-4(fp)
    1650:	10c00217 	ldw	r3,8(r2)
    1654:	e0bffe17 	ldw	r2,-8(fp)
    1658:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    165c:	e0bfff17 	ldw	r2,-4(fp)
    1660:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	10800017 	ldw	r2,0(r2)
    166c:	10ffffc4 	addi	r3,r2,-1
    1670:	e0bffe17 	ldw	r2,-8(fp)
    1674:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10800017 	ldw	r2,0(r2)
}
    1680:	e037883a 	mov	sp,fp
    1684:	df000017 	ldw	fp,0(sp)
    1688:	dec00104 	addi	sp,sp,4
    168c:	f800283a 	ret

00001690 <vApplicationStackOverflowHook>:
#define configTICK_RATE_HZ 1000
#define configCPU_CLOCK_HZ TIMER1MS_FREQ
#define SYS_CLK_IRQ TIMER1MS_IRQ
//stack overflow hook
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName )
{
    1690:	defffc04 	addi	sp,sp,-16
    1694:	dfc00315 	stw	ra,12(sp)
    1698:	df000215 	stw	fp,8(sp)
    169c:	df000204 	addi	fp,sp,8
    16a0:	e13ffe15 	stw	r4,-8(fp)
    16a4:	e17fff15 	stw	r5,-4(fp)
	printf("[free_rtos] Application stack overflow at task: %s\n", pcTaskName);
    16a8:	01020034 	movhi	r4,2048
    16ac:	21000004 	addi	r4,r4,0
    16b0:	e17fff17 	ldw	r5,-4(fp)
    16b4:	00078c00 	call	78c0 <printf>
}
    16b8:	e037883a 	mov	sp,fp
    16bc:	dfc00117 	ldw	ra,4(sp)
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00204 	addi	sp,sp,8
    16c8:	f800283a 	ret

000016cc <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
    16cc:	defffe04 	addi	sp,sp,-8
    16d0:	df000115 	stw	fp,4(sp)
    16d4:	df000104 	addi	fp,sp,4
    16d8:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	16800015 	stw	gp,0(r2)
}
    16e4:	e037883a 	mov	sp,fp
    16e8:	df000017 	ldw	fp,0(sp)
    16ec:	dec00104 	addi	sp,sp,4
    16f0:	f800283a 	ret

000016f4 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
    16f4:	defff904 	addi	sp,sp,-28
    16f8:	dfc00615 	stw	ra,24(sp)
    16fc:	df000515 	stw	fp,20(sp)
    1700:	df000504 	addi	fp,sp,20
    1704:	e13ffd15 	stw	r4,-12(fp)
    1708:	e17ffe15 	stw	r5,-8(fp)
    170c:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
    1710:	e0bffd17 	ldw	r2,-12(fp)
    1714:	10bfff04 	addi	r2,r2,-4
    1718:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
    171c:	e13ffc04 	addi	r4,fp,-16
    1720:	00016cc0 	call	16cc <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    1724:	e0fffd17 	ldw	r3,-12(fp)
    1728:	00b7abb4 	movhi	r2,57006
    172c:	10afbbc4 	addi	r2,r2,-16657
    1730:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
    1734:	e0bffd17 	ldw	r2,-12(fp)
    1738:	10bfff04 	addi	r2,r2,-4
    173c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
    1740:	e0bffb17 	ldw	r2,-20(fp)
    1744:	1007883a 	mov	r3,r2
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1750:	e0bffd17 	ldw	r2,-12(fp)
    1754:	10bfff04 	addi	r2,r2,-4
    1758:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
    175c:	e0fffc17 	ldw	r3,-16(fp)
    1760:	e0bffd17 	ldw	r2,-12(fp)
    1764:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
    1768:	e0bffd17 	ldw	r2,-12(fp)
    176c:	10bff704 	addi	r2,r2,-36
    1770:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
    1774:	e0bffe17 	ldw	r2,-8(fp)
    1778:	1007883a 	mov	r3,r2
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	10bfff04 	addi	r2,r2,-4
    178c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
    1790:	e0fffd17 	ldw	r3,-12(fp)
    1794:	00800044 	movi	r2,1
    1798:	18800015 	stw	r2,0(r3)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
    179c:	e0bffd17 	ldw	r2,-12(fp)
    17a0:	10bff404 	addi	r2,r2,-48
    17a4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	1007883a 	mov	r3,r2
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
    17b8:	e0bffd17 	ldw	r2,-12(fp)
    17bc:	10bffb04 	addi	r2,r2,-20
    17c0:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
    17c4:	e0bffd17 	ldw	r2,-12(fp)
}
    17c8:	e037883a 	mov	sp,fp
    17cc:	dfc00117 	ldw	ra,4(sp)
    17d0:	df000017 	ldw	fp,0(sp)
    17d4:	dec00204 	addi	sp,sp,8
    17d8:	f800283a 	ret

000017dc <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
    17dc:	defffe04 	addi	sp,sp,-8
    17e0:	dfc00115 	stw	ra,4(sp)
    17e4:	df000015 	stw	fp,0(sp)
    17e8:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    17ec:	00018300 	call	1830 <prvSetupTimerInterrupt>
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
    17f0:	00800034 	movhi	r2,0
    17f4:	10803104 	addi	r2,r2,196
    17f8:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
    17fc:	0005883a 	mov	r2,zero
}
    1800:	e037883a 	mov	sp,fp
    1804:	dfc00117 	ldw	ra,4(sp)
    1808:	df000017 	ldw	fp,0(sp)
    180c:	dec00204 	addi	sp,sp,8
    1810:	f800283a 	ret

00001814 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1814:	deffff04 	addi	sp,sp,-4
    1818:	df000015 	stw	fp,0(sp)
    181c:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
    1820:	e037883a 	mov	sp,fp
    1824:	df000017 	ldw	fp,0(sp)
    1828:	dec00104 	addi	sp,sp,4
    182c:	f800283a 	ret

00001830 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1830:	defffe04 	addi	sp,sp,-8
    1834:	dfc00115 	stw	ra,4(sp)
    1838:	df000015 	stw	fp,0(sp)
    183c:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
    1840:	0009883a 	mov	r4,zero
    1844:	000b883a 	mov	r5,zero
    1848:	01800034 	movhi	r6,0
    184c:	31863204 	addi	r6,r6,6344
    1850:	00019140 	call	1914 <alt_irq_register>
    1854:	10bffa98 	cmpnei	r2,r2,-22
    1858:	1000021e 	bne	r2,zero,1864 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
    185c:	003da03a 	break	0
    1860:	00001006 	br	18a4 <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
    1864:	00c00134 	movhi	r3,4
    1868:	18cc1104 	addi	r3,r3,12356
    186c:	00800204 	movi	r2,8
    1870:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
    1874:	00c00134 	movhi	r3,4
    1878:	18cc1204 	addi	r3,r3,12360
    187c:	00a1a814 	movui	r2,34464
    1880:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
    1884:	00c00134 	movhi	r3,4
    1888:	18cc1304 	addi	r3,r3,12364
    188c:	00800044 	movi	r2,1
    1890:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
    1894:	00c00134 	movhi	r3,4
    1898:	18cc1104 	addi	r3,r3,12356
    189c:	008001c4 	movi	r2,7
    18a0:	18800035 	stwio	r2,0(r3)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18a4:	00c00134 	movhi	r3,4
    18a8:	18cc1004 	addi	r3,r3,12352
    18ac:	00bfff84 	movi	r2,-2
    18b0:	18800035 	stwio	r2,0(r3)
}
    18b4:	e037883a 	mov	sp,fp
    18b8:	dfc00117 	ldw	ra,4(sp)
    18bc:	df000017 	ldw	fp,0(sp)
    18c0:	dec00204 	addi	sp,sp,8
    18c4:	f800283a 	ret

000018c8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
    18c8:	defffc04 	addi	sp,sp,-16
    18cc:	dfc00315 	stw	ra,12(sp)
    18d0:	df000215 	stw	fp,8(sp)
    18d4:	df000204 	addi	fp,sp,8
    18d8:	e13ffe15 	stw	r4,-8(fp)
    18dc:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
    18e0:	00031dc0 	call	31dc <xTaskIncrementTick>
    18e4:	1005003a 	cmpeq	r2,r2,zero
    18e8:	1000011e 	bne	r2,zero,18f0 <vPortSysTickHandler+0x28>
	{
        vTaskSwitchContext();
    18ec:	00033b80 	call	33b8 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18f0:	00c00134 	movhi	r3,4
    18f4:	18cc1004 	addi	r3,r3,12352
    18f8:	00bfff84 	movi	r2,-2
    18fc:	18800035 	stwio	r2,0(r3)
}
    1900:	e037883a 	mov	sp,fp
    1904:	dfc00117 	ldw	ra,4(sp)
    1908:	df000017 	ldw	fp,0(sp)
    190c:	dec00204 	addi	sp,sp,8
    1910:	f800283a 	ret

00001914 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
    1914:	defff004 	addi	sp,sp,-64
    1918:	df000f15 	stw	fp,60(sp)
    191c:	df000f04 	addi	fp,sp,60
    1920:	e13ffc15 	stw	r4,-16(fp)
    1924:	e17ffd15 	stw	r5,-12(fp)
    1928:	e1bffe15 	stw	r6,-8(fp)
	int rc = -EINVAL;  
    192c:	00bffa84 	movi	r2,-22
    1930:	e0bffb15 	stw	r2,-20(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
    1934:	e0bffc17 	ldw	r2,-16(fp)
    1938:	10800828 	cmpgeui	r2,r2,32
    193c:	10005c1e 	bne	r2,zero,1ab0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1940:	0005303a 	rdctl	r2,status
    1944:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1948:	e0fff917 	ldw	r3,-28(fp)
    194c:	00bfff84 	movi	r2,-2
    1950:	1884703a 	and	r2,r3,r2
    1954:	1001703a 	wrctl	status,r2
  
  return context;
    1958:	e0bff917 	ldw	r2,-28(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all ();
    195c:	e0bffa15 	stw	r2,-24(fp)
	
		alt_irq[id].handler = handler;
    1960:	e0bffc17 	ldw	r2,-16(fp)
    1964:	00c20234 	movhi	r3,2056
    1968:	18c0a304 	addi	r3,r3,652
    196c:	100490fa 	slli	r2,r2,3
    1970:	10c7883a 	add	r3,r2,r3
    1974:	e0bffe17 	ldw	r2,-8(fp)
    1978:	18800015 	stw	r2,0(r3)
		alt_irq[id].context = context;
    197c:	e0bffc17 	ldw	r2,-16(fp)
    1980:	00c20234 	movhi	r3,2056
    1984:	18c0a304 	addi	r3,r3,652
    1988:	100490fa 	slli	r2,r2,3
    198c:	10c5883a 	add	r2,r2,r3
    1990:	10c00104 	addi	r3,r2,4
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	18800015 	stw	r2,0(r3)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    199c:	e0bffe17 	ldw	r2,-8(fp)
    19a0:	1005003a 	cmpeq	r2,r2,zero
    19a4:	1000201e 	bne	r2,zero,1a28 <alt_irq_register+0x114>
    19a8:	e0bffc17 	ldw	r2,-16(fp)
    19ac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19b0:	0005303a 	rdctl	r2,status
    19b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19b8:	e0fff617 	ldw	r3,-40(fp)
    19bc:	00bfff84 	movi	r2,-2
    19c0:	1884703a 	and	r2,r3,r2
    19c4:	1001703a 	wrctl	status,r2
  
  return context;
    19c8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    19cc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    19d0:	e0fff717 	ldw	r3,-36(fp)
    19d4:	00800044 	movi	r2,1
    19d8:	10c4983a 	sll	r2,r2,r3
    19dc:	1007883a 	mov	r3,r2
    19e0:	00820034 	movhi	r2,2048
    19e4:	108a4604 	addi	r2,r2,10520
    19e8:	10800017 	ldw	r2,0(r2)
    19ec:	1886b03a 	or	r3,r3,r2
    19f0:	00820034 	movhi	r2,2048
    19f4:	108a4604 	addi	r2,r2,10520
    19f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19fc:	00820034 	movhi	r2,2048
    1a00:	108a4604 	addi	r2,r2,10520
    1a04:	10800017 	ldw	r2,0(r2)
    1a08:	100170fa 	wrctl	ienable,r2
    1a0c:	e0bff817 	ldw	r2,-32(fp)
    1a10:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a14:	e0bff517 	ldw	r2,-44(fp)
    1a18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a1c:	0005883a 	mov	r2,zero
    1a20:	e0bfff15 	stw	r2,-4(fp)
    1a24:	00002006 	br	1aa8 <alt_irq_register+0x194>
    1a28:	e0bffc17 	ldw	r2,-16(fp)
    1a2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a30:	0005303a 	rdctl	r2,status
    1a34:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a38:	e0fff217 	ldw	r3,-56(fp)
    1a3c:	00bfff84 	movi	r2,-2
    1a40:	1884703a 	and	r2,r3,r2
    1a44:	1001703a 	wrctl	status,r2
  
  return context;
    1a48:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a4c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    1a50:	e0fff317 	ldw	r3,-52(fp)
    1a54:	00800044 	movi	r2,1
    1a58:	10c4983a 	sll	r2,r2,r3
    1a5c:	0084303a 	nor	r2,zero,r2
    1a60:	1007883a 	mov	r3,r2
    1a64:	00820034 	movhi	r2,2048
    1a68:	108a4604 	addi	r2,r2,10520
    1a6c:	10800017 	ldw	r2,0(r2)
    1a70:	1886703a 	and	r3,r3,r2
    1a74:	00820034 	movhi	r2,2048
    1a78:	108a4604 	addi	r2,r2,10520
    1a7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a80:	00820034 	movhi	r2,2048
    1a84:	108a4604 	addi	r2,r2,10520
    1a88:	10800017 	ldw	r2,0(r2)
    1a8c:	100170fa 	wrctl	ienable,r2
    1a90:	e0bff417 	ldw	r2,-48(fp)
    1a94:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a98:	e0bff117 	ldw	r2,-60(fp)
    1a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1aa0:	0005883a 	mov	r2,zero
    1aa4:	e0bfff15 	stw	r2,-4(fp)
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	e0bffb15 	stw	r2,-20(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
    1ab0:	e0bffb17 	ldw	r2,-20(fp)
}
    1ab4:	e037883a 	mov	sp,fp
    1ab8:	df000017 	ldw	fp,0(sp)
    1abc:	dec00104 	addi	sp,sp,4
    1ac0:	f800283a 	ret

00001ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1ac4:	defffb04 	addi	sp,sp,-20
    1ac8:	dfc00415 	stw	ra,16(sp)
    1acc:	df000315 	stw	fp,12(sp)
    1ad0:	df000304 	addi	fp,sp,12
    1ad4:	e13ffe15 	stw	r4,-8(fp)
    1ad8:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1adc:	e0bffe17 	ldw	r2,-8(fp)
    1ae0:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1ae4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ae8:	e0bffd17 	ldw	r2,-12(fp)
    1aec:	11000017 	ldw	r4,0(r2)
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10c00f17 	ldw	r3,60(r2)
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	10801017 	ldw	r2,64(r2)
    1b00:	1885383a 	mul	r2,r3,r2
    1b04:	2087883a 	add	r3,r4,r2
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10c00115 	stw	r3,4(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1b18:	e0bffd17 	ldw	r2,-12(fp)
    1b1c:	10c00017 	ldw	r3,0(r2)
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	10c00215 	stw	r3,8(r2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1b28:	e0bffd17 	ldw	r2,-12(fp)
    1b2c:	11000017 	ldw	r4,0(r2)
    1b30:	e0bffd17 	ldw	r2,-12(fp)
    1b34:	10800f17 	ldw	r2,60(r2)
    1b38:	10ffffc4 	addi	r3,r2,-1
    1b3c:	e0bffd17 	ldw	r2,-12(fp)
    1b40:	10801017 	ldw	r2,64(r2)
    1b44:	1885383a 	mul	r2,r3,r2
    1b48:	2087883a 	add	r3,r4,r2
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10c00315 	stw	r3,12(r2)
		pxQueue->xRxLock = queueUNLOCKED;
    1b54:	e0fffd17 	ldw	r3,-12(fp)
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	18801115 	stw	r2,68(r3)
		pxQueue->xTxLock = queueUNLOCKED;
    1b60:	e0fffd17 	ldw	r3,-12(fp)
    1b64:	00bfffc4 	movi	r2,-1
    1b68:	18801215 	stw	r2,72(r3)

		if( xNewQueue == pdFALSE )
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
    1b70:	1004c03a 	cmpne	r2,r2,zero
    1b74:	10000b1e 	bne	r2,zero,1ba4 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	10800417 	ldw	r2,16(r2)
    1b80:	1005003a 	cmpeq	r2,r2,zero
    1b84:	10000d1e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1b88:	e0bffd17 	ldw	r2,-12(fp)
    1b8c:	11000404 	addi	r4,r2,16
    1b90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1b94:	10800058 	cmpnei	r2,r2,1
    1b98:	1000081e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1b9c:	003b683a 	trap	0
    1ba0:	00000606 	br	1bbc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1ba4:	e0bffd17 	ldw	r2,-12(fp)
    1ba8:	11000404 	addi	r4,r2,16
    1bac:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	11000904 	addi	r4,r2,36
    1bb8:	00014040 	call	1404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1bbc:	00041680 	call	4168 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1bc0:	00800044 	movi	r2,1
}
    1bc4:	e037883a 	mov	sp,fp
    1bc8:	dfc00117 	ldw	ra,4(sp)
    1bcc:	df000017 	ldw	fp,0(sp)
    1bd0:	dec00204 	addi	sp,sp,8
    1bd4:	f800283a 	ret

00001bd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1bd8:	defff704 	addi	sp,sp,-36
    1bdc:	dfc00815 	stw	ra,32(sp)
    1be0:	df000715 	stw	fp,28(sp)
    1be4:	df000704 	addi	fp,sp,28
    1be8:	e13ffd15 	stw	r4,-12(fp)
    1bec:	e17ffe15 	stw	r5,-8(fp)
    1bf0:	e1bfff05 	stb	r6,-4(fp)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    1bf4:	e03ffa15 	stw	zero,-24(fp)
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    1bf8:	e0bffe17 	ldw	r2,-8(fp)
    1bfc:	1004c03a 	cmpne	r2,r2,zero
    1c00:	1000021e 	bne	r2,zero,1c0c <xQueueGenericCreate+0x34>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
    1c04:	e03ffb15 	stw	zero,-20(fp)
    1c08:	00000506 	br	1c20 <xQueueGenericCreate+0x48>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c0c:	e0fffd17 	ldw	r3,-12(fp)
    1c10:	e0bffe17 	ldw	r2,-8(fp)
    1c14:	1885383a 	mul	r2,r3,r2
    1c18:	10800044 	addi	r2,r2,1
    1c1c:	e0bffb15 	stw	r2,-20(fp)
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1c20:	e0bffb17 	ldw	r2,-20(fp)
    1c24:	11001304 	addi	r4,r2,76
    1c28:	0000fbc0 	call	fbc <pvPortMalloc>
    1c2c:	e0bff915 	stw	r2,-28(fp)

	if( pcAllocatedBuffer != NULL )
    1c30:	e0bff917 	ldw	r2,-28(fp)
    1c34:	1005003a 	cmpeq	r2,r2,zero
    1c38:	1000181e 	bne	r2,zero,1c9c <xQueueGenericCreate+0xc4>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
    1c3c:	e0bff917 	ldw	r2,-28(fp)
    1c40:	e0bffc15 	stw	r2,-16(fp)

		if( uxItemSize == ( UBaseType_t ) 0 )
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	1004c03a 	cmpne	r2,r2,zero
    1c4c:	1000041e 	bne	r2,zero,1c60 <xQueueGenericCreate+0x88>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1c50:	e0fffc17 	ldw	r3,-16(fp)
    1c54:	e0bffc17 	ldw	r2,-16(fp)
    1c58:	10c00015 	stw	r3,0(r2)
    1c5c:	00000406 	br	1c70 <xQueueGenericCreate+0x98>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
    1c60:	e0bff917 	ldw	r2,-28(fp)
    1c64:	10c01304 	addi	r3,r2,76
    1c68:	e0bffc17 	ldw	r2,-16(fp)
    1c6c:	10c00015 	stw	r3,0(r2)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    1c70:	e0fffc17 	ldw	r3,-16(fp)
    1c74:	e0bffd17 	ldw	r2,-12(fp)
    1c78:	18800f15 	stw	r2,60(r3)
		pxNewQueue->uxItemSize = uxItemSize;
    1c7c:	e0fffc17 	ldw	r3,-16(fp)
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	18801015 	stw	r2,64(r3)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1c88:	e13ffc17 	ldw	r4,-16(fp)
    1c8c:	01400044 	movi	r5,1
    1c90:	0001ac40 	call	1ac4 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    1c94:	e0bffc17 	ldw	r2,-16(fp)
    1c98:	e0bffa15 	stw	r2,-24(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    1c9c:	e0bffa17 	ldw	r2,-24(fp)
}
    1ca0:	e037883a 	mov	sp,fp
    1ca4:	dfc00117 	ldw	ra,4(sp)
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00204 	addi	sp,sp,8
    1cb0:	f800283a 	ret

00001cb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1cb4:	defffc04 	addi	sp,sp,-16
    1cb8:	dfc00315 	stw	ra,12(sp)
    1cbc:	df000215 	stw	fp,8(sp)
    1cc0:	df000204 	addi	fp,sp,8
    1cc4:	e13fff05 	stb	r4,-4(fp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1cc8:	01001304 	movi	r4,76
    1ccc:	0000fbc0 	call	fbc <pvPortMalloc>
    1cd0:	e0bffe15 	stw	r2,-8(fp)
		if( pxNewQueue != NULL )
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	1005003a 	cmpeq	r2,r2,zero
    1cdc:	1000201e 	bne	r2,zero,1d60 <xQueueCreateMutex+0xac>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1cf0:	e0bffe17 	ldw	r2,-8(fp)
    1cf4:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1d08:	e0fffe17 	ldw	r3,-8(fp)
    1d0c:	00800044 	movi	r2,1
    1d10:	18800f15 	stw	r2,60(r3)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
    1d1c:	e0fffe17 	ldw	r3,-8(fp)
    1d20:	00bfffc4 	movi	r2,-1
    1d24:	18801115 	stw	r2,68(r3)
			pxNewQueue->xTxLock = queueUNLOCKED;
    1d28:	e0fffe17 	ldw	r3,-8(fp)
    1d2c:	00bfffc4 	movi	r2,-1
    1d30:	18801215 	stw	r2,72(r3)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d34:	e0bffe17 	ldw	r2,-8(fp)
    1d38:	11000404 	addi	r4,r2,16
    1d3c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d40:	e0bffe17 	ldw	r2,-8(fp)
    1d44:	11000904 	addi	r4,r2,36
    1d48:	00014040 	call	1404 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1d4c:	e13ffe17 	ldw	r4,-8(fp)
    1d50:	000b883a 	mov	r5,zero
    1d54:	000d883a 	mov	r6,zero
    1d58:	000f883a 	mov	r7,zero
    1d5c:	0001f100 	call	1f10 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1d60:	e0bffe17 	ldw	r2,-8(fp)
	}
    1d64:	e037883a 	mov	sp,fp
    1d68:	dfc00117 	ldw	ra,4(sp)
    1d6c:	df000017 	ldw	fp,0(sp)
    1d70:	dec00204 	addi	sp,sp,8
    1d74:	f800283a 	ret

00001d78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    1d78:	defffa04 	addi	sp,sp,-24
    1d7c:	dfc00515 	stw	ra,20(sp)
    1d80:	df000415 	stw	fp,16(sp)
    1d84:	dc000315 	stw	r16,12(sp)
    1d88:	df000304 	addi	fp,sp,12
    1d8c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1d90:	e0bfff17 	ldw	r2,-4(fp)
    1d94:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	14000117 	ldw	r16,4(r2)
    1da0:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1da4:	8080111e 	bne	r16,r2,1dec <xQueueGiveMutexRecursive+0x74>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    1da8:	e0bffd17 	ldw	r2,-12(fp)
    1dac:	10800317 	ldw	r2,12(r2)
    1db0:	10ffffc4 	addi	r3,r2,-1
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	10800317 	ldw	r2,12(r2)
    1dc4:	1004c03a 	cmpne	r2,r2,zero
    1dc8:	1000051e 	bne	r2,zero,1de0 <xQueueGiveMutexRecursive+0x68>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1dcc:	e13ffd17 	ldw	r4,-12(fp)
    1dd0:	000b883a 	mov	r5,zero
    1dd4:	000d883a 	mov	r6,zero
    1dd8:	000f883a 	mov	r7,zero
    1ddc:	0001f100 	call	1f10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    1de0:	00800044 	movi	r2,1
    1de4:	e0bffe15 	stw	r2,-8(fp)
    1de8:	00000106 	br	1df0 <xQueueGiveMutexRecursive+0x78>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    1dec:	e03ffe15 	stw	zero,-8(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1df0:	e0bffe17 	ldw	r2,-8(fp)
	}
    1df4:	e037883a 	mov	sp,fp
    1df8:	dfc00217 	ldw	ra,8(sp)
    1dfc:	df000117 	ldw	fp,4(sp)
    1e00:	dc000017 	ldw	r16,0(sp)
    1e04:	dec00304 	addi	sp,sp,12
    1e08:	f800283a 	ret

00001e0c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1e0c:	defff904 	addi	sp,sp,-28
    1e10:	dfc00615 	stw	ra,24(sp)
    1e14:	df000515 	stw	fp,20(sp)
    1e18:	dc000415 	stw	r16,16(sp)
    1e1c:	df000404 	addi	fp,sp,16
    1e20:	e13ffe15 	stw	r4,-8(fp)
    1e24:	e17fff15 	stw	r5,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1e30:	e0bffc17 	ldw	r2,-16(fp)
    1e34:	14000117 	ldw	r16,4(r2)
    1e38:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1e3c:	8080081e 	bne	r16,r2,1e60 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    1e40:	e0bffc17 	ldw	r2,-16(fp)
    1e44:	10800317 	ldw	r2,12(r2)
    1e48:	10c00044 	addi	r3,r2,1
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
    1e54:	00800044 	movi	r2,1
    1e58:	e0bffd15 	stw	r2,-12(fp)
    1e5c:	00000e06 	br	1e98 <xQueueTakeMutexRecursive+0x8c>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    1e60:	e13ffc17 	ldw	r4,-16(fp)
    1e64:	000b883a 	mov	r5,zero
    1e68:	e1bfff17 	ldw	r6,-4(fp)
    1e6c:	000f883a 	mov	r7,zero
    1e70:	00022800 	call	2280 <xQueueGenericReceive>
    1e74:	e0bffd15 	stw	r2,-12(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	10800058 	cmpnei	r2,r2,1
    1e80:	1000051e 	bne	r2,zero,1e98 <xQueueTakeMutexRecursive+0x8c>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    1e84:	e0bffc17 	ldw	r2,-16(fp)
    1e88:	10800317 	ldw	r2,12(r2)
    1e8c:	10c00044 	addi	r3,r2,1
    1e90:	e0bffc17 	ldw	r2,-16(fp)
    1e94:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1e98:	e0bffd17 	ldw	r2,-12(fp)
	}
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	dfc00217 	ldw	ra,8(sp)
    1ea4:	df000117 	ldw	fp,4(sp)
    1ea8:	dc000017 	ldw	r16,0(sp)
    1eac:	dec00304 	addi	sp,sp,12
    1eb0:	f800283a 	ret

00001eb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    1eb4:	defffb04 	addi	sp,sp,-20
    1eb8:	dfc00415 	stw	ra,16(sp)
    1ebc:	df000315 	stw	fp,12(sp)
    1ec0:	df000304 	addi	fp,sp,12
    1ec4:	e13ffe15 	stw	r4,-8(fp)
    1ec8:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    1ecc:	e13ffe17 	ldw	r4,-8(fp)
    1ed0:	000b883a 	mov	r5,zero
    1ed4:	01800084 	movi	r6,2
    1ed8:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    1edc:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	1005003a 	cmpeq	r2,r2,zero
    1ee8:	1000031e 	bne	r2,zero,1ef8 <xQueueCreateCountingSemaphore+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    1eec:	e0fffd17 	ldw	r3,-12(fp)
    1ef0:	e0bfff17 	ldw	r2,-4(fp)
    1ef4:	18800e15 	stw	r2,56(r3)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
	}
    1efc:	e037883a 	mov	sp,fp
    1f00:	dfc00117 	ldw	ra,4(sp)
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00204 	addi	sp,sp,8
    1f0c:	f800283a 	ret

00001f10 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1f10:	defff404 	addi	sp,sp,-48
    1f14:	dfc00b15 	stw	ra,44(sp)
    1f18:	df000a15 	stw	fp,40(sp)
    1f1c:	df000a04 	addi	fp,sp,40
    1f20:	e13ffb15 	stw	r4,-20(fp)
    1f24:	e17ffc15 	stw	r5,-16(fp)
    1f28:	e1bffd15 	stw	r6,-12(fp)
    1f2c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1f30:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f34:	e0bffb17 	ldw	r2,-20(fp)
    1f38:	e0bff615 	stw	r2,-40(fp)
    1f3c:	00000006 	br	1f40 <xQueueGenericSend+0x30>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f40:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f44:	e0bff617 	ldw	r2,-40(fp)
    1f48:	10c00e17 	ldw	r3,56(r2)
    1f4c:	e0bff617 	ldw	r2,-40(fp)
    1f50:	10800f17 	ldw	r2,60(r2)
    1f54:	18800336 	bltu	r3,r2,1f64 <xQueueGenericSend+0x54>
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	10800098 	cmpnei	r2,r2,2
    1f60:	1000181e 	bne	r2,zero,1fc4 <xQueueGenericSend+0xb4>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f64:	e13ff617 	ldw	r4,-40(fp)
    1f68:	e17ffc17 	ldw	r5,-16(fp)
    1f6c:	e1bffe17 	ldw	r6,-8(fp)
    1f70:	000270c0 	call	270c <prvCopyDataToQueue>
    1f74:	e0bff715 	stw	r2,-36(fp)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f78:	e0bff617 	ldw	r2,-40(fp)
    1f7c:	10800917 	ldw	r2,36(r2)
    1f80:	1005003a 	cmpeq	r2,r2,zero
    1f84:	1000071e 	bne	r2,zero,1fa4 <xQueueGenericSend+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f88:	e0bff617 	ldw	r2,-40(fp)
    1f8c:	11000904 	addi	r4,r2,36
    1f90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1f94:	10800058 	cmpnei	r2,r2,1
    1f98:	1000061e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f9c:	003b683a 	trap	0
    1fa0:	00000406 	br	1fb4 <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1fa4:	e0bff717 	ldw	r2,-36(fp)
    1fa8:	1005003a 	cmpeq	r2,r2,zero
    1fac:	1000011e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1fb0:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1fb4:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    1fb8:	00800044 	movi	r2,1
    1fbc:	e0bfff15 	stw	r2,-4(fp)
    1fc0:	00003906 	br	20a8 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	1004c03a 	cmpne	r2,r2,zero
    1fcc:	1000031e 	bne	r2,zero,1fdc <xQueueGenericSend+0xcc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1fd0:	00041680 	call	4168 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1fd4:	e03fff15 	stw	zero,-4(fp)
    1fd8:	00003306 	br	20a8 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
    1fdc:	e0bff817 	ldw	r2,-32(fp)
    1fe0:	1004c03a 	cmpne	r2,r2,zero
    1fe4:	1000041e 	bne	r2,zero,1ff8 <xQueueGenericSend+0xe8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1fe8:	e13ff904 	addi	r4,fp,-28
    1fec:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ff0:	00800044 	movi	r2,1
    1ff4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ff8:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ffc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2000:	00041140 	call	4114 <vTaskEnterCritical>
    2004:	e0bff617 	ldw	r2,-40(fp)
    2008:	10801117 	ldw	r2,68(r2)
    200c:	10bfffd8 	cmpnei	r2,r2,-1
    2010:	1000021e 	bne	r2,zero,201c <xQueueGenericSend+0x10c>
    2014:	e0bff617 	ldw	r2,-40(fp)
    2018:	10001115 	stw	zero,68(r2)
    201c:	e0bff617 	ldw	r2,-40(fp)
    2020:	10801217 	ldw	r2,72(r2)
    2024:	10bfffd8 	cmpnei	r2,r2,-1
    2028:	1000021e 	bne	r2,zero,2034 <xQueueGenericSend+0x124>
    202c:	e0bff617 	ldw	r2,-40(fp)
    2030:	10001215 	stw	zero,72(r2)
    2034:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2038:	e13ff904 	addi	r4,fp,-28
    203c:	e17ffd04 	addi	r5,fp,-12
    2040:	000380c0 	call	380c <xTaskCheckForTimeOut>
    2044:	1004c03a 	cmpne	r2,r2,zero
    2048:	1000131e 	bne	r2,zero,2098 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    204c:	e13ff617 	ldw	r4,-40(fp)
    2050:	0002ac40 	call	2ac4 <prvIsQueueFull>
    2054:	1005003a 	cmpeq	r2,r2,zero
    2058:	10000b1e 	bne	r2,zero,2088 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    205c:	e0bff617 	ldw	r2,-40(fp)
    2060:	11000404 	addi	r4,r2,16
    2064:	e17ffd17 	ldw	r5,-12(fp)
    2068:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    206c:	e13ff617 	ldw	r4,-40(fp)
    2070:	000293c0 	call	293c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2074:	00030180 	call	3018 <xTaskResumeAll>
    2078:	1004c03a 	cmpne	r2,r2,zero
    207c:	103fb01e 	bne	r2,zero,1f40 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
    2080:	003b683a 	trap	0
    2084:	003fae06 	br	1f40 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2088:	e13ff617 	ldw	r4,-40(fp)
    208c:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2090:	00030180 	call	3018 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2094:	003faa06 	br	1f40 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2098:	e13ff617 	ldw	r4,-40(fp)
    209c:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    20a0:	00030180 	call	3018 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    20a4:	e03fff15 	stw	zero,-4(fp)
    20a8:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    20ac:	e037883a 	mov	sp,fp
    20b0:	dfc00117 	ldw	ra,4(sp)
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00204 	addi	sp,sp,8
    20bc:	f800283a 	ret

000020c0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    20c0:	defff704 	addi	sp,sp,-36
    20c4:	dfc00815 	stw	ra,32(sp)
    20c8:	df000715 	stw	fp,28(sp)
    20cc:	df000704 	addi	fp,sp,28
    20d0:	e13ffc15 	stw	r4,-16(fp)
    20d4:	e17ffd15 	stw	r5,-12(fp)
    20d8:	e1bffe15 	stw	r6,-8(fp)
    20dc:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    20e0:	e0bffc17 	ldw	r2,-16(fp)
    20e4:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20e8:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20ec:	e0bff917 	ldw	r2,-28(fp)
    20f0:	10c00e17 	ldw	r3,56(r2)
    20f4:	e0bff917 	ldw	r2,-28(fp)
    20f8:	10800f17 	ldw	r2,60(r2)
    20fc:	18800336 	bltu	r3,r2,210c <xQueueGenericSendFromISR+0x4c>
    2100:	e0bfff17 	ldw	r2,-4(fp)
    2104:	10800098 	cmpnei	r2,r2,2
    2108:	1000201e 	bne	r2,zero,218c <xQueueGenericSendFromISR+0xcc>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    210c:	e13ff917 	ldw	r4,-28(fp)
    2110:	e17ffd17 	ldw	r5,-12(fp)
    2114:	e1bfff17 	ldw	r6,-4(fp)
    2118:	000270c0 	call	270c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    211c:	e0bff917 	ldw	r2,-28(fp)
    2120:	10801217 	ldw	r2,72(r2)
    2124:	10bfffd8 	cmpnei	r2,r2,-1
    2128:	1000101e 	bne	r2,zero,216c <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    212c:	e0bff917 	ldw	r2,-28(fp)
    2130:	10800917 	ldw	r2,36(r2)
    2134:	1005003a 	cmpeq	r2,r2,zero
    2138:	1000111e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    213c:	e0bff917 	ldw	r2,-28(fp)
    2140:	11000904 	addi	r4,r2,36
    2144:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2148:	1005003a 	cmpeq	r2,r2,zero
    214c:	10000c1e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2150:	e0bffe17 	ldw	r2,-8(fp)
    2154:	1005003a 	cmpeq	r2,r2,zero
    2158:	1000091e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    215c:	e0fffe17 	ldw	r3,-8(fp)
    2160:	00800044 	movi	r2,1
    2164:	18800015 	stw	r2,0(r3)
    2168:	00000506 	br	2180 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    216c:	e0bff917 	ldw	r2,-28(fp)
    2170:	10801217 	ldw	r2,72(r2)
    2174:	10c00044 	addi	r3,r2,1
    2178:	e0bff917 	ldw	r2,-28(fp)
    217c:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2180:	00800044 	movi	r2,1
    2184:	e0bffb15 	stw	r2,-20(fp)
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2188:	00000106 	br	2190 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    218c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2190:	e0bffb17 	ldw	r2,-20(fp)
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    21a8:	defff904 	addi	sp,sp,-28
    21ac:	dfc00615 	stw	ra,24(sp)
    21b0:	df000515 	stw	fp,20(sp)
    21b4:	df000504 	addi	fp,sp,20
    21b8:	e13ffe15 	stw	r4,-8(fp)
    21bc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    21c0:	e0bffe17 	ldw	r2,-8(fp)
    21c4:	e0bffb15 	stw	r2,-20(fp)
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21c8:	e03ffc15 	stw	zero,-16(fp)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    21cc:	e0bffb17 	ldw	r2,-20(fp)
    21d0:	10c00e17 	ldw	r3,56(r2)
    21d4:	e0bffb17 	ldw	r2,-20(fp)
    21d8:	10800f17 	ldw	r2,60(r2)
    21dc:	1880212e 	bgeu	r3,r2,2264 <xQueueGiveFromISR+0xbc>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
    21e0:	e0bffb17 	ldw	r2,-20(fp)
    21e4:	10800e17 	ldw	r2,56(r2)
    21e8:	10c00044 	addi	r3,r2,1
    21ec:	e0bffb17 	ldw	r2,-20(fp)
    21f0:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    21f4:	e0bffb17 	ldw	r2,-20(fp)
    21f8:	10801217 	ldw	r2,72(r2)
    21fc:	10bfffd8 	cmpnei	r2,r2,-1
    2200:	1000101e 	bne	r2,zero,2244 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2204:	e0bffb17 	ldw	r2,-20(fp)
    2208:	10800917 	ldw	r2,36(r2)
    220c:	1005003a 	cmpeq	r2,r2,zero
    2210:	1000111e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2214:	e0bffb17 	ldw	r2,-20(fp)
    2218:	11000904 	addi	r4,r2,36
    221c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2220:	1005003a 	cmpeq	r2,r2,zero
    2224:	10000c1e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2228:	e0bfff17 	ldw	r2,-4(fp)
    222c:	1005003a 	cmpeq	r2,r2,zero
    2230:	1000091e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2234:	e0ffff17 	ldw	r3,-4(fp)
    2238:	00800044 	movi	r2,1
    223c:	18800015 	stw	r2,0(r3)
    2240:	00000506 	br	2258 <xQueueGiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2244:	e0bffb17 	ldw	r2,-20(fp)
    2248:	10801217 	ldw	r2,72(r2)
    224c:	10c00044 	addi	r3,r2,1
    2250:	e0bffb17 	ldw	r2,-20(fp)
    2254:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2258:	00800044 	movi	r2,1
    225c:	e0bffd15 	stw	r2,-12(fp)
    2260:	00000106 	br	2268 <xQueueGiveFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2264:	e03ffd15 	stw	zero,-12(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2268:	e0bffd17 	ldw	r2,-12(fp)
}
    226c:	e037883a 	mov	sp,fp
    2270:	dfc00117 	ldw	ra,4(sp)
    2274:	df000017 	ldw	fp,0(sp)
    2278:	dec00204 	addi	sp,sp,8
    227c:	f800283a 	ret

00002280 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2280:	defff404 	addi	sp,sp,-48
    2284:	dfc00b15 	stw	ra,44(sp)
    2288:	df000a15 	stw	fp,40(sp)
    228c:	df000a04 	addi	fp,sp,40
    2290:	e13ffb15 	stw	r4,-20(fp)
    2294:	e17ffc15 	stw	r5,-16(fp)
    2298:	e1bffd15 	stw	r6,-12(fp)
    229c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE;
    22a0:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    22a4:	e0bffb17 	ldw	r2,-20(fp)
    22a8:	e0bff615 	stw	r2,-40(fp)
    22ac:	00000006 	br	22b0 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    22b0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    22b4:	e0bff617 	ldw	r2,-40(fp)
    22b8:	10800e17 	ldw	r2,56(r2)
    22bc:	1005003a 	cmpeq	r2,r2,zero
    22c0:	1000321e 	bne	r2,zero,238c <xQueueGenericReceive+0x10c>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    22c4:	e0bff617 	ldw	r2,-40(fp)
    22c8:	10800317 	ldw	r2,12(r2)
    22cc:	e0bff715 	stw	r2,-36(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    22d0:	e13ff617 	ldw	r4,-40(fp)
    22d4:	e17ffc17 	ldw	r5,-16(fp)
    22d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	1004c03a 	cmpne	r2,r2,zero
    22e4:	1000181e 	bne	r2,zero,2348 <xQueueGenericReceive+0xc8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    22e8:	e0bff617 	ldw	r2,-40(fp)
    22ec:	10800e17 	ldw	r2,56(r2)
    22f0:	10ffffc4 	addi	r3,r2,-1
    22f4:	e0bff617 	ldw	r2,-40(fp)
    22f8:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    22fc:	e0bff617 	ldw	r2,-40(fp)
    2300:	10800017 	ldw	r2,0(r2)
    2304:	1004c03a 	cmpne	r2,r2,zero
    2308:	1000041e 	bne	r2,zero,231c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    230c:	00042140 	call	4214 <pvTaskIncrementMutexHeldCount>
    2310:	1007883a 	mov	r3,r2
    2314:	e0bff617 	ldw	r2,-40(fp)
    2318:	10c00115 	stw	r3,4(r2)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    231c:	e0bff617 	ldw	r2,-40(fp)
    2320:	10800417 	ldw	r2,16(r2)
    2324:	1005003a 	cmpeq	r2,r2,zero
    2328:	1000141e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    232c:	e0bff617 	ldw	r2,-40(fp)
    2330:	11000404 	addi	r4,r2,16
    2334:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2338:	10800058 	cmpnei	r2,r2,1
    233c:	10000f1e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2340:	003b683a 	trap	0
    2344:	00000d06 	br	237c <xQueueGenericReceive+0xfc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2348:	e0fff617 	ldw	r3,-40(fp)
    234c:	e0bff717 	ldw	r2,-36(fp)
    2350:	18800315 	stw	r2,12(r3)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2354:	e0bff617 	ldw	r2,-40(fp)
    2358:	10800917 	ldw	r2,36(r2)
    235c:	1005003a 	cmpeq	r2,r2,zero
    2360:	1000061e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2364:	e0bff617 	ldw	r2,-40(fp)
    2368:	11000904 	addi	r4,r2,36
    236c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2370:	1005003a 	cmpeq	r2,r2,zero
    2374:	1000011e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2378:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    237c:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    2380:	00800044 	movi	r2,1
    2384:	e0bfff15 	stw	r2,-4(fp)
    2388:	00004206 	br	2494 <xQueueGenericReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    238c:	e0bffd17 	ldw	r2,-12(fp)
    2390:	1004c03a 	cmpne	r2,r2,zero
    2394:	1000031e 	bne	r2,zero,23a4 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2398:	00041680 	call	4168 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    239c:	e03fff15 	stw	zero,-4(fp)
    23a0:	00003c06 	br	2494 <xQueueGenericReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
    23a4:	e0bff817 	ldw	r2,-32(fp)
    23a8:	1004c03a 	cmpne	r2,r2,zero
    23ac:	1000041e 	bne	r2,zero,23c0 <xQueueGenericReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23b0:	e13ff904 	addi	r4,fp,-28
    23b4:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    23b8:	00800044 	movi	r2,1
    23bc:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    23c0:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23c4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23c8:	00041140 	call	4114 <vTaskEnterCritical>
    23cc:	e0bff617 	ldw	r2,-40(fp)
    23d0:	10801117 	ldw	r2,68(r2)
    23d4:	10bfffd8 	cmpnei	r2,r2,-1
    23d8:	1000021e 	bne	r2,zero,23e4 <xQueueGenericReceive+0x164>
    23dc:	e0bff617 	ldw	r2,-40(fp)
    23e0:	10001115 	stw	zero,68(r2)
    23e4:	e0bff617 	ldw	r2,-40(fp)
    23e8:	10801217 	ldw	r2,72(r2)
    23ec:	10bfffd8 	cmpnei	r2,r2,-1
    23f0:	1000021e 	bne	r2,zero,23fc <xQueueGenericReceive+0x17c>
    23f4:	e0bff617 	ldw	r2,-40(fp)
    23f8:	10001215 	stw	zero,72(r2)
    23fc:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2400:	e13ff904 	addi	r4,fp,-28
    2404:	e17ffd04 	addi	r5,fp,-12
    2408:	000380c0 	call	380c <xTaskCheckForTimeOut>
    240c:	1004c03a 	cmpne	r2,r2,zero
    2410:	10001c1e 	bne	r2,zero,2484 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2414:	e13ff617 	ldw	r4,-40(fp)
    2418:	0002a2c0 	call	2a2c <prvIsQueueEmpty>
    241c:	1005003a 	cmpeq	r2,r2,zero
    2420:	1000141e 	bne	r2,zero,2474 <xQueueGenericReceive+0x1f4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2424:	e0bff617 	ldw	r2,-40(fp)
    2428:	10800017 	ldw	r2,0(r2)
    242c:	1004c03a 	cmpne	r2,r2,zero
    2430:	1000051e 	bne	r2,zero,2448 <xQueueGenericReceive+0x1c8>
					{
						taskENTER_CRITICAL();
    2434:	00041140 	call	4114 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2438:	e0bff617 	ldw	r2,-40(fp)
    243c:	11000117 	ldw	r4,4(r2)
    2440:	0003ee80 	call	3ee8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2444:	00041680 	call	4168 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2448:	e0bff617 	ldw	r2,-40(fp)
    244c:	11000904 	addi	r4,r2,36
    2450:	e17ffd17 	ldw	r5,-12(fp)
    2454:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2458:	e13ff617 	ldw	r4,-40(fp)
    245c:	000293c0 	call	293c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2460:	00030180 	call	3018 <xTaskResumeAll>
    2464:	1004c03a 	cmpne	r2,r2,zero
    2468:	103f911e 	bne	r2,zero,22b0 <xQueueGenericReceive+0x30>
				{
					portYIELD_WITHIN_API();
    246c:	003b683a 	trap	0
    2470:	003f8f06 	br	22b0 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2474:	e13ff617 	ldw	r4,-40(fp)
    2478:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    247c:	00030180 	call	3018 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2480:	003f8b06 	br	22b0 <xQueueGenericReceive+0x30>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2484:	e13ff617 	ldw	r4,-40(fp)
    2488:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    248c:	00030180 	call	3018 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2490:	e03fff15 	stw	zero,-4(fp)
    2494:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    24ac:	defff804 	addi	sp,sp,-32
    24b0:	dfc00715 	stw	ra,28(sp)
    24b4:	df000615 	stw	fp,24(sp)
    24b8:	df000604 	addi	fp,sp,24
    24bc:	e13ffd15 	stw	r4,-12(fp)
    24c0:	e17ffe15 	stw	r5,-8(fp)
    24c4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24d0:	e03ffb15 	stw	zero,-20(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    24d4:	e0bffa17 	ldw	r2,-24(fp)
    24d8:	10800e17 	ldw	r2,56(r2)
    24dc:	1005003a 	cmpeq	r2,r2,zero
    24e0:	1000241e 	bne	r2,zero,2574 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24e4:	e13ffa17 	ldw	r4,-24(fp)
    24e8:	e17ffe17 	ldw	r5,-8(fp)
    24ec:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    24f0:	e0bffa17 	ldw	r2,-24(fp)
    24f4:	10800e17 	ldw	r2,56(r2)
    24f8:	10ffffc4 	addi	r3,r2,-1
    24fc:	e0bffa17 	ldw	r2,-24(fp)
    2500:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2504:	e0bffa17 	ldw	r2,-24(fp)
    2508:	10801117 	ldw	r2,68(r2)
    250c:	10bfffd8 	cmpnei	r2,r2,-1
    2510:	1000101e 	bne	r2,zero,2554 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2514:	e0bffa17 	ldw	r2,-24(fp)
    2518:	10800417 	ldw	r2,16(r2)
    251c:	1005003a 	cmpeq	r2,r2,zero
    2520:	1000111e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2524:	e0bffa17 	ldw	r2,-24(fp)
    2528:	11000404 	addi	r4,r2,16
    252c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2530:	1005003a 	cmpeq	r2,r2,zero
    2534:	10000c1e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2538:	e0bfff17 	ldw	r2,-4(fp)
    253c:	1005003a 	cmpeq	r2,r2,zero
    2540:	1000091e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2544:	e0ffff17 	ldw	r3,-4(fp)
    2548:	00800044 	movi	r2,1
    254c:	18800015 	stw	r2,0(r3)
    2550:	00000506 	br	2568 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	10801117 	ldw	r2,68(r2)
    255c:	10c00044 	addi	r3,r2,1
    2560:	e0bffa17 	ldw	r2,-24(fp)
    2564:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
    2568:	00800044 	movi	r2,1
    256c:	e0bffc15 	stw	r2,-16(fp)
    2570:	00000106 	br	2578 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
    2574:	e03ffc15 	stw	zero,-16(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2578:	e0bffc17 	ldw	r2,-16(fp)
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2590:	defff804 	addi	sp,sp,-32
    2594:	dfc00715 	stw	ra,28(sp)
    2598:	df000615 	stw	fp,24(sp)
    259c:	df000604 	addi	fp,sp,24
    25a0:	e13ffe15 	stw	r4,-8(fp)
    25a4:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    25b0:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    25b4:	e0bffa17 	ldw	r2,-24(fp)
    25b8:	10800e17 	ldw	r2,56(r2)
    25bc:	1005003a 	cmpeq	r2,r2,zero
    25c0:	10000c1e 	bne	r2,zero,25f4 <xQueuePeekFromISR+0x64>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    25c4:	e0bffa17 	ldw	r2,-24(fp)
    25c8:	10800317 	ldw	r2,12(r2)
    25cc:	e0bffb15 	stw	r2,-20(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    25d0:	e13ffa17 	ldw	r4,-24(fp)
    25d4:	e17fff17 	ldw	r5,-4(fp)
    25d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    25dc:	e0fffa17 	ldw	r3,-24(fp)
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	18800315 	stw	r2,12(r3)

			xReturn = pdPASS;
    25e8:	00800044 	movi	r2,1
    25ec:	e0bffd15 	stw	r2,-12(fp)
    25f0:	00000106 	br	25f8 <xQueuePeekFromISR+0x68>
		}
		else
		{
			xReturn = pdFAIL;
    25f4:	e03ffd15 	stw	zero,-12(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    25f8:	e0bffd17 	ldw	r2,-12(fp)
}
    25fc:	e037883a 	mov	sp,fp
    2600:	dfc00117 	ldw	ra,4(sp)
    2604:	df000017 	ldw	fp,0(sp)
    2608:	dec00204 	addi	sp,sp,8
    260c:	f800283a 	ret

00002610 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2610:	defffc04 	addi	sp,sp,-16
    2614:	dfc00315 	stw	ra,12(sp)
    2618:	df000215 	stw	fp,8(sp)
    261c:	df000204 	addi	fp,sp,8
    2620:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2624:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2628:	e0bfff17 	ldw	r2,-4(fp)
    262c:	10800e17 	ldw	r2,56(r2)
    2630:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2634:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    2638:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    263c:	e037883a 	mov	sp,fp
    2640:	dfc00117 	ldw	ra,4(sp)
    2644:	df000017 	ldw	fp,0(sp)
    2648:	dec00204 	addi	sp,sp,8
    264c:	f800283a 	ret

00002650 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2650:	defffb04 	addi	sp,sp,-20
    2654:	dfc00415 	stw	ra,16(sp)
    2658:	df000315 	stw	fp,12(sp)
    265c:	df000304 	addi	fp,sp,12
    2660:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2664:	e0bfff17 	ldw	r2,-4(fp)
    2668:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    266c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	10c00f17 	ldw	r3,60(r2)
    2678:	e0bffd17 	ldw	r2,-12(fp)
    267c:	10800e17 	ldw	r2,56(r2)
    2680:	1885c83a 	sub	r2,r3,r2
    2684:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2688:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    268c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2690:	e037883a 	mov	sp,fp
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret

000026a4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    26a4:	defffd04 	addi	sp,sp,-12
    26a8:	df000215 	stw	fp,8(sp)
    26ac:	df000204 	addi	fp,sp,8
    26b0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    26b4:	e0bfff17 	ldw	r2,-4(fp)
    26b8:	10800e17 	ldw	r2,56(r2)
    26bc:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
    26c0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    26c4:	e037883a 	mov	sp,fp
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    26d4:	defffc04 	addi	sp,sp,-16
    26d8:	dfc00315 	stw	ra,12(sp)
    26dc:	df000215 	stw	fp,8(sp)
    26e0:	df000204 	addi	fp,sp,8
    26e4:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26e8:	e0bfff17 	ldw	r2,-4(fp)
    26ec:	e0bffe15 	stw	r2,-8(fp)
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    26f0:	e13ffe17 	ldw	r4,-8(fp)
    26f4:	00011500 	call	1150 <vPortFree>
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    270c:	defffa04 	addi	sp,sp,-24
    2710:	dfc00515 	stw	ra,20(sp)
    2714:	df000415 	stw	fp,16(sp)
    2718:	df000404 	addi	fp,sp,16
    271c:	e13ffd15 	stw	r4,-12(fp)
    2720:	e17ffe15 	stw	r5,-8(fp)
    2724:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
    2728:	e03ffc15 	stw	zero,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	10801017 	ldw	r2,64(r2)
    2734:	1004c03a 	cmpne	r2,r2,zero
    2738:	10000b1e 	bne	r2,zero,2768 <prvCopyDataToQueue+0x5c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    273c:	e0bffd17 	ldw	r2,-12(fp)
    2740:	10800017 	ldw	r2,0(r2)
    2744:	1004c03a 	cmpne	r2,r2,zero
    2748:	10004a1e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	11000117 	ldw	r4,4(r2)
    2754:	00040180 	call	4018 <xTaskPriorityDisinherit>
    2758:	e0bffc15 	stw	r2,-16(fp)
				pxQueue->pxMutexHolder = NULL;
    275c:	e0bffd17 	ldw	r2,-12(fp)
    2760:	10000115 	stw	zero,4(r2)
    2764:	00004306 	br	2874 <prvCopyDataToQueue+0x168>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2768:	e0bfff17 	ldw	r2,-4(fp)
    276c:	1004c03a 	cmpne	r2,r2,zero
    2770:	1000191e 	bne	r2,zero,27d8 <prvCopyDataToQueue+0xcc>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00217 	ldw	r3,8(r2)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	11801017 	ldw	r6,64(r2)
    2784:	e0bffe17 	ldw	r2,-8(fp)
    2788:	1809883a 	mov	r4,r3
    278c:	100b883a 	mov	r5,r2
    2790:	00077880 	call	7788 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2794:	e0bffd17 	ldw	r2,-12(fp)
    2798:	10c00217 	ldw	r3,8(r2)
    279c:	e0bffd17 	ldw	r2,-12(fp)
    27a0:	10801017 	ldw	r2,64(r2)
    27a4:	1887883a 	add	r3,r3,r2
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10c00217 	ldw	r3,8(r2)
    27b8:	e0bffd17 	ldw	r2,-12(fp)
    27bc:	10800117 	ldw	r2,4(r2)
    27c0:	18802c36 	bltu	r3,r2,2874 <prvCopyDataToQueue+0x168>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    27c4:	e0bffd17 	ldw	r2,-12(fp)
    27c8:	10c00017 	ldw	r3,0(r2)
    27cc:	e0bffd17 	ldw	r2,-12(fp)
    27d0:	10c00215 	stw	r3,8(r2)
    27d4:	00002706 	br	2874 <prvCopyDataToQueue+0x168>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	10c00317 	ldw	r3,12(r2)
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	11801017 	ldw	r6,64(r2)
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1809883a 	mov	r4,r3
    27f0:	100b883a 	mov	r5,r2
    27f4:	00077880 	call	7788 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    27f8:	e0bffd17 	ldw	r2,-12(fp)
    27fc:	10c00317 	ldw	r3,12(r2)
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10801017 	ldw	r2,64(r2)
    2808:	1887c83a 	sub	r3,r3,r2
    280c:	e0bffd17 	ldw	r2,-12(fp)
    2810:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2814:	e0bffd17 	ldw	r2,-12(fp)
    2818:	10c00317 	ldw	r3,12(r2)
    281c:	e0bffd17 	ldw	r2,-12(fp)
    2820:	10800017 	ldw	r2,0(r2)
    2824:	1880072e 	bgeu	r3,r2,2844 <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	10c00117 	ldw	r3,4(r2)
    2830:	e0bffd17 	ldw	r2,-12(fp)
    2834:	10801017 	ldw	r2,64(r2)
    2838:	1887c83a 	sub	r3,r3,r2
    283c:	e0bffd17 	ldw	r2,-12(fp)
    2840:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	10800098 	cmpnei	r2,r2,2
    284c:	1000091e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	10800e17 	ldw	r2,56(r2)
    2858:	1005003a 	cmpeq	r2,r2,zero
    285c:	1000051e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2860:	e0bffd17 	ldw	r2,-12(fp)
    2864:	10800e17 	ldw	r2,56(r2)
    2868:	10ffffc4 	addi	r3,r2,-1
    286c:	e0bffd17 	ldw	r2,-12(fp)
    2870:	10c00e15 	stw	r3,56(r2)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	10800e17 	ldw	r2,56(r2)
    287c:	10c00044 	addi	r3,r2,1
    2880:	e0bffd17 	ldw	r2,-12(fp)
    2884:	10c00e15 	stw	r3,56(r2)

	return xReturn;
    2888:	e0bffc17 	ldw	r2,-16(fp)
}
    288c:	e037883a 	mov	sp,fp
    2890:	dfc00117 	ldw	ra,4(sp)
    2894:	df000017 	ldw	fp,0(sp)
    2898:	dec00204 	addi	sp,sp,8
    289c:	f800283a 	ret

000028a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    28a0:	defffc04 	addi	sp,sp,-16
    28a4:	dfc00315 	stw	ra,12(sp)
    28a8:	df000215 	stw	fp,8(sp)
    28ac:	df000204 	addi	fp,sp,8
    28b0:	e13ffe15 	stw	r4,-8(fp)
    28b4:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    28b8:	e0bffe17 	ldw	r2,-8(fp)
    28bc:	10801017 	ldw	r2,64(r2)
    28c0:	1005003a 	cmpeq	r2,r2,zero
    28c4:	1000181e 	bne	r2,zero,2928 <prvCopyDataFromQueue+0x88>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    28c8:	e0bffe17 	ldw	r2,-8(fp)
    28cc:	10c00317 	ldw	r3,12(r2)
    28d0:	e0bffe17 	ldw	r2,-8(fp)
    28d4:	10801017 	ldw	r2,64(r2)
    28d8:	1887883a 	add	r3,r3,r2
    28dc:	e0bffe17 	ldw	r2,-8(fp)
    28e0:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	10c00317 	ldw	r3,12(r2)
    28ec:	e0bffe17 	ldw	r2,-8(fp)
    28f0:	10800117 	ldw	r2,4(r2)
    28f4:	18800436 	bltu	r3,r2,2908 <prvCopyDataFromQueue+0x68>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	10c00017 	ldw	r3,0(r2)
    2900:	e0bffe17 	ldw	r2,-8(fp)
    2904:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2908:	e0bffe17 	ldw	r2,-8(fp)
    290c:	10c00317 	ldw	r3,12(r2)
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	11801017 	ldw	r6,64(r2)
    2918:	e0bfff17 	ldw	r2,-4(fp)
    291c:	1009883a 	mov	r4,r2
    2920:	180b883a 	mov	r5,r3
    2924:	00077880 	call	7788 <memcpy>
	}
}
    2928:	e037883a 	mov	sp,fp
    292c:	dfc00117 	ldw	ra,4(sp)
    2930:	df000017 	ldw	fp,0(sp)
    2934:	dec00204 	addi	sp,sp,8
    2938:	f800283a 	ret

0000293c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    293c:	defffd04 	addi	sp,sp,-12
    2940:	dfc00215 	stw	ra,8(sp)
    2944:	df000115 	stw	fp,4(sp)
    2948:	df000104 	addi	fp,sp,4
    294c:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2950:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2954:	00000f06 	br	2994 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2958:	e0bfff17 	ldw	r2,-4(fp)
    295c:	10800917 	ldw	r2,36(r2)
    2960:	1005003a 	cmpeq	r2,r2,zero
    2964:	10000f1e 	bne	r2,zero,29a4 <prvUnlockQueue+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2968:	e0bfff17 	ldw	r2,-4(fp)
    296c:	11000904 	addi	r4,r2,36
    2970:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2974:	1005003a 	cmpeq	r2,r2,zero
    2978:	1000011e 	bne	r2,zero,2980 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    297c:	00038d00 	call	38d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	10801217 	ldw	r2,72(r2)
    2988:	10ffffc4 	addi	r3,r2,-1
    298c:	e0bfff17 	ldw	r2,-4(fp)
    2990:	10c01215 	stw	r3,72(r2)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2994:	e0bfff17 	ldw	r2,-4(fp)
    2998:	10801217 	ldw	r2,72(r2)
    299c:	10800048 	cmpgei	r2,r2,1
    29a0:	103fed1e 	bne	r2,zero,2958 <prvUnlockQueue+0x1c>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    29a4:	e0ffff17 	ldw	r3,-4(fp)
    29a8:	00bfffc4 	movi	r2,-1
    29ac:	18801215 	stw	r2,72(r3)
	}
	taskEXIT_CRITICAL();
    29b0:	00041680 	call	4168 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    29b4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29b8:	00000f06 	br	29f8 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    29bc:	e0bfff17 	ldw	r2,-4(fp)
    29c0:	10800417 	ldw	r2,16(r2)
    29c4:	1005003a 	cmpeq	r2,r2,zero
    29c8:	10000f1e 	bne	r2,zero,2a08 <prvUnlockQueue+0xcc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	11000404 	addi	r4,r2,16
    29d4:	000361c0 	call	361c <xTaskRemoveFromEventList>
    29d8:	1005003a 	cmpeq	r2,r2,zero
    29dc:	1000011e 	bne	r2,zero,29e4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    29e0:	00038d00 	call	38d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	10801117 	ldw	r2,68(r2)
    29ec:	10ffffc4 	addi	r3,r2,-1
    29f0:	e0bfff17 	ldw	r2,-4(fp)
    29f4:	10c01115 	stw	r3,68(r2)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	10801117 	ldw	r2,68(r2)
    2a00:	10800048 	cmpgei	r2,r2,1
    2a04:	103fed1e 	bne	r2,zero,29bc <prvUnlockQueue+0x80>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2a08:	e0ffff17 	ldw	r3,-4(fp)
    2a0c:	00bfffc4 	movi	r2,-1
    2a10:	18801115 	stw	r2,68(r3)
	}
	taskEXIT_CRITICAL();
    2a14:	00041680 	call	4168 <vTaskExitCritical>
}
    2a18:	e037883a 	mov	sp,fp
    2a1c:	dfc00117 	ldw	ra,4(sp)
    2a20:	df000017 	ldw	fp,0(sp)
    2a24:	dec00204 	addi	sp,sp,8
    2a28:	f800283a 	ret

00002a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2a2c:	defffc04 	addi	sp,sp,-16
    2a30:	dfc00315 	stw	ra,12(sp)
    2a34:	df000215 	stw	fp,8(sp)
    2a38:	df000204 	addi	fp,sp,8
    2a3c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a40:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2a44:	e0bfff17 	ldw	r2,-4(fp)
    2a48:	10800e17 	ldw	r2,56(r2)
    2a4c:	1004c03a 	cmpne	r2,r2,zero
    2a50:	1000031e 	bne	r2,zero,2a60 <prvIsQueueEmpty+0x34>
		{
			xReturn = pdTRUE;
    2a54:	00800044 	movi	r2,1
    2a58:	e0bffe15 	stw	r2,-8(fp)
    2a5c:	00000106 	br	2a64 <prvIsQueueEmpty+0x38>
		}
		else
		{
			xReturn = pdFALSE;
    2a60:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2a64:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2a68:	e0bffe17 	ldw	r2,-8(fp)
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	dfc00117 	ldw	ra,4(sp)
    2a74:	df000017 	ldw	fp,0(sp)
    2a78:	dec00204 	addi	sp,sp,8
    2a7c:	f800283a 	ret

00002a80 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2a80:	defffd04 	addi	sp,sp,-12
    2a84:	df000215 	stw	fp,8(sp)
    2a88:	df000204 	addi	fp,sp,8
    2a8c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2a90:	e0bfff17 	ldw	r2,-4(fp)
    2a94:	10800e17 	ldw	r2,56(r2)
    2a98:	1004c03a 	cmpne	r2,r2,zero
    2a9c:	1000031e 	bne	r2,zero,2aac <xQueueIsQueueEmptyFromISR+0x2c>
	{
		xReturn = pdTRUE;
    2aa0:	00800044 	movi	r2,1
    2aa4:	e0bffe15 	stw	r2,-8(fp)
    2aa8:	00000106 	br	2ab0 <xQueueIsQueueEmptyFromISR+0x30>
	}
	else
	{
		xReturn = pdFALSE;
    2aac:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2ab0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ab4:	e037883a 	mov	sp,fp
    2ab8:	df000017 	ldw	fp,0(sp)
    2abc:	dec00104 	addi	sp,sp,4
    2ac0:	f800283a 	ret

00002ac4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2ac4:	defffc04 	addi	sp,sp,-16
    2ac8:	dfc00315 	stw	ra,12(sp)
    2acc:	df000215 	stw	fp,8(sp)
    2ad0:	df000204 	addi	fp,sp,8
    2ad4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ad8:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2adc:	e0bfff17 	ldw	r2,-4(fp)
    2ae0:	10c00e17 	ldw	r3,56(r2)
    2ae4:	e0bfff17 	ldw	r2,-4(fp)
    2ae8:	10800f17 	ldw	r2,60(r2)
    2aec:	1880031e 	bne	r3,r2,2afc <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
    2af0:	00800044 	movi	r2,1
    2af4:	e0bffe15 	stw	r2,-8(fp)
    2af8:	00000106 	br	2b00 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
    2afc:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2b00:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2b04:	e0bffe17 	ldw	r2,-8(fp)
}
    2b08:	e037883a 	mov	sp,fp
    2b0c:	dfc00117 	ldw	ra,4(sp)
    2b10:	df000017 	ldw	fp,0(sp)
    2b14:	dec00204 	addi	sp,sp,8
    2b18:	f800283a 	ret

00002b1c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2b1c:	defffd04 	addi	sp,sp,-12
    2b20:	df000215 	stw	fp,8(sp)
    2b24:	df000204 	addi	fp,sp,8
    2b28:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2b2c:	e0bfff17 	ldw	r2,-4(fp)
    2b30:	10c00e17 	ldw	r3,56(r2)
    2b34:	e0bfff17 	ldw	r2,-4(fp)
    2b38:	10800f17 	ldw	r2,60(r2)
    2b3c:	1880031e 	bne	r3,r2,2b4c <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2b40:	00800044 	movi	r2,1
    2b44:	e0bffe15 	stw	r2,-8(fp)
    2b48:	00000106 	br	2b50 <xQueueIsQueueFullFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
    2b4c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2b50:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2b54:	e037883a 	mov	sp,fp
    2b58:	df000017 	ldw	fp,0(sp)
    2b5c:	dec00104 	addi	sp,sp,4
    2b60:	f800283a 	ret

00002b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2b64:	defffb04 	addi	sp,sp,-20
    2b68:	dfc00415 	stw	ra,16(sp)
    2b6c:	df000315 	stw	fp,12(sp)
    2b70:	df000304 	addi	fp,sp,12
    2b74:	e13ffe15 	stw	r4,-8(fp)
    2b78:	e17fff15 	stw	r5,-4(fp)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b7c:	e0bffe17 	ldw	r2,-8(fp)
    2b80:	e0bffd15 	stw	r2,-12(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2b84:	00041140 	call	4114 <vTaskEnterCritical>
    2b88:	e0bffd17 	ldw	r2,-12(fp)
    2b8c:	10801117 	ldw	r2,68(r2)
    2b90:	10bfffd8 	cmpnei	r2,r2,-1
    2b94:	1000021e 	bne	r2,zero,2ba0 <vQueueWaitForMessageRestricted+0x3c>
    2b98:	e0bffd17 	ldw	r2,-12(fp)
    2b9c:	10001115 	stw	zero,68(r2)
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10801217 	ldw	r2,72(r2)
    2ba8:	10bfffd8 	cmpnei	r2,r2,-1
    2bac:	1000021e 	bne	r2,zero,2bb8 <vQueueWaitForMessageRestricted+0x54>
    2bb0:	e0bffd17 	ldw	r2,-12(fp)
    2bb4:	10001215 	stw	zero,72(r2)
    2bb8:	00041680 	call	4168 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2bbc:	e0bffd17 	ldw	r2,-12(fp)
    2bc0:	10800e17 	ldw	r2,56(r2)
    2bc4:	1004c03a 	cmpne	r2,r2,zero
    2bc8:	1000041e 	bne	r2,zero,2bdc <vQueueWaitForMessageRestricted+0x78>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2bcc:	e0bffd17 	ldw	r2,-12(fp)
    2bd0:	11000904 	addi	r4,r2,36
    2bd4:	e17fff17 	ldw	r5,-4(fp)
    2bd8:	00035bc0 	call	35bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2bdc:	e13ffd17 	ldw	r4,-12(fp)
    2be0:	000293c0 	call	293c <prvUnlockQueue>
	}
    2be4:	e037883a 	mov	sp,fp
    2be8:	dfc00117 	ldw	ra,4(sp)
    2bec:	df000017 	ldw	fp,0(sp)
    2bf0:	dec00204 	addi	sp,sp,8
    2bf4:	f800283a 	ret

00002bf8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2bf8:	defff604 	addi	sp,sp,-40
    2bfc:	dfc00915 	stw	ra,36(sp)
    2c00:	df000815 	stw	fp,32(sp)
    2c04:	df000804 	addi	fp,sp,32
    2c08:	e13ffc15 	stw	r4,-16(fp)
    2c0c:	e17ffd15 	stw	r5,-12(fp)
    2c10:	e1ffff15 	stw	r7,-4(fp)
    2c14:	e1bffe0d 	sth	r6,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2c18:	e13ffe0b 	ldhu	r4,-8(fp)
    2c1c:	e1400417 	ldw	r5,16(fp)
    2c20:	0003c100 	call	3c10 <prvAllocateTCBAndStack>
    2c24:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
    2c28:	e0bffa17 	ldw	r2,-24(fp)
    2c2c:	1005003a 	cmpeq	r2,r2,zero
    2c30:	1000501e 	bne	r2,zero,2d74 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2c34:	e0bffa17 	ldw	r2,-24(fp)
    2c38:	10c00c17 	ldw	r3,48(r2)
    2c3c:	e0bffe0b 	ldhu	r2,-8(fp)
    2c40:	1085883a 	add	r2,r2,r2
    2c44:	1085883a 	add	r2,r2,r2
    2c48:	1885883a 	add	r2,r3,r2
    2c4c:	10bfff04 	addi	r2,r2,-4
    2c50:	e0bff915 	stw	r2,-28(fp)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2c54:	e0bff917 	ldw	r2,-28(fp)
    2c58:	1007883a 	mov	r3,r2
    2c5c:	00bfff04 	movi	r2,-4
    2c60:	1884703a 	and	r2,r3,r2
    2c64:	e0bff915 	stw	r2,-28(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2c68:	e0bffe0b 	ldhu	r2,-8(fp)
    2c6c:	d8800015 	stw	r2,0(sp)
    2c70:	e13ffa17 	ldw	r4,-24(fp)
    2c74:	e17ffd17 	ldw	r5,-12(fp)
    2c78:	e1800217 	ldw	r6,8(fp)
    2c7c:	e1c00517 	ldw	r7,20(fp)
    2c80:	00039100 	call	3910 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c84:	e13ff917 	ldw	r4,-28(fp)
    2c88:	e17ffc17 	ldw	r5,-16(fp)
    2c8c:	e1bfff17 	ldw	r6,-4(fp)
    2c90:	00016f40 	call	16f4 <pxPortInitialiseStack>
    2c94:	1007883a 	mov	r3,r2
    2c98:	e0bffa17 	ldw	r2,-24(fp)
    2c9c:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2ca0:	e0800317 	ldw	r2,12(fp)
    2ca4:	1005003a 	cmpeq	r2,r2,zero
    2ca8:	1000031e 	bne	r2,zero,2cb8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2cac:	e0c00317 	ldw	r3,12(fp)
    2cb0:	e0bffa17 	ldw	r2,-24(fp)
    2cb4:	18800015 	stw	r2,0(r3)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2cb8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    2cbc:	d0a02a17 	ldw	r2,-32600(gp)
    2cc0:	10800044 	addi	r2,r2,1
    2cc4:	d0a02a15 	stw	r2,-32600(gp)
			if( pxCurrentTCB == NULL )
    2cc8:	d0a02817 	ldw	r2,-32608(gp)
    2ccc:	1004c03a 	cmpne	r2,r2,zero
    2cd0:	1000071e 	bne	r2,zero,2cf0 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2cd4:	e0bffa17 	ldw	r2,-24(fp)
    2cd8:	d0a02815 	stw	r2,-32608(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2cdc:	d0a02a17 	ldw	r2,-32600(gp)
    2ce0:	10800058 	cmpnei	r2,r2,1
    2ce4:	10000b1e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2ce8:	0003a4c0 	call	3a4c <prvInitialiseTaskLists>
    2cec:	00000906 	br	2d14 <xTaskGenericCreate+0x11c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2cf0:	d0a02d17 	ldw	r2,-32588(gp)
    2cf4:	1004c03a 	cmpne	r2,r2,zero
    2cf8:	1000061e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2cfc:	d0a02817 	ldw	r2,-32608(gp)
    2d00:	10c00b17 	ldw	r3,44(r2)
    2d04:	e0800217 	ldw	r2,8(fp)
    2d08:	10c00236 	bltu	r2,r3,2d14 <xTaskGenericCreate+0x11c>
					{
						pxCurrentTCB = pxNewTCB;
    2d0c:	e0bffa17 	ldw	r2,-24(fp)
    2d10:	d0a02815 	stw	r2,-32608(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2d14:	d0a03117 	ldw	r2,-32572(gp)
    2d18:	10800044 	addi	r2,r2,1
    2d1c:	d0a03115 	stw	r2,-32572(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2d20:	e0bffa17 	ldw	r2,-24(fp)
    2d24:	10c00b17 	ldw	r3,44(r2)
    2d28:	d0a02c17 	ldw	r2,-32592(gp)
    2d2c:	10c0032e 	bgeu	r2,r3,2d3c <xTaskGenericCreate+0x144>
    2d30:	e0bffa17 	ldw	r2,-24(fp)
    2d34:	10800b17 	ldw	r2,44(r2)
    2d38:	d0a02c15 	stw	r2,-32592(gp)
    2d3c:	e0bffa17 	ldw	r2,-24(fp)
    2d40:	10800b17 	ldw	r2,44(r2)
    2d44:	10800524 	muli	r2,r2,20
    2d48:	1007883a 	mov	r3,r2
    2d4c:	00820234 	movhi	r2,2056
    2d50:	10be6504 	addi	r2,r2,-1644
    2d54:	1889883a 	add	r4,r3,r2
    2d58:	e0bffa17 	ldw	r2,-24(fp)
    2d5c:	11400104 	addi	r5,r2,4
    2d60:	000149c0 	call	149c <vListInsertEnd>

			xReturn = pdPASS;
    2d64:	00800044 	movi	r2,1
    2d68:	e0bffb15 	stw	r2,-20(fp)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2d6c:	00041680 	call	4168 <vTaskExitCritical>
    2d70:	00000206 	br	2d7c <xTaskGenericCreate+0x184>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2d74:	00bfffc4 	movi	r2,-1
    2d78:	e0bffb15 	stw	r2,-20(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	10800058 	cmpnei	r2,r2,1
    2d84:	1000081e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
	{
		if( xSchedulerRunning != pdFALSE )
    2d88:	d0a02d17 	ldw	r2,-32588(gp)
    2d8c:	1005003a 	cmpeq	r2,r2,zero
    2d90:	1000051e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2d94:	d0a02817 	ldw	r2,-32608(gp)
    2d98:	10c00b17 	ldw	r3,44(r2)
    2d9c:	e0800217 	ldw	r2,8(fp)
    2da0:	1880012e 	bgeu	r3,r2,2da8 <xTaskGenericCreate+0x1b0>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2da4:	003b683a 	trap	0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2da8:	e0bffb17 	ldw	r2,-20(fp)
}
    2dac:	e037883a 	mov	sp,fp
    2db0:	dfc00117 	ldw	ra,4(sp)
    2db4:	df000017 	ldw	fp,0(sp)
    2db8:	dec00204 	addi	sp,sp,8
    2dbc:	f800283a 	ret

00002dc0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2dc0:	defffb04 	addi	sp,sp,-20
    2dc4:	dfc00415 	stw	ra,16(sp)
    2dc8:	df000315 	stw	fp,12(sp)
    2dcc:	df000304 	addi	fp,sp,12
    2dd0:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2dd4:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2dd8:	e0bffe17 	ldw	r2,-8(fp)
    2ddc:	1004c03a 	cmpne	r2,r2,zero
    2de0:	1000031e 	bne	r2,zero,2df0 <vTaskDelete+0x30>
    2de4:	d0a02817 	ldw	r2,-32608(gp)
    2de8:	e0bfff15 	stw	r2,-4(fp)
    2dec:	00000206 	br	2df8 <vTaskDelete+0x38>
    2df0:	e0bffe17 	ldw	r2,-8(fp)
    2df4:	e0bfff15 	stw	r2,-4(fp)
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	e0bffd15 	stw	r2,-12(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	11000104 	addi	r4,r2,4
    2e08:	00015f80 	call	15f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2e0c:	e0bffd17 	ldw	r2,-12(fp)
    2e10:	10800a17 	ldw	r2,40(r2)
    2e14:	1005003a 	cmpeq	r2,r2,zero
    2e18:	1000031e 	bne	r2,zero,2e28 <vTaskDelete+0x68>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	11000604 	addi	r4,r2,24
    2e24:	00015f80 	call	15f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2e28:	e0bffd17 	ldw	r2,-12(fp)
    2e2c:	11400104 	addi	r5,r2,4
    2e30:	01020234 	movhi	r4,2056
    2e34:	213eb004 	addi	r4,r4,-1344
    2e38:	000149c0 	call	149c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2e3c:	d0a02917 	ldw	r2,-32604(gp)
    2e40:	10800044 	addi	r2,r2,1
    2e44:	d0a02915 	stw	r2,-32604(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2e48:	d0a03117 	ldw	r2,-32572(gp)
    2e4c:	10800044 	addi	r2,r2,1
    2e50:	d0a03115 	stw	r2,-32572(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2e54:	00041680 	call	4168 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2e58:	d0a02d17 	ldw	r2,-32588(gp)
    2e5c:	1005003a 	cmpeq	r2,r2,zero
    2e60:	1000081e 	bne	r2,zero,2e84 <vTaskDelete+0xc4>
		{
			if( pxTCB == pxCurrentTCB )
    2e64:	d0e02817 	ldw	r3,-32608(gp)
    2e68:	e0bffd17 	ldw	r2,-12(fp)
    2e6c:	10c0021e 	bne	r2,r3,2e78 <vTaskDelete+0xb8>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    2e70:	003b683a 	trap	0
    2e74:	00000306 	br	2e84 <vTaskDelete+0xc4>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    2e78:	00041140 	call	4114 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2e7c:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    2e80:	00041680 	call	4168 <vTaskExitCritical>
			}
		}
	}
    2e84:	e037883a 	mov	sp,fp
    2e88:	dfc00117 	ldw	ra,4(sp)
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00204 	addi	sp,sp,8
    2e94:	f800283a 	ret

00002e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2e98:	defffb04 	addi	sp,sp,-20
    2e9c:	dfc00415 	stw	ra,16(sp)
    2ea0:	df000315 	stw	fp,12(sp)
    2ea4:	df000304 	addi	fp,sp,12
    2ea8:	e13fff15 	stw	r4,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2eac:	e03ffd15 	stw	zero,-12(fp)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2eb0:	e0bfff17 	ldw	r2,-4(fp)
    2eb4:	1005003a 	cmpeq	r2,r2,zero
    2eb8:	10000c1e 	bne	r2,zero,2eec <vTaskDelay+0x54>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2ebc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2ec0:	d0e02b17 	ldw	r3,-32596(gp)
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	1885883a 	add	r2,r3,r2
    2ecc:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2ed0:	d0a02817 	ldw	r2,-32608(gp)
    2ed4:	11000104 	addi	r4,r2,4
    2ed8:	00015f80 	call	15f8 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2edc:	e13ffe17 	ldw	r4,-8(fp)
    2ee0:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2ee4:	00030180 	call	3018 <xTaskResumeAll>
    2ee8:	e0bffd15 	stw	r2,-12(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2eec:	e0bffd17 	ldw	r2,-12(fp)
    2ef0:	1004c03a 	cmpne	r2,r2,zero
    2ef4:	1000011e 	bne	r2,zero,2efc <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
    2ef8:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2efc:	e037883a 	mov	sp,fp
    2f00:	dfc00117 	ldw	ra,4(sp)
    2f04:	df000017 	ldw	fp,0(sp)
    2f08:	dec00204 	addi	sp,sp,8
    2f0c:	f800283a 	ret

00002f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2f10:	defff804 	addi	sp,sp,-32
    2f14:	dfc00715 	stw	ra,28(sp)
    2f18:	df000615 	stw	fp,24(sp)
    2f1c:	df000604 	addi	fp,sp,24
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2f20:	d8000015 	stw	zero,0(sp)
    2f24:	d8000115 	stw	zero,4(sp)
    2f28:	d8000215 	stw	zero,8(sp)
    2f2c:	d8000315 	stw	zero,12(sp)
    2f30:	01000034 	movhi	r4,0
    2f34:	210e3d04 	addi	r4,r4,14580
    2f38:	01420034 	movhi	r5,2048
    2f3c:	29400d04 	addi	r5,r5,52
    2f40:	01880004 	movi	r6,8192
    2f44:	000f883a 	mov	r7,zero
    2f48:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    2f4c:	e0bfff15 	stw	r2,-4(fp)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2f50:	e0bfff17 	ldw	r2,-4(fp)
    2f54:	10800058 	cmpnei	r2,r2,1
    2f58:	1000021e 	bne	r2,zero,2f64 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
    2f5c:	000488c0 	call	488c <xTimerCreateTimerTask>
    2f60:	e0bfff15 	stw	r2,-4(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2f64:	e0bfff17 	ldw	r2,-4(fp)
    2f68:	10800058 	cmpnei	r2,r2,1
    2f6c:	10000a1e 	bne	r2,zero,2f98 <vTaskStartScheduler+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f70:	0005303a 	rdctl	r2,status
    2f74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f78:	e0fffe17 	ldw	r3,-8(fp)
    2f7c:	00bfff84 	movi	r2,-2
    2f80:	1884703a 	and	r2,r3,r2
    2f84:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2f88:	00800044 	movi	r2,1
    2f8c:	d0a02d15 	stw	r2,-32588(gp)
		xTickCount = ( TickType_t ) 0U;
    2f90:	d0202b15 	stw	zero,-32596(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f94:	00017dc0 	call	17dc <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    2f98:	e037883a 	mov	sp,fp
    2f9c:	dfc00117 	ldw	ra,4(sp)
    2fa0:	df000017 	ldw	fp,0(sp)
    2fa4:	dec00204 	addi	sp,sp,8
    2fa8:	f800283a 	ret

00002fac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2fac:	defffd04 	addi	sp,sp,-12
    2fb0:	dfc00215 	stw	ra,8(sp)
    2fb4:	df000115 	stw	fp,4(sp)
    2fb8:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2fbc:	0005303a 	rdctl	r2,status
    2fc0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fc4:	e0ffff17 	ldw	r3,-4(fp)
    2fc8:	00bfff84 	movi	r2,-2
    2fcc:	1884703a 	and	r2,r3,r2
    2fd0:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    2fd4:	d0202d15 	stw	zero,-32588(gp)
	vPortEndScheduler();
    2fd8:	00018140 	call	1814 <vPortEndScheduler>
}
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	dfc00117 	ldw	ra,4(sp)
    2fe4:	df000017 	ldw	fp,0(sp)
    2fe8:	dec00204 	addi	sp,sp,8
    2fec:	f800283a 	ret

00002ff0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2ff0:	deffff04 	addi	sp,sp,-4
    2ff4:	df000015 	stw	fp,0(sp)
    2ff8:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2ffc:	d0a03217 	ldw	r2,-32568(gp)
    3000:	10800044 	addi	r2,r2,1
    3004:	d0a03215 	stw	r2,-32568(gp)
}
    3008:	e037883a 	mov	sp,fp
    300c:	df000017 	ldw	fp,0(sp)
    3010:	dec00104 	addi	sp,sp,4
    3014:	f800283a 	ret

00003018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3018:	defffc04 	addi	sp,sp,-16
    301c:	dfc00315 	stw	ra,12(sp)
    3020:	df000215 	stw	fp,8(sp)
    3024:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3028:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    302c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    3030:	d0a03217 	ldw	r2,-32568(gp)
    3034:	10bfffc4 	addi	r2,r2,-1
    3038:	d0a03215 	stw	r2,-32568(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    303c:	d0a03217 	ldw	r2,-32568(gp)
    3040:	1004c03a 	cmpne	r2,r2,zero
    3044:	1000411e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3048:	d0a02a17 	ldw	r2,-32600(gp)
    304c:	1005003a 	cmpeq	r2,r2,zero
    3050:	10003e1e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3054:	00002306 	br	30e4 <xTaskResumeAll+0xcc>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3058:	00820234 	movhi	r2,2056
    305c:	10beab04 	addi	r2,r2,-1364
    3060:	10800317 	ldw	r2,12(r2)
    3064:	10800317 	ldw	r2,12(r2)
    3068:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    306c:	e0bfff17 	ldw	r2,-4(fp)
    3070:	11000604 	addi	r4,r2,24
    3074:	00015f80 	call	15f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3078:	e0bfff17 	ldw	r2,-4(fp)
    307c:	11000104 	addi	r4,r2,4
    3080:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3084:	e0bfff17 	ldw	r2,-4(fp)
    3088:	10c00b17 	ldw	r3,44(r2)
    308c:	d0a02c17 	ldw	r2,-32592(gp)
    3090:	10c0032e 	bgeu	r2,r3,30a0 <xTaskResumeAll+0x88>
    3094:	e0bfff17 	ldw	r2,-4(fp)
    3098:	10800b17 	ldw	r2,44(r2)
    309c:	d0a02c15 	stw	r2,-32592(gp)
    30a0:	e0bfff17 	ldw	r2,-4(fp)
    30a4:	10800b17 	ldw	r2,44(r2)
    30a8:	10800524 	muli	r2,r2,20
    30ac:	1007883a 	mov	r3,r2
    30b0:	00820234 	movhi	r2,2056
    30b4:	10be6504 	addi	r2,r2,-1644
    30b8:	1889883a 	add	r4,r3,r2
    30bc:	e0bfff17 	ldw	r2,-4(fp)
    30c0:	11400104 	addi	r5,r2,4
    30c4:	000149c0 	call	149c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	10c00b17 	ldw	r3,44(r2)
    30d0:	d0a02817 	ldw	r2,-32608(gp)
    30d4:	10800b17 	ldw	r2,44(r2)
    30d8:	18800236 	bltu	r3,r2,30e4 <xTaskResumeAll+0xcc>
					{
						xYieldPending = pdTRUE;
    30dc:	00800044 	movi	r2,1
    30e0:	d0a02f15 	stw	r2,-32580(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    30e4:	00820234 	movhi	r2,2056
    30e8:	10beab04 	addi	r2,r2,-1364
    30ec:	10800017 	ldw	r2,0(r2)
    30f0:	1004c03a 	cmpne	r2,r2,zero
    30f4:	103fd81e 	bne	r2,zero,3058 <xTaskResumeAll+0x40>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    30f8:	d0a02e17 	ldw	r2,-32584(gp)
    30fc:	1005003a 	cmpeq	r2,r2,zero
    3100:	10000c1e 	bne	r2,zero,3134 <xTaskResumeAll+0x11c>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3104:	00000806 	br	3128 <xTaskResumeAll+0x110>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3108:	00031dc0 	call	31dc <xTaskIncrementTick>
    310c:	1005003a 	cmpeq	r2,r2,zero
    3110:	1000021e 	bne	r2,zero,311c <xTaskResumeAll+0x104>
						{
							xYieldPending = pdTRUE;
    3114:	00800044 	movi	r2,1
    3118:	d0a02f15 	stw	r2,-32580(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    311c:	d0a02e17 	ldw	r2,-32584(gp)
    3120:	10bfffc4 	addi	r2,r2,-1
    3124:	d0a02e15 	stw	r2,-32584(gp)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3128:	d0a02e17 	ldw	r2,-32584(gp)
    312c:	1004c03a 	cmpne	r2,r2,zero
    3130:	103ff51e 	bne	r2,zero,3108 <xTaskResumeAll+0xf0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3134:	d0a02f17 	ldw	r2,-32580(gp)
    3138:	10800058 	cmpnei	r2,r2,1
    313c:	1000031e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3140:	00800044 	movi	r2,1
    3144:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3148:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    314c:	00041680 	call	4168 <vTaskExitCritical>

	return xAlreadyYielded;
    3150:	e0bffe17 	ldw	r2,-8(fp)
}
    3154:	e037883a 	mov	sp,fp
    3158:	dfc00117 	ldw	ra,4(sp)
    315c:	df000017 	ldw	fp,0(sp)
    3160:	dec00204 	addi	sp,sp,8
    3164:	f800283a 	ret

00003168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3168:	defffe04 	addi	sp,sp,-8
    316c:	df000115 	stw	fp,4(sp)
    3170:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    3174:	d0a02b17 	ldw	r2,-32596(gp)
    3178:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    317c:	e0bfff17 	ldw	r2,-4(fp)
}
    3180:	e037883a 	mov	sp,fp
    3184:	df000017 	ldw	fp,0(sp)
    3188:	dec00104 	addi	sp,sp,4
    318c:	f800283a 	ret

00003190 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3190:	defffd04 	addi	sp,sp,-12
    3194:	df000215 	stw	fp,8(sp)
    3198:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    319c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
    31a0:	d0a02b17 	ldw	r2,-32596(gp)
    31a4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31a8:	e0bfff17 	ldw	r2,-4(fp)
}
    31ac:	e037883a 	mov	sp,fp
    31b0:	df000017 	ldw	fp,0(sp)
    31b4:	dec00104 	addi	sp,sp,4
    31b8:	f800283a 	ret

000031bc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    31bc:	deffff04 	addi	sp,sp,-4
    31c0:	df000015 	stw	fp,0(sp)
    31c4:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    31c8:	d0a02a17 	ldw	r2,-32600(gp)
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00104 	addi	sp,sp,4
    31d8:	f800283a 	ret

000031dc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    31dc:	defff804 	addi	sp,sp,-32
    31e0:	dfc00715 	stw	ra,28(sp)
    31e4:	df000615 	stw	fp,24(sp)
    31e8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    31ec:	e03ffc15 	stw	zero,-16(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    31f0:	d0a03217 	ldw	r2,-32568(gp)
    31f4:	1004c03a 	cmpne	r2,r2,zero
    31f8:	1000611e 	bne	r2,zero,3380 <xTaskIncrementTick+0x1a4>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    31fc:	d0a02b17 	ldw	r2,-32596(gp)
    3200:	10800044 	addi	r2,r2,1
    3204:	d0a02b15 	stw	r2,-32596(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3208:	d0a02b17 	ldw	r2,-32596(gp)
    320c:	e0bffb15 	stw	r2,-20(fp)

			if( xConstTickCount == ( TickType_t ) 0U )
    3210:	e0bffb17 	ldw	r2,-20(fp)
    3214:	1004c03a 	cmpne	r2,r2,zero
    3218:	10000a1e 	bne	r2,zero,3244 <xTaskIncrementTick+0x68>
			{
				taskSWITCH_DELAYED_LISTS();
    321c:	d0a03317 	ldw	r2,-32564(gp)
    3220:	e0bffa15 	stw	r2,-24(fp)
    3224:	d0a03417 	ldw	r2,-32560(gp)
    3228:	d0a03315 	stw	r2,-32564(gp)
    322c:	e0bffa17 	ldw	r2,-24(fp)
    3230:	d0a03415 	stw	r2,-32560(gp)
    3234:	d0a03017 	ldw	r2,-32576(gp)
    3238:	10800044 	addi	r2,r2,1
    323c:	d0a03015 	stw	r2,-32576(gp)
    3240:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3244:	d0e00317 	ldw	r3,-32756(gp)
    3248:	e0bffb17 	ldw	r2,-20(fp)
    324c:	10c03f36 	bltu	r2,r3,334c <xTaskIncrementTick+0x170>
    3250:	00000006 	br	3254 <xTaskIncrementTick+0x78>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3254:	d0a03317 	ldw	r2,-32564(gp)
    3258:	10800017 	ldw	r2,0(r2)
    325c:	1004c03a 	cmpne	r2,r2,zero
    3260:	1000031e 	bne	r2,zero,3270 <xTaskIncrementTick+0x94>
    3264:	00800044 	movi	r2,1
    3268:	e0bfff05 	stb	r2,-4(fp)
    326c:	00000106 	br	3274 <xTaskIncrementTick+0x98>
    3270:	e03fff05 	stb	zero,-4(fp)
    3274:	e0bfff03 	ldbu	r2,-4(fp)
    3278:	1005003a 	cmpeq	r2,r2,zero
    327c:	1000031e 	bne	r2,zero,328c <xTaskIncrementTick+0xb0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3280:	00bfffc4 	movi	r2,-1
    3284:	d0a00315 	stw	r2,-32756(gp)
						break;
    3288:	00003006 	br	334c <xTaskIncrementTick+0x170>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    328c:	d0a03317 	ldw	r2,-32564(gp)
    3290:	10800317 	ldw	r2,12(r2)
    3294:	10800317 	ldw	r2,12(r2)
    3298:	e0bffe15 	stw	r2,-8(fp)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    329c:	e0bffe17 	ldw	r2,-8(fp)
    32a0:	10800117 	ldw	r2,4(r2)
    32a4:	e0bffd15 	stw	r2,-12(fp)

						if( xConstTickCount < xItemValue )
    32a8:	e0fffb17 	ldw	r3,-20(fp)
    32ac:	e0bffd17 	ldw	r2,-12(fp)
    32b0:	1880032e 	bgeu	r3,r2,32c0 <xTaskIncrementTick+0xe4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	d0a00315 	stw	r2,-32756(gp)
							break;
    32bc:	00002306 	br	334c <xTaskIncrementTick+0x170>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    32c0:	e0bffe17 	ldw	r2,-8(fp)
    32c4:	11000104 	addi	r4,r2,4
    32c8:	00015f80 	call	15f8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	10800a17 	ldw	r2,40(r2)
    32d4:	1005003a 	cmpeq	r2,r2,zero
    32d8:	1000031e 	bne	r2,zero,32e8 <xTaskIncrementTick+0x10c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	11000604 	addi	r4,r2,24
    32e4:	00015f80 	call	15f8 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    32e8:	e0bffe17 	ldw	r2,-8(fp)
    32ec:	10c00b17 	ldw	r3,44(r2)
    32f0:	d0a02c17 	ldw	r2,-32592(gp)
    32f4:	10c0032e 	bgeu	r2,r3,3304 <xTaskIncrementTick+0x128>
    32f8:	e0bffe17 	ldw	r2,-8(fp)
    32fc:	10800b17 	ldw	r2,44(r2)
    3300:	d0a02c15 	stw	r2,-32592(gp)
    3304:	e0bffe17 	ldw	r2,-8(fp)
    3308:	10800b17 	ldw	r2,44(r2)
    330c:	10800524 	muli	r2,r2,20
    3310:	1007883a 	mov	r3,r2
    3314:	00820234 	movhi	r2,2056
    3318:	10be6504 	addi	r2,r2,-1644
    331c:	1889883a 	add	r4,r3,r2
    3320:	e0bffe17 	ldw	r2,-8(fp)
    3324:	11400104 	addi	r5,r2,4
    3328:	000149c0 	call	149c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    332c:	e0bffe17 	ldw	r2,-8(fp)
    3330:	10c00b17 	ldw	r3,44(r2)
    3334:	d0a02817 	ldw	r2,-32608(gp)
    3338:	10800b17 	ldw	r2,44(r2)
    333c:	18bfc536 	bltu	r3,r2,3254 <xTaskIncrementTick+0x78>
							{
								xSwitchRequired = pdTRUE;
    3340:	00800044 	movi	r2,1
    3344:	e0bffc15 	stw	r2,-16(fp)
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    3348:	003fc206 	br	3254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    334c:	d0a02817 	ldw	r2,-32608(gp)
    3350:	10800b17 	ldw	r2,44(r2)
    3354:	10800524 	muli	r2,r2,20
    3358:	1007883a 	mov	r3,r2
    335c:	00820234 	movhi	r2,2056
    3360:	10be6504 	addi	r2,r2,-1644
    3364:	1885883a 	add	r2,r3,r2
    3368:	10800017 	ldw	r2,0(r2)
    336c:	108000b0 	cmpltui	r2,r2,2
    3370:	1000061e 	bne	r2,zero,338c <xTaskIncrementTick+0x1b0>
			{
				xSwitchRequired = pdTRUE;
    3374:	00800044 	movi	r2,1
    3378:	e0bffc15 	stw	r2,-16(fp)
    337c:	00000306 	br	338c <xTaskIncrementTick+0x1b0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3380:	d0a02e17 	ldw	r2,-32584(gp)
    3384:	10800044 	addi	r2,r2,1
    3388:	d0a02e15 	stw	r2,-32584(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    338c:	d0a02f17 	ldw	r2,-32580(gp)
    3390:	1005003a 	cmpeq	r2,r2,zero
    3394:	1000021e 	bne	r2,zero,33a0 <xTaskIncrementTick+0x1c4>
		{
			xSwitchRequired = pdTRUE;
    3398:	00800044 	movi	r2,1
    339c:	e0bffc15 	stw	r2,-16(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    33a0:	e0bffc17 	ldw	r2,-16(fp)
}
    33a4:	e037883a 	mov	sp,fp
    33a8:	dfc00117 	ldw	ra,4(sp)
    33ac:	df000017 	ldw	fp,0(sp)
    33b0:	dec00204 	addi	sp,sp,8
    33b4:	f800283a 	ret

000033b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    33b8:	defffd04 	addi	sp,sp,-12
    33bc:	dfc00215 	stw	ra,8(sp)
    33c0:	df000115 	stw	fp,4(sp)
    33c4:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    33c8:	d0a03217 	ldw	r2,-32568(gp)
    33cc:	1005003a 	cmpeq	r2,r2,zero
    33d0:	1000031e 	bne	r2,zero,33e0 <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    33d4:	00800044 	movi	r2,1
    33d8:	d0a02f15 	stw	r2,-32580(gp)
    33dc:	00003d06 	br	34d4 <vTaskSwitchContext+0x11c>
	}
	else
	{
		xYieldPending = pdFALSE;
    33e0:	d0202f15 	stw	zero,-32580(gp)
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    33e4:	d0a02817 	ldw	r2,-32608(gp)
    33e8:	10c00017 	ldw	r3,0(r2)
    33ec:	d0a02817 	ldw	r2,-32608(gp)
    33f0:	10800c17 	ldw	r2,48(r2)
    33f4:	10c00436 	bltu	r2,r3,3408 <vTaskSwitchContext+0x50>
    33f8:	d1202817 	ldw	r4,-32608(gp)
    33fc:	d0a02817 	ldw	r2,-32608(gp)
    3400:	11400d04 	addi	r5,r2,52
    3404:	00016900 	call	1690 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    3408:	d0a02817 	ldw	r2,-32608(gp)
    340c:	11000c17 	ldw	r4,48(r2)
    3410:	01420034 	movhi	r5,2048
    3414:	29400e44 	addi	r5,r5,57
    3418:	01800504 	movi	r6,20
    341c:	00077140 	call	7714 <memcmp>
    3420:	1005003a 	cmpeq	r2,r2,zero
    3424:	1000081e 	bne	r2,zero,3448 <vTaskSwitchContext+0x90>
    3428:	d1202817 	ldw	r4,-32608(gp)
    342c:	d0a02817 	ldw	r2,-32608(gp)
    3430:	11400d04 	addi	r5,r2,52
    3434:	00016900 	call	1690 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3438:	00000306 	br	3448 <vTaskSwitchContext+0x90>
    343c:	d0a02c17 	ldw	r2,-32592(gp)
    3440:	10bfffc4 	addi	r2,r2,-1
    3444:	d0a02c15 	stw	r2,-32592(gp)
    3448:	d0a02c17 	ldw	r2,-32592(gp)
    344c:	10800524 	muli	r2,r2,20
    3450:	1007883a 	mov	r3,r2
    3454:	00820234 	movhi	r2,2056
    3458:	10be6504 	addi	r2,r2,-1644
    345c:	1885883a 	add	r2,r3,r2
    3460:	10800017 	ldw	r2,0(r2)
    3464:	1005003a 	cmpeq	r2,r2,zero
    3468:	103ff41e 	bne	r2,zero,343c <vTaskSwitchContext+0x84>
    346c:	d0a02c17 	ldw	r2,-32592(gp)
    3470:	10800524 	muli	r2,r2,20
    3474:	1007883a 	mov	r3,r2
    3478:	00820234 	movhi	r2,2056
    347c:	10be6504 	addi	r2,r2,-1644
    3480:	1885883a 	add	r2,r3,r2
    3484:	e0bfff15 	stw	r2,-4(fp)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	10800117 	ldw	r2,4(r2)
    3490:	10c00117 	ldw	r3,4(r2)
    3494:	e0bfff17 	ldw	r2,-4(fp)
    3498:	10c00115 	stw	r3,4(r2)
    349c:	e0bfff17 	ldw	r2,-4(fp)
    34a0:	10c00117 	ldw	r3,4(r2)
    34a4:	e0bfff17 	ldw	r2,-4(fp)
    34a8:	10800204 	addi	r2,r2,8
    34ac:	1880051e 	bne	r3,r2,34c4 <vTaskSwitchContext+0x10c>
    34b0:	e0bfff17 	ldw	r2,-4(fp)
    34b4:	10800117 	ldw	r2,4(r2)
    34b8:	10c00117 	ldw	r3,4(r2)
    34bc:	e0bfff17 	ldw	r2,-4(fp)
    34c0:	10c00115 	stw	r3,4(r2)
    34c4:	e0bfff17 	ldw	r2,-4(fp)
    34c8:	10800117 	ldw	r2,4(r2)
    34cc:	10800317 	ldw	r2,12(r2)
    34d0:	d0a02815 	stw	r2,-32608(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    34d4:	e037883a 	mov	sp,fp
    34d8:	dfc00117 	ldw	ra,4(sp)
    34dc:	df000017 	ldw	fp,0(sp)
    34e0:	dec00204 	addi	sp,sp,8
    34e4:	f800283a 	ret

000034e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    34e8:	defffb04 	addi	sp,sp,-20
    34ec:	dfc00415 	stw	ra,16(sp)
    34f0:	df000315 	stw	fp,12(sp)
    34f4:	df000304 	addi	fp,sp,12
    34f8:	e13ffe15 	stw	r4,-8(fp)
    34fc:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3500:	d0a02817 	ldw	r2,-32608(gp)
    3504:	11400604 	addi	r5,r2,24
    3508:	e13ffe17 	ldw	r4,-8(fp)
    350c:	00015240 	call	1524 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3510:	d0a02817 	ldw	r2,-32608(gp)
    3514:	11000104 	addi	r4,r2,4
    3518:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    351c:	d0e02b17 	ldw	r3,-32596(gp)
    3520:	e0bfff17 	ldw	r2,-4(fp)
    3524:	1885883a 	add	r2,r3,r2
    3528:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    352c:	e13ffd17 	ldw	r4,-12(fp)
    3530:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3534:	e037883a 	mov	sp,fp
    3538:	dfc00117 	ldw	ra,4(sp)
    353c:	df000017 	ldw	fp,0(sp)
    3540:	dec00204 	addi	sp,sp,8
    3544:	f800283a 	ret

00003548 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3548:	defffa04 	addi	sp,sp,-24
    354c:	dfc00515 	stw	ra,20(sp)
    3550:	df000415 	stw	fp,16(sp)
    3554:	df000404 	addi	fp,sp,16
    3558:	e13ffd15 	stw	r4,-12(fp)
    355c:	e17ffe15 	stw	r5,-8(fp)
    3560:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3564:	d0e02817 	ldw	r3,-32608(gp)
    3568:	e0bffe17 	ldw	r2,-8(fp)
    356c:	10a00034 	orhi	r2,r2,32768
    3570:	18800615 	stw	r2,24(r3)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3574:	d0a02817 	ldw	r2,-32608(gp)
    3578:	11400604 	addi	r5,r2,24
    357c:	e13ffd17 	ldw	r4,-12(fp)
    3580:	000149c0 	call	149c <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3584:	d0a02817 	ldw	r2,-32608(gp)
    3588:	11000104 	addi	r4,r2,4
    358c:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3590:	d0e02b17 	ldw	r3,-32596(gp)
    3594:	e0bfff17 	ldw	r2,-4(fp)
    3598:	1885883a 	add	r2,r3,r2
    359c:	e0bffc15 	stw	r2,-16(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    35a0:	e13ffc17 	ldw	r4,-16(fp)
    35a4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35a8:	e037883a 	mov	sp,fp
    35ac:	dfc00117 	ldw	ra,4(sp)
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00204 	addi	sp,sp,8
    35b8:	f800283a 	ret

000035bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    35bc:	defffb04 	addi	sp,sp,-20
    35c0:	dfc00415 	stw	ra,16(sp)
    35c4:	df000315 	stw	fp,12(sp)
    35c8:	df000304 	addi	fp,sp,12
    35cc:	e13ffe15 	stw	r4,-8(fp)
    35d0:	e17fff15 	stw	r5,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    35d4:	d0a02817 	ldw	r2,-32608(gp)
    35d8:	11400604 	addi	r5,r2,24
    35dc:	e13ffe17 	ldw	r4,-8(fp)
    35e0:	000149c0 	call	149c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    35e4:	d0a02817 	ldw	r2,-32608(gp)
    35e8:	11000104 	addi	r4,r2,4
    35ec:	00015f80 	call	15f8 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    35f0:	d0e02b17 	ldw	r3,-32596(gp)
    35f4:	e0bfff17 	ldw	r2,-4(fp)
    35f8:	1885883a 	add	r2,r3,r2
    35fc:	e0bffd15 	stw	r2,-12(fp)

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3600:	e13ffd17 	ldw	r4,-12(fp)
    3604:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
    3608:	e037883a 	mov	sp,fp
    360c:	dfc00117 	ldw	ra,4(sp)
    3610:	df000017 	ldw	fp,0(sp)
    3614:	dec00204 	addi	sp,sp,8
    3618:	f800283a 	ret

0000361c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    361c:	defffb04 	addi	sp,sp,-20
    3620:	dfc00415 	stw	ra,16(sp)
    3624:	df000315 	stw	fp,12(sp)
    3628:	df000304 	addi	fp,sp,12
    362c:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3630:	e0bfff17 	ldw	r2,-4(fp)
    3634:	10800317 	ldw	r2,12(r2)
    3638:	10800317 	ldw	r2,12(r2)
    363c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3640:	e0bffe17 	ldw	r2,-8(fp)
    3644:	11000604 	addi	r4,r2,24
    3648:	00015f80 	call	15f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    364c:	d0a03217 	ldw	r2,-32568(gp)
    3650:	1004c03a 	cmpne	r2,r2,zero
    3654:	1000151e 	bne	r2,zero,36ac <xTaskRemoveFromEventList+0x90>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	11000104 	addi	r4,r2,4
    3660:	00015f80 	call	15f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3664:	e0bffe17 	ldw	r2,-8(fp)
    3668:	10c00b17 	ldw	r3,44(r2)
    366c:	d0a02c17 	ldw	r2,-32592(gp)
    3670:	10c0032e 	bgeu	r2,r3,3680 <xTaskRemoveFromEventList+0x64>
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800b17 	ldw	r2,44(r2)
    367c:	d0a02c15 	stw	r2,-32592(gp)
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800b17 	ldw	r2,44(r2)
    3688:	10800524 	muli	r2,r2,20
    368c:	1007883a 	mov	r3,r2
    3690:	00820234 	movhi	r2,2056
    3694:	10be6504 	addi	r2,r2,-1644
    3698:	1889883a 	add	r4,r3,r2
    369c:	e0bffe17 	ldw	r2,-8(fp)
    36a0:	11400104 	addi	r5,r2,4
    36a4:	000149c0 	call	149c <vListInsertEnd>
    36a8:	00000506 	br	36c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    36ac:	e0bffe17 	ldw	r2,-8(fp)
    36b0:	11400604 	addi	r5,r2,24
    36b4:	01020234 	movhi	r4,2056
    36b8:	213eab04 	addi	r4,r4,-1364
    36bc:	000149c0 	call	149c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    36c0:	e0bffe17 	ldw	r2,-8(fp)
    36c4:	10c00b17 	ldw	r3,44(r2)
    36c8:	d0a02817 	ldw	r2,-32608(gp)
    36cc:	10800b17 	ldw	r2,44(r2)
    36d0:	10c0052e 	bgeu	r2,r3,36e8 <xTaskRemoveFromEventList+0xcc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    36d4:	00800044 	movi	r2,1
    36d8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    36dc:	00800044 	movi	r2,1
    36e0:	d0a02f15 	stw	r2,-32580(gp)
    36e4:	00000106 	br	36ec <xTaskRemoveFromEventList+0xd0>
	}
	else
	{
		xReturn = pdFALSE;
    36e8:	e03ffd15 	stw	zero,-12(fp)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    36ec:	e0bffd17 	ldw	r2,-12(fp)
}
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3704:	defffa04 	addi	sp,sp,-24
    3708:	dfc00515 	stw	ra,20(sp)
    370c:	df000415 	stw	fp,16(sp)
    3710:	df000404 	addi	fp,sp,16
    3714:	e13ffe15 	stw	r4,-8(fp)
    3718:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    371c:	e0bfff17 	ldw	r2,-4(fp)
    3720:	10e00034 	orhi	r3,r2,32768
    3724:	e0bffe17 	ldw	r2,-8(fp)
    3728:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    372c:	e0bffe17 	ldw	r2,-8(fp)
    3730:	10800317 	ldw	r2,12(r2)
    3734:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3738:	e13ffe17 	ldw	r4,-8(fp)
    373c:	00015f80 	call	15f8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3740:	e0bffd17 	ldw	r2,-12(fp)
    3744:	11000104 	addi	r4,r2,4
    3748:	00015f80 	call	15f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    374c:	e0bffd17 	ldw	r2,-12(fp)
    3750:	10c00b17 	ldw	r3,44(r2)
    3754:	d0a02c17 	ldw	r2,-32592(gp)
    3758:	10c0032e 	bgeu	r2,r3,3768 <xTaskRemoveFromUnorderedEventList+0x64>
    375c:	e0bffd17 	ldw	r2,-12(fp)
    3760:	10800b17 	ldw	r2,44(r2)
    3764:	d0a02c15 	stw	r2,-32592(gp)
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	10800b17 	ldw	r2,44(r2)
    3770:	10800524 	muli	r2,r2,20
    3774:	1007883a 	mov	r3,r2
    3778:	00820234 	movhi	r2,2056
    377c:	10be6504 	addi	r2,r2,-1644
    3780:	1889883a 	add	r4,r3,r2
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	11400104 	addi	r5,r2,4
    378c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3790:	e0bffd17 	ldw	r2,-12(fp)
    3794:	10c00b17 	ldw	r3,44(r2)
    3798:	d0a02817 	ldw	r2,-32608(gp)
    379c:	10800b17 	ldw	r2,44(r2)
    37a0:	10c0052e 	bgeu	r2,r3,37b8 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    37a4:	00800044 	movi	r2,1
    37a8:	e0bffc15 	stw	r2,-16(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    37ac:	00800044 	movi	r2,1
    37b0:	d0a02f15 	stw	r2,-32580(gp)
    37b4:	00000106 	br	37bc <xTaskRemoveFromUnorderedEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    37b8:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
    37bc:	e0bffc17 	ldw	r2,-16(fp)
}
    37c0:	e037883a 	mov	sp,fp
    37c4:	dfc00117 	ldw	ra,4(sp)
    37c8:	df000017 	ldw	fp,0(sp)
    37cc:	dec00204 	addi	sp,sp,8
    37d0:	f800283a 	ret

000037d4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    37d4:	defffe04 	addi	sp,sp,-8
    37d8:	df000115 	stw	fp,4(sp)
    37dc:	df000104 	addi	fp,sp,4
    37e0:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    37e4:	d0e03017 	ldw	r3,-32576(gp)
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
    37f0:	d0e02b17 	ldw	r3,-32596(gp)
    37f4:	e0bfff17 	ldw	r2,-4(fp)
    37f8:	10c00115 	stw	r3,4(r2)
}
    37fc:	e037883a 	mov	sp,fp
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00104 	addi	sp,sp,4
    3808:	f800283a 	ret

0000380c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    380c:	defffa04 	addi	sp,sp,-24
    3810:	dfc00515 	stw	ra,20(sp)
    3814:	df000415 	stw	fp,16(sp)
    3818:	df000404 	addi	fp,sp,16
    381c:	e13ffe15 	stw	r4,-8(fp)
    3820:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3824:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3828:	d0a02b17 	ldw	r2,-32596(gp)
    382c:	e0bffc15 	stw	r2,-16(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3830:	e0bffe17 	ldw	r2,-8(fp)
    3834:	10c00017 	ldw	r3,0(r2)
    3838:	d0a03017 	ldw	r2,-32576(gp)
    383c:	18800726 	beq	r3,r2,385c <xTaskCheckForTimeOut+0x50>
    3840:	e0bffe17 	ldw	r2,-8(fp)
    3844:	10c00117 	ldw	r3,4(r2)
    3848:	e0bffc17 	ldw	r2,-16(fp)
    384c:	10c00336 	bltu	r2,r3,385c <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3850:	00800044 	movi	r2,1
    3854:	e0bffd15 	stw	r2,-12(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3858:	00001606 	br	38b4 <xTaskCheckForTimeOut+0xa8>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    385c:	e0bffe17 	ldw	r2,-8(fp)
    3860:	10c00117 	ldw	r3,4(r2)
    3864:	e0bffc17 	ldw	r2,-16(fp)
    3868:	10c7c83a 	sub	r3,r2,r3
    386c:	e0bfff17 	ldw	r2,-4(fp)
    3870:	10800017 	ldw	r2,0(r2)
    3874:	18800d2e 	bgeu	r3,r2,38ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3878:	e0bfff17 	ldw	r2,-4(fp)
    387c:	11000017 	ldw	r4,0(r2)
    3880:	e0bffe17 	ldw	r2,-8(fp)
    3884:	10c00117 	ldw	r3,4(r2)
    3888:	e0bffc17 	ldw	r2,-16(fp)
    388c:	10c5c83a 	sub	r2,r2,r3
    3890:	2087c83a 	sub	r3,r4,r2
    3894:	e0bfff17 	ldw	r2,-4(fp)
    3898:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
    389c:	e13ffe17 	ldw	r4,-8(fp)
    38a0:	00037d40 	call	37d4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    38a4:	e03ffd15 	stw	zero,-12(fp)
    38a8:	00000206 	br	38b4 <xTaskCheckForTimeOut+0xa8>
		}
		else
		{
			xReturn = pdTRUE;
    38ac:	00800044 	movi	r2,1
    38b0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
    38b4:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    38b8:	e0bffd17 	ldw	r2,-12(fp)
}
    38bc:	e037883a 	mov	sp,fp
    38c0:	dfc00117 	ldw	ra,4(sp)
    38c4:	df000017 	ldw	fp,0(sp)
    38c8:	dec00204 	addi	sp,sp,8
    38cc:	f800283a 	ret

000038d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    38d0:	deffff04 	addi	sp,sp,-4
    38d4:	df000015 	stw	fp,0(sp)
    38d8:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
    38dc:	00800044 	movi	r2,1
    38e0:	d0a02f15 	stw	r2,-32580(gp)
}
    38e4:	e037883a 	mov	sp,fp
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00104 	addi	sp,sp,4
    38f0:	f800283a 	ret

000038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    38f4:	defffd04 	addi	sp,sp,-12
    38f8:	dfc00215 	stw	ra,8(sp)
    38fc:	df000115 	stw	fp,4(sp)
    3900:	df000104 	addi	fp,sp,4
    3904:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3908:	0003af40 	call	3af4 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    390c:	003ffe06 	br	3908 <prvIdleTask+0x14>

00003910 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3910:	defff804 	addi	sp,sp,-32
    3914:	dfc00715 	stw	ra,28(sp)
    3918:	df000615 	stw	fp,24(sp)
    391c:	df000604 	addi	fp,sp,24
    3920:	e13ffb15 	stw	r4,-20(fp)
    3924:	e17ffc15 	stw	r5,-16(fp)
    3928:	e1bffd15 	stw	r6,-12(fp)
    392c:	e1fffe15 	stw	r7,-8(fp)
    3930:	e0800217 	ldw	r2,8(fp)
    3934:	e0bfff0d 	sth	r2,-4(fp)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3938:	e03ffa15 	stw	zero,-24(fp)
    393c:	00001506 	br	3994 <prvInitialiseTCBVariables+0x84>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3940:	e13ffa17 	ldw	r4,-24(fp)
    3944:	e0fffa17 	ldw	r3,-24(fp)
    3948:	e0bffc17 	ldw	r2,-16(fp)
    394c:	1885883a 	add	r2,r3,r2
    3950:	10c00003 	ldbu	r3,0(r2)
    3954:	e0bffb17 	ldw	r2,-20(fp)
    3958:	2085883a 	add	r2,r4,r2
    395c:	10800d04 	addi	r2,r2,52
    3960:	10c00005 	stb	r3,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3964:	e0fffa17 	ldw	r3,-24(fp)
    3968:	e0bffc17 	ldw	r2,-16(fp)
    396c:	1885883a 	add	r2,r3,r2
    3970:	10800003 	ldbu	r2,0(r2)
    3974:	10803fcc 	andi	r2,r2,255
    3978:	1080201c 	xori	r2,r2,128
    397c:	10bfe004 	addi	r2,r2,-128
    3980:	1005003a 	cmpeq	r2,r2,zero
    3984:	1000061e 	bne	r2,zero,39a0 <prvInitialiseTCBVariables+0x90>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3988:	e0bffa17 	ldw	r2,-24(fp)
    398c:	10800044 	addi	r2,r2,1
    3990:	e0bffa15 	stw	r2,-24(fp)
    3994:	e0bffa17 	ldw	r2,-24(fp)
    3998:	10800230 	cmpltui	r2,r2,8
    399c:	103fe81e 	bne	r2,zero,3940 <prvInitialiseTCBVariables+0x30>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    39a0:	e0bffb17 	ldw	r2,-20(fp)
    39a4:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    39a8:	e0bffd17 	ldw	r2,-12(fp)
    39ac:	10800330 	cmpltui	r2,r2,12
    39b0:	1000021e 	bne	r2,zero,39bc <prvInitialiseTCBVariables+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    39b4:	008002c4 	movi	r2,11
    39b8:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    39bc:	e0fffb17 	ldw	r3,-20(fp)
    39c0:	e0bffd17 	ldw	r2,-12(fp)
    39c4:	18800b15 	stw	r2,44(r3)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    39c8:	e0fffb17 	ldw	r3,-20(fp)
    39cc:	e0bffd17 	ldw	r2,-12(fp)
    39d0:	18801015 	stw	r2,64(r3)
		pxTCB->uxMutexesHeld = 0;
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	11000104 	addi	r4,r2,4
    39e4:	00014740 	call	1474 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    39e8:	e0bffb17 	ldw	r2,-20(fp)
    39ec:	11000604 	addi	r4,r2,24
    39f0:	00014740 	call	1474 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    39f4:	e0fffb17 	ldw	r3,-20(fp)
    39f8:	e0bffb17 	ldw	r2,-20(fp)
    39fc:	18800415 	stw	r2,16(r3)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a00:	00c00304 	movi	r3,12
    3a04:	e0bffd17 	ldw	r2,-12(fp)
    3a08:	1887c83a 	sub	r3,r3,r2
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3a14:	e0fffb17 	ldw	r3,-20(fp)
    3a18:	e0bffb17 	ldw	r2,-20(fp)
    3a1c:	18800915 	stw	r2,36(r3)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10000f15 	stw	zero,60(r2)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    3a28:	e0bffb17 	ldw	r2,-20(fp)
    3a2c:	10001215 	stw	zero,72(r2)
		pxTCB->eNotifyState = eNotWaitingNotification;
    3a30:	e0bffb17 	ldw	r2,-20(fp)
    3a34:	10001315 	stw	zero,76(r2)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    3a38:	e037883a 	mov	sp,fp
    3a3c:	dfc00117 	ldw	ra,4(sp)
    3a40:	df000017 	ldw	fp,0(sp)
    3a44:	dec00204 	addi	sp,sp,8
    3a48:	f800283a 	ret

00003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3a4c:	defffd04 	addi	sp,sp,-12
    3a50:	dfc00215 	stw	ra,8(sp)
    3a54:	df000115 	stw	fp,4(sp)
    3a58:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a5c:	e03fff15 	stw	zero,-4(fp)
    3a60:	00000a06 	br	3a8c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a64:	e0bfff17 	ldw	r2,-4(fp)
    3a68:	10800524 	muli	r2,r2,20
    3a6c:	1007883a 	mov	r3,r2
    3a70:	00820234 	movhi	r2,2056
    3a74:	10be6504 	addi	r2,r2,-1644
    3a78:	1889883a 	add	r4,r3,r2
    3a7c:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10800044 	addi	r2,r2,1
    3a88:	e0bfff15 	stw	r2,-4(fp)
    3a8c:	e0bfff17 	ldw	r2,-4(fp)
    3a90:	10800330 	cmpltui	r2,r2,12
    3a94:	103ff31e 	bne	r2,zero,3a64 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3a98:	01020234 	movhi	r4,2056
    3a9c:	213ea104 	addi	r4,r4,-1404
    3aa0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3aa4:	01020234 	movhi	r4,2056
    3aa8:	213ea604 	addi	r4,r4,-1384
    3aac:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3ab0:	01020234 	movhi	r4,2056
    3ab4:	213eab04 	addi	r4,r4,-1364
    3ab8:	00014040 	call	1404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3abc:	01020234 	movhi	r4,2056
    3ac0:	213eb004 	addi	r4,r4,-1344
    3ac4:	00014040 	call	1404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3ac8:	00820234 	movhi	r2,2056
    3acc:	10bea104 	addi	r2,r2,-1404
    3ad0:	d0a03315 	stw	r2,-32564(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ad4:	00820234 	movhi	r2,2056
    3ad8:	10bea604 	addi	r2,r2,-1384
    3adc:	d0a03415 	stw	r2,-32560(gp)
}
    3ae0:	e037883a 	mov	sp,fp
    3ae4:	dfc00117 	ldw	ra,4(sp)
    3ae8:	df000017 	ldw	fp,0(sp)
    3aec:	dec00204 	addi	sp,sp,8
    3af0:	f800283a 	ret

00003af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3af4:	defffc04 	addi	sp,sp,-16
    3af8:	dfc00315 	stw	ra,12(sp)
    3afc:	df000215 	stw	fp,8(sp)
    3b00:	df000204 	addi	fp,sp,8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b04:	00001c06 	br	3b78 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
    3b08:	0002ff00 	call	2ff0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3b0c:	00820234 	movhi	r2,2056
    3b10:	10beb004 	addi	r2,r2,-1344
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	1005003a 	cmpeq	r2,r2,zero
    3b1c:	e0bfff15 	stw	r2,-4(fp)
			}
			( void ) xTaskResumeAll();
    3b20:	00030180 	call	3018 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3b24:	e0bfff17 	ldw	r2,-4(fp)
    3b28:	1004c03a 	cmpne	r2,r2,zero
    3b2c:	1000121e 	bne	r2,zero,3b78 <prvCheckTasksWaitingTermination+0x84>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3b30:	00041140 	call	4114 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3b34:	00820234 	movhi	r2,2056
    3b38:	10beb004 	addi	r2,r2,-1344
    3b3c:	10800317 	ldw	r2,12(r2)
    3b40:	10800317 	ldw	r2,12(r2)
    3b44:	e0bffe15 	stw	r2,-8(fp)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3b48:	e0bffe17 	ldw	r2,-8(fp)
    3b4c:	11000104 	addi	r4,r2,4
    3b50:	00015f80 	call	15f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
    3b54:	d0a02a17 	ldw	r2,-32600(gp)
    3b58:	10bfffc4 	addi	r2,r2,-1
    3b5c:	d0a02a15 	stw	r2,-32600(gp)
					--uxTasksDeleted;
    3b60:	d0a02917 	ldw	r2,-32604(gp)
    3b64:	10bfffc4 	addi	r2,r2,-1
    3b68:	d0a02915 	stw	r2,-32604(gp)
				}
				taskEXIT_CRITICAL();
    3b6c:	00041680 	call	4168 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
    3b70:	e13ffe17 	ldw	r4,-8(fp)
    3b74:	0003dc00 	call	3dc0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b78:	d0a02917 	ldw	r2,-32604(gp)
    3b7c:	1004c03a 	cmpne	r2,r2,zero
    3b80:	103fe11e 	bne	r2,zero,3b08 <prvCheckTasksWaitingTermination+0x14>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3b84:	e037883a 	mov	sp,fp
    3b88:	dfc00117 	ldw	ra,4(sp)
    3b8c:	df000017 	ldw	fp,0(sp)
    3b90:	dec00204 	addi	sp,sp,8
    3b94:	f800283a 	ret

00003b98 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3b98:	defffd04 	addi	sp,sp,-12
    3b9c:	dfc00215 	stw	ra,8(sp)
    3ba0:	df000115 	stw	fp,4(sp)
    3ba4:	df000104 	addi	fp,sp,4
    3ba8:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3bac:	d0e02817 	ldw	r3,-32608(gp)
    3bb0:	e0bfff17 	ldw	r2,-4(fp)
    3bb4:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xTickCount )
    3bb8:	d0e02b17 	ldw	r3,-32596(gp)
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	10c0052e 	bgeu	r2,r3,3bd8 <prvAddCurrentTaskToDelayedList+0x40>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bc4:	d1203417 	ldw	r4,-32560(gp)
    3bc8:	d0a02817 	ldw	r2,-32608(gp)
    3bcc:	11400104 	addi	r5,r2,4
    3bd0:	00015240 	call	1524 <vListInsert>
    3bd4:	00000906 	br	3bfc <prvAddCurrentTaskToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bd8:	d1203317 	ldw	r4,-32564(gp)
    3bdc:	d0a02817 	ldw	r2,-32608(gp)
    3be0:	11400104 	addi	r5,r2,4
    3be4:	00015240 	call	1524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3be8:	d0e00317 	ldw	r3,-32756(gp)
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	10c0022e 	bgeu	r2,r3,3bfc <prvAddCurrentTaskToDelayedList+0x64>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	d0a00315 	stw	r2,-32756(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3bfc:	e037883a 	mov	sp,fp
    3c00:	dfc00117 	ldw	ra,4(sp)
    3c04:	df000017 	ldw	fp,0(sp)
    3c08:	dec00204 	addi	sp,sp,8
    3c0c:	f800283a 	ret

00003c10 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    3c10:	defff904 	addi	sp,sp,-28
    3c14:	dfc00615 	stw	ra,24(sp)
    3c18:	df000515 	stw	fp,20(sp)
    3c1c:	df000504 	addi	fp,sp,20
    3c20:	e17ffe15 	stw	r5,-8(fp)
    3c24:	e13ffd0d 	sth	r4,-12(fp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c28:	e0bffe17 	ldw	r2,-8(fp)
    3c2c:	1004c03a 	cmpne	r2,r2,zero
    3c30:	1000071e 	bne	r2,zero,3c50 <prvAllocateTCBAndStack+0x40>
    3c34:	e0bffd0b 	ldhu	r2,-12(fp)
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	1085883a 	add	r2,r2,r2
    3c40:	1009883a 	mov	r4,r2
    3c44:	0000fbc0 	call	fbc <pvPortMalloc>
    3c48:	e0bfff15 	stw	r2,-4(fp)
    3c4c:	00000206 	br	3c58 <prvAllocateTCBAndStack+0x48>
    3c50:	e0bffe17 	ldw	r2,-8(fp)
    3c54:	e0bfff15 	stw	r2,-4(fp)
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	e0bffb15 	stw	r2,-20(fp)

		if( pxStack != NULL )
    3c60:	e0bffb17 	ldw	r2,-20(fp)
    3c64:	1005003a 	cmpeq	r2,r2,zero
    3c68:	10000d1e 	bne	r2,zero,3ca0 <prvAllocateTCBAndStack+0x90>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3c6c:	01001404 	movi	r4,80
    3c70:	0000fbc0 	call	fbc <pvPortMalloc>
    3c74:	e0bffc15 	stw	r2,-16(fp)

			if( pxNewTCB != NULL )
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	1005003a 	cmpeq	r2,r2,zero
    3c80:	1000041e 	bne	r2,zero,3c94 <prvAllocateTCBAndStack+0x84>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    3c84:	e0fffc17 	ldw	r3,-16(fp)
    3c88:	e0bffb17 	ldw	r2,-20(fp)
    3c8c:	18800c15 	stw	r2,48(r3)
    3c90:	00000406 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    3c94:	e13ffb17 	ldw	r4,-20(fp)
    3c98:	00011500 	call	1150 <vPortFree>
    3c9c:	00000106 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
		}
		else
		{
			pxNewTCB = NULL;
    3ca0:	e03ffc15 	stw	zero,-16(fp)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
    3ca4:	e0bffc17 	ldw	r2,-16(fp)
    3ca8:	1005003a 	cmpeq	r2,r2,zero
    3cac:	1000081e 	bne	r2,zero,3cd0 <prvAllocateTCBAndStack+0xc0>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3cb0:	e0bffc17 	ldw	r2,-16(fp)
    3cb4:	11000c17 	ldw	r4,48(r2)
    3cb8:	e0bffd0b 	ldhu	r2,-12(fp)
    3cbc:	1085883a 	add	r2,r2,r2
    3cc0:	1085883a 	add	r2,r2,r2
    3cc4:	100d883a 	mov	r6,r2
    3cc8:	01402944 	movi	r5,165
    3ccc:	00078280 	call	7828 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    3cd0:	e0bffc17 	ldw	r2,-16(fp)
}
    3cd4:	e037883a 	mov	sp,fp
    3cd8:	dfc00117 	ldw	ra,4(sp)
    3cdc:	df000017 	ldw	fp,0(sp)
    3ce0:	dec00204 	addi	sp,sp,8
    3ce4:	f800283a 	ret

00003ce8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    3ce8:	defffd04 	addi	sp,sp,-12
    3cec:	df000215 	stw	fp,8(sp)
    3cf0:	df000204 	addi	fp,sp,8
    3cf4:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
    3cf8:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cfc:	00000606 	br	3d18 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
    3d00:	e0bfff17 	ldw	r2,-4(fp)
    3d04:	10800044 	addi	r2,r2,1
    3d08:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
    3d0c:	e0bffe17 	ldw	r2,-8(fp)
    3d10:	10800044 	addi	r2,r2,1
    3d14:	e0bffe15 	stw	r2,-8(fp)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3d18:	e0bfff17 	ldw	r2,-4(fp)
    3d1c:	10800003 	ldbu	r2,0(r2)
    3d20:	10803fcc 	andi	r2,r2,255
    3d24:	10802960 	cmpeqi	r2,r2,165
    3d28:	103ff51e 	bne	r2,zero,3d00 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3d2c:	e0bffe17 	ldw	r2,-8(fp)
    3d30:	1004d0ba 	srli	r2,r2,2
    3d34:	e0bffe15 	stw	r2,-8(fp)

		return ( uint16_t ) ulCount;
    3d38:	e0bffe17 	ldw	r2,-8(fp)
    3d3c:	10bfffcc 	andi	r2,r2,65535
	}
    3d40:	e037883a 	mov	sp,fp
    3d44:	df000017 	ldw	fp,0(sp)
    3d48:	dec00104 	addi	sp,sp,4
    3d4c:	f800283a 	ret

00003d50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    3d50:	defff904 	addi	sp,sp,-28
    3d54:	dfc00615 	stw	ra,24(sp)
    3d58:	df000515 	stw	fp,20(sp)
    3d5c:	df000504 	addi	fp,sp,20
    3d60:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d64:	e0bffe17 	ldw	r2,-8(fp)
    3d68:	1004c03a 	cmpne	r2,r2,zero
    3d6c:	1000031e 	bne	r2,zero,3d7c <uxTaskGetStackHighWaterMark+0x2c>
    3d70:	d0a02817 	ldw	r2,-32608(gp)
    3d74:	e0bfff15 	stw	r2,-4(fp)
    3d78:	00000206 	br	3d84 <uxTaskGetStackHighWaterMark+0x34>
    3d7c:	e0bffe17 	ldw	r2,-8(fp)
    3d80:	e0bfff15 	stw	r2,-4(fp)
    3d84:	e0bfff17 	ldw	r2,-4(fp)
    3d88:	e0bffd15 	stw	r2,-12(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	10800c17 	ldw	r2,48(r2)
    3d94:	e0bffc15 	stw	r2,-16(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    3d98:	e13ffc17 	ldw	r4,-16(fp)
    3d9c:	0003ce80 	call	3ce8 <prvTaskCheckFreeStackSpace>
    3da0:	10bfffcc 	andi	r2,r2,65535
    3da4:	e0bffb15 	stw	r2,-20(fp)

		return uxReturn;
    3da8:	e0bffb17 	ldw	r2,-20(fp)
	}
    3dac:	e037883a 	mov	sp,fp
    3db0:	dfc00117 	ldw	ra,4(sp)
    3db4:	df000017 	ldw	fp,0(sp)
    3db8:	dec00204 	addi	sp,sp,8
    3dbc:	f800283a 	ret

00003dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3dc0:	defffd04 	addi	sp,sp,-12
    3dc4:	dfc00215 	stw	ra,8(sp)
    3dc8:	df000115 	stw	fp,4(sp)
    3dcc:	df000104 	addi	fp,sp,4
    3dd0:	e13fff15 	stw	r4,-4(fp)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    3dd4:	e0bfff17 	ldw	r2,-4(fp)
    3dd8:	11000c17 	ldw	r4,48(r2)
    3ddc:	00011500 	call	1150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    3de0:	e13fff17 	ldw	r4,-4(fp)
    3de4:	00011500 	call	1150 <vPortFree>
	}
    3de8:	e037883a 	mov	sp,fp
    3dec:	dfc00117 	ldw	ra,4(sp)
    3df0:	df000017 	ldw	fp,0(sp)
    3df4:	dec00204 	addi	sp,sp,8
    3df8:	f800283a 	ret

00003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3dfc:	defffd04 	addi	sp,sp,-12
    3e00:	df000215 	stw	fp,8(sp)
    3e04:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3e08:	d0a03317 	ldw	r2,-32564(gp)
    3e0c:	10800017 	ldw	r2,0(r2)
    3e10:	1004c03a 	cmpne	r2,r2,zero
    3e14:	1000031e 	bne	r2,zero,3e24 <prvResetNextTaskUnblockTime+0x28>
    3e18:	00800044 	movi	r2,1
    3e1c:	e0bfff05 	stb	r2,-4(fp)
    3e20:	00000106 	br	3e28 <prvResetNextTaskUnblockTime+0x2c>
    3e24:	e03fff05 	stb	zero,-4(fp)
    3e28:	e0bfff03 	ldbu	r2,-4(fp)
    3e2c:	1005003a 	cmpeq	r2,r2,zero
    3e30:	1000031e 	bne	r2,zero,3e40 <prvResetNextTaskUnblockTime+0x44>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3e34:	00bfffc4 	movi	r2,-1
    3e38:	d0a00315 	stw	r2,-32756(gp)
    3e3c:	00000706 	br	3e5c <prvResetNextTaskUnblockTime+0x60>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3e40:	d0a03317 	ldw	r2,-32564(gp)
    3e44:	10800317 	ldw	r2,12(r2)
    3e48:	10800317 	ldw	r2,12(r2)
    3e4c:	e0bffe15 	stw	r2,-8(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3e50:	e0bffe17 	ldw	r2,-8(fp)
    3e54:	10800117 	ldw	r2,4(r2)
    3e58:	d0a00315 	stw	r2,-32756(gp)
	}
}
    3e5c:	e037883a 	mov	sp,fp
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00104 	addi	sp,sp,4
    3e68:	f800283a 	ret

00003e6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3e6c:	defffe04 	addi	sp,sp,-8
    3e70:	df000115 	stw	fp,4(sp)
    3e74:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e78:	d0a02817 	ldw	r2,-32608(gp)
    3e7c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
    3e80:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e84:	e037883a 	mov	sp,fp
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00104 	addi	sp,sp,4
    3e90:	f800283a 	ret

00003e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3e94:	defffe04 	addi	sp,sp,-8
    3e98:	df000115 	stw	fp,4(sp)
    3e9c:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3ea0:	d0a02d17 	ldw	r2,-32588(gp)
    3ea4:	1004c03a 	cmpne	r2,r2,zero
    3ea8:	1000031e 	bne	r2,zero,3eb8 <xTaskGetSchedulerState+0x24>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3eac:	00800044 	movi	r2,1
    3eb0:	e0bfff15 	stw	r2,-4(fp)
    3eb4:	00000706 	br	3ed4 <xTaskGetSchedulerState+0x40>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3eb8:	d0a03217 	ldw	r2,-32568(gp)
    3ebc:	1004c03a 	cmpne	r2,r2,zero
    3ec0:	1000031e 	bne	r2,zero,3ed0 <xTaskGetSchedulerState+0x3c>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3ec4:	00800084 	movi	r2,2
    3ec8:	e0bfff15 	stw	r2,-4(fp)
    3ecc:	00000106 	br	3ed4 <xTaskGetSchedulerState+0x40>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3ed0:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
	}
    3ed8:	e037883a 	mov	sp,fp
    3edc:	df000017 	ldw	fp,0(sp)
    3ee0:	dec00104 	addi	sp,sp,4
    3ee4:	f800283a 	ret

00003ee8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3ee8:	defffb04 	addi	sp,sp,-20
    3eec:	dfc00415 	stw	ra,16(sp)
    3ef0:	df000315 	stw	fp,12(sp)
    3ef4:	df000304 	addi	fp,sp,12
    3ef8:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3efc:	e0bffe17 	ldw	r2,-8(fp)
    3f00:	e0bffd15 	stw	r2,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3f04:	e0bffe17 	ldw	r2,-8(fp)
    3f08:	1005003a 	cmpeq	r2,r2,zero
    3f0c:	10003d1e 	bne	r2,zero,4004 <vTaskPriorityInherit+0x11c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	10c00b17 	ldw	r3,44(r2)
    3f18:	d0a02817 	ldw	r2,-32608(gp)
    3f1c:	10800b17 	ldw	r2,44(r2)
    3f20:	1880382e 	bgeu	r3,r2,4004 <vTaskPriorityInherit+0x11c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3f24:	e0bffd17 	ldw	r2,-12(fp)
    3f28:	10800617 	ldw	r2,24(r2)
    3f2c:	1004803a 	cmplt	r2,r2,zero
    3f30:	1000061e 	bne	r2,zero,3f4c <vTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3f34:	d0a02817 	ldw	r2,-32608(gp)
    3f38:	10c00b17 	ldw	r3,44(r2)
    3f3c:	00800304 	movi	r2,12
    3f40:	10c7c83a 	sub	r3,r2,r3
    3f44:	e0bffd17 	ldw	r2,-12(fp)
    3f48:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3f4c:	e0bffd17 	ldw	r2,-12(fp)
    3f50:	11000517 	ldw	r4,20(r2)
    3f54:	e0bffd17 	ldw	r2,-12(fp)
    3f58:	10800b17 	ldw	r2,44(r2)
    3f5c:	10800524 	muli	r2,r2,20
    3f60:	1007883a 	mov	r3,r2
    3f64:	00820234 	movhi	r2,2056
    3f68:	10be6504 	addi	r2,r2,-1644
    3f6c:	1885883a 	add	r2,r3,r2
    3f70:	2080031e 	bne	r4,r2,3f80 <vTaskPriorityInherit+0x98>
    3f74:	00800044 	movi	r2,1
    3f78:	e0bfff05 	stb	r2,-4(fp)
    3f7c:	00000106 	br	3f84 <vTaskPriorityInherit+0x9c>
    3f80:	e03fff05 	stb	zero,-4(fp)
    3f84:	e0bfff03 	ldbu	r2,-4(fp)
    3f88:	1005003a 	cmpeq	r2,r2,zero
    3f8c:	1000191e 	bne	r2,zero,3ff4 <vTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	11000104 	addi	r4,r2,4
    3f98:	00015f80 	call	15f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f9c:	d0a02817 	ldw	r2,-32608(gp)
    3fa0:	10c00b17 	ldw	r3,44(r2)
    3fa4:	e0bffd17 	ldw	r2,-12(fp)
    3fa8:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxTCB );
    3fac:	e0bffd17 	ldw	r2,-12(fp)
    3fb0:	10c00b17 	ldw	r3,44(r2)
    3fb4:	d0a02c17 	ldw	r2,-32592(gp)
    3fb8:	10c0032e 	bgeu	r2,r3,3fc8 <vTaskPriorityInherit+0xe0>
    3fbc:	e0bffd17 	ldw	r2,-12(fp)
    3fc0:	10800b17 	ldw	r2,44(r2)
    3fc4:	d0a02c15 	stw	r2,-32592(gp)
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	10800b17 	ldw	r2,44(r2)
    3fd0:	10800524 	muli	r2,r2,20
    3fd4:	1007883a 	mov	r3,r2
    3fd8:	00820234 	movhi	r2,2056
    3fdc:	10be6504 	addi	r2,r2,-1644
    3fe0:	1889883a 	add	r4,r3,r2
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	11400104 	addi	r5,r2,4
    3fec:	000149c0 	call	149c <vListInsertEnd>
    3ff0:	00000406 	br	4004 <vTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3ff4:	d0a02817 	ldw	r2,-32608(gp)
    3ff8:	10c00b17 	ldw	r3,44(r2)
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10c00b15 	stw	r3,44(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4004:	e037883a 	mov	sp,fp
    4008:	dfc00117 	ldw	ra,4(sp)
    400c:	df000017 	ldw	fp,0(sp)
    4010:	dec00204 	addi	sp,sp,8
    4014:	f800283a 	ret

00004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4018:	defffb04 	addi	sp,sp,-20
    401c:	dfc00415 	stw	ra,16(sp)
    4020:	df000315 	stw	fp,12(sp)
    4024:	df000304 	addi	fp,sp,12
    4028:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    402c:	e0bfff17 	ldw	r2,-4(fp)
    4030:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
    4034:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
    4038:	e0bfff17 	ldw	r2,-4(fp)
    403c:	1005003a 	cmpeq	r2,r2,zero
    4040:	10002e1e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4044:	e0bffe17 	ldw	r2,-8(fp)
    4048:	10801117 	ldw	r2,68(r2)
    404c:	10ffffc4 	addi	r3,r2,-1
    4050:	e0bffe17 	ldw	r2,-8(fp)
    4054:	10c01115 	stw	r3,68(r2)

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	10c00b17 	ldw	r3,44(r2)
    4060:	e0bffe17 	ldw	r2,-8(fp)
    4064:	10801017 	ldw	r2,64(r2)
    4068:	18802426 	beq	r3,r2,40fc <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    406c:	e0bffe17 	ldw	r2,-8(fp)
    4070:	10801117 	ldw	r2,68(r2)
    4074:	1004c03a 	cmpne	r2,r2,zero
    4078:	1000201e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    407c:	e0bffe17 	ldw	r2,-8(fp)
    4080:	11000104 	addi	r4,r2,4
    4084:	00015f80 	call	15f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4088:	e0bffe17 	ldw	r2,-8(fp)
    408c:	10c01017 	ldw	r3,64(r2)
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4098:	e0bffe17 	ldw	r2,-8(fp)
    409c:	10c00b17 	ldw	r3,44(r2)
    40a0:	00800304 	movi	r2,12
    40a4:	10c7c83a 	sub	r3,r2,r3
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10c00b17 	ldw	r3,44(r2)
    40b8:	d0a02c17 	ldw	r2,-32592(gp)
    40bc:	10c0032e 	bgeu	r2,r3,40cc <xTaskPriorityDisinherit+0xb4>
    40c0:	e0bffe17 	ldw	r2,-8(fp)
    40c4:	10800b17 	ldw	r2,44(r2)
    40c8:	d0a02c15 	stw	r2,-32592(gp)
    40cc:	e0bffe17 	ldw	r2,-8(fp)
    40d0:	10800b17 	ldw	r2,44(r2)
    40d4:	10800524 	muli	r2,r2,20
    40d8:	1007883a 	mov	r3,r2
    40dc:	00820234 	movhi	r2,2056
    40e0:	10be6504 	addi	r2,r2,-1644
    40e4:	1889883a 	add	r4,r3,r2
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	11400104 	addi	r5,r2,4
    40f0:	000149c0 	call	149c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    40f4:	00800044 	movi	r2,1
    40f8:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    40fc:	e0bffd17 	ldw	r2,-12(fp)
	}
    4100:	e037883a 	mov	sp,fp
    4104:	dfc00117 	ldw	ra,4(sp)
    4108:	df000017 	ldw	fp,0(sp)
    410c:	dec00204 	addi	sp,sp,8
    4110:	f800283a 	ret

00004114 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    4114:	defffe04 	addi	sp,sp,-8
    4118:	df000115 	stw	fp,4(sp)
    411c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4120:	0005303a 	rdctl	r2,status
    4124:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4128:	e0ffff17 	ldw	r3,-4(fp)
    412c:	00bfff84 	movi	r2,-2
    4130:	1884703a 	and	r2,r3,r2
    4134:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    4138:	d0a02d17 	ldw	r2,-32588(gp)
    413c:	1005003a 	cmpeq	r2,r2,zero
    4140:	1000051e 	bne	r2,zero,4158 <vTaskEnterCritical+0x44>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    4144:	d0e02817 	ldw	r3,-32608(gp)
    4148:	18800f17 	ldw	r2,60(r3)
    414c:	10800044 	addi	r2,r2,1
    4150:	18800f15 	stw	r2,60(r3)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    4154:	d0a02817 	ldw	r2,-32608(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4158:	e037883a 	mov	sp,fp
    415c:	df000017 	ldw	fp,0(sp)
    4160:	dec00104 	addi	sp,sp,4
    4164:	f800283a 	ret

00004168 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    4168:	defffe04 	addi	sp,sp,-8
    416c:	df000115 	stw	fp,4(sp)
    4170:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
    4174:	d0a02d17 	ldw	r2,-32588(gp)
    4178:	1005003a 	cmpeq	r2,r2,zero
    417c:	1000101e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    4180:	d0a02817 	ldw	r2,-32608(gp)
    4184:	10800f17 	ldw	r2,60(r2)
    4188:	1005003a 	cmpeq	r2,r2,zero
    418c:	10000c1e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    4190:	d0e02817 	ldw	r3,-32608(gp)
    4194:	18800f17 	ldw	r2,60(r3)
    4198:	10bfffc4 	addi	r2,r2,-1
    419c:	18800f15 	stw	r2,60(r3)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    41a0:	d0a02817 	ldw	r2,-32608(gp)
    41a4:	10800f17 	ldw	r2,60(r2)
    41a8:	1004c03a 	cmpne	r2,r2,zero
    41ac:	1000041e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
    41b0:	00800044 	movi	r2,1
    41b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    41c0:	e037883a 	mov	sp,fp
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00104 	addi	sp,sp,4
    41cc:	f800283a 	ret

000041d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    41d0:	defffe04 	addi	sp,sp,-8
    41d4:	df000115 	stw	fp,4(sp)
    41d8:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    41dc:	d0a02817 	ldw	r2,-32608(gp)
    41e0:	10800617 	ldw	r2,24(r2)
    41e4:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41e8:	d1202817 	ldw	r4,-32608(gp)
    41ec:	d0a02817 	ldw	r2,-32608(gp)
    41f0:	10c00b17 	ldw	r3,44(r2)
    41f4:	00800304 	movi	r2,12
    41f8:	10c5c83a 	sub	r2,r2,r3
    41fc:	20800615 	stw	r2,24(r4)

	return uxReturn;
    4200:	e0bfff17 	ldw	r2,-4(fp)
}
    4204:	e037883a 	mov	sp,fp
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00104 	addi	sp,sp,4
    4210:	f800283a 	ret

00004214 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4214:	deffff04 	addi	sp,sp,-4
    4218:	df000015 	stw	fp,0(sp)
    421c:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4220:	d0a02817 	ldw	r2,-32608(gp)
    4224:	1005003a 	cmpeq	r2,r2,zero
    4228:	1000041e 	bne	r2,zero,423c <pvTaskIncrementMutexHeldCount+0x28>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    422c:	d0a02817 	ldw	r2,-32608(gp)
    4230:	10c01117 	ldw	r3,68(r2)
    4234:	18c00044 	addi	r3,r3,1
    4238:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
    423c:	d0a02817 	ldw	r2,-32608(gp)
	}
    4240:	e037883a 	mov	sp,fp
    4244:	df000017 	ldw	fp,0(sp)
    4248:	dec00104 	addi	sp,sp,4
    424c:	f800283a 	ret

00004250 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4250:	defffa04 	addi	sp,sp,-24
    4254:	dfc00515 	stw	ra,20(sp)
    4258:	df000415 	stw	fp,16(sp)
    425c:	df000404 	addi	fp,sp,16
    4260:	e13ffe15 	stw	r4,-8(fp)
    4264:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4268:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    426c:	d0a02817 	ldw	r2,-32608(gp)
    4270:	10801217 	ldw	r2,72(r2)
    4274:	1004c03a 	cmpne	r2,r2,zero
    4278:	1000101e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    427c:	d0e02817 	ldw	r3,-32608(gp)
    4280:	00800044 	movi	r2,1
    4284:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	1005003a 	cmpeq	r2,r2,zero
    4290:	10000a1e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4294:	d0a02817 	ldw	r2,-32608(gp)
    4298:	11000104 	addi	r4,r2,4
    429c:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    42a0:	d0e02b17 	ldw	r3,-32596(gp)
    42a4:	e0bfff17 	ldw	r2,-4(fp)
    42a8:	1885883a 	add	r2,r3,r2
    42ac:	e0bffd15 	stw	r2,-12(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    42b0:	e13ffd17 	ldw	r4,-12(fp)
    42b4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    42b8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    42bc:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    42c0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    42c4:	d0a02817 	ldw	r2,-32608(gp)
    42c8:	10801217 	ldw	r2,72(r2)
    42cc:	e0bffc15 	stw	r2,-16(fp)

			if( ulReturn != 0UL )
    42d0:	e0bffc17 	ldw	r2,-16(fp)
    42d4:	1005003a 	cmpeq	r2,r2,zero
    42d8:	10000a1e 	bne	r2,zero,4304 <ulTaskNotifyTake+0xb4>
			{
				if( xClearCountOnExit != pdFALSE )
    42dc:	e0bffe17 	ldw	r2,-8(fp)
    42e0:	1005003a 	cmpeq	r2,r2,zero
    42e4:	1000031e 	bne	r2,zero,42f4 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    42e8:	d0a02817 	ldw	r2,-32608(gp)
    42ec:	10001215 	stw	zero,72(r2)
    42f0:	00000406 	br	4304 <ulTaskNotifyTake+0xb4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    42f4:	d0a02817 	ldw	r2,-32608(gp)
    42f8:	10c01217 	ldw	r3,72(r2)
    42fc:	18ffffc4 	addi	r3,r3,-1
    4300:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4304:	d0a02817 	ldw	r2,-32608(gp)
    4308:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    430c:	00041680 	call	4168 <vTaskExitCritical>

		return ulReturn;
    4310:	e0bffc17 	ldw	r2,-16(fp)
	}
    4314:	e037883a 	mov	sp,fp
    4318:	dfc00117 	ldw	ra,4(sp)
    431c:	df000017 	ldw	fp,0(sp)
    4320:	dec00204 	addi	sp,sp,8
    4324:	f800283a 	ret

00004328 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4328:	defff804 	addi	sp,sp,-32
    432c:	dfc00715 	stw	ra,28(sp)
    4330:	df000615 	stw	fp,24(sp)
    4334:	df000604 	addi	fp,sp,24
    4338:	e13ffc15 	stw	r4,-16(fp)
    433c:	e17ffd15 	stw	r5,-12(fp)
    4340:	e1bffe15 	stw	r6,-8(fp)
    4344:	e1ffff15 	stw	r7,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4348:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    434c:	d0a02817 	ldw	r2,-32608(gp)
    4350:	10801317 	ldw	r2,76(r2)
    4354:	108000a0 	cmpeqi	r2,r2,2
    4358:	1000161e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    435c:	d0e02817 	ldw	r3,-32608(gp)
    4360:	19001217 	ldw	r4,72(r3)
    4364:	e0bffc17 	ldw	r2,-16(fp)
    4368:	0084303a 	nor	r2,zero,r2
    436c:	2084703a 	and	r2,r4,r2
    4370:	18801215 	stw	r2,72(r3)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    4374:	d0e02817 	ldw	r3,-32608(gp)
    4378:	00800044 	movi	r2,1
    437c:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	1005003a 	cmpeq	r2,r2,zero
    4388:	10000a1e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    438c:	d0a02817 	ldw	r2,-32608(gp)
    4390:	11000104 	addi	r4,r2,4
    4394:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4398:	d0e02b17 	ldw	r3,-32596(gp)
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	1885883a 	add	r2,r3,r2
    43a4:	e0bffb15 	stw	r2,-20(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    43a8:	e13ffb17 	ldw	r4,-20(fp)
    43ac:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    43b0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    43b4:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    43b8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			if( pulNotificationValue != NULL )
    43bc:	e0bffe17 	ldw	r2,-8(fp)
    43c0:	1005003a 	cmpeq	r2,r2,zero
    43c4:	1000041e 	bne	r2,zero,43d8 <xTaskNotifyWait+0xb0>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    43c8:	d0a02817 	ldw	r2,-32608(gp)
    43cc:	10c01217 	ldw	r3,72(r2)
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10c00015 	stw	r3,0(r2)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    43d8:	d0a02817 	ldw	r2,-32608(gp)
    43dc:	10801317 	ldw	r2,76(r2)
    43e0:	10800058 	cmpnei	r2,r2,1
    43e4:	1000021e 	bne	r2,zero,43f0 <xTaskNotifyWait+0xc8>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    43e8:	e03ffa15 	stw	zero,-24(fp)
    43ec:	00000806 	br	4410 <xTaskNotifyWait+0xe8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    43f0:	d0e02817 	ldw	r3,-32608(gp)
    43f4:	19001217 	ldw	r4,72(r3)
    43f8:	e0bffd17 	ldw	r2,-12(fp)
    43fc:	0084303a 	nor	r2,zero,r2
    4400:	2084703a 	and	r2,r4,r2
    4404:	18801215 	stw	r2,72(r3)
				xReturn = pdTRUE;
    4408:	00800044 	movi	r2,1
    440c:	e0bffa15 	stw	r2,-24(fp)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4410:	d0a02817 	ldw	r2,-32608(gp)
    4414:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4418:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    441c:	e0bffa17 	ldw	r2,-24(fp)
	}
    4420:	e037883a 	mov	sp,fp
    4424:	dfc00117 	ldw	ra,4(sp)
    4428:	df000017 	ldw	fp,0(sp)
    442c:	dec00204 	addi	sp,sp,8
    4430:	f800283a 	ret

00004434 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
    4434:	defff704 	addi	sp,sp,-36
    4438:	dfc00815 	stw	ra,32(sp)
    443c:	df000715 	stw	fp,28(sp)
    4440:	df000704 	addi	fp,sp,28
    4444:	e13ffc15 	stw	r4,-16(fp)
    4448:	e17ffd15 	stw	r5,-12(fp)
    444c:	e1bffe15 	stw	r6,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4450:	00800044 	movi	r2,1
    4454:	e0bff915 	stw	r2,-28(fp)

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4458:	e0bffc17 	ldw	r2,-16(fp)
    445c:	e0bffb15 	stw	r2,-20(fp)

		taskENTER_CRITICAL();
    4460:	00041140 	call	4114 <vTaskEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	10801317 	ldw	r2,76(r2)
    446c:	e0bffa15 	stw	r2,-24(fp)

			pxTCB->eNotifyState = eNotified;
    4470:	e0fffb17 	ldw	r3,-20(fp)
    4474:	00800084 	movi	r2,2
    4478:	18801315 	stw	r2,76(r3)

			switch( eAction )
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	e0bfff15 	stw	r2,-4(fp)
    4484:	e0ffff17 	ldw	r3,-4(fp)
    4488:	188000a0 	cmpeqi	r2,r3,2
    448c:	1000151e 	bne	r2,zero,44e4 <xTaskNotify+0xb0>
    4490:	e0ffff17 	ldw	r3,-4(fp)
    4494:	188000e8 	cmpgeui	r2,r3,3
    4498:	1000041e 	bne	r2,zero,44ac <xTaskNotify+0x78>
    449c:	e0ffff17 	ldw	r3,-4(fp)
    44a0:	18800060 	cmpeqi	r2,r3,1
    44a4:	1000081e 	bne	r2,zero,44c8 <xTaskNotify+0x94>
    44a8:	00002006 	br	452c <xTaskNotify+0xf8>
    44ac:	e0ffff17 	ldw	r3,-4(fp)
    44b0:	188000e0 	cmpeqi	r2,r3,3
    44b4:	1000111e 	bne	r2,zero,44fc <xTaskNotify+0xc8>
    44b8:	e0ffff17 	ldw	r3,-4(fp)
    44bc:	18800120 	cmpeqi	r2,r3,4
    44c0:	1000121e 	bne	r2,zero,450c <xTaskNotify+0xd8>
    44c4:	00001906 	br	452c <xTaskNotify+0xf8>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10c01217 	ldw	r3,72(r2)
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	1886b03a 	or	r3,r3,r2
    44d8:	e0bffb17 	ldw	r2,-20(fp)
    44dc:	10c01215 	stw	r3,72(r2)
					break;
    44e0:	00001206 	br	452c <xTaskNotify+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    44e4:	e0bffb17 	ldw	r2,-20(fp)
    44e8:	10801217 	ldw	r2,72(r2)
    44ec:	10c00044 	addi	r3,r2,1
    44f0:	e0bffb17 	ldw	r2,-20(fp)
    44f4:	10c01215 	stw	r3,72(r2)
					break;
    44f8:	00000c06 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    44fc:	e0fffb17 	ldw	r3,-20(fp)
    4500:	e0bffd17 	ldw	r2,-12(fp)
    4504:	18801215 	stw	r2,72(r3)
					break;
    4508:	00000806 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    450c:	e0bffa17 	ldw	r2,-24(fp)
    4510:	108000a0 	cmpeqi	r2,r2,2
    4514:	1000041e 	bne	r2,zero,4528 <xTaskNotify+0xf4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4518:	e0fffb17 	ldw	r3,-20(fp)
    451c:	e0bffd17 	ldw	r2,-12(fp)
    4520:	18801215 	stw	r2,72(r3)
    4524:	00000106 	br	452c <xTaskNotify+0xf8>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4528:	e03ff915 	stw	zero,-28(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    452c:	e0bffa17 	ldw	r2,-24(fp)
    4530:	10800058 	cmpnei	r2,r2,1
    4534:	10001a1e 	bne	r2,zero,45a0 <xTaskNotify+0x16c>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4538:	e0bffb17 	ldw	r2,-20(fp)
    453c:	11000104 	addi	r4,r2,4
    4540:	00015f80 	call	15f8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4544:	e0bffb17 	ldw	r2,-20(fp)
    4548:	10c00b17 	ldw	r3,44(r2)
    454c:	d0a02c17 	ldw	r2,-32592(gp)
    4550:	10c0032e 	bgeu	r2,r3,4560 <xTaskNotify+0x12c>
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10800b17 	ldw	r2,44(r2)
    455c:	d0a02c15 	stw	r2,-32592(gp)
    4560:	e0bffb17 	ldw	r2,-20(fp)
    4564:	10800b17 	ldw	r2,44(r2)
    4568:	10800524 	muli	r2,r2,20
    456c:	1007883a 	mov	r3,r2
    4570:	00820234 	movhi	r2,2056
    4574:	10be6504 	addi	r2,r2,-1644
    4578:	1889883a 	add	r4,r3,r2
    457c:	e0bffb17 	ldw	r2,-20(fp)
    4580:	11400104 	addi	r5,r2,4
    4584:	000149c0 	call	149c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4588:	e0bffb17 	ldw	r2,-20(fp)
    458c:	10c00b17 	ldw	r3,44(r2)
    4590:	d0a02817 	ldw	r2,-32608(gp)
    4594:	10800b17 	ldw	r2,44(r2)
    4598:	10c0012e 	bgeu	r2,r3,45a0 <xTaskNotify+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
    459c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    45a0:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    45a4:	e0bff917 	ldw	r2,-28(fp)
	}
    45a8:	e037883a 	mov	sp,fp
    45ac:	dfc00117 	ldw	ra,4(sp)
    45b0:	df000017 	ldw	fp,0(sp)
    45b4:	dec00204 	addi	sp,sp,8
    45b8:	f800283a 	ret

000045bc <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
    45bc:	defff504 	addi	sp,sp,-44
    45c0:	dfc00a15 	stw	ra,40(sp)
    45c4:	df000915 	stw	fp,36(sp)
    45c8:	df000904 	addi	fp,sp,36
    45cc:	e13ffb15 	stw	r4,-20(fp)
    45d0:	e17ffc15 	stw	r5,-16(fp)
    45d4:	e1bffd15 	stw	r6,-12(fp)
    45d8:	e1fffe15 	stw	r7,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    45dc:	00800044 	movi	r2,1
    45e0:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    45e4:	e0bffb17 	ldw	r2,-20(fp)
    45e8:	e0bffa15 	stw	r2,-24(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45ec:	e03ff715 	stw	zero,-36(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    45f0:	e0bffa17 	ldw	r2,-24(fp)
    45f4:	10801317 	ldw	r2,76(r2)
    45f8:	e0bff915 	stw	r2,-28(fp)

			pxTCB->eNotifyState = eNotified;
    45fc:	e0fffa17 	ldw	r3,-24(fp)
    4600:	00800084 	movi	r2,2
    4604:	18801315 	stw	r2,76(r3)

			switch( eAction )
    4608:	e0bffd17 	ldw	r2,-12(fp)
    460c:	e0bfff15 	stw	r2,-4(fp)
    4610:	e0ffff17 	ldw	r3,-4(fp)
    4614:	188000a0 	cmpeqi	r2,r3,2
    4618:	1000151e 	bne	r2,zero,4670 <xTaskNotifyFromISR+0xb4>
    461c:	e0ffff17 	ldw	r3,-4(fp)
    4620:	188000e8 	cmpgeui	r2,r3,3
    4624:	1000041e 	bne	r2,zero,4638 <xTaskNotifyFromISR+0x7c>
    4628:	e0ffff17 	ldw	r3,-4(fp)
    462c:	18800060 	cmpeqi	r2,r3,1
    4630:	1000081e 	bne	r2,zero,4654 <xTaskNotifyFromISR+0x98>
    4634:	00002006 	br	46b8 <xTaskNotifyFromISR+0xfc>
    4638:	e0ffff17 	ldw	r3,-4(fp)
    463c:	188000e0 	cmpeqi	r2,r3,3
    4640:	1000111e 	bne	r2,zero,4688 <xTaskNotifyFromISR+0xcc>
    4644:	e0ffff17 	ldw	r3,-4(fp)
    4648:	18800120 	cmpeqi	r2,r3,4
    464c:	1000121e 	bne	r2,zero,4698 <xTaskNotifyFromISR+0xdc>
    4650:	00001906 	br	46b8 <xTaskNotifyFromISR+0xfc>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4654:	e0bffa17 	ldw	r2,-24(fp)
    4658:	10c01217 	ldw	r3,72(r2)
    465c:	e0bffc17 	ldw	r2,-16(fp)
    4660:	1886b03a 	or	r3,r3,r2
    4664:	e0bffa17 	ldw	r2,-24(fp)
    4668:	10c01215 	stw	r3,72(r2)
					break;
    466c:	00001206 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4670:	e0bffa17 	ldw	r2,-24(fp)
    4674:	10801217 	ldw	r2,72(r2)
    4678:	10c00044 	addi	r3,r2,1
    467c:	e0bffa17 	ldw	r2,-24(fp)
    4680:	10c01215 	stw	r3,72(r2)
					break;
    4684:	00000c06 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4688:	e0fffa17 	ldw	r3,-24(fp)
    468c:	e0bffc17 	ldw	r2,-16(fp)
    4690:	18801215 	stw	r2,72(r3)
					break;
    4694:	00000806 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	108000a0 	cmpeqi	r2,r2,2
    46a0:	1000041e 	bne	r2,zero,46b4 <xTaskNotifyFromISR+0xf8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    46a4:	e0fffa17 	ldw	r3,-24(fp)
    46a8:	e0bffc17 	ldw	r2,-16(fp)
    46ac:	18801215 	stw	r2,72(r3)
    46b0:	00000106 	br	46b8 <xTaskNotifyFromISR+0xfc>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    46b4:	e03ff815 	stw	zero,-32(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    46b8:	e0bff917 	ldw	r2,-28(fp)
    46bc:	10800058 	cmpnei	r2,r2,1
    46c0:	1000281e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    46c4:	d0a03217 	ldw	r2,-32568(gp)
    46c8:	1004c03a 	cmpne	r2,r2,zero
    46cc:	1000151e 	bne	r2,zero,4724 <xTaskNotifyFromISR+0x168>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    46d0:	e0bffa17 	ldw	r2,-24(fp)
    46d4:	11000104 	addi	r4,r2,4
    46d8:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    46dc:	e0bffa17 	ldw	r2,-24(fp)
    46e0:	10c00b17 	ldw	r3,44(r2)
    46e4:	d0a02c17 	ldw	r2,-32592(gp)
    46e8:	10c0032e 	bgeu	r2,r3,46f8 <xTaskNotifyFromISR+0x13c>
    46ec:	e0bffa17 	ldw	r2,-24(fp)
    46f0:	10800b17 	ldw	r2,44(r2)
    46f4:	d0a02c15 	stw	r2,-32592(gp)
    46f8:	e0bffa17 	ldw	r2,-24(fp)
    46fc:	10800b17 	ldw	r2,44(r2)
    4700:	10800524 	muli	r2,r2,20
    4704:	1007883a 	mov	r3,r2
    4708:	00820234 	movhi	r2,2056
    470c:	10be6504 	addi	r2,r2,-1644
    4710:	1889883a 	add	r4,r3,r2
    4714:	e0bffa17 	ldw	r2,-24(fp)
    4718:	11400104 	addi	r5,r2,4
    471c:	000149c0 	call	149c <vListInsertEnd>
    4720:	00000506 	br	4738 <xTaskNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4724:	e0bffa17 	ldw	r2,-24(fp)
    4728:	11400604 	addi	r5,r2,24
    472c:	01020234 	movhi	r4,2056
    4730:	213eab04 	addi	r4,r4,-1364
    4734:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4738:	e0bffa17 	ldw	r2,-24(fp)
    473c:	10c00b17 	ldw	r3,44(r2)
    4740:	d0a02817 	ldw	r2,-32608(gp)
    4744:	10800b17 	ldw	r2,44(r2)
    4748:	10c0062e 	bgeu	r2,r3,4764 <xTaskNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    474c:	e0bffe17 	ldw	r2,-8(fp)
    4750:	1005003a 	cmpeq	r2,r2,zero
    4754:	1000031e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4758:	e0fffe17 	ldw	r3,-8(fp)
    475c:	00800044 	movi	r2,1
    4760:	18800015 	stw	r2,0(r3)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    4764:	e0bff817 	ldw	r2,-32(fp)
	}
    4768:	e037883a 	mov	sp,fp
    476c:	dfc00117 	ldw	ra,4(sp)
    4770:	df000017 	ldw	fp,0(sp)
    4774:	dec00204 	addi	sp,sp,8
    4778:	f800283a 	ret

0000477c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    477c:	defff904 	addi	sp,sp,-28
    4780:	dfc00615 	stw	ra,24(sp)
    4784:	df000515 	stw	fp,20(sp)
    4788:	df000504 	addi	fp,sp,20
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4794:	e0bffe17 	ldw	r2,-8(fp)
    4798:	e0bffd15 	stw	r2,-12(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    479c:	e03ffb15 	stw	zero,-20(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    47a0:	e0bffd17 	ldw	r2,-12(fp)
    47a4:	10801317 	ldw	r2,76(r2)
    47a8:	e0bffc15 	stw	r2,-16(fp)
			pxTCB->eNotifyState = eNotified;
    47ac:	e0fffd17 	ldw	r3,-12(fp)
    47b0:	00800084 	movi	r2,2
    47b4:	18801315 	stw	r2,76(r3)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    47b8:	e0bffd17 	ldw	r2,-12(fp)
    47bc:	10801217 	ldw	r2,72(r2)
    47c0:	10c00044 	addi	r3,r2,1
    47c4:	e0bffd17 	ldw	r2,-12(fp)
    47c8:	10c01215 	stw	r3,72(r2)

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10800058 	cmpnei	r2,r2,1
    47d4:	1000281e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47d8:	d0a03217 	ldw	r2,-32568(gp)
    47dc:	1004c03a 	cmpne	r2,r2,zero
    47e0:	1000151e 	bne	r2,zero,4838 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    47e4:	e0bffd17 	ldw	r2,-12(fp)
    47e8:	11000104 	addi	r4,r2,4
    47ec:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    47f0:	e0bffd17 	ldw	r2,-12(fp)
    47f4:	10c00b17 	ldw	r3,44(r2)
    47f8:	d0a02c17 	ldw	r2,-32592(gp)
    47fc:	10c0032e 	bgeu	r2,r3,480c <vTaskNotifyGiveFromISR+0x90>
    4800:	e0bffd17 	ldw	r2,-12(fp)
    4804:	10800b17 	ldw	r2,44(r2)
    4808:	d0a02c15 	stw	r2,-32592(gp)
    480c:	e0bffd17 	ldw	r2,-12(fp)
    4810:	10800b17 	ldw	r2,44(r2)
    4814:	10800524 	muli	r2,r2,20
    4818:	1007883a 	mov	r3,r2
    481c:	00820234 	movhi	r2,2056
    4820:	10be6504 	addi	r2,r2,-1644
    4824:	1889883a 	add	r4,r3,r2
    4828:	e0bffd17 	ldw	r2,-12(fp)
    482c:	11400104 	addi	r5,r2,4
    4830:	000149c0 	call	149c <vListInsertEnd>
    4834:	00000506 	br	484c <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4838:	e0bffd17 	ldw	r2,-12(fp)
    483c:	11400604 	addi	r5,r2,24
    4840:	01020234 	movhi	r4,2056
    4844:	213eab04 	addi	r4,r4,-1364
    4848:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10c00b17 	ldw	r3,44(r2)
    4854:	d0a02817 	ldw	r2,-32608(gp)
    4858:	10800b17 	ldw	r2,44(r2)
    485c:	10c0062e 	bgeu	r2,r3,4878 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	1005003a 	cmpeq	r2,r2,zero
    4868:	1000031e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    486c:	e0ffff17 	ldw	r3,-4(fp)
    4870:	00800044 	movi	r2,1
    4874:	18800015 	stw	r2,0(r3)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4878:	e037883a 	mov	sp,fp
    487c:	dfc00117 	ldw	ra,4(sp)
    4880:	df000017 	ldw	fp,0(sp)
    4884:	dec00204 	addi	sp,sp,8
    4888:	f800283a 	ret

0000488c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    488c:	defff904 	addi	sp,sp,-28
    4890:	dfc00615 	stw	ra,24(sp)
    4894:	df000515 	stw	fp,20(sp)
    4898:	df000504 	addi	fp,sp,20
BaseType_t xReturn = pdFAIL;
    489c:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    48a0:	00050440 	call	5044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    48a4:	d0a03517 	ldw	r2,-32556(gp)
    48a8:	1005003a 	cmpeq	r2,r2,zero
    48ac:	10000d1e 	bne	r2,zero,48e4 <xTimerCreateTimerTask+0x58>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    48b0:	008000c4 	movi	r2,3
    48b4:	d8800015 	stw	r2,0(sp)
    48b8:	d8000115 	stw	zero,4(sp)
    48bc:	d8000215 	stw	zero,8(sp)
    48c0:	d8000315 	stw	zero,12(sp)
    48c4:	01000034 	movhi	r4,0
    48c8:	2112d404 	addi	r4,r4,19280
    48cc:	01420034 	movhi	r5,2048
    48d0:	29401404 	addi	r5,r5,80
    48d4:	01820004 	movi	r6,2048
    48d8:	000f883a 	mov	r7,zero
    48dc:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    48e0:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    48e4:	e0bfff17 	ldw	r2,-4(fp)
}
    48e8:	e037883a 	mov	sp,fp
    48ec:	dfc00117 	ldw	ra,4(sp)
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00204 	addi	sp,sp,8
    48f8:	f800283a 	ret

000048fc <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    48fc:	defff904 	addi	sp,sp,-28
    4900:	dfc00615 	stw	ra,24(sp)
    4904:	df000515 	stw	fp,20(sp)
    4908:	df000504 	addi	fp,sp,20
    490c:	e13ffc15 	stw	r4,-16(fp)
    4910:	e17ffd15 	stw	r5,-12(fp)
    4914:	e1bffe15 	stw	r6,-8(fp)
    4918:	e1ffff15 	stw	r7,-4(fp)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1004c03a 	cmpne	r2,r2,zero
    4924:	1000021e 	bne	r2,zero,4930 <xTimerCreate+0x34>
	{
		pxNewTimer = NULL;
    4928:	e03ffb15 	stw	zero,-20(fp)
    492c:	00001906 	br	4994 <xTimerCreate+0x98>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4930:	01000a04 	movi	r4,40
    4934:	0000fbc0 	call	fbc <pvPortMalloc>
    4938:	e0bffb15 	stw	r2,-20(fp)
		if( pxNewTimer != NULL )
    493c:	e0bffb17 	ldw	r2,-20(fp)
    4940:	1005003a 	cmpeq	r2,r2,zero
    4944:	1000131e 	bne	r2,zero,4994 <xTimerCreate+0x98>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    4948:	00050440 	call	5044 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    494c:	e0fffb17 	ldw	r3,-20(fp)
    4950:	e0bffc17 	ldw	r2,-16(fp)
    4954:	18800015 	stw	r2,0(r3)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4958:	e0fffb17 	ldw	r3,-20(fp)
    495c:	e0bffd17 	ldw	r2,-12(fp)
    4960:	18800615 	stw	r2,24(r3)
			pxNewTimer->uxAutoReload = uxAutoReload;
    4964:	e0fffb17 	ldw	r3,-20(fp)
    4968:	e0bffe17 	ldw	r2,-8(fp)
    496c:	18800715 	stw	r2,28(r3)
			pxNewTimer->pvTimerID = pvTimerID;
    4970:	e0fffb17 	ldw	r3,-20(fp)
    4974:	e0bfff17 	ldw	r2,-4(fp)
    4978:	18800815 	stw	r2,32(r3)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    497c:	e0fffb17 	ldw	r3,-20(fp)
    4980:	e0800217 	ldw	r2,8(fp)
    4984:	18800915 	stw	r2,36(r3)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    4988:	e0bffb17 	ldw	r2,-20(fp)
    498c:	11000104 	addi	r4,r2,4
    4990:	00014740 	call	1474 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
    4994:	e0bffb17 	ldw	r2,-20(fp)
}
    4998:	e037883a 	mov	sp,fp
    499c:	dfc00117 	ldw	ra,4(sp)
    49a0:	df000017 	ldw	fp,0(sp)
    49a4:	dec00204 	addi	sp,sp,8
    49a8:	f800283a 	ret

000049ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    49ac:	defff604 	addi	sp,sp,-40
    49b0:	dfc00915 	stw	ra,36(sp)
    49b4:	df000815 	stw	fp,32(sp)
    49b8:	df000804 	addi	fp,sp,32
    49bc:	e13ffc15 	stw	r4,-16(fp)
    49c0:	e17ffd15 	stw	r5,-12(fp)
    49c4:	e1bffe15 	stw	r6,-8(fp)
    49c8:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
    49cc:	e03ff815 	stw	zero,-32(fp)
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    49d0:	d0a03517 	ldw	r2,-32556(gp)
    49d4:	1005003a 	cmpeq	r2,r2,zero
    49d8:	1000201e 	bne	r2,zero,4a5c <xTimerGenericCommand+0xb0>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    49dc:	e0bffd17 	ldw	r2,-12(fp)
    49e0:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    49e4:	e0bffe17 	ldw	r2,-8(fp)
    49e8:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    49ec:	e0bffc17 	ldw	r2,-16(fp)
    49f0:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	10800188 	cmpgei	r2,r2,6
    49fc:	1000111e 	bne	r2,zero,4a44 <xTimerGenericCommand+0x98>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a00:	0003e940 	call	3e94 <xTaskGetSchedulerState>
    4a04:	10800098 	cmpnei	r2,r2,2
    4a08:	1000071e 	bne	r2,zero,4a28 <xTimerGenericCommand+0x7c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4a0c:	d1203517 	ldw	r4,-32556(gp)
    4a10:	e17ff904 	addi	r5,fp,-28
    4a14:	e1800217 	ldw	r6,8(fp)
    4a18:	000f883a 	mov	r7,zero
    4a1c:	0001f100 	call	1f10 <xQueueGenericSend>
    4a20:	e0bff815 	stw	r2,-32(fp)
    4a24:	00000d06 	br	4a5c <xTimerGenericCommand+0xb0>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4a28:	d1203517 	ldw	r4,-32556(gp)
    4a2c:	e17ff904 	addi	r5,fp,-28
    4a30:	000d883a 	mov	r6,zero
    4a34:	000f883a 	mov	r7,zero
    4a38:	0001f100 	call	1f10 <xQueueGenericSend>
    4a3c:	e0bff815 	stw	r2,-32(fp)
    4a40:	00000606 	br	4a5c <xTimerGenericCommand+0xb0>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4a44:	d1203517 	ldw	r4,-32556(gp)
    4a48:	e17ff904 	addi	r5,fp,-28
    4a4c:	e1bfff17 	ldw	r6,-4(fp)
    4a50:	000f883a 	mov	r7,zero
    4a54:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
    4a58:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    4a5c:	e0bff817 	ldw	r2,-32(fp)
}
    4a60:	e037883a 	mov	sp,fp
    4a64:	dfc00117 	ldw	ra,4(sp)
    4a68:	df000017 	ldw	fp,0(sp)
    4a6c:	dec00204 	addi	sp,sp,8
    4a70:	f800283a 	ret

00004a74 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
    4a74:	defffd04 	addi	sp,sp,-12
    4a78:	df000215 	stw	fp,8(sp)
    4a7c:	df000204 	addi	fp,sp,8
    4a80:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    4a84:	e0bfff17 	ldw	r2,-4(fp)
    4a88:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pcTimerName;
    4a8c:	e0bffe17 	ldw	r2,-8(fp)
    4a90:	10800017 	ldw	r2,0(r2)
}
    4a94:	e037883a 	mov	sp,fp
    4a98:	df000017 	ldw	fp,0(sp)
    4a9c:	dec00104 	addi	sp,sp,4
    4aa0:	f800283a 	ret

00004aa4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    4aa4:	defff904 	addi	sp,sp,-28
    4aa8:	dfc00615 	stw	ra,24(sp)
    4aac:	df000515 	stw	fp,20(sp)
    4ab0:	df000504 	addi	fp,sp,20
    4ab4:	e13ffe15 	stw	r4,-8(fp)
    4ab8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4abc:	d0a03717 	ldw	r2,-32548(gp)
    4ac0:	10800317 	ldw	r2,12(r2)
    4ac4:	10800317 	ldw	r2,12(r2)
    4ac8:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4acc:	e0bffc17 	ldw	r2,-16(fp)
    4ad0:	11000104 	addi	r4,r2,4
    4ad4:	00015f80 	call	15f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4ad8:	e0bffc17 	ldw	r2,-16(fp)
    4adc:	10800717 	ldw	r2,28(r2)
    4ae0:	10800058 	cmpnei	r2,r2,1
    4ae4:	1000111e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    4ae8:	e0bffc17 	ldw	r2,-16(fp)
    4aec:	10c00617 	ldw	r3,24(r2)
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	188b883a 	add	r5,r3,r2
    4af8:	e13ffc17 	ldw	r4,-16(fp)
    4afc:	e1bfff17 	ldw	r6,-4(fp)
    4b00:	e1fffe17 	ldw	r7,-8(fp)
    4b04:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4b08:	10800058 	cmpnei	r2,r2,1
    4b0c:	1000071e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4b10:	d8000015 	stw	zero,0(sp)
    4b14:	e13ffc17 	ldw	r4,-16(fp)
    4b18:	000b883a 	mov	r5,zero
    4b1c:	e1bffe17 	ldw	r6,-8(fp)
    4b20:	000f883a 	mov	r7,zero
    4b24:	00049ac0 	call	49ac <xTimerGenericCommand>
    4b28:	e0bffd15 	stw	r2,-12(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4b2c:	e0bffc17 	ldw	r2,-16(fp)
    4b30:	10800917 	ldw	r2,36(r2)
    4b34:	e13ffc17 	ldw	r4,-16(fp)
    4b38:	103ee83a 	callr	r2
}
    4b3c:	e037883a 	mov	sp,fp
    4b40:	dfc00117 	ldw	ra,4(sp)
    4b44:	df000017 	ldw	fp,0(sp)
    4b48:	dec00204 	addi	sp,sp,8
    4b4c:	f800283a 	ret

00004b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4b50:	defffb04 	addi	sp,sp,-20
    4b54:	dfc00415 	stw	ra,16(sp)
    4b58:	df000315 	stw	fp,12(sp)
    4b5c:	df000304 	addi	fp,sp,12
    4b60:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    4b64:	e13ffe04 	addi	r4,fp,-8
    4b68:	0004c240 	call	4c24 <prvGetNextExpireTime>
    4b6c:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    4b70:	e17ffe17 	ldw	r5,-8(fp)
    4b74:	e13ffd17 	ldw	r4,-12(fp)
    4b78:	0004b840 	call	4b84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    4b7c:	0004db40 	call	4db4 <prvProcessReceivedCommands>
	}
    4b80:	003ff806 	br	4b64 <prvTimerTask+0x14>

00004b84 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    4b84:	defffa04 	addi	sp,sp,-24
    4b88:	dfc00515 	stw	ra,20(sp)
    4b8c:	df000415 	stw	fp,16(sp)
    4b90:	df000404 	addi	fp,sp,16
    4b94:	e13ffe15 	stw	r4,-8(fp)
    4b98:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4b9c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4ba0:	e13ffd04 	addi	r4,fp,-12
    4ba4:	0004c840 	call	4c84 <prvSampleTimeNow>
    4ba8:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
    4bac:	e0bffd17 	ldw	r2,-12(fp)
    4bb0:	1004c03a 	cmpne	r2,r2,zero
    4bb4:	1000151e 	bne	r2,zero,4c0c <prvProcessTimerOrBlockTask+0x88>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4bb8:	e0bfff17 	ldw	r2,-4(fp)
    4bbc:	1004c03a 	cmpne	r2,r2,zero
    4bc0:	1000081e 	bne	r2,zero,4be4 <prvProcessTimerOrBlockTask+0x60>
    4bc4:	e0fffe17 	ldw	r3,-8(fp)
    4bc8:	e0bffc17 	ldw	r2,-16(fp)
    4bcc:	10c00536 	bltu	r2,r3,4be4 <prvProcessTimerOrBlockTask+0x60>
			{
				( void ) xTaskResumeAll();
    4bd0:	00030180 	call	3018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4bd4:	e13ffe17 	ldw	r4,-8(fp)
    4bd8:	e17ffc17 	ldw	r5,-16(fp)
    4bdc:	0004aa40 	call	4aa4 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4be0:	00000b06 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4be4:	d1203517 	ldw	r4,-32556(gp)
    4be8:	e0fffe17 	ldw	r3,-8(fp)
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	188bc83a 	sub	r5,r3,r2
    4bf4:	0002b640 	call	2b64 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    4bf8:	00030180 	call	3018 <xTaskResumeAll>
    4bfc:	1004c03a 	cmpne	r2,r2,zero
    4c00:	1000031e 	bne	r2,zero,4c10 <prvProcessTimerOrBlockTask+0x8c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    4c04:	003b683a 	trap	0
    4c08:	00000106 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4c0c:	00030180 	call	3018 <xTaskResumeAll>
		}
	}
}
    4c10:	e037883a 	mov	sp,fp
    4c14:	dfc00117 	ldw	ra,4(sp)
    4c18:	df000017 	ldw	fp,0(sp)
    4c1c:	dec00204 	addi	sp,sp,8
    4c20:	f800283a 	ret

00004c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    4c24:	defffd04 	addi	sp,sp,-12
    4c28:	df000215 	stw	fp,8(sp)
    4c2c:	df000204 	addi	fp,sp,8
    4c30:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4c34:	d0a03717 	ldw	r2,-32548(gp)
    4c38:	10800017 	ldw	r2,0(r2)
    4c3c:	1007003a 	cmpeq	r3,r2,zero
    4c40:	e0bfff17 	ldw	r2,-4(fp)
    4c44:	10c00015 	stw	r3,0(r2)
	if( *pxListWasEmpty == pdFALSE )
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	10800017 	ldw	r2,0(r2)
    4c50:	1004c03a 	cmpne	r2,r2,zero
    4c54:	1000051e 	bne	r2,zero,4c6c <prvGetNextExpireTime+0x48>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4c58:	d0a03717 	ldw	r2,-32548(gp)
    4c5c:	10800317 	ldw	r2,12(r2)
    4c60:	10800017 	ldw	r2,0(r2)
    4c64:	e0bffe15 	stw	r2,-8(fp)
    4c68:	00000106 	br	4c70 <prvGetNextExpireTime+0x4c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4c6c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
    4c70:	e0bffe17 	ldw	r2,-8(fp)
}
    4c74:	e037883a 	mov	sp,fp
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00104 	addi	sp,sp,4
    4c80:	f800283a 	ret

00004c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4c84:	defffc04 	addi	sp,sp,-16
    4c88:	dfc00315 	stw	ra,12(sp)
    4c8c:	df000215 	stw	fp,8(sp)
    4c90:	df000204 	addi	fp,sp,8
    4c94:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    4c98:	00031680 	call	3168 <xTaskGetTickCount>
    4c9c:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
    4ca0:	d0e03617 	ldw	r3,-32552(gp)
    4ca4:	e0bffe17 	ldw	r2,-8(fp)
    4ca8:	10c0052e 	bgeu	r2,r3,4cc0 <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
    4cac:	0004f400 	call	4f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    4cb0:	e0ffff17 	ldw	r3,-4(fp)
    4cb4:	00800044 	movi	r2,1
    4cb8:	18800015 	stw	r2,0(r3)
    4cbc:	00000206 	br	4cc8 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4cc0:	e0bfff17 	ldw	r2,-4(fp)
    4cc4:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
    4cc8:	e0bffe17 	ldw	r2,-8(fp)
    4ccc:	d0a03615 	stw	r2,-32552(gp)

	return xTimeNow;
    4cd0:	e0bffe17 	ldw	r2,-8(fp)
}
    4cd4:	e037883a 	mov	sp,fp
    4cd8:	dfc00117 	ldw	ra,4(sp)
    4cdc:	df000017 	ldw	fp,0(sp)
    4ce0:	dec00204 	addi	sp,sp,8
    4ce4:	f800283a 	ret

00004ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4ce8:	defff904 	addi	sp,sp,-28
    4cec:	dfc00615 	stw	ra,24(sp)
    4cf0:	df000515 	stw	fp,20(sp)
    4cf4:	df000504 	addi	fp,sp,20
    4cf8:	e13ffc15 	stw	r4,-16(fp)
    4cfc:	e17ffd15 	stw	r5,-12(fp)
    4d00:	e1bffe15 	stw	r6,-8(fp)
    4d04:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
    4d08:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4d0c:	e0fffc17 	ldw	r3,-16(fp)
    4d10:	e0bffd17 	ldw	r2,-12(fp)
    4d14:	18800115 	stw	r2,4(r3)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4d18:	e0fffc17 	ldw	r3,-16(fp)
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	18800415 	stw	r2,16(r3)

	if( xNextExpiryTime <= xTimeNow )
    4d24:	e0fffd17 	ldw	r3,-12(fp)
    4d28:	e0bffe17 	ldw	r2,-8(fp)
    4d2c:	10c00e36 	bltu	r2,r3,4d68 <prvInsertTimerInActiveList+0x80>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4d30:	e0fffe17 	ldw	r3,-8(fp)
    4d34:	e0bfff17 	ldw	r2,-4(fp)
    4d38:	1887c83a 	sub	r3,r3,r2
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	10800617 	ldw	r2,24(r2)
    4d44:	18800336 	bltu	r3,r2,4d54 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4d48:	00800044 	movi	r2,1
    4d4c:	e0bffb15 	stw	r2,-20(fp)
    4d50:	00001206 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4d54:	d1203817 	ldw	r4,-32544(gp)
    4d58:	e0bffc17 	ldw	r2,-16(fp)
    4d5c:	11400104 	addi	r5,r2,4
    4d60:	00015240 	call	1524 <vListInsert>
    4d64:	00000d06 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d68:	e0fffe17 	ldw	r3,-8(fp)
    4d6c:	e0bfff17 	ldw	r2,-4(fp)
    4d70:	1880062e 	bgeu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
    4d74:	e0fffd17 	ldw	r3,-12(fp)
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	18800336 	bltu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4d80:	00800044 	movi	r2,1
    4d84:	e0bffb15 	stw	r2,-20(fp)
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d88:	00000406 	br	4d9c <prvInsertTimerInActiveList+0xb4>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d8c:	d1203717 	ldw	r4,-32548(gp)
    4d90:	e0bffc17 	ldw	r2,-16(fp)
    4d94:	11400104 	addi	r5,r2,4
    4d98:	00015240 	call	1524 <vListInsert>
		}
	}

	return xProcessTimerNow;
    4d9c:	e0bffb17 	ldw	r2,-20(fp)
}
    4da0:	e037883a 	mov	sp,fp
    4da4:	dfc00117 	ldw	ra,4(sp)
    4da8:	df000017 	ldw	fp,0(sp)
    4dac:	dec00204 	addi	sp,sp,8
    4db0:	f800283a 	ret

00004db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    4db4:	defff504 	addi	sp,sp,-44
    4db8:	dfc00a15 	stw	ra,40(sp)
    4dbc:	df000915 	stw	fp,36(sp)
    4dc0:	df000904 	addi	fp,sp,36
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4dc4:	00005206 	br	4f10 <prvProcessReceivedCommands+0x15c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4dc8:	e0bffb17 	ldw	r2,-20(fp)
    4dcc:	1004803a 	cmplt	r2,r2,zero
    4dd0:	10004f1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4dd4:	e0bffd17 	ldw	r2,-12(fp)
    4dd8:	e0bffa15 	stw	r2,-24(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4ddc:	e0bffa17 	ldw	r2,-24(fp)
    4de0:	10800517 	ldw	r2,20(r2)
    4de4:	1005003a 	cmpeq	r2,r2,zero
    4de8:	1000031e 	bne	r2,zero,4df8 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4dec:	e0bffa17 	ldw	r2,-24(fp)
    4df0:	11000104 	addi	r4,r2,4
    4df4:	00015f80 	call	15f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4df8:	e13ffe04 	addi	r4,fp,-8
    4dfc:	0004c840 	call	4c84 <prvSampleTimeNow>
    4e00:	e0bff815 	stw	r2,-32(fp)

			switch( xMessage.xMessageID )
    4e04:	e0bffb17 	ldw	r2,-20(fp)
    4e08:	e0bfff15 	stw	r2,-4(fp)
    4e0c:	e0ffff17 	ldw	r3,-4(fp)
    4e10:	188002a8 	cmpgeui	r2,r3,10
    4e14:	10003e1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
    4e18:	e13fff17 	ldw	r4,-4(fp)
    4e1c:	e13fff17 	ldw	r4,-4(fp)
    4e20:	2105883a 	add	r2,r4,r4
    4e24:	1087883a 	add	r3,r2,r2
    4e28:	00800034 	movhi	r2,0
    4e2c:	10938f04 	addi	r2,r2,20028
    4e30:	1885883a 	add	r2,r3,r2
    4e34:	10800017 	ldw	r2,0(r2)
    4e38:	1000683a 	jmp	r2
    4e3c:	00004e64 	muli	zero,zero,313
    4e40:	00004e64 	muli	zero,zero,313
    4e44:	00004e64 	muli	zero,zero,313
    4e48:	00004f10 	cmplti	zero,zero,316
    4e4c:	00004ed8 	cmpnei	zero,zero,315
    4e50:	00004f08 	cmpgei	zero,zero,316
    4e54:	00004e64 	muli	zero,zero,313
    4e58:	00004e64 	muli	zero,zero,313
    4e5c:	00004f10 	cmplti	zero,zero,316
    4e60:	00004ed8 	cmpnei	zero,zero,315
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4e64:	e0fffc17 	ldw	r3,-16(fp)
    4e68:	e0bffa17 	ldw	r2,-24(fp)
    4e6c:	10800617 	ldw	r2,24(r2)
    4e70:	188b883a 	add	r5,r3,r2
    4e74:	e1fffc17 	ldw	r7,-16(fp)
    4e78:	e13ffa17 	ldw	r4,-24(fp)
    4e7c:	e1bff817 	ldw	r6,-32(fp)
    4e80:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4e84:	10800058 	cmpnei	r2,r2,1
    4e88:	1000211e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e8c:	e0bffa17 	ldw	r2,-24(fp)
    4e90:	10800917 	ldw	r2,36(r2)
    4e94:	e13ffa17 	ldw	r4,-24(fp)
    4e98:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4e9c:	e0bffa17 	ldw	r2,-24(fp)
    4ea0:	10800717 	ldw	r2,28(r2)
    4ea4:	10800058 	cmpnei	r2,r2,1
    4ea8:	1000191e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4eac:	e0fffc17 	ldw	r3,-16(fp)
    4eb0:	e0bffa17 	ldw	r2,-24(fp)
    4eb4:	10800617 	ldw	r2,24(r2)
    4eb8:	188d883a 	add	r6,r3,r2
    4ebc:	d8000015 	stw	zero,0(sp)
    4ec0:	e13ffa17 	ldw	r4,-24(fp)
    4ec4:	000b883a 	mov	r5,zero
    4ec8:	000f883a 	mov	r7,zero
    4ecc:	00049ac0 	call	49ac <xTimerGenericCommand>
    4ed0:	e0bff915 	stw	r2,-28(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    4ed4:	00000e06 	br	4f10 <prvProcessReceivedCommands+0x15c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4ed8:	e0fffc17 	ldw	r3,-16(fp)
    4edc:	e0bffa17 	ldw	r2,-24(fp)
    4ee0:	10c00615 	stw	r3,24(r2)
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4ee4:	e0bffa17 	ldw	r2,-24(fp)
    4ee8:	10c00617 	ldw	r3,24(r2)
    4eec:	e0bff817 	ldw	r2,-32(fp)
    4ef0:	188b883a 	add	r5,r3,r2
    4ef4:	e13ffa17 	ldw	r4,-24(fp)
    4ef8:	e1bff817 	ldw	r6,-32(fp)
    4efc:	e1fff817 	ldw	r7,-32(fp)
    4f00:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
					break;
    4f04:	00000206 	br	4f10 <prvProcessReceivedCommands+0x15c>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4f08:	e13ffa17 	ldw	r4,-24(fp)
    4f0c:	00011500 	call	1150 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4f10:	d1203517 	ldw	r4,-32556(gp)
    4f14:	e17ffb04 	addi	r5,fp,-20
    4f18:	000d883a 	mov	r6,zero
    4f1c:	000f883a 	mov	r7,zero
    4f20:	00022800 	call	2280 <xQueueGenericReceive>
    4f24:	1004c03a 	cmpne	r2,r2,zero
    4f28:	103fa71e 	bne	r2,zero,4dc8 <prvProcessReceivedCommands+0x14>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    4f2c:	e037883a 	mov	sp,fp
    4f30:	dfc00117 	ldw	ra,4(sp)
    4f34:	df000017 	ldw	fp,0(sp)
    4f38:	dec00204 	addi	sp,sp,8
    4f3c:	f800283a 	ret

00004f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4f40:	defff804 	addi	sp,sp,-32
    4f44:	dfc00715 	stw	ra,28(sp)
    4f48:	df000615 	stw	fp,24(sp)
    4f4c:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4f50:	00002d06 	br	5008 <prvSwitchTimerLists+0xc8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f54:	d0a03717 	ldw	r2,-32548(gp)
    4f58:	10800317 	ldw	r2,12(r2)
    4f5c:	10800017 	ldw	r2,0(r2)
    4f60:	e0bfff15 	stw	r2,-4(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f64:	d0a03717 	ldw	r2,-32548(gp)
    4f68:	10800317 	ldw	r2,12(r2)
    4f6c:	10800317 	ldw	r2,12(r2)
    4f70:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4f74:	e0bffc17 	ldw	r2,-16(fp)
    4f78:	11000104 	addi	r4,r2,4
    4f7c:	00015f80 	call	15f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4f80:	e0bffc17 	ldw	r2,-16(fp)
    4f84:	10800917 	ldw	r2,36(r2)
    4f88:	e13ffc17 	ldw	r4,-16(fp)
    4f8c:	103ee83a 	callr	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	10800717 	ldw	r2,28(r2)
    4f98:	10800058 	cmpnei	r2,r2,1
    4f9c:	10001a1e 	bne	r2,zero,5008 <prvSwitchTimerLists+0xc8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4fa0:	e0bffc17 	ldw	r2,-16(fp)
    4fa4:	10c00617 	ldw	r3,24(r2)
    4fa8:	e0bfff17 	ldw	r2,-4(fp)
    4fac:	1885883a 	add	r2,r3,r2
    4fb0:	e0bffe15 	stw	r2,-8(fp)
			if( xReloadTime > xNextExpireTime )
    4fb4:	e0fffe17 	ldw	r3,-8(fp)
    4fb8:	e0bfff17 	ldw	r2,-4(fp)
    4fbc:	10c00b2e 	bgeu	r2,r3,4fec <prvSwitchTimerLists+0xac>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4fc0:	e0fffc17 	ldw	r3,-16(fp)
    4fc4:	e0bffe17 	ldw	r2,-8(fp)
    4fc8:	18800115 	stw	r2,4(r3)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4fcc:	e0fffc17 	ldw	r3,-16(fp)
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	18800415 	stw	r2,16(r3)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4fd8:	d1203717 	ldw	r4,-32548(gp)
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	11400104 	addi	r5,r2,4
    4fe4:	00015240 	call	1524 <vListInsert>
    4fe8:	00000706 	br	5008 <prvSwitchTimerLists+0xc8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fec:	d8000015 	stw	zero,0(sp)
    4ff0:	e13ffc17 	ldw	r4,-16(fp)
    4ff4:	000b883a 	mov	r5,zero
    4ff8:	e1bfff17 	ldw	r6,-4(fp)
    4ffc:	000f883a 	mov	r7,zero
    5000:	00049ac0 	call	49ac <xTimerGenericCommand>
    5004:	e0bffb15 	stw	r2,-20(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5008:	d0a03717 	ldw	r2,-32548(gp)
    500c:	10800017 	ldw	r2,0(r2)
    5010:	1004c03a 	cmpne	r2,r2,zero
    5014:	103fcf1e 	bne	r2,zero,4f54 <prvSwitchTimerLists+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    5018:	d0a03717 	ldw	r2,-32548(gp)
    501c:	e0bffd15 	stw	r2,-12(fp)
	pxCurrentTimerList = pxOverflowTimerList;
    5020:	d0a03817 	ldw	r2,-32544(gp)
    5024:	d0a03715 	stw	r2,-32548(gp)
	pxOverflowTimerList = pxTemp;
    5028:	e0bffd17 	ldw	r2,-12(fp)
    502c:	d0a03815 	stw	r2,-32544(gp)
}
    5030:	e037883a 	mov	sp,fp
    5034:	dfc00117 	ldw	ra,4(sp)
    5038:	df000017 	ldw	fp,0(sp)
    503c:	dec00204 	addi	sp,sp,8
    5040:	f800283a 	ret

00005044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5044:	defffe04 	addi	sp,sp,-8
    5048:	dfc00115 	stw	ra,4(sp)
    504c:	df000015 	stw	fp,0(sp)
    5050:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5054:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
    5058:	d0a03517 	ldw	r2,-32556(gp)
    505c:	1004c03a 	cmpne	r2,r2,zero
    5060:	1000111e 	bne	r2,zero,50a8 <prvCheckForValidListAndQueue+0x64>
		{
			vListInitialise( &xActiveTimerList1 );
    5064:	01020234 	movhi	r4,2056
    5068:	213eb504 	addi	r4,r4,-1324
    506c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5070:	01020234 	movhi	r4,2056
    5074:	213eba04 	addi	r4,r4,-1304
    5078:	00014040 	call	1404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    507c:	00820234 	movhi	r2,2056
    5080:	10beb504 	addi	r2,r2,-1324
    5084:	d0a03715 	stw	r2,-32548(gp)
			pxOverflowTimerList = &xActiveTimerList2;
    5088:	00820234 	movhi	r2,2056
    508c:	10beba04 	addi	r2,r2,-1304
    5090:	d0a03815 	stw	r2,-32544(gp)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5094:	01000284 	movi	r4,10
    5098:	01400304 	movi	r5,12
    509c:	000d883a 	mov	r6,zero
    50a0:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    50a4:	d0a03515 	stw	r2,-32556(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    50a8:	00041680 	call	4168 <vTaskExitCritical>
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	dfc00117 	ldw	ra,4(sp)
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00204 	addi	sp,sp,8
    50bc:	f800283a 	ret

000050c0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    50c0:	defffb04 	addi	sp,sp,-20
    50c4:	dfc00415 	stw	ra,16(sp)
    50c8:	df000315 	stw	fp,12(sp)
    50cc:	df000304 	addi	fp,sp,12
    50d0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    50d4:	e0bfff17 	ldw	r2,-4(fp)
    50d8:	e0bffd15 	stw	r2,-12(fp)

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    50dc:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    50e0:	e0bffd17 	ldw	r2,-12(fp)
    50e4:	10800517 	ldw	r2,20(r2)
    50e8:	1004c03a 	cmpne	r2,r2,zero
    50ec:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    50f0:	00041680 	call	4168 <vTaskExitCritical>

	return xTimerIsInActiveList;
    50f4:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
    50f8:	e037883a 	mov	sp,fp
    50fc:	dfc00117 	ldw	ra,4(sp)
    5100:	df000017 	ldw	fp,0(sp)
    5104:	dec00204 	addi	sp,sp,8
    5108:	f800283a 	ret

0000510c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    510c:	defffd04 	addi	sp,sp,-12
    5110:	df000215 	stw	fp,8(sp)
    5114:	df000204 	addi	fp,sp,8
    5118:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
    511c:	e0bfff17 	ldw	r2,-4(fp)
    5120:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pvTimerID;
    5124:	e0bffe17 	ldw	r2,-8(fp)
    5128:	10800817 	ldw	r2,32(r2)
}
    512c:	e037883a 	mov	sp,fp
    5130:	df000017 	ldw	fp,0(sp)
    5134:	dec00104 	addi	sp,sp,4
    5138:	f800283a 	ret

0000513c <PRVGADraw_Task>:



/****** VGA display ******/

void PRVGADraw_Task(void *pvParameters ){
    513c:	deffeb04 	addi	sp,sp,-84
    5140:	dfc01415 	stw	ra,80(sp)
    5144:	df001315 	stw	fp,76(sp)
    5148:	dc801215 	stw	r18,72(sp)
    514c:	dc401115 	stw	r17,68(sp)
    5150:	dc001015 	stw	r16,64(sp)
    5154:	df001004 	addi	fp,sp,64
    5158:	e13fff15 	stw	r4,-4(fp)


	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
    515c:	01020034 	movhi	r4,2048
    5160:	21002104 	addi	r4,r4,132
    5164:	00181d80 	call	181d8 <alt_up_pixel_buffer_dma_open_dev>
    5168:	e0bff615 	stw	r2,-40(fp)
	if(pixel_buf == NULL){
    516c:	e0bff617 	ldw	r2,-40(fp)
    5170:	1004c03a 	cmpne	r2,r2,zero
    5174:	1000031e 	bne	r2,zero,5184 <PRVGADraw_Task+0x48>
		printf("can't find pixel buffer device\n");
    5178:	01020034 	movhi	r4,2048
    517c:	21002804 	addi	r4,r4,160
    5180:	00079fc0 	call	79fc <puts>
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);
    5184:	e13ff617 	ldw	r4,-40(fp)
    5188:	000b883a 	mov	r5,zero
    518c:	001849c0 	call	1849c <alt_up_pixel_buffer_dma_clear_screen>

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
    5190:	01020034 	movhi	r4,2048
    5194:	21003004 	addi	r4,r4,192
    5198:	0017f580 	call	17f58 <alt_up_char_buffer_open_dev>
    519c:	e0bff515 	stw	r2,-44(fp)
	if(char_buf == NULL){
    51a0:	e0bff517 	ldw	r2,-44(fp)
    51a4:	1004c03a 	cmpne	r2,r2,zero
    51a8:	1000031e 	bne	r2,zero,51b8 <PRVGADraw_Task+0x7c>
		printf("can't find char buffer device\n");
    51ac:	01020034 	movhi	r4,2048
    51b0:	21003a04 	addi	r4,r4,232
    51b4:	00079fc0 	call	79fc <puts>
	}
	alt_up_char_buffer_clear(char_buf);
    51b8:	e13ff517 	ldw	r4,-44(fp)
    51bc:	001817c0 	call	1817c <alt_up_char_buffer_clear>



	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51c0:	00900034 	movhi	r2,16384
    51c4:	10bfffc4 	addi	r2,r2,-1
    51c8:	d8800015 	stw	r2,0(sp)
    51cc:	d8000115 	stw	zero,4(sp)
    51d0:	e13ff617 	ldw	r4,-40(fp)
    51d4:	01401904 	movi	r5,100
    51d8:	01809384 	movi	r6,590
    51dc:	01c03204 	movi	r7,200
    51e0:	0018af40 	call	18af4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51e4:	00900034 	movhi	r2,16384
    51e8:	10bfffc4 	addi	r2,r2,-1
    51ec:	d8800015 	stw	r2,0(sp)
    51f0:	d8000115 	stw	zero,4(sp)
    51f4:	e13ff617 	ldw	r4,-40(fp)
    51f8:	01401904 	movi	r5,100
    51fc:	01809384 	movi	r6,590
    5200:	01c04b04 	movi	r7,300
    5204:	0018af40 	call	18af4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5208:	00900034 	movhi	r2,16384
    520c:	10bfffc4 	addi	r2,r2,-1
    5210:	d8800015 	stw	r2,0(sp)
    5214:	d8000115 	stw	zero,4(sp)
    5218:	e13ff617 	ldw	r4,-40(fp)
    521c:	01401904 	movi	r5,100
    5220:	01800c84 	movi	r6,50
    5224:	01c03204 	movi	r7,200
    5228:	0018e440 	call	18e44 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    522c:	00900034 	movhi	r2,16384
    5230:	10bfffc4 	addi	r2,r2,-1
    5234:	d8800015 	stw	r2,0(sp)
    5238:	d8000115 	stw	zero,4(sp)
    523c:	e13ff617 	ldw	r4,-40(fp)
    5240:	01401904 	movi	r5,100
    5244:	01803704 	movi	r6,220
    5248:	01c04b04 	movi	r7,300
    524c:	0018e440 	call	18e44 <alt_up_pixel_buffer_dma_draw_vline>

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
    5250:	e13ff517 	ldw	r4,-44(fp)
    5254:	01420034 	movhi	r5,2048
    5258:	29404204 	addi	r5,r5,264
    525c:	01800104 	movi	r6,4
    5260:	01c00104 	movi	r7,4
    5264:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
    5268:	e13ff517 	ldw	r4,-44(fp)
    526c:	01420034 	movhi	r5,2048
    5270:	29404604 	addi	r5,r5,280
    5274:	01800284 	movi	r6,10
    5278:	01c001c4 	movi	r7,7
    527c:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
    5280:	e13ff517 	ldw	r4,-44(fp)
    5284:	01420034 	movhi	r5,2048
    5288:	29404704 	addi	r5,r5,284
    528c:	01800284 	movi	r6,10
    5290:	01c00304 	movi	r7,12
    5294:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
    5298:	e13ff517 	ldw	r4,-44(fp)
    529c:	01420034 	movhi	r5,2048
    52a0:	29404804 	addi	r5,r5,288
    52a4:	01800284 	movi	r6,10
    52a8:	01c00444 	movi	r7,17
    52ac:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "46", 10, 22);
    52b0:	e13ff517 	ldw	r4,-44(fp)
    52b4:	01420034 	movhi	r5,2048
    52b8:	29404904 	addi	r5,r5,292
    52bc:	01800284 	movi	r6,10
    52c0:	01c00584 	movi	r7,22
    52c4:	00180680 	call	18068 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
    52c8:	e13ff517 	ldw	r4,-44(fp)
    52cc:	01420034 	movhi	r5,2048
    52d0:	29404a04 	addi	r5,r5,296
    52d4:	01800104 	movi	r6,4
    52d8:	01c00684 	movi	r7,26
    52dc:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
    52e0:	e13ff517 	ldw	r4,-44(fp)
    52e4:	01420034 	movhi	r5,2048
    52e8:	29404d04 	addi	r5,r5,308
    52ec:	01800284 	movi	r6,10
    52f0:	01c00704 	movi	r7,28
    52f4:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
    52f8:	e13ff517 	ldw	r4,-44(fp)
    52fc:	01420034 	movhi	r5,2048
    5300:	29404e04 	addi	r5,r5,312
    5304:	01800284 	movi	r6,10
    5308:	01c00784 	movi	r7,30
    530c:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
    5310:	e13ff517 	ldw	r4,-44(fp)
    5314:	01420034 	movhi	r5,2048
    5318:	29404f04 	addi	r5,r5,316
    531c:	01800284 	movi	r6,10
    5320:	01c00804 	movi	r7,32
    5324:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
    5328:	e13ff517 	ldw	r4,-44(fp)
    532c:	01420034 	movhi	r5,2048
    5330:	29405004 	addi	r5,r5,320
    5334:	01800244 	movi	r6,9
    5338:	01c00884 	movi	r7,34
    533c:	00180680 	call	18068 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);
    5340:	e13ff517 	ldw	r4,-44(fp)
    5344:	01420034 	movhi	r5,2048
    5348:	29405104 	addi	r5,r5,324
    534c:	01800244 	movi	r6,9
    5350:	01c00904 	movi	r7,36
    5354:	00180680 	call	18068 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "Frequency threshold:", 4, 46);
    5358:	e13ff517 	ldw	r4,-44(fp)
    535c:	01420034 	movhi	r5,2048
    5360:	29405204 	addi	r5,r5,328
    5364:	01800104 	movi	r6,4
    5368:	01c00b84 	movi	r7,46
    536c:	00180680 	call	18068 <alt_up_char_buffer_string>


	alt_up_char_buffer_string(char_buf, "RoC threshold:", 4, 50);
    5370:	e13ff517 	ldw	r4,-44(fp)
    5374:	01420034 	movhi	r5,2048
    5378:	29405804 	addi	r5,r5,352
    537c:	01800104 	movi	r6,4
    5380:	01c00c84 	movi	r7,50
    5384:	00180680 	call	18068 <alt_up_char_buffer_string>



	int i = 99, j = 0;
    5388:	008018c4 	movi	r2,99
    538c:	e0bff415 	stw	r2,-48(fp)
    5390:	e03ff315 	stw	zero,-52(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    5394:	00010c06 	br	57c8 <PRVGADraw_Task+0x68c>
			xQueueReceive( Q_freq_data, freq+i, 0 );
    5398:	d1203a17 	ldw	r4,-32536(gp)
    539c:	e0bff417 	ldw	r2,-48(fp)
    53a0:	100490fa 	slli	r2,r2,3
    53a4:	1007883a 	mov	r3,r2
    53a8:	00820234 	movhi	r2,2056
    53ac:	10bed304 	addi	r2,r2,-1204
    53b0:	188b883a 	add	r5,r3,r2
    53b4:	000d883a 	mov	r6,zero
    53b8:	000f883a 	mov	r7,zero
    53bc:	00022800 	call	2280 <xQueueGenericReceive>

			sprintf(freqStr, "%f", freqThresh);
    53c0:	d0a00617 	ldw	r2,-32744(gp)
    53c4:	01020034 	movhi	r4,2048
    53c8:	210a0504 	addi	r4,r4,10260
    53cc:	20c00017 	ldw	r3,0(r4)
    53d0:	01020034 	movhi	r4,2048
    53d4:	21028304 	addi	r4,r4,2572
    53d8:	01420034 	movhi	r5,2048
    53dc:	29405c04 	addi	r5,r5,368
    53e0:	100d883a 	mov	r6,r2
    53e4:	180f883a 	mov	r7,r3
    53e8:	0007a100 	call	7a10 <sprintf>
			sprintf(ROCStr, "%f", ROCThresh);
    53ec:	d0a00817 	ldw	r2,-32736(gp)
    53f0:	01020034 	movhi	r4,2048
    53f4:	210a0704 	addi	r4,r4,10268
    53f8:	20c00017 	ldw	r3,0(r4)
    53fc:	01020034 	movhi	r4,2048
    5400:	21028604 	addi	r4,r4,2584
    5404:	01420034 	movhi	r5,2048
    5408:	29405c04 	addi	r5,r5,368
    540c:	100d883a 	mov	r6,r2
    5410:	180f883a 	mov	r7,r3
    5414:	0007a100 	call	7a10 <sprintf>
			alt_up_char_buffer_string(char_buf, ROCStr, 30, 50);
    5418:	e13ff517 	ldw	r4,-44(fp)
    541c:	01420034 	movhi	r5,2048
    5420:	29428604 	addi	r5,r5,2584
    5424:	01800784 	movi	r6,30
    5428:	01c00c84 	movi	r7,50
    542c:	00180680 	call	18068 <alt_up_char_buffer_string>
			alt_up_char_buffer_string(char_buf, freqStr, 30, 46);
    5430:	e13ff517 	ldw	r4,-44(fp)
    5434:	01420034 	movhi	r5,2048
    5438:	29428304 	addi	r5,r5,2572
    543c:	01800784 	movi	r6,30
    5440:	01c00b84 	movi	r7,46
    5444:	00180680 	call	18068 <alt_up_char_buffer_string>
			//calculate frequency RoC

			if(i==0){
    5448:	e0bff417 	ldw	r2,-48(fp)
    544c:	1004c03a 	cmpne	r2,r2,zero
    5450:	1000531e 	bne	r2,zero,55a0 <PRVGADraw_Task+0x464>
				dfreq[0] = (freq[0]-freq[99]) * 2.0 * freq[0] * freq[99] / (freq[0]+freq[99]);
    5454:	00820234 	movhi	r2,2056
    5458:	10bed304 	addi	r2,r2,-1204
    545c:	11400017 	ldw	r5,0(r2)
    5460:	11800117 	ldw	r6,4(r2)
    5464:	01020234 	movhi	r4,2056
    5468:	213ed304 	addi	r4,r4,-1204
    546c:	2080c617 	ldw	r2,792(r4)
    5470:	20c0c717 	ldw	r3,796(r4)
    5474:	2809883a 	mov	r4,r5
    5478:	300b883a 	mov	r5,r6
    547c:	100d883a 	mov	r6,r2
    5480:	180f883a 	mov	r7,r3
    5484:	00067800 	call	6780 <__subdf3>
    5488:	1009883a 	mov	r4,r2
    548c:	180b883a 	mov	r5,r3
    5490:	2005883a 	mov	r2,r4
    5494:	2807883a 	mov	r3,r5
    5498:	1009883a 	mov	r4,r2
    549c:	180b883a 	mov	r5,r3
    54a0:	100d883a 	mov	r6,r2
    54a4:	180f883a 	mov	r7,r3
    54a8:	00068000 	call	6800 <__adddf3>
    54ac:	1009883a 	mov	r4,r2
    54b0:	180b883a 	mov	r5,r3
    54b4:	200d883a 	mov	r6,r4
    54b8:	280f883a 	mov	r7,r5
    54bc:	01020234 	movhi	r4,2056
    54c0:	213ed304 	addi	r4,r4,-1204
    54c4:	20800017 	ldw	r2,0(r4)
    54c8:	20c00117 	ldw	r3,4(r4)
    54cc:	3009883a 	mov	r4,r6
    54d0:	380b883a 	mov	r5,r7
    54d4:	100d883a 	mov	r6,r2
    54d8:	180f883a 	mov	r7,r3
    54dc:	00068740 	call	6874 <__muldf3>
    54e0:	1009883a 	mov	r4,r2
    54e4:	180b883a 	mov	r5,r3
    54e8:	200d883a 	mov	r6,r4
    54ec:	280f883a 	mov	r7,r5
    54f0:	01020234 	movhi	r4,2056
    54f4:	213ed304 	addi	r4,r4,-1204
    54f8:	2080c617 	ldw	r2,792(r4)
    54fc:	20c0c717 	ldw	r3,796(r4)
    5500:	3009883a 	mov	r4,r6
    5504:	380b883a 	mov	r5,r7
    5508:	100d883a 	mov	r6,r2
    550c:	180f883a 	mov	r7,r3
    5510:	00068740 	call	6874 <__muldf3>
    5514:	1009883a 	mov	r4,r2
    5518:	180b883a 	mov	r5,r3
    551c:	2021883a 	mov	r16,r4
    5520:	2823883a 	mov	r17,r5
    5524:	00820234 	movhi	r2,2056
    5528:	10bed304 	addi	r2,r2,-1204
    552c:	11400017 	ldw	r5,0(r2)
    5530:	11800117 	ldw	r6,4(r2)
    5534:	01020234 	movhi	r4,2056
    5538:	213ed304 	addi	r4,r4,-1204
    553c:	2080c617 	ldw	r2,792(r4)
    5540:	20c0c717 	ldw	r3,796(r4)
    5544:	2809883a 	mov	r4,r5
    5548:	300b883a 	mov	r5,r6
    554c:	100d883a 	mov	r6,r2
    5550:	180f883a 	mov	r7,r3
    5554:	00068000 	call	6800 <__adddf3>
    5558:	1009883a 	mov	r4,r2
    555c:	180b883a 	mov	r5,r3
    5560:	2005883a 	mov	r2,r4
    5564:	2807883a 	mov	r3,r5
    5568:	8009883a 	mov	r4,r16
    556c:	880b883a 	mov	r5,r17
    5570:	100d883a 	mov	r6,r2
    5574:	180f883a 	mov	r7,r3
    5578:	0006c380 	call	6c38 <__divdf3>
    557c:	1009883a 	mov	r4,r2
    5580:	180b883a 	mov	r5,r3
    5584:	2005883a 	mov	r2,r4
    5588:	2807883a 	mov	r3,r5
    558c:	01020234 	movhi	r4,2056
    5590:	213f9b04 	addi	r4,r4,-404
    5594:	20800015 	stw	r2,0(r4)
    5598:	20c00115 	stw	r3,4(r4)
    559c:	00006a06 	br	5748 <PRVGADraw_Task+0x60c>
			}
			else{
				dfreq[i] = (freq[i]-freq[i-1]) * 2.0 * freq[i]* freq[i-1] / (freq[i]+freq[i-1]);
    55a0:	e4bff417 	ldw	r18,-48(fp)
    55a4:	e0bff417 	ldw	r2,-48(fp)
    55a8:	00c20234 	movhi	r3,2056
    55ac:	18fed304 	addi	r3,r3,-1204
    55b0:	100490fa 	slli	r2,r2,3
    55b4:	10c5883a 	add	r2,r2,r3
    55b8:	11400017 	ldw	r5,0(r2)
    55bc:	11800117 	ldw	r6,4(r2)
    55c0:	e0bff417 	ldw	r2,-48(fp)
    55c4:	10bfffc4 	addi	r2,r2,-1
    55c8:	00c20234 	movhi	r3,2056
    55cc:	18fed304 	addi	r3,r3,-1204
    55d0:	100490fa 	slli	r2,r2,3
    55d4:	10c9883a 	add	r4,r2,r3
    55d8:	20800017 	ldw	r2,0(r4)
    55dc:	20c00117 	ldw	r3,4(r4)
    55e0:	2809883a 	mov	r4,r5
    55e4:	300b883a 	mov	r5,r6
    55e8:	100d883a 	mov	r6,r2
    55ec:	180f883a 	mov	r7,r3
    55f0:	00067800 	call	6780 <__subdf3>
    55f4:	1009883a 	mov	r4,r2
    55f8:	180b883a 	mov	r5,r3
    55fc:	2005883a 	mov	r2,r4
    5600:	2807883a 	mov	r3,r5
    5604:	1009883a 	mov	r4,r2
    5608:	180b883a 	mov	r5,r3
    560c:	100d883a 	mov	r6,r2
    5610:	180f883a 	mov	r7,r3
    5614:	00068000 	call	6800 <__adddf3>
    5618:	1009883a 	mov	r4,r2
    561c:	180b883a 	mov	r5,r3
    5620:	200d883a 	mov	r6,r4
    5624:	280f883a 	mov	r7,r5
    5628:	e0bff417 	ldw	r2,-48(fp)
    562c:	00c20234 	movhi	r3,2056
    5630:	18fed304 	addi	r3,r3,-1204
    5634:	100490fa 	slli	r2,r2,3
    5638:	10c9883a 	add	r4,r2,r3
    563c:	20800017 	ldw	r2,0(r4)
    5640:	20c00117 	ldw	r3,4(r4)
    5644:	3009883a 	mov	r4,r6
    5648:	380b883a 	mov	r5,r7
    564c:	100d883a 	mov	r6,r2
    5650:	180f883a 	mov	r7,r3
    5654:	00068740 	call	6874 <__muldf3>
    5658:	1009883a 	mov	r4,r2
    565c:	180b883a 	mov	r5,r3
    5660:	200d883a 	mov	r6,r4
    5664:	280f883a 	mov	r7,r5
    5668:	e0bff417 	ldw	r2,-48(fp)
    566c:	10bfffc4 	addi	r2,r2,-1
    5670:	00c20234 	movhi	r3,2056
    5674:	18fed304 	addi	r3,r3,-1204
    5678:	100490fa 	slli	r2,r2,3
    567c:	10c9883a 	add	r4,r2,r3
    5680:	20800017 	ldw	r2,0(r4)
    5684:	20c00117 	ldw	r3,4(r4)
    5688:	3009883a 	mov	r4,r6
    568c:	380b883a 	mov	r5,r7
    5690:	100d883a 	mov	r6,r2
    5694:	180f883a 	mov	r7,r3
    5698:	00068740 	call	6874 <__muldf3>
    569c:	1009883a 	mov	r4,r2
    56a0:	180b883a 	mov	r5,r3
    56a4:	2021883a 	mov	r16,r4
    56a8:	2823883a 	mov	r17,r5
    56ac:	e0bff417 	ldw	r2,-48(fp)
    56b0:	00c20234 	movhi	r3,2056
    56b4:	18fed304 	addi	r3,r3,-1204
    56b8:	100490fa 	slli	r2,r2,3
    56bc:	10c5883a 	add	r2,r2,r3
    56c0:	11400017 	ldw	r5,0(r2)
    56c4:	11800117 	ldw	r6,4(r2)
    56c8:	e0bff417 	ldw	r2,-48(fp)
    56cc:	10bfffc4 	addi	r2,r2,-1
    56d0:	00c20234 	movhi	r3,2056
    56d4:	18fed304 	addi	r3,r3,-1204
    56d8:	100490fa 	slli	r2,r2,3
    56dc:	10c9883a 	add	r4,r2,r3
    56e0:	20800017 	ldw	r2,0(r4)
    56e4:	20c00117 	ldw	r3,4(r4)
    56e8:	2809883a 	mov	r4,r5
    56ec:	300b883a 	mov	r5,r6
    56f0:	100d883a 	mov	r6,r2
    56f4:	180f883a 	mov	r7,r3
    56f8:	00068000 	call	6800 <__adddf3>
    56fc:	1009883a 	mov	r4,r2
    5700:	180b883a 	mov	r5,r3
    5704:	2005883a 	mov	r2,r4
    5708:	2807883a 	mov	r3,r5
    570c:	8009883a 	mov	r4,r16
    5710:	880b883a 	mov	r5,r17
    5714:	100d883a 	mov	r6,r2
    5718:	180f883a 	mov	r7,r3
    571c:	0006c380 	call	6c38 <__divdf3>
    5720:	1009883a 	mov	r4,r2
    5724:	180b883a 	mov	r5,r3
    5728:	2005883a 	mov	r2,r4
    572c:	2807883a 	mov	r3,r5
    5730:	01420234 	movhi	r5,2056
    5734:	297f9b04 	addi	r5,r5,-404
    5738:	900890fa 	slli	r4,r18,3
    573c:	2149883a 	add	r4,r4,r5
    5740:	20800015 	stw	r2,0(r4)
    5744:	20c00115 	stw	r3,4(r4)
			}

			if (dfreq[i] > 100.0){
    5748:	e0bff417 	ldw	r2,-48(fp)
    574c:	00c20234 	movhi	r3,2056
    5750:	18ff9b04 	addi	r3,r3,-404
    5754:	100490fa 	slli	r2,r2,3
    5758:	10c9883a 	add	r4,r2,r3
    575c:	20800017 	ldw	r2,0(r4)
    5760:	20c00117 	ldw	r3,4(r4)
    5764:	1009883a 	mov	r4,r2
    5768:	180b883a 	mov	r5,r3
    576c:	000d883a 	mov	r6,zero
    5770:	01d01674 	movhi	r7,16473
    5774:	0006e900 	call	6e90 <__gtdf2>
    5778:	10800048 	cmpgei	r2,r2,1
    577c:	1000011e 	bne	r2,zero,5784 <PRVGADraw_Task+0x648>
    5780:	00000806 	br	57a4 <PRVGADraw_Task+0x668>
				dfreq[i] = 100.0;
    5784:	e0bff417 	ldw	r2,-48(fp)
    5788:	00c20234 	movhi	r3,2056
    578c:	18ff9b04 	addi	r3,r3,-404
    5790:	100490fa 	slli	r2,r2,3
    5794:	10c7883a 	add	r3,r2,r3
    5798:	18000015 	stw	zero,0(r3)
    579c:	00901674 	movhi	r2,16473
    57a0:	18800115 	stw	r2,4(r3)
			}


			i =	++i%100; //point to the next data (oldest) to be overwritten
    57a4:	e0bff417 	ldw	r2,-48(fp)
    57a8:	10800044 	addi	r2,r2,1
    57ac:	e0bff415 	stw	r2,-48(fp)
    57b0:	e0fff417 	ldw	r3,-48(fp)
    57b4:	00801904 	movi	r2,100
    57b8:	1885283a 	div	r2,r3,r2
    57bc:	10801924 	muli	r2,r2,100
    57c0:	1885c83a 	sub	r2,r3,r2
    57c4:	e0bff415 	stw	r2,-48(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    57c8:	d1203a17 	ldw	r4,-32536(gp)
    57cc:	00026100 	call	2610 <uxQueueMessagesWaiting>
    57d0:	1004c03a 	cmpne	r2,r2,zero
    57d4:	103ef01e 	bne	r2,zero,5398 <PRVGADraw_Task+0x25c>
			i =	++i%100; //point to the next data (oldest) to be overwritten

		}

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
    57d8:	008031c4 	movi	r2,199
    57dc:	d8800015 	stw	r2,0(sp)
    57e0:	d8000115 	stw	zero,4(sp)
    57e4:	d8000215 	stw	zero,8(sp)
    57e8:	e13ff617 	ldw	r4,-40(fp)
    57ec:	01401944 	movi	r5,101
    57f0:	000d883a 	mov	r6,zero
    57f4:	01c09fc4 	movi	r7,639
    57f8:	00186000 	call	18600 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);
    57fc:	00804ac4 	movi	r2,299
    5800:	d8800015 	stw	r2,0(sp)
    5804:	d8000115 	stw	zero,4(sp)
    5808:	d8000215 	stw	zero,8(sp)
    580c:	e13ff617 	ldw	r4,-40(fp)
    5810:	01401944 	movi	r5,101
    5814:	01803244 	movi	r6,201
    5818:	01c09fc4 	movi	r7,639
    581c:	00186000 	call	18600 <alt_up_pixel_buffer_dma_draw_box>

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5820:	e03ff315 	stw	zero,-52(fp)
    5824:	00010e06 	br	5c60 <PRVGADraw_Task+0xb24>
			if (((int)(freq[(i+j)%100]) > MIN_FREQ) && ((int)(freq[(i+j+1)%100]) > MIN_FREQ)){
    5828:	e0fff417 	ldw	r3,-48(fp)
    582c:	e0bff317 	ldw	r2,-52(fp)
    5830:	1887883a 	add	r3,r3,r2
    5834:	00801904 	movi	r2,100
    5838:	1885283a 	div	r2,r3,r2
    583c:	10801924 	muli	r2,r2,100
    5840:	1885c83a 	sub	r2,r3,r2
    5844:	00c20234 	movhi	r3,2056
    5848:	18fed304 	addi	r3,r3,-1204
    584c:	100490fa 	slli	r2,r2,3
    5850:	10c9883a 	add	r4,r2,r3
    5854:	20800017 	ldw	r2,0(r4)
    5858:	20c00117 	ldw	r3,4(r4)
    585c:	1009883a 	mov	r4,r2
    5860:	180b883a 	mov	r5,r3
    5864:	00070100 	call	7010 <__fixdfsi>
    5868:	1009883a 	mov	r4,r2
    586c:	0006f180 	call	6f18 <__floatsidf>
    5870:	100b883a 	mov	r5,r2
    5874:	180d883a 	mov	r6,r3
    5878:	2809883a 	mov	r4,r5
    587c:	300b883a 	mov	r5,r6
    5880:	000d883a 	mov	r6,zero
    5884:	01d011f4 	movhi	r7,16455
    5888:	39e00004 	addi	r7,r7,-32768
    588c:	0006e900 	call	6e90 <__gtdf2>
    5890:	10800048 	cmpgei	r2,r2,1
    5894:	1000011e 	bne	r2,zero,589c <PRVGADraw_Task+0x760>
    5898:	0000ee06 	br	5c54 <PRVGADraw_Task+0xb18>
    589c:	e0fff417 	ldw	r3,-48(fp)
    58a0:	e0bff317 	ldw	r2,-52(fp)
    58a4:	1885883a 	add	r2,r3,r2
    58a8:	10c00044 	addi	r3,r2,1
    58ac:	00801904 	movi	r2,100
    58b0:	1885283a 	div	r2,r3,r2
    58b4:	10801924 	muli	r2,r2,100
    58b8:	1885c83a 	sub	r2,r3,r2
    58bc:	00c20234 	movhi	r3,2056
    58c0:	18fed304 	addi	r3,r3,-1204
    58c4:	100490fa 	slli	r2,r2,3
    58c8:	10c9883a 	add	r4,r2,r3
    58cc:	20800017 	ldw	r2,0(r4)
    58d0:	20c00117 	ldw	r3,4(r4)
    58d4:	1009883a 	mov	r4,r2
    58d8:	180b883a 	mov	r5,r3
    58dc:	00070100 	call	7010 <__fixdfsi>
    58e0:	1009883a 	mov	r4,r2
    58e4:	0006f180 	call	6f18 <__floatsidf>
    58e8:	100b883a 	mov	r5,r2
    58ec:	180d883a 	mov	r6,r3
    58f0:	2809883a 	mov	r4,r5
    58f4:	300b883a 	mov	r5,r6
    58f8:	000d883a 	mov	r6,zero
    58fc:	01d011f4 	movhi	r7,16455
    5900:	39e00004 	addi	r7,r7,-32768
    5904:	0006e900 	call	6e90 <__gtdf2>
    5908:	10800048 	cmpgei	r2,r2,1
    590c:	1000011e 	bne	r2,zero,5914 <PRVGADraw_Task+0x7d8>
    5910:	0000d006 	br	5c54 <PRVGADraw_Task+0xb18>
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
    5914:	e0bff317 	ldw	r2,-52(fp)
    5918:	10800164 	muli	r2,r2,5
    591c:	10801944 	addi	r2,r2,101
    5920:	e0bff715 	stw	r2,-36(fp)
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j)%100] - MIN_FREQ));
    5924:	e0fff417 	ldw	r3,-48(fp)
    5928:	e0bff317 	ldw	r2,-52(fp)
    592c:	1887883a 	add	r3,r3,r2
    5930:	00801904 	movi	r2,100
    5934:	1885283a 	div	r2,r3,r2
    5938:	10801924 	muli	r2,r2,100
    593c:	1885c83a 	sub	r2,r3,r2
    5940:	00c20234 	movhi	r3,2056
    5944:	18fed304 	addi	r3,r3,-1204
    5948:	100490fa 	slli	r2,r2,3
    594c:	10c9883a 	add	r4,r2,r3
    5950:	20800017 	ldw	r2,0(r4)
    5954:	20c00117 	ldw	r3,4(r4)
    5958:	1009883a 	mov	r4,r2
    595c:	180b883a 	mov	r5,r3
    5960:	000d883a 	mov	r6,zero
    5964:	01d011f4 	movhi	r7,16455
    5968:	39e00004 	addi	r7,r7,-32768
    596c:	00067800 	call	6780 <__subdf3>
    5970:	1009883a 	mov	r4,r2
    5974:	180b883a 	mov	r5,r3
    5978:	2005883a 	mov	r2,r4
    597c:	2807883a 	mov	r3,r5
    5980:	1009883a 	mov	r4,r2
    5984:	180b883a 	mov	r5,r3
    5988:	000d883a 	mov	r6,zero
    598c:	01f00d34 	movhi	r7,49204
    5990:	00068740 	call	6874 <__muldf3>
    5994:	1009883a 	mov	r4,r2
    5998:	180b883a 	mov	r5,r3
    599c:	2005883a 	mov	r2,r4
    59a0:	2807883a 	mov	r3,r5
    59a4:	1009883a 	mov	r4,r2
    59a8:	180b883a 	mov	r5,r3
    59ac:	000d883a 	mov	r6,zero
    59b0:	01d01a74 	movhi	r7,16489
    59b4:	39f80004 	addi	r7,r7,-8192
    59b8:	00068000 	call	6800 <__adddf3>
    59bc:	1009883a 	mov	r4,r2
    59c0:	180b883a 	mov	r5,r3
    59c4:	2005883a 	mov	r2,r4
    59c8:	2807883a 	mov	r3,r5
    59cc:	1009883a 	mov	r4,r2
    59d0:	180b883a 	mov	r5,r3
    59d4:	00070100 	call	7010 <__fixdfsi>
    59d8:	e0bff815 	stw	r2,-32(fp)

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
    59dc:	e0bff317 	ldw	r2,-52(fp)
    59e0:	10800164 	muli	r2,r2,5
    59e4:	10801a84 	addi	r2,r2,106
    59e8:	e0bff915 	stw	r2,-28(fp)
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j+1)%100] - MIN_FREQ));
    59ec:	e0fff417 	ldw	r3,-48(fp)
    59f0:	e0bff317 	ldw	r2,-52(fp)
    59f4:	1885883a 	add	r2,r3,r2
    59f8:	10c00044 	addi	r3,r2,1
    59fc:	00801904 	movi	r2,100
    5a00:	1885283a 	div	r2,r3,r2
    5a04:	10801924 	muli	r2,r2,100
    5a08:	1885c83a 	sub	r2,r3,r2
    5a0c:	00c20234 	movhi	r3,2056
    5a10:	18fed304 	addi	r3,r3,-1204
    5a14:	100490fa 	slli	r2,r2,3
    5a18:	10c9883a 	add	r4,r2,r3
    5a1c:	20800017 	ldw	r2,0(r4)
    5a20:	20c00117 	ldw	r3,4(r4)
    5a24:	1009883a 	mov	r4,r2
    5a28:	180b883a 	mov	r5,r3
    5a2c:	000d883a 	mov	r6,zero
    5a30:	01d011f4 	movhi	r7,16455
    5a34:	39e00004 	addi	r7,r7,-32768
    5a38:	00067800 	call	6780 <__subdf3>
    5a3c:	1009883a 	mov	r4,r2
    5a40:	180b883a 	mov	r5,r3
    5a44:	2005883a 	mov	r2,r4
    5a48:	2807883a 	mov	r3,r5
    5a4c:	1009883a 	mov	r4,r2
    5a50:	180b883a 	mov	r5,r3
    5a54:	000d883a 	mov	r6,zero
    5a58:	01f00d34 	movhi	r7,49204
    5a5c:	00068740 	call	6874 <__muldf3>
    5a60:	1009883a 	mov	r4,r2
    5a64:	180b883a 	mov	r5,r3
    5a68:	2005883a 	mov	r2,r4
    5a6c:	2807883a 	mov	r3,r5
    5a70:	1009883a 	mov	r4,r2
    5a74:	180b883a 	mov	r5,r3
    5a78:	000d883a 	mov	r6,zero
    5a7c:	01d01a74 	movhi	r7,16489
    5a80:	39f80004 	addi	r7,r7,-8192
    5a84:	00068000 	call	6800 <__adddf3>
    5a88:	1009883a 	mov	r4,r2
    5a8c:	180b883a 	mov	r5,r3
    5a90:	2005883a 	mov	r2,r4
    5a94:	2807883a 	mov	r3,r5
    5a98:	1009883a 	mov	r4,r2
    5a9c:	180b883a 	mov	r5,r3
    5aa0:	00070100 	call	7010 <__fixdfsi>
    5aa4:	e0bffa15 	stw	r2,-24(fp)

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
    5aa8:	e0bff317 	ldw	r2,-52(fp)
    5aac:	10800164 	muli	r2,r2,5
    5ab0:	10801944 	addi	r2,r2,101
    5ab4:	e0bffb15 	stw	r2,-20(fp)
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j)%100]);
    5ab8:	e0fff417 	ldw	r3,-48(fp)
    5abc:	e0bff317 	ldw	r2,-52(fp)
    5ac0:	1887883a 	add	r3,r3,r2
    5ac4:	00801904 	movi	r2,100
    5ac8:	1885283a 	div	r2,r3,r2
    5acc:	10801924 	muli	r2,r2,100
    5ad0:	1885c83a 	sub	r2,r3,r2
    5ad4:	00c20234 	movhi	r3,2056
    5ad8:	18ff9b04 	addi	r3,r3,-404
    5adc:	100490fa 	slli	r2,r2,3
    5ae0:	10c9883a 	add	r4,r2,r3
    5ae4:	20800017 	ldw	r2,0(r4)
    5ae8:	20c00117 	ldw	r3,4(r4)
    5aec:	1009883a 	mov	r4,r2
    5af0:	180b883a 	mov	r5,r3
    5af4:	000d883a 	mov	r6,zero
    5af8:	01eff834 	movhi	r7,49120
    5afc:	00068740 	call	6874 <__muldf3>
    5b00:	1009883a 	mov	r4,r2
    5b04:	180b883a 	mov	r5,r3
    5b08:	2005883a 	mov	r2,r4
    5b0c:	2807883a 	mov	r3,r5
    5b10:	1009883a 	mov	r4,r2
    5b14:	180b883a 	mov	r5,r3
    5b18:	000d883a 	mov	r6,zero
    5b1c:	01d01c34 	movhi	r7,16496
    5b20:	39cc0004 	addi	r7,r7,12288
    5b24:	00068000 	call	6800 <__adddf3>
    5b28:	1009883a 	mov	r4,r2
    5b2c:	180b883a 	mov	r5,r3
    5b30:	2005883a 	mov	r2,r4
    5b34:	2807883a 	mov	r3,r5
    5b38:	1009883a 	mov	r4,r2
    5b3c:	180b883a 	mov	r5,r3
    5b40:	00070100 	call	7010 <__fixdfsi>
    5b44:	e0bffc15 	stw	r2,-16(fp)

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
    5b48:	e0bff317 	ldw	r2,-52(fp)
    5b4c:	10800164 	muli	r2,r2,5
    5b50:	10801a84 	addi	r2,r2,106
    5b54:	e0bffd15 	stw	r2,-12(fp)
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j+1)%100]);
    5b58:	e0fff417 	ldw	r3,-48(fp)
    5b5c:	e0bff317 	ldw	r2,-52(fp)
    5b60:	1885883a 	add	r2,r3,r2
    5b64:	10c00044 	addi	r3,r2,1
    5b68:	00801904 	movi	r2,100
    5b6c:	1885283a 	div	r2,r3,r2
    5b70:	10801924 	muli	r2,r2,100
    5b74:	1885c83a 	sub	r2,r3,r2
    5b78:	00c20234 	movhi	r3,2056
    5b7c:	18ff9b04 	addi	r3,r3,-404
    5b80:	100490fa 	slli	r2,r2,3
    5b84:	10c9883a 	add	r4,r2,r3
    5b88:	20800017 	ldw	r2,0(r4)
    5b8c:	20c00117 	ldw	r3,4(r4)
    5b90:	1009883a 	mov	r4,r2
    5b94:	180b883a 	mov	r5,r3
    5b98:	000d883a 	mov	r6,zero
    5b9c:	01eff834 	movhi	r7,49120
    5ba0:	00068740 	call	6874 <__muldf3>
    5ba4:	1009883a 	mov	r4,r2
    5ba8:	180b883a 	mov	r5,r3
    5bac:	2005883a 	mov	r2,r4
    5bb0:	2807883a 	mov	r3,r5
    5bb4:	1009883a 	mov	r4,r2
    5bb8:	180b883a 	mov	r5,r3
    5bbc:	000d883a 	mov	r6,zero
    5bc0:	01d01c34 	movhi	r7,16496
    5bc4:	39cc0004 	addi	r7,r7,12288
    5bc8:	00068000 	call	6800 <__adddf3>
    5bcc:	1009883a 	mov	r4,r2
    5bd0:	180b883a 	mov	r5,r3
    5bd4:	2005883a 	mov	r2,r4
    5bd8:	2807883a 	mov	r3,r5
    5bdc:	1009883a 	mov	r4,r2
    5be0:	180b883a 	mov	r5,r3
    5be4:	00070100 	call	7010 <__fixdfsi>
    5be8:	e0bffe15 	stw	r2,-8(fp)

				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
    5bec:	e0bff717 	ldw	r2,-36(fp)
    5bf0:	100b883a 	mov	r5,r2
    5bf4:	e0bff817 	ldw	r2,-32(fp)
    5bf8:	100d883a 	mov	r6,r2
    5bfc:	e0bff917 	ldw	r2,-28(fp)
    5c00:	100f883a 	mov	r7,r2
    5c04:	e0bffa17 	ldw	r2,-24(fp)
    5c08:	d8800015 	stw	r2,0(sp)
    5c0c:	0080ffc4 	movi	r2,1023
    5c10:	d8800115 	stw	r2,4(sp)
    5c14:	d8000215 	stw	zero,8(sp)
    5c18:	e13ff617 	ldw	r4,-40(fp)
    5c1c:	00193a80 	call	193a8 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
    5c20:	e0bffb17 	ldw	r2,-20(fp)
    5c24:	100b883a 	mov	r5,r2
    5c28:	e0bffc17 	ldw	r2,-16(fp)
    5c2c:	100d883a 	mov	r6,r2
    5c30:	e0bffd17 	ldw	r2,-12(fp)
    5c34:	100f883a 	mov	r7,r2
    5c38:	e0bffe17 	ldw	r2,-8(fp)
    5c3c:	d8800015 	stw	r2,0(sp)
    5c40:	0080ffc4 	movi	r2,1023
    5c44:	d8800115 	stw	r2,4(sp)
    5c48:	d8000215 	stw	zero,8(sp)
    5c4c:	e13ff617 	ldw	r4,-40(fp)
    5c50:	00193a80 	call	193a8 <alt_up_pixel_buffer_dma_draw_line>

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5c54:	e0bff317 	ldw	r2,-52(fp)
    5c58:	10800044 	addi	r2,r2,1
    5c5c:	e0bff315 	stw	r2,-52(fp)
    5c60:	e0bff317 	ldw	r2,-52(fp)
    5c64:	108018d0 	cmplti	r2,r2,99
    5c68:	103eef1e 	bne	r2,zero,5828 <PRVGADraw_Task+0x6ec>
				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}
		vTaskDelay(10);
    5c6c:	01000284 	movi	r4,10
    5c70:	0002e980 	call	2e98 <vTaskDelay>

	}
    5c74:	003ed406 	br	57c8 <PRVGADraw_Task+0x68c>

00005c78 <print_status_task>:
}

// The following test prints out status information every 3 seconds.
void print_status_task(void *pvParameters)
{
    5c78:	defffd04 	addi	sp,sp,-12
    5c7c:	dfc00215 	stw	ra,8(sp)
    5c80:	df000115 	stw	fp,4(sp)
    5c84:	df000104 	addi	fp,sp,4
    5c88:	e13fff15 	stw	r4,-4(fp)
	while (1)
	{
		vTaskDelay(3000);
    5c8c:	0102ee04 	movi	r4,3000
    5c90:	0002e980 	call	2e98 <vTaskDelay>
		printf("****************************************************************\n");
    5c94:	01020034 	movhi	r4,2048
    5c98:	21005d04 	addi	r4,r4,372
    5c9c:	00079fc0 	call	79fc <puts>
		printf("Hello From FreeRTOS Running on NIOS II.  Here is the status:\n");
    5ca0:	01020034 	movhi	r4,2048
    5ca4:	21006e04 	addi	r4,r4,440
    5ca8:	00079fc0 	call	79fc <puts>
		printf("\n");
    5cac:	01000284 	movi	r4,10
    5cb0:	00079380 	call	7938 <putchar>
		printf("The current frequency is:         %lf\n", temp);
    5cb4:	d0a00417 	ldw	r2,-32752(gp)
    5cb8:	01020034 	movhi	r4,2048
    5cbc:	210a0304 	addi	r4,r4,10252
    5cc0:	20c00017 	ldw	r3,0(r4)
    5cc4:	01020034 	movhi	r4,2048
    5cc8:	21007e04 	addi	r4,r4,504
    5ccc:	100b883a 	mov	r5,r2
    5cd0:	180d883a 	mov	r6,r3
    5cd4:	00078c00 	call	78c0 <printf>
		printf("\n");
    5cd8:	01000284 	movi	r4,10
    5cdc:	00079380 	call	7938 <putchar>
		printf("The frequency threshold is: %lf\n",freqThresh );
    5ce0:	d0a00617 	ldw	r2,-32744(gp)
    5ce4:	01020034 	movhi	r4,2048
    5ce8:	210a0504 	addi	r4,r4,10260
    5cec:	20c00017 	ldw	r3,0(r4)
    5cf0:	01020034 	movhi	r4,2048
    5cf4:	21008804 	addi	r4,r4,544
    5cf8:	100b883a 	mov	r5,r2
    5cfc:	180d883a 	mov	r6,r3
    5d00:	00078c00 	call	78c0 <printf>
		printf("\n");
    5d04:	01000284 	movi	r4,10
    5d08:	00079380 	call	7938 <putchar>
		printf("The current ROC is : %lf\n", ROCThresh);
    5d0c:	d0a00817 	ldw	r2,-32736(gp)
    5d10:	01020034 	movhi	r4,2048
    5d14:	210a0704 	addi	r4,r4,10268
    5d18:	20c00017 	ldw	r3,0(r4)
    5d1c:	01020034 	movhi	r4,2048
    5d20:	21009104 	addi	r4,r4,580
    5d24:	100b883a 	mov	r5,r2
    5d28:	180d883a 	mov	r6,r3
    5d2c:	00078c00 	call	78c0 <printf>
		printf("\n");
    5d30:	01000284 	movi	r4,10
    5d34:	00079380 	call	7938 <putchar>
		printf("The ROC threshold is: %lf\n", ROCThresh);
    5d38:	d0a00817 	ldw	r2,-32736(gp)
    5d3c:	01020034 	movhi	r4,2048
    5d40:	210a0704 	addi	r4,r4,10268
    5d44:	20c00017 	ldw	r3,0(r4)
    5d48:	01020034 	movhi	r4,2048
    5d4c:	21009804 	addi	r4,r4,608
    5d50:	100b883a 	mov	r5,r2
    5d54:	180d883a 	mov	r6,r3
    5d58:	00078c00 	call	78c0 <printf>
		printf("\n");
    5d5c:	01000284 	movi	r4,10
    5d60:	00079380 	call	7938 <putchar>
		printf("****************************************************************\n");
    5d64:	01020034 	movhi	r4,2048
    5d68:	21005d04 	addi	r4,r4,372
    5d6c:	00079fc0 	call	79fc <puts>
		printf("\n");
    5d70:	01000284 	movi	r4,10
    5d74:	00079380 	call	7938 <putchar>
	}
    5d78:	003fc406 	br	5c8c <print_status_task+0x14>

00005d7c <keyboard_control_task>:
}

void keyboard_control_task(void *pvParameters)
{	int notiValue;
    5d7c:	defff804 	addi	sp,sp,-32
    5d80:	dfc00715 	stw	ra,28(sp)
    5d84:	df000615 	stw	fp,24(sp)
    5d88:	df000604 	addi	fp,sp,24
    5d8c:	e13fff15 	stw	r4,-4(fp)
	int i;
	int j = 0;
    5d90:	e03ffa15 	stw	zero,-24(fp)
	while (1)
	{	notiValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    5d94:	01000044 	movi	r4,1
    5d98:	017fffc4 	movi	r5,-1
    5d9c:	00042500 	call	4250 <ulTaskNotifyTake>
    5da0:	e0bffc15 	stw	r2,-16(fp)
		//printf("Scan code: %x\n", byte);



	if((byte == 45)&&(keyboardMode ==0)){
    5da4:	d0a03f03 	ldbu	r2,-32516(gp)
    5da8:	10803fcc 	andi	r2,r2,255
    5dac:	10800b58 	cmpnei	r2,r2,45
    5db0:	1000101e 	bne	r2,zero,5df4 <keyboard_control_task+0x78>
    5db4:	d0a03903 	ldbu	r2,-32540(gp)
    5db8:	10803fcc 	andi	r2,r2,255
    5dbc:	1004c03a 	cmpne	r2,r2,zero
    5dc0:	10000c1e 	bne	r2,zero,5df4 <keyboard_control_task+0x78>
		memset(testStr, 0, 30);
    5dc4:	00820234 	movhi	r2,2056
    5dc8:	10becb84 	addi	r2,r2,-1234
    5dcc:	1009883a 	mov	r4,r2
    5dd0:	01800784 	movi	r6,30
    5dd4:	000b883a 	mov	r5,zero
    5dd8:	00078280 	call	7828 <memset>
		j =0;
    5ddc:	e03ffa15 	stw	zero,-24(fp)
		printf("you are about to change ROC threshold\n");
    5de0:	01020034 	movhi	r4,2048
    5de4:	21009f04 	addi	r4,r4,636
    5de8:	00079fc0 	call	79fc <puts>
		keyboardMode =2;
    5dec:	00800084 	movi	r2,2
    5df0:	d0a03905 	stb	r2,-32540(gp)
	}
	if(keyboardMode ==2){
    5df4:	d0a03903 	ldbu	r2,-32540(gp)
    5df8:	10803fcc 	andi	r2,r2,255
    5dfc:	10800098 	cmpnei	r2,r2,2
    5e00:	10005e1e 	bne	r2,zero,5f7c <keyboard_control_task+0x200>
		if(byte == 90){
    5e04:	d0a03f03 	ldbu	r2,-32516(gp)
    5e08:	10803fcc 	andi	r2,r2,255
    5e0c:	10801698 	cmpnei	r2,r2,90
    5e10:	10002f1e 	bne	r2,zero,5ed0 <keyboard_control_task+0x154>
		for(i = 0; i <20; i++){
    5e14:	e03ffb15 	stw	zero,-20(fp)
    5e18:	00001406 	br	5e6c <keyboard_control_task+0xf0>
			if(i%2 == 0){
    5e1c:	e0bffb17 	ldw	r2,-20(fp)
    5e20:	1080004c 	andi	r2,r2,1
    5e24:	1004c03a 	cmpne	r2,r2,zero
    5e28:	10000d1e 	bne	r2,zero,5e60 <keyboard_control_task+0xe4>
				oddStr[j++] = testStr[i];
    5e2c:	e13ffa17 	ldw	r4,-24(fp)
    5e30:	e0fffb17 	ldw	r3,-20(fp)
    5e34:	00820234 	movhi	r2,2056
    5e38:	10becb84 	addi	r2,r2,-1234
    5e3c:	10c5883a 	add	r2,r2,r3
    5e40:	10c00003 	ldbu	r3,0(r2)
    5e44:	00820234 	movhi	r2,2056
    5e48:	10bec904 	addi	r2,r2,-1244
    5e4c:	1105883a 	add	r2,r2,r4
    5e50:	10c00005 	stb	r3,0(r2)
    5e54:	e0bffa17 	ldw	r2,-24(fp)
    5e58:	10800044 	addi	r2,r2,1
    5e5c:	e0bffa15 	stw	r2,-24(fp)
		printf("you are about to change ROC threshold\n");
		keyboardMode =2;
	}
	if(keyboardMode ==2){
		if(byte == 90){
		for(i = 0; i <20; i++){
    5e60:	e0bffb17 	ldw	r2,-20(fp)
    5e64:	10800044 	addi	r2,r2,1
    5e68:	e0bffb15 	stw	r2,-20(fp)
    5e6c:	e0bffb17 	ldw	r2,-20(fp)
    5e70:	10800510 	cmplti	r2,r2,20
    5e74:	103fe91e 	bne	r2,zero,5e1c <keyboard_control_task+0xa0>
			if(i%2 == 0){
				oddStr[j++] = testStr[i];
			}
		}
		ROCThresh = strtod(oddStr, &oddStr);
    5e78:	01420234 	movhi	r5,2056
    5e7c:	297ec904 	addi	r5,r5,-1244
    5e80:	01020234 	movhi	r4,2056
    5e84:	213ec904 	addi	r4,r4,-1244
    5e88:	00092580 	call	9258 <strtod>
    5e8c:	1009883a 	mov	r4,r2
    5e90:	180b883a 	mov	r5,r3
    5e94:	d1200815 	stw	r4,-32736(gp)
    5e98:	00820034 	movhi	r2,2048
    5e9c:	108a0704 	addi	r2,r2,10268
    5ea0:	11400015 	stw	r5,0(r2)
		printf("double ROC Threshold: %lf\n", ROCThresh);
    5ea4:	d0a00817 	ldw	r2,-32736(gp)
    5ea8:	01020034 	movhi	r4,2048
    5eac:	210a0704 	addi	r4,r4,10268
    5eb0:	20c00017 	ldw	r3,0(r4)
    5eb4:	01020034 	movhi	r4,2048
    5eb8:	2100a904 	addi	r4,r4,676
    5ebc:	100b883a 	mov	r5,r2
    5ec0:	180d883a 	mov	r6,r3
    5ec4:	00078c00 	call	78c0 <printf>
		keyboardMode =0;
    5ec8:	d0203905 	stb	zero,-32540(gp)
    5ecc:	00002b06 	br	5f7c <keyboard_control_task+0x200>
		}
		else{
					for(i = 0; i < 11; i ++){
    5ed0:	e03ffb15 	stw	zero,-20(fp)
    5ed4:	00002606 	br	5f70 <keyboard_control_task+0x1f4>
						char keyPadNum[4];
						if(byte == numbers[i]){
    5ed8:	d0a03f03 	ldbu	r2,-32516(gp)
    5edc:	11003fcc 	andi	r4,r2,255
    5ee0:	e0bffb17 	ldw	r2,-20(fp)
    5ee4:	00c20034 	movhi	r3,2048
    5ee8:	18c01604 	addi	r3,r3,88
    5eec:	1085883a 	add	r2,r2,r2
    5ef0:	1085883a 	add	r2,r2,r2
    5ef4:	10c5883a 	add	r2,r2,r3
    5ef8:	10800017 	ldw	r2,0(r2)
    5efc:	2080191e 	bne	r4,r2,5f64 <keyboard_control_task+0x1e8>
							if(i != 10){
    5f00:	e0bffb17 	ldw	r2,-20(fp)
    5f04:	108002a0 	cmpeqi	r2,r2,10
    5f08:	10000b1e 	bne	r2,zero,5f38 <keyboard_control_task+0x1bc>
							sprintf(keyPadNum, "%d", i);
    5f0c:	e13ffd04 	addi	r4,fp,-12
    5f10:	01420034 	movhi	r5,2048
    5f14:	2940b004 	addi	r5,r5,704
    5f18:	e1bffb17 	ldw	r6,-20(fp)
    5f1c:	0007a100 	call	7a10 <sprintf>
							//printf("new freq Threshold: %s\n", keyPadNum);
							strncat(testStr, &keyPadNum[0], 1);
    5f20:	e17ffd04 	addi	r5,fp,-12
    5f24:	01020234 	movhi	r4,2056
    5f28:	213ecb84 	addi	r4,r4,-1234
    5f2c:	01800044 	movi	r6,1
    5f30:	0007b580 	call	7b58 <strncat>
    5f34:	00000b06 	br	5f64 <keyboard_control_task+0x1e8>
							//printf("new ROC Threshold: %s\n", testStr);

						}else{
							strncat(testStr, &".", 1);
    5f38:	01020234 	movhi	r4,2056
    5f3c:	213ecb84 	addi	r4,r4,-1234
    5f40:	0007ae40 	call	7ae4 <strlen>
    5f44:	1007883a 	mov	r3,r2
    5f48:	00820234 	movhi	r2,2056
    5f4c:	10becb84 	addi	r2,r2,-1234
    5f50:	1885883a 	add	r2,r3,r2
    5f54:	1007883a 	mov	r3,r2
    5f58:	00800b84 	movi	r2,46
    5f5c:	18800005 	stb	r2,0(r3)
    5f60:	18000045 	stb	zero,1(r3)
		ROCThresh = strtod(oddStr, &oddStr);
		printf("double ROC Threshold: %lf\n", ROCThresh);
		keyboardMode =0;
		}
		else{
					for(i = 0; i < 11; i ++){
    5f64:	e0bffb17 	ldw	r2,-20(fp)
    5f68:	10800044 	addi	r2,r2,1
    5f6c:	e0bffb15 	stw	r2,-20(fp)
    5f70:	e0bffb17 	ldw	r2,-20(fp)
    5f74:	108002d0 	cmplti	r2,r2,11
    5f78:	103fd71e 	bne	r2,zero,5ed8 <keyboard_control_task+0x15c>





		if((byte == 43)&&(keyboardMode ==0)){
    5f7c:	d0a03f03 	ldbu	r2,-32516(gp)
    5f80:	10803fcc 	andi	r2,r2,255
    5f84:	10800ad8 	cmpnei	r2,r2,43
    5f88:	1000101e 	bne	r2,zero,5fcc <keyboard_control_task+0x250>
    5f8c:	d0a03903 	ldbu	r2,-32540(gp)
    5f90:	10803fcc 	andi	r2,r2,255
    5f94:	1004c03a 	cmpne	r2,r2,zero
    5f98:	10000c1e 	bne	r2,zero,5fcc <keyboard_control_task+0x250>
			memset(testStr, 0, 30);
    5f9c:	00820234 	movhi	r2,2056
    5fa0:	10becb84 	addi	r2,r2,-1234
    5fa4:	1009883a 	mov	r4,r2
    5fa8:	01800784 	movi	r6,30
    5fac:	000b883a 	mov	r5,zero
    5fb0:	00078280 	call	7828 <memset>
			j =0;
    5fb4:	e03ffa15 	stw	zero,-24(fp)
			printf("you are about to change frequency threshold\n");
    5fb8:	01020034 	movhi	r4,2048
    5fbc:	2100b104 	addi	r4,r4,708
    5fc0:	00079fc0 	call	79fc <puts>
			keyboardMode =1;
    5fc4:	00800044 	movi	r2,1
    5fc8:	d0a03905 	stb	r2,-32540(gp)
		}
		if(keyboardMode ==1){
    5fcc:	d0a03903 	ldbu	r2,-32540(gp)
    5fd0:	10803fcc 	andi	r2,r2,255
    5fd4:	10800058 	cmpnei	r2,r2,1
    5fd8:	10005e1e 	bne	r2,zero,6154 <keyboard_control_task+0x3d8>
			if(byte == 90){
    5fdc:	d0a03f03 	ldbu	r2,-32516(gp)
    5fe0:	10803fcc 	andi	r2,r2,255
    5fe4:	10801698 	cmpnei	r2,r2,90
    5fe8:	10002f1e 	bne	r2,zero,60a8 <keyboard_control_task+0x32c>
			for(i = 0; i <20; i++){
    5fec:	e03ffb15 	stw	zero,-20(fp)
    5ff0:	00001406 	br	6044 <keyboard_control_task+0x2c8>
				if(i%2 == 0){
    5ff4:	e0bffb17 	ldw	r2,-20(fp)
    5ff8:	1080004c 	andi	r2,r2,1
    5ffc:	1004c03a 	cmpne	r2,r2,zero
    6000:	10000d1e 	bne	r2,zero,6038 <keyboard_control_task+0x2bc>
					oddStr[j++] = testStr[i];
    6004:	e13ffa17 	ldw	r4,-24(fp)
    6008:	e0fffb17 	ldw	r3,-20(fp)
    600c:	00820234 	movhi	r2,2056
    6010:	10becb84 	addi	r2,r2,-1234
    6014:	10c5883a 	add	r2,r2,r3
    6018:	10c00003 	ldbu	r3,0(r2)
    601c:	00820234 	movhi	r2,2056
    6020:	10bec904 	addi	r2,r2,-1244
    6024:	1105883a 	add	r2,r2,r4
    6028:	10c00005 	stb	r3,0(r2)
    602c:	e0bffa17 	ldw	r2,-24(fp)
    6030:	10800044 	addi	r2,r2,1
    6034:	e0bffa15 	stw	r2,-24(fp)
			printf("you are about to change frequency threshold\n");
			keyboardMode =1;
		}
		if(keyboardMode ==1){
			if(byte == 90){
			for(i = 0; i <20; i++){
    6038:	e0bffb17 	ldw	r2,-20(fp)
    603c:	10800044 	addi	r2,r2,1
    6040:	e0bffb15 	stw	r2,-20(fp)
    6044:	e0bffb17 	ldw	r2,-20(fp)
    6048:	10800510 	cmplti	r2,r2,20
    604c:	103fe91e 	bne	r2,zero,5ff4 <keyboard_control_task+0x278>
				if(i%2 == 0){
					oddStr[j++] = testStr[i];
				}
			}
			freqThresh = strtod(oddStr, &oddStr);
    6050:	01420234 	movhi	r5,2056
    6054:	297ec904 	addi	r5,r5,-1244
    6058:	01020234 	movhi	r4,2056
    605c:	213ec904 	addi	r4,r4,-1244
    6060:	00092580 	call	9258 <strtod>
    6064:	1009883a 	mov	r4,r2
    6068:	180b883a 	mov	r5,r3
    606c:	d1200615 	stw	r4,-32744(gp)
    6070:	00820034 	movhi	r2,2048
    6074:	108a0504 	addi	r2,r2,10260
    6078:	11400015 	stw	r5,0(r2)
			printf("double freq Threshold: %lf\n", freqThresh);
    607c:	d0a00617 	ldw	r2,-32744(gp)
    6080:	01020034 	movhi	r4,2048
    6084:	210a0504 	addi	r4,r4,10260
    6088:	20c00017 	ldw	r3,0(r4)
    608c:	01020034 	movhi	r4,2048
    6090:	2100bc04 	addi	r4,r4,752
    6094:	100b883a 	mov	r5,r2
    6098:	180d883a 	mov	r6,r3
    609c:	00078c00 	call	78c0 <printf>
			keyboardMode =0;
    60a0:	d0203905 	stb	zero,-32540(gp)
    60a4:	00002b06 	br	6154 <keyboard_control_task+0x3d8>
			}else{
			for(i = 0; i < 11; i ++){
    60a8:	e03ffb15 	stw	zero,-20(fp)
    60ac:	00002606 	br	6148 <keyboard_control_task+0x3cc>
				char keyPadNum[4];
				if(byte == numbers[i]){
    60b0:	d0a03f03 	ldbu	r2,-32516(gp)
    60b4:	11003fcc 	andi	r4,r2,255
    60b8:	e0bffb17 	ldw	r2,-20(fp)
    60bc:	00c20034 	movhi	r3,2048
    60c0:	18c01604 	addi	r3,r3,88
    60c4:	1085883a 	add	r2,r2,r2
    60c8:	1085883a 	add	r2,r2,r2
    60cc:	10c5883a 	add	r2,r2,r3
    60d0:	10800017 	ldw	r2,0(r2)
    60d4:	2080191e 	bne	r4,r2,613c <keyboard_control_task+0x3c0>
					if(i != 10){
    60d8:	e0bffb17 	ldw	r2,-20(fp)
    60dc:	108002a0 	cmpeqi	r2,r2,10
    60e0:	10000b1e 	bne	r2,zero,6110 <keyboard_control_task+0x394>
					sprintf(keyPadNum, "%d", i);
    60e4:	e13ffe04 	addi	r4,fp,-8
    60e8:	01420034 	movhi	r5,2048
    60ec:	2940b004 	addi	r5,r5,704
    60f0:	e1bffb17 	ldw	r6,-20(fp)
    60f4:	0007a100 	call	7a10 <sprintf>
					//printf("new freq Threshold: %s\n", keyPadNum);
					strncat(testStr, &keyPadNum[0], 1);
    60f8:	e17ffe04 	addi	r5,fp,-8
    60fc:	01020234 	movhi	r4,2056
    6100:	213ecb84 	addi	r4,r4,-1234
    6104:	01800044 	movi	r6,1
    6108:	0007b580 	call	7b58 <strncat>
    610c:	00000b06 	br	613c <keyboard_control_task+0x3c0>
					//printf("new freq Threshold: %s\n", testStr);

				}else{
					strncat(testStr, &".", 1);
    6110:	01020234 	movhi	r4,2056
    6114:	213ecb84 	addi	r4,r4,-1234
    6118:	0007ae40 	call	7ae4 <strlen>
    611c:	1007883a 	mov	r3,r2
    6120:	00820234 	movhi	r2,2056
    6124:	10becb84 	addi	r2,r2,-1234
    6128:	1885883a 	add	r2,r3,r2
    612c:	1007883a 	mov	r3,r2
    6130:	00800b84 	movi	r2,46
    6134:	18800005 	stb	r2,0(r3)
    6138:	18000045 	stb	zero,1(r3)
			}
			freqThresh = strtod(oddStr, &oddStr);
			printf("double freq Threshold: %lf\n", freqThresh);
			keyboardMode =0;
			}else{
			for(i = 0; i < 11; i ++){
    613c:	e0bffb17 	ldw	r2,-20(fp)
    6140:	10800044 	addi	r2,r2,1
    6144:	e0bffb15 	stw	r2,-20(fp)
    6148:	e0bffb17 	ldw	r2,-20(fp)
    614c:	108002d0 	cmplti	r2,r2,11
    6150:	103fd71e 	bne	r2,zero,60b0 <keyboard_control_task+0x334>
				}
			}
		}
		}

		previousbyte = byte;
    6154:	d0a03f03 	ldbu	r2,-32516(gp)
    6158:	d0a03d05 	stb	r2,-32524(gp)
	}
    615c:	003f0d06 	br	5d94 <keyboard_control_task+0x18>

00006160 <stabilityMonitorTask>:
}

void stabilityMonitorTask(void *p){
    6160:	defffc04 	addi	sp,sp,-16
    6164:	dfc00315 	stw	ra,12(sp)
    6168:	df000215 	stw	fp,8(sp)
    616c:	df000204 	addi	fp,sp,8
    6170:	e13fff15 	stw	r4,-4(fp)
	int notiValue;
	while (1)
		{	notiValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    6174:	01000044 	movi	r4,1
    6178:	017fffc4 	movi	r5,-1
    617c:	00042500 	call	4250 <ulTaskNotifyTake>
    6180:	e0bffe15 	stw	r2,-8(fp)
			printf("Scan code: %lf\n", temp);
    6184:	d0a00417 	ldw	r2,-32752(gp)
    6188:	01020034 	movhi	r4,2048
    618c:	210a0304 	addi	r4,r4,10252
    6190:	20c00017 	ldw	r3,0(r4)
    6194:	01020034 	movhi	r4,2048
    6198:	2100c304 	addi	r4,r4,780
    619c:	100b883a 	mov	r5,r2
    61a0:	180d883a 	mov	r6,r3
    61a4:	00078c00 	call	78c0 <printf>
		}
    61a8:	003ff206 	br	6174 <stabilityMonitorTask+0x14>

000061ac <freq_relay>:
}


void freq_relay(){
    61ac:	defffd04 	addi	sp,sp,-12
    61b0:	dfc00215 	stw	ra,8(sp)
    61b4:	df000115 	stw	fp,4(sp)
    61b8:	df000104 	addi	fp,sp,4
	#define SAMPLING_FREQ 16000.0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    61bc:	e03fff15 	stw	zero,-4(fp)
	temp = SAMPLING_FREQ/(double)IORD(FREQUENCY_ANALYSER_BASE, 0);
    61c0:	00800134 	movhi	r2,4
    61c4:	108c4004 	addi	r2,r2,12544
    61c8:	11000037 	ldwio	r4,0(r2)
    61cc:	0006f180 	call	6f18 <__floatsidf>
    61d0:	100f883a 	mov	r7,r2
    61d4:	1811883a 	mov	r8,r3
    61d8:	0009883a 	mov	r4,zero
    61dc:	015033f4 	movhi	r5,16591
    61e0:	29500004 	addi	r5,r5,16384
    61e4:	380d883a 	mov	r6,r7
    61e8:	400f883a 	mov	r7,r8
    61ec:	0006c380 	call	6c38 <__divdf3>
    61f0:	1009883a 	mov	r4,r2
    61f4:	180b883a 	mov	r5,r3
    61f8:	2005883a 	mov	r2,r4
    61fc:	2807883a 	mov	r3,r5
    6200:	d0a00415 	stw	r2,-32752(gp)
    6204:	01020034 	movhi	r4,2048
    6208:	210a0304 	addi	r4,r4,10252
    620c:	20c00015 	stw	r3,0(r4)


	xQueueSendToBackFromISR( Q_freq_data, &temp, pdFALSE );
    6210:	d1203a17 	ldw	r4,-32536(gp)
    6214:	d1600404 	addi	r5,gp,-32752
    6218:	000d883a 	mov	r6,zero
    621c:	000f883a 	mov	r7,zero
    6220:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
	//xTaskNotifyFromISR(stableTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
	return;
}
    6224:	e037883a 	mov	sp,fp
    6228:	dfc00117 	ldw	ra,4(sp)
    622c:	df000017 	ldw	fp,0(sp)
    6230:	dec00204 	addi	sp,sp,8
    6234:	f800283a 	ret

00006238 <ps2_isr>:

void ps2_isr(void* ps2_device, alt_u32 id){
    6238:	defffb04 	addi	sp,sp,-20
    623c:	dfc00415 	stw	ra,16(sp)
    6240:	df000315 	stw	fp,12(sp)
    6244:	df000304 	addi	fp,sp,12
    6248:	e13ffe15 	stw	r4,-8(fp)
    624c:	e17fff15 	stw	r5,-4(fp)

	alt_up_ps2_read_data_byte_timeout(ps2_device, &byte);
    6250:	e13ffe17 	ldw	r4,-8(fp)
    6254:	d1603f04 	addi	r5,gp,-32516
    6258:	0017bcc0 	call	17bcc <alt_up_ps2_read_data_byte_timeout>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    625c:	e03ffd15 	stw	zero,-12(fp)
	  // Send a notification to index 0 with value 1
	xTaskNotifyFromISR(keyboardTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    6260:	d1204017 	ldw	r4,-32512(gp)
    6264:	01400044 	movi	r5,1
    6268:	018000c4 	movi	r6,3
    626c:	e1fffd04 	addi	r7,fp,-12
    6270:	00045bc0 	call	45bc <xTaskNotifyFromISR>
}
    6274:	e037883a 	mov	sp,fp
    6278:	dfc00117 	ldw	ra,4(sp)
    627c:	df000017 	ldw	fp,0(sp)
    6280:	dec00204 	addi	sp,sp,8
    6284:	f800283a 	ret

00006288 <main>:

int main()
{
    6288:	defff904 	addi	sp,sp,-28
    628c:	dfc00615 	stw	ra,24(sp)
    6290:	df000515 	stw	fp,20(sp)
    6294:	df000504 	addi	fp,sp,20
	Q_freq_data = xQueueCreate(100,sizeof(double));
    6298:	01001904 	movi	r4,100
    629c:	01400204 	movi	r5,8
    62a0:	000d883a 	mov	r6,zero
    62a4:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    62a8:	d0a03a15 	stw	r2,-32536(gp)
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
    62ac:	01020034 	movhi	r4,2048
    62b0:	2100c704 	addi	r4,r4,796
    62b4:	0017e940 	call	17e94 <alt_up_ps2_open_dev>
    62b8:	e0bfff15 	stw	r2,-4(fp)

	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay);
    62bc:	010001c4 	movi	r4,7
    62c0:	000b883a 	mov	r5,zero
    62c4:	01800034 	movhi	r6,0
    62c8:	31986b04 	addi	r6,r6,25004
    62cc:	00019140 	call	1914 <alt_irq_register>

	alt_up_ps2_enable_read_interrupt(ps2_device);
    62d0:	e13fff17 	ldw	r4,-4(fp)
    62d4:	00179cc0 	call	179cc <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
    62d8:	01000084 	movi	r4,2
    62dc:	e17fff17 	ldw	r5,-4(fp)
    62e0:	01800034 	movhi	r6,0
    62e4:	31988e04 	addi	r6,r6,25144
    62e8:	00019140 	call	1914 <alt_irq_register>

	xTaskCreate( PRVGADraw_Task, "DrawTsk", configMINIMAL_STACK_SIZE, NULL, PRVGADraw_Task_P, &PRVGADraw );
    62ec:	00800044 	movi	r2,1
    62f0:	d8800015 	stw	r2,0(sp)
    62f4:	d0a03e04 	addi	r2,gp,-32520
    62f8:	d8800115 	stw	r2,4(sp)
    62fc:	d8000215 	stw	zero,8(sp)
    6300:	d8000315 	stw	zero,12(sp)
    6304:	01000034 	movhi	r4,0
    6308:	21144f04 	addi	r4,r4,20796
    630c:	01420034 	movhi	r5,2048
    6310:	2940ca04 	addi	r5,r5,808
    6314:	01880004 	movi	r6,8192
    6318:	000f883a 	mov	r7,zero
    631c:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	//xTaskCreate(print_status_task, "print_status_task", configMINIMAL_STACK_SIZE, NULL, PRINT_STATUS_TASK_PRIORITY, NULL);
	xTaskCreate(keyboard_control_task, "keyboardTsk", configMINIMAL_STACK_SIZE, NULL, PRINT_STATUS_TASK_PRIORITY, &keyboardTaskHandle);
    6320:	00800084 	movi	r2,2
    6324:	d8800015 	stw	r2,0(sp)
    6328:	d0a04004 	addi	r2,gp,-32512
    632c:	d8800115 	stw	r2,4(sp)
    6330:	d8000215 	stw	zero,8(sp)
    6334:	d8000315 	stw	zero,12(sp)
    6338:	01000034 	movhi	r4,0
    633c:	21175f04 	addi	r4,r4,23932
    6340:	01420034 	movhi	r5,2048
    6344:	2940cc04 	addi	r5,r5,816
    6348:	01880004 	movi	r6,8192
    634c:	000f883a 	mov	r7,zero
    6350:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	//xTaskCreate(stabilityMonitorTask, "stableMonitorTsk", configMINIMAL_STACK_SIZE, NULL, STABLE_MONITOR_TASK_P, stableTaskHandle);

	vTaskStartScheduler();
    6354:	0002f100 	call	2f10 <vTaskStartScheduler>

	while(1)

  return 0;
    6358:	0005883a 	mov	r2,zero
}
    635c:	e037883a 	mov	sp,fp
    6360:	dfc00117 	ldw	ra,4(sp)
    6364:	df000017 	ldw	fp,0(sp)
    6368:	dec00204 	addi	sp,sp,8
    636c:	f800283a 	ret

00006370 <_fpadd_parts>:
    6370:	defff804 	addi	sp,sp,-32
    6374:	dcc00315 	stw	r19,12(sp)
    6378:	2027883a 	mov	r19,r4
    637c:	21000017 	ldw	r4,0(r4)
    6380:	00c00044 	movi	r3,1
    6384:	dd400515 	stw	r21,20(sp)
    6388:	dd000415 	stw	r20,16(sp)
    638c:	ddc00715 	stw	r23,28(sp)
    6390:	dd800615 	stw	r22,24(sp)
    6394:	dc800215 	stw	r18,8(sp)
    6398:	dc400115 	stw	r17,4(sp)
    639c:	dc000015 	stw	r16,0(sp)
    63a0:	282b883a 	mov	r21,r5
    63a4:	3029883a 	mov	r20,r6
    63a8:	1900632e 	bgeu	r3,r4,6538 <_fpadd_parts+0x1c8>
    63ac:	28800017 	ldw	r2,0(r5)
    63b0:	1880812e 	bgeu	r3,r2,65b8 <_fpadd_parts+0x248>
    63b4:	00c00104 	movi	r3,4
    63b8:	20c0dc26 	beq	r4,r3,672c <_fpadd_parts+0x3bc>
    63bc:	10c07e26 	beq	r2,r3,65b8 <_fpadd_parts+0x248>
    63c0:	00c00084 	movi	r3,2
    63c4:	10c06726 	beq	r2,r3,6564 <_fpadd_parts+0x1f4>
    63c8:	20c07b26 	beq	r4,r3,65b8 <_fpadd_parts+0x248>
    63cc:	9dc00217 	ldw	r23,8(r19)
    63d0:	28c00217 	ldw	r3,8(r5)
    63d4:	9c400317 	ldw	r17,12(r19)
    63d8:	2bc00317 	ldw	r15,12(r5)
    63dc:	b8cdc83a 	sub	r6,r23,r3
    63e0:	9c800417 	ldw	r18,16(r19)
    63e4:	2c000417 	ldw	r16,16(r5)
    63e8:	3009883a 	mov	r4,r6
    63ec:	30009716 	blt	r6,zero,664c <_fpadd_parts+0x2dc>
    63f0:	00800fc4 	movi	r2,63
    63f4:	11806b16 	blt	r2,r6,65a4 <_fpadd_parts+0x234>
    63f8:	0100a40e 	bge	zero,r4,668c <_fpadd_parts+0x31c>
    63fc:	35bff804 	addi	r22,r6,-32
    6400:	b000bc16 	blt	r22,zero,66f4 <_fpadd_parts+0x384>
    6404:	8596d83a 	srl	r11,r16,r22
    6408:	0019883a 	mov	r12,zero
    640c:	0013883a 	mov	r9,zero
    6410:	01000044 	movi	r4,1
    6414:	0015883a 	mov	r10,zero
    6418:	b000be16 	blt	r22,zero,6714 <_fpadd_parts+0x3a4>
    641c:	2590983a 	sll	r8,r4,r22
    6420:	000f883a 	mov	r7,zero
    6424:	00bfffc4 	movi	r2,-1
    6428:	3889883a 	add	r4,r7,r2
    642c:	408b883a 	add	r5,r8,r2
    6430:	21cd803a 	cmpltu	r6,r4,r7
    6434:	314b883a 	add	r5,r6,r5
    6438:	7904703a 	and	r2,r15,r4
    643c:	8146703a 	and	r3,r16,r5
    6440:	10c4b03a 	or	r2,r2,r3
    6444:	10000226 	beq	r2,zero,6450 <_fpadd_parts+0xe0>
    6448:	02400044 	movi	r9,1
    644c:	0015883a 	mov	r10,zero
    6450:	5a5eb03a 	or	r15,r11,r9
    6454:	62a0b03a 	or	r16,r12,r10
    6458:	99400117 	ldw	r5,4(r19)
    645c:	a8800117 	ldw	r2,4(r21)
    6460:	28806e26 	beq	r5,r2,661c <_fpadd_parts+0x2ac>
    6464:	28006626 	beq	r5,zero,6600 <_fpadd_parts+0x290>
    6468:	7c45c83a 	sub	r2,r15,r17
    646c:	7889803a 	cmpltu	r4,r15,r2
    6470:	8487c83a 	sub	r3,r16,r18
    6474:	1909c83a 	sub	r4,r3,r4
    6478:	100d883a 	mov	r6,r2
    647c:	200f883a 	mov	r7,r4
    6480:	38007716 	blt	r7,zero,6660 <_fpadd_parts+0x2f0>
    6484:	a5c00215 	stw	r23,8(r20)
    6488:	a1c00415 	stw	r7,16(r20)
    648c:	a0000115 	stw	zero,4(r20)
    6490:	a1800315 	stw	r6,12(r20)
    6494:	a2000317 	ldw	r8,12(r20)
    6498:	a2400417 	ldw	r9,16(r20)
    649c:	00bfffc4 	movi	r2,-1
    64a0:	408b883a 	add	r5,r8,r2
    64a4:	2a09803a 	cmpltu	r4,r5,r8
    64a8:	488d883a 	add	r6,r9,r2
    64ac:	01c40034 	movhi	r7,4096
    64b0:	39ffffc4 	addi	r7,r7,-1
    64b4:	218d883a 	add	r6,r4,r6
    64b8:	39801736 	bltu	r7,r6,6518 <_fpadd_parts+0x1a8>
    64bc:	31c06526 	beq	r6,r7,6654 <_fpadd_parts+0x2e4>
    64c0:	a3000217 	ldw	r12,8(r20)
    64c4:	4209883a 	add	r4,r8,r8
    64c8:	00bfffc4 	movi	r2,-1
    64cc:	220f803a 	cmpltu	r7,r4,r8
    64d0:	4a4b883a 	add	r5,r9,r9
    64d4:	394f883a 	add	r7,r7,r5
    64d8:	2095883a 	add	r10,r4,r2
    64dc:	3897883a 	add	r11,r7,r2
    64e0:	510d803a 	cmpltu	r6,r10,r4
    64e4:	6099883a 	add	r12,r12,r2
    64e8:	32d7883a 	add	r11,r6,r11
    64ec:	00840034 	movhi	r2,4096
    64f0:	10bfffc4 	addi	r2,r2,-1
    64f4:	2011883a 	mov	r8,r4
    64f8:	3813883a 	mov	r9,r7
    64fc:	a1000315 	stw	r4,12(r20)
    6500:	a1c00415 	stw	r7,16(r20)
    6504:	a3000215 	stw	r12,8(r20)
    6508:	12c00336 	bltu	r2,r11,6518 <_fpadd_parts+0x1a8>
    650c:	58bfed1e 	bne	r11,r2,64c4 <_fpadd_parts+0x154>
    6510:	00bfff84 	movi	r2,-2
    6514:	12bfeb2e 	bgeu	r2,r10,64c4 <_fpadd_parts+0x154>
    6518:	a2800417 	ldw	r10,16(r20)
    651c:	008000c4 	movi	r2,3
    6520:	00c80034 	movhi	r3,8192
    6524:	18ffffc4 	addi	r3,r3,-1
    6528:	a2400317 	ldw	r9,12(r20)
    652c:	a0800015 	stw	r2,0(r20)
    6530:	1a802336 	bltu	r3,r10,65c0 <_fpadd_parts+0x250>
    6534:	a027883a 	mov	r19,r20
    6538:	9805883a 	mov	r2,r19
    653c:	ddc00717 	ldw	r23,28(sp)
    6540:	dd800617 	ldw	r22,24(sp)
    6544:	dd400517 	ldw	r21,20(sp)
    6548:	dd000417 	ldw	r20,16(sp)
    654c:	dcc00317 	ldw	r19,12(sp)
    6550:	dc800217 	ldw	r18,8(sp)
    6554:	dc400117 	ldw	r17,4(sp)
    6558:	dc000017 	ldw	r16,0(sp)
    655c:	dec00804 	addi	sp,sp,32
    6560:	f800283a 	ret
    6564:	20fff41e 	bne	r4,r3,6538 <_fpadd_parts+0x1c8>
    6568:	31000015 	stw	r4,0(r6)
    656c:	98800117 	ldw	r2,4(r19)
    6570:	30800115 	stw	r2,4(r6)
    6574:	98c00217 	ldw	r3,8(r19)
    6578:	30c00215 	stw	r3,8(r6)
    657c:	98800317 	ldw	r2,12(r19)
    6580:	30800315 	stw	r2,12(r6)
    6584:	98c00417 	ldw	r3,16(r19)
    6588:	30c00415 	stw	r3,16(r6)
    658c:	98800117 	ldw	r2,4(r19)
    6590:	28c00117 	ldw	r3,4(r5)
    6594:	3027883a 	mov	r19,r6
    6598:	10c4703a 	and	r2,r2,r3
    659c:	30800115 	stw	r2,4(r6)
    65a0:	003fe506 	br	6538 <_fpadd_parts+0x1c8>
    65a4:	1dc02616 	blt	r3,r23,6640 <_fpadd_parts+0x2d0>
    65a8:	0023883a 	mov	r17,zero
    65ac:	182f883a 	mov	r23,r3
    65b0:	0025883a 	mov	r18,zero
    65b4:	003fa806 	br	6458 <_fpadd_parts+0xe8>
    65b8:	a827883a 	mov	r19,r21
    65bc:	003fde06 	br	6538 <_fpadd_parts+0x1c8>
    65c0:	01800044 	movi	r6,1
    65c4:	500497fa 	slli	r2,r10,31
    65c8:	4808d07a 	srli	r4,r9,1
    65cc:	518ad83a 	srl	r5,r10,r6
    65d0:	a2000217 	ldw	r8,8(r20)
    65d4:	1108b03a 	or	r4,r2,r4
    65d8:	0007883a 	mov	r3,zero
    65dc:	4984703a 	and	r2,r9,r6
    65e0:	208cb03a 	or	r6,r4,r2
    65e4:	28ceb03a 	or	r7,r5,r3
    65e8:	42000044 	addi	r8,r8,1
    65ec:	a027883a 	mov	r19,r20
    65f0:	a1c00415 	stw	r7,16(r20)
    65f4:	a2000215 	stw	r8,8(r20)
    65f8:	a1800315 	stw	r6,12(r20)
    65fc:	003fce06 	br	6538 <_fpadd_parts+0x1c8>
    6600:	8bc5c83a 	sub	r2,r17,r15
    6604:	8889803a 	cmpltu	r4,r17,r2
    6608:	9407c83a 	sub	r3,r18,r16
    660c:	1909c83a 	sub	r4,r3,r4
    6610:	100d883a 	mov	r6,r2
    6614:	200f883a 	mov	r7,r4
    6618:	003f9906 	br	6480 <_fpadd_parts+0x110>
    661c:	7c45883a 	add	r2,r15,r17
    6620:	13c9803a 	cmpltu	r4,r2,r15
    6624:	8487883a 	add	r3,r16,r18
    6628:	20c9883a 	add	r4,r4,r3
    662c:	a1400115 	stw	r5,4(r20)
    6630:	a5c00215 	stw	r23,8(r20)
    6634:	a0800315 	stw	r2,12(r20)
    6638:	a1000415 	stw	r4,16(r20)
    663c:	003fb606 	br	6518 <_fpadd_parts+0x1a8>
    6640:	001f883a 	mov	r15,zero
    6644:	0021883a 	mov	r16,zero
    6648:	003f8306 	br	6458 <_fpadd_parts+0xe8>
    664c:	018dc83a 	sub	r6,zero,r6
    6650:	003f6706 	br	63f0 <_fpadd_parts+0x80>
    6654:	00bfff84 	movi	r2,-2
    6658:	117faf36 	bltu	r2,r5,6518 <_fpadd_parts+0x1a8>
    665c:	003f9806 	br	64c0 <_fpadd_parts+0x150>
    6660:	0005883a 	mov	r2,zero
    6664:	1189c83a 	sub	r4,r2,r6
    6668:	1105803a 	cmpltu	r2,r2,r4
    666c:	01cbc83a 	sub	r5,zero,r7
    6670:	2885c83a 	sub	r2,r5,r2
    6674:	01800044 	movi	r6,1
    6678:	a1800115 	stw	r6,4(r20)
    667c:	a5c00215 	stw	r23,8(r20)
    6680:	a1000315 	stw	r4,12(r20)
    6684:	a0800415 	stw	r2,16(r20)
    6688:	003f8206 	br	6494 <_fpadd_parts+0x124>
    668c:	203f7226 	beq	r4,zero,6458 <_fpadd_parts+0xe8>
    6690:	35bff804 	addi	r22,r6,-32
    6694:	b9af883a 	add	r23,r23,r6
    6698:	b0003116 	blt	r22,zero,6760 <_fpadd_parts+0x3f0>
    669c:	959ad83a 	srl	r13,r18,r22
    66a0:	001d883a 	mov	r14,zero
    66a4:	000f883a 	mov	r7,zero
    66a8:	01000044 	movi	r4,1
    66ac:	0011883a 	mov	r8,zero
    66b0:	b0002516 	blt	r22,zero,6748 <_fpadd_parts+0x3d8>
    66b4:	2594983a 	sll	r10,r4,r22
    66b8:	0013883a 	mov	r9,zero
    66bc:	00bfffc4 	movi	r2,-1
    66c0:	4889883a 	add	r4,r9,r2
    66c4:	508b883a 	add	r5,r10,r2
    66c8:	224d803a 	cmpltu	r6,r4,r9
    66cc:	314b883a 	add	r5,r6,r5
    66d0:	8904703a 	and	r2,r17,r4
    66d4:	9146703a 	and	r3,r18,r5
    66d8:	10c4b03a 	or	r2,r2,r3
    66dc:	10000226 	beq	r2,zero,66e8 <_fpadd_parts+0x378>
    66e0:	01c00044 	movi	r7,1
    66e4:	0011883a 	mov	r8,zero
    66e8:	69e2b03a 	or	r17,r13,r7
    66ec:	7224b03a 	or	r18,r14,r8
    66f0:	003f5906 	br	6458 <_fpadd_parts+0xe8>
    66f4:	8407883a 	add	r3,r16,r16
    66f8:	008007c4 	movi	r2,31
    66fc:	1185c83a 	sub	r2,r2,r6
    6700:	1886983a 	sll	r3,r3,r2
    6704:	7996d83a 	srl	r11,r15,r6
    6708:	8198d83a 	srl	r12,r16,r6
    670c:	1ad6b03a 	or	r11,r3,r11
    6710:	003f3e06 	br	640c <_fpadd_parts+0x9c>
    6714:	2006d07a 	srli	r3,r4,1
    6718:	008007c4 	movi	r2,31
    671c:	1185c83a 	sub	r2,r2,r6
    6720:	1890d83a 	srl	r8,r3,r2
    6724:	218e983a 	sll	r7,r4,r6
    6728:	003f3e06 	br	6424 <_fpadd_parts+0xb4>
    672c:	113f821e 	bne	r2,r4,6538 <_fpadd_parts+0x1c8>
    6730:	28c00117 	ldw	r3,4(r5)
    6734:	98800117 	ldw	r2,4(r19)
    6738:	10ff7f26 	beq	r2,r3,6538 <_fpadd_parts+0x1c8>
    673c:	04c20034 	movhi	r19,2048
    6740:	9cc0cf04 	addi	r19,r19,828
    6744:	003f7c06 	br	6538 <_fpadd_parts+0x1c8>
    6748:	2006d07a 	srli	r3,r4,1
    674c:	008007c4 	movi	r2,31
    6750:	1185c83a 	sub	r2,r2,r6
    6754:	1894d83a 	srl	r10,r3,r2
    6758:	2192983a 	sll	r9,r4,r6
    675c:	003fd706 	br	66bc <_fpadd_parts+0x34c>
    6760:	9487883a 	add	r3,r18,r18
    6764:	008007c4 	movi	r2,31
    6768:	1185c83a 	sub	r2,r2,r6
    676c:	1886983a 	sll	r3,r3,r2
    6770:	899ad83a 	srl	r13,r17,r6
    6774:	919cd83a 	srl	r14,r18,r6
    6778:	1b5ab03a 	or	r13,r3,r13
    677c:	003fc906 	br	66a4 <_fpadd_parts+0x334>

00006780 <__subdf3>:
    6780:	deffea04 	addi	sp,sp,-88
    6784:	dcc01415 	stw	r19,80(sp)
    6788:	dcc00404 	addi	r19,sp,16
    678c:	2011883a 	mov	r8,r4
    6790:	2813883a 	mov	r9,r5
    6794:	dc401315 	stw	r17,76(sp)
    6798:	d809883a 	mov	r4,sp
    679c:	980b883a 	mov	r5,r19
    67a0:	dc400904 	addi	r17,sp,36
    67a4:	dfc01515 	stw	ra,84(sp)
    67a8:	da400115 	stw	r9,4(sp)
    67ac:	d9c00315 	stw	r7,12(sp)
    67b0:	da000015 	stw	r8,0(sp)
    67b4:	d9800215 	stw	r6,8(sp)
    67b8:	00075140 	call	7514 <__unpack_d>
    67bc:	d9000204 	addi	r4,sp,8
    67c0:	880b883a 	mov	r5,r17
    67c4:	00075140 	call	7514 <__unpack_d>
    67c8:	d8800a17 	ldw	r2,40(sp)
    67cc:	880b883a 	mov	r5,r17
    67d0:	9809883a 	mov	r4,r19
    67d4:	d9800e04 	addi	r6,sp,56
    67d8:	1080005c 	xori	r2,r2,1
    67dc:	d8800a15 	stw	r2,40(sp)
    67e0:	00063700 	call	6370 <_fpadd_parts>
    67e4:	1009883a 	mov	r4,r2
    67e8:	00072000 	call	7200 <__pack_d>
    67ec:	dfc01517 	ldw	ra,84(sp)
    67f0:	dcc01417 	ldw	r19,80(sp)
    67f4:	dc401317 	ldw	r17,76(sp)
    67f8:	dec01604 	addi	sp,sp,88
    67fc:	f800283a 	ret

00006800 <__adddf3>:
    6800:	deffea04 	addi	sp,sp,-88
    6804:	dcc01415 	stw	r19,80(sp)
    6808:	dcc00404 	addi	r19,sp,16
    680c:	2011883a 	mov	r8,r4
    6810:	2813883a 	mov	r9,r5
    6814:	dc401315 	stw	r17,76(sp)
    6818:	d809883a 	mov	r4,sp
    681c:	980b883a 	mov	r5,r19
    6820:	dc400904 	addi	r17,sp,36
    6824:	dfc01515 	stw	ra,84(sp)
    6828:	da400115 	stw	r9,4(sp)
    682c:	d9c00315 	stw	r7,12(sp)
    6830:	da000015 	stw	r8,0(sp)
    6834:	d9800215 	stw	r6,8(sp)
    6838:	00075140 	call	7514 <__unpack_d>
    683c:	d9000204 	addi	r4,sp,8
    6840:	880b883a 	mov	r5,r17
    6844:	00075140 	call	7514 <__unpack_d>
    6848:	d9800e04 	addi	r6,sp,56
    684c:	9809883a 	mov	r4,r19
    6850:	880b883a 	mov	r5,r17
    6854:	00063700 	call	6370 <_fpadd_parts>
    6858:	1009883a 	mov	r4,r2
    685c:	00072000 	call	7200 <__pack_d>
    6860:	dfc01517 	ldw	ra,84(sp)
    6864:	dcc01417 	ldw	r19,80(sp)
    6868:	dc401317 	ldw	r17,76(sp)
    686c:	dec01604 	addi	sp,sp,88
    6870:	f800283a 	ret

00006874 <__muldf3>:
    6874:	deffe004 	addi	sp,sp,-128
    6878:	dc401815 	stw	r17,96(sp)
    687c:	dc400404 	addi	r17,sp,16
    6880:	2011883a 	mov	r8,r4
    6884:	2813883a 	mov	r9,r5
    6888:	dc001715 	stw	r16,92(sp)
    688c:	d809883a 	mov	r4,sp
    6890:	880b883a 	mov	r5,r17
    6894:	dc000904 	addi	r16,sp,36
    6898:	dfc01f15 	stw	ra,124(sp)
    689c:	da400115 	stw	r9,4(sp)
    68a0:	d9c00315 	stw	r7,12(sp)
    68a4:	da000015 	stw	r8,0(sp)
    68a8:	d9800215 	stw	r6,8(sp)
    68ac:	ddc01e15 	stw	r23,120(sp)
    68b0:	dd801d15 	stw	r22,116(sp)
    68b4:	dd401c15 	stw	r21,112(sp)
    68b8:	dd001b15 	stw	r20,108(sp)
    68bc:	dcc01a15 	stw	r19,104(sp)
    68c0:	dc801915 	stw	r18,100(sp)
    68c4:	00075140 	call	7514 <__unpack_d>
    68c8:	d9000204 	addi	r4,sp,8
    68cc:	800b883a 	mov	r5,r16
    68d0:	00075140 	call	7514 <__unpack_d>
    68d4:	d9000417 	ldw	r4,16(sp)
    68d8:	00800044 	movi	r2,1
    68dc:	1100102e 	bgeu	r2,r4,6920 <__muldf3+0xac>
    68e0:	d8c00917 	ldw	r3,36(sp)
    68e4:	10c0062e 	bgeu	r2,r3,6900 <__muldf3+0x8c>
    68e8:	00800104 	movi	r2,4
    68ec:	20800a26 	beq	r4,r2,6918 <__muldf3+0xa4>
    68f0:	1880cc26 	beq	r3,r2,6c24 <__muldf3+0x3b0>
    68f4:	00800084 	movi	r2,2
    68f8:	20800926 	beq	r4,r2,6920 <__muldf3+0xac>
    68fc:	1880191e 	bne	r3,r2,6964 <__muldf3+0xf0>
    6900:	d8c00a17 	ldw	r3,40(sp)
    6904:	d8800517 	ldw	r2,20(sp)
    6908:	8009883a 	mov	r4,r16
    690c:	10c4c03a 	cmpne	r2,r2,r3
    6910:	d8800a15 	stw	r2,40(sp)
    6914:	00000706 	br	6934 <__muldf3+0xc0>
    6918:	00800084 	movi	r2,2
    691c:	1880c326 	beq	r3,r2,6c2c <__muldf3+0x3b8>
    6920:	d8800517 	ldw	r2,20(sp)
    6924:	d8c00a17 	ldw	r3,40(sp)
    6928:	8809883a 	mov	r4,r17
    692c:	10c4c03a 	cmpne	r2,r2,r3
    6930:	d8800515 	stw	r2,20(sp)
    6934:	00072000 	call	7200 <__pack_d>
    6938:	dfc01f17 	ldw	ra,124(sp)
    693c:	ddc01e17 	ldw	r23,120(sp)
    6940:	dd801d17 	ldw	r22,116(sp)
    6944:	dd401c17 	ldw	r21,112(sp)
    6948:	dd001b17 	ldw	r20,108(sp)
    694c:	dcc01a17 	ldw	r19,104(sp)
    6950:	dc801917 	ldw	r18,100(sp)
    6954:	dc401817 	ldw	r17,96(sp)
    6958:	dc001717 	ldw	r16,92(sp)
    695c:	dec02004 	addi	sp,sp,128
    6960:	f800283a 	ret
    6964:	dd800717 	ldw	r22,28(sp)
    6968:	dc800c17 	ldw	r18,48(sp)
    696c:	002b883a 	mov	r21,zero
    6970:	0023883a 	mov	r17,zero
    6974:	a80b883a 	mov	r5,r21
    6978:	b00d883a 	mov	r6,r22
    697c:	880f883a 	mov	r7,r17
    6980:	ddc00817 	ldw	r23,32(sp)
    6984:	dcc00d17 	ldw	r19,52(sp)
    6988:	9009883a 	mov	r4,r18
    698c:	00070e80 	call	70e8 <__muldi3>
    6990:	001b883a 	mov	r13,zero
    6994:	680f883a 	mov	r7,r13
    6998:	b009883a 	mov	r4,r22
    699c:	000b883a 	mov	r5,zero
    69a0:	980d883a 	mov	r6,r19
    69a4:	b82d883a 	mov	r22,r23
    69a8:	002f883a 	mov	r23,zero
    69ac:	db401615 	stw	r13,88(sp)
    69b0:	d8801315 	stw	r2,76(sp)
    69b4:	d8c01415 	stw	r3,80(sp)
    69b8:	dcc01515 	stw	r19,84(sp)
    69bc:	00070e80 	call	70e8 <__muldi3>
    69c0:	b00d883a 	mov	r6,r22
    69c4:	000b883a 	mov	r5,zero
    69c8:	9009883a 	mov	r4,r18
    69cc:	b80f883a 	mov	r7,r23
    69d0:	1021883a 	mov	r16,r2
    69d4:	1823883a 	mov	r17,r3
    69d8:	00070e80 	call	70e8 <__muldi3>
    69dc:	8085883a 	add	r2,r16,r2
    69e0:	140d803a 	cmpltu	r6,r2,r16
    69e4:	88c7883a 	add	r3,r17,r3
    69e8:	30cd883a 	add	r6,r6,r3
    69ec:	1029883a 	mov	r20,r2
    69f0:	302b883a 	mov	r21,r6
    69f4:	da801317 	ldw	r10,76(sp)
    69f8:	dac01417 	ldw	r11,80(sp)
    69fc:	db001517 	ldw	r12,84(sp)
    6a00:	db401617 	ldw	r13,88(sp)
    6a04:	3440612e 	bgeu	r6,r17,6b8c <__muldf3+0x318>
    6a08:	0009883a 	mov	r4,zero
    6a0c:	5105883a 	add	r2,r10,r4
    6a10:	128d803a 	cmpltu	r6,r2,r10
    6a14:	5d07883a 	add	r3,r11,r20
    6a18:	30cd883a 	add	r6,r6,r3
    6a1c:	0021883a 	mov	r16,zero
    6a20:	04400044 	movi	r17,1
    6a24:	1025883a 	mov	r18,r2
    6a28:	3027883a 	mov	r19,r6
    6a2c:	32c06236 	bltu	r6,r11,6bb8 <__muldf3+0x344>
    6a30:	59807a26 	beq	r11,r6,6c1c <__muldf3+0x3a8>
    6a34:	680b883a 	mov	r5,r13
    6a38:	b80f883a 	mov	r7,r23
    6a3c:	6009883a 	mov	r4,r12
    6a40:	b00d883a 	mov	r6,r22
    6a44:	00070e80 	call	70e8 <__muldi3>
    6a48:	1009883a 	mov	r4,r2
    6a4c:	000f883a 	mov	r7,zero
    6a50:	1545883a 	add	r2,r2,r21
    6a54:	1111803a 	cmpltu	r8,r2,r4
    6a58:	19c7883a 	add	r3,r3,r7
    6a5c:	40c7883a 	add	r3,r8,r3
    6a60:	88cb883a 	add	r5,r17,r3
    6a64:	d8c00617 	ldw	r3,24(sp)
    6a68:	8089883a 	add	r4,r16,r2
    6a6c:	d8800b17 	ldw	r2,44(sp)
    6a70:	18c00104 	addi	r3,r3,4
    6a74:	240d803a 	cmpltu	r6,r4,r16
    6a78:	10c7883a 	add	r3,r2,r3
    6a7c:	2013883a 	mov	r9,r4
    6a80:	d8800a17 	ldw	r2,40(sp)
    6a84:	d9000517 	ldw	r4,20(sp)
    6a88:	314d883a 	add	r6,r6,r5
    6a8c:	3015883a 	mov	r10,r6
    6a90:	2088c03a 	cmpne	r4,r4,r2
    6a94:	00880034 	movhi	r2,8192
    6a98:	10bfffc4 	addi	r2,r2,-1
    6a9c:	d9000f15 	stw	r4,60(sp)
    6aa0:	d8c01015 	stw	r3,64(sp)
    6aa4:	1180162e 	bgeu	r2,r6,6b00 <__muldf3+0x28c>
    6aa8:	1811883a 	mov	r8,r3
    6aac:	101f883a 	mov	r15,r2
    6ab0:	980497fa 	slli	r2,r19,31
    6ab4:	9016d07a 	srli	r11,r18,1
    6ab8:	500697fa 	slli	r3,r10,31
    6abc:	480cd07a 	srli	r6,r9,1
    6ac0:	500ed07a 	srli	r7,r10,1
    6ac4:	12d6b03a 	or	r11,r2,r11
    6ac8:	00800044 	movi	r2,1
    6acc:	198cb03a 	or	r6,r3,r6
    6ad0:	4888703a 	and	r4,r9,r2
    6ad4:	9818d07a 	srli	r12,r19,1
    6ad8:	001b883a 	mov	r13,zero
    6adc:	03a00034 	movhi	r14,32768
    6ae0:	3013883a 	mov	r9,r6
    6ae4:	3815883a 	mov	r10,r7
    6ae8:	4091883a 	add	r8,r8,r2
    6aec:	20000226 	beq	r4,zero,6af8 <__muldf3+0x284>
    6af0:	5b64b03a 	or	r18,r11,r13
    6af4:	63a6b03a 	or	r19,r12,r14
    6af8:	7abfed36 	bltu	r15,r10,6ab0 <__muldf3+0x23c>
    6afc:	da001015 	stw	r8,64(sp)
    6b00:	00840034 	movhi	r2,4096
    6b04:	10bfffc4 	addi	r2,r2,-1
    6b08:	12801436 	bltu	r2,r10,6b5c <__muldf3+0x2e8>
    6b0c:	da001017 	ldw	r8,64(sp)
    6b10:	101f883a 	mov	r15,r2
    6b14:	4a45883a 	add	r2,r9,r9
    6b18:	124d803a 	cmpltu	r6,r2,r9
    6b1c:	5287883a 	add	r3,r10,r10
    6b20:	9497883a 	add	r11,r18,r18
    6b24:	5c8f803a 	cmpltu	r7,r11,r18
    6b28:	9cd9883a 	add	r12,r19,r19
    6b2c:	01000044 	movi	r4,1
    6b30:	30cd883a 	add	r6,r6,r3
    6b34:	3b0f883a 	add	r7,r7,r12
    6b38:	423fffc4 	addi	r8,r8,-1
    6b3c:	1013883a 	mov	r9,r2
    6b40:	3015883a 	mov	r10,r6
    6b44:	111ab03a 	or	r13,r2,r4
    6b48:	98003016 	blt	r19,zero,6c0c <__muldf3+0x398>
    6b4c:	5825883a 	mov	r18,r11
    6b50:	3827883a 	mov	r19,r7
    6b54:	7abfef2e 	bgeu	r15,r10,6b14 <__muldf3+0x2a0>
    6b58:	da001015 	stw	r8,64(sp)
    6b5c:	00803fc4 	movi	r2,255
    6b60:	488e703a 	and	r7,r9,r2
    6b64:	00802004 	movi	r2,128
    6b68:	0007883a 	mov	r3,zero
    6b6c:	0011883a 	mov	r8,zero
    6b70:	38801826 	beq	r7,r2,6bd4 <__muldf3+0x360>
    6b74:	008000c4 	movi	r2,3
    6b78:	d9000e04 	addi	r4,sp,56
    6b7c:	da801215 	stw	r10,72(sp)
    6b80:	d8800e15 	stw	r2,56(sp)
    6b84:	da401115 	stw	r9,68(sp)
    6b88:	003f6a06 	br	6934 <__muldf3+0xc0>
    6b8c:	89802126 	beq	r17,r6,6c14 <__muldf3+0x3a0>
    6b90:	0009883a 	mov	r4,zero
    6b94:	5105883a 	add	r2,r10,r4
    6b98:	128d803a 	cmpltu	r6,r2,r10
    6b9c:	5d07883a 	add	r3,r11,r20
    6ba0:	30cd883a 	add	r6,r6,r3
    6ba4:	0021883a 	mov	r16,zero
    6ba8:	0023883a 	mov	r17,zero
    6bac:	1025883a 	mov	r18,r2
    6bb0:	3027883a 	mov	r19,r6
    6bb4:	32ff9e2e 	bgeu	r6,r11,6a30 <__muldf3+0x1bc>
    6bb8:	00800044 	movi	r2,1
    6bbc:	8089883a 	add	r4,r16,r2
    6bc0:	240d803a 	cmpltu	r6,r4,r16
    6bc4:	344d883a 	add	r6,r6,r17
    6bc8:	2021883a 	mov	r16,r4
    6bcc:	3023883a 	mov	r17,r6
    6bd0:	003f9806 	br	6a34 <__muldf3+0x1c0>
    6bd4:	403fe71e 	bne	r8,zero,6b74 <__muldf3+0x300>
    6bd8:	01004004 	movi	r4,256
    6bdc:	4904703a 	and	r2,r9,r4
    6be0:	10c4b03a 	or	r2,r2,r3
    6be4:	103fe31e 	bne	r2,zero,6b74 <__muldf3+0x300>
    6be8:	94c4b03a 	or	r2,r18,r19
    6bec:	103fe126 	beq	r2,zero,6b74 <__muldf3+0x300>
    6bf0:	49c5883a 	add	r2,r9,r7
    6bf4:	1251803a 	cmpltu	r8,r2,r9
    6bf8:	4291883a 	add	r8,r8,r10
    6bfc:	013fc004 	movi	r4,-256
    6c00:	1112703a 	and	r9,r2,r4
    6c04:	4015883a 	mov	r10,r8
    6c08:	003fda06 	br	6b74 <__muldf3+0x300>
    6c0c:	6813883a 	mov	r9,r13
    6c10:	003fce06 	br	6b4c <__muldf3+0x2d8>
    6c14:	143f7c36 	bltu	r2,r16,6a08 <__muldf3+0x194>
    6c18:	003fdd06 	br	6b90 <__muldf3+0x31c>
    6c1c:	12bf852e 	bgeu	r2,r10,6a34 <__muldf3+0x1c0>
    6c20:	003fe506 	br	6bb8 <__muldf3+0x344>
    6c24:	00800084 	movi	r2,2
    6c28:	20bf351e 	bne	r4,r2,6900 <__muldf3+0x8c>
    6c2c:	01020034 	movhi	r4,2048
    6c30:	2100cf04 	addi	r4,r4,828
    6c34:	003f3f06 	br	6934 <__muldf3+0xc0>

00006c38 <__divdf3>:
    6c38:	deffed04 	addi	sp,sp,-76
    6c3c:	dcc01115 	stw	r19,68(sp)
    6c40:	dcc00404 	addi	r19,sp,16
    6c44:	2011883a 	mov	r8,r4
    6c48:	2813883a 	mov	r9,r5
    6c4c:	dc000e15 	stw	r16,56(sp)
    6c50:	d809883a 	mov	r4,sp
    6c54:	980b883a 	mov	r5,r19
    6c58:	dc000904 	addi	r16,sp,36
    6c5c:	dfc01215 	stw	ra,72(sp)
    6c60:	da400115 	stw	r9,4(sp)
    6c64:	d9c00315 	stw	r7,12(sp)
    6c68:	da000015 	stw	r8,0(sp)
    6c6c:	d9800215 	stw	r6,8(sp)
    6c70:	dc801015 	stw	r18,64(sp)
    6c74:	dc400f15 	stw	r17,60(sp)
    6c78:	00075140 	call	7514 <__unpack_d>
    6c7c:	d9000204 	addi	r4,sp,8
    6c80:	800b883a 	mov	r5,r16
    6c84:	00075140 	call	7514 <__unpack_d>
    6c88:	d9000417 	ldw	r4,16(sp)
    6c8c:	00800044 	movi	r2,1
    6c90:	11000b2e 	bgeu	r2,r4,6cc0 <__divdf3+0x88>
    6c94:	d9400917 	ldw	r5,36(sp)
    6c98:	1140762e 	bgeu	r2,r5,6e74 <__divdf3+0x23c>
    6c9c:	d8800517 	ldw	r2,20(sp)
    6ca0:	d8c00a17 	ldw	r3,40(sp)
    6ca4:	01800104 	movi	r6,4
    6ca8:	10c4f03a 	xor	r2,r2,r3
    6cac:	d8800515 	stw	r2,20(sp)
    6cb0:	21800226 	beq	r4,r6,6cbc <__divdf3+0x84>
    6cb4:	00800084 	movi	r2,2
    6cb8:	2080141e 	bne	r4,r2,6d0c <__divdf3+0xd4>
    6cbc:	29000926 	beq	r5,r4,6ce4 <__divdf3+0xac>
    6cc0:	9809883a 	mov	r4,r19
    6cc4:	00072000 	call	7200 <__pack_d>
    6cc8:	dfc01217 	ldw	ra,72(sp)
    6ccc:	dcc01117 	ldw	r19,68(sp)
    6cd0:	dc801017 	ldw	r18,64(sp)
    6cd4:	dc400f17 	ldw	r17,60(sp)
    6cd8:	dc000e17 	ldw	r16,56(sp)
    6cdc:	dec01304 	addi	sp,sp,76
    6ce0:	f800283a 	ret
    6ce4:	01020034 	movhi	r4,2048
    6ce8:	2100cf04 	addi	r4,r4,828
    6cec:	00072000 	call	7200 <__pack_d>
    6cf0:	dfc01217 	ldw	ra,72(sp)
    6cf4:	dcc01117 	ldw	r19,68(sp)
    6cf8:	dc801017 	ldw	r18,64(sp)
    6cfc:	dc400f17 	ldw	r17,60(sp)
    6d00:	dc000e17 	ldw	r16,56(sp)
    6d04:	dec01304 	addi	sp,sp,76
    6d08:	f800283a 	ret
    6d0c:	29805b26 	beq	r5,r6,6e7c <__divdf3+0x244>
    6d10:	28802d26 	beq	r5,r2,6dc8 <__divdf3+0x190>
    6d14:	d8c00617 	ldw	r3,24(sp)
    6d18:	d8800b17 	ldw	r2,44(sp)
    6d1c:	d9c00817 	ldw	r7,32(sp)
    6d20:	dc400d17 	ldw	r17,52(sp)
    6d24:	188bc83a 	sub	r5,r3,r2
    6d28:	d9800717 	ldw	r6,28(sp)
    6d2c:	dc000c17 	ldw	r16,48(sp)
    6d30:	d9400615 	stw	r5,24(sp)
    6d34:	3c403836 	bltu	r7,r17,6e18 <__divdf3+0x1e0>
    6d38:	89c03626 	beq	r17,r7,6e14 <__divdf3+0x1dc>
    6d3c:	0015883a 	mov	r10,zero
    6d40:	001d883a 	mov	r14,zero
    6d44:	02c40034 	movhi	r11,4096
    6d48:	001f883a 	mov	r15,zero
    6d4c:	003f883a 	mov	ra,zero
    6d50:	04800f44 	movi	r18,61
    6d54:	00000f06 	br	6d94 <__divdf3+0x15c>
    6d58:	601d883a 	mov	r14,r12
    6d5c:	681f883a 	mov	r15,r13
    6d60:	400d883a 	mov	r6,r8
    6d64:	100f883a 	mov	r7,r2
    6d68:	3191883a 	add	r8,r6,r6
    6d6c:	5808d07a 	srli	r4,r11,1
    6d70:	4185803a 	cmpltu	r2,r8,r6
    6d74:	39d3883a 	add	r9,r7,r7
    6d78:	28c6b03a 	or	r3,r5,r3
    6d7c:	1245883a 	add	r2,r2,r9
    6d80:	1815883a 	mov	r10,r3
    6d84:	2017883a 	mov	r11,r4
    6d88:	400d883a 	mov	r6,r8
    6d8c:	100f883a 	mov	r7,r2
    6d90:	fc801726 	beq	ra,r18,6df0 <__divdf3+0x1b8>
    6d94:	580a97fa 	slli	r5,r11,31
    6d98:	5006d07a 	srli	r3,r10,1
    6d9c:	ffc00044 	addi	ra,ra,1
    6da0:	3c7ff136 	bltu	r7,r17,6d68 <__divdf3+0x130>
    6da4:	3411c83a 	sub	r8,r6,r16
    6da8:	3205803a 	cmpltu	r2,r6,r8
    6dac:	3c53c83a 	sub	r9,r7,r17
    6db0:	7298b03a 	or	r12,r14,r10
    6db4:	7adab03a 	or	r13,r15,r11
    6db8:	4885c83a 	sub	r2,r9,r2
    6dbc:	89ffe61e 	bne	r17,r7,6d58 <__divdf3+0x120>
    6dc0:	343fe936 	bltu	r6,r16,6d68 <__divdf3+0x130>
    6dc4:	003fe406 	br	6d58 <__divdf3+0x120>
    6dc8:	9809883a 	mov	r4,r19
    6dcc:	d9800415 	stw	r6,16(sp)
    6dd0:	00072000 	call	7200 <__pack_d>
    6dd4:	dfc01217 	ldw	ra,72(sp)
    6dd8:	dcc01117 	ldw	r19,68(sp)
    6ddc:	dc801017 	ldw	r18,64(sp)
    6de0:	dc400f17 	ldw	r17,60(sp)
    6de4:	dc000e17 	ldw	r16,56(sp)
    6de8:	dec01304 	addi	sp,sp,76
    6dec:	f800283a 	ret
    6df0:	00803fc4 	movi	r2,255
    6df4:	7090703a 	and	r8,r14,r2
    6df8:	00802004 	movi	r2,128
    6dfc:	0007883a 	mov	r3,zero
    6e00:	0013883a 	mov	r9,zero
    6e04:	40800d26 	beq	r8,r2,6e3c <__divdf3+0x204>
    6e08:	dbc00815 	stw	r15,32(sp)
    6e0c:	db800715 	stw	r14,28(sp)
    6e10:	003fab06 	br	6cc0 <__divdf3+0x88>
    6e14:	343fc92e 	bgeu	r6,r16,6d3c <__divdf3+0x104>
    6e18:	3185883a 	add	r2,r6,r6
    6e1c:	1189803a 	cmpltu	r4,r2,r6
    6e20:	39c7883a 	add	r3,r7,r7
    6e24:	20c9883a 	add	r4,r4,r3
    6e28:	297fffc4 	addi	r5,r5,-1
    6e2c:	100d883a 	mov	r6,r2
    6e30:	200f883a 	mov	r7,r4
    6e34:	d9400615 	stw	r5,24(sp)
    6e38:	003fc006 	br	6d3c <__divdf3+0x104>
    6e3c:	483ff21e 	bne	r9,zero,6e08 <__divdf3+0x1d0>
    6e40:	01004004 	movi	r4,256
    6e44:	7104703a 	and	r2,r14,r4
    6e48:	10c4b03a 	or	r2,r2,r3
    6e4c:	103fee1e 	bne	r2,zero,6e08 <__divdf3+0x1d0>
    6e50:	31c4b03a 	or	r2,r6,r7
    6e54:	103fec26 	beq	r2,zero,6e08 <__divdf3+0x1d0>
    6e58:	7205883a 	add	r2,r14,r8
    6e5c:	1391803a 	cmpltu	r8,r2,r14
    6e60:	43d1883a 	add	r8,r8,r15
    6e64:	013fc004 	movi	r4,-256
    6e68:	111c703a 	and	r14,r2,r4
    6e6c:	401f883a 	mov	r15,r8
    6e70:	003fe506 	br	6e08 <__divdf3+0x1d0>
    6e74:	8009883a 	mov	r4,r16
    6e78:	003f9206 	br	6cc4 <__divdf3+0x8c>
    6e7c:	9809883a 	mov	r4,r19
    6e80:	d8000715 	stw	zero,28(sp)
    6e84:	d8000815 	stw	zero,32(sp)
    6e88:	d8000615 	stw	zero,24(sp)
    6e8c:	003f8d06 	br	6cc4 <__divdf3+0x8c>

00006e90 <__gtdf2>:
    6e90:	deffef04 	addi	sp,sp,-68
    6e94:	dc400f15 	stw	r17,60(sp)
    6e98:	dc400404 	addi	r17,sp,16
    6e9c:	2005883a 	mov	r2,r4
    6ea0:	2807883a 	mov	r3,r5
    6ea4:	dc000e15 	stw	r16,56(sp)
    6ea8:	d809883a 	mov	r4,sp
    6eac:	880b883a 	mov	r5,r17
    6eb0:	dc000904 	addi	r16,sp,36
    6eb4:	d8c00115 	stw	r3,4(sp)
    6eb8:	d8800015 	stw	r2,0(sp)
    6ebc:	d9800215 	stw	r6,8(sp)
    6ec0:	dfc01015 	stw	ra,64(sp)
    6ec4:	d9c00315 	stw	r7,12(sp)
    6ec8:	00075140 	call	7514 <__unpack_d>
    6ecc:	d9000204 	addi	r4,sp,8
    6ed0:	800b883a 	mov	r5,r16
    6ed4:	00075140 	call	7514 <__unpack_d>
    6ed8:	d8800417 	ldw	r2,16(sp)
    6edc:	00c00044 	movi	r3,1
    6ee0:	01bfffc4 	movi	r6,-1
    6ee4:	1880062e 	bgeu	r3,r2,6f00 <__gtdf2+0x70>
    6ee8:	d8800917 	ldw	r2,36(sp)
    6eec:	8809883a 	mov	r4,r17
    6ef0:	800b883a 	mov	r5,r16
    6ef4:	1880022e 	bgeu	r3,r2,6f00 <__gtdf2+0x70>
    6ef8:	000764c0 	call	764c <__fpcmp_parts_d>
    6efc:	100d883a 	mov	r6,r2
    6f00:	3005883a 	mov	r2,r6
    6f04:	dfc01017 	ldw	ra,64(sp)
    6f08:	dc400f17 	ldw	r17,60(sp)
    6f0c:	dc000e17 	ldw	r16,56(sp)
    6f10:	dec01104 	addi	sp,sp,68
    6f14:	f800283a 	ret

00006f18 <__floatsidf>:
    6f18:	2006d7fa 	srli	r3,r4,31
    6f1c:	defff604 	addi	sp,sp,-40
    6f20:	008000c4 	movi	r2,3
    6f24:	dfc00915 	stw	ra,36(sp)
    6f28:	dcc00815 	stw	r19,32(sp)
    6f2c:	dc800715 	stw	r18,28(sp)
    6f30:	dc400615 	stw	r17,24(sp)
    6f34:	dc000515 	stw	r16,20(sp)
    6f38:	d8800015 	stw	r2,0(sp)
    6f3c:	d8c00115 	stw	r3,4(sp)
    6f40:	20000f1e 	bne	r4,zero,6f80 <__floatsidf+0x68>
    6f44:	00800084 	movi	r2,2
    6f48:	d8800015 	stw	r2,0(sp)
    6f4c:	d809883a 	mov	r4,sp
    6f50:	00072000 	call	7200 <__pack_d>
    6f54:	1009883a 	mov	r4,r2
    6f58:	180b883a 	mov	r5,r3
    6f5c:	2005883a 	mov	r2,r4
    6f60:	2807883a 	mov	r3,r5
    6f64:	dfc00917 	ldw	ra,36(sp)
    6f68:	dcc00817 	ldw	r19,32(sp)
    6f6c:	dc800717 	ldw	r18,28(sp)
    6f70:	dc400617 	ldw	r17,24(sp)
    6f74:	dc000517 	ldw	r16,20(sp)
    6f78:	dec00a04 	addi	sp,sp,40
    6f7c:	f800283a 	ret
    6f80:	00800f04 	movi	r2,60
    6f84:	1807003a 	cmpeq	r3,r3,zero
    6f88:	d8800215 	stw	r2,8(sp)
    6f8c:	18001126 	beq	r3,zero,6fd4 <__floatsidf+0xbc>
    6f90:	0027883a 	mov	r19,zero
    6f94:	2025883a 	mov	r18,r4
    6f98:	d9000315 	stw	r4,12(sp)
    6f9c:	dcc00415 	stw	r19,16(sp)
    6fa0:	00071800 	call	7180 <__clzsi2>
    6fa4:	11000744 	addi	r4,r2,29
    6fa8:	013fe80e 	bge	zero,r4,6f4c <__floatsidf+0x34>
    6fac:	10bfff44 	addi	r2,r2,-3
    6fb0:	10000c16 	blt	r2,zero,6fe4 <__floatsidf+0xcc>
    6fb4:	90a2983a 	sll	r17,r18,r2
    6fb8:	0021883a 	mov	r16,zero
    6fbc:	d8800217 	ldw	r2,8(sp)
    6fc0:	dc400415 	stw	r17,16(sp)
    6fc4:	dc000315 	stw	r16,12(sp)
    6fc8:	1105c83a 	sub	r2,r2,r4
    6fcc:	d8800215 	stw	r2,8(sp)
    6fd0:	003fde06 	br	6f4c <__floatsidf+0x34>
    6fd4:	00a00034 	movhi	r2,32768
    6fd8:	20800a26 	beq	r4,r2,7004 <__floatsidf+0xec>
    6fdc:	0109c83a 	sub	r4,zero,r4
    6fe0:	003feb06 	br	6f90 <__floatsidf+0x78>
    6fe4:	9006d07a 	srli	r3,r18,1
    6fe8:	008007c4 	movi	r2,31
    6fec:	1105c83a 	sub	r2,r2,r4
    6ff0:	1886d83a 	srl	r3,r3,r2
    6ff4:	9922983a 	sll	r17,r19,r4
    6ff8:	9120983a 	sll	r16,r18,r4
    6ffc:	1c62b03a 	or	r17,r3,r17
    7000:	003fee06 	br	6fbc <__floatsidf+0xa4>
    7004:	0009883a 	mov	r4,zero
    7008:	01707834 	movhi	r5,49632
    700c:	003fd306 	br	6f5c <__floatsidf+0x44>

00007010 <__fixdfsi>:
    7010:	defff804 	addi	sp,sp,-32
    7014:	2005883a 	mov	r2,r4
    7018:	2807883a 	mov	r3,r5
    701c:	d809883a 	mov	r4,sp
    7020:	d9400204 	addi	r5,sp,8
    7024:	d8c00115 	stw	r3,4(sp)
    7028:	d8800015 	stw	r2,0(sp)
    702c:	dfc00715 	stw	ra,28(sp)
    7030:	00075140 	call	7514 <__unpack_d>
    7034:	d8c00217 	ldw	r3,8(sp)
    7038:	00800084 	movi	r2,2
    703c:	1880051e 	bne	r3,r2,7054 <__fixdfsi+0x44>
    7040:	0007883a 	mov	r3,zero
    7044:	1805883a 	mov	r2,r3
    7048:	dfc00717 	ldw	ra,28(sp)
    704c:	dec00804 	addi	sp,sp,32
    7050:	f800283a 	ret
    7054:	00800044 	movi	r2,1
    7058:	10fff92e 	bgeu	r2,r3,7040 <__fixdfsi+0x30>
    705c:	00800104 	movi	r2,4
    7060:	18800426 	beq	r3,r2,7074 <__fixdfsi+0x64>
    7064:	d8c00417 	ldw	r3,16(sp)
    7068:	183ff516 	blt	r3,zero,7040 <__fixdfsi+0x30>
    706c:	00800784 	movi	r2,30
    7070:	10c0080e 	bge	r2,r3,7094 <__fixdfsi+0x84>
    7074:	d8800317 	ldw	r2,12(sp)
    7078:	1000121e 	bne	r2,zero,70c4 <__fixdfsi+0xb4>
    707c:	00e00034 	movhi	r3,32768
    7080:	18ffffc4 	addi	r3,r3,-1
    7084:	1805883a 	mov	r2,r3
    7088:	dfc00717 	ldw	ra,28(sp)
    708c:	dec00804 	addi	sp,sp,32
    7090:	f800283a 	ret
    7094:	00800f04 	movi	r2,60
    7098:	10d1c83a 	sub	r8,r2,r3
    709c:	40bff804 	addi	r2,r8,-32
    70a0:	d9800517 	ldw	r6,20(sp)
    70a4:	d9c00617 	ldw	r7,24(sp)
    70a8:	10000816 	blt	r2,zero,70cc <__fixdfsi+0xbc>
    70ac:	3888d83a 	srl	r4,r7,r2
    70b0:	d8800317 	ldw	r2,12(sp)
    70b4:	2007883a 	mov	r3,r4
    70b8:	103fe226 	beq	r2,zero,7044 <__fixdfsi+0x34>
    70bc:	0107c83a 	sub	r3,zero,r4
    70c0:	003fe006 	br	7044 <__fixdfsi+0x34>
    70c4:	00e00034 	movhi	r3,32768
    70c8:	003fde06 	br	7044 <__fixdfsi+0x34>
    70cc:	39c7883a 	add	r3,r7,r7
    70d0:	008007c4 	movi	r2,31
    70d4:	1205c83a 	sub	r2,r2,r8
    70d8:	1886983a 	sll	r3,r3,r2
    70dc:	3208d83a 	srl	r4,r6,r8
    70e0:	1908b03a 	or	r4,r3,r4
    70e4:	003ff206 	br	70b0 <__fixdfsi+0xa0>

000070e8 <__muldi3>:
    70e8:	2011883a 	mov	r8,r4
    70ec:	427fffcc 	andi	r9,r8,65535
    70f0:	4018d43a 	srli	r12,r8,16
    70f4:	32bfffcc 	andi	r10,r6,65535
    70f8:	3016d43a 	srli	r11,r6,16
    70fc:	4a85383a 	mul	r2,r9,r10
    7100:	6295383a 	mul	r10,r12,r10
    7104:	4ad3383a 	mul	r9,r9,r11
    7108:	113fffcc 	andi	r4,r2,65535
    710c:	1004d43a 	srli	r2,r2,16
    7110:	4a93883a 	add	r9,r9,r10
    7114:	3807883a 	mov	r3,r7
    7118:	1245883a 	add	r2,r2,r9
    711c:	280f883a 	mov	r7,r5
    7120:	180b883a 	mov	r5,r3
    7124:	1006943a 	slli	r3,r2,16
    7128:	defffd04 	addi	sp,sp,-12
    712c:	dc800215 	stw	r18,8(sp)
    7130:	1907883a 	add	r3,r3,r4
    7134:	dc400115 	stw	r17,4(sp)
    7138:	dc000015 	stw	r16,0(sp)
    713c:	4165383a 	mul	r18,r8,r5
    7140:	31e3383a 	mul	r17,r6,r7
    7144:	1012d43a 	srli	r9,r2,16
    7148:	62d9383a 	mul	r12,r12,r11
    714c:	181f883a 	mov	r15,r3
    7150:	1280022e 	bgeu	r2,r10,715c <__muldi3+0x74>
    7154:	00800074 	movhi	r2,1
    7158:	6099883a 	add	r12,r12,r2
    715c:	624d883a 	add	r6,r12,r9
    7160:	9187883a 	add	r3,r18,r6
    7164:	88c7883a 	add	r3,r17,r3
    7168:	7805883a 	mov	r2,r15
    716c:	dc800217 	ldw	r18,8(sp)
    7170:	dc400117 	ldw	r17,4(sp)
    7174:	dc000017 	ldw	r16,0(sp)
    7178:	dec00304 	addi	sp,sp,12
    717c:	f800283a 	ret

00007180 <__clzsi2>:
    7180:	00bfffd4 	movui	r2,65535
    7184:	11000e36 	bltu	r2,r4,71c0 <__clzsi2+0x40>
    7188:	00803fc4 	movi	r2,255
    718c:	01400204 	movi	r5,8
    7190:	0007883a 	mov	r3,zero
    7194:	11001036 	bltu	r2,r4,71d8 <__clzsi2+0x58>
    7198:	000b883a 	mov	r5,zero
    719c:	20c6d83a 	srl	r3,r4,r3
    71a0:	00820034 	movhi	r2,2048
    71a4:	1080d404 	addi	r2,r2,848
    71a8:	1887883a 	add	r3,r3,r2
    71ac:	18800003 	ldbu	r2,0(r3)
    71b0:	00c00804 	movi	r3,32
    71b4:	2885883a 	add	r2,r5,r2
    71b8:	1885c83a 	sub	r2,r3,r2
    71bc:	f800283a 	ret
    71c0:	01400404 	movi	r5,16
    71c4:	00804034 	movhi	r2,256
    71c8:	10bfffc4 	addi	r2,r2,-1
    71cc:	2807883a 	mov	r3,r5
    71d0:	113ff22e 	bgeu	r2,r4,719c <__clzsi2+0x1c>
    71d4:	01400604 	movi	r5,24
    71d8:	2807883a 	mov	r3,r5
    71dc:	20c6d83a 	srl	r3,r4,r3
    71e0:	00820034 	movhi	r2,2048
    71e4:	1080d404 	addi	r2,r2,848
    71e8:	1887883a 	add	r3,r3,r2
    71ec:	18800003 	ldbu	r2,0(r3)
    71f0:	00c00804 	movi	r3,32
    71f4:	2885883a 	add	r2,r5,r2
    71f8:	1885c83a 	sub	r2,r3,r2
    71fc:	f800283a 	ret

00007200 <__pack_d>:
    7200:	20c00017 	ldw	r3,0(r4)
    7204:	defffd04 	addi	sp,sp,-12
    7208:	dc000015 	stw	r16,0(sp)
    720c:	dc800215 	stw	r18,8(sp)
    7210:	dc400115 	stw	r17,4(sp)
    7214:	00800044 	movi	r2,1
    7218:	22000317 	ldw	r8,12(r4)
    721c:	001f883a 	mov	r15,zero
    7220:	22400417 	ldw	r9,16(r4)
    7224:	24000117 	ldw	r16,4(r4)
    7228:	10c0552e 	bgeu	r2,r3,7380 <__pack_d+0x180>
    722c:	00800104 	movi	r2,4
    7230:	18804f26 	beq	r3,r2,7370 <__pack_d+0x170>
    7234:	00800084 	movi	r2,2
    7238:	18800226 	beq	r3,r2,7244 <__pack_d+0x44>
    723c:	4244b03a 	or	r2,r8,r9
    7240:	10001a1e 	bne	r2,zero,72ac <__pack_d+0xac>
    7244:	000d883a 	mov	r6,zero
    7248:	000f883a 	mov	r7,zero
    724c:	0011883a 	mov	r8,zero
    7250:	00800434 	movhi	r2,16
    7254:	10bfffc4 	addi	r2,r2,-1
    7258:	301d883a 	mov	r14,r6
    725c:	3884703a 	and	r2,r7,r2
    7260:	400a953a 	slli	r5,r8,20
    7264:	79bffc2c 	andhi	r6,r15,65520
    7268:	308cb03a 	or	r6,r6,r2
    726c:	00e00434 	movhi	r3,32784
    7270:	18ffffc4 	addi	r3,r3,-1
    7274:	800497fa 	slli	r2,r16,31
    7278:	30c6703a 	and	r3,r6,r3
    727c:	1946b03a 	or	r3,r3,r5
    7280:	01600034 	movhi	r5,32768
    7284:	297fffc4 	addi	r5,r5,-1
    7288:	194a703a 	and	r5,r3,r5
    728c:	288ab03a 	or	r5,r5,r2
    7290:	2807883a 	mov	r3,r5
    7294:	7005883a 	mov	r2,r14
    7298:	dc800217 	ldw	r18,8(sp)
    729c:	dc400117 	ldw	r17,4(sp)
    72a0:	dc000017 	ldw	r16,0(sp)
    72a4:	dec00304 	addi	sp,sp,12
    72a8:	f800283a 	ret
    72ac:	21000217 	ldw	r4,8(r4)
    72b0:	00bf0084 	movi	r2,-1022
    72b4:	20803f16 	blt	r4,r2,73b4 <__pack_d+0x1b4>
    72b8:	0080ffc4 	movi	r2,1023
    72bc:	11002c16 	blt	r2,r4,7370 <__pack_d+0x170>
    72c0:	00803fc4 	movi	r2,255
    72c4:	408c703a 	and	r6,r8,r2
    72c8:	00802004 	movi	r2,128
    72cc:	0007883a 	mov	r3,zero
    72d0:	000f883a 	mov	r7,zero
    72d4:	2280ffc4 	addi	r10,r4,1023
    72d8:	30801e26 	beq	r6,r2,7354 <__pack_d+0x154>
    72dc:	00801fc4 	movi	r2,127
    72e0:	4089883a 	add	r4,r8,r2
    72e4:	220d803a 	cmpltu	r6,r4,r8
    72e8:	324d883a 	add	r6,r6,r9
    72ec:	2011883a 	mov	r8,r4
    72f0:	3013883a 	mov	r9,r6
    72f4:	00880034 	movhi	r2,8192
    72f8:	10bfffc4 	addi	r2,r2,-1
    72fc:	12400d36 	bltu	r2,r9,7334 <__pack_d+0x134>
    7300:	4804963a 	slli	r2,r9,24
    7304:	400cd23a 	srli	r6,r8,8
    7308:	480ed23a 	srli	r7,r9,8
    730c:	013fffc4 	movi	r4,-1
    7310:	118cb03a 	or	r6,r2,r6
    7314:	01400434 	movhi	r5,16
    7318:	297fffc4 	addi	r5,r5,-1
    731c:	3104703a 	and	r2,r6,r4
    7320:	3946703a 	and	r3,r7,r5
    7324:	5201ffcc 	andi	r8,r10,2047
    7328:	100d883a 	mov	r6,r2
    732c:	180f883a 	mov	r7,r3
    7330:	003fc706 	br	7250 <__pack_d+0x50>
    7334:	480897fa 	slli	r4,r9,31
    7338:	4004d07a 	srli	r2,r8,1
    733c:	4806d07a 	srli	r3,r9,1
    7340:	52800044 	addi	r10,r10,1
    7344:	2084b03a 	or	r2,r4,r2
    7348:	1011883a 	mov	r8,r2
    734c:	1813883a 	mov	r9,r3
    7350:	003feb06 	br	7300 <__pack_d+0x100>
    7354:	383fe11e 	bne	r7,zero,72dc <__pack_d+0xdc>
    7358:	01004004 	movi	r4,256
    735c:	4104703a 	and	r2,r8,r4
    7360:	10c4b03a 	or	r2,r2,r3
    7364:	103fe326 	beq	r2,zero,72f4 <__pack_d+0xf4>
    7368:	3005883a 	mov	r2,r6
    736c:	003fdc06 	br	72e0 <__pack_d+0xe0>
    7370:	000d883a 	mov	r6,zero
    7374:	000f883a 	mov	r7,zero
    7378:	0201ffc4 	movi	r8,2047
    737c:	003fb406 	br	7250 <__pack_d+0x50>
    7380:	0005883a 	mov	r2,zero
    7384:	00c00234 	movhi	r3,8
    7388:	408cb03a 	or	r6,r8,r2
    738c:	48ceb03a 	or	r7,r9,r3
    7390:	013fffc4 	movi	r4,-1
    7394:	01400434 	movhi	r5,16
    7398:	297fffc4 	addi	r5,r5,-1
    739c:	3104703a 	and	r2,r6,r4
    73a0:	3946703a 	and	r3,r7,r5
    73a4:	100d883a 	mov	r6,r2
    73a8:	180f883a 	mov	r7,r3
    73ac:	0201ffc4 	movi	r8,2047
    73b0:	003fa706 	br	7250 <__pack_d+0x50>
    73b4:	1109c83a 	sub	r4,r2,r4
    73b8:	00800e04 	movi	r2,56
    73bc:	11004316 	blt	r2,r4,74cc <__pack_d+0x2cc>
    73c0:	21fff804 	addi	r7,r4,-32
    73c4:	38004516 	blt	r7,zero,74dc <__pack_d+0x2dc>
    73c8:	49d8d83a 	srl	r12,r9,r7
    73cc:	001b883a 	mov	r13,zero
    73d0:	0023883a 	mov	r17,zero
    73d4:	01400044 	movi	r5,1
    73d8:	0025883a 	mov	r18,zero
    73dc:	38004716 	blt	r7,zero,74fc <__pack_d+0x2fc>
    73e0:	29d6983a 	sll	r11,r5,r7
    73e4:	0015883a 	mov	r10,zero
    73e8:	00bfffc4 	movi	r2,-1
    73ec:	5089883a 	add	r4,r10,r2
    73f0:	588b883a 	add	r5,r11,r2
    73f4:	228d803a 	cmpltu	r6,r4,r10
    73f8:	314b883a 	add	r5,r6,r5
    73fc:	4104703a 	and	r2,r8,r4
    7400:	4946703a 	and	r3,r9,r5
    7404:	10c4b03a 	or	r2,r2,r3
    7408:	10000226 	beq	r2,zero,7414 <__pack_d+0x214>
    740c:	04400044 	movi	r17,1
    7410:	0025883a 	mov	r18,zero
    7414:	00803fc4 	movi	r2,255
    7418:	644eb03a 	or	r7,r12,r17
    741c:	3892703a 	and	r9,r7,r2
    7420:	00802004 	movi	r2,128
    7424:	6c90b03a 	or	r8,r13,r18
    7428:	0015883a 	mov	r10,zero
    742c:	48801626 	beq	r9,r2,7488 <__pack_d+0x288>
    7430:	01001fc4 	movi	r4,127
    7434:	3905883a 	add	r2,r7,r4
    7438:	11cd803a 	cmpltu	r6,r2,r7
    743c:	320d883a 	add	r6,r6,r8
    7440:	100f883a 	mov	r7,r2
    7444:	00840034 	movhi	r2,4096
    7448:	10bfffc4 	addi	r2,r2,-1
    744c:	3011883a 	mov	r8,r6
    7450:	0007883a 	mov	r3,zero
    7454:	11801b36 	bltu	r2,r6,74c4 <__pack_d+0x2c4>
    7458:	4004963a 	slli	r2,r8,24
    745c:	3808d23a 	srli	r4,r7,8
    7460:	400ad23a 	srli	r5,r8,8
    7464:	1813883a 	mov	r9,r3
    7468:	1108b03a 	or	r4,r2,r4
    746c:	00bfffc4 	movi	r2,-1
    7470:	00c00434 	movhi	r3,16
    7474:	18ffffc4 	addi	r3,r3,-1
    7478:	208c703a 	and	r6,r4,r2
    747c:	28ce703a 	and	r7,r5,r3
    7480:	4a01ffcc 	andi	r8,r9,2047
    7484:	003f7206 	br	7250 <__pack_d+0x50>
    7488:	503fe91e 	bne	r10,zero,7430 <__pack_d+0x230>
    748c:	01004004 	movi	r4,256
    7490:	3904703a 	and	r2,r7,r4
    7494:	0007883a 	mov	r3,zero
    7498:	10c4b03a 	or	r2,r2,r3
    749c:	10000626 	beq	r2,zero,74b8 <__pack_d+0x2b8>
    74a0:	3a45883a 	add	r2,r7,r9
    74a4:	11cd803a 	cmpltu	r6,r2,r7
    74a8:	320d883a 	add	r6,r6,r8
    74ac:	100f883a 	mov	r7,r2
    74b0:	3011883a 	mov	r8,r6
    74b4:	0007883a 	mov	r3,zero
    74b8:	00840034 	movhi	r2,4096
    74bc:	10bfffc4 	addi	r2,r2,-1
    74c0:	123fe52e 	bgeu	r2,r8,7458 <__pack_d+0x258>
    74c4:	00c00044 	movi	r3,1
    74c8:	003fe306 	br	7458 <__pack_d+0x258>
    74cc:	0009883a 	mov	r4,zero
    74d0:	0013883a 	mov	r9,zero
    74d4:	000b883a 	mov	r5,zero
    74d8:	003fe406 	br	746c <__pack_d+0x26c>
    74dc:	4a47883a 	add	r3,r9,r9
    74e0:	008007c4 	movi	r2,31
    74e4:	1105c83a 	sub	r2,r2,r4
    74e8:	1886983a 	sll	r3,r3,r2
    74ec:	4118d83a 	srl	r12,r8,r4
    74f0:	491ad83a 	srl	r13,r9,r4
    74f4:	1b18b03a 	or	r12,r3,r12
    74f8:	003fb506 	br	73d0 <__pack_d+0x1d0>
    74fc:	2806d07a 	srli	r3,r5,1
    7500:	008007c4 	movi	r2,31
    7504:	1105c83a 	sub	r2,r2,r4
    7508:	1896d83a 	srl	r11,r3,r2
    750c:	2914983a 	sll	r10,r5,r4
    7510:	003fb506 	br	73e8 <__pack_d+0x1e8>

00007514 <__unpack_d>:
    7514:	20c00117 	ldw	r3,4(r4)
    7518:	22400017 	ldw	r9,0(r4)
    751c:	00800434 	movhi	r2,16
    7520:	10bfffc4 	addi	r2,r2,-1
    7524:	1808d53a 	srli	r4,r3,20
    7528:	180cd7fa 	srli	r6,r3,31
    752c:	1894703a 	and	r10,r3,r2
    7530:	2201ffcc 	andi	r8,r4,2047
    7534:	281b883a 	mov	r13,r5
    7538:	4817883a 	mov	r11,r9
    753c:	29800115 	stw	r6,4(r5)
    7540:	5019883a 	mov	r12,r10
    7544:	40001e1e 	bne	r8,zero,75c0 <__unpack_d+0xac>
    7548:	4a84b03a 	or	r2,r9,r10
    754c:	10001926 	beq	r2,zero,75b4 <__unpack_d+0xa0>
    7550:	4804d63a 	srli	r2,r9,24
    7554:	500c923a 	slli	r6,r10,8
    7558:	013f0084 	movi	r4,-1022
    755c:	00c40034 	movhi	r3,4096
    7560:	18ffffc4 	addi	r3,r3,-1
    7564:	118cb03a 	or	r6,r2,r6
    7568:	008000c4 	movi	r2,3
    756c:	480a923a 	slli	r5,r9,8
    7570:	68800015 	stw	r2,0(r13)
    7574:	69000215 	stw	r4,8(r13)
    7578:	19800b36 	bltu	r3,r6,75a8 <__unpack_d+0x94>
    757c:	200f883a 	mov	r7,r4
    7580:	1811883a 	mov	r8,r3
    7584:	2945883a 	add	r2,r5,r5
    7588:	1149803a 	cmpltu	r4,r2,r5
    758c:	3187883a 	add	r3,r6,r6
    7590:	20c9883a 	add	r4,r4,r3
    7594:	100b883a 	mov	r5,r2
    7598:	200d883a 	mov	r6,r4
    759c:	39ffffc4 	addi	r7,r7,-1
    75a0:	413ff82e 	bgeu	r8,r4,7584 <__unpack_d+0x70>
    75a4:	69c00215 	stw	r7,8(r13)
    75a8:	69800415 	stw	r6,16(r13)
    75ac:	69400315 	stw	r5,12(r13)
    75b0:	f800283a 	ret
    75b4:	00800084 	movi	r2,2
    75b8:	28800015 	stw	r2,0(r5)
    75bc:	f800283a 	ret
    75c0:	0081ffc4 	movi	r2,2047
    75c4:	40800f26 	beq	r8,r2,7604 <__unpack_d+0xf0>
    75c8:	480cd63a 	srli	r6,r9,24
    75cc:	5006923a 	slli	r3,r10,8
    75d0:	4804923a 	slli	r2,r9,8
    75d4:	0009883a 	mov	r4,zero
    75d8:	30c6b03a 	or	r3,r6,r3
    75dc:	01440034 	movhi	r5,4096
    75e0:	110cb03a 	or	r6,r2,r4
    75e4:	423f0044 	addi	r8,r8,-1023
    75e8:	194eb03a 	or	r7,r3,r5
    75ec:	008000c4 	movi	r2,3
    75f0:	69c00415 	stw	r7,16(r13)
    75f4:	6a000215 	stw	r8,8(r13)
    75f8:	68800015 	stw	r2,0(r13)
    75fc:	69800315 	stw	r6,12(r13)
    7600:	f800283a 	ret
    7604:	4a84b03a 	or	r2,r9,r10
    7608:	1000031e 	bne	r2,zero,7618 <__unpack_d+0x104>
    760c:	00800104 	movi	r2,4
    7610:	28800015 	stw	r2,0(r5)
    7614:	f800283a 	ret
    7618:	0009883a 	mov	r4,zero
    761c:	01400234 	movhi	r5,8
    7620:	4904703a 	and	r2,r9,r4
    7624:	5146703a 	and	r3,r10,r5
    7628:	10c4b03a 	or	r2,r2,r3
    762c:	10000526 	beq	r2,zero,7644 <__unpack_d+0x130>
    7630:	00800044 	movi	r2,1
    7634:	68800015 	stw	r2,0(r13)
    7638:	6b000415 	stw	r12,16(r13)
    763c:	6ac00315 	stw	r11,12(r13)
    7640:	f800283a 	ret
    7644:	68000015 	stw	zero,0(r13)
    7648:	003ffb06 	br	7638 <__unpack_d+0x124>

0000764c <__fpcmp_parts_d>:
    764c:	21800017 	ldw	r6,0(r4)
    7650:	00c00044 	movi	r3,1
    7654:	19800a2e 	bgeu	r3,r6,7680 <__fpcmp_parts_d+0x34>
    7658:	28800017 	ldw	r2,0(r5)
    765c:	1880082e 	bgeu	r3,r2,7680 <__fpcmp_parts_d+0x34>
    7660:	00c00104 	movi	r3,4
    7664:	30c02626 	beq	r6,r3,7700 <__fpcmp_parts_d+0xb4>
    7668:	10c02226 	beq	r2,r3,76f4 <__fpcmp_parts_d+0xa8>
    766c:	00c00084 	movi	r3,2
    7670:	30c00526 	beq	r6,r3,7688 <__fpcmp_parts_d+0x3c>
    7674:	10c0071e 	bne	r2,r3,7694 <__fpcmp_parts_d+0x48>
    7678:	20800117 	ldw	r2,4(r4)
    767c:	1000091e 	bne	r2,zero,76a4 <__fpcmp_parts_d+0x58>
    7680:	00800044 	movi	r2,1
    7684:	f800283a 	ret
    7688:	10c01a1e 	bne	r2,r3,76f4 <__fpcmp_parts_d+0xa8>
    768c:	0005883a 	mov	r2,zero
    7690:	f800283a 	ret
    7694:	22000117 	ldw	r8,4(r4)
    7698:	28800117 	ldw	r2,4(r5)
    769c:	40800326 	beq	r8,r2,76ac <__fpcmp_parts_d+0x60>
    76a0:	403ff726 	beq	r8,zero,7680 <__fpcmp_parts_d+0x34>
    76a4:	00bfffc4 	movi	r2,-1
    76a8:	f800283a 	ret
    76ac:	20c00217 	ldw	r3,8(r4)
    76b0:	28800217 	ldw	r2,8(r5)
    76b4:	10fffa16 	blt	r2,r3,76a0 <__fpcmp_parts_d+0x54>
    76b8:	18800916 	blt	r3,r2,76e0 <__fpcmp_parts_d+0x94>
    76bc:	21c00417 	ldw	r7,16(r4)
    76c0:	28c00417 	ldw	r3,16(r5)
    76c4:	21800317 	ldw	r6,12(r4)
    76c8:	28800317 	ldw	r2,12(r5)
    76cc:	19fff436 	bltu	r3,r7,76a0 <__fpcmp_parts_d+0x54>
    76d0:	38c00526 	beq	r7,r3,76e8 <__fpcmp_parts_d+0x9c>
    76d4:	38c00236 	bltu	r7,r3,76e0 <__fpcmp_parts_d+0x94>
    76d8:	19ffec1e 	bne	r3,r7,768c <__fpcmp_parts_d+0x40>
    76dc:	30bfeb2e 	bgeu	r6,r2,768c <__fpcmp_parts_d+0x40>
    76e0:	403fe71e 	bne	r8,zero,7680 <__fpcmp_parts_d+0x34>
    76e4:	003fef06 	br	76a4 <__fpcmp_parts_d+0x58>
    76e8:	11bffa2e 	bgeu	r2,r6,76d4 <__fpcmp_parts_d+0x88>
    76ec:	403fe426 	beq	r8,zero,7680 <__fpcmp_parts_d+0x34>
    76f0:	003fec06 	br	76a4 <__fpcmp_parts_d+0x58>
    76f4:	28800117 	ldw	r2,4(r5)
    76f8:	103fe11e 	bne	r2,zero,7680 <__fpcmp_parts_d+0x34>
    76fc:	003fe906 	br	76a4 <__fpcmp_parts_d+0x58>
    7700:	11bfdd1e 	bne	r2,r6,7678 <__fpcmp_parts_d+0x2c>
    7704:	28c00117 	ldw	r3,4(r5)
    7708:	20800117 	ldw	r2,4(r4)
    770c:	1885c83a 	sub	r2,r3,r2
    7710:	f800283a 	ret

00007714 <memcmp>:
    7714:	00c000c4 	movi	r3,3
    7718:	1980032e 	bgeu	r3,r6,7728 <memcmp+0x14>
    771c:	2144b03a 	or	r2,r4,r5
    7720:	10c4703a 	and	r2,r2,r3
    7724:	10000f26 	beq	r2,zero,7764 <memcmp+0x50>
    7728:	31ffffc4 	addi	r7,r6,-1
    772c:	3000061e 	bne	r6,zero,7748 <memcmp+0x34>
    7730:	00000a06 	br	775c <memcmp+0x48>
    7734:	39ffffc4 	addi	r7,r7,-1
    7738:	00bfffc4 	movi	r2,-1
    773c:	21000044 	addi	r4,r4,1
    7740:	29400044 	addi	r5,r5,1
    7744:	38800526 	beq	r7,r2,775c <memcmp+0x48>
    7748:	20c00003 	ldbu	r3,0(r4)
    774c:	28800003 	ldbu	r2,0(r5)
    7750:	18bff826 	beq	r3,r2,7734 <memcmp+0x20>
    7754:	1885c83a 	sub	r2,r3,r2
    7758:	f800283a 	ret
    775c:	0005883a 	mov	r2,zero
    7760:	f800283a 	ret
    7764:	180f883a 	mov	r7,r3
    7768:	20c00017 	ldw	r3,0(r4)
    776c:	28800017 	ldw	r2,0(r5)
    7770:	18bfed1e 	bne	r3,r2,7728 <memcmp+0x14>
    7774:	31bfff04 	addi	r6,r6,-4
    7778:	21000104 	addi	r4,r4,4
    777c:	29400104 	addi	r5,r5,4
    7780:	39bff936 	bltu	r7,r6,7768 <memcmp+0x54>
    7784:	003fe806 	br	7728 <memcmp+0x14>

00007788 <memcpy>:
    7788:	01c003c4 	movi	r7,15
    778c:	2007883a 	mov	r3,r4
    7790:	3980032e 	bgeu	r7,r6,77a0 <memcpy+0x18>
    7794:	2904b03a 	or	r2,r5,r4
    7798:	108000cc 	andi	r2,r2,3
    779c:	10000926 	beq	r2,zero,77c4 <memcpy+0x3c>
    77a0:	30000626 	beq	r6,zero,77bc <memcpy+0x34>
    77a4:	30cd883a 	add	r6,r6,r3
    77a8:	28800003 	ldbu	r2,0(r5)
    77ac:	29400044 	addi	r5,r5,1
    77b0:	18800005 	stb	r2,0(r3)
    77b4:	18c00044 	addi	r3,r3,1
    77b8:	30fffb1e 	bne	r6,r3,77a8 <memcpy+0x20>
    77bc:	2005883a 	mov	r2,r4
    77c0:	f800283a 	ret
    77c4:	3811883a 	mov	r8,r7
    77c8:	200f883a 	mov	r7,r4
    77cc:	28c00017 	ldw	r3,0(r5)
    77d0:	31bffc04 	addi	r6,r6,-16
    77d4:	38c00015 	stw	r3,0(r7)
    77d8:	28800117 	ldw	r2,4(r5)
    77dc:	38800115 	stw	r2,4(r7)
    77e0:	28c00217 	ldw	r3,8(r5)
    77e4:	38c00215 	stw	r3,8(r7)
    77e8:	28800317 	ldw	r2,12(r5)
    77ec:	29400404 	addi	r5,r5,16
    77f0:	38800315 	stw	r2,12(r7)
    77f4:	39c00404 	addi	r7,r7,16
    77f8:	41bff436 	bltu	r8,r6,77cc <memcpy+0x44>
    77fc:	008000c4 	movi	r2,3
    7800:	1180072e 	bgeu	r2,r6,7820 <memcpy+0x98>
    7804:	1007883a 	mov	r3,r2
    7808:	28800017 	ldw	r2,0(r5)
    780c:	31bfff04 	addi	r6,r6,-4
    7810:	29400104 	addi	r5,r5,4
    7814:	38800015 	stw	r2,0(r7)
    7818:	39c00104 	addi	r7,r7,4
    781c:	19bffa36 	bltu	r3,r6,7808 <memcpy+0x80>
    7820:	3807883a 	mov	r3,r7
    7824:	003fde06 	br	77a0 <memcpy+0x18>

00007828 <memset>:
    7828:	008000c4 	movi	r2,3
    782c:	29403fcc 	andi	r5,r5,255
    7830:	2007883a 	mov	r3,r4
    7834:	1180022e 	bgeu	r2,r6,7840 <memset+0x18>
    7838:	2084703a 	and	r2,r4,r2
    783c:	10000826 	beq	r2,zero,7860 <memset+0x38>
    7840:	30000526 	beq	r6,zero,7858 <memset+0x30>
    7844:	2805883a 	mov	r2,r5
    7848:	30cd883a 	add	r6,r6,r3
    784c:	18800005 	stb	r2,0(r3)
    7850:	18c00044 	addi	r3,r3,1
    7854:	19bffd1e 	bne	r3,r6,784c <memset+0x24>
    7858:	2005883a 	mov	r2,r4
    785c:	f800283a 	ret
    7860:	2804923a 	slli	r2,r5,8
    7864:	020003c4 	movi	r8,15
    7868:	200f883a 	mov	r7,r4
    786c:	2884b03a 	or	r2,r5,r2
    7870:	1006943a 	slli	r3,r2,16
    7874:	10c6b03a 	or	r3,r2,r3
    7878:	41800a2e 	bgeu	r8,r6,78a4 <memset+0x7c>
    787c:	4005883a 	mov	r2,r8
    7880:	31bffc04 	addi	r6,r6,-16
    7884:	38c00015 	stw	r3,0(r7)
    7888:	38c00115 	stw	r3,4(r7)
    788c:	38c00215 	stw	r3,8(r7)
    7890:	38c00315 	stw	r3,12(r7)
    7894:	39c00404 	addi	r7,r7,16
    7898:	11bff936 	bltu	r2,r6,7880 <memset+0x58>
    789c:	008000c4 	movi	r2,3
    78a0:	1180052e 	bgeu	r2,r6,78b8 <memset+0x90>
    78a4:	31bfff04 	addi	r6,r6,-4
    78a8:	008000c4 	movi	r2,3
    78ac:	38c00015 	stw	r3,0(r7)
    78b0:	39c00104 	addi	r7,r7,4
    78b4:	11bffb36 	bltu	r2,r6,78a4 <memset+0x7c>
    78b8:	3807883a 	mov	r3,r7
    78bc:	003fe006 	br	7840 <memset+0x18>

000078c0 <printf>:
    78c0:	defffb04 	addi	sp,sp,-20
    78c4:	dfc00115 	stw	ra,4(sp)
    78c8:	d9400215 	stw	r5,8(sp)
    78cc:	d9800315 	stw	r6,12(sp)
    78d0:	d9c00415 	stw	r7,16(sp)
    78d4:	00820034 	movhi	r2,2048
    78d8:	108a0804 	addi	r2,r2,10272
    78dc:	10c00017 	ldw	r3,0(r2)
    78e0:	200b883a 	mov	r5,r4
    78e4:	d8800204 	addi	r2,sp,8
    78e8:	19000217 	ldw	r4,8(r3)
    78ec:	100d883a 	mov	r6,r2
    78f0:	d8800015 	stw	r2,0(sp)
    78f4:	000b1780 	call	b178 <__vfprintf_internal>
    78f8:	dfc00117 	ldw	ra,4(sp)
    78fc:	dec00504 	addi	sp,sp,20
    7900:	f800283a 	ret

00007904 <_printf_r>:
    7904:	defffc04 	addi	sp,sp,-16
    7908:	dfc00115 	stw	ra,4(sp)
    790c:	d9800215 	stw	r6,8(sp)
    7910:	d9c00315 	stw	r7,12(sp)
    7914:	280d883a 	mov	r6,r5
    7918:	21400217 	ldw	r5,8(r4)
    791c:	d8c00204 	addi	r3,sp,8
    7920:	180f883a 	mov	r7,r3
    7924:	d8c00015 	stw	r3,0(sp)
    7928:	00092cc0 	call	92cc <___vfprintf_internal_r>
    792c:	dfc00117 	ldw	ra,4(sp)
    7930:	dec00404 	addi	sp,sp,16
    7934:	f800283a 	ret

00007938 <putchar>:
    7938:	00820034 	movhi	r2,2048
    793c:	108a0804 	addi	r2,r2,10272
    7940:	11800017 	ldw	r6,0(r2)
    7944:	200b883a 	mov	r5,r4
    7948:	3009883a 	mov	r4,r6
    794c:	31800217 	ldw	r6,8(r6)
    7950:	00101cc1 	jmpi	101cc <_putc_r>

00007954 <_putchar_r>:
    7954:	21800217 	ldw	r6,8(r4)
    7958:	00101cc1 	jmpi	101cc <_putc_r>

0000795c <_puts_r>:
    795c:	defff604 	addi	sp,sp,-40
    7960:	dc400715 	stw	r17,28(sp)
    7964:	2023883a 	mov	r17,r4
    7968:	2809883a 	mov	r4,r5
    796c:	dfc00915 	stw	ra,36(sp)
    7970:	dcc00815 	stw	r19,32(sp)
    7974:	2827883a 	mov	r19,r5
    7978:	0007ae40 	call	7ae4 <strlen>
    797c:	89400217 	ldw	r5,8(r17)
    7980:	00c20034 	movhi	r3,2048
    7984:	18c11404 	addi	r3,r3,1104
    7988:	01c00044 	movi	r7,1
    798c:	12000044 	addi	r8,r2,1
    7990:	d8c00515 	stw	r3,20(sp)
    7994:	d9c00615 	stw	r7,24(sp)
    7998:	d8c00304 	addi	r3,sp,12
    799c:	01c00084 	movi	r7,2
    79a0:	8809883a 	mov	r4,r17
    79a4:	d80d883a 	mov	r6,sp
    79a8:	d8c00015 	stw	r3,0(sp)
    79ac:	dcc00315 	stw	r19,12(sp)
    79b0:	da000215 	stw	r8,8(sp)
    79b4:	d9c00115 	stw	r7,4(sp)
    79b8:	d8800415 	stw	r2,16(sp)
    79bc:	000d3d40 	call	d3d4 <__sfvwrite_r>
    79c0:	00ffffc4 	movi	r3,-1
    79c4:	10000626 	beq	r2,zero,79e0 <_puts_r+0x84>
    79c8:	1805883a 	mov	r2,r3
    79cc:	dfc00917 	ldw	ra,36(sp)
    79d0:	dcc00817 	ldw	r19,32(sp)
    79d4:	dc400717 	ldw	r17,28(sp)
    79d8:	dec00a04 	addi	sp,sp,40
    79dc:	f800283a 	ret
    79e0:	00c00284 	movi	r3,10
    79e4:	1805883a 	mov	r2,r3
    79e8:	dfc00917 	ldw	ra,36(sp)
    79ec:	dcc00817 	ldw	r19,32(sp)
    79f0:	dc400717 	ldw	r17,28(sp)
    79f4:	dec00a04 	addi	sp,sp,40
    79f8:	f800283a 	ret

000079fc <puts>:
    79fc:	00820034 	movhi	r2,2048
    7a00:	108a0804 	addi	r2,r2,10272
    7a04:	200b883a 	mov	r5,r4
    7a08:	11000017 	ldw	r4,0(r2)
    7a0c:	000795c1 	jmpi	795c <_puts_r>

00007a10 <sprintf>:
    7a10:	deffe504 	addi	sp,sp,-108
    7a14:	2013883a 	mov	r9,r4
    7a18:	dfc01815 	stw	ra,96(sp)
    7a1c:	d9801915 	stw	r6,100(sp)
    7a20:	d9c01a15 	stw	r7,104(sp)
    7a24:	d8801904 	addi	r2,sp,100
    7a28:	d8800015 	stw	r2,0(sp)
    7a2c:	00820034 	movhi	r2,2048
    7a30:	108a0804 	addi	r2,r2,10272
    7a34:	11000017 	ldw	r4,0(r2)
    7a38:	d9c00017 	ldw	r7,0(sp)
    7a3c:	00808204 	movi	r2,520
    7a40:	00e00034 	movhi	r3,32768
    7a44:	18ffffc4 	addi	r3,r3,-1
    7a48:	280d883a 	mov	r6,r5
    7a4c:	d880040d 	sth	r2,16(sp)
    7a50:	d9400104 	addi	r5,sp,4
    7a54:	00bfffc4 	movi	r2,-1
    7a58:	d8c00615 	stw	r3,24(sp)
    7a5c:	d8c00315 	stw	r3,12(sp)
    7a60:	da400515 	stw	r9,20(sp)
    7a64:	d880048d 	sth	r2,18(sp)
    7a68:	da400115 	stw	r9,4(sp)
    7a6c:	00092cc0 	call	92cc <___vfprintf_internal_r>
    7a70:	d8c00117 	ldw	r3,4(sp)
    7a74:	18000005 	stb	zero,0(r3)
    7a78:	dfc01817 	ldw	ra,96(sp)
    7a7c:	dec01b04 	addi	sp,sp,108
    7a80:	f800283a 	ret

00007a84 <_sprintf_r>:
    7a84:	deffe604 	addi	sp,sp,-104
    7a88:	2813883a 	mov	r9,r5
    7a8c:	dfc01815 	stw	ra,96(sp)
    7a90:	d9c01915 	stw	r7,100(sp)
    7a94:	d8801904 	addi	r2,sp,100
    7a98:	d8800015 	stw	r2,0(sp)
    7a9c:	100f883a 	mov	r7,r2
    7aa0:	00808204 	movi	r2,520
    7aa4:	00e00034 	movhi	r3,32768
    7aa8:	18ffffc4 	addi	r3,r3,-1
    7aac:	d880040d 	sth	r2,16(sp)
    7ab0:	d9400104 	addi	r5,sp,4
    7ab4:	00bfffc4 	movi	r2,-1
    7ab8:	d8c00615 	stw	r3,24(sp)
    7abc:	d8c00315 	stw	r3,12(sp)
    7ac0:	da400515 	stw	r9,20(sp)
    7ac4:	d880048d 	sth	r2,18(sp)
    7ac8:	da400115 	stw	r9,4(sp)
    7acc:	00092cc0 	call	92cc <___vfprintf_internal_r>
    7ad0:	d8c00117 	ldw	r3,4(sp)
    7ad4:	18000005 	stb	zero,0(r3)
    7ad8:	dfc01817 	ldw	ra,96(sp)
    7adc:	dec01a04 	addi	sp,sp,104
    7ae0:	f800283a 	ret

00007ae4 <strlen>:
    7ae4:	208000cc 	andi	r2,r4,3
    7ae8:	2011883a 	mov	r8,r4
    7aec:	1000161e 	bne	r2,zero,7b48 <strlen+0x64>
    7af0:	20c00017 	ldw	r3,0(r4)
    7af4:	017fbff4 	movhi	r5,65279
    7af8:	297fbfc4 	addi	r5,r5,-257
    7afc:	01e02074 	movhi	r7,32897
    7b00:	39e02004 	addi	r7,r7,-32640
    7b04:	1945883a 	add	r2,r3,r5
    7b08:	11c4703a 	and	r2,r2,r7
    7b0c:	00c6303a 	nor	r3,zero,r3
    7b10:	1886703a 	and	r3,r3,r2
    7b14:	18000c1e 	bne	r3,zero,7b48 <strlen+0x64>
    7b18:	280d883a 	mov	r6,r5
    7b1c:	380b883a 	mov	r5,r7
    7b20:	21000104 	addi	r4,r4,4
    7b24:	20800017 	ldw	r2,0(r4)
    7b28:	1187883a 	add	r3,r2,r6
    7b2c:	1946703a 	and	r3,r3,r5
    7b30:	0084303a 	nor	r2,zero,r2
    7b34:	10c4703a 	and	r2,r2,r3
    7b38:	103ff926 	beq	r2,zero,7b20 <strlen+0x3c>
    7b3c:	20800007 	ldb	r2,0(r4)
    7b40:	10000326 	beq	r2,zero,7b50 <strlen+0x6c>
    7b44:	21000044 	addi	r4,r4,1
    7b48:	20800007 	ldb	r2,0(r4)
    7b4c:	103ffd1e 	bne	r2,zero,7b44 <strlen+0x60>
    7b50:	2205c83a 	sub	r2,r4,r8
    7b54:	f800283a 	ret

00007b58 <strncat>:
    7b58:	208000cc 	andi	r2,r4,3
    7b5c:	10001426 	beq	r2,zero,7bb0 <strncat+0x58>
    7b60:	2007883a 	mov	r3,r4
    7b64:	00000106 	br	7b6c <strncat+0x14>
    7b68:	18c00044 	addi	r3,r3,1
    7b6c:	18800007 	ldb	r2,0(r3)
    7b70:	103ffd1e 	bne	r2,zero,7b68 <strncat+0x10>
    7b74:	31bfffc4 	addi	r6,r6,-1
    7b78:	00bfffc4 	movi	r2,-1
    7b7c:	30800a26 	beq	r6,r2,7ba8 <strncat+0x50>
    7b80:	28800003 	ldbu	r2,0(r5)
    7b84:	29400044 	addi	r5,r5,1
    7b88:	18800005 	stb	r2,0(r3)
    7b8c:	10000626 	beq	r2,zero,7ba8 <strncat+0x50>
    7b90:	18c00044 	addi	r3,r3,1
    7b94:	303ff71e 	bne	r6,zero,7b74 <strncat+0x1c>
    7b98:	31bfffc4 	addi	r6,r6,-1
    7b9c:	00bfffc4 	movi	r2,-1
    7ba0:	18000005 	stb	zero,0(r3)
    7ba4:	30bff61e 	bne	r6,r2,7b80 <strncat+0x28>
    7ba8:	2005883a 	mov	r2,r4
    7bac:	f800283a 	ret
    7bb0:	20c00017 	ldw	r3,0(r4)
    7bb4:	023fbff4 	movhi	r8,65279
    7bb8:	423fbfc4 	addi	r8,r8,-257
    7bbc:	02a02074 	movhi	r10,32897
    7bc0:	52a02004 	addi	r10,r10,-32640
    7bc4:	1a05883a 	add	r2,r3,r8
    7bc8:	1284703a 	and	r2,r2,r10
    7bcc:	00c6303a 	nor	r3,zero,r3
    7bd0:	1886703a 	and	r3,r3,r2
    7bd4:	200f883a 	mov	r7,r4
    7bd8:	1800091e 	bne	r3,zero,7c00 <strncat+0xa8>
    7bdc:	4013883a 	mov	r9,r8
    7be0:	5011883a 	mov	r8,r10
    7be4:	39c00104 	addi	r7,r7,4
    7be8:	38800017 	ldw	r2,0(r7)
    7bec:	1247883a 	add	r3,r2,r9
    7bf0:	1a06703a 	and	r3,r3,r8
    7bf4:	0084303a 	nor	r2,zero,r2
    7bf8:	10c4703a 	and	r2,r2,r3
    7bfc:	103ff926 	beq	r2,zero,7be4 <strncat+0x8c>
    7c00:	3807883a 	mov	r3,r7
    7c04:	003fd906 	br	7b6c <strncat+0x14>

00007c08 <match>:
    7c08:	21800017 	ldw	r6,0(r4)
    7c0c:	01c01004 	movi	r7,64
    7c10:	02001684 	movi	r8,90
    7c14:	28800007 	ldb	r2,0(r5)
    7c18:	29400044 	addi	r5,r5,1
    7c1c:	10000826 	beq	r2,zero,7c40 <match+0x38>
    7c20:	31800044 	addi	r6,r6,1
    7c24:	30c00007 	ldb	r3,0(r6)
    7c28:	38c0020e 	bge	r7,r3,7c34 <match+0x2c>
    7c2c:	40c00116 	blt	r8,r3,7c34 <match+0x2c>
    7c30:	18c00804 	addi	r3,r3,32
    7c34:	18bff726 	beq	r3,r2,7c14 <match+0xc>
    7c38:	0005883a 	mov	r2,zero
    7c3c:	f800283a 	ret
    7c40:	30800044 	addi	r2,r6,1
    7c44:	20800015 	stw	r2,0(r4)
    7c48:	00800044 	movi	r2,1
    7c4c:	f800283a 	ret

00007c50 <_strtod_r>:
    7c50:	deffde04 	addi	sp,sp,-136
    7c54:	df002015 	stw	fp,128(sp)
    7c58:	dd401d15 	stw	r21,116(sp)
    7c5c:	dc401915 	stw	r17,100(sp)
    7c60:	dfc02115 	stw	ra,132(sp)
    7c64:	ddc01f15 	stw	r23,124(sp)
    7c68:	dd801e15 	stw	r22,120(sp)
    7c6c:	dd001c15 	stw	r20,112(sp)
    7c70:	dcc01b15 	stw	r19,108(sp)
    7c74:	dc801a15 	stw	r18,104(sp)
    7c78:	dc001815 	stw	r16,96(sp)
    7c7c:	2823883a 	mov	r17,r5
    7c80:	202b883a 	mov	r21,r4
    7c84:	d9801515 	stw	r6,84(sp)
    7c88:	d8000915 	stw	zero,36(sp)
    7c8c:	d8000a15 	stw	zero,40(sp)
    7c90:	d9400415 	stw	r5,16(sp)
    7c94:	df000904 	addi	fp,sp,36
    7c98:	da000417 	ldw	r8,16(sp)
    7c9c:	00800b44 	movi	r2,45
    7ca0:	40c00003 	ldbu	r3,0(r8)
    7ca4:	10c03536 	bltu	r2,r3,7d7c <_strtod_r+0x12c>
    7ca8:	18c5883a 	add	r2,r3,r3
    7cac:	1085883a 	add	r2,r2,r2
    7cb0:	00c00034 	movhi	r3,0
    7cb4:	18df3104 	addi	r3,r3,31940
    7cb8:	10c5883a 	add	r2,r2,r3
    7cbc:	11000017 	ldw	r4,0(r2)
    7cc0:	2000683a 	jmp	r4
    7cc4:	00007eb8 	rdprs	zero,zero,506
    7cc8:	00007d7c 	xorhi	zero,zero,501
    7ccc:	00007d7c 	xorhi	zero,zero,501
    7cd0:	00007d7c 	xorhi	zero,zero,501
    7cd4:	00007d7c 	xorhi	zero,zero,501
    7cd8:	00007d7c 	xorhi	zero,zero,501
    7cdc:	00007d7c 	xorhi	zero,zero,501
    7ce0:	00007d7c 	xorhi	zero,zero,501
    7ce4:	00007d7c 	xorhi	zero,zero,501
    7ce8:	000081d0 	cmplti	zero,zero,519
    7cec:	000081d0 	cmplti	zero,zero,519
    7cf0:	000081d0 	cmplti	zero,zero,519
    7cf4:	000081d0 	cmplti	zero,zero,519
    7cf8:	000081d0 	cmplti	zero,zero,519
    7cfc:	00007d7c 	xorhi	zero,zero,501
    7d00:	00007d7c 	xorhi	zero,zero,501
    7d04:	00007d7c 	xorhi	zero,zero,501
    7d08:	00007d7c 	xorhi	zero,zero,501
    7d0c:	00007d7c 	xorhi	zero,zero,501
    7d10:	00007d7c 	xorhi	zero,zero,501
    7d14:	00007d7c 	xorhi	zero,zero,501
    7d18:	00007d7c 	xorhi	zero,zero,501
    7d1c:	00007d7c 	xorhi	zero,zero,501
    7d20:	00007d7c 	xorhi	zero,zero,501
    7d24:	00007d7c 	xorhi	zero,zero,501
    7d28:	00007d7c 	xorhi	zero,zero,501
    7d2c:	00007d7c 	xorhi	zero,zero,501
    7d30:	00007d7c 	xorhi	zero,zero,501
    7d34:	00007d7c 	xorhi	zero,zero,501
    7d38:	00007d7c 	xorhi	zero,zero,501
    7d3c:	00007d7c 	xorhi	zero,zero,501
    7d40:	00007d7c 	xorhi	zero,zero,501
    7d44:	000081d0 	cmplti	zero,zero,519
    7d48:	00007d7c 	xorhi	zero,zero,501
    7d4c:	00007d7c 	xorhi	zero,zero,501
    7d50:	00007d7c 	xorhi	zero,zero,501
    7d54:	00007d7c 	xorhi	zero,zero,501
    7d58:	00007d7c 	xorhi	zero,zero,501
    7d5c:	00007d7c 	xorhi	zero,zero,501
    7d60:	00007d7c 	xorhi	zero,zero,501
    7d64:	00007d7c 	xorhi	zero,zero,501
    7d68:	00007d7c 	xorhi	zero,zero,501
    7d6c:	00007d7c 	xorhi	zero,zero,501
    7d70:	000081b0 	cmpltui	zero,zero,518
    7d74:	00007d7c 	xorhi	zero,zero,501
    7d78:	000081dc 	xori	zero,zero,519
    7d7c:	d8001115 	stw	zero,68(sp)
    7d80:	40c00007 	ldb	r3,0(r8)
    7d84:	00800c04 	movi	r2,48
    7d88:	1880d026 	beq	r3,r2,80cc <_strtod_r+0x47c>
    7d8c:	001f883a 	mov	r15,zero
    7d90:	41000007 	ldb	r4,0(r8)
    7d94:	00c00bc4 	movi	r3,47
    7d98:	402d883a 	mov	r22,r8
    7d9c:	1903470e 	bge	r3,r4,8abc <_strtod_r+0xe6c>
    7da0:	00800e44 	movi	r2,57
    7da4:	11034516 	blt	r2,r4,8abc <_strtod_r+0xe6c>
    7da8:	180f883a 	mov	r7,r3
    7dac:	1013883a 	mov	r9,r2
    7db0:	4007883a 	mov	r3,r8
    7db4:	000d883a 	mov	r6,zero
    7db8:	0029883a 	mov	r20,zero
    7dbc:	0021883a 	mov	r16,zero
    7dc0:	01400204 	movi	r5,8
    7dc4:	028003c4 	movi	r10,15
    7dc8:	29803116 	blt	r5,r6,7e90 <_strtod_r+0x240>
    7dcc:	a08002a4 	muli	r2,r20,10
    7dd0:	1105883a 	add	r2,r2,r4
    7dd4:	153ff404 	addi	r20,r2,-48
    7dd8:	1a000044 	addi	r8,r3,1
    7ddc:	da000415 	stw	r8,16(sp)
    7de0:	41000007 	ldb	r4,0(r8)
    7de4:	31800044 	addi	r6,r6,1
    7de8:	4007883a 	mov	r3,r8
    7dec:	3900010e 	bge	r7,r4,7df4 <_strtod_r+0x1a4>
    7df0:	493ff50e 	bge	r9,r4,7dc8 <_strtod_r+0x178>
    7df4:	00800b84 	movi	r2,46
    7df8:	2080c126 	beq	r4,r2,8100 <_strtod_r+0x4b0>
    7dfc:	3027883a 	mov	r19,r6
    7e00:	0025883a 	mov	r18,zero
    7e04:	0015883a 	mov	r10,zero
    7e08:	000f883a 	mov	r7,zero
    7e0c:	00801944 	movi	r2,101
    7e10:	20802426 	beq	r4,r2,7ea4 <_strtod_r+0x254>
    7e14:	00801144 	movi	r2,69
    7e18:	20802226 	beq	r4,r2,7ea4 <_strtod_r+0x254>
    7e1c:	9816c03a 	cmpne	r11,r19,zero
    7e20:	000b883a 	mov	r5,zero
    7e24:	5800631e 	bne	r11,zero,7fb4 <_strtod_r+0x364>
    7e28:	3800c126 	beq	r7,zero,8130 <_strtod_r+0x4e0>
    7e2c:	d8c01517 	ldw	r3,84(sp)
    7e30:	18000226 	beq	r3,zero,7e3c <_strtod_r+0x1ec>
    7e34:	d8800417 	ldw	r2,16(sp)
    7e38:	18800015 	stw	r2,0(r3)
    7e3c:	d9001117 	ldw	r4,68(sp)
    7e40:	2005003a 	cmpeq	r2,r4,zero
    7e44:	10001f1e 	bne	r2,zero,7ec4 <_strtod_r+0x274>
    7e48:	e0800017 	ldw	r2,0(fp)
    7e4c:	e0c00117 	ldw	r3,4(fp)
    7e50:	1009883a 	mov	r4,r2
    7e54:	1960003c 	xorhi	r5,r3,32768
    7e58:	2005883a 	mov	r2,r4
    7e5c:	2807883a 	mov	r3,r5
    7e60:	dfc02117 	ldw	ra,132(sp)
    7e64:	df002017 	ldw	fp,128(sp)
    7e68:	ddc01f17 	ldw	r23,124(sp)
    7e6c:	dd801e17 	ldw	r22,120(sp)
    7e70:	dd401d17 	ldw	r21,116(sp)
    7e74:	dd001c17 	ldw	r20,112(sp)
    7e78:	dcc01b17 	ldw	r19,108(sp)
    7e7c:	dc801a17 	ldw	r18,104(sp)
    7e80:	dc401917 	ldw	r17,100(sp)
    7e84:	dc001817 	ldw	r16,96(sp)
    7e88:	dec02204 	addi	sp,sp,136
    7e8c:	f800283a 	ret
    7e90:	51bfd116 	blt	r10,r6,7dd8 <_strtod_r+0x188>
    7e94:	808002a4 	muli	r2,r16,10
    7e98:	1105883a 	add	r2,r2,r4
    7e9c:	143ff404 	addi	r16,r2,-48
    7ea0:	003fcd06 	br	7dd8 <_strtod_r+0x188>
    7ea4:	9816c03a 	cmpne	r11,r19,zero
    7ea8:	5800091e 	bne	r11,zero,7ed0 <_strtod_r+0x280>
    7eac:	3800081e 	bne	r7,zero,7ed0 <_strtod_r+0x280>
    7eb0:	7805003a 	cmpeq	r2,r15,zero
    7eb4:	10000626 	beq	r2,zero,7ed0 <_strtod_r+0x280>
    7eb8:	d8001115 	stw	zero,68(sp)
    7ebc:	dc400415 	stw	r17,16(sp)
    7ec0:	003fda06 	br	7e2c <_strtod_r+0x1dc>
    7ec4:	e1000017 	ldw	r4,0(fp)
    7ec8:	e1400117 	ldw	r5,4(fp)
    7ecc:	003fe206 	br	7e58 <_strtod_r+0x208>
    7ed0:	dc400417 	ldw	r17,16(sp)
    7ed4:	00800ac4 	movi	r2,43
    7ed8:	8a000044 	addi	r8,r17,1
    7edc:	da000415 	stw	r8,16(sp)
    7ee0:	88c00047 	ldb	r3,1(r17)
    7ee4:	4009883a 	mov	r4,r8
    7ee8:	1880bf26 	beq	r3,r2,81e8 <_strtod_r+0x598>
    7eec:	00800b44 	movi	r2,45
    7ef0:	18834526 	beq	r3,r2,8c08 <_strtod_r+0xfb8>
    7ef4:	1809883a 	mov	r4,r3
    7ef8:	20fff404 	addi	r3,r4,-48
    7efc:	00800244 	movi	r2,9
    7f00:	001d883a 	mov	r14,zero
    7f04:	10c0bf36 	bltu	r2,r3,8204 <_strtod_r+0x5b4>
    7f08:	00800c04 	movi	r2,48
    7f0c:	2080061e 	bne	r4,r2,7f28 <_strtod_r+0x2d8>
    7f10:	da000417 	ldw	r8,16(sp)
    7f14:	2005883a 	mov	r2,r4
    7f18:	42000044 	addi	r8,r8,1
    7f1c:	da000415 	stw	r8,16(sp)
    7f20:	41000007 	ldb	r4,0(r8)
    7f24:	20bffc26 	beq	r4,r2,7f18 <_strtod_r+0x2c8>
    7f28:	20fff3c4 	addi	r3,r4,-49
    7f2c:	00800204 	movi	r2,8
    7f30:	10ffbb36 	bltu	r2,r3,7e20 <_strtod_r+0x1d0>
    7f34:	da000417 	ldw	r8,16(sp)
    7f38:	227ff404 	addi	r9,r4,-48
    7f3c:	03000bc4 	movi	r12,47
    7f40:	4007883a 	mov	r3,r8
    7f44:	42000044 	addi	r8,r8,1
    7f48:	da000415 	stw	r8,16(sp)
    7f4c:	41000007 	ldb	r4,0(r8)
    7f50:	61000d0e 	bge	r12,r4,7f88 <_strtod_r+0x338>
    7f54:	00800e44 	movi	r2,57
    7f58:	11000b16 	blt	r2,r4,7f88 <_strtod_r+0x338>
    7f5c:	601b883a 	mov	r13,r12
    7f60:	1019883a 	mov	r12,r2
    7f64:	00000106 	br	7f6c <_strtod_r+0x31c>
    7f68:	61000716 	blt	r12,r4,7f88 <_strtod_r+0x338>
    7f6c:	488002a4 	muli	r2,r9,10
    7f70:	42000044 	addi	r8,r8,1
    7f74:	da000415 	stw	r8,16(sp)
    7f78:	2085883a 	add	r2,r4,r2
    7f7c:	41000007 	ldb	r4,0(r8)
    7f80:	127ff404 	addi	r9,r2,-48
    7f84:	693ff816 	blt	r13,r4,7f68 <_strtod_r+0x318>
    7f88:	40c7c83a 	sub	r3,r8,r3
    7f8c:	00800204 	movi	r2,8
    7f90:	10c2e416 	blt	r2,r3,8b24 <_strtod_r+0xed4>
    7f94:	009387c4 	movi	r2,19999
    7f98:	480b883a 	mov	r5,r9
    7f9c:	1240010e 	bge	r2,r9,7fa4 <_strtod_r+0x354>
    7fa0:	100b883a 	mov	r5,r2
    7fa4:	7005003a 	cmpeq	r2,r14,zero
    7fa8:	103f9e1e 	bne	r2,zero,7e24 <_strtod_r+0x1d4>
    7fac:	014bc83a 	sub	r5,zero,r5
    7fb0:	583f9d26 	beq	r11,zero,7e28 <_strtod_r+0x1d8>
    7fb4:	2a8bc83a 	sub	r5,r5,r10
    7fb8:	d9400f15 	stw	r5,60(sp)
    7fbc:	30007a1e 	bne	r6,zero,81a8 <_strtod_r+0x558>
    7fc0:	dcc01215 	stw	r19,72(sp)
    7fc4:	00800404 	movi	r2,16
    7fc8:	9825883a 	mov	r18,r19
    7fcc:	14c0010e 	bge	r2,r19,7fd4 <_strtod_r+0x384>
    7fd0:	1025883a 	mov	r18,r2
    7fd4:	a009883a 	mov	r4,r20
    7fd8:	00122240 	call	12224 <__floatunsidf>
    7fdc:	100f883a 	mov	r7,r2
    7fe0:	e0800015 	stw	r2,0(fp)
    7fe4:	00800244 	movi	r2,9
    7fe8:	e0c00115 	stw	r3,4(fp)
    7fec:	1480160e 	bge	r2,r18,8048 <_strtod_r+0x3f8>
    7ff0:	900c90fa 	slli	r6,r18,3
    7ff4:	01020034 	movhi	r4,2048
    7ff8:	21015f04 	addi	r4,r4,1404
    7ffc:	180b883a 	mov	r5,r3
    8000:	310d883a 	add	r6,r6,r4
    8004:	30ffef17 	ldw	r3,-68(r6)
    8008:	30bfee17 	ldw	r2,-72(r6)
    800c:	3809883a 	mov	r4,r7
    8010:	180f883a 	mov	r7,r3
    8014:	100d883a 	mov	r6,r2
    8018:	00068740 	call	6874 <__muldf3>
    801c:	8009883a 	mov	r4,r16
    8020:	1823883a 	mov	r17,r3
    8024:	1021883a 	mov	r16,r2
    8028:	00122240 	call	12224 <__floatunsidf>
    802c:	880b883a 	mov	r5,r17
    8030:	180f883a 	mov	r7,r3
    8034:	8009883a 	mov	r4,r16
    8038:	100d883a 	mov	r6,r2
    803c:	00068000 	call	6800 <__adddf3>
    8040:	e0c00115 	stw	r3,4(fp)
    8044:	e0800015 	stw	r2,0(fp)
    8048:	010003c4 	movi	r4,15
    804c:	24c09816 	blt	r4,r19,82b0 <_strtod_r+0x660>
    8050:	d9800f17 	ldw	r6,60(sp)
    8054:	303f7526 	beq	r6,zero,7e2c <_strtod_r+0x1dc>
    8058:	0183be0e 	bge	zero,r6,8f54 <_strtod_r+0x1304>
    805c:	00800584 	movi	r2,22
    8060:	1182b20e 	bge	r2,r6,8b2c <_strtod_r+0xedc>
    8064:	d8c00f17 	ldw	r3,60(sp)
    8068:	24e3c83a 	sub	r17,r4,r19
    806c:	88800584 	addi	r2,r17,22
    8070:	10c08f16 	blt	r2,r3,82b0 <_strtod_r+0x660>
    8074:	880890fa 	slli	r4,r17,3
    8078:	04020034 	movhi	r16,2048
    807c:	84015f04 	addi	r16,r16,1404
    8080:	e0800017 	ldw	r2,0(fp)
    8084:	2409883a 	add	r4,r4,r16
    8088:	22000017 	ldw	r8,0(r4)
    808c:	22400117 	ldw	r9,4(r4)
    8090:	e0c00117 	ldw	r3,4(fp)
    8094:	1009883a 	mov	r4,r2
    8098:	480f883a 	mov	r7,r9
    809c:	180b883a 	mov	r5,r3
    80a0:	400d883a 	mov	r6,r8
    80a4:	00068740 	call	6874 <__muldf3>
    80a8:	d9000f17 	ldw	r4,60(sp)
    80ac:	180b883a 	mov	r5,r3
    80b0:	2455c83a 	sub	r10,r4,r17
    80b4:	501490fa 	slli	r10,r10,3
    80b8:	1009883a 	mov	r4,r2
    80bc:	5415883a 	add	r10,r10,r16
    80c0:	52000017 	ldw	r8,0(r10)
    80c4:	52400117 	ldw	r9,4(r10)
    80c8:	0002a206 	br	8b54 <_strtod_r+0xf04>
    80cc:	40c00047 	ldb	r3,1(r8)
    80d0:	00801604 	movi	r2,88
    80d4:	18804e26 	beq	r3,r2,8210 <_strtod_r+0x5c0>
    80d8:	00801e04 	movi	r2,120
    80dc:	18804c26 	beq	r3,r2,8210 <_strtod_r+0x5c0>
    80e0:	42000044 	addi	r8,r8,1
    80e4:	da000415 	stw	r8,16(sp)
    80e8:	40c00007 	ldb	r3,0(r8)
    80ec:	00800c04 	movi	r2,48
    80f0:	18bffb26 	beq	r3,r2,80e0 <_strtod_r+0x490>
    80f4:	183f4d26 	beq	r3,zero,7e2c <_strtod_r+0x1dc>
    80f8:	03c00044 	movi	r15,1
    80fc:	003f2406 	br	7d90 <_strtod_r+0x140>
    8100:	42000044 	addi	r8,r8,1
    8104:	da000415 	stw	r8,16(sp)
    8108:	19000047 	ldb	r4,1(r3)
    810c:	3000b726 	beq	r6,zero,83ec <_strtod_r+0x79c>
    8110:	3027883a 	mov	r19,r6
    8114:	0015883a 	mov	r10,zero
    8118:	000f883a 	mov	r7,zero
    811c:	227ff404 	addi	r9,r4,-48
    8120:	00800244 	movi	r2,9
    8124:	1242592e 	bgeu	r2,r9,8a8c <_strtod_r+0xe3c>
    8128:	04800044 	movi	r18,1
    812c:	003f3706 	br	7e0c <_strtod_r+0x1bc>
    8130:	7804c03a 	cmpne	r2,r15,zero
    8134:	103f3d1e 	bne	r2,zero,7e2c <_strtod_r+0x1dc>
    8138:	9004c03a 	cmpne	r2,r18,zero
    813c:	103f5e1e 	bne	r2,zero,7eb8 <_strtod_r+0x268>
    8140:	00801384 	movi	r2,78
    8144:	2083a226 	beq	r4,r2,8fd0 <_strtod_r+0x1380>
    8148:	11039d16 	blt	r2,r4,8fc0 <_strtod_r+0x1370>
    814c:	00801244 	movi	r2,73
    8150:	20bf591e 	bne	r4,r2,7eb8 <_strtod_r+0x268>
    8154:	dc000404 	addi	r16,sp,16
    8158:	8009883a 	mov	r4,r16
    815c:	01420034 	movhi	r5,2048
    8160:	29411504 	addi	r5,r5,1108
    8164:	0007c080 	call	7c08 <match>
    8168:	103f5326 	beq	r2,zero,7eb8 <_strtod_r+0x268>
    816c:	d8800417 	ldw	r2,16(sp)
    8170:	8009883a 	mov	r4,r16
    8174:	01420034 	movhi	r5,2048
    8178:	29411604 	addi	r5,r5,1112
    817c:	123fffc4 	addi	r8,r2,-1
    8180:	da000415 	stw	r8,16(sp)
    8184:	0007c080 	call	7c08 <match>
    8188:	1000031e 	bne	r2,zero,8198 <_strtod_r+0x548>
    818c:	d8800417 	ldw	r2,16(sp)
    8190:	12000044 	addi	r8,r2,1
    8194:	da000415 	stw	r8,16(sp)
    8198:	019ffc34 	movhi	r6,32752
    819c:	e1800115 	stw	r6,4(fp)
    81a0:	e0000015 	stw	zero,0(fp)
    81a4:	003f2106 	br	7e2c <_strtod_r+0x1dc>
    81a8:	d9801215 	stw	r6,72(sp)
    81ac:	003f8506 	br	7fc4 <_strtod_r+0x374>
    81b0:	d8001115 	stw	zero,68(sp)
    81b4:	42000044 	addi	r8,r8,1
    81b8:	da000415 	stw	r8,16(sp)
    81bc:	40800007 	ldb	r2,0(r8)
    81c0:	103eef1e 	bne	r2,zero,7d80 <_strtod_r+0x130>
    81c4:	d8001115 	stw	zero,68(sp)
    81c8:	dc400415 	stw	r17,16(sp)
    81cc:	003f1706 	br	7e2c <_strtod_r+0x1dc>
    81d0:	42000044 	addi	r8,r8,1
    81d4:	da000415 	stw	r8,16(sp)
    81d8:	003eaf06 	br	7c98 <_strtod_r+0x48>
    81dc:	00800044 	movi	r2,1
    81e0:	d8801115 	stw	r2,68(sp)
    81e4:	003ff306 	br	81b4 <_strtod_r+0x564>
    81e8:	001d883a 	mov	r14,zero
    81ec:	42000044 	addi	r8,r8,1
    81f0:	da000415 	stw	r8,16(sp)
    81f4:	21000047 	ldb	r4,1(r4)
    81f8:	00800244 	movi	r2,9
    81fc:	20fff404 	addi	r3,r4,-48
    8200:	10ff412e 	bgeu	r2,r3,7f08 <_strtod_r+0x2b8>
    8204:	000b883a 	mov	r5,zero
    8208:	dc400415 	stw	r17,16(sp)
    820c:	003f0506 	br	7e24 <_strtod_r+0x1d4>
    8210:	d8c01117 	ldw	r3,68(sp)
    8214:	04820034 	movhi	r18,2048
    8218:	94828e04 	addi	r18,r18,2616
    821c:	d8800504 	addi	r2,sp,20
    8220:	a809883a 	mov	r4,r21
    8224:	d9400404 	addi	r5,sp,16
    8228:	900d883a 	mov	r6,r18
    822c:	d9c00604 	addi	r7,sp,24
    8230:	d8800015 	stw	r2,0(sp)
    8234:	d8c00115 	stw	r3,4(sp)
    8238:	000db2c0 	call	db2c <__gethex>
    823c:	140001cc 	andi	r16,r2,7
    8240:	1027883a 	mov	r19,r2
    8244:	803ef926 	beq	r16,zero,7e2c <_strtod_r+0x1dc>
    8248:	05000184 	movi	r20,6
    824c:	853f1a26 	beq	r16,r20,7eb8 <_strtod_r+0x268>
    8250:	d9800517 	ldw	r6,20(sp)
    8254:	30000626 	beq	r6,zero,8270 <_strtod_r+0x620>
    8258:	91400017 	ldw	r5,0(r18)
    825c:	d9000d04 	addi	r4,sp,52
    8260:	000f5740 	call	f574 <__copybits>
    8264:	d9400517 	ldw	r5,20(sp)
    8268:	a809883a 	mov	r4,r21
    826c:	000f0d40 	call	f0d4 <_Bfree>
    8270:	d9400617 	ldw	r5,24(sp)
    8274:	a4024136 	bltu	r20,r16,8b7c <_strtod_r+0xf2c>
    8278:	8405883a 	add	r2,r16,r16
    827c:	1085883a 	add	r2,r2,r2
    8280:	00c00074 	movhi	r3,1
    8284:	18e0a504 	addi	r3,r3,-32108
    8288:	10c5883a 	add	r2,r2,r3
    828c:	11000017 	ldw	r4,0(r2)
    8290:	2000683a 	jmp	r4
    8294:	00008bbc 	xorhi	zero,zero,558
    8298:	00008bc8 	cmpgei	zero,zero,559
    829c:	00008b6c 	andhi	zero,zero,557
    82a0:	00008b94 	movui	zero,558
    82a4:	00008ba4 	muli	zero,zero,558
    82a8:	00008bc8 	cmpgei	zero,zero,559
    82ac:	00008bbc 	xorhi	zero,zero,558
    82b0:	d8c00f17 	ldw	r3,60(sp)
    82b4:	9c85c83a 	sub	r2,r19,r18
    82b8:	18a1883a 	add	r16,r3,r2
    82bc:	0402d00e 	bge	zero,r16,8e00 <_strtod_r+0x11b0>
    82c0:	814003cc 	andi	r5,r16,15
    82c4:	28000f26 	beq	r5,zero,8304 <_strtod_r+0x6b4>
    82c8:	280a90fa 	slli	r5,r5,3
    82cc:	01020034 	movhi	r4,2048
    82d0:	21015f04 	addi	r4,r4,1404
    82d4:	e0800017 	ldw	r2,0(fp)
    82d8:	290b883a 	add	r5,r5,r4
    82dc:	2a000017 	ldw	r8,0(r5)
    82e0:	e0c00117 	ldw	r3,4(fp)
    82e4:	2a400117 	ldw	r9,4(r5)
    82e8:	1009883a 	mov	r4,r2
    82ec:	180b883a 	mov	r5,r3
    82f0:	480f883a 	mov	r7,r9
    82f4:	400d883a 	mov	r6,r8
    82f8:	00068740 	call	6874 <__muldf3>
    82fc:	e0c00115 	stw	r3,4(fp)
    8300:	e0800015 	stw	r2,0(fp)
    8304:	00bffc04 	movi	r2,-16
    8308:	808c703a 	and	r6,r16,r2
    830c:	30005b26 	beq	r6,zero,847c <_strtod_r+0x82c>
    8310:	00804d04 	movi	r2,308
    8314:	1181fd16 	blt	r2,r6,8b0c <_strtod_r+0xebc>
    8318:	3021d13a 	srai	r16,r6,4
    831c:	00800044 	movi	r2,1
    8320:	1403610e 	bge	r2,r16,90a8 <_strtod_r+0x1458>
    8324:	102f883a 	mov	r23,r2
    8328:	0025883a 	mov	r18,zero
    832c:	04420034 	movhi	r17,2048
    8330:	8c419104 	addi	r17,r17,1604
    8334:	8080004c 	andi	r2,r16,1
    8338:	1005003a 	cmpeq	r2,r2,zero
    833c:	1000091e 	bne	r2,zero,8364 <_strtod_r+0x714>
    8340:	e0800017 	ldw	r2,0(fp)
    8344:	e0c00117 	ldw	r3,4(fp)
    8348:	89800017 	ldw	r6,0(r17)
    834c:	89c00117 	ldw	r7,4(r17)
    8350:	180b883a 	mov	r5,r3
    8354:	1009883a 	mov	r4,r2
    8358:	00068740 	call	6874 <__muldf3>
    835c:	e0c00115 	stw	r3,4(fp)
    8360:	e0800015 	stw	r2,0(fp)
    8364:	8021d07a 	srai	r16,r16,1
    8368:	94800044 	addi	r18,r18,1
    836c:	8c400204 	addi	r17,r17,8
    8370:	bc3ff016 	blt	r23,r16,8334 <_strtod_r+0x6e4>
    8374:	900e90fa 	slli	r7,r18,3
    8378:	01820034 	movhi	r6,2048
    837c:	31819104 	addi	r6,r6,1604
    8380:	e2000117 	ldw	r8,4(fp)
    8384:	398f883a 	add	r7,r7,r6
    8388:	38800017 	ldw	r2,0(r7)
    838c:	38c00117 	ldw	r3,4(r7)
    8390:	e1000017 	ldw	r4,0(fp)
    8394:	01bf2c34 	movhi	r6,64688
    8398:	418d883a 	add	r6,r8,r6
    839c:	300b883a 	mov	r5,r6
    83a0:	180f883a 	mov	r7,r3
    83a4:	100d883a 	mov	r6,r2
    83a8:	00068740 	call	6874 <__muldf3>
    83ac:	1009883a 	mov	r4,r2
    83b0:	180b883a 	mov	r5,r3
    83b4:	199ffc2c 	andhi	r6,r3,32752
    83b8:	009f2834 	movhi	r2,31904
    83bc:	e1000015 	stw	r4,0(fp)
    83c0:	e1400115 	stw	r5,4(fp)
    83c4:	1181d136 	bltu	r2,r6,8b0c <_strtod_r+0xebc>
    83c8:	009f2434 	movhi	r2,31888
    83cc:	1183202e 	bgeu	r2,r6,9050 <_strtod_r+0x1400>
    83d0:	d8001415 	stw	zero,80(sp)
    83d4:	019ffc34 	movhi	r6,32752
    83d8:	31bfffc4 	addi	r6,r6,-1
    83dc:	01ffffc4 	movi	r7,-1
    83e0:	e1800115 	stw	r6,4(fp)
    83e4:	e1c00015 	stw	r7,0(fp)
    83e8:	00002506 	br	8480 <_strtod_r+0x830>
    83ec:	00800c04 	movi	r2,48
    83f0:	2083151e 	bne	r4,r2,9048 <_strtod_r+0x13f8>
    83f4:	2005883a 	mov	r2,r4
    83f8:	000f883a 	mov	r7,zero
    83fc:	42000044 	addi	r8,r8,1
    8400:	da000415 	stw	r8,16(sp)
    8404:	41000007 	ldb	r4,0(r8)
    8408:	39c00044 	addi	r7,r7,1
    840c:	20bffb26 	beq	r4,r2,83fc <_strtod_r+0x7ac>
    8410:	20fff3c4 	addi	r3,r4,-49
    8414:	00800204 	movi	r2,8
    8418:	10c1b836 	bltu	r2,r3,8afc <_strtod_r+0xeac>
    841c:	dd800417 	ldw	r22,16(sp)
    8420:	3815883a 	mov	r10,r7
    8424:	227ff404 	addi	r9,r4,-48
    8428:	b011883a 	mov	r8,r22
    842c:	0027883a 	mov	r19,zero
    8430:	01c00044 	movi	r7,1
    8434:	4801fe26 	beq	r9,zero,8c30 <_strtod_r+0xfe0>
    8438:	00800044 	movi	r2,1
    843c:	51d5883a 	add	r10,r10,r7
    8440:	11c31f0e 	bge	r2,r7,90c0 <_strtod_r+0x1470>
    8444:	1009883a 	mov	r4,r2
    8448:	9807883a 	mov	r3,r19
    844c:	02c00204 	movi	r11,8
    8450:	03000404 	movi	r12,16
    8454:	00000306 	br	8464 <_strtod_r+0x814>
    8458:	a50002a4 	muli	r20,r20,10
    845c:	21000044 	addi	r4,r4,1
    8460:	21c1eb26 	beq	r4,r7,8c10 <_strtod_r+0xfc0>
    8464:	18c00044 	addi	r3,r3,1
    8468:	18bfffc4 	addi	r2,r3,-1
    846c:	58bffa0e 	bge	r11,r2,8458 <_strtod_r+0x808>
    8470:	60fffa16 	blt	r12,r3,845c <_strtod_r+0x80c>
    8474:	840002a4 	muli	r16,r16,10
    8478:	003ff806 	br	845c <_strtod_r+0x80c>
    847c:	d8001415 	stw	zero,80(sp)
    8480:	d9801217 	ldw	r6,72(sp)
    8484:	a809883a 	mov	r4,r21
    8488:	b00b883a 	mov	r5,r22
    848c:	980f883a 	mov	r7,r19
    8490:	dd000015 	stw	r20,0(sp)
    8494:	000ffa80 	call	ffa8 <__s2b>
    8498:	d9800f17 	ldw	r6,60(sp)
    849c:	11000304 	addi	r4,r2,12
    84a0:	d8801015 	stw	r2,64(sp)
    84a4:	300c803a 	cmplt	r6,r6,zero
    84a8:	d9001715 	stw	r4,92(sp)
    84ac:	d9801615 	stw	r6,88(sp)
    84b0:	d8801017 	ldw	r2,64(sp)
    84b4:	a809883a 	mov	r4,r21
    84b8:	11400117 	ldw	r5,4(r2)
    84bc:	000f6540 	call	f654 <_Balloc>
    84c0:	d8c01017 	ldw	r3,64(sp)
    84c4:	d9401717 	ldw	r5,92(sp)
    84c8:	11000304 	addi	r4,r2,12
    84cc:	19800417 	ldw	r6,16(r3)
    84d0:	102f883a 	mov	r23,r2
    84d4:	318d883a 	add	r6,r6,r6
    84d8:	318d883a 	add	r6,r6,r6
    84dc:	31800204 	addi	r6,r6,8
    84e0:	00077880 	call	7788 <memcpy>
    84e4:	e2000017 	ldw	r8,0(fp)
    84e8:	e2400117 	ldw	r9,4(fp)
    84ec:	d9800304 	addi	r6,sp,12
    84f0:	400b883a 	mov	r5,r8
    84f4:	a809883a 	mov	r4,r21
    84f8:	d9c00204 	addi	r7,sp,8
    84fc:	d9800015 	stw	r6,0(sp)
    8500:	480d883a 	mov	r6,r9
    8504:	000f7100 	call	f710 <__d2b>
    8508:	a809883a 	mov	r4,r21
    850c:	01400044 	movi	r5,1
    8510:	d8800515 	stw	r2,20(sp)
    8514:	000fd4c0 	call	fd4c <__i2b>
    8518:	102d883a 	mov	r22,r2
    851c:	d8801617 	ldw	r2,88(sp)
    8520:	1001051e 	bne	r2,zero,8938 <_strtod_r+0xce8>
    8524:	dd000f17 	ldw	r20,60(sp)
    8528:	000f883a 	mov	r7,zero
    852c:	0013883a 	mov	r9,zero
    8530:	a011883a 	mov	r8,r20
    8534:	d8800217 	ldw	r2,8(sp)
    8538:	1000fd16 	blt	r2,zero,8930 <_strtod_r+0xce0>
    853c:	388f883a 	add	r7,r7,r2
    8540:	d9801417 	ldw	r6,80(sp)
    8544:	d9400317 	ldw	r5,12(sp)
    8548:	00ff0084 	movi	r3,-1022
    854c:	1189c83a 	sub	r4,r2,r6
    8550:	2145883a 	add	r2,r4,r5
    8554:	10bfffc4 	addi	r2,r2,-1
    8558:	10c09f0e 	bge	r2,r3,87d8 <_strtod_r+0xb88>
    855c:	21810cc4 	addi	r6,r4,1075
    8560:	d8c01417 	ldw	r3,80(sp)
    8564:	4185883a 	add	r2,r8,r6
    8568:	39a1883a 	add	r16,r7,r6
    856c:	18a5883a 	add	r18,r3,r2
    8570:	3807883a 	mov	r3,r7
    8574:	81c0010e 	bge	r16,r7,857c <_strtod_r+0x92c>
    8578:	8007883a 	mov	r3,r16
    857c:	9005883a 	mov	r2,r18
    8580:	1c80010e 	bge	r3,r18,8588 <_strtod_r+0x938>
    8584:	1805883a 	mov	r2,r3
    8588:	0080e70e 	bge	zero,r2,8928 <_strtod_r+0xcd8>
    858c:	38a7c83a 	sub	r19,r7,r2
    8590:	80a1c83a 	sub	r16,r16,r2
    8594:	90a5c83a 	sub	r18,r18,r2
    8598:	02400e0e 	bge	zero,r9,85d4 <_strtod_r+0x984>
    859c:	480d883a 	mov	r6,r9
    85a0:	b00b883a 	mov	r5,r22
    85a4:	a809883a 	mov	r4,r21
    85a8:	000fe880 	call	fe88 <__pow5mult>
    85ac:	d9800517 	ldw	r6,20(sp)
    85b0:	a809883a 	mov	r4,r21
    85b4:	100b883a 	mov	r5,r2
    85b8:	102d883a 	mov	r22,r2
    85bc:	000fb640 	call	fb64 <__multiply>
    85c0:	d9400517 	ldw	r5,20(sp)
    85c4:	1023883a 	mov	r17,r2
    85c8:	a809883a 	mov	r4,r21
    85cc:	000f0d40 	call	f0d4 <_Bfree>
    85d0:	dc400515 	stw	r17,20(sp)
    85d4:	0400050e 	bge	zero,r16,85ec <_strtod_r+0x99c>
    85d8:	d9400517 	ldw	r5,20(sp)
    85dc:	800d883a 	mov	r6,r16
    85e0:	a809883a 	mov	r4,r21
    85e4:	000fa180 	call	fa18 <__lshift>
    85e8:	d8800515 	stw	r2,20(sp)
    85ec:	a000741e 	bne	r20,zero,87c0 <_strtod_r+0xb70>
    85f0:	0480050e 	bge	zero,r18,8608 <_strtod_r+0x9b8>
    85f4:	b80b883a 	mov	r5,r23
    85f8:	900d883a 	mov	r6,r18
    85fc:	a809883a 	mov	r4,r21
    8600:	000fa180 	call	fa18 <__lshift>
    8604:	102f883a 	mov	r23,r2
    8608:	04c0050e 	bge	zero,r19,8620 <_strtod_r+0x9d0>
    860c:	b00b883a 	mov	r5,r22
    8610:	980d883a 	mov	r6,r19
    8614:	a809883a 	mov	r4,r21
    8618:	000fa180 	call	fa18 <__lshift>
    861c:	102d883a 	mov	r22,r2
    8620:	d9400517 	ldw	r5,20(sp)
    8624:	a809883a 	mov	r4,r21
    8628:	b80d883a 	mov	r6,r23
    862c:	000f88c0 	call	f88c <__mdiff>
    8630:	11000317 	ldw	r4,12(r2)
    8634:	b00b883a 	mov	r5,r22
    8638:	10000315 	stw	zero,12(r2)
    863c:	d9001315 	stw	r4,76(sp)
    8640:	1009883a 	mov	r4,r2
    8644:	1029883a 	mov	r20,r2
    8648:	000f2300 	call	f230 <__mcmp>
    864c:	10017c16 	blt	r2,zero,8c40 <_strtod_r+0xff0>
    8650:	1001af26 	beq	r2,zero,8d10 <_strtod_r+0x10c0>
    8654:	a009883a 	mov	r4,r20
    8658:	b00b883a 	mov	r5,r22
    865c:	000f4300 	call	f430 <__ratio>
    8660:	0011883a 	mov	r8,zero
    8664:	02500034 	movhi	r9,16384
    8668:	480f883a 	mov	r7,r9
    866c:	1009883a 	mov	r4,r2
    8670:	180b883a 	mov	r5,r3
    8674:	400d883a 	mov	r6,r8
    8678:	1021883a 	mov	r16,r2
    867c:	1823883a 	mov	r17,r3
    8680:	00121280 	call	12128 <__ledf2>
    8684:	00805716 	blt	zero,r2,87e4 <_strtod_r+0xb94>
    8688:	d9801317 	ldw	r6,76(sp)
    868c:	3025003a 	cmpeq	r18,r6,zero
    8690:	90008b1e 	bne	r18,zero,88c0 <_strtod_r+0xc70>
    8694:	008ffc34 	movhi	r2,16368
    8698:	0021883a 	mov	r16,zero
    869c:	1023883a 	mov	r17,r2
    86a0:	d8000715 	stw	zero,28(sp)
    86a4:	d8800815 	stw	r2,32(sp)
    86a8:	e1c00117 	ldw	r7,4(fp)
    86ac:	009ff834 	movhi	r2,32736
    86b0:	3cdffc2c 	andhi	r19,r7,32752
    86b4:	98805e26 	beq	r19,r2,8830 <_strtod_r+0xbe0>
    86b8:	d8801417 	ldw	r2,80(sp)
    86bc:	10001b26 	beq	r2,zero,872c <_strtod_r+0xadc>
    86c0:	0081a834 	movhi	r2,1696
    86c4:	14c01936 	bltu	r2,r19,872c <_strtod_r+0xadc>
    86c8:	00bff034 	movhi	r2,65472
    86cc:	00d07834 	movhi	r3,16864
    86d0:	18ffffc4 	addi	r3,r3,-1
    86d4:	180f883a 	mov	r7,r3
    86d8:	8009883a 	mov	r4,r16
    86dc:	880b883a 	mov	r5,r17
    86e0:	100d883a 	mov	r6,r2
    86e4:	00121280 	call	12128 <__ledf2>
    86e8:	00800b16 	blt	zero,r2,8718 <_strtod_r+0xac8>
    86ec:	880b883a 	mov	r5,r17
    86f0:	8009883a 	mov	r4,r16
    86f4:	00111700 	call	11170 <__fixunsdfsi>
    86f8:	1000df1e 	bne	r2,zero,8a78 <_strtod_r+0xe28>
    86fc:	0021883a 	mov	r16,zero
    8700:	044ffc34 	movhi	r17,16368
    8704:	9000d91e 	bne	r18,zero,8a6c <_strtod_r+0xe1c>
    8708:	8005883a 	mov	r2,r16
    870c:	8807883a 	mov	r3,r17
    8710:	d8c00815 	stw	r3,32(sp)
    8714:	d8800715 	stw	r2,28(sp)
    8718:	d8800817 	ldw	r2,32(sp)
    871c:	00c1ac34 	movhi	r3,1712
    8720:	14c5c83a 	sub	r2,r2,r19
    8724:	10c5883a 	add	r2,r2,r3
    8728:	d8800815 	stw	r2,32(sp)
    872c:	e0800017 	ldw	r2,0(fp)
    8730:	e0c00117 	ldw	r3,4(fp)
    8734:	1009883a 	mov	r4,r2
    8738:	180b883a 	mov	r5,r3
    873c:	000f2900 	call	f290 <__ulp>
    8740:	d9800717 	ldw	r6,28(sp)
    8744:	d9c00817 	ldw	r7,32(sp)
    8748:	180b883a 	mov	r5,r3
    874c:	1009883a 	mov	r4,r2
    8750:	00068740 	call	6874 <__muldf3>
    8754:	e2000017 	ldw	r8,0(fp)
    8758:	e2400117 	ldw	r9,4(fp)
    875c:	180b883a 	mov	r5,r3
    8760:	1009883a 	mov	r4,r2
    8764:	480f883a 	mov	r7,r9
    8768:	400d883a 	mov	r6,r8
    876c:	00068000 	call	6800 <__adddf3>
    8770:	e0c00115 	stw	r3,4(fp)
    8774:	e0800015 	stw	r2,0(fp)
    8778:	d8c01417 	ldw	r3,80(sp)
    877c:	e4800117 	ldw	r18,4(fp)
    8780:	1800021e 	bne	r3,zero,878c <_strtod_r+0xb3c>
    8784:	909ffc2c 	andhi	r2,r18,32752
    8788:	98807b26 	beq	r19,r2,8978 <_strtod_r+0xd28>
    878c:	d9400517 	ldw	r5,20(sp)
    8790:	a809883a 	mov	r4,r21
    8794:	000f0d40 	call	f0d4 <_Bfree>
    8798:	a809883a 	mov	r4,r21
    879c:	b80b883a 	mov	r5,r23
    87a0:	000f0d40 	call	f0d4 <_Bfree>
    87a4:	a809883a 	mov	r4,r21
    87a8:	b00b883a 	mov	r5,r22
    87ac:	000f0d40 	call	f0d4 <_Bfree>
    87b0:	a809883a 	mov	r4,r21
    87b4:	a00b883a 	mov	r5,r20
    87b8:	000f0d40 	call	f0d4 <_Bfree>
    87bc:	003f3c06 	br	84b0 <_strtod_r+0x860>
    87c0:	b80b883a 	mov	r5,r23
    87c4:	a00d883a 	mov	r6,r20
    87c8:	a809883a 	mov	r4,r21
    87cc:	000fe880 	call	fe88 <__pow5mult>
    87d0:	102f883a 	mov	r23,r2
    87d4:	003f8606 	br	85f0 <_strtod_r+0x9a0>
    87d8:	00800d84 	movi	r2,54
    87dc:	114dc83a 	sub	r6,r2,r5
    87e0:	003f5f06 	br	8560 <_strtod_r+0x910>
    87e4:	0005883a 	mov	r2,zero
    87e8:	00cff834 	movhi	r3,16352
    87ec:	880b883a 	mov	r5,r17
    87f0:	8009883a 	mov	r4,r16
    87f4:	100d883a 	mov	r6,r2
    87f8:	180f883a 	mov	r7,r3
    87fc:	00068740 	call	6874 <__muldf3>
    8800:	d9801317 	ldw	r6,76(sp)
    8804:	1021883a 	mov	r16,r2
    8808:	1823883a 	mov	r17,r3
    880c:	3025003a 	cmpeq	r18,r6,zero
    8810:	90000126 	beq	r18,zero,8818 <_strtod_r+0xbc8>
    8814:	18e0003c 	xorhi	r3,r3,32768
    8818:	d8800715 	stw	r2,28(sp)
    881c:	d8c00815 	stw	r3,32(sp)
    8820:	e1c00117 	ldw	r7,4(fp)
    8824:	009ff834 	movhi	r2,32736
    8828:	3cdffc2c 	andhi	r19,r7,32752
    882c:	98bfa21e 	bne	r19,r2,86b8 <_strtod_r+0xa68>
    8830:	e1000017 	ldw	r4,0(fp)
    8834:	01bf2c34 	movhi	r6,64688
    8838:	398d883a 	add	r6,r7,r6
    883c:	d9000b15 	stw	r4,44(sp)
    8840:	d9c00c15 	stw	r7,48(sp)
    8844:	300b883a 	mov	r5,r6
    8848:	e1800115 	stw	r6,4(fp)
    884c:	000f2900 	call	f290 <__ulp>
    8850:	d9800717 	ldw	r6,28(sp)
    8854:	d9c00817 	ldw	r7,32(sp)
    8858:	180b883a 	mov	r5,r3
    885c:	1009883a 	mov	r4,r2
    8860:	00068740 	call	6874 <__muldf3>
    8864:	e2000017 	ldw	r8,0(fp)
    8868:	e2400117 	ldw	r9,4(fp)
    886c:	180b883a 	mov	r5,r3
    8870:	1009883a 	mov	r4,r2
    8874:	480f883a 	mov	r7,r9
    8878:	400d883a 	mov	r6,r8
    887c:	00068000 	call	6800 <__adddf3>
    8880:	1009883a 	mov	r4,r2
    8884:	180b883a 	mov	r5,r3
    8888:	009f2834 	movhi	r2,31904
    888c:	10bfffc4 	addi	r2,r2,-1
    8890:	18dffc2c 	andhi	r3,r3,32752
    8894:	e1000015 	stw	r4,0(fp)
    8898:	e1400115 	stw	r5,4(fp)
    889c:	10c06f2e 	bgeu	r2,r3,8a5c <_strtod_r+0xe0c>
    88a0:	d8800c17 	ldw	r2,48(sp)
    88a4:	011ffc34 	movhi	r4,32752
    88a8:	213fffc4 	addi	r4,r4,-1
    88ac:	11007a26 	beq	r2,r4,8a98 <_strtod_r+0xe48>
    88b0:	01ffffc4 	movi	r7,-1
    88b4:	e1000115 	stw	r4,4(fp)
    88b8:	e1c00015 	stw	r7,0(fp)
    88bc:	003fb306 	br	878c <_strtod_r+0xb3c>
    88c0:	e0c00017 	ldw	r3,0(fp)
    88c4:	1800221e 	bne	r3,zero,8950 <_strtod_r+0xd00>
    88c8:	e0800117 	ldw	r2,4(fp)
    88cc:	00c00434 	movhi	r3,16
    88d0:	18ffffc4 	addi	r3,r3,-1
    88d4:	10c4703a 	and	r2,r2,r3
    88d8:	1000211e 	bne	r2,zero,8960 <_strtod_r+0xd10>
    88dc:	0005883a 	mov	r2,zero
    88e0:	00cffc34 	movhi	r3,16368
    88e4:	180f883a 	mov	r7,r3
    88e8:	8009883a 	mov	r4,r16
    88ec:	880b883a 	mov	r5,r17
    88f0:	100d883a 	mov	r6,r2
    88f4:	00120a00 	call	120a0 <__ltdf2>
    88f8:	10013c16 	blt	r2,zero,8dec <_strtod_r+0x119c>
    88fc:	0005883a 	mov	r2,zero
    8900:	00cff834 	movhi	r3,16352
    8904:	880b883a 	mov	r5,r17
    8908:	8009883a 	mov	r4,r16
    890c:	180f883a 	mov	r7,r3
    8910:	100d883a 	mov	r6,r2
    8914:	00068740 	call	6874 <__muldf3>
    8918:	1823883a 	mov	r17,r3
    891c:	1021883a 	mov	r16,r2
    8920:	18e0003c 	xorhi	r3,r3,32768
    8924:	003fbc06 	br	8818 <_strtod_r+0xbc8>
    8928:	3827883a 	mov	r19,r7
    892c:	003f1a06 	br	8598 <_strtod_r+0x948>
    8930:	4091c83a 	sub	r8,r8,r2
    8934:	003f0206 	br	8540 <_strtod_r+0x8f0>
    8938:	d8c00f17 	ldw	r3,60(sp)
    893c:	0011883a 	mov	r8,zero
    8940:	0029883a 	mov	r20,zero
    8944:	00d3c83a 	sub	r9,zero,r3
    8948:	480f883a 	mov	r7,r9
    894c:	003ef906 	br	8534 <_strtod_r+0x8e4>
    8950:	00800044 	movi	r2,1
    8954:	1880021e 	bne	r3,r2,8960 <_strtod_r+0xd10>
    8958:	e0800117 	ldw	r2,4(fp)
    895c:	1000a526 	beq	r2,zero,8bf4 <_strtod_r+0xfa4>
    8960:	00affc34 	movhi	r2,49136
    8964:	0021883a 	mov	r16,zero
    8968:	044ffc34 	movhi	r17,16368
    896c:	d8800815 	stw	r2,32(sp)
    8970:	d8000715 	stw	zero,28(sp)
    8974:	003f4c06 	br	86a8 <_strtod_r+0xa58>
    8978:	880b883a 	mov	r5,r17
    897c:	8009883a 	mov	r4,r16
    8980:	00070100 	call	7010 <__fixdfsi>
    8984:	1009883a 	mov	r4,r2
    8988:	0006f180 	call	6f18 <__floatsidf>
    898c:	880b883a 	mov	r5,r17
    8990:	8009883a 	mov	r4,r16
    8994:	100d883a 	mov	r6,r2
    8998:	180f883a 	mov	r7,r3
    899c:	00067800 	call	6780 <__subdf3>
    89a0:	d9001317 	ldw	r4,76(sp)
    89a4:	100b883a 	mov	r5,r2
    89a8:	180d883a 	mov	r6,r3
    89ac:	1021883a 	mov	r16,r2
    89b0:	1823883a 	mov	r17,r3
    89b4:	2000061e 	bne	r4,zero,89d0 <_strtod_r+0xd80>
    89b8:	e0800017 	ldw	r2,0(fp)
    89bc:	1000041e 	bne	r2,zero,89d0 <_strtod_r+0xd80>
    89c0:	00c00434 	movhi	r3,16
    89c4:	18ffffc4 	addi	r3,r3,-1
    89c8:	90c4703a 	and	r2,r18,r3
    89cc:	10004026 	beq	r2,zero,8ad0 <_strtod_r+0xe80>
    89d0:	00a52834 	movhi	r2,38048
    89d4:	108d6544 	addi	r2,r2,13717
    89d8:	00cff834 	movhi	r3,16352
    89dc:	18ffffc4 	addi	r3,r3,-1
    89e0:	180f883a 	mov	r7,r3
    89e4:	8009883a 	mov	r4,r16
    89e8:	880b883a 	mov	r5,r17
    89ec:	100d883a 	mov	r6,r2
    89f0:	00120a00 	call	120a0 <__ltdf2>
    89f4:	10000916 	blt	r2,zero,8a1c <_strtod_r+0xdcc>
    89f8:	008d6c34 	movhi	r2,13744
    89fc:	10b94d44 	addi	r2,r2,-6859
    8a00:	00cff834 	movhi	r3,16352
    8a04:	880b883a 	mov	r5,r17
    8a08:	180f883a 	mov	r7,r3
    8a0c:	8009883a 	mov	r4,r16
    8a10:	100d883a 	mov	r6,r2
    8a14:	0006e900 	call	6e90 <__gtdf2>
    8a18:	00bf5c0e 	bge	zero,r2,878c <_strtod_r+0xb3c>
    8a1c:	d9400517 	ldw	r5,20(sp)
    8a20:	a809883a 	mov	r4,r21
    8a24:	000f0d40 	call	f0d4 <_Bfree>
    8a28:	a809883a 	mov	r4,r21
    8a2c:	b80b883a 	mov	r5,r23
    8a30:	000f0d40 	call	f0d4 <_Bfree>
    8a34:	a809883a 	mov	r4,r21
    8a38:	b00b883a 	mov	r5,r22
    8a3c:	000f0d40 	call	f0d4 <_Bfree>
    8a40:	d9401017 	ldw	r5,64(sp)
    8a44:	a809883a 	mov	r4,r21
    8a48:	000f0d40 	call	f0d4 <_Bfree>
    8a4c:	a809883a 	mov	r4,r21
    8a50:	a00b883a 	mov	r5,r20
    8a54:	000f0d40 	call	f0d4 <_Bfree>
    8a58:	003cf406 	br	7e2c <_strtod_r+0x1dc>
    8a5c:	0080d434 	movhi	r2,848
    8a60:	288d883a 	add	r6,r5,r2
    8a64:	e1800115 	stw	r6,4(fp)
    8a68:	003f4306 	br	8778 <_strtod_r+0xb28>
    8a6c:	8005883a 	mov	r2,r16
    8a70:	88e0003c 	xorhi	r3,r17,32768
    8a74:	003f2606 	br	8710 <_strtod_r+0xac0>
    8a78:	1009883a 	mov	r4,r2
    8a7c:	00122240 	call	12224 <__floatunsidf>
    8a80:	1021883a 	mov	r16,r2
    8a84:	1823883a 	mov	r17,r3
    8a88:	003f1e06 	br	8704 <_strtod_r+0xab4>
    8a8c:	da000417 	ldw	r8,16(sp)
    8a90:	39c00044 	addi	r7,r7,1
    8a94:	003e6706 	br	8434 <_strtod_r+0x7e4>
    8a98:	d8c00b17 	ldw	r3,44(sp)
    8a9c:	00bfffc4 	movi	r2,-1
    8aa0:	18bf831e 	bne	r3,r2,88b0 <_strtod_r+0xc60>
    8aa4:	00c00884 	movi	r3,34
    8aa8:	a8c00015 	stw	r3,0(r21)
    8aac:	009ffc34 	movhi	r2,32752
    8ab0:	e0800115 	stw	r2,4(fp)
    8ab4:	e0000015 	stw	zero,0(fp)
    8ab8:	003fd806 	br	8a1c <_strtod_r+0xdcc>
    8abc:	4007883a 	mov	r3,r8
    8ac0:	000d883a 	mov	r6,zero
    8ac4:	0029883a 	mov	r20,zero
    8ac8:	0021883a 	mov	r16,zero
    8acc:	003cc906 	br	7df4 <_strtod_r+0x1a4>
    8ad0:	00a52834 	movhi	r2,38048
    8ad4:	108d6544 	addi	r2,r2,13717
    8ad8:	00cff434 	movhi	r3,16336
    8adc:	18ffffc4 	addi	r3,r3,-1
    8ae0:	2809883a 	mov	r4,r5
    8ae4:	180f883a 	mov	r7,r3
    8ae8:	300b883a 	mov	r5,r6
    8aec:	100d883a 	mov	r6,r2
    8af0:	00120a00 	call	120a0 <__ltdf2>
    8af4:	103f250e 	bge	r2,zero,878c <_strtod_r+0xb3c>
    8af8:	003fc806 	br	8a1c <_strtod_r+0xdcc>
    8afc:	0027883a 	mov	r19,zero
    8b00:	04800044 	movi	r18,1
    8b04:	0015883a 	mov	r10,zero
    8b08:	003cc006 	br	7e0c <_strtod_r+0x1bc>
    8b0c:	00800884 	movi	r2,34
    8b10:	a8800015 	stw	r2,0(r21)
    8b14:	019ffc34 	movhi	r6,32752
    8b18:	e1800115 	stw	r6,4(fp)
    8b1c:	e0000015 	stw	zero,0(fp)
    8b20:	003cc206 	br	7e2c <_strtod_r+0x1dc>
    8b24:	015387c4 	movi	r5,19999
    8b28:	003d1e06 	br	7fa4 <_strtod_r+0x354>
    8b2c:	300a90fa 	slli	r5,r6,3
    8b30:	e0800017 	ldw	r2,0(fp)
    8b34:	e0c00117 	ldw	r3,4(fp)
    8b38:	01020034 	movhi	r4,2048
    8b3c:	21015f04 	addi	r4,r4,1404
    8b40:	290b883a 	add	r5,r5,r4
    8b44:	2a000017 	ldw	r8,0(r5)
    8b48:	2a400117 	ldw	r9,4(r5)
    8b4c:	1009883a 	mov	r4,r2
    8b50:	180b883a 	mov	r5,r3
    8b54:	480f883a 	mov	r7,r9
    8b58:	400d883a 	mov	r6,r8
    8b5c:	00068740 	call	6874 <__muldf3>
    8b60:	e0c00115 	stw	r3,4(fp)
    8b64:	e0800015 	stw	r2,0(fp)
    8b68:	003cb006 	br	7e2c <_strtod_r+0x1dc>
    8b6c:	d8800d17 	ldw	r2,52(sp)
    8b70:	e0800015 	stw	r2,0(fp)
    8b74:	d8c00e17 	ldw	r3,56(sp)
    8b78:	e0c00115 	stw	r3,4(fp)
    8b7c:	9880020c 	andi	r2,r19,8
    8b80:	103caa26 	beq	r2,zero,7e2c <_strtod_r+0x1dc>
    8b84:	e0800117 	ldw	r2,4(fp)
    8b88:	10a00034 	orhi	r2,r2,32768
    8b8c:	e0800115 	stw	r2,4(fp)
    8b90:	003ca606 	br	7e2c <_strtod_r+0x1dc>
    8b94:	009ffc34 	movhi	r2,32752
    8b98:	e0800115 	stw	r2,4(fp)
    8b9c:	e0000015 	stw	zero,0(fp)
    8ba0:	003ff606 	br	8b7c <_strtod_r+0xf2c>
    8ba4:	00a00034 	movhi	r2,32768
    8ba8:	10bfffc4 	addi	r2,r2,-1
    8bac:	00ffffc4 	movi	r3,-1
    8bb0:	e0800115 	stw	r2,4(fp)
    8bb4:	e0c00015 	stw	r3,0(fp)
    8bb8:	003ff006 	br	8b7c <_strtod_r+0xf2c>
    8bbc:	e0000115 	stw	zero,4(fp)
    8bc0:	e0000015 	stw	zero,0(fp)
    8bc4:	003fed06 	br	8b7c <_strtod_r+0xf2c>
    8bc8:	d8800e17 	ldw	r2,56(sp)
    8bcc:	29010cc4 	addi	r4,r5,1075
    8bd0:	00fffc34 	movhi	r3,65520
    8bd4:	18ffffc4 	addi	r3,r3,-1
    8bd8:	2008953a 	slli	r4,r4,20
    8bdc:	10c4703a 	and	r2,r2,r3
    8be0:	d8c00d17 	ldw	r3,52(sp)
    8be4:	1104b03a 	or	r2,r2,r4
    8be8:	e0800115 	stw	r2,4(fp)
    8bec:	e0c00015 	stw	r3,0(fp)
    8bf0:	003fe206 	br	8b7c <_strtod_r+0xf2c>
    8bf4:	00800884 	movi	r2,34
    8bf8:	a8800015 	stw	r2,0(r21)
    8bfc:	e0000015 	stw	zero,0(fp)
    8c00:	e0000115 	stw	zero,4(fp)
    8c04:	003f8506 	br	8a1c <_strtod_r+0xdcc>
    8c08:	03800044 	movi	r14,1
    8c0c:	003d7706 	br	81ec <_strtod_r+0x59c>
    8c10:	99c5883a 	add	r2,r19,r7
    8c14:	11ffffc4 	addi	r7,r2,-1
    8c18:	00800204 	movi	r2,8
    8c1c:	3cc00044 	addi	r19,r7,1
    8c20:	11c0df16 	blt	r2,r7,8fa0 <_strtod_r+0x1350>
    8c24:	a08002a4 	muli	r2,r20,10
    8c28:	000f883a 	mov	r7,zero
    8c2c:	1269883a 	add	r20,r2,r9
    8c30:	42000044 	addi	r8,r8,1
    8c34:	da000415 	stw	r8,16(sp)
    8c38:	41000007 	ldb	r4,0(r8)
    8c3c:	003d3706 	br	811c <_strtod_r+0x4cc>
    8c40:	d9801317 	ldw	r6,76(sp)
    8c44:	3000511e 	bne	r6,zero,8d8c <_strtod_r+0x113c>
    8c48:	e0800017 	ldw	r2,0(fp)
    8c4c:	1000d81e 	bne	r2,zero,8fb0 <_strtod_r+0x1360>
    8c50:	e0c00117 	ldw	r3,4(fp)
    8c54:	01000434 	movhi	r4,16
    8c58:	213fffc4 	addi	r4,r4,-1
    8c5c:	1904703a 	and	r2,r3,r4
    8c60:	1000b01e 	bne	r2,zero,8f24 <_strtod_r+0x12d4>
    8c64:	18dffc2c 	andhi	r3,r3,32752
    8c68:	0081ac34 	movhi	r2,1712
    8c6c:	10c1102e 	bgeu	r2,r3,90b0 <_strtod_r+0x1460>
    8c70:	a0800517 	ldw	r2,20(r20)
    8c74:	1000031e 	bne	r2,zero,8c84 <_strtod_r+0x1034>
    8c78:	a0c00417 	ldw	r3,16(r20)
    8c7c:	00800044 	movi	r2,1
    8c80:	10c0420e 	bge	r2,r3,8d8c <_strtod_r+0x113c>
    8c84:	a00b883a 	mov	r5,r20
    8c88:	a809883a 	mov	r4,r21
    8c8c:	01800044 	movi	r6,1
    8c90:	000fa180 	call	fa18 <__lshift>
    8c94:	1009883a 	mov	r4,r2
    8c98:	b00b883a 	mov	r5,r22
    8c9c:	1029883a 	mov	r20,r2
    8ca0:	000f2300 	call	f230 <__mcmp>
    8ca4:	0080c20e 	bge	zero,r2,8fb0 <_strtod_r+0x1360>
    8ca8:	e1800117 	ldw	r6,4(fp)
    8cac:	d9001417 	ldw	r4,80(sp)
    8cb0:	2013003a 	cmpeq	r9,r4,zero
    8cb4:	4800ef1e 	bne	r9,zero,9074 <_strtod_r+0x1424>
    8cb8:	30dffc2c 	andhi	r3,r6,32752
    8cbc:	0081ac34 	movhi	r2,1712
    8cc0:	10c0ec36 	bltu	r2,r3,9074 <_strtod_r+0x1424>
    8cc4:	0080dc34 	movhi	r2,880
    8cc8:	10ffca2e 	bgeu	r2,r3,8bf4 <_strtod_r+0xfa4>
    8ccc:	e0800017 	ldw	r2,0(fp)
    8cd0:	e0c00117 	ldw	r3,4(fp)
    8cd4:	020e5434 	movhi	r8,14672
    8cd8:	000d883a 	mov	r6,zero
    8cdc:	400f883a 	mov	r7,r8
    8ce0:	180b883a 	mov	r5,r3
    8ce4:	1009883a 	mov	r4,r2
    8ce8:	da000c15 	stw	r8,48(sp)
    8cec:	d8000b15 	stw	zero,44(sp)
    8cf0:	00068740 	call	6874 <__muldf3>
    8cf4:	e0800015 	stw	r2,0(fp)
    8cf8:	e0c00115 	stw	r3,4(fp)
    8cfc:	183f471e 	bne	r3,zero,8a1c <_strtod_r+0xdcc>
    8d00:	103f461e 	bne	r2,zero,8a1c <_strtod_r+0xdcc>
    8d04:	00800884 	movi	r2,34
    8d08:	a8800015 	stw	r2,0(r21)
    8d0c:	003f4306 	br	8a1c <_strtod_r+0xdcc>
    8d10:	d8801317 	ldw	r2,76(sp)
    8d14:	1025003a 	cmpeq	r18,r2,zero
    8d18:	9000861e 	bne	r18,zero,8f34 <_strtod_r+0x12e4>
    8d1c:	e1400117 	ldw	r5,4(fp)
    8d20:	00c00434 	movhi	r3,16
    8d24:	18ffffc4 	addi	r3,r3,-1
    8d28:	28c4703a 	and	r2,r5,r3
    8d2c:	10c01b26 	beq	r2,r3,8d9c <_strtod_r+0x114c>
    8d30:	e1c00017 	ldw	r7,0(fp)
    8d34:	3880004c 	andi	r2,r7,1
    8d38:	1005003a 	cmpeq	r2,r2,zero
    8d3c:	1000791e 	bne	r2,zero,8f24 <_strtod_r+0x12d4>
    8d40:	9000b126 	beq	r18,zero,9008 <_strtod_r+0x13b8>
    8d44:	e4400117 	ldw	r17,4(fp)
    8d48:	3809883a 	mov	r4,r7
    8d4c:	3821883a 	mov	r16,r7
    8d50:	880b883a 	mov	r5,r17
    8d54:	000f2900 	call	f290 <__ulp>
    8d58:	180f883a 	mov	r7,r3
    8d5c:	880b883a 	mov	r5,r17
    8d60:	8009883a 	mov	r4,r16
    8d64:	100d883a 	mov	r6,r2
    8d68:	00067800 	call	6780 <__subdf3>
    8d6c:	1009883a 	mov	r4,r2
    8d70:	000d883a 	mov	r6,zero
    8d74:	000f883a 	mov	r7,zero
    8d78:	180b883a 	mov	r5,r3
    8d7c:	e0800015 	stw	r2,0(fp)
    8d80:	e0c00115 	stw	r3,4(fp)
    8d84:	0011f900 	call	11f90 <__nedf2>
    8d88:	103f9a26 	beq	r2,zero,8bf4 <_strtod_r+0xfa4>
    8d8c:	d9001417 	ldw	r4,80(sp)
    8d90:	2013003a 	cmpeq	r9,r4,zero
    8d94:	483f211e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    8d98:	003fcc06 	br	8ccc <_strtod_r+0x107c>
    8d9c:	d9001417 	ldw	r4,80(sp)
    8da0:	e1c00017 	ldw	r7,0(fp)
    8da4:	2013003a 	cmpeq	r9,r4,zero
    8da8:	4800bd1e 	bne	r9,zero,90a0 <_strtod_r+0x1450>
    8dac:	28dffc2c 	andhi	r3,r5,32752
    8db0:	0081a834 	movhi	r2,1696
    8db4:	10c0ba36 	bltu	r2,r3,90a0 <_strtod_r+0x1450>
    8db8:	1804d53a 	srli	r2,r3,20
    8dbc:	00c01ac4 	movi	r3,107
    8dc0:	013fffc4 	movi	r4,-1
    8dc4:	1887c83a 	sub	r3,r3,r2
    8dc8:	20c4983a 	sll	r2,r4,r3
    8dcc:	11ffd91e 	bne	r2,r7,8d34 <_strtod_r+0x10e4>
    8dd0:	28dffc2c 	andhi	r3,r5,32752
    8dd4:	00800434 	movhi	r2,16
    8dd8:	188d883a 	add	r6,r3,r2
    8ddc:	e1800115 	stw	r6,4(fp)
    8de0:	e0000015 	stw	zero,0(fp)
    8de4:	483f0d1e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    8de8:	003fb806 	br	8ccc <_strtod_r+0x107c>
    8dec:	0021883a 	mov	r16,zero
    8df0:	0005883a 	mov	r2,zero
    8df4:	044ff834 	movhi	r17,16352
    8df8:	00eff834 	movhi	r3,49120
    8dfc:	003e8606 	br	8818 <_strtod_r+0xbc8>
    8e00:	803d9e26 	beq	r16,zero,847c <_strtod_r+0x82c>
    8e04:	0421c83a 	sub	r16,zero,r16
    8e08:	814003cc 	andi	r5,r16,15
    8e0c:	28000f26 	beq	r5,zero,8e4c <_strtod_r+0x11fc>
    8e10:	280a90fa 	slli	r5,r5,3
    8e14:	01020034 	movhi	r4,2048
    8e18:	21015f04 	addi	r4,r4,1404
    8e1c:	e0800017 	ldw	r2,0(fp)
    8e20:	290b883a 	add	r5,r5,r4
    8e24:	2a000017 	ldw	r8,0(r5)
    8e28:	e0c00117 	ldw	r3,4(fp)
    8e2c:	2a400117 	ldw	r9,4(r5)
    8e30:	1009883a 	mov	r4,r2
    8e34:	180b883a 	mov	r5,r3
    8e38:	480f883a 	mov	r7,r9
    8e3c:	400d883a 	mov	r6,r8
    8e40:	0006c380 	call	6c38 <__divdf3>
    8e44:	e0c00115 	stw	r3,4(fp)
    8e48:	e0800015 	stw	r2,0(fp)
    8e4c:	8021d13a 	srai	r16,r16,4
    8e50:	803d8a26 	beq	r16,zero,847c <_strtod_r+0x82c>
    8e54:	008007c4 	movi	r2,31
    8e58:	14002d16 	blt	r2,r16,8f10 <_strtod_r+0x12c0>
    8e5c:	8080040c 	andi	r2,r16,16
    8e60:	10009926 	beq	r2,zero,90c8 <_strtod_r+0x1478>
    8e64:	00801a84 	movi	r2,106
    8e68:	d8801415 	stw	r2,80(sp)
    8e6c:	0400110e 	bge	zero,r16,8eb4 <_strtod_r+0x1264>
    8e70:	04420034 	movhi	r17,2048
    8e74:	8c411904 	addi	r17,r17,1124
    8e78:	8080004c 	andi	r2,r16,1
    8e7c:	1005003a 	cmpeq	r2,r2,zero
    8e80:	1000091e 	bne	r2,zero,8ea8 <_strtod_r+0x1258>
    8e84:	e0800017 	ldw	r2,0(fp)
    8e88:	e0c00117 	ldw	r3,4(fp)
    8e8c:	89800017 	ldw	r6,0(r17)
    8e90:	89c00117 	ldw	r7,4(r17)
    8e94:	180b883a 	mov	r5,r3
    8e98:	1009883a 	mov	r4,r2
    8e9c:	00068740 	call	6874 <__muldf3>
    8ea0:	e0c00115 	stw	r3,4(fp)
    8ea4:	e0800015 	stw	r2,0(fp)
    8ea8:	8021d07a 	srai	r16,r16,1
    8eac:	8c400204 	addi	r17,r17,8
    8eb0:	043ff116 	blt	zero,r16,8e78 <_strtod_r+0x1228>
    8eb4:	d8c01417 	ldw	r3,80(sp)
    8eb8:	18000d26 	beq	r3,zero,8ef0 <_strtod_r+0x12a0>
    8ebc:	e1000117 	ldw	r4,4(fp)
    8ec0:	00c01ac4 	movi	r3,107
    8ec4:	209ffc2c 	andhi	r2,r4,32752
    8ec8:	1004d53a 	srli	r2,r2,20
    8ecc:	1887c83a 	sub	r3,r3,r2
    8ed0:	00c0070e 	bge	zero,r3,8ef0 <_strtod_r+0x12a0>
    8ed4:	008007c4 	movi	r2,31
    8ed8:	10c0900e 	bge	r2,r3,911c <_strtod_r+0x14cc>
    8edc:	00800d04 	movi	r2,52
    8ee0:	e0000015 	stw	zero,0(fp)
    8ee4:	10c0870e 	bge	r2,r3,9104 <_strtod_r+0x14b4>
    8ee8:	0180dc34 	movhi	r6,880
    8eec:	e1800115 	stw	r6,4(fp)
    8ef0:	e0800017 	ldw	r2,0(fp)
    8ef4:	e0c00117 	ldw	r3,4(fp)
    8ef8:	000d883a 	mov	r6,zero
    8efc:	000f883a 	mov	r7,zero
    8f00:	180b883a 	mov	r5,r3
    8f04:	1009883a 	mov	r4,r2
    8f08:	0011f900 	call	11f90 <__nedf2>
    8f0c:	103d5c1e 	bne	r2,zero,8480 <_strtod_r+0x830>
    8f10:	00800884 	movi	r2,34
    8f14:	a8800015 	stw	r2,0(r21)
    8f18:	e0000015 	stw	zero,0(fp)
    8f1c:	e0000115 	stw	zero,4(fp)
    8f20:	003bc206 	br	7e2c <_strtod_r+0x1dc>
    8f24:	d8801417 	ldw	r2,80(sp)
    8f28:	1013003a 	cmpeq	r9,r2,zero
    8f2c:	483ebb1e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    8f30:	003f6606 	br	8ccc <_strtod_r+0x107c>
    8f34:	e1800117 	ldw	r6,4(fp)
    8f38:	00c00434 	movhi	r3,16
    8f3c:	18ffffc4 	addi	r3,r3,-1
    8f40:	30c4703a 	and	r2,r6,r3
    8f44:	103f7a1e 	bne	r2,zero,8d30 <_strtod_r+0x10e0>
    8f48:	e1c00017 	ldw	r7,0(fp)
    8f4c:	383f791e 	bne	r7,zero,8d34 <_strtod_r+0x10e4>
    8f50:	003f5606 	br	8cac <_strtod_r+0x105c>
    8f54:	d9800f17 	ldw	r6,60(sp)
    8f58:	00bffa84 	movi	r2,-22
    8f5c:	30bcd416 	blt	r6,r2,82b0 <_strtod_r+0x660>
    8f60:	317ffe24 	muli	r5,r6,-8
    8f64:	01020034 	movhi	r4,2048
    8f68:	21015f04 	addi	r4,r4,1404
    8f6c:	e0800017 	ldw	r2,0(fp)
    8f70:	290b883a 	add	r5,r5,r4
    8f74:	2a000017 	ldw	r8,0(r5)
    8f78:	e0c00117 	ldw	r3,4(fp)
    8f7c:	2a400117 	ldw	r9,4(r5)
    8f80:	1009883a 	mov	r4,r2
    8f84:	180b883a 	mov	r5,r3
    8f88:	480f883a 	mov	r7,r9
    8f8c:	400d883a 	mov	r6,r8
    8f90:	0006c380 	call	6c38 <__divdf3>
    8f94:	e0c00115 	stw	r3,4(fp)
    8f98:	e0800015 	stw	r2,0(fp)
    8f9c:	003ba306 	br	7e2c <_strtod_r+0x1dc>
    8fa0:	00800404 	movi	r2,16
    8fa4:	14c02f0e 	bge	r2,r19,9064 <_strtod_r+0x1414>
    8fa8:	000f883a 	mov	r7,zero
    8fac:	003f2006 	br	8c30 <_strtod_r+0xfe0>
    8fb0:	d9801417 	ldw	r6,80(sp)
    8fb4:	3013003a 	cmpeq	r9,r6,zero
    8fb8:	483e981e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    8fbc:	003f4306 	br	8ccc <_strtod_r+0x107c>
    8fc0:	00801a44 	movi	r2,105
    8fc4:	20bc6326 	beq	r4,r2,8154 <_strtod_r+0x504>
    8fc8:	00801b84 	movi	r2,110
    8fcc:	20bbba1e 	bne	r4,r2,7eb8 <_strtod_r+0x268>
    8fd0:	dc000404 	addi	r16,sp,16
    8fd4:	8009883a 	mov	r4,r16
    8fd8:	01420034 	movhi	r5,2048
    8fdc:	29411804 	addi	r5,r5,1120
    8fe0:	0007c080 	call	7c08 <match>
    8fe4:	103bb426 	beq	r2,zero,7eb8 <_strtod_r+0x268>
    8fe8:	d8800417 	ldw	r2,16(sp)
    8fec:	00c00a04 	movi	r3,40
    8ff0:	11000007 	ldb	r4,0(r2)
    8ff4:	20c03626 	beq	r4,r3,90d0 <_strtod_r+0x1480>
    8ff8:	01bffe34 	movhi	r6,65528
    8ffc:	e1800115 	stw	r6,4(fp)
    9000:	e0000015 	stw	zero,0(fp)
    9004:	003b8906 	br	7e2c <_strtod_r+0x1dc>
    9008:	e4400117 	ldw	r17,4(fp)
    900c:	3809883a 	mov	r4,r7
    9010:	3821883a 	mov	r16,r7
    9014:	880b883a 	mov	r5,r17
    9018:	000f2900 	call	f290 <__ulp>
    901c:	100d883a 	mov	r6,r2
    9020:	880b883a 	mov	r5,r17
    9024:	180f883a 	mov	r7,r3
    9028:	8009883a 	mov	r4,r16
    902c:	00068000 	call	6800 <__adddf3>
    9030:	d9801417 	ldw	r6,80(sp)
    9034:	e0c00115 	stw	r3,4(fp)
    9038:	e0800015 	stw	r2,0(fp)
    903c:	3013003a 	cmpeq	r9,r6,zero
    9040:	483e761e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    9044:	003f2106 	br	8ccc <_strtod_r+0x107c>
    9048:	000f883a 	mov	r7,zero
    904c:	003cf006 	br	8410 <_strtod_r+0x7c0>
    9050:	0080d434 	movhi	r2,848
    9054:	188d883a 	add	r6,r3,r2
    9058:	d8001415 	stw	zero,80(sp)
    905c:	e1800115 	stw	r6,4(fp)
    9060:	003d0706 	br	8480 <_strtod_r+0x830>
    9064:	808002a4 	muli	r2,r16,10
    9068:	000f883a 	mov	r7,zero
    906c:	1261883a 	add	r16,r2,r9
    9070:	003eef06 	br	8c30 <_strtod_r+0xfe0>
    9074:	309ffc2c 	andhi	r2,r6,32752
    9078:	00fffc34 	movhi	r3,65520
    907c:	10c5883a 	add	r2,r2,r3
    9080:	00c00434 	movhi	r3,16
    9084:	18ffffc4 	addi	r3,r3,-1
    9088:	10ccb03a 	or	r6,r2,r3
    908c:	01ffffc4 	movi	r7,-1
    9090:	e1800115 	stw	r6,4(fp)
    9094:	e1c00015 	stw	r7,0(fp)
    9098:	483e601e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    909c:	003f0b06 	br	8ccc <_strtod_r+0x107c>
    90a0:	00bfffc4 	movi	r2,-1
    90a4:	003f4906 	br	8dcc <_strtod_r+0x117c>
    90a8:	0025883a 	mov	r18,zero
    90ac:	003cb106 	br	8374 <_strtod_r+0x724>
    90b0:	d8c01417 	ldw	r3,80(sp)
    90b4:	1813003a 	cmpeq	r9,r3,zero
    90b8:	483e581e 	bne	r9,zero,8a1c <_strtod_r+0xdcc>
    90bc:	003f0306 	br	8ccc <_strtod_r+0x107c>
    90c0:	980f883a 	mov	r7,r19
    90c4:	003ed406 	br	8c18 <_strtod_r+0xfc8>
    90c8:	d8001415 	stw	zero,80(sp)
    90cc:	003f6706 	br	8e6c <_strtod_r+0x121c>
    90d0:	8009883a 	mov	r4,r16
    90d4:	01420034 	movhi	r5,2048
    90d8:	29428904 	addi	r5,r5,2596
    90dc:	d9800d04 	addi	r6,sp,52
    90e0:	000e3300 	call	e330 <__hexnan>
    90e4:	00c00144 	movi	r3,5
    90e8:	10ffc31e 	bne	r2,r3,8ff8 <_strtod_r+0x13a8>
    90ec:	d8800e17 	ldw	r2,56(sp)
    90f0:	d9c00d17 	ldw	r7,52(sp)
    90f4:	119ffc34 	orhi	r6,r2,32752
    90f8:	e1800115 	stw	r6,4(fp)
    90fc:	e1c00015 	stw	r7,0(fp)
    9100:	003b4a06 	br	7e2c <_strtod_r+0x1dc>
    9104:	18fff804 	addi	r3,r3,-32
    9108:	00bfffc4 	movi	r2,-1
    910c:	10c4983a 	sll	r2,r2,r3
    9110:	208c703a 	and	r6,r4,r2
    9114:	e1800115 	stw	r6,4(fp)
    9118:	003f7506 	br	8ef0 <_strtod_r+0x12a0>
    911c:	00bfffc4 	movi	r2,-1
    9120:	10c4983a 	sll	r2,r2,r3
    9124:	e0c00017 	ldw	r3,0(fp)
    9128:	188e703a 	and	r7,r3,r2
    912c:	e1c00015 	stw	r7,0(fp)
    9130:	003f6f06 	br	8ef0 <_strtod_r+0x12a0>

00009134 <strtof>:
    9134:	defffa04 	addi	sp,sp,-24
    9138:	dd000415 	stw	r20,16(sp)
    913c:	05020034 	movhi	r20,2048
    9140:	a50a0804 	addi	r20,r20,10272
    9144:	2007883a 	mov	r3,r4
    9148:	a1000017 	ldw	r4,0(r20)
    914c:	280d883a 	mov	r6,r5
    9150:	180b883a 	mov	r5,r3
    9154:	dfc00515 	stw	ra,20(sp)
    9158:	dcc00315 	stw	r19,12(sp)
    915c:	dc800215 	stw	r18,8(sp)
    9160:	dc400115 	stw	r17,4(sp)
    9164:	dc000015 	stw	r16,0(sp)
    9168:	0007c500 	call	7c50 <_strtod_r>
    916c:	180b883a 	mov	r5,r3
    9170:	1009883a 	mov	r4,r2
    9174:	1823883a 	mov	r17,r3
    9178:	1021883a 	mov	r16,r2
    917c:	00121b00 	call	121b0 <__truncdfsf2>
    9180:	1009883a 	mov	r4,r2
    9184:	000b883a 	mov	r5,zero
    9188:	1025883a 	mov	r18,r2
    918c:	1027883a 	mov	r19,r2
    9190:	0011da00 	call	11da0 <__nesf2>
    9194:	000d883a 	mov	r6,zero
    9198:	000f883a 	mov	r7,zero
    919c:	8009883a 	mov	r4,r16
    91a0:	880b883a 	mov	r5,r17
    91a4:	10000e1e 	bne	r2,zero,91e0 <strtof+0xac>
    91a8:	0011f900 	call	11f90 <__nedf2>
    91ac:	10000c26 	beq	r2,zero,91e0 <strtof+0xac>
    91b0:	a0c00017 	ldw	r3,0(r20)
    91b4:	00800884 	movi	r2,34
    91b8:	18800015 	stw	r2,0(r3)
    91bc:	9805883a 	mov	r2,r19
    91c0:	dfc00517 	ldw	ra,20(sp)
    91c4:	dd000417 	ldw	r20,16(sp)
    91c8:	dcc00317 	ldw	r19,12(sp)
    91cc:	dc800217 	ldw	r18,8(sp)
    91d0:	dc400117 	ldw	r17,4(sp)
    91d4:	dc000017 	ldw	r16,0(sp)
    91d8:	dec00604 	addi	sp,sp,24
    91dc:	f800283a 	ret
    91e0:	9009883a 	mov	r4,r18
    91e4:	015fe034 	movhi	r5,32640
    91e8:	297fffc4 	addi	r5,r5,-1
    91ec:	0011e180 	call	11e18 <__gtsf2>
    91f0:	00ffffc4 	movi	r3,-1
    91f4:	011ffc34 	movhi	r4,32752
    91f8:	213fffc4 	addi	r4,r4,-1
    91fc:	200f883a 	mov	r7,r4
    9200:	180d883a 	mov	r6,r3
    9204:	8009883a 	mov	r4,r16
    9208:	880b883a 	mov	r5,r17
    920c:	00800f16 	blt	zero,r2,924c <strtof+0x118>
    9210:	9009883a 	mov	r4,r18
    9214:	017fe034 	movhi	r5,65408
    9218:	297fffc4 	addi	r5,r5,-1
    921c:	0011e900 	call	11e90 <__ltsf2>
    9220:	023fffc4 	movi	r8,-1
    9224:	027ffc34 	movhi	r9,65520
    9228:	4a7fffc4 	addi	r9,r9,-1
    922c:	880b883a 	mov	r5,r17
    9230:	480f883a 	mov	r7,r9
    9234:	8009883a 	mov	r4,r16
    9238:	400d883a 	mov	r6,r8
    923c:	103fdf0e 	bge	r2,zero,91bc <strtof+0x88>
    9240:	00120a00 	call	120a0 <__ltdf2>
    9244:	103fda0e 	bge	r2,zero,91b0 <strtof+0x7c>
    9248:	003fdc06 	br	91bc <strtof+0x88>
    924c:	0006e900 	call	6e90 <__gtdf2>
    9250:	00bfd70e 	bge	zero,r2,91b0 <strtof+0x7c>
    9254:	003fee06 	br	9210 <strtof+0xdc>

00009258 <strtod>:
    9258:	01820034 	movhi	r6,2048
    925c:	318a0804 	addi	r6,r6,10272
    9260:	2007883a 	mov	r3,r4
    9264:	31000017 	ldw	r4,0(r6)
    9268:	280d883a 	mov	r6,r5
    926c:	180b883a 	mov	r5,r3
    9270:	0007c501 	jmpi	7c50 <_strtod_r>

00009274 <__sprint_r>:
    9274:	30800217 	ldw	r2,8(r6)
    9278:	defffe04 	addi	sp,sp,-8
    927c:	dc000015 	stw	r16,0(sp)
    9280:	dfc00115 	stw	ra,4(sp)
    9284:	3021883a 	mov	r16,r6
    9288:	0007883a 	mov	r3,zero
    928c:	1000061e 	bne	r2,zero,92a8 <__sprint_r+0x34>
    9290:	1805883a 	mov	r2,r3
    9294:	30000115 	stw	zero,4(r6)
    9298:	dfc00117 	ldw	ra,4(sp)
    929c:	dc000017 	ldw	r16,0(sp)
    92a0:	dec00204 	addi	sp,sp,8
    92a4:	f800283a 	ret
    92a8:	000d3d40 	call	d3d4 <__sfvwrite_r>
    92ac:	1007883a 	mov	r3,r2
    92b0:	1805883a 	mov	r2,r3
    92b4:	80000115 	stw	zero,4(r16)
    92b8:	80000215 	stw	zero,8(r16)
    92bc:	dfc00117 	ldw	ra,4(sp)
    92c0:	dc000017 	ldw	r16,0(sp)
    92c4:	dec00204 	addi	sp,sp,8
    92c8:	f800283a 	ret

000092cc <___vfprintf_internal_r>:
    92cc:	defea404 	addi	sp,sp,-1392
    92d0:	dd815815 	stw	r22,1376(sp)
    92d4:	dc015215 	stw	r16,1352(sp)
    92d8:	d9c15115 	stw	r7,1348(sp)
    92dc:	dfc15b15 	stw	ra,1388(sp)
    92e0:	df015a15 	stw	fp,1384(sp)
    92e4:	ddc15915 	stw	r23,1380(sp)
    92e8:	dd415715 	stw	r21,1372(sp)
    92ec:	dd015615 	stw	r20,1368(sp)
    92f0:	dcc15515 	stw	r19,1364(sp)
    92f4:	dc815415 	stw	r18,1360(sp)
    92f8:	dc415315 	stw	r17,1356(sp)
    92fc:	282d883a 	mov	r22,r5
    9300:	3021883a 	mov	r16,r6
    9304:	d9014f15 	stw	r4,1340(sp)
    9308:	000e5800 	call	e580 <_localeconv_r>
    930c:	10800017 	ldw	r2,0(r2)
    9310:	d9c15117 	ldw	r7,1348(sp)
    9314:	d8814915 	stw	r2,1316(sp)
    9318:	d8814f17 	ldw	r2,1340(sp)
    931c:	10000226 	beq	r2,zero,9328 <___vfprintf_internal_r+0x5c>
    9320:	10800e17 	ldw	r2,56(r2)
    9324:	10020d26 	beq	r2,zero,9b5c <___vfprintf_internal_r+0x890>
    9328:	b080030b 	ldhu	r2,12(r22)
    932c:	1080020c 	andi	r2,r2,8
    9330:	10020e26 	beq	r2,zero,9b6c <___vfprintf_internal_r+0x8a0>
    9334:	b0800417 	ldw	r2,16(r22)
    9338:	10020c26 	beq	r2,zero,9b6c <___vfprintf_internal_r+0x8a0>
    933c:	b200030b 	ldhu	r8,12(r22)
    9340:	00800284 	movi	r2,10
    9344:	40c0068c 	andi	r3,r8,26
    9348:	18802f1e 	bne	r3,r2,9408 <___vfprintf_internal_r+0x13c>
    934c:	b080038f 	ldh	r2,14(r22)
    9350:	10002d16 	blt	r2,zero,9408 <___vfprintf_internal_r+0x13c>
    9354:	b240038b 	ldhu	r9,14(r22)
    9358:	b2800717 	ldw	r10,28(r22)
    935c:	b2c00917 	ldw	r11,36(r22)
    9360:	d9014f17 	ldw	r4,1340(sp)
    9364:	dc402904 	addi	r17,sp,164
    9368:	d8804004 	addi	r2,sp,256
    936c:	00c10004 	movi	r3,1024
    9370:	423fff4c 	andi	r8,r8,65533
    9374:	800d883a 	mov	r6,r16
    9378:	880b883a 	mov	r5,r17
    937c:	da002c0d 	sth	r8,176(sp)
    9380:	da402c8d 	sth	r9,178(sp)
    9384:	da803015 	stw	r10,192(sp)
    9388:	dac03215 	stw	r11,200(sp)
    938c:	d8802d15 	stw	r2,180(sp)
    9390:	d8c02e15 	stw	r3,184(sp)
    9394:	d8802915 	stw	r2,164(sp)
    9398:	d8c02b15 	stw	r3,172(sp)
    939c:	d8002f15 	stw	zero,188(sp)
    93a0:	00092cc0 	call	92cc <___vfprintf_internal_r>
    93a4:	d8814b15 	stw	r2,1324(sp)
    93a8:	10000416 	blt	r2,zero,93bc <___vfprintf_internal_r+0xf0>
    93ac:	d9014f17 	ldw	r4,1340(sp)
    93b0:	880b883a 	mov	r5,r17
    93b4:	000caa40 	call	caa4 <_fflush_r>
    93b8:	1002321e 	bne	r2,zero,9c84 <___vfprintf_internal_r+0x9b8>
    93bc:	d8802c0b 	ldhu	r2,176(sp)
    93c0:	1080100c 	andi	r2,r2,64
    93c4:	10000326 	beq	r2,zero,93d4 <___vfprintf_internal_r+0x108>
    93c8:	b080030b 	ldhu	r2,12(r22)
    93cc:	10801014 	ori	r2,r2,64
    93d0:	b080030d 	sth	r2,12(r22)
    93d4:	d8814b17 	ldw	r2,1324(sp)
    93d8:	dfc15b17 	ldw	ra,1388(sp)
    93dc:	df015a17 	ldw	fp,1384(sp)
    93e0:	ddc15917 	ldw	r23,1380(sp)
    93e4:	dd815817 	ldw	r22,1376(sp)
    93e8:	dd415717 	ldw	r21,1372(sp)
    93ec:	dd015617 	ldw	r20,1368(sp)
    93f0:	dcc15517 	ldw	r19,1364(sp)
    93f4:	dc815417 	ldw	r18,1360(sp)
    93f8:	dc415317 	ldw	r17,1356(sp)
    93fc:	dc015217 	ldw	r16,1352(sp)
    9400:	dec15c04 	addi	sp,sp,1392
    9404:	f800283a 	ret
    9408:	0005883a 	mov	r2,zero
    940c:	0007883a 	mov	r3,zero
    9410:	dd401904 	addi	r21,sp,100
    9414:	d8814215 	stw	r2,1288(sp)
    9418:	802f883a 	mov	r23,r16
    941c:	d8c14315 	stw	r3,1292(sp)
    9420:	d8014b15 	stw	zero,1324(sp)
    9424:	d8014815 	stw	zero,1312(sp)
    9428:	d8014415 	stw	zero,1296(sp)
    942c:	d8014715 	stw	zero,1308(sp)
    9430:	dd400c15 	stw	r21,48(sp)
    9434:	d8000e15 	stw	zero,56(sp)
    9438:	d8000d15 	stw	zero,52(sp)
    943c:	b8800007 	ldb	r2,0(r23)
    9440:	10001926 	beq	r2,zero,94a8 <___vfprintf_internal_r+0x1dc>
    9444:	00c00944 	movi	r3,37
    9448:	10c01726 	beq	r2,r3,94a8 <___vfprintf_internal_r+0x1dc>
    944c:	b821883a 	mov	r16,r23
    9450:	00000106 	br	9458 <___vfprintf_internal_r+0x18c>
    9454:	10c00326 	beq	r2,r3,9464 <___vfprintf_internal_r+0x198>
    9458:	84000044 	addi	r16,r16,1
    945c:	80800007 	ldb	r2,0(r16)
    9460:	103ffc1e 	bne	r2,zero,9454 <___vfprintf_internal_r+0x188>
    9464:	85e7c83a 	sub	r19,r16,r23
    9468:	98000e26 	beq	r19,zero,94a4 <___vfprintf_internal_r+0x1d8>
    946c:	dc800e17 	ldw	r18,56(sp)
    9470:	dc400d17 	ldw	r17,52(sp)
    9474:	008001c4 	movi	r2,7
    9478:	94e5883a 	add	r18,r18,r19
    947c:	8c400044 	addi	r17,r17,1
    9480:	adc00015 	stw	r23,0(r21)
    9484:	dc800e15 	stw	r18,56(sp)
    9488:	acc00115 	stw	r19,4(r21)
    948c:	dc400d15 	stw	r17,52(sp)
    9490:	14428b16 	blt	r2,r17,9ec0 <___vfprintf_internal_r+0xbf4>
    9494:	ad400204 	addi	r21,r21,8
    9498:	d9014b17 	ldw	r4,1324(sp)
    949c:	24c9883a 	add	r4,r4,r19
    94a0:	d9014b15 	stw	r4,1324(sp)
    94a4:	802f883a 	mov	r23,r16
    94a8:	b8800007 	ldb	r2,0(r23)
    94ac:	10013c26 	beq	r2,zero,99a0 <___vfprintf_internal_r+0x6d4>
    94b0:	bdc00044 	addi	r23,r23,1
    94b4:	d8000405 	stb	zero,16(sp)
    94b8:	b8c00007 	ldb	r3,0(r23)
    94bc:	04ffffc4 	movi	r19,-1
    94c0:	d8014c15 	stw	zero,1328(sp)
    94c4:	d8014a15 	stw	zero,1320(sp)
    94c8:	d8c14d15 	stw	r3,1332(sp)
    94cc:	bdc00044 	addi	r23,r23,1
    94d0:	d9414d17 	ldw	r5,1332(sp)
    94d4:	00801604 	movi	r2,88
    94d8:	28fff804 	addi	r3,r5,-32
    94dc:	10c06036 	bltu	r2,r3,9660 <___vfprintf_internal_r+0x394>
    94e0:	18c5883a 	add	r2,r3,r3
    94e4:	1085883a 	add	r2,r2,r2
    94e8:	00c00074 	movhi	r3,1
    94ec:	18e53f04 	addi	r3,r3,-27396
    94f0:	10c5883a 	add	r2,r2,r3
    94f4:	11000017 	ldw	r4,0(r2)
    94f8:	2000683a 	jmp	r4
    94fc:	0000a470 	cmpltui	zero,zero,657
    9500:	00009660 	cmpeqi	zero,zero,601
    9504:	00009660 	cmpeqi	zero,zero,601
    9508:	0000a45c 	xori	zero,zero,657
    950c:	00009660 	cmpeqi	zero,zero,601
    9510:	00009660 	cmpeqi	zero,zero,601
    9514:	00009660 	cmpeqi	zero,zero,601
    9518:	00009660 	cmpeqi	zero,zero,601
    951c:	00009660 	cmpeqi	zero,zero,601
    9520:	00009660 	cmpeqi	zero,zero,601
    9524:	0000a23c 	xorhi	zero,zero,648
    9528:	0000a44c 	andi	zero,zero,657
    952c:	00009660 	cmpeqi	zero,zero,601
    9530:	0000a254 	movui	zero,649
    9534:	0000a4e8 	cmpgeui	zero,zero,659
    9538:	00009660 	cmpeqi	zero,zero,601
    953c:	0000a4d4 	movui	zero,659
    9540:	0000a49c 	xori	zero,zero,658
    9544:	0000a49c 	xori	zero,zero,658
    9548:	0000a49c 	xori	zero,zero,658
    954c:	0000a49c 	xori	zero,zero,658
    9550:	0000a49c 	xori	zero,zero,658
    9554:	0000a49c 	xori	zero,zero,658
    9558:	0000a49c 	xori	zero,zero,658
    955c:	0000a49c 	xori	zero,zero,658
    9560:	0000a49c 	xori	zero,zero,658
    9564:	00009660 	cmpeqi	zero,zero,601
    9568:	00009660 	cmpeqi	zero,zero,601
    956c:	00009660 	cmpeqi	zero,zero,601
    9570:	00009660 	cmpeqi	zero,zero,601
    9574:	00009660 	cmpeqi	zero,zero,601
    9578:	00009660 	cmpeqi	zero,zero,601
    957c:	00009660 	cmpeqi	zero,zero,601
    9580:	00009660 	cmpeqi	zero,zero,601
    9584:	00009660 	cmpeqi	zero,zero,601
    9588:	00009660 	cmpeqi	zero,zero,601
    958c:	00009cb8 	rdprs	zero,zero,626
    9590:	0000a324 	muli	zero,zero,652
    9594:	00009660 	cmpeqi	zero,zero,601
    9598:	0000a324 	muli	zero,zero,652
    959c:	00009660 	cmpeqi	zero,zero,601
    95a0:	00009660 	cmpeqi	zero,zero,601
    95a4:	00009660 	cmpeqi	zero,zero,601
    95a8:	00009660 	cmpeqi	zero,zero,601
    95ac:	0000a488 	cmpgei	zero,zero,658
    95b0:	00009660 	cmpeqi	zero,zero,601
    95b4:	00009660 	cmpeqi	zero,zero,601
    95b8:	00009d6c 	andhi	zero,zero,629
    95bc:	00009660 	cmpeqi	zero,zero,601
    95c0:	00009660 	cmpeqi	zero,zero,601
    95c4:	00009660 	cmpeqi	zero,zero,601
    95c8:	00009660 	cmpeqi	zero,zero,601
    95cc:	00009660 	cmpeqi	zero,zero,601
    95d0:	00009db8 	rdprs	zero,zero,630
    95d4:	00009660 	cmpeqi	zero,zero,601
    95d8:	00009660 	cmpeqi	zero,zero,601
    95dc:	0000a3d8 	cmpnei	zero,zero,655
    95e0:	00009660 	cmpeqi	zero,zero,601
    95e4:	00009660 	cmpeqi	zero,zero,601
    95e8:	00009660 	cmpeqi	zero,zero,601
    95ec:	00009660 	cmpeqi	zero,zero,601
    95f0:	00009660 	cmpeqi	zero,zero,601
    95f4:	00009660 	cmpeqi	zero,zero,601
    95f8:	00009660 	cmpeqi	zero,zero,601
    95fc:	00009660 	cmpeqi	zero,zero,601
    9600:	00009660 	cmpeqi	zero,zero,601
    9604:	00009660 	cmpeqi	zero,zero,601
    9608:	0000a3ac 	andhi	zero,zero,654
    960c:	00009cc4 	movi	zero,627
    9610:	0000a324 	muli	zero,zero,652
    9614:	0000a324 	muli	zero,zero,652
    9618:	0000a324 	muli	zero,zero,652
    961c:	0000a310 	cmplti	zero,zero,652
    9620:	00009cc4 	movi	zero,627
    9624:	00009660 	cmpeqi	zero,zero,601
    9628:	00009660 	cmpeqi	zero,zero,601
    962c:	0000a298 	cmpnei	zero,zero,650
    9630:	00009660 	cmpeqi	zero,zero,601
    9634:	0000a268 	cmpgeui	zero,zero,649
    9638:	00009d78 	rdprs	zero,zero,629
    963c:	0000a2c8 	cmpgei	zero,zero,651
    9640:	0000a2b4 	movhi	zero,650
    9644:	00009660 	cmpeqi	zero,zero,601
    9648:	0000a544 	movi	zero,661
    964c:	00009660 	cmpeqi	zero,zero,601
    9650:	00009dc4 	movi	zero,631
    9654:	00009660 	cmpeqi	zero,zero,601
    9658:	00009660 	cmpeqi	zero,zero,601
    965c:	0000a43c 	xorhi	zero,zero,656
    9660:	d9014d17 	ldw	r4,1332(sp)
    9664:	2000ce26 	beq	r4,zero,99a0 <___vfprintf_internal_r+0x6d4>
    9668:	01400044 	movi	r5,1
    966c:	d9800f04 	addi	r6,sp,60
    9670:	d9c14015 	stw	r7,1280(sp)
    9674:	d9414515 	stw	r5,1300(sp)
    9678:	d9814115 	stw	r6,1284(sp)
    967c:	280f883a 	mov	r7,r5
    9680:	d9000f05 	stb	r4,60(sp)
    9684:	d8000405 	stb	zero,16(sp)
    9688:	d8014615 	stw	zero,1304(sp)
    968c:	d8c14c17 	ldw	r3,1328(sp)
    9690:	1880008c 	andi	r2,r3,2
    9694:	1005003a 	cmpeq	r2,r2,zero
    9698:	d8815015 	stw	r2,1344(sp)
    969c:	1000031e 	bne	r2,zero,96ac <___vfprintf_internal_r+0x3e0>
    96a0:	d9014517 	ldw	r4,1300(sp)
    96a4:	21000084 	addi	r4,r4,2
    96a8:	d9014515 	stw	r4,1300(sp)
    96ac:	d9414c17 	ldw	r5,1328(sp)
    96b0:	2940210c 	andi	r5,r5,132
    96b4:	d9414e15 	stw	r5,1336(sp)
    96b8:	28002d1e 	bne	r5,zero,9770 <___vfprintf_internal_r+0x4a4>
    96bc:	d9814a17 	ldw	r6,1320(sp)
    96c0:	d8814517 	ldw	r2,1300(sp)
    96c4:	30a1c83a 	sub	r16,r6,r2
    96c8:	0400290e 	bge	zero,r16,9770 <___vfprintf_internal_r+0x4a4>
    96cc:	00800404 	movi	r2,16
    96d0:	1404580e 	bge	r2,r16,a834 <___vfprintf_internal_r+0x1568>
    96d4:	dc800e17 	ldw	r18,56(sp)
    96d8:	dc400d17 	ldw	r17,52(sp)
    96dc:	1027883a 	mov	r19,r2
    96e0:	07020034 	movhi	fp,2048
    96e4:	e7013e84 	addi	fp,fp,1274
    96e8:	050001c4 	movi	r20,7
    96ec:	00000306 	br	96fc <___vfprintf_internal_r+0x430>
    96f0:	843ffc04 	addi	r16,r16,-16
    96f4:	ad400204 	addi	r21,r21,8
    96f8:	9c00130e 	bge	r19,r16,9748 <___vfprintf_internal_r+0x47c>
    96fc:	94800404 	addi	r18,r18,16
    9700:	8c400044 	addi	r17,r17,1
    9704:	af000015 	stw	fp,0(r21)
    9708:	acc00115 	stw	r19,4(r21)
    970c:	dc800e15 	stw	r18,56(sp)
    9710:	dc400d15 	stw	r17,52(sp)
    9714:	a47ff60e 	bge	r20,r17,96f0 <___vfprintf_internal_r+0x424>
    9718:	d9014f17 	ldw	r4,1340(sp)
    971c:	b00b883a 	mov	r5,r22
    9720:	d9800c04 	addi	r6,sp,48
    9724:	d9c15115 	stw	r7,1348(sp)
    9728:	00092740 	call	9274 <__sprint_r>
    972c:	d9c15117 	ldw	r7,1348(sp)
    9730:	10009e1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9734:	843ffc04 	addi	r16,r16,-16
    9738:	dc800e17 	ldw	r18,56(sp)
    973c:	dc400d17 	ldw	r17,52(sp)
    9740:	dd401904 	addi	r21,sp,100
    9744:	9c3fed16 	blt	r19,r16,96fc <___vfprintf_internal_r+0x430>
    9748:	9425883a 	add	r18,r18,r16
    974c:	8c400044 	addi	r17,r17,1
    9750:	008001c4 	movi	r2,7
    9754:	af000015 	stw	fp,0(r21)
    9758:	ac000115 	stw	r16,4(r21)
    975c:	dc800e15 	stw	r18,56(sp)
    9760:	dc400d15 	stw	r17,52(sp)
    9764:	1441f516 	blt	r2,r17,9f3c <___vfprintf_internal_r+0xc70>
    9768:	ad400204 	addi	r21,r21,8
    976c:	00000206 	br	9778 <___vfprintf_internal_r+0x4ac>
    9770:	dc800e17 	ldw	r18,56(sp)
    9774:	dc400d17 	ldw	r17,52(sp)
    9778:	d8800407 	ldb	r2,16(sp)
    977c:	10000b26 	beq	r2,zero,97ac <___vfprintf_internal_r+0x4e0>
    9780:	00800044 	movi	r2,1
    9784:	94800044 	addi	r18,r18,1
    9788:	8c400044 	addi	r17,r17,1
    978c:	a8800115 	stw	r2,4(r21)
    9790:	d8c00404 	addi	r3,sp,16
    9794:	008001c4 	movi	r2,7
    9798:	a8c00015 	stw	r3,0(r21)
    979c:	dc800e15 	stw	r18,56(sp)
    97a0:	dc400d15 	stw	r17,52(sp)
    97a4:	1441da16 	blt	r2,r17,9f10 <___vfprintf_internal_r+0xc44>
    97a8:	ad400204 	addi	r21,r21,8
    97ac:	d9015017 	ldw	r4,1344(sp)
    97b0:	20000b1e 	bne	r4,zero,97e0 <___vfprintf_internal_r+0x514>
    97b4:	d8800444 	addi	r2,sp,17
    97b8:	94800084 	addi	r18,r18,2
    97bc:	8c400044 	addi	r17,r17,1
    97c0:	a8800015 	stw	r2,0(r21)
    97c4:	00c00084 	movi	r3,2
    97c8:	008001c4 	movi	r2,7
    97cc:	a8c00115 	stw	r3,4(r21)
    97d0:	dc800e15 	stw	r18,56(sp)
    97d4:	dc400d15 	stw	r17,52(sp)
    97d8:	1441c216 	blt	r2,r17,9ee4 <___vfprintf_internal_r+0xc18>
    97dc:	ad400204 	addi	r21,r21,8
    97e0:	d9414e17 	ldw	r5,1336(sp)
    97e4:	00802004 	movi	r2,128
    97e8:	2880b126 	beq	r5,r2,9ab0 <___vfprintf_internal_r+0x7e4>
    97ec:	d8c14617 	ldw	r3,1304(sp)
    97f0:	19e1c83a 	sub	r16,r3,r7
    97f4:	0400260e 	bge	zero,r16,9890 <___vfprintf_internal_r+0x5c4>
    97f8:	00800404 	movi	r2,16
    97fc:	1403c90e 	bge	r2,r16,a724 <___vfprintf_internal_r+0x1458>
    9800:	1027883a 	mov	r19,r2
    9804:	07020034 	movhi	fp,2048
    9808:	e7013a84 	addi	fp,fp,1258
    980c:	050001c4 	movi	r20,7
    9810:	00000306 	br	9820 <___vfprintf_internal_r+0x554>
    9814:	843ffc04 	addi	r16,r16,-16
    9818:	ad400204 	addi	r21,r21,8
    981c:	9c00130e 	bge	r19,r16,986c <___vfprintf_internal_r+0x5a0>
    9820:	94800404 	addi	r18,r18,16
    9824:	8c400044 	addi	r17,r17,1
    9828:	af000015 	stw	fp,0(r21)
    982c:	acc00115 	stw	r19,4(r21)
    9830:	dc800e15 	stw	r18,56(sp)
    9834:	dc400d15 	stw	r17,52(sp)
    9838:	a47ff60e 	bge	r20,r17,9814 <___vfprintf_internal_r+0x548>
    983c:	d9014f17 	ldw	r4,1340(sp)
    9840:	b00b883a 	mov	r5,r22
    9844:	d9800c04 	addi	r6,sp,48
    9848:	d9c15115 	stw	r7,1348(sp)
    984c:	00092740 	call	9274 <__sprint_r>
    9850:	d9c15117 	ldw	r7,1348(sp)
    9854:	1000551e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9858:	843ffc04 	addi	r16,r16,-16
    985c:	dc800e17 	ldw	r18,56(sp)
    9860:	dc400d17 	ldw	r17,52(sp)
    9864:	dd401904 	addi	r21,sp,100
    9868:	9c3fed16 	blt	r19,r16,9820 <___vfprintf_internal_r+0x554>
    986c:	9425883a 	add	r18,r18,r16
    9870:	8c400044 	addi	r17,r17,1
    9874:	008001c4 	movi	r2,7
    9878:	af000015 	stw	fp,0(r21)
    987c:	ac000115 	stw	r16,4(r21)
    9880:	dc800e15 	stw	r18,56(sp)
    9884:	dc400d15 	stw	r17,52(sp)
    9888:	14418216 	blt	r2,r17,9e94 <___vfprintf_internal_r+0xbc8>
    988c:	ad400204 	addi	r21,r21,8
    9890:	d9014c17 	ldw	r4,1328(sp)
    9894:	2080400c 	andi	r2,r4,256
    9898:	10004a1e 	bne	r2,zero,99c4 <___vfprintf_internal_r+0x6f8>
    989c:	d9414117 	ldw	r5,1284(sp)
    98a0:	91e5883a 	add	r18,r18,r7
    98a4:	8c400044 	addi	r17,r17,1
    98a8:	008001c4 	movi	r2,7
    98ac:	a9400015 	stw	r5,0(r21)
    98b0:	a9c00115 	stw	r7,4(r21)
    98b4:	dc800e15 	stw	r18,56(sp)
    98b8:	dc400d15 	stw	r17,52(sp)
    98bc:	14416716 	blt	r2,r17,9e5c <___vfprintf_internal_r+0xb90>
    98c0:	a8c00204 	addi	r3,r21,8
    98c4:	d9814c17 	ldw	r6,1328(sp)
    98c8:	3080010c 	andi	r2,r6,4
    98cc:	10002826 	beq	r2,zero,9970 <___vfprintf_internal_r+0x6a4>
    98d0:	d8814a17 	ldw	r2,1320(sp)
    98d4:	d9014517 	ldw	r4,1300(sp)
    98d8:	1121c83a 	sub	r16,r2,r4
    98dc:	0400240e 	bge	zero,r16,9970 <___vfprintf_internal_r+0x6a4>
    98e0:	00800404 	movi	r2,16
    98e4:	14044f0e 	bge	r2,r16,aa24 <___vfprintf_internal_r+0x1758>
    98e8:	dc400d17 	ldw	r17,52(sp)
    98ec:	1027883a 	mov	r19,r2
    98f0:	07020034 	movhi	fp,2048
    98f4:	e7013e84 	addi	fp,fp,1274
    98f8:	050001c4 	movi	r20,7
    98fc:	00000306 	br	990c <___vfprintf_internal_r+0x640>
    9900:	843ffc04 	addi	r16,r16,-16
    9904:	18c00204 	addi	r3,r3,8
    9908:	9c00110e 	bge	r19,r16,9950 <___vfprintf_internal_r+0x684>
    990c:	94800404 	addi	r18,r18,16
    9910:	8c400044 	addi	r17,r17,1
    9914:	1f000015 	stw	fp,0(r3)
    9918:	1cc00115 	stw	r19,4(r3)
    991c:	dc800e15 	stw	r18,56(sp)
    9920:	dc400d15 	stw	r17,52(sp)
    9924:	a47ff60e 	bge	r20,r17,9900 <___vfprintf_internal_r+0x634>
    9928:	d9014f17 	ldw	r4,1340(sp)
    992c:	b00b883a 	mov	r5,r22
    9930:	d9800c04 	addi	r6,sp,48
    9934:	00092740 	call	9274 <__sprint_r>
    9938:	10001c1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    993c:	843ffc04 	addi	r16,r16,-16
    9940:	dc800e17 	ldw	r18,56(sp)
    9944:	dc400d17 	ldw	r17,52(sp)
    9948:	d8c01904 	addi	r3,sp,100
    994c:	9c3fef16 	blt	r19,r16,990c <___vfprintf_internal_r+0x640>
    9950:	9425883a 	add	r18,r18,r16
    9954:	8c400044 	addi	r17,r17,1
    9958:	008001c4 	movi	r2,7
    995c:	1f000015 	stw	fp,0(r3)
    9960:	1c000115 	stw	r16,4(r3)
    9964:	dc800e15 	stw	r18,56(sp)
    9968:	dc400d15 	stw	r17,52(sp)
    996c:	1440cb16 	blt	r2,r17,9c9c <___vfprintf_internal_r+0x9d0>
    9970:	d8814a17 	ldw	r2,1320(sp)
    9974:	d9414517 	ldw	r5,1300(sp)
    9978:	1140010e 	bge	r2,r5,9980 <___vfprintf_internal_r+0x6b4>
    997c:	2805883a 	mov	r2,r5
    9980:	d9814b17 	ldw	r6,1324(sp)
    9984:	308d883a 	add	r6,r6,r2
    9988:	d9814b15 	stw	r6,1324(sp)
    998c:	90013b1e 	bne	r18,zero,9e7c <___vfprintf_internal_r+0xbb0>
    9990:	d9c14017 	ldw	r7,1280(sp)
    9994:	dd401904 	addi	r21,sp,100
    9998:	d8000d15 	stw	zero,52(sp)
    999c:	003ea706 	br	943c <___vfprintf_internal_r+0x170>
    99a0:	d8800e17 	ldw	r2,56(sp)
    99a4:	10053f1e 	bne	r2,zero,aea4 <___vfprintf_internal_r+0x1bd8>
    99a8:	d8000d15 	stw	zero,52(sp)
    99ac:	b080030b 	ldhu	r2,12(r22)
    99b0:	1080100c 	andi	r2,r2,64
    99b4:	103e8726 	beq	r2,zero,93d4 <___vfprintf_internal_r+0x108>
    99b8:	00bfffc4 	movi	r2,-1
    99bc:	d8814b15 	stw	r2,1324(sp)
    99c0:	003e8406 	br	93d4 <___vfprintf_internal_r+0x108>
    99c4:	d9814d17 	ldw	r6,1332(sp)
    99c8:	00801944 	movi	r2,101
    99cc:	11806e16 	blt	r2,r6,9b88 <___vfprintf_internal_r+0x8bc>
    99d0:	d9414717 	ldw	r5,1308(sp)
    99d4:	00c00044 	movi	r3,1
    99d8:	1943430e 	bge	r3,r5,a6e8 <___vfprintf_internal_r+0x141c>
    99dc:	d8814117 	ldw	r2,1284(sp)
    99e0:	94800044 	addi	r18,r18,1
    99e4:	8c400044 	addi	r17,r17,1
    99e8:	a8800015 	stw	r2,0(r21)
    99ec:	008001c4 	movi	r2,7
    99f0:	a8c00115 	stw	r3,4(r21)
    99f4:	dc800e15 	stw	r18,56(sp)
    99f8:	dc400d15 	stw	r17,52(sp)
    99fc:	1441ca16 	blt	r2,r17,a128 <___vfprintf_internal_r+0xe5c>
    9a00:	a8c00204 	addi	r3,r21,8
    9a04:	d9014917 	ldw	r4,1316(sp)
    9a08:	00800044 	movi	r2,1
    9a0c:	94800044 	addi	r18,r18,1
    9a10:	8c400044 	addi	r17,r17,1
    9a14:	18800115 	stw	r2,4(r3)
    9a18:	008001c4 	movi	r2,7
    9a1c:	19000015 	stw	r4,0(r3)
    9a20:	dc800e15 	stw	r18,56(sp)
    9a24:	dc400d15 	stw	r17,52(sp)
    9a28:	1441b616 	blt	r2,r17,a104 <___vfprintf_internal_r+0xe38>
    9a2c:	1cc00204 	addi	r19,r3,8
    9a30:	d9014217 	ldw	r4,1288(sp)
    9a34:	d9414317 	ldw	r5,1292(sp)
    9a38:	000d883a 	mov	r6,zero
    9a3c:	000f883a 	mov	r7,zero
    9a40:	0011f900 	call	11f90 <__nedf2>
    9a44:	10017426 	beq	r2,zero,a018 <___vfprintf_internal_r+0xd4c>
    9a48:	d9414717 	ldw	r5,1308(sp)
    9a4c:	d9814117 	ldw	r6,1284(sp)
    9a50:	8c400044 	addi	r17,r17,1
    9a54:	2c85883a 	add	r2,r5,r18
    9a58:	14bfffc4 	addi	r18,r2,-1
    9a5c:	28bfffc4 	addi	r2,r5,-1
    9a60:	30c00044 	addi	r3,r6,1
    9a64:	98800115 	stw	r2,4(r19)
    9a68:	008001c4 	movi	r2,7
    9a6c:	98c00015 	stw	r3,0(r19)
    9a70:	dc800e15 	stw	r18,56(sp)
    9a74:	dc400d15 	stw	r17,52(sp)
    9a78:	14418e16 	blt	r2,r17,a0b4 <___vfprintf_internal_r+0xde8>
    9a7c:	9cc00204 	addi	r19,r19,8
    9a80:	d9414817 	ldw	r5,1312(sp)
    9a84:	d8800804 	addi	r2,sp,32
    9a88:	8c400044 	addi	r17,r17,1
    9a8c:	9165883a 	add	r18,r18,r5
    9a90:	98800015 	stw	r2,0(r19)
    9a94:	008001c4 	movi	r2,7
    9a98:	99400115 	stw	r5,4(r19)
    9a9c:	dc800e15 	stw	r18,56(sp)
    9aa0:	dc400d15 	stw	r17,52(sp)
    9aa4:	1440ed16 	blt	r2,r17,9e5c <___vfprintf_internal_r+0xb90>
    9aa8:	98c00204 	addi	r3,r19,8
    9aac:	003f8506 	br	98c4 <___vfprintf_internal_r+0x5f8>
    9ab0:	d9814a17 	ldw	r6,1320(sp)
    9ab4:	d8814517 	ldw	r2,1300(sp)
    9ab8:	30a1c83a 	sub	r16,r6,r2
    9abc:	043f4b0e 	bge	zero,r16,97ec <___vfprintf_internal_r+0x520>
    9ac0:	00800404 	movi	r2,16
    9ac4:	1404340e 	bge	r2,r16,ab98 <___vfprintf_internal_r+0x18cc>
    9ac8:	1027883a 	mov	r19,r2
    9acc:	07020034 	movhi	fp,2048
    9ad0:	e7013a84 	addi	fp,fp,1258
    9ad4:	050001c4 	movi	r20,7
    9ad8:	00000306 	br	9ae8 <___vfprintf_internal_r+0x81c>
    9adc:	843ffc04 	addi	r16,r16,-16
    9ae0:	ad400204 	addi	r21,r21,8
    9ae4:	9c00130e 	bge	r19,r16,9b34 <___vfprintf_internal_r+0x868>
    9ae8:	94800404 	addi	r18,r18,16
    9aec:	8c400044 	addi	r17,r17,1
    9af0:	af000015 	stw	fp,0(r21)
    9af4:	acc00115 	stw	r19,4(r21)
    9af8:	dc800e15 	stw	r18,56(sp)
    9afc:	dc400d15 	stw	r17,52(sp)
    9b00:	a47ff60e 	bge	r20,r17,9adc <___vfprintf_internal_r+0x810>
    9b04:	d9014f17 	ldw	r4,1340(sp)
    9b08:	b00b883a 	mov	r5,r22
    9b0c:	d9800c04 	addi	r6,sp,48
    9b10:	d9c15115 	stw	r7,1348(sp)
    9b14:	00092740 	call	9274 <__sprint_r>
    9b18:	d9c15117 	ldw	r7,1348(sp)
    9b1c:	103fa31e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9b20:	843ffc04 	addi	r16,r16,-16
    9b24:	dc800e17 	ldw	r18,56(sp)
    9b28:	dc400d17 	ldw	r17,52(sp)
    9b2c:	dd401904 	addi	r21,sp,100
    9b30:	9c3fed16 	blt	r19,r16,9ae8 <___vfprintf_internal_r+0x81c>
    9b34:	9425883a 	add	r18,r18,r16
    9b38:	8c400044 	addi	r17,r17,1
    9b3c:	008001c4 	movi	r2,7
    9b40:	af000015 	stw	fp,0(r21)
    9b44:	ac000115 	stw	r16,4(r21)
    9b48:	dc800e15 	stw	r18,56(sp)
    9b4c:	dc400d15 	stw	r17,52(sp)
    9b50:	14416116 	blt	r2,r17,a0d8 <___vfprintf_internal_r+0xe0c>
    9b54:	ad400204 	addi	r21,r21,8
    9b58:	003f2406 	br	97ec <___vfprintf_internal_r+0x520>
    9b5c:	d9014f17 	ldw	r4,1340(sp)
    9b60:	000cd3c0 	call	cd3c <__sinit>
    9b64:	d9c15117 	ldw	r7,1348(sp)
    9b68:	003def06 	br	9328 <___vfprintf_internal_r+0x5c>
    9b6c:	d9014f17 	ldw	r4,1340(sp)
    9b70:	b00b883a 	mov	r5,r22
    9b74:	d9c15115 	stw	r7,1348(sp)
    9b78:	000b19c0 	call	b19c <__swsetup_r>
    9b7c:	d9c15117 	ldw	r7,1348(sp)
    9b80:	103dee26 	beq	r2,zero,933c <___vfprintf_internal_r+0x70>
    9b84:	003f8c06 	br	99b8 <___vfprintf_internal_r+0x6ec>
    9b88:	d9014217 	ldw	r4,1288(sp)
    9b8c:	d9414317 	ldw	r5,1292(sp)
    9b90:	000d883a 	mov	r6,zero
    9b94:	000f883a 	mov	r7,zero
    9b98:	0011f080 	call	11f08 <__eqdf2>
    9b9c:	1000f21e 	bne	r2,zero,9f68 <___vfprintf_internal_r+0xc9c>
    9ba0:	00820034 	movhi	r2,2048
    9ba4:	10813a04 	addi	r2,r2,1256
    9ba8:	94800044 	addi	r18,r18,1
    9bac:	8c400044 	addi	r17,r17,1
    9bb0:	a8800015 	stw	r2,0(r21)
    9bb4:	00c00044 	movi	r3,1
    9bb8:	008001c4 	movi	r2,7
    9bbc:	a8c00115 	stw	r3,4(r21)
    9bc0:	dc800e15 	stw	r18,56(sp)
    9bc4:	dc400d15 	stw	r17,52(sp)
    9bc8:	1442fa16 	blt	r2,r17,a7b4 <___vfprintf_internal_r+0x14e8>
    9bcc:	a8c00204 	addi	r3,r21,8
    9bd0:	d8800517 	ldw	r2,20(sp)
    9bd4:	d9014717 	ldw	r4,1308(sp)
    9bd8:	11015c0e 	bge	r2,r4,a14c <___vfprintf_internal_r+0xe80>
    9bdc:	dc400d17 	ldw	r17,52(sp)
    9be0:	d9814917 	ldw	r6,1316(sp)
    9be4:	00800044 	movi	r2,1
    9be8:	94800044 	addi	r18,r18,1
    9bec:	8c400044 	addi	r17,r17,1
    9bf0:	18800115 	stw	r2,4(r3)
    9bf4:	008001c4 	movi	r2,7
    9bf8:	19800015 	stw	r6,0(r3)
    9bfc:	dc800e15 	stw	r18,56(sp)
    9c00:	dc400d15 	stw	r17,52(sp)
    9c04:	14431016 	blt	r2,r17,a848 <___vfprintf_internal_r+0x157c>
    9c08:	18c00204 	addi	r3,r3,8
    9c0c:	d8814717 	ldw	r2,1308(sp)
    9c10:	143fffc4 	addi	r16,r2,-1
    9c14:	043f2b0e 	bge	zero,r16,98c4 <___vfprintf_internal_r+0x5f8>
    9c18:	00800404 	movi	r2,16
    9c1c:	1402a20e 	bge	r2,r16,a6a8 <___vfprintf_internal_r+0x13dc>
    9c20:	dc400d17 	ldw	r17,52(sp)
    9c24:	1027883a 	mov	r19,r2
    9c28:	07020034 	movhi	fp,2048
    9c2c:	e7013a84 	addi	fp,fp,1258
    9c30:	050001c4 	movi	r20,7
    9c34:	00000306 	br	9c44 <___vfprintf_internal_r+0x978>
    9c38:	18c00204 	addi	r3,r3,8
    9c3c:	843ffc04 	addi	r16,r16,-16
    9c40:	9c029c0e 	bge	r19,r16,a6b4 <___vfprintf_internal_r+0x13e8>
    9c44:	94800404 	addi	r18,r18,16
    9c48:	8c400044 	addi	r17,r17,1
    9c4c:	1f000015 	stw	fp,0(r3)
    9c50:	1cc00115 	stw	r19,4(r3)
    9c54:	dc800e15 	stw	r18,56(sp)
    9c58:	dc400d15 	stw	r17,52(sp)
    9c5c:	a47ff60e 	bge	r20,r17,9c38 <___vfprintf_internal_r+0x96c>
    9c60:	d9014f17 	ldw	r4,1340(sp)
    9c64:	b00b883a 	mov	r5,r22
    9c68:	d9800c04 	addi	r6,sp,48
    9c6c:	00092740 	call	9274 <__sprint_r>
    9c70:	103f4e1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9c74:	dc800e17 	ldw	r18,56(sp)
    9c78:	dc400d17 	ldw	r17,52(sp)
    9c7c:	d8c01904 	addi	r3,sp,100
    9c80:	003fee06 	br	9c3c <___vfprintf_internal_r+0x970>
    9c84:	d8802c0b 	ldhu	r2,176(sp)
    9c88:	00ffffc4 	movi	r3,-1
    9c8c:	d8c14b15 	stw	r3,1324(sp)
    9c90:	1080100c 	andi	r2,r2,64
    9c94:	103dcc1e 	bne	r2,zero,93c8 <___vfprintf_internal_r+0xfc>
    9c98:	003dce06 	br	93d4 <___vfprintf_internal_r+0x108>
    9c9c:	d9014f17 	ldw	r4,1340(sp)
    9ca0:	b00b883a 	mov	r5,r22
    9ca4:	d9800c04 	addi	r6,sp,48
    9ca8:	00092740 	call	9274 <__sprint_r>
    9cac:	103f3f1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9cb0:	dc800e17 	ldw	r18,56(sp)
    9cb4:	003f2e06 	br	9970 <___vfprintf_internal_r+0x6a4>
    9cb8:	d9414c17 	ldw	r5,1328(sp)
    9cbc:	29400414 	ori	r5,r5,16
    9cc0:	d9414c15 	stw	r5,1328(sp)
    9cc4:	d9814c17 	ldw	r6,1328(sp)
    9cc8:	3080080c 	andi	r2,r6,32
    9ccc:	10014f1e 	bne	r2,zero,a20c <___vfprintf_internal_r+0xf40>
    9cd0:	d8c14c17 	ldw	r3,1328(sp)
    9cd4:	1880040c 	andi	r2,r3,16
    9cd8:	1002ea1e 	bne	r2,zero,a884 <___vfprintf_internal_r+0x15b8>
    9cdc:	d9014c17 	ldw	r4,1328(sp)
    9ce0:	2080100c 	andi	r2,r4,64
    9ce4:	1002e726 	beq	r2,zero,a884 <___vfprintf_internal_r+0x15b8>
    9ce8:	3880000f 	ldh	r2,0(r7)
    9cec:	39c00104 	addi	r7,r7,4
    9cf0:	d9c14015 	stw	r7,1280(sp)
    9cf4:	1023d7fa 	srai	r17,r2,31
    9cf8:	1021883a 	mov	r16,r2
    9cfc:	88037216 	blt	r17,zero,aac8 <___vfprintf_internal_r+0x17fc>
    9d00:	01000044 	movi	r4,1
    9d04:	98000416 	blt	r19,zero,9d18 <___vfprintf_internal_r+0xa4c>
    9d08:	d8c14c17 	ldw	r3,1328(sp)
    9d0c:	00bfdfc4 	movi	r2,-129
    9d10:	1886703a 	and	r3,r3,r2
    9d14:	d8c14c15 	stw	r3,1328(sp)
    9d18:	8444b03a 	or	r2,r16,r17
    9d1c:	1002261e 	bne	r2,zero,a5b8 <___vfprintf_internal_r+0x12ec>
    9d20:	9802251e 	bne	r19,zero,a5b8 <___vfprintf_internal_r+0x12ec>
    9d24:	20803fcc 	andi	r2,r4,255
    9d28:	10029b26 	beq	r2,zero,a798 <___vfprintf_internal_r+0x14cc>
    9d2c:	d8c01904 	addi	r3,sp,100
    9d30:	dd000f04 	addi	r20,sp,60
    9d34:	d8c14115 	stw	r3,1284(sp)
    9d38:	d8c14117 	ldw	r3,1284(sp)
    9d3c:	dcc14515 	stw	r19,1300(sp)
    9d40:	a0c5c83a 	sub	r2,r20,r3
    9d44:	11c00a04 	addi	r7,r2,40
    9d48:	99c0010e 	bge	r19,r7,9d50 <___vfprintf_internal_r+0xa84>
    9d4c:	d9c14515 	stw	r7,1300(sp)
    9d50:	dcc14615 	stw	r19,1304(sp)
    9d54:	d8800407 	ldb	r2,16(sp)
    9d58:	103e4c26 	beq	r2,zero,968c <___vfprintf_internal_r+0x3c0>
    9d5c:	d8814517 	ldw	r2,1300(sp)
    9d60:	10800044 	addi	r2,r2,1
    9d64:	d8814515 	stw	r2,1300(sp)
    9d68:	003e4806 	br	968c <___vfprintf_internal_r+0x3c0>
    9d6c:	d9814c17 	ldw	r6,1328(sp)
    9d70:	31800414 	ori	r6,r6,16
    9d74:	d9814c15 	stw	r6,1328(sp)
    9d78:	d8c14c17 	ldw	r3,1328(sp)
    9d7c:	1880080c 	andi	r2,r3,32
    9d80:	1001271e 	bne	r2,zero,a220 <___vfprintf_internal_r+0xf54>
    9d84:	d9414c17 	ldw	r5,1328(sp)
    9d88:	2880040c 	andi	r2,r5,16
    9d8c:	1002b61e 	bne	r2,zero,a868 <___vfprintf_internal_r+0x159c>
    9d90:	d9814c17 	ldw	r6,1328(sp)
    9d94:	3080100c 	andi	r2,r6,64
    9d98:	1002b326 	beq	r2,zero,a868 <___vfprintf_internal_r+0x159c>
    9d9c:	3c00000b 	ldhu	r16,0(r7)
    9da0:	0009883a 	mov	r4,zero
    9da4:	39c00104 	addi	r7,r7,4
    9da8:	0023883a 	mov	r17,zero
    9dac:	d9c14015 	stw	r7,1280(sp)
    9db0:	d8000405 	stb	zero,16(sp)
    9db4:	003fd306 	br	9d04 <___vfprintf_internal_r+0xa38>
    9db8:	d9014c17 	ldw	r4,1328(sp)
    9dbc:	21000414 	ori	r4,r4,16
    9dc0:	d9014c15 	stw	r4,1328(sp)
    9dc4:	d9414c17 	ldw	r5,1328(sp)
    9dc8:	2880080c 	andi	r2,r5,32
    9dcc:	1001081e 	bne	r2,zero,a1f0 <___vfprintf_internal_r+0xf24>
    9dd0:	d8c14c17 	ldw	r3,1328(sp)
    9dd4:	1880040c 	andi	r2,r3,16
    9dd8:	1002b01e 	bne	r2,zero,a89c <___vfprintf_internal_r+0x15d0>
    9ddc:	d9014c17 	ldw	r4,1328(sp)
    9de0:	2080100c 	andi	r2,r4,64
    9de4:	1002ad26 	beq	r2,zero,a89c <___vfprintf_internal_r+0x15d0>
    9de8:	3c00000b 	ldhu	r16,0(r7)
    9dec:	01000044 	movi	r4,1
    9df0:	39c00104 	addi	r7,r7,4
    9df4:	0023883a 	mov	r17,zero
    9df8:	d9c14015 	stw	r7,1280(sp)
    9dfc:	d8000405 	stb	zero,16(sp)
    9e00:	003fc006 	br	9d04 <___vfprintf_internal_r+0xa38>
    9e04:	d9014f17 	ldw	r4,1340(sp)
    9e08:	b00b883a 	mov	r5,r22
    9e0c:	d9800c04 	addi	r6,sp,48
    9e10:	00092740 	call	9274 <__sprint_r>
    9e14:	103ee51e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9e18:	dc800e17 	ldw	r18,56(sp)
    9e1c:	d8c01904 	addi	r3,sp,100
    9e20:	d9814c17 	ldw	r6,1328(sp)
    9e24:	3080004c 	andi	r2,r6,1
    9e28:	1005003a 	cmpeq	r2,r2,zero
    9e2c:	103ea51e 	bne	r2,zero,98c4 <___vfprintf_internal_r+0x5f8>
    9e30:	00800044 	movi	r2,1
    9e34:	dc400d17 	ldw	r17,52(sp)
    9e38:	18800115 	stw	r2,4(r3)
    9e3c:	d8814917 	ldw	r2,1316(sp)
    9e40:	94800044 	addi	r18,r18,1
    9e44:	8c400044 	addi	r17,r17,1
    9e48:	18800015 	stw	r2,0(r3)
    9e4c:	008001c4 	movi	r2,7
    9e50:	dc800e15 	stw	r18,56(sp)
    9e54:	dc400d15 	stw	r17,52(sp)
    9e58:	14421e0e 	bge	r2,r17,a6d4 <___vfprintf_internal_r+0x1408>
    9e5c:	d9014f17 	ldw	r4,1340(sp)
    9e60:	b00b883a 	mov	r5,r22
    9e64:	d9800c04 	addi	r6,sp,48
    9e68:	00092740 	call	9274 <__sprint_r>
    9e6c:	103ecf1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9e70:	dc800e17 	ldw	r18,56(sp)
    9e74:	d8c01904 	addi	r3,sp,100
    9e78:	003e9206 	br	98c4 <___vfprintf_internal_r+0x5f8>
    9e7c:	d9014f17 	ldw	r4,1340(sp)
    9e80:	b00b883a 	mov	r5,r22
    9e84:	d9800c04 	addi	r6,sp,48
    9e88:	00092740 	call	9274 <__sprint_r>
    9e8c:	103ec026 	beq	r2,zero,9990 <___vfprintf_internal_r+0x6c4>
    9e90:	003ec606 	br	99ac <___vfprintf_internal_r+0x6e0>
    9e94:	d9014f17 	ldw	r4,1340(sp)
    9e98:	b00b883a 	mov	r5,r22
    9e9c:	d9800c04 	addi	r6,sp,48
    9ea0:	d9c15115 	stw	r7,1348(sp)
    9ea4:	00092740 	call	9274 <__sprint_r>
    9ea8:	d9c15117 	ldw	r7,1348(sp)
    9eac:	103ebf1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9eb0:	dc800e17 	ldw	r18,56(sp)
    9eb4:	dc400d17 	ldw	r17,52(sp)
    9eb8:	dd401904 	addi	r21,sp,100
    9ebc:	003e7406 	br	9890 <___vfprintf_internal_r+0x5c4>
    9ec0:	d9014f17 	ldw	r4,1340(sp)
    9ec4:	b00b883a 	mov	r5,r22
    9ec8:	d9800c04 	addi	r6,sp,48
    9ecc:	d9c15115 	stw	r7,1348(sp)
    9ed0:	00092740 	call	9274 <__sprint_r>
    9ed4:	d9c15117 	ldw	r7,1348(sp)
    9ed8:	103eb41e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9edc:	dd401904 	addi	r21,sp,100
    9ee0:	003d6d06 	br	9498 <___vfprintf_internal_r+0x1cc>
    9ee4:	d9014f17 	ldw	r4,1340(sp)
    9ee8:	b00b883a 	mov	r5,r22
    9eec:	d9800c04 	addi	r6,sp,48
    9ef0:	d9c15115 	stw	r7,1348(sp)
    9ef4:	00092740 	call	9274 <__sprint_r>
    9ef8:	d9c15117 	ldw	r7,1348(sp)
    9efc:	103eab1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9f00:	dc800e17 	ldw	r18,56(sp)
    9f04:	dc400d17 	ldw	r17,52(sp)
    9f08:	dd401904 	addi	r21,sp,100
    9f0c:	003e3406 	br	97e0 <___vfprintf_internal_r+0x514>
    9f10:	d9014f17 	ldw	r4,1340(sp)
    9f14:	b00b883a 	mov	r5,r22
    9f18:	d9800c04 	addi	r6,sp,48
    9f1c:	d9c15115 	stw	r7,1348(sp)
    9f20:	00092740 	call	9274 <__sprint_r>
    9f24:	d9c15117 	ldw	r7,1348(sp)
    9f28:	103ea01e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9f2c:	dc800e17 	ldw	r18,56(sp)
    9f30:	dc400d17 	ldw	r17,52(sp)
    9f34:	dd401904 	addi	r21,sp,100
    9f38:	003e1c06 	br	97ac <___vfprintf_internal_r+0x4e0>
    9f3c:	d9014f17 	ldw	r4,1340(sp)
    9f40:	b00b883a 	mov	r5,r22
    9f44:	d9800c04 	addi	r6,sp,48
    9f48:	d9c15115 	stw	r7,1348(sp)
    9f4c:	00092740 	call	9274 <__sprint_r>
    9f50:	d9c15117 	ldw	r7,1348(sp)
    9f54:	103e951e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    9f58:	dc800e17 	ldw	r18,56(sp)
    9f5c:	dc400d17 	ldw	r17,52(sp)
    9f60:	dd401904 	addi	r21,sp,100
    9f64:	003e0406 	br	9778 <___vfprintf_internal_r+0x4ac>
    9f68:	d9000517 	ldw	r4,20(sp)
    9f6c:	0102520e 	bge	zero,r4,a8b8 <___vfprintf_internal_r+0x15ec>
    9f70:	d9814717 	ldw	r6,1308(sp)
    9f74:	21807a16 	blt	r4,r6,a160 <___vfprintf_internal_r+0xe94>
    9f78:	d8814117 	ldw	r2,1284(sp)
    9f7c:	91a5883a 	add	r18,r18,r6
    9f80:	8c400044 	addi	r17,r17,1
    9f84:	a8800015 	stw	r2,0(r21)
    9f88:	008001c4 	movi	r2,7
    9f8c:	a9800115 	stw	r6,4(r21)
    9f90:	dc800e15 	stw	r18,56(sp)
    9f94:	dc400d15 	stw	r17,52(sp)
    9f98:	1442f616 	blt	r2,r17,ab74 <___vfprintf_internal_r+0x18a8>
    9f9c:	a8c00204 	addi	r3,r21,8
    9fa0:	d9414717 	ldw	r5,1308(sp)
    9fa4:	2161c83a 	sub	r16,r4,r5
    9fa8:	043f9d0e 	bge	zero,r16,9e20 <___vfprintf_internal_r+0xb54>
    9fac:	00800404 	movi	r2,16
    9fb0:	1402130e 	bge	r2,r16,a800 <___vfprintf_internal_r+0x1534>
    9fb4:	dc400d17 	ldw	r17,52(sp)
    9fb8:	1027883a 	mov	r19,r2
    9fbc:	07020034 	movhi	fp,2048
    9fc0:	e7013a84 	addi	fp,fp,1258
    9fc4:	050001c4 	movi	r20,7
    9fc8:	00000306 	br	9fd8 <___vfprintf_internal_r+0xd0c>
    9fcc:	18c00204 	addi	r3,r3,8
    9fd0:	843ffc04 	addi	r16,r16,-16
    9fd4:	9c020d0e 	bge	r19,r16,a80c <___vfprintf_internal_r+0x1540>
    9fd8:	94800404 	addi	r18,r18,16
    9fdc:	8c400044 	addi	r17,r17,1
    9fe0:	1f000015 	stw	fp,0(r3)
    9fe4:	1cc00115 	stw	r19,4(r3)
    9fe8:	dc800e15 	stw	r18,56(sp)
    9fec:	dc400d15 	stw	r17,52(sp)
    9ff0:	a47ff60e 	bge	r20,r17,9fcc <___vfprintf_internal_r+0xd00>
    9ff4:	d9014f17 	ldw	r4,1340(sp)
    9ff8:	b00b883a 	mov	r5,r22
    9ffc:	d9800c04 	addi	r6,sp,48
    a000:	00092740 	call	9274 <__sprint_r>
    a004:	103e691e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a008:	dc800e17 	ldw	r18,56(sp)
    a00c:	dc400d17 	ldw	r17,52(sp)
    a010:	d8c01904 	addi	r3,sp,100
    a014:	003fee06 	br	9fd0 <___vfprintf_internal_r+0xd04>
    a018:	d8814717 	ldw	r2,1308(sp)
    a01c:	143fffc4 	addi	r16,r2,-1
    a020:	043e970e 	bge	zero,r16,9a80 <___vfprintf_internal_r+0x7b4>
    a024:	00800404 	movi	r2,16
    a028:	1400180e 	bge	r2,r16,a08c <___vfprintf_internal_r+0xdc0>
    a02c:	1029883a 	mov	r20,r2
    a030:	07020034 	movhi	fp,2048
    a034:	e7013a84 	addi	fp,fp,1258
    a038:	054001c4 	movi	r21,7
    a03c:	00000306 	br	a04c <___vfprintf_internal_r+0xd80>
    a040:	9cc00204 	addi	r19,r19,8
    a044:	843ffc04 	addi	r16,r16,-16
    a048:	a400120e 	bge	r20,r16,a094 <___vfprintf_internal_r+0xdc8>
    a04c:	94800404 	addi	r18,r18,16
    a050:	8c400044 	addi	r17,r17,1
    a054:	9f000015 	stw	fp,0(r19)
    a058:	9d000115 	stw	r20,4(r19)
    a05c:	dc800e15 	stw	r18,56(sp)
    a060:	dc400d15 	stw	r17,52(sp)
    a064:	ac7ff60e 	bge	r21,r17,a040 <___vfprintf_internal_r+0xd74>
    a068:	d9014f17 	ldw	r4,1340(sp)
    a06c:	b00b883a 	mov	r5,r22
    a070:	d9800c04 	addi	r6,sp,48
    a074:	00092740 	call	9274 <__sprint_r>
    a078:	103e4c1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a07c:	dc800e17 	ldw	r18,56(sp)
    a080:	dc400d17 	ldw	r17,52(sp)
    a084:	dcc01904 	addi	r19,sp,100
    a088:	003fee06 	br	a044 <___vfprintf_internal_r+0xd78>
    a08c:	07020034 	movhi	fp,2048
    a090:	e7013a84 	addi	fp,fp,1258
    a094:	9425883a 	add	r18,r18,r16
    a098:	8c400044 	addi	r17,r17,1
    a09c:	008001c4 	movi	r2,7
    a0a0:	9f000015 	stw	fp,0(r19)
    a0a4:	9c000115 	stw	r16,4(r19)
    a0a8:	dc800e15 	stw	r18,56(sp)
    a0ac:	dc400d15 	stw	r17,52(sp)
    a0b0:	147e720e 	bge	r2,r17,9a7c <___vfprintf_internal_r+0x7b0>
    a0b4:	d9014f17 	ldw	r4,1340(sp)
    a0b8:	b00b883a 	mov	r5,r22
    a0bc:	d9800c04 	addi	r6,sp,48
    a0c0:	00092740 	call	9274 <__sprint_r>
    a0c4:	103e391e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a0c8:	dc800e17 	ldw	r18,56(sp)
    a0cc:	dc400d17 	ldw	r17,52(sp)
    a0d0:	dcc01904 	addi	r19,sp,100
    a0d4:	003e6a06 	br	9a80 <___vfprintf_internal_r+0x7b4>
    a0d8:	d9014f17 	ldw	r4,1340(sp)
    a0dc:	b00b883a 	mov	r5,r22
    a0e0:	d9800c04 	addi	r6,sp,48
    a0e4:	d9c15115 	stw	r7,1348(sp)
    a0e8:	00092740 	call	9274 <__sprint_r>
    a0ec:	d9c15117 	ldw	r7,1348(sp)
    a0f0:	103e2e1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a0f4:	dc800e17 	ldw	r18,56(sp)
    a0f8:	dc400d17 	ldw	r17,52(sp)
    a0fc:	dd401904 	addi	r21,sp,100
    a100:	003dba06 	br	97ec <___vfprintf_internal_r+0x520>
    a104:	d9014f17 	ldw	r4,1340(sp)
    a108:	b00b883a 	mov	r5,r22
    a10c:	d9800c04 	addi	r6,sp,48
    a110:	00092740 	call	9274 <__sprint_r>
    a114:	103e251e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a118:	dc800e17 	ldw	r18,56(sp)
    a11c:	dc400d17 	ldw	r17,52(sp)
    a120:	dcc01904 	addi	r19,sp,100
    a124:	003e4206 	br	9a30 <___vfprintf_internal_r+0x764>
    a128:	d9014f17 	ldw	r4,1340(sp)
    a12c:	b00b883a 	mov	r5,r22
    a130:	d9800c04 	addi	r6,sp,48
    a134:	00092740 	call	9274 <__sprint_r>
    a138:	103e1c1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a13c:	dc800e17 	ldw	r18,56(sp)
    a140:	dc400d17 	ldw	r17,52(sp)
    a144:	d8c01904 	addi	r3,sp,100
    a148:	003e2e06 	br	9a04 <___vfprintf_internal_r+0x738>
    a14c:	d9414c17 	ldw	r5,1328(sp)
    a150:	2880004c 	andi	r2,r5,1
    a154:	1005003a 	cmpeq	r2,r2,zero
    a158:	103dda1e 	bne	r2,zero,98c4 <___vfprintf_internal_r+0x5f8>
    a15c:	003e9f06 	br	9bdc <___vfprintf_internal_r+0x910>
    a160:	d8c14117 	ldw	r3,1284(sp)
    a164:	9125883a 	add	r18,r18,r4
    a168:	8c400044 	addi	r17,r17,1
    a16c:	008001c4 	movi	r2,7
    a170:	a8c00015 	stw	r3,0(r21)
    a174:	a9000115 	stw	r4,4(r21)
    a178:	dc800e15 	stw	r18,56(sp)
    a17c:	dc400d15 	stw	r17,52(sp)
    a180:	14426616 	blt	r2,r17,ab1c <___vfprintf_internal_r+0x1850>
    a184:	a8c00204 	addi	r3,r21,8
    a188:	d9414917 	ldw	r5,1316(sp)
    a18c:	00800044 	movi	r2,1
    a190:	94800044 	addi	r18,r18,1
    a194:	8c400044 	addi	r17,r17,1
    a198:	18800115 	stw	r2,4(r3)
    a19c:	008001c4 	movi	r2,7
    a1a0:	19400015 	stw	r5,0(r3)
    a1a4:	dc800e15 	stw	r18,56(sp)
    a1a8:	dc400d15 	stw	r17,52(sp)
    a1ac:	2021883a 	mov	r16,r4
    a1b0:	14425016 	blt	r2,r17,aaf4 <___vfprintf_internal_r+0x1828>
    a1b4:	19400204 	addi	r5,r3,8
    a1b8:	d9814717 	ldw	r6,1308(sp)
    a1bc:	8c400044 	addi	r17,r17,1
    a1c0:	dc400d15 	stw	r17,52(sp)
    a1c4:	3107c83a 	sub	r3,r6,r4
    a1c8:	d9014117 	ldw	r4,1284(sp)
    a1cc:	90e5883a 	add	r18,r18,r3
    a1d0:	28c00115 	stw	r3,4(r5)
    a1d4:	8105883a 	add	r2,r16,r4
    a1d8:	28800015 	stw	r2,0(r5)
    a1dc:	008001c4 	movi	r2,7
    a1e0:	dc800e15 	stw	r18,56(sp)
    a1e4:	147f1d16 	blt	r2,r17,9e5c <___vfprintf_internal_r+0xb90>
    a1e8:	28c00204 	addi	r3,r5,8
    a1ec:	003db506 	br	98c4 <___vfprintf_internal_r+0x5f8>
    a1f0:	3c000017 	ldw	r16,0(r7)
    a1f4:	3c400117 	ldw	r17,4(r7)
    a1f8:	39800204 	addi	r6,r7,8
    a1fc:	01000044 	movi	r4,1
    a200:	d9814015 	stw	r6,1280(sp)
    a204:	d8000405 	stb	zero,16(sp)
    a208:	003ebe06 	br	9d04 <___vfprintf_internal_r+0xa38>
    a20c:	3c000017 	ldw	r16,0(r7)
    a210:	3c400117 	ldw	r17,4(r7)
    a214:	38800204 	addi	r2,r7,8
    a218:	d8814015 	stw	r2,1280(sp)
    a21c:	003eb706 	br	9cfc <___vfprintf_internal_r+0xa30>
    a220:	3c000017 	ldw	r16,0(r7)
    a224:	3c400117 	ldw	r17,4(r7)
    a228:	39000204 	addi	r4,r7,8
    a22c:	d9014015 	stw	r4,1280(sp)
    a230:	0009883a 	mov	r4,zero
    a234:	d8000405 	stb	zero,16(sp)
    a238:	003eb206 	br	9d04 <___vfprintf_internal_r+0xa38>
    a23c:	38c00017 	ldw	r3,0(r7)
    a240:	39c00104 	addi	r7,r7,4
    a244:	d8c14a15 	stw	r3,1320(sp)
    a248:	1800d10e 	bge	r3,zero,a590 <___vfprintf_internal_r+0x12c4>
    a24c:	00c7c83a 	sub	r3,zero,r3
    a250:	d8c14a15 	stw	r3,1320(sp)
    a254:	d9014c17 	ldw	r4,1328(sp)
    a258:	b8c00007 	ldb	r3,0(r23)
    a25c:	21000114 	ori	r4,r4,4
    a260:	d9014c15 	stw	r4,1328(sp)
    a264:	003c9806 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a268:	d9814c17 	ldw	r6,1328(sp)
    a26c:	3080080c 	andi	r2,r6,32
    a270:	1001f026 	beq	r2,zero,aa34 <___vfprintf_internal_r+0x1768>
    a274:	d9014b17 	ldw	r4,1324(sp)
    a278:	38800017 	ldw	r2,0(r7)
    a27c:	39c00104 	addi	r7,r7,4
    a280:	d9c14015 	stw	r7,1280(sp)
    a284:	2007d7fa 	srai	r3,r4,31
    a288:	d9c14017 	ldw	r7,1280(sp)
    a28c:	11000015 	stw	r4,0(r2)
    a290:	10c00115 	stw	r3,4(r2)
    a294:	003c6906 	br	943c <___vfprintf_internal_r+0x170>
    a298:	b8c00007 	ldb	r3,0(r23)
    a29c:	00801b04 	movi	r2,108
    a2a0:	18824f26 	beq	r3,r2,abe0 <___vfprintf_internal_r+0x1914>
    a2a4:	d9414c17 	ldw	r5,1328(sp)
    a2a8:	29400414 	ori	r5,r5,16
    a2ac:	d9414c15 	stw	r5,1328(sp)
    a2b0:	003c8506 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a2b4:	d9814c17 	ldw	r6,1328(sp)
    a2b8:	b8c00007 	ldb	r3,0(r23)
    a2bc:	31800814 	ori	r6,r6,32
    a2c0:	d9814c15 	stw	r6,1328(sp)
    a2c4:	003c8006 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a2c8:	d8814c17 	ldw	r2,1328(sp)
    a2cc:	3c000017 	ldw	r16,0(r7)
    a2d0:	00c01e04 	movi	r3,120
    a2d4:	10800094 	ori	r2,r2,2
    a2d8:	d8814c15 	stw	r2,1328(sp)
    a2dc:	39c00104 	addi	r7,r7,4
    a2e0:	01420034 	movhi	r5,2048
    a2e4:	29412304 	addi	r5,r5,1164
    a2e8:	00800c04 	movi	r2,48
    a2ec:	0023883a 	mov	r17,zero
    a2f0:	01000084 	movi	r4,2
    a2f4:	d9c14015 	stw	r7,1280(sp)
    a2f8:	d8c14d15 	stw	r3,1332(sp)
    a2fc:	d9414415 	stw	r5,1296(sp)
    a300:	d8800445 	stb	r2,17(sp)
    a304:	d8c00485 	stb	r3,18(sp)
    a308:	d8000405 	stb	zero,16(sp)
    a30c:	003e7d06 	br	9d04 <___vfprintf_internal_r+0xa38>
    a310:	d8814c17 	ldw	r2,1328(sp)
    a314:	b8c00007 	ldb	r3,0(r23)
    a318:	10801014 	ori	r2,r2,64
    a31c:	d8814c15 	stw	r2,1328(sp)
    a320:	003c6906 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a324:	d9414c17 	ldw	r5,1328(sp)
    a328:	2880020c 	andi	r2,r5,8
    a32c:	1001df26 	beq	r2,zero,aaac <___vfprintf_internal_r+0x17e0>
    a330:	39800017 	ldw	r6,0(r7)
    a334:	38800204 	addi	r2,r7,8
    a338:	d8814015 	stw	r2,1280(sp)
    a33c:	d9814215 	stw	r6,1288(sp)
    a340:	39c00117 	ldw	r7,4(r7)
    a344:	d9c14315 	stw	r7,1292(sp)
    a348:	d9014217 	ldw	r4,1288(sp)
    a34c:	d9414317 	ldw	r5,1292(sp)
    a350:	00108a80 	call	108a8 <__isinfd>
    a354:	10021726 	beq	r2,zero,abb4 <___vfprintf_internal_r+0x18e8>
    a358:	d9014217 	ldw	r4,1288(sp)
    a35c:	d9414317 	ldw	r5,1292(sp)
    a360:	000d883a 	mov	r6,zero
    a364:	000f883a 	mov	r7,zero
    a368:	00120a00 	call	120a0 <__ltdf2>
    a36c:	1002ca16 	blt	r2,zero,ae98 <___vfprintf_internal_r+0x1bcc>
    a370:	d9414d17 	ldw	r5,1332(sp)
    a374:	008011c4 	movi	r2,71
    a378:	11420a16 	blt	r2,r5,aba4 <___vfprintf_internal_r+0x18d8>
    a37c:	01820034 	movhi	r6,2048
    a380:	31812804 	addi	r6,r6,1184
    a384:	d9814115 	stw	r6,1284(sp)
    a388:	d9014c17 	ldw	r4,1328(sp)
    a38c:	00c000c4 	movi	r3,3
    a390:	00bfdfc4 	movi	r2,-129
    a394:	2088703a 	and	r4,r4,r2
    a398:	180f883a 	mov	r7,r3
    a39c:	d8c14515 	stw	r3,1300(sp)
    a3a0:	d9014c15 	stw	r4,1328(sp)
    a3a4:	d8014615 	stw	zero,1304(sp)
    a3a8:	003e6a06 	br	9d54 <___vfprintf_internal_r+0xa88>
    a3ac:	38800017 	ldw	r2,0(r7)
    a3b0:	00c00044 	movi	r3,1
    a3b4:	39c00104 	addi	r7,r7,4
    a3b8:	d9c14015 	stw	r7,1280(sp)
    a3bc:	d9000f04 	addi	r4,sp,60
    a3c0:	180f883a 	mov	r7,r3
    a3c4:	d8c14515 	stw	r3,1300(sp)
    a3c8:	d9014115 	stw	r4,1284(sp)
    a3cc:	d8800f05 	stb	r2,60(sp)
    a3d0:	d8000405 	stb	zero,16(sp)
    a3d4:	003cac06 	br	9688 <___vfprintf_internal_r+0x3bc>
    a3d8:	01420034 	movhi	r5,2048
    a3dc:	29412e04 	addi	r5,r5,1208
    a3e0:	d9414415 	stw	r5,1296(sp)
    a3e4:	d9814c17 	ldw	r6,1328(sp)
    a3e8:	3080080c 	andi	r2,r6,32
    a3ec:	1000f926 	beq	r2,zero,a7d4 <___vfprintf_internal_r+0x1508>
    a3f0:	3c000017 	ldw	r16,0(r7)
    a3f4:	3c400117 	ldw	r17,4(r7)
    a3f8:	38800204 	addi	r2,r7,8
    a3fc:	d8814015 	stw	r2,1280(sp)
    a400:	d9414c17 	ldw	r5,1328(sp)
    a404:	2880004c 	andi	r2,r5,1
    a408:	1005003a 	cmpeq	r2,r2,zero
    a40c:	1000b31e 	bne	r2,zero,a6dc <___vfprintf_internal_r+0x1410>
    a410:	8444b03a 	or	r2,r16,r17
    a414:	1000b126 	beq	r2,zero,a6dc <___vfprintf_internal_r+0x1410>
    a418:	d9814d17 	ldw	r6,1332(sp)
    a41c:	29400094 	ori	r5,r5,2
    a420:	00800c04 	movi	r2,48
    a424:	01000084 	movi	r4,2
    a428:	d9414c15 	stw	r5,1328(sp)
    a42c:	d8800445 	stb	r2,17(sp)
    a430:	d9800485 	stb	r6,18(sp)
    a434:	d8000405 	stb	zero,16(sp)
    a438:	003e3206 	br	9d04 <___vfprintf_internal_r+0xa38>
    a43c:	01820034 	movhi	r6,2048
    a440:	31812304 	addi	r6,r6,1164
    a444:	d9814415 	stw	r6,1296(sp)
    a448:	003fe606 	br	a3e4 <___vfprintf_internal_r+0x1118>
    a44c:	00800ac4 	movi	r2,43
    a450:	d8800405 	stb	r2,16(sp)
    a454:	b8c00007 	ldb	r3,0(r23)
    a458:	003c1b06 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a45c:	d8814c17 	ldw	r2,1328(sp)
    a460:	b8c00007 	ldb	r3,0(r23)
    a464:	10800054 	ori	r2,r2,1
    a468:	d8814c15 	stw	r2,1328(sp)
    a46c:	003c1606 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a470:	d8800407 	ldb	r2,16(sp)
    a474:	1000461e 	bne	r2,zero,a590 <___vfprintf_internal_r+0x12c4>
    a478:	00800804 	movi	r2,32
    a47c:	d8800405 	stb	r2,16(sp)
    a480:	b8c00007 	ldb	r3,0(r23)
    a484:	003c1006 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a488:	d9814c17 	ldw	r6,1328(sp)
    a48c:	b8c00007 	ldb	r3,0(r23)
    a490:	31800214 	ori	r6,r6,8
    a494:	d9814c15 	stw	r6,1328(sp)
    a498:	003c0b06 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a49c:	0007883a 	mov	r3,zero
    a4a0:	01000244 	movi	r4,9
    a4a4:	188002a4 	muli	r2,r3,10
    a4a8:	b8c00007 	ldb	r3,0(r23)
    a4ac:	d9814d17 	ldw	r6,1332(sp)
    a4b0:	bdc00044 	addi	r23,r23,1
    a4b4:	d8c14d15 	stw	r3,1332(sp)
    a4b8:	d9414d17 	ldw	r5,1332(sp)
    a4bc:	3085883a 	add	r2,r6,r2
    a4c0:	10fff404 	addi	r3,r2,-48
    a4c4:	28bff404 	addi	r2,r5,-48
    a4c8:	20bff62e 	bgeu	r4,r2,a4a4 <___vfprintf_internal_r+0x11d8>
    a4cc:	d8c14a15 	stw	r3,1320(sp)
    a4d0:	003bff06 	br	94d0 <___vfprintf_internal_r+0x204>
    a4d4:	d9414c17 	ldw	r5,1328(sp)
    a4d8:	b8c00007 	ldb	r3,0(r23)
    a4dc:	29402014 	ori	r5,r5,128
    a4e0:	d9414c15 	stw	r5,1328(sp)
    a4e4:	003bf806 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a4e8:	b8c00007 	ldb	r3,0(r23)
    a4ec:	00800a84 	movi	r2,42
    a4f0:	bdc00044 	addi	r23,r23,1
    a4f4:	18831526 	beq	r3,r2,b14c <___vfprintf_internal_r+0x1e80>
    a4f8:	d8c14d15 	stw	r3,1332(sp)
    a4fc:	18bff404 	addi	r2,r3,-48
    a500:	00c00244 	movi	r3,9
    a504:	18827836 	bltu	r3,r2,aee8 <___vfprintf_internal_r+0x1c1c>
    a508:	000d883a 	mov	r6,zero
    a50c:	308002a4 	muli	r2,r6,10
    a510:	b9800007 	ldb	r6,0(r23)
    a514:	d9414d17 	ldw	r5,1332(sp)
    a518:	bdc00044 	addi	r23,r23,1
    a51c:	d9814d15 	stw	r6,1332(sp)
    a520:	d9014d17 	ldw	r4,1332(sp)
    a524:	1145883a 	add	r2,r2,r5
    a528:	11bff404 	addi	r6,r2,-48
    a52c:	20bff404 	addi	r2,r4,-48
    a530:	18bff62e 	bgeu	r3,r2,a50c <___vfprintf_internal_r+0x1240>
    a534:	3027883a 	mov	r19,r6
    a538:	303be50e 	bge	r6,zero,94d0 <___vfprintf_internal_r+0x204>
    a53c:	04ffffc4 	movi	r19,-1
    a540:	003be306 	br	94d0 <___vfprintf_internal_r+0x204>
    a544:	d8000405 	stb	zero,16(sp)
    a548:	39800017 	ldw	r6,0(r7)
    a54c:	39c00104 	addi	r7,r7,4
    a550:	d9c14015 	stw	r7,1280(sp)
    a554:	d9814115 	stw	r6,1284(sp)
    a558:	3001c926 	beq	r6,zero,ac80 <___vfprintf_internal_r+0x19b4>
    a55c:	98000e16 	blt	r19,zero,a598 <___vfprintf_internal_r+0x12cc>
    a560:	d9014117 	ldw	r4,1284(sp)
    a564:	000b883a 	mov	r5,zero
    a568:	980d883a 	mov	r6,r19
    a56c:	000ef100 	call	ef10 <memchr>
    a570:	10025926 	beq	r2,zero,aed8 <___vfprintf_internal_r+0x1c0c>
    a574:	d8c14117 	ldw	r3,1284(sp)
    a578:	10cfc83a 	sub	r7,r2,r3
    a57c:	99c19e16 	blt	r19,r7,abf8 <___vfprintf_internal_r+0x192c>
    a580:	d9c14515 	stw	r7,1300(sp)
    a584:	38000916 	blt	r7,zero,a5ac <___vfprintf_internal_r+0x12e0>
    a588:	d8014615 	stw	zero,1304(sp)
    a58c:	003df106 	br	9d54 <___vfprintf_internal_r+0xa88>
    a590:	b8c00007 	ldb	r3,0(r23)
    a594:	003bcc06 	br	94c8 <___vfprintf_internal_r+0x1fc>
    a598:	d9014117 	ldw	r4,1284(sp)
    a59c:	0007ae40 	call	7ae4 <strlen>
    a5a0:	d8814515 	stw	r2,1300(sp)
    a5a4:	100f883a 	mov	r7,r2
    a5a8:	103ff70e 	bge	r2,zero,a588 <___vfprintf_internal_r+0x12bc>
    a5ac:	d8014515 	stw	zero,1300(sp)
    a5b0:	d8014615 	stw	zero,1304(sp)
    a5b4:	003de706 	br	9d54 <___vfprintf_internal_r+0xa88>
    a5b8:	20c03fcc 	andi	r3,r4,255
    a5bc:	00800044 	movi	r2,1
    a5c0:	18802d26 	beq	r3,r2,a678 <___vfprintf_internal_r+0x13ac>
    a5c4:	18800e36 	bltu	r3,r2,a600 <___vfprintf_internal_r+0x1334>
    a5c8:	00800084 	movi	r2,2
    a5cc:	1880fa26 	beq	r3,r2,a9b8 <___vfprintf_internal_r+0x16ec>
    a5d0:	01020034 	movhi	r4,2048
    a5d4:	21013304 	addi	r4,r4,1228
    a5d8:	0007ae40 	call	7ae4 <strlen>
    a5dc:	100f883a 	mov	r7,r2
    a5e0:	dcc14515 	stw	r19,1300(sp)
    a5e4:	9880010e 	bge	r19,r2,a5ec <___vfprintf_internal_r+0x1320>
    a5e8:	d8814515 	stw	r2,1300(sp)
    a5ec:	00820034 	movhi	r2,2048
    a5f0:	10813304 	addi	r2,r2,1228
    a5f4:	dcc14615 	stw	r19,1304(sp)
    a5f8:	d8814115 	stw	r2,1284(sp)
    a5fc:	003dd506 	br	9d54 <___vfprintf_internal_r+0xa88>
    a600:	d9401904 	addi	r5,sp,100
    a604:	dd000f04 	addi	r20,sp,60
    a608:	d9414115 	stw	r5,1284(sp)
    a60c:	880a977a 	slli	r5,r17,29
    a610:	d9814117 	ldw	r6,1284(sp)
    a614:	8004d0fa 	srli	r2,r16,3
    a618:	8806d0fa 	srli	r3,r17,3
    a61c:	810001cc 	andi	r4,r16,7
    a620:	2884b03a 	or	r2,r5,r2
    a624:	31bfffc4 	addi	r6,r6,-1
    a628:	21000c04 	addi	r4,r4,48
    a62c:	d9814115 	stw	r6,1284(sp)
    a630:	10cab03a 	or	r5,r2,r3
    a634:	31000005 	stb	r4,0(r6)
    a638:	1021883a 	mov	r16,r2
    a63c:	1823883a 	mov	r17,r3
    a640:	283ff21e 	bne	r5,zero,a60c <___vfprintf_internal_r+0x1340>
    a644:	d8c14c17 	ldw	r3,1328(sp)
    a648:	1880004c 	andi	r2,r3,1
    a64c:	1005003a 	cmpeq	r2,r2,zero
    a650:	103db91e 	bne	r2,zero,9d38 <___vfprintf_internal_r+0xa6c>
    a654:	20803fcc 	andi	r2,r4,255
    a658:	1080201c 	xori	r2,r2,128
    a65c:	10bfe004 	addi	r2,r2,-128
    a660:	00c00c04 	movi	r3,48
    a664:	10fdb426 	beq	r2,r3,9d38 <___vfprintf_internal_r+0xa6c>
    a668:	31bfffc4 	addi	r6,r6,-1
    a66c:	d9814115 	stw	r6,1284(sp)
    a670:	30c00005 	stb	r3,0(r6)
    a674:	003db006 	br	9d38 <___vfprintf_internal_r+0xa6c>
    a678:	88800068 	cmpgeui	r2,r17,1
    a67c:	10002c1e 	bne	r2,zero,a730 <___vfprintf_internal_r+0x1464>
    a680:	8800021e 	bne	r17,zero,a68c <___vfprintf_internal_r+0x13c0>
    a684:	00800244 	movi	r2,9
    a688:	14002936 	bltu	r2,r16,a730 <___vfprintf_internal_r+0x1464>
    a68c:	d90018c4 	addi	r4,sp,99
    a690:	dd000f04 	addi	r20,sp,60
    a694:	d9014115 	stw	r4,1284(sp)
    a698:	d9014117 	ldw	r4,1284(sp)
    a69c:	80800c04 	addi	r2,r16,48
    a6a0:	20800005 	stb	r2,0(r4)
    a6a4:	003da406 	br	9d38 <___vfprintf_internal_r+0xa6c>
    a6a8:	dc400d17 	ldw	r17,52(sp)
    a6ac:	07020034 	movhi	fp,2048
    a6b0:	e7013a84 	addi	fp,fp,1258
    a6b4:	9425883a 	add	r18,r18,r16
    a6b8:	8c400044 	addi	r17,r17,1
    a6bc:	008001c4 	movi	r2,7
    a6c0:	1f000015 	stw	fp,0(r3)
    a6c4:	1c000115 	stw	r16,4(r3)
    a6c8:	dc800e15 	stw	r18,56(sp)
    a6cc:	dc400d15 	stw	r17,52(sp)
    a6d0:	147de216 	blt	r2,r17,9e5c <___vfprintf_internal_r+0xb90>
    a6d4:	18c00204 	addi	r3,r3,8
    a6d8:	003c7a06 	br	98c4 <___vfprintf_internal_r+0x5f8>
    a6dc:	01000084 	movi	r4,2
    a6e0:	d8000405 	stb	zero,16(sp)
    a6e4:	003d8706 	br	9d04 <___vfprintf_internal_r+0xa38>
    a6e8:	d9814c17 	ldw	r6,1328(sp)
    a6ec:	30c4703a 	and	r2,r6,r3
    a6f0:	1005003a 	cmpeq	r2,r2,zero
    a6f4:	103cb926 	beq	r2,zero,99dc <___vfprintf_internal_r+0x710>
    a6f8:	d9014117 	ldw	r4,1284(sp)
    a6fc:	94800044 	addi	r18,r18,1
    a700:	8c400044 	addi	r17,r17,1
    a704:	008001c4 	movi	r2,7
    a708:	a9000015 	stw	r4,0(r21)
    a70c:	a8c00115 	stw	r3,4(r21)
    a710:	dc800e15 	stw	r18,56(sp)
    a714:	dc400d15 	stw	r17,52(sp)
    a718:	147e6616 	blt	r2,r17,a0b4 <___vfprintf_internal_r+0xde8>
    a71c:	acc00204 	addi	r19,r21,8
    a720:	003cd706 	br	9a80 <___vfprintf_internal_r+0x7b4>
    a724:	07020034 	movhi	fp,2048
    a728:	e7013a84 	addi	fp,fp,1258
    a72c:	003c4f06 	br	986c <___vfprintf_internal_r+0x5a0>
    a730:	dd000f04 	addi	r20,sp,60
    a734:	dc801904 	addi	r18,sp,100
    a738:	8009883a 	mov	r4,r16
    a73c:	880b883a 	mov	r5,r17
    a740:	01800284 	movi	r6,10
    a744:	000f883a 	mov	r7,zero
    a748:	00117f00 	call	117f0 <__umoddi3>
    a74c:	12000c04 	addi	r8,r2,48
    a750:	94bfffc4 	addi	r18,r18,-1
    a754:	8009883a 	mov	r4,r16
    a758:	880b883a 	mov	r5,r17
    a75c:	01800284 	movi	r6,10
    a760:	000f883a 	mov	r7,zero
    a764:	92000005 	stb	r8,0(r18)
    a768:	00112140 	call	11214 <__udivdi3>
    a76c:	1009883a 	mov	r4,r2
    a770:	1021883a 	mov	r16,r2
    a774:	18800068 	cmpgeui	r2,r3,1
    a778:	1823883a 	mov	r17,r3
    a77c:	103fee1e 	bne	r2,zero,a738 <___vfprintf_internal_r+0x146c>
    a780:	1800021e 	bne	r3,zero,a78c <___vfprintf_internal_r+0x14c0>
    a784:	00800244 	movi	r2,9
    a788:	113feb36 	bltu	r2,r4,a738 <___vfprintf_internal_r+0x146c>
    a78c:	94bfffc4 	addi	r18,r18,-1
    a790:	dc814115 	stw	r18,1284(sp)
    a794:	003fc006 	br	a698 <___vfprintf_internal_r+0x13cc>
    a798:	d9014c17 	ldw	r4,1328(sp)
    a79c:	2080004c 	andi	r2,r4,1
    a7a0:	10009a1e 	bne	r2,zero,aa0c <___vfprintf_internal_r+0x1740>
    a7a4:	d9401904 	addi	r5,sp,100
    a7a8:	dd000f04 	addi	r20,sp,60
    a7ac:	d9414115 	stw	r5,1284(sp)
    a7b0:	003d6106 	br	9d38 <___vfprintf_internal_r+0xa6c>
    a7b4:	d9014f17 	ldw	r4,1340(sp)
    a7b8:	b00b883a 	mov	r5,r22
    a7bc:	d9800c04 	addi	r6,sp,48
    a7c0:	00092740 	call	9274 <__sprint_r>
    a7c4:	103c791e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a7c8:	dc800e17 	ldw	r18,56(sp)
    a7cc:	d8c01904 	addi	r3,sp,100
    a7d0:	003cff06 	br	9bd0 <___vfprintf_internal_r+0x904>
    a7d4:	d8c14c17 	ldw	r3,1328(sp)
    a7d8:	1880040c 	andi	r2,r3,16
    a7dc:	1000711e 	bne	r2,zero,a9a4 <___vfprintf_internal_r+0x16d8>
    a7e0:	d9014c17 	ldw	r4,1328(sp)
    a7e4:	2080100c 	andi	r2,r4,64
    a7e8:	10006e26 	beq	r2,zero,a9a4 <___vfprintf_internal_r+0x16d8>
    a7ec:	3c00000b 	ldhu	r16,0(r7)
    a7f0:	0023883a 	mov	r17,zero
    a7f4:	39c00104 	addi	r7,r7,4
    a7f8:	d9c14015 	stw	r7,1280(sp)
    a7fc:	003f0006 	br	a400 <___vfprintf_internal_r+0x1134>
    a800:	dc400d17 	ldw	r17,52(sp)
    a804:	07020034 	movhi	fp,2048
    a808:	e7013a84 	addi	fp,fp,1258
    a80c:	9425883a 	add	r18,r18,r16
    a810:	8c400044 	addi	r17,r17,1
    a814:	008001c4 	movi	r2,7
    a818:	1f000015 	stw	fp,0(r3)
    a81c:	1c000115 	stw	r16,4(r3)
    a820:	dc800e15 	stw	r18,56(sp)
    a824:	dc400d15 	stw	r17,52(sp)
    a828:	147d7616 	blt	r2,r17,9e04 <___vfprintf_internal_r+0xb38>
    a82c:	18c00204 	addi	r3,r3,8
    a830:	003d7b06 	br	9e20 <___vfprintf_internal_r+0xb54>
    a834:	dc800e17 	ldw	r18,56(sp)
    a838:	dc400d17 	ldw	r17,52(sp)
    a83c:	07020034 	movhi	fp,2048
    a840:	e7013e84 	addi	fp,fp,1274
    a844:	003bc006 	br	9748 <___vfprintf_internal_r+0x47c>
    a848:	d9014f17 	ldw	r4,1340(sp)
    a84c:	b00b883a 	mov	r5,r22
    a850:	d9800c04 	addi	r6,sp,48
    a854:	00092740 	call	9274 <__sprint_r>
    a858:	103c541e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a85c:	dc800e17 	ldw	r18,56(sp)
    a860:	d8c01904 	addi	r3,sp,100
    a864:	003ce906 	br	9c0c <___vfprintf_internal_r+0x940>
    a868:	3c000017 	ldw	r16,0(r7)
    a86c:	0009883a 	mov	r4,zero
    a870:	39c00104 	addi	r7,r7,4
    a874:	0023883a 	mov	r17,zero
    a878:	d9c14015 	stw	r7,1280(sp)
    a87c:	d8000405 	stb	zero,16(sp)
    a880:	003d2006 	br	9d04 <___vfprintf_internal_r+0xa38>
    a884:	38800017 	ldw	r2,0(r7)
    a888:	39c00104 	addi	r7,r7,4
    a88c:	d9c14015 	stw	r7,1280(sp)
    a890:	1023d7fa 	srai	r17,r2,31
    a894:	1021883a 	mov	r16,r2
    a898:	003d1806 	br	9cfc <___vfprintf_internal_r+0xa30>
    a89c:	3c000017 	ldw	r16,0(r7)
    a8a0:	01000044 	movi	r4,1
    a8a4:	39c00104 	addi	r7,r7,4
    a8a8:	0023883a 	mov	r17,zero
    a8ac:	d9c14015 	stw	r7,1280(sp)
    a8b0:	d8000405 	stb	zero,16(sp)
    a8b4:	003d1306 	br	9d04 <___vfprintf_internal_r+0xa38>
    a8b8:	00820034 	movhi	r2,2048
    a8bc:	10813a04 	addi	r2,r2,1256
    a8c0:	94800044 	addi	r18,r18,1
    a8c4:	8c400044 	addi	r17,r17,1
    a8c8:	a8800015 	stw	r2,0(r21)
    a8cc:	00c00044 	movi	r3,1
    a8d0:	008001c4 	movi	r2,7
    a8d4:	a8c00115 	stw	r3,4(r21)
    a8d8:	dc800e15 	stw	r18,56(sp)
    a8dc:	dc400d15 	stw	r17,52(sp)
    a8e0:	1440ca16 	blt	r2,r17,ac0c <___vfprintf_internal_r+0x1940>
    a8e4:	a8c00204 	addi	r3,r21,8
    a8e8:	2000061e 	bne	r4,zero,a904 <___vfprintf_internal_r+0x1638>
    a8ec:	d9414717 	ldw	r5,1308(sp)
    a8f0:	2800041e 	bne	r5,zero,a904 <___vfprintf_internal_r+0x1638>
    a8f4:	d9814c17 	ldw	r6,1328(sp)
    a8f8:	3080004c 	andi	r2,r6,1
    a8fc:	1005003a 	cmpeq	r2,r2,zero
    a900:	103bf01e 	bne	r2,zero,98c4 <___vfprintf_internal_r+0x5f8>
    a904:	00800044 	movi	r2,1
    a908:	dc400d17 	ldw	r17,52(sp)
    a90c:	18800115 	stw	r2,4(r3)
    a910:	d8814917 	ldw	r2,1316(sp)
    a914:	94800044 	addi	r18,r18,1
    a918:	8c400044 	addi	r17,r17,1
    a91c:	18800015 	stw	r2,0(r3)
    a920:	008001c4 	movi	r2,7
    a924:	dc800e15 	stw	r18,56(sp)
    a928:	dc400d15 	stw	r17,52(sp)
    a92c:	1440ca16 	blt	r2,r17,ac58 <___vfprintf_internal_r+0x198c>
    a930:	18c00204 	addi	r3,r3,8
    a934:	0121c83a 	sub	r16,zero,r4
    a938:	0400500e 	bge	zero,r16,aa7c <___vfprintf_internal_r+0x17b0>
    a93c:	00800404 	movi	r2,16
    a940:	1400800e 	bge	r2,r16,ab44 <___vfprintf_internal_r+0x1878>
    a944:	1027883a 	mov	r19,r2
    a948:	07020034 	movhi	fp,2048
    a94c:	e7013a84 	addi	fp,fp,1258
    a950:	050001c4 	movi	r20,7
    a954:	00000306 	br	a964 <___vfprintf_internal_r+0x1698>
    a958:	18c00204 	addi	r3,r3,8
    a95c:	843ffc04 	addi	r16,r16,-16
    a960:	9c007a0e 	bge	r19,r16,ab4c <___vfprintf_internal_r+0x1880>
    a964:	94800404 	addi	r18,r18,16
    a968:	8c400044 	addi	r17,r17,1
    a96c:	1f000015 	stw	fp,0(r3)
    a970:	1cc00115 	stw	r19,4(r3)
    a974:	dc800e15 	stw	r18,56(sp)
    a978:	dc400d15 	stw	r17,52(sp)
    a97c:	a47ff60e 	bge	r20,r17,a958 <___vfprintf_internal_r+0x168c>
    a980:	d9014f17 	ldw	r4,1340(sp)
    a984:	b00b883a 	mov	r5,r22
    a988:	d9800c04 	addi	r6,sp,48
    a98c:	00092740 	call	9274 <__sprint_r>
    a990:	103c061e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    a994:	dc800e17 	ldw	r18,56(sp)
    a998:	dc400d17 	ldw	r17,52(sp)
    a99c:	d8c01904 	addi	r3,sp,100
    a9a0:	003fee06 	br	a95c <___vfprintf_internal_r+0x1690>
    a9a4:	3c000017 	ldw	r16,0(r7)
    a9a8:	0023883a 	mov	r17,zero
    a9ac:	39c00104 	addi	r7,r7,4
    a9b0:	d9c14015 	stw	r7,1280(sp)
    a9b4:	003e9206 	br	a400 <___vfprintf_internal_r+0x1134>
    a9b8:	d9401904 	addi	r5,sp,100
    a9bc:	dd000f04 	addi	r20,sp,60
    a9c0:	d9414115 	stw	r5,1284(sp)
    a9c4:	d9814417 	ldw	r6,1296(sp)
    a9c8:	880a973a 	slli	r5,r17,28
    a9cc:	8004d13a 	srli	r2,r16,4
    a9d0:	810003cc 	andi	r4,r16,15
    a9d4:	3109883a 	add	r4,r6,r4
    a9d8:	2884b03a 	or	r2,r5,r2
    a9dc:	21400003 	ldbu	r5,0(r4)
    a9e0:	d9014117 	ldw	r4,1284(sp)
    a9e4:	8806d13a 	srli	r3,r17,4
    a9e8:	1021883a 	mov	r16,r2
    a9ec:	213fffc4 	addi	r4,r4,-1
    a9f0:	d9014115 	stw	r4,1284(sp)
    a9f4:	d9814117 	ldw	r6,1284(sp)
    a9f8:	10c8b03a 	or	r4,r2,r3
    a9fc:	1823883a 	mov	r17,r3
    aa00:	31400005 	stb	r5,0(r6)
    aa04:	203fef1e 	bne	r4,zero,a9c4 <___vfprintf_internal_r+0x16f8>
    aa08:	003ccb06 	br	9d38 <___vfprintf_internal_r+0xa6c>
    aa0c:	00800c04 	movi	r2,48
    aa10:	d98018c4 	addi	r6,sp,99
    aa14:	dd000f04 	addi	r20,sp,60
    aa18:	d88018c5 	stb	r2,99(sp)
    aa1c:	d9814115 	stw	r6,1284(sp)
    aa20:	003cc506 	br	9d38 <___vfprintf_internal_r+0xa6c>
    aa24:	dc400d17 	ldw	r17,52(sp)
    aa28:	07020034 	movhi	fp,2048
    aa2c:	e7013e84 	addi	fp,fp,1274
    aa30:	003bc706 	br	9950 <___vfprintf_internal_r+0x684>
    aa34:	d9414c17 	ldw	r5,1328(sp)
    aa38:	2880040c 	andi	r2,r5,16
    aa3c:	10007c26 	beq	r2,zero,ac30 <___vfprintf_internal_r+0x1964>
    aa40:	38800017 	ldw	r2,0(r7)
    aa44:	39c00104 	addi	r7,r7,4
    aa48:	d9c14015 	stw	r7,1280(sp)
    aa4c:	d9814b17 	ldw	r6,1324(sp)
    aa50:	d9c14017 	ldw	r7,1280(sp)
    aa54:	11800015 	stw	r6,0(r2)
    aa58:	003a7806 	br	943c <___vfprintf_internal_r+0x170>
    aa5c:	d9014f17 	ldw	r4,1340(sp)
    aa60:	b00b883a 	mov	r5,r22
    aa64:	d9800c04 	addi	r6,sp,48
    aa68:	00092740 	call	9274 <__sprint_r>
    aa6c:	103bcf1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    aa70:	dc800e17 	ldw	r18,56(sp)
    aa74:	dc400d17 	ldw	r17,52(sp)
    aa78:	d8c01904 	addi	r3,sp,100
    aa7c:	d9014717 	ldw	r4,1308(sp)
    aa80:	d9414117 	ldw	r5,1284(sp)
    aa84:	8c400044 	addi	r17,r17,1
    aa88:	9125883a 	add	r18,r18,r4
    aa8c:	008001c4 	movi	r2,7
    aa90:	19400015 	stw	r5,0(r3)
    aa94:	19000115 	stw	r4,4(r3)
    aa98:	dc800e15 	stw	r18,56(sp)
    aa9c:	dc400d15 	stw	r17,52(sp)
    aaa0:	147cee16 	blt	r2,r17,9e5c <___vfprintf_internal_r+0xb90>
    aaa4:	18c00204 	addi	r3,r3,8
    aaa8:	003b8606 	br	98c4 <___vfprintf_internal_r+0x5f8>
    aaac:	38c00017 	ldw	r3,0(r7)
    aab0:	39000204 	addi	r4,r7,8
    aab4:	d9014015 	stw	r4,1280(sp)
    aab8:	d8c14215 	stw	r3,1288(sp)
    aabc:	39c00117 	ldw	r7,4(r7)
    aac0:	d9c14315 	stw	r7,1292(sp)
    aac4:	003e2006 	br	a348 <___vfprintf_internal_r+0x107c>
    aac8:	0005883a 	mov	r2,zero
    aacc:	1409c83a 	sub	r4,r2,r16
    aad0:	1105803a 	cmpltu	r2,r2,r4
    aad4:	044bc83a 	sub	r5,zero,r17
    aad8:	2885c83a 	sub	r2,r5,r2
    aadc:	2021883a 	mov	r16,r4
    aae0:	1023883a 	mov	r17,r2
    aae4:	01000044 	movi	r4,1
    aae8:	00800b44 	movi	r2,45
    aaec:	d8800405 	stb	r2,16(sp)
    aaf0:	003c8406 	br	9d04 <___vfprintf_internal_r+0xa38>
    aaf4:	d9014f17 	ldw	r4,1340(sp)
    aaf8:	b00b883a 	mov	r5,r22
    aafc:	d9800c04 	addi	r6,sp,48
    ab00:	00092740 	call	9274 <__sprint_r>
    ab04:	103ba91e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    ab08:	dc800e17 	ldw	r18,56(sp)
    ab0c:	dc400d17 	ldw	r17,52(sp)
    ab10:	d9000517 	ldw	r4,20(sp)
    ab14:	d9401904 	addi	r5,sp,100
    ab18:	003da706 	br	a1b8 <___vfprintf_internal_r+0xeec>
    ab1c:	d9014f17 	ldw	r4,1340(sp)
    ab20:	b00b883a 	mov	r5,r22
    ab24:	d9800c04 	addi	r6,sp,48
    ab28:	00092740 	call	9274 <__sprint_r>
    ab2c:	103b9f1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    ab30:	dc800e17 	ldw	r18,56(sp)
    ab34:	dc400d17 	ldw	r17,52(sp)
    ab38:	d9000517 	ldw	r4,20(sp)
    ab3c:	d8c01904 	addi	r3,sp,100
    ab40:	003d9106 	br	a188 <___vfprintf_internal_r+0xebc>
    ab44:	07020034 	movhi	fp,2048
    ab48:	e7013a84 	addi	fp,fp,1258
    ab4c:	9425883a 	add	r18,r18,r16
    ab50:	8c400044 	addi	r17,r17,1
    ab54:	008001c4 	movi	r2,7
    ab58:	1f000015 	stw	fp,0(r3)
    ab5c:	1c000115 	stw	r16,4(r3)
    ab60:	dc800e15 	stw	r18,56(sp)
    ab64:	dc400d15 	stw	r17,52(sp)
    ab68:	147fbc16 	blt	r2,r17,aa5c <___vfprintf_internal_r+0x1790>
    ab6c:	18c00204 	addi	r3,r3,8
    ab70:	003fc206 	br	aa7c <___vfprintf_internal_r+0x17b0>
    ab74:	d9014f17 	ldw	r4,1340(sp)
    ab78:	b00b883a 	mov	r5,r22
    ab7c:	d9800c04 	addi	r6,sp,48
    ab80:	00092740 	call	9274 <__sprint_r>
    ab84:	103b891e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    ab88:	dc800e17 	ldw	r18,56(sp)
    ab8c:	d9000517 	ldw	r4,20(sp)
    ab90:	d8c01904 	addi	r3,sp,100
    ab94:	003d0206 	br	9fa0 <___vfprintf_internal_r+0xcd4>
    ab98:	07020034 	movhi	fp,2048
    ab9c:	e7013a84 	addi	fp,fp,1258
    aba0:	003be406 	br	9b34 <___vfprintf_internal_r+0x868>
    aba4:	00820034 	movhi	r2,2048
    aba8:	10812904 	addi	r2,r2,1188
    abac:	d8814115 	stw	r2,1284(sp)
    abb0:	003df506 	br	a388 <___vfprintf_internal_r+0x10bc>
    abb4:	d9014217 	ldw	r4,1288(sp)
    abb8:	d9414317 	ldw	r5,1292(sp)
    abbc:	00108e80 	call	108e8 <__isnand>
    abc0:	10003926 	beq	r2,zero,aca8 <___vfprintf_internal_r+0x19dc>
    abc4:	d9414d17 	ldw	r5,1332(sp)
    abc8:	008011c4 	movi	r2,71
    abcc:	1140ce16 	blt	r2,r5,af08 <___vfprintf_internal_r+0x1c3c>
    abd0:	01820034 	movhi	r6,2048
    abd4:	31812a04 	addi	r6,r6,1192
    abd8:	d9814115 	stw	r6,1284(sp)
    abdc:	003dea06 	br	a388 <___vfprintf_internal_r+0x10bc>
    abe0:	d9014c17 	ldw	r4,1328(sp)
    abe4:	bdc00044 	addi	r23,r23,1
    abe8:	b8c00007 	ldb	r3,0(r23)
    abec:	21000814 	ori	r4,r4,32
    abf0:	d9014c15 	stw	r4,1328(sp)
    abf4:	003a3406 	br	94c8 <___vfprintf_internal_r+0x1fc>
    abf8:	dcc14515 	stw	r19,1300(sp)
    abfc:	98011016 	blt	r19,zero,b040 <___vfprintf_internal_r+0x1d74>
    ac00:	980f883a 	mov	r7,r19
    ac04:	d8014615 	stw	zero,1304(sp)
    ac08:	003c5206 	br	9d54 <___vfprintf_internal_r+0xa88>
    ac0c:	d9014f17 	ldw	r4,1340(sp)
    ac10:	b00b883a 	mov	r5,r22
    ac14:	d9800c04 	addi	r6,sp,48
    ac18:	00092740 	call	9274 <__sprint_r>
    ac1c:	103b631e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    ac20:	dc800e17 	ldw	r18,56(sp)
    ac24:	d9000517 	ldw	r4,20(sp)
    ac28:	d8c01904 	addi	r3,sp,100
    ac2c:	003f2e06 	br	a8e8 <___vfprintf_internal_r+0x161c>
    ac30:	d8c14c17 	ldw	r3,1328(sp)
    ac34:	1880100c 	andi	r2,r3,64
    ac38:	1000a026 	beq	r2,zero,aebc <___vfprintf_internal_r+0x1bf0>
    ac3c:	38800017 	ldw	r2,0(r7)
    ac40:	39c00104 	addi	r7,r7,4
    ac44:	d9c14015 	stw	r7,1280(sp)
    ac48:	d9014b17 	ldw	r4,1324(sp)
    ac4c:	d9c14017 	ldw	r7,1280(sp)
    ac50:	1100000d 	sth	r4,0(r2)
    ac54:	0039f906 	br	943c <___vfprintf_internal_r+0x170>
    ac58:	d9014f17 	ldw	r4,1340(sp)
    ac5c:	b00b883a 	mov	r5,r22
    ac60:	d9800c04 	addi	r6,sp,48
    ac64:	00092740 	call	9274 <__sprint_r>
    ac68:	103b501e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    ac6c:	dc800e17 	ldw	r18,56(sp)
    ac70:	dc400d17 	ldw	r17,52(sp)
    ac74:	d9000517 	ldw	r4,20(sp)
    ac78:	d8c01904 	addi	r3,sp,100
    ac7c:	003f2d06 	br	a934 <___vfprintf_internal_r+0x1668>
    ac80:	00800184 	movi	r2,6
    ac84:	14c09a36 	bltu	r2,r19,aef0 <___vfprintf_internal_r+0x1c24>
    ac88:	dcc14515 	stw	r19,1300(sp)
    ac8c:	9800010e 	bge	r19,zero,ac94 <___vfprintf_internal_r+0x19c8>
    ac90:	d8014515 	stw	zero,1300(sp)
    ac94:	00820034 	movhi	r2,2048
    ac98:	10812c04 	addi	r2,r2,1200
    ac9c:	980f883a 	mov	r7,r19
    aca0:	d8814115 	stw	r2,1284(sp)
    aca4:	003a7806 	br	9688 <___vfprintf_internal_r+0x3bc>
    aca8:	00bfffc4 	movi	r2,-1
    acac:	9880e226 	beq	r19,r2,b038 <___vfprintf_internal_r+0x1d6c>
    acb0:	d9414d17 	ldw	r5,1332(sp)
    acb4:	008019c4 	movi	r2,103
    acb8:	2880dc26 	beq	r5,r2,b02c <___vfprintf_internal_r+0x1d60>
    acbc:	008011c4 	movi	r2,71
    acc0:	2880da26 	beq	r5,r2,b02c <___vfprintf_internal_r+0x1d60>
    acc4:	d9414c17 	ldw	r5,1328(sp)
    acc8:	d9014317 	ldw	r4,1292(sp)
    accc:	d9814217 	ldw	r6,1288(sp)
    acd0:	29404014 	ori	r5,r5,256
    acd4:	d9414c15 	stw	r5,1328(sp)
    acd8:	2000cc16 	blt	r4,zero,b00c <___vfprintf_internal_r+0x1d40>
    acdc:	3021883a 	mov	r16,r6
    ace0:	2023883a 	mov	r17,r4
    ace4:	0039883a 	mov	fp,zero
    ace8:	d9414d17 	ldw	r5,1332(sp)
    acec:	00801984 	movi	r2,102
    acf0:	2880b726 	beq	r5,r2,afd0 <___vfprintf_internal_r+0x1d04>
    acf4:	00801184 	movi	r2,70
    acf8:	2880b526 	beq	r5,r2,afd0 <___vfprintf_internal_r+0x1d04>
    acfc:	00801944 	movi	r2,101
    ad00:	2880c826 	beq	r5,r2,b024 <___vfprintf_internal_r+0x1d58>
    ad04:	00801144 	movi	r2,69
    ad08:	2880c626 	beq	r5,r2,b024 <___vfprintf_internal_r+0x1d58>
    ad0c:	9829883a 	mov	r20,r19
    ad10:	d9014f17 	ldw	r4,1340(sp)
    ad14:	d8800504 	addi	r2,sp,20
    ad18:	880d883a 	mov	r6,r17
    ad1c:	d8800115 	stw	r2,4(sp)
    ad20:	d8c00604 	addi	r3,sp,24
    ad24:	d8800704 	addi	r2,sp,28
    ad28:	800b883a 	mov	r5,r16
    ad2c:	01c00084 	movi	r7,2
    ad30:	d8c00215 	stw	r3,8(sp)
    ad34:	d8800315 	stw	r2,12(sp)
    ad38:	dd000015 	stw	r20,0(sp)
    ad3c:	000b4f00 	call	b4f0 <_dtoa_r>
    ad40:	d9814d17 	ldw	r6,1332(sp)
    ad44:	d8814115 	stw	r2,1284(sp)
    ad48:	008019c4 	movi	r2,103
    ad4c:	30809526 	beq	r6,r2,afa4 <___vfprintf_internal_r+0x1cd8>
    ad50:	d8c14d17 	ldw	r3,1332(sp)
    ad54:	008011c4 	movi	r2,71
    ad58:	18809226 	beq	r3,r2,afa4 <___vfprintf_internal_r+0x1cd8>
    ad5c:	d9414117 	ldw	r5,1284(sp)
    ad60:	d9814d17 	ldw	r6,1332(sp)
    ad64:	00801984 	movi	r2,102
    ad68:	2d25883a 	add	r18,r5,r20
    ad6c:	30808626 	beq	r6,r2,af88 <___vfprintf_internal_r+0x1cbc>
    ad70:	00801184 	movi	r2,70
    ad74:	30808426 	beq	r6,r2,af88 <___vfprintf_internal_r+0x1cbc>
    ad78:	000d883a 	mov	r6,zero
    ad7c:	000f883a 	mov	r7,zero
    ad80:	880b883a 	mov	r5,r17
    ad84:	8009883a 	mov	r4,r16
    ad88:	0011f080 	call	11f08 <__eqdf2>
    ad8c:	1000751e 	bne	r2,zero,af64 <___vfprintf_internal_r+0x1c98>
    ad90:	9005883a 	mov	r2,r18
    ad94:	dc800715 	stw	r18,28(sp)
    ad98:	d9014117 	ldw	r4,1284(sp)
    ad9c:	d9414d17 	ldw	r5,1332(sp)
    ada0:	00c019c4 	movi	r3,103
    ada4:	1125c83a 	sub	r18,r2,r4
    ada8:	28c06826 	beq	r5,r3,af4c <___vfprintf_internal_r+0x1c80>
    adac:	008011c4 	movi	r2,71
    adb0:	28806626 	beq	r5,r2,af4c <___vfprintf_internal_r+0x1c80>
    adb4:	d9000517 	ldw	r4,20(sp)
    adb8:	d8c14d17 	ldw	r3,1332(sp)
    adbc:	00801944 	movi	r2,101
    adc0:	10c05516 	blt	r2,r3,af18 <___vfprintf_internal_r+0x1c4c>
    adc4:	213fffc4 	addi	r4,r4,-1
    adc8:	d9000515 	stw	r4,20(sp)
    adcc:	d8c00805 	stb	r3,32(sp)
    add0:	2021883a 	mov	r16,r4
    add4:	2000c116 	blt	r4,zero,b0dc <___vfprintf_internal_r+0x1e10>
    add8:	00800ac4 	movi	r2,43
    addc:	d8800845 	stb	r2,33(sp)
    ade0:	00800244 	movi	r2,9
    ade4:	1400af0e 	bge	r2,r16,b0a4 <___vfprintf_internal_r+0x1dd8>
    ade8:	1027883a 	mov	r19,r2
    adec:	dc400b84 	addi	r17,sp,46
    adf0:	8009883a 	mov	r4,r16
    adf4:	01400284 	movi	r5,10
    adf8:	00124940 	call	12494 <__modsi3>
    adfc:	10800c04 	addi	r2,r2,48
    ae00:	8c7fffc4 	addi	r17,r17,-1
    ae04:	8009883a 	mov	r4,r16
    ae08:	01400284 	movi	r5,10
    ae0c:	88800005 	stb	r2,0(r17)
    ae10:	00124340 	call	12434 <__divsi3>
    ae14:	1021883a 	mov	r16,r2
    ae18:	98bff516 	blt	r19,r2,adf0 <___vfprintf_internal_r+0x1b24>
    ae1c:	10c00c04 	addi	r3,r2,48
    ae20:	d88009c4 	addi	r2,sp,39
    ae24:	108001c4 	addi	r2,r2,7
    ae28:	897fffc4 	addi	r5,r17,-1
    ae2c:	88ffffc5 	stb	r3,-1(r17)
    ae30:	2880a72e 	bgeu	r5,r2,b0d0 <___vfprintf_internal_r+0x1e04>
    ae34:	1009883a 	mov	r4,r2
    ae38:	d9800804 	addi	r6,sp,32
    ae3c:	d8c00884 	addi	r3,sp,34
    ae40:	28800003 	ldbu	r2,0(r5)
    ae44:	29400044 	addi	r5,r5,1
    ae48:	18800005 	stb	r2,0(r3)
    ae4c:	18c00044 	addi	r3,r3,1
    ae50:	293ffb36 	bltu	r5,r4,ae40 <___vfprintf_internal_r+0x1b74>
    ae54:	1987c83a 	sub	r3,r3,r6
    ae58:	00800044 	movi	r2,1
    ae5c:	d8c14815 	stw	r3,1312(sp)
    ae60:	90cf883a 	add	r7,r18,r3
    ae64:	1480960e 	bge	r2,r18,b0c0 <___vfprintf_internal_r+0x1df4>
    ae68:	39c00044 	addi	r7,r7,1
    ae6c:	d9c14515 	stw	r7,1300(sp)
    ae70:	38003416 	blt	r7,zero,af44 <___vfprintf_internal_r+0x1c78>
    ae74:	e0803fcc 	andi	r2,fp,255
    ae78:	1080201c 	xori	r2,r2,128
    ae7c:	10bfe004 	addi	r2,r2,-128
    ae80:	10004e26 	beq	r2,zero,afbc <___vfprintf_internal_r+0x1cf0>
    ae84:	00800b44 	movi	r2,45
    ae88:	dc814715 	stw	r18,1308(sp)
    ae8c:	d8014615 	stw	zero,1304(sp)
    ae90:	d8800405 	stb	r2,16(sp)
    ae94:	003bb106 	br	9d5c <___vfprintf_internal_r+0xa90>
    ae98:	00800b44 	movi	r2,45
    ae9c:	d8800405 	stb	r2,16(sp)
    aea0:	003d3306 	br	a370 <___vfprintf_internal_r+0x10a4>
    aea4:	d9014f17 	ldw	r4,1340(sp)
    aea8:	b00b883a 	mov	r5,r22
    aeac:	d9800c04 	addi	r6,sp,48
    aeb0:	00092740 	call	9274 <__sprint_r>
    aeb4:	103abd1e 	bne	r2,zero,99ac <___vfprintf_internal_r+0x6e0>
    aeb8:	003abb06 	br	99a8 <___vfprintf_internal_r+0x6dc>
    aebc:	38800017 	ldw	r2,0(r7)
    aec0:	39c00104 	addi	r7,r7,4
    aec4:	d9c14015 	stw	r7,1280(sp)
    aec8:	d9414b17 	ldw	r5,1324(sp)
    aecc:	d9c14017 	ldw	r7,1280(sp)
    aed0:	11400015 	stw	r5,0(r2)
    aed4:	00395906 	br	943c <___vfprintf_internal_r+0x170>
    aed8:	980f883a 	mov	r7,r19
    aedc:	dcc14515 	stw	r19,1300(sp)
    aee0:	d8014615 	stw	zero,1304(sp)
    aee4:	003b9b06 	br	9d54 <___vfprintf_internal_r+0xa88>
    aee8:	0027883a 	mov	r19,zero
    aeec:	00397806 	br	94d0 <___vfprintf_internal_r+0x204>
    aef0:	00c20034 	movhi	r3,2048
    aef4:	18c12c04 	addi	r3,r3,1200
    aef8:	100f883a 	mov	r7,r2
    aefc:	d8814515 	stw	r2,1300(sp)
    af00:	d8c14115 	stw	r3,1284(sp)
    af04:	0039e006 	br	9688 <___vfprintf_internal_r+0x3bc>
    af08:	00820034 	movhi	r2,2048
    af0c:	10812b04 	addi	r2,r2,1196
    af10:	d8814115 	stw	r2,1284(sp)
    af14:	003d1c06 	br	a388 <___vfprintf_internal_r+0x10bc>
    af18:	d9414d17 	ldw	r5,1332(sp)
    af1c:	00801984 	movi	r2,102
    af20:	28804926 	beq	r5,r2,b048 <___vfprintf_internal_r+0x1d7c>
    af24:	200f883a 	mov	r7,r4
    af28:	24805716 	blt	r4,r18,b088 <___vfprintf_internal_r+0x1dbc>
    af2c:	d9414c17 	ldw	r5,1328(sp)
    af30:	2880004c 	andi	r2,r5,1
    af34:	10000126 	beq	r2,zero,af3c <___vfprintf_internal_r+0x1c70>
    af38:	21c00044 	addi	r7,r4,1
    af3c:	d9c14515 	stw	r7,1300(sp)
    af40:	383fcc0e 	bge	r7,zero,ae74 <___vfprintf_internal_r+0x1ba8>
    af44:	d8014515 	stw	zero,1300(sp)
    af48:	003fca06 	br	ae74 <___vfprintf_internal_r+0x1ba8>
    af4c:	d9000517 	ldw	r4,20(sp)
    af50:	00bfff04 	movi	r2,-4
    af54:	1100480e 	bge	r2,r4,b078 <___vfprintf_internal_r+0x1dac>
    af58:	99004716 	blt	r19,r4,b078 <___vfprintf_internal_r+0x1dac>
    af5c:	d8c14d15 	stw	r3,1332(sp)
    af60:	003ff006 	br	af24 <___vfprintf_internal_r+0x1c58>
    af64:	d8800717 	ldw	r2,28(sp)
    af68:	14bf8b2e 	bgeu	r2,r18,ad98 <___vfprintf_internal_r+0x1acc>
    af6c:	9007883a 	mov	r3,r18
    af70:	01000c04 	movi	r4,48
    af74:	11000005 	stb	r4,0(r2)
    af78:	10800044 	addi	r2,r2,1
    af7c:	d8800715 	stw	r2,28(sp)
    af80:	18bffc1e 	bne	r3,r2,af74 <___vfprintf_internal_r+0x1ca8>
    af84:	003f8406 	br	ad98 <___vfprintf_internal_r+0x1acc>
    af88:	d8814117 	ldw	r2,1284(sp)
    af8c:	10c00007 	ldb	r3,0(r2)
    af90:	00800c04 	movi	r2,48
    af94:	18805b26 	beq	r3,r2,b104 <___vfprintf_internal_r+0x1e38>
    af98:	d9000517 	ldw	r4,20(sp)
    af9c:	9125883a 	add	r18,r18,r4
    afa0:	003f7506 	br	ad78 <___vfprintf_internal_r+0x1aac>
    afa4:	d9014c17 	ldw	r4,1328(sp)
    afa8:	2080004c 	andi	r2,r4,1
    afac:	1005003a 	cmpeq	r2,r2,zero
    afb0:	103f6a26 	beq	r2,zero,ad5c <___vfprintf_internal_r+0x1a90>
    afb4:	d8800717 	ldw	r2,28(sp)
    afb8:	003f7706 	br	ad98 <___vfprintf_internal_r+0x1acc>
    afbc:	d9c14515 	stw	r7,1300(sp)
    afc0:	38004d16 	blt	r7,zero,b0f8 <___vfprintf_internal_r+0x1e2c>
    afc4:	dc814715 	stw	r18,1308(sp)
    afc8:	d8014615 	stw	zero,1304(sp)
    afcc:	003b6106 	br	9d54 <___vfprintf_internal_r+0xa88>
    afd0:	d9014f17 	ldw	r4,1340(sp)
    afd4:	d8800504 	addi	r2,sp,20
    afd8:	d8800115 	stw	r2,4(sp)
    afdc:	d8c00604 	addi	r3,sp,24
    afe0:	d8800704 	addi	r2,sp,28
    afe4:	800b883a 	mov	r5,r16
    afe8:	880d883a 	mov	r6,r17
    afec:	01c000c4 	movi	r7,3
    aff0:	d8c00215 	stw	r3,8(sp)
    aff4:	d8800315 	stw	r2,12(sp)
    aff8:	dcc00015 	stw	r19,0(sp)
    affc:	9829883a 	mov	r20,r19
    b000:	000b4f00 	call	b4f0 <_dtoa_r>
    b004:	d8814115 	stw	r2,1284(sp)
    b008:	003f5106 	br	ad50 <___vfprintf_internal_r+0x1a84>
    b00c:	d8c14217 	ldw	r3,1288(sp)
    b010:	d9014317 	ldw	r4,1292(sp)
    b014:	07000b44 	movi	fp,45
    b018:	1821883a 	mov	r16,r3
    b01c:	2460003c 	xorhi	r17,r4,32768
    b020:	003f3106 	br	ace8 <___vfprintf_internal_r+0x1a1c>
    b024:	9d000044 	addi	r20,r19,1
    b028:	003f3906 	br	ad10 <___vfprintf_internal_r+0x1a44>
    b02c:	983f251e 	bne	r19,zero,acc4 <___vfprintf_internal_r+0x19f8>
    b030:	04c00044 	movi	r19,1
    b034:	003f2306 	br	acc4 <___vfprintf_internal_r+0x19f8>
    b038:	04c00184 	movi	r19,6
    b03c:	003f2106 	br	acc4 <___vfprintf_internal_r+0x19f8>
    b040:	d8014515 	stw	zero,1300(sp)
    b044:	003eee06 	br	ac00 <___vfprintf_internal_r+0x1934>
    b048:	200f883a 	mov	r7,r4
    b04c:	0100370e 	bge	zero,r4,b12c <___vfprintf_internal_r+0x1e60>
    b050:	9800031e 	bne	r19,zero,b060 <___vfprintf_internal_r+0x1d94>
    b054:	d9814c17 	ldw	r6,1328(sp)
    b058:	3080004c 	andi	r2,r6,1
    b05c:	103fb726 	beq	r2,zero,af3c <___vfprintf_internal_r+0x1c70>
    b060:	20800044 	addi	r2,r4,1
    b064:	98a7883a 	add	r19,r19,r2
    b068:	dcc14515 	stw	r19,1300(sp)
    b06c:	980f883a 	mov	r7,r19
    b070:	983f800e 	bge	r19,zero,ae74 <___vfprintf_internal_r+0x1ba8>
    b074:	003fb306 	br	af44 <___vfprintf_internal_r+0x1c78>
    b078:	d9814d17 	ldw	r6,1332(sp)
    b07c:	31bfff84 	addi	r6,r6,-2
    b080:	d9814d15 	stw	r6,1332(sp)
    b084:	003f4c06 	br	adb8 <___vfprintf_internal_r+0x1aec>
    b088:	0100180e 	bge	zero,r4,b0ec <___vfprintf_internal_r+0x1e20>
    b08c:	00800044 	movi	r2,1
    b090:	1485883a 	add	r2,r2,r18
    b094:	d8814515 	stw	r2,1300(sp)
    b098:	100f883a 	mov	r7,r2
    b09c:	103f750e 	bge	r2,zero,ae74 <___vfprintf_internal_r+0x1ba8>
    b0a0:	003fa806 	br	af44 <___vfprintf_internal_r+0x1c78>
    b0a4:	80c00c04 	addi	r3,r16,48
    b0a8:	00800c04 	movi	r2,48
    b0ac:	d8c008c5 	stb	r3,35(sp)
    b0b0:	d9800804 	addi	r6,sp,32
    b0b4:	d8c00904 	addi	r3,sp,36
    b0b8:	d8800885 	stb	r2,34(sp)
    b0bc:	003f6506 	br	ae54 <___vfprintf_internal_r+0x1b88>
    b0c0:	d9014c17 	ldw	r4,1328(sp)
    b0c4:	2084703a 	and	r2,r4,r2
    b0c8:	103f9c26 	beq	r2,zero,af3c <___vfprintf_internal_r+0x1c70>
    b0cc:	003f6606 	br	ae68 <___vfprintf_internal_r+0x1b9c>
    b0d0:	d9800804 	addi	r6,sp,32
    b0d4:	d8c00884 	addi	r3,sp,34
    b0d8:	003f5e06 	br	ae54 <___vfprintf_internal_r+0x1b88>
    b0dc:	00800b44 	movi	r2,45
    b0e0:	0121c83a 	sub	r16,zero,r4
    b0e4:	d8800845 	stb	r2,33(sp)
    b0e8:	003f3d06 	br	ade0 <___vfprintf_internal_r+0x1b14>
    b0ec:	00800084 	movi	r2,2
    b0f0:	1105c83a 	sub	r2,r2,r4
    b0f4:	003fe606 	br	b090 <___vfprintf_internal_r+0x1dc4>
    b0f8:	d8014515 	stw	zero,1300(sp)
    b0fc:	dc814715 	stw	r18,1308(sp)
    b100:	003fb106 	br	afc8 <___vfprintf_internal_r+0x1cfc>
    b104:	000d883a 	mov	r6,zero
    b108:	000f883a 	mov	r7,zero
    b10c:	8009883a 	mov	r4,r16
    b110:	880b883a 	mov	r5,r17
    b114:	0011f900 	call	11f90 <__nedf2>
    b118:	103f9f26 	beq	r2,zero,af98 <___vfprintf_internal_r+0x1ccc>
    b11c:	00800044 	movi	r2,1
    b120:	1509c83a 	sub	r4,r2,r20
    b124:	d9000515 	stw	r4,20(sp)
    b128:	003f9b06 	br	af98 <___vfprintf_internal_r+0x1ccc>
    b12c:	98000d1e 	bne	r19,zero,b164 <___vfprintf_internal_r+0x1e98>
    b130:	d8c14c17 	ldw	r3,1328(sp)
    b134:	1880004c 	andi	r2,r3,1
    b138:	10000a1e 	bne	r2,zero,b164 <___vfprintf_internal_r+0x1e98>
    b13c:	01000044 	movi	r4,1
    b140:	200f883a 	mov	r7,r4
    b144:	d9014515 	stw	r4,1300(sp)
    b148:	003f4a06 	br	ae74 <___vfprintf_internal_r+0x1ba8>
    b14c:	3cc00017 	ldw	r19,0(r7)
    b150:	39c00104 	addi	r7,r7,4
    b154:	983d0e0e 	bge	r19,zero,a590 <___vfprintf_internal_r+0x12c4>
    b158:	b8c00007 	ldb	r3,0(r23)
    b15c:	04ffffc4 	movi	r19,-1
    b160:	0038d906 	br	94c8 <___vfprintf_internal_r+0x1fc>
    b164:	9cc00084 	addi	r19,r19,2
    b168:	dcc14515 	stw	r19,1300(sp)
    b16c:	980f883a 	mov	r7,r19
    b170:	983f400e 	bge	r19,zero,ae74 <___vfprintf_internal_r+0x1ba8>
    b174:	003f7306 	br	af44 <___vfprintf_internal_r+0x1c78>

0000b178 <__vfprintf_internal>:
    b178:	00820034 	movhi	r2,2048
    b17c:	108a0804 	addi	r2,r2,10272
    b180:	2013883a 	mov	r9,r4
    b184:	11000017 	ldw	r4,0(r2)
    b188:	2805883a 	mov	r2,r5
    b18c:	300f883a 	mov	r7,r6
    b190:	480b883a 	mov	r5,r9
    b194:	100d883a 	mov	r6,r2
    b198:	00092cc1 	jmpi	92cc <___vfprintf_internal_r>

0000b19c <__swsetup_r>:
    b19c:	00820034 	movhi	r2,2048
    b1a0:	108a0804 	addi	r2,r2,10272
    b1a4:	10c00017 	ldw	r3,0(r2)
    b1a8:	defffd04 	addi	sp,sp,-12
    b1ac:	dc400115 	stw	r17,4(sp)
    b1b0:	dc000015 	stw	r16,0(sp)
    b1b4:	dfc00215 	stw	ra,8(sp)
    b1b8:	2023883a 	mov	r17,r4
    b1bc:	2821883a 	mov	r16,r5
    b1c0:	18000226 	beq	r3,zero,b1cc <__swsetup_r+0x30>
    b1c4:	18800e17 	ldw	r2,56(r3)
    b1c8:	10001f26 	beq	r2,zero,b248 <__swsetup_r+0xac>
    b1cc:	8100030b 	ldhu	r4,12(r16)
    b1d0:	2080020c 	andi	r2,r4,8
    b1d4:	10002826 	beq	r2,zero,b278 <__swsetup_r+0xdc>
    b1d8:	81400417 	ldw	r5,16(r16)
    b1dc:	28001d26 	beq	r5,zero,b254 <__swsetup_r+0xb8>
    b1e0:	2080004c 	andi	r2,r4,1
    b1e4:	1005003a 	cmpeq	r2,r2,zero
    b1e8:	10000b26 	beq	r2,zero,b218 <__swsetup_r+0x7c>
    b1ec:	2080008c 	andi	r2,r4,2
    b1f0:	10001226 	beq	r2,zero,b23c <__swsetup_r+0xa0>
    b1f4:	0005883a 	mov	r2,zero
    b1f8:	80800215 	stw	r2,8(r16)
    b1fc:	28000b26 	beq	r5,zero,b22c <__swsetup_r+0x90>
    b200:	0005883a 	mov	r2,zero
    b204:	dfc00217 	ldw	ra,8(sp)
    b208:	dc400117 	ldw	r17,4(sp)
    b20c:	dc000017 	ldw	r16,0(sp)
    b210:	dec00304 	addi	sp,sp,12
    b214:	f800283a 	ret
    b218:	80800517 	ldw	r2,20(r16)
    b21c:	80000215 	stw	zero,8(r16)
    b220:	0085c83a 	sub	r2,zero,r2
    b224:	80800615 	stw	r2,24(r16)
    b228:	283ff51e 	bne	r5,zero,b200 <__swsetup_r+0x64>
    b22c:	2080200c 	andi	r2,r4,128
    b230:	103ff326 	beq	r2,zero,b200 <__swsetup_r+0x64>
    b234:	00bfffc4 	movi	r2,-1
    b238:	003ff206 	br	b204 <__swsetup_r+0x68>
    b23c:	80800517 	ldw	r2,20(r16)
    b240:	80800215 	stw	r2,8(r16)
    b244:	003fed06 	br	b1fc <__swsetup_r+0x60>
    b248:	1809883a 	mov	r4,r3
    b24c:	000cd3c0 	call	cd3c <__sinit>
    b250:	003fde06 	br	b1cc <__swsetup_r+0x30>
    b254:	20c0a00c 	andi	r3,r4,640
    b258:	00808004 	movi	r2,512
    b25c:	18bfe026 	beq	r3,r2,b1e0 <__swsetup_r+0x44>
    b260:	8809883a 	mov	r4,r17
    b264:	800b883a 	mov	r5,r16
    b268:	000e63c0 	call	e63c <__smakebuf_r>
    b26c:	8100030b 	ldhu	r4,12(r16)
    b270:	81400417 	ldw	r5,16(r16)
    b274:	003fda06 	br	b1e0 <__swsetup_r+0x44>
    b278:	2080040c 	andi	r2,r4,16
    b27c:	103fed26 	beq	r2,zero,b234 <__swsetup_r+0x98>
    b280:	2080010c 	andi	r2,r4,4
    b284:	10001226 	beq	r2,zero,b2d0 <__swsetup_r+0x134>
    b288:	81400c17 	ldw	r5,48(r16)
    b28c:	28000526 	beq	r5,zero,b2a4 <__swsetup_r+0x108>
    b290:	80801004 	addi	r2,r16,64
    b294:	28800226 	beq	r5,r2,b2a0 <__swsetup_r+0x104>
    b298:	8809883a 	mov	r4,r17
    b29c:	000d0c00 	call	d0c0 <_free_r>
    b2a0:	80000c15 	stw	zero,48(r16)
    b2a4:	8080030b 	ldhu	r2,12(r16)
    b2a8:	81400417 	ldw	r5,16(r16)
    b2ac:	80000115 	stw	zero,4(r16)
    b2b0:	10bff6cc 	andi	r2,r2,65499
    b2b4:	8080030d 	sth	r2,12(r16)
    b2b8:	81400015 	stw	r5,0(r16)
    b2bc:	8080030b 	ldhu	r2,12(r16)
    b2c0:	10800214 	ori	r2,r2,8
    b2c4:	113fffcc 	andi	r4,r2,65535
    b2c8:	8080030d 	sth	r2,12(r16)
    b2cc:	003fc306 	br	b1dc <__swsetup_r+0x40>
    b2d0:	81400417 	ldw	r5,16(r16)
    b2d4:	003ff906 	br	b2bc <__swsetup_r+0x120>

0000b2d8 <quorem>:
    b2d8:	28c00417 	ldw	r3,16(r5)
    b2dc:	20800417 	ldw	r2,16(r4)
    b2e0:	defff604 	addi	sp,sp,-40
    b2e4:	ddc00715 	stw	r23,28(sp)
    b2e8:	dd400515 	stw	r21,20(sp)
    b2ec:	dfc00915 	stw	ra,36(sp)
    b2f0:	df000815 	stw	fp,32(sp)
    b2f4:	dd800615 	stw	r22,24(sp)
    b2f8:	dd000415 	stw	r20,16(sp)
    b2fc:	dcc00315 	stw	r19,12(sp)
    b300:	dc800215 	stw	r18,8(sp)
    b304:	dc400115 	stw	r17,4(sp)
    b308:	dc000015 	stw	r16,0(sp)
    b30c:	202f883a 	mov	r23,r4
    b310:	282b883a 	mov	r21,r5
    b314:	10c07416 	blt	r2,r3,b4e8 <quorem+0x210>
    b318:	1c7fffc4 	addi	r17,r3,-1
    b31c:	8c45883a 	add	r2,r17,r17
    b320:	1085883a 	add	r2,r2,r2
    b324:	2c000504 	addi	r16,r5,20
    b328:	24c00504 	addi	r19,r4,20
    b32c:	14ed883a 	add	r22,r2,r19
    b330:	80a5883a 	add	r18,r16,r2
    b334:	b7000017 	ldw	fp,0(r22)
    b338:	91400017 	ldw	r5,0(r18)
    b33c:	e009883a 	mov	r4,fp
    b340:	29400044 	addi	r5,r5,1
    b344:	00124f40 	call	124f4 <__udivsi3>
    b348:	1029883a 	mov	r20,r2
    b34c:	10003c1e 	bne	r2,zero,b440 <quorem+0x168>
    b350:	a80b883a 	mov	r5,r21
    b354:	b809883a 	mov	r4,r23
    b358:	000f2300 	call	f230 <__mcmp>
    b35c:	10002b16 	blt	r2,zero,b40c <quorem+0x134>
    b360:	a5000044 	addi	r20,r20,1
    b364:	980f883a 	mov	r7,r19
    b368:	0011883a 	mov	r8,zero
    b36c:	0009883a 	mov	r4,zero
    b370:	81400017 	ldw	r5,0(r16)
    b374:	38c00017 	ldw	r3,0(r7)
    b378:	84000104 	addi	r16,r16,4
    b37c:	28bfffcc 	andi	r2,r5,65535
    b380:	2085883a 	add	r2,r4,r2
    b384:	11bfffcc 	andi	r6,r2,65535
    b388:	193fffcc 	andi	r4,r3,65535
    b38c:	1004d43a 	srli	r2,r2,16
    b390:	280ad43a 	srli	r5,r5,16
    b394:	2189c83a 	sub	r4,r4,r6
    b398:	2209883a 	add	r4,r4,r8
    b39c:	1806d43a 	srli	r3,r3,16
    b3a0:	288b883a 	add	r5,r5,r2
    b3a4:	200dd43a 	srai	r6,r4,16
    b3a8:	28bfffcc 	andi	r2,r5,65535
    b3ac:	1887c83a 	sub	r3,r3,r2
    b3b0:	1987883a 	add	r3,r3,r6
    b3b4:	3900000d 	sth	r4,0(r7)
    b3b8:	38c0008d 	sth	r3,2(r7)
    b3bc:	2808d43a 	srli	r4,r5,16
    b3c0:	39c00104 	addi	r7,r7,4
    b3c4:	1811d43a 	srai	r8,r3,16
    b3c8:	943fe92e 	bgeu	r18,r16,b370 <quorem+0x98>
    b3cc:	8c45883a 	add	r2,r17,r17
    b3d0:	1085883a 	add	r2,r2,r2
    b3d4:	9885883a 	add	r2,r19,r2
    b3d8:	10c00017 	ldw	r3,0(r2)
    b3dc:	18000b1e 	bne	r3,zero,b40c <quorem+0x134>
    b3e0:	113fff04 	addi	r4,r2,-4
    b3e4:	9900082e 	bgeu	r19,r4,b408 <quorem+0x130>
    b3e8:	10bfff17 	ldw	r2,-4(r2)
    b3ec:	10000326 	beq	r2,zero,b3fc <quorem+0x124>
    b3f0:	00000506 	br	b408 <quorem+0x130>
    b3f4:	20800017 	ldw	r2,0(r4)
    b3f8:	1000031e 	bne	r2,zero,b408 <quorem+0x130>
    b3fc:	213fff04 	addi	r4,r4,-4
    b400:	8c7fffc4 	addi	r17,r17,-1
    b404:	993ffb36 	bltu	r19,r4,b3f4 <quorem+0x11c>
    b408:	bc400415 	stw	r17,16(r23)
    b40c:	a005883a 	mov	r2,r20
    b410:	dfc00917 	ldw	ra,36(sp)
    b414:	df000817 	ldw	fp,32(sp)
    b418:	ddc00717 	ldw	r23,28(sp)
    b41c:	dd800617 	ldw	r22,24(sp)
    b420:	dd400517 	ldw	r21,20(sp)
    b424:	dd000417 	ldw	r20,16(sp)
    b428:	dcc00317 	ldw	r19,12(sp)
    b42c:	dc800217 	ldw	r18,8(sp)
    b430:	dc400117 	ldw	r17,4(sp)
    b434:	dc000017 	ldw	r16,0(sp)
    b438:	dec00a04 	addi	sp,sp,40
    b43c:	f800283a 	ret
    b440:	980f883a 	mov	r7,r19
    b444:	8011883a 	mov	r8,r16
    b448:	0013883a 	mov	r9,zero
    b44c:	000d883a 	mov	r6,zero
    b450:	40c00017 	ldw	r3,0(r8)
    b454:	39000017 	ldw	r4,0(r7)
    b458:	42000104 	addi	r8,r8,4
    b45c:	18bfffcc 	andi	r2,r3,65535
    b460:	a085383a 	mul	r2,r20,r2
    b464:	1806d43a 	srli	r3,r3,16
    b468:	217fffcc 	andi	r5,r4,65535
    b46c:	3085883a 	add	r2,r6,r2
    b470:	11bfffcc 	andi	r6,r2,65535
    b474:	a0c7383a 	mul	r3,r20,r3
    b478:	1004d43a 	srli	r2,r2,16
    b47c:	298bc83a 	sub	r5,r5,r6
    b480:	2a4b883a 	add	r5,r5,r9
    b484:	2008d43a 	srli	r4,r4,16
    b488:	1887883a 	add	r3,r3,r2
    b48c:	280dd43a 	srai	r6,r5,16
    b490:	18bfffcc 	andi	r2,r3,65535
    b494:	2089c83a 	sub	r4,r4,r2
    b498:	2189883a 	add	r4,r4,r6
    b49c:	3900008d 	sth	r4,2(r7)
    b4a0:	3940000d 	sth	r5,0(r7)
    b4a4:	180cd43a 	srli	r6,r3,16
    b4a8:	39c00104 	addi	r7,r7,4
    b4ac:	2013d43a 	srai	r9,r4,16
    b4b0:	923fe72e 	bgeu	r18,r8,b450 <quorem+0x178>
    b4b4:	e03fa61e 	bne	fp,zero,b350 <quorem+0x78>
    b4b8:	b0ffff04 	addi	r3,r22,-4
    b4bc:	98c0082e 	bgeu	r19,r3,b4e0 <quorem+0x208>
    b4c0:	b0bfff17 	ldw	r2,-4(r22)
    b4c4:	10000326 	beq	r2,zero,b4d4 <quorem+0x1fc>
    b4c8:	00000506 	br	b4e0 <quorem+0x208>
    b4cc:	18800017 	ldw	r2,0(r3)
    b4d0:	1000031e 	bne	r2,zero,b4e0 <quorem+0x208>
    b4d4:	18ffff04 	addi	r3,r3,-4
    b4d8:	8c7fffc4 	addi	r17,r17,-1
    b4dc:	98fffb36 	bltu	r19,r3,b4cc <quorem+0x1f4>
    b4e0:	bc400415 	stw	r17,16(r23)
    b4e4:	003f9a06 	br	b350 <quorem+0x78>
    b4e8:	0005883a 	mov	r2,zero
    b4ec:	003fc806 	br	b410 <quorem+0x138>

0000b4f0 <_dtoa_r>:
    b4f0:	22001017 	ldw	r8,64(r4)
    b4f4:	deffda04 	addi	sp,sp,-152
    b4f8:	dd402115 	stw	r21,132(sp)
    b4fc:	dd002015 	stw	r20,128(sp)
    b500:	dc801e15 	stw	r18,120(sp)
    b504:	dc401d15 	stw	r17,116(sp)
    b508:	dfc02515 	stw	ra,148(sp)
    b50c:	df002415 	stw	fp,144(sp)
    b510:	ddc02315 	stw	r23,140(sp)
    b514:	dd802215 	stw	r22,136(sp)
    b518:	dcc01f15 	stw	r19,124(sp)
    b51c:	dc001c15 	stw	r16,112(sp)
    b520:	d9001615 	stw	r4,88(sp)
    b524:	3023883a 	mov	r17,r6
    b528:	2829883a 	mov	r20,r5
    b52c:	d9c01715 	stw	r7,92(sp)
    b530:	dc802817 	ldw	r18,160(sp)
    b534:	302b883a 	mov	r21,r6
    b538:	40000a26 	beq	r8,zero,b564 <_dtoa_r+0x74>
    b53c:	20801117 	ldw	r2,68(r4)
    b540:	400b883a 	mov	r5,r8
    b544:	40800115 	stw	r2,4(r8)
    b548:	20c01117 	ldw	r3,68(r4)
    b54c:	00800044 	movi	r2,1
    b550:	10c4983a 	sll	r2,r2,r3
    b554:	40800215 	stw	r2,8(r8)
    b558:	000f0d40 	call	f0d4 <_Bfree>
    b55c:	d8c01617 	ldw	r3,88(sp)
    b560:	18001015 	stw	zero,64(r3)
    b564:	8800a316 	blt	r17,zero,b7f4 <_dtoa_r+0x304>
    b568:	90000015 	stw	zero,0(r18)
    b56c:	a8dffc2c 	andhi	r3,r21,32752
    b570:	009ffc34 	movhi	r2,32752
    b574:	18809126 	beq	r3,r2,b7bc <_dtoa_r+0x2cc>
    b578:	000d883a 	mov	r6,zero
    b57c:	000f883a 	mov	r7,zero
    b580:	a009883a 	mov	r4,r20
    b584:	a80b883a 	mov	r5,r21
    b588:	dd001215 	stw	r20,72(sp)
    b58c:	dd401315 	stw	r21,76(sp)
    b590:	0011f900 	call	11f90 <__nedf2>
    b594:	1000171e 	bne	r2,zero,b5f4 <_dtoa_r+0x104>
    b598:	d9802717 	ldw	r6,156(sp)
    b59c:	00800044 	movi	r2,1
    b5a0:	30800015 	stw	r2,0(r6)
    b5a4:	d8802917 	ldw	r2,164(sp)
    b5a8:	10029b26 	beq	r2,zero,c018 <_dtoa_r+0xb28>
    b5ac:	d9002917 	ldw	r4,164(sp)
    b5b0:	00820034 	movhi	r2,2048
    b5b4:	10813a44 	addi	r2,r2,1257
    b5b8:	10ffffc4 	addi	r3,r2,-1
    b5bc:	20800015 	stw	r2,0(r4)
    b5c0:	1805883a 	mov	r2,r3
    b5c4:	dfc02517 	ldw	ra,148(sp)
    b5c8:	df002417 	ldw	fp,144(sp)
    b5cc:	ddc02317 	ldw	r23,140(sp)
    b5d0:	dd802217 	ldw	r22,136(sp)
    b5d4:	dd402117 	ldw	r21,132(sp)
    b5d8:	dd002017 	ldw	r20,128(sp)
    b5dc:	dcc01f17 	ldw	r19,124(sp)
    b5e0:	dc801e17 	ldw	r18,120(sp)
    b5e4:	dc401d17 	ldw	r17,116(sp)
    b5e8:	dc001c17 	ldw	r16,112(sp)
    b5ec:	dec02604 	addi	sp,sp,152
    b5f0:	f800283a 	ret
    b5f4:	d9001617 	ldw	r4,88(sp)
    b5f8:	d9401217 	ldw	r5,72(sp)
    b5fc:	d8800104 	addi	r2,sp,4
    b600:	a80d883a 	mov	r6,r21
    b604:	d9c00204 	addi	r7,sp,8
    b608:	d8800015 	stw	r2,0(sp)
    b60c:	000f7100 	call	f710 <__d2b>
    b610:	d8800715 	stw	r2,28(sp)
    b614:	a804d53a 	srli	r2,r21,20
    b618:	1101ffcc 	andi	r4,r2,2047
    b61c:	20008626 	beq	r4,zero,b838 <_dtoa_r+0x348>
    b620:	d8c01217 	ldw	r3,72(sp)
    b624:	00800434 	movhi	r2,16
    b628:	10bfffc4 	addi	r2,r2,-1
    b62c:	ddc00117 	ldw	r23,4(sp)
    b630:	a884703a 	and	r2,r21,r2
    b634:	1811883a 	mov	r8,r3
    b638:	124ffc34 	orhi	r9,r2,16368
    b63c:	25bf0044 	addi	r22,r4,-1023
    b640:	d8000815 	stw	zero,32(sp)
    b644:	0005883a 	mov	r2,zero
    b648:	00cffe34 	movhi	r3,16376
    b64c:	480b883a 	mov	r5,r9
    b650:	4009883a 	mov	r4,r8
    b654:	180f883a 	mov	r7,r3
    b658:	100d883a 	mov	r6,r2
    b65c:	00067800 	call	6780 <__subdf3>
    b660:	0218dbf4 	movhi	r8,25455
    b664:	4210d844 	addi	r8,r8,17249
    b668:	024ff4f4 	movhi	r9,16339
    b66c:	4a61e9c4 	addi	r9,r9,-30809
    b670:	480f883a 	mov	r7,r9
    b674:	400d883a 	mov	r6,r8
    b678:	180b883a 	mov	r5,r3
    b67c:	1009883a 	mov	r4,r2
    b680:	00068740 	call	6874 <__muldf3>
    b684:	0222d874 	movhi	r8,35681
    b688:	42322cc4 	addi	r8,r8,-14157
    b68c:	024ff1f4 	movhi	r9,16327
    b690:	4a628a04 	addi	r9,r9,-30168
    b694:	480f883a 	mov	r7,r9
    b698:	400d883a 	mov	r6,r8
    b69c:	180b883a 	mov	r5,r3
    b6a0:	1009883a 	mov	r4,r2
    b6a4:	00068000 	call	6800 <__adddf3>
    b6a8:	b009883a 	mov	r4,r22
    b6ac:	1021883a 	mov	r16,r2
    b6b0:	1823883a 	mov	r17,r3
    b6b4:	0006f180 	call	6f18 <__floatsidf>
    b6b8:	021427f4 	movhi	r8,20639
    b6bc:	421e7ec4 	addi	r8,r8,31227
    b6c0:	024ff4f4 	movhi	r9,16339
    b6c4:	4a5104c4 	addi	r9,r9,17427
    b6c8:	480f883a 	mov	r7,r9
    b6cc:	400d883a 	mov	r6,r8
    b6d0:	180b883a 	mov	r5,r3
    b6d4:	1009883a 	mov	r4,r2
    b6d8:	00068740 	call	6874 <__muldf3>
    b6dc:	180f883a 	mov	r7,r3
    b6e0:	880b883a 	mov	r5,r17
    b6e4:	100d883a 	mov	r6,r2
    b6e8:	8009883a 	mov	r4,r16
    b6ec:	00068000 	call	6800 <__adddf3>
    b6f0:	1009883a 	mov	r4,r2
    b6f4:	180b883a 	mov	r5,r3
    b6f8:	1021883a 	mov	r16,r2
    b6fc:	1823883a 	mov	r17,r3
    b700:	00070100 	call	7010 <__fixdfsi>
    b704:	000d883a 	mov	r6,zero
    b708:	000f883a 	mov	r7,zero
    b70c:	8009883a 	mov	r4,r16
    b710:	880b883a 	mov	r5,r17
    b714:	d8800d15 	stw	r2,52(sp)
    b718:	00120a00 	call	120a0 <__ltdf2>
    b71c:	10031716 	blt	r2,zero,c37c <_dtoa_r+0xe8c>
    b720:	d8c00d17 	ldw	r3,52(sp)
    b724:	00800584 	movi	r2,22
    b728:	10c1482e 	bgeu	r2,r3,bc4c <_dtoa_r+0x75c>
    b72c:	01000044 	movi	r4,1
    b730:	d9000c15 	stw	r4,48(sp)
    b734:	bd85c83a 	sub	r2,r23,r22
    b738:	11bfffc4 	addi	r6,r2,-1
    b73c:	30030b16 	blt	r6,zero,c36c <_dtoa_r+0xe7c>
    b740:	d9800a15 	stw	r6,40(sp)
    b744:	d8001115 	stw	zero,68(sp)
    b748:	d8c00d17 	ldw	r3,52(sp)
    b74c:	1802ff16 	blt	r3,zero,c34c <_dtoa_r+0xe5c>
    b750:	d9000a17 	ldw	r4,40(sp)
    b754:	d8c00915 	stw	r3,36(sp)
    b758:	d8001015 	stw	zero,64(sp)
    b75c:	20c9883a 	add	r4,r4,r3
    b760:	d9000a15 	stw	r4,40(sp)
    b764:	d9001717 	ldw	r4,92(sp)
    b768:	00800244 	movi	r2,9
    b76c:	11004636 	bltu	r2,r4,b888 <_dtoa_r+0x398>
    b770:	00800144 	movi	r2,5
    b774:	11020416 	blt	r2,r4,bf88 <_dtoa_r+0xa98>
    b778:	04400044 	movi	r17,1
    b77c:	d8c01717 	ldw	r3,92(sp)
    b780:	00800144 	movi	r2,5
    b784:	10c1ed36 	bltu	r2,r3,bf3c <_dtoa_r+0xa4c>
    b788:	18c5883a 	add	r2,r3,r3
    b78c:	1085883a 	add	r2,r2,r2
    b790:	00c00074 	movhi	r3,1
    b794:	18ede904 	addi	r3,r3,-18524
    b798:	10c5883a 	add	r2,r2,r3
    b79c:	11000017 	ldw	r4,0(r2)
    b7a0:	2000683a 	jmp	r4
    b7a4:	0000b890 	cmplti	zero,zero,738
    b7a8:	0000b890 	cmplti	zero,zero,738
    b7ac:	0000c290 	cmplti	zero,zero,778
    b7b0:	0000c268 	cmpgeui	zero,zero,777
    b7b4:	0000c2ac 	andhi	zero,zero,778
    b7b8:	0000c2b8 	rdprs	zero,zero,778
    b7bc:	d9002717 	ldw	r4,156(sp)
    b7c0:	0089c3c4 	movi	r2,9999
    b7c4:	20800015 	stw	r2,0(r4)
    b7c8:	a0001026 	beq	r20,zero,b80c <_dtoa_r+0x31c>
    b7cc:	00c20034 	movhi	r3,2048
    b7d0:	18c14604 	addi	r3,r3,1304
    b7d4:	d9802917 	ldw	r6,164(sp)
    b7d8:	303f7926 	beq	r6,zero,b5c0 <_dtoa_r+0xd0>
    b7dc:	188000c7 	ldb	r2,3(r3)
    b7e0:	190000c4 	addi	r4,r3,3
    b7e4:	1000101e 	bne	r2,zero,b828 <_dtoa_r+0x338>
    b7e8:	d8802917 	ldw	r2,164(sp)
    b7ec:	11000015 	stw	r4,0(r2)
    b7f0:	003f7306 	br	b5c0 <_dtoa_r+0xd0>
    b7f4:	00a00034 	movhi	r2,32768
    b7f8:	10bfffc4 	addi	r2,r2,-1
    b7fc:	00c00044 	movi	r3,1
    b800:	88aa703a 	and	r21,r17,r2
    b804:	90c00015 	stw	r3,0(r18)
    b808:	003f5806 	br	b56c <_dtoa_r+0x7c>
    b80c:	00800434 	movhi	r2,16
    b810:	10bfffc4 	addi	r2,r2,-1
    b814:	a884703a 	and	r2,r21,r2
    b818:	103fec1e 	bne	r2,zero,b7cc <_dtoa_r+0x2dc>
    b81c:	00c20034 	movhi	r3,2048
    b820:	18c14304 	addi	r3,r3,1292
    b824:	003feb06 	br	b7d4 <_dtoa_r+0x2e4>
    b828:	d8802917 	ldw	r2,164(sp)
    b82c:	19000204 	addi	r4,r3,8
    b830:	11000015 	stw	r4,0(r2)
    b834:	003f6206 	br	b5c0 <_dtoa_r+0xd0>
    b838:	ddc00117 	ldw	r23,4(sp)
    b83c:	d8800217 	ldw	r2,8(sp)
    b840:	01000804 	movi	r4,32
    b844:	b8c10c84 	addi	r3,r23,1074
    b848:	18a3883a 	add	r17,r3,r2
    b84c:	2441b80e 	bge	r4,r17,bf30 <_dtoa_r+0xa40>
    b850:	00c01004 	movi	r3,64
    b854:	1c47c83a 	sub	r3,r3,r17
    b858:	88bff804 	addi	r2,r17,-32
    b85c:	a8c6983a 	sll	r3,r21,r3
    b860:	a084d83a 	srl	r2,r20,r2
    b864:	1888b03a 	or	r4,r3,r2
    b868:	00122240 	call	12224 <__floatunsidf>
    b86c:	1011883a 	mov	r8,r2
    b870:	00bf8434 	movhi	r2,65040
    b874:	01000044 	movi	r4,1
    b878:	10d3883a 	add	r9,r2,r3
    b87c:	8dbef344 	addi	r22,r17,-1075
    b880:	d9000815 	stw	r4,32(sp)
    b884:	003f6f06 	br	b644 <_dtoa_r+0x154>
    b888:	d8001715 	stw	zero,92(sp)
    b88c:	04400044 	movi	r17,1
    b890:	00bfffc4 	movi	r2,-1
    b894:	00c00044 	movi	r3,1
    b898:	d8800e15 	stw	r2,56(sp)
    b89c:	d8002615 	stw	zero,152(sp)
    b8a0:	d8800f15 	stw	r2,60(sp)
    b8a4:	d8c00b15 	stw	r3,44(sp)
    b8a8:	1021883a 	mov	r16,r2
    b8ac:	d8801617 	ldw	r2,88(sp)
    b8b0:	10001115 	stw	zero,68(r2)
    b8b4:	d8801617 	ldw	r2,88(sp)
    b8b8:	11401117 	ldw	r5,68(r2)
    b8bc:	1009883a 	mov	r4,r2
    b8c0:	000f6540 	call	f654 <_Balloc>
    b8c4:	d8c01617 	ldw	r3,88(sp)
    b8c8:	d8800515 	stw	r2,20(sp)
    b8cc:	18801015 	stw	r2,64(r3)
    b8d0:	00800384 	movi	r2,14
    b8d4:	14006836 	bltu	r2,r16,ba78 <_dtoa_r+0x588>
    b8d8:	8805003a 	cmpeq	r2,r17,zero
    b8dc:	1000661e 	bne	r2,zero,ba78 <_dtoa_r+0x588>
    b8e0:	d9000d17 	ldw	r4,52(sp)
    b8e4:	0102300e 	bge	zero,r4,c1a8 <_dtoa_r+0xcb8>
    b8e8:	208003cc 	andi	r2,r4,15
    b8ec:	100490fa 	slli	r2,r2,3
    b8f0:	2025d13a 	srai	r18,r4,4
    b8f4:	00c20034 	movhi	r3,2048
    b8f8:	18c15f04 	addi	r3,r3,1404
    b8fc:	10c5883a 	add	r2,r2,r3
    b900:	90c0040c 	andi	r3,r18,16
    b904:	14000017 	ldw	r16,0(r2)
    b908:	14400117 	ldw	r17,4(r2)
    b90c:	18036a1e 	bne	r3,zero,c6b8 <_dtoa_r+0x11c8>
    b910:	05800084 	movi	r22,2
    b914:	90001026 	beq	r18,zero,b958 <_dtoa_r+0x468>
    b918:	04c20034 	movhi	r19,2048
    b91c:	9cc19104 	addi	r19,r19,1604
    b920:	9080004c 	andi	r2,r18,1
    b924:	1005003a 	cmpeq	r2,r2,zero
    b928:	1000081e 	bne	r2,zero,b94c <_dtoa_r+0x45c>
    b92c:	99800017 	ldw	r6,0(r19)
    b930:	99c00117 	ldw	r7,4(r19)
    b934:	880b883a 	mov	r5,r17
    b938:	8009883a 	mov	r4,r16
    b93c:	00068740 	call	6874 <__muldf3>
    b940:	1021883a 	mov	r16,r2
    b944:	b5800044 	addi	r22,r22,1
    b948:	1823883a 	mov	r17,r3
    b94c:	9025d07a 	srai	r18,r18,1
    b950:	9cc00204 	addi	r19,r19,8
    b954:	903ff21e 	bne	r18,zero,b920 <_dtoa_r+0x430>
    b958:	a80b883a 	mov	r5,r21
    b95c:	a009883a 	mov	r4,r20
    b960:	880f883a 	mov	r7,r17
    b964:	800d883a 	mov	r6,r16
    b968:	0006c380 	call	6c38 <__divdf3>
    b96c:	1029883a 	mov	r20,r2
    b970:	182b883a 	mov	r21,r3
    b974:	d8c00c17 	ldw	r3,48(sp)
    b978:	1805003a 	cmpeq	r2,r3,zero
    b97c:	1000081e 	bne	r2,zero,b9a0 <_dtoa_r+0x4b0>
    b980:	0005883a 	mov	r2,zero
    b984:	00cffc34 	movhi	r3,16368
    b988:	180f883a 	mov	r7,r3
    b98c:	a009883a 	mov	r4,r20
    b990:	a80b883a 	mov	r5,r21
    b994:	100d883a 	mov	r6,r2
    b998:	00120a00 	call	120a0 <__ltdf2>
    b99c:	1003fe16 	blt	r2,zero,c998 <_dtoa_r+0x14a8>
    b9a0:	b009883a 	mov	r4,r22
    b9a4:	0006f180 	call	6f18 <__floatsidf>
    b9a8:	180b883a 	mov	r5,r3
    b9ac:	1009883a 	mov	r4,r2
    b9b0:	a00d883a 	mov	r6,r20
    b9b4:	a80f883a 	mov	r7,r21
    b9b8:	00068740 	call	6874 <__muldf3>
    b9bc:	0011883a 	mov	r8,zero
    b9c0:	02500734 	movhi	r9,16412
    b9c4:	1009883a 	mov	r4,r2
    b9c8:	180b883a 	mov	r5,r3
    b9cc:	480f883a 	mov	r7,r9
    b9d0:	400d883a 	mov	r6,r8
    b9d4:	00068000 	call	6800 <__adddf3>
    b9d8:	d9000f17 	ldw	r4,60(sp)
    b9dc:	102d883a 	mov	r22,r2
    b9e0:	00bf3034 	movhi	r2,64704
    b9e4:	18b9883a 	add	fp,r3,r2
    b9e8:	e02f883a 	mov	r23,fp
    b9ec:	20028f1e 	bne	r4,zero,c42c <_dtoa_r+0xf3c>
    b9f0:	0005883a 	mov	r2,zero
    b9f4:	00d00534 	movhi	r3,16404
    b9f8:	a009883a 	mov	r4,r20
    b9fc:	a80b883a 	mov	r5,r21
    ba00:	180f883a 	mov	r7,r3
    ba04:	100d883a 	mov	r6,r2
    ba08:	00067800 	call	6780 <__subdf3>
    ba0c:	1009883a 	mov	r4,r2
    ba10:	e00f883a 	mov	r7,fp
    ba14:	180b883a 	mov	r5,r3
    ba18:	b00d883a 	mov	r6,r22
    ba1c:	1025883a 	mov	r18,r2
    ba20:	1827883a 	mov	r19,r3
    ba24:	0006e900 	call	6e90 <__gtdf2>
    ba28:	00834f16 	blt	zero,r2,c768 <_dtoa_r+0x1278>
    ba2c:	e0e0003c 	xorhi	r3,fp,32768
    ba30:	9009883a 	mov	r4,r18
    ba34:	980b883a 	mov	r5,r19
    ba38:	180f883a 	mov	r7,r3
    ba3c:	b00d883a 	mov	r6,r22
    ba40:	00120a00 	call	120a0 <__ltdf2>
    ba44:	1000080e 	bge	r2,zero,ba68 <_dtoa_r+0x578>
    ba48:	0027883a 	mov	r19,zero
    ba4c:	0025883a 	mov	r18,zero
    ba50:	d8802617 	ldw	r2,152(sp)
    ba54:	df000517 	ldw	fp,20(sp)
    ba58:	d8000615 	stw	zero,24(sp)
    ba5c:	0084303a 	nor	r2,zero,r2
    ba60:	d8800d15 	stw	r2,52(sp)
    ba64:	00019b06 	br	c0d4 <_dtoa_r+0xbe4>
    ba68:	d9801217 	ldw	r6,72(sp)
    ba6c:	d8801317 	ldw	r2,76(sp)
    ba70:	3029883a 	mov	r20,r6
    ba74:	102b883a 	mov	r21,r2
    ba78:	d8c00217 	ldw	r3,8(sp)
    ba7c:	18008516 	blt	r3,zero,bc94 <_dtoa_r+0x7a4>
    ba80:	d9000d17 	ldw	r4,52(sp)
    ba84:	00800384 	movi	r2,14
    ba88:	11008216 	blt	r2,r4,bc94 <_dtoa_r+0x7a4>
    ba8c:	200490fa 	slli	r2,r4,3
    ba90:	d9802617 	ldw	r6,152(sp)
    ba94:	00c20034 	movhi	r3,2048
    ba98:	18c15f04 	addi	r3,r3,1404
    ba9c:	10c5883a 	add	r2,r2,r3
    baa0:	14800017 	ldw	r18,0(r2)
    baa4:	14c00117 	ldw	r19,4(r2)
    baa8:	30031e16 	blt	r6,zero,c724 <_dtoa_r+0x1234>
    baac:	d9000517 	ldw	r4,20(sp)
    bab0:	d8c00f17 	ldw	r3,60(sp)
    bab4:	a823883a 	mov	r17,r21
    bab8:	a021883a 	mov	r16,r20
    babc:	192b883a 	add	r21,r3,r4
    bac0:	2039883a 	mov	fp,r4
    bac4:	00000f06 	br	bb04 <_dtoa_r+0x614>
    bac8:	0005883a 	mov	r2,zero
    bacc:	00d00934 	movhi	r3,16420
    bad0:	5009883a 	mov	r4,r10
    bad4:	580b883a 	mov	r5,r11
    bad8:	180f883a 	mov	r7,r3
    badc:	100d883a 	mov	r6,r2
    bae0:	00068740 	call	6874 <__muldf3>
    bae4:	180b883a 	mov	r5,r3
    bae8:	000d883a 	mov	r6,zero
    baec:	000f883a 	mov	r7,zero
    baf0:	1009883a 	mov	r4,r2
    baf4:	1021883a 	mov	r16,r2
    baf8:	1823883a 	mov	r17,r3
    bafc:	0011f900 	call	11f90 <__nedf2>
    bb00:	10004526 	beq	r2,zero,bc18 <_dtoa_r+0x728>
    bb04:	900d883a 	mov	r6,r18
    bb08:	980f883a 	mov	r7,r19
    bb0c:	8009883a 	mov	r4,r16
    bb10:	880b883a 	mov	r5,r17
    bb14:	0006c380 	call	6c38 <__divdf3>
    bb18:	180b883a 	mov	r5,r3
    bb1c:	1009883a 	mov	r4,r2
    bb20:	00070100 	call	7010 <__fixdfsi>
    bb24:	1009883a 	mov	r4,r2
    bb28:	1029883a 	mov	r20,r2
    bb2c:	0006f180 	call	6f18 <__floatsidf>
    bb30:	180f883a 	mov	r7,r3
    bb34:	9009883a 	mov	r4,r18
    bb38:	980b883a 	mov	r5,r19
    bb3c:	100d883a 	mov	r6,r2
    bb40:	00068740 	call	6874 <__muldf3>
    bb44:	180f883a 	mov	r7,r3
    bb48:	880b883a 	mov	r5,r17
    bb4c:	8009883a 	mov	r4,r16
    bb50:	100d883a 	mov	r6,r2
    bb54:	00067800 	call	6780 <__subdf3>
    bb58:	1015883a 	mov	r10,r2
    bb5c:	a0800c04 	addi	r2,r20,48
    bb60:	e0800005 	stb	r2,0(fp)
    bb64:	e7000044 	addi	fp,fp,1
    bb68:	1817883a 	mov	r11,r3
    bb6c:	e57fd61e 	bne	fp,r21,bac8 <_dtoa_r+0x5d8>
    bb70:	500d883a 	mov	r6,r10
    bb74:	180f883a 	mov	r7,r3
    bb78:	5009883a 	mov	r4,r10
    bb7c:	180b883a 	mov	r5,r3
    bb80:	00068000 	call	6800 <__adddf3>
    bb84:	100d883a 	mov	r6,r2
    bb88:	9009883a 	mov	r4,r18
    bb8c:	980b883a 	mov	r5,r19
    bb90:	180f883a 	mov	r7,r3
    bb94:	1021883a 	mov	r16,r2
    bb98:	1823883a 	mov	r17,r3
    bb9c:	00120a00 	call	120a0 <__ltdf2>
    bba0:	10000816 	blt	r2,zero,bbc4 <_dtoa_r+0x6d4>
    bba4:	980b883a 	mov	r5,r19
    bba8:	800d883a 	mov	r6,r16
    bbac:	880f883a 	mov	r7,r17
    bbb0:	9009883a 	mov	r4,r18
    bbb4:	0011f080 	call	11f08 <__eqdf2>
    bbb8:	1000171e 	bne	r2,zero,bc18 <_dtoa_r+0x728>
    bbbc:	a080004c 	andi	r2,r20,1
    bbc0:	10001526 	beq	r2,zero,bc18 <_dtoa_r+0x728>
    bbc4:	d8800d17 	ldw	r2,52(sp)
    bbc8:	d8800415 	stw	r2,16(sp)
    bbcc:	e009883a 	mov	r4,fp
    bbd0:	213fffc4 	addi	r4,r4,-1
    bbd4:	20c00007 	ldb	r3,0(r4)
    bbd8:	00800e44 	movi	r2,57
    bbdc:	1880081e 	bne	r3,r2,bc00 <_dtoa_r+0x710>
    bbe0:	d8800517 	ldw	r2,20(sp)
    bbe4:	113ffa1e 	bne	r2,r4,bbd0 <_dtoa_r+0x6e0>
    bbe8:	d8c00417 	ldw	r3,16(sp)
    bbec:	d9800517 	ldw	r6,20(sp)
    bbf0:	00800c04 	movi	r2,48
    bbf4:	18c00044 	addi	r3,r3,1
    bbf8:	d8c00415 	stw	r3,16(sp)
    bbfc:	30800005 	stb	r2,0(r6)
    bc00:	20800003 	ldbu	r2,0(r4)
    bc04:	d8c00417 	ldw	r3,16(sp)
    bc08:	27000044 	addi	fp,r4,1
    bc0c:	10800044 	addi	r2,r2,1
    bc10:	d8c00d15 	stw	r3,52(sp)
    bc14:	20800005 	stb	r2,0(r4)
    bc18:	d9001617 	ldw	r4,88(sp)
    bc1c:	d9400717 	ldw	r5,28(sp)
    bc20:	000f0d40 	call	f0d4 <_Bfree>
    bc24:	e0000005 	stb	zero,0(fp)
    bc28:	d9800d17 	ldw	r6,52(sp)
    bc2c:	d8c02717 	ldw	r3,156(sp)
    bc30:	d9002917 	ldw	r4,164(sp)
    bc34:	30800044 	addi	r2,r6,1
    bc38:	18800015 	stw	r2,0(r3)
    bc3c:	20029c26 	beq	r4,zero,c6b0 <_dtoa_r+0x11c0>
    bc40:	d8c00517 	ldw	r3,20(sp)
    bc44:	27000015 	stw	fp,0(r4)
    bc48:	003e5d06 	br	b5c0 <_dtoa_r+0xd0>
    bc4c:	d9800d17 	ldw	r6,52(sp)
    bc50:	00c20034 	movhi	r3,2048
    bc54:	18c15f04 	addi	r3,r3,1404
    bc58:	d9001217 	ldw	r4,72(sp)
    bc5c:	300490fa 	slli	r2,r6,3
    bc60:	d9401317 	ldw	r5,76(sp)
    bc64:	10c5883a 	add	r2,r2,r3
    bc68:	12000017 	ldw	r8,0(r2)
    bc6c:	12400117 	ldw	r9,4(r2)
    bc70:	400d883a 	mov	r6,r8
    bc74:	480f883a 	mov	r7,r9
    bc78:	00120a00 	call	120a0 <__ltdf2>
    bc7c:	1000030e 	bge	r2,zero,bc8c <_dtoa_r+0x79c>
    bc80:	d8800d17 	ldw	r2,52(sp)
    bc84:	10bfffc4 	addi	r2,r2,-1
    bc88:	d8800d15 	stw	r2,52(sp)
    bc8c:	d8000c15 	stw	zero,48(sp)
    bc90:	003ea806 	br	b734 <_dtoa_r+0x244>
    bc94:	d9000b17 	ldw	r4,44(sp)
    bc98:	202cc03a 	cmpne	r22,r4,zero
    bc9c:	b000c71e 	bne	r22,zero,bfbc <_dtoa_r+0xacc>
    bca0:	dc001117 	ldw	r16,68(sp)
    bca4:	dc801017 	ldw	r18,64(sp)
    bca8:	0027883a 	mov	r19,zero
    bcac:	04000b0e 	bge	zero,r16,bcdc <_dtoa_r+0x7ec>
    bcb0:	d8c00a17 	ldw	r3,40(sp)
    bcb4:	00c0090e 	bge	zero,r3,bcdc <_dtoa_r+0x7ec>
    bcb8:	8005883a 	mov	r2,r16
    bcbc:	1c011316 	blt	r3,r16,c10c <_dtoa_r+0xc1c>
    bcc0:	d9000a17 	ldw	r4,40(sp)
    bcc4:	d9801117 	ldw	r6,68(sp)
    bcc8:	80a1c83a 	sub	r16,r16,r2
    bccc:	2089c83a 	sub	r4,r4,r2
    bcd0:	308dc83a 	sub	r6,r6,r2
    bcd4:	d9000a15 	stw	r4,40(sp)
    bcd8:	d9801115 	stw	r6,68(sp)
    bcdc:	d8801017 	ldw	r2,64(sp)
    bce0:	0080150e 	bge	zero,r2,bd38 <_dtoa_r+0x848>
    bce4:	d8c00b17 	ldw	r3,44(sp)
    bce8:	1805003a 	cmpeq	r2,r3,zero
    bcec:	1001c91e 	bne	r2,zero,c414 <_dtoa_r+0xf24>
    bcf0:	04800e0e 	bge	zero,r18,bd2c <_dtoa_r+0x83c>
    bcf4:	d9001617 	ldw	r4,88(sp)
    bcf8:	980b883a 	mov	r5,r19
    bcfc:	900d883a 	mov	r6,r18
    bd00:	000fe880 	call	fe88 <__pow5mult>
    bd04:	d9001617 	ldw	r4,88(sp)
    bd08:	d9800717 	ldw	r6,28(sp)
    bd0c:	100b883a 	mov	r5,r2
    bd10:	1027883a 	mov	r19,r2
    bd14:	000fb640 	call	fb64 <__multiply>
    bd18:	d9001617 	ldw	r4,88(sp)
    bd1c:	d9400717 	ldw	r5,28(sp)
    bd20:	1023883a 	mov	r17,r2
    bd24:	000f0d40 	call	f0d4 <_Bfree>
    bd28:	dc400715 	stw	r17,28(sp)
    bd2c:	d9001017 	ldw	r4,64(sp)
    bd30:	248dc83a 	sub	r6,r4,r18
    bd34:	30010e1e 	bne	r6,zero,c170 <_dtoa_r+0xc80>
    bd38:	d9001617 	ldw	r4,88(sp)
    bd3c:	04400044 	movi	r17,1
    bd40:	880b883a 	mov	r5,r17
    bd44:	000fd4c0 	call	fd4c <__i2b>
    bd48:	d9800917 	ldw	r6,36(sp)
    bd4c:	1025883a 	mov	r18,r2
    bd50:	0180040e 	bge	zero,r6,bd64 <_dtoa_r+0x874>
    bd54:	d9001617 	ldw	r4,88(sp)
    bd58:	100b883a 	mov	r5,r2
    bd5c:	000fe880 	call	fe88 <__pow5mult>
    bd60:	1025883a 	mov	r18,r2
    bd64:	d8801717 	ldw	r2,92(sp)
    bd68:	8880f30e 	bge	r17,r2,c138 <_dtoa_r+0xc48>
    bd6c:	0023883a 	mov	r17,zero
    bd70:	d9800917 	ldw	r6,36(sp)
    bd74:	30019e1e 	bne	r6,zero,c3f0 <_dtoa_r+0xf00>
    bd78:	00c00044 	movi	r3,1
    bd7c:	d9000a17 	ldw	r4,40(sp)
    bd80:	20c5883a 	add	r2,r4,r3
    bd84:	10c007cc 	andi	r3,r2,31
    bd88:	1800841e 	bne	r3,zero,bf9c <_dtoa_r+0xaac>
    bd8c:	00800704 	movi	r2,28
    bd90:	d9000a17 	ldw	r4,40(sp)
    bd94:	d9801117 	ldw	r6,68(sp)
    bd98:	80a1883a 	add	r16,r16,r2
    bd9c:	2089883a 	add	r4,r4,r2
    bda0:	308d883a 	add	r6,r6,r2
    bda4:	d9000a15 	stw	r4,40(sp)
    bda8:	d9801115 	stw	r6,68(sp)
    bdac:	d8801117 	ldw	r2,68(sp)
    bdb0:	0080050e 	bge	zero,r2,bdc8 <_dtoa_r+0x8d8>
    bdb4:	d9400717 	ldw	r5,28(sp)
    bdb8:	d9001617 	ldw	r4,88(sp)
    bdbc:	100d883a 	mov	r6,r2
    bdc0:	000fa180 	call	fa18 <__lshift>
    bdc4:	d8800715 	stw	r2,28(sp)
    bdc8:	d8c00a17 	ldw	r3,40(sp)
    bdcc:	00c0050e 	bge	zero,r3,bde4 <_dtoa_r+0x8f4>
    bdd0:	d9001617 	ldw	r4,88(sp)
    bdd4:	900b883a 	mov	r5,r18
    bdd8:	180d883a 	mov	r6,r3
    bddc:	000fa180 	call	fa18 <__lshift>
    bde0:	1025883a 	mov	r18,r2
    bde4:	d9000c17 	ldw	r4,48(sp)
    bde8:	2005003a 	cmpeq	r2,r4,zero
    bdec:	10016f26 	beq	r2,zero,c3ac <_dtoa_r+0xebc>
    bdf0:	d9000f17 	ldw	r4,60(sp)
    bdf4:	0102170e 	bge	zero,r4,c654 <_dtoa_r+0x1164>
    bdf8:	d9800b17 	ldw	r6,44(sp)
    bdfc:	3005003a 	cmpeq	r2,r6,zero
    be00:	1000881e 	bne	r2,zero,c024 <_dtoa_r+0xb34>
    be04:	0400050e 	bge	zero,r16,be1c <_dtoa_r+0x92c>
    be08:	d9001617 	ldw	r4,88(sp)
    be0c:	980b883a 	mov	r5,r19
    be10:	800d883a 	mov	r6,r16
    be14:	000fa180 	call	fa18 <__lshift>
    be18:	1027883a 	mov	r19,r2
    be1c:	8804c03a 	cmpne	r2,r17,zero
    be20:	1002541e 	bne	r2,zero,c774 <_dtoa_r+0x1284>
    be24:	980b883a 	mov	r5,r19
    be28:	dd800517 	ldw	r22,20(sp)
    be2c:	dcc00615 	stw	r19,24(sp)
    be30:	a700004c 	andi	fp,r20,1
    be34:	2827883a 	mov	r19,r5
    be38:	d9000717 	ldw	r4,28(sp)
    be3c:	900b883a 	mov	r5,r18
    be40:	000b2d80 	call	b2d8 <quorem>
    be44:	d9000717 	ldw	r4,28(sp)
    be48:	d9400617 	ldw	r5,24(sp)
    be4c:	1023883a 	mov	r17,r2
    be50:	8dc00c04 	addi	r23,r17,48
    be54:	000f2300 	call	f230 <__mcmp>
    be58:	d9001617 	ldw	r4,88(sp)
    be5c:	900b883a 	mov	r5,r18
    be60:	980d883a 	mov	r6,r19
    be64:	1029883a 	mov	r20,r2
    be68:	000f88c0 	call	f88c <__mdiff>
    be6c:	102b883a 	mov	r21,r2
    be70:	10800317 	ldw	r2,12(r2)
    be74:	1001281e 	bne	r2,zero,c318 <_dtoa_r+0xe28>
    be78:	d9000717 	ldw	r4,28(sp)
    be7c:	a80b883a 	mov	r5,r21
    be80:	000f2300 	call	f230 <__mcmp>
    be84:	d9001617 	ldw	r4,88(sp)
    be88:	1021883a 	mov	r16,r2
    be8c:	a80b883a 	mov	r5,r21
    be90:	000f0d40 	call	f0d4 <_Bfree>
    be94:	8000041e 	bne	r16,zero,bea8 <_dtoa_r+0x9b8>
    be98:	d8801717 	ldw	r2,92(sp)
    be9c:	1000021e 	bne	r2,zero,bea8 <_dtoa_r+0x9b8>
    bea0:	e004c03a 	cmpne	r2,fp,zero
    bea4:	10011726 	beq	r2,zero,c304 <_dtoa_r+0xe14>
    bea8:	a0010616 	blt	r20,zero,c2c4 <_dtoa_r+0xdd4>
    beac:	a000041e 	bne	r20,zero,bec0 <_dtoa_r+0x9d0>
    beb0:	d8c01717 	ldw	r3,92(sp)
    beb4:	1800021e 	bne	r3,zero,bec0 <_dtoa_r+0x9d0>
    beb8:	e004c03a 	cmpne	r2,fp,zero
    bebc:	10010126 	beq	r2,zero,c2c4 <_dtoa_r+0xdd4>
    bec0:	04023d16 	blt	zero,r16,c7b8 <_dtoa_r+0x12c8>
    bec4:	b5c00005 	stb	r23,0(r22)
    bec8:	d9800517 	ldw	r6,20(sp)
    becc:	d9000f17 	ldw	r4,60(sp)
    bed0:	b5800044 	addi	r22,r22,1
    bed4:	3105883a 	add	r2,r6,r4
    bed8:	b0806526 	beq	r22,r2,c070 <_dtoa_r+0xb80>
    bedc:	d9400717 	ldw	r5,28(sp)
    bee0:	d9001617 	ldw	r4,88(sp)
    bee4:	01800284 	movi	r6,10
    bee8:	000f883a 	mov	r7,zero
    beec:	000fd880 	call	fd88 <__multadd>
    bef0:	d8800715 	stw	r2,28(sp)
    bef4:	d8800617 	ldw	r2,24(sp)
    bef8:	14c10c26 	beq	r2,r19,c32c <_dtoa_r+0xe3c>
    befc:	d9400617 	ldw	r5,24(sp)
    bf00:	d9001617 	ldw	r4,88(sp)
    bf04:	01800284 	movi	r6,10
    bf08:	000f883a 	mov	r7,zero
    bf0c:	000fd880 	call	fd88 <__multadd>
    bf10:	d9001617 	ldw	r4,88(sp)
    bf14:	980b883a 	mov	r5,r19
    bf18:	01800284 	movi	r6,10
    bf1c:	000f883a 	mov	r7,zero
    bf20:	d8800615 	stw	r2,24(sp)
    bf24:	000fd880 	call	fd88 <__multadd>
    bf28:	1027883a 	mov	r19,r2
    bf2c:	003fc206 	br	be38 <_dtoa_r+0x948>
    bf30:	2445c83a 	sub	r2,r4,r17
    bf34:	a088983a 	sll	r4,r20,r2
    bf38:	003e4b06 	br	b868 <_dtoa_r+0x378>
    bf3c:	01bfffc4 	movi	r6,-1
    bf40:	00800044 	movi	r2,1
    bf44:	d9800e15 	stw	r6,56(sp)
    bf48:	d9800f15 	stw	r6,60(sp)
    bf4c:	d8800b15 	stw	r2,44(sp)
    bf50:	d8c01617 	ldw	r3,88(sp)
    bf54:	008005c4 	movi	r2,23
    bf58:	18001115 	stw	zero,68(r3)
    bf5c:	1580082e 	bgeu	r2,r22,bf80 <_dtoa_r+0xa90>
    bf60:	00c00104 	movi	r3,4
    bf64:	0009883a 	mov	r4,zero
    bf68:	18c7883a 	add	r3,r3,r3
    bf6c:	18800504 	addi	r2,r3,20
    bf70:	21000044 	addi	r4,r4,1
    bf74:	b0bffc2e 	bgeu	r22,r2,bf68 <_dtoa_r+0xa78>
    bf78:	d9801617 	ldw	r6,88(sp)
    bf7c:	31001115 	stw	r4,68(r6)
    bf80:	dc000f17 	ldw	r16,60(sp)
    bf84:	003e4b06 	br	b8b4 <_dtoa_r+0x3c4>
    bf88:	d9801717 	ldw	r6,92(sp)
    bf8c:	0023883a 	mov	r17,zero
    bf90:	31bfff04 	addi	r6,r6,-4
    bf94:	d9801715 	stw	r6,92(sp)
    bf98:	003df806 	br	b77c <_dtoa_r+0x28c>
    bf9c:	00800804 	movi	r2,32
    bfa0:	10c9c83a 	sub	r4,r2,r3
    bfa4:	00c00104 	movi	r3,4
    bfa8:	19005a16 	blt	r3,r4,c114 <_dtoa_r+0xc24>
    bfac:	008000c4 	movi	r2,3
    bfb0:	113f7e16 	blt	r2,r4,bdac <_dtoa_r+0x8bc>
    bfb4:	20800704 	addi	r2,r4,28
    bfb8:	003f7506 	br	bd90 <_dtoa_r+0x8a0>
    bfbc:	d9801717 	ldw	r6,92(sp)
    bfc0:	00800044 	movi	r2,1
    bfc4:	1180a10e 	bge	r2,r6,c24c <_dtoa_r+0xd5c>
    bfc8:	d9800f17 	ldw	r6,60(sp)
    bfcc:	d8c01017 	ldw	r3,64(sp)
    bfd0:	30bfffc4 	addi	r2,r6,-1
    bfd4:	1881c616 	blt	r3,r2,c6f0 <_dtoa_r+0x1200>
    bfd8:	18a5c83a 	sub	r18,r3,r2
    bfdc:	d8800f17 	ldw	r2,60(sp)
    bfe0:	10026216 	blt	r2,zero,c96c <_dtoa_r+0x147c>
    bfe4:	dc001117 	ldw	r16,68(sp)
    bfe8:	1007883a 	mov	r3,r2
    bfec:	d9800a17 	ldw	r6,40(sp)
    bff0:	d8801117 	ldw	r2,68(sp)
    bff4:	d9001617 	ldw	r4,88(sp)
    bff8:	30cd883a 	add	r6,r6,r3
    bffc:	10c5883a 	add	r2,r2,r3
    c000:	01400044 	movi	r5,1
    c004:	d9800a15 	stw	r6,40(sp)
    c008:	d8801115 	stw	r2,68(sp)
    c00c:	000fd4c0 	call	fd4c <__i2b>
    c010:	1027883a 	mov	r19,r2
    c014:	003f2506 	br	bcac <_dtoa_r+0x7bc>
    c018:	00c20034 	movhi	r3,2048
    c01c:	18c13a04 	addi	r3,r3,1256
    c020:	003d6706 	br	b5c0 <_dtoa_r+0xd0>
    c024:	dd800517 	ldw	r22,20(sp)
    c028:	04000044 	movi	r16,1
    c02c:	00000706 	br	c04c <_dtoa_r+0xb5c>
    c030:	d9400717 	ldw	r5,28(sp)
    c034:	d9001617 	ldw	r4,88(sp)
    c038:	01800284 	movi	r6,10
    c03c:	000f883a 	mov	r7,zero
    c040:	000fd880 	call	fd88 <__multadd>
    c044:	d8800715 	stw	r2,28(sp)
    c048:	84000044 	addi	r16,r16,1
    c04c:	d9000717 	ldw	r4,28(sp)
    c050:	900b883a 	mov	r5,r18
    c054:	000b2d80 	call	b2d8 <quorem>
    c058:	15c00c04 	addi	r23,r2,48
    c05c:	b5c00005 	stb	r23,0(r22)
    c060:	d8c00f17 	ldw	r3,60(sp)
    c064:	b5800044 	addi	r22,r22,1
    c068:	80fff116 	blt	r16,r3,c030 <_dtoa_r+0xb40>
    c06c:	d8000615 	stw	zero,24(sp)
    c070:	d9400717 	ldw	r5,28(sp)
    c074:	d9001617 	ldw	r4,88(sp)
    c078:	01800044 	movi	r6,1
    c07c:	000fa180 	call	fa18 <__lshift>
    c080:	1009883a 	mov	r4,r2
    c084:	900b883a 	mov	r5,r18
    c088:	d8800715 	stw	r2,28(sp)
    c08c:	000f2300 	call	f230 <__mcmp>
    c090:	00803c0e 	bge	zero,r2,c184 <_dtoa_r+0xc94>
    c094:	b009883a 	mov	r4,r22
    c098:	213fffc4 	addi	r4,r4,-1
    c09c:	21400003 	ldbu	r5,0(r4)
    c0a0:	00800e44 	movi	r2,57
    c0a4:	28c03fcc 	andi	r3,r5,255
    c0a8:	18c0201c 	xori	r3,r3,128
    c0ac:	18ffe004 	addi	r3,r3,-128
    c0b0:	1881981e 	bne	r3,r2,c714 <_dtoa_r+0x1224>
    c0b4:	d9800517 	ldw	r6,20(sp)
    c0b8:	21bff71e 	bne	r4,r6,c098 <_dtoa_r+0xba8>
    c0bc:	d8800d17 	ldw	r2,52(sp)
    c0c0:	37000044 	addi	fp,r6,1
    c0c4:	10800044 	addi	r2,r2,1
    c0c8:	d8800d15 	stw	r2,52(sp)
    c0cc:	00800c44 	movi	r2,49
    c0d0:	30800005 	stb	r2,0(r6)
    c0d4:	d9001617 	ldw	r4,88(sp)
    c0d8:	900b883a 	mov	r5,r18
    c0dc:	000f0d40 	call	f0d4 <_Bfree>
    c0e0:	983ecd26 	beq	r19,zero,bc18 <_dtoa_r+0x728>
    c0e4:	d8c00617 	ldw	r3,24(sp)
    c0e8:	18000426 	beq	r3,zero,c0fc <_dtoa_r+0xc0c>
    c0ec:	1cc00326 	beq	r3,r19,c0fc <_dtoa_r+0xc0c>
    c0f0:	d9001617 	ldw	r4,88(sp)
    c0f4:	180b883a 	mov	r5,r3
    c0f8:	000f0d40 	call	f0d4 <_Bfree>
    c0fc:	d9001617 	ldw	r4,88(sp)
    c100:	980b883a 	mov	r5,r19
    c104:	000f0d40 	call	f0d4 <_Bfree>
    c108:	003ec306 	br	bc18 <_dtoa_r+0x728>
    c10c:	1805883a 	mov	r2,r3
    c110:	003eeb06 	br	bcc0 <_dtoa_r+0x7d0>
    c114:	d9800a17 	ldw	r6,40(sp)
    c118:	d8c01117 	ldw	r3,68(sp)
    c11c:	20bfff04 	addi	r2,r4,-4
    c120:	308d883a 	add	r6,r6,r2
    c124:	1887883a 	add	r3,r3,r2
    c128:	80a1883a 	add	r16,r16,r2
    c12c:	d9800a15 	stw	r6,40(sp)
    c130:	d8c01115 	stw	r3,68(sp)
    c134:	003f1d06 	br	bdac <_dtoa_r+0x8bc>
    c138:	a03f0c1e 	bne	r20,zero,bd6c <_dtoa_r+0x87c>
    c13c:	00800434 	movhi	r2,16
    c140:	10bfffc4 	addi	r2,r2,-1
    c144:	a884703a 	and	r2,r21,r2
    c148:	103f081e 	bne	r2,zero,bd6c <_dtoa_r+0x87c>
    c14c:	a89ffc2c 	andhi	r2,r21,32752
    c150:	103f0626 	beq	r2,zero,bd6c <_dtoa_r+0x87c>
    c154:	d8c01117 	ldw	r3,68(sp)
    c158:	d9000a17 	ldw	r4,40(sp)
    c15c:	18c00044 	addi	r3,r3,1
    c160:	21000044 	addi	r4,r4,1
    c164:	d8c01115 	stw	r3,68(sp)
    c168:	d9000a15 	stw	r4,40(sp)
    c16c:	003f0006 	br	bd70 <_dtoa_r+0x880>
    c170:	d9400717 	ldw	r5,28(sp)
    c174:	d9001617 	ldw	r4,88(sp)
    c178:	000fe880 	call	fe88 <__pow5mult>
    c17c:	d8800715 	stw	r2,28(sp)
    c180:	003eed06 	br	bd38 <_dtoa_r+0x848>
    c184:	1000021e 	bne	r2,zero,c190 <_dtoa_r+0xca0>
    c188:	b880004c 	andi	r2,r23,1
    c18c:	103fc11e 	bne	r2,zero,c094 <_dtoa_r+0xba4>
    c190:	b5bfffc4 	addi	r22,r22,-1
    c194:	b0c00007 	ldb	r3,0(r22)
    c198:	00800c04 	movi	r2,48
    c19c:	18bffc26 	beq	r3,r2,c190 <_dtoa_r+0xca0>
    c1a0:	b7000044 	addi	fp,r22,1
    c1a4:	003fcb06 	br	c0d4 <_dtoa_r+0xbe4>
    c1a8:	d9800d17 	ldw	r6,52(sp)
    c1ac:	018fc83a 	sub	r7,zero,r6
    c1b0:	3801f726 	beq	r7,zero,c990 <_dtoa_r+0x14a0>
    c1b4:	398003cc 	andi	r6,r7,15
    c1b8:	300c90fa 	slli	r6,r6,3
    c1bc:	01420034 	movhi	r5,2048
    c1c0:	29415f04 	addi	r5,r5,1404
    c1c4:	d9001217 	ldw	r4,72(sp)
    c1c8:	314d883a 	add	r6,r6,r5
    c1cc:	30c00117 	ldw	r3,4(r6)
    c1d0:	30800017 	ldw	r2,0(r6)
    c1d4:	d9401317 	ldw	r5,76(sp)
    c1d8:	3821d13a 	srai	r16,r7,4
    c1dc:	100d883a 	mov	r6,r2
    c1e0:	180f883a 	mov	r7,r3
    c1e4:	00068740 	call	6874 <__muldf3>
    c1e8:	1011883a 	mov	r8,r2
    c1ec:	1813883a 	mov	r9,r3
    c1f0:	1029883a 	mov	r20,r2
    c1f4:	182b883a 	mov	r21,r3
    c1f8:	8001e526 	beq	r16,zero,c990 <_dtoa_r+0x14a0>
    c1fc:	05800084 	movi	r22,2
    c200:	04420034 	movhi	r17,2048
    c204:	8c419104 	addi	r17,r17,1604
    c208:	8080004c 	andi	r2,r16,1
    c20c:	1005003a 	cmpeq	r2,r2,zero
    c210:	1000081e 	bne	r2,zero,c234 <_dtoa_r+0xd44>
    c214:	89800017 	ldw	r6,0(r17)
    c218:	89c00117 	ldw	r7,4(r17)
    c21c:	480b883a 	mov	r5,r9
    c220:	4009883a 	mov	r4,r8
    c224:	00068740 	call	6874 <__muldf3>
    c228:	1011883a 	mov	r8,r2
    c22c:	b5800044 	addi	r22,r22,1
    c230:	1813883a 	mov	r9,r3
    c234:	8021d07a 	srai	r16,r16,1
    c238:	8c400204 	addi	r17,r17,8
    c23c:	803ff21e 	bne	r16,zero,c208 <_dtoa_r+0xd18>
    c240:	4029883a 	mov	r20,r8
    c244:	482b883a 	mov	r21,r9
    c248:	003dca06 	br	b974 <_dtoa_r+0x484>
    c24c:	d9000817 	ldw	r4,32(sp)
    c250:	2005003a 	cmpeq	r2,r4,zero
    c254:	1001f61e 	bne	r2,zero,ca30 <_dtoa_r+0x1540>
    c258:	dc001117 	ldw	r16,68(sp)
    c25c:	dc801017 	ldw	r18,64(sp)
    c260:	18c10cc4 	addi	r3,r3,1075
    c264:	003f6106 	br	bfec <_dtoa_r+0xafc>
    c268:	d8000b15 	stw	zero,44(sp)
    c26c:	d9802617 	ldw	r6,152(sp)
    c270:	d8c00d17 	ldw	r3,52(sp)
    c274:	30800044 	addi	r2,r6,1
    c278:	18ad883a 	add	r22,r3,r2
    c27c:	b13fffc4 	addi	r4,r22,-1
    c280:	d9000e15 	stw	r4,56(sp)
    c284:	0581f60e 	bge	zero,r22,ca60 <_dtoa_r+0x1570>
    c288:	dd800f15 	stw	r22,60(sp)
    c28c:	003f3006 	br	bf50 <_dtoa_r+0xa60>
    c290:	d8000b15 	stw	zero,44(sp)
    c294:	d9002617 	ldw	r4,152(sp)
    c298:	0101eb0e 	bge	zero,r4,ca48 <_dtoa_r+0x1558>
    c29c:	202d883a 	mov	r22,r4
    c2a0:	d9000e15 	stw	r4,56(sp)
    c2a4:	d9000f15 	stw	r4,60(sp)
    c2a8:	003f2906 	br	bf50 <_dtoa_r+0xa60>
    c2ac:	01800044 	movi	r6,1
    c2b0:	d9800b15 	stw	r6,44(sp)
    c2b4:	003ff706 	br	c294 <_dtoa_r+0xda4>
    c2b8:	01000044 	movi	r4,1
    c2bc:	d9000b15 	stw	r4,44(sp)
    c2c0:	003fea06 	br	c26c <_dtoa_r+0xd7c>
    c2c4:	04000c0e 	bge	zero,r16,c2f8 <_dtoa_r+0xe08>
    c2c8:	d9400717 	ldw	r5,28(sp)
    c2cc:	d9001617 	ldw	r4,88(sp)
    c2d0:	01800044 	movi	r6,1
    c2d4:	000fa180 	call	fa18 <__lshift>
    c2d8:	1009883a 	mov	r4,r2
    c2dc:	900b883a 	mov	r5,r18
    c2e0:	d8800715 	stw	r2,28(sp)
    c2e4:	000f2300 	call	f230 <__mcmp>
    c2e8:	0081e00e 	bge	zero,r2,ca6c <_dtoa_r+0x157c>
    c2ec:	bdc00044 	addi	r23,r23,1
    c2f0:	00800e84 	movi	r2,58
    c2f4:	b881a226 	beq	r23,r2,c980 <_dtoa_r+0x1490>
    c2f8:	b7000044 	addi	fp,r22,1
    c2fc:	b5c00005 	stb	r23,0(r22)
    c300:	003f7406 	br	c0d4 <_dtoa_r+0xbe4>
    c304:	00800e44 	movi	r2,57
    c308:	b8819d26 	beq	r23,r2,c980 <_dtoa_r+0x1490>
    c30c:	053ffa0e 	bge	zero,r20,c2f8 <_dtoa_r+0xe08>
    c310:	8dc00c44 	addi	r23,r17,49
    c314:	003ff806 	br	c2f8 <_dtoa_r+0xe08>
    c318:	d9001617 	ldw	r4,88(sp)
    c31c:	a80b883a 	mov	r5,r21
    c320:	04000044 	movi	r16,1
    c324:	000f0d40 	call	f0d4 <_Bfree>
    c328:	003edf06 	br	bea8 <_dtoa_r+0x9b8>
    c32c:	d9001617 	ldw	r4,88(sp)
    c330:	980b883a 	mov	r5,r19
    c334:	01800284 	movi	r6,10
    c338:	000f883a 	mov	r7,zero
    c33c:	000fd880 	call	fd88 <__multadd>
    c340:	1027883a 	mov	r19,r2
    c344:	d8800615 	stw	r2,24(sp)
    c348:	003ebb06 	br	be38 <_dtoa_r+0x948>
    c34c:	d9801117 	ldw	r6,68(sp)
    c350:	d8800d17 	ldw	r2,52(sp)
    c354:	d8000915 	stw	zero,36(sp)
    c358:	308dc83a 	sub	r6,r6,r2
    c35c:	0087c83a 	sub	r3,zero,r2
    c360:	d9801115 	stw	r6,68(sp)
    c364:	d8c01015 	stw	r3,64(sp)
    c368:	003cfe06 	br	b764 <_dtoa_r+0x274>
    c36c:	018dc83a 	sub	r6,zero,r6
    c370:	d9801115 	stw	r6,68(sp)
    c374:	d8000a15 	stw	zero,40(sp)
    c378:	003cf306 	br	b748 <_dtoa_r+0x258>
    c37c:	d9000d17 	ldw	r4,52(sp)
    c380:	0006f180 	call	6f18 <__floatsidf>
    c384:	880b883a 	mov	r5,r17
    c388:	8009883a 	mov	r4,r16
    c38c:	180f883a 	mov	r7,r3
    c390:	100d883a 	mov	r6,r2
    c394:	0011f900 	call	11f90 <__nedf2>
    c398:	103ce126 	beq	r2,zero,b720 <_dtoa_r+0x230>
    c39c:	d9800d17 	ldw	r6,52(sp)
    c3a0:	31bfffc4 	addi	r6,r6,-1
    c3a4:	d9800d15 	stw	r6,52(sp)
    c3a8:	003cdd06 	br	b720 <_dtoa_r+0x230>
    c3ac:	d9000717 	ldw	r4,28(sp)
    c3b0:	900b883a 	mov	r5,r18
    c3b4:	000f2300 	call	f230 <__mcmp>
    c3b8:	103e8d0e 	bge	r2,zero,bdf0 <_dtoa_r+0x900>
    c3bc:	d9400717 	ldw	r5,28(sp)
    c3c0:	d9001617 	ldw	r4,88(sp)
    c3c4:	01800284 	movi	r6,10
    c3c8:	000f883a 	mov	r7,zero
    c3cc:	000fd880 	call	fd88 <__multadd>
    c3d0:	d9800d17 	ldw	r6,52(sp)
    c3d4:	d8800715 	stw	r2,28(sp)
    c3d8:	31bfffc4 	addi	r6,r6,-1
    c3dc:	d9800d15 	stw	r6,52(sp)
    c3e0:	b001a71e 	bne	r22,zero,ca80 <_dtoa_r+0x1590>
    c3e4:	d8800e17 	ldw	r2,56(sp)
    c3e8:	d8800f15 	stw	r2,60(sp)
    c3ec:	003e8006 	br	bdf0 <_dtoa_r+0x900>
    c3f0:	90800417 	ldw	r2,16(r18)
    c3f4:	1085883a 	add	r2,r2,r2
    c3f8:	1085883a 	add	r2,r2,r2
    c3fc:	1485883a 	add	r2,r2,r18
    c400:	11000417 	ldw	r4,16(r2)
    c404:	000f0fc0 	call	f0fc <__hi0bits>
    c408:	00c00804 	movi	r3,32
    c40c:	1887c83a 	sub	r3,r3,r2
    c410:	003e5a06 	br	bd7c <_dtoa_r+0x88c>
    c414:	d9400717 	ldw	r5,28(sp)
    c418:	d9801017 	ldw	r6,64(sp)
    c41c:	d9001617 	ldw	r4,88(sp)
    c420:	000fe880 	call	fe88 <__pow5mult>
    c424:	d8800715 	stw	r2,28(sp)
    c428:	003e4306 	br	bd38 <_dtoa_r+0x848>
    c42c:	d9800f17 	ldw	r6,60(sp)
    c430:	d8800d17 	ldw	r2,52(sp)
    c434:	d9800315 	stw	r6,12(sp)
    c438:	d8800415 	stw	r2,16(sp)
    c43c:	d8c00b17 	ldw	r3,44(sp)
    c440:	1805003a 	cmpeq	r2,r3,zero
    c444:	1000e21e 	bne	r2,zero,c7d0 <_dtoa_r+0x12e0>
    c448:	d9000317 	ldw	r4,12(sp)
    c44c:	0005883a 	mov	r2,zero
    c450:	00cff834 	movhi	r3,16352
    c454:	200c90fa 	slli	r6,r4,3
    c458:	01020034 	movhi	r4,2048
    c45c:	21015f04 	addi	r4,r4,1404
    c460:	180b883a 	mov	r5,r3
    c464:	310d883a 	add	r6,r6,r4
    c468:	327fff17 	ldw	r9,-4(r6)
    c46c:	323ffe17 	ldw	r8,-8(r6)
    c470:	1009883a 	mov	r4,r2
    c474:	480f883a 	mov	r7,r9
    c478:	400d883a 	mov	r6,r8
    c47c:	0006c380 	call	6c38 <__divdf3>
    c480:	180b883a 	mov	r5,r3
    c484:	b00d883a 	mov	r6,r22
    c488:	b80f883a 	mov	r7,r23
    c48c:	1009883a 	mov	r4,r2
    c490:	00067800 	call	6780 <__subdf3>
    c494:	a80b883a 	mov	r5,r21
    c498:	a009883a 	mov	r4,r20
    c49c:	d8c01915 	stw	r3,100(sp)
    c4a0:	d8801815 	stw	r2,96(sp)
    c4a4:	00070100 	call	7010 <__fixdfsi>
    c4a8:	1009883a 	mov	r4,r2
    c4ac:	1027883a 	mov	r19,r2
    c4b0:	0006f180 	call	6f18 <__floatsidf>
    c4b4:	a80b883a 	mov	r5,r21
    c4b8:	a009883a 	mov	r4,r20
    c4bc:	180f883a 	mov	r7,r3
    c4c0:	100d883a 	mov	r6,r2
    c4c4:	00067800 	call	6780 <__subdf3>
    c4c8:	d9801817 	ldw	r6,96(sp)
    c4cc:	1823883a 	mov	r17,r3
    c4d0:	d8801415 	stw	r2,80(sp)
    c4d4:	302d883a 	mov	r22,r6
    c4d8:	d9800517 	ldw	r6,20(sp)
    c4dc:	9cc00c04 	addi	r19,r19,48
    c4e0:	dc401515 	stw	r17,84(sp)
    c4e4:	d8c01917 	ldw	r3,100(sp)
    c4e8:	34c00005 	stb	r19,0(r6)
    c4ec:	d8800517 	ldw	r2,20(sp)
    c4f0:	d9401917 	ldw	r5,100(sp)
    c4f4:	d9801417 	ldw	r6,80(sp)
    c4f8:	b009883a 	mov	r4,r22
    c4fc:	880f883a 	mov	r7,r17
    c500:	182f883a 	mov	r23,r3
    c504:	17000044 	addi	fp,r2,1
    c508:	0006e900 	call	6e90 <__gtdf2>
    c50c:	00804e16 	blt	zero,r2,c648 <_dtoa_r+0x1158>
    c510:	d9801417 	ldw	r6,80(sp)
    c514:	0005883a 	mov	r2,zero
    c518:	00cffc34 	movhi	r3,16368
    c51c:	180b883a 	mov	r5,r3
    c520:	880f883a 	mov	r7,r17
    c524:	1009883a 	mov	r4,r2
    c528:	00067800 	call	6780 <__subdf3>
    c52c:	d9401917 	ldw	r5,100(sp)
    c530:	180f883a 	mov	r7,r3
    c534:	b009883a 	mov	r4,r22
    c538:	100d883a 	mov	r6,r2
    c53c:	0006e900 	call	6e90 <__gtdf2>
    c540:	00bda216 	blt	zero,r2,bbcc <_dtoa_r+0x6dc>
    c544:	d8c00317 	ldw	r3,12(sp)
    c548:	00800044 	movi	r2,1
    c54c:	10c01216 	blt	r2,r3,c598 <_dtoa_r+0x10a8>
    c550:	003d4506 	br	ba68 <_dtoa_r+0x578>
    c554:	d9801417 	ldw	r6,80(sp)
    c558:	0005883a 	mov	r2,zero
    c55c:	00cffc34 	movhi	r3,16368
    c560:	180b883a 	mov	r5,r3
    c564:	880f883a 	mov	r7,r17
    c568:	1009883a 	mov	r4,r2
    c56c:	00067800 	call	6780 <__subdf3>
    c570:	d9c01b17 	ldw	r7,108(sp)
    c574:	180b883a 	mov	r5,r3
    c578:	1009883a 	mov	r4,r2
    c57c:	b00d883a 	mov	r6,r22
    c580:	00120a00 	call	120a0 <__ltdf2>
    c584:	103d9116 	blt	r2,zero,bbcc <_dtoa_r+0x6dc>
    c588:	d9800517 	ldw	r6,20(sp)
    c58c:	d9000317 	ldw	r4,12(sp)
    c590:	3105883a 	add	r2,r6,r4
    c594:	e0bd3426 	beq	fp,r2,ba68 <_dtoa_r+0x578>
    c598:	04500934 	movhi	r17,16420
    c59c:	0021883a 	mov	r16,zero
    c5a0:	b80b883a 	mov	r5,r23
    c5a4:	b009883a 	mov	r4,r22
    c5a8:	800d883a 	mov	r6,r16
    c5ac:	880f883a 	mov	r7,r17
    c5b0:	00068740 	call	6874 <__muldf3>
    c5b4:	d9401517 	ldw	r5,84(sp)
    c5b8:	d9001417 	ldw	r4,80(sp)
    c5bc:	880f883a 	mov	r7,r17
    c5c0:	000d883a 	mov	r6,zero
    c5c4:	d8801a15 	stw	r2,104(sp)
    c5c8:	d8c01b15 	stw	r3,108(sp)
    c5cc:	00068740 	call	6874 <__muldf3>
    c5d0:	180b883a 	mov	r5,r3
    c5d4:	1009883a 	mov	r4,r2
    c5d8:	1823883a 	mov	r17,r3
    c5dc:	1021883a 	mov	r16,r2
    c5e0:	00070100 	call	7010 <__fixdfsi>
    c5e4:	1009883a 	mov	r4,r2
    c5e8:	102b883a 	mov	r21,r2
    c5ec:	0006f180 	call	6f18 <__floatsidf>
    c5f0:	880b883a 	mov	r5,r17
    c5f4:	8009883a 	mov	r4,r16
    c5f8:	180f883a 	mov	r7,r3
    c5fc:	100d883a 	mov	r6,r2
    c600:	00067800 	call	6780 <__subdf3>
    c604:	1021883a 	mov	r16,r2
    c608:	d9001b17 	ldw	r4,108(sp)
    c60c:	1823883a 	mov	r17,r3
    c610:	dc001415 	stw	r16,80(sp)
    c614:	ad400c04 	addi	r21,r21,48
    c618:	dc401515 	stw	r17,84(sp)
    c61c:	d8801a17 	ldw	r2,104(sp)
    c620:	e5400005 	stb	r21,0(fp)
    c624:	202f883a 	mov	r23,r4
    c628:	d9c01b17 	ldw	r7,108(sp)
    c62c:	d9001417 	ldw	r4,80(sp)
    c630:	880b883a 	mov	r5,r17
    c634:	100d883a 	mov	r6,r2
    c638:	102d883a 	mov	r22,r2
    c63c:	e7000044 	addi	fp,fp,1
    c640:	00120a00 	call	120a0 <__ltdf2>
    c644:	103fc30e 	bge	r2,zero,c554 <_dtoa_r+0x1064>
    c648:	d9000417 	ldw	r4,16(sp)
    c64c:	d9000d15 	stw	r4,52(sp)
    c650:	003d7106 	br	bc18 <_dtoa_r+0x728>
    c654:	d9801717 	ldw	r6,92(sp)
    c658:	00800084 	movi	r2,2
    c65c:	11bde60e 	bge	r2,r6,bdf8 <_dtoa_r+0x908>
    c660:	203cfb1e 	bne	r4,zero,ba50 <_dtoa_r+0x560>
    c664:	d9001617 	ldw	r4,88(sp)
    c668:	900b883a 	mov	r5,r18
    c66c:	01800144 	movi	r6,5
    c670:	000f883a 	mov	r7,zero
    c674:	000fd880 	call	fd88 <__multadd>
    c678:	d9000717 	ldw	r4,28(sp)
    c67c:	100b883a 	mov	r5,r2
    c680:	1025883a 	mov	r18,r2
    c684:	000f2300 	call	f230 <__mcmp>
    c688:	00bcf10e 	bge	zero,r2,ba50 <_dtoa_r+0x560>
    c68c:	d8c00d17 	ldw	r3,52(sp)
    c690:	d9000517 	ldw	r4,20(sp)
    c694:	d8000615 	stw	zero,24(sp)
    c698:	18c00044 	addi	r3,r3,1
    c69c:	d8c00d15 	stw	r3,52(sp)
    c6a0:	00800c44 	movi	r2,49
    c6a4:	27000044 	addi	fp,r4,1
    c6a8:	20800005 	stb	r2,0(r4)
    c6ac:	003e8906 	br	c0d4 <_dtoa_r+0xbe4>
    c6b0:	d8c00517 	ldw	r3,20(sp)
    c6b4:	003bc206 	br	b5c0 <_dtoa_r+0xd0>
    c6b8:	01820034 	movhi	r6,2048
    c6bc:	31819104 	addi	r6,r6,1604
    c6c0:	30c00917 	ldw	r3,36(r6)
    c6c4:	30800817 	ldw	r2,32(r6)
    c6c8:	d9001217 	ldw	r4,72(sp)
    c6cc:	d9401317 	ldw	r5,76(sp)
    c6d0:	180f883a 	mov	r7,r3
    c6d4:	100d883a 	mov	r6,r2
    c6d8:	0006c380 	call	6c38 <__divdf3>
    c6dc:	948003cc 	andi	r18,r18,15
    c6e0:	058000c4 	movi	r22,3
    c6e4:	1029883a 	mov	r20,r2
    c6e8:	182b883a 	mov	r21,r3
    c6ec:	003c8906 	br	b914 <_dtoa_r+0x424>
    c6f0:	d9001017 	ldw	r4,64(sp)
    c6f4:	d9800917 	ldw	r6,36(sp)
    c6f8:	0025883a 	mov	r18,zero
    c6fc:	1105c83a 	sub	r2,r2,r4
    c700:	2089883a 	add	r4,r4,r2
    c704:	308d883a 	add	r6,r6,r2
    c708:	d9001015 	stw	r4,64(sp)
    c70c:	d9800915 	stw	r6,36(sp)
    c710:	003e3206 	br	bfdc <_dtoa_r+0xaec>
    c714:	28800044 	addi	r2,r5,1
    c718:	27000044 	addi	fp,r4,1
    c71c:	20800005 	stb	r2,0(r4)
    c720:	003e6c06 	br	c0d4 <_dtoa_r+0xbe4>
    c724:	d8800f17 	ldw	r2,60(sp)
    c728:	00bce016 	blt	zero,r2,baac <_dtoa_r+0x5bc>
    c72c:	d9800f17 	ldw	r6,60(sp)
    c730:	303cc51e 	bne	r6,zero,ba48 <_dtoa_r+0x558>
    c734:	0005883a 	mov	r2,zero
    c738:	00d00534 	movhi	r3,16404
    c73c:	980b883a 	mov	r5,r19
    c740:	180f883a 	mov	r7,r3
    c744:	9009883a 	mov	r4,r18
    c748:	100d883a 	mov	r6,r2
    c74c:	00068740 	call	6874 <__muldf3>
    c750:	180b883a 	mov	r5,r3
    c754:	a80f883a 	mov	r7,r21
    c758:	1009883a 	mov	r4,r2
    c75c:	a00d883a 	mov	r6,r20
    c760:	00120180 	call	12018 <__gedf2>
    c764:	103cb80e 	bge	r2,zero,ba48 <_dtoa_r+0x558>
    c768:	0027883a 	mov	r19,zero
    c76c:	0025883a 	mov	r18,zero
    c770:	003fc606 	br	c68c <_dtoa_r+0x119c>
    c774:	99400117 	ldw	r5,4(r19)
    c778:	d9001617 	ldw	r4,88(sp)
    c77c:	000f6540 	call	f654 <_Balloc>
    c780:	99800417 	ldw	r6,16(r19)
    c784:	11000304 	addi	r4,r2,12
    c788:	99400304 	addi	r5,r19,12
    c78c:	318d883a 	add	r6,r6,r6
    c790:	318d883a 	add	r6,r6,r6
    c794:	31800204 	addi	r6,r6,8
    c798:	1023883a 	mov	r17,r2
    c79c:	00077880 	call	7788 <memcpy>
    c7a0:	d9001617 	ldw	r4,88(sp)
    c7a4:	880b883a 	mov	r5,r17
    c7a8:	01800044 	movi	r6,1
    c7ac:	000fa180 	call	fa18 <__lshift>
    c7b0:	100b883a 	mov	r5,r2
    c7b4:	003d9c06 	br	be28 <_dtoa_r+0x938>
    c7b8:	00800e44 	movi	r2,57
    c7bc:	b8807026 	beq	r23,r2,c980 <_dtoa_r+0x1490>
    c7c0:	b8800044 	addi	r2,r23,1
    c7c4:	b7000044 	addi	fp,r22,1
    c7c8:	b0800005 	stb	r2,0(r22)
    c7cc:	003e4106 	br	c0d4 <_dtoa_r+0xbe4>
    c7d0:	d8800317 	ldw	r2,12(sp)
    c7d4:	01820034 	movhi	r6,2048
    c7d8:	31815f04 	addi	r6,r6,1404
    c7dc:	b009883a 	mov	r4,r22
    c7e0:	100e90fa 	slli	r7,r2,3
    c7e4:	b80b883a 	mov	r5,r23
    c7e8:	398f883a 	add	r7,r7,r6
    c7ec:	38bffe17 	ldw	r2,-8(r7)
    c7f0:	d9800517 	ldw	r6,20(sp)
    c7f4:	38ffff17 	ldw	r3,-4(r7)
    c7f8:	37000044 	addi	fp,r6,1
    c7fc:	180f883a 	mov	r7,r3
    c800:	100d883a 	mov	r6,r2
    c804:	00068740 	call	6874 <__muldf3>
    c808:	a80b883a 	mov	r5,r21
    c80c:	a009883a 	mov	r4,r20
    c810:	182f883a 	mov	r23,r3
    c814:	102d883a 	mov	r22,r2
    c818:	00070100 	call	7010 <__fixdfsi>
    c81c:	1009883a 	mov	r4,r2
    c820:	1027883a 	mov	r19,r2
    c824:	0006f180 	call	6f18 <__floatsidf>
    c828:	a80b883a 	mov	r5,r21
    c82c:	a009883a 	mov	r4,r20
    c830:	180f883a 	mov	r7,r3
    c834:	100d883a 	mov	r6,r2
    c838:	00067800 	call	6780 <__subdf3>
    c83c:	180b883a 	mov	r5,r3
    c840:	d8c00517 	ldw	r3,20(sp)
    c844:	9cc00c04 	addi	r19,r19,48
    c848:	1009883a 	mov	r4,r2
    c84c:	1cc00005 	stb	r19,0(r3)
    c850:	2021883a 	mov	r16,r4
    c854:	d9000317 	ldw	r4,12(sp)
    c858:	00800044 	movi	r2,1
    c85c:	2823883a 	mov	r17,r5
    c860:	20802226 	beq	r4,r2,c8ec <_dtoa_r+0x13fc>
    c864:	1029883a 	mov	r20,r2
    c868:	0005883a 	mov	r2,zero
    c86c:	00d00934 	movhi	r3,16420
    c870:	180f883a 	mov	r7,r3
    c874:	100d883a 	mov	r6,r2
    c878:	880b883a 	mov	r5,r17
    c87c:	8009883a 	mov	r4,r16
    c880:	00068740 	call	6874 <__muldf3>
    c884:	180b883a 	mov	r5,r3
    c888:	1009883a 	mov	r4,r2
    c88c:	1823883a 	mov	r17,r3
    c890:	1021883a 	mov	r16,r2
    c894:	00070100 	call	7010 <__fixdfsi>
    c898:	1009883a 	mov	r4,r2
    c89c:	102b883a 	mov	r21,r2
    c8a0:	0006f180 	call	6f18 <__floatsidf>
    c8a4:	880b883a 	mov	r5,r17
    c8a8:	8009883a 	mov	r4,r16
    c8ac:	180f883a 	mov	r7,r3
    c8b0:	100d883a 	mov	r6,r2
    c8b4:	00067800 	call	6780 <__subdf3>
    c8b8:	180b883a 	mov	r5,r3
    c8bc:	d8c00517 	ldw	r3,20(sp)
    c8c0:	1009883a 	mov	r4,r2
    c8c4:	ad400c04 	addi	r21,r21,48
    c8c8:	1d05883a 	add	r2,r3,r20
    c8cc:	15400005 	stb	r21,0(r2)
    c8d0:	2021883a 	mov	r16,r4
    c8d4:	d9000317 	ldw	r4,12(sp)
    c8d8:	a5000044 	addi	r20,r20,1
    c8dc:	2823883a 	mov	r17,r5
    c8e0:	a13fe11e 	bne	r20,r4,c868 <_dtoa_r+0x1378>
    c8e4:	e505883a 	add	r2,fp,r20
    c8e8:	173fffc4 	addi	fp,r2,-1
    c8ec:	0025883a 	mov	r18,zero
    c8f0:	04cff834 	movhi	r19,16352
    c8f4:	b009883a 	mov	r4,r22
    c8f8:	b80b883a 	mov	r5,r23
    c8fc:	900d883a 	mov	r6,r18
    c900:	980f883a 	mov	r7,r19
    c904:	00068000 	call	6800 <__adddf3>
    c908:	180b883a 	mov	r5,r3
    c90c:	1009883a 	mov	r4,r2
    c910:	800d883a 	mov	r6,r16
    c914:	880f883a 	mov	r7,r17
    c918:	00120a00 	call	120a0 <__ltdf2>
    c91c:	103cab16 	blt	r2,zero,bbcc <_dtoa_r+0x6dc>
    c920:	0009883a 	mov	r4,zero
    c924:	980b883a 	mov	r5,r19
    c928:	b80f883a 	mov	r7,r23
    c92c:	b00d883a 	mov	r6,r22
    c930:	00067800 	call	6780 <__subdf3>
    c934:	180b883a 	mov	r5,r3
    c938:	880f883a 	mov	r7,r17
    c93c:	1009883a 	mov	r4,r2
    c940:	800d883a 	mov	r6,r16
    c944:	0006e900 	call	6e90 <__gtdf2>
    c948:	00bc470e 	bge	zero,r2,ba68 <_dtoa_r+0x578>
    c94c:	00c00c04 	movi	r3,48
    c950:	e73fffc4 	addi	fp,fp,-1
    c954:	e0800007 	ldb	r2,0(fp)
    c958:	10fffd26 	beq	r2,r3,c950 <_dtoa_r+0x1460>
    c95c:	d9800417 	ldw	r6,16(sp)
    c960:	e7000044 	addi	fp,fp,1
    c964:	d9800d15 	stw	r6,52(sp)
    c968:	003cab06 	br	bc18 <_dtoa_r+0x728>
    c96c:	d8c00f17 	ldw	r3,60(sp)
    c970:	d9001117 	ldw	r4,68(sp)
    c974:	20e1c83a 	sub	r16,r4,r3
    c978:	0007883a 	mov	r3,zero
    c97c:	003d9b06 	br	bfec <_dtoa_r+0xafc>
    c980:	00800e44 	movi	r2,57
    c984:	b0800005 	stb	r2,0(r22)
    c988:	b5800044 	addi	r22,r22,1
    c98c:	003dc106 	br	c094 <_dtoa_r+0xba4>
    c990:	05800084 	movi	r22,2
    c994:	003bf706 	br	b974 <_dtoa_r+0x484>
    c998:	d9000f17 	ldw	r4,60(sp)
    c99c:	013c000e 	bge	zero,r4,b9a0 <_dtoa_r+0x4b0>
    c9a0:	d9800e17 	ldw	r6,56(sp)
    c9a4:	01bc300e 	bge	zero,r6,ba68 <_dtoa_r+0x578>
    c9a8:	0005883a 	mov	r2,zero
    c9ac:	00d00934 	movhi	r3,16420
    c9b0:	a80b883a 	mov	r5,r21
    c9b4:	180f883a 	mov	r7,r3
    c9b8:	a009883a 	mov	r4,r20
    c9bc:	100d883a 	mov	r6,r2
    c9c0:	00068740 	call	6874 <__muldf3>
    c9c4:	b1000044 	addi	r4,r22,1
    c9c8:	1021883a 	mov	r16,r2
    c9cc:	1823883a 	mov	r17,r3
    c9d0:	0006f180 	call	6f18 <__floatsidf>
    c9d4:	880b883a 	mov	r5,r17
    c9d8:	8009883a 	mov	r4,r16
    c9dc:	180f883a 	mov	r7,r3
    c9e0:	100d883a 	mov	r6,r2
    c9e4:	00068740 	call	6874 <__muldf3>
    c9e8:	0011883a 	mov	r8,zero
    c9ec:	02500734 	movhi	r9,16412
    c9f0:	180b883a 	mov	r5,r3
    c9f4:	480f883a 	mov	r7,r9
    c9f8:	1009883a 	mov	r4,r2
    c9fc:	400d883a 	mov	r6,r8
    ca00:	00068000 	call	6800 <__adddf3>
    ca04:	102d883a 	mov	r22,r2
    ca08:	00bf3034 	movhi	r2,64704
    ca0c:	10ef883a 	add	r23,r2,r3
    ca10:	d8800d17 	ldw	r2,52(sp)
    ca14:	d8c00e17 	ldw	r3,56(sp)
    ca18:	8029883a 	mov	r20,r16
    ca1c:	10bfffc4 	addi	r2,r2,-1
    ca20:	882b883a 	mov	r21,r17
    ca24:	d8800415 	stw	r2,16(sp)
    ca28:	d8c00315 	stw	r3,12(sp)
    ca2c:	003e8306 	br	c43c <_dtoa_r+0xf4c>
    ca30:	d8800117 	ldw	r2,4(sp)
    ca34:	dc001117 	ldw	r16,68(sp)
    ca38:	dc801017 	ldw	r18,64(sp)
    ca3c:	00c00d84 	movi	r3,54
    ca40:	1887c83a 	sub	r3,r3,r2
    ca44:	003d6906 	br	bfec <_dtoa_r+0xafc>
    ca48:	01800044 	movi	r6,1
    ca4c:	3021883a 	mov	r16,r6
    ca50:	d9800f15 	stw	r6,60(sp)
    ca54:	d9802615 	stw	r6,152(sp)
    ca58:	d9800e15 	stw	r6,56(sp)
    ca5c:	003b9306 	br	b8ac <_dtoa_r+0x3bc>
    ca60:	b021883a 	mov	r16,r22
    ca64:	dd800f15 	stw	r22,60(sp)
    ca68:	003b9006 	br	b8ac <_dtoa_r+0x3bc>
    ca6c:	103e221e 	bne	r2,zero,c2f8 <_dtoa_r+0xe08>
    ca70:	b880004c 	andi	r2,r23,1
    ca74:	1005003a 	cmpeq	r2,r2,zero
    ca78:	103e1f1e 	bne	r2,zero,c2f8 <_dtoa_r+0xe08>
    ca7c:	003e1b06 	br	c2ec <_dtoa_r+0xdfc>
    ca80:	d9001617 	ldw	r4,88(sp)
    ca84:	980b883a 	mov	r5,r19
    ca88:	01800284 	movi	r6,10
    ca8c:	000f883a 	mov	r7,zero
    ca90:	000fd880 	call	fd88 <__multadd>
    ca94:	d8c00e17 	ldw	r3,56(sp)
    ca98:	1027883a 	mov	r19,r2
    ca9c:	d8c00f15 	stw	r3,60(sp)
    caa0:	003cd306 	br	bdf0 <_dtoa_r+0x900>

0000caa4 <_fflush_r>:
    caa4:	defffb04 	addi	sp,sp,-20
    caa8:	dcc00315 	stw	r19,12(sp)
    caac:	dc800215 	stw	r18,8(sp)
    cab0:	dfc00415 	stw	ra,16(sp)
    cab4:	dc400115 	stw	r17,4(sp)
    cab8:	dc000015 	stw	r16,0(sp)
    cabc:	2027883a 	mov	r19,r4
    cac0:	2825883a 	mov	r18,r5
    cac4:	20000226 	beq	r4,zero,cad0 <_fflush_r+0x2c>
    cac8:	20800e17 	ldw	r2,56(r4)
    cacc:	10005626 	beq	r2,zero,cc28 <_fflush_r+0x184>
    cad0:	9100030b 	ldhu	r4,12(r18)
    cad4:	20ffffcc 	andi	r3,r4,65535
    cad8:	18e0001c 	xori	r3,r3,32768
    cadc:	18e00004 	addi	r3,r3,-32768
    cae0:	1880020c 	andi	r2,r3,8
    cae4:	1000261e 	bne	r2,zero,cb80 <_fflush_r+0xdc>
    cae8:	90c00117 	ldw	r3,4(r18)
    caec:	20820014 	ori	r2,r4,2048
    caf0:	9080030d 	sth	r2,12(r18)
    caf4:	1009883a 	mov	r4,r2
    caf8:	00c0400e 	bge	zero,r3,cbfc <_fflush_r+0x158>
    cafc:	92000a17 	ldw	r8,40(r18)
    cb00:	40004026 	beq	r8,zero,cc04 <_fflush_r+0x160>
    cb04:	2084000c 	andi	r2,r4,4096
    cb08:	10005326 	beq	r2,zero,cc58 <_fflush_r+0x1b4>
    cb0c:	94001417 	ldw	r16,80(r18)
    cb10:	9080030b 	ldhu	r2,12(r18)
    cb14:	1080010c 	andi	r2,r2,4
    cb18:	1000481e 	bne	r2,zero,cc3c <_fflush_r+0x198>
    cb1c:	91400717 	ldw	r5,28(r18)
    cb20:	9809883a 	mov	r4,r19
    cb24:	800d883a 	mov	r6,r16
    cb28:	000f883a 	mov	r7,zero
    cb2c:	403ee83a 	callr	r8
    cb30:	8080261e 	bne	r16,r2,cbcc <_fflush_r+0x128>
    cb34:	9080030b 	ldhu	r2,12(r18)
    cb38:	91000417 	ldw	r4,16(r18)
    cb3c:	90000115 	stw	zero,4(r18)
    cb40:	10bdffcc 	andi	r2,r2,63487
    cb44:	10ffffcc 	andi	r3,r2,65535
    cb48:	18c4000c 	andi	r3,r3,4096
    cb4c:	9080030d 	sth	r2,12(r18)
    cb50:	91000015 	stw	r4,0(r18)
    cb54:	18002b26 	beq	r3,zero,cc04 <_fflush_r+0x160>
    cb58:	0007883a 	mov	r3,zero
    cb5c:	1805883a 	mov	r2,r3
    cb60:	94001415 	stw	r16,80(r18)
    cb64:	dfc00417 	ldw	ra,16(sp)
    cb68:	dcc00317 	ldw	r19,12(sp)
    cb6c:	dc800217 	ldw	r18,8(sp)
    cb70:	dc400117 	ldw	r17,4(sp)
    cb74:	dc000017 	ldw	r16,0(sp)
    cb78:	dec00504 	addi	sp,sp,20
    cb7c:	f800283a 	ret
    cb80:	94400417 	ldw	r17,16(r18)
    cb84:	88001f26 	beq	r17,zero,cc04 <_fflush_r+0x160>
    cb88:	90800017 	ldw	r2,0(r18)
    cb8c:	18c000cc 	andi	r3,r3,3
    cb90:	94400015 	stw	r17,0(r18)
    cb94:	1461c83a 	sub	r16,r2,r17
    cb98:	18002526 	beq	r3,zero,cc30 <_fflush_r+0x18c>
    cb9c:	0005883a 	mov	r2,zero
    cba0:	90800215 	stw	r2,8(r18)
    cba4:	0400170e 	bge	zero,r16,cc04 <_fflush_r+0x160>
    cba8:	90c00917 	ldw	r3,36(r18)
    cbac:	91400717 	ldw	r5,28(r18)
    cbb0:	880d883a 	mov	r6,r17
    cbb4:	800f883a 	mov	r7,r16
    cbb8:	9809883a 	mov	r4,r19
    cbbc:	183ee83a 	callr	r3
    cbc0:	88a3883a 	add	r17,r17,r2
    cbc4:	80a1c83a 	sub	r16,r16,r2
    cbc8:	00bff616 	blt	zero,r2,cba4 <_fflush_r+0x100>
    cbcc:	9080030b 	ldhu	r2,12(r18)
    cbd0:	00ffffc4 	movi	r3,-1
    cbd4:	10801014 	ori	r2,r2,64
    cbd8:	9080030d 	sth	r2,12(r18)
    cbdc:	1805883a 	mov	r2,r3
    cbe0:	dfc00417 	ldw	ra,16(sp)
    cbe4:	dcc00317 	ldw	r19,12(sp)
    cbe8:	dc800217 	ldw	r18,8(sp)
    cbec:	dc400117 	ldw	r17,4(sp)
    cbf0:	dc000017 	ldw	r16,0(sp)
    cbf4:	dec00504 	addi	sp,sp,20
    cbf8:	f800283a 	ret
    cbfc:	90800f17 	ldw	r2,60(r18)
    cc00:	00bfbe16 	blt	zero,r2,cafc <_fflush_r+0x58>
    cc04:	0007883a 	mov	r3,zero
    cc08:	1805883a 	mov	r2,r3
    cc0c:	dfc00417 	ldw	ra,16(sp)
    cc10:	dcc00317 	ldw	r19,12(sp)
    cc14:	dc800217 	ldw	r18,8(sp)
    cc18:	dc400117 	ldw	r17,4(sp)
    cc1c:	dc000017 	ldw	r16,0(sp)
    cc20:	dec00504 	addi	sp,sp,20
    cc24:	f800283a 	ret
    cc28:	000cd3c0 	call	cd3c <__sinit>
    cc2c:	003fa806 	br	cad0 <_fflush_r+0x2c>
    cc30:	90800517 	ldw	r2,20(r18)
    cc34:	90800215 	stw	r2,8(r18)
    cc38:	003fda06 	br	cba4 <_fflush_r+0x100>
    cc3c:	90800117 	ldw	r2,4(r18)
    cc40:	90c00c17 	ldw	r3,48(r18)
    cc44:	80a1c83a 	sub	r16,r16,r2
    cc48:	183fb426 	beq	r3,zero,cb1c <_fflush_r+0x78>
    cc4c:	90800f17 	ldw	r2,60(r18)
    cc50:	80a1c83a 	sub	r16,r16,r2
    cc54:	003fb106 	br	cb1c <_fflush_r+0x78>
    cc58:	91400717 	ldw	r5,28(r18)
    cc5c:	9809883a 	mov	r4,r19
    cc60:	000d883a 	mov	r6,zero
    cc64:	01c00044 	movi	r7,1
    cc68:	403ee83a 	callr	r8
    cc6c:	1021883a 	mov	r16,r2
    cc70:	00bfffc4 	movi	r2,-1
    cc74:	80800226 	beq	r16,r2,cc80 <_fflush_r+0x1dc>
    cc78:	92000a17 	ldw	r8,40(r18)
    cc7c:	003fa406 	br	cb10 <_fflush_r+0x6c>
    cc80:	98c00017 	ldw	r3,0(r19)
    cc84:	00800744 	movi	r2,29
    cc88:	18bfde26 	beq	r3,r2,cc04 <_fflush_r+0x160>
    cc8c:	9080030b 	ldhu	r2,12(r18)
    cc90:	8007883a 	mov	r3,r16
    cc94:	10801014 	ori	r2,r2,64
    cc98:	9080030d 	sth	r2,12(r18)
    cc9c:	003fcf06 	br	cbdc <_fflush_r+0x138>

0000cca0 <fflush>:
    cca0:	01400074 	movhi	r5,1
    cca4:	2972a904 	addi	r5,r5,-13660
    cca8:	2007883a 	mov	r3,r4
    ccac:	20000526 	beq	r4,zero,ccc4 <fflush+0x24>
    ccb0:	00820034 	movhi	r2,2048
    ccb4:	108a0804 	addi	r2,r2,10272
    ccb8:	11000017 	ldw	r4,0(r2)
    ccbc:	180b883a 	mov	r5,r3
    ccc0:	000caa41 	jmpi	caa4 <_fflush_r>
    ccc4:	00820034 	movhi	r2,2048
    ccc8:	108a0904 	addi	r2,r2,10276
    cccc:	11000017 	ldw	r4,0(r2)
    ccd0:	000d8701 	jmpi	d870 <_fwalk_reent>

0000ccd4 <std>:
    ccd4:	00800074 	movhi	r2,1
    ccd8:	10826204 	addi	r2,r2,2440
    ccdc:	20800b15 	stw	r2,44(r4)
    cce0:	00800074 	movhi	r2,1
    cce4:	10829d04 	addi	r2,r2,2676
    cce8:	20800815 	stw	r2,32(r4)
    ccec:	00c00074 	movhi	r3,1
    ccf0:	18c27e04 	addi	r3,r3,2552
    ccf4:	00800074 	movhi	r2,1
    ccf8:	10826404 	addi	r2,r2,2448
    ccfc:	2140030d 	sth	r5,12(r4)
    cd00:	2180038d 	sth	r6,14(r4)
    cd04:	20c00915 	stw	r3,36(r4)
    cd08:	20800a15 	stw	r2,40(r4)
    cd0c:	20000015 	stw	zero,0(r4)
    cd10:	20000115 	stw	zero,4(r4)
    cd14:	20000215 	stw	zero,8(r4)
    cd18:	20000415 	stw	zero,16(r4)
    cd1c:	20000515 	stw	zero,20(r4)
    cd20:	20000615 	stw	zero,24(r4)
    cd24:	21000715 	stw	r4,28(r4)
    cd28:	f800283a 	ret

0000cd2c <__sfp_lock_acquire>:
    cd2c:	f800283a 	ret

0000cd30 <__sfp_lock_release>:
    cd30:	f800283a 	ret

0000cd34 <__sinit_lock_acquire>:
    cd34:	f800283a 	ret

0000cd38 <__sinit_lock_release>:
    cd38:	f800283a 	ret

0000cd3c <__sinit>:
    cd3c:	20800e17 	ldw	r2,56(r4)
    cd40:	defffd04 	addi	sp,sp,-12
    cd44:	dc400115 	stw	r17,4(sp)
    cd48:	dc000015 	stw	r16,0(sp)
    cd4c:	dfc00215 	stw	ra,8(sp)
    cd50:	04400044 	movi	r17,1
    cd54:	01400104 	movi	r5,4
    cd58:	000d883a 	mov	r6,zero
    cd5c:	2021883a 	mov	r16,r4
    cd60:	2200bb04 	addi	r8,r4,748
    cd64:	200f883a 	mov	r7,r4
    cd68:	10000526 	beq	r2,zero,cd80 <__sinit+0x44>
    cd6c:	dfc00217 	ldw	ra,8(sp)
    cd70:	dc400117 	ldw	r17,4(sp)
    cd74:	dc000017 	ldw	r16,0(sp)
    cd78:	dec00304 	addi	sp,sp,12
    cd7c:	f800283a 	ret
    cd80:	21000117 	ldw	r4,4(r4)
    cd84:	00800074 	movhi	r2,1
    cd88:	10b38804 	addi	r2,r2,-12768
    cd8c:	00c000c4 	movi	r3,3
    cd90:	80800f15 	stw	r2,60(r16)
    cd94:	80c0b915 	stw	r3,740(r16)
    cd98:	8200ba15 	stw	r8,744(r16)
    cd9c:	84400e15 	stw	r17,56(r16)
    cda0:	8000b815 	stw	zero,736(r16)
    cda4:	000ccd40 	call	ccd4 <std>
    cda8:	81000217 	ldw	r4,8(r16)
    cdac:	880d883a 	mov	r6,r17
    cdb0:	800f883a 	mov	r7,r16
    cdb4:	01400284 	movi	r5,10
    cdb8:	000ccd40 	call	ccd4 <std>
    cdbc:	81000317 	ldw	r4,12(r16)
    cdc0:	800f883a 	mov	r7,r16
    cdc4:	01400484 	movi	r5,18
    cdc8:	01800084 	movi	r6,2
    cdcc:	dfc00217 	ldw	ra,8(sp)
    cdd0:	dc400117 	ldw	r17,4(sp)
    cdd4:	dc000017 	ldw	r16,0(sp)
    cdd8:	dec00304 	addi	sp,sp,12
    cddc:	000ccd41 	jmpi	ccd4 <std>

0000cde0 <__fp_lock>:
    cde0:	0005883a 	mov	r2,zero
    cde4:	f800283a 	ret

0000cde8 <__fp_unlock>:
    cde8:	0005883a 	mov	r2,zero
    cdec:	f800283a 	ret

0000cdf0 <__fp_unlock_all>:
    cdf0:	00820034 	movhi	r2,2048
    cdf4:	108a0804 	addi	r2,r2,10272
    cdf8:	11000017 	ldw	r4,0(r2)
    cdfc:	01400074 	movhi	r5,1
    ce00:	29737a04 	addi	r5,r5,-12824
    ce04:	000d9381 	jmpi	d938 <_fwalk>

0000ce08 <__fp_lock_all>:
    ce08:	00820034 	movhi	r2,2048
    ce0c:	108a0804 	addi	r2,r2,10272
    ce10:	11000017 	ldw	r4,0(r2)
    ce14:	01400074 	movhi	r5,1
    ce18:	29737804 	addi	r5,r5,-12832
    ce1c:	000d9381 	jmpi	d938 <_fwalk>

0000ce20 <_cleanup_r>:
    ce20:	01400074 	movhi	r5,1
    ce24:	2943e204 	addi	r5,r5,3976
    ce28:	000d9381 	jmpi	d938 <_fwalk>

0000ce2c <_cleanup>:
    ce2c:	00820034 	movhi	r2,2048
    ce30:	108a0904 	addi	r2,r2,10276
    ce34:	11000017 	ldw	r4,0(r2)
    ce38:	000ce201 	jmpi	ce20 <_cleanup_r>

0000ce3c <__sfmoreglue>:
    ce3c:	defffc04 	addi	sp,sp,-16
    ce40:	dc400115 	stw	r17,4(sp)
    ce44:	2c401724 	muli	r17,r5,92
    ce48:	dc800215 	stw	r18,8(sp)
    ce4c:	2825883a 	mov	r18,r5
    ce50:	89400304 	addi	r5,r17,12
    ce54:	dc000015 	stw	r16,0(sp)
    ce58:	dfc00315 	stw	ra,12(sp)
    ce5c:	000e7d00 	call	e7d0 <_malloc_r>
    ce60:	0021883a 	mov	r16,zero
    ce64:	880d883a 	mov	r6,r17
    ce68:	000b883a 	mov	r5,zero
    ce6c:	10000626 	beq	r2,zero,ce88 <__sfmoreglue+0x4c>
    ce70:	11000304 	addi	r4,r2,12
    ce74:	14800115 	stw	r18,4(r2)
    ce78:	10000015 	stw	zero,0(r2)
    ce7c:	11000215 	stw	r4,8(r2)
    ce80:	1021883a 	mov	r16,r2
    ce84:	00078280 	call	7828 <memset>
    ce88:	8005883a 	mov	r2,r16
    ce8c:	dfc00317 	ldw	ra,12(sp)
    ce90:	dc800217 	ldw	r18,8(sp)
    ce94:	dc400117 	ldw	r17,4(sp)
    ce98:	dc000017 	ldw	r16,0(sp)
    ce9c:	dec00404 	addi	sp,sp,16
    cea0:	f800283a 	ret

0000cea4 <__sfp>:
    cea4:	defffd04 	addi	sp,sp,-12
    cea8:	00820034 	movhi	r2,2048
    ceac:	108a0904 	addi	r2,r2,10276
    ceb0:	dc000015 	stw	r16,0(sp)
    ceb4:	14000017 	ldw	r16,0(r2)
    ceb8:	dc400115 	stw	r17,4(sp)
    cebc:	dfc00215 	stw	ra,8(sp)
    cec0:	80800e17 	ldw	r2,56(r16)
    cec4:	2023883a 	mov	r17,r4
    cec8:	10002626 	beq	r2,zero,cf64 <__sfp+0xc0>
    cecc:	8400b804 	addi	r16,r16,736
    ced0:	80800117 	ldw	r2,4(r16)
    ced4:	81000217 	ldw	r4,8(r16)
    ced8:	10ffffc4 	addi	r3,r2,-1
    cedc:	18000916 	blt	r3,zero,cf04 <__sfp+0x60>
    cee0:	2080030f 	ldh	r2,12(r4)
    cee4:	10000b26 	beq	r2,zero,cf14 <__sfp+0x70>
    cee8:	017fffc4 	movi	r5,-1
    ceec:	00000206 	br	cef8 <__sfp+0x54>
    cef0:	2080030f 	ldh	r2,12(r4)
    cef4:	10000726 	beq	r2,zero,cf14 <__sfp+0x70>
    cef8:	18ffffc4 	addi	r3,r3,-1
    cefc:	21001704 	addi	r4,r4,92
    cf00:	197ffb1e 	bne	r3,r5,cef0 <__sfp+0x4c>
    cf04:	80800017 	ldw	r2,0(r16)
    cf08:	10001926 	beq	r2,zero,cf70 <__sfp+0xcc>
    cf0c:	1021883a 	mov	r16,r2
    cf10:	003fef06 	br	ced0 <__sfp+0x2c>
    cf14:	00bfffc4 	movi	r2,-1
    cf18:	00c00044 	movi	r3,1
    cf1c:	2080038d 	sth	r2,14(r4)
    cf20:	20c0030d 	sth	r3,12(r4)
    cf24:	20000015 	stw	zero,0(r4)
    cf28:	20000215 	stw	zero,8(r4)
    cf2c:	20000115 	stw	zero,4(r4)
    cf30:	20000415 	stw	zero,16(r4)
    cf34:	20000515 	stw	zero,20(r4)
    cf38:	20000615 	stw	zero,24(r4)
    cf3c:	20000c15 	stw	zero,48(r4)
    cf40:	20000d15 	stw	zero,52(r4)
    cf44:	20001115 	stw	zero,68(r4)
    cf48:	20001215 	stw	zero,72(r4)
    cf4c:	2005883a 	mov	r2,r4
    cf50:	dfc00217 	ldw	ra,8(sp)
    cf54:	dc400117 	ldw	r17,4(sp)
    cf58:	dc000017 	ldw	r16,0(sp)
    cf5c:	dec00304 	addi	sp,sp,12
    cf60:	f800283a 	ret
    cf64:	8009883a 	mov	r4,r16
    cf68:	000cd3c0 	call	cd3c <__sinit>
    cf6c:	003fd706 	br	cecc <__sfp+0x28>
    cf70:	8809883a 	mov	r4,r17
    cf74:	01400104 	movi	r5,4
    cf78:	000ce3c0 	call	ce3c <__sfmoreglue>
    cf7c:	80800015 	stw	r2,0(r16)
    cf80:	103fe21e 	bne	r2,zero,cf0c <__sfp+0x68>
    cf84:	00800304 	movi	r2,12
    cf88:	0009883a 	mov	r4,zero
    cf8c:	88800015 	stw	r2,0(r17)
    cf90:	003fee06 	br	cf4c <__sfp+0xa8>

0000cf94 <_malloc_trim_r>:
    cf94:	defffb04 	addi	sp,sp,-20
    cf98:	dcc00315 	stw	r19,12(sp)
    cf9c:	04c20034 	movhi	r19,2048
    cfa0:	9cc39604 	addi	r19,r19,3672
    cfa4:	dc800215 	stw	r18,8(sp)
    cfa8:	dc400115 	stw	r17,4(sp)
    cfac:	dc000015 	stw	r16,0(sp)
    cfb0:	2823883a 	mov	r17,r5
    cfb4:	2025883a 	mov	r18,r4
    cfb8:	dfc00415 	stw	ra,16(sp)
    cfbc:	0012d980 	call	12d98 <__malloc_lock>
    cfc0:	98800217 	ldw	r2,8(r19)
    cfc4:	9009883a 	mov	r4,r18
    cfc8:	000b883a 	mov	r5,zero
    cfcc:	10c00117 	ldw	r3,4(r2)
    cfd0:	00bfff04 	movi	r2,-4
    cfd4:	18a0703a 	and	r16,r3,r2
    cfd8:	8463c83a 	sub	r17,r16,r17
    cfdc:	8c43fbc4 	addi	r17,r17,4079
    cfe0:	8822d33a 	srli	r17,r17,12
    cfe4:	0083ffc4 	movi	r2,4095
    cfe8:	8c7fffc4 	addi	r17,r17,-1
    cfec:	8822933a 	slli	r17,r17,12
    cff0:	1440060e 	bge	r2,r17,d00c <_malloc_trim_r+0x78>
    cff4:	00109180 	call	10918 <_sbrk_r>
    cff8:	98c00217 	ldw	r3,8(r19)
    cffc:	9009883a 	mov	r4,r18
    d000:	044bc83a 	sub	r5,zero,r17
    d004:	80c7883a 	add	r3,r16,r3
    d008:	10c00926 	beq	r2,r3,d030 <_malloc_trim_r+0x9c>
    d00c:	0012db80 	call	12db8 <__malloc_unlock>
    d010:	0005883a 	mov	r2,zero
    d014:	dfc00417 	ldw	ra,16(sp)
    d018:	dcc00317 	ldw	r19,12(sp)
    d01c:	dc800217 	ldw	r18,8(sp)
    d020:	dc400117 	ldw	r17,4(sp)
    d024:	dc000017 	ldw	r16,0(sp)
    d028:	dec00504 	addi	sp,sp,20
    d02c:	f800283a 	ret
    d030:	9009883a 	mov	r4,r18
    d034:	00109180 	call	10918 <_sbrk_r>
    d038:	844dc83a 	sub	r6,r16,r17
    d03c:	00ffffc4 	movi	r3,-1
    d040:	9009883a 	mov	r4,r18
    d044:	000b883a 	mov	r5,zero
    d048:	01c20234 	movhi	r7,2056
    d04c:	39febf04 	addi	r7,r7,-1284
    d050:	31800054 	ori	r6,r6,1
    d054:	10c00926 	beq	r2,r3,d07c <_malloc_trim_r+0xe8>
    d058:	38800017 	ldw	r2,0(r7)
    d05c:	98c00217 	ldw	r3,8(r19)
    d060:	9009883a 	mov	r4,r18
    d064:	1445c83a 	sub	r2,r2,r17
    d068:	38800015 	stw	r2,0(r7)
    d06c:	19800115 	stw	r6,4(r3)
    d070:	0012db80 	call	12db8 <__malloc_unlock>
    d074:	00800044 	movi	r2,1
    d078:	003fe606 	br	d014 <_malloc_trim_r+0x80>
    d07c:	00109180 	call	10918 <_sbrk_r>
    d080:	99800217 	ldw	r6,8(r19)
    d084:	100f883a 	mov	r7,r2
    d088:	9009883a 	mov	r4,r18
    d08c:	1187c83a 	sub	r3,r2,r6
    d090:	008003c4 	movi	r2,15
    d094:	19400054 	ori	r5,r3,1
    d098:	10ffdc0e 	bge	r2,r3,d00c <_malloc_trim_r+0x78>
    d09c:	00820034 	movhi	r2,2048
    d0a0:	108a0d04 	addi	r2,r2,10292
    d0a4:	10c00017 	ldw	r3,0(r2)
    d0a8:	00820234 	movhi	r2,2056
    d0ac:	10bebf04 	addi	r2,r2,-1284
    d0b0:	31400115 	stw	r5,4(r6)
    d0b4:	38c7c83a 	sub	r3,r7,r3
    d0b8:	10c00015 	stw	r3,0(r2)
    d0bc:	003fd306 	br	d00c <_malloc_trim_r+0x78>

0000d0c0 <_free_r>:
    d0c0:	defffd04 	addi	sp,sp,-12
    d0c4:	dc400115 	stw	r17,4(sp)
    d0c8:	dc000015 	stw	r16,0(sp)
    d0cc:	dfc00215 	stw	ra,8(sp)
    d0d0:	2821883a 	mov	r16,r5
    d0d4:	2023883a 	mov	r17,r4
    d0d8:	28005a26 	beq	r5,zero,d244 <_free_r+0x184>
    d0dc:	0012d980 	call	12d98 <__malloc_lock>
    d0e0:	823ffe04 	addi	r8,r16,-8
    d0e4:	41400117 	ldw	r5,4(r8)
    d0e8:	00bfff84 	movi	r2,-2
    d0ec:	02820034 	movhi	r10,2048
    d0f0:	52839604 	addi	r10,r10,3672
    d0f4:	288e703a 	and	r7,r5,r2
    d0f8:	41cd883a 	add	r6,r8,r7
    d0fc:	30c00117 	ldw	r3,4(r6)
    d100:	51000217 	ldw	r4,8(r10)
    d104:	00bfff04 	movi	r2,-4
    d108:	1892703a 	and	r9,r3,r2
    d10c:	5017883a 	mov	r11,r10
    d110:	31006726 	beq	r6,r4,d2b0 <_free_r+0x1f0>
    d114:	2880004c 	andi	r2,r5,1
    d118:	1005003a 	cmpeq	r2,r2,zero
    d11c:	32400115 	stw	r9,4(r6)
    d120:	10001a1e 	bne	r2,zero,d18c <_free_r+0xcc>
    d124:	000b883a 	mov	r5,zero
    d128:	3247883a 	add	r3,r6,r9
    d12c:	18800117 	ldw	r2,4(r3)
    d130:	1080004c 	andi	r2,r2,1
    d134:	1000231e 	bne	r2,zero,d1c4 <_free_r+0x104>
    d138:	280ac03a 	cmpne	r5,r5,zero
    d13c:	3a4f883a 	add	r7,r7,r9
    d140:	2800451e 	bne	r5,zero,d258 <_free_r+0x198>
    d144:	31000217 	ldw	r4,8(r6)
    d148:	00820034 	movhi	r2,2048
    d14c:	10839804 	addi	r2,r2,3680
    d150:	20807b26 	beq	r4,r2,d340 <_free_r+0x280>
    d154:	30800317 	ldw	r2,12(r6)
    d158:	3a07883a 	add	r3,r7,r8
    d15c:	19c00015 	stw	r7,0(r3)
    d160:	11000215 	stw	r4,8(r2)
    d164:	20800315 	stw	r2,12(r4)
    d168:	38800054 	ori	r2,r7,1
    d16c:	40800115 	stw	r2,4(r8)
    d170:	28001a26 	beq	r5,zero,d1dc <_free_r+0x11c>
    d174:	8809883a 	mov	r4,r17
    d178:	dfc00217 	ldw	ra,8(sp)
    d17c:	dc400117 	ldw	r17,4(sp)
    d180:	dc000017 	ldw	r16,0(sp)
    d184:	dec00304 	addi	sp,sp,12
    d188:	0012db81 	jmpi	12db8 <__malloc_unlock>
    d18c:	80bffe17 	ldw	r2,-8(r16)
    d190:	50c00204 	addi	r3,r10,8
    d194:	4091c83a 	sub	r8,r8,r2
    d198:	41000217 	ldw	r4,8(r8)
    d19c:	388f883a 	add	r7,r7,r2
    d1a0:	20c06126 	beq	r4,r3,d328 <_free_r+0x268>
    d1a4:	40800317 	ldw	r2,12(r8)
    d1a8:	3247883a 	add	r3,r6,r9
    d1ac:	000b883a 	mov	r5,zero
    d1b0:	11000215 	stw	r4,8(r2)
    d1b4:	20800315 	stw	r2,12(r4)
    d1b8:	18800117 	ldw	r2,4(r3)
    d1bc:	1080004c 	andi	r2,r2,1
    d1c0:	103fdd26 	beq	r2,zero,d138 <_free_r+0x78>
    d1c4:	38800054 	ori	r2,r7,1
    d1c8:	3a07883a 	add	r3,r7,r8
    d1cc:	280ac03a 	cmpne	r5,r5,zero
    d1d0:	40800115 	stw	r2,4(r8)
    d1d4:	19c00015 	stw	r7,0(r3)
    d1d8:	283fe61e 	bne	r5,zero,d174 <_free_r+0xb4>
    d1dc:	00807fc4 	movi	r2,511
    d1e0:	11c01f2e 	bgeu	r2,r7,d260 <_free_r+0x1a0>
    d1e4:	3806d27a 	srli	r3,r7,9
    d1e8:	1800481e 	bne	r3,zero,d30c <_free_r+0x24c>
    d1ec:	3804d0fa 	srli	r2,r7,3
    d1f0:	100690fa 	slli	r3,r2,3
    d1f4:	1acd883a 	add	r6,r3,r11
    d1f8:	31400217 	ldw	r5,8(r6)
    d1fc:	31405926 	beq	r6,r5,d364 <_free_r+0x2a4>
    d200:	28800117 	ldw	r2,4(r5)
    d204:	00ffff04 	movi	r3,-4
    d208:	10c4703a 	and	r2,r2,r3
    d20c:	3880022e 	bgeu	r7,r2,d218 <_free_r+0x158>
    d210:	29400217 	ldw	r5,8(r5)
    d214:	317ffa1e 	bne	r6,r5,d200 <_free_r+0x140>
    d218:	29800317 	ldw	r6,12(r5)
    d21c:	41800315 	stw	r6,12(r8)
    d220:	41400215 	stw	r5,8(r8)
    d224:	8809883a 	mov	r4,r17
    d228:	2a000315 	stw	r8,12(r5)
    d22c:	32000215 	stw	r8,8(r6)
    d230:	dfc00217 	ldw	ra,8(sp)
    d234:	dc400117 	ldw	r17,4(sp)
    d238:	dc000017 	ldw	r16,0(sp)
    d23c:	dec00304 	addi	sp,sp,12
    d240:	0012db81 	jmpi	12db8 <__malloc_unlock>
    d244:	dfc00217 	ldw	ra,8(sp)
    d248:	dc400117 	ldw	r17,4(sp)
    d24c:	dc000017 	ldw	r16,0(sp)
    d250:	dec00304 	addi	sp,sp,12
    d254:	f800283a 	ret
    d258:	31000217 	ldw	r4,8(r6)
    d25c:	003fbd06 	br	d154 <_free_r+0x94>
    d260:	3806d0fa 	srli	r3,r7,3
    d264:	00800044 	movi	r2,1
    d268:	51400117 	ldw	r5,4(r10)
    d26c:	180890fa 	slli	r4,r3,3
    d270:	1807d0ba 	srai	r3,r3,2
    d274:	22c9883a 	add	r4,r4,r11
    d278:	21800217 	ldw	r6,8(r4)
    d27c:	10c4983a 	sll	r2,r2,r3
    d280:	41000315 	stw	r4,12(r8)
    d284:	41800215 	stw	r6,8(r8)
    d288:	288ab03a 	or	r5,r5,r2
    d28c:	22000215 	stw	r8,8(r4)
    d290:	8809883a 	mov	r4,r17
    d294:	51400115 	stw	r5,4(r10)
    d298:	32000315 	stw	r8,12(r6)
    d29c:	dfc00217 	ldw	ra,8(sp)
    d2a0:	dc400117 	ldw	r17,4(sp)
    d2a4:	dc000017 	ldw	r16,0(sp)
    d2a8:	dec00304 	addi	sp,sp,12
    d2ac:	0012db81 	jmpi	12db8 <__malloc_unlock>
    d2b0:	2880004c 	andi	r2,r5,1
    d2b4:	3a4d883a 	add	r6,r7,r9
    d2b8:	1000071e 	bne	r2,zero,d2d8 <_free_r+0x218>
    d2bc:	80bffe17 	ldw	r2,-8(r16)
    d2c0:	4091c83a 	sub	r8,r8,r2
    d2c4:	41000317 	ldw	r4,12(r8)
    d2c8:	40c00217 	ldw	r3,8(r8)
    d2cc:	308d883a 	add	r6,r6,r2
    d2d0:	20c00215 	stw	r3,8(r4)
    d2d4:	19000315 	stw	r4,12(r3)
    d2d8:	00820034 	movhi	r2,2048
    d2dc:	108a0c04 	addi	r2,r2,10288
    d2e0:	11000017 	ldw	r4,0(r2)
    d2e4:	30c00054 	ori	r3,r6,1
    d2e8:	52000215 	stw	r8,8(r10)
    d2ec:	40c00115 	stw	r3,4(r8)
    d2f0:	313fa036 	bltu	r6,r4,d174 <_free_r+0xb4>
    d2f4:	00820034 	movhi	r2,2048
    d2f8:	108a4204 	addi	r2,r2,10504
    d2fc:	11400017 	ldw	r5,0(r2)
    d300:	8809883a 	mov	r4,r17
    d304:	000cf940 	call	cf94 <_malloc_trim_r>
    d308:	003f9a06 	br	d174 <_free_r+0xb4>
    d30c:	00800104 	movi	r2,4
    d310:	10c0072e 	bgeu	r2,r3,d330 <_free_r+0x270>
    d314:	00800504 	movi	r2,20
    d318:	10c01936 	bltu	r2,r3,d380 <_free_r+0x2c0>
    d31c:	188016c4 	addi	r2,r3,91
    d320:	100690fa 	slli	r3,r2,3
    d324:	003fb306 	br	d1f4 <_free_r+0x134>
    d328:	01400044 	movi	r5,1
    d32c:	003f7e06 	br	d128 <_free_r+0x68>
    d330:	3804d1ba 	srli	r2,r7,6
    d334:	10800e04 	addi	r2,r2,56
    d338:	100690fa 	slli	r3,r2,3
    d33c:	003fad06 	br	d1f4 <_free_r+0x134>
    d340:	22000315 	stw	r8,12(r4)
    d344:	22000215 	stw	r8,8(r4)
    d348:	3a05883a 	add	r2,r7,r8
    d34c:	38c00054 	ori	r3,r7,1
    d350:	11c00015 	stw	r7,0(r2)
    d354:	41000215 	stw	r4,8(r8)
    d358:	40c00115 	stw	r3,4(r8)
    d35c:	41000315 	stw	r4,12(r8)
    d360:	003f8406 	br	d174 <_free_r+0xb4>
    d364:	1005d0ba 	srai	r2,r2,2
    d368:	00c00044 	movi	r3,1
    d36c:	51000117 	ldw	r4,4(r10)
    d370:	1886983a 	sll	r3,r3,r2
    d374:	20c8b03a 	or	r4,r4,r3
    d378:	51000115 	stw	r4,4(r10)
    d37c:	003fa706 	br	d21c <_free_r+0x15c>
    d380:	00801504 	movi	r2,84
    d384:	10c00436 	bltu	r2,r3,d398 <_free_r+0x2d8>
    d388:	3804d33a 	srli	r2,r7,12
    d38c:	10801b84 	addi	r2,r2,110
    d390:	100690fa 	slli	r3,r2,3
    d394:	003f9706 	br	d1f4 <_free_r+0x134>
    d398:	00805504 	movi	r2,340
    d39c:	10c00436 	bltu	r2,r3,d3b0 <_free_r+0x2f0>
    d3a0:	3804d3fa 	srli	r2,r7,15
    d3a4:	10801dc4 	addi	r2,r2,119
    d3a8:	100690fa 	slli	r3,r2,3
    d3ac:	003f9106 	br	d1f4 <_free_r+0x134>
    d3b0:	00815504 	movi	r2,1364
    d3b4:	10c0032e 	bgeu	r2,r3,d3c4 <_free_r+0x304>
    d3b8:	00801f84 	movi	r2,126
    d3bc:	00c0fc04 	movi	r3,1008
    d3c0:	003f8c06 	br	d1f4 <_free_r+0x134>
    d3c4:	3804d4ba 	srli	r2,r7,18
    d3c8:	10801f04 	addi	r2,r2,124
    d3cc:	100690fa 	slli	r3,r2,3
    d3d0:	003f8806 	br	d1f4 <_free_r+0x134>

0000d3d4 <__sfvwrite_r>:
    d3d4:	30800217 	ldw	r2,8(r6)
    d3d8:	defff504 	addi	sp,sp,-44
    d3dc:	df000915 	stw	fp,36(sp)
    d3e0:	dd800715 	stw	r22,28(sp)
    d3e4:	dc800315 	stw	r18,12(sp)
    d3e8:	dfc00a15 	stw	ra,40(sp)
    d3ec:	ddc00815 	stw	r23,32(sp)
    d3f0:	dd400615 	stw	r21,24(sp)
    d3f4:	dd000515 	stw	r20,20(sp)
    d3f8:	dcc00415 	stw	r19,16(sp)
    d3fc:	dc400215 	stw	r17,8(sp)
    d400:	dc000115 	stw	r16,4(sp)
    d404:	302d883a 	mov	r22,r6
    d408:	2039883a 	mov	fp,r4
    d40c:	2825883a 	mov	r18,r5
    d410:	10001c26 	beq	r2,zero,d484 <__sfvwrite_r+0xb0>
    d414:	29c0030b 	ldhu	r7,12(r5)
    d418:	3880020c 	andi	r2,r7,8
    d41c:	10002726 	beq	r2,zero,d4bc <__sfvwrite_r+0xe8>
    d420:	28800417 	ldw	r2,16(r5)
    d424:	10002526 	beq	r2,zero,d4bc <__sfvwrite_r+0xe8>
    d428:	3880008c 	andi	r2,r7,2
    d42c:	b5400017 	ldw	r21,0(r22)
    d430:	10002826 	beq	r2,zero,d4d4 <__sfvwrite_r+0x100>
    d434:	0021883a 	mov	r16,zero
    d438:	0023883a 	mov	r17,zero
    d43c:	880d883a 	mov	r6,r17
    d440:	e009883a 	mov	r4,fp
    d444:	00810004 	movi	r2,1024
    d448:	80006e26 	beq	r16,zero,d604 <__sfvwrite_r+0x230>
    d44c:	800f883a 	mov	r7,r16
    d450:	91400717 	ldw	r5,28(r18)
    d454:	1400012e 	bgeu	r2,r16,d45c <__sfvwrite_r+0x88>
    d458:	100f883a 	mov	r7,r2
    d45c:	90c00917 	ldw	r3,36(r18)
    d460:	183ee83a 	callr	r3
    d464:	1007883a 	mov	r3,r2
    d468:	80a1c83a 	sub	r16,r16,r2
    d46c:	88a3883a 	add	r17,r17,r2
    d470:	00806d0e 	bge	zero,r2,d628 <__sfvwrite_r+0x254>
    d474:	b0800217 	ldw	r2,8(r22)
    d478:	10c5c83a 	sub	r2,r2,r3
    d47c:	b0800215 	stw	r2,8(r22)
    d480:	103fee1e 	bne	r2,zero,d43c <__sfvwrite_r+0x68>
    d484:	0009883a 	mov	r4,zero
    d488:	2005883a 	mov	r2,r4
    d48c:	dfc00a17 	ldw	ra,40(sp)
    d490:	df000917 	ldw	fp,36(sp)
    d494:	ddc00817 	ldw	r23,32(sp)
    d498:	dd800717 	ldw	r22,28(sp)
    d49c:	dd400617 	ldw	r21,24(sp)
    d4a0:	dd000517 	ldw	r20,20(sp)
    d4a4:	dcc00417 	ldw	r19,16(sp)
    d4a8:	dc800317 	ldw	r18,12(sp)
    d4ac:	dc400217 	ldw	r17,8(sp)
    d4b0:	dc000117 	ldw	r16,4(sp)
    d4b4:	dec00b04 	addi	sp,sp,44
    d4b8:	f800283a 	ret
    d4bc:	000b19c0 	call	b19c <__swsetup_r>
    d4c0:	1000e41e 	bne	r2,zero,d854 <__sfvwrite_r+0x480>
    d4c4:	91c0030b 	ldhu	r7,12(r18)
    d4c8:	b5400017 	ldw	r21,0(r22)
    d4cc:	3880008c 	andi	r2,r7,2
    d4d0:	103fd81e 	bne	r2,zero,d434 <__sfvwrite_r+0x60>
    d4d4:	3880004c 	andi	r2,r7,1
    d4d8:	1005003a 	cmpeq	r2,r2,zero
    d4dc:	10005726 	beq	r2,zero,d63c <__sfvwrite_r+0x268>
    d4e0:	0029883a 	mov	r20,zero
    d4e4:	002f883a 	mov	r23,zero
    d4e8:	a0004226 	beq	r20,zero,d5f4 <__sfvwrite_r+0x220>
    d4ec:	3880800c 	andi	r2,r7,512
    d4f0:	94000217 	ldw	r16,8(r18)
    d4f4:	10008b26 	beq	r2,zero,d724 <__sfvwrite_r+0x350>
    d4f8:	800d883a 	mov	r6,r16
    d4fc:	a400a536 	bltu	r20,r16,d794 <__sfvwrite_r+0x3c0>
    d500:	3881200c 	andi	r2,r7,1152
    d504:	10002726 	beq	r2,zero,d5a4 <__sfvwrite_r+0x1d0>
    d508:	90800517 	ldw	r2,20(r18)
    d50c:	92000417 	ldw	r8,16(r18)
    d510:	91400017 	ldw	r5,0(r18)
    d514:	1087883a 	add	r3,r2,r2
    d518:	1887883a 	add	r3,r3,r2
    d51c:	1808d7fa 	srli	r4,r3,31
    d520:	2a21c83a 	sub	r16,r5,r8
    d524:	80800044 	addi	r2,r16,1
    d528:	20c9883a 	add	r4,r4,r3
    d52c:	2027d07a 	srai	r19,r4,1
    d530:	a085883a 	add	r2,r20,r2
    d534:	980d883a 	mov	r6,r19
    d538:	9880022e 	bgeu	r19,r2,d544 <__sfvwrite_r+0x170>
    d53c:	1027883a 	mov	r19,r2
    d540:	100d883a 	mov	r6,r2
    d544:	3881000c 	andi	r2,r7,1024
    d548:	1000b826 	beq	r2,zero,d82c <__sfvwrite_r+0x458>
    d54c:	300b883a 	mov	r5,r6
    d550:	e009883a 	mov	r4,fp
    d554:	000e7d00 	call	e7d0 <_malloc_r>
    d558:	10003126 	beq	r2,zero,d620 <__sfvwrite_r+0x24c>
    d55c:	91400417 	ldw	r5,16(r18)
    d560:	1009883a 	mov	r4,r2
    d564:	800d883a 	mov	r6,r16
    d568:	1023883a 	mov	r17,r2
    d56c:	00077880 	call	7788 <memcpy>
    d570:	90c0030b 	ldhu	r3,12(r18)
    d574:	00beffc4 	movi	r2,-1025
    d578:	1886703a 	and	r3,r3,r2
    d57c:	18c02014 	ori	r3,r3,128
    d580:	90c0030d 	sth	r3,12(r18)
    d584:	9c07c83a 	sub	r3,r19,r16
    d588:	8c05883a 	add	r2,r17,r16
    d58c:	a00d883a 	mov	r6,r20
    d590:	a021883a 	mov	r16,r20
    d594:	90800015 	stw	r2,0(r18)
    d598:	90c00215 	stw	r3,8(r18)
    d59c:	94400415 	stw	r17,16(r18)
    d5a0:	94c00515 	stw	r19,20(r18)
    d5a4:	91000017 	ldw	r4,0(r18)
    d5a8:	b80b883a 	mov	r5,r23
    d5ac:	a023883a 	mov	r17,r20
    d5b0:	000eff40 	call	eff4 <memmove>
    d5b4:	90c00217 	ldw	r3,8(r18)
    d5b8:	90800017 	ldw	r2,0(r18)
    d5bc:	a027883a 	mov	r19,r20
    d5c0:	1c07c83a 	sub	r3,r3,r16
    d5c4:	1405883a 	add	r2,r2,r16
    d5c8:	90c00215 	stw	r3,8(r18)
    d5cc:	a021883a 	mov	r16,r20
    d5d0:	90800015 	stw	r2,0(r18)
    d5d4:	b0800217 	ldw	r2,8(r22)
    d5d8:	1405c83a 	sub	r2,r2,r16
    d5dc:	b0800215 	stw	r2,8(r22)
    d5e0:	103fa826 	beq	r2,zero,d484 <__sfvwrite_r+0xb0>
    d5e4:	a469c83a 	sub	r20,r20,r17
    d5e8:	91c0030b 	ldhu	r7,12(r18)
    d5ec:	bcef883a 	add	r23,r23,r19
    d5f0:	a03fbe1e 	bne	r20,zero,d4ec <__sfvwrite_r+0x118>
    d5f4:	adc00017 	ldw	r23,0(r21)
    d5f8:	ad000117 	ldw	r20,4(r21)
    d5fc:	ad400204 	addi	r21,r21,8
    d600:	003fb906 	br	d4e8 <__sfvwrite_r+0x114>
    d604:	ac400017 	ldw	r17,0(r21)
    d608:	ac000117 	ldw	r16,4(r21)
    d60c:	ad400204 	addi	r21,r21,8
    d610:	003f8a06 	br	d43c <__sfvwrite_r+0x68>
    d614:	91400417 	ldw	r5,16(r18)
    d618:	e009883a 	mov	r4,fp
    d61c:	000d0c00 	call	d0c0 <_free_r>
    d620:	00800304 	movi	r2,12
    d624:	e0800015 	stw	r2,0(fp)
    d628:	9080030b 	ldhu	r2,12(r18)
    d62c:	013fffc4 	movi	r4,-1
    d630:	10801014 	ori	r2,r2,64
    d634:	9080030d 	sth	r2,12(r18)
    d638:	003f9306 	br	d488 <__sfvwrite_r+0xb4>
    d63c:	0027883a 	mov	r19,zero
    d640:	002f883a 	mov	r23,zero
    d644:	d8000015 	stw	zero,0(sp)
    d648:	0029883a 	mov	r20,zero
    d64c:	98001e26 	beq	r19,zero,d6c8 <__sfvwrite_r+0x2f4>
    d650:	d8c00017 	ldw	r3,0(sp)
    d654:	1804c03a 	cmpne	r2,r3,zero
    d658:	10005e26 	beq	r2,zero,d7d4 <__sfvwrite_r+0x400>
    d65c:	9821883a 	mov	r16,r19
    d660:	a4c0012e 	bgeu	r20,r19,d668 <__sfvwrite_r+0x294>
    d664:	a021883a 	mov	r16,r20
    d668:	91000017 	ldw	r4,0(r18)
    d66c:	90800417 	ldw	r2,16(r18)
    d670:	91800217 	ldw	r6,8(r18)
    d674:	91c00517 	ldw	r7,20(r18)
    d678:	1100022e 	bgeu	r2,r4,d684 <__sfvwrite_r+0x2b0>
    d67c:	31e3883a 	add	r17,r6,r7
    d680:	8c001616 	blt	r17,r16,d6dc <__sfvwrite_r+0x308>
    d684:	81c03816 	blt	r16,r7,d768 <__sfvwrite_r+0x394>
    d688:	90c00917 	ldw	r3,36(r18)
    d68c:	91400717 	ldw	r5,28(r18)
    d690:	e009883a 	mov	r4,fp
    d694:	b80d883a 	mov	r6,r23
    d698:	183ee83a 	callr	r3
    d69c:	1023883a 	mov	r17,r2
    d6a0:	00bfe10e 	bge	zero,r2,d628 <__sfvwrite_r+0x254>
    d6a4:	a469c83a 	sub	r20,r20,r17
    d6a8:	a0001826 	beq	r20,zero,d70c <__sfvwrite_r+0x338>
    d6ac:	b0800217 	ldw	r2,8(r22)
    d6b0:	1445c83a 	sub	r2,r2,r17
    d6b4:	b0800215 	stw	r2,8(r22)
    d6b8:	103f7226 	beq	r2,zero,d484 <__sfvwrite_r+0xb0>
    d6bc:	9c67c83a 	sub	r19,r19,r17
    d6c0:	bc6f883a 	add	r23,r23,r17
    d6c4:	983fe21e 	bne	r19,zero,d650 <__sfvwrite_r+0x27c>
    d6c8:	adc00017 	ldw	r23,0(r21)
    d6cc:	acc00117 	ldw	r19,4(r21)
    d6d0:	ad400204 	addi	r21,r21,8
    d6d4:	d8000015 	stw	zero,0(sp)
    d6d8:	003fdc06 	br	d64c <__sfvwrite_r+0x278>
    d6dc:	b80b883a 	mov	r5,r23
    d6e0:	880d883a 	mov	r6,r17
    d6e4:	000eff40 	call	eff4 <memmove>
    d6e8:	90c00017 	ldw	r3,0(r18)
    d6ec:	e009883a 	mov	r4,fp
    d6f0:	900b883a 	mov	r5,r18
    d6f4:	1c47883a 	add	r3,r3,r17
    d6f8:	90c00015 	stw	r3,0(r18)
    d6fc:	000caa40 	call	caa4 <_fflush_r>
    d700:	103fc91e 	bne	r2,zero,d628 <__sfvwrite_r+0x254>
    d704:	a469c83a 	sub	r20,r20,r17
    d708:	a03fe81e 	bne	r20,zero,d6ac <__sfvwrite_r+0x2d8>
    d70c:	e009883a 	mov	r4,fp
    d710:	900b883a 	mov	r5,r18
    d714:	000caa40 	call	caa4 <_fflush_r>
    d718:	103fc31e 	bne	r2,zero,d628 <__sfvwrite_r+0x254>
    d71c:	d8000015 	stw	zero,0(sp)
    d720:	003fe206 	br	d6ac <__sfvwrite_r+0x2d8>
    d724:	91000017 	ldw	r4,0(r18)
    d728:	90800417 	ldw	r2,16(r18)
    d72c:	1100022e 	bgeu	r2,r4,d738 <__sfvwrite_r+0x364>
    d730:	8023883a 	mov	r17,r16
    d734:	85003136 	bltu	r16,r20,d7fc <__sfvwrite_r+0x428>
    d738:	91c00517 	ldw	r7,20(r18)
    d73c:	a1c01836 	bltu	r20,r7,d7a0 <__sfvwrite_r+0x3cc>
    d740:	90c00917 	ldw	r3,36(r18)
    d744:	91400717 	ldw	r5,28(r18)
    d748:	e009883a 	mov	r4,fp
    d74c:	b80d883a 	mov	r6,r23
    d750:	183ee83a 	callr	r3
    d754:	1021883a 	mov	r16,r2
    d758:	00bfb30e 	bge	zero,r2,d628 <__sfvwrite_r+0x254>
    d75c:	1023883a 	mov	r17,r2
    d760:	1027883a 	mov	r19,r2
    d764:	003f9b06 	br	d5d4 <__sfvwrite_r+0x200>
    d768:	b80b883a 	mov	r5,r23
    d76c:	800d883a 	mov	r6,r16
    d770:	000eff40 	call	eff4 <memmove>
    d774:	90c00217 	ldw	r3,8(r18)
    d778:	90800017 	ldw	r2,0(r18)
    d77c:	8023883a 	mov	r17,r16
    d780:	1c07c83a 	sub	r3,r3,r16
    d784:	1405883a 	add	r2,r2,r16
    d788:	90c00215 	stw	r3,8(r18)
    d78c:	90800015 	stw	r2,0(r18)
    d790:	003fc406 	br	d6a4 <__sfvwrite_r+0x2d0>
    d794:	a00d883a 	mov	r6,r20
    d798:	a021883a 	mov	r16,r20
    d79c:	003f8106 	br	d5a4 <__sfvwrite_r+0x1d0>
    d7a0:	b80b883a 	mov	r5,r23
    d7a4:	a00d883a 	mov	r6,r20
    d7a8:	000eff40 	call	eff4 <memmove>
    d7ac:	90c00217 	ldw	r3,8(r18)
    d7b0:	90800017 	ldw	r2,0(r18)
    d7b4:	a021883a 	mov	r16,r20
    d7b8:	1d07c83a 	sub	r3,r3,r20
    d7bc:	1505883a 	add	r2,r2,r20
    d7c0:	a023883a 	mov	r17,r20
    d7c4:	a027883a 	mov	r19,r20
    d7c8:	90c00215 	stw	r3,8(r18)
    d7cc:	90800015 	stw	r2,0(r18)
    d7d0:	003f8006 	br	d5d4 <__sfvwrite_r+0x200>
    d7d4:	b809883a 	mov	r4,r23
    d7d8:	01400284 	movi	r5,10
    d7dc:	980d883a 	mov	r6,r19
    d7e0:	000ef100 	call	ef10 <memchr>
    d7e4:	10001726 	beq	r2,zero,d844 <__sfvwrite_r+0x470>
    d7e8:	15c5c83a 	sub	r2,r2,r23
    d7ec:	15000044 	addi	r20,r2,1
    d7f0:	00800044 	movi	r2,1
    d7f4:	d8800015 	stw	r2,0(sp)
    d7f8:	003f9806 	br	d65c <__sfvwrite_r+0x288>
    d7fc:	b80b883a 	mov	r5,r23
    d800:	800d883a 	mov	r6,r16
    d804:	000eff40 	call	eff4 <memmove>
    d808:	90c00017 	ldw	r3,0(r18)
    d80c:	e009883a 	mov	r4,fp
    d810:	900b883a 	mov	r5,r18
    d814:	1c07883a 	add	r3,r3,r16
    d818:	90c00015 	stw	r3,0(r18)
    d81c:	8027883a 	mov	r19,r16
    d820:	000caa40 	call	caa4 <_fflush_r>
    d824:	103f6b26 	beq	r2,zero,d5d4 <__sfvwrite_r+0x200>
    d828:	003f7f06 	br	d628 <__sfvwrite_r+0x254>
    d82c:	400b883a 	mov	r5,r8
    d830:	e009883a 	mov	r4,fp
    d834:	00102b40 	call	102b4 <_realloc_r>
    d838:	103f7626 	beq	r2,zero,d614 <__sfvwrite_r+0x240>
    d83c:	1023883a 	mov	r17,r2
    d840:	003f5006 	br	d584 <__sfvwrite_r+0x1b0>
    d844:	00c00044 	movi	r3,1
    d848:	9d000044 	addi	r20,r19,1
    d84c:	d8c00015 	stw	r3,0(sp)
    d850:	003f8206 	br	d65c <__sfvwrite_r+0x288>
    d854:	9080030b 	ldhu	r2,12(r18)
    d858:	00c00244 	movi	r3,9
    d85c:	013fffc4 	movi	r4,-1
    d860:	10801014 	ori	r2,r2,64
    d864:	9080030d 	sth	r2,12(r18)
    d868:	e0c00015 	stw	r3,0(fp)
    d86c:	003f0606 	br	d488 <__sfvwrite_r+0xb4>

0000d870 <_fwalk_reent>:
    d870:	defff704 	addi	sp,sp,-36
    d874:	dcc00315 	stw	r19,12(sp)
    d878:	24c0b804 	addi	r19,r4,736
    d87c:	dd800615 	stw	r22,24(sp)
    d880:	dd400515 	stw	r21,20(sp)
    d884:	dfc00815 	stw	ra,32(sp)
    d888:	ddc00715 	stw	r23,28(sp)
    d88c:	dd000415 	stw	r20,16(sp)
    d890:	dc800215 	stw	r18,8(sp)
    d894:	dc400115 	stw	r17,4(sp)
    d898:	dc000015 	stw	r16,0(sp)
    d89c:	202b883a 	mov	r21,r4
    d8a0:	282d883a 	mov	r22,r5
    d8a4:	000cd2c0 	call	cd2c <__sfp_lock_acquire>
    d8a8:	98002126 	beq	r19,zero,d930 <_fwalk_reent+0xc0>
    d8ac:	002f883a 	mov	r23,zero
    d8b0:	9c800117 	ldw	r18,4(r19)
    d8b4:	9c000217 	ldw	r16,8(r19)
    d8b8:	90bfffc4 	addi	r2,r18,-1
    d8bc:	10000d16 	blt	r2,zero,d8f4 <_fwalk_reent+0x84>
    d8c0:	0023883a 	mov	r17,zero
    d8c4:	053fffc4 	movi	r20,-1
    d8c8:	8080030f 	ldh	r2,12(r16)
    d8cc:	8c400044 	addi	r17,r17,1
    d8d0:	10000626 	beq	r2,zero,d8ec <_fwalk_reent+0x7c>
    d8d4:	8080038f 	ldh	r2,14(r16)
    d8d8:	800b883a 	mov	r5,r16
    d8dc:	a809883a 	mov	r4,r21
    d8e0:	15000226 	beq	r2,r20,d8ec <_fwalk_reent+0x7c>
    d8e4:	b03ee83a 	callr	r22
    d8e8:	b8aeb03a 	or	r23,r23,r2
    d8ec:	84001704 	addi	r16,r16,92
    d8f0:	947ff51e 	bne	r18,r17,d8c8 <_fwalk_reent+0x58>
    d8f4:	9cc00017 	ldw	r19,0(r19)
    d8f8:	983fed1e 	bne	r19,zero,d8b0 <_fwalk_reent+0x40>
    d8fc:	000cd300 	call	cd30 <__sfp_lock_release>
    d900:	b805883a 	mov	r2,r23
    d904:	dfc00817 	ldw	ra,32(sp)
    d908:	ddc00717 	ldw	r23,28(sp)
    d90c:	dd800617 	ldw	r22,24(sp)
    d910:	dd400517 	ldw	r21,20(sp)
    d914:	dd000417 	ldw	r20,16(sp)
    d918:	dcc00317 	ldw	r19,12(sp)
    d91c:	dc800217 	ldw	r18,8(sp)
    d920:	dc400117 	ldw	r17,4(sp)
    d924:	dc000017 	ldw	r16,0(sp)
    d928:	dec00904 	addi	sp,sp,36
    d92c:	f800283a 	ret
    d930:	002f883a 	mov	r23,zero
    d934:	003ff106 	br	d8fc <_fwalk_reent+0x8c>

0000d938 <_fwalk>:
    d938:	defff804 	addi	sp,sp,-32
    d93c:	dcc00315 	stw	r19,12(sp)
    d940:	24c0b804 	addi	r19,r4,736
    d944:	dd400515 	stw	r21,20(sp)
    d948:	dfc00715 	stw	ra,28(sp)
    d94c:	dd800615 	stw	r22,24(sp)
    d950:	dd000415 	stw	r20,16(sp)
    d954:	dc800215 	stw	r18,8(sp)
    d958:	dc400115 	stw	r17,4(sp)
    d95c:	dc000015 	stw	r16,0(sp)
    d960:	282b883a 	mov	r21,r5
    d964:	000cd2c0 	call	cd2c <__sfp_lock_acquire>
    d968:	98001f26 	beq	r19,zero,d9e8 <_fwalk+0xb0>
    d96c:	002d883a 	mov	r22,zero
    d970:	9c800117 	ldw	r18,4(r19)
    d974:	9c000217 	ldw	r16,8(r19)
    d978:	90bfffc4 	addi	r2,r18,-1
    d97c:	10000c16 	blt	r2,zero,d9b0 <_fwalk+0x78>
    d980:	0023883a 	mov	r17,zero
    d984:	053fffc4 	movi	r20,-1
    d988:	8080030f 	ldh	r2,12(r16)
    d98c:	8c400044 	addi	r17,r17,1
    d990:	10000526 	beq	r2,zero,d9a8 <_fwalk+0x70>
    d994:	8080038f 	ldh	r2,14(r16)
    d998:	8009883a 	mov	r4,r16
    d99c:	15000226 	beq	r2,r20,d9a8 <_fwalk+0x70>
    d9a0:	a83ee83a 	callr	r21
    d9a4:	b0acb03a 	or	r22,r22,r2
    d9a8:	84001704 	addi	r16,r16,92
    d9ac:	947ff61e 	bne	r18,r17,d988 <_fwalk+0x50>
    d9b0:	9cc00017 	ldw	r19,0(r19)
    d9b4:	983fee1e 	bne	r19,zero,d970 <_fwalk+0x38>
    d9b8:	000cd300 	call	cd30 <__sfp_lock_release>
    d9bc:	b005883a 	mov	r2,r22
    d9c0:	dfc00717 	ldw	ra,28(sp)
    d9c4:	dd800617 	ldw	r22,24(sp)
    d9c8:	dd400517 	ldw	r21,20(sp)
    d9cc:	dd000417 	ldw	r20,16(sp)
    d9d0:	dcc00317 	ldw	r19,12(sp)
    d9d4:	dc800217 	ldw	r18,8(sp)
    d9d8:	dc400117 	ldw	r17,4(sp)
    d9dc:	dc000017 	ldw	r16,0(sp)
    d9e0:	dec00804 	addi	sp,sp,32
    d9e4:	f800283a 	ret
    d9e8:	002d883a 	mov	r22,zero
    d9ec:	003ff206 	br	d9b8 <_fwalk+0x80>

0000d9f0 <htinit>:
    d9f0:	28800003 	ldbu	r2,0(r5)
    d9f4:	10000626 	beq	r2,zero,da10 <htinit+0x20>
    d9f8:	1105883a 	add	r2,r2,r4
    d9fc:	11800005 	stb	r6,0(r2)
    da00:	28800043 	ldbu	r2,1(r5)
    da04:	31800044 	addi	r6,r6,1
    da08:	29400044 	addi	r5,r5,1
    da0c:	103ffa1e 	bne	r2,zero,d9f8 <htinit+0x8>
    da10:	f800283a 	ret

0000da14 <__hexdig_init>:
    da14:	defffd04 	addi	sp,sp,-12
    da18:	dc400015 	stw	r17,0(sp)
    da1c:	04420234 	movhi	r17,2056
    da20:	8c406304 	addi	r17,r17,396
    da24:	dcc00115 	stw	r19,4(sp)
    da28:	8809883a 	mov	r4,r17
    da2c:	04c00684 	movi	r19,26
    da30:	01420034 	movhi	r5,2048
    da34:	29414704 	addi	r5,r5,1308
    da38:	01800404 	movi	r6,16
    da3c:	dfc00215 	stw	ra,8(sp)
    da40:	000d9f00 	call	d9f0 <htinit>
    da44:	980d883a 	mov	r6,r19
    da48:	8809883a 	mov	r4,r17
    da4c:	01420034 	movhi	r5,2048
    da50:	29414a04 	addi	r5,r5,1320
    da54:	000d9f00 	call	d9f0 <htinit>
    da58:	8809883a 	mov	r4,r17
    da5c:	980d883a 	mov	r6,r19
    da60:	01420034 	movhi	r5,2048
    da64:	29414c04 	addi	r5,r5,1328
    da68:	dfc00217 	ldw	ra,8(sp)
    da6c:	dcc00117 	ldw	r19,4(sp)
    da70:	dc400017 	ldw	r17,0(sp)
    da74:	dec00304 	addi	sp,sp,12
    da78:	000d9f01 	jmpi	d9f0 <htinit>

0000da7c <rshift>:
    da7c:	2807d17a 	srai	r3,r5,5
    da80:	20800417 	ldw	r2,16(r4)
    da84:	22400504 	addi	r9,r4,20
    da88:	480f883a 	mov	r7,r9
    da8c:	1880190e 	bge	r3,r2,daf4 <rshift+0x78>
    da90:	1085883a 	add	r2,r2,r2
    da94:	18c7883a 	add	r3,r3,r3
    da98:	1085883a 	add	r2,r2,r2
    da9c:	18c7883a 	add	r3,r3,r3
    daa0:	294007cc 	andi	r5,r5,31
    daa4:	4891883a 	add	r8,r9,r2
    daa8:	48cd883a 	add	r6,r9,r3
    daac:	28001726 	beq	r5,zero,db0c <rshift+0x90>
    dab0:	30c00017 	ldw	r3,0(r6)
    dab4:	00800804 	movi	r2,32
    dab8:	31800104 	addi	r6,r6,4
    dabc:	1155c83a 	sub	r10,r2,r5
    dac0:	1946d83a 	srl	r3,r3,r5
    dac4:	3200092e 	bgeu	r6,r8,daec <rshift+0x70>
    dac8:	30800017 	ldw	r2,0(r6)
    dacc:	1284983a 	sll	r2,r2,r10
    dad0:	10c4b03a 	or	r2,r2,r3
    dad4:	38800015 	stw	r2,0(r7)
    dad8:	30c00017 	ldw	r3,0(r6)
    dadc:	31800104 	addi	r6,r6,4
    dae0:	39c00104 	addi	r7,r7,4
    dae4:	1946d83a 	srl	r3,r3,r5
    dae8:	323ff736 	bltu	r6,r8,dac8 <rshift+0x4c>
    daec:	38c00015 	stw	r3,0(r7)
    daf0:	18000c1e 	bne	r3,zero,db24 <rshift+0xa8>
    daf4:	3a45c83a 	sub	r2,r7,r9
    daf8:	1005d0ba 	srai	r2,r2,2
    dafc:	20800415 	stw	r2,16(r4)
    db00:	1000011e 	bne	r2,zero,db08 <rshift+0x8c>
    db04:	20000515 	stw	zero,20(r4)
    db08:	f800283a 	ret
    db0c:	323ff92e 	bgeu	r6,r8,daf4 <rshift+0x78>
    db10:	30800017 	ldw	r2,0(r6)
    db14:	31800104 	addi	r6,r6,4
    db18:	38800015 	stw	r2,0(r7)
    db1c:	39c00104 	addi	r7,r7,4
    db20:	003ffa06 	br	db0c <rshift+0x90>
    db24:	39c00104 	addi	r7,r7,4
    db28:	003ff206 	br	daf4 <rshift+0x78>

0000db2c <__gethex>:
    db2c:	defff304 	addi	sp,sp,-52
    db30:	dd400815 	stw	r21,32(sp)
    db34:	dd000715 	stw	r20,28(sp)
    db38:	dcc00615 	stw	r19,24(sp)
    db3c:	dc400415 	stw	r17,16(sp)
    db40:	dfc00c15 	stw	ra,48(sp)
    db44:	df000b15 	stw	fp,44(sp)
    db48:	ddc00a15 	stw	r23,40(sp)
    db4c:	dd800915 	stw	r22,36(sp)
    db50:	dc800515 	stw	r18,20(sp)
    db54:	dc000315 	stw	r16,12(sp)
    db58:	04420234 	movhi	r17,2056
    db5c:	8c406304 	addi	r17,r17,396
    db60:	88800c03 	ldbu	r2,48(r17)
    db64:	202b883a 	mov	r21,r4
    db68:	2827883a 	mov	r19,r5
    db6c:	3029883a 	mov	r20,r6
    db70:	d9c00115 	stw	r7,4(sp)
    db74:	10006e26 	beq	r2,zero,dd30 <__gethex+0x204>
    db78:	99800017 	ldw	r6,0(r19)
    db7c:	00800c04 	movi	r2,48
    db80:	31000083 	ldbu	r4,2(r6)
    db84:	30c00084 	addi	r3,r6,2
    db88:	20806f1e 	bne	r4,r2,dd48 <__gethex+0x21c>
    db8c:	200b883a 	mov	r5,r4
    db90:	3007883a 	mov	r3,r6
    db94:	188000c3 	ldbu	r2,3(r3)
    db98:	18c00044 	addi	r3,r3,1
    db9c:	1009883a 	mov	r4,r2
    dba0:	117ffc26 	beq	r2,r5,db94 <__gethex+0x68>
    dba4:	1997c83a 	sub	r11,r3,r6
    dba8:	19400084 	addi	r5,r3,2
    dbac:	2445883a 	add	r2,r4,r17
    dbb0:	10c00003 	ldbu	r3,0(r2)
    dbb4:	18002d26 	beq	r3,zero,dc6c <__gethex+0x140>
    dbb8:	29000003 	ldbu	r4,0(r5)
    dbbc:	2825883a 	mov	r18,r5
    dbc0:	000d883a 	mov	r6,zero
    dbc4:	0013883a 	mov	r9,zero
    dbc8:	21003fcc 	andi	r4,r4,255
    dbcc:	2445883a 	add	r2,r4,r17
    dbd0:	10c00003 	ldbu	r3,0(r2)
    dbd4:	18000526 	beq	r3,zero,dbec <__gethex+0xc0>
    dbd8:	29400044 	addi	r5,r5,1
    dbdc:	29000003 	ldbu	r4,0(r5)
    dbe0:	2445883a 	add	r2,r4,r17
    dbe4:	10c00003 	ldbu	r3,0(r2)
    dbe8:	183ffb1e 	bne	r3,zero,dbd8 <__gethex+0xac>
    dbec:	00800b84 	movi	r2,46
    dbf0:	20805826 	beq	r4,r2,dd54 <__gethex+0x228>
    dbf4:	30007a26 	beq	r6,zero,dde0 <__gethex+0x2b4>
    dbf8:	2985c83a 	sub	r2,r5,r6
    dbfc:	1085883a 	add	r2,r2,r2
    dc00:	1085883a 	add	r2,r2,r2
    dc04:	00adc83a 	sub	r22,zero,r2
    dc08:	2821883a 	mov	r16,r5
    dc0c:	80c00003 	ldbu	r3,0(r16)
    dc10:	00801404 	movi	r2,80
    dc14:	18801e26 	beq	r3,r2,dc90 <__gethex+0x164>
    dc18:	00801c04 	movi	r2,112
    dc1c:	18801c26 	beq	r3,r2,dc90 <__gethex+0x164>
    dc20:	800d883a 	mov	r6,r16
    dc24:	4805003a 	cmpeq	r2,r9,zero
    dc28:	99800015 	stw	r6,0(r19)
    dc2c:	1000861e 	bne	r2,zero,de48 <__gethex+0x31c>
    dc30:	58003d26 	beq	r11,zero,dd28 <__gethex+0x1fc>
    dc34:	0025883a 	mov	r18,zero
    dc38:	9005883a 	mov	r2,r18
    dc3c:	dfc00c17 	ldw	ra,48(sp)
    dc40:	df000b17 	ldw	fp,44(sp)
    dc44:	ddc00a17 	ldw	r23,40(sp)
    dc48:	dd800917 	ldw	r22,36(sp)
    dc4c:	dd400817 	ldw	r21,32(sp)
    dc50:	dd000717 	ldw	r20,28(sp)
    dc54:	dcc00617 	ldw	r19,24(sp)
    dc58:	dc800517 	ldw	r18,20(sp)
    dc5c:	dc400417 	ldw	r17,16(sp)
    dc60:	dc000317 	ldw	r16,12(sp)
    dc64:	dec00d04 	addi	sp,sp,52
    dc68:	f800283a 	ret
    dc6c:	00800b84 	movi	r2,46
    dc70:	20804a26 	beq	r4,r2,dd9c <__gethex+0x270>
    dc74:	2821883a 	mov	r16,r5
    dc78:	80c00003 	ldbu	r3,0(r16)
    dc7c:	00801404 	movi	r2,80
    dc80:	2825883a 	mov	r18,r5
    dc84:	02400044 	movi	r9,1
    dc88:	002d883a 	mov	r22,zero
    dc8c:	18bfe21e 	bne	r3,r2,dc18 <__gethex+0xec>
    dc90:	80c00043 	ldbu	r3,1(r16)
    dc94:	00800ac4 	movi	r2,43
    dc98:	81000044 	addi	r4,r16,1
    dc9c:	18804a26 	beq	r3,r2,ddc8 <__gethex+0x29c>
    dca0:	00800b44 	movi	r2,45
    dca4:	18804c26 	beq	r3,r2,ddd8 <__gethex+0x2ac>
    dca8:	0015883a 	mov	r10,zero
    dcac:	1c45883a 	add	r2,r3,r17
    dcb0:	10800003 	ldbu	r2,0(r2)
    dcb4:	103fda26 	beq	r2,zero,dc20 <__gethex+0xf4>
    dcb8:	02000644 	movi	r8,25
    dcbc:	40bfd816 	blt	r8,r2,dc20 <__gethex+0xf4>
    dcc0:	20c00043 	ldbu	r3,1(r4)
    dcc4:	11fffc04 	addi	r7,r2,-16
    dcc8:	00820234 	movhi	r2,2056
    dccc:	10806304 	addi	r2,r2,396
    dcd0:	1887883a 	add	r3,r3,r2
    dcd4:	18800003 	ldbu	r2,0(r3)
    dcd8:	21800044 	addi	r6,r4,1
    dcdc:	10000d26 	beq	r2,zero,dd14 <__gethex+0x1e8>
    dce0:	100b883a 	mov	r5,r2
    dce4:	4080020e 	bge	r8,r2,dcf0 <__gethex+0x1c4>
    dce8:	00000a06 	br	dd14 <__gethex+0x1e8>
    dcec:	41000916 	blt	r8,r4,dd14 <__gethex+0x1e8>
    dcf0:	31800044 	addi	r6,r6,1
    dcf4:	30800003 	ldbu	r2,0(r6)
    dcf8:	38c002a4 	muli	r3,r7,10
    dcfc:	1445883a 	add	r2,r2,r17
    dd00:	11000003 	ldbu	r4,0(r2)
    dd04:	1947883a 	add	r3,r3,r5
    dd08:	19fffc04 	addi	r7,r3,-16
    dd0c:	200b883a 	mov	r5,r4
    dd10:	203ff61e 	bne	r4,zero,dcec <__gethex+0x1c0>
    dd14:	5005003a 	cmpeq	r2,r10,zero
    dd18:	1000011e 	bne	r2,zero,dd20 <__gethex+0x1f4>
    dd1c:	01cfc83a 	sub	r7,zero,r7
    dd20:	b1ed883a 	add	r22,r22,r7
    dd24:	003fbf06 	br	dc24 <__gethex+0xf8>
    dd28:	04800184 	movi	r18,6
    dd2c:	003fc206 	br	dc38 <__gethex+0x10c>
    dd30:	000da140 	call	da14 <__hexdig_init>
    dd34:	99800017 	ldw	r6,0(r19)
    dd38:	00800c04 	movi	r2,48
    dd3c:	31000083 	ldbu	r4,2(r6)
    dd40:	30c00084 	addi	r3,r6,2
    dd44:	20bf9126 	beq	r4,r2,db8c <__gethex+0x60>
    dd48:	180b883a 	mov	r5,r3
    dd4c:	0017883a 	mov	r11,zero
    dd50:	003f9606 	br	dbac <__gethex+0x80>
    dd54:	303fa81e 	bne	r6,zero,dbf8 <__gethex+0xcc>
    dd58:	29400044 	addi	r5,r5,1
    dd5c:	28800003 	ldbu	r2,0(r5)
    dd60:	1445883a 	add	r2,r2,r17
    dd64:	10c00003 	ldbu	r3,0(r2)
    dd68:	1800ad26 	beq	r3,zero,e020 <__gethex+0x4f4>
    dd6c:	2809883a 	mov	r4,r5
    dd70:	21000044 	addi	r4,r4,1
    dd74:	20800003 	ldbu	r2,0(r4)
    dd78:	1445883a 	add	r2,r2,r17
    dd7c:	10c00003 	ldbu	r3,0(r2)
    dd80:	183ffb1e 	bne	r3,zero,dd70 <__gethex+0x244>
    dd84:	2145c83a 	sub	r2,r4,r5
    dd88:	1085883a 	add	r2,r2,r2
    dd8c:	1085883a 	add	r2,r2,r2
    dd90:	00adc83a 	sub	r22,zero,r2
    dd94:	200b883a 	mov	r5,r4
    dd98:	003f9b06 	br	dc08 <__gethex+0xdc>
    dd9c:	29000043 	ldbu	r4,1(r5)
    dda0:	00820234 	movhi	r2,2056
    dda4:	10806304 	addi	r2,r2,396
    dda8:	2c000044 	addi	r16,r5,1
    ddac:	2085883a 	add	r2,r4,r2
    ddb0:	10c00003 	ldbu	r3,0(r2)
    ddb4:	18000d1e 	bne	r3,zero,ddec <__gethex+0x2c0>
    ddb8:	2825883a 	mov	r18,r5
    ddbc:	02400044 	movi	r9,1
    ddc0:	002d883a 	mov	r22,zero
    ddc4:	003f9106 	br	dc0c <__gethex+0xe0>
    ddc8:	0015883a 	mov	r10,zero
    ddcc:	21000044 	addi	r4,r4,1
    ddd0:	20c00003 	ldbu	r3,0(r4)
    ddd4:	003fb506 	br	dcac <__gethex+0x180>
    ddd8:	02800044 	movi	r10,1
    dddc:	003ffb06 	br	ddcc <__gethex+0x2a0>
    dde0:	2821883a 	mov	r16,r5
    dde4:	002d883a 	mov	r22,zero
    dde8:	003f8806 	br	dc0c <__gethex+0xe0>
    ddec:	00800c04 	movi	r2,48
    ddf0:	20800e1e 	bne	r4,r2,de2c <__gethex+0x300>
    ddf4:	2007883a 	mov	r3,r4
    ddf8:	800b883a 	mov	r5,r16
    ddfc:	29400044 	addi	r5,r5,1
    de00:	29000003 	ldbu	r4,0(r5)
    de04:	20803fcc 	andi	r2,r4,255
    de08:	10fffc26 	beq	r2,r3,ddfc <__gethex+0x2d0>
    de0c:	1445883a 	add	r2,r2,r17
    de10:	10c00003 	ldbu	r3,0(r2)
    de14:	1800071e 	bne	r3,zero,de34 <__gethex+0x308>
    de18:	02c00044 	movi	r11,1
    de1c:	800d883a 	mov	r6,r16
    de20:	2825883a 	mov	r18,r5
    de24:	5813883a 	mov	r9,r11
    de28:	003f6706 	br	dbc8 <__gethex+0x9c>
    de2c:	81000003 	ldbu	r4,0(r16)
    de30:	800b883a 	mov	r5,r16
    de34:	800d883a 	mov	r6,r16
    de38:	2825883a 	mov	r18,r5
    de3c:	02c00044 	movi	r11,1
    de40:	0013883a 	mov	r9,zero
    de44:	003f6006 	br	dbc8 <__gethex+0x9c>
    de48:	8485c83a 	sub	r2,r16,r18
    de4c:	10bfffc4 	addi	r2,r2,-1
    de50:	00c001c4 	movi	r3,7
    de54:	1880700e 	bge	r3,r2,e018 <__gethex+0x4ec>
    de58:	000b883a 	mov	r5,zero
    de5c:	1005d07a 	srai	r2,r2,1
    de60:	29400044 	addi	r5,r5,1
    de64:	18bffd16 	blt	r3,r2,de5c <__gethex+0x330>
    de68:	a809883a 	mov	r4,r21
    de6c:	000f6540 	call	f654 <_Balloc>
    de70:	1027883a 	mov	r19,r2
    de74:	10800504 	addi	r2,r2,20
    de78:	d8800215 	stw	r2,8(sp)
    de7c:	9400522e 	bgeu	r18,r16,dfc8 <__gethex+0x49c>
    de80:	da000217 	ldw	r8,8(sp)
    de84:	800b883a 	mov	r5,r16
    de88:	000f883a 	mov	r7,zero
    de8c:	0009883a 	mov	r4,zero
    de90:	02400b84 	movi	r9,46
    de94:	02800804 	movi	r10,32
    de98:	297fffc4 	addi	r5,r5,-1
    de9c:	28c00003 	ldbu	r3,0(r5)
    dea0:	1a400826 	beq	r3,r9,dec4 <__gethex+0x398>
    dea4:	380d883a 	mov	r6,r7
    dea8:	3a802726 	beq	r7,r10,df48 <__gethex+0x41c>
    deac:	39c00104 	addi	r7,r7,4
    deb0:	1c47883a 	add	r3,r3,r17
    deb4:	18800003 	ldbu	r2,0(r3)
    deb8:	108003cc 	andi	r2,r2,15
    debc:	1184983a 	sll	r2,r2,r6
    dec0:	2088b03a 	or	r4,r4,r2
    dec4:	917ff436 	bltu	r18,r5,de98 <__gethex+0x36c>
    dec8:	d8c00217 	ldw	r3,8(sp)
    decc:	40800104 	addi	r2,r8,4
    ded0:	41000015 	stw	r4,0(r8)
    ded4:	10c5c83a 	sub	r2,r2,r3
    ded8:	1021d0ba 	srai	r16,r2,2
    dedc:	9c000415 	stw	r16,16(r19)
    dee0:	000f0fc0 	call	f0fc <__hi0bits>
    dee4:	8006917a 	slli	r3,r16,5
    dee8:	a5c00017 	ldw	r23,0(r20)
    deec:	1885c83a 	sub	r2,r3,r2
    def0:	b8801c16 	blt	r23,r2,df64 <__gethex+0x438>
    def4:	15c00a16 	blt	r2,r23,df20 <__gethex+0x3f4>
    def8:	0039883a 	mov	fp,zero
    defc:	a0800217 	ldw	r2,8(r20)
    df00:	1580340e 	bge	r2,r22,dfd4 <__gethex+0x4a8>
    df04:	a809883a 	mov	r4,r21
    df08:	980b883a 	mov	r5,r19
    df0c:	000f0d40 	call	f0d4 <_Bfree>
    df10:	d8c00d17 	ldw	r3,52(sp)
    df14:	048028c4 	movi	r18,163
    df18:	18000015 	stw	zero,0(r3)
    df1c:	003f4606 	br	dc38 <__gethex+0x10c>
    df20:	b8a1c83a 	sub	r16,r23,r2
    df24:	980b883a 	mov	r5,r19
    df28:	a809883a 	mov	r4,r21
    df2c:	800d883a 	mov	r6,r16
    df30:	000fa180 	call	fa18 <__lshift>
    df34:	1027883a 	mov	r19,r2
    df38:	b42dc83a 	sub	r22,r22,r16
    df3c:	10800504 	addi	r2,r2,20
    df40:	d8800215 	stw	r2,8(sp)
    df44:	003fec06 	br	def8 <__gethex+0x3cc>
    df48:	41000015 	stw	r4,0(r8)
    df4c:	28c00003 	ldbu	r3,0(r5)
    df50:	01c00104 	movi	r7,4
    df54:	000d883a 	mov	r6,zero
    df58:	41d1883a 	add	r8,r8,r7
    df5c:	0009883a 	mov	r4,zero
    df60:	003fd306 	br	deb0 <__gethex+0x384>
    df64:	15e1c83a 	sub	r16,r2,r23
    df68:	9809883a 	mov	r4,r19
    df6c:	800b883a 	mov	r5,r16
    df70:	000f5cc0 	call	f5cc <__any_on>
    df74:	1000061e 	bne	r2,zero,df90 <__gethex+0x464>
    df78:	0039883a 	mov	fp,zero
    df7c:	9809883a 	mov	r4,r19
    df80:	800b883a 	mov	r5,r16
    df84:	000da7c0 	call	da7c <rshift>
    df88:	b42d883a 	add	r22,r22,r16
    df8c:	003fdb06 	br	defc <__gethex+0x3d0>
    df90:	817fffc4 	addi	r5,r16,-1
    df94:	2805d17a 	srai	r2,r5,5
    df98:	d8c00217 	ldw	r3,8(sp)
    df9c:	290007cc 	andi	r4,r5,31
    dfa0:	1085883a 	add	r2,r2,r2
    dfa4:	1085883a 	add	r2,r2,r2
    dfa8:	01800044 	movi	r6,1
    dfac:	10c5883a 	add	r2,r2,r3
    dfb0:	3108983a 	sll	r4,r6,r4
    dfb4:	10c00017 	ldw	r3,0(r2)
    dfb8:	20c8703a 	and	r4,r4,r3
    dfbc:	20001a1e 	bne	r4,zero,e028 <__gethex+0x4fc>
    dfc0:	3039883a 	mov	fp,r6
    dfc4:	003fed06 	br	df7c <__gethex+0x450>
    dfc8:	1011883a 	mov	r8,r2
    dfcc:	0009883a 	mov	r4,zero
    dfd0:	003fbd06 	br	dec8 <__gethex+0x39c>
    dfd4:	a1000117 	ldw	r4,4(r20)
    dfd8:	b1001a16 	blt	r22,r4,e044 <__gethex+0x518>
    dfdc:	04800044 	movi	r18,1
    dfe0:	e0000826 	beq	fp,zero,e004 <__gethex+0x4d8>
    dfe4:	a1000317 	ldw	r4,12(r20)
    dfe8:	00800084 	movi	r2,2
    dfec:	20809426 	beq	r4,r2,e240 <__gethex+0x714>
    dff0:	008000c4 	movi	r2,3
    dff4:	20805826 	beq	r4,r2,e158 <__gethex+0x62c>
    dff8:	00800044 	movi	r2,1
    dffc:	20803f26 	beq	r4,r2,e0fc <__gethex+0x5d0>
    e000:	94800414 	ori	r18,r18,16
    e004:	d8800d17 	ldw	r2,52(sp)
    e008:	d8c00117 	ldw	r3,4(sp)
    e00c:	14c00015 	stw	r19,0(r2)
    e010:	1d800015 	stw	r22,0(r3)
    e014:	003f0806 	br	dc38 <__gethex+0x10c>
    e018:	000b883a 	mov	r5,zero
    e01c:	003f9206 	br	de68 <__gethex+0x33c>
    e020:	002d883a 	mov	r22,zero
    e024:	003ef806 	br	dc08 <__gethex+0xdc>
    e028:	3140160e 	bge	r6,r5,e084 <__gethex+0x558>
    e02c:	9809883a 	mov	r4,r19
    e030:	817fff84 	addi	r5,r16,-2
    e034:	000f5cc0 	call	f5cc <__any_on>
    e038:	10001226 	beq	r2,zero,e084 <__gethex+0x558>
    e03c:	070000c4 	movi	fp,3
    e040:	003fce06 	br	df7c <__gethex+0x450>
    e044:	25a3c83a 	sub	r17,r4,r22
    e048:	8dc01016 	blt	r17,r23,e08c <__gethex+0x560>
    e04c:	a0c00317 	ldw	r3,12(r20)
    e050:	00800084 	movi	r2,2
    e054:	18809326 	beq	r3,r2,e2a4 <__gethex+0x778>
    e058:	008000c4 	movi	r2,3
    e05c:	18808e26 	beq	r3,r2,e298 <__gethex+0x76c>
    e060:	00800044 	movi	r2,1
    e064:	18807b26 	beq	r3,r2,e254 <__gethex+0x728>
    e068:	a809883a 	mov	r4,r21
    e06c:	980b883a 	mov	r5,r19
    e070:	000f0d40 	call	f0d4 <_Bfree>
    e074:	d8c00d17 	ldw	r3,52(sp)
    e078:	04801404 	movi	r18,80
    e07c:	18000015 	stw	zero,0(r3)
    e080:	003eed06 	br	dc38 <__gethex+0x10c>
    e084:	07000084 	movi	fp,2
    e088:	003fbc06 	br	df7c <__gethex+0x450>
    e08c:	8c3fffc4 	addi	r16,r17,-1
    e090:	e0001426 	beq	fp,zero,e0e4 <__gethex+0x5b8>
    e094:	07000044 	movi	fp,1
    e098:	8005d17a 	srai	r2,r16,5
    e09c:	d8c00217 	ldw	r3,8(sp)
    e0a0:	814007cc 	andi	r5,r16,31
    e0a4:	1085883a 	add	r2,r2,r2
    e0a8:	1085883a 	add	r2,r2,r2
    e0ac:	10c5883a 	add	r2,r2,r3
    e0b0:	00c00044 	movi	r3,1
    e0b4:	1946983a 	sll	r3,r3,r5
    e0b8:	11000017 	ldw	r4,0(r2)
    e0bc:	1906703a 	and	r3,r3,r4
    e0c0:	18000126 	beq	r3,zero,e0c8 <__gethex+0x59c>
    e0c4:	e7000094 	ori	fp,fp,2
    e0c8:	880b883a 	mov	r5,r17
    e0cc:	9809883a 	mov	r4,r19
    e0d0:	000da7c0 	call	da7c <rshift>
    e0d4:	a5800117 	ldw	r22,4(r20)
    e0d8:	bc6fc83a 	sub	r23,r23,r17
    e0dc:	04800084 	movi	r18,2
    e0e0:	003fbf06 	br	dfe0 <__gethex+0x4b4>
    e0e4:	043fec0e 	bge	zero,r16,e098 <__gethex+0x56c>
    e0e8:	9809883a 	mov	r4,r19
    e0ec:	800b883a 	mov	r5,r16
    e0f0:	000f5cc0 	call	f5cc <__any_on>
    e0f4:	1039883a 	mov	fp,r2
    e0f8:	003fe706 	br	e098 <__gethex+0x56c>
    e0fc:	e080008c 	andi	r2,fp,2
    e100:	103fbf26 	beq	r2,zero,e000 <__gethex+0x4d4>
    e104:	d8c00217 	ldw	r3,8(sp)
    e108:	18800017 	ldw	r2,0(r3)
    e10c:	e084b03a 	or	r2,fp,r2
    e110:	1104703a 	and	r2,r2,r4
    e114:	103fba26 	beq	r2,zero,e000 <__gethex+0x4d4>
    e118:	9c000417 	ldw	r16,16(r19)
    e11c:	d8c00217 	ldw	r3,8(sp)
    e120:	017fffc4 	movi	r5,-1
    e124:	8405883a 	add	r2,r16,r16
    e128:	10b9883a 	add	fp,r2,r2
    e12c:	1f09883a 	add	r4,r3,fp
    e130:	dc000015 	stw	r16,0(sp)
    e134:	00000306 	br	e144 <__gethex+0x618>
    e138:	18000015 	stw	zero,0(r3)
    e13c:	18c00104 	addi	r3,r3,4
    e140:	1900082e 	bgeu	r3,r4,e164 <__gethex+0x638>
    e144:	18800017 	ldw	r2,0(r3)
    e148:	117ffb26 	beq	r2,r5,e138 <__gethex+0x60c>
    e14c:	10800044 	addi	r2,r2,1
    e150:	18800015 	stw	r2,0(r3)
    e154:	00001f06 	br	e1d4 <__gethex+0x6a8>
    e158:	d8800e17 	ldw	r2,56(sp)
    e15c:	103fa826 	beq	r2,zero,e000 <__gethex+0x4d4>
    e160:	003fed06 	br	e118 <__gethex+0x5ec>
    e164:	98800217 	ldw	r2,8(r19)
    e168:	80801316 	blt	r16,r2,e1b8 <__gethex+0x68c>
    e16c:	99400117 	ldw	r5,4(r19)
    e170:	a809883a 	mov	r4,r21
    e174:	29400044 	addi	r5,r5,1
    e178:	000f6540 	call	f654 <_Balloc>
    e17c:	99800417 	ldw	r6,16(r19)
    e180:	99400304 	addi	r5,r19,12
    e184:	11000304 	addi	r4,r2,12
    e188:	318d883a 	add	r6,r6,r6
    e18c:	318d883a 	add	r6,r6,r6
    e190:	31800204 	addi	r6,r6,8
    e194:	1023883a 	mov	r17,r2
    e198:	00077880 	call	7788 <memcpy>
    e19c:	980b883a 	mov	r5,r19
    e1a0:	a809883a 	mov	r4,r21
    e1a4:	000f0d40 	call	f0d4 <_Bfree>
    e1a8:	8c000417 	ldw	r16,16(r17)
    e1ac:	88800504 	addi	r2,r17,20
    e1b0:	8827883a 	mov	r19,r17
    e1b4:	d8800215 	stw	r2,8(sp)
    e1b8:	8405883a 	add	r2,r16,r16
    e1bc:	1085883a 	add	r2,r2,r2
    e1c0:	14c5883a 	add	r2,r2,r19
    e1c4:	84000044 	addi	r16,r16,1
    e1c8:	00c00044 	movi	r3,1
    e1cc:	10c00515 	stw	r3,20(r2)
    e1d0:	9c000415 	stw	r16,16(r19)
    e1d4:	00800084 	movi	r2,2
    e1d8:	90801426 	beq	r18,r2,e22c <__gethex+0x700>
    e1dc:	d8800017 	ldw	r2,0(sp)
    e1e0:	14000b16 	blt	r2,r16,e210 <__gethex+0x6e4>
    e1e4:	bc0007cc 	andi	r16,r23,31
    e1e8:	8000021e 	bne	r16,zero,e1f4 <__gethex+0x6c8>
    e1ec:	94800814 	ori	r18,r18,32
    e1f0:	003f8406 	br	e004 <__gethex+0x4d8>
    e1f4:	d8c00217 	ldw	r3,8(sp)
    e1f8:	1f05883a 	add	r2,r3,fp
    e1fc:	113fff17 	ldw	r4,-4(r2)
    e200:	000f0fc0 	call	f0fc <__hi0bits>
    e204:	00c00804 	movi	r3,32
    e208:	1c07c83a 	sub	r3,r3,r16
    e20c:	10fff70e 	bge	r2,r3,e1ec <__gethex+0x6c0>
    e210:	9809883a 	mov	r4,r19
    e214:	01400044 	movi	r5,1
    e218:	000da7c0 	call	da7c <rshift>
    e21c:	a0800217 	ldw	r2,8(r20)
    e220:	b5800044 	addi	r22,r22,1
    e224:	15bf3716 	blt	r2,r22,df04 <__gethex+0x3d8>
    e228:	003ff006 	br	e1ec <__gethex+0x6c0>
    e22c:	a0800017 	ldw	r2,0(r20)
    e230:	10bfffc4 	addi	r2,r2,-1
    e234:	b8801e26 	beq	r23,r2,e2b0 <__gethex+0x784>
    e238:	04800884 	movi	r18,34
    e23c:	003f7106 	br	e004 <__gethex+0x4d8>
    e240:	d8c00e17 	ldw	r3,56(sp)
    e244:	00800044 	movi	r2,1
    e248:	10c5c83a 	sub	r2,r2,r3
    e24c:	103f6c26 	beq	r2,zero,e000 <__gethex+0x4d4>
    e250:	003fb106 	br	e118 <__gethex+0x5ec>
    e254:	bc7f841e 	bne	r23,r17,e068 <__gethex+0x53c>
    e258:	1dc0050e 	bge	r3,r23,e270 <__gethex+0x744>
    e25c:	b8cbc83a 	sub	r5,r23,r3
    e260:	9809883a 	mov	r4,r19
    e264:	000f5cc0 	call	f5cc <__any_on>
    e268:	103f7f26 	beq	r2,zero,e068 <__gethex+0x53c>
    e26c:	a1000117 	ldw	r4,4(r20)
    e270:	d8800117 	ldw	r2,4(sp)
    e274:	d8c00217 	ldw	r3,8(sp)
    e278:	04000044 	movi	r16,1
    e27c:	11000015 	stw	r4,0(r2)
    e280:	d8800d17 	ldw	r2,52(sp)
    e284:	04801884 	movi	r18,98
    e288:	1c000015 	stw	r16,0(r3)
    e28c:	14c00015 	stw	r19,0(r2)
    e290:	9c000415 	stw	r16,16(r19)
    e294:	003e6806 	br	dc38 <__gethex+0x10c>
    e298:	d8c00e17 	ldw	r3,56(sp)
    e29c:	183f7226 	beq	r3,zero,e068 <__gethex+0x53c>
    e2a0:	003ff306 	br	e270 <__gethex+0x744>
    e2a4:	d8800e17 	ldw	r2,56(sp)
    e2a8:	103ff126 	beq	r2,zero,e270 <__gethex+0x744>
    e2ac:	003f6e06 	br	e068 <__gethex+0x53c>
    e2b0:	b805d17a 	srai	r2,r23,5
    e2b4:	d8c00217 	ldw	r3,8(sp)
    e2b8:	b94007cc 	andi	r5,r23,31
    e2bc:	1085883a 	add	r2,r2,r2
    e2c0:	1085883a 	add	r2,r2,r2
    e2c4:	10c5883a 	add	r2,r2,r3
    e2c8:	00c00044 	movi	r3,1
    e2cc:	1946983a 	sll	r3,r3,r5
    e2d0:	11000017 	ldw	r4,0(r2)
    e2d4:	1906703a 	and	r3,r3,r4
    e2d8:	183fd726 	beq	r3,zero,e238 <__gethex+0x70c>
    e2dc:	04800844 	movi	r18,33
    e2e0:	003f4806 	br	e004 <__gethex+0x4d8>

0000e2e4 <L_shift>:
    e2e4:	00800204 	movi	r2,8
    e2e8:	1185c83a 	sub	r2,r2,r6
    e2ec:	1085883a 	add	r2,r2,r2
    e2f0:	21c00017 	ldw	r7,0(r4)
    e2f4:	1093883a 	add	r9,r2,r2
    e2f8:	00800804 	movi	r2,32
    e2fc:	200d883a 	mov	r6,r4
    e300:	1251c83a 	sub	r8,r2,r9
    e304:	31800104 	addi	r6,r6,4
    e308:	3805883a 	mov	r2,r7
    e30c:	31c00017 	ldw	r7,0(r6)
    e310:	3a08983a 	sll	r4,r7,r8
    e314:	3a46d83a 	srl	r3,r7,r9
    e318:	1104b03a 	or	r2,r2,r4
    e31c:	180f883a 	mov	r7,r3
    e320:	30bfff15 	stw	r2,-4(r6)
    e324:	30c00015 	stw	r3,0(r6)
    e328:	317ff636 	bltu	r6,r5,e304 <L_shift+0x20>
    e32c:	f800283a 	ret

0000e330 <__hexnan>:
    e330:	defff404 	addi	sp,sp,-48
    e334:	dd800815 	stw	r22,32(sp)
    e338:	05820234 	movhi	r22,2056
    e33c:	b5806304 	addi	r22,r22,396
    e340:	b0800c03 	ldbu	r2,48(r22)
    e344:	dcc00515 	stw	r19,20(sp)
    e348:	dc000215 	stw	r16,8(sp)
    e34c:	dfc00b15 	stw	ra,44(sp)
    e350:	df000a15 	stw	fp,40(sp)
    e354:	ddc00915 	stw	r23,36(sp)
    e358:	dd400715 	stw	r21,28(sp)
    e35c:	dd000615 	stw	r20,24(sp)
    e360:	dc800415 	stw	r18,16(sp)
    e364:	dc400315 	stw	r17,12(sp)
    e368:	d9000115 	stw	r4,4(sp)
    e36c:	2821883a 	mov	r16,r5
    e370:	3027883a 	mov	r19,r6
    e374:	10007426 	beq	r2,zero,e548 <__hexnan+0x218>
    e378:	80c00017 	ldw	r3,0(r16)
    e37c:	1805d17a 	srai	r2,r3,5
    e380:	18c007cc 	andi	r3,r3,31
    e384:	1839003a 	cmpeq	fp,r3,zero
    e388:	1085883a 	add	r2,r2,r2
    e38c:	1085883a 	add	r2,r2,r2
    e390:	d8c00015 	stw	r3,0(sp)
    e394:	14c5883a 	add	r2,r2,r19
    e398:	e000011e 	bne	fp,zero,e3a0 <__hexnan+0x70>
    e39c:	10800104 	addi	r2,r2,4
    e3a0:	d8c00117 	ldw	r3,4(sp)
    e3a4:	153fff04 	addi	r20,r2,-4
    e3a8:	a021883a 	mov	r16,r20
    e3ac:	1c400017 	ldw	r17,0(r3)
    e3b0:	a02b883a 	mov	r21,r20
    e3b4:	0025883a 	mov	r18,zero
    e3b8:	002f883a 	mov	r23,zero
    e3bc:	000d883a 	mov	r6,zero
    e3c0:	103fff15 	stw	zero,-4(r2)
    e3c4:	8c400044 	addi	r17,r17,1
    e3c8:	89000003 	ldbu	r4,0(r17)
    e3cc:	20000e26 	beq	r4,zero,e408 <__hexnan+0xd8>
    e3d0:	2585883a 	add	r2,r4,r22
    e3d4:	10c00003 	ldbu	r3,0(r2)
    e3d8:	18002e1e 	bne	r3,zero,e494 <__hexnan+0x164>
    e3dc:	00800804 	movi	r2,32
    e3e0:	11005536 	bltu	r2,r4,e538 <__hexnan+0x208>
    e3e4:	bcbff70e 	bge	r23,r18,e3c4 <__hexnan+0x94>
    e3e8:	8540022e 	bgeu	r16,r21,e3f4 <__hexnan+0xc4>
    e3ec:	008001c4 	movi	r2,7
    e3f0:	11803c0e 	bge	r2,r6,e4e4 <__hexnan+0x1b4>
    e3f4:	9c003536 	bltu	r19,r16,e4cc <__hexnan+0x19c>
    e3f8:	8c400044 	addi	r17,r17,1
    e3fc:	89000003 	ldbu	r4,0(r17)
    e400:	01800204 	movi	r6,8
    e404:	203ff21e 	bne	r4,zero,e3d0 <__hexnan+0xa0>
    e408:	90004d26 	beq	r18,zero,e540 <__hexnan+0x210>
    e40c:	85404336 	bltu	r16,r21,e51c <__hexnan+0x1ec>
    e410:	9c00382e 	bgeu	r19,r16,e4f4 <__hexnan+0x1c4>
    e414:	9807883a 	mov	r3,r19
    e418:	80800017 	ldw	r2,0(r16)
    e41c:	84000104 	addi	r16,r16,4
    e420:	18800015 	stw	r2,0(r3)
    e424:	18c00104 	addi	r3,r3,4
    e428:	a43ffb2e 	bgeu	r20,r16,e418 <__hexnan+0xe8>
    e42c:	18000015 	stw	zero,0(r3)
    e430:	18c00104 	addi	r3,r3,4
    e434:	a0fffd2e 	bgeu	r20,r3,e42c <__hexnan+0xfc>
    e438:	a0800017 	ldw	r2,0(r20)
    e43c:	1000071e 	bne	r2,zero,e45c <__hexnan+0x12c>
    e440:	9d004326 	beq	r19,r20,e550 <__hexnan+0x220>
    e444:	a007883a 	mov	r3,r20
    e448:	00000106 	br	e450 <__hexnan+0x120>
    e44c:	98c04026 	beq	r19,r3,e550 <__hexnan+0x220>
    e450:	18ffff04 	addi	r3,r3,-4
    e454:	18800017 	ldw	r2,0(r3)
    e458:	103ffc26 	beq	r2,zero,e44c <__hexnan+0x11c>
    e45c:	00c00144 	movi	r3,5
    e460:	1805883a 	mov	r2,r3
    e464:	dfc00b17 	ldw	ra,44(sp)
    e468:	df000a17 	ldw	fp,40(sp)
    e46c:	ddc00917 	ldw	r23,36(sp)
    e470:	dd800817 	ldw	r22,32(sp)
    e474:	dd400717 	ldw	r21,28(sp)
    e478:	dd000617 	ldw	r20,24(sp)
    e47c:	dcc00517 	ldw	r19,20(sp)
    e480:	dc800417 	ldw	r18,16(sp)
    e484:	dc400317 	ldw	r17,12(sp)
    e488:	dc000217 	ldw	r16,8(sp)
    e48c:	dec00c04 	addi	sp,sp,48
    e490:	f800283a 	ret
    e494:	31800044 	addi	r6,r6,1
    e498:	00800204 	movi	r2,8
    e49c:	94800044 	addi	r18,r18,1
    e4a0:	1180040e 	bge	r2,r6,e4b4 <__hexnan+0x184>
    e4a4:	9c3fc72e 	bgeu	r19,r16,e3c4 <__hexnan+0x94>
    e4a8:	843fff04 	addi	r16,r16,-4
    e4ac:	80000015 	stw	zero,0(r16)
    e4b0:	01800044 	movi	r6,1
    e4b4:	80800017 	ldw	r2,0(r16)
    e4b8:	18c003cc 	andi	r3,r3,15
    e4bc:	1004913a 	slli	r2,r2,4
    e4c0:	10c4b03a 	or	r2,r2,r3
    e4c4:	80800015 	stw	r2,0(r16)
    e4c8:	003fbe06 	br	e3c4 <__hexnan+0x94>
    e4cc:	843fff04 	addi	r16,r16,-4
    e4d0:	802b883a 	mov	r21,r16
    e4d4:	902f883a 	mov	r23,r18
    e4d8:	000d883a 	mov	r6,zero
    e4dc:	80000015 	stw	zero,0(r16)
    e4e0:	003fb806 	br	e3c4 <__hexnan+0x94>
    e4e4:	8009883a 	mov	r4,r16
    e4e8:	a80b883a 	mov	r5,r21
    e4ec:	000e2e40 	call	e2e4 <L_shift>
    e4f0:	003fc006 	br	e3f4 <__hexnan+0xc4>
    e4f4:	e03fd01e 	bne	fp,zero,e438 <__hexnan+0x108>
    e4f8:	d8c00017 	ldw	r3,0(sp)
    e4fc:	00800804 	movi	r2,32
    e500:	10c5c83a 	sub	r2,r2,r3
    e504:	00ffffc4 	movi	r3,-1
    e508:	1886d83a 	srl	r3,r3,r2
    e50c:	a0800017 	ldw	r2,0(r20)
    e510:	10c4703a 	and	r2,r2,r3
    e514:	a0800015 	stw	r2,0(r20)
    e518:	003fc806 	br	e43c <__hexnan+0x10c>
    e51c:	008001c4 	movi	r2,7
    e520:	11bfbb16 	blt	r2,r6,e410 <__hexnan+0xe0>
    e524:	a80b883a 	mov	r5,r21
    e528:	8009883a 	mov	r4,r16
    e52c:	000e2e40 	call	e2e4 <L_shift>
    e530:	9c3ff02e 	bgeu	r19,r16,e4f4 <__hexnan+0x1c4>
    e534:	003fb706 	br	e414 <__hexnan+0xe4>
    e538:	00800a44 	movi	r2,41
    e53c:	20800826 	beq	r4,r2,e560 <__hexnan+0x230>
    e540:	00c00104 	movi	r3,4
    e544:	003fc606 	br	e460 <__hexnan+0x130>
    e548:	000da140 	call	da14 <__hexdig_init>
    e54c:	003f8a06 	br	e378 <__hexnan+0x48>
    e550:	00800044 	movi	r2,1
    e554:	00c00144 	movi	r3,5
    e558:	98800015 	stw	r2,0(r19)
    e55c:	003fc006 	br	e460 <__hexnan+0x130>
    e560:	903ff726 	beq	r18,zero,e540 <__hexnan+0x210>
    e564:	d8c00117 	ldw	r3,4(sp)
    e568:	88800044 	addi	r2,r17,1
    e56c:	18800015 	stw	r2,0(r3)
    e570:	857fa72e 	bgeu	r16,r21,e410 <__hexnan+0xe0>
    e574:	003fe906 	br	e51c <__hexnan+0x1ec>

0000e578 <__locale_charset>:
    e578:	d0a00d17 	ldw	r2,-32716(gp)
    e57c:	f800283a 	ret

0000e580 <_localeconv_r>:
    e580:	00820034 	movhi	r2,2048
    e584:	10815304 	addi	r2,r2,1356
    e588:	f800283a 	ret

0000e58c <localeconv>:
    e58c:	00820034 	movhi	r2,2048
    e590:	108a0804 	addi	r2,r2,10272
    e594:	11000017 	ldw	r4,0(r2)
    e598:	000e5801 	jmpi	e580 <_localeconv_r>

0000e59c <_setlocale_r>:
    e59c:	defffc04 	addi	sp,sp,-16
    e5a0:	00c20034 	movhi	r3,2048
    e5a4:	18c14e04 	addi	r3,r3,1336
    e5a8:	dc800215 	stw	r18,8(sp)
    e5ac:	dc400115 	stw	r17,4(sp)
    e5b0:	dc000015 	stw	r16,0(sp)
    e5b4:	2023883a 	mov	r17,r4
    e5b8:	2825883a 	mov	r18,r5
    e5bc:	dfc00315 	stw	ra,12(sp)
    e5c0:	3021883a 	mov	r16,r6
    e5c4:	3009883a 	mov	r4,r6
    e5c8:	180b883a 	mov	r5,r3
    e5cc:	30000926 	beq	r6,zero,e5f4 <_setlocale_r+0x58>
    e5d0:	0010ad40 	call	10ad4 <strcmp>
    e5d4:	8009883a 	mov	r4,r16
    e5d8:	01420034 	movhi	r5,2048
    e5dc:	29413204 	addi	r5,r5,1224
    e5e0:	10000b1e 	bne	r2,zero,e610 <_setlocale_r+0x74>
    e5e4:	8c000d15 	stw	r16,52(r17)
    e5e8:	8c800c15 	stw	r18,48(r17)
    e5ec:	00c20034 	movhi	r3,2048
    e5f0:	18c14e04 	addi	r3,r3,1336
    e5f4:	1805883a 	mov	r2,r3
    e5f8:	dfc00317 	ldw	ra,12(sp)
    e5fc:	dc800217 	ldw	r18,8(sp)
    e600:	dc400117 	ldw	r17,4(sp)
    e604:	dc000017 	ldw	r16,0(sp)
    e608:	dec00404 	addi	sp,sp,16
    e60c:	f800283a 	ret
    e610:	0010ad40 	call	10ad4 <strcmp>
    e614:	0007883a 	mov	r3,zero
    e618:	103ff226 	beq	r2,zero,e5e4 <_setlocale_r+0x48>
    e61c:	003ff506 	br	e5f4 <_setlocale_r+0x58>

0000e620 <setlocale>:
    e620:	01820034 	movhi	r6,2048
    e624:	318a0804 	addi	r6,r6,10272
    e628:	2007883a 	mov	r3,r4
    e62c:	31000017 	ldw	r4,0(r6)
    e630:	280d883a 	mov	r6,r5
    e634:	180b883a 	mov	r5,r3
    e638:	000e59c1 	jmpi	e59c <_setlocale_r>

0000e63c <__smakebuf_r>:
    e63c:	2880030b 	ldhu	r2,12(r5)
    e640:	deffed04 	addi	sp,sp,-76
    e644:	dc401015 	stw	r17,64(sp)
    e648:	1080008c 	andi	r2,r2,2
    e64c:	dc000f15 	stw	r16,60(sp)
    e650:	dfc01215 	stw	ra,72(sp)
    e654:	dc801115 	stw	r18,68(sp)
    e658:	2821883a 	mov	r16,r5
    e65c:	2023883a 	mov	r17,r4
    e660:	10000b26 	beq	r2,zero,e690 <__smakebuf_r+0x54>
    e664:	28c010c4 	addi	r3,r5,67
    e668:	00800044 	movi	r2,1
    e66c:	28800515 	stw	r2,20(r5)
    e670:	28c00415 	stw	r3,16(r5)
    e674:	28c00015 	stw	r3,0(r5)
    e678:	dfc01217 	ldw	ra,72(sp)
    e67c:	dc801117 	ldw	r18,68(sp)
    e680:	dc401017 	ldw	r17,64(sp)
    e684:	dc000f17 	ldw	r16,60(sp)
    e688:	dec01304 	addi	sp,sp,76
    e68c:	f800283a 	ret
    e690:	2940038f 	ldh	r5,14(r5)
    e694:	28002116 	blt	r5,zero,e71c <__smakebuf_r+0xe0>
    e698:	d80d883a 	mov	r6,sp
    e69c:	0010f9c0 	call	10f9c <_fstat_r>
    e6a0:	10001e16 	blt	r2,zero,e71c <__smakebuf_r+0xe0>
    e6a4:	d8800117 	ldw	r2,4(sp)
    e6a8:	00e00014 	movui	r3,32768
    e6ac:	113c000c 	andi	r4,r2,61440
    e6b0:	20c03126 	beq	r4,r3,e778 <__smakebuf_r+0x13c>
    e6b4:	8080030b 	ldhu	r2,12(r16)
    e6b8:	00c80004 	movi	r3,8192
    e6bc:	10820014 	ori	r2,r2,2048
    e6c0:	8080030d 	sth	r2,12(r16)
    e6c4:	20c01e26 	beq	r4,r3,e740 <__smakebuf_r+0x104>
    e6c8:	04810004 	movi	r18,1024
    e6cc:	8809883a 	mov	r4,r17
    e6d0:	900b883a 	mov	r5,r18
    e6d4:	000e7d00 	call	e7d0 <_malloc_r>
    e6d8:	1009883a 	mov	r4,r2
    e6dc:	10003126 	beq	r2,zero,e7a4 <__smakebuf_r+0x168>
    e6e0:	80c0030b 	ldhu	r3,12(r16)
    e6e4:	00800074 	movhi	r2,1
    e6e8:	10b38804 	addi	r2,r2,-12768
    e6ec:	88800f15 	stw	r2,60(r17)
    e6f0:	18c02014 	ori	r3,r3,128
    e6f4:	84800515 	stw	r18,20(r16)
    e6f8:	80c0030d 	sth	r3,12(r16)
    e6fc:	81000415 	stw	r4,16(r16)
    e700:	81000015 	stw	r4,0(r16)
    e704:	dfc01217 	ldw	ra,72(sp)
    e708:	dc801117 	ldw	r18,68(sp)
    e70c:	dc401017 	ldw	r17,64(sp)
    e710:	dc000f17 	ldw	r16,60(sp)
    e714:	dec01304 	addi	sp,sp,76
    e718:	f800283a 	ret
    e71c:	80c0030b 	ldhu	r3,12(r16)
    e720:	1880200c 	andi	r2,r3,128
    e724:	10000426 	beq	r2,zero,e738 <__smakebuf_r+0xfc>
    e728:	04801004 	movi	r18,64
    e72c:	18820014 	ori	r2,r3,2048
    e730:	8080030d 	sth	r2,12(r16)
    e734:	003fe506 	br	e6cc <__smakebuf_r+0x90>
    e738:	04810004 	movi	r18,1024
    e73c:	003ffb06 	br	e72c <__smakebuf_r+0xf0>
    e740:	8140038f 	ldh	r5,14(r16)
    e744:	8809883a 	mov	r4,r17
    e748:	00110100 	call	11010 <_isatty_r>
    e74c:	103fde26 	beq	r2,zero,e6c8 <__smakebuf_r+0x8c>
    e750:	8080030b 	ldhu	r2,12(r16)
    e754:	80c010c4 	addi	r3,r16,67
    e758:	04810004 	movi	r18,1024
    e75c:	10800054 	ori	r2,r2,1
    e760:	8080030d 	sth	r2,12(r16)
    e764:	00800044 	movi	r2,1
    e768:	80c00415 	stw	r3,16(r16)
    e76c:	80800515 	stw	r2,20(r16)
    e770:	80c00015 	stw	r3,0(r16)
    e774:	003fd506 	br	e6cc <__smakebuf_r+0x90>
    e778:	80c00a17 	ldw	r3,40(r16)
    e77c:	00800074 	movhi	r2,1
    e780:	10826404 	addi	r2,r2,2448
    e784:	18bfcb1e 	bne	r3,r2,e6b4 <__smakebuf_r+0x78>
    e788:	8080030b 	ldhu	r2,12(r16)
    e78c:	00c10004 	movi	r3,1024
    e790:	1825883a 	mov	r18,r3
    e794:	10c4b03a 	or	r2,r2,r3
    e798:	8080030d 	sth	r2,12(r16)
    e79c:	80c01315 	stw	r3,76(r16)
    e7a0:	003fca06 	br	e6cc <__smakebuf_r+0x90>
    e7a4:	8100030b 	ldhu	r4,12(r16)
    e7a8:	2080800c 	andi	r2,r4,512
    e7ac:	103fb21e 	bne	r2,zero,e678 <__smakebuf_r+0x3c>
    e7b0:	80c010c4 	addi	r3,r16,67
    e7b4:	21000094 	ori	r4,r4,2
    e7b8:	00800044 	movi	r2,1
    e7bc:	80800515 	stw	r2,20(r16)
    e7c0:	8100030d 	sth	r4,12(r16)
    e7c4:	80c00415 	stw	r3,16(r16)
    e7c8:	80c00015 	stw	r3,0(r16)
    e7cc:	003faa06 	br	e678 <__smakebuf_r+0x3c>

0000e7d0 <_malloc_r>:
    e7d0:	defff604 	addi	sp,sp,-40
    e7d4:	28c002c4 	addi	r3,r5,11
    e7d8:	00800584 	movi	r2,22
    e7dc:	dc800215 	stw	r18,8(sp)
    e7e0:	dfc00915 	stw	ra,36(sp)
    e7e4:	df000815 	stw	fp,32(sp)
    e7e8:	ddc00715 	stw	r23,28(sp)
    e7ec:	dd800615 	stw	r22,24(sp)
    e7f0:	dd400515 	stw	r21,20(sp)
    e7f4:	dd000415 	stw	r20,16(sp)
    e7f8:	dcc00315 	stw	r19,12(sp)
    e7fc:	dc400115 	stw	r17,4(sp)
    e800:	dc000015 	stw	r16,0(sp)
    e804:	2025883a 	mov	r18,r4
    e808:	10c01236 	bltu	r2,r3,e854 <_malloc_r+0x84>
    e80c:	04400404 	movi	r17,16
    e810:	8940142e 	bgeu	r17,r5,e864 <_malloc_r+0x94>
    e814:	00800304 	movi	r2,12
    e818:	0007883a 	mov	r3,zero
    e81c:	90800015 	stw	r2,0(r18)
    e820:	1805883a 	mov	r2,r3
    e824:	dfc00917 	ldw	ra,36(sp)
    e828:	df000817 	ldw	fp,32(sp)
    e82c:	ddc00717 	ldw	r23,28(sp)
    e830:	dd800617 	ldw	r22,24(sp)
    e834:	dd400517 	ldw	r21,20(sp)
    e838:	dd000417 	ldw	r20,16(sp)
    e83c:	dcc00317 	ldw	r19,12(sp)
    e840:	dc800217 	ldw	r18,8(sp)
    e844:	dc400117 	ldw	r17,4(sp)
    e848:	dc000017 	ldw	r16,0(sp)
    e84c:	dec00a04 	addi	sp,sp,40
    e850:	f800283a 	ret
    e854:	00bffe04 	movi	r2,-8
    e858:	18a2703a 	and	r17,r3,r2
    e85c:	883fed16 	blt	r17,zero,e814 <_malloc_r+0x44>
    e860:	897fec36 	bltu	r17,r5,e814 <_malloc_r+0x44>
    e864:	9009883a 	mov	r4,r18
    e868:	0012d980 	call	12d98 <__malloc_lock>
    e86c:	00807dc4 	movi	r2,503
    e870:	14402b2e 	bgeu	r2,r17,e920 <_malloc_r+0x150>
    e874:	8806d27a 	srli	r3,r17,9
    e878:	18003f1e 	bne	r3,zero,e978 <_malloc_r+0x1a8>
    e87c:	880cd0fa 	srli	r6,r17,3
    e880:	300490fa 	slli	r2,r6,3
    e884:	02c20034 	movhi	r11,2048
    e888:	5ac39604 	addi	r11,r11,3672
    e88c:	12cb883a 	add	r5,r2,r11
    e890:	2c000317 	ldw	r16,12(r5)
    e894:	580f883a 	mov	r7,r11
    e898:	2c00041e 	bne	r5,r16,e8ac <_malloc_r+0xdc>
    e89c:	00000a06 	br	e8c8 <_malloc_r+0xf8>
    e8a0:	1800860e 	bge	r3,zero,eabc <_malloc_r+0x2ec>
    e8a4:	84000317 	ldw	r16,12(r16)
    e8a8:	2c000726 	beq	r5,r16,e8c8 <_malloc_r+0xf8>
    e8ac:	80800117 	ldw	r2,4(r16)
    e8b0:	00ffff04 	movi	r3,-4
    e8b4:	10c8703a 	and	r4,r2,r3
    e8b8:	2447c83a 	sub	r3,r4,r17
    e8bc:	008003c4 	movi	r2,15
    e8c0:	10fff70e 	bge	r2,r3,e8a0 <_malloc_r+0xd0>
    e8c4:	31bfffc4 	addi	r6,r6,-1
    e8c8:	32400044 	addi	r9,r6,1
    e8cc:	02820034 	movhi	r10,2048
    e8d0:	52839804 	addi	r10,r10,3680
    e8d4:	54000217 	ldw	r16,8(r10)
    e8d8:	8280a026 	beq	r16,r10,eb5c <_malloc_r+0x38c>
    e8dc:	80800117 	ldw	r2,4(r16)
    e8e0:	00ffff04 	movi	r3,-4
    e8e4:	10ca703a 	and	r5,r2,r3
    e8e8:	2c4dc83a 	sub	r6,r5,r17
    e8ec:	008003c4 	movi	r2,15
    e8f0:	11808316 	blt	r2,r6,eb00 <_malloc_r+0x330>
    e8f4:	52800315 	stw	r10,12(r10)
    e8f8:	52800215 	stw	r10,8(r10)
    e8fc:	30002916 	blt	r6,zero,e9a4 <_malloc_r+0x1d4>
    e900:	8147883a 	add	r3,r16,r5
    e904:	18800117 	ldw	r2,4(r3)
    e908:	9009883a 	mov	r4,r18
    e90c:	10800054 	ori	r2,r2,1
    e910:	18800115 	stw	r2,4(r3)
    e914:	0012db80 	call	12db8 <__malloc_unlock>
    e918:	80c00204 	addi	r3,r16,8
    e91c:	003fc006 	br	e820 <_malloc_r+0x50>
    e920:	02c20034 	movhi	r11,2048
    e924:	5ac39604 	addi	r11,r11,3672
    e928:	8ac5883a 	add	r2,r17,r11
    e92c:	14000317 	ldw	r16,12(r2)
    e930:	580f883a 	mov	r7,r11
    e934:	8806d0fa 	srli	r3,r17,3
    e938:	14006c26 	beq	r2,r16,eaec <_malloc_r+0x31c>
    e93c:	80c00117 	ldw	r3,4(r16)
    e940:	00bfff04 	movi	r2,-4
    e944:	81800317 	ldw	r6,12(r16)
    e948:	1886703a 	and	r3,r3,r2
    e94c:	80c7883a 	add	r3,r16,r3
    e950:	18800117 	ldw	r2,4(r3)
    e954:	81400217 	ldw	r5,8(r16)
    e958:	9009883a 	mov	r4,r18
    e95c:	10800054 	ori	r2,r2,1
    e960:	18800115 	stw	r2,4(r3)
    e964:	31400215 	stw	r5,8(r6)
    e968:	29800315 	stw	r6,12(r5)
    e96c:	0012db80 	call	12db8 <__malloc_unlock>
    e970:	80c00204 	addi	r3,r16,8
    e974:	003faa06 	br	e820 <_malloc_r+0x50>
    e978:	00800104 	movi	r2,4
    e97c:	10c0052e 	bgeu	r2,r3,e994 <_malloc_r+0x1c4>
    e980:	00800504 	movi	r2,20
    e984:	10c07836 	bltu	r2,r3,eb68 <_malloc_r+0x398>
    e988:	198016c4 	addi	r6,r3,91
    e98c:	300490fa 	slli	r2,r6,3
    e990:	003fbc06 	br	e884 <_malloc_r+0xb4>
    e994:	8804d1ba 	srli	r2,r17,6
    e998:	11800e04 	addi	r6,r2,56
    e99c:	300490fa 	slli	r2,r6,3
    e9a0:	003fb806 	br	e884 <_malloc_r+0xb4>
    e9a4:	00807fc4 	movi	r2,511
    e9a8:	1140bb36 	bltu	r2,r5,ec98 <_malloc_r+0x4c8>
    e9ac:	2806d0fa 	srli	r3,r5,3
    e9b0:	573ffe04 	addi	fp,r10,-8
    e9b4:	00800044 	movi	r2,1
    e9b8:	180890fa 	slli	r4,r3,3
    e9bc:	1807d0ba 	srai	r3,r3,2
    e9c0:	e1c00117 	ldw	r7,4(fp)
    e9c4:	5909883a 	add	r4,r11,r4
    e9c8:	21400217 	ldw	r5,8(r4)
    e9cc:	10c4983a 	sll	r2,r2,r3
    e9d0:	81000315 	stw	r4,12(r16)
    e9d4:	81400215 	stw	r5,8(r16)
    e9d8:	388eb03a 	or	r7,r7,r2
    e9dc:	2c000315 	stw	r16,12(r5)
    e9e0:	24000215 	stw	r16,8(r4)
    e9e4:	e1c00115 	stw	r7,4(fp)
    e9e8:	4807883a 	mov	r3,r9
    e9ec:	4800cd16 	blt	r9,zero,ed24 <_malloc_r+0x554>
    e9f0:	1807d0ba 	srai	r3,r3,2
    e9f4:	00800044 	movi	r2,1
    e9f8:	10c8983a 	sll	r4,r2,r3
    e9fc:	39004436 	bltu	r7,r4,eb10 <_malloc_r+0x340>
    ea00:	21c4703a 	and	r2,r4,r7
    ea04:	10000a1e 	bne	r2,zero,ea30 <_malloc_r+0x260>
    ea08:	2109883a 	add	r4,r4,r4
    ea0c:	00bfff04 	movi	r2,-4
    ea10:	4884703a 	and	r2,r9,r2
    ea14:	3906703a 	and	r3,r7,r4
    ea18:	12400104 	addi	r9,r2,4
    ea1c:	1800041e 	bne	r3,zero,ea30 <_malloc_r+0x260>
    ea20:	2109883a 	add	r4,r4,r4
    ea24:	3904703a 	and	r2,r7,r4
    ea28:	4a400104 	addi	r9,r9,4
    ea2c:	103ffc26 	beq	r2,zero,ea20 <_malloc_r+0x250>
    ea30:	480490fa 	slli	r2,r9,3
    ea34:	4819883a 	mov	r12,r9
    ea38:	023fff04 	movi	r8,-4
    ea3c:	589b883a 	add	r13,r11,r2
    ea40:	6807883a 	mov	r3,r13
    ea44:	014003c4 	movi	r5,15
    ea48:	1c000317 	ldw	r16,12(r3)
    ea4c:	1c00041e 	bne	r3,r16,ea60 <_malloc_r+0x290>
    ea50:	0000a706 	br	ecf0 <_malloc_r+0x520>
    ea54:	3000ab0e 	bge	r6,zero,ed04 <_malloc_r+0x534>
    ea58:	84000317 	ldw	r16,12(r16)
    ea5c:	1c00a426 	beq	r3,r16,ecf0 <_malloc_r+0x520>
    ea60:	80800117 	ldw	r2,4(r16)
    ea64:	1204703a 	and	r2,r2,r8
    ea68:	144dc83a 	sub	r6,r2,r17
    ea6c:	29bff90e 	bge	r5,r6,ea54 <_malloc_r+0x284>
    ea70:	81000317 	ldw	r4,12(r16)
    ea74:	80c00217 	ldw	r3,8(r16)
    ea78:	89400054 	ori	r5,r17,1
    ea7c:	8445883a 	add	r2,r16,r17
    ea80:	20c00215 	stw	r3,8(r4)
    ea84:	19000315 	stw	r4,12(r3)
    ea88:	81400115 	stw	r5,4(r16)
    ea8c:	1187883a 	add	r3,r2,r6
    ea90:	31000054 	ori	r4,r6,1
    ea94:	50800315 	stw	r2,12(r10)
    ea98:	50800215 	stw	r2,8(r10)
    ea9c:	19800015 	stw	r6,0(r3)
    eaa0:	11000115 	stw	r4,4(r2)
    eaa4:	12800215 	stw	r10,8(r2)
    eaa8:	12800315 	stw	r10,12(r2)
    eaac:	9009883a 	mov	r4,r18
    eab0:	0012db80 	call	12db8 <__malloc_unlock>
    eab4:	80c00204 	addi	r3,r16,8
    eab8:	003f5906 	br	e820 <_malloc_r+0x50>
    eabc:	8109883a 	add	r4,r16,r4
    eac0:	20800117 	ldw	r2,4(r4)
    eac4:	80c00217 	ldw	r3,8(r16)
    eac8:	81400317 	ldw	r5,12(r16)
    eacc:	10800054 	ori	r2,r2,1
    ead0:	20800115 	stw	r2,4(r4)
    ead4:	28c00215 	stw	r3,8(r5)
    ead8:	19400315 	stw	r5,12(r3)
    eadc:	9009883a 	mov	r4,r18
    eae0:	0012db80 	call	12db8 <__malloc_unlock>
    eae4:	80c00204 	addi	r3,r16,8
    eae8:	003f4d06 	br	e820 <_malloc_r+0x50>
    eaec:	80800204 	addi	r2,r16,8
    eaf0:	14000317 	ldw	r16,12(r2)
    eaf4:	143f911e 	bne	r2,r16,e93c <_malloc_r+0x16c>
    eaf8:	1a400084 	addi	r9,r3,2
    eafc:	003f7306 	br	e8cc <_malloc_r+0xfc>
    eb00:	88c00054 	ori	r3,r17,1
    eb04:	8445883a 	add	r2,r16,r17
    eb08:	80c00115 	stw	r3,4(r16)
    eb0c:	003fdf06 	br	ea8c <_malloc_r+0x2bc>
    eb10:	e4000217 	ldw	r16,8(fp)
    eb14:	00bfff04 	movi	r2,-4
    eb18:	80c00117 	ldw	r3,4(r16)
    eb1c:	802d883a 	mov	r22,r16
    eb20:	18aa703a 	and	r21,r3,r2
    eb24:	ac401636 	bltu	r21,r17,eb80 <_malloc_r+0x3b0>
    eb28:	ac49c83a 	sub	r4,r21,r17
    eb2c:	008003c4 	movi	r2,15
    eb30:	1100130e 	bge	r2,r4,eb80 <_malloc_r+0x3b0>
    eb34:	88800054 	ori	r2,r17,1
    eb38:	8447883a 	add	r3,r16,r17
    eb3c:	80800115 	stw	r2,4(r16)
    eb40:	20800054 	ori	r2,r4,1
    eb44:	18800115 	stw	r2,4(r3)
    eb48:	e0c00215 	stw	r3,8(fp)
    eb4c:	9009883a 	mov	r4,r18
    eb50:	0012db80 	call	12db8 <__malloc_unlock>
    eb54:	80c00204 	addi	r3,r16,8
    eb58:	003f3106 	br	e820 <_malloc_r+0x50>
    eb5c:	39c00117 	ldw	r7,4(r7)
    eb60:	573ffe04 	addi	fp,r10,-8
    eb64:	003fa006 	br	e9e8 <_malloc_r+0x218>
    eb68:	00801504 	movi	r2,84
    eb6c:	10c06736 	bltu	r2,r3,ed0c <_malloc_r+0x53c>
    eb70:	8804d33a 	srli	r2,r17,12
    eb74:	11801b84 	addi	r6,r2,110
    eb78:	300490fa 	slli	r2,r6,3
    eb7c:	003f4106 	br	e884 <_malloc_r+0xb4>
    eb80:	d0a04417 	ldw	r2,-32496(gp)
    eb84:	d0e00f17 	ldw	r3,-32708(gp)
    eb88:	053fffc4 	movi	r20,-1
    eb8c:	10800404 	addi	r2,r2,16
    eb90:	88a7883a 	add	r19,r17,r2
    eb94:	1d000326 	beq	r3,r20,eba4 <_malloc_r+0x3d4>
    eb98:	98c3ffc4 	addi	r3,r19,4095
    eb9c:	00bc0004 	movi	r2,-4096
    eba0:	18a6703a 	and	r19,r3,r2
    eba4:	9009883a 	mov	r4,r18
    eba8:	980b883a 	mov	r5,r19
    ebac:	00109180 	call	10918 <_sbrk_r>
    ebb0:	1009883a 	mov	r4,r2
    ebb4:	15000426 	beq	r2,r20,ebc8 <_malloc_r+0x3f8>
    ebb8:	854b883a 	add	r5,r16,r21
    ebbc:	1029883a 	mov	r20,r2
    ebc0:	11405a2e 	bgeu	r2,r5,ed2c <_malloc_r+0x55c>
    ebc4:	87000c26 	beq	r16,fp,ebf8 <_malloc_r+0x428>
    ebc8:	e4000217 	ldw	r16,8(fp)
    ebcc:	80c00117 	ldw	r3,4(r16)
    ebd0:	00bfff04 	movi	r2,-4
    ebd4:	1884703a 	and	r2,r3,r2
    ebd8:	14400336 	bltu	r2,r17,ebe8 <_malloc_r+0x418>
    ebdc:	1449c83a 	sub	r4,r2,r17
    ebe0:	008003c4 	movi	r2,15
    ebe4:	113fd316 	blt	r2,r4,eb34 <_malloc_r+0x364>
    ebe8:	9009883a 	mov	r4,r18
    ebec:	0012db80 	call	12db8 <__malloc_unlock>
    ebf0:	0007883a 	mov	r3,zero
    ebf4:	003f0a06 	br	e820 <_malloc_r+0x50>
    ebf8:	05c20234 	movhi	r23,2056
    ebfc:	bdfebf04 	addi	r23,r23,-1284
    ec00:	b8800017 	ldw	r2,0(r23)
    ec04:	988d883a 	add	r6,r19,r2
    ec08:	b9800015 	stw	r6,0(r23)
    ec0c:	d0e00f17 	ldw	r3,-32708(gp)
    ec10:	00bfffc4 	movi	r2,-1
    ec14:	18808e26 	beq	r3,r2,ee50 <_malloc_r+0x680>
    ec18:	2145c83a 	sub	r2,r4,r5
    ec1c:	3085883a 	add	r2,r6,r2
    ec20:	b8800015 	stw	r2,0(r23)
    ec24:	20c001cc 	andi	r3,r4,7
    ec28:	18005f1e 	bne	r3,zero,eda8 <_malloc_r+0x5d8>
    ec2c:	000b883a 	mov	r5,zero
    ec30:	a4c5883a 	add	r2,r20,r19
    ec34:	1083ffcc 	andi	r2,r2,4095
    ec38:	00c40004 	movi	r3,4096
    ec3c:	1887c83a 	sub	r3,r3,r2
    ec40:	28e7883a 	add	r19,r5,r3
    ec44:	9009883a 	mov	r4,r18
    ec48:	980b883a 	mov	r5,r19
    ec4c:	00109180 	call	10918 <_sbrk_r>
    ec50:	1007883a 	mov	r3,r2
    ec54:	00bfffc4 	movi	r2,-1
    ec58:	18807a26 	beq	r3,r2,ee44 <_malloc_r+0x674>
    ec5c:	1d05c83a 	sub	r2,r3,r20
    ec60:	9885883a 	add	r2,r19,r2
    ec64:	10c00054 	ori	r3,r2,1
    ec68:	b8800017 	ldw	r2,0(r23)
    ec6c:	a021883a 	mov	r16,r20
    ec70:	a0c00115 	stw	r3,4(r20)
    ec74:	9885883a 	add	r2,r19,r2
    ec78:	b8800015 	stw	r2,0(r23)
    ec7c:	e5000215 	stw	r20,8(fp)
    ec80:	b7003626 	beq	r22,fp,ed5c <_malloc_r+0x58c>
    ec84:	018003c4 	movi	r6,15
    ec88:	35404b36 	bltu	r6,r21,edb8 <_malloc_r+0x5e8>
    ec8c:	00800044 	movi	r2,1
    ec90:	a0800115 	stw	r2,4(r20)
    ec94:	003fcd06 	br	ebcc <_malloc_r+0x3fc>
    ec98:	2808d27a 	srli	r4,r5,9
    ec9c:	2000371e 	bne	r4,zero,ed7c <_malloc_r+0x5ac>
    eca0:	2808d0fa 	srli	r4,r5,3
    eca4:	200690fa 	slli	r3,r4,3
    eca8:	1ad1883a 	add	r8,r3,r11
    ecac:	41800217 	ldw	r6,8(r8)
    ecb0:	41805b26 	beq	r8,r6,ee20 <_malloc_r+0x650>
    ecb4:	30800117 	ldw	r2,4(r6)
    ecb8:	00ffff04 	movi	r3,-4
    ecbc:	10c4703a 	and	r2,r2,r3
    ecc0:	2880022e 	bgeu	r5,r2,eccc <_malloc_r+0x4fc>
    ecc4:	31800217 	ldw	r6,8(r6)
    ecc8:	41bffa1e 	bne	r8,r6,ecb4 <_malloc_r+0x4e4>
    eccc:	32000317 	ldw	r8,12(r6)
    ecd0:	39c00117 	ldw	r7,4(r7)
    ecd4:	82000315 	stw	r8,12(r16)
    ecd8:	81800215 	stw	r6,8(r16)
    ecdc:	07020034 	movhi	fp,2048
    ece0:	e7039604 	addi	fp,fp,3672
    ece4:	34000315 	stw	r16,12(r6)
    ece8:	44000215 	stw	r16,8(r8)
    ecec:	003f3e06 	br	e9e8 <_malloc_r+0x218>
    ecf0:	63000044 	addi	r12,r12,1
    ecf4:	608000cc 	andi	r2,r12,3
    ecf8:	10005d26 	beq	r2,zero,ee70 <_malloc_r+0x6a0>
    ecfc:	18c00204 	addi	r3,r3,8
    ed00:	003f5106 	br	ea48 <_malloc_r+0x278>
    ed04:	8089883a 	add	r4,r16,r2
    ed08:	003f6d06 	br	eac0 <_malloc_r+0x2f0>
    ed0c:	00805504 	movi	r2,340
    ed10:	10c02036 	bltu	r2,r3,ed94 <_malloc_r+0x5c4>
    ed14:	8804d3fa 	srli	r2,r17,15
    ed18:	11801dc4 	addi	r6,r2,119
    ed1c:	300490fa 	slli	r2,r6,3
    ed20:	003ed806 	br	e884 <_malloc_r+0xb4>
    ed24:	48c000c4 	addi	r3,r9,3
    ed28:	003f3106 	br	e9f0 <_malloc_r+0x220>
    ed2c:	05c20234 	movhi	r23,2056
    ed30:	bdfebf04 	addi	r23,r23,-1284
    ed34:	b8800017 	ldw	r2,0(r23)
    ed38:	988d883a 	add	r6,r19,r2
    ed3c:	b9800015 	stw	r6,0(r23)
    ed40:	293fb21e 	bne	r5,r4,ec0c <_malloc_r+0x43c>
    ed44:	2083ffcc 	andi	r2,r4,4095
    ed48:	103fb01e 	bne	r2,zero,ec0c <_malloc_r+0x43c>
    ed4c:	e4000217 	ldw	r16,8(fp)
    ed50:	9d45883a 	add	r2,r19,r21
    ed54:	10800054 	ori	r2,r2,1
    ed58:	80800115 	stw	r2,4(r16)
    ed5c:	b8c00017 	ldw	r3,0(r23)
    ed60:	d0a04517 	ldw	r2,-32492(gp)
    ed64:	10c0012e 	bgeu	r2,r3,ed6c <_malloc_r+0x59c>
    ed68:	d0e04515 	stw	r3,-32492(gp)
    ed6c:	d0a04617 	ldw	r2,-32488(gp)
    ed70:	10ff962e 	bgeu	r2,r3,ebcc <_malloc_r+0x3fc>
    ed74:	d0e04615 	stw	r3,-32488(gp)
    ed78:	003f9406 	br	ebcc <_malloc_r+0x3fc>
    ed7c:	00800104 	movi	r2,4
    ed80:	11001e36 	bltu	r2,r4,edfc <_malloc_r+0x62c>
    ed84:	2804d1ba 	srli	r2,r5,6
    ed88:	11000e04 	addi	r4,r2,56
    ed8c:	200690fa 	slli	r3,r4,3
    ed90:	003fc506 	br	eca8 <_malloc_r+0x4d8>
    ed94:	00815504 	movi	r2,1364
    ed98:	10c01d2e 	bgeu	r2,r3,ee10 <_malloc_r+0x640>
    ed9c:	01801f84 	movi	r6,126
    eda0:	0080fc04 	movi	r2,1008
    eda4:	003eb706 	br	e884 <_malloc_r+0xb4>
    eda8:	00800204 	movi	r2,8
    edac:	10cbc83a 	sub	r5,r2,r3
    edb0:	2169883a 	add	r20,r4,r5
    edb4:	003f9e06 	br	ec30 <_malloc_r+0x460>
    edb8:	00bffe04 	movi	r2,-8
    edbc:	a93ffd04 	addi	r4,r21,-12
    edc0:	2088703a 	and	r4,r4,r2
    edc4:	b10b883a 	add	r5,r22,r4
    edc8:	00c00144 	movi	r3,5
    edcc:	28c00215 	stw	r3,8(r5)
    edd0:	28c00115 	stw	r3,4(r5)
    edd4:	b0800117 	ldw	r2,4(r22)
    edd8:	1080004c 	andi	r2,r2,1
    eddc:	2084b03a 	or	r2,r4,r2
    ede0:	b0800115 	stw	r2,4(r22)
    ede4:	313fdd2e 	bgeu	r6,r4,ed5c <_malloc_r+0x58c>
    ede8:	b1400204 	addi	r5,r22,8
    edec:	9009883a 	mov	r4,r18
    edf0:	000d0c00 	call	d0c0 <_free_r>
    edf4:	e4000217 	ldw	r16,8(fp)
    edf8:	003fd806 	br	ed5c <_malloc_r+0x58c>
    edfc:	00800504 	movi	r2,20
    ee00:	11001536 	bltu	r2,r4,ee58 <_malloc_r+0x688>
    ee04:	210016c4 	addi	r4,r4,91
    ee08:	200690fa 	slli	r3,r4,3
    ee0c:	003fa606 	br	eca8 <_malloc_r+0x4d8>
    ee10:	8804d4ba 	srli	r2,r17,18
    ee14:	11801f04 	addi	r6,r2,124
    ee18:	300490fa 	slli	r2,r6,3
    ee1c:	003e9906 	br	e884 <_malloc_r+0xb4>
    ee20:	2009d0ba 	srai	r4,r4,2
    ee24:	01420034 	movhi	r5,2048
    ee28:	29439604 	addi	r5,r5,3672
    ee2c:	00c00044 	movi	r3,1
    ee30:	28800117 	ldw	r2,4(r5)
    ee34:	1906983a 	sll	r3,r3,r4
    ee38:	10c4b03a 	or	r2,r2,r3
    ee3c:	28800115 	stw	r2,4(r5)
    ee40:	003fa306 	br	ecd0 <_malloc_r+0x500>
    ee44:	0027883a 	mov	r19,zero
    ee48:	00c00044 	movi	r3,1
    ee4c:	003f8606 	br	ec68 <_malloc_r+0x498>
    ee50:	d1200f15 	stw	r4,-32708(gp)
    ee54:	003f7306 	br	ec24 <_malloc_r+0x454>
    ee58:	00801504 	movi	r2,84
    ee5c:	11001936 	bltu	r2,r4,eec4 <_malloc_r+0x6f4>
    ee60:	2804d33a 	srli	r2,r5,12
    ee64:	11001b84 	addi	r4,r2,110
    ee68:	200690fa 	slli	r3,r4,3
    ee6c:	003f8e06 	br	eca8 <_malloc_r+0x4d8>
    ee70:	480b883a 	mov	r5,r9
    ee74:	6807883a 	mov	r3,r13
    ee78:	288000cc 	andi	r2,r5,3
    ee7c:	18fffe04 	addi	r3,r3,-8
    ee80:	297fffc4 	addi	r5,r5,-1
    ee84:	10001526 	beq	r2,zero,eedc <_malloc_r+0x70c>
    ee88:	18800217 	ldw	r2,8(r3)
    ee8c:	10fffa26 	beq	r2,r3,ee78 <_malloc_r+0x6a8>
    ee90:	2109883a 	add	r4,r4,r4
    ee94:	393f1e36 	bltu	r7,r4,eb10 <_malloc_r+0x340>
    ee98:	203f1d26 	beq	r4,zero,eb10 <_malloc_r+0x340>
    ee9c:	21c4703a 	and	r2,r4,r7
    eea0:	10000226 	beq	r2,zero,eeac <_malloc_r+0x6dc>
    eea4:	6013883a 	mov	r9,r12
    eea8:	003ee106 	br	ea30 <_malloc_r+0x260>
    eeac:	2109883a 	add	r4,r4,r4
    eeb0:	3904703a 	and	r2,r7,r4
    eeb4:	63000104 	addi	r12,r12,4
    eeb8:	103ffc26 	beq	r2,zero,eeac <_malloc_r+0x6dc>
    eebc:	6013883a 	mov	r9,r12
    eec0:	003edb06 	br	ea30 <_malloc_r+0x260>
    eec4:	00805504 	movi	r2,340
    eec8:	11000836 	bltu	r2,r4,eeec <_malloc_r+0x71c>
    eecc:	2804d3fa 	srli	r2,r5,15
    eed0:	11001dc4 	addi	r4,r2,119
    eed4:	200690fa 	slli	r3,r4,3
    eed8:	003f7306 	br	eca8 <_malloc_r+0x4d8>
    eedc:	0104303a 	nor	r2,zero,r4
    eee0:	388e703a 	and	r7,r7,r2
    eee4:	e1c00115 	stw	r7,4(fp)
    eee8:	003fe906 	br	ee90 <_malloc_r+0x6c0>
    eeec:	00815504 	movi	r2,1364
    eef0:	1100032e 	bgeu	r2,r4,ef00 <_malloc_r+0x730>
    eef4:	01001f84 	movi	r4,126
    eef8:	00c0fc04 	movi	r3,1008
    eefc:	003f6a06 	br	eca8 <_malloc_r+0x4d8>
    ef00:	2804d4ba 	srli	r2,r5,18
    ef04:	11001f04 	addi	r4,r2,124
    ef08:	200690fa 	slli	r3,r4,3
    ef0c:	003f6606 	br	eca8 <_malloc_r+0x4d8>

0000ef10 <memchr>:
    ef10:	008000c4 	movi	r2,3
    ef14:	29403fcc 	andi	r5,r5,255
    ef18:	2007883a 	mov	r3,r4
    ef1c:	1180022e 	bgeu	r2,r6,ef28 <memchr+0x18>
    ef20:	2084703a 	and	r2,r4,r2
    ef24:	10000b26 	beq	r2,zero,ef54 <memchr+0x44>
    ef28:	313fffc4 	addi	r4,r6,-1
    ef2c:	3000051e 	bne	r6,zero,ef44 <memchr+0x34>
    ef30:	00002c06 	br	efe4 <memchr+0xd4>
    ef34:	213fffc4 	addi	r4,r4,-1
    ef38:	00bfffc4 	movi	r2,-1
    ef3c:	18c00044 	addi	r3,r3,1
    ef40:	20802826 	beq	r4,r2,efe4 <memchr+0xd4>
    ef44:	18800003 	ldbu	r2,0(r3)
    ef48:	28bffa1e 	bne	r5,r2,ef34 <memchr+0x24>
    ef4c:	1805883a 	mov	r2,r3
    ef50:	f800283a 	ret
    ef54:	0011883a 	mov	r8,zero
    ef58:	0007883a 	mov	r3,zero
    ef5c:	01c00104 	movi	r7,4
    ef60:	4004923a 	slli	r2,r8,8
    ef64:	18c00044 	addi	r3,r3,1
    ef68:	1151883a 	add	r8,r2,r5
    ef6c:	19fffc1e 	bne	r3,r7,ef60 <memchr+0x50>
    ef70:	02bfbff4 	movhi	r10,65279
    ef74:	52bfbfc4 	addi	r10,r10,-257
    ef78:	02602074 	movhi	r9,32897
    ef7c:	4a602004 	addi	r9,r9,-32640
    ef80:	02c000c4 	movi	r11,3
    ef84:	20800017 	ldw	r2,0(r4)
    ef88:	31bfff04 	addi	r6,r6,-4
    ef8c:	200f883a 	mov	r7,r4
    ef90:	1204f03a 	xor	r2,r2,r8
    ef94:	1287883a 	add	r3,r2,r10
    ef98:	1a46703a 	and	r3,r3,r9
    ef9c:	0084303a 	nor	r2,zero,r2
    efa0:	10c4703a 	and	r2,r2,r3
    efa4:	10000b26 	beq	r2,zero,efd4 <memchr+0xc4>
    efa8:	20800003 	ldbu	r2,0(r4)
    efac:	28800f26 	beq	r5,r2,efec <memchr+0xdc>
    efb0:	20800043 	ldbu	r2,1(r4)
    efb4:	21c00044 	addi	r7,r4,1
    efb8:	28800c26 	beq	r5,r2,efec <memchr+0xdc>
    efbc:	20800083 	ldbu	r2,2(r4)
    efc0:	21c00084 	addi	r7,r4,2
    efc4:	28800926 	beq	r5,r2,efec <memchr+0xdc>
    efc8:	208000c3 	ldbu	r2,3(r4)
    efcc:	21c000c4 	addi	r7,r4,3
    efd0:	28800626 	beq	r5,r2,efec <memchr+0xdc>
    efd4:	21000104 	addi	r4,r4,4
    efd8:	59bfea36 	bltu	r11,r6,ef84 <memchr+0x74>
    efdc:	2007883a 	mov	r3,r4
    efe0:	003fd106 	br	ef28 <memchr+0x18>
    efe4:	0005883a 	mov	r2,zero
    efe8:	f800283a 	ret
    efec:	3805883a 	mov	r2,r7
    eff0:	f800283a 	ret

0000eff4 <memmove>:
    eff4:	2807883a 	mov	r3,r5
    eff8:	2011883a 	mov	r8,r4
    effc:	29000c2e 	bgeu	r5,r4,f030 <memmove+0x3c>
    f000:	298f883a 	add	r7,r5,r6
    f004:	21c00a2e 	bgeu	r4,r7,f030 <memmove+0x3c>
    f008:	30000726 	beq	r6,zero,f028 <memmove+0x34>
    f00c:	2187883a 	add	r3,r4,r6
    f010:	198dc83a 	sub	r6,r3,r6
    f014:	39ffffc4 	addi	r7,r7,-1
    f018:	38800003 	ldbu	r2,0(r7)
    f01c:	18ffffc4 	addi	r3,r3,-1
    f020:	18800005 	stb	r2,0(r3)
    f024:	19bffb1e 	bne	r3,r6,f014 <memmove+0x20>
    f028:	2005883a 	mov	r2,r4
    f02c:	f800283a 	ret
    f030:	01c003c4 	movi	r7,15
    f034:	39800a36 	bltu	r7,r6,f060 <memmove+0x6c>
    f038:	303ffb26 	beq	r6,zero,f028 <memmove+0x34>
    f03c:	400f883a 	mov	r7,r8
    f040:	320d883a 	add	r6,r6,r8
    f044:	28800003 	ldbu	r2,0(r5)
    f048:	29400044 	addi	r5,r5,1
    f04c:	38800005 	stb	r2,0(r7)
    f050:	39c00044 	addi	r7,r7,1
    f054:	39bffb1e 	bne	r7,r6,f044 <memmove+0x50>
    f058:	2005883a 	mov	r2,r4
    f05c:	f800283a 	ret
    f060:	1904b03a 	or	r2,r3,r4
    f064:	108000cc 	andi	r2,r2,3
    f068:	103ff31e 	bne	r2,zero,f038 <memmove+0x44>
    f06c:	3811883a 	mov	r8,r7
    f070:	180b883a 	mov	r5,r3
    f074:	200f883a 	mov	r7,r4
    f078:	28c00017 	ldw	r3,0(r5)
    f07c:	31bffc04 	addi	r6,r6,-16
    f080:	38c00015 	stw	r3,0(r7)
    f084:	28800117 	ldw	r2,4(r5)
    f088:	38800115 	stw	r2,4(r7)
    f08c:	28c00217 	ldw	r3,8(r5)
    f090:	38c00215 	stw	r3,8(r7)
    f094:	28800317 	ldw	r2,12(r5)
    f098:	29400404 	addi	r5,r5,16
    f09c:	38800315 	stw	r2,12(r7)
    f0a0:	39c00404 	addi	r7,r7,16
    f0a4:	41bff436 	bltu	r8,r6,f078 <memmove+0x84>
    f0a8:	008000c4 	movi	r2,3
    f0ac:	1180072e 	bgeu	r2,r6,f0cc <memmove+0xd8>
    f0b0:	1007883a 	mov	r3,r2
    f0b4:	28800017 	ldw	r2,0(r5)
    f0b8:	31bfff04 	addi	r6,r6,-4
    f0bc:	29400104 	addi	r5,r5,4
    f0c0:	38800015 	stw	r2,0(r7)
    f0c4:	39c00104 	addi	r7,r7,4
    f0c8:	19bffa36 	bltu	r3,r6,f0b4 <memmove+0xc0>
    f0cc:	3811883a 	mov	r8,r7
    f0d0:	003fd906 	br	f038 <memmove+0x44>

0000f0d4 <_Bfree>:
    f0d4:	28000826 	beq	r5,zero,f0f8 <_Bfree+0x24>
    f0d8:	28800117 	ldw	r2,4(r5)
    f0dc:	21001317 	ldw	r4,76(r4)
    f0e0:	1085883a 	add	r2,r2,r2
    f0e4:	1085883a 	add	r2,r2,r2
    f0e8:	1105883a 	add	r2,r2,r4
    f0ec:	10c00017 	ldw	r3,0(r2)
    f0f0:	28c00015 	stw	r3,0(r5)
    f0f4:	11400015 	stw	r5,0(r2)
    f0f8:	f800283a 	ret

0000f0fc <__hi0bits>:
    f0fc:	20bfffec 	andhi	r2,r4,65535
    f100:	10001426 	beq	r2,zero,f154 <__hi0bits+0x58>
    f104:	0007883a 	mov	r3,zero
    f108:	20bfc02c 	andhi	r2,r4,65280
    f10c:	1000021e 	bne	r2,zero,f118 <__hi0bits+0x1c>
    f110:	2008923a 	slli	r4,r4,8
    f114:	18c00204 	addi	r3,r3,8
    f118:	20bc002c 	andhi	r2,r4,61440
    f11c:	1000021e 	bne	r2,zero,f128 <__hi0bits+0x2c>
    f120:	2008913a 	slli	r4,r4,4
    f124:	18c00104 	addi	r3,r3,4
    f128:	20b0002c 	andhi	r2,r4,49152
    f12c:	1000031e 	bne	r2,zero,f13c <__hi0bits+0x40>
    f130:	2105883a 	add	r2,r4,r4
    f134:	18c00084 	addi	r3,r3,2
    f138:	1089883a 	add	r4,r2,r2
    f13c:	20000316 	blt	r4,zero,f14c <__hi0bits+0x50>
    f140:	2090002c 	andhi	r2,r4,16384
    f144:	10000626 	beq	r2,zero,f160 <__hi0bits+0x64>
    f148:	18c00044 	addi	r3,r3,1
    f14c:	1805883a 	mov	r2,r3
    f150:	f800283a 	ret
    f154:	2008943a 	slli	r4,r4,16
    f158:	00c00404 	movi	r3,16
    f15c:	003fea06 	br	f108 <__hi0bits+0xc>
    f160:	00c00804 	movi	r3,32
    f164:	1805883a 	mov	r2,r3
    f168:	f800283a 	ret

0000f16c <__lo0bits>:
    f16c:	20c00017 	ldw	r3,0(r4)
    f170:	188001cc 	andi	r2,r3,7
    f174:	10000a26 	beq	r2,zero,f1a0 <__lo0bits+0x34>
    f178:	1880004c 	andi	r2,r3,1
    f17c:	1005003a 	cmpeq	r2,r2,zero
    f180:	10002126 	beq	r2,zero,f208 <__lo0bits+0x9c>
    f184:	1880008c 	andi	r2,r3,2
    f188:	1000251e 	bne	r2,zero,f220 <__lo0bits+0xb4>
    f18c:	1804d0ba 	srli	r2,r3,2
    f190:	01400084 	movi	r5,2
    f194:	20800015 	stw	r2,0(r4)
    f198:	2805883a 	mov	r2,r5
    f19c:	f800283a 	ret
    f1a0:	18bfffcc 	andi	r2,r3,65535
    f1a4:	10001526 	beq	r2,zero,f1fc <__lo0bits+0x90>
    f1a8:	000b883a 	mov	r5,zero
    f1ac:	18803fcc 	andi	r2,r3,255
    f1b0:	1000021e 	bne	r2,zero,f1bc <__lo0bits+0x50>
    f1b4:	1806d23a 	srli	r3,r3,8
    f1b8:	29400204 	addi	r5,r5,8
    f1bc:	188003cc 	andi	r2,r3,15
    f1c0:	1000021e 	bne	r2,zero,f1cc <__lo0bits+0x60>
    f1c4:	1806d13a 	srli	r3,r3,4
    f1c8:	29400104 	addi	r5,r5,4
    f1cc:	188000cc 	andi	r2,r3,3
    f1d0:	1000021e 	bne	r2,zero,f1dc <__lo0bits+0x70>
    f1d4:	1806d0ba 	srli	r3,r3,2
    f1d8:	29400084 	addi	r5,r5,2
    f1dc:	1880004c 	andi	r2,r3,1
    f1e0:	1000031e 	bne	r2,zero,f1f0 <__lo0bits+0x84>
    f1e4:	1806d07a 	srli	r3,r3,1
    f1e8:	18000a26 	beq	r3,zero,f214 <__lo0bits+0xa8>
    f1ec:	29400044 	addi	r5,r5,1
    f1f0:	2805883a 	mov	r2,r5
    f1f4:	20c00015 	stw	r3,0(r4)
    f1f8:	f800283a 	ret
    f1fc:	1806d43a 	srli	r3,r3,16
    f200:	01400404 	movi	r5,16
    f204:	003fe906 	br	f1ac <__lo0bits+0x40>
    f208:	000b883a 	mov	r5,zero
    f20c:	2805883a 	mov	r2,r5
    f210:	f800283a 	ret
    f214:	01400804 	movi	r5,32
    f218:	2805883a 	mov	r2,r5
    f21c:	f800283a 	ret
    f220:	1804d07a 	srli	r2,r3,1
    f224:	01400044 	movi	r5,1
    f228:	20800015 	stw	r2,0(r4)
    f22c:	003fda06 	br	f198 <__lo0bits+0x2c>

0000f230 <__mcmp>:
    f230:	20800417 	ldw	r2,16(r4)
    f234:	28c00417 	ldw	r3,16(r5)
    f238:	10cfc83a 	sub	r7,r2,r3
    f23c:	38000c1e 	bne	r7,zero,f270 <__mcmp+0x40>
    f240:	18c5883a 	add	r2,r3,r3
    f244:	1085883a 	add	r2,r2,r2
    f248:	10c00504 	addi	r3,r2,20
    f24c:	21000504 	addi	r4,r4,20
    f250:	28cb883a 	add	r5,r5,r3
    f254:	2085883a 	add	r2,r4,r2
    f258:	10bfff04 	addi	r2,r2,-4
    f25c:	297fff04 	addi	r5,r5,-4
    f260:	11800017 	ldw	r6,0(r2)
    f264:	28c00017 	ldw	r3,0(r5)
    f268:	30c0031e 	bne	r6,r3,f278 <__mcmp+0x48>
    f26c:	20bffa36 	bltu	r4,r2,f258 <__mcmp+0x28>
    f270:	3805883a 	mov	r2,r7
    f274:	f800283a 	ret
    f278:	30c00336 	bltu	r6,r3,f288 <__mcmp+0x58>
    f27c:	01c00044 	movi	r7,1
    f280:	3805883a 	mov	r2,r7
    f284:	f800283a 	ret
    f288:	01ffffc4 	movi	r7,-1
    f28c:	003ff806 	br	f270 <__mcmp+0x40>

0000f290 <__ulp>:
    f290:	295ffc2c 	andhi	r5,r5,32752
    f294:	013f3034 	movhi	r4,64704
    f298:	290b883a 	add	r5,r5,r4
    f29c:	0145c83a 	sub	r2,zero,r5
    f2a0:	1007d53a 	srai	r3,r2,20
    f2a4:	000d883a 	mov	r6,zero
    f2a8:	0140040e 	bge	zero,r5,f2bc <__ulp+0x2c>
    f2ac:	280f883a 	mov	r7,r5
    f2b0:	3807883a 	mov	r3,r7
    f2b4:	3005883a 	mov	r2,r6
    f2b8:	f800283a 	ret
    f2bc:	008004c4 	movi	r2,19
    f2c0:	193ffb04 	addi	r4,r3,-20
    f2c4:	10c00c0e 	bge	r2,r3,f2f8 <__ulp+0x68>
    f2c8:	008007c4 	movi	r2,31
    f2cc:	1107c83a 	sub	r3,r2,r4
    f2d0:	00800784 	movi	r2,30
    f2d4:	01400044 	movi	r5,1
    f2d8:	11000216 	blt	r2,r4,f2e4 <__ulp+0x54>
    f2dc:	00800044 	movi	r2,1
    f2e0:	10ca983a 	sll	r5,r2,r3
    f2e4:	000f883a 	mov	r7,zero
    f2e8:	280d883a 	mov	r6,r5
    f2ec:	3807883a 	mov	r3,r7
    f2f0:	3005883a 	mov	r2,r6
    f2f4:	f800283a 	ret
    f2f8:	00800234 	movhi	r2,8
    f2fc:	10cfd83a 	sra	r7,r2,r3
    f300:	000d883a 	mov	r6,zero
    f304:	3005883a 	mov	r2,r6
    f308:	3807883a 	mov	r3,r7
    f30c:	f800283a 	ret

0000f310 <__b2d>:
    f310:	20800417 	ldw	r2,16(r4)
    f314:	defff904 	addi	sp,sp,-28
    f318:	dd000415 	stw	r20,16(sp)
    f31c:	1085883a 	add	r2,r2,r2
    f320:	25000504 	addi	r20,r4,20
    f324:	1085883a 	add	r2,r2,r2
    f328:	dc000015 	stw	r16,0(sp)
    f32c:	a0a1883a 	add	r16,r20,r2
    f330:	dd400515 	stw	r21,20(sp)
    f334:	857fff17 	ldw	r21,-4(r16)
    f338:	dc400115 	stw	r17,4(sp)
    f33c:	dfc00615 	stw	ra,24(sp)
    f340:	a809883a 	mov	r4,r21
    f344:	2823883a 	mov	r17,r5
    f348:	dcc00315 	stw	r19,12(sp)
    f34c:	dc800215 	stw	r18,8(sp)
    f350:	000f0fc0 	call	f0fc <__hi0bits>
    f354:	100b883a 	mov	r5,r2
    f358:	00800804 	movi	r2,32
    f35c:	1145c83a 	sub	r2,r2,r5
    f360:	88800015 	stw	r2,0(r17)
    f364:	00800284 	movi	r2,10
    f368:	80ffff04 	addi	r3,r16,-4
    f36c:	11401416 	blt	r2,r5,f3c0 <__b2d+0xb0>
    f370:	008002c4 	movi	r2,11
    f374:	1149c83a 	sub	r4,r2,r5
    f378:	a0c02736 	bltu	r20,r3,f418 <__b2d+0x108>
    f37c:	000d883a 	mov	r6,zero
    f380:	28800544 	addi	r2,r5,21
    f384:	a906d83a 	srl	r3,r21,r4
    f388:	a884983a 	sll	r2,r21,r2
    f38c:	1ccffc34 	orhi	r19,r3,16368
    f390:	11a4b03a 	or	r18,r2,r6
    f394:	9005883a 	mov	r2,r18
    f398:	9807883a 	mov	r3,r19
    f39c:	dfc00617 	ldw	ra,24(sp)
    f3a0:	dd400517 	ldw	r21,20(sp)
    f3a4:	dd000417 	ldw	r20,16(sp)
    f3a8:	dcc00317 	ldw	r19,12(sp)
    f3ac:	dc800217 	ldw	r18,8(sp)
    f3b0:	dc400117 	ldw	r17,4(sp)
    f3b4:	dc000017 	ldw	r16,0(sp)
    f3b8:	dec00704 	addi	sp,sp,28
    f3bc:	f800283a 	ret
    f3c0:	a0c00e36 	bltu	r20,r3,f3fc <__b2d+0xec>
    f3c4:	293ffd44 	addi	r4,r5,-11
    f3c8:	000d883a 	mov	r6,zero
    f3cc:	20000f26 	beq	r4,zero,f40c <__b2d+0xfc>
    f3d0:	00800804 	movi	r2,32
    f3d4:	110bc83a 	sub	r5,r2,r4
    f3d8:	a0c01236 	bltu	r20,r3,f424 <__b2d+0x114>
    f3dc:	000f883a 	mov	r7,zero
    f3e0:	a904983a 	sll	r2,r21,r4
    f3e4:	3146d83a 	srl	r3,r6,r5
    f3e8:	3108983a 	sll	r4,r6,r4
    f3ec:	108ffc34 	orhi	r2,r2,16368
    f3f0:	18a6b03a 	or	r19,r3,r2
    f3f4:	3924b03a 	or	r18,r7,r4
    f3f8:	003fe606 	br	f394 <__b2d+0x84>
    f3fc:	293ffd44 	addi	r4,r5,-11
    f400:	81bffe17 	ldw	r6,-8(r16)
    f404:	80fffe04 	addi	r3,r16,-8
    f408:	203ff11e 	bne	r4,zero,f3d0 <__b2d+0xc0>
    f40c:	accffc34 	orhi	r19,r21,16368
    f410:	3025883a 	mov	r18,r6
    f414:	003fdf06 	br	f394 <__b2d+0x84>
    f418:	18bfff17 	ldw	r2,-4(r3)
    f41c:	110cd83a 	srl	r6,r2,r4
    f420:	003fd706 	br	f380 <__b2d+0x70>
    f424:	18bfff17 	ldw	r2,-4(r3)
    f428:	114ed83a 	srl	r7,r2,r5
    f42c:	003fec06 	br	f3e0 <__b2d+0xd0>

0000f430 <__ratio>:
    f430:	defff904 	addi	sp,sp,-28
    f434:	dc400215 	stw	r17,8(sp)
    f438:	2823883a 	mov	r17,r5
    f43c:	d80b883a 	mov	r5,sp
    f440:	dfc00615 	stw	ra,24(sp)
    f444:	dd000515 	stw	r20,20(sp)
    f448:	dcc00415 	stw	r19,16(sp)
    f44c:	dc800315 	stw	r18,12(sp)
    f450:	2025883a 	mov	r18,r4
    f454:	000f3100 	call	f310 <__b2d>
    f458:	8809883a 	mov	r4,r17
    f45c:	d9400104 	addi	r5,sp,4
    f460:	1027883a 	mov	r19,r2
    f464:	1829883a 	mov	r20,r3
    f468:	000f3100 	call	f310 <__b2d>
    f46c:	89000417 	ldw	r4,16(r17)
    f470:	91c00417 	ldw	r7,16(r18)
    f474:	d9800117 	ldw	r6,4(sp)
    f478:	180b883a 	mov	r5,r3
    f47c:	390fc83a 	sub	r7,r7,r4
    f480:	1009883a 	mov	r4,r2
    f484:	d8800017 	ldw	r2,0(sp)
    f488:	380e917a 	slli	r7,r7,5
    f48c:	2011883a 	mov	r8,r4
    f490:	1185c83a 	sub	r2,r2,r6
    f494:	11c5883a 	add	r2,r2,r7
    f498:	1006953a 	slli	r3,r2,20
    f49c:	2813883a 	mov	r9,r5
    f4a0:	00800d0e 	bge	zero,r2,f4d8 <__ratio+0xa8>
    f4a4:	1d29883a 	add	r20,r3,r20
    f4a8:	a00b883a 	mov	r5,r20
    f4ac:	480f883a 	mov	r7,r9
    f4b0:	9809883a 	mov	r4,r19
    f4b4:	400d883a 	mov	r6,r8
    f4b8:	0006c380 	call	6c38 <__divdf3>
    f4bc:	dfc00617 	ldw	ra,24(sp)
    f4c0:	dd000517 	ldw	r20,20(sp)
    f4c4:	dcc00417 	ldw	r19,16(sp)
    f4c8:	dc800317 	ldw	r18,12(sp)
    f4cc:	dc400217 	ldw	r17,8(sp)
    f4d0:	dec00704 	addi	sp,sp,28
    f4d4:	f800283a 	ret
    f4d8:	28d3c83a 	sub	r9,r5,r3
    f4dc:	003ff206 	br	f4a8 <__ratio+0x78>

0000f4e0 <_mprec_log10>:
    f4e0:	defffe04 	addi	sp,sp,-8
    f4e4:	008005c4 	movi	r2,23
    f4e8:	dc000015 	stw	r16,0(sp)
    f4ec:	dfc00115 	stw	ra,4(sp)
    f4f0:	2021883a 	mov	r16,r4
    f4f4:	11000c16 	blt	r2,r4,f528 <_mprec_log10+0x48>
    f4f8:	200490fa 	slli	r2,r4,3
    f4fc:	00c20034 	movhi	r3,2048
    f500:	18c15f04 	addi	r3,r3,1404
    f504:	10c5883a 	add	r2,r2,r3
    f508:	12400117 	ldw	r9,4(r2)
    f50c:	12000017 	ldw	r8,0(r2)
    f510:	4807883a 	mov	r3,r9
    f514:	4005883a 	mov	r2,r8
    f518:	dfc00117 	ldw	ra,4(sp)
    f51c:	dc000017 	ldw	r16,0(sp)
    f520:	dec00204 	addi	sp,sp,8
    f524:	f800283a 	ret
    f528:	0011883a 	mov	r8,zero
    f52c:	024ffc34 	movhi	r9,16368
    f530:	0005883a 	mov	r2,zero
    f534:	00d00934 	movhi	r3,16420
    f538:	480b883a 	mov	r5,r9
    f53c:	4009883a 	mov	r4,r8
    f540:	180f883a 	mov	r7,r3
    f544:	100d883a 	mov	r6,r2
    f548:	00068740 	call	6874 <__muldf3>
    f54c:	843fffc4 	addi	r16,r16,-1
    f550:	1011883a 	mov	r8,r2
    f554:	1813883a 	mov	r9,r3
    f558:	803ff51e 	bne	r16,zero,f530 <_mprec_log10+0x50>
    f55c:	4005883a 	mov	r2,r8
    f560:	4807883a 	mov	r3,r9
    f564:	dfc00117 	ldw	ra,4(sp)
    f568:	dc000017 	ldw	r16,0(sp)
    f56c:	dec00204 	addi	sp,sp,8
    f570:	f800283a 	ret

0000f574 <__copybits>:
    f574:	297fffc4 	addi	r5,r5,-1
    f578:	30800417 	ldw	r2,16(r6)
    f57c:	280bd17a 	srai	r5,r5,5
    f580:	31800504 	addi	r6,r6,20
    f584:	1085883a 	add	r2,r2,r2
    f588:	294b883a 	add	r5,r5,r5
    f58c:	294b883a 	add	r5,r5,r5
    f590:	1085883a 	add	r2,r2,r2
    f594:	290b883a 	add	r5,r5,r4
    f598:	3087883a 	add	r3,r6,r2
    f59c:	29400104 	addi	r5,r5,4
    f5a0:	30c0052e 	bgeu	r6,r3,f5b8 <__copybits+0x44>
    f5a4:	30800017 	ldw	r2,0(r6)
    f5a8:	31800104 	addi	r6,r6,4
    f5ac:	20800015 	stw	r2,0(r4)
    f5b0:	21000104 	addi	r4,r4,4
    f5b4:	30fffb36 	bltu	r6,r3,f5a4 <__copybits+0x30>
    f5b8:	2140032e 	bgeu	r4,r5,f5c8 <__copybits+0x54>
    f5bc:	20000015 	stw	zero,0(r4)
    f5c0:	21000104 	addi	r4,r4,4
    f5c4:	217ffd36 	bltu	r4,r5,f5bc <__copybits+0x48>
    f5c8:	f800283a 	ret

0000f5cc <__any_on>:
    f5cc:	20800417 	ldw	r2,16(r4)
    f5d0:	2807d17a 	srai	r3,r5,5
    f5d4:	21000504 	addi	r4,r4,20
    f5d8:	10c00d0e 	bge	r2,r3,f610 <__any_on+0x44>
    f5dc:	1085883a 	add	r2,r2,r2
    f5e0:	1085883a 	add	r2,r2,r2
    f5e4:	208d883a 	add	r6,r4,r2
    f5e8:	2180182e 	bgeu	r4,r6,f64c <__any_on+0x80>
    f5ec:	30bfff17 	ldw	r2,-4(r6)
    f5f0:	30ffff04 	addi	r3,r6,-4
    f5f4:	1000041e 	bne	r2,zero,f608 <__any_on+0x3c>
    f5f8:	20c0142e 	bgeu	r4,r3,f64c <__any_on+0x80>
    f5fc:	18ffff04 	addi	r3,r3,-4
    f600:	18800017 	ldw	r2,0(r3)
    f604:	103ffc26 	beq	r2,zero,f5f8 <__any_on+0x2c>
    f608:	00800044 	movi	r2,1
    f60c:	f800283a 	ret
    f610:	18800a0e 	bge	r3,r2,f63c <__any_on+0x70>
    f614:	294007cc 	andi	r5,r5,31
    f618:	28000826 	beq	r5,zero,f63c <__any_on+0x70>
    f61c:	18c5883a 	add	r2,r3,r3
    f620:	1085883a 	add	r2,r2,r2
    f624:	208d883a 	add	r6,r4,r2
    f628:	30c00017 	ldw	r3,0(r6)
    f62c:	1944d83a 	srl	r2,r3,r5
    f630:	1144983a 	sll	r2,r2,r5
    f634:	18bff41e 	bne	r3,r2,f608 <__any_on+0x3c>
    f638:	003feb06 	br	f5e8 <__any_on+0x1c>
    f63c:	18c5883a 	add	r2,r3,r3
    f640:	1085883a 	add	r2,r2,r2
    f644:	208d883a 	add	r6,r4,r2
    f648:	003fe706 	br	f5e8 <__any_on+0x1c>
    f64c:	0005883a 	mov	r2,zero
    f650:	f800283a 	ret

0000f654 <_Balloc>:
    f654:	20c01317 	ldw	r3,76(r4)
    f658:	defffb04 	addi	sp,sp,-20
    f65c:	dcc00315 	stw	r19,12(sp)
    f660:	dc800215 	stw	r18,8(sp)
    f664:	dfc00415 	stw	ra,16(sp)
    f668:	2825883a 	mov	r18,r5
    f66c:	dc400115 	stw	r17,4(sp)
    f670:	dc000015 	stw	r16,0(sp)
    f674:	2027883a 	mov	r19,r4
    f678:	01800404 	movi	r6,16
    f67c:	01400104 	movi	r5,4
    f680:	18001726 	beq	r3,zero,f6e0 <_Balloc+0x8c>
    f684:	01400044 	movi	r5,1
    f688:	9485883a 	add	r2,r18,r18
    f68c:	2ca2983a 	sll	r17,r5,r18
    f690:	1085883a 	add	r2,r2,r2
    f694:	10c7883a 	add	r3,r2,r3
    f698:	1c000017 	ldw	r16,0(r3)
    f69c:	8c4d883a 	add	r6,r17,r17
    f6a0:	318d883a 	add	r6,r6,r6
    f6a4:	9809883a 	mov	r4,r19
    f6a8:	31800504 	addi	r6,r6,20
    f6ac:	80001226 	beq	r16,zero,f6f8 <_Balloc+0xa4>
    f6b0:	80800017 	ldw	r2,0(r16)
    f6b4:	18800015 	stw	r2,0(r3)
    f6b8:	80000415 	stw	zero,16(r16)
    f6bc:	80000315 	stw	zero,12(r16)
    f6c0:	8005883a 	mov	r2,r16
    f6c4:	dfc00417 	ldw	ra,16(sp)
    f6c8:	dcc00317 	ldw	r19,12(sp)
    f6cc:	dc800217 	ldw	r18,8(sp)
    f6d0:	dc400117 	ldw	r17,4(sp)
    f6d4:	dc000017 	ldw	r16,0(sp)
    f6d8:	dec00504 	addi	sp,sp,20
    f6dc:	f800283a 	ret
    f6e0:	0010d540 	call	10d54 <_calloc_r>
    f6e4:	1007883a 	mov	r3,r2
    f6e8:	0021883a 	mov	r16,zero
    f6ec:	98801315 	stw	r2,76(r19)
    f6f0:	103fe41e 	bne	r2,zero,f684 <_Balloc+0x30>
    f6f4:	003ff206 	br	f6c0 <_Balloc+0x6c>
    f6f8:	0010d540 	call	10d54 <_calloc_r>
    f6fc:	103ff026 	beq	r2,zero,f6c0 <_Balloc+0x6c>
    f700:	1021883a 	mov	r16,r2
    f704:	14800115 	stw	r18,4(r2)
    f708:	14400215 	stw	r17,8(r2)
    f70c:	003fea06 	br	f6b8 <_Balloc+0x64>

0000f710 <__d2b>:
    f710:	defff504 	addi	sp,sp,-44
    f714:	dcc00515 	stw	r19,20(sp)
    f718:	04c00044 	movi	r19,1
    f71c:	dc000215 	stw	r16,8(sp)
    f720:	2821883a 	mov	r16,r5
    f724:	980b883a 	mov	r5,r19
    f728:	ddc00915 	stw	r23,36(sp)
    f72c:	dd800815 	stw	r22,32(sp)
    f730:	dd400715 	stw	r21,28(sp)
    f734:	dd000615 	stw	r20,24(sp)
    f738:	dc800415 	stw	r18,16(sp)
    f73c:	dc400315 	stw	r17,12(sp)
    f740:	dfc00a15 	stw	ra,40(sp)
    f744:	3023883a 	mov	r17,r6
    f748:	382d883a 	mov	r22,r7
    f74c:	ddc00b17 	ldw	r23,44(sp)
    f750:	000f6540 	call	f654 <_Balloc>
    f754:	1025883a 	mov	r18,r2
    f758:	00a00034 	movhi	r2,32768
    f75c:	10bfffc4 	addi	r2,r2,-1
    f760:	8888703a 	and	r4,r17,r2
    f764:	202ad53a 	srli	r21,r4,20
    f768:	00800434 	movhi	r2,16
    f76c:	10bfffc4 	addi	r2,r2,-1
    f770:	8886703a 	and	r3,r17,r2
    f774:	a829003a 	cmpeq	r20,r21,zero
    f778:	800b883a 	mov	r5,r16
    f77c:	d8c00115 	stw	r3,4(sp)
    f780:	94000504 	addi	r16,r18,20
    f784:	a000021e 	bne	r20,zero,f790 <__d2b+0x80>
    f788:	18c00434 	orhi	r3,r3,16
    f78c:	d8c00115 	stw	r3,4(sp)
    f790:	28002726 	beq	r5,zero,f830 <__d2b+0x120>
    f794:	d809883a 	mov	r4,sp
    f798:	d9400015 	stw	r5,0(sp)
    f79c:	000f16c0 	call	f16c <__lo0bits>
    f7a0:	100d883a 	mov	r6,r2
    f7a4:	10003526 	beq	r2,zero,f87c <__d2b+0x16c>
    f7a8:	d8c00117 	ldw	r3,4(sp)
    f7ac:	00800804 	movi	r2,32
    f7b0:	1185c83a 	sub	r2,r2,r6
    f7b4:	d9000017 	ldw	r4,0(sp)
    f7b8:	1886983a 	sll	r3,r3,r2
    f7bc:	1906b03a 	or	r3,r3,r4
    f7c0:	90c00515 	stw	r3,20(r18)
    f7c4:	d8c00117 	ldw	r3,4(sp)
    f7c8:	1986d83a 	srl	r3,r3,r6
    f7cc:	d8c00115 	stw	r3,4(sp)
    f7d0:	180b003a 	cmpeq	r5,r3,zero
    f7d4:	00800084 	movi	r2,2
    f7d8:	114bc83a 	sub	r5,r2,r5
    f7dc:	80c00115 	stw	r3,4(r16)
    f7e0:	91400415 	stw	r5,16(r18)
    f7e4:	a0001a1e 	bne	r20,zero,f850 <__d2b+0x140>
    f7e8:	3545883a 	add	r2,r6,r21
    f7ec:	10bef344 	addi	r2,r2,-1075
    f7f0:	00c00d44 	movi	r3,53
    f7f4:	b0800015 	stw	r2,0(r22)
    f7f8:	1987c83a 	sub	r3,r3,r6
    f7fc:	b8c00015 	stw	r3,0(r23)
    f800:	9005883a 	mov	r2,r18
    f804:	dfc00a17 	ldw	ra,40(sp)
    f808:	ddc00917 	ldw	r23,36(sp)
    f80c:	dd800817 	ldw	r22,32(sp)
    f810:	dd400717 	ldw	r21,28(sp)
    f814:	dd000617 	ldw	r20,24(sp)
    f818:	dcc00517 	ldw	r19,20(sp)
    f81c:	dc800417 	ldw	r18,16(sp)
    f820:	dc400317 	ldw	r17,12(sp)
    f824:	dc000217 	ldw	r16,8(sp)
    f828:	dec00b04 	addi	sp,sp,44
    f82c:	f800283a 	ret
    f830:	d9000104 	addi	r4,sp,4
    f834:	000f16c0 	call	f16c <__lo0bits>
    f838:	11800804 	addi	r6,r2,32
    f83c:	d8800117 	ldw	r2,4(sp)
    f840:	94c00415 	stw	r19,16(r18)
    f844:	980b883a 	mov	r5,r19
    f848:	90800515 	stw	r2,20(r18)
    f84c:	a03fe626 	beq	r20,zero,f7e8 <__d2b+0xd8>
    f850:	2945883a 	add	r2,r5,r5
    f854:	1085883a 	add	r2,r2,r2
    f858:	1405883a 	add	r2,r2,r16
    f85c:	113fff17 	ldw	r4,-4(r2)
    f860:	30fef384 	addi	r3,r6,-1074
    f864:	2820917a 	slli	r16,r5,5
    f868:	b0c00015 	stw	r3,0(r22)
    f86c:	000f0fc0 	call	f0fc <__hi0bits>
    f870:	80a1c83a 	sub	r16,r16,r2
    f874:	bc000015 	stw	r16,0(r23)
    f878:	003fe106 	br	f800 <__d2b+0xf0>
    f87c:	d8800017 	ldw	r2,0(sp)
    f880:	90800515 	stw	r2,20(r18)
    f884:	d8c00117 	ldw	r3,4(sp)
    f888:	003fd106 	br	f7d0 <__d2b+0xc0>

0000f88c <__mdiff>:
    f88c:	defffb04 	addi	sp,sp,-20
    f890:	dc000015 	stw	r16,0(sp)
    f894:	2821883a 	mov	r16,r5
    f898:	dc800215 	stw	r18,8(sp)
    f89c:	300b883a 	mov	r5,r6
    f8a0:	2025883a 	mov	r18,r4
    f8a4:	8009883a 	mov	r4,r16
    f8a8:	dc400115 	stw	r17,4(sp)
    f8ac:	dfc00415 	stw	ra,16(sp)
    f8b0:	dcc00315 	stw	r19,12(sp)
    f8b4:	3023883a 	mov	r17,r6
    f8b8:	000f2300 	call	f230 <__mcmp>
    f8bc:	10004226 	beq	r2,zero,f9c8 <__mdiff+0x13c>
    f8c0:	10005016 	blt	r2,zero,fa04 <__mdiff+0x178>
    f8c4:	0027883a 	mov	r19,zero
    f8c8:	81400117 	ldw	r5,4(r16)
    f8cc:	9009883a 	mov	r4,r18
    f8d0:	000f6540 	call	f654 <_Balloc>
    f8d4:	1019883a 	mov	r12,r2
    f8d8:	82800417 	ldw	r10,16(r16)
    f8dc:	88800417 	ldw	r2,16(r17)
    f8e0:	81800504 	addi	r6,r16,20
    f8e4:	5287883a 	add	r3,r10,r10
    f8e8:	1085883a 	add	r2,r2,r2
    f8ec:	18c7883a 	add	r3,r3,r3
    f8f0:	1085883a 	add	r2,r2,r2
    f8f4:	8a000504 	addi	r8,r17,20
    f8f8:	64c00315 	stw	r19,12(r12)
    f8fc:	30db883a 	add	r13,r6,r3
    f900:	4097883a 	add	r11,r8,r2
    f904:	61c00504 	addi	r7,r12,20
    f908:	0013883a 	mov	r9,zero
    f90c:	31000017 	ldw	r4,0(r6)
    f910:	41400017 	ldw	r5,0(r8)
    f914:	42000104 	addi	r8,r8,4
    f918:	20bfffcc 	andi	r2,r4,65535
    f91c:	28ffffcc 	andi	r3,r5,65535
    f920:	10c5c83a 	sub	r2,r2,r3
    f924:	1245883a 	add	r2,r2,r9
    f928:	2008d43a 	srli	r4,r4,16
    f92c:	280ad43a 	srli	r5,r5,16
    f930:	1007d43a 	srai	r3,r2,16
    f934:	3880000d 	sth	r2,0(r7)
    f938:	2149c83a 	sub	r4,r4,r5
    f93c:	20c9883a 	add	r4,r4,r3
    f940:	3900008d 	sth	r4,2(r7)
    f944:	31800104 	addi	r6,r6,4
    f948:	39c00104 	addi	r7,r7,4
    f94c:	2013d43a 	srai	r9,r4,16
    f950:	42ffee36 	bltu	r8,r11,f90c <__mdiff+0x80>
    f954:	33400c2e 	bgeu	r6,r13,f988 <__mdiff+0xfc>
    f958:	30800017 	ldw	r2,0(r6)
    f95c:	31800104 	addi	r6,r6,4
    f960:	10ffffcc 	andi	r3,r2,65535
    f964:	1a47883a 	add	r3,r3,r9
    f968:	1004d43a 	srli	r2,r2,16
    f96c:	1809d43a 	srai	r4,r3,16
    f970:	38c0000d 	sth	r3,0(r7)
    f974:	1105883a 	add	r2,r2,r4
    f978:	3880008d 	sth	r2,2(r7)
    f97c:	1013d43a 	srai	r9,r2,16
    f980:	39c00104 	addi	r7,r7,4
    f984:	337ff436 	bltu	r6,r13,f958 <__mdiff+0xcc>
    f988:	38bfff17 	ldw	r2,-4(r7)
    f98c:	38ffff04 	addi	r3,r7,-4
    f990:	1000041e 	bne	r2,zero,f9a4 <__mdiff+0x118>
    f994:	18ffff04 	addi	r3,r3,-4
    f998:	18800017 	ldw	r2,0(r3)
    f99c:	52bfffc4 	addi	r10,r10,-1
    f9a0:	103ffc26 	beq	r2,zero,f994 <__mdiff+0x108>
    f9a4:	6005883a 	mov	r2,r12
    f9a8:	62800415 	stw	r10,16(r12)
    f9ac:	dfc00417 	ldw	ra,16(sp)
    f9b0:	dcc00317 	ldw	r19,12(sp)
    f9b4:	dc800217 	ldw	r18,8(sp)
    f9b8:	dc400117 	ldw	r17,4(sp)
    f9bc:	dc000017 	ldw	r16,0(sp)
    f9c0:	dec00504 	addi	sp,sp,20
    f9c4:	f800283a 	ret
    f9c8:	9009883a 	mov	r4,r18
    f9cc:	000b883a 	mov	r5,zero
    f9d0:	000f6540 	call	f654 <_Balloc>
    f9d4:	1019883a 	mov	r12,r2
    f9d8:	00800044 	movi	r2,1
    f9dc:	60800415 	stw	r2,16(r12)
    f9e0:	6005883a 	mov	r2,r12
    f9e4:	60000515 	stw	zero,20(r12)
    f9e8:	dfc00417 	ldw	ra,16(sp)
    f9ec:	dcc00317 	ldw	r19,12(sp)
    f9f0:	dc800217 	ldw	r18,8(sp)
    f9f4:	dc400117 	ldw	r17,4(sp)
    f9f8:	dc000017 	ldw	r16,0(sp)
    f9fc:	dec00504 	addi	sp,sp,20
    fa00:	f800283a 	ret
    fa04:	880d883a 	mov	r6,r17
    fa08:	04c00044 	movi	r19,1
    fa0c:	8023883a 	mov	r17,r16
    fa10:	3021883a 	mov	r16,r6
    fa14:	003fac06 	br	f8c8 <__mdiff+0x3c>

0000fa18 <__lshift>:
    fa18:	defff904 	addi	sp,sp,-28
    fa1c:	28800417 	ldw	r2,16(r5)
    fa20:	dc000015 	stw	r16,0(sp)
    fa24:	3021d17a 	srai	r16,r6,5
    fa28:	28c00217 	ldw	r3,8(r5)
    fa2c:	10800044 	addi	r2,r2,1
    fa30:	dc400115 	stw	r17,4(sp)
    fa34:	80a3883a 	add	r17,r16,r2
    fa38:	dd400515 	stw	r21,20(sp)
    fa3c:	dd000415 	stw	r20,16(sp)
    fa40:	dc800215 	stw	r18,8(sp)
    fa44:	dfc00615 	stw	ra,24(sp)
    fa48:	2825883a 	mov	r18,r5
    fa4c:	dcc00315 	stw	r19,12(sp)
    fa50:	3029883a 	mov	r20,r6
    fa54:	202b883a 	mov	r21,r4
    fa58:	29400117 	ldw	r5,4(r5)
    fa5c:	1c40030e 	bge	r3,r17,fa6c <__lshift+0x54>
    fa60:	18c7883a 	add	r3,r3,r3
    fa64:	29400044 	addi	r5,r5,1
    fa68:	1c7ffd16 	blt	r3,r17,fa60 <__lshift+0x48>
    fa6c:	a809883a 	mov	r4,r21
    fa70:	000f6540 	call	f654 <_Balloc>
    fa74:	1027883a 	mov	r19,r2
    fa78:	11400504 	addi	r5,r2,20
    fa7c:	0400090e 	bge	zero,r16,faa4 <__lshift+0x8c>
    fa80:	2805883a 	mov	r2,r5
    fa84:	0007883a 	mov	r3,zero
    fa88:	18c00044 	addi	r3,r3,1
    fa8c:	10000015 	stw	zero,0(r2)
    fa90:	10800104 	addi	r2,r2,4
    fa94:	80fffc1e 	bne	r16,r3,fa88 <__lshift+0x70>
    fa98:	8405883a 	add	r2,r16,r16
    fa9c:	1085883a 	add	r2,r2,r2
    faa0:	288b883a 	add	r5,r5,r2
    faa4:	90800417 	ldw	r2,16(r18)
    faa8:	91000504 	addi	r4,r18,20
    faac:	a18007cc 	andi	r6,r20,31
    fab0:	1085883a 	add	r2,r2,r2
    fab4:	1085883a 	add	r2,r2,r2
    fab8:	208f883a 	add	r7,r4,r2
    fabc:	30001e26 	beq	r6,zero,fb38 <__lshift+0x120>
    fac0:	00800804 	movi	r2,32
    fac4:	1191c83a 	sub	r8,r2,r6
    fac8:	0007883a 	mov	r3,zero
    facc:	20800017 	ldw	r2,0(r4)
    fad0:	1184983a 	sll	r2,r2,r6
    fad4:	1884b03a 	or	r2,r3,r2
    fad8:	28800015 	stw	r2,0(r5)
    fadc:	20c00017 	ldw	r3,0(r4)
    fae0:	21000104 	addi	r4,r4,4
    fae4:	29400104 	addi	r5,r5,4
    fae8:	1a06d83a 	srl	r3,r3,r8
    faec:	21fff736 	bltu	r4,r7,facc <__lshift+0xb4>
    faf0:	28c00015 	stw	r3,0(r5)
    faf4:	18000126 	beq	r3,zero,fafc <__lshift+0xe4>
    faf8:	8c400044 	addi	r17,r17,1
    fafc:	88bfffc4 	addi	r2,r17,-1
    fb00:	98800415 	stw	r2,16(r19)
    fb04:	a809883a 	mov	r4,r21
    fb08:	900b883a 	mov	r5,r18
    fb0c:	000f0d40 	call	f0d4 <_Bfree>
    fb10:	9805883a 	mov	r2,r19
    fb14:	dfc00617 	ldw	ra,24(sp)
    fb18:	dd400517 	ldw	r21,20(sp)
    fb1c:	dd000417 	ldw	r20,16(sp)
    fb20:	dcc00317 	ldw	r19,12(sp)
    fb24:	dc800217 	ldw	r18,8(sp)
    fb28:	dc400117 	ldw	r17,4(sp)
    fb2c:	dc000017 	ldw	r16,0(sp)
    fb30:	dec00704 	addi	sp,sp,28
    fb34:	f800283a 	ret
    fb38:	20800017 	ldw	r2,0(r4)
    fb3c:	21000104 	addi	r4,r4,4
    fb40:	28800015 	stw	r2,0(r5)
    fb44:	29400104 	addi	r5,r5,4
    fb48:	21ffec2e 	bgeu	r4,r7,fafc <__lshift+0xe4>
    fb4c:	20800017 	ldw	r2,0(r4)
    fb50:	21000104 	addi	r4,r4,4
    fb54:	28800015 	stw	r2,0(r5)
    fb58:	29400104 	addi	r5,r5,4
    fb5c:	21fff636 	bltu	r4,r7,fb38 <__lshift+0x120>
    fb60:	003fe606 	br	fafc <__lshift+0xe4>

0000fb64 <__multiply>:
    fb64:	defff904 	addi	sp,sp,-28
    fb68:	dcc00315 	stw	r19,12(sp)
    fb6c:	dc800215 	stw	r18,8(sp)
    fb70:	2cc00417 	ldw	r19,16(r5)
    fb74:	34800417 	ldw	r18,16(r6)
    fb78:	dd000415 	stw	r20,16(sp)
    fb7c:	dc400115 	stw	r17,4(sp)
    fb80:	dfc00615 	stw	ra,24(sp)
    fb84:	dd400515 	stw	r21,20(sp)
    fb88:	dc000015 	stw	r16,0(sp)
    fb8c:	2823883a 	mov	r17,r5
    fb90:	3029883a 	mov	r20,r6
    fb94:	9c80040e 	bge	r19,r18,fba8 <__multiply+0x44>
    fb98:	9027883a 	mov	r19,r18
    fb9c:	2c800417 	ldw	r18,16(r5)
    fba0:	2829883a 	mov	r20,r5
    fba4:	3023883a 	mov	r17,r6
    fba8:	88800217 	ldw	r2,8(r17)
    fbac:	9ca1883a 	add	r16,r19,r18
    fbb0:	89400117 	ldw	r5,4(r17)
    fbb4:	1400010e 	bge	r2,r16,fbbc <__multiply+0x58>
    fbb8:	29400044 	addi	r5,r5,1
    fbbc:	000f6540 	call	f654 <_Balloc>
    fbc0:	102b883a 	mov	r21,r2
    fbc4:	8405883a 	add	r2,r16,r16
    fbc8:	1085883a 	add	r2,r2,r2
    fbcc:	a9000504 	addi	r4,r21,20
    fbd0:	209d883a 	add	r14,r4,r2
    fbd4:	2380042e 	bgeu	r4,r14,fbe8 <__multiply+0x84>
    fbd8:	2005883a 	mov	r2,r4
    fbdc:	10000015 	stw	zero,0(r2)
    fbe0:	10800104 	addi	r2,r2,4
    fbe4:	13bffd36 	bltu	r2,r14,fbdc <__multiply+0x78>
    fbe8:	9485883a 	add	r2,r18,r18
    fbec:	9cc7883a 	add	r3,r19,r19
    fbf0:	a1800504 	addi	r6,r20,20
    fbf4:	1085883a 	add	r2,r2,r2
    fbf8:	8b400504 	addi	r13,r17,20
    fbfc:	18c7883a 	add	r3,r3,r3
    fc00:	309f883a 	add	r15,r6,r2
    fc04:	68d7883a 	add	r11,r13,r3
    fc08:	33c03b2e 	bgeu	r6,r15,fcf8 <__multiply+0x194>
    fc0c:	2019883a 	mov	r12,r4
    fc10:	30800017 	ldw	r2,0(r6)
    fc14:	127fffcc 	andi	r9,r2,65535
    fc18:	48001826 	beq	r9,zero,fc7c <__multiply+0x118>
    fc1c:	6811883a 	mov	r8,r13
    fc20:	600f883a 	mov	r7,r12
    fc24:	0015883a 	mov	r10,zero
    fc28:	40c00017 	ldw	r3,0(r8)
    fc2c:	39400017 	ldw	r5,0(r7)
    fc30:	42000104 	addi	r8,r8,4
    fc34:	193fffcc 	andi	r4,r3,65535
    fc38:	4909383a 	mul	r4,r9,r4
    fc3c:	1806d43a 	srli	r3,r3,16
    fc40:	28bfffcc 	andi	r2,r5,65535
    fc44:	5085883a 	add	r2,r10,r2
    fc48:	2089883a 	add	r4,r4,r2
    fc4c:	48c7383a 	mul	r3,r9,r3
    fc50:	280ad43a 	srli	r5,r5,16
    fc54:	2004d43a 	srli	r2,r4,16
    fc58:	3900000d 	sth	r4,0(r7)
    fc5c:	1947883a 	add	r3,r3,r5
    fc60:	10c5883a 	add	r2,r2,r3
    fc64:	3880008d 	sth	r2,2(r7)
    fc68:	1014d43a 	srli	r10,r2,16
    fc6c:	39c00104 	addi	r7,r7,4
    fc70:	42ffed36 	bltu	r8,r11,fc28 <__multiply+0xc4>
    fc74:	3a800015 	stw	r10,0(r7)
    fc78:	30800017 	ldw	r2,0(r6)
    fc7c:	1012d43a 	srli	r9,r2,16
    fc80:	48001926 	beq	r9,zero,fce8 <__multiply+0x184>
    fc84:	60800017 	ldw	r2,0(r12)
    fc88:	6811883a 	mov	r8,r13
    fc8c:	600f883a 	mov	r7,r12
    fc90:	0015883a 	mov	r10,zero
    fc94:	100b883a 	mov	r5,r2
    fc98:	41000017 	ldw	r4,0(r8)
    fc9c:	2806d43a 	srli	r3,r5,16
    fca0:	3880000d 	sth	r2,0(r7)
    fca4:	20bfffcc 	andi	r2,r4,65535
    fca8:	4885383a 	mul	r2,r9,r2
    fcac:	50c7883a 	add	r3,r10,r3
    fcb0:	2008d43a 	srli	r4,r4,16
    fcb4:	10c5883a 	add	r2,r2,r3
    fcb8:	3880008d 	sth	r2,2(r7)
    fcbc:	39c00104 	addi	r7,r7,4
    fcc0:	39400017 	ldw	r5,0(r7)
    fcc4:	4909383a 	mul	r4,r9,r4
    fcc8:	1004d43a 	srli	r2,r2,16
    fccc:	28ffffcc 	andi	r3,r5,65535
    fcd0:	20c9883a 	add	r4,r4,r3
    fcd4:	1105883a 	add	r2,r2,r4
    fcd8:	42000104 	addi	r8,r8,4
    fcdc:	1014d43a 	srli	r10,r2,16
    fce0:	42ffed36 	bltu	r8,r11,fc98 <__multiply+0x134>
    fce4:	38800015 	stw	r2,0(r7)
    fce8:	31800104 	addi	r6,r6,4
    fcec:	33c0022e 	bgeu	r6,r15,fcf8 <__multiply+0x194>
    fcf0:	63000104 	addi	r12,r12,4
    fcf4:	003fc606 	br	fc10 <__multiply+0xac>
    fcf8:	0400090e 	bge	zero,r16,fd20 <__multiply+0x1bc>
    fcfc:	70bfff17 	ldw	r2,-4(r14)
    fd00:	70ffff04 	addi	r3,r14,-4
    fd04:	10000326 	beq	r2,zero,fd14 <__multiply+0x1b0>
    fd08:	00000506 	br	fd20 <__multiply+0x1bc>
    fd0c:	18800017 	ldw	r2,0(r3)
    fd10:	1000031e 	bne	r2,zero,fd20 <__multiply+0x1bc>
    fd14:	843fffc4 	addi	r16,r16,-1
    fd18:	18ffff04 	addi	r3,r3,-4
    fd1c:	803ffb1e 	bne	r16,zero,fd0c <__multiply+0x1a8>
    fd20:	a805883a 	mov	r2,r21
    fd24:	ac000415 	stw	r16,16(r21)
    fd28:	dfc00617 	ldw	ra,24(sp)
    fd2c:	dd400517 	ldw	r21,20(sp)
    fd30:	dd000417 	ldw	r20,16(sp)
    fd34:	dcc00317 	ldw	r19,12(sp)
    fd38:	dc800217 	ldw	r18,8(sp)
    fd3c:	dc400117 	ldw	r17,4(sp)
    fd40:	dc000017 	ldw	r16,0(sp)
    fd44:	dec00704 	addi	sp,sp,28
    fd48:	f800283a 	ret

0000fd4c <__i2b>:
    fd4c:	defffd04 	addi	sp,sp,-12
    fd50:	dc000015 	stw	r16,0(sp)
    fd54:	04000044 	movi	r16,1
    fd58:	dc800115 	stw	r18,4(sp)
    fd5c:	2825883a 	mov	r18,r5
    fd60:	800b883a 	mov	r5,r16
    fd64:	dfc00215 	stw	ra,8(sp)
    fd68:	000f6540 	call	f654 <_Balloc>
    fd6c:	14000415 	stw	r16,16(r2)
    fd70:	14800515 	stw	r18,20(r2)
    fd74:	dfc00217 	ldw	ra,8(sp)
    fd78:	dc800117 	ldw	r18,4(sp)
    fd7c:	dc000017 	ldw	r16,0(sp)
    fd80:	dec00304 	addi	sp,sp,12
    fd84:	f800283a 	ret

0000fd88 <__multadd>:
    fd88:	defffa04 	addi	sp,sp,-24
    fd8c:	dc800215 	stw	r18,8(sp)
    fd90:	2c800417 	ldw	r18,16(r5)
    fd94:	dd000415 	stw	r20,16(sp)
    fd98:	dcc00315 	stw	r19,12(sp)
    fd9c:	dc000015 	stw	r16,0(sp)
    fda0:	dfc00515 	stw	ra,20(sp)
    fda4:	3821883a 	mov	r16,r7
    fda8:	dc400115 	stw	r17,4(sp)
    fdac:	2827883a 	mov	r19,r5
    fdb0:	2029883a 	mov	r20,r4
    fdb4:	2a000504 	addi	r8,r5,20
    fdb8:	000f883a 	mov	r7,zero
    fdbc:	40800017 	ldw	r2,0(r8)
    fdc0:	39c00044 	addi	r7,r7,1
    fdc4:	10ffffcc 	andi	r3,r2,65535
    fdc8:	1987383a 	mul	r3,r3,r6
    fdcc:	1004d43a 	srli	r2,r2,16
    fdd0:	1c07883a 	add	r3,r3,r16
    fdd4:	180ad43a 	srli	r5,r3,16
    fdd8:	1185383a 	mul	r2,r2,r6
    fddc:	18ffffcc 	andi	r3,r3,65535
    fde0:	1145883a 	add	r2,r2,r5
    fde4:	1008943a 	slli	r4,r2,16
    fde8:	1020d43a 	srli	r16,r2,16
    fdec:	20c9883a 	add	r4,r4,r3
    fdf0:	41000015 	stw	r4,0(r8)
    fdf4:	42000104 	addi	r8,r8,4
    fdf8:	3cbff016 	blt	r7,r18,fdbc <__multadd+0x34>
    fdfc:	80000826 	beq	r16,zero,fe20 <__multadd+0x98>
    fe00:	98800217 	ldw	r2,8(r19)
    fe04:	90800f0e 	bge	r18,r2,fe44 <__multadd+0xbc>
    fe08:	9485883a 	add	r2,r18,r18
    fe0c:	1085883a 	add	r2,r2,r2
    fe10:	14c5883a 	add	r2,r2,r19
    fe14:	90c00044 	addi	r3,r18,1
    fe18:	14000515 	stw	r16,20(r2)
    fe1c:	98c00415 	stw	r3,16(r19)
    fe20:	9805883a 	mov	r2,r19
    fe24:	dfc00517 	ldw	ra,20(sp)
    fe28:	dd000417 	ldw	r20,16(sp)
    fe2c:	dcc00317 	ldw	r19,12(sp)
    fe30:	dc800217 	ldw	r18,8(sp)
    fe34:	dc400117 	ldw	r17,4(sp)
    fe38:	dc000017 	ldw	r16,0(sp)
    fe3c:	dec00604 	addi	sp,sp,24
    fe40:	f800283a 	ret
    fe44:	99400117 	ldw	r5,4(r19)
    fe48:	a009883a 	mov	r4,r20
    fe4c:	29400044 	addi	r5,r5,1
    fe50:	000f6540 	call	f654 <_Balloc>
    fe54:	99800417 	ldw	r6,16(r19)
    fe58:	99400304 	addi	r5,r19,12
    fe5c:	11000304 	addi	r4,r2,12
    fe60:	318d883a 	add	r6,r6,r6
    fe64:	318d883a 	add	r6,r6,r6
    fe68:	31800204 	addi	r6,r6,8
    fe6c:	1023883a 	mov	r17,r2
    fe70:	00077880 	call	7788 <memcpy>
    fe74:	980b883a 	mov	r5,r19
    fe78:	a009883a 	mov	r4,r20
    fe7c:	000f0d40 	call	f0d4 <_Bfree>
    fe80:	8827883a 	mov	r19,r17
    fe84:	003fe006 	br	fe08 <__multadd+0x80>

0000fe88 <__pow5mult>:
    fe88:	defffa04 	addi	sp,sp,-24
    fe8c:	308000cc 	andi	r2,r6,3
    fe90:	dd000415 	stw	r20,16(sp)
    fe94:	dcc00315 	stw	r19,12(sp)
    fe98:	dc000015 	stw	r16,0(sp)
    fe9c:	dfc00515 	stw	ra,20(sp)
    fea0:	dc800215 	stw	r18,8(sp)
    fea4:	dc400115 	stw	r17,4(sp)
    fea8:	3021883a 	mov	r16,r6
    feac:	2027883a 	mov	r19,r4
    feb0:	2829883a 	mov	r20,r5
    feb4:	10002b1e 	bne	r2,zero,ff64 <__pow5mult+0xdc>
    feb8:	8025d0ba 	srai	r18,r16,2
    febc:	90001b26 	beq	r18,zero,ff2c <__pow5mult+0xa4>
    fec0:	9c001217 	ldw	r16,72(r19)
    fec4:	8000081e 	bne	r16,zero,fee8 <__pow5mult+0x60>
    fec8:	00003006 	br	ff8c <__pow5mult+0x104>
    fecc:	800b883a 	mov	r5,r16
    fed0:	800d883a 	mov	r6,r16
    fed4:	9809883a 	mov	r4,r19
    fed8:	90001426 	beq	r18,zero,ff2c <__pow5mult+0xa4>
    fedc:	80800017 	ldw	r2,0(r16)
    fee0:	10001b26 	beq	r2,zero,ff50 <__pow5mult+0xc8>
    fee4:	1021883a 	mov	r16,r2
    fee8:	9080004c 	andi	r2,r18,1
    feec:	1005003a 	cmpeq	r2,r2,zero
    fef0:	9025d07a 	srai	r18,r18,1
    fef4:	800d883a 	mov	r6,r16
    fef8:	9809883a 	mov	r4,r19
    fefc:	a00b883a 	mov	r5,r20
    ff00:	103ff21e 	bne	r2,zero,fecc <__pow5mult+0x44>
    ff04:	000fb640 	call	fb64 <__multiply>
    ff08:	a00b883a 	mov	r5,r20
    ff0c:	9809883a 	mov	r4,r19
    ff10:	1023883a 	mov	r17,r2
    ff14:	000f0d40 	call	f0d4 <_Bfree>
    ff18:	8829883a 	mov	r20,r17
    ff1c:	800b883a 	mov	r5,r16
    ff20:	800d883a 	mov	r6,r16
    ff24:	9809883a 	mov	r4,r19
    ff28:	903fec1e 	bne	r18,zero,fedc <__pow5mult+0x54>
    ff2c:	a005883a 	mov	r2,r20
    ff30:	dfc00517 	ldw	ra,20(sp)
    ff34:	dd000417 	ldw	r20,16(sp)
    ff38:	dcc00317 	ldw	r19,12(sp)
    ff3c:	dc800217 	ldw	r18,8(sp)
    ff40:	dc400117 	ldw	r17,4(sp)
    ff44:	dc000017 	ldw	r16,0(sp)
    ff48:	dec00604 	addi	sp,sp,24
    ff4c:	f800283a 	ret
    ff50:	000fb640 	call	fb64 <__multiply>
    ff54:	80800015 	stw	r2,0(r16)
    ff58:	1021883a 	mov	r16,r2
    ff5c:	10000015 	stw	zero,0(r2)
    ff60:	003fe106 	br	fee8 <__pow5mult+0x60>
    ff64:	1085883a 	add	r2,r2,r2
    ff68:	00c20034 	movhi	r3,2048
    ff6c:	18c1a504 	addi	r3,r3,1684
    ff70:	1085883a 	add	r2,r2,r2
    ff74:	10c5883a 	add	r2,r2,r3
    ff78:	11bfff17 	ldw	r6,-4(r2)
    ff7c:	000f883a 	mov	r7,zero
    ff80:	000fd880 	call	fd88 <__multadd>
    ff84:	1029883a 	mov	r20,r2
    ff88:	003fcb06 	br	feb8 <__pow5mult+0x30>
    ff8c:	9809883a 	mov	r4,r19
    ff90:	01409c44 	movi	r5,625
    ff94:	000fd4c0 	call	fd4c <__i2b>
    ff98:	98801215 	stw	r2,72(r19)
    ff9c:	1021883a 	mov	r16,r2
    ffa0:	10000015 	stw	zero,0(r2)
    ffa4:	003fd006 	br	fee8 <__pow5mult+0x60>

0000ffa8 <__s2b>:
    ffa8:	defff904 	addi	sp,sp,-28
    ffac:	dcc00315 	stw	r19,12(sp)
    ffb0:	dc800215 	stw	r18,8(sp)
    ffb4:	2827883a 	mov	r19,r5
    ffb8:	2025883a 	mov	r18,r4
    ffbc:	01400244 	movi	r5,9
    ffc0:	39000204 	addi	r4,r7,8
    ffc4:	dd000415 	stw	r20,16(sp)
    ffc8:	dc400115 	stw	r17,4(sp)
    ffcc:	dfc00615 	stw	ra,24(sp)
    ffd0:	dd400515 	stw	r21,20(sp)
    ffd4:	dc000015 	stw	r16,0(sp)
    ffd8:	3829883a 	mov	r20,r7
    ffdc:	3023883a 	mov	r17,r6
    ffe0:	00124340 	call	12434 <__divsi3>
    ffe4:	00c00044 	movi	r3,1
    ffe8:	1880350e 	bge	r3,r2,100c0 <__s2b+0x118>
    ffec:	000b883a 	mov	r5,zero
    fff0:	18c7883a 	add	r3,r3,r3
    fff4:	29400044 	addi	r5,r5,1
    fff8:	18bffd16 	blt	r3,r2,fff0 <__s2b+0x48>
    fffc:	9009883a 	mov	r4,r18
   10000:	000f6540 	call	f654 <_Balloc>
   10004:	1011883a 	mov	r8,r2
   10008:	d8800717 	ldw	r2,28(sp)
   1000c:	00c00044 	movi	r3,1
   10010:	01800244 	movi	r6,9
   10014:	40800515 	stw	r2,20(r8)
   10018:	40c00415 	stw	r3,16(r8)
   1001c:	3440260e 	bge	r6,r17,100b8 <__s2b+0x110>
   10020:	3021883a 	mov	r16,r6
   10024:	99ab883a 	add	r21,r19,r6
   10028:	9c05883a 	add	r2,r19,r16
   1002c:	11c00007 	ldb	r7,0(r2)
   10030:	400b883a 	mov	r5,r8
   10034:	9009883a 	mov	r4,r18
   10038:	39fff404 	addi	r7,r7,-48
   1003c:	01800284 	movi	r6,10
   10040:	000fd880 	call	fd88 <__multadd>
   10044:	84000044 	addi	r16,r16,1
   10048:	1011883a 	mov	r8,r2
   1004c:	8c3ff61e 	bne	r17,r16,10028 <__s2b+0x80>
   10050:	ac45883a 	add	r2,r21,r17
   10054:	117ffe04 	addi	r5,r2,-8
   10058:	880d883a 	mov	r6,r17
   1005c:	35000c0e 	bge	r6,r20,10090 <__s2b+0xe8>
   10060:	a185c83a 	sub	r2,r20,r6
   10064:	2821883a 	mov	r16,r5
   10068:	28a3883a 	add	r17,r5,r2
   1006c:	81c00007 	ldb	r7,0(r16)
   10070:	400b883a 	mov	r5,r8
   10074:	9009883a 	mov	r4,r18
   10078:	39fff404 	addi	r7,r7,-48
   1007c:	01800284 	movi	r6,10
   10080:	000fd880 	call	fd88 <__multadd>
   10084:	84000044 	addi	r16,r16,1
   10088:	1011883a 	mov	r8,r2
   1008c:	847ff71e 	bne	r16,r17,1006c <__s2b+0xc4>
   10090:	4005883a 	mov	r2,r8
   10094:	dfc00617 	ldw	ra,24(sp)
   10098:	dd400517 	ldw	r21,20(sp)
   1009c:	dd000417 	ldw	r20,16(sp)
   100a0:	dcc00317 	ldw	r19,12(sp)
   100a4:	dc800217 	ldw	r18,8(sp)
   100a8:	dc400117 	ldw	r17,4(sp)
   100ac:	dc000017 	ldw	r16,0(sp)
   100b0:	dec00704 	addi	sp,sp,28
   100b4:	f800283a 	ret
   100b8:	99400284 	addi	r5,r19,10
   100bc:	003fe706 	br	1005c <__s2b+0xb4>
   100c0:	000b883a 	mov	r5,zero
   100c4:	003fcd06 	br	fffc <__s2b+0x54>

000100c8 <putc>:
   100c8:	defffc04 	addi	sp,sp,-16
   100cc:	dc800215 	stw	r18,8(sp)
   100d0:	04820034 	movhi	r18,2048
   100d4:	948a0804 	addi	r18,r18,10272
   100d8:	90c00017 	ldw	r3,0(r18)
   100dc:	dc400115 	stw	r17,4(sp)
   100e0:	dc000015 	stw	r16,0(sp)
   100e4:	dfc00315 	stw	ra,12(sp)
   100e8:	2023883a 	mov	r17,r4
   100ec:	2821883a 	mov	r16,r5
   100f0:	18000226 	beq	r3,zero,100fc <putc+0x34>
   100f4:	18800e17 	ldw	r2,56(r3)
   100f8:	10001126 	beq	r2,zero,10140 <putc+0x78>
   100fc:	80800217 	ldw	r2,8(r16)
   10100:	10ffffc4 	addi	r3,r2,-1
   10104:	80c00215 	stw	r3,8(r16)
   10108:	18001316 	blt	r3,zero,10158 <putc+0x90>
   1010c:	80800017 	ldw	r2,0(r16)
   10110:	14400005 	stb	r17,0(r2)
   10114:	80c00017 	ldw	r3,0(r16)
   10118:	18800044 	addi	r2,r3,1
   1011c:	18c00003 	ldbu	r3,0(r3)
   10120:	80800015 	stw	r2,0(r16)
   10124:	1805883a 	mov	r2,r3
   10128:	dfc00317 	ldw	ra,12(sp)
   1012c:	dc800217 	ldw	r18,8(sp)
   10130:	dc400117 	ldw	r17,4(sp)
   10134:	dc000017 	ldw	r16,0(sp)
   10138:	dec00404 	addi	sp,sp,16
   1013c:	f800283a 	ret
   10140:	1809883a 	mov	r4,r3
   10144:	000cd3c0 	call	cd3c <__sinit>
   10148:	80800217 	ldw	r2,8(r16)
   1014c:	10ffffc4 	addi	r3,r2,-1
   10150:	80c00215 	stw	r3,8(r16)
   10154:	183fed0e 	bge	r3,zero,1010c <putc+0x44>
   10158:	80800617 	ldw	r2,24(r16)
   1015c:	18800f16 	blt	r3,r2,1019c <putc+0xd4>
   10160:	80800017 	ldw	r2,0(r16)
   10164:	14400005 	stb	r17,0(r2)
   10168:	81000017 	ldw	r4,0(r16)
   1016c:	00800284 	movi	r2,10
   10170:	20c00003 	ldbu	r3,0(r4)
   10174:	18801226 	beq	r3,r2,101c0 <putc+0xf8>
   10178:	20800044 	addi	r2,r4,1
   1017c:	80800015 	stw	r2,0(r16)
   10180:	1805883a 	mov	r2,r3
   10184:	dfc00317 	ldw	ra,12(sp)
   10188:	dc800217 	ldw	r18,8(sp)
   1018c:	dc400117 	ldw	r17,4(sp)
   10190:	dc000017 	ldw	r16,0(sp)
   10194:	dec00404 	addi	sp,sp,16
   10198:	f800283a 	ret
   1019c:	91000017 	ldw	r4,0(r18)
   101a0:	880b883a 	mov	r5,r17
   101a4:	800d883a 	mov	r6,r16
   101a8:	dfc00317 	ldw	ra,12(sp)
   101ac:	dc800217 	ldw	r18,8(sp)
   101b0:	dc400117 	ldw	r17,4(sp)
   101b4:	dc000017 	ldw	r16,0(sp)
   101b8:	dec00404 	addi	sp,sp,16
   101bc:	0010b901 	jmpi	10b90 <__swbuf_r>
   101c0:	91000017 	ldw	r4,0(r18)
   101c4:	180b883a 	mov	r5,r3
   101c8:	003ff606 	br	101a4 <putc+0xdc>

000101cc <_putc_r>:
   101cc:	defffc04 	addi	sp,sp,-16
   101d0:	dc400215 	stw	r17,8(sp)
   101d4:	dc000115 	stw	r16,4(sp)
   101d8:	dfc00315 	stw	ra,12(sp)
   101dc:	2021883a 	mov	r16,r4
   101e0:	2823883a 	mov	r17,r5
   101e4:	20000226 	beq	r4,zero,101f0 <_putc_r+0x24>
   101e8:	20800e17 	ldw	r2,56(r4)
   101ec:	10001026 	beq	r2,zero,10230 <_putc_r+0x64>
   101f0:	30800217 	ldw	r2,8(r6)
   101f4:	10ffffc4 	addi	r3,r2,-1
   101f8:	30c00215 	stw	r3,8(r6)
   101fc:	18001316 	blt	r3,zero,1024c <_putc_r+0x80>
   10200:	30800017 	ldw	r2,0(r6)
   10204:	14400005 	stb	r17,0(r2)
   10208:	30c00017 	ldw	r3,0(r6)
   1020c:	18800044 	addi	r2,r3,1
   10210:	18c00003 	ldbu	r3,0(r3)
   10214:	30800015 	stw	r2,0(r6)
   10218:	1805883a 	mov	r2,r3
   1021c:	dfc00317 	ldw	ra,12(sp)
   10220:	dc400217 	ldw	r17,8(sp)
   10224:	dc000117 	ldw	r16,4(sp)
   10228:	dec00404 	addi	sp,sp,16
   1022c:	f800283a 	ret
   10230:	d9800015 	stw	r6,0(sp)
   10234:	000cd3c0 	call	cd3c <__sinit>
   10238:	d9800017 	ldw	r6,0(sp)
   1023c:	30800217 	ldw	r2,8(r6)
   10240:	10ffffc4 	addi	r3,r2,-1
   10244:	30c00215 	stw	r3,8(r6)
   10248:	183fed0e 	bge	r3,zero,10200 <_putc_r+0x34>
   1024c:	30800617 	ldw	r2,24(r6)
   10250:	18800e16 	blt	r3,r2,1028c <_putc_r+0xc0>
   10254:	30800017 	ldw	r2,0(r6)
   10258:	14400005 	stb	r17,0(r2)
   1025c:	31000017 	ldw	r4,0(r6)
   10260:	00800284 	movi	r2,10
   10264:	20c00003 	ldbu	r3,0(r4)
   10268:	18800f26 	beq	r3,r2,102a8 <_putc_r+0xdc>
   1026c:	20800044 	addi	r2,r4,1
   10270:	30800015 	stw	r2,0(r6)
   10274:	1805883a 	mov	r2,r3
   10278:	dfc00317 	ldw	ra,12(sp)
   1027c:	dc400217 	ldw	r17,8(sp)
   10280:	dc000117 	ldw	r16,4(sp)
   10284:	dec00404 	addi	sp,sp,16
   10288:	f800283a 	ret
   1028c:	8009883a 	mov	r4,r16
   10290:	880b883a 	mov	r5,r17
   10294:	dfc00317 	ldw	ra,12(sp)
   10298:	dc400217 	ldw	r17,8(sp)
   1029c:	dc000117 	ldw	r16,4(sp)
   102a0:	dec00404 	addi	sp,sp,16
   102a4:	0010b901 	jmpi	10b90 <__swbuf_r>
   102a8:	8009883a 	mov	r4,r16
   102ac:	180b883a 	mov	r5,r3
   102b0:	003ff806 	br	10294 <_putc_r+0xc8>

000102b4 <_realloc_r>:
   102b4:	defff404 	addi	sp,sp,-48
   102b8:	dd800815 	stw	r22,32(sp)
   102bc:	dc800415 	stw	r18,16(sp)
   102c0:	dc400315 	stw	r17,12(sp)
   102c4:	dfc00b15 	stw	ra,44(sp)
   102c8:	df000a15 	stw	fp,40(sp)
   102cc:	ddc00915 	stw	r23,36(sp)
   102d0:	dd400715 	stw	r21,28(sp)
   102d4:	dd000615 	stw	r20,24(sp)
   102d8:	dcc00515 	stw	r19,20(sp)
   102dc:	dc000215 	stw	r16,8(sp)
   102e0:	2825883a 	mov	r18,r5
   102e4:	3023883a 	mov	r17,r6
   102e8:	202d883a 	mov	r22,r4
   102ec:	2800c926 	beq	r5,zero,10614 <_realloc_r+0x360>
   102f0:	0012d980 	call	12d98 <__malloc_lock>
   102f4:	943ffe04 	addi	r16,r18,-8
   102f8:	88c002c4 	addi	r3,r17,11
   102fc:	00800584 	movi	r2,22
   10300:	82000117 	ldw	r8,4(r16)
   10304:	10c01b2e 	bgeu	r2,r3,10374 <_realloc_r+0xc0>
   10308:	00bffe04 	movi	r2,-8
   1030c:	188e703a 	and	r7,r3,r2
   10310:	3839883a 	mov	fp,r7
   10314:	38001a16 	blt	r7,zero,10380 <_realloc_r+0xcc>
   10318:	e4401936 	bltu	fp,r17,10380 <_realloc_r+0xcc>
   1031c:	013fff04 	movi	r4,-4
   10320:	4126703a 	and	r19,r8,r4
   10324:	99c02616 	blt	r19,r7,103c0 <_realloc_r+0x10c>
   10328:	802b883a 	mov	r21,r16
   1032c:	9829883a 	mov	r20,r19
   10330:	84000204 	addi	r16,r16,8
   10334:	a80f883a 	mov	r7,r21
   10338:	a70dc83a 	sub	r6,r20,fp
   1033c:	008003c4 	movi	r2,15
   10340:	1180c136 	bltu	r2,r6,10648 <_realloc_r+0x394>
   10344:	38800117 	ldw	r2,4(r7)
   10348:	a549883a 	add	r4,r20,r21
   1034c:	1080004c 	andi	r2,r2,1
   10350:	a084b03a 	or	r2,r20,r2
   10354:	38800115 	stw	r2,4(r7)
   10358:	20c00117 	ldw	r3,4(r4)
   1035c:	18c00054 	ori	r3,r3,1
   10360:	20c00115 	stw	r3,4(r4)
   10364:	b009883a 	mov	r4,r22
   10368:	0012db80 	call	12db8 <__malloc_unlock>
   1036c:	8023883a 	mov	r17,r16
   10370:	00000606 	br	1038c <_realloc_r+0xd8>
   10374:	01c00404 	movi	r7,16
   10378:	3839883a 	mov	fp,r7
   1037c:	e47fe72e 	bgeu	fp,r17,1031c <_realloc_r+0x68>
   10380:	00800304 	movi	r2,12
   10384:	0023883a 	mov	r17,zero
   10388:	b0800015 	stw	r2,0(r22)
   1038c:	8805883a 	mov	r2,r17
   10390:	dfc00b17 	ldw	ra,44(sp)
   10394:	df000a17 	ldw	fp,40(sp)
   10398:	ddc00917 	ldw	r23,36(sp)
   1039c:	dd800817 	ldw	r22,32(sp)
   103a0:	dd400717 	ldw	r21,28(sp)
   103a4:	dd000617 	ldw	r20,24(sp)
   103a8:	dcc00517 	ldw	r19,20(sp)
   103ac:	dc800417 	ldw	r18,16(sp)
   103b0:	dc400317 	ldw	r17,12(sp)
   103b4:	dc000217 	ldw	r16,8(sp)
   103b8:	dec00c04 	addi	sp,sp,48
   103bc:	f800283a 	ret
   103c0:	00820034 	movhi	r2,2048
   103c4:	10839604 	addi	r2,r2,3672
   103c8:	12400217 	ldw	r9,8(r2)
   103cc:	84cd883a 	add	r6,r16,r19
   103d0:	802b883a 	mov	r21,r16
   103d4:	3240b926 	beq	r6,r9,106bc <_realloc_r+0x408>
   103d8:	31400117 	ldw	r5,4(r6)
   103dc:	00bfff84 	movi	r2,-2
   103e0:	2884703a 	and	r2,r5,r2
   103e4:	1185883a 	add	r2,r2,r6
   103e8:	10c00117 	ldw	r3,4(r2)
   103ec:	18c0004c 	andi	r3,r3,1
   103f0:	1807003a 	cmpeq	r3,r3,zero
   103f4:	1800a326 	beq	r3,zero,10684 <_realloc_r+0x3d0>
   103f8:	2908703a 	and	r4,r5,r4
   103fc:	9929883a 	add	r20,r19,r4
   10400:	a1c0a30e 	bge	r20,r7,10690 <_realloc_r+0x3dc>
   10404:	4080004c 	andi	r2,r8,1
   10408:	1000551e 	bne	r2,zero,10560 <_realloc_r+0x2ac>
   1040c:	80800017 	ldw	r2,0(r16)
   10410:	80afc83a 	sub	r23,r16,r2
   10414:	b8c00117 	ldw	r3,4(r23)
   10418:	00bfff04 	movi	r2,-4
   1041c:	1884703a 	and	r2,r3,r2
   10420:	30002e26 	beq	r6,zero,104dc <_realloc_r+0x228>
   10424:	3240b926 	beq	r6,r9,1070c <_realloc_r+0x458>
   10428:	98a9883a 	add	r20,r19,r2
   1042c:	2509883a 	add	r4,r4,r20
   10430:	d9000015 	stw	r4,0(sp)
   10434:	21c02a16 	blt	r4,r7,104e0 <_realloc_r+0x22c>
   10438:	30800317 	ldw	r2,12(r6)
   1043c:	30c00217 	ldw	r3,8(r6)
   10440:	01400904 	movi	r5,36
   10444:	99bfff04 	addi	r6,r19,-4
   10448:	18800315 	stw	r2,12(r3)
   1044c:	10c00215 	stw	r3,8(r2)
   10450:	b9000317 	ldw	r4,12(r23)
   10454:	b8800217 	ldw	r2,8(r23)
   10458:	b82b883a 	mov	r21,r23
   1045c:	bc000204 	addi	r16,r23,8
   10460:	20800215 	stw	r2,8(r4)
   10464:	11000315 	stw	r4,12(r2)
   10468:	2980e436 	bltu	r5,r6,107fc <_realloc_r+0x548>
   1046c:	008004c4 	movi	r2,19
   10470:	9009883a 	mov	r4,r18
   10474:	8011883a 	mov	r8,r16
   10478:	11800f2e 	bgeu	r2,r6,104b8 <_realloc_r+0x204>
   1047c:	90800017 	ldw	r2,0(r18)
   10480:	ba000404 	addi	r8,r23,16
   10484:	91000204 	addi	r4,r18,8
   10488:	b8800215 	stw	r2,8(r23)
   1048c:	90c00117 	ldw	r3,4(r18)
   10490:	008006c4 	movi	r2,27
   10494:	b8c00315 	stw	r3,12(r23)
   10498:	1180072e 	bgeu	r2,r6,104b8 <_realloc_r+0x204>
   1049c:	90c00217 	ldw	r3,8(r18)
   104a0:	ba000604 	addi	r8,r23,24
   104a4:	91000404 	addi	r4,r18,16
   104a8:	b8c00415 	stw	r3,16(r23)
   104ac:	90800317 	ldw	r2,12(r18)
   104b0:	b8800515 	stw	r2,20(r23)
   104b4:	3140e726 	beq	r6,r5,10854 <_realloc_r+0x5a0>
   104b8:	20800017 	ldw	r2,0(r4)
   104bc:	dd000017 	ldw	r20,0(sp)
   104c0:	b80f883a 	mov	r7,r23
   104c4:	40800015 	stw	r2,0(r8)
   104c8:	20c00117 	ldw	r3,4(r4)
   104cc:	40c00115 	stw	r3,4(r8)
   104d0:	20800217 	ldw	r2,8(r4)
   104d4:	40800215 	stw	r2,8(r8)
   104d8:	003f9706 	br	10338 <_realloc_r+0x84>
   104dc:	98a9883a 	add	r20,r19,r2
   104e0:	a1c01f16 	blt	r20,r7,10560 <_realloc_r+0x2ac>
   104e4:	b8c00317 	ldw	r3,12(r23)
   104e8:	b8800217 	ldw	r2,8(r23)
   104ec:	99bfff04 	addi	r6,r19,-4
   104f0:	01400904 	movi	r5,36
   104f4:	b82b883a 	mov	r21,r23
   104f8:	18800215 	stw	r2,8(r3)
   104fc:	10c00315 	stw	r3,12(r2)
   10500:	bc000204 	addi	r16,r23,8
   10504:	2980c336 	bltu	r5,r6,10814 <_realloc_r+0x560>
   10508:	008004c4 	movi	r2,19
   1050c:	9009883a 	mov	r4,r18
   10510:	8011883a 	mov	r8,r16
   10514:	11800f2e 	bgeu	r2,r6,10554 <_realloc_r+0x2a0>
   10518:	90800017 	ldw	r2,0(r18)
   1051c:	ba000404 	addi	r8,r23,16
   10520:	91000204 	addi	r4,r18,8
   10524:	b8800215 	stw	r2,8(r23)
   10528:	90c00117 	ldw	r3,4(r18)
   1052c:	008006c4 	movi	r2,27
   10530:	b8c00315 	stw	r3,12(r23)
   10534:	1180072e 	bgeu	r2,r6,10554 <_realloc_r+0x2a0>
   10538:	90c00217 	ldw	r3,8(r18)
   1053c:	ba000604 	addi	r8,r23,24
   10540:	91000404 	addi	r4,r18,16
   10544:	b8c00415 	stw	r3,16(r23)
   10548:	90800317 	ldw	r2,12(r18)
   1054c:	b8800515 	stw	r2,20(r23)
   10550:	3140c726 	beq	r6,r5,10870 <_realloc_r+0x5bc>
   10554:	20800017 	ldw	r2,0(r4)
   10558:	b80f883a 	mov	r7,r23
   1055c:	003fd906 	br	104c4 <_realloc_r+0x210>
   10560:	880b883a 	mov	r5,r17
   10564:	b009883a 	mov	r4,r22
   10568:	000e7d00 	call	e7d0 <_malloc_r>
   1056c:	1023883a 	mov	r17,r2
   10570:	10002526 	beq	r2,zero,10608 <_realloc_r+0x354>
   10574:	80800117 	ldw	r2,4(r16)
   10578:	00ffff84 	movi	r3,-2
   1057c:	893ffe04 	addi	r4,r17,-8
   10580:	10c4703a 	and	r2,r2,r3
   10584:	8085883a 	add	r2,r16,r2
   10588:	20809526 	beq	r4,r2,107e0 <_realloc_r+0x52c>
   1058c:	99bfff04 	addi	r6,r19,-4
   10590:	01c00904 	movi	r7,36
   10594:	39804536 	bltu	r7,r6,106ac <_realloc_r+0x3f8>
   10598:	008004c4 	movi	r2,19
   1059c:	9009883a 	mov	r4,r18
   105a0:	880b883a 	mov	r5,r17
   105a4:	11800f2e 	bgeu	r2,r6,105e4 <_realloc_r+0x330>
   105a8:	90800017 	ldw	r2,0(r18)
   105ac:	89400204 	addi	r5,r17,8
   105b0:	91000204 	addi	r4,r18,8
   105b4:	88800015 	stw	r2,0(r17)
   105b8:	90c00117 	ldw	r3,4(r18)
   105bc:	008006c4 	movi	r2,27
   105c0:	88c00115 	stw	r3,4(r17)
   105c4:	1180072e 	bgeu	r2,r6,105e4 <_realloc_r+0x330>
   105c8:	90c00217 	ldw	r3,8(r18)
   105cc:	89400404 	addi	r5,r17,16
   105d0:	91000404 	addi	r4,r18,16
   105d4:	88c00215 	stw	r3,8(r17)
   105d8:	90800317 	ldw	r2,12(r18)
   105dc:	88800315 	stw	r2,12(r17)
   105e0:	31c09126 	beq	r6,r7,10828 <_realloc_r+0x574>
   105e4:	20800017 	ldw	r2,0(r4)
   105e8:	28800015 	stw	r2,0(r5)
   105ec:	20c00117 	ldw	r3,4(r4)
   105f0:	28c00115 	stw	r3,4(r5)
   105f4:	20800217 	ldw	r2,8(r4)
   105f8:	28800215 	stw	r2,8(r5)
   105fc:	900b883a 	mov	r5,r18
   10600:	b009883a 	mov	r4,r22
   10604:	000d0c00 	call	d0c0 <_free_r>
   10608:	b009883a 	mov	r4,r22
   1060c:	0012db80 	call	12db8 <__malloc_unlock>
   10610:	003f5e06 	br	1038c <_realloc_r+0xd8>
   10614:	300b883a 	mov	r5,r6
   10618:	dfc00b17 	ldw	ra,44(sp)
   1061c:	df000a17 	ldw	fp,40(sp)
   10620:	ddc00917 	ldw	r23,36(sp)
   10624:	dd800817 	ldw	r22,32(sp)
   10628:	dd400717 	ldw	r21,28(sp)
   1062c:	dd000617 	ldw	r20,24(sp)
   10630:	dcc00517 	ldw	r19,20(sp)
   10634:	dc800417 	ldw	r18,16(sp)
   10638:	dc400317 	ldw	r17,12(sp)
   1063c:	dc000217 	ldw	r16,8(sp)
   10640:	dec00c04 	addi	sp,sp,48
   10644:	000e7d01 	jmpi	e7d0 <_malloc_r>
   10648:	38800117 	ldw	r2,4(r7)
   1064c:	e54b883a 	add	r5,fp,r21
   10650:	31000054 	ori	r4,r6,1
   10654:	1080004c 	andi	r2,r2,1
   10658:	1704b03a 	or	r2,r2,fp
   1065c:	38800115 	stw	r2,4(r7)
   10660:	29000115 	stw	r4,4(r5)
   10664:	2987883a 	add	r3,r5,r6
   10668:	18800117 	ldw	r2,4(r3)
   1066c:	29400204 	addi	r5,r5,8
   10670:	b009883a 	mov	r4,r22
   10674:	10800054 	ori	r2,r2,1
   10678:	18800115 	stw	r2,4(r3)
   1067c:	000d0c00 	call	d0c0 <_free_r>
   10680:	003f3806 	br	10364 <_realloc_r+0xb0>
   10684:	000d883a 	mov	r6,zero
   10688:	0009883a 	mov	r4,zero
   1068c:	003f5d06 	br	10404 <_realloc_r+0x150>
   10690:	30c00217 	ldw	r3,8(r6)
   10694:	30800317 	ldw	r2,12(r6)
   10698:	800f883a 	mov	r7,r16
   1069c:	84000204 	addi	r16,r16,8
   106a0:	10c00215 	stw	r3,8(r2)
   106a4:	18800315 	stw	r2,12(r3)
   106a8:	003f2306 	br	10338 <_realloc_r+0x84>
   106ac:	8809883a 	mov	r4,r17
   106b0:	900b883a 	mov	r5,r18
   106b4:	000eff40 	call	eff4 <memmove>
   106b8:	003fd006 	br	105fc <_realloc_r+0x348>
   106bc:	30800117 	ldw	r2,4(r6)
   106c0:	e0c00404 	addi	r3,fp,16
   106c4:	1108703a 	and	r4,r2,r4
   106c8:	9905883a 	add	r2,r19,r4
   106cc:	10ff4d16 	blt	r2,r3,10404 <_realloc_r+0x150>
   106d0:	1705c83a 	sub	r2,r2,fp
   106d4:	870b883a 	add	r5,r16,fp
   106d8:	10800054 	ori	r2,r2,1
   106dc:	28800115 	stw	r2,4(r5)
   106e0:	80c00117 	ldw	r3,4(r16)
   106e4:	00820034 	movhi	r2,2048
   106e8:	10839604 	addi	r2,r2,3672
   106ec:	b009883a 	mov	r4,r22
   106f0:	18c0004c 	andi	r3,r3,1
   106f4:	e0c6b03a 	or	r3,fp,r3
   106f8:	11400215 	stw	r5,8(r2)
   106fc:	80c00115 	stw	r3,4(r16)
   10700:	0012db80 	call	12db8 <__malloc_unlock>
   10704:	84400204 	addi	r17,r16,8
   10708:	003f2006 	br	1038c <_realloc_r+0xd8>
   1070c:	98a9883a 	add	r20,r19,r2
   10710:	2509883a 	add	r4,r4,r20
   10714:	e0800404 	addi	r2,fp,16
   10718:	d9000115 	stw	r4,4(sp)
   1071c:	20bf7016 	blt	r4,r2,104e0 <_realloc_r+0x22c>
   10720:	b8c00317 	ldw	r3,12(r23)
   10724:	b8800217 	ldw	r2,8(r23)
   10728:	99bfff04 	addi	r6,r19,-4
   1072c:	01400904 	movi	r5,36
   10730:	18800215 	stw	r2,8(r3)
   10734:	10c00315 	stw	r3,12(r2)
   10738:	bc400204 	addi	r17,r23,8
   1073c:	29804136 	bltu	r5,r6,10844 <_realloc_r+0x590>
   10740:	008004c4 	movi	r2,19
   10744:	9009883a 	mov	r4,r18
   10748:	880f883a 	mov	r7,r17
   1074c:	11800f2e 	bgeu	r2,r6,1078c <_realloc_r+0x4d8>
   10750:	90800017 	ldw	r2,0(r18)
   10754:	b9c00404 	addi	r7,r23,16
   10758:	91000204 	addi	r4,r18,8
   1075c:	b8800215 	stw	r2,8(r23)
   10760:	90c00117 	ldw	r3,4(r18)
   10764:	008006c4 	movi	r2,27
   10768:	b8c00315 	stw	r3,12(r23)
   1076c:	1180072e 	bgeu	r2,r6,1078c <_realloc_r+0x4d8>
   10770:	90c00217 	ldw	r3,8(r18)
   10774:	b9c00604 	addi	r7,r23,24
   10778:	91000404 	addi	r4,r18,16
   1077c:	b8c00415 	stw	r3,16(r23)
   10780:	90800317 	ldw	r2,12(r18)
   10784:	b8800515 	stw	r2,20(r23)
   10788:	31404026 	beq	r6,r5,1088c <_realloc_r+0x5d8>
   1078c:	20800017 	ldw	r2,0(r4)
   10790:	38800015 	stw	r2,0(r7)
   10794:	20c00117 	ldw	r3,4(r4)
   10798:	38c00115 	stw	r3,4(r7)
   1079c:	20800217 	ldw	r2,8(r4)
   107a0:	38800215 	stw	r2,8(r7)
   107a4:	d8c00117 	ldw	r3,4(sp)
   107a8:	bf0b883a 	add	r5,r23,fp
   107ac:	b009883a 	mov	r4,r22
   107b0:	1f05c83a 	sub	r2,r3,fp
   107b4:	10800054 	ori	r2,r2,1
   107b8:	28800115 	stw	r2,4(r5)
   107bc:	b8c00117 	ldw	r3,4(r23)
   107c0:	00820034 	movhi	r2,2048
   107c4:	10839604 	addi	r2,r2,3672
   107c8:	11400215 	stw	r5,8(r2)
   107cc:	18c0004c 	andi	r3,r3,1
   107d0:	e0c6b03a 	or	r3,fp,r3
   107d4:	b8c00115 	stw	r3,4(r23)
   107d8:	0012db80 	call	12db8 <__malloc_unlock>
   107dc:	003eeb06 	br	1038c <_realloc_r+0xd8>
   107e0:	20800117 	ldw	r2,4(r4)
   107e4:	00ffff04 	movi	r3,-4
   107e8:	800f883a 	mov	r7,r16
   107ec:	10c4703a 	and	r2,r2,r3
   107f0:	98a9883a 	add	r20,r19,r2
   107f4:	84000204 	addi	r16,r16,8
   107f8:	003ecf06 	br	10338 <_realloc_r+0x84>
   107fc:	900b883a 	mov	r5,r18
   10800:	8009883a 	mov	r4,r16
   10804:	000eff40 	call	eff4 <memmove>
   10808:	dd000017 	ldw	r20,0(sp)
   1080c:	b80f883a 	mov	r7,r23
   10810:	003ec906 	br	10338 <_realloc_r+0x84>
   10814:	900b883a 	mov	r5,r18
   10818:	8009883a 	mov	r4,r16
   1081c:	000eff40 	call	eff4 <memmove>
   10820:	b80f883a 	mov	r7,r23
   10824:	003ec406 	br	10338 <_realloc_r+0x84>
   10828:	90c00417 	ldw	r3,16(r18)
   1082c:	89400604 	addi	r5,r17,24
   10830:	91000604 	addi	r4,r18,24
   10834:	88c00415 	stw	r3,16(r17)
   10838:	90800517 	ldw	r2,20(r18)
   1083c:	88800515 	stw	r2,20(r17)
   10840:	003f6806 	br	105e4 <_realloc_r+0x330>
   10844:	900b883a 	mov	r5,r18
   10848:	8809883a 	mov	r4,r17
   1084c:	000eff40 	call	eff4 <memmove>
   10850:	003fd406 	br	107a4 <_realloc_r+0x4f0>
   10854:	90c00417 	ldw	r3,16(r18)
   10858:	91000604 	addi	r4,r18,24
   1085c:	ba000804 	addi	r8,r23,32
   10860:	b8c00615 	stw	r3,24(r23)
   10864:	90800517 	ldw	r2,20(r18)
   10868:	b8800715 	stw	r2,28(r23)
   1086c:	003f1206 	br	104b8 <_realloc_r+0x204>
   10870:	90c00417 	ldw	r3,16(r18)
   10874:	91000604 	addi	r4,r18,24
   10878:	ba000804 	addi	r8,r23,32
   1087c:	b8c00615 	stw	r3,24(r23)
   10880:	90800517 	ldw	r2,20(r18)
   10884:	b8800715 	stw	r2,28(r23)
   10888:	003f3206 	br	10554 <_realloc_r+0x2a0>
   1088c:	90c00417 	ldw	r3,16(r18)
   10890:	91000604 	addi	r4,r18,24
   10894:	b9c00804 	addi	r7,r23,32
   10898:	b8c00615 	stw	r3,24(r23)
   1089c:	90800517 	ldw	r2,20(r18)
   108a0:	b8800715 	stw	r2,28(r23)
   108a4:	003fb906 	br	1078c <_realloc_r+0x4d8>

000108a8 <__isinfd>:
   108a8:	200d883a 	mov	r6,r4
   108ac:	0109c83a 	sub	r4,zero,r4
   108b0:	2188b03a 	or	r4,r4,r6
   108b4:	2008d7fa 	srli	r4,r4,31
   108b8:	00a00034 	movhi	r2,32768
   108bc:	10bfffc4 	addi	r2,r2,-1
   108c0:	1144703a 	and	r2,r2,r5
   108c4:	2088b03a 	or	r4,r4,r2
   108c8:	009ffc34 	movhi	r2,32752
   108cc:	1105c83a 	sub	r2,r2,r4
   108d0:	0087c83a 	sub	r3,zero,r2
   108d4:	10c4b03a 	or	r2,r2,r3
   108d8:	1004d7fa 	srli	r2,r2,31
   108dc:	00c00044 	movi	r3,1
   108e0:	1885c83a 	sub	r2,r3,r2
   108e4:	f800283a 	ret

000108e8 <__isnand>:
   108e8:	200d883a 	mov	r6,r4
   108ec:	0109c83a 	sub	r4,zero,r4
   108f0:	2188b03a 	or	r4,r4,r6
   108f4:	2008d7fa 	srli	r4,r4,31
   108f8:	00a00034 	movhi	r2,32768
   108fc:	10bfffc4 	addi	r2,r2,-1
   10900:	1144703a 	and	r2,r2,r5
   10904:	2088b03a 	or	r4,r4,r2
   10908:	009ffc34 	movhi	r2,32752
   1090c:	1105c83a 	sub	r2,r2,r4
   10910:	1004d7fa 	srli	r2,r2,31
   10914:	f800283a 	ret

00010918 <_sbrk_r>:
   10918:	defffd04 	addi	sp,sp,-12
   1091c:	dc000015 	stw	r16,0(sp)
   10920:	04020034 	movhi	r16,2048
   10924:	840a4504 	addi	r16,r16,10516
   10928:	dc400115 	stw	r17,4(sp)
   1092c:	80000015 	stw	zero,0(r16)
   10930:	2023883a 	mov	r17,r4
   10934:	2809883a 	mov	r4,r5
   10938:	dfc00215 	stw	ra,8(sp)
   1093c:	0012fb80 	call	12fb8 <sbrk>
   10940:	1007883a 	mov	r3,r2
   10944:	00bfffc4 	movi	r2,-1
   10948:	18800626 	beq	r3,r2,10964 <_sbrk_r+0x4c>
   1094c:	1805883a 	mov	r2,r3
   10950:	dfc00217 	ldw	ra,8(sp)
   10954:	dc400117 	ldw	r17,4(sp)
   10958:	dc000017 	ldw	r16,0(sp)
   1095c:	dec00304 	addi	sp,sp,12
   10960:	f800283a 	ret
   10964:	80800017 	ldw	r2,0(r16)
   10968:	103ff826 	beq	r2,zero,1094c <_sbrk_r+0x34>
   1096c:	88800015 	stw	r2,0(r17)
   10970:	1805883a 	mov	r2,r3
   10974:	dfc00217 	ldw	ra,8(sp)
   10978:	dc400117 	ldw	r17,4(sp)
   1097c:	dc000017 	ldw	r16,0(sp)
   10980:	dec00304 	addi	sp,sp,12
   10984:	f800283a 	ret

00010988 <__sclose>:
   10988:	2940038f 	ldh	r5,14(r5)
   1098c:	0010e081 	jmpi	10e08 <_close_r>

00010990 <__sseek>:
   10990:	defffe04 	addi	sp,sp,-8
   10994:	dc000015 	stw	r16,0(sp)
   10998:	2821883a 	mov	r16,r5
   1099c:	2940038f 	ldh	r5,14(r5)
   109a0:	dfc00115 	stw	ra,4(sp)
   109a4:	00110800 	call	11080 <_lseek_r>
   109a8:	1007883a 	mov	r3,r2
   109ac:	00bfffc4 	movi	r2,-1
   109b0:	18800926 	beq	r3,r2,109d8 <__sseek+0x48>
   109b4:	8080030b 	ldhu	r2,12(r16)
   109b8:	80c01415 	stw	r3,80(r16)
   109bc:	10840014 	ori	r2,r2,4096
   109c0:	8080030d 	sth	r2,12(r16)
   109c4:	1805883a 	mov	r2,r3
   109c8:	dfc00117 	ldw	ra,4(sp)
   109cc:	dc000017 	ldw	r16,0(sp)
   109d0:	dec00204 	addi	sp,sp,8
   109d4:	f800283a 	ret
   109d8:	8080030b 	ldhu	r2,12(r16)
   109dc:	10bbffcc 	andi	r2,r2,61439
   109e0:	8080030d 	sth	r2,12(r16)
   109e4:	1805883a 	mov	r2,r3
   109e8:	dfc00117 	ldw	ra,4(sp)
   109ec:	dc000017 	ldw	r16,0(sp)
   109f0:	dec00204 	addi	sp,sp,8
   109f4:	f800283a 	ret

000109f8 <__swrite>:
   109f8:	2880030b 	ldhu	r2,12(r5)
   109fc:	defffb04 	addi	sp,sp,-20
   10a00:	dcc00315 	stw	r19,12(sp)
   10a04:	1080400c 	andi	r2,r2,256
   10a08:	dc800215 	stw	r18,8(sp)
   10a0c:	dc400115 	stw	r17,4(sp)
   10a10:	dc000015 	stw	r16,0(sp)
   10a14:	3027883a 	mov	r19,r6
   10a18:	3825883a 	mov	r18,r7
   10a1c:	dfc00415 	stw	ra,16(sp)
   10a20:	2821883a 	mov	r16,r5
   10a24:	000d883a 	mov	r6,zero
   10a28:	01c00084 	movi	r7,2
   10a2c:	2023883a 	mov	r17,r4
   10a30:	10000226 	beq	r2,zero,10a3c <__swrite+0x44>
   10a34:	2940038f 	ldh	r5,14(r5)
   10a38:	00110800 	call	11080 <_lseek_r>
   10a3c:	8080030b 	ldhu	r2,12(r16)
   10a40:	8140038f 	ldh	r5,14(r16)
   10a44:	8809883a 	mov	r4,r17
   10a48:	10bbffcc 	andi	r2,r2,61439
   10a4c:	980d883a 	mov	r6,r19
   10a50:	900f883a 	mov	r7,r18
   10a54:	8080030d 	sth	r2,12(r16)
   10a58:	dfc00417 	ldw	ra,16(sp)
   10a5c:	dcc00317 	ldw	r19,12(sp)
   10a60:	dc800217 	ldw	r18,8(sp)
   10a64:	dc400117 	ldw	r17,4(sp)
   10a68:	dc000017 	ldw	r16,0(sp)
   10a6c:	dec00504 	addi	sp,sp,20
   10a70:	0010cdc1 	jmpi	10cdc <_write_r>

00010a74 <__sread>:
   10a74:	defffe04 	addi	sp,sp,-8
   10a78:	dc000015 	stw	r16,0(sp)
   10a7c:	2821883a 	mov	r16,r5
   10a80:	2940038f 	ldh	r5,14(r5)
   10a84:	dfc00115 	stw	ra,4(sp)
   10a88:	00110f80 	call	110f8 <_read_r>
   10a8c:	1007883a 	mov	r3,r2
   10a90:	10000816 	blt	r2,zero,10ab4 <__sread+0x40>
   10a94:	80801417 	ldw	r2,80(r16)
   10a98:	10c5883a 	add	r2,r2,r3
   10a9c:	80801415 	stw	r2,80(r16)
   10aa0:	1805883a 	mov	r2,r3
   10aa4:	dfc00117 	ldw	ra,4(sp)
   10aa8:	dc000017 	ldw	r16,0(sp)
   10aac:	dec00204 	addi	sp,sp,8
   10ab0:	f800283a 	ret
   10ab4:	8080030b 	ldhu	r2,12(r16)
   10ab8:	10bbffcc 	andi	r2,r2,61439
   10abc:	8080030d 	sth	r2,12(r16)
   10ac0:	1805883a 	mov	r2,r3
   10ac4:	dfc00117 	ldw	ra,4(sp)
   10ac8:	dc000017 	ldw	r16,0(sp)
   10acc:	dec00204 	addi	sp,sp,8
   10ad0:	f800283a 	ret

00010ad4 <strcmp>:
   10ad4:	2144b03a 	or	r2,r4,r5
   10ad8:	108000cc 	andi	r2,r2,3
   10adc:	10001d1e 	bne	r2,zero,10b54 <strcmp+0x80>
   10ae0:	200f883a 	mov	r7,r4
   10ae4:	28800017 	ldw	r2,0(r5)
   10ae8:	21000017 	ldw	r4,0(r4)
   10aec:	280d883a 	mov	r6,r5
   10af0:	2080161e 	bne	r4,r2,10b4c <strcmp+0x78>
   10af4:	023fbff4 	movhi	r8,65279
   10af8:	423fbfc4 	addi	r8,r8,-257
   10afc:	2207883a 	add	r3,r4,r8
   10b00:	01602074 	movhi	r5,32897
   10b04:	29602004 	addi	r5,r5,-32640
   10b08:	1946703a 	and	r3,r3,r5
   10b0c:	0104303a 	nor	r2,zero,r4
   10b10:	10c4703a 	and	r2,r2,r3
   10b14:	10001c1e 	bne	r2,zero,10b88 <strcmp+0xb4>
   10b18:	4013883a 	mov	r9,r8
   10b1c:	2811883a 	mov	r8,r5
   10b20:	00000106 	br	10b28 <strcmp+0x54>
   10b24:	1800181e 	bne	r3,zero,10b88 <strcmp+0xb4>
   10b28:	39c00104 	addi	r7,r7,4
   10b2c:	39000017 	ldw	r4,0(r7)
   10b30:	31800104 	addi	r6,r6,4
   10b34:	31400017 	ldw	r5,0(r6)
   10b38:	2245883a 	add	r2,r4,r9
   10b3c:	1204703a 	and	r2,r2,r8
   10b40:	0106303a 	nor	r3,zero,r4
   10b44:	1886703a 	and	r3,r3,r2
   10b48:	217ff626 	beq	r4,r5,10b24 <strcmp+0x50>
   10b4c:	3809883a 	mov	r4,r7
   10b50:	300b883a 	mov	r5,r6
   10b54:	20c00007 	ldb	r3,0(r4)
   10b58:	1800051e 	bne	r3,zero,10b70 <strcmp+0x9c>
   10b5c:	00000606 	br	10b78 <strcmp+0xa4>
   10b60:	21000044 	addi	r4,r4,1
   10b64:	20c00007 	ldb	r3,0(r4)
   10b68:	29400044 	addi	r5,r5,1
   10b6c:	18000226 	beq	r3,zero,10b78 <strcmp+0xa4>
   10b70:	28800007 	ldb	r2,0(r5)
   10b74:	18bffa26 	beq	r3,r2,10b60 <strcmp+0x8c>
   10b78:	20c00003 	ldbu	r3,0(r4)
   10b7c:	28800003 	ldbu	r2,0(r5)
   10b80:	1885c83a 	sub	r2,r3,r2
   10b84:	f800283a 	ret
   10b88:	0005883a 	mov	r2,zero
   10b8c:	f800283a 	ret

00010b90 <__swbuf_r>:
   10b90:	defffc04 	addi	sp,sp,-16
   10b94:	dc400215 	stw	r17,8(sp)
   10b98:	dc000115 	stw	r16,4(sp)
   10b9c:	dfc00315 	stw	ra,12(sp)
   10ba0:	2023883a 	mov	r17,r4
   10ba4:	2821883a 	mov	r16,r5
   10ba8:	20000226 	beq	r4,zero,10bb4 <__swbuf_r+0x24>
   10bac:	20800e17 	ldw	r2,56(r4)
   10bb0:	10002f26 	beq	r2,zero,10c70 <__swbuf_r+0xe0>
   10bb4:	3080030b 	ldhu	r2,12(r6)
   10bb8:	30c00617 	ldw	r3,24(r6)
   10bbc:	1080020c 	andi	r2,r2,8
   10bc0:	30c00215 	stw	r3,8(r6)
   10bc4:	10002226 	beq	r2,zero,10c50 <__swbuf_r+0xc0>
   10bc8:	30c00417 	ldw	r3,16(r6)
   10bcc:	18002026 	beq	r3,zero,10c50 <__swbuf_r+0xc0>
   10bd0:	31000017 	ldw	r4,0(r6)
   10bd4:	30800517 	ldw	r2,20(r6)
   10bd8:	20c7c83a 	sub	r3,r4,r3
   10bdc:	18802f0e 	bge	r3,r2,10c9c <__swbuf_r+0x10c>
   10be0:	19400044 	addi	r5,r3,1
   10be4:	30800217 	ldw	r2,8(r6)
   10be8:	84003fcc 	andi	r16,r16,255
   10bec:	20c00044 	addi	r3,r4,1
   10bf0:	10bfffc4 	addi	r2,r2,-1
   10bf4:	30800215 	stw	r2,8(r6)
   10bf8:	24000005 	stb	r16,0(r4)
   10bfc:	30800517 	ldw	r2,20(r6)
   10c00:	30c00015 	stw	r3,0(r6)
   10c04:	11400c26 	beq	r2,r5,10c38 <__swbuf_r+0xa8>
   10c08:	3080030b 	ldhu	r2,12(r6)
   10c0c:	1080004c 	andi	r2,r2,1
   10c10:	1005003a 	cmpeq	r2,r2,zero
   10c14:	10000626 	beq	r2,zero,10c30 <__swbuf_r+0xa0>
   10c18:	8005883a 	mov	r2,r16
   10c1c:	dfc00317 	ldw	ra,12(sp)
   10c20:	dc400217 	ldw	r17,8(sp)
   10c24:	dc000117 	ldw	r16,4(sp)
   10c28:	dec00404 	addi	sp,sp,16
   10c2c:	f800283a 	ret
   10c30:	00800284 	movi	r2,10
   10c34:	80bff81e 	bne	r16,r2,10c18 <__swbuf_r+0x88>
   10c38:	8809883a 	mov	r4,r17
   10c3c:	300b883a 	mov	r5,r6
   10c40:	000caa40 	call	caa4 <_fflush_r>
   10c44:	103ff426 	beq	r2,zero,10c18 <__swbuf_r+0x88>
   10c48:	043fffc4 	movi	r16,-1
   10c4c:	003ff206 	br	10c18 <__swbuf_r+0x88>
   10c50:	300b883a 	mov	r5,r6
   10c54:	8809883a 	mov	r4,r17
   10c58:	d9800015 	stw	r6,0(sp)
   10c5c:	000b19c0 	call	b19c <__swsetup_r>
   10c60:	d9800017 	ldw	r6,0(sp)
   10c64:	1000061e 	bne	r2,zero,10c80 <__swbuf_r+0xf0>
   10c68:	30c00417 	ldw	r3,16(r6)
   10c6c:	003fd806 	br	10bd0 <__swbuf_r+0x40>
   10c70:	d9800015 	stw	r6,0(sp)
   10c74:	000cd3c0 	call	cd3c <__sinit>
   10c78:	d9800017 	ldw	r6,0(sp)
   10c7c:	003fcd06 	br	10bb4 <__swbuf_r+0x24>
   10c80:	3080030b 	ldhu	r2,12(r6)
   10c84:	00c00244 	movi	r3,9
   10c88:	043fffc4 	movi	r16,-1
   10c8c:	10801014 	ori	r2,r2,64
   10c90:	3080030d 	sth	r2,12(r6)
   10c94:	88c00015 	stw	r3,0(r17)
   10c98:	003fdf06 	br	10c18 <__swbuf_r+0x88>
   10c9c:	300b883a 	mov	r5,r6
   10ca0:	8809883a 	mov	r4,r17
   10ca4:	d9800015 	stw	r6,0(sp)
   10ca8:	000caa40 	call	caa4 <_fflush_r>
   10cac:	d9800017 	ldw	r6,0(sp)
   10cb0:	103fe51e 	bne	r2,zero,10c48 <__swbuf_r+0xb8>
   10cb4:	31000017 	ldw	r4,0(r6)
   10cb8:	01400044 	movi	r5,1
   10cbc:	003fc906 	br	10be4 <__swbuf_r+0x54>

00010cc0 <__swbuf>:
   10cc0:	01820034 	movhi	r6,2048
   10cc4:	318a0804 	addi	r6,r6,10272
   10cc8:	2007883a 	mov	r3,r4
   10ccc:	31000017 	ldw	r4,0(r6)
   10cd0:	280d883a 	mov	r6,r5
   10cd4:	180b883a 	mov	r5,r3
   10cd8:	0010b901 	jmpi	10b90 <__swbuf_r>

00010cdc <_write_r>:
   10cdc:	defffd04 	addi	sp,sp,-12
   10ce0:	dc000015 	stw	r16,0(sp)
   10ce4:	04020034 	movhi	r16,2048
   10ce8:	840a4504 	addi	r16,r16,10516
   10cec:	dc400115 	stw	r17,4(sp)
   10cf0:	80000015 	stw	zero,0(r16)
   10cf4:	2023883a 	mov	r17,r4
   10cf8:	2809883a 	mov	r4,r5
   10cfc:	300b883a 	mov	r5,r6
   10d00:	380d883a 	mov	r6,r7
   10d04:	dfc00215 	stw	ra,8(sp)
   10d08:	00130740 	call	13074 <write>
   10d0c:	1007883a 	mov	r3,r2
   10d10:	00bfffc4 	movi	r2,-1
   10d14:	18800626 	beq	r3,r2,10d30 <_write_r+0x54>
   10d18:	1805883a 	mov	r2,r3
   10d1c:	dfc00217 	ldw	ra,8(sp)
   10d20:	dc400117 	ldw	r17,4(sp)
   10d24:	dc000017 	ldw	r16,0(sp)
   10d28:	dec00304 	addi	sp,sp,12
   10d2c:	f800283a 	ret
   10d30:	80800017 	ldw	r2,0(r16)
   10d34:	103ff826 	beq	r2,zero,10d18 <_write_r+0x3c>
   10d38:	88800015 	stw	r2,0(r17)
   10d3c:	1805883a 	mov	r2,r3
   10d40:	dfc00217 	ldw	ra,8(sp)
   10d44:	dc400117 	ldw	r17,4(sp)
   10d48:	dc000017 	ldw	r16,0(sp)
   10d4c:	dec00304 	addi	sp,sp,12
   10d50:	f800283a 	ret

00010d54 <_calloc_r>:
   10d54:	298b383a 	mul	r5,r5,r6
   10d58:	defffe04 	addi	sp,sp,-8
   10d5c:	dc000015 	stw	r16,0(sp)
   10d60:	dfc00115 	stw	ra,4(sp)
   10d64:	000e7d00 	call	e7d0 <_malloc_r>
   10d68:	1021883a 	mov	r16,r2
   10d6c:	01c00904 	movi	r7,36
   10d70:	10000d26 	beq	r2,zero,10da8 <_calloc_r+0x54>
   10d74:	10ffff17 	ldw	r3,-4(r2)
   10d78:	1009883a 	mov	r4,r2
   10d7c:	00bfff04 	movi	r2,-4
   10d80:	1886703a 	and	r3,r3,r2
   10d84:	1887883a 	add	r3,r3,r2
   10d88:	180d883a 	mov	r6,r3
   10d8c:	000b883a 	mov	r5,zero
   10d90:	38c01736 	bltu	r7,r3,10df0 <_calloc_r+0x9c>
   10d94:	008004c4 	movi	r2,19
   10d98:	10c00836 	bltu	r2,r3,10dbc <_calloc_r+0x68>
   10d9c:	20000215 	stw	zero,8(r4)
   10da0:	20000015 	stw	zero,0(r4)
   10da4:	20000115 	stw	zero,4(r4)
   10da8:	8005883a 	mov	r2,r16
   10dac:	dfc00117 	ldw	ra,4(sp)
   10db0:	dc000017 	ldw	r16,0(sp)
   10db4:	dec00204 	addi	sp,sp,8
   10db8:	f800283a 	ret
   10dbc:	008006c4 	movi	r2,27
   10dc0:	80000015 	stw	zero,0(r16)
   10dc4:	80000115 	stw	zero,4(r16)
   10dc8:	81000204 	addi	r4,r16,8
   10dcc:	10fff32e 	bgeu	r2,r3,10d9c <_calloc_r+0x48>
   10dd0:	80000215 	stw	zero,8(r16)
   10dd4:	80000315 	stw	zero,12(r16)
   10dd8:	81000404 	addi	r4,r16,16
   10ddc:	19ffef1e 	bne	r3,r7,10d9c <_calloc_r+0x48>
   10de0:	81000604 	addi	r4,r16,24
   10de4:	80000415 	stw	zero,16(r16)
   10de8:	80000515 	stw	zero,20(r16)
   10dec:	003feb06 	br	10d9c <_calloc_r+0x48>
   10df0:	00078280 	call	7828 <memset>
   10df4:	8005883a 	mov	r2,r16
   10df8:	dfc00117 	ldw	ra,4(sp)
   10dfc:	dc000017 	ldw	r16,0(sp)
   10e00:	dec00204 	addi	sp,sp,8
   10e04:	f800283a 	ret

00010e08 <_close_r>:
   10e08:	defffd04 	addi	sp,sp,-12
   10e0c:	dc000015 	stw	r16,0(sp)
   10e10:	04020034 	movhi	r16,2048
   10e14:	840a4504 	addi	r16,r16,10516
   10e18:	dc400115 	stw	r17,4(sp)
   10e1c:	80000015 	stw	zero,0(r16)
   10e20:	2023883a 	mov	r17,r4
   10e24:	2809883a 	mov	r4,r5
   10e28:	dfc00215 	stw	ra,8(sp)
   10e2c:	00128000 	call	12800 <close>
   10e30:	1007883a 	mov	r3,r2
   10e34:	00bfffc4 	movi	r2,-1
   10e38:	18800626 	beq	r3,r2,10e54 <_close_r+0x4c>
   10e3c:	1805883a 	mov	r2,r3
   10e40:	dfc00217 	ldw	ra,8(sp)
   10e44:	dc400117 	ldw	r17,4(sp)
   10e48:	dc000017 	ldw	r16,0(sp)
   10e4c:	dec00304 	addi	sp,sp,12
   10e50:	f800283a 	ret
   10e54:	80800017 	ldw	r2,0(r16)
   10e58:	103ff826 	beq	r2,zero,10e3c <_close_r+0x34>
   10e5c:	88800015 	stw	r2,0(r17)
   10e60:	1805883a 	mov	r2,r3
   10e64:	dfc00217 	ldw	ra,8(sp)
   10e68:	dc400117 	ldw	r17,4(sp)
   10e6c:	dc000017 	ldw	r16,0(sp)
   10e70:	dec00304 	addi	sp,sp,12
   10e74:	f800283a 	ret

00010e78 <_fclose_r>:
   10e78:	defffc04 	addi	sp,sp,-16
   10e7c:	dc400115 	stw	r17,4(sp)
   10e80:	dc000015 	stw	r16,0(sp)
   10e84:	dfc00315 	stw	ra,12(sp)
   10e88:	dc800215 	stw	r18,8(sp)
   10e8c:	2821883a 	mov	r16,r5
   10e90:	2023883a 	mov	r17,r4
   10e94:	28002926 	beq	r5,zero,10f3c <_fclose_r+0xc4>
   10e98:	000cd2c0 	call	cd2c <__sfp_lock_acquire>
   10e9c:	88000226 	beq	r17,zero,10ea8 <_fclose_r+0x30>
   10ea0:	88800e17 	ldw	r2,56(r17)
   10ea4:	10002d26 	beq	r2,zero,10f5c <_fclose_r+0xe4>
   10ea8:	8080030f 	ldh	r2,12(r16)
   10eac:	10002226 	beq	r2,zero,10f38 <_fclose_r+0xc0>
   10eb0:	8809883a 	mov	r4,r17
   10eb4:	800b883a 	mov	r5,r16
   10eb8:	000caa40 	call	caa4 <_fflush_r>
   10ebc:	1025883a 	mov	r18,r2
   10ec0:	80800b17 	ldw	r2,44(r16)
   10ec4:	10000426 	beq	r2,zero,10ed8 <_fclose_r+0x60>
   10ec8:	81400717 	ldw	r5,28(r16)
   10ecc:	8809883a 	mov	r4,r17
   10ed0:	103ee83a 	callr	r2
   10ed4:	10002a16 	blt	r2,zero,10f80 <_fclose_r+0x108>
   10ed8:	8080030b 	ldhu	r2,12(r16)
   10edc:	1080200c 	andi	r2,r2,128
   10ee0:	1000231e 	bne	r2,zero,10f70 <_fclose_r+0xf8>
   10ee4:	81400c17 	ldw	r5,48(r16)
   10ee8:	28000526 	beq	r5,zero,10f00 <_fclose_r+0x88>
   10eec:	80801004 	addi	r2,r16,64
   10ef0:	28800226 	beq	r5,r2,10efc <_fclose_r+0x84>
   10ef4:	8809883a 	mov	r4,r17
   10ef8:	000d0c00 	call	d0c0 <_free_r>
   10efc:	80000c15 	stw	zero,48(r16)
   10f00:	81401117 	ldw	r5,68(r16)
   10f04:	28000326 	beq	r5,zero,10f14 <_fclose_r+0x9c>
   10f08:	8809883a 	mov	r4,r17
   10f0c:	000d0c00 	call	d0c0 <_free_r>
   10f10:	80001115 	stw	zero,68(r16)
   10f14:	8000030d 	sth	zero,12(r16)
   10f18:	000cd300 	call	cd30 <__sfp_lock_release>
   10f1c:	9005883a 	mov	r2,r18
   10f20:	dfc00317 	ldw	ra,12(sp)
   10f24:	dc800217 	ldw	r18,8(sp)
   10f28:	dc400117 	ldw	r17,4(sp)
   10f2c:	dc000017 	ldw	r16,0(sp)
   10f30:	dec00404 	addi	sp,sp,16
   10f34:	f800283a 	ret
   10f38:	000cd300 	call	cd30 <__sfp_lock_release>
   10f3c:	0025883a 	mov	r18,zero
   10f40:	9005883a 	mov	r2,r18
   10f44:	dfc00317 	ldw	ra,12(sp)
   10f48:	dc800217 	ldw	r18,8(sp)
   10f4c:	dc400117 	ldw	r17,4(sp)
   10f50:	dc000017 	ldw	r16,0(sp)
   10f54:	dec00404 	addi	sp,sp,16
   10f58:	f800283a 	ret
   10f5c:	8809883a 	mov	r4,r17
   10f60:	000cd3c0 	call	cd3c <__sinit>
   10f64:	8080030f 	ldh	r2,12(r16)
   10f68:	103fd11e 	bne	r2,zero,10eb0 <_fclose_r+0x38>
   10f6c:	003ff206 	br	10f38 <_fclose_r+0xc0>
   10f70:	81400417 	ldw	r5,16(r16)
   10f74:	8809883a 	mov	r4,r17
   10f78:	000d0c00 	call	d0c0 <_free_r>
   10f7c:	003fd906 	br	10ee4 <_fclose_r+0x6c>
   10f80:	04bfffc4 	movi	r18,-1
   10f84:	003fd406 	br	10ed8 <_fclose_r+0x60>

00010f88 <fclose>:
   10f88:	00820034 	movhi	r2,2048
   10f8c:	108a0804 	addi	r2,r2,10272
   10f90:	200b883a 	mov	r5,r4
   10f94:	11000017 	ldw	r4,0(r2)
   10f98:	0010e781 	jmpi	10e78 <_fclose_r>

00010f9c <_fstat_r>:
   10f9c:	defffd04 	addi	sp,sp,-12
   10fa0:	dc000015 	stw	r16,0(sp)
   10fa4:	04020034 	movhi	r16,2048
   10fa8:	840a4504 	addi	r16,r16,10516
   10fac:	dc400115 	stw	r17,4(sp)
   10fb0:	80000015 	stw	zero,0(r16)
   10fb4:	2023883a 	mov	r17,r4
   10fb8:	2809883a 	mov	r4,r5
   10fbc:	300b883a 	mov	r5,r6
   10fc0:	dfc00215 	stw	ra,8(sp)
   10fc4:	00129880 	call	12988 <fstat>
   10fc8:	1007883a 	mov	r3,r2
   10fcc:	00bfffc4 	movi	r2,-1
   10fd0:	18800626 	beq	r3,r2,10fec <_fstat_r+0x50>
   10fd4:	1805883a 	mov	r2,r3
   10fd8:	dfc00217 	ldw	ra,8(sp)
   10fdc:	dc400117 	ldw	r17,4(sp)
   10fe0:	dc000017 	ldw	r16,0(sp)
   10fe4:	dec00304 	addi	sp,sp,12
   10fe8:	f800283a 	ret
   10fec:	80800017 	ldw	r2,0(r16)
   10ff0:	103ff826 	beq	r2,zero,10fd4 <_fstat_r+0x38>
   10ff4:	88800015 	stw	r2,0(r17)
   10ff8:	1805883a 	mov	r2,r3
   10ffc:	dfc00217 	ldw	ra,8(sp)
   11000:	dc400117 	ldw	r17,4(sp)
   11004:	dc000017 	ldw	r16,0(sp)
   11008:	dec00304 	addi	sp,sp,12
   1100c:	f800283a 	ret

00011010 <_isatty_r>:
   11010:	defffd04 	addi	sp,sp,-12
   11014:	dc000015 	stw	r16,0(sp)
   11018:	04020034 	movhi	r16,2048
   1101c:	840a4504 	addi	r16,r16,10516
   11020:	dc400115 	stw	r17,4(sp)
   11024:	80000015 	stw	zero,0(r16)
   11028:	2023883a 	mov	r17,r4
   1102c:	2809883a 	mov	r4,r5
   11030:	dfc00215 	stw	ra,8(sp)
   11034:	0012abc0 	call	12abc <isatty>
   11038:	1007883a 	mov	r3,r2
   1103c:	00bfffc4 	movi	r2,-1
   11040:	18800626 	beq	r3,r2,1105c <_isatty_r+0x4c>
   11044:	1805883a 	mov	r2,r3
   11048:	dfc00217 	ldw	ra,8(sp)
   1104c:	dc400117 	ldw	r17,4(sp)
   11050:	dc000017 	ldw	r16,0(sp)
   11054:	dec00304 	addi	sp,sp,12
   11058:	f800283a 	ret
   1105c:	80800017 	ldw	r2,0(r16)
   11060:	103ff826 	beq	r2,zero,11044 <_isatty_r+0x34>
   11064:	88800015 	stw	r2,0(r17)
   11068:	1805883a 	mov	r2,r3
   1106c:	dfc00217 	ldw	ra,8(sp)
   11070:	dc400117 	ldw	r17,4(sp)
   11074:	dc000017 	ldw	r16,0(sp)
   11078:	dec00304 	addi	sp,sp,12
   1107c:	f800283a 	ret

00011080 <_lseek_r>:
   11080:	defffd04 	addi	sp,sp,-12
   11084:	dc000015 	stw	r16,0(sp)
   11088:	04020034 	movhi	r16,2048
   1108c:	840a4504 	addi	r16,r16,10516
   11090:	dc400115 	stw	r17,4(sp)
   11094:	80000015 	stw	zero,0(r16)
   11098:	2023883a 	mov	r17,r4
   1109c:	2809883a 	mov	r4,r5
   110a0:	300b883a 	mov	r5,r6
   110a4:	380d883a 	mov	r6,r7
   110a8:	dfc00215 	stw	ra,8(sp)
   110ac:	0012bdc0 	call	12bdc <lseek>
   110b0:	1007883a 	mov	r3,r2
   110b4:	00bfffc4 	movi	r2,-1
   110b8:	18800626 	beq	r3,r2,110d4 <_lseek_r+0x54>
   110bc:	1805883a 	mov	r2,r3
   110c0:	dfc00217 	ldw	ra,8(sp)
   110c4:	dc400117 	ldw	r17,4(sp)
   110c8:	dc000017 	ldw	r16,0(sp)
   110cc:	dec00304 	addi	sp,sp,12
   110d0:	f800283a 	ret
   110d4:	80800017 	ldw	r2,0(r16)
   110d8:	103ff826 	beq	r2,zero,110bc <_lseek_r+0x3c>
   110dc:	88800015 	stw	r2,0(r17)
   110e0:	1805883a 	mov	r2,r3
   110e4:	dfc00217 	ldw	ra,8(sp)
   110e8:	dc400117 	ldw	r17,4(sp)
   110ec:	dc000017 	ldw	r16,0(sp)
   110f0:	dec00304 	addi	sp,sp,12
   110f4:	f800283a 	ret

000110f8 <_read_r>:
   110f8:	defffd04 	addi	sp,sp,-12
   110fc:	dc000015 	stw	r16,0(sp)
   11100:	04020034 	movhi	r16,2048
   11104:	840a4504 	addi	r16,r16,10516
   11108:	dc400115 	stw	r17,4(sp)
   1110c:	80000015 	stw	zero,0(r16)
   11110:	2023883a 	mov	r17,r4
   11114:	2809883a 	mov	r4,r5
   11118:	300b883a 	mov	r5,r6
   1111c:	380d883a 	mov	r6,r7
   11120:	dfc00215 	stw	ra,8(sp)
   11124:	0012dd80 	call	12dd8 <read>
   11128:	1007883a 	mov	r3,r2
   1112c:	00bfffc4 	movi	r2,-1
   11130:	18800626 	beq	r3,r2,1114c <_read_r+0x54>
   11134:	1805883a 	mov	r2,r3
   11138:	dfc00217 	ldw	ra,8(sp)
   1113c:	dc400117 	ldw	r17,4(sp)
   11140:	dc000017 	ldw	r16,0(sp)
   11144:	dec00304 	addi	sp,sp,12
   11148:	f800283a 	ret
   1114c:	80800017 	ldw	r2,0(r16)
   11150:	103ff826 	beq	r2,zero,11134 <_read_r+0x3c>
   11154:	88800015 	stw	r2,0(r17)
   11158:	1805883a 	mov	r2,r3
   1115c:	dfc00217 	ldw	ra,8(sp)
   11160:	dc400117 	ldw	r17,4(sp)
   11164:	dc000017 	ldw	r16,0(sp)
   11168:	dec00304 	addi	sp,sp,12
   1116c:	f800283a 	ret

00011170 <__fixunsdfsi>:
   11170:	defffb04 	addi	sp,sp,-20
   11174:	dc400115 	stw	r17,4(sp)
   11178:	dc000015 	stw	r16,0(sp)
   1117c:	04507834 	movhi	r17,16864
   11180:	0021883a 	mov	r16,zero
   11184:	800d883a 	mov	r6,r16
   11188:	880f883a 	mov	r7,r17
   1118c:	dcc00315 	stw	r19,12(sp)
   11190:	dc800215 	stw	r18,8(sp)
   11194:	2827883a 	mov	r19,r5
   11198:	2025883a 	mov	r18,r4
   1119c:	dfc00415 	stw	ra,16(sp)
   111a0:	00120180 	call	12018 <__gedf2>
   111a4:	000d883a 	mov	r6,zero
   111a8:	880f883a 	mov	r7,r17
   111ac:	980b883a 	mov	r5,r19
   111b0:	9009883a 	mov	r4,r18
   111b4:	10000d16 	blt	r2,zero,111ec <__fixunsdfsi+0x7c>
   111b8:	00067800 	call	6780 <__subdf3>
   111bc:	180b883a 	mov	r5,r3
   111c0:	1009883a 	mov	r4,r2
   111c4:	00070100 	call	7010 <__fixdfsi>
   111c8:	00e00034 	movhi	r3,32768
   111cc:	10c5883a 	add	r2,r2,r3
   111d0:	dfc00417 	ldw	ra,16(sp)
   111d4:	dcc00317 	ldw	r19,12(sp)
   111d8:	dc800217 	ldw	r18,8(sp)
   111dc:	dc400117 	ldw	r17,4(sp)
   111e0:	dc000017 	ldw	r16,0(sp)
   111e4:	dec00504 	addi	sp,sp,20
   111e8:	f800283a 	ret
   111ec:	980b883a 	mov	r5,r19
   111f0:	9009883a 	mov	r4,r18
   111f4:	00070100 	call	7010 <__fixdfsi>
   111f8:	dfc00417 	ldw	ra,16(sp)
   111fc:	dcc00317 	ldw	r19,12(sp)
   11200:	dc800217 	ldw	r18,8(sp)
   11204:	dc400117 	ldw	r17,4(sp)
   11208:	dc000017 	ldw	r16,0(sp)
   1120c:	dec00504 	addi	sp,sp,20
   11210:	f800283a 	ret

00011214 <__udivdi3>:
   11214:	defff004 	addi	sp,sp,-64
   11218:	2005883a 	mov	r2,r4
   1121c:	3011883a 	mov	r8,r6
   11220:	df000e15 	stw	fp,56(sp)
   11224:	dd000a15 	stw	r20,40(sp)
   11228:	dc000615 	stw	r16,24(sp)
   1122c:	dfc00f15 	stw	ra,60(sp)
   11230:	ddc00d15 	stw	r23,52(sp)
   11234:	dd800c15 	stw	r22,48(sp)
   11238:	dd400b15 	stw	r21,44(sp)
   1123c:	dcc00915 	stw	r19,36(sp)
   11240:	dc800815 	stw	r18,32(sp)
   11244:	dc400715 	stw	r17,28(sp)
   11248:	4021883a 	mov	r16,r8
   1124c:	1039883a 	mov	fp,r2
   11250:	2829883a 	mov	r20,r5
   11254:	38003b1e 	bne	r7,zero,11344 <__udivdi3+0x130>
   11258:	2a005c36 	bltu	r5,r8,113cc <__udivdi3+0x1b8>
   1125c:	4000a626 	beq	r8,zero,114f8 <__udivdi3+0x2e4>
   11260:	00bfffd4 	movui	r2,65535
   11264:	14009e36 	bltu	r2,r16,114e0 <__udivdi3+0x2cc>
   11268:	00803fc4 	movi	r2,255
   1126c:	14013d36 	bltu	r2,r16,11764 <__udivdi3+0x550>
   11270:	000b883a 	mov	r5,zero
   11274:	0005883a 	mov	r2,zero
   11278:	8084d83a 	srl	r2,r16,r2
   1127c:	01020034 	movhi	r4,2048
   11280:	2100d404 	addi	r4,r4,848
   11284:	01800804 	movi	r6,32
   11288:	1105883a 	add	r2,r2,r4
   1128c:	10c00003 	ldbu	r3,0(r2)
   11290:	28c7883a 	add	r3,r5,r3
   11294:	30edc83a 	sub	r22,r6,r3
   11298:	b000ee1e 	bne	r22,zero,11654 <__udivdi3+0x440>
   1129c:	802ad43a 	srli	r21,r16,16
   112a0:	00800044 	movi	r2,1
   112a4:	a423c83a 	sub	r17,r20,r16
   112a8:	85ffffcc 	andi	r23,r16,65535
   112ac:	d8800315 	stw	r2,12(sp)
   112b0:	8809883a 	mov	r4,r17
   112b4:	a80b883a 	mov	r5,r21
   112b8:	00124f40 	call	124f4 <__udivsi3>
   112bc:	8809883a 	mov	r4,r17
   112c0:	a80b883a 	mov	r5,r21
   112c4:	102d883a 	mov	r22,r2
   112c8:	00124fc0 	call	124fc <__umodsi3>
   112cc:	1004943a 	slli	r2,r2,16
   112d0:	e006d43a 	srli	r3,fp,16
   112d4:	bda3383a 	mul	r17,r23,r22
   112d8:	10c4b03a 	or	r2,r2,r3
   112dc:	1440042e 	bgeu	r2,r17,112f0 <__udivdi3+0xdc>
   112e0:	1405883a 	add	r2,r2,r16
   112e4:	b5bfffc4 	addi	r22,r22,-1
   112e8:	14000136 	bltu	r2,r16,112f0 <__udivdi3+0xdc>
   112ec:	14413d36 	bltu	r2,r17,117e4 <__udivdi3+0x5d0>
   112f0:	1463c83a 	sub	r17,r2,r17
   112f4:	8809883a 	mov	r4,r17
   112f8:	a80b883a 	mov	r5,r21
   112fc:	00124f40 	call	124f4 <__udivsi3>
   11300:	8809883a 	mov	r4,r17
   11304:	a80b883a 	mov	r5,r21
   11308:	1029883a 	mov	r20,r2
   1130c:	00124fc0 	call	124fc <__umodsi3>
   11310:	1004943a 	slli	r2,r2,16
   11314:	bd09383a 	mul	r4,r23,r20
   11318:	e0ffffcc 	andi	r3,fp,65535
   1131c:	10c4b03a 	or	r2,r2,r3
   11320:	1100042e 	bgeu	r2,r4,11334 <__udivdi3+0x120>
   11324:	8085883a 	add	r2,r16,r2
   11328:	a53fffc4 	addi	r20,r20,-1
   1132c:	14000136 	bltu	r2,r16,11334 <__udivdi3+0x120>
   11330:	11012036 	bltu	r2,r4,117b4 <__udivdi3+0x5a0>
   11334:	b004943a 	slli	r2,r22,16
   11338:	d9000317 	ldw	r4,12(sp)
   1133c:	a084b03a 	or	r2,r20,r2
   11340:	00001506 	br	11398 <__udivdi3+0x184>
   11344:	380d883a 	mov	r6,r7
   11348:	29c06236 	bltu	r5,r7,114d4 <__udivdi3+0x2c0>
   1134c:	00bfffd4 	movui	r2,65535
   11350:	11c05a36 	bltu	r2,r7,114bc <__udivdi3+0x2a8>
   11354:	00803fc4 	movi	r2,255
   11358:	11c0fc36 	bltu	r2,r7,1174c <__udivdi3+0x538>
   1135c:	000b883a 	mov	r5,zero
   11360:	0005883a 	mov	r2,zero
   11364:	3084d83a 	srl	r2,r6,r2
   11368:	01020034 	movhi	r4,2048
   1136c:	2100d404 	addi	r4,r4,848
   11370:	01c00804 	movi	r7,32
   11374:	1105883a 	add	r2,r2,r4
   11378:	10c00003 	ldbu	r3,0(r2)
   1137c:	28c7883a 	add	r3,r5,r3
   11380:	38efc83a 	sub	r23,r7,r3
   11384:	b800691e 	bne	r23,zero,1152c <__udivdi3+0x318>
   11388:	35000136 	bltu	r6,r20,11390 <__udivdi3+0x17c>
   1138c:	e4005136 	bltu	fp,r16,114d4 <__udivdi3+0x2c0>
   11390:	00800044 	movi	r2,1
   11394:	0009883a 	mov	r4,zero
   11398:	2007883a 	mov	r3,r4
   1139c:	dfc00f17 	ldw	ra,60(sp)
   113a0:	df000e17 	ldw	fp,56(sp)
   113a4:	ddc00d17 	ldw	r23,52(sp)
   113a8:	dd800c17 	ldw	r22,48(sp)
   113ac:	dd400b17 	ldw	r21,44(sp)
   113b0:	dd000a17 	ldw	r20,40(sp)
   113b4:	dcc00917 	ldw	r19,36(sp)
   113b8:	dc800817 	ldw	r18,32(sp)
   113bc:	dc400717 	ldw	r17,28(sp)
   113c0:	dc000617 	ldw	r16,24(sp)
   113c4:	dec01004 	addi	sp,sp,64
   113c8:	f800283a 	ret
   113cc:	00bfffd4 	movui	r2,65535
   113d0:	12005036 	bltu	r2,r8,11514 <__udivdi3+0x300>
   113d4:	00803fc4 	movi	r2,255
   113d8:	1200e836 	bltu	r2,r8,1177c <__udivdi3+0x568>
   113dc:	000b883a 	mov	r5,zero
   113e0:	0005883a 	mov	r2,zero
   113e4:	8084d83a 	srl	r2,r16,r2
   113e8:	01020034 	movhi	r4,2048
   113ec:	2100d404 	addi	r4,r4,848
   113f0:	01800804 	movi	r6,32
   113f4:	1105883a 	add	r2,r2,r4
   113f8:	10c00003 	ldbu	r3,0(r2)
   113fc:	28c7883a 	add	r3,r5,r3
   11400:	30cbc83a 	sub	r5,r6,r3
   11404:	28000626 	beq	r5,zero,11420 <__udivdi3+0x20c>
   11408:	3145c83a 	sub	r2,r6,r5
   1140c:	e084d83a 	srl	r2,fp,r2
   11410:	a146983a 	sll	r3,r20,r5
   11414:	e178983a 	sll	fp,fp,r5
   11418:	8160983a 	sll	r16,r16,r5
   1141c:	18a8b03a 	or	r20,r3,r2
   11420:	802ad43a 	srli	r21,r16,16
   11424:	a009883a 	mov	r4,r20
   11428:	85ffffcc 	andi	r23,r16,65535
   1142c:	a80b883a 	mov	r5,r21
   11430:	00124f40 	call	124f4 <__udivsi3>
   11434:	a009883a 	mov	r4,r20
   11438:	a80b883a 	mov	r5,r21
   1143c:	102d883a 	mov	r22,r2
   11440:	00124fc0 	call	124fc <__umodsi3>
   11444:	1004943a 	slli	r2,r2,16
   11448:	e006d43a 	srli	r3,fp,16
   1144c:	bda3383a 	mul	r17,r23,r22
   11450:	10c4b03a 	or	r2,r2,r3
   11454:	1440042e 	bgeu	r2,r17,11468 <__udivdi3+0x254>
   11458:	1405883a 	add	r2,r2,r16
   1145c:	b5bfffc4 	addi	r22,r22,-1
   11460:	14000136 	bltu	r2,r16,11468 <__udivdi3+0x254>
   11464:	1440d536 	bltu	r2,r17,117bc <__udivdi3+0x5a8>
   11468:	1463c83a 	sub	r17,r2,r17
   1146c:	8809883a 	mov	r4,r17
   11470:	a80b883a 	mov	r5,r21
   11474:	00124f40 	call	124f4 <__udivsi3>
   11478:	8809883a 	mov	r4,r17
   1147c:	a80b883a 	mov	r5,r21
   11480:	1029883a 	mov	r20,r2
   11484:	00124fc0 	call	124fc <__umodsi3>
   11488:	1004943a 	slli	r2,r2,16
   1148c:	bd09383a 	mul	r4,r23,r20
   11490:	e0ffffcc 	andi	r3,fp,65535
   11494:	10c4b03a 	or	r2,r2,r3
   11498:	1100042e 	bgeu	r2,r4,114ac <__udivdi3+0x298>
   1149c:	8085883a 	add	r2,r16,r2
   114a0:	a53fffc4 	addi	r20,r20,-1
   114a4:	14000136 	bltu	r2,r16,114ac <__udivdi3+0x298>
   114a8:	1100c736 	bltu	r2,r4,117c8 <__udivdi3+0x5b4>
   114ac:	b004943a 	slli	r2,r22,16
   114b0:	0009883a 	mov	r4,zero
   114b4:	a084b03a 	or	r2,r20,r2
   114b8:	003fb706 	br	11398 <__udivdi3+0x184>
   114bc:	00804034 	movhi	r2,256
   114c0:	10bfffc4 	addi	r2,r2,-1
   114c4:	11c0a436 	bltu	r2,r7,11758 <__udivdi3+0x544>
   114c8:	01400404 	movi	r5,16
   114cc:	2805883a 	mov	r2,r5
   114d0:	003fa406 	br	11364 <__udivdi3+0x150>
   114d4:	0005883a 	mov	r2,zero
   114d8:	0009883a 	mov	r4,zero
   114dc:	003fae06 	br	11398 <__udivdi3+0x184>
   114e0:	00804034 	movhi	r2,256
   114e4:	10bfffc4 	addi	r2,r2,-1
   114e8:	1400a136 	bltu	r2,r16,11770 <__udivdi3+0x55c>
   114ec:	01400404 	movi	r5,16
   114f0:	2805883a 	mov	r2,r5
   114f4:	003f6006 	br	11278 <__udivdi3+0x64>
   114f8:	01000044 	movi	r4,1
   114fc:	000b883a 	mov	r5,zero
   11500:	00124f40 	call	124f4 <__udivsi3>
   11504:	1021883a 	mov	r16,r2
   11508:	00bfffd4 	movui	r2,65535
   1150c:	143ff436 	bltu	r2,r16,114e0 <__udivdi3+0x2cc>
   11510:	003f5506 	br	11268 <__udivdi3+0x54>
   11514:	00804034 	movhi	r2,256
   11518:	10bfffc4 	addi	r2,r2,-1
   1151c:	12009a36 	bltu	r2,r8,11788 <__udivdi3+0x574>
   11520:	01400404 	movi	r5,16
   11524:	2805883a 	mov	r2,r5
   11528:	003fae06 	br	113e4 <__udivdi3+0x1d0>
   1152c:	3dc5c83a 	sub	r2,r7,r23
   11530:	35c8983a 	sll	r4,r6,r23
   11534:	8086d83a 	srl	r3,r16,r2
   11538:	a0a2d83a 	srl	r17,r20,r2
   1153c:	e084d83a 	srl	r2,fp,r2
   11540:	20eab03a 	or	r21,r4,r3
   11544:	a82cd43a 	srli	r22,r21,16
   11548:	a5c6983a 	sll	r3,r20,r23
   1154c:	8809883a 	mov	r4,r17
   11550:	b00b883a 	mov	r5,r22
   11554:	1886b03a 	or	r3,r3,r2
   11558:	d8c00215 	stw	r3,8(sp)
   1155c:	00124f40 	call	124f4 <__udivsi3>
   11560:	8809883a 	mov	r4,r17
   11564:	b00b883a 	mov	r5,r22
   11568:	1029883a 	mov	r20,r2
   1156c:	00124fc0 	call	124fc <__umodsi3>
   11570:	a8ffffcc 	andi	r3,r21,65535
   11574:	d8c00515 	stw	r3,20(sp)
   11578:	d9000217 	ldw	r4,8(sp)
   1157c:	d9400517 	ldw	r5,20(sp)
   11580:	1004943a 	slli	r2,r2,16
   11584:	2006d43a 	srli	r3,r4,16
   11588:	85e0983a 	sll	r16,r16,r23
   1158c:	2d23383a 	mul	r17,r5,r20
   11590:	10c4b03a 	or	r2,r2,r3
   11594:	dc000015 	stw	r16,0(sp)
   11598:	1440032e 	bgeu	r2,r17,115a8 <__udivdi3+0x394>
   1159c:	1545883a 	add	r2,r2,r21
   115a0:	a53fffc4 	addi	r20,r20,-1
   115a4:	15407f2e 	bgeu	r2,r21,117a4 <__udivdi3+0x590>
   115a8:	1463c83a 	sub	r17,r2,r17
   115ac:	8809883a 	mov	r4,r17
   115b0:	b00b883a 	mov	r5,r22
   115b4:	00124f40 	call	124f4 <__udivsi3>
   115b8:	8809883a 	mov	r4,r17
   115bc:	b00b883a 	mov	r5,r22
   115c0:	1021883a 	mov	r16,r2
   115c4:	00124fc0 	call	124fc <__umodsi3>
   115c8:	d8c00517 	ldw	r3,20(sp)
   115cc:	d9000217 	ldw	r4,8(sp)
   115d0:	1004943a 	slli	r2,r2,16
   115d4:	1c0f383a 	mul	r7,r3,r16
   115d8:	20ffffcc 	andi	r3,r4,65535
   115dc:	10e2b03a 	or	r17,r2,r3
   115e0:	89c0032e 	bgeu	r17,r7,115f0 <__udivdi3+0x3dc>
   115e4:	8d63883a 	add	r17,r17,r21
   115e8:	843fffc4 	addi	r16,r16,-1
   115ec:	8d40692e 	bgeu	r17,r21,11794 <__udivdi3+0x580>
   115f0:	a008943a 	slli	r4,r20,16
   115f4:	d9400017 	ldw	r5,0(sp)
   115f8:	89e3c83a 	sub	r17,r17,r7
   115fc:	8110b03a 	or	r8,r16,r4
   11600:	280cd43a 	srli	r6,r5,16
   11604:	28ffffcc 	andi	r3,r5,65535
   11608:	40bfffcc 	andi	r2,r8,65535
   1160c:	400ad43a 	srli	r5,r8,16
   11610:	10d3383a 	mul	r9,r2,r3
   11614:	1185383a 	mul	r2,r2,r6
   11618:	28c7383a 	mul	r3,r5,r3
   1161c:	4808d43a 	srli	r4,r9,16
   11620:	298b383a 	mul	r5,r5,r6
   11624:	10c5883a 	add	r2,r2,r3
   11628:	2089883a 	add	r4,r4,r2
   1162c:	20c0022e 	bgeu	r4,r3,11638 <__udivdi3+0x424>
   11630:	00800074 	movhi	r2,1
   11634:	288b883a 	add	r5,r5,r2
   11638:	2004d43a 	srli	r2,r4,16
   1163c:	288b883a 	add	r5,r5,r2
   11640:	89403f36 	bltu	r17,r5,11740 <__udivdi3+0x52c>
   11644:	89403926 	beq	r17,r5,1172c <__udivdi3+0x518>
   11648:	4005883a 	mov	r2,r8
   1164c:	0009883a 	mov	r4,zero
   11650:	003f5106 	br	11398 <__udivdi3+0x184>
   11654:	85a0983a 	sll	r16,r16,r22
   11658:	3585c83a 	sub	r2,r6,r22
   1165c:	a0a2d83a 	srl	r17,r20,r2
   11660:	802ad43a 	srli	r21,r16,16
   11664:	e084d83a 	srl	r2,fp,r2
   11668:	a586983a 	sll	r3,r20,r22
   1166c:	8809883a 	mov	r4,r17
   11670:	a80b883a 	mov	r5,r21
   11674:	1886b03a 	or	r3,r3,r2
   11678:	d8c00115 	stw	r3,4(sp)
   1167c:	00124f40 	call	124f4 <__udivsi3>
   11680:	8809883a 	mov	r4,r17
   11684:	a80b883a 	mov	r5,r21
   11688:	d8800415 	stw	r2,16(sp)
   1168c:	00124fc0 	call	124fc <__umodsi3>
   11690:	d9000117 	ldw	r4,4(sp)
   11694:	d9400417 	ldw	r5,16(sp)
   11698:	1004943a 	slli	r2,r2,16
   1169c:	85ffffcc 	andi	r23,r16,65535
   116a0:	2006d43a 	srli	r3,r4,16
   116a4:	b963383a 	mul	r17,r23,r5
   116a8:	10c4b03a 	or	r2,r2,r3
   116ac:	1440042e 	bgeu	r2,r17,116c0 <__udivdi3+0x4ac>
   116b0:	297fffc4 	addi	r5,r5,-1
   116b4:	1405883a 	add	r2,r2,r16
   116b8:	d9400415 	stw	r5,16(sp)
   116bc:	1400442e 	bgeu	r2,r16,117d0 <__udivdi3+0x5bc>
   116c0:	1463c83a 	sub	r17,r2,r17
   116c4:	8809883a 	mov	r4,r17
   116c8:	a80b883a 	mov	r5,r21
   116cc:	00124f40 	call	124f4 <__udivsi3>
   116d0:	8809883a 	mov	r4,r17
   116d4:	a80b883a 	mov	r5,r21
   116d8:	1029883a 	mov	r20,r2
   116dc:	00124fc0 	call	124fc <__umodsi3>
   116e0:	d9400117 	ldw	r5,4(sp)
   116e4:	1004943a 	slli	r2,r2,16
   116e8:	bd09383a 	mul	r4,r23,r20
   116ec:	28ffffcc 	andi	r3,r5,65535
   116f0:	10c6b03a 	or	r3,r2,r3
   116f4:	1900062e 	bgeu	r3,r4,11710 <__udivdi3+0x4fc>
   116f8:	1c07883a 	add	r3,r3,r16
   116fc:	a53fffc4 	addi	r20,r20,-1
   11700:	1c000336 	bltu	r3,r16,11710 <__udivdi3+0x4fc>
   11704:	1900022e 	bgeu	r3,r4,11710 <__udivdi3+0x4fc>
   11708:	a53fffc4 	addi	r20,r20,-1
   1170c:	1c07883a 	add	r3,r3,r16
   11710:	d9400417 	ldw	r5,16(sp)
   11714:	e5b8983a 	sll	fp,fp,r22
   11718:	1923c83a 	sub	r17,r3,r4
   1171c:	2804943a 	slli	r2,r5,16
   11720:	a0a8b03a 	or	r20,r20,r2
   11724:	dd000315 	stw	r20,12(sp)
   11728:	003ee106 	br	112b0 <__udivdi3+0x9c>
   1172c:	2004943a 	slli	r2,r4,16
   11730:	e5c8983a 	sll	r4,fp,r23
   11734:	48ffffcc 	andi	r3,r9,65535
   11738:	10c5883a 	add	r2,r2,r3
   1173c:	20bfc22e 	bgeu	r4,r2,11648 <__udivdi3+0x434>
   11740:	40bfffc4 	addi	r2,r8,-1
   11744:	0009883a 	mov	r4,zero
   11748:	003f1306 	br	11398 <__udivdi3+0x184>
   1174c:	01400204 	movi	r5,8
   11750:	2805883a 	mov	r2,r5
   11754:	003f0306 	br	11364 <__udivdi3+0x150>
   11758:	01400604 	movi	r5,24
   1175c:	2805883a 	mov	r2,r5
   11760:	003f0006 	br	11364 <__udivdi3+0x150>
   11764:	01400204 	movi	r5,8
   11768:	2805883a 	mov	r2,r5
   1176c:	003ec206 	br	11278 <__udivdi3+0x64>
   11770:	01400604 	movi	r5,24
   11774:	2805883a 	mov	r2,r5
   11778:	003ebf06 	br	11278 <__udivdi3+0x64>
   1177c:	01400204 	movi	r5,8
   11780:	2805883a 	mov	r2,r5
   11784:	003f1706 	br	113e4 <__udivdi3+0x1d0>
   11788:	01400604 	movi	r5,24
   1178c:	2805883a 	mov	r2,r5
   11790:	003f1406 	br	113e4 <__udivdi3+0x1d0>
   11794:	89ff962e 	bgeu	r17,r7,115f0 <__udivdi3+0x3dc>
   11798:	8d63883a 	add	r17,r17,r21
   1179c:	843fffc4 	addi	r16,r16,-1
   117a0:	003f9306 	br	115f0 <__udivdi3+0x3dc>
   117a4:	147f802e 	bgeu	r2,r17,115a8 <__udivdi3+0x394>
   117a8:	a53fffc4 	addi	r20,r20,-1
   117ac:	1545883a 	add	r2,r2,r21
   117b0:	003f7d06 	br	115a8 <__udivdi3+0x394>
   117b4:	a53fffc4 	addi	r20,r20,-1
   117b8:	003ede06 	br	11334 <__udivdi3+0x120>
   117bc:	b5bfffc4 	addi	r22,r22,-1
   117c0:	1405883a 	add	r2,r2,r16
   117c4:	003f2806 	br	11468 <__udivdi3+0x254>
   117c8:	a53fffc4 	addi	r20,r20,-1
   117cc:	003f3706 	br	114ac <__udivdi3+0x298>
   117d0:	147fbb2e 	bgeu	r2,r17,116c0 <__udivdi3+0x4ac>
   117d4:	297fffc4 	addi	r5,r5,-1
   117d8:	1405883a 	add	r2,r2,r16
   117dc:	d9400415 	stw	r5,16(sp)
   117e0:	003fb706 	br	116c0 <__udivdi3+0x4ac>
   117e4:	b5bfffc4 	addi	r22,r22,-1
   117e8:	1405883a 	add	r2,r2,r16
   117ec:	003ec006 	br	112f0 <__udivdi3+0xdc>

000117f0 <__umoddi3>:
   117f0:	defff104 	addi	sp,sp,-60
   117f4:	dd800b15 	stw	r22,44(sp)
   117f8:	dd000915 	stw	r20,36(sp)
   117fc:	dc000515 	stw	r16,20(sp)
   11800:	dfc00e15 	stw	ra,56(sp)
   11804:	df000d15 	stw	fp,52(sp)
   11808:	ddc00c15 	stw	r23,48(sp)
   1180c:	dd400a15 	stw	r21,40(sp)
   11810:	dcc00815 	stw	r19,32(sp)
   11814:	dc800715 	stw	r18,28(sp)
   11818:	dc400615 	stw	r17,24(sp)
   1181c:	3021883a 	mov	r16,r6
   11820:	202d883a 	mov	r22,r4
   11824:	2829883a 	mov	r20,r5
   11828:	38002b1e 	bne	r7,zero,118d8 <__umoddi3+0xe8>
   1182c:	29805036 	bltu	r5,r6,11970 <__umoddi3+0x180>
   11830:	30008a26 	beq	r6,zero,11a5c <__umoddi3+0x26c>
   11834:	00bfffd4 	movui	r2,65535
   11838:	14008236 	bltu	r2,r16,11a44 <__umoddi3+0x254>
   1183c:	00803fc4 	movi	r2,255
   11840:	14013636 	bltu	r2,r16,11d1c <__umoddi3+0x52c>
   11844:	000b883a 	mov	r5,zero
   11848:	0005883a 	mov	r2,zero
   1184c:	8084d83a 	srl	r2,r16,r2
   11850:	01020034 	movhi	r4,2048
   11854:	2100d404 	addi	r4,r4,848
   11858:	01800804 	movi	r6,32
   1185c:	1105883a 	add	r2,r2,r4
   11860:	10c00003 	ldbu	r3,0(r2)
   11864:	28c7883a 	add	r3,r5,r3
   11868:	30efc83a 	sub	r23,r6,r3
   1186c:	b800941e 	bne	r23,zero,11ac0 <__umoddi3+0x2d0>
   11870:	802ad43a 	srli	r21,r16,16
   11874:	a423c83a 	sub	r17,r20,r16
   11878:	0039883a 	mov	fp,zero
   1187c:	853fffcc 	andi	r20,r16,65535
   11880:	8809883a 	mov	r4,r17
   11884:	a80b883a 	mov	r5,r21
   11888:	00124f40 	call	124f4 <__udivsi3>
   1188c:	8809883a 	mov	r4,r17
   11890:	a80b883a 	mov	r5,r21
   11894:	a0a3383a 	mul	r17,r20,r2
   11898:	00124fc0 	call	124fc <__umodsi3>
   1189c:	1004943a 	slli	r2,r2,16
   118a0:	b006d43a 	srli	r3,r22,16
   118a4:	10c4b03a 	or	r2,r2,r3
   118a8:	1440032e 	bgeu	r2,r17,118b8 <__umoddi3+0xc8>
   118ac:	1405883a 	add	r2,r2,r16
   118b0:	14000136 	bltu	r2,r16,118b8 <__umoddi3+0xc8>
   118b4:	14413536 	bltu	r2,r17,11d8c <__umoddi3+0x59c>
   118b8:	1463c83a 	sub	r17,r2,r17
   118bc:	8809883a 	mov	r4,r17
   118c0:	a80b883a 	mov	r5,r21
   118c4:	00124f40 	call	124f4 <__udivsi3>
   118c8:	8809883a 	mov	r4,r17
   118cc:	a0a3383a 	mul	r17,r20,r2
   118d0:	a80b883a 	mov	r5,r21
   118d4:	00004d06 	br	11a0c <__umoddi3+0x21c>
   118d8:	380d883a 	mov	r6,r7
   118dc:	29c0102e 	bgeu	r5,r7,11920 <__umoddi3+0x130>
   118e0:	2011883a 	mov	r8,r4
   118e4:	2813883a 	mov	r9,r5
   118e8:	4005883a 	mov	r2,r8
   118ec:	4807883a 	mov	r3,r9
   118f0:	dfc00e17 	ldw	ra,56(sp)
   118f4:	df000d17 	ldw	fp,52(sp)
   118f8:	ddc00c17 	ldw	r23,48(sp)
   118fc:	dd800b17 	ldw	r22,44(sp)
   11900:	dd400a17 	ldw	r21,40(sp)
   11904:	dd000917 	ldw	r20,36(sp)
   11908:	dcc00817 	ldw	r19,32(sp)
   1190c:	dc800717 	ldw	r18,28(sp)
   11910:	dc400617 	ldw	r17,24(sp)
   11914:	dc000517 	ldw	r16,20(sp)
   11918:	dec00f04 	addi	sp,sp,60
   1191c:	f800283a 	ret
   11920:	00bfffd4 	movui	r2,65535
   11924:	11c05a36 	bltu	r2,r7,11a90 <__umoddi3+0x2a0>
   11928:	00803fc4 	movi	r2,255
   1192c:	11c0fe36 	bltu	r2,r7,11d28 <__umoddi3+0x538>
   11930:	000b883a 	mov	r5,zero
   11934:	0005883a 	mov	r2,zero
   11938:	3084d83a 	srl	r2,r6,r2
   1193c:	01020034 	movhi	r4,2048
   11940:	2100d404 	addi	r4,r4,848
   11944:	01c00804 	movi	r7,32
   11948:	1105883a 	add	r2,r2,r4
   1194c:	10c00003 	ldbu	r3,0(r2)
   11950:	28c7883a 	add	r3,r5,r3
   11954:	38ebc83a 	sub	r21,r7,r3
   11958:	a800851e 	bne	r21,zero,11b70 <__umoddi3+0x380>
   1195c:	35005236 	bltu	r6,r20,11aa8 <__umoddi3+0x2b8>
   11960:	b400512e 	bgeu	r22,r16,11aa8 <__umoddi3+0x2b8>
   11964:	b011883a 	mov	r8,r22
   11968:	a013883a 	mov	r9,r20
   1196c:	003fde06 	br	118e8 <__umoddi3+0xf8>
   11970:	00bfffd4 	movui	r2,65535
   11974:	11804036 	bltu	r2,r6,11a78 <__umoddi3+0x288>
   11978:	00803fc4 	movi	r2,255
   1197c:	1180ed36 	bltu	r2,r6,11d34 <__umoddi3+0x544>
   11980:	000b883a 	mov	r5,zero
   11984:	0005883a 	mov	r2,zero
   11988:	8084d83a 	srl	r2,r16,r2
   1198c:	01020034 	movhi	r4,2048
   11990:	2100d404 	addi	r4,r4,848
   11994:	01800804 	movi	r6,32
   11998:	1105883a 	add	r2,r2,r4
   1199c:	10c00003 	ldbu	r3,0(r2)
   119a0:	28c7883a 	add	r3,r5,r3
   119a4:	30c7c83a 	sub	r3,r6,r3
   119a8:	1800bf1e 	bne	r3,zero,11ca8 <__umoddi3+0x4b8>
   119ac:	0039883a 	mov	fp,zero
   119b0:	802ad43a 	srli	r21,r16,16
   119b4:	a009883a 	mov	r4,r20
   119b8:	85ffffcc 	andi	r23,r16,65535
   119bc:	a80b883a 	mov	r5,r21
   119c0:	00124f40 	call	124f4 <__udivsi3>
   119c4:	a009883a 	mov	r4,r20
   119c8:	a80b883a 	mov	r5,r21
   119cc:	b8a3383a 	mul	r17,r23,r2
   119d0:	00124fc0 	call	124fc <__umodsi3>
   119d4:	1004943a 	slli	r2,r2,16
   119d8:	b006d43a 	srli	r3,r22,16
   119dc:	10c4b03a 	or	r2,r2,r3
   119e0:	1440032e 	bgeu	r2,r17,119f0 <__umoddi3+0x200>
   119e4:	1405883a 	add	r2,r2,r16
   119e8:	14000136 	bltu	r2,r16,119f0 <__umoddi3+0x200>
   119ec:	1440e536 	bltu	r2,r17,11d84 <__umoddi3+0x594>
   119f0:	1463c83a 	sub	r17,r2,r17
   119f4:	8809883a 	mov	r4,r17
   119f8:	a80b883a 	mov	r5,r21
   119fc:	00124f40 	call	124f4 <__udivsi3>
   11a00:	8809883a 	mov	r4,r17
   11a04:	b8a3383a 	mul	r17,r23,r2
   11a08:	a80b883a 	mov	r5,r21
   11a0c:	00124fc0 	call	124fc <__umodsi3>
   11a10:	1004943a 	slli	r2,r2,16
   11a14:	b0ffffcc 	andi	r3,r22,65535
   11a18:	10c4b03a 	or	r2,r2,r3
   11a1c:	1440042e 	bgeu	r2,r17,11a30 <__umoddi3+0x240>
   11a20:	1405883a 	add	r2,r2,r16
   11a24:	14000236 	bltu	r2,r16,11a30 <__umoddi3+0x240>
   11a28:	1440012e 	bgeu	r2,r17,11a30 <__umoddi3+0x240>
   11a2c:	1405883a 	add	r2,r2,r16
   11a30:	1445c83a 	sub	r2,r2,r17
   11a34:	1724d83a 	srl	r18,r2,fp
   11a38:	0013883a 	mov	r9,zero
   11a3c:	9011883a 	mov	r8,r18
   11a40:	003fa906 	br	118e8 <__umoddi3+0xf8>
   11a44:	00804034 	movhi	r2,256
   11a48:	10bfffc4 	addi	r2,r2,-1
   11a4c:	1400b036 	bltu	r2,r16,11d10 <__umoddi3+0x520>
   11a50:	01400404 	movi	r5,16
   11a54:	2805883a 	mov	r2,r5
   11a58:	003f7c06 	br	1184c <__umoddi3+0x5c>
   11a5c:	01000044 	movi	r4,1
   11a60:	000b883a 	mov	r5,zero
   11a64:	00124f40 	call	124f4 <__udivsi3>
   11a68:	1021883a 	mov	r16,r2
   11a6c:	00bfffd4 	movui	r2,65535
   11a70:	143ff436 	bltu	r2,r16,11a44 <__umoddi3+0x254>
   11a74:	003f7106 	br	1183c <__umoddi3+0x4c>
   11a78:	00804034 	movhi	r2,256
   11a7c:	10bfffc4 	addi	r2,r2,-1
   11a80:	1180af36 	bltu	r2,r6,11d40 <__umoddi3+0x550>
   11a84:	01400404 	movi	r5,16
   11a88:	2805883a 	mov	r2,r5
   11a8c:	003fbe06 	br	11988 <__umoddi3+0x198>
   11a90:	00804034 	movhi	r2,256
   11a94:	10bfffc4 	addi	r2,r2,-1
   11a98:	11c0ac36 	bltu	r2,r7,11d4c <__umoddi3+0x55c>
   11a9c:	01400404 	movi	r5,16
   11aa0:	2805883a 	mov	r2,r5
   11aa4:	003fa406 	br	11938 <__umoddi3+0x148>
   11aa8:	b409c83a 	sub	r4,r22,r16
   11aac:	b105803a 	cmpltu	r2,r22,r4
   11ab0:	a187c83a 	sub	r3,r20,r6
   11ab4:	18a9c83a 	sub	r20,r3,r2
   11ab8:	202d883a 	mov	r22,r4
   11abc:	003fa906 	br	11964 <__umoddi3+0x174>
   11ac0:	85e0983a 	sll	r16,r16,r23
   11ac4:	35c5c83a 	sub	r2,r6,r23
   11ac8:	a0a2d83a 	srl	r17,r20,r2
   11acc:	802ad43a 	srli	r21,r16,16
   11ad0:	b084d83a 	srl	r2,r22,r2
   11ad4:	a5c6983a 	sll	r3,r20,r23
   11ad8:	8809883a 	mov	r4,r17
   11adc:	a80b883a 	mov	r5,r21
   11ae0:	1886b03a 	or	r3,r3,r2
   11ae4:	d8c00115 	stw	r3,4(sp)
   11ae8:	853fffcc 	andi	r20,r16,65535
   11aec:	00124f40 	call	124f4 <__udivsi3>
   11af0:	8809883a 	mov	r4,r17
   11af4:	a80b883a 	mov	r5,r21
   11af8:	a0a3383a 	mul	r17,r20,r2
   11afc:	00124fc0 	call	124fc <__umodsi3>
   11b00:	d9000117 	ldw	r4,4(sp)
   11b04:	1004943a 	slli	r2,r2,16
   11b08:	b839883a 	mov	fp,r23
   11b0c:	2006d43a 	srli	r3,r4,16
   11b10:	10c4b03a 	or	r2,r2,r3
   11b14:	1440022e 	bgeu	r2,r17,11b20 <__umoddi3+0x330>
   11b18:	1405883a 	add	r2,r2,r16
   11b1c:	1400962e 	bgeu	r2,r16,11d78 <__umoddi3+0x588>
   11b20:	1463c83a 	sub	r17,r2,r17
   11b24:	8809883a 	mov	r4,r17
   11b28:	a80b883a 	mov	r5,r21
   11b2c:	00124f40 	call	124f4 <__udivsi3>
   11b30:	8809883a 	mov	r4,r17
   11b34:	a80b883a 	mov	r5,r21
   11b38:	a0a3383a 	mul	r17,r20,r2
   11b3c:	00124fc0 	call	124fc <__umodsi3>
   11b40:	d9400117 	ldw	r5,4(sp)
   11b44:	1004943a 	slli	r2,r2,16
   11b48:	28ffffcc 	andi	r3,r5,65535
   11b4c:	10c4b03a 	or	r2,r2,r3
   11b50:	1440042e 	bgeu	r2,r17,11b64 <__umoddi3+0x374>
   11b54:	1405883a 	add	r2,r2,r16
   11b58:	14000236 	bltu	r2,r16,11b64 <__umoddi3+0x374>
   11b5c:	1440012e 	bgeu	r2,r17,11b64 <__umoddi3+0x374>
   11b60:	1405883a 	add	r2,r2,r16
   11b64:	b5ec983a 	sll	r22,r22,r23
   11b68:	1463c83a 	sub	r17,r2,r17
   11b6c:	003f4406 	br	11880 <__umoddi3+0x90>
   11b70:	3d4fc83a 	sub	r7,r7,r21
   11b74:	3546983a 	sll	r3,r6,r21
   11b78:	81c4d83a 	srl	r2,r16,r7
   11b7c:	a1e2d83a 	srl	r17,r20,r7
   11b80:	a54c983a 	sll	r6,r20,r21
   11b84:	18aeb03a 	or	r23,r3,r2
   11b88:	b828d43a 	srli	r20,r23,16
   11b8c:	b1c4d83a 	srl	r2,r22,r7
   11b90:	8809883a 	mov	r4,r17
   11b94:	a00b883a 	mov	r5,r20
   11b98:	308cb03a 	or	r6,r6,r2
   11b9c:	d9c00315 	stw	r7,12(sp)
   11ba0:	d9800215 	stw	r6,8(sp)
   11ba4:	00124f40 	call	124f4 <__udivsi3>
   11ba8:	8809883a 	mov	r4,r17
   11bac:	a00b883a 	mov	r5,r20
   11bb0:	1039883a 	mov	fp,r2
   11bb4:	00124fc0 	call	124fc <__umodsi3>
   11bb8:	b8ffffcc 	andi	r3,r23,65535
   11bbc:	d8c00415 	stw	r3,16(sp)
   11bc0:	d9000217 	ldw	r4,8(sp)
   11bc4:	d9400417 	ldw	r5,16(sp)
   11bc8:	1004943a 	slli	r2,r2,16
   11bcc:	2006d43a 	srli	r3,r4,16
   11bd0:	8560983a 	sll	r16,r16,r21
   11bd4:	2f23383a 	mul	r17,r5,fp
   11bd8:	10c4b03a 	or	r2,r2,r3
   11bdc:	dc000015 	stw	r16,0(sp)
   11be0:	b56c983a 	sll	r22,r22,r21
   11be4:	1440032e 	bgeu	r2,r17,11bf4 <__umoddi3+0x404>
   11be8:	15c5883a 	add	r2,r2,r23
   11bec:	e73fffc4 	addi	fp,fp,-1
   11bf0:	15c05d2e 	bgeu	r2,r23,11d68 <__umoddi3+0x578>
   11bf4:	1463c83a 	sub	r17,r2,r17
   11bf8:	8809883a 	mov	r4,r17
   11bfc:	a00b883a 	mov	r5,r20
   11c00:	00124f40 	call	124f4 <__udivsi3>
   11c04:	8809883a 	mov	r4,r17
   11c08:	a00b883a 	mov	r5,r20
   11c0c:	1021883a 	mov	r16,r2
   11c10:	00124fc0 	call	124fc <__umodsi3>
   11c14:	d8c00417 	ldw	r3,16(sp)
   11c18:	d9000217 	ldw	r4,8(sp)
   11c1c:	1004943a 	slli	r2,r2,16
   11c20:	1c23383a 	mul	r17,r3,r16
   11c24:	20ffffcc 	andi	r3,r4,65535
   11c28:	10ceb03a 	or	r7,r2,r3
   11c2c:	3c40032e 	bgeu	r7,r17,11c3c <__umoddi3+0x44c>
   11c30:	3dcf883a 	add	r7,r7,r23
   11c34:	843fffc4 	addi	r16,r16,-1
   11c38:	3dc0472e 	bgeu	r7,r23,11d58 <__umoddi3+0x568>
   11c3c:	e004943a 	slli	r2,fp,16
   11c40:	d9400017 	ldw	r5,0(sp)
   11c44:	3c4fc83a 	sub	r7,r7,r17
   11c48:	8084b03a 	or	r2,r16,r2
   11c4c:	28ffffcc 	andi	r3,r5,65535
   11c50:	280cd43a 	srli	r6,r5,16
   11c54:	100ad43a 	srli	r5,r2,16
   11c58:	10bfffcc 	andi	r2,r2,65535
   11c5c:	10d1383a 	mul	r8,r2,r3
   11c60:	28c7383a 	mul	r3,r5,r3
   11c64:	1185383a 	mul	r2,r2,r6
   11c68:	4008d43a 	srli	r4,r8,16
   11c6c:	298b383a 	mul	r5,r5,r6
   11c70:	10c5883a 	add	r2,r2,r3
   11c74:	2089883a 	add	r4,r4,r2
   11c78:	20c0022e 	bgeu	r4,r3,11c84 <__umoddi3+0x494>
   11c7c:	00800074 	movhi	r2,1
   11c80:	288b883a 	add	r5,r5,r2
   11c84:	2004d43a 	srli	r2,r4,16
   11c88:	2008943a 	slli	r4,r4,16
   11c8c:	40ffffcc 	andi	r3,r8,65535
   11c90:	288b883a 	add	r5,r5,r2
   11c94:	20c9883a 	add	r4,r4,r3
   11c98:	39400b36 	bltu	r7,r5,11cc8 <__umoddi3+0x4d8>
   11c9c:	39403d26 	beq	r7,r5,11d94 <__umoddi3+0x5a4>
   11ca0:	394bc83a 	sub	r5,r7,r5
   11ca4:	00000f06 	br	11ce4 <__umoddi3+0x4f4>
   11ca8:	30c5c83a 	sub	r2,r6,r3
   11cac:	1839883a 	mov	fp,r3
   11cb0:	b084d83a 	srl	r2,r22,r2
   11cb4:	a0c6983a 	sll	r3,r20,r3
   11cb8:	8720983a 	sll	r16,r16,fp
   11cbc:	b72c983a 	sll	r22,r22,fp
   11cc0:	18a8b03a 	or	r20,r3,r2
   11cc4:	003f3a06 	br	119b0 <__umoddi3+0x1c0>
   11cc8:	d8c00017 	ldw	r3,0(sp)
   11ccc:	20c5c83a 	sub	r2,r4,r3
   11cd0:	2089803a 	cmpltu	r4,r4,r2
   11cd4:	2dc7c83a 	sub	r3,r5,r23
   11cd8:	1907c83a 	sub	r3,r3,r4
   11cdc:	38cbc83a 	sub	r5,r7,r3
   11ce0:	1009883a 	mov	r4,r2
   11ce4:	b105c83a 	sub	r2,r22,r4
   11ce8:	b087803a 	cmpltu	r3,r22,r2
   11cec:	28c7c83a 	sub	r3,r5,r3
   11cf0:	d9400317 	ldw	r5,12(sp)
   11cf4:	1544d83a 	srl	r2,r2,r21
   11cf8:	1948983a 	sll	r4,r3,r5
   11cfc:	1d46d83a 	srl	r3,r3,r21
   11d00:	20a4b03a 	or	r18,r4,r2
   11d04:	9011883a 	mov	r8,r18
   11d08:	1813883a 	mov	r9,r3
   11d0c:	003ef606 	br	118e8 <__umoddi3+0xf8>
   11d10:	01400604 	movi	r5,24
   11d14:	2805883a 	mov	r2,r5
   11d18:	003ecc06 	br	1184c <__umoddi3+0x5c>
   11d1c:	01400204 	movi	r5,8
   11d20:	2805883a 	mov	r2,r5
   11d24:	003ec906 	br	1184c <__umoddi3+0x5c>
   11d28:	01400204 	movi	r5,8
   11d2c:	2805883a 	mov	r2,r5
   11d30:	003f0106 	br	11938 <__umoddi3+0x148>
   11d34:	01400204 	movi	r5,8
   11d38:	2805883a 	mov	r2,r5
   11d3c:	003f1206 	br	11988 <__umoddi3+0x198>
   11d40:	01400604 	movi	r5,24
   11d44:	2805883a 	mov	r2,r5
   11d48:	003f0f06 	br	11988 <__umoddi3+0x198>
   11d4c:	01400604 	movi	r5,24
   11d50:	2805883a 	mov	r2,r5
   11d54:	003ef806 	br	11938 <__umoddi3+0x148>
   11d58:	3c7fb82e 	bgeu	r7,r17,11c3c <__umoddi3+0x44c>
   11d5c:	843fffc4 	addi	r16,r16,-1
   11d60:	3dcf883a 	add	r7,r7,r23
   11d64:	003fb506 	br	11c3c <__umoddi3+0x44c>
   11d68:	147fa22e 	bgeu	r2,r17,11bf4 <__umoddi3+0x404>
   11d6c:	e73fffc4 	addi	fp,fp,-1
   11d70:	15c5883a 	add	r2,r2,r23
   11d74:	003f9f06 	br	11bf4 <__umoddi3+0x404>
   11d78:	147f692e 	bgeu	r2,r17,11b20 <__umoddi3+0x330>
   11d7c:	1405883a 	add	r2,r2,r16
   11d80:	003f6706 	br	11b20 <__umoddi3+0x330>
   11d84:	1405883a 	add	r2,r2,r16
   11d88:	003f1906 	br	119f0 <__umoddi3+0x200>
   11d8c:	1405883a 	add	r2,r2,r16
   11d90:	003ec906 	br	118b8 <__umoddi3+0xc8>
   11d94:	b13fcc36 	bltu	r22,r4,11cc8 <__umoddi3+0x4d8>
   11d98:	000b883a 	mov	r5,zero
   11d9c:	003fd106 	br	11ce4 <__umoddi3+0x4f4>

00011da0 <__nesf2>:
   11da0:	defff304 	addi	sp,sp,-52
   11da4:	dc400b15 	stw	r17,44(sp)
   11da8:	dc400204 	addi	r17,sp,8
   11dac:	dc000a15 	stw	r16,40(sp)
   11db0:	d9000015 	stw	r4,0(sp)
   11db4:	d9400115 	stw	r5,4(sp)
   11db8:	d809883a 	mov	r4,sp
   11dbc:	880b883a 	mov	r5,r17
   11dc0:	dc000604 	addi	r16,sp,24
   11dc4:	dfc00c15 	stw	ra,48(sp)
   11dc8:	00125040 	call	12504 <__unpack_f>
   11dcc:	d9000104 	addi	r4,sp,4
   11dd0:	800b883a 	mov	r5,r16
   11dd4:	00125040 	call	12504 <__unpack_f>
   11dd8:	d8800217 	ldw	r2,8(sp)
   11ddc:	00c00044 	movi	r3,1
   11de0:	180d883a 	mov	r6,r3
   11de4:	1880062e 	bgeu	r3,r2,11e00 <__nesf2+0x60>
   11de8:	d8800617 	ldw	r2,24(sp)
   11dec:	8809883a 	mov	r4,r17
   11df0:	800b883a 	mov	r5,r16
   11df4:	1880022e 	bgeu	r3,r2,11e00 <__nesf2+0x60>
   11df8:	00125cc0 	call	125cc <__fpcmp_parts_f>
   11dfc:	100d883a 	mov	r6,r2
   11e00:	3005883a 	mov	r2,r6
   11e04:	dfc00c17 	ldw	ra,48(sp)
   11e08:	dc400b17 	ldw	r17,44(sp)
   11e0c:	dc000a17 	ldw	r16,40(sp)
   11e10:	dec00d04 	addi	sp,sp,52
   11e14:	f800283a 	ret

00011e18 <__gtsf2>:
   11e18:	defff304 	addi	sp,sp,-52
   11e1c:	dc400b15 	stw	r17,44(sp)
   11e20:	dc400204 	addi	r17,sp,8
   11e24:	dc000a15 	stw	r16,40(sp)
   11e28:	d9000015 	stw	r4,0(sp)
   11e2c:	d9400115 	stw	r5,4(sp)
   11e30:	d809883a 	mov	r4,sp
   11e34:	880b883a 	mov	r5,r17
   11e38:	dc000604 	addi	r16,sp,24
   11e3c:	dfc00c15 	stw	ra,48(sp)
   11e40:	00125040 	call	12504 <__unpack_f>
   11e44:	d9000104 	addi	r4,sp,4
   11e48:	800b883a 	mov	r5,r16
   11e4c:	00125040 	call	12504 <__unpack_f>
   11e50:	d8800217 	ldw	r2,8(sp)
   11e54:	00c00044 	movi	r3,1
   11e58:	01bfffc4 	movi	r6,-1
   11e5c:	1880062e 	bgeu	r3,r2,11e78 <__gtsf2+0x60>
   11e60:	d8800617 	ldw	r2,24(sp)
   11e64:	8809883a 	mov	r4,r17
   11e68:	800b883a 	mov	r5,r16
   11e6c:	1880022e 	bgeu	r3,r2,11e78 <__gtsf2+0x60>
   11e70:	00125cc0 	call	125cc <__fpcmp_parts_f>
   11e74:	100d883a 	mov	r6,r2
   11e78:	3005883a 	mov	r2,r6
   11e7c:	dfc00c17 	ldw	ra,48(sp)
   11e80:	dc400b17 	ldw	r17,44(sp)
   11e84:	dc000a17 	ldw	r16,40(sp)
   11e88:	dec00d04 	addi	sp,sp,52
   11e8c:	f800283a 	ret

00011e90 <__ltsf2>:
   11e90:	defff304 	addi	sp,sp,-52
   11e94:	dc400b15 	stw	r17,44(sp)
   11e98:	dc400204 	addi	r17,sp,8
   11e9c:	dc000a15 	stw	r16,40(sp)
   11ea0:	d9000015 	stw	r4,0(sp)
   11ea4:	d9400115 	stw	r5,4(sp)
   11ea8:	d809883a 	mov	r4,sp
   11eac:	880b883a 	mov	r5,r17
   11eb0:	dc000604 	addi	r16,sp,24
   11eb4:	dfc00c15 	stw	ra,48(sp)
   11eb8:	00125040 	call	12504 <__unpack_f>
   11ebc:	d9000104 	addi	r4,sp,4
   11ec0:	800b883a 	mov	r5,r16
   11ec4:	00125040 	call	12504 <__unpack_f>
   11ec8:	d8800217 	ldw	r2,8(sp)
   11ecc:	00c00044 	movi	r3,1
   11ed0:	180d883a 	mov	r6,r3
   11ed4:	1880062e 	bgeu	r3,r2,11ef0 <__ltsf2+0x60>
   11ed8:	d8800617 	ldw	r2,24(sp)
   11edc:	8809883a 	mov	r4,r17
   11ee0:	800b883a 	mov	r5,r16
   11ee4:	1880022e 	bgeu	r3,r2,11ef0 <__ltsf2+0x60>
   11ee8:	00125cc0 	call	125cc <__fpcmp_parts_f>
   11eec:	100d883a 	mov	r6,r2
   11ef0:	3005883a 	mov	r2,r6
   11ef4:	dfc00c17 	ldw	ra,48(sp)
   11ef8:	dc400b17 	ldw	r17,44(sp)
   11efc:	dc000a17 	ldw	r16,40(sp)
   11f00:	dec00d04 	addi	sp,sp,52
   11f04:	f800283a 	ret

00011f08 <__eqdf2>:
   11f08:	deffef04 	addi	sp,sp,-68
   11f0c:	dc400f15 	stw	r17,60(sp)
   11f10:	dc400404 	addi	r17,sp,16
   11f14:	2005883a 	mov	r2,r4
   11f18:	2807883a 	mov	r3,r5
   11f1c:	dc000e15 	stw	r16,56(sp)
   11f20:	d809883a 	mov	r4,sp
   11f24:	880b883a 	mov	r5,r17
   11f28:	dc000904 	addi	r16,sp,36
   11f2c:	d8c00115 	stw	r3,4(sp)
   11f30:	d8800015 	stw	r2,0(sp)
   11f34:	d9800215 	stw	r6,8(sp)
   11f38:	dfc01015 	stw	ra,64(sp)
   11f3c:	d9c00315 	stw	r7,12(sp)
   11f40:	00075140 	call	7514 <__unpack_d>
   11f44:	d9000204 	addi	r4,sp,8
   11f48:	800b883a 	mov	r5,r16
   11f4c:	00075140 	call	7514 <__unpack_d>
   11f50:	d8800417 	ldw	r2,16(sp)
   11f54:	00c00044 	movi	r3,1
   11f58:	180d883a 	mov	r6,r3
   11f5c:	1880062e 	bgeu	r3,r2,11f78 <__eqdf2+0x70>
   11f60:	d8800917 	ldw	r2,36(sp)
   11f64:	8809883a 	mov	r4,r17
   11f68:	800b883a 	mov	r5,r16
   11f6c:	1880022e 	bgeu	r3,r2,11f78 <__eqdf2+0x70>
   11f70:	000764c0 	call	764c <__fpcmp_parts_d>
   11f74:	100d883a 	mov	r6,r2
   11f78:	3005883a 	mov	r2,r6
   11f7c:	dfc01017 	ldw	ra,64(sp)
   11f80:	dc400f17 	ldw	r17,60(sp)
   11f84:	dc000e17 	ldw	r16,56(sp)
   11f88:	dec01104 	addi	sp,sp,68
   11f8c:	f800283a 	ret

00011f90 <__nedf2>:
   11f90:	deffef04 	addi	sp,sp,-68
   11f94:	dc400f15 	stw	r17,60(sp)
   11f98:	dc400404 	addi	r17,sp,16
   11f9c:	2005883a 	mov	r2,r4
   11fa0:	2807883a 	mov	r3,r5
   11fa4:	dc000e15 	stw	r16,56(sp)
   11fa8:	d809883a 	mov	r4,sp
   11fac:	880b883a 	mov	r5,r17
   11fb0:	dc000904 	addi	r16,sp,36
   11fb4:	d8c00115 	stw	r3,4(sp)
   11fb8:	d8800015 	stw	r2,0(sp)
   11fbc:	d9800215 	stw	r6,8(sp)
   11fc0:	dfc01015 	stw	ra,64(sp)
   11fc4:	d9c00315 	stw	r7,12(sp)
   11fc8:	00075140 	call	7514 <__unpack_d>
   11fcc:	d9000204 	addi	r4,sp,8
   11fd0:	800b883a 	mov	r5,r16
   11fd4:	00075140 	call	7514 <__unpack_d>
   11fd8:	d8800417 	ldw	r2,16(sp)
   11fdc:	00c00044 	movi	r3,1
   11fe0:	180d883a 	mov	r6,r3
   11fe4:	1880062e 	bgeu	r3,r2,12000 <__nedf2+0x70>
   11fe8:	d8800917 	ldw	r2,36(sp)
   11fec:	8809883a 	mov	r4,r17
   11ff0:	800b883a 	mov	r5,r16
   11ff4:	1880022e 	bgeu	r3,r2,12000 <__nedf2+0x70>
   11ff8:	000764c0 	call	764c <__fpcmp_parts_d>
   11ffc:	100d883a 	mov	r6,r2
   12000:	3005883a 	mov	r2,r6
   12004:	dfc01017 	ldw	ra,64(sp)
   12008:	dc400f17 	ldw	r17,60(sp)
   1200c:	dc000e17 	ldw	r16,56(sp)
   12010:	dec01104 	addi	sp,sp,68
   12014:	f800283a 	ret

00012018 <__gedf2>:
   12018:	deffef04 	addi	sp,sp,-68
   1201c:	dc400f15 	stw	r17,60(sp)
   12020:	dc400404 	addi	r17,sp,16
   12024:	2005883a 	mov	r2,r4
   12028:	2807883a 	mov	r3,r5
   1202c:	dc000e15 	stw	r16,56(sp)
   12030:	d809883a 	mov	r4,sp
   12034:	880b883a 	mov	r5,r17
   12038:	dc000904 	addi	r16,sp,36
   1203c:	d8c00115 	stw	r3,4(sp)
   12040:	d8800015 	stw	r2,0(sp)
   12044:	d9800215 	stw	r6,8(sp)
   12048:	dfc01015 	stw	ra,64(sp)
   1204c:	d9c00315 	stw	r7,12(sp)
   12050:	00075140 	call	7514 <__unpack_d>
   12054:	d9000204 	addi	r4,sp,8
   12058:	800b883a 	mov	r5,r16
   1205c:	00075140 	call	7514 <__unpack_d>
   12060:	d8800417 	ldw	r2,16(sp)
   12064:	00c00044 	movi	r3,1
   12068:	01bfffc4 	movi	r6,-1
   1206c:	1880062e 	bgeu	r3,r2,12088 <__gedf2+0x70>
   12070:	d8800917 	ldw	r2,36(sp)
   12074:	8809883a 	mov	r4,r17
   12078:	800b883a 	mov	r5,r16
   1207c:	1880022e 	bgeu	r3,r2,12088 <__gedf2+0x70>
   12080:	000764c0 	call	764c <__fpcmp_parts_d>
   12084:	100d883a 	mov	r6,r2
   12088:	3005883a 	mov	r2,r6
   1208c:	dfc01017 	ldw	ra,64(sp)
   12090:	dc400f17 	ldw	r17,60(sp)
   12094:	dc000e17 	ldw	r16,56(sp)
   12098:	dec01104 	addi	sp,sp,68
   1209c:	f800283a 	ret

000120a0 <__ltdf2>:
   120a0:	deffef04 	addi	sp,sp,-68
   120a4:	dc400f15 	stw	r17,60(sp)
   120a8:	dc400404 	addi	r17,sp,16
   120ac:	2005883a 	mov	r2,r4
   120b0:	2807883a 	mov	r3,r5
   120b4:	dc000e15 	stw	r16,56(sp)
   120b8:	d809883a 	mov	r4,sp
   120bc:	880b883a 	mov	r5,r17
   120c0:	dc000904 	addi	r16,sp,36
   120c4:	d8c00115 	stw	r3,4(sp)
   120c8:	d8800015 	stw	r2,0(sp)
   120cc:	d9800215 	stw	r6,8(sp)
   120d0:	dfc01015 	stw	ra,64(sp)
   120d4:	d9c00315 	stw	r7,12(sp)
   120d8:	00075140 	call	7514 <__unpack_d>
   120dc:	d9000204 	addi	r4,sp,8
   120e0:	800b883a 	mov	r5,r16
   120e4:	00075140 	call	7514 <__unpack_d>
   120e8:	d8800417 	ldw	r2,16(sp)
   120ec:	00c00044 	movi	r3,1
   120f0:	180d883a 	mov	r6,r3
   120f4:	1880062e 	bgeu	r3,r2,12110 <__ltdf2+0x70>
   120f8:	d8800917 	ldw	r2,36(sp)
   120fc:	8809883a 	mov	r4,r17
   12100:	800b883a 	mov	r5,r16
   12104:	1880022e 	bgeu	r3,r2,12110 <__ltdf2+0x70>
   12108:	000764c0 	call	764c <__fpcmp_parts_d>
   1210c:	100d883a 	mov	r6,r2
   12110:	3005883a 	mov	r2,r6
   12114:	dfc01017 	ldw	ra,64(sp)
   12118:	dc400f17 	ldw	r17,60(sp)
   1211c:	dc000e17 	ldw	r16,56(sp)
   12120:	dec01104 	addi	sp,sp,68
   12124:	f800283a 	ret

00012128 <__ledf2>:
   12128:	deffef04 	addi	sp,sp,-68
   1212c:	dc400f15 	stw	r17,60(sp)
   12130:	dc400404 	addi	r17,sp,16
   12134:	2005883a 	mov	r2,r4
   12138:	2807883a 	mov	r3,r5
   1213c:	dc000e15 	stw	r16,56(sp)
   12140:	d809883a 	mov	r4,sp
   12144:	880b883a 	mov	r5,r17
   12148:	dc000904 	addi	r16,sp,36
   1214c:	d8c00115 	stw	r3,4(sp)
   12150:	d8800015 	stw	r2,0(sp)
   12154:	d9800215 	stw	r6,8(sp)
   12158:	dfc01015 	stw	ra,64(sp)
   1215c:	d9c00315 	stw	r7,12(sp)
   12160:	00075140 	call	7514 <__unpack_d>
   12164:	d9000204 	addi	r4,sp,8
   12168:	800b883a 	mov	r5,r16
   1216c:	00075140 	call	7514 <__unpack_d>
   12170:	d8800417 	ldw	r2,16(sp)
   12174:	00c00044 	movi	r3,1
   12178:	180d883a 	mov	r6,r3
   1217c:	1880062e 	bgeu	r3,r2,12198 <__ledf2+0x70>
   12180:	d8800917 	ldw	r2,36(sp)
   12184:	8809883a 	mov	r4,r17
   12188:	800b883a 	mov	r5,r16
   1218c:	1880022e 	bgeu	r3,r2,12198 <__ledf2+0x70>
   12190:	000764c0 	call	764c <__fpcmp_parts_d>
   12194:	100d883a 	mov	r6,r2
   12198:	3005883a 	mov	r2,r6
   1219c:	dfc01017 	ldw	ra,64(sp)
   121a0:	dc400f17 	ldw	r17,60(sp)
   121a4:	dc000e17 	ldw	r16,56(sp)
   121a8:	dec01104 	addi	sp,sp,68
   121ac:	f800283a 	ret

000121b0 <__truncdfsf2>:
   121b0:	defff804 	addi	sp,sp,-32
   121b4:	2005883a 	mov	r2,r4
   121b8:	2807883a 	mov	r3,r5
   121bc:	d809883a 	mov	r4,sp
   121c0:	d9400204 	addi	r5,sp,8
   121c4:	d8c00115 	stw	r3,4(sp)
   121c8:	d8800015 	stw	r2,0(sp)
   121cc:	dfc00715 	stw	ra,28(sp)
   121d0:	00075140 	call	7514 <__unpack_d>
   121d4:	d9c00517 	ldw	r7,20(sp)
   121d8:	da000617 	ldw	r8,24(sp)
   121dc:	02d00034 	movhi	r11,16384
   121e0:	5affffc4 	addi	r11,r11,-1
   121e4:	3812d7ba 	srli	r9,r7,30
   121e8:	401a90ba 	slli	r13,r8,2
   121ec:	3ac4703a 	and	r2,r7,r11
   121f0:	0007883a 	mov	r3,zero
   121f4:	6a52b03a 	or	r9,r13,r9
   121f8:	10c4b03a 	or	r2,r2,r3
   121fc:	d9000217 	ldw	r4,8(sp)
   12200:	d9400317 	ldw	r5,12(sp)
   12204:	d9800417 	ldw	r6,16(sp)
   12208:	480f883a 	mov	r7,r9
   1220c:	10000126 	beq	r2,zero,12214 <__truncdfsf2+0x64>
   12210:	49c00054 	ori	r7,r9,1
   12214:	00126740 	call	12674 <__make_fp>
   12218:	dfc00717 	ldw	ra,28(sp)
   1221c:	dec00804 	addi	sp,sp,32
   12220:	f800283a 	ret

00012224 <__floatunsidf>:
   12224:	defff204 	addi	sp,sp,-56
   12228:	dfc00d15 	stw	ra,52(sp)
   1222c:	ddc00c15 	stw	r23,48(sp)
   12230:	dd800b15 	stw	r22,44(sp)
   12234:	dd400a15 	stw	r21,40(sp)
   12238:	dd000915 	stw	r20,36(sp)
   1223c:	dcc00815 	stw	r19,32(sp)
   12240:	dc800715 	stw	r18,28(sp)
   12244:	dc400615 	stw	r17,24(sp)
   12248:	dc000515 	stw	r16,20(sp)
   1224c:	d8000115 	stw	zero,4(sp)
   12250:	20000f1e 	bne	r4,zero,12290 <__floatunsidf+0x6c>
   12254:	00800084 	movi	r2,2
   12258:	d8800015 	stw	r2,0(sp)
   1225c:	d809883a 	mov	r4,sp
   12260:	00072000 	call	7200 <__pack_d>
   12264:	dfc00d17 	ldw	ra,52(sp)
   12268:	ddc00c17 	ldw	r23,48(sp)
   1226c:	dd800b17 	ldw	r22,44(sp)
   12270:	dd400a17 	ldw	r21,40(sp)
   12274:	dd000917 	ldw	r20,36(sp)
   12278:	dcc00817 	ldw	r19,32(sp)
   1227c:	dc800717 	ldw	r18,28(sp)
   12280:	dc400617 	ldw	r17,24(sp)
   12284:	dc000517 	ldw	r16,20(sp)
   12288:	dec00e04 	addi	sp,sp,56
   1228c:	f800283a 	ret
   12290:	008000c4 	movi	r2,3
   12294:	00c00f04 	movi	r3,60
   12298:	002f883a 	mov	r23,zero
   1229c:	202d883a 	mov	r22,r4
   122a0:	d8800015 	stw	r2,0(sp)
   122a4:	d8c00215 	stw	r3,8(sp)
   122a8:	d9000315 	stw	r4,12(sp)
   122ac:	ddc00415 	stw	r23,16(sp)
   122b0:	00071800 	call	7180 <__clzsi2>
   122b4:	12400744 	addi	r9,r2,29
   122b8:	48000b16 	blt	r9,zero,122e8 <__floatunsidf+0xc4>
   122bc:	483fe726 	beq	r9,zero,1225c <__floatunsidf+0x38>
   122c0:	10bfff44 	addi	r2,r2,-3
   122c4:	10002e16 	blt	r2,zero,12380 <__floatunsidf+0x15c>
   122c8:	b0a2983a 	sll	r17,r22,r2
   122cc:	0021883a 	mov	r16,zero
   122d0:	d8800217 	ldw	r2,8(sp)
   122d4:	dc400415 	stw	r17,16(sp)
   122d8:	dc000315 	stw	r16,12(sp)
   122dc:	1245c83a 	sub	r2,r2,r9
   122e0:	d8800215 	stw	r2,8(sp)
   122e4:	003fdd06 	br	1225c <__floatunsidf+0x38>
   122e8:	0255c83a 	sub	r10,zero,r9
   122ec:	51bff804 	addi	r6,r10,-32
   122f0:	30001b16 	blt	r6,zero,12360 <__floatunsidf+0x13c>
   122f4:	b9a8d83a 	srl	r20,r23,r6
   122f8:	002b883a 	mov	r21,zero
   122fc:	000f883a 	mov	r7,zero
   12300:	01000044 	movi	r4,1
   12304:	0011883a 	mov	r8,zero
   12308:	30002516 	blt	r6,zero,123a0 <__floatunsidf+0x17c>
   1230c:	21a6983a 	sll	r19,r4,r6
   12310:	0025883a 	mov	r18,zero
   12314:	00bfffc4 	movi	r2,-1
   12318:	9089883a 	add	r4,r18,r2
   1231c:	988b883a 	add	r5,r19,r2
   12320:	248d803a 	cmpltu	r6,r4,r18
   12324:	314b883a 	add	r5,r6,r5
   12328:	b104703a 	and	r2,r22,r4
   1232c:	b946703a 	and	r3,r23,r5
   12330:	10c4b03a 	or	r2,r2,r3
   12334:	10000226 	beq	r2,zero,12340 <__floatunsidf+0x11c>
   12338:	01c00044 	movi	r7,1
   1233c:	0011883a 	mov	r8,zero
   12340:	d9000217 	ldw	r4,8(sp)
   12344:	a1c4b03a 	or	r2,r20,r7
   12348:	aa06b03a 	or	r3,r21,r8
   1234c:	2249c83a 	sub	r4,r4,r9
   12350:	d8c00415 	stw	r3,16(sp)
   12354:	d9000215 	stw	r4,8(sp)
   12358:	d8800315 	stw	r2,12(sp)
   1235c:	003fbf06 	br	1225c <__floatunsidf+0x38>
   12360:	bdc7883a 	add	r3,r23,r23
   12364:	008007c4 	movi	r2,31
   12368:	1285c83a 	sub	r2,r2,r10
   1236c:	1886983a 	sll	r3,r3,r2
   12370:	b2a8d83a 	srl	r20,r22,r10
   12374:	baaad83a 	srl	r21,r23,r10
   12378:	1d28b03a 	or	r20,r3,r20
   1237c:	003fdf06 	br	122fc <__floatunsidf+0xd8>
   12380:	b006d07a 	srli	r3,r22,1
   12384:	008007c4 	movi	r2,31
   12388:	1245c83a 	sub	r2,r2,r9
   1238c:	1886d83a 	srl	r3,r3,r2
   12390:	ba62983a 	sll	r17,r23,r9
   12394:	b260983a 	sll	r16,r22,r9
   12398:	1c62b03a 	or	r17,r3,r17
   1239c:	003fcc06 	br	122d0 <__floatunsidf+0xac>
   123a0:	2006d07a 	srli	r3,r4,1
   123a4:	008007c4 	movi	r2,31
   123a8:	1285c83a 	sub	r2,r2,r10
   123ac:	18a6d83a 	srl	r19,r3,r2
   123b0:	22a4983a 	sll	r18,r4,r10
   123b4:	003fd706 	br	12314 <__floatunsidf+0xf0>

000123b8 <udivmodsi4>:
   123b8:	29001b2e 	bgeu	r5,r4,12428 <udivmodsi4+0x70>
   123bc:	28001a16 	blt	r5,zero,12428 <udivmodsi4+0x70>
   123c0:	00800044 	movi	r2,1
   123c4:	0007883a 	mov	r3,zero
   123c8:	01c007c4 	movi	r7,31
   123cc:	00000306 	br	123dc <udivmodsi4+0x24>
   123d0:	19c01326 	beq	r3,r7,12420 <udivmodsi4+0x68>
   123d4:	18c00044 	addi	r3,r3,1
   123d8:	28000416 	blt	r5,zero,123ec <udivmodsi4+0x34>
   123dc:	294b883a 	add	r5,r5,r5
   123e0:	1085883a 	add	r2,r2,r2
   123e4:	293ffa36 	bltu	r5,r4,123d0 <udivmodsi4+0x18>
   123e8:	10000d26 	beq	r2,zero,12420 <udivmodsi4+0x68>
   123ec:	0007883a 	mov	r3,zero
   123f0:	21400236 	bltu	r4,r5,123fc <udivmodsi4+0x44>
   123f4:	2149c83a 	sub	r4,r4,r5
   123f8:	1886b03a 	or	r3,r3,r2
   123fc:	1004d07a 	srli	r2,r2,1
   12400:	280ad07a 	srli	r5,r5,1
   12404:	103ffa1e 	bne	r2,zero,123f0 <udivmodsi4+0x38>
   12408:	30000226 	beq	r6,zero,12414 <udivmodsi4+0x5c>
   1240c:	2005883a 	mov	r2,r4
   12410:	f800283a 	ret
   12414:	1809883a 	mov	r4,r3
   12418:	2005883a 	mov	r2,r4
   1241c:	f800283a 	ret
   12420:	0007883a 	mov	r3,zero
   12424:	003ff806 	br	12408 <udivmodsi4+0x50>
   12428:	00800044 	movi	r2,1
   1242c:	0007883a 	mov	r3,zero
   12430:	003fef06 	br	123f0 <udivmodsi4+0x38>

00012434 <__divsi3>:
   12434:	defffe04 	addi	sp,sp,-8
   12438:	dc000015 	stw	r16,0(sp)
   1243c:	dfc00115 	stw	ra,4(sp)
   12440:	0021883a 	mov	r16,zero
   12444:	20000c16 	blt	r4,zero,12478 <__divsi3+0x44>
   12448:	000d883a 	mov	r6,zero
   1244c:	28000e16 	blt	r5,zero,12488 <__divsi3+0x54>
   12450:	00123b80 	call	123b8 <udivmodsi4>
   12454:	1007883a 	mov	r3,r2
   12458:	8005003a 	cmpeq	r2,r16,zero
   1245c:	1000011e 	bne	r2,zero,12464 <__divsi3+0x30>
   12460:	00c7c83a 	sub	r3,zero,r3
   12464:	1805883a 	mov	r2,r3
   12468:	dfc00117 	ldw	ra,4(sp)
   1246c:	dc000017 	ldw	r16,0(sp)
   12470:	dec00204 	addi	sp,sp,8
   12474:	f800283a 	ret
   12478:	0109c83a 	sub	r4,zero,r4
   1247c:	04000044 	movi	r16,1
   12480:	000d883a 	mov	r6,zero
   12484:	283ff20e 	bge	r5,zero,12450 <__divsi3+0x1c>
   12488:	014bc83a 	sub	r5,zero,r5
   1248c:	8021003a 	cmpeq	r16,r16,zero
   12490:	003fef06 	br	12450 <__divsi3+0x1c>

00012494 <__modsi3>:
   12494:	deffff04 	addi	sp,sp,-4
   12498:	dfc00015 	stw	ra,0(sp)
   1249c:	01800044 	movi	r6,1
   124a0:	2807883a 	mov	r3,r5
   124a4:	20000416 	blt	r4,zero,124b8 <__modsi3+0x24>
   124a8:	28000c16 	blt	r5,zero,124dc <__modsi3+0x48>
   124ac:	dfc00017 	ldw	ra,0(sp)
   124b0:	dec00104 	addi	sp,sp,4
   124b4:	00123b81 	jmpi	123b8 <udivmodsi4>
   124b8:	0109c83a 	sub	r4,zero,r4
   124bc:	28000b16 	blt	r5,zero,124ec <__modsi3+0x58>
   124c0:	180b883a 	mov	r5,r3
   124c4:	01800044 	movi	r6,1
   124c8:	00123b80 	call	123b8 <udivmodsi4>
   124cc:	0085c83a 	sub	r2,zero,r2
   124d0:	dfc00017 	ldw	ra,0(sp)
   124d4:	dec00104 	addi	sp,sp,4
   124d8:	f800283a 	ret
   124dc:	014bc83a 	sub	r5,zero,r5
   124e0:	dfc00017 	ldw	ra,0(sp)
   124e4:	dec00104 	addi	sp,sp,4
   124e8:	00123b81 	jmpi	123b8 <udivmodsi4>
   124ec:	0147c83a 	sub	r3,zero,r5
   124f0:	003ff306 	br	124c0 <__modsi3+0x2c>

000124f4 <__udivsi3>:
   124f4:	000d883a 	mov	r6,zero
   124f8:	00123b81 	jmpi	123b8 <udivmodsi4>

000124fc <__umodsi3>:
   124fc:	01800044 	movi	r6,1
   12500:	00123b81 	jmpi	123b8 <udivmodsi4>

00012504 <__unpack_f>:
   12504:	21800017 	ldw	r6,0(r4)
   12508:	00c02034 	movhi	r3,128
   1250c:	18ffffc4 	addi	r3,r3,-1
   12510:	3004d5fa 	srli	r2,r6,23
   12514:	3008d7fa 	srli	r4,r6,31
   12518:	30ce703a 	and	r7,r6,r3
   1251c:	10c03fcc 	andi	r3,r2,255
   12520:	29000115 	stw	r4,4(r5)
   12524:	1800131e 	bne	r3,zero,12574 <__unpack_f+0x70>
   12528:	38000f26 	beq	r7,zero,12568 <__unpack_f+0x64>
   1252c:	380691fa 	slli	r3,r7,7
   12530:	01bfe084 	movi	r6,-126
   12534:	008000c4 	movi	r2,3
   12538:	01100034 	movhi	r4,16384
   1253c:	213fffc4 	addi	r4,r4,-1
   12540:	28800015 	stw	r2,0(r5)
   12544:	29800215 	stw	r6,8(r5)
   12548:	20c00536 	bltu	r4,r3,12560 <__unpack_f+0x5c>
   1254c:	3005883a 	mov	r2,r6
   12550:	18c7883a 	add	r3,r3,r3
   12554:	10bfffc4 	addi	r2,r2,-1
   12558:	20fffd2e 	bgeu	r4,r3,12550 <__unpack_f+0x4c>
   1255c:	28800215 	stw	r2,8(r5)
   12560:	28c00315 	stw	r3,12(r5)
   12564:	f800283a 	ret
   12568:	00800084 	movi	r2,2
   1256c:	28800015 	stw	r2,0(r5)
   12570:	f800283a 	ret
   12574:	00803fc4 	movi	r2,255
   12578:	18800826 	beq	r3,r2,1259c <__unpack_f+0x98>
   1257c:	380491fa 	slli	r2,r7,7
   12580:	18ffe044 	addi	r3,r3,-127
   12584:	28c00215 	stw	r3,8(r5)
   12588:	10900034 	orhi	r2,r2,16384
   1258c:	28800315 	stw	r2,12(r5)
   12590:	008000c4 	movi	r2,3
   12594:	28800015 	stw	r2,0(r5)
   12598:	f800283a 	ret
   1259c:	3800031e 	bne	r7,zero,125ac <__unpack_f+0xa8>
   125a0:	00800104 	movi	r2,4
   125a4:	28800015 	stw	r2,0(r5)
   125a8:	f800283a 	ret
   125ac:	3080042c 	andhi	r2,r6,16
   125b0:	10000426 	beq	r2,zero,125c4 <__unpack_f+0xc0>
   125b4:	00800044 	movi	r2,1
   125b8:	28800015 	stw	r2,0(r5)
   125bc:	29c00315 	stw	r7,12(r5)
   125c0:	f800283a 	ret
   125c4:	28000015 	stw	zero,0(r5)
   125c8:	003ffc06 	br	125bc <__unpack_f+0xb8>

000125cc <__fpcmp_parts_f>:
   125cc:	21800017 	ldw	r6,0(r4)
   125d0:	00c00044 	movi	r3,1
   125d4:	19800a2e 	bgeu	r3,r6,12600 <__fpcmp_parts_f+0x34>
   125d8:	28800017 	ldw	r2,0(r5)
   125dc:	1880082e 	bgeu	r3,r2,12600 <__fpcmp_parts_f+0x34>
   125e0:	00c00104 	movi	r3,4
   125e4:	30c01e26 	beq	r6,r3,12660 <__fpcmp_parts_f+0x94>
   125e8:	10c01a26 	beq	r2,r3,12654 <__fpcmp_parts_f+0x88>
   125ec:	00c00084 	movi	r3,2
   125f0:	30c00526 	beq	r6,r3,12608 <__fpcmp_parts_f+0x3c>
   125f4:	10c0071e 	bne	r2,r3,12614 <__fpcmp_parts_f+0x48>
   125f8:	20800117 	ldw	r2,4(r4)
   125fc:	1000091e 	bne	r2,zero,12624 <__fpcmp_parts_f+0x58>
   12600:	00800044 	movi	r2,1
   12604:	f800283a 	ret
   12608:	10c0121e 	bne	r2,r3,12654 <__fpcmp_parts_f+0x88>
   1260c:	0005883a 	mov	r2,zero
   12610:	f800283a 	ret
   12614:	20c00117 	ldw	r3,4(r4)
   12618:	28800117 	ldw	r2,4(r5)
   1261c:	18800326 	beq	r3,r2,1262c <__fpcmp_parts_f+0x60>
   12620:	183ff726 	beq	r3,zero,12600 <__fpcmp_parts_f+0x34>
   12624:	00bfffc4 	movi	r2,-1
   12628:	f800283a 	ret
   1262c:	21800217 	ldw	r6,8(r4)
   12630:	28800217 	ldw	r2,8(r5)
   12634:	11bffa16 	blt	r2,r6,12620 <__fpcmp_parts_f+0x54>
   12638:	30800416 	blt	r6,r2,1264c <__fpcmp_parts_f+0x80>
   1263c:	21000317 	ldw	r4,12(r4)
   12640:	29400317 	ldw	r5,12(r5)
   12644:	293ff636 	bltu	r5,r4,12620 <__fpcmp_parts_f+0x54>
   12648:	217ff02e 	bgeu	r4,r5,1260c <__fpcmp_parts_f+0x40>
   1264c:	183fec1e 	bne	r3,zero,12600 <__fpcmp_parts_f+0x34>
   12650:	003ff406 	br	12624 <__fpcmp_parts_f+0x58>
   12654:	28800117 	ldw	r2,4(r5)
   12658:	103fe91e 	bne	r2,zero,12600 <__fpcmp_parts_f+0x34>
   1265c:	003ff106 	br	12624 <__fpcmp_parts_f+0x58>
   12660:	11bfe51e 	bne	r2,r6,125f8 <__fpcmp_parts_f+0x2c>
   12664:	28c00117 	ldw	r3,4(r5)
   12668:	20800117 	ldw	r2,4(r4)
   1266c:	1885c83a 	sub	r2,r3,r2
   12670:	f800283a 	ret

00012674 <__make_fp>:
   12674:	defffb04 	addi	sp,sp,-20
   12678:	d9000015 	stw	r4,0(sp)
   1267c:	d809883a 	mov	r4,sp
   12680:	dfc00415 	stw	ra,16(sp)
   12684:	d9400115 	stw	r5,4(sp)
   12688:	d9800215 	stw	r6,8(sp)
   1268c:	d9c00315 	stw	r7,12(sp)
   12690:	00126a00 	call	126a0 <__pack_f>
   12694:	dfc00417 	ldw	ra,16(sp)
   12698:	dec00504 	addi	sp,sp,20
   1269c:	f800283a 	ret

000126a0 <__pack_f>:
   126a0:	20c00017 	ldw	r3,0(r4)
   126a4:	01c00044 	movi	r7,1
   126a8:	21800317 	ldw	r6,12(r4)
   126ac:	21400117 	ldw	r5,4(r4)
   126b0:	38c02d2e 	bgeu	r7,r3,12768 <__pack_f+0xc8>
   126b4:	00800104 	movi	r2,4
   126b8:	18802826 	beq	r3,r2,1275c <__pack_f+0xbc>
   126bc:	00800084 	movi	r2,2
   126c0:	18800126 	beq	r3,r2,126c8 <__pack_f+0x28>
   126c4:	3000101e 	bne	r6,zero,12708 <__pack_f+0x68>
   126c8:	000d883a 	mov	r6,zero
   126cc:	0007883a 	mov	r3,zero
   126d0:	19003fcc 	andi	r4,r3,255
   126d4:	200895fa 	slli	r4,r4,23
   126d8:	00c02034 	movhi	r3,128
   126dc:	18ffffc4 	addi	r3,r3,-1
   126e0:	30c6703a 	and	r3,r6,r3
   126e4:	10a0002c 	andhi	r2,r2,32768
   126e8:	10c4b03a 	or	r2,r2,r3
   126ec:	280a97fa 	slli	r5,r5,31
   126f0:	1104b03a 	or	r2,r2,r4
   126f4:	00e00034 	movhi	r3,32768
   126f8:	18ffffc4 	addi	r3,r3,-1
   126fc:	10c4703a 	and	r2,r2,r3
   12700:	1144b03a 	or	r2,r2,r5
   12704:	f800283a 	ret
   12708:	21000217 	ldw	r4,8(r4)
   1270c:	00bfe084 	movi	r2,-126
   12710:	20801b16 	blt	r4,r2,12780 <__pack_f+0xe0>
   12714:	00801fc4 	movi	r2,127
   12718:	11001016 	blt	r2,r4,1275c <__pack_f+0xbc>
   1271c:	308e703a 	and	r7,r6,r2
   12720:	2087883a 	add	r3,r4,r2
   12724:	00801004 	movi	r2,64
   12728:	38800526 	beq	r7,r2,12740 <__pack_f+0xa0>
   1272c:	31800fc4 	addi	r6,r6,63
   12730:	30000716 	blt	r6,zero,12750 <__pack_f+0xb0>
   12734:	300490ba 	slli	r2,r6,2
   12738:	100cd27a 	srli	r6,r2,9
   1273c:	003fe406 	br	126d0 <__pack_f+0x30>
   12740:	3080200c 	andi	r2,r6,128
   12744:	103ffa26 	beq	r2,zero,12730 <__pack_f+0x90>
   12748:	31cd883a 	add	r6,r6,r7
   1274c:	003ff806 	br	12730 <__pack_f+0x90>
   12750:	300cd07a 	srli	r6,r6,1
   12754:	18c00044 	addi	r3,r3,1
   12758:	003ff606 	br	12734 <__pack_f+0x94>
   1275c:	000d883a 	mov	r6,zero
   12760:	00ffffc4 	movi	r3,-1
   12764:	003fda06 	br	126d0 <__pack_f+0x30>
   12768:	31800434 	orhi	r6,r6,16
   1276c:	00802034 	movhi	r2,128
   12770:	10bfffc4 	addi	r2,r2,-1
   12774:	308c703a 	and	r6,r6,r2
   12778:	00ffffc4 	movi	r3,-1
   1277c:	003fd406 	br	126d0 <__pack_f+0x30>
   12780:	1109c83a 	sub	r4,r2,r4
   12784:	00800644 	movi	r2,25
   12788:	11001216 	blt	r2,r4,127d4 <__pack_f+0x134>
   1278c:	3904983a 	sll	r2,r7,r4
   12790:	3106d83a 	srl	r3,r6,r4
   12794:	10bfffc4 	addi	r2,r2,-1
   12798:	3084703a 	and	r2,r6,r2
   1279c:	1004c03a 	cmpne	r2,r2,zero
   127a0:	1886b03a 	or	r3,r3,r2
   127a4:	19001fcc 	andi	r4,r3,127
   127a8:	00801004 	movi	r2,64
   127ac:	20800c26 	beq	r4,r2,127e0 <__pack_f+0x140>
   127b0:	18c00fc4 	addi	r3,r3,63
   127b4:	00900034 	movhi	r2,16384
   127b8:	10bfffc4 	addi	r2,r2,-1
   127bc:	180cd1fa 	srli	r6,r3,7
   127c0:	10c7803a 	cmpltu	r3,r2,r3
   127c4:	00802034 	movhi	r2,128
   127c8:	10bfffc4 	addi	r2,r2,-1
   127cc:	308c703a 	and	r6,r6,r2
   127d0:	003fbf06 	br	126d0 <__pack_f+0x30>
   127d4:	0007883a 	mov	r3,zero
   127d8:	000d883a 	mov	r6,zero
   127dc:	003ff906 	br	127c4 <__pack_f+0x124>
   127e0:	1880200c 	andi	r2,r3,128
   127e4:	10000126 	beq	r2,zero,127ec <__pack_f+0x14c>
   127e8:	1907883a 	add	r3,r3,r4
   127ec:	180cd1fa 	srli	r6,r3,7
   127f0:	00900034 	movhi	r2,16384
   127f4:	10bfffc4 	addi	r2,r2,-1
   127f8:	10c7803a 	cmpltu	r3,r2,r3
   127fc:	003ff106 	br	127c4 <__pack_f+0x124>

00012800 <close>:
   12800:	defff804 	addi	sp,sp,-32
   12804:	dfc00715 	stw	ra,28(sp)
   12808:	df000615 	stw	fp,24(sp)
   1280c:	df000604 	addi	fp,sp,24
   12810:	e13ffc15 	stw	r4,-16(fp)
   12814:	e0bffc17 	ldw	r2,-16(fp)
   12818:	1004803a 	cmplt	r2,r2,zero
   1281c:	1000081e 	bne	r2,zero,12840 <close+0x40>
   12820:	e0bffc17 	ldw	r2,-16(fp)
   12824:	10800324 	muli	r2,r2,12
   12828:	1007883a 	mov	r3,r2
   1282c:	00820034 	movhi	r2,2048
   12830:	1084a204 	addi	r2,r2,4744
   12834:	1887883a 	add	r3,r3,r2
   12838:	e0ffff15 	stw	r3,-4(fp)
   1283c:	00000106 	br	12844 <close+0x44>
   12840:	e03fff15 	stw	zero,-4(fp)
   12844:	e0bfff17 	ldw	r2,-4(fp)
   12848:	e0bffb15 	stw	r2,-20(fp)
   1284c:	e0bffb17 	ldw	r2,-20(fp)
   12850:	1005003a 	cmpeq	r2,r2,zero
   12854:	10001d1e 	bne	r2,zero,128cc <close+0xcc>
   12858:	e0bffb17 	ldw	r2,-20(fp)
   1285c:	10800017 	ldw	r2,0(r2)
   12860:	10800417 	ldw	r2,16(r2)
   12864:	1005003a 	cmpeq	r2,r2,zero
   12868:	1000071e 	bne	r2,zero,12888 <close+0x88>
   1286c:	e0bffb17 	ldw	r2,-20(fp)
   12870:	10800017 	ldw	r2,0(r2)
   12874:	10800417 	ldw	r2,16(r2)
   12878:	e13ffb17 	ldw	r4,-20(fp)
   1287c:	103ee83a 	callr	r2
   12880:	e0bffe15 	stw	r2,-8(fp)
   12884:	00000106 	br	1288c <close+0x8c>
   12888:	e03ffe15 	stw	zero,-8(fp)
   1288c:	e0bffe17 	ldw	r2,-8(fp)
   12890:	e0bffa15 	stw	r2,-24(fp)
   12894:	e13ffc17 	ldw	r4,-16(fp)
   12898:	0012f580 	call	12f58 <alt_release_fd>
   1289c:	e0bffa17 	ldw	r2,-24(fp)
   128a0:	1004403a 	cmpge	r2,r2,zero
   128a4:	1000071e 	bne	r2,zero,128c4 <close+0xc4>
   128a8:	00128fc0 	call	128fc <alt_get_errno>
   128ac:	e0fffa17 	ldw	r3,-24(fp)
   128b0:	00c7c83a 	sub	r3,zero,r3
   128b4:	10c00015 	stw	r3,0(r2)
   128b8:	00bfffc4 	movi	r2,-1
   128bc:	e0bffd15 	stw	r2,-12(fp)
   128c0:	00000806 	br	128e4 <close+0xe4>
   128c4:	e03ffd15 	stw	zero,-12(fp)
   128c8:	00000606 	br	128e4 <close+0xe4>
   128cc:	00128fc0 	call	128fc <alt_get_errno>
   128d0:	1007883a 	mov	r3,r2
   128d4:	00801444 	movi	r2,81
   128d8:	18800015 	stw	r2,0(r3)
   128dc:	00bfffc4 	movi	r2,-1
   128e0:	e0bffd15 	stw	r2,-12(fp)
   128e4:	e0bffd17 	ldw	r2,-12(fp)
   128e8:	e037883a 	mov	sp,fp
   128ec:	dfc00117 	ldw	ra,4(sp)
   128f0:	df000017 	ldw	fp,0(sp)
   128f4:	dec00204 	addi	sp,sp,8
   128f8:	f800283a 	ret

000128fc <alt_get_errno>:
   128fc:	defffd04 	addi	sp,sp,-12
   12900:	dfc00215 	stw	ra,8(sp)
   12904:	df000115 	stw	fp,4(sp)
   12908:	df000104 	addi	fp,sp,4
   1290c:	00820034 	movhi	r2,2048
   12910:	108a1304 	addi	r2,r2,10316
   12914:	10800017 	ldw	r2,0(r2)
   12918:	1005003a 	cmpeq	r2,r2,zero
   1291c:	1000061e 	bne	r2,zero,12938 <alt_get_errno+0x3c>
   12920:	00820034 	movhi	r2,2048
   12924:	108a1304 	addi	r2,r2,10316
   12928:	10800017 	ldw	r2,0(r2)
   1292c:	103ee83a 	callr	r2
   12930:	e0bfff15 	stw	r2,-4(fp)
   12934:	00000306 	br	12944 <alt_get_errno+0x48>
   12938:	00820034 	movhi	r2,2048
   1293c:	108a4504 	addi	r2,r2,10516
   12940:	e0bfff15 	stw	r2,-4(fp)
   12944:	e0bfff17 	ldw	r2,-4(fp)
   12948:	e037883a 	mov	sp,fp
   1294c:	dfc00117 	ldw	ra,4(sp)
   12950:	df000017 	ldw	fp,0(sp)
   12954:	dec00204 	addi	sp,sp,8
   12958:	f800283a 	ret

0001295c <alt_dev_null_write>:
   1295c:	defffc04 	addi	sp,sp,-16
   12960:	df000315 	stw	fp,12(sp)
   12964:	df000304 	addi	fp,sp,12
   12968:	e13ffd15 	stw	r4,-12(fp)
   1296c:	e17ffe15 	stw	r5,-8(fp)
   12970:	e1bfff15 	stw	r6,-4(fp)
   12974:	e0bfff17 	ldw	r2,-4(fp)
   12978:	e037883a 	mov	sp,fp
   1297c:	df000017 	ldw	fp,0(sp)
   12980:	dec00104 	addi	sp,sp,4
   12984:	f800283a 	ret

00012988 <fstat>:
   12988:	defff904 	addi	sp,sp,-28
   1298c:	dfc00615 	stw	ra,24(sp)
   12990:	df000515 	stw	fp,20(sp)
   12994:	df000504 	addi	fp,sp,20
   12998:	e13ffc15 	stw	r4,-16(fp)
   1299c:	e17ffd15 	stw	r5,-12(fp)
   129a0:	e0bffc17 	ldw	r2,-16(fp)
   129a4:	1004803a 	cmplt	r2,r2,zero
   129a8:	1000081e 	bne	r2,zero,129cc <fstat+0x44>
   129ac:	e0bffc17 	ldw	r2,-16(fp)
   129b0:	10800324 	muli	r2,r2,12
   129b4:	1007883a 	mov	r3,r2
   129b8:	00820034 	movhi	r2,2048
   129bc:	1084a204 	addi	r2,r2,4744
   129c0:	1887883a 	add	r3,r3,r2
   129c4:	e0ffff15 	stw	r3,-4(fp)
   129c8:	00000106 	br	129d0 <fstat+0x48>
   129cc:	e03fff15 	stw	zero,-4(fp)
   129d0:	e0bfff17 	ldw	r2,-4(fp)
   129d4:	e0bffb15 	stw	r2,-20(fp)
   129d8:	e0bffb17 	ldw	r2,-20(fp)
   129dc:	1005003a 	cmpeq	r2,r2,zero
   129e0:	1000121e 	bne	r2,zero,12a2c <fstat+0xa4>
   129e4:	e0bffb17 	ldw	r2,-20(fp)
   129e8:	10800017 	ldw	r2,0(r2)
   129ec:	10800817 	ldw	r2,32(r2)
   129f0:	1005003a 	cmpeq	r2,r2,zero
   129f4:	1000081e 	bne	r2,zero,12a18 <fstat+0x90>
   129f8:	e0bffb17 	ldw	r2,-20(fp)
   129fc:	10800017 	ldw	r2,0(r2)
   12a00:	10800817 	ldw	r2,32(r2)
   12a04:	e13ffb17 	ldw	r4,-20(fp)
   12a08:	e17ffd17 	ldw	r5,-12(fp)
   12a0c:	103ee83a 	callr	r2
   12a10:	e0bffe15 	stw	r2,-8(fp)
   12a14:	00000b06 	br	12a44 <fstat+0xbc>
   12a18:	e0fffd17 	ldw	r3,-12(fp)
   12a1c:	00880004 	movi	r2,8192
   12a20:	18800115 	stw	r2,4(r3)
   12a24:	e03ffe15 	stw	zero,-8(fp)
   12a28:	00000606 	br	12a44 <fstat+0xbc>
   12a2c:	0012a5c0 	call	12a5c <alt_get_errno>
   12a30:	1007883a 	mov	r3,r2
   12a34:	00801444 	movi	r2,81
   12a38:	18800015 	stw	r2,0(r3)
   12a3c:	00bfffc4 	movi	r2,-1
   12a40:	e0bffe15 	stw	r2,-8(fp)
   12a44:	e0bffe17 	ldw	r2,-8(fp)
   12a48:	e037883a 	mov	sp,fp
   12a4c:	dfc00117 	ldw	ra,4(sp)
   12a50:	df000017 	ldw	fp,0(sp)
   12a54:	dec00204 	addi	sp,sp,8
   12a58:	f800283a 	ret

00012a5c <alt_get_errno>:
   12a5c:	defffd04 	addi	sp,sp,-12
   12a60:	dfc00215 	stw	ra,8(sp)
   12a64:	df000115 	stw	fp,4(sp)
   12a68:	df000104 	addi	fp,sp,4
   12a6c:	00820034 	movhi	r2,2048
   12a70:	108a1304 	addi	r2,r2,10316
   12a74:	10800017 	ldw	r2,0(r2)
   12a78:	1005003a 	cmpeq	r2,r2,zero
   12a7c:	1000061e 	bne	r2,zero,12a98 <alt_get_errno+0x3c>
   12a80:	00820034 	movhi	r2,2048
   12a84:	108a1304 	addi	r2,r2,10316
   12a88:	10800017 	ldw	r2,0(r2)
   12a8c:	103ee83a 	callr	r2
   12a90:	e0bfff15 	stw	r2,-4(fp)
   12a94:	00000306 	br	12aa4 <alt_get_errno+0x48>
   12a98:	00820034 	movhi	r2,2048
   12a9c:	108a4504 	addi	r2,r2,10516
   12aa0:	e0bfff15 	stw	r2,-4(fp)
   12aa4:	e0bfff17 	ldw	r2,-4(fp)
   12aa8:	e037883a 	mov	sp,fp
   12aac:	dfc00117 	ldw	ra,4(sp)
   12ab0:	df000017 	ldw	fp,0(sp)
   12ab4:	dec00204 	addi	sp,sp,8
   12ab8:	f800283a 	ret

00012abc <isatty>:
   12abc:	deffeb04 	addi	sp,sp,-84
   12ac0:	dfc01415 	stw	ra,80(sp)
   12ac4:	df001315 	stw	fp,76(sp)
   12ac8:	df001304 	addi	fp,sp,76
   12acc:	e13ffd15 	stw	r4,-12(fp)
   12ad0:	e0bffd17 	ldw	r2,-12(fp)
   12ad4:	1004803a 	cmplt	r2,r2,zero
   12ad8:	1000081e 	bne	r2,zero,12afc <isatty+0x40>
   12adc:	e0bffd17 	ldw	r2,-12(fp)
   12ae0:	10800324 	muli	r2,r2,12
   12ae4:	1007883a 	mov	r3,r2
   12ae8:	00820034 	movhi	r2,2048
   12aec:	1084a204 	addi	r2,r2,4744
   12af0:	1887883a 	add	r3,r3,r2
   12af4:	e0ffff15 	stw	r3,-4(fp)
   12af8:	00000106 	br	12b00 <isatty+0x44>
   12afc:	e03fff15 	stw	zero,-4(fp)
   12b00:	e0bfff17 	ldw	r2,-4(fp)
   12b04:	e0bfed15 	stw	r2,-76(fp)
   12b08:	e0bfed17 	ldw	r2,-76(fp)
   12b0c:	1005003a 	cmpeq	r2,r2,zero
   12b10:	10000f1e 	bne	r2,zero,12b50 <isatty+0x94>
   12b14:	e0bfed17 	ldw	r2,-76(fp)
   12b18:	10800017 	ldw	r2,0(r2)
   12b1c:	10800817 	ldw	r2,32(r2)
   12b20:	1004c03a 	cmpne	r2,r2,zero
   12b24:	1000031e 	bne	r2,zero,12b34 <isatty+0x78>
   12b28:	00800044 	movi	r2,1
   12b2c:	e0bffe15 	stw	r2,-8(fp)
   12b30:	00000c06 	br	12b64 <isatty+0xa8>
   12b34:	e17fee04 	addi	r5,fp,-72
   12b38:	e13ffd17 	ldw	r4,-12(fp)
   12b3c:	00129880 	call	12988 <fstat>
   12b40:	e0bfef17 	ldw	r2,-68(fp)
   12b44:	10880020 	cmpeqi	r2,r2,8192
   12b48:	e0bffe15 	stw	r2,-8(fp)
   12b4c:	00000506 	br	12b64 <isatty+0xa8>
   12b50:	0012b7c0 	call	12b7c <alt_get_errno>
   12b54:	1007883a 	mov	r3,r2
   12b58:	00801444 	movi	r2,81
   12b5c:	18800015 	stw	r2,0(r3)
   12b60:	e03ffe15 	stw	zero,-8(fp)
   12b64:	e0bffe17 	ldw	r2,-8(fp)
   12b68:	e037883a 	mov	sp,fp
   12b6c:	dfc00117 	ldw	ra,4(sp)
   12b70:	df000017 	ldw	fp,0(sp)
   12b74:	dec00204 	addi	sp,sp,8
   12b78:	f800283a 	ret

00012b7c <alt_get_errno>:
   12b7c:	defffd04 	addi	sp,sp,-12
   12b80:	dfc00215 	stw	ra,8(sp)
   12b84:	df000115 	stw	fp,4(sp)
   12b88:	df000104 	addi	fp,sp,4
   12b8c:	00820034 	movhi	r2,2048
   12b90:	108a1304 	addi	r2,r2,10316
   12b94:	10800017 	ldw	r2,0(r2)
   12b98:	1005003a 	cmpeq	r2,r2,zero
   12b9c:	1000061e 	bne	r2,zero,12bb8 <alt_get_errno+0x3c>
   12ba0:	00820034 	movhi	r2,2048
   12ba4:	108a1304 	addi	r2,r2,10316
   12ba8:	10800017 	ldw	r2,0(r2)
   12bac:	103ee83a 	callr	r2
   12bb0:	e0bfff15 	stw	r2,-4(fp)
   12bb4:	00000306 	br	12bc4 <alt_get_errno+0x48>
   12bb8:	00820034 	movhi	r2,2048
   12bbc:	108a4504 	addi	r2,r2,10516
   12bc0:	e0bfff15 	stw	r2,-4(fp)
   12bc4:	e0bfff17 	ldw	r2,-4(fp)
   12bc8:	e037883a 	mov	sp,fp
   12bcc:	dfc00117 	ldw	ra,4(sp)
   12bd0:	df000017 	ldw	fp,0(sp)
   12bd4:	dec00204 	addi	sp,sp,8
   12bd8:	f800283a 	ret

00012bdc <lseek>:
   12bdc:	defff804 	addi	sp,sp,-32
   12be0:	dfc00715 	stw	ra,28(sp)
   12be4:	df000615 	stw	fp,24(sp)
   12be8:	df000604 	addi	fp,sp,24
   12bec:	e13ffc15 	stw	r4,-16(fp)
   12bf0:	e17ffd15 	stw	r5,-12(fp)
   12bf4:	e1bffe15 	stw	r6,-8(fp)
   12bf8:	e03ffa15 	stw	zero,-24(fp)
   12bfc:	e0bffc17 	ldw	r2,-16(fp)
   12c00:	1004803a 	cmplt	r2,r2,zero
   12c04:	1000081e 	bne	r2,zero,12c28 <lseek+0x4c>
   12c08:	e0bffc17 	ldw	r2,-16(fp)
   12c0c:	10800324 	muli	r2,r2,12
   12c10:	1007883a 	mov	r3,r2
   12c14:	00820034 	movhi	r2,2048
   12c18:	1084a204 	addi	r2,r2,4744
   12c1c:	1887883a 	add	r3,r3,r2
   12c20:	e0ffff15 	stw	r3,-4(fp)
   12c24:	00000106 	br	12c2c <lseek+0x50>
   12c28:	e03fff15 	stw	zero,-4(fp)
   12c2c:	e0bfff17 	ldw	r2,-4(fp)
   12c30:	e0bffb15 	stw	r2,-20(fp)
   12c34:	e0bffb17 	ldw	r2,-20(fp)
   12c38:	1005003a 	cmpeq	r2,r2,zero
   12c3c:	1000111e 	bne	r2,zero,12c84 <lseek+0xa8>
   12c40:	e0bffb17 	ldw	r2,-20(fp)
   12c44:	10800017 	ldw	r2,0(r2)
   12c48:	10800717 	ldw	r2,28(r2)
   12c4c:	1005003a 	cmpeq	r2,r2,zero
   12c50:	1000091e 	bne	r2,zero,12c78 <lseek+0x9c>
   12c54:	e0bffb17 	ldw	r2,-20(fp)
   12c58:	10800017 	ldw	r2,0(r2)
   12c5c:	10800717 	ldw	r2,28(r2)
   12c60:	e13ffb17 	ldw	r4,-20(fp)
   12c64:	e17ffd17 	ldw	r5,-12(fp)
   12c68:	e1bffe17 	ldw	r6,-8(fp)
   12c6c:	103ee83a 	callr	r2
   12c70:	e0bffa15 	stw	r2,-24(fp)
   12c74:	00000506 	br	12c8c <lseek+0xb0>
   12c78:	00bfde84 	movi	r2,-134
   12c7c:	e0bffa15 	stw	r2,-24(fp)
   12c80:	00000206 	br	12c8c <lseek+0xb0>
   12c84:	00bfebc4 	movi	r2,-81
   12c88:	e0bffa15 	stw	r2,-24(fp)
   12c8c:	e0bffa17 	ldw	r2,-24(fp)
   12c90:	1004403a 	cmpge	r2,r2,zero
   12c94:	1000071e 	bne	r2,zero,12cb4 <lseek+0xd8>
   12c98:	0012ccc0 	call	12ccc <alt_get_errno>
   12c9c:	1007883a 	mov	r3,r2
   12ca0:	e0bffa17 	ldw	r2,-24(fp)
   12ca4:	0085c83a 	sub	r2,zero,r2
   12ca8:	18800015 	stw	r2,0(r3)
   12cac:	00bfffc4 	movi	r2,-1
   12cb0:	e0bffa15 	stw	r2,-24(fp)
   12cb4:	e0bffa17 	ldw	r2,-24(fp)
   12cb8:	e037883a 	mov	sp,fp
   12cbc:	dfc00117 	ldw	ra,4(sp)
   12cc0:	df000017 	ldw	fp,0(sp)
   12cc4:	dec00204 	addi	sp,sp,8
   12cc8:	f800283a 	ret

00012ccc <alt_get_errno>:
   12ccc:	defffd04 	addi	sp,sp,-12
   12cd0:	dfc00215 	stw	ra,8(sp)
   12cd4:	df000115 	stw	fp,4(sp)
   12cd8:	df000104 	addi	fp,sp,4
   12cdc:	00820034 	movhi	r2,2048
   12ce0:	108a1304 	addi	r2,r2,10316
   12ce4:	10800017 	ldw	r2,0(r2)
   12ce8:	1005003a 	cmpeq	r2,r2,zero
   12cec:	1000061e 	bne	r2,zero,12d08 <alt_get_errno+0x3c>
   12cf0:	00820034 	movhi	r2,2048
   12cf4:	108a1304 	addi	r2,r2,10316
   12cf8:	10800017 	ldw	r2,0(r2)
   12cfc:	103ee83a 	callr	r2
   12d00:	e0bfff15 	stw	r2,-4(fp)
   12d04:	00000306 	br	12d14 <alt_get_errno+0x48>
   12d08:	00820034 	movhi	r2,2048
   12d0c:	108a4504 	addi	r2,r2,10516
   12d10:	e0bfff15 	stw	r2,-4(fp)
   12d14:	e0bfff17 	ldw	r2,-4(fp)
   12d18:	e037883a 	mov	sp,fp
   12d1c:	dfc00117 	ldw	ra,4(sp)
   12d20:	df000017 	ldw	fp,0(sp)
   12d24:	dec00204 	addi	sp,sp,8
   12d28:	f800283a 	ret

00012d2c <alt_main>:
   12d2c:	defffd04 	addi	sp,sp,-12
   12d30:	dfc00215 	stw	ra,8(sp)
   12d34:	df000115 	stw	fp,4(sp)
   12d38:	df000104 	addi	fp,sp,4
   12d3c:	0009883a 	mov	r4,zero
   12d40:	00131f40 	call	131f4 <alt_irq_init>
   12d44:	00132280 	call	13228 <alt_sys_init>
   12d48:	01020034 	movhi	r4,2048
   12d4c:	2101ab04 	addi	r4,r4,1708
   12d50:	01420034 	movhi	r5,2048
   12d54:	2941ab04 	addi	r5,r5,1708
   12d58:	01820034 	movhi	r6,2048
   12d5c:	3181ab04 	addi	r6,r6,1708
   12d60:	0019d140 	call	19d14 <alt_io_redirect>
   12d64:	0019a240 	call	19a24 <_do_ctors>
   12d68:	010000b4 	movhi	r4,2
   12d6c:	2126a204 	addi	r4,r4,-25976
   12d70:	001ae080 	call	1ae08 <atexit>
   12d74:	d1204917 	ldw	r4,-32476(gp)
   12d78:	d1604a17 	ldw	r5,-32472(gp)
   12d7c:	d1a04b17 	ldw	r6,-32468(gp)
   12d80:	00062880 	call	6288 <main>
   12d84:	e0bfff15 	stw	r2,-4(fp)
   12d88:	01000044 	movi	r4,1
   12d8c:	00128000 	call	12800 <close>
   12d90:	e13fff17 	ldw	r4,-4(fp)
   12d94:	001ae1c0 	call	1ae1c <exit>

00012d98 <__malloc_lock>:
   12d98:	defffe04 	addi	sp,sp,-8
   12d9c:	df000115 	stw	fp,4(sp)
   12da0:	df000104 	addi	fp,sp,4
   12da4:	e13fff15 	stw	r4,-4(fp)
   12da8:	e037883a 	mov	sp,fp
   12dac:	df000017 	ldw	fp,0(sp)
   12db0:	dec00104 	addi	sp,sp,4
   12db4:	f800283a 	ret

00012db8 <__malloc_unlock>:
   12db8:	defffe04 	addi	sp,sp,-8
   12dbc:	df000115 	stw	fp,4(sp)
   12dc0:	df000104 	addi	fp,sp,4
   12dc4:	e13fff15 	stw	r4,-4(fp)
   12dc8:	e037883a 	mov	sp,fp
   12dcc:	df000017 	ldw	fp,0(sp)
   12dd0:	dec00104 	addi	sp,sp,4
   12dd4:	f800283a 	ret

00012dd8 <read>:
   12dd8:	defff704 	addi	sp,sp,-36
   12ddc:	dfc00815 	stw	ra,32(sp)
   12de0:	df000715 	stw	fp,28(sp)
   12de4:	df000704 	addi	fp,sp,28
   12de8:	e13ffb15 	stw	r4,-20(fp)
   12dec:	e17ffc15 	stw	r5,-16(fp)
   12df0:	e1bffd15 	stw	r6,-12(fp)
   12df4:	e0bffb17 	ldw	r2,-20(fp)
   12df8:	1004803a 	cmplt	r2,r2,zero
   12dfc:	1000081e 	bne	r2,zero,12e20 <read+0x48>
   12e00:	e0bffb17 	ldw	r2,-20(fp)
   12e04:	10800324 	muli	r2,r2,12
   12e08:	1007883a 	mov	r3,r2
   12e0c:	00820034 	movhi	r2,2048
   12e10:	1084a204 	addi	r2,r2,4744
   12e14:	1887883a 	add	r3,r3,r2
   12e18:	e0ffff15 	stw	r3,-4(fp)
   12e1c:	00000106 	br	12e24 <read+0x4c>
   12e20:	e03fff15 	stw	zero,-4(fp)
   12e24:	e0bfff17 	ldw	r2,-4(fp)
   12e28:	e0bffa15 	stw	r2,-24(fp)
   12e2c:	e0bffa17 	ldw	r2,-24(fp)
   12e30:	1005003a 	cmpeq	r2,r2,zero
   12e34:	1000241e 	bne	r2,zero,12ec8 <read+0xf0>
   12e38:	e0bffa17 	ldw	r2,-24(fp)
   12e3c:	10800217 	ldw	r2,8(r2)
   12e40:	108000cc 	andi	r2,r2,3
   12e44:	10800060 	cmpeqi	r2,r2,1
   12e48:	10001a1e 	bne	r2,zero,12eb4 <read+0xdc>
   12e4c:	e0bffa17 	ldw	r2,-24(fp)
   12e50:	10800017 	ldw	r2,0(r2)
   12e54:	10800517 	ldw	r2,20(r2)
   12e58:	1005003a 	cmpeq	r2,r2,zero
   12e5c:	1000151e 	bne	r2,zero,12eb4 <read+0xdc>
   12e60:	e0bffa17 	ldw	r2,-24(fp)
   12e64:	10800017 	ldw	r2,0(r2)
   12e68:	10800517 	ldw	r2,20(r2)
   12e6c:	e17ffc17 	ldw	r5,-16(fp)
   12e70:	e1bffd17 	ldw	r6,-12(fp)
   12e74:	e13ffa17 	ldw	r4,-24(fp)
   12e78:	103ee83a 	callr	r2
   12e7c:	e0bff915 	stw	r2,-28(fp)
   12e80:	e0bff917 	ldw	r2,-28(fp)
   12e84:	1004403a 	cmpge	r2,r2,zero
   12e88:	1000071e 	bne	r2,zero,12ea8 <read+0xd0>
   12e8c:	0012ef80 	call	12ef8 <alt_get_errno>
   12e90:	e0fff917 	ldw	r3,-28(fp)
   12e94:	00c7c83a 	sub	r3,zero,r3
   12e98:	10c00015 	stw	r3,0(r2)
   12e9c:	00bfffc4 	movi	r2,-1
   12ea0:	e0bffe15 	stw	r2,-8(fp)
   12ea4:	00000e06 	br	12ee0 <read+0x108>
   12ea8:	e0bff917 	ldw	r2,-28(fp)
   12eac:	e0bffe15 	stw	r2,-8(fp)
   12eb0:	00000b06 	br	12ee0 <read+0x108>
   12eb4:	0012ef80 	call	12ef8 <alt_get_errno>
   12eb8:	1007883a 	mov	r3,r2
   12ebc:	00800344 	movi	r2,13
   12ec0:	18800015 	stw	r2,0(r3)
   12ec4:	00000406 	br	12ed8 <read+0x100>
   12ec8:	0012ef80 	call	12ef8 <alt_get_errno>
   12ecc:	1007883a 	mov	r3,r2
   12ed0:	00801444 	movi	r2,81
   12ed4:	18800015 	stw	r2,0(r3)
   12ed8:	00bfffc4 	movi	r2,-1
   12edc:	e0bffe15 	stw	r2,-8(fp)
   12ee0:	e0bffe17 	ldw	r2,-8(fp)
   12ee4:	e037883a 	mov	sp,fp
   12ee8:	dfc00117 	ldw	ra,4(sp)
   12eec:	df000017 	ldw	fp,0(sp)
   12ef0:	dec00204 	addi	sp,sp,8
   12ef4:	f800283a 	ret

00012ef8 <alt_get_errno>:
   12ef8:	defffd04 	addi	sp,sp,-12
   12efc:	dfc00215 	stw	ra,8(sp)
   12f00:	df000115 	stw	fp,4(sp)
   12f04:	df000104 	addi	fp,sp,4
   12f08:	00820034 	movhi	r2,2048
   12f0c:	108a1304 	addi	r2,r2,10316
   12f10:	10800017 	ldw	r2,0(r2)
   12f14:	1005003a 	cmpeq	r2,r2,zero
   12f18:	1000061e 	bne	r2,zero,12f34 <alt_get_errno+0x3c>
   12f1c:	00820034 	movhi	r2,2048
   12f20:	108a1304 	addi	r2,r2,10316
   12f24:	10800017 	ldw	r2,0(r2)
   12f28:	103ee83a 	callr	r2
   12f2c:	e0bfff15 	stw	r2,-4(fp)
   12f30:	00000306 	br	12f40 <alt_get_errno+0x48>
   12f34:	00820034 	movhi	r2,2048
   12f38:	108a4504 	addi	r2,r2,10516
   12f3c:	e0bfff15 	stw	r2,-4(fp)
   12f40:	e0bfff17 	ldw	r2,-4(fp)
   12f44:	e037883a 	mov	sp,fp
   12f48:	dfc00117 	ldw	ra,4(sp)
   12f4c:	df000017 	ldw	fp,0(sp)
   12f50:	dec00204 	addi	sp,sp,8
   12f54:	f800283a 	ret

00012f58 <alt_release_fd>:
   12f58:	defffe04 	addi	sp,sp,-8
   12f5c:	df000115 	stw	fp,4(sp)
   12f60:	df000104 	addi	fp,sp,4
   12f64:	e13fff15 	stw	r4,-4(fp)
   12f68:	e0bfff17 	ldw	r2,-4(fp)
   12f6c:	108000d0 	cmplti	r2,r2,3
   12f70:	10000d1e 	bne	r2,zero,12fa8 <alt_release_fd+0x50>
   12f74:	e0bfff17 	ldw	r2,-4(fp)
   12f78:	00c20034 	movhi	r3,2048
   12f7c:	18c4a204 	addi	r3,r3,4744
   12f80:	10800324 	muli	r2,r2,12
   12f84:	10c5883a 	add	r2,r2,r3
   12f88:	10800204 	addi	r2,r2,8
   12f8c:	10000015 	stw	zero,0(r2)
   12f90:	e0bfff17 	ldw	r2,-4(fp)
   12f94:	00c20034 	movhi	r3,2048
   12f98:	18c4a204 	addi	r3,r3,4744
   12f9c:	10800324 	muli	r2,r2,12
   12fa0:	10c5883a 	add	r2,r2,r3
   12fa4:	10000015 	stw	zero,0(r2)
   12fa8:	e037883a 	mov	sp,fp
   12fac:	df000017 	ldw	fp,0(sp)
   12fb0:	dec00104 	addi	sp,sp,4
   12fb4:	f800283a 	ret

00012fb8 <sbrk>:
   12fb8:	defff804 	addi	sp,sp,-32
   12fbc:	df000715 	stw	fp,28(sp)
   12fc0:	df000704 	addi	fp,sp,28
   12fc4:	e13ffe15 	stw	r4,-8(fp)
   12fc8:	0005303a 	rdctl	r2,status
   12fcc:	e0bffb15 	stw	r2,-20(fp)
   12fd0:	e0fffb17 	ldw	r3,-20(fp)
   12fd4:	00bfff84 	movi	r2,-2
   12fd8:	1884703a 	and	r2,r3,r2
   12fdc:	1001703a 	wrctl	status,r2
   12fe0:	e0bffb17 	ldw	r2,-20(fp)
   12fe4:	e0bffd15 	stw	r2,-12(fp)
   12fe8:	d0a01717 	ldw	r2,-32676(gp)
   12fec:	10c000c4 	addi	r3,r2,3
   12ff0:	00bfff04 	movi	r2,-4
   12ff4:	1884703a 	and	r2,r3,r2
   12ff8:	d0a01715 	stw	r2,-32676(gp)
   12ffc:	d0e01717 	ldw	r3,-32676(gp)
   13000:	e0bffe17 	ldw	r2,-8(fp)
   13004:	1887883a 	add	r3,r3,r2
   13008:	00840034 	movhi	r2,4096
   1300c:	10800004 	addi	r2,r2,0
   13010:	10c0072e 	bgeu	r2,r3,13030 <sbrk+0x78>
   13014:	e0bffd17 	ldw	r2,-12(fp)
   13018:	e0bffa15 	stw	r2,-24(fp)
   1301c:	e0bffa17 	ldw	r2,-24(fp)
   13020:	1001703a 	wrctl	status,r2
   13024:	00bfffc4 	movi	r2,-1
   13028:	e0bfff15 	stw	r2,-4(fp)
   1302c:	00000c06 	br	13060 <sbrk+0xa8>
   13030:	d0a01717 	ldw	r2,-32676(gp)
   13034:	e0bffc15 	stw	r2,-16(fp)
   13038:	d0e01717 	ldw	r3,-32676(gp)
   1303c:	e0bffe17 	ldw	r2,-8(fp)
   13040:	1885883a 	add	r2,r3,r2
   13044:	d0a01715 	stw	r2,-32676(gp)
   13048:	e0bffd17 	ldw	r2,-12(fp)
   1304c:	e0bff915 	stw	r2,-28(fp)
   13050:	e0bff917 	ldw	r2,-28(fp)
   13054:	1001703a 	wrctl	status,r2
   13058:	e0bffc17 	ldw	r2,-16(fp)
   1305c:	e0bfff15 	stw	r2,-4(fp)
   13060:	e0bfff17 	ldw	r2,-4(fp)
   13064:	e037883a 	mov	sp,fp
   13068:	df000017 	ldw	fp,0(sp)
   1306c:	dec00104 	addi	sp,sp,4
   13070:	f800283a 	ret

00013074 <write>:
   13074:	defff704 	addi	sp,sp,-36
   13078:	dfc00815 	stw	ra,32(sp)
   1307c:	df000715 	stw	fp,28(sp)
   13080:	df000704 	addi	fp,sp,28
   13084:	e13ffb15 	stw	r4,-20(fp)
   13088:	e17ffc15 	stw	r5,-16(fp)
   1308c:	e1bffd15 	stw	r6,-12(fp)
   13090:	e0bffb17 	ldw	r2,-20(fp)
   13094:	1004803a 	cmplt	r2,r2,zero
   13098:	1000081e 	bne	r2,zero,130bc <write+0x48>
   1309c:	e0bffb17 	ldw	r2,-20(fp)
   130a0:	10800324 	muli	r2,r2,12
   130a4:	1007883a 	mov	r3,r2
   130a8:	00820034 	movhi	r2,2048
   130ac:	1084a204 	addi	r2,r2,4744
   130b0:	1887883a 	add	r3,r3,r2
   130b4:	e0ffff15 	stw	r3,-4(fp)
   130b8:	00000106 	br	130c0 <write+0x4c>
   130bc:	e03fff15 	stw	zero,-4(fp)
   130c0:	e0bfff17 	ldw	r2,-4(fp)
   130c4:	e0bffa15 	stw	r2,-24(fp)
   130c8:	e0bffa17 	ldw	r2,-24(fp)
   130cc:	1005003a 	cmpeq	r2,r2,zero
   130d0:	1000241e 	bne	r2,zero,13164 <write+0xf0>
   130d4:	e0bffa17 	ldw	r2,-24(fp)
   130d8:	10800217 	ldw	r2,8(r2)
   130dc:	108000cc 	andi	r2,r2,3
   130e0:	1005003a 	cmpeq	r2,r2,zero
   130e4:	10001a1e 	bne	r2,zero,13150 <write+0xdc>
   130e8:	e0bffa17 	ldw	r2,-24(fp)
   130ec:	10800017 	ldw	r2,0(r2)
   130f0:	10800617 	ldw	r2,24(r2)
   130f4:	1005003a 	cmpeq	r2,r2,zero
   130f8:	1000151e 	bne	r2,zero,13150 <write+0xdc>
   130fc:	e0bffa17 	ldw	r2,-24(fp)
   13100:	10800017 	ldw	r2,0(r2)
   13104:	10800617 	ldw	r2,24(r2)
   13108:	e17ffc17 	ldw	r5,-16(fp)
   1310c:	e1bffd17 	ldw	r6,-12(fp)
   13110:	e13ffa17 	ldw	r4,-24(fp)
   13114:	103ee83a 	callr	r2
   13118:	e0bff915 	stw	r2,-28(fp)
   1311c:	e0bff917 	ldw	r2,-28(fp)
   13120:	1004403a 	cmpge	r2,r2,zero
   13124:	1000071e 	bne	r2,zero,13144 <write+0xd0>
   13128:	00131940 	call	13194 <alt_get_errno>
   1312c:	e0fff917 	ldw	r3,-28(fp)
   13130:	00c7c83a 	sub	r3,zero,r3
   13134:	10c00015 	stw	r3,0(r2)
   13138:	00bfffc4 	movi	r2,-1
   1313c:	e0bffe15 	stw	r2,-8(fp)
   13140:	00000e06 	br	1317c <write+0x108>
   13144:	e0bff917 	ldw	r2,-28(fp)
   13148:	e0bffe15 	stw	r2,-8(fp)
   1314c:	00000b06 	br	1317c <write+0x108>
   13150:	00131940 	call	13194 <alt_get_errno>
   13154:	1007883a 	mov	r3,r2
   13158:	00800344 	movi	r2,13
   1315c:	18800015 	stw	r2,0(r3)
   13160:	00000406 	br	13174 <write+0x100>
   13164:	00131940 	call	13194 <alt_get_errno>
   13168:	1007883a 	mov	r3,r2
   1316c:	00801444 	movi	r2,81
   13170:	18800015 	stw	r2,0(r3)
   13174:	00bfffc4 	movi	r2,-1
   13178:	e0bffe15 	stw	r2,-8(fp)
   1317c:	e0bffe17 	ldw	r2,-8(fp)
   13180:	e037883a 	mov	sp,fp
   13184:	dfc00117 	ldw	ra,4(sp)
   13188:	df000017 	ldw	fp,0(sp)
   1318c:	dec00204 	addi	sp,sp,8
   13190:	f800283a 	ret

00013194 <alt_get_errno>:
   13194:	defffd04 	addi	sp,sp,-12
   13198:	dfc00215 	stw	ra,8(sp)
   1319c:	df000115 	stw	fp,4(sp)
   131a0:	df000104 	addi	fp,sp,4
   131a4:	00820034 	movhi	r2,2048
   131a8:	108a1304 	addi	r2,r2,10316
   131ac:	10800017 	ldw	r2,0(r2)
   131b0:	1005003a 	cmpeq	r2,r2,zero
   131b4:	1000061e 	bne	r2,zero,131d0 <alt_get_errno+0x3c>
   131b8:	00820034 	movhi	r2,2048
   131bc:	108a1304 	addi	r2,r2,10316
   131c0:	10800017 	ldw	r2,0(r2)
   131c4:	103ee83a 	callr	r2
   131c8:	e0bfff15 	stw	r2,-4(fp)
   131cc:	00000306 	br	131dc <alt_get_errno+0x48>
   131d0:	00820034 	movhi	r2,2048
   131d4:	108a4504 	addi	r2,r2,10516
   131d8:	e0bfff15 	stw	r2,-4(fp)
   131dc:	e0bfff17 	ldw	r2,-4(fp)
   131e0:	e037883a 	mov	sp,fp
   131e4:	dfc00117 	ldw	ra,4(sp)
   131e8:	df000017 	ldw	fp,0(sp)
   131ec:	dec00204 	addi	sp,sp,8
   131f0:	f800283a 	ret

000131f4 <alt_irq_init>:
   131f4:	defffd04 	addi	sp,sp,-12
   131f8:	dfc00215 	stw	ra,8(sp)
   131fc:	df000115 	stw	fp,4(sp)
   13200:	df000104 	addi	fp,sp,4
   13204:	e13fff15 	stw	r4,-4(fp)
   13208:	001a2240 	call	1a224 <altera_nios2_qsys_irq_init>
   1320c:	00800044 	movi	r2,1
   13210:	1001703a 	wrctl	status,r2
   13214:	e037883a 	mov	sp,fp
   13218:	dfc00117 	ldw	ra,4(sp)
   1321c:	df000017 	ldw	fp,0(sp)
   13220:	dec00204 	addi	sp,sp,8
   13224:	f800283a 	ret

00013228 <alt_sys_init>:
   13228:	defffd04 	addi	sp,sp,-12
   1322c:	dfc00215 	stw	ra,8(sp)
   13230:	df000115 	stw	fp,4(sp)
   13234:	df000104 	addi	fp,sp,4
   13238:	01000134 	movhi	r4,4
   1323c:	210c1004 	addi	r4,r4,12352
   13240:	000b883a 	mov	r5,zero
   13244:	000d883a 	mov	r6,zero
   13248:	01c0fa04 	movi	r7,1000
   1324c:	0016da00 	call	16da0 <alt_avalon_timer_sc_init>
   13250:	01020034 	movhi	r4,2048
   13254:	21050204 	addi	r4,r4,5128
   13258:	00135cc0 	call	135cc <alt_flash_cfi_init>
   1325c:	01020034 	movhi	r4,2048
   13260:	21054204 	addi	r4,r4,5384
   13264:	000b883a 	mov	r5,zero
   13268:	01800144 	movi	r6,5
   1326c:	00154940 	call	15494 <altera_avalon_jtag_uart_init>
   13270:	01020034 	movhi	r4,2048
   13274:	21053804 	addi	r4,r4,5344
   13278:	00135940 	call	13594 <alt_dev_reg>
   1327c:	01020034 	movhi	r4,2048
   13280:	21095a04 	addi	r4,r4,9576
   13284:	0016b980 	call	16b98 <altera_avalon_lcd_16207_init>
   13288:	01020034 	movhi	r4,2048
   1328c:	21095004 	addi	r4,r4,9536
   13290:	00135940 	call	13594 <alt_dev_reg>
   13294:	01020034 	movhi	r4,2048
   13298:	2109a204 	addi	r4,r4,9864
   1329c:	000b883a 	mov	r5,zero
   132a0:	018000c4 	movi	r6,3
   132a4:	0016f200 	call	16f20 <altera_avalon_uart_init>
   132a8:	01020034 	movhi	r4,2048
   132ac:	21099804 	addi	r4,r4,9824
   132b0:	00135940 	call	13594 <alt_dev_reg>
   132b4:	01020034 	movhi	r4,2048
   132b8:	2109c904 	addi	r4,r4,10020
   132bc:	00179000 	call	17900 <alt_up_ps2_init>
   132c0:	01020034 	movhi	r4,2048
   132c4:	2109c904 	addi	r4,r4,10020
   132c8:	00135940 	call	13594 <alt_dev_reg>
   132cc:	00820034 	movhi	r2,2048
   132d0:	1089d704 	addi	r2,r2,10076
   132d4:	10800a17 	ldw	r2,40(r2)
   132d8:	10800104 	addi	r2,r2,4
   132dc:	10800017 	ldw	r2,0(r2)
   132e0:	10ffffcc 	andi	r3,r2,65535
   132e4:	00820034 	movhi	r2,2048
   132e8:	1089d704 	addi	r2,r2,10076
   132ec:	10c00c15 	stw	r3,48(r2)
   132f0:	00820034 	movhi	r2,2048
   132f4:	1089d704 	addi	r2,r2,10076
   132f8:	10800a17 	ldw	r2,40(r2)
   132fc:	10800104 	addi	r2,r2,4
   13300:	10800017 	ldw	r2,0(r2)
   13304:	1005d43a 	srai	r2,r2,16
   13308:	10ffffcc 	andi	r3,r2,65535
   1330c:	00820034 	movhi	r2,2048
   13310:	1089d704 	addi	r2,r2,10076
   13314:	10c00d15 	stw	r3,52(r2)
   13318:	00820034 	movhi	r2,2048
   1331c:	1089d704 	addi	r2,r2,10076
   13320:	10800c17 	ldw	r2,48(r2)
   13324:	10801068 	cmpgeui	r2,r2,65
   13328:	1000081e 	bne	r2,zero,1334c <alt_sys_init+0x124>
   1332c:	00c20034 	movhi	r3,2048
   13330:	18c9d704 	addi	r3,r3,10076
   13334:	00800fc4 	movi	r2,63
   13338:	18800f15 	stw	r2,60(r3)
   1333c:	00c20034 	movhi	r3,2048
   13340:	18c9d704 	addi	r3,r3,10076
   13344:	00800184 	movi	r2,6
   13348:	18801015 	stw	r2,64(r3)
   1334c:	00820034 	movhi	r2,2048
   13350:	1089d704 	addi	r2,r2,10076
   13354:	10800d17 	ldw	r2,52(r2)
   13358:	10800868 	cmpgeui	r2,r2,33
   1335c:	1000041e 	bne	r2,zero,13370 <alt_sys_init+0x148>
   13360:	00c20034 	movhi	r3,2048
   13364:	18c9d704 	addi	r3,r3,10076
   13368:	008007c4 	movi	r2,31
   1336c:	18801115 	stw	r2,68(r3)
   13370:	01020034 	movhi	r4,2048
   13374:	2109d704 	addi	r4,r4,10076
   13378:	0017ed40 	call	17ed4 <alt_up_char_buffer_init>
   1337c:	01020034 	movhi	r4,2048
   13380:	2109d704 	addi	r4,r4,10076
   13384:	00135940 	call	13594 <alt_dev_reg>
   13388:	00820034 	movhi	r2,2048
   1338c:	1089e904 	addi	r2,r2,10148
   13390:	10800a17 	ldw	r2,40(r2)
   13394:	10800017 	ldw	r2,0(r2)
   13398:	1007883a 	mov	r3,r2
   1339c:	00820034 	movhi	r2,2048
   133a0:	1089e904 	addi	r2,r2,10148
   133a4:	10c00b15 	stw	r3,44(r2)
   133a8:	00820034 	movhi	r2,2048
   133ac:	1089e904 	addi	r2,r2,10148
   133b0:	10800a17 	ldw	r2,40(r2)
   133b4:	10800104 	addi	r2,r2,4
   133b8:	10800017 	ldw	r2,0(r2)
   133bc:	1007883a 	mov	r3,r2
   133c0:	00820034 	movhi	r2,2048
   133c4:	1089e904 	addi	r2,r2,10148
   133c8:	10c00c15 	stw	r3,48(r2)
   133cc:	00820034 	movhi	r2,2048
   133d0:	1089e904 	addi	r2,r2,10148
   133d4:	10800a17 	ldw	r2,40(r2)
   133d8:	10800204 	addi	r2,r2,8
   133dc:	10800017 	ldw	r2,0(r2)
   133e0:	10ffffcc 	andi	r3,r2,65535
   133e4:	00820034 	movhi	r2,2048
   133e8:	1089e904 	addi	r2,r2,10148
   133ec:	10c00f15 	stw	r3,60(r2)
   133f0:	00820034 	movhi	r2,2048
   133f4:	1089e904 	addi	r2,r2,10148
   133f8:	10800a17 	ldw	r2,40(r2)
   133fc:	10800204 	addi	r2,r2,8
   13400:	10800017 	ldw	r2,0(r2)
   13404:	1005d43a 	srai	r2,r2,16
   13408:	10ffffcc 	andi	r3,r2,65535
   1340c:	00820034 	movhi	r2,2048
   13410:	1089e904 	addi	r2,r2,10148
   13414:	10c01015 	stw	r3,64(r2)
   13418:	00820034 	movhi	r2,2048
   1341c:	1089e904 	addi	r2,r2,10148
   13420:	10800a17 	ldw	r2,40(r2)
   13424:	10800304 	addi	r2,r2,12
   13428:	10800017 	ldw	r2,0(r2)
   1342c:	1005d07a 	srai	r2,r2,1
   13430:	10c0004c 	andi	r3,r2,1
   13434:	00820034 	movhi	r2,2048
   13438:	1089e904 	addi	r2,r2,10148
   1343c:	10c00d15 	stw	r3,52(r2)
   13440:	00820034 	movhi	r2,2048
   13444:	1089e904 	addi	r2,r2,10148
   13448:	10800a17 	ldw	r2,40(r2)
   1344c:	10800304 	addi	r2,r2,12
   13450:	10800017 	ldw	r2,0(r2)
   13454:	1005d13a 	srai	r2,r2,4
   13458:	10c003cc 	andi	r3,r2,15
   1345c:	00820034 	movhi	r2,2048
   13460:	1089e904 	addi	r2,r2,10148
   13464:	10c00e15 	stw	r3,56(r2)
   13468:	00820034 	movhi	r2,2048
   1346c:	1089e904 	addi	r2,r2,10148
   13470:	10800a17 	ldw	r2,40(r2)
   13474:	10800304 	addi	r2,r2,12
   13478:	10800017 	ldw	r2,0(r2)
   1347c:	1005d43a 	srai	r2,r2,16
   13480:	1007883a 	mov	r3,r2
   13484:	00bfffc4 	movi	r2,-1
   13488:	1884703a 	and	r2,r3,r2
   1348c:	e0bfff45 	stb	r2,-3(fp)
   13490:	00820034 	movhi	r2,2048
   13494:	1089e904 	addi	r2,r2,10148
   13498:	10800a17 	ldw	r2,40(r2)
   1349c:	10800304 	addi	r2,r2,12
   134a0:	10800017 	ldw	r2,0(r2)
   134a4:	1005d63a 	srai	r2,r2,24
   134a8:	1007883a 	mov	r3,r2
   134ac:	00bfffc4 	movi	r2,-1
   134b0:	1884703a 	and	r2,r3,r2
   134b4:	e0bfff05 	stb	r2,-4(fp)
   134b8:	00820034 	movhi	r2,2048
   134bc:	1089e904 	addi	r2,r2,10148
   134c0:	10800e17 	ldw	r2,56(r2)
   134c4:	10800058 	cmpnei	r2,r2,1
   134c8:	1000041e 	bne	r2,zero,134dc <alt_sys_init+0x2b4>
   134cc:	00820034 	movhi	r2,2048
   134d0:	1089e904 	addi	r2,r2,10148
   134d4:	10001115 	stw	zero,68(r2)
   134d8:	00000e06 	br	13514 <alt_sys_init+0x2ec>
   134dc:	00820034 	movhi	r2,2048
   134e0:	1089e904 	addi	r2,r2,10148
   134e4:	10800e17 	ldw	r2,56(r2)
   134e8:	10800098 	cmpnei	r2,r2,2
   134ec:	1000051e 	bne	r2,zero,13504 <alt_sys_init+0x2dc>
   134f0:	00c20034 	movhi	r3,2048
   134f4:	18c9e904 	addi	r3,r3,10148
   134f8:	00800044 	movi	r2,1
   134fc:	18801115 	stw	r2,68(r3)
   13500:	00000406 	br	13514 <alt_sys_init+0x2ec>
   13504:	00c20034 	movhi	r3,2048
   13508:	18c9e904 	addi	r3,r3,10148
   1350c:	00800084 	movi	r2,2
   13510:	18801115 	stw	r2,68(r3)
   13514:	e0ffff43 	ldbu	r3,-3(fp)
   13518:	00800804 	movi	r2,32
   1351c:	10c7c83a 	sub	r3,r2,r3
   13520:	00bfffc4 	movi	r2,-1
   13524:	10c6d83a 	srl	r3,r2,r3
   13528:	00820034 	movhi	r2,2048
   1352c:	1089e904 	addi	r2,r2,10148
   13530:	10c01215 	stw	r3,72(r2)
   13534:	e0ffff43 	ldbu	r3,-3(fp)
   13538:	00820034 	movhi	r2,2048
   1353c:	1089e904 	addi	r2,r2,10148
   13540:	10801117 	ldw	r2,68(r2)
   13544:	1887883a 	add	r3,r3,r2
   13548:	00820034 	movhi	r2,2048
   1354c:	1089e904 	addi	r2,r2,10148
   13550:	10c01315 	stw	r3,76(r2)
   13554:	e0ffff03 	ldbu	r3,-4(fp)
   13558:	00800804 	movi	r2,32
   1355c:	10c7c83a 	sub	r3,r2,r3
   13560:	00bfffc4 	movi	r2,-1
   13564:	10c6d83a 	srl	r3,r2,r3
   13568:	00820034 	movhi	r2,2048
   1356c:	1089e904 	addi	r2,r2,10148
   13570:	10c01415 	stw	r3,80(r2)
   13574:	01020034 	movhi	r4,2048
   13578:	2109e904 	addi	r4,r4,10148
   1357c:	00135940 	call	13594 <alt_dev_reg>
   13580:	e037883a 	mov	sp,fp
   13584:	dfc00117 	ldw	ra,4(sp)
   13588:	df000017 	ldw	fp,0(sp)
   1358c:	dec00204 	addi	sp,sp,8
   13590:	f800283a 	ret

00013594 <alt_dev_reg>:
   13594:	defffd04 	addi	sp,sp,-12
   13598:	dfc00215 	stw	ra,8(sp)
   1359c:	df000115 	stw	fp,4(sp)
   135a0:	df000104 	addi	fp,sp,4
   135a4:	e13fff15 	stw	r4,-4(fp)
   135a8:	e13fff17 	ldw	r4,-4(fp)
   135ac:	01420034 	movhi	r5,2048
   135b0:	294a1004 	addi	r5,r5,10304
   135b4:	00199100 	call	19910 <alt_dev_llist_insert>
   135b8:	e037883a 	mov	sp,fp
   135bc:	dfc00117 	ldw	ra,4(sp)
   135c0:	df000017 	ldw	fp,0(sp)
   135c4:	dec00204 	addi	sp,sp,8
   135c8:	f800283a 	ret

000135cc <alt_flash_cfi_init>:
   135cc:	defffc04 	addi	sp,sp,-16
   135d0:	dfc00315 	stw	ra,12(sp)
   135d4:	df000215 	stw	fp,8(sp)
   135d8:	df000204 	addi	fp,sp,8
   135dc:	e13fff15 	stw	r4,-4(fp)
   135e0:	e03ffe15 	stw	zero,-8(fp)
   135e4:	e13fff17 	ldw	r4,-4(fp)
   135e8:	0014ac40 	call	14ac4 <alt_read_cfi_width>
   135ec:	e0bffe15 	stw	r2,-8(fp)
   135f0:	e0bffe17 	ldw	r2,-8(fp)
   135f4:	1004c03a 	cmpne	r2,r2,zero
   135f8:	1000031e 	bne	r2,zero,13608 <alt_flash_cfi_init+0x3c>
   135fc:	e13fff17 	ldw	r4,-4(fp)
   13600:	00141dc0 	call	141dc <alt_set_flash_width_func>
   13604:	e0bffe15 	stw	r2,-8(fp)
   13608:	e0bffe17 	ldw	r2,-8(fp)
   1360c:	1004c03a 	cmpne	r2,r2,zero
   13610:	1000031e 	bne	r2,zero,13620 <alt_flash_cfi_init+0x54>
   13614:	e13fff17 	ldw	r4,-4(fp)
   13618:	00144e40 	call	144e4 <alt_read_cfi_table>
   1361c:	e0bffe15 	stw	r2,-8(fp)
   13620:	e0bffe17 	ldw	r2,-8(fp)
   13624:	1004c03a 	cmpne	r2,r2,zero
   13628:	1000031e 	bne	r2,zero,13638 <alt_flash_cfi_init+0x6c>
   1362c:	e13fff17 	ldw	r4,-4(fp)
   13630:	00143bc0 	call	143bc <alt_set_flash_algorithm_func>
   13634:	e0bffe15 	stw	r2,-8(fp)
   13638:	e0bffe17 	ldw	r2,-8(fp)
   1363c:	1004c03a 	cmpne	r2,r2,zero
   13640:	1000031e 	bne	r2,zero,13650 <alt_flash_cfi_init+0x84>
   13644:	e13fff17 	ldw	r4,-4(fp)
   13648:	00136680 	call	13668 <alt_flash_device_register>
   1364c:	e0bffe15 	stw	r2,-8(fp)
   13650:	e0bffe17 	ldw	r2,-8(fp)
   13654:	e037883a 	mov	sp,fp
   13658:	dfc00117 	ldw	ra,4(sp)
   1365c:	df000017 	ldw	fp,0(sp)
   13660:	dec00204 	addi	sp,sp,8
   13664:	f800283a 	ret

00013668 <alt_flash_device_register>:
   13668:	defffd04 	addi	sp,sp,-12
   1366c:	dfc00215 	stw	ra,8(sp)
   13670:	df000115 	stw	fp,4(sp)
   13674:	df000104 	addi	fp,sp,4
   13678:	e13fff15 	stw	r4,-4(fp)
   1367c:	e13fff17 	ldw	r4,-4(fp)
   13680:	01420034 	movhi	r5,2048
   13684:	294a1704 	addi	r5,r5,10332
   13688:	00199100 	call	19910 <alt_dev_llist_insert>
   1368c:	e037883a 	mov	sp,fp
   13690:	dfc00117 	ldw	ra,4(sp)
   13694:	df000017 	ldw	fp,0(sp)
   13698:	dec00204 	addi	sp,sp,8
   1369c:	f800283a 	ret

000136a0 <alt_flash_cfi_write>:
   136a0:	deffef04 	addi	sp,sp,-68
   136a4:	dfc01015 	stw	ra,64(sp)
   136a8:	df000f15 	stw	fp,60(sp)
   136ac:	df000f04 	addi	fp,sp,60
   136b0:	e13ffa15 	stw	r4,-24(fp)
   136b4:	e17ffb15 	stw	r5,-20(fp)
   136b8:	e1bffc15 	stw	r6,-16(fp)
   136bc:	e1fffd15 	stw	r7,-12(fp)
   136c0:	e03ff915 	stw	zero,-28(fp)
   136c4:	e0bffd17 	ldw	r2,-12(fp)
   136c8:	e0bff515 	stw	r2,-44(fp)
   136cc:	e0bffb17 	ldw	r2,-20(fp)
   136d0:	e0bff315 	stw	r2,-52(fp)
   136d4:	e0bffa17 	ldw	r2,-24(fp)
   136d8:	e0bff215 	stw	r2,-56(fp)
   136dc:	e03ff815 	stw	zero,-32(fp)
   136e0:	00008e06 	br	1391c <alt_flash_cfi_write+0x27c>
   136e4:	e0bff817 	ldw	r2,-32(fp)
   136e8:	e0fff217 	ldw	r3,-56(fp)
   136ec:	1004913a 	slli	r2,r2,4
   136f0:	10c5883a 	add	r2,r2,r3
   136f4:	10800d04 	addi	r2,r2,52
   136f8:	10c00017 	ldw	r3,0(r2)
   136fc:	e0bffb17 	ldw	r2,-20(fp)
   13700:	10c08316 	blt	r2,r3,13910 <alt_flash_cfi_write+0x270>
   13704:	e0bff817 	ldw	r2,-32(fp)
   13708:	e0fff217 	ldw	r3,-56(fp)
   1370c:	1004913a 	slli	r2,r2,4
   13710:	10c5883a 	add	r2,r2,r3
   13714:	10800d04 	addi	r2,r2,52
   13718:	11000017 	ldw	r4,0(r2)
   1371c:	e0bff817 	ldw	r2,-32(fp)
   13720:	e0fff217 	ldw	r3,-56(fp)
   13724:	1004913a 	slli	r2,r2,4
   13728:	10c5883a 	add	r2,r2,r3
   1372c:	10800e04 	addi	r2,r2,56
   13730:	10800017 	ldw	r2,0(r2)
   13734:	2087883a 	add	r3,r4,r2
   13738:	e0bffb17 	ldw	r2,-20(fp)
   1373c:	10c0740e 	bge	r2,r3,13910 <alt_flash_cfi_write+0x270>
   13740:	e0bff817 	ldw	r2,-32(fp)
   13744:	e0fff217 	ldw	r3,-56(fp)
   13748:	1004913a 	slli	r2,r2,4
   1374c:	10c5883a 	add	r2,r2,r3
   13750:	10800d04 	addi	r2,r2,52
   13754:	10800017 	ldw	r2,0(r2)
   13758:	e0bff415 	stw	r2,-48(fp)
   1375c:	e03ff715 	stw	zero,-36(fp)
   13760:	00006306 	br	138f0 <alt_flash_cfi_write+0x250>
   13764:	e0fffb17 	ldw	r3,-20(fp)
   13768:	e0bff417 	ldw	r2,-48(fp)
   1376c:	18805416 	blt	r3,r2,138c0 <alt_flash_cfi_write+0x220>
   13770:	e0bff817 	ldw	r2,-32(fp)
   13774:	e0fff217 	ldw	r3,-56(fp)
   13778:	1004913a 	slli	r2,r2,4
   1377c:	10c5883a 	add	r2,r2,r3
   13780:	10801004 	addi	r2,r2,64
   13784:	10c00017 	ldw	r3,0(r2)
   13788:	e0bff417 	ldw	r2,-48(fp)
   1378c:	1887883a 	add	r3,r3,r2
   13790:	e0bffb17 	ldw	r2,-20(fp)
   13794:	10c04a0e 	bge	r2,r3,138c0 <alt_flash_cfi_write+0x220>
   13798:	e0bff817 	ldw	r2,-32(fp)
   1379c:	e0fff217 	ldw	r3,-56(fp)
   137a0:	1004913a 	slli	r2,r2,4
   137a4:	10c5883a 	add	r2,r2,r3
   137a8:	10801004 	addi	r2,r2,64
   137ac:	10c00017 	ldw	r3,0(r2)
   137b0:	e0bff417 	ldw	r2,-48(fp)
   137b4:	1887883a 	add	r3,r3,r2
   137b8:	e0bffb17 	ldw	r2,-20(fp)
   137bc:	1885c83a 	sub	r2,r3,r2
   137c0:	e0bff615 	stw	r2,-40(fp)
   137c4:	e0bff617 	ldw	r2,-40(fp)
   137c8:	e0bfff15 	stw	r2,-4(fp)
   137cc:	e0fffd17 	ldw	r3,-12(fp)
   137d0:	e0fffe15 	stw	r3,-8(fp)
   137d4:	e0bfff17 	ldw	r2,-4(fp)
   137d8:	e0fffe17 	ldw	r3,-8(fp)
   137dc:	10c0020e 	bge	r2,r3,137e8 <alt_flash_cfi_write+0x148>
   137e0:	e0bfff17 	ldw	r2,-4(fp)
   137e4:	e0bffe15 	stw	r2,-8(fp)
   137e8:	e0fffe17 	ldw	r3,-8(fp)
   137ec:	e0fff615 	stw	r3,-40(fp)
   137f0:	e0bff217 	ldw	r2,-56(fp)
   137f4:	10800a17 	ldw	r2,40(r2)
   137f8:	1007883a 	mov	r3,r2
   137fc:	e0bffb17 	ldw	r2,-20(fp)
   13800:	188b883a 	add	r5,r3,r2
   13804:	e1bff617 	ldw	r6,-40(fp)
   13808:	e13ffc17 	ldw	r4,-16(fp)
   1380c:	00077140 	call	7714 <memcmp>
   13810:	1005003a 	cmpeq	r2,r2,zero
   13814:	1000131e 	bne	r2,zero,13864 <alt_flash_cfi_write+0x1c4>
   13818:	e0bff217 	ldw	r2,-56(fp)
   1381c:	10800817 	ldw	r2,32(r2)
   13820:	e13ff217 	ldw	r4,-56(fp)
   13824:	e17ff417 	ldw	r5,-48(fp)
   13828:	103ee83a 	callr	r2
   1382c:	e0bff915 	stw	r2,-28(fp)
   13830:	e0bff917 	ldw	r2,-28(fp)
   13834:	1004c03a 	cmpne	r2,r2,zero
   13838:	10000a1e 	bne	r2,zero,13864 <alt_flash_cfi_write+0x1c4>
   1383c:	e0bff217 	ldw	r2,-56(fp)
   13840:	10c00917 	ldw	r3,36(r2)
   13844:	e13ff217 	ldw	r4,-56(fp)
   13848:	e0bff617 	ldw	r2,-40(fp)
   1384c:	d8800015 	stw	r2,0(sp)
   13850:	e17ff417 	ldw	r5,-48(fp)
   13854:	e1bffb17 	ldw	r6,-20(fp)
   13858:	e1fffc17 	ldw	r7,-16(fp)
   1385c:	183ee83a 	callr	r3
   13860:	e0bff915 	stw	r2,-28(fp)
   13864:	e0fffd17 	ldw	r3,-12(fp)
   13868:	e0bff617 	ldw	r2,-40(fp)
   1386c:	18802f26 	beq	r3,r2,1392c <alt_flash_cfi_write+0x28c>
   13870:	e0bff917 	ldw	r2,-28(fp)
   13874:	1004c03a 	cmpne	r2,r2,zero
   13878:	10002c1e 	bne	r2,zero,1392c <alt_flash_cfi_write+0x28c>
   1387c:	e0fffd17 	ldw	r3,-12(fp)
   13880:	e0bff617 	ldw	r2,-40(fp)
   13884:	1885c83a 	sub	r2,r3,r2
   13888:	e0bffd15 	stw	r2,-12(fp)
   1388c:	e0bff817 	ldw	r2,-32(fp)
   13890:	e0fff217 	ldw	r3,-56(fp)
   13894:	1004913a 	slli	r2,r2,4
   13898:	10c5883a 	add	r2,r2,r3
   1389c:	10801004 	addi	r2,r2,64
   138a0:	10c00017 	ldw	r3,0(r2)
   138a4:	e0bff417 	ldw	r2,-48(fp)
   138a8:	1885883a 	add	r2,r3,r2
   138ac:	e0bffb15 	stw	r2,-20(fp)
   138b0:	e0fffc17 	ldw	r3,-16(fp)
   138b4:	e0bff617 	ldw	r2,-40(fp)
   138b8:	1885883a 	add	r2,r3,r2
   138bc:	e0bffc15 	stw	r2,-16(fp)
   138c0:	e0bff817 	ldw	r2,-32(fp)
   138c4:	e0fff217 	ldw	r3,-56(fp)
   138c8:	1004913a 	slli	r2,r2,4
   138cc:	10c5883a 	add	r2,r2,r3
   138d0:	10801004 	addi	r2,r2,64
   138d4:	10c00017 	ldw	r3,0(r2)
   138d8:	e0bff417 	ldw	r2,-48(fp)
   138dc:	10c5883a 	add	r2,r2,r3
   138e0:	e0bff415 	stw	r2,-48(fp)
   138e4:	e0bff717 	ldw	r2,-36(fp)
   138e8:	10800044 	addi	r2,r2,1
   138ec:	e0bff715 	stw	r2,-36(fp)
   138f0:	e0bff817 	ldw	r2,-32(fp)
   138f4:	e0fff217 	ldw	r3,-56(fp)
   138f8:	1004913a 	slli	r2,r2,4
   138fc:	10c5883a 	add	r2,r2,r3
   13900:	10800f04 	addi	r2,r2,60
   13904:	10c00017 	ldw	r3,0(r2)
   13908:	e0bff717 	ldw	r2,-36(fp)
   1390c:	10ff9516 	blt	r2,r3,13764 <alt_flash_cfi_write+0xc4>
   13910:	e0bff817 	ldw	r2,-32(fp)
   13914:	10800044 	addi	r2,r2,1
   13918:	e0bff815 	stw	r2,-32(fp)
   1391c:	e0bff217 	ldw	r2,-56(fp)
   13920:	10c00c17 	ldw	r3,48(r2)
   13924:	e0bff817 	ldw	r2,-32(fp)
   13928:	10ff6e16 	blt	r2,r3,136e4 <alt_flash_cfi_write+0x44>
   1392c:	e0bff217 	ldw	r2,-56(fp)
   13930:	10800a17 	ldw	r2,40(r2)
   13934:	1007883a 	mov	r3,r2
   13938:	e0bff317 	ldw	r2,-52(fp)
   1393c:	1889883a 	add	r4,r3,r2
   13940:	e17ff517 	ldw	r5,-44(fp)
   13944:	00198980 	call	19898 <alt_dcache_flush>
   13948:	e0bff917 	ldw	r2,-28(fp)
   1394c:	e037883a 	mov	sp,fp
   13950:	dfc00117 	ldw	ra,4(sp)
   13954:	df000017 	ldw	fp,0(sp)
   13958:	dec00204 	addi	sp,sp,8
   1395c:	f800283a 	ret

00013960 <alt_flash_cfi_get_info>:
   13960:	defffa04 	addi	sp,sp,-24
   13964:	df000515 	stw	fp,20(sp)
   13968:	df000504 	addi	fp,sp,20
   1396c:	e13ffd15 	stw	r4,-12(fp)
   13970:	e17ffe15 	stw	r5,-8(fp)
   13974:	e1bfff15 	stw	r6,-4(fp)
   13978:	e03ffc15 	stw	zero,-16(fp)
   1397c:	e0bffd17 	ldw	r2,-12(fp)
   13980:	e0bffb15 	stw	r2,-20(fp)
   13984:	e0bffb17 	ldw	r2,-20(fp)
   13988:	10c00c17 	ldw	r3,48(r2)
   1398c:	e0bfff17 	ldw	r2,-4(fp)
   13990:	10c00015 	stw	r3,0(r2)
   13994:	e0bffb17 	ldw	r2,-20(fp)
   13998:	10800c17 	ldw	r2,48(r2)
   1399c:	1004c03a 	cmpne	r2,r2,zero
   139a0:	1000031e 	bne	r2,zero,139b0 <alt_flash_cfi_get_info+0x50>
   139a4:	00bffec4 	movi	r2,-5
   139a8:	e0bffc15 	stw	r2,-16(fp)
   139ac:	00000b06 	br	139dc <alt_flash_cfi_get_info+0x7c>
   139b0:	e0bffb17 	ldw	r2,-20(fp)
   139b4:	10800c17 	ldw	r2,48(r2)
   139b8:	10800250 	cmplti	r2,r2,9
   139bc:	1000031e 	bne	r2,zero,139cc <alt_flash_cfi_get_info+0x6c>
   139c0:	00bffd04 	movi	r2,-12
   139c4:	e0bffc15 	stw	r2,-16(fp)
   139c8:	00000406 	br	139dc <alt_flash_cfi_get_info+0x7c>
   139cc:	e0bffb17 	ldw	r2,-20(fp)
   139d0:	10c00d04 	addi	r3,r2,52
   139d4:	e0bffe17 	ldw	r2,-8(fp)
   139d8:	10c00015 	stw	r3,0(r2)
   139dc:	e0bffc17 	ldw	r2,-16(fp)
   139e0:	e037883a 	mov	sp,fp
   139e4:	df000017 	ldw	fp,0(sp)
   139e8:	dec00104 	addi	sp,sp,4
   139ec:	f800283a 	ret

000139f0 <alt_flash_cfi_read>:
   139f0:	defff904 	addi	sp,sp,-28
   139f4:	dfc00615 	stw	ra,24(sp)
   139f8:	df000515 	stw	fp,20(sp)
   139fc:	df000504 	addi	fp,sp,20
   13a00:	e13ffc15 	stw	r4,-16(fp)
   13a04:	e17ffd15 	stw	r5,-12(fp)
   13a08:	e1bffe15 	stw	r6,-8(fp)
   13a0c:	e1ffff15 	stw	r7,-4(fp)
   13a10:	e0bffc17 	ldw	r2,-16(fp)
   13a14:	e0bffb15 	stw	r2,-20(fp)
   13a18:	e0bffb17 	ldw	r2,-20(fp)
   13a1c:	10800a17 	ldw	r2,40(r2)
   13a20:	1007883a 	mov	r3,r2
   13a24:	e0bffd17 	ldw	r2,-12(fp)
   13a28:	1887883a 	add	r3,r3,r2
   13a2c:	e1bfff17 	ldw	r6,-4(fp)
   13a30:	e0bffe17 	ldw	r2,-8(fp)
   13a34:	1009883a 	mov	r4,r2
   13a38:	180b883a 	mov	r5,r3
   13a3c:	00077880 	call	7788 <memcpy>
   13a40:	0005883a 	mov	r2,zero
   13a44:	e037883a 	mov	sp,fp
   13a48:	dfc00117 	ldw	ra,4(sp)
   13a4c:	df000017 	ldw	fp,0(sp)
   13a50:	dec00204 	addi	sp,sp,8
   13a54:	f800283a 	ret

00013a58 <alt_write_value_to_flash>:
   13a58:	defffa04 	addi	sp,sp,-24
   13a5c:	df000515 	stw	fp,20(sp)
   13a60:	df000504 	addi	fp,sp,20
   13a64:	e13ffd15 	stw	r4,-12(fp)
   13a68:	e17ffe15 	stw	r5,-8(fp)
   13a6c:	e1bfff15 	stw	r6,-4(fp)
   13a70:	e0bffd17 	ldw	r2,-12(fp)
   13a74:	10802e17 	ldw	r2,184(r2)
   13a78:	10800058 	cmpnei	r2,r2,1
   13a7c:	10000b1e 	bne	r2,zero,13aac <alt_write_value_to_flash+0x54>
   13a80:	e0bffd17 	ldw	r2,-12(fp)
   13a84:	10800a17 	ldw	r2,40(r2)
   13a88:	1007883a 	mov	r3,r2
   13a8c:	e0bffe17 	ldw	r2,-8(fp)
   13a90:	1889883a 	add	r4,r3,r2
   13a94:	e0bfff17 	ldw	r2,-4(fp)
   13a98:	10800003 	ldbu	r2,0(r2)
   13a9c:	10c03fcc 	andi	r3,r2,255
   13aa0:	2005883a 	mov	r2,r4
   13aa4:	10c00025 	stbio	r3,0(r2)
   13aa8:	00004006 	br	13bac <alt_write_value_to_flash+0x154>
   13aac:	e0bffd17 	ldw	r2,-12(fp)
   13ab0:	10802e17 	ldw	r2,184(r2)
   13ab4:	10800098 	cmpnei	r2,r2,2
   13ab8:	1000151e 	bne	r2,zero,13b10 <alt_write_value_to_flash+0xb8>
   13abc:	e0bfff17 	ldw	r2,-4(fp)
   13ac0:	10800003 	ldbu	r2,0(r2)
   13ac4:	10803fcc 	andi	r2,r2,255
   13ac8:	e0bffc0d 	sth	r2,-16(fp)
   13acc:	e0bfff17 	ldw	r2,-4(fp)
   13ad0:	10800044 	addi	r2,r2,1
   13ad4:	10800003 	ldbu	r2,0(r2)
   13ad8:	10803fcc 	andi	r2,r2,255
   13adc:	1004923a 	slli	r2,r2,8
   13ae0:	1007883a 	mov	r3,r2
   13ae4:	e0bffc0b 	ldhu	r2,-16(fp)
   13ae8:	1884b03a 	or	r2,r3,r2
   13aec:	e0bffc0d 	sth	r2,-16(fp)
   13af0:	e0bffd17 	ldw	r2,-12(fp)
   13af4:	10800a17 	ldw	r2,40(r2)
   13af8:	1007883a 	mov	r3,r2
   13afc:	e0bffe17 	ldw	r2,-8(fp)
   13b00:	1885883a 	add	r2,r3,r2
   13b04:	e0fffc0b 	ldhu	r3,-16(fp)
   13b08:	10c0002d 	sthio	r3,0(r2)
   13b0c:	00002706 	br	13bac <alt_write_value_to_flash+0x154>
   13b10:	e0bffd17 	ldw	r2,-12(fp)
   13b14:	10802e17 	ldw	r2,184(r2)
   13b18:	10800118 	cmpnei	r2,r2,4
   13b1c:	1000231e 	bne	r2,zero,13bac <alt_write_value_to_flash+0x154>
   13b20:	e0bfff17 	ldw	r2,-4(fp)
   13b24:	10800003 	ldbu	r2,0(r2)
   13b28:	10803fcc 	andi	r2,r2,255
   13b2c:	e0bffb15 	stw	r2,-20(fp)
   13b30:	e0bfff17 	ldw	r2,-4(fp)
   13b34:	10800044 	addi	r2,r2,1
   13b38:	10800003 	ldbu	r2,0(r2)
   13b3c:	10803fcc 	andi	r2,r2,255
   13b40:	1006923a 	slli	r3,r2,8
   13b44:	e0bffb17 	ldw	r2,-20(fp)
   13b48:	10c4b03a 	or	r2,r2,r3
   13b4c:	e0bffb15 	stw	r2,-20(fp)
   13b50:	e0bfff17 	ldw	r2,-4(fp)
   13b54:	10800084 	addi	r2,r2,2
   13b58:	10800003 	ldbu	r2,0(r2)
   13b5c:	10803fcc 	andi	r2,r2,255
   13b60:	1006943a 	slli	r3,r2,16
   13b64:	e0bffb17 	ldw	r2,-20(fp)
   13b68:	10c4b03a 	or	r2,r2,r3
   13b6c:	e0bffb15 	stw	r2,-20(fp)
   13b70:	e0bfff17 	ldw	r2,-4(fp)
   13b74:	108000c4 	addi	r2,r2,3
   13b78:	10800003 	ldbu	r2,0(r2)
   13b7c:	10803fcc 	andi	r2,r2,255
   13b80:	1006963a 	slli	r3,r2,24
   13b84:	e0bffb17 	ldw	r2,-20(fp)
   13b88:	10c4b03a 	or	r2,r2,r3
   13b8c:	e0bffb15 	stw	r2,-20(fp)
   13b90:	e0bffd17 	ldw	r2,-12(fp)
   13b94:	10800a17 	ldw	r2,40(r2)
   13b98:	1007883a 	mov	r3,r2
   13b9c:	e0bffe17 	ldw	r2,-8(fp)
   13ba0:	1885883a 	add	r2,r3,r2
   13ba4:	e0fffb17 	ldw	r3,-20(fp)
   13ba8:	10c00035 	stwio	r3,0(r2)
   13bac:	e037883a 	mov	sp,fp
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00104 	addi	sp,sp,4
   13bb8:	f800283a 	ret

00013bbc <alt_flash_program_block>:
   13bbc:	defff304 	addi	sp,sp,-52
   13bc0:	dfc00c15 	stw	ra,48(sp)
   13bc4:	df000b15 	stw	fp,44(sp)
   13bc8:	df000b04 	addi	fp,sp,44
   13bcc:	e13ffc15 	stw	r4,-16(fp)
   13bd0:	e17ffd15 	stw	r5,-12(fp)
   13bd4:	e1bffe15 	stw	r6,-8(fp)
   13bd8:	e1ffff15 	stw	r7,-4(fp)
   13bdc:	e03ffa15 	stw	zero,-24(fp)
   13be0:	e0bffc17 	ldw	r2,-16(fp)
   13be4:	10800a17 	ldw	r2,40(r2)
   13be8:	1007883a 	mov	r3,r2
   13bec:	e0bffd17 	ldw	r2,-12(fp)
   13bf0:	1885883a 	add	r2,r3,r2
   13bf4:	1009883a 	mov	r4,r2
   13bf8:	e0bffc17 	ldw	r2,-16(fp)
   13bfc:	10c02e17 	ldw	r3,184(r2)
   13c00:	20c5283a 	div	r2,r4,r3
   13c04:	10c5383a 	mul	r2,r2,r3
   13c08:	2085c83a 	sub	r2,r4,r2
   13c0c:	e0bff915 	stw	r2,-28(fp)
   13c10:	e0bff917 	ldw	r2,-28(fp)
   13c14:	1005003a 	cmpeq	r2,r2,zero
   13c18:	10003a1e 	bne	r2,zero,13d04 <alt_flash_program_block+0x148>
   13c1c:	e0bffc17 	ldw	r2,-16(fp)
   13c20:	10c02e17 	ldw	r3,184(r2)
   13c24:	e0bff917 	ldw	r2,-28(fp)
   13c28:	1885c83a 	sub	r2,r3,r2
   13c2c:	e0bff815 	stw	r2,-32(fp)
   13c30:	e03ff615 	stw	zero,-40(fp)
   13c34:	00001206 	br	13c80 <alt_flash_program_block+0xc4>
   13c38:	e17ff617 	ldw	r5,-40(fp)
   13c3c:	e0bffc17 	ldw	r2,-16(fp)
   13c40:	10800a17 	ldw	r2,40(r2)
   13c44:	1009883a 	mov	r4,r2
   13c48:	e0fffd17 	ldw	r3,-12(fp)
   13c4c:	e0bff917 	ldw	r2,-28(fp)
   13c50:	1887c83a 	sub	r3,r3,r2
   13c54:	e0bff617 	ldw	r2,-40(fp)
   13c58:	1885883a 	add	r2,r3,r2
   13c5c:	2085883a 	add	r2,r4,r2
   13c60:	10800023 	ldbuio	r2,0(r2)
   13c64:	1007883a 	mov	r3,r2
   13c68:	e0bffb04 	addi	r2,fp,-20
   13c6c:	1145883a 	add	r2,r2,r5
   13c70:	10c00005 	stb	r3,0(r2)
   13c74:	e0bff617 	ldw	r2,-40(fp)
   13c78:	10800044 	addi	r2,r2,1
   13c7c:	e0bff615 	stw	r2,-40(fp)
   13c80:	e0fff617 	ldw	r3,-40(fp)
   13c84:	e0bff917 	ldw	r2,-28(fp)
   13c88:	18bfeb16 	blt	r3,r2,13c38 <alt_flash_program_block+0x7c>
   13c8c:	e03ff615 	stw	zero,-40(fp)
   13c90:	00000e06 	br	13ccc <alt_flash_program_block+0x110>
   13c94:	e0fff917 	ldw	r3,-28(fp)
   13c98:	e0bff617 	ldw	r2,-40(fp)
   13c9c:	1889883a 	add	r4,r3,r2
   13ca0:	e0bff617 	ldw	r2,-40(fp)
   13ca4:	1007883a 	mov	r3,r2
   13ca8:	e0bffe17 	ldw	r2,-8(fp)
   13cac:	1885883a 	add	r2,r3,r2
   13cb0:	10c00003 	ldbu	r3,0(r2)
   13cb4:	e0bffb04 	addi	r2,fp,-20
   13cb8:	1105883a 	add	r2,r2,r4
   13cbc:	10c00005 	stb	r3,0(r2)
   13cc0:	e0bff617 	ldw	r2,-40(fp)
   13cc4:	10800044 	addi	r2,r2,1
   13cc8:	e0bff615 	stw	r2,-40(fp)
   13ccc:	e0fff617 	ldw	r3,-40(fp)
   13cd0:	e0bff817 	ldw	r2,-32(fp)
   13cd4:	18bfef16 	blt	r3,r2,13c94 <alt_flash_program_block+0xd8>
   13cd8:	e0fffd17 	ldw	r3,-12(fp)
   13cdc:	e0bff917 	ldw	r2,-28(fp)
   13ce0:	188bc83a 	sub	r5,r3,r2
   13ce4:	e1bffb04 	addi	r6,fp,-20
   13ce8:	e0800217 	ldw	r2,8(fp)
   13cec:	e13ffc17 	ldw	r4,-16(fp)
   13cf0:	103ee83a 	callr	r2
   13cf4:	e0bffa15 	stw	r2,-24(fp)
   13cf8:	e0bff817 	ldw	r2,-32(fp)
   13cfc:	e0bff615 	stw	r2,-40(fp)
   13d00:	00000106 	br	13d08 <alt_flash_program_block+0x14c>
   13d04:	e03ff615 	stw	zero,-40(fp)
   13d08:	e0fffd17 	ldw	r3,-12(fp)
   13d0c:	e0bfff17 	ldw	r2,-4(fp)
   13d10:	1889883a 	add	r4,r3,r2
   13d14:	e0bffc17 	ldw	r2,-16(fp)
   13d18:	10c02e17 	ldw	r3,184(r2)
   13d1c:	20c5283a 	div	r2,r4,r3
   13d20:	10c5383a 	mul	r2,r2,r3
   13d24:	2085c83a 	sub	r2,r4,r2
   13d28:	e0bff715 	stw	r2,-36(fp)
   13d2c:	00001006 	br	13d70 <alt_flash_program_block+0x1b4>
   13d30:	e0fffd17 	ldw	r3,-12(fp)
   13d34:	e0bff617 	ldw	r2,-40(fp)
   13d38:	188b883a 	add	r5,r3,r2
   13d3c:	e0bff617 	ldw	r2,-40(fp)
   13d40:	1007883a 	mov	r3,r2
   13d44:	e0bffe17 	ldw	r2,-8(fp)
   13d48:	188d883a 	add	r6,r3,r2
   13d4c:	e0800217 	ldw	r2,8(fp)
   13d50:	e13ffc17 	ldw	r4,-16(fp)
   13d54:	103ee83a 	callr	r2
   13d58:	e0bffa15 	stw	r2,-24(fp)
   13d5c:	e0bffc17 	ldw	r2,-16(fp)
   13d60:	10c02e17 	ldw	r3,184(r2)
   13d64:	e0bff617 	ldw	r2,-40(fp)
   13d68:	10c5883a 	add	r2,r2,r3
   13d6c:	e0bff615 	stw	r2,-40(fp)
   13d70:	e0bffa17 	ldw	r2,-24(fp)
   13d74:	1004c03a 	cmpne	r2,r2,zero
   13d78:	1000051e 	bne	r2,zero,13d90 <alt_flash_program_block+0x1d4>
   13d7c:	e0ffff17 	ldw	r3,-4(fp)
   13d80:	e0bff717 	ldw	r2,-36(fp)
   13d84:	1887c83a 	sub	r3,r3,r2
   13d88:	e0bff617 	ldw	r2,-40(fp)
   13d8c:	10ffe816 	blt	r2,r3,13d30 <alt_flash_program_block+0x174>
   13d90:	e0bff717 	ldw	r2,-36(fp)
   13d94:	1005003a 	cmpeq	r2,r2,zero
   13d98:	10003c1e 	bne	r2,zero,13e8c <alt_flash_program_block+0x2d0>
   13d9c:	e0bffa17 	ldw	r2,-24(fp)
   13da0:	1004c03a 	cmpne	r2,r2,zero
   13da4:	1000391e 	bne	r2,zero,13e8c <alt_flash_program_block+0x2d0>
   13da8:	e0bffc17 	ldw	r2,-16(fp)
   13dac:	10c02e17 	ldw	r3,184(r2)
   13db0:	e0bff717 	ldw	r2,-36(fp)
   13db4:	1885c83a 	sub	r2,r3,r2
   13db8:	e0bff915 	stw	r2,-28(fp)
   13dbc:	e03ff515 	stw	zero,-44(fp)
   13dc0:	00000e06 	br	13dfc <alt_flash_program_block+0x240>
   13dc4:	e13ff517 	ldw	r4,-44(fp)
   13dc8:	e0bff617 	ldw	r2,-40(fp)
   13dcc:	1007883a 	mov	r3,r2
   13dd0:	e0bffe17 	ldw	r2,-8(fp)
   13dd4:	1887883a 	add	r3,r3,r2
   13dd8:	e0bff517 	ldw	r2,-44(fp)
   13ddc:	1885883a 	add	r2,r3,r2
   13de0:	10c00003 	ldbu	r3,0(r2)
   13de4:	e0bffb04 	addi	r2,fp,-20
   13de8:	1105883a 	add	r2,r2,r4
   13dec:	10c00005 	stb	r3,0(r2)
   13df0:	e0bff517 	ldw	r2,-44(fp)
   13df4:	10800044 	addi	r2,r2,1
   13df8:	e0bff515 	stw	r2,-44(fp)
   13dfc:	e0fff517 	ldw	r3,-44(fp)
   13e00:	e0bff717 	ldw	r2,-36(fp)
   13e04:	18bfef16 	blt	r3,r2,13dc4 <alt_flash_program_block+0x208>
   13e08:	e03ff515 	stw	zero,-44(fp)
   13e0c:	00001406 	br	13e60 <alt_flash_program_block+0x2a4>
   13e10:	e0fff717 	ldw	r3,-36(fp)
   13e14:	e0bff517 	ldw	r2,-44(fp)
   13e18:	188b883a 	add	r5,r3,r2
   13e1c:	e0bffc17 	ldw	r2,-16(fp)
   13e20:	10800a17 	ldw	r2,40(r2)
   13e24:	1009883a 	mov	r4,r2
   13e28:	e0fffd17 	ldw	r3,-12(fp)
   13e2c:	e0bfff17 	ldw	r2,-4(fp)
   13e30:	1887883a 	add	r3,r3,r2
   13e34:	e0bff517 	ldw	r2,-44(fp)
   13e38:	1885883a 	add	r2,r3,r2
   13e3c:	2085883a 	add	r2,r4,r2
   13e40:	10800023 	ldbuio	r2,0(r2)
   13e44:	1007883a 	mov	r3,r2
   13e48:	e0bffb04 	addi	r2,fp,-20
   13e4c:	1145883a 	add	r2,r2,r5
   13e50:	10c00005 	stb	r3,0(r2)
   13e54:	e0bff517 	ldw	r2,-44(fp)
   13e58:	10800044 	addi	r2,r2,1
   13e5c:	e0bff515 	stw	r2,-44(fp)
   13e60:	e0fff517 	ldw	r3,-44(fp)
   13e64:	e0bff917 	ldw	r2,-28(fp)
   13e68:	18bfe916 	blt	r3,r2,13e10 <alt_flash_program_block+0x254>
   13e6c:	e0fffd17 	ldw	r3,-12(fp)
   13e70:	e0bff617 	ldw	r2,-40(fp)
   13e74:	188b883a 	add	r5,r3,r2
   13e78:	e1bffb04 	addi	r6,fp,-20
   13e7c:	e0800217 	ldw	r2,8(fp)
   13e80:	e13ffc17 	ldw	r4,-16(fp)
   13e84:	103ee83a 	callr	r2
   13e88:	e0bffa15 	stw	r2,-24(fp)
   13e8c:	e0bffa17 	ldw	r2,-24(fp)
   13e90:	e037883a 	mov	sp,fp
   13e94:	dfc00117 	ldw	ra,4(sp)
   13e98:	df000017 	ldw	fp,0(sp)
   13e9c:	dec00204 	addi	sp,sp,8
   13ea0:	f800283a 	ret

00013ea4 <alt_read_query_entry_8bit>:
   13ea4:	defffd04 	addi	sp,sp,-12
   13ea8:	df000215 	stw	fp,8(sp)
   13eac:	df000204 	addi	fp,sp,8
   13eb0:	e13ffe15 	stw	r4,-8(fp)
   13eb4:	e17fff15 	stw	r5,-4(fp)
   13eb8:	e0bffe17 	ldw	r2,-8(fp)
   13ebc:	10800a17 	ldw	r2,40(r2)
   13ec0:	1007883a 	mov	r3,r2
   13ec4:	e0bfff17 	ldw	r2,-4(fp)
   13ec8:	1885883a 	add	r2,r3,r2
   13ecc:	10800023 	ldbuio	r2,0(r2)
   13ed0:	10803fcc 	andi	r2,r2,255
   13ed4:	e037883a 	mov	sp,fp
   13ed8:	df000017 	ldw	fp,0(sp)
   13edc:	dec00104 	addi	sp,sp,4
   13ee0:	f800283a 	ret

00013ee4 <alt_read_query_entry_16bit>:
   13ee4:	defffd04 	addi	sp,sp,-12
   13ee8:	df000215 	stw	fp,8(sp)
   13eec:	df000204 	addi	fp,sp,8
   13ef0:	e13ffe15 	stw	r4,-8(fp)
   13ef4:	e17fff15 	stw	r5,-4(fp)
   13ef8:	e0bffe17 	ldw	r2,-8(fp)
   13efc:	10800a17 	ldw	r2,40(r2)
   13f00:	1007883a 	mov	r3,r2
   13f04:	e0bfff17 	ldw	r2,-4(fp)
   13f08:	1085883a 	add	r2,r2,r2
   13f0c:	1885883a 	add	r2,r3,r2
   13f10:	1080002b 	ldhuio	r2,0(r2)
   13f14:	10803fcc 	andi	r2,r2,255
   13f18:	e037883a 	mov	sp,fp
   13f1c:	df000017 	ldw	fp,0(sp)
   13f20:	dec00104 	addi	sp,sp,4
   13f24:	f800283a 	ret

00013f28 <alt_read_query_entry_32bit>:
   13f28:	defffd04 	addi	sp,sp,-12
   13f2c:	df000215 	stw	fp,8(sp)
   13f30:	df000204 	addi	fp,sp,8
   13f34:	e13ffe15 	stw	r4,-8(fp)
   13f38:	e17fff15 	stw	r5,-4(fp)
   13f3c:	e0bffe17 	ldw	r2,-8(fp)
   13f40:	10800a17 	ldw	r2,40(r2)
   13f44:	1007883a 	mov	r3,r2
   13f48:	e0bfff17 	ldw	r2,-4(fp)
   13f4c:	1085883a 	add	r2,r2,r2
   13f50:	1085883a 	add	r2,r2,r2
   13f54:	1885883a 	add	r2,r3,r2
   13f58:	10800037 	ldwio	r2,0(r2)
   13f5c:	10803fcc 	andi	r2,r2,255
   13f60:	e037883a 	mov	sp,fp
   13f64:	df000017 	ldw	fp,0(sp)
   13f68:	dec00104 	addi	sp,sp,4
   13f6c:	f800283a 	ret

00013f70 <alt_write_flash_command_8bit_device_8bit_mode>:
   13f70:	defffc04 	addi	sp,sp,-16
   13f74:	df000315 	stw	fp,12(sp)
   13f78:	df000304 	addi	fp,sp,12
   13f7c:	e13ffd15 	stw	r4,-12(fp)
   13f80:	e17ffe15 	stw	r5,-8(fp)
   13f84:	e1bfff05 	stb	r6,-4(fp)
   13f88:	e0fffd17 	ldw	r3,-12(fp)
   13f8c:	e0bffe17 	ldw	r2,-8(fp)
   13f90:	1885883a 	add	r2,r3,r2
   13f94:	e0ffff03 	ldbu	r3,-4(fp)
   13f98:	10c00025 	stbio	r3,0(r2)
   13f9c:	e037883a 	mov	sp,fp
   13fa0:	df000017 	ldw	fp,0(sp)
   13fa4:	dec00104 	addi	sp,sp,4
   13fa8:	f800283a 	ret

00013fac <alt_write_flash_command_16bit_device_8bit_mode>:
   13fac:	defffc04 	addi	sp,sp,-16
   13fb0:	df000315 	stw	fp,12(sp)
   13fb4:	df000304 	addi	fp,sp,12
   13fb8:	e13ffd15 	stw	r4,-12(fp)
   13fbc:	e17ffe15 	stw	r5,-8(fp)
   13fc0:	e1bfff05 	stb	r6,-4(fp)
   13fc4:	e0bffe17 	ldw	r2,-8(fp)
   13fc8:	1080004c 	andi	r2,r2,1
   13fcc:	10803fcc 	andi	r2,r2,255
   13fd0:	1005003a 	cmpeq	r2,r2,zero
   13fd4:	1000081e 	bne	r2,zero,13ff8 <alt_write_flash_command_16bit_device_8bit_mode+0x4c>
   13fd8:	e0bffe17 	ldw	r2,-8(fp)
   13fdc:	1085883a 	add	r2,r2,r2
   13fe0:	1007883a 	mov	r3,r2
   13fe4:	e0bffd17 	ldw	r2,-12(fp)
   13fe8:	1885883a 	add	r2,r3,r2
   13fec:	e0ffff03 	ldbu	r3,-4(fp)
   13ff0:	10c00025 	stbio	r3,0(r2)
   13ff4:	00000806 	br	14018 <alt_write_flash_command_16bit_device_8bit_mode+0x6c>
   13ff8:	e0bffe17 	ldw	r2,-8(fp)
   13ffc:	1085883a 	add	r2,r2,r2
   14000:	1007883a 	mov	r3,r2
   14004:	e0bffd17 	ldw	r2,-12(fp)
   14008:	1885883a 	add	r2,r3,r2
   1400c:	10800044 	addi	r2,r2,1
   14010:	e0ffff03 	ldbu	r3,-4(fp)
   14014:	10c00025 	stbio	r3,0(r2)
   14018:	e037883a 	mov	sp,fp
   1401c:	df000017 	ldw	fp,0(sp)
   14020:	dec00104 	addi	sp,sp,4
   14024:	f800283a 	ret

00014028 <alt_write_flash_command_32bit_device_8bit_mode>:
   14028:	defffc04 	addi	sp,sp,-16
   1402c:	df000315 	stw	fp,12(sp)
   14030:	df000304 	addi	fp,sp,12
   14034:	e13ffd15 	stw	r4,-12(fp)
   14038:	e17ffe15 	stw	r5,-8(fp)
   1403c:	e1bfff05 	stb	r6,-4(fp)
   14040:	e0bffe17 	ldw	r2,-8(fp)
   14044:	1085883a 	add	r2,r2,r2
   14048:	1085883a 	add	r2,r2,r2
   1404c:	1007883a 	mov	r3,r2
   14050:	e0bffd17 	ldw	r2,-12(fp)
   14054:	1885883a 	add	r2,r3,r2
   14058:	e0ffff03 	ldbu	r3,-4(fp)
   1405c:	10c00025 	stbio	r3,0(r2)
   14060:	e037883a 	mov	sp,fp
   14064:	df000017 	ldw	fp,0(sp)
   14068:	dec00104 	addi	sp,sp,4
   1406c:	f800283a 	ret

00014070 <alt_write_flash_command_16bit_device_16bit_mode>:
   14070:	defffc04 	addi	sp,sp,-16
   14074:	df000315 	stw	fp,12(sp)
   14078:	df000304 	addi	fp,sp,12
   1407c:	e13ffd15 	stw	r4,-12(fp)
   14080:	e17ffe15 	stw	r5,-8(fp)
   14084:	e1bfff05 	stb	r6,-4(fp)
   14088:	e0bffe17 	ldw	r2,-8(fp)
   1408c:	1085883a 	add	r2,r2,r2
   14090:	1007883a 	mov	r3,r2
   14094:	e0bffd17 	ldw	r2,-12(fp)
   14098:	1885883a 	add	r2,r3,r2
   1409c:	e0ffff03 	ldbu	r3,-4(fp)
   140a0:	10c0002d 	sthio	r3,0(r2)
   140a4:	e037883a 	mov	sp,fp
   140a8:	df000017 	ldw	fp,0(sp)
   140ac:	dec00104 	addi	sp,sp,4
   140b0:	f800283a 	ret

000140b4 <alt_write_flash_command_32bit_device_16bit_mode>:
   140b4:	defffc04 	addi	sp,sp,-16
   140b8:	df000315 	stw	fp,12(sp)
   140bc:	df000304 	addi	fp,sp,12
   140c0:	e13ffd15 	stw	r4,-12(fp)
   140c4:	e17ffe15 	stw	r5,-8(fp)
   140c8:	e1bfff05 	stb	r6,-4(fp)
   140cc:	e0bffe17 	ldw	r2,-8(fp)
   140d0:	1085883a 	add	r2,r2,r2
   140d4:	1085883a 	add	r2,r2,r2
   140d8:	1007883a 	mov	r3,r2
   140dc:	e0bffd17 	ldw	r2,-12(fp)
   140e0:	1885883a 	add	r2,r3,r2
   140e4:	e0ffff03 	ldbu	r3,-4(fp)
   140e8:	10c0002d 	sthio	r3,0(r2)
   140ec:	e037883a 	mov	sp,fp
   140f0:	df000017 	ldw	fp,0(sp)
   140f4:	dec00104 	addi	sp,sp,4
   140f8:	f800283a 	ret

000140fc <alt_write_flash_command_32bit_device_32bit_mode>:
   140fc:	defffc04 	addi	sp,sp,-16
   14100:	df000315 	stw	fp,12(sp)
   14104:	df000304 	addi	fp,sp,12
   14108:	e13ffd15 	stw	r4,-12(fp)
   1410c:	e17ffe15 	stw	r5,-8(fp)
   14110:	e1bfff05 	stb	r6,-4(fp)
   14114:	e0bffe17 	ldw	r2,-8(fp)
   14118:	1085883a 	add	r2,r2,r2
   1411c:	1085883a 	add	r2,r2,r2
   14120:	1007883a 	mov	r3,r2
   14124:	e0bffd17 	ldw	r2,-12(fp)
   14128:	1885883a 	add	r2,r3,r2
   1412c:	e0ffff03 	ldbu	r3,-4(fp)
   14130:	10c00035 	stwio	r3,0(r2)
   14134:	e037883a 	mov	sp,fp
   14138:	df000017 	ldw	fp,0(sp)
   1413c:	dec00104 	addi	sp,sp,4
   14140:	f800283a 	ret

00014144 <alt_write_native_8bit>:
   14144:	defffd04 	addi	sp,sp,-12
   14148:	df000215 	stw	fp,8(sp)
   1414c:	df000204 	addi	fp,sp,8
   14150:	e13ffe15 	stw	r4,-8(fp)
   14154:	e17fff15 	stw	r5,-4(fp)
   14158:	e0bfff17 	ldw	r2,-4(fp)
   1415c:	10c03fcc 	andi	r3,r2,255
   14160:	e0bffe17 	ldw	r2,-8(fp)
   14164:	10c00025 	stbio	r3,0(r2)
   14168:	e037883a 	mov	sp,fp
   1416c:	df000017 	ldw	fp,0(sp)
   14170:	dec00104 	addi	sp,sp,4
   14174:	f800283a 	ret

00014178 <alt_write_native_16bit>:
   14178:	defffd04 	addi	sp,sp,-12
   1417c:	df000215 	stw	fp,8(sp)
   14180:	df000204 	addi	fp,sp,8
   14184:	e13ffe15 	stw	r4,-8(fp)
   14188:	e17fff15 	stw	r5,-4(fp)
   1418c:	e0bfff17 	ldw	r2,-4(fp)
   14190:	10ffffcc 	andi	r3,r2,65535
   14194:	e0bffe17 	ldw	r2,-8(fp)
   14198:	10c0002d 	sthio	r3,0(r2)
   1419c:	e037883a 	mov	sp,fp
   141a0:	df000017 	ldw	fp,0(sp)
   141a4:	dec00104 	addi	sp,sp,4
   141a8:	f800283a 	ret

000141ac <alt_write_native_32bit>:
   141ac:	defffd04 	addi	sp,sp,-12
   141b0:	df000215 	stw	fp,8(sp)
   141b4:	df000204 	addi	fp,sp,8
   141b8:	e13ffe15 	stw	r4,-8(fp)
   141bc:	e17fff15 	stw	r5,-4(fp)
   141c0:	e0ffff17 	ldw	r3,-4(fp)
   141c4:	e0bffe17 	ldw	r2,-8(fp)
   141c8:	10c00035 	stwio	r3,0(r2)
   141cc:	e037883a 	mov	sp,fp
   141d0:	df000017 	ldw	fp,0(sp)
   141d4:	dec00104 	addi	sp,sp,4
   141d8:	f800283a 	ret

000141dc <alt_set_flash_width_func>:
   141dc:	defffb04 	addi	sp,sp,-20
   141e0:	df000415 	stw	fp,16(sp)
   141e4:	df000404 	addi	fp,sp,16
   141e8:	e13ffd15 	stw	r4,-12(fp)
   141ec:	e03ffc15 	stw	zero,-16(fp)
   141f0:	e0bffd17 	ldw	r2,-12(fp)
   141f4:	10802e17 	ldw	r2,184(r2)
   141f8:	e0bfff15 	stw	r2,-4(fp)
   141fc:	e0ffff17 	ldw	r3,-4(fp)
   14200:	188000a0 	cmpeqi	r2,r3,2
   14204:	1000261e 	bne	r2,zero,142a0 <alt_set_flash_width_func+0xc4>
   14208:	e0ffff17 	ldw	r3,-4(fp)
   1420c:	18800120 	cmpeqi	r2,r3,4
   14210:	1000391e 	bne	r2,zero,142f8 <alt_set_flash_width_func+0x11c>
   14214:	e0ffff17 	ldw	r3,-4(fp)
   14218:	18800060 	cmpeqi	r2,r3,1
   1421c:	1000011e 	bne	r2,zero,14224 <alt_set_flash_width_func+0x48>
   14220:	00003e06 	br	1431c <alt_set_flash_width_func+0x140>
   14224:	e0fffd17 	ldw	r3,-12(fp)
   14228:	00800074 	movhi	r2,1
   1422c:	10905104 	addi	r2,r2,16708
   14230:	18803515 	stw	r2,212(r3)
   14234:	e0bffd17 	ldw	r2,-12(fp)
   14238:	10802f17 	ldw	r2,188(r2)
   1423c:	10800058 	cmpnei	r2,r2,1
   14240:	1000051e 	bne	r2,zero,14258 <alt_set_flash_width_func+0x7c>
   14244:	e0fffd17 	ldw	r3,-12(fp)
   14248:	00800074 	movhi	r2,1
   1424c:	108fdc04 	addi	r2,r2,16240
   14250:	18803315 	stw	r2,204(r3)
   14254:	00003306 	br	14324 <alt_set_flash_width_func+0x148>
   14258:	e0bffd17 	ldw	r2,-12(fp)
   1425c:	10802f17 	ldw	r2,188(r2)
   14260:	10800098 	cmpnei	r2,r2,2
   14264:	1000051e 	bne	r2,zero,1427c <alt_set_flash_width_func+0xa0>
   14268:	e0fffd17 	ldw	r3,-12(fp)
   1426c:	00800074 	movhi	r2,1
   14270:	108feb04 	addi	r2,r2,16300
   14274:	18803315 	stw	r2,204(r3)
   14278:	00002a06 	br	14324 <alt_set_flash_width_func+0x148>
   1427c:	e0bffd17 	ldw	r2,-12(fp)
   14280:	10802f17 	ldw	r2,188(r2)
   14284:	10800118 	cmpnei	r2,r2,4
   14288:	1000261e 	bne	r2,zero,14324 <alt_set_flash_width_func+0x148>
   1428c:	e0fffd17 	ldw	r3,-12(fp)
   14290:	00800074 	movhi	r2,1
   14294:	10900a04 	addi	r2,r2,16424
   14298:	18803315 	stw	r2,204(r3)
   1429c:	00002106 	br	14324 <alt_set_flash_width_func+0x148>
   142a0:	e0fffd17 	ldw	r3,-12(fp)
   142a4:	00800074 	movhi	r2,1
   142a8:	10905e04 	addi	r2,r2,16760
   142ac:	18803515 	stw	r2,212(r3)
   142b0:	e0bffd17 	ldw	r2,-12(fp)
   142b4:	10802f17 	ldw	r2,188(r2)
   142b8:	10800098 	cmpnei	r2,r2,2
   142bc:	1000051e 	bne	r2,zero,142d4 <alt_set_flash_width_func+0xf8>
   142c0:	e0fffd17 	ldw	r3,-12(fp)
   142c4:	00800074 	movhi	r2,1
   142c8:	10901c04 	addi	r2,r2,16496
   142cc:	18803315 	stw	r2,204(r3)
   142d0:	00001406 	br	14324 <alt_set_flash_width_func+0x148>
   142d4:	e0bffd17 	ldw	r2,-12(fp)
   142d8:	10802f17 	ldw	r2,188(r2)
   142dc:	10800118 	cmpnei	r2,r2,4
   142e0:	1000101e 	bne	r2,zero,14324 <alt_set_flash_width_func+0x148>
   142e4:	e0fffd17 	ldw	r3,-12(fp)
   142e8:	00800074 	movhi	r2,1
   142ec:	10902d04 	addi	r2,r2,16564
   142f0:	18803315 	stw	r2,204(r3)
   142f4:	00000b06 	br	14324 <alt_set_flash_width_func+0x148>
   142f8:	e0fffd17 	ldw	r3,-12(fp)
   142fc:	00800074 	movhi	r2,1
   14300:	10906b04 	addi	r2,r2,16812
   14304:	18803515 	stw	r2,212(r3)
   14308:	e0fffd17 	ldw	r3,-12(fp)
   1430c:	00800074 	movhi	r2,1
   14310:	10903f04 	addi	r2,r2,16636
   14314:	18803315 	stw	r2,204(r3)
   14318:	00000206 	br	14324 <alt_set_flash_width_func+0x148>
   1431c:	00bffcc4 	movi	r2,-13
   14320:	e0bffc15 	stw	r2,-16(fp)
   14324:	e0bffc17 	ldw	r2,-16(fp)
   14328:	1004c03a 	cmpne	r2,r2,zero
   1432c:	10001e1e 	bne	r2,zero,143a8 <alt_set_flash_width_func+0x1cc>
   14330:	e0bffd17 	ldw	r2,-12(fp)
   14334:	10802f17 	ldw	r2,188(r2)
   14338:	e0bffe15 	stw	r2,-8(fp)
   1433c:	e0fffe17 	ldw	r3,-8(fp)
   14340:	188000a0 	cmpeqi	r2,r3,2
   14344:	10000c1e 	bne	r2,zero,14378 <alt_set_flash_width_func+0x19c>
   14348:	e0fffe17 	ldw	r3,-8(fp)
   1434c:	18800120 	cmpeqi	r2,r3,4
   14350:	10000e1e 	bne	r2,zero,1438c <alt_set_flash_width_func+0x1b0>
   14354:	e0fffe17 	ldw	r3,-8(fp)
   14358:	18800060 	cmpeqi	r2,r3,1
   1435c:	1000011e 	bne	r2,zero,14364 <alt_set_flash_width_func+0x188>
   14360:	00000f06 	br	143a0 <alt_set_flash_width_func+0x1c4>
   14364:	e0fffd17 	ldw	r3,-12(fp)
   14368:	00800074 	movhi	r2,1
   1436c:	108fa904 	addi	r2,r2,16036
   14370:	18803415 	stw	r2,208(r3)
   14374:	00000c06 	br	143a8 <alt_set_flash_width_func+0x1cc>
   14378:	e0fffd17 	ldw	r3,-12(fp)
   1437c:	00800074 	movhi	r2,1
   14380:	108fb904 	addi	r2,r2,16100
   14384:	18803415 	stw	r2,208(r3)
   14388:	00000706 	br	143a8 <alt_set_flash_width_func+0x1cc>
   1438c:	e0fffd17 	ldw	r3,-12(fp)
   14390:	00800074 	movhi	r2,1
   14394:	108fca04 	addi	r2,r2,16168
   14398:	18803415 	stw	r2,208(r3)
   1439c:	00000206 	br	143a8 <alt_set_flash_width_func+0x1cc>
   143a0:	00bffcc4 	movi	r2,-13
   143a4:	e0bffc15 	stw	r2,-16(fp)
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	e037883a 	mov	sp,fp
   143b0:	df000017 	ldw	fp,0(sp)
   143b4:	dec00104 	addi	sp,sp,4
   143b8:	f800283a 	ret

000143bc <alt_set_flash_algorithm_func>:
   143bc:	defffc04 	addi	sp,sp,-16
   143c0:	df000315 	stw	fp,12(sp)
   143c4:	df000304 	addi	fp,sp,12
   143c8:	e13ffe15 	stw	r4,-8(fp)
   143cc:	e03ffd15 	stw	zero,-12(fp)
   143d0:	e0bffe17 	ldw	r2,-8(fp)
   143d4:	10802d17 	ldw	r2,180(r2)
   143d8:	e0bfff15 	stw	r2,-4(fp)
   143dc:	e0ffff17 	ldw	r3,-4(fp)
   143e0:	188000a0 	cmpeqi	r2,r3,2
   143e4:	1000071e 	bne	r2,zero,14404 <alt_set_flash_algorithm_func+0x48>
   143e8:	e0ffff17 	ldw	r3,-4(fp)
   143ec:	188000e0 	cmpeqi	r2,r3,3
   143f0:	10000d1e 	bne	r2,zero,14428 <alt_set_flash_algorithm_func+0x6c>
   143f4:	e0ffff17 	ldw	r3,-4(fp)
   143f8:	18800060 	cmpeqi	r2,r3,1
   143fc:	10000a1e 	bne	r2,zero,14428 <alt_set_flash_algorithm_func+0x6c>
   14400:	00001206 	br	1444c <alt_set_flash_algorithm_func+0x90>
   14404:	e0fffe17 	ldw	r3,-8(fp)
   14408:	008000b4 	movhi	r2,2
   1440c:	10a8ab04 	addi	r2,r2,-23892
   14410:	18800815 	stw	r2,32(r3)
   14414:	e0fffe17 	ldw	r3,-8(fp)
   14418:	008000b4 	movhi	r2,2
   1441c:	10a89104 	addi	r2,r2,-23996
   14420:	18800915 	stw	r2,36(r3)
   14424:	00000b06 	br	14454 <alt_set_flash_algorithm_func+0x98>
   14428:	e0fffe17 	ldw	r3,-8(fp)
   1442c:	008000b4 	movhi	r2,2
   14430:	10a9ca04 	addi	r2,r2,-22744
   14434:	18800815 	stw	r2,32(r3)
   14438:	e0fffe17 	ldw	r3,-8(fp)
   1443c:	008000b4 	movhi	r2,2
   14440:	10a9a904 	addi	r2,r2,-22876
   14444:	18800915 	stw	r2,36(r3)
   14448:	00000206 	br	14454 <alt_set_flash_algorithm_func+0x98>
   1444c:	00bffec4 	movi	r2,-5
   14450:	e0bffd15 	stw	r2,-12(fp)
   14454:	e0bffd17 	ldw	r2,-12(fp)
   14458:	e037883a 	mov	sp,fp
   1445c:	df000017 	ldw	fp,0(sp)
   14460:	dec00104 	addi	sp,sp,4
   14464:	f800283a 	ret

00014468 <alt_read_16bit_query_entry>:
   14468:	defffb04 	addi	sp,sp,-20
   1446c:	dfc00415 	stw	ra,16(sp)
   14470:	df000315 	stw	fp,12(sp)
   14474:	df000304 	addi	fp,sp,12
   14478:	e13ffe15 	stw	r4,-8(fp)
   1447c:	e17fff15 	stw	r5,-4(fp)
   14480:	e0bffe17 	ldw	r2,-8(fp)
   14484:	10803417 	ldw	r2,208(r2)
   14488:	e13ffe17 	ldw	r4,-8(fp)
   1448c:	e17fff17 	ldw	r5,-4(fp)
   14490:	103ee83a 	callr	r2
   14494:	10803fcc 	andi	r2,r2,255
   14498:	e0bffd0d 	sth	r2,-12(fp)
   1449c:	e0bffe17 	ldw	r2,-8(fp)
   144a0:	10c03417 	ldw	r3,208(r2)
   144a4:	e0bfff17 	ldw	r2,-4(fp)
   144a8:	11400044 	addi	r5,r2,1
   144ac:	e13ffe17 	ldw	r4,-8(fp)
   144b0:	183ee83a 	callr	r3
   144b4:	10803fcc 	andi	r2,r2,255
   144b8:	1004923a 	slli	r2,r2,8
   144bc:	1007883a 	mov	r3,r2
   144c0:	e0bffd0b 	ldhu	r2,-12(fp)
   144c4:	1884b03a 	or	r2,r3,r2
   144c8:	e0bffd0d 	sth	r2,-12(fp)
   144cc:	e0bffd0b 	ldhu	r2,-12(fp)
   144d0:	e037883a 	mov	sp,fp
   144d4:	dfc00117 	ldw	ra,4(sp)
   144d8:	df000017 	ldw	fp,0(sp)
   144dc:	dec00204 	addi	sp,sp,8
   144e0:	f800283a 	ret

000144e4 <alt_read_cfi_table>:
   144e4:	defff104 	addi	sp,sp,-60
   144e8:	dfc00e15 	stw	ra,56(sp)
   144ec:	df000d15 	stw	fp,52(sp)
   144f0:	dc000c15 	stw	r16,48(sp)
   144f4:	df000c04 	addi	fp,sp,48
   144f8:	e13ffe15 	stw	r4,-8(fp)
   144fc:	e03ffa15 	stw	zero,-24(fp)
   14500:	e03ff915 	stw	zero,-28(fp)
   14504:	e03ff515 	stw	zero,-44(fp)
   14508:	e13ffe17 	ldw	r4,-8(fp)
   1450c:	00152700 	call	15270 <alt_check_primary_table>
   14510:	e0bffa15 	stw	r2,-24(fp)
   14514:	e0bffa17 	ldw	r2,-24(fp)
   14518:	1004c03a 	cmpne	r2,r2,zero
   1451c:	1001621e 	bne	r2,zero,14aa8 <alt_read_cfi_table+0x5c4>
   14520:	e0bffe17 	ldw	r2,-8(fp)
   14524:	10803417 	ldw	r2,208(r2)
   14528:	e13ffe17 	ldw	r4,-8(fp)
   1452c:	014004c4 	movi	r5,19
   14530:	103ee83a 	callr	r2
   14534:	10c03fcc 	andi	r3,r2,255
   14538:	e0bffe17 	ldw	r2,-8(fp)
   1453c:	10c02d15 	stw	r3,180(r2)
   14540:	e0bffe17 	ldw	r2,-8(fp)
   14544:	10803417 	ldw	r2,208(r2)
   14548:	e13ffe17 	ldw	r4,-8(fp)
   1454c:	014007c4 	movi	r5,31
   14550:	103ee83a 	callr	r2
   14554:	10803fcc 	andi	r2,r2,255
   14558:	e0bff715 	stw	r2,-36(fp)
   1455c:	e0bffe17 	ldw	r2,-8(fp)
   14560:	10803417 	ldw	r2,208(r2)
   14564:	e13ffe17 	ldw	r4,-8(fp)
   14568:	014008c4 	movi	r5,35
   1456c:	103ee83a 	callr	r2
   14570:	10803fcc 	andi	r2,r2,255
   14574:	e0bff615 	stw	r2,-40(fp)
   14578:	e0bff717 	ldw	r2,-36(fp)
   1457c:	1005003a 	cmpeq	r2,r2,zero
   14580:	1000031e 	bne	r2,zero,14590 <alt_read_cfi_table+0xac>
   14584:	e0bff617 	ldw	r2,-40(fp)
   14588:	1004c03a 	cmpne	r2,r2,zero
   1458c:	1000041e 	bne	r2,zero,145a0 <alt_read_cfi_table+0xbc>
   14590:	e0fffe17 	ldw	r3,-8(fp)
   14594:	0080fa04 	movi	r2,1000
   14598:	18803015 	stw	r2,192(r3)
   1459c:	00000706 	br	145bc <alt_read_cfi_table+0xd8>
   145a0:	00c00044 	movi	r3,1
   145a4:	e0bff717 	ldw	r2,-36(fp)
   145a8:	1886983a 	sll	r3,r3,r2
   145ac:	e0bff617 	ldw	r2,-40(fp)
   145b0:	1886983a 	sll	r3,r3,r2
   145b4:	e0bffe17 	ldw	r2,-8(fp)
   145b8:	10c03015 	stw	r3,192(r2)
   145bc:	e0bffe17 	ldw	r2,-8(fp)
   145c0:	10803417 	ldw	r2,208(r2)
   145c4:	e13ffe17 	ldw	r4,-8(fp)
   145c8:	01400844 	movi	r5,33
   145cc:	103ee83a 	callr	r2
   145d0:	10803fcc 	andi	r2,r2,255
   145d4:	e0bff715 	stw	r2,-36(fp)
   145d8:	e0bffe17 	ldw	r2,-8(fp)
   145dc:	10803417 	ldw	r2,208(r2)
   145e0:	e13ffe17 	ldw	r4,-8(fp)
   145e4:	01400944 	movi	r5,37
   145e8:	103ee83a 	callr	r2
   145ec:	10803fcc 	andi	r2,r2,255
   145f0:	e0bff615 	stw	r2,-40(fp)
   145f4:	e0bff717 	ldw	r2,-36(fp)
   145f8:	1005003a 	cmpeq	r2,r2,zero
   145fc:	1000031e 	bne	r2,zero,1460c <alt_read_cfi_table+0x128>
   14600:	e0bff617 	ldw	r2,-40(fp)
   14604:	1004c03a 	cmpne	r2,r2,zero
   14608:	1000051e 	bne	r2,zero,14620 <alt_read_cfi_table+0x13c>
   1460c:	e0fffe17 	ldw	r3,-8(fp)
   14610:	00804c74 	movhi	r2,305
   14614:	108b4004 	addi	r2,r2,11520
   14618:	18803115 	stw	r2,196(r3)
   1461c:	00000806 	br	14640 <alt_read_cfi_table+0x15c>
   14620:	00c00044 	movi	r3,1
   14624:	e0bff717 	ldw	r2,-36(fp)
   14628:	1886983a 	sll	r3,r3,r2
   1462c:	e0bff617 	ldw	r2,-40(fp)
   14630:	1884983a 	sll	r2,r3,r2
   14634:	10c0fa24 	muli	r3,r2,1000
   14638:	e0bffe17 	ldw	r2,-8(fp)
   1463c:	10c03115 	stw	r3,196(r2)
   14640:	e0bffe17 	ldw	r2,-8(fp)
   14644:	10803417 	ldw	r2,208(r2)
   14648:	e13ffe17 	ldw	r4,-8(fp)
   1464c:	014009c4 	movi	r5,39
   14650:	103ee83a 	callr	r2
   14654:	10c03fcc 	andi	r3,r2,255
   14658:	00800044 	movi	r2,1
   1465c:	10c4983a 	sll	r2,r2,r3
   14660:	e0bffb15 	stw	r2,-20(fp)
   14664:	e0bffe17 	ldw	r2,-8(fp)
   14668:	10803417 	ldw	r2,208(r2)
   1466c:	e13ffe17 	ldw	r4,-8(fp)
   14670:	01400b04 	movi	r5,44
   14674:	103ee83a 	callr	r2
   14678:	10c03fcc 	andi	r3,r2,255
   1467c:	e0bffe17 	ldw	r2,-8(fp)
   14680:	10c00c15 	stw	r3,48(r2)
   14684:	e0bffe17 	ldw	r2,-8(fp)
   14688:	10800c17 	ldw	r2,48(r2)
   1468c:	10800250 	cmplti	r2,r2,9
   14690:	1000031e 	bne	r2,zero,146a0 <alt_read_cfi_table+0x1bc>
   14694:	00bffd04 	movi	r2,-12
   14698:	e0bffa15 	stw	r2,-24(fp)
   1469c:	00005e06 	br	14818 <alt_read_cfi_table+0x334>
   146a0:	e03ffd15 	stw	zero,-12(fp)
   146a4:	00005306 	br	147f4 <alt_read_cfi_table+0x310>
   146a8:	e43ffd17 	ldw	r16,-12(fp)
   146ac:	e0bffd17 	ldw	r2,-12(fp)
   146b0:	1085883a 	add	r2,r2,r2
   146b4:	1085883a 	add	r2,r2,r2
   146b8:	11400b44 	addi	r5,r2,45
   146bc:	e13ffe17 	ldw	r4,-8(fp)
   146c0:	00144680 	call	14468 <alt_read_16bit_query_entry>
   146c4:	113fffcc 	andi	r4,r2,65535
   146c8:	e0fffe17 	ldw	r3,-8(fp)
   146cc:	8004913a 	slli	r2,r16,4
   146d0:	10c5883a 	add	r2,r2,r3
   146d4:	10800f04 	addi	r2,r2,60
   146d8:	11000015 	stw	r4,0(r2)
   146dc:	e17ffd17 	ldw	r5,-12(fp)
   146e0:	e0bffd17 	ldw	r2,-12(fp)
   146e4:	e0fffe17 	ldw	r3,-8(fp)
   146e8:	1004913a 	slli	r2,r2,4
   146ec:	10c5883a 	add	r2,r2,r3
   146f0:	10800f04 	addi	r2,r2,60
   146f4:	10800017 	ldw	r2,0(r2)
   146f8:	11000044 	addi	r4,r2,1
   146fc:	e0fffe17 	ldw	r3,-8(fp)
   14700:	2804913a 	slli	r2,r5,4
   14704:	10c5883a 	add	r2,r2,r3
   14708:	10800f04 	addi	r2,r2,60
   1470c:	11000015 	stw	r4,0(r2)
   14710:	e43ffd17 	ldw	r16,-12(fp)
   14714:	e0bffd17 	ldw	r2,-12(fp)
   14718:	1085883a 	add	r2,r2,r2
   1471c:	1085883a 	add	r2,r2,r2
   14720:	11400bc4 	addi	r5,r2,47
   14724:	e13ffe17 	ldw	r4,-8(fp)
   14728:	00144680 	call	14468 <alt_read_16bit_query_entry>
   1472c:	113fffcc 	andi	r4,r2,65535
   14730:	e0fffe17 	ldw	r3,-8(fp)
   14734:	8004913a 	slli	r2,r16,4
   14738:	10c5883a 	add	r2,r2,r3
   1473c:	10801004 	addi	r2,r2,64
   14740:	11000015 	stw	r4,0(r2)
   14744:	e17ffd17 	ldw	r5,-12(fp)
   14748:	e0bffd17 	ldw	r2,-12(fp)
   1474c:	e0fffe17 	ldw	r3,-8(fp)
   14750:	1004913a 	slli	r2,r2,4
   14754:	10c5883a 	add	r2,r2,r3
   14758:	10801004 	addi	r2,r2,64
   1475c:	10800017 	ldw	r2,0(r2)
   14760:	1008923a 	slli	r4,r2,8
   14764:	e0fffe17 	ldw	r3,-8(fp)
   14768:	2804913a 	slli	r2,r5,4
   1476c:	10c5883a 	add	r2,r2,r3
   14770:	10801004 	addi	r2,r2,64
   14774:	11000015 	stw	r4,0(r2)
   14778:	e17ffd17 	ldw	r5,-12(fp)
   1477c:	e0bffd17 	ldw	r2,-12(fp)
   14780:	e0fffe17 	ldw	r3,-8(fp)
   14784:	1004913a 	slli	r2,r2,4
   14788:	10c5883a 	add	r2,r2,r3
   1478c:	10800f04 	addi	r2,r2,60
   14790:	11000017 	ldw	r4,0(r2)
   14794:	e0bffd17 	ldw	r2,-12(fp)
   14798:	e0fffe17 	ldw	r3,-8(fp)
   1479c:	1004913a 	slli	r2,r2,4
   147a0:	10c5883a 	add	r2,r2,r3
   147a4:	10801004 	addi	r2,r2,64
   147a8:	10800017 	ldw	r2,0(r2)
   147ac:	2089383a 	mul	r4,r4,r2
   147b0:	e0fffe17 	ldw	r3,-8(fp)
   147b4:	2804913a 	slli	r2,r5,4
   147b8:	10c5883a 	add	r2,r2,r3
   147bc:	10800e04 	addi	r2,r2,56
   147c0:	11000015 	stw	r4,0(r2)
   147c4:	e0bffd17 	ldw	r2,-12(fp)
   147c8:	e0fffe17 	ldw	r3,-8(fp)
   147cc:	1004913a 	slli	r2,r2,4
   147d0:	10c5883a 	add	r2,r2,r3
   147d4:	10800e04 	addi	r2,r2,56
   147d8:	10c00017 	ldw	r3,0(r2)
   147dc:	e0bff917 	ldw	r2,-28(fp)
   147e0:	10c5883a 	add	r2,r2,r3
   147e4:	e0bff915 	stw	r2,-28(fp)
   147e8:	e0bffd17 	ldw	r2,-12(fp)
   147ec:	10800044 	addi	r2,r2,1
   147f0:	e0bffd15 	stw	r2,-12(fp)
   147f4:	e0bffe17 	ldw	r2,-8(fp)
   147f8:	10c00c17 	ldw	r3,48(r2)
   147fc:	e0bffd17 	ldw	r2,-12(fp)
   14800:	10ffa916 	blt	r2,r3,146a8 <alt_read_cfi_table+0x1c4>
   14804:	e0fff917 	ldw	r3,-28(fp)
   14808:	e0bffb17 	ldw	r2,-20(fp)
   1480c:	18800226 	beq	r3,r2,14818 <alt_read_cfi_table+0x334>
   14810:	00bffb44 	movi	r2,-19
   14814:	e0bffa15 	stw	r2,-24(fp)
   14818:	e0bffe17 	ldw	r2,-8(fp)
   1481c:	10c03417 	ldw	r3,208(r2)
   14820:	e0bffe17 	ldw	r2,-8(fp)
   14824:	10803217 	ldw	r2,200(r2)
   14828:	114003c4 	addi	r5,r2,15
   1482c:	e13ffe17 	ldw	r4,-8(fp)
   14830:	183ee83a 	callr	r3
   14834:	e0bff405 	stb	r2,-48(fp)
   14838:	e0bffe17 	ldw	r2,-8(fp)
   1483c:	10802d17 	ldw	r2,180(r2)
   14840:	10800098 	cmpnei	r2,r2,2
   14844:	1000601e 	bne	r2,zero,149c8 <alt_read_cfi_table+0x4e4>
   14848:	e0bff403 	ldbu	r2,-48(fp)
   1484c:	108000d8 	cmpnei	r2,r2,3
   14850:	10005d1e 	bne	r2,zero,149c8 <alt_read_cfi_table+0x4e4>
   14854:	e0bffe17 	ldw	r2,-8(fp)
   14858:	10800c17 	ldw	r2,48(r2)
   1485c:	10bfffc4 	addi	r2,r2,-1
   14860:	e0bffd15 	stw	r2,-12(fp)
   14864:	e03ffc15 	stw	zero,-16(fp)
   14868:	00005406 	br	149bc <alt_read_cfi_table+0x4d8>
   1486c:	e0bffd17 	ldw	r2,-12(fp)
   14870:	e0fffe17 	ldw	r3,-8(fp)
   14874:	1004913a 	slli	r2,r2,4
   14878:	10c5883a 	add	r2,r2,r3
   1487c:	10800e04 	addi	r2,r2,56
   14880:	10800017 	ldw	r2,0(r2)
   14884:	e0bff815 	stw	r2,-32(fp)
   14888:	e17ffd17 	ldw	r5,-12(fp)
   1488c:	e0bffc17 	ldw	r2,-16(fp)
   14890:	e0fffe17 	ldw	r3,-8(fp)
   14894:	1004913a 	slli	r2,r2,4
   14898:	10c5883a 	add	r2,r2,r3
   1489c:	10800e04 	addi	r2,r2,56
   148a0:	11000017 	ldw	r4,0(r2)
   148a4:	e0fffe17 	ldw	r3,-8(fp)
   148a8:	2804913a 	slli	r2,r5,4
   148ac:	10c5883a 	add	r2,r2,r3
   148b0:	10800e04 	addi	r2,r2,56
   148b4:	11000015 	stw	r4,0(r2)
   148b8:	e0bffc17 	ldw	r2,-16(fp)
   148bc:	e0fffe17 	ldw	r3,-8(fp)
   148c0:	1004913a 	slli	r2,r2,4
   148c4:	10c5883a 	add	r2,r2,r3
   148c8:	10c00e04 	addi	r3,r2,56
   148cc:	e0bff817 	ldw	r2,-32(fp)
   148d0:	18800015 	stw	r2,0(r3)
   148d4:	e0bffd17 	ldw	r2,-12(fp)
   148d8:	e0fffe17 	ldw	r3,-8(fp)
   148dc:	1004913a 	slli	r2,r2,4
   148e0:	10c5883a 	add	r2,r2,r3
   148e4:	10801004 	addi	r2,r2,64
   148e8:	10800017 	ldw	r2,0(r2)
   148ec:	e0bff815 	stw	r2,-32(fp)
   148f0:	e17ffd17 	ldw	r5,-12(fp)
   148f4:	e0bffc17 	ldw	r2,-16(fp)
   148f8:	e0fffe17 	ldw	r3,-8(fp)
   148fc:	1004913a 	slli	r2,r2,4
   14900:	10c5883a 	add	r2,r2,r3
   14904:	10801004 	addi	r2,r2,64
   14908:	11000017 	ldw	r4,0(r2)
   1490c:	e0fffe17 	ldw	r3,-8(fp)
   14910:	2804913a 	slli	r2,r5,4
   14914:	10c5883a 	add	r2,r2,r3
   14918:	10801004 	addi	r2,r2,64
   1491c:	11000015 	stw	r4,0(r2)
   14920:	e0bffc17 	ldw	r2,-16(fp)
   14924:	e0fffe17 	ldw	r3,-8(fp)
   14928:	1004913a 	slli	r2,r2,4
   1492c:	10c5883a 	add	r2,r2,r3
   14930:	10c01004 	addi	r3,r2,64
   14934:	e0bff817 	ldw	r2,-32(fp)
   14938:	18800015 	stw	r2,0(r3)
   1493c:	e0bffd17 	ldw	r2,-12(fp)
   14940:	e0fffe17 	ldw	r3,-8(fp)
   14944:	1004913a 	slli	r2,r2,4
   14948:	10c5883a 	add	r2,r2,r3
   1494c:	10800f04 	addi	r2,r2,60
   14950:	10800017 	ldw	r2,0(r2)
   14954:	e0bff815 	stw	r2,-32(fp)
   14958:	e17ffd17 	ldw	r5,-12(fp)
   1495c:	e0bffc17 	ldw	r2,-16(fp)
   14960:	e0fffe17 	ldw	r3,-8(fp)
   14964:	1004913a 	slli	r2,r2,4
   14968:	10c5883a 	add	r2,r2,r3
   1496c:	10800f04 	addi	r2,r2,60
   14970:	11000017 	ldw	r4,0(r2)
   14974:	e0fffe17 	ldw	r3,-8(fp)
   14978:	2804913a 	slli	r2,r5,4
   1497c:	10c5883a 	add	r2,r2,r3
   14980:	10800f04 	addi	r2,r2,60
   14984:	11000015 	stw	r4,0(r2)
   14988:	e0bffc17 	ldw	r2,-16(fp)
   1498c:	e0fffe17 	ldw	r3,-8(fp)
   14990:	1004913a 	slli	r2,r2,4
   14994:	10c5883a 	add	r2,r2,r3
   14998:	10c00f04 	addi	r3,r2,60
   1499c:	e0bff817 	ldw	r2,-32(fp)
   149a0:	18800015 	stw	r2,0(r3)
   149a4:	e0bffd17 	ldw	r2,-12(fp)
   149a8:	10bfffc4 	addi	r2,r2,-1
   149ac:	e0bffd15 	stw	r2,-12(fp)
   149b0:	e0bffc17 	ldw	r2,-16(fp)
   149b4:	10800044 	addi	r2,r2,1
   149b8:	e0bffc15 	stw	r2,-16(fp)
   149bc:	e0fffc17 	ldw	r3,-16(fp)
   149c0:	e0bffd17 	ldw	r2,-12(fp)
   149c4:	10ffa90e 	bge	r2,r3,1486c <alt_read_cfi_table+0x388>
   149c8:	e03ffd15 	stw	zero,-12(fp)
   149cc:	00001306 	br	14a1c <alt_read_cfi_table+0x538>
   149d0:	e0bffd17 	ldw	r2,-12(fp)
   149d4:	e0fffe17 	ldw	r3,-8(fp)
   149d8:	1004913a 	slli	r2,r2,4
   149dc:	10c5883a 	add	r2,r2,r3
   149e0:	10c00d04 	addi	r3,r2,52
   149e4:	e0bff517 	ldw	r2,-44(fp)
   149e8:	18800015 	stw	r2,0(r3)
   149ec:	e0bffd17 	ldw	r2,-12(fp)
   149f0:	e0fffe17 	ldw	r3,-8(fp)
   149f4:	1004913a 	slli	r2,r2,4
   149f8:	10c5883a 	add	r2,r2,r3
   149fc:	10800e04 	addi	r2,r2,56
   14a00:	10c00017 	ldw	r3,0(r2)
   14a04:	e0bff517 	ldw	r2,-44(fp)
   14a08:	10c5883a 	add	r2,r2,r3
   14a0c:	e0bff515 	stw	r2,-44(fp)
   14a10:	e0bffd17 	ldw	r2,-12(fp)
   14a14:	10800044 	addi	r2,r2,1
   14a18:	e0bffd15 	stw	r2,-12(fp)
   14a1c:	e0bffe17 	ldw	r2,-8(fp)
   14a20:	10c00c17 	ldw	r3,48(r2)
   14a24:	e0bffd17 	ldw	r2,-12(fp)
   14a28:	10ffe916 	blt	r2,r3,149d0 <alt_read_cfi_table+0x4ec>
   14a2c:	e0bffe17 	ldw	r2,-8(fp)
   14a30:	10802d17 	ldw	r2,180(r2)
   14a34:	e0bfff15 	stw	r2,-4(fp)
   14a38:	e0ffff17 	ldw	r3,-4(fp)
   14a3c:	188000a0 	cmpeqi	r2,r3,2
   14a40:	1000071e 	bne	r2,zero,14a60 <alt_read_cfi_table+0x57c>
   14a44:	e0ffff17 	ldw	r3,-4(fp)
   14a48:	188000e0 	cmpeqi	r2,r3,3
   14a4c:	10000c1e 	bne	r2,zero,14a80 <alt_read_cfi_table+0x59c>
   14a50:	e0ffff17 	ldw	r3,-4(fp)
   14a54:	18800060 	cmpeqi	r2,r3,1
   14a58:	1000091e 	bne	r2,zero,14a80 <alt_read_cfi_table+0x59c>
   14a5c:	00001006 	br	14aa0 <alt_read_cfi_table+0x5bc>
   14a60:	e0bffe17 	ldw	r2,-8(fp)
   14a64:	10c03317 	ldw	r3,204(r2)
   14a68:	e0bffe17 	ldw	r2,-8(fp)
   14a6c:	11000a17 	ldw	r4,40(r2)
   14a70:	01401544 	movi	r5,85
   14a74:	01803c04 	movi	r6,240
   14a78:	183ee83a 	callr	r3
   14a7c:	00000a06 	br	14aa8 <alt_read_cfi_table+0x5c4>
   14a80:	e0bffe17 	ldw	r2,-8(fp)
   14a84:	10c03317 	ldw	r3,204(r2)
   14a88:	e0bffe17 	ldw	r2,-8(fp)
   14a8c:	11000a17 	ldw	r4,40(r2)
   14a90:	01401544 	movi	r5,85
   14a94:	01803fc4 	movi	r6,255
   14a98:	183ee83a 	callr	r3
   14a9c:	00000206 	br	14aa8 <alt_read_cfi_table+0x5c4>
   14aa0:	00bffec4 	movi	r2,-5
   14aa4:	e0bffa15 	stw	r2,-24(fp)
   14aa8:	e0bffa17 	ldw	r2,-24(fp)
   14aac:	e037883a 	mov	sp,fp
   14ab0:	dfc00217 	ldw	ra,8(sp)
   14ab4:	df000117 	ldw	fp,4(sp)
   14ab8:	dc000017 	ldw	r16,0(sp)
   14abc:	dec00304 	addi	sp,sp,12
   14ac0:	f800283a 	ret

00014ac4 <alt_read_cfi_width>:
   14ac4:	defff704 	addi	sp,sp,-36
   14ac8:	dfc00815 	stw	ra,32(sp)
   14acc:	df000715 	stw	fp,28(sp)
   14ad0:	df000704 	addi	fp,sp,28
   14ad4:	e13fff15 	stw	r4,-4(fp)
   14ad8:	e03ff915 	stw	zero,-28(fp)
   14adc:	e0bfff17 	ldw	r2,-4(fp)
   14ae0:	11000a17 	ldw	r4,40(r2)
   14ae4:	01401544 	movi	r5,85
   14ae8:	01802604 	movi	r6,152
   14aec:	0013f700 	call	13f70 <alt_write_flash_command_8bit_device_8bit_mode>
   14af0:	e03ffb15 	stw	zero,-20(fp)
   14af4:	00000f06 	br	14b34 <alt_read_cfi_width+0x70>
   14af8:	e13ffb17 	ldw	r4,-20(fp)
   14afc:	e0bfff17 	ldw	r2,-4(fp)
   14b00:	10800a17 	ldw	r2,40(r2)
   14b04:	1007883a 	mov	r3,r2
   14b08:	e0bffb17 	ldw	r2,-20(fp)
   14b0c:	1885883a 	add	r2,r3,r2
   14b10:	10800404 	addi	r2,r2,16
   14b14:	10800023 	ldbuio	r2,0(r2)
   14b18:	1007883a 	mov	r3,r2
   14b1c:	e0bffc04 	addi	r2,fp,-16
   14b20:	1105883a 	add	r2,r2,r4
   14b24:	10c00005 	stb	r3,0(r2)
   14b28:	e0bffb17 	ldw	r2,-20(fp)
   14b2c:	10800044 	addi	r2,r2,1
   14b30:	e0bffb15 	stw	r2,-20(fp)
   14b34:	e0bffb17 	ldw	r2,-20(fp)
   14b38:	108000d0 	cmplti	r2,r2,3
   14b3c:	103fee1e 	bne	r2,zero,14af8 <alt_read_cfi_width+0x34>
   14b40:	e0bffc03 	ldbu	r2,-16(fp)
   14b44:	10803fcc 	andi	r2,r2,255
   14b48:	10801458 	cmpnei	r2,r2,81
   14b4c:	10001d1e 	bne	r2,zero,14bc4 <alt_read_cfi_width+0x100>
   14b50:	e0bffc43 	ldbu	r2,-15(fp)
   14b54:	10803fcc 	andi	r2,r2,255
   14b58:	10801498 	cmpnei	r2,r2,82
   14b5c:	1000191e 	bne	r2,zero,14bc4 <alt_read_cfi_width+0x100>
   14b60:	e0bffc83 	ldbu	r2,-14(fp)
   14b64:	10803fcc 	andi	r2,r2,255
   14b68:	10801658 	cmpnei	r2,r2,89
   14b6c:	1000151e 	bne	r2,zero,14bc4 <alt_read_cfi_width+0x100>
   14b70:	e0ffff17 	ldw	r3,-4(fp)
   14b74:	00800044 	movi	r2,1
   14b78:	18802e15 	stw	r2,184(r3)
   14b7c:	e0ffff17 	ldw	r3,-4(fp)
   14b80:	00800044 	movi	r2,1
   14b84:	18802f15 	stw	r2,188(r3)
   14b88:	e0bfff17 	ldw	r2,-4(fp)
   14b8c:	10800a17 	ldw	r2,40(r2)
   14b90:	10800a04 	addi	r2,r2,40
   14b94:	1080002b 	ldhuio	r2,0(r2)
   14b98:	e0bffa0d 	sth	r2,-24(fp)
   14b9c:	e0bffa0b 	ldhu	r2,-24(fp)
   14ba0:	10800044 	addi	r2,r2,1
   14ba4:	e0bffa0d 	sth	r2,-24(fp)
   14ba8:	e0bffa0b 	ldhu	r2,-24(fp)
   14bac:	1080004c 	andi	r2,r2,1
   14bb0:	1004c03a 	cmpne	r2,r2,zero
   14bb4:	1001a81e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   14bb8:	00bffb44 	movi	r2,-19
   14bbc:	e0bff915 	stw	r2,-28(fp)
   14bc0:	0001a506 	br	15258 <alt_read_cfi_width+0x794>
   14bc4:	e0bfff17 	ldw	r2,-4(fp)
   14bc8:	11000a17 	ldw	r4,40(r2)
   14bcc:	01401544 	movi	r5,85
   14bd0:	01802604 	movi	r6,152
   14bd4:	0013fac0 	call	13fac <alt_write_flash_command_16bit_device_8bit_mode>
   14bd8:	e03ffb15 	stw	zero,-20(fp)
   14bdc:	00000f06 	br	14c1c <alt_read_cfi_width+0x158>
   14be0:	e13ffb17 	ldw	r4,-20(fp)
   14be4:	e0bfff17 	ldw	r2,-4(fp)
   14be8:	10800a17 	ldw	r2,40(r2)
   14bec:	1007883a 	mov	r3,r2
   14bf0:	e0bffb17 	ldw	r2,-20(fp)
   14bf4:	1885883a 	add	r2,r3,r2
   14bf8:	10800804 	addi	r2,r2,32
   14bfc:	10800023 	ldbuio	r2,0(r2)
   14c00:	1007883a 	mov	r3,r2
   14c04:	e0bffc04 	addi	r2,fp,-16
   14c08:	1105883a 	add	r2,r2,r4
   14c0c:	10c00005 	stb	r3,0(r2)
   14c10:	e0bffb17 	ldw	r2,-20(fp)
   14c14:	10800044 	addi	r2,r2,1
   14c18:	e0bffb15 	stw	r2,-20(fp)
   14c1c:	e0bffb17 	ldw	r2,-20(fp)
   14c20:	10800190 	cmplti	r2,r2,6
   14c24:	103fee1e 	bne	r2,zero,14be0 <alt_read_cfi_width+0x11c>
   14c28:	e0bffc03 	ldbu	r2,-16(fp)
   14c2c:	10803fcc 	andi	r2,r2,255
   14c30:	10801458 	cmpnei	r2,r2,81
   14c34:	1000291e 	bne	r2,zero,14cdc <alt_read_cfi_width+0x218>
   14c38:	e0bffc43 	ldbu	r2,-15(fp)
   14c3c:	10803fcc 	andi	r2,r2,255
   14c40:	10801458 	cmpnei	r2,r2,81
   14c44:	1000251e 	bne	r2,zero,14cdc <alt_read_cfi_width+0x218>
   14c48:	e0bffc83 	ldbu	r2,-14(fp)
   14c4c:	10803fcc 	andi	r2,r2,255
   14c50:	10801498 	cmpnei	r2,r2,82
   14c54:	1000211e 	bne	r2,zero,14cdc <alt_read_cfi_width+0x218>
   14c58:	e0bffcc3 	ldbu	r2,-13(fp)
   14c5c:	10803fcc 	andi	r2,r2,255
   14c60:	10801498 	cmpnei	r2,r2,82
   14c64:	10001d1e 	bne	r2,zero,14cdc <alt_read_cfi_width+0x218>
   14c68:	e0bffd03 	ldbu	r2,-12(fp)
   14c6c:	10803fcc 	andi	r2,r2,255
   14c70:	10801658 	cmpnei	r2,r2,89
   14c74:	1000191e 	bne	r2,zero,14cdc <alt_read_cfi_width+0x218>
   14c78:	e0bffd43 	ldbu	r2,-11(fp)
   14c7c:	10803fcc 	andi	r2,r2,255
   14c80:	10801658 	cmpnei	r2,r2,89
   14c84:	1000151e 	bne	r2,zero,14cdc <alt_read_cfi_width+0x218>
   14c88:	e0ffff17 	ldw	r3,-4(fp)
   14c8c:	00800044 	movi	r2,1
   14c90:	18802e15 	stw	r2,184(r3)
   14c94:	e0ffff17 	ldw	r3,-4(fp)
   14c98:	00800084 	movi	r2,2
   14c9c:	18802f15 	stw	r2,188(r3)
   14ca0:	e0bfff17 	ldw	r2,-4(fp)
   14ca4:	10800a17 	ldw	r2,40(r2)
   14ca8:	10801404 	addi	r2,r2,80
   14cac:	1080002b 	ldhuio	r2,0(r2)
   14cb0:	e0bffa0d 	sth	r2,-24(fp)
   14cb4:	e0bffa0b 	ldhu	r2,-24(fp)
   14cb8:	10800044 	addi	r2,r2,1
   14cbc:	e0bffa0d 	sth	r2,-24(fp)
   14cc0:	e0bffa0b 	ldhu	r2,-24(fp)
   14cc4:	1080004c 	andi	r2,r2,1
   14cc8:	1004c03a 	cmpne	r2,r2,zero
   14ccc:	1001621e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   14cd0:	00bffb44 	movi	r2,-19
   14cd4:	e0bff915 	stw	r2,-28(fp)
   14cd8:	00015f06 	br	15258 <alt_read_cfi_width+0x794>
   14cdc:	e0bfff17 	ldw	r2,-4(fp)
   14ce0:	11000a17 	ldw	r4,40(r2)
   14ce4:	01401544 	movi	r5,85
   14ce8:	01802604 	movi	r6,152
   14cec:	00140700 	call	14070 <alt_write_flash_command_16bit_device_16bit_mode>
   14cf0:	e03ffb15 	stw	zero,-20(fp)
   14cf4:	00000f06 	br	14d34 <alt_read_cfi_width+0x270>
   14cf8:	e13ffb17 	ldw	r4,-20(fp)
   14cfc:	e0bfff17 	ldw	r2,-4(fp)
   14d00:	10800a17 	ldw	r2,40(r2)
   14d04:	1007883a 	mov	r3,r2
   14d08:	e0bffb17 	ldw	r2,-20(fp)
   14d0c:	1885883a 	add	r2,r3,r2
   14d10:	10800804 	addi	r2,r2,32
   14d14:	10800023 	ldbuio	r2,0(r2)
   14d18:	1007883a 	mov	r3,r2
   14d1c:	e0bffc04 	addi	r2,fp,-16
   14d20:	1105883a 	add	r2,r2,r4
   14d24:	10c00005 	stb	r3,0(r2)
   14d28:	e0bffb17 	ldw	r2,-20(fp)
   14d2c:	10800044 	addi	r2,r2,1
   14d30:	e0bffb15 	stw	r2,-20(fp)
   14d34:	e0bffb17 	ldw	r2,-20(fp)
   14d38:	10800190 	cmplti	r2,r2,6
   14d3c:	103fee1e 	bne	r2,zero,14cf8 <alt_read_cfi_width+0x234>
   14d40:	e0bffc03 	ldbu	r2,-16(fp)
   14d44:	10803fcc 	andi	r2,r2,255
   14d48:	10801458 	cmpnei	r2,r2,81
   14d4c:	1000291e 	bne	r2,zero,14df4 <alt_read_cfi_width+0x330>
   14d50:	e0bffc43 	ldbu	r2,-15(fp)
   14d54:	10803fcc 	andi	r2,r2,255
   14d58:	1004c03a 	cmpne	r2,r2,zero
   14d5c:	1000251e 	bne	r2,zero,14df4 <alt_read_cfi_width+0x330>
   14d60:	e0bffc83 	ldbu	r2,-14(fp)
   14d64:	10803fcc 	andi	r2,r2,255
   14d68:	10801498 	cmpnei	r2,r2,82
   14d6c:	1000211e 	bne	r2,zero,14df4 <alt_read_cfi_width+0x330>
   14d70:	e0bffcc3 	ldbu	r2,-13(fp)
   14d74:	10803fcc 	andi	r2,r2,255
   14d78:	1004c03a 	cmpne	r2,r2,zero
   14d7c:	10001d1e 	bne	r2,zero,14df4 <alt_read_cfi_width+0x330>
   14d80:	e0bffd03 	ldbu	r2,-12(fp)
   14d84:	10803fcc 	andi	r2,r2,255
   14d88:	10801658 	cmpnei	r2,r2,89
   14d8c:	1000191e 	bne	r2,zero,14df4 <alt_read_cfi_width+0x330>
   14d90:	e0bffd43 	ldbu	r2,-11(fp)
   14d94:	10803fcc 	andi	r2,r2,255
   14d98:	1004c03a 	cmpne	r2,r2,zero
   14d9c:	1000151e 	bne	r2,zero,14df4 <alt_read_cfi_width+0x330>
   14da0:	e0ffff17 	ldw	r3,-4(fp)
   14da4:	00800084 	movi	r2,2
   14da8:	18802e15 	stw	r2,184(r3)
   14dac:	e0ffff17 	ldw	r3,-4(fp)
   14db0:	00800084 	movi	r2,2
   14db4:	18802f15 	stw	r2,188(r3)
   14db8:	e0bfff17 	ldw	r2,-4(fp)
   14dbc:	10800a17 	ldw	r2,40(r2)
   14dc0:	10801404 	addi	r2,r2,80
   14dc4:	1080002b 	ldhuio	r2,0(r2)
   14dc8:	e0bffa0d 	sth	r2,-24(fp)
   14dcc:	e0bffa0b 	ldhu	r2,-24(fp)
   14dd0:	10800044 	addi	r2,r2,1
   14dd4:	e0bffa0d 	sth	r2,-24(fp)
   14dd8:	e0bffa0b 	ldhu	r2,-24(fp)
   14ddc:	1080008c 	andi	r2,r2,2
   14de0:	1004c03a 	cmpne	r2,r2,zero
   14de4:	10011c1e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   14de8:	00bffb44 	movi	r2,-19
   14dec:	e0bff915 	stw	r2,-28(fp)
   14df0:	00011906 	br	15258 <alt_read_cfi_width+0x794>
   14df4:	e0bfff17 	ldw	r2,-4(fp)
   14df8:	11000a17 	ldw	r4,40(r2)
   14dfc:	01401544 	movi	r5,85
   14e00:	01802604 	movi	r6,152
   14e04:	00140fc0 	call	140fc <alt_write_flash_command_32bit_device_32bit_mode>
   14e08:	e03ffb15 	stw	zero,-20(fp)
   14e0c:	00000f06 	br	14e4c <alt_read_cfi_width+0x388>
   14e10:	e13ffb17 	ldw	r4,-20(fp)
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	10800a17 	ldw	r2,40(r2)
   14e1c:	1007883a 	mov	r3,r2
   14e20:	e0bffb17 	ldw	r2,-20(fp)
   14e24:	1885883a 	add	r2,r3,r2
   14e28:	10801004 	addi	r2,r2,64
   14e2c:	10800023 	ldbuio	r2,0(r2)
   14e30:	1007883a 	mov	r3,r2
   14e34:	e0bffc04 	addi	r2,fp,-16
   14e38:	1105883a 	add	r2,r2,r4
   14e3c:	10c00005 	stb	r3,0(r2)
   14e40:	e0bffb17 	ldw	r2,-20(fp)
   14e44:	10800044 	addi	r2,r2,1
   14e48:	e0bffb15 	stw	r2,-20(fp)
   14e4c:	e0bffb17 	ldw	r2,-20(fp)
   14e50:	10800310 	cmplti	r2,r2,12
   14e54:	103fee1e 	bne	r2,zero,14e10 <alt_read_cfi_width+0x34c>
   14e58:	e0bffc03 	ldbu	r2,-16(fp)
   14e5c:	10803fcc 	andi	r2,r2,255
   14e60:	10801458 	cmpnei	r2,r2,81
   14e64:	1000411e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14e68:	e0bffc43 	ldbu	r2,-15(fp)
   14e6c:	10803fcc 	andi	r2,r2,255
   14e70:	1004c03a 	cmpne	r2,r2,zero
   14e74:	10003d1e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14e78:	e0bffc83 	ldbu	r2,-14(fp)
   14e7c:	10803fcc 	andi	r2,r2,255
   14e80:	1004c03a 	cmpne	r2,r2,zero
   14e84:	1000391e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14e88:	e0bffcc3 	ldbu	r2,-13(fp)
   14e8c:	10803fcc 	andi	r2,r2,255
   14e90:	1004c03a 	cmpne	r2,r2,zero
   14e94:	1000351e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14e98:	e0bffd03 	ldbu	r2,-12(fp)
   14e9c:	10803fcc 	andi	r2,r2,255
   14ea0:	10801498 	cmpnei	r2,r2,82
   14ea4:	1000311e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14ea8:	e0bffd43 	ldbu	r2,-11(fp)
   14eac:	10803fcc 	andi	r2,r2,255
   14eb0:	1004c03a 	cmpne	r2,r2,zero
   14eb4:	10002d1e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14eb8:	e0bffd83 	ldbu	r2,-10(fp)
   14ebc:	10803fcc 	andi	r2,r2,255
   14ec0:	1004c03a 	cmpne	r2,r2,zero
   14ec4:	1000291e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14ec8:	e0bffdc3 	ldbu	r2,-9(fp)
   14ecc:	10803fcc 	andi	r2,r2,255
   14ed0:	1004c03a 	cmpne	r2,r2,zero
   14ed4:	1000251e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14ed8:	e0bffe03 	ldbu	r2,-8(fp)
   14edc:	10803fcc 	andi	r2,r2,255
   14ee0:	10801658 	cmpnei	r2,r2,89
   14ee4:	1000211e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14ee8:	e0bffe43 	ldbu	r2,-7(fp)
   14eec:	10803fcc 	andi	r2,r2,255
   14ef0:	1004c03a 	cmpne	r2,r2,zero
   14ef4:	10001d1e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14ef8:	e0bffe83 	ldbu	r2,-6(fp)
   14efc:	10803fcc 	andi	r2,r2,255
   14f00:	1004c03a 	cmpne	r2,r2,zero
   14f04:	1000191e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14f08:	e0bffec3 	ldbu	r2,-5(fp)
   14f0c:	10803fcc 	andi	r2,r2,255
   14f10:	1004c03a 	cmpne	r2,r2,zero
   14f14:	1000151e 	bne	r2,zero,14f6c <alt_read_cfi_width+0x4a8>
   14f18:	e0ffff17 	ldw	r3,-4(fp)
   14f1c:	00800104 	movi	r2,4
   14f20:	18802e15 	stw	r2,184(r3)
   14f24:	e0ffff17 	ldw	r3,-4(fp)
   14f28:	00800104 	movi	r2,4
   14f2c:	18802f15 	stw	r2,188(r3)
   14f30:	e0bfff17 	ldw	r2,-4(fp)
   14f34:	10800a17 	ldw	r2,40(r2)
   14f38:	10802804 	addi	r2,r2,160
   14f3c:	10800037 	ldwio	r2,0(r2)
   14f40:	e0bffa0d 	sth	r2,-24(fp)
   14f44:	e0bffa0b 	ldhu	r2,-24(fp)
   14f48:	10800044 	addi	r2,r2,1
   14f4c:	e0bffa0d 	sth	r2,-24(fp)
   14f50:	e0bffa0b 	ldhu	r2,-24(fp)
   14f54:	1080010c 	andi	r2,r2,4
   14f58:	1004c03a 	cmpne	r2,r2,zero
   14f5c:	1000be1e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   14f60:	00bffb44 	movi	r2,-19
   14f64:	e0bff915 	stw	r2,-28(fp)
   14f68:	0000bb06 	br	15258 <alt_read_cfi_width+0x794>
   14f6c:	e0bfff17 	ldw	r2,-4(fp)
   14f70:	11000a17 	ldw	r4,40(r2)
   14f74:	01401544 	movi	r5,85
   14f78:	01802604 	movi	r6,152
   14f7c:	00140b40 	call	140b4 <alt_write_flash_command_32bit_device_16bit_mode>
   14f80:	e03ffb15 	stw	zero,-20(fp)
   14f84:	00000f06 	br	14fc4 <alt_read_cfi_width+0x500>
   14f88:	e13ffb17 	ldw	r4,-20(fp)
   14f8c:	e0bfff17 	ldw	r2,-4(fp)
   14f90:	10800a17 	ldw	r2,40(r2)
   14f94:	1007883a 	mov	r3,r2
   14f98:	e0bffb17 	ldw	r2,-20(fp)
   14f9c:	1885883a 	add	r2,r3,r2
   14fa0:	10801004 	addi	r2,r2,64
   14fa4:	10800023 	ldbuio	r2,0(r2)
   14fa8:	1007883a 	mov	r3,r2
   14fac:	e0bffc04 	addi	r2,fp,-16
   14fb0:	1105883a 	add	r2,r2,r4
   14fb4:	10c00005 	stb	r3,0(r2)
   14fb8:	e0bffb17 	ldw	r2,-20(fp)
   14fbc:	10800044 	addi	r2,r2,1
   14fc0:	e0bffb15 	stw	r2,-20(fp)
   14fc4:	e0bffb17 	ldw	r2,-20(fp)
   14fc8:	10800310 	cmplti	r2,r2,12
   14fcc:	103fee1e 	bne	r2,zero,14f88 <alt_read_cfi_width+0x4c4>
   14fd0:	e0bffc03 	ldbu	r2,-16(fp)
   14fd4:	10803fcc 	andi	r2,r2,255
   14fd8:	10801458 	cmpnei	r2,r2,81
   14fdc:	1000411e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   14fe0:	e0bffc43 	ldbu	r2,-15(fp)
   14fe4:	10803fcc 	andi	r2,r2,255
   14fe8:	1004c03a 	cmpne	r2,r2,zero
   14fec:	10003d1e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   14ff0:	e0bffc83 	ldbu	r2,-14(fp)
   14ff4:	10803fcc 	andi	r2,r2,255
   14ff8:	10801458 	cmpnei	r2,r2,81
   14ffc:	1000391e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15000:	e0bffcc3 	ldbu	r2,-13(fp)
   15004:	10803fcc 	andi	r2,r2,255
   15008:	1004c03a 	cmpne	r2,r2,zero
   1500c:	1000351e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15010:	e0bffd03 	ldbu	r2,-12(fp)
   15014:	10803fcc 	andi	r2,r2,255
   15018:	10801498 	cmpnei	r2,r2,82
   1501c:	1000311e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15020:	e0bffd43 	ldbu	r2,-11(fp)
   15024:	10803fcc 	andi	r2,r2,255
   15028:	1004c03a 	cmpne	r2,r2,zero
   1502c:	10002d1e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15030:	e0bffd83 	ldbu	r2,-10(fp)
   15034:	10803fcc 	andi	r2,r2,255
   15038:	10801498 	cmpnei	r2,r2,82
   1503c:	1000291e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15040:	e0bffdc3 	ldbu	r2,-9(fp)
   15044:	10803fcc 	andi	r2,r2,255
   15048:	1004c03a 	cmpne	r2,r2,zero
   1504c:	1000251e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15050:	e0bffe03 	ldbu	r2,-8(fp)
   15054:	10803fcc 	andi	r2,r2,255
   15058:	10801658 	cmpnei	r2,r2,89
   1505c:	1000211e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15060:	e0bffe43 	ldbu	r2,-7(fp)
   15064:	10803fcc 	andi	r2,r2,255
   15068:	1004c03a 	cmpne	r2,r2,zero
   1506c:	10001d1e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15070:	e0bffe83 	ldbu	r2,-6(fp)
   15074:	10803fcc 	andi	r2,r2,255
   15078:	10801658 	cmpnei	r2,r2,89
   1507c:	1000191e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15080:	e0bffec3 	ldbu	r2,-5(fp)
   15084:	10803fcc 	andi	r2,r2,255
   15088:	1004c03a 	cmpne	r2,r2,zero
   1508c:	1000151e 	bne	r2,zero,150e4 <alt_read_cfi_width+0x620>
   15090:	e0ffff17 	ldw	r3,-4(fp)
   15094:	00800084 	movi	r2,2
   15098:	18802e15 	stw	r2,184(r3)
   1509c:	e0ffff17 	ldw	r3,-4(fp)
   150a0:	00800104 	movi	r2,4
   150a4:	18802f15 	stw	r2,188(r3)
   150a8:	e0bfff17 	ldw	r2,-4(fp)
   150ac:	10800a17 	ldw	r2,40(r2)
   150b0:	10802804 	addi	r2,r2,160
   150b4:	10800037 	ldwio	r2,0(r2)
   150b8:	e0bffa0d 	sth	r2,-24(fp)
   150bc:	e0bffa0b 	ldhu	r2,-24(fp)
   150c0:	10800044 	addi	r2,r2,1
   150c4:	e0bffa0d 	sth	r2,-24(fp)
   150c8:	e0bffa0b 	ldhu	r2,-24(fp)
   150cc:	1080010c 	andi	r2,r2,4
   150d0:	1004c03a 	cmpne	r2,r2,zero
   150d4:	1000601e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   150d8:	00bffb44 	movi	r2,-19
   150dc:	e0bff915 	stw	r2,-28(fp)
   150e0:	00005d06 	br	15258 <alt_read_cfi_width+0x794>
   150e4:	e0bfff17 	ldw	r2,-4(fp)
   150e8:	11000a17 	ldw	r4,40(r2)
   150ec:	01401544 	movi	r5,85
   150f0:	01802604 	movi	r6,152
   150f4:	00140280 	call	14028 <alt_write_flash_command_32bit_device_8bit_mode>
   150f8:	e03ffb15 	stw	zero,-20(fp)
   150fc:	00000f06 	br	1513c <alt_read_cfi_width+0x678>
   15100:	e13ffb17 	ldw	r4,-20(fp)
   15104:	e0bfff17 	ldw	r2,-4(fp)
   15108:	10800a17 	ldw	r2,40(r2)
   1510c:	1007883a 	mov	r3,r2
   15110:	e0bffb17 	ldw	r2,-20(fp)
   15114:	1885883a 	add	r2,r3,r2
   15118:	10801004 	addi	r2,r2,64
   1511c:	10800023 	ldbuio	r2,0(r2)
   15120:	1007883a 	mov	r3,r2
   15124:	e0bffc04 	addi	r2,fp,-16
   15128:	1105883a 	add	r2,r2,r4
   1512c:	10c00005 	stb	r3,0(r2)
   15130:	e0bffb17 	ldw	r2,-20(fp)
   15134:	10800044 	addi	r2,r2,1
   15138:	e0bffb15 	stw	r2,-20(fp)
   1513c:	e0bffb17 	ldw	r2,-20(fp)
   15140:	10800310 	cmplti	r2,r2,12
   15144:	103fee1e 	bne	r2,zero,15100 <alt_read_cfi_width+0x63c>
   15148:	e0bffc03 	ldbu	r2,-16(fp)
   1514c:	10803fcc 	andi	r2,r2,255
   15150:	10801458 	cmpnei	r2,r2,81
   15154:	1000401e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15158:	e0bffc43 	ldbu	r2,-15(fp)
   1515c:	10803fcc 	andi	r2,r2,255
   15160:	10801458 	cmpnei	r2,r2,81
   15164:	10003c1e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15168:	e0bffc83 	ldbu	r2,-14(fp)
   1516c:	10803fcc 	andi	r2,r2,255
   15170:	10801458 	cmpnei	r2,r2,81
   15174:	1000381e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15178:	e0bffcc3 	ldbu	r2,-13(fp)
   1517c:	10803fcc 	andi	r2,r2,255
   15180:	10801458 	cmpnei	r2,r2,81
   15184:	1000341e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15188:	e0bffd03 	ldbu	r2,-12(fp)
   1518c:	10803fcc 	andi	r2,r2,255
   15190:	10801498 	cmpnei	r2,r2,82
   15194:	1000301e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15198:	e0bffd43 	ldbu	r2,-11(fp)
   1519c:	10803fcc 	andi	r2,r2,255
   151a0:	10801498 	cmpnei	r2,r2,82
   151a4:	10002c1e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   151a8:	e0bffd83 	ldbu	r2,-10(fp)
   151ac:	10803fcc 	andi	r2,r2,255
   151b0:	10801498 	cmpnei	r2,r2,82
   151b4:	1000281e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   151b8:	e0bffdc3 	ldbu	r2,-9(fp)
   151bc:	10803fcc 	andi	r2,r2,255
   151c0:	10801498 	cmpnei	r2,r2,82
   151c4:	1000241e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   151c8:	e0bffe03 	ldbu	r2,-8(fp)
   151cc:	10803fcc 	andi	r2,r2,255
   151d0:	10801658 	cmpnei	r2,r2,89
   151d4:	1000201e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   151d8:	e0bffe43 	ldbu	r2,-7(fp)
   151dc:	10803fcc 	andi	r2,r2,255
   151e0:	10801658 	cmpnei	r2,r2,89
   151e4:	10001c1e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   151e8:	e0bffe83 	ldbu	r2,-6(fp)
   151ec:	10803fcc 	andi	r2,r2,255
   151f0:	10801658 	cmpnei	r2,r2,89
   151f4:	1000181e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   151f8:	e0bffec3 	ldbu	r2,-5(fp)
   151fc:	10803fcc 	andi	r2,r2,255
   15200:	10801658 	cmpnei	r2,r2,89
   15204:	1000141e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15208:	e0ffff17 	ldw	r3,-4(fp)
   1520c:	00800044 	movi	r2,1
   15210:	18802e15 	stw	r2,184(r3)
   15214:	e0ffff17 	ldw	r3,-4(fp)
   15218:	00800104 	movi	r2,4
   1521c:	18802f15 	stw	r2,188(r3)
   15220:	e0bfff17 	ldw	r2,-4(fp)
   15224:	10800a17 	ldw	r2,40(r2)
   15228:	10802804 	addi	r2,r2,160
   1522c:	10800037 	ldwio	r2,0(r2)
   15230:	e0bffa0d 	sth	r2,-24(fp)
   15234:	e0bffa0b 	ldhu	r2,-24(fp)
   15238:	10800044 	addi	r2,r2,1
   1523c:	e0bffa0d 	sth	r2,-24(fp)
   15240:	e0bffa0b 	ldhu	r2,-24(fp)
   15244:	1080010c 	andi	r2,r2,4
   15248:	1004c03a 	cmpne	r2,r2,zero
   1524c:	1000021e 	bne	r2,zero,15258 <alt_read_cfi_width+0x794>
   15250:	00bffb44 	movi	r2,-19
   15254:	e0bff915 	stw	r2,-28(fp)
   15258:	e0bff917 	ldw	r2,-28(fp)
   1525c:	e037883a 	mov	sp,fp
   15260:	dfc00117 	ldw	ra,4(sp)
   15264:	df000017 	ldw	fp,0(sp)
   15268:	dec00204 	addi	sp,sp,8
   1526c:	f800283a 	ret

00015270 <alt_check_primary_table>:
   15270:	defff904 	addi	sp,sp,-28
   15274:	dfc00615 	stw	ra,24(sp)
   15278:	df000515 	stw	fp,20(sp)
   1527c:	dc000415 	stw	r16,16(sp)
   15280:	df000404 	addi	fp,sp,16
   15284:	e13fff15 	stw	r4,-4(fp)
   15288:	e03ffc15 	stw	zero,-16(fp)
   1528c:	e13fff17 	ldw	r4,-4(fp)
   15290:	01400544 	movi	r5,21
   15294:	00144680 	call	14468 <alt_read_16bit_query_entry>
   15298:	10ffffcc 	andi	r3,r2,65535
   1529c:	e0bfff17 	ldw	r2,-4(fp)
   152a0:	10c03215 	stw	r3,200(r2)
   152a4:	e03ffd15 	stw	zero,-12(fp)
   152a8:	00001006 	br	152ec <alt_check_primary_table+0x7c>
   152ac:	e43ffd17 	ldw	r16,-12(fp)
   152b0:	e0bfff17 	ldw	r2,-4(fp)
   152b4:	11803417 	ldw	r6,208(r2)
   152b8:	e0bfff17 	ldw	r2,-4(fp)
   152bc:	10c03217 	ldw	r3,200(r2)
   152c0:	e0bffd17 	ldw	r2,-12(fp)
   152c4:	188b883a 	add	r5,r3,r2
   152c8:	e13fff17 	ldw	r4,-4(fp)
   152cc:	303ee83a 	callr	r6
   152d0:	1007883a 	mov	r3,r2
   152d4:	e0bffe04 	addi	r2,fp,-8
   152d8:	1405883a 	add	r2,r2,r16
   152dc:	10c00005 	stb	r3,0(r2)
   152e0:	e0bffd17 	ldw	r2,-12(fp)
   152e4:	10800044 	addi	r2,r2,1
   152e8:	e0bffd15 	stw	r2,-12(fp)
   152ec:	e0bffd17 	ldw	r2,-12(fp)
   152f0:	108000d0 	cmplti	r2,r2,3
   152f4:	103fed1e 	bne	r2,zero,152ac <alt_check_primary_table+0x3c>
   152f8:	e0bffe03 	ldbu	r2,-8(fp)
   152fc:	10803fcc 	andi	r2,r2,255
   15300:	10801418 	cmpnei	r2,r2,80
   15304:	1000081e 	bne	r2,zero,15328 <alt_check_primary_table+0xb8>
   15308:	e0bffe43 	ldbu	r2,-7(fp)
   1530c:	10803fcc 	andi	r2,r2,255
   15310:	10801498 	cmpnei	r2,r2,82
   15314:	1000041e 	bne	r2,zero,15328 <alt_check_primary_table+0xb8>
   15318:	e0bffe83 	ldbu	r2,-6(fp)
   1531c:	10803fcc 	andi	r2,r2,255
   15320:	10801260 	cmpeqi	r2,r2,73
   15324:	1000021e 	bne	r2,zero,15330 <alt_check_primary_table+0xc0>
   15328:	00bffb44 	movi	r2,-19
   1532c:	e0bffc15 	stw	r2,-16(fp)
   15330:	e0bffc17 	ldw	r2,-16(fp)
   15334:	e037883a 	mov	sp,fp
   15338:	dfc00217 	ldw	ra,8(sp)
   1533c:	df000117 	ldw	fp,4(sp)
   15340:	dc000017 	ldw	r16,0(sp)
   15344:	dec00304 	addi	sp,sp,12
   15348:	f800283a 	ret

0001534c <altera_avalon_jtag_uart_read_fd>:
   1534c:	defffa04 	addi	sp,sp,-24
   15350:	dfc00515 	stw	ra,20(sp)
   15354:	df000415 	stw	fp,16(sp)
   15358:	df000404 	addi	fp,sp,16
   1535c:	e13ffd15 	stw	r4,-12(fp)
   15360:	e17ffe15 	stw	r5,-8(fp)
   15364:	e1bfff15 	stw	r6,-4(fp)
   15368:	e0bffd17 	ldw	r2,-12(fp)
   1536c:	10800017 	ldw	r2,0(r2)
   15370:	e0bffc15 	stw	r2,-16(fp)
   15374:	e0bffc17 	ldw	r2,-16(fp)
   15378:	11000a04 	addi	r4,r2,40
   1537c:	e0bffd17 	ldw	r2,-12(fp)
   15380:	11c00217 	ldw	r7,8(r2)
   15384:	e17ffe17 	ldw	r5,-8(fp)
   15388:	e1bfff17 	ldw	r6,-4(fp)
   1538c:	00159900 	call	15990 <altera_avalon_jtag_uart_read>
   15390:	e037883a 	mov	sp,fp
   15394:	dfc00117 	ldw	ra,4(sp)
   15398:	df000017 	ldw	fp,0(sp)
   1539c:	dec00204 	addi	sp,sp,8
   153a0:	f800283a 	ret

000153a4 <altera_avalon_jtag_uart_write_fd>:
   153a4:	defffa04 	addi	sp,sp,-24
   153a8:	dfc00515 	stw	ra,20(sp)
   153ac:	df000415 	stw	fp,16(sp)
   153b0:	df000404 	addi	fp,sp,16
   153b4:	e13ffd15 	stw	r4,-12(fp)
   153b8:	e17ffe15 	stw	r5,-8(fp)
   153bc:	e1bfff15 	stw	r6,-4(fp)
   153c0:	e0bffd17 	ldw	r2,-12(fp)
   153c4:	10800017 	ldw	r2,0(r2)
   153c8:	e0bffc15 	stw	r2,-16(fp)
   153cc:	e0bffc17 	ldw	r2,-16(fp)
   153d0:	11000a04 	addi	r4,r2,40
   153d4:	e0bffd17 	ldw	r2,-12(fp)
   153d8:	11c00217 	ldw	r7,8(r2)
   153dc:	e17ffe17 	ldw	r5,-8(fp)
   153e0:	e1bfff17 	ldw	r6,-4(fp)
   153e4:	0015bb40 	call	15bb4 <altera_avalon_jtag_uart_write>
   153e8:	e037883a 	mov	sp,fp
   153ec:	dfc00117 	ldw	ra,4(sp)
   153f0:	df000017 	ldw	fp,0(sp)
   153f4:	dec00204 	addi	sp,sp,8
   153f8:	f800283a 	ret

000153fc <altera_avalon_jtag_uart_close_fd>:
   153fc:	defffc04 	addi	sp,sp,-16
   15400:	dfc00315 	stw	ra,12(sp)
   15404:	df000215 	stw	fp,8(sp)
   15408:	df000204 	addi	fp,sp,8
   1540c:	e13fff15 	stw	r4,-4(fp)
   15410:	e0bfff17 	ldw	r2,-4(fp)
   15414:	10800017 	ldw	r2,0(r2)
   15418:	e0bffe15 	stw	r2,-8(fp)
   1541c:	e0bffe17 	ldw	r2,-8(fp)
   15420:	11000a04 	addi	r4,r2,40
   15424:	e0bfff17 	ldw	r2,-4(fp)
   15428:	11400217 	ldw	r5,8(r2)
   1542c:	00158280 	call	15828 <altera_avalon_jtag_uart_close>
   15430:	e037883a 	mov	sp,fp
   15434:	dfc00117 	ldw	ra,4(sp)
   15438:	df000017 	ldw	fp,0(sp)
   1543c:	dec00204 	addi	sp,sp,8
   15440:	f800283a 	ret

00015444 <altera_avalon_jtag_uart_ioctl_fd>:
   15444:	defffa04 	addi	sp,sp,-24
   15448:	dfc00515 	stw	ra,20(sp)
   1544c:	df000415 	stw	fp,16(sp)
   15450:	df000404 	addi	fp,sp,16
   15454:	e13ffd15 	stw	r4,-12(fp)
   15458:	e17ffe15 	stw	r5,-8(fp)
   1545c:	e1bfff15 	stw	r6,-4(fp)
   15460:	e0bffd17 	ldw	r2,-12(fp)
   15464:	10800017 	ldw	r2,0(r2)
   15468:	e0bffc15 	stw	r2,-16(fp)
   1546c:	e0bffc17 	ldw	r2,-16(fp)
   15470:	11000a04 	addi	r4,r2,40
   15474:	e17ffe17 	ldw	r5,-8(fp)
   15478:	e1bfff17 	ldw	r6,-4(fp)
   1547c:	001589c0 	call	1589c <altera_avalon_jtag_uart_ioctl>
   15480:	e037883a 	mov	sp,fp
   15484:	dfc00117 	ldw	ra,4(sp)
   15488:	df000017 	ldw	fp,0(sp)
   1548c:	dec00204 	addi	sp,sp,8
   15490:	f800283a 	ret

00015494 <altera_avalon_jtag_uart_init>:
   15494:	defffb04 	addi	sp,sp,-20
   15498:	dfc00415 	stw	ra,16(sp)
   1549c:	df000315 	stw	fp,12(sp)
   154a0:	df000304 	addi	fp,sp,12
   154a4:	e13ffd15 	stw	r4,-12(fp)
   154a8:	e17ffe15 	stw	r5,-8(fp)
   154ac:	e1bfff15 	stw	r6,-4(fp)
   154b0:	e0fffd17 	ldw	r3,-12(fp)
   154b4:	00800044 	movi	r2,1
   154b8:	18800815 	stw	r2,32(r3)
   154bc:	e0bffd17 	ldw	r2,-12(fp)
   154c0:	10800017 	ldw	r2,0(r2)
   154c4:	11000104 	addi	r4,r2,4
   154c8:	e0bffd17 	ldw	r2,-12(fp)
   154cc:	10800817 	ldw	r2,32(r2)
   154d0:	1007883a 	mov	r3,r2
   154d4:	2005883a 	mov	r2,r4
   154d8:	10c00035 	stwio	r3,0(r2)
   154dc:	e13fff17 	ldw	r4,-4(fp)
   154e0:	e17ffd17 	ldw	r5,-12(fp)
   154e4:	01800074 	movhi	r6,1
   154e8:	31955304 	addi	r6,r6,21836
   154ec:	00019140 	call	1914 <alt_irq_register>
   154f0:	e0bffd17 	ldw	r2,-12(fp)
   154f4:	10000915 	stw	zero,36(r2)
   154f8:	e0bffd17 	ldw	r2,-12(fp)
   154fc:	11000204 	addi	r4,r2,8
   15500:	00820034 	movhi	r2,2048
   15504:	108a4a04 	addi	r2,r2,10536
   15508:	10800017 	ldw	r2,0(r2)
   1550c:	100b883a 	mov	r5,r2
   15510:	01800074 	movhi	r6,1
   15514:	3195de04 	addi	r6,r6,22392
   15518:	e1fffd17 	ldw	r7,-12(fp)
   1551c:	00197440 	call	19744 <alt_alarm_start>
   15520:	1004403a 	cmpge	r2,r2,zero
   15524:	1000041e 	bne	r2,zero,15538 <altera_avalon_jtag_uart_init+0xa4>
   15528:	e0fffd17 	ldw	r3,-12(fp)
   1552c:	00a00034 	movhi	r2,32768
   15530:	10bfffc4 	addi	r2,r2,-1
   15534:	18800115 	stw	r2,4(r3)
   15538:	e037883a 	mov	sp,fp
   1553c:	dfc00117 	ldw	ra,4(sp)
   15540:	df000017 	ldw	fp,0(sp)
   15544:	dec00204 	addi	sp,sp,8
   15548:	f800283a 	ret

0001554c <altera_avalon_jtag_uart_irq>:
   1554c:	defff704 	addi	sp,sp,-36
   15550:	df000815 	stw	fp,32(sp)
   15554:	df000804 	addi	fp,sp,32
   15558:	e13ffe15 	stw	r4,-8(fp)
   1555c:	e17fff15 	stw	r5,-4(fp)
   15560:	e0bffe17 	ldw	r2,-8(fp)
   15564:	e0bffd15 	stw	r2,-12(fp)
   15568:	e0bffd17 	ldw	r2,-12(fp)
   1556c:	10800017 	ldw	r2,0(r2)
   15570:	e0bffc15 	stw	r2,-16(fp)
   15574:	00000006 	br	15578 <altera_avalon_jtag_uart_irq+0x2c>
   15578:	e0bffc17 	ldw	r2,-16(fp)
   1557c:	10800104 	addi	r2,r2,4
   15580:	10800037 	ldwio	r2,0(r2)
   15584:	e0bffb15 	stw	r2,-20(fp)
   15588:	e0bffb17 	ldw	r2,-20(fp)
   1558c:	1080c00c 	andi	r2,r2,768
   15590:	1005003a 	cmpeq	r2,r2,zero
   15594:	1000741e 	bne	r2,zero,15768 <altera_avalon_jtag_uart_irq+0x21c>
   15598:	e0bffb17 	ldw	r2,-20(fp)
   1559c:	1080400c 	andi	r2,r2,256
   155a0:	1005003a 	cmpeq	r2,r2,zero
   155a4:	1000351e 	bne	r2,zero,1567c <altera_avalon_jtag_uart_irq+0x130>
   155a8:	00800074 	movhi	r2,1
   155ac:	e0bffa15 	stw	r2,-24(fp)
   155b0:	e0bffd17 	ldw	r2,-12(fp)
   155b4:	10800a17 	ldw	r2,40(r2)
   155b8:	10800044 	addi	r2,r2,1
   155bc:	1081ffcc 	andi	r2,r2,2047
   155c0:	e0bff915 	stw	r2,-28(fp)
   155c4:	e0bffd17 	ldw	r2,-12(fp)
   155c8:	10c00b17 	ldw	r3,44(r2)
   155cc:	e0bff917 	ldw	r2,-28(fp)
   155d0:	18801626 	beq	r3,r2,1562c <altera_avalon_jtag_uart_irq+0xe0>
   155d4:	e0bffc17 	ldw	r2,-16(fp)
   155d8:	10800037 	ldwio	r2,0(r2)
   155dc:	e0bffa15 	stw	r2,-24(fp)
   155e0:	e0bffa17 	ldw	r2,-24(fp)
   155e4:	10a0000c 	andi	r2,r2,32768
   155e8:	1005003a 	cmpeq	r2,r2,zero
   155ec:	10000f1e 	bne	r2,zero,1562c <altera_avalon_jtag_uart_irq+0xe0>
   155f0:	e0bffd17 	ldw	r2,-12(fp)
   155f4:	10c00a17 	ldw	r3,40(r2)
   155f8:	e0bffa17 	ldw	r2,-24(fp)
   155fc:	1009883a 	mov	r4,r2
   15600:	e0bffd17 	ldw	r2,-12(fp)
   15604:	1885883a 	add	r2,r3,r2
   15608:	10800e04 	addi	r2,r2,56
   1560c:	11000005 	stb	r4,0(r2)
   15610:	e0bffd17 	ldw	r2,-12(fp)
   15614:	10800a17 	ldw	r2,40(r2)
   15618:	10800044 	addi	r2,r2,1
   1561c:	10c1ffcc 	andi	r3,r2,2047
   15620:	e0bffd17 	ldw	r2,-12(fp)
   15624:	10c00a15 	stw	r3,40(r2)
   15628:	003fe106 	br	155b0 <altera_avalon_jtag_uart_irq+0x64>
   1562c:	e0bffa17 	ldw	r2,-24(fp)
   15630:	10bfffec 	andhi	r2,r2,65535
   15634:	1005003a 	cmpeq	r2,r2,zero
   15638:	1000101e 	bne	r2,zero,1567c <altera_avalon_jtag_uart_irq+0x130>
   1563c:	e0bffd17 	ldw	r2,-12(fp)
   15640:	10c00817 	ldw	r3,32(r2)
   15644:	00bfff84 	movi	r2,-2
   15648:	1886703a 	and	r3,r3,r2
   1564c:	e0bffd17 	ldw	r2,-12(fp)
   15650:	10c00815 	stw	r3,32(r2)
   15654:	e0bffc17 	ldw	r2,-16(fp)
   15658:	11000104 	addi	r4,r2,4
   1565c:	e0bffd17 	ldw	r2,-12(fp)
   15660:	10800817 	ldw	r2,32(r2)
   15664:	1007883a 	mov	r3,r2
   15668:	2005883a 	mov	r2,r4
   1566c:	10c00035 	stwio	r3,0(r2)
   15670:	e0bffc17 	ldw	r2,-16(fp)
   15674:	10800104 	addi	r2,r2,4
   15678:	10800037 	ldwio	r2,0(r2)
   1567c:	e0bffb17 	ldw	r2,-20(fp)
   15680:	1080800c 	andi	r2,r2,512
   15684:	1005003a 	cmpeq	r2,r2,zero
   15688:	103fbb1e 	bne	r2,zero,15578 <altera_avalon_jtag_uart_irq+0x2c>
   1568c:	e0bffb17 	ldw	r2,-20(fp)
   15690:	10bfffec 	andhi	r2,r2,65535
   15694:	1004d43a 	srli	r2,r2,16
   15698:	e0bff815 	stw	r2,-32(fp)
   1569c:	00001506 	br	156f4 <altera_avalon_jtag_uart_irq+0x1a8>
   156a0:	e13ffc17 	ldw	r4,-16(fp)
   156a4:	e0bffd17 	ldw	r2,-12(fp)
   156a8:	10c00d17 	ldw	r3,52(r2)
   156ac:	e0bffd17 	ldw	r2,-12(fp)
   156b0:	1885883a 	add	r2,r3,r2
   156b4:	10820e04 	addi	r2,r2,2104
   156b8:	10800003 	ldbu	r2,0(r2)
   156bc:	10c03fcc 	andi	r3,r2,255
   156c0:	18c0201c 	xori	r3,r3,128
   156c4:	18ffe004 	addi	r3,r3,-128
   156c8:	2005883a 	mov	r2,r4
   156cc:	10c00035 	stwio	r3,0(r2)
   156d0:	e0bffd17 	ldw	r2,-12(fp)
   156d4:	10800d17 	ldw	r2,52(r2)
   156d8:	10800044 	addi	r2,r2,1
   156dc:	10c1ffcc 	andi	r3,r2,2047
   156e0:	e0bffd17 	ldw	r2,-12(fp)
   156e4:	10c00d15 	stw	r3,52(r2)
   156e8:	e0bff817 	ldw	r2,-32(fp)
   156ec:	10bfffc4 	addi	r2,r2,-1
   156f0:	e0bff815 	stw	r2,-32(fp)
   156f4:	e0bff817 	ldw	r2,-32(fp)
   156f8:	1005003a 	cmpeq	r2,r2,zero
   156fc:	1000051e 	bne	r2,zero,15714 <altera_avalon_jtag_uart_irq+0x1c8>
   15700:	e0bffd17 	ldw	r2,-12(fp)
   15704:	10c00d17 	ldw	r3,52(r2)
   15708:	e0bffd17 	ldw	r2,-12(fp)
   1570c:	10800c17 	ldw	r2,48(r2)
   15710:	18bfe31e 	bne	r3,r2,156a0 <altera_avalon_jtag_uart_irq+0x154>
   15714:	e0bff817 	ldw	r2,-32(fp)
   15718:	1005003a 	cmpeq	r2,r2,zero
   1571c:	103f961e 	bne	r2,zero,15578 <altera_avalon_jtag_uart_irq+0x2c>
   15720:	e0bffd17 	ldw	r2,-12(fp)
   15724:	10c00817 	ldw	r3,32(r2)
   15728:	00bfff44 	movi	r2,-3
   1572c:	1886703a 	and	r3,r3,r2
   15730:	e0bffd17 	ldw	r2,-12(fp)
   15734:	10c00815 	stw	r3,32(r2)
   15738:	e0bffd17 	ldw	r2,-12(fp)
   1573c:	10800017 	ldw	r2,0(r2)
   15740:	11000104 	addi	r4,r2,4
   15744:	e0bffd17 	ldw	r2,-12(fp)
   15748:	10800817 	ldw	r2,32(r2)
   1574c:	1007883a 	mov	r3,r2
   15750:	2005883a 	mov	r2,r4
   15754:	10c00035 	stwio	r3,0(r2)
   15758:	e0bffc17 	ldw	r2,-16(fp)
   1575c:	10800104 	addi	r2,r2,4
   15760:	10800037 	ldwio	r2,0(r2)
   15764:	003f8406 	br	15578 <altera_avalon_jtag_uart_irq+0x2c>
   15768:	e037883a 	mov	sp,fp
   1576c:	df000017 	ldw	fp,0(sp)
   15770:	dec00104 	addi	sp,sp,4
   15774:	f800283a 	ret

00015778 <altera_avalon_jtag_uart_timeout>:
   15778:	defffc04 	addi	sp,sp,-16
   1577c:	df000315 	stw	fp,12(sp)
   15780:	df000304 	addi	fp,sp,12
   15784:	e13fff15 	stw	r4,-4(fp)
   15788:	e0bfff17 	ldw	r2,-4(fp)
   1578c:	e0bffe15 	stw	r2,-8(fp)
   15790:	e0bffe17 	ldw	r2,-8(fp)
   15794:	10800017 	ldw	r2,0(r2)
   15798:	10800104 	addi	r2,r2,4
   1579c:	10800037 	ldwio	r2,0(r2)
   157a0:	e0bffd15 	stw	r2,-12(fp)
   157a4:	e0bffd17 	ldw	r2,-12(fp)
   157a8:	1081000c 	andi	r2,r2,1024
   157ac:	1005003a 	cmpeq	r2,r2,zero
   157b0:	10000c1e 	bne	r2,zero,157e4 <altera_avalon_jtag_uart_timeout+0x6c>
   157b4:	e0bffe17 	ldw	r2,-8(fp)
   157b8:	10800017 	ldw	r2,0(r2)
   157bc:	11000104 	addi	r4,r2,4
   157c0:	e0bffe17 	ldw	r2,-8(fp)
   157c4:	10800817 	ldw	r2,32(r2)
   157c8:	10810014 	ori	r2,r2,1024
   157cc:	1007883a 	mov	r3,r2
   157d0:	2005883a 	mov	r2,r4
   157d4:	10c00035 	stwio	r3,0(r2)
   157d8:	e0bffe17 	ldw	r2,-8(fp)
   157dc:	10000915 	stw	zero,36(r2)
   157e0:	00000a06 	br	1580c <altera_avalon_jtag_uart_timeout+0x94>
   157e4:	e0bffe17 	ldw	r2,-8(fp)
   157e8:	10c00917 	ldw	r3,36(r2)
   157ec:	00a00034 	movhi	r2,32768
   157f0:	10bfff04 	addi	r2,r2,-4
   157f4:	10c00536 	bltu	r2,r3,1580c <altera_avalon_jtag_uart_timeout+0x94>
   157f8:	e0bffe17 	ldw	r2,-8(fp)
   157fc:	10800917 	ldw	r2,36(r2)
   15800:	10c00044 	addi	r3,r2,1
   15804:	e0bffe17 	ldw	r2,-8(fp)
   15808:	10c00915 	stw	r3,36(r2)
   1580c:	00820034 	movhi	r2,2048
   15810:	108a4a04 	addi	r2,r2,10536
   15814:	10800017 	ldw	r2,0(r2)
   15818:	e037883a 	mov	sp,fp
   1581c:	df000017 	ldw	fp,0(sp)
   15820:	dec00104 	addi	sp,sp,4
   15824:	f800283a 	ret

00015828 <altera_avalon_jtag_uart_close>:
   15828:	defffc04 	addi	sp,sp,-16
   1582c:	df000315 	stw	fp,12(sp)
   15830:	df000304 	addi	fp,sp,12
   15834:	e13ffd15 	stw	r4,-12(fp)
   15838:	e17ffe15 	stw	r5,-8(fp)
   1583c:	00000706 	br	1585c <altera_avalon_jtag_uart_close+0x34>
   15840:	e0bffe17 	ldw	r2,-8(fp)
   15844:	1090000c 	andi	r2,r2,16384
   15848:	1005003a 	cmpeq	r2,r2,zero
   1584c:	1000031e 	bne	r2,zero,1585c <altera_avalon_jtag_uart_close+0x34>
   15850:	00bffd44 	movi	r2,-11
   15854:	e0bfff15 	stw	r2,-4(fp)
   15858:	00000b06 	br	15888 <altera_avalon_jtag_uart_close+0x60>
   1585c:	e0bffd17 	ldw	r2,-12(fp)
   15860:	10c00d17 	ldw	r3,52(r2)
   15864:	e0bffd17 	ldw	r2,-12(fp)
   15868:	10800c17 	ldw	r2,48(r2)
   1586c:	18800526 	beq	r3,r2,15884 <altera_avalon_jtag_uart_close+0x5c>
   15870:	e0bffd17 	ldw	r2,-12(fp)
   15874:	10c00917 	ldw	r3,36(r2)
   15878:	e0bffd17 	ldw	r2,-12(fp)
   1587c:	10800117 	ldw	r2,4(r2)
   15880:	18bfef36 	bltu	r3,r2,15840 <altera_avalon_jtag_uart_close+0x18>
   15884:	e03fff15 	stw	zero,-4(fp)
   15888:	e0bfff17 	ldw	r2,-4(fp)
   1588c:	e037883a 	mov	sp,fp
   15890:	df000017 	ldw	fp,0(sp)
   15894:	dec00104 	addi	sp,sp,4
   15898:	f800283a 	ret

0001589c <altera_avalon_jtag_uart_ioctl>:
   1589c:	defff804 	addi	sp,sp,-32
   158a0:	df000715 	stw	fp,28(sp)
   158a4:	df000704 	addi	fp,sp,28
   158a8:	e13ffb15 	stw	r4,-20(fp)
   158ac:	e17ffc15 	stw	r5,-16(fp)
   158b0:	e1bffd15 	stw	r6,-12(fp)
   158b4:	00bff9c4 	movi	r2,-25
   158b8:	e0bffa15 	stw	r2,-24(fp)
   158bc:	e0bffc17 	ldw	r2,-16(fp)
   158c0:	e0bfff15 	stw	r2,-4(fp)
   158c4:	e0ffff17 	ldw	r3,-4(fp)
   158c8:	189a8060 	cmpeqi	r2,r3,27137
   158cc:	1000041e 	bne	r2,zero,158e0 <altera_avalon_jtag_uart_ioctl+0x44>
   158d0:	e0ffff17 	ldw	r3,-4(fp)
   158d4:	189a80a0 	cmpeqi	r2,r3,27138
   158d8:	10001b1e 	bne	r2,zero,15948 <altera_avalon_jtag_uart_ioctl+0xac>
   158dc:	00002706 	br	1597c <altera_avalon_jtag_uart_ioctl+0xe0>
   158e0:	e0bffb17 	ldw	r2,-20(fp)
   158e4:	10c00117 	ldw	r3,4(r2)
   158e8:	00a00034 	movhi	r2,32768
   158ec:	10bfffc4 	addi	r2,r2,-1
   158f0:	18802226 	beq	r3,r2,1597c <altera_avalon_jtag_uart_ioctl+0xe0>
   158f4:	e0bffd17 	ldw	r2,-12(fp)
   158f8:	10800017 	ldw	r2,0(r2)
   158fc:	e0bff915 	stw	r2,-28(fp)
   15900:	e0bff917 	ldw	r2,-28(fp)
   15904:	10800090 	cmplti	r2,r2,2
   15908:	1000071e 	bne	r2,zero,15928 <altera_avalon_jtag_uart_ioctl+0x8c>
   1590c:	e0fff917 	ldw	r3,-28(fp)
   15910:	00a00034 	movhi	r2,32768
   15914:	10bfffc4 	addi	r2,r2,-1
   15918:	18800326 	beq	r3,r2,15928 <altera_avalon_jtag_uart_ioctl+0x8c>
   1591c:	e0bff917 	ldw	r2,-28(fp)
   15920:	e0bffe15 	stw	r2,-8(fp)
   15924:	00000306 	br	15934 <altera_avalon_jtag_uart_ioctl+0x98>
   15928:	00e00034 	movhi	r3,32768
   1592c:	18ffff84 	addi	r3,r3,-2
   15930:	e0fffe15 	stw	r3,-8(fp)
   15934:	e0bffb17 	ldw	r2,-20(fp)
   15938:	e0fffe17 	ldw	r3,-8(fp)
   1593c:	10c00115 	stw	r3,4(r2)
   15940:	e03ffa15 	stw	zero,-24(fp)
   15944:	00000d06 	br	1597c <altera_avalon_jtag_uart_ioctl+0xe0>
   15948:	e0bffb17 	ldw	r2,-20(fp)
   1594c:	10c00117 	ldw	r3,4(r2)
   15950:	00a00034 	movhi	r2,32768
   15954:	10bfffc4 	addi	r2,r2,-1
   15958:	18800826 	beq	r3,r2,1597c <altera_avalon_jtag_uart_ioctl+0xe0>
   1595c:	e13ffd17 	ldw	r4,-12(fp)
   15960:	e0bffb17 	ldw	r2,-20(fp)
   15964:	10c00917 	ldw	r3,36(r2)
   15968:	e0bffb17 	ldw	r2,-20(fp)
   1596c:	10800117 	ldw	r2,4(r2)
   15970:	1885803a 	cmpltu	r2,r3,r2
   15974:	20800015 	stw	r2,0(r4)
   15978:	e03ffa15 	stw	zero,-24(fp)
   1597c:	e0bffa17 	ldw	r2,-24(fp)
   15980:	e037883a 	mov	sp,fp
   15984:	df000017 	ldw	fp,0(sp)
   15988:	dec00104 	addi	sp,sp,4
   1598c:	f800283a 	ret

00015990 <altera_avalon_jtag_uart_read>:
   15990:	defff204 	addi	sp,sp,-56
   15994:	dfc00d15 	stw	ra,52(sp)
   15998:	df000c15 	stw	fp,48(sp)
   1599c:	df000c04 	addi	fp,sp,48
   159a0:	e13ffb15 	stw	r4,-20(fp)
   159a4:	e17ffc15 	stw	r5,-16(fp)
   159a8:	e1bffd15 	stw	r6,-12(fp)
   159ac:	e1fffe15 	stw	r7,-8(fp)
   159b0:	e0bffc17 	ldw	r2,-16(fp)
   159b4:	e0bffa15 	stw	r2,-24(fp)
   159b8:	00004806 	br	15adc <altera_avalon_jtag_uart_read+0x14c>
   159bc:	e0bffb17 	ldw	r2,-20(fp)
   159c0:	10800a17 	ldw	r2,40(r2)
   159c4:	e0bff715 	stw	r2,-36(fp)
   159c8:	e0bffb17 	ldw	r2,-20(fp)
   159cc:	10800b17 	ldw	r2,44(r2)
   159d0:	e0bff615 	stw	r2,-40(fp)
   159d4:	e0fff717 	ldw	r3,-36(fp)
   159d8:	e0bff617 	ldw	r2,-40(fp)
   159dc:	18800536 	bltu	r3,r2,159f4 <altera_avalon_jtag_uart_read+0x64>
   159e0:	e0bff717 	ldw	r2,-36(fp)
   159e4:	e0fff617 	ldw	r3,-40(fp)
   159e8:	10c5c83a 	sub	r2,r2,r3
   159ec:	e0bff815 	stw	r2,-32(fp)
   159f0:	00000406 	br	15a04 <altera_avalon_jtag_uart_read+0x74>
   159f4:	00820004 	movi	r2,2048
   159f8:	e0fff617 	ldw	r3,-40(fp)
   159fc:	10c5c83a 	sub	r2,r2,r3
   15a00:	e0bff815 	stw	r2,-32(fp)
   15a04:	e0bff817 	ldw	r2,-32(fp)
   15a08:	1005003a 	cmpeq	r2,r2,zero
   15a0c:	10001f1e 	bne	r2,zero,15a8c <altera_avalon_jtag_uart_read+0xfc>
   15a10:	e0fffd17 	ldw	r3,-12(fp)
   15a14:	e0bff817 	ldw	r2,-32(fp)
   15a18:	1880022e 	bgeu	r3,r2,15a24 <altera_avalon_jtag_uart_read+0x94>
   15a1c:	e0bffd17 	ldw	r2,-12(fp)
   15a20:	e0bff815 	stw	r2,-32(fp)
   15a24:	e0bffb17 	ldw	r2,-20(fp)
   15a28:	10c00e04 	addi	r3,r2,56
   15a2c:	e0bff617 	ldw	r2,-40(fp)
   15a30:	1887883a 	add	r3,r3,r2
   15a34:	e0bffa17 	ldw	r2,-24(fp)
   15a38:	1009883a 	mov	r4,r2
   15a3c:	180b883a 	mov	r5,r3
   15a40:	e1bff817 	ldw	r6,-32(fp)
   15a44:	00077880 	call	7788 <memcpy>
   15a48:	e0fff817 	ldw	r3,-32(fp)
   15a4c:	e0bffa17 	ldw	r2,-24(fp)
   15a50:	10c5883a 	add	r2,r2,r3
   15a54:	e0bffa15 	stw	r2,-24(fp)
   15a58:	e0fffd17 	ldw	r3,-12(fp)
   15a5c:	e0bff817 	ldw	r2,-32(fp)
   15a60:	1885c83a 	sub	r2,r3,r2
   15a64:	e0bffd15 	stw	r2,-12(fp)
   15a68:	e0fff617 	ldw	r3,-40(fp)
   15a6c:	e0bff817 	ldw	r2,-32(fp)
   15a70:	1885883a 	add	r2,r3,r2
   15a74:	10c1ffcc 	andi	r3,r2,2047
   15a78:	e0bffb17 	ldw	r2,-20(fp)
   15a7c:	10c00b15 	stw	r3,44(r2)
   15a80:	e0bffd17 	ldw	r2,-12(fp)
   15a84:	10800048 	cmpgei	r2,r2,1
   15a88:	103fcc1e 	bne	r2,zero,159bc <altera_avalon_jtag_uart_read+0x2c>
   15a8c:	e0fffa17 	ldw	r3,-24(fp)
   15a90:	e0bffc17 	ldw	r2,-16(fp)
   15a94:	1880141e 	bne	r3,r2,15ae8 <altera_avalon_jtag_uart_read+0x158>
   15a98:	e0bffe17 	ldw	r2,-8(fp)
   15a9c:	1090000c 	andi	r2,r2,16384
   15aa0:	1004c03a 	cmpne	r2,r2,zero
   15aa4:	1000101e 	bne	r2,zero,15ae8 <altera_avalon_jtag_uart_read+0x158>
   15aa8:	e0bffb17 	ldw	r2,-20(fp)
   15aac:	10c00a17 	ldw	r3,40(r2)
   15ab0:	e0bff717 	ldw	r2,-36(fp)
   15ab4:	1880051e 	bne	r3,r2,15acc <altera_avalon_jtag_uart_read+0x13c>
   15ab8:	e0bffb17 	ldw	r2,-20(fp)
   15abc:	10c00917 	ldw	r3,36(r2)
   15ac0:	e0bffb17 	ldw	r2,-20(fp)
   15ac4:	10800117 	ldw	r2,4(r2)
   15ac8:	18bff736 	bltu	r3,r2,15aa8 <altera_avalon_jtag_uart_read+0x118>
   15acc:	e0bffb17 	ldw	r2,-20(fp)
   15ad0:	10c00a17 	ldw	r3,40(r2)
   15ad4:	e0bff717 	ldw	r2,-36(fp)
   15ad8:	18800326 	beq	r3,r2,15ae8 <altera_avalon_jtag_uart_read+0x158>
   15adc:	e0bffd17 	ldw	r2,-12(fp)
   15ae0:	10800048 	cmpgei	r2,r2,1
   15ae4:	103fb51e 	bne	r2,zero,159bc <altera_avalon_jtag_uart_read+0x2c>
   15ae8:	e0fffa17 	ldw	r3,-24(fp)
   15aec:	e0bffc17 	ldw	r2,-16(fp)
   15af0:	18801926 	beq	r3,r2,15b58 <altera_avalon_jtag_uart_read+0x1c8>
   15af4:	0005303a 	rdctl	r2,status
   15af8:	e0bff515 	stw	r2,-44(fp)
   15afc:	e0fff517 	ldw	r3,-44(fp)
   15b00:	00bfff84 	movi	r2,-2
   15b04:	1884703a 	and	r2,r3,r2
   15b08:	1001703a 	wrctl	status,r2
   15b0c:	e0bff517 	ldw	r2,-44(fp)
   15b10:	e0bff915 	stw	r2,-28(fp)
   15b14:	e0bffb17 	ldw	r2,-20(fp)
   15b18:	10800817 	ldw	r2,32(r2)
   15b1c:	10c00054 	ori	r3,r2,1
   15b20:	e0bffb17 	ldw	r2,-20(fp)
   15b24:	10c00815 	stw	r3,32(r2)
   15b28:	e0bffb17 	ldw	r2,-20(fp)
   15b2c:	10800017 	ldw	r2,0(r2)
   15b30:	11000104 	addi	r4,r2,4
   15b34:	e0bffb17 	ldw	r2,-20(fp)
   15b38:	10800817 	ldw	r2,32(r2)
   15b3c:	1007883a 	mov	r3,r2
   15b40:	2005883a 	mov	r2,r4
   15b44:	10c00035 	stwio	r3,0(r2)
   15b48:	e0bff917 	ldw	r2,-28(fp)
   15b4c:	e0bff415 	stw	r2,-48(fp)
   15b50:	e0bff417 	ldw	r2,-48(fp)
   15b54:	1001703a 	wrctl	status,r2
   15b58:	e0fffa17 	ldw	r3,-24(fp)
   15b5c:	e0bffc17 	ldw	r2,-16(fp)
   15b60:	18800526 	beq	r3,r2,15b78 <altera_avalon_jtag_uart_read+0x1e8>
   15b64:	e0fffa17 	ldw	r3,-24(fp)
   15b68:	e0bffc17 	ldw	r2,-16(fp)
   15b6c:	1887c83a 	sub	r3,r3,r2
   15b70:	e0ffff15 	stw	r3,-4(fp)
   15b74:	00000906 	br	15b9c <altera_avalon_jtag_uart_read+0x20c>
   15b78:	e0bffe17 	ldw	r2,-8(fp)
   15b7c:	1090000c 	andi	r2,r2,16384
   15b80:	1005003a 	cmpeq	r2,r2,zero
   15b84:	1000031e 	bne	r2,zero,15b94 <altera_avalon_jtag_uart_read+0x204>
   15b88:	00bffd44 	movi	r2,-11
   15b8c:	e0bfff15 	stw	r2,-4(fp)
   15b90:	00000206 	br	15b9c <altera_avalon_jtag_uart_read+0x20c>
   15b94:	00bffec4 	movi	r2,-5
   15b98:	e0bfff15 	stw	r2,-4(fp)
   15b9c:	e0bfff17 	ldw	r2,-4(fp)
   15ba0:	e037883a 	mov	sp,fp
   15ba4:	dfc00117 	ldw	ra,4(sp)
   15ba8:	df000017 	ldw	fp,0(sp)
   15bac:	dec00204 	addi	sp,sp,8
   15bb0:	f800283a 	ret

00015bb4 <altera_avalon_jtag_uart_write>:
   15bb4:	defff204 	addi	sp,sp,-56
   15bb8:	dfc00d15 	stw	ra,52(sp)
   15bbc:	df000c15 	stw	fp,48(sp)
   15bc0:	df000c04 	addi	fp,sp,48
   15bc4:	e13ffb15 	stw	r4,-20(fp)
   15bc8:	e17ffc15 	stw	r5,-16(fp)
   15bcc:	e1bffd15 	stw	r6,-12(fp)
   15bd0:	e1fffe15 	stw	r7,-8(fp)
   15bd4:	e03ff915 	stw	zero,-28(fp)
   15bd8:	e0bffc17 	ldw	r2,-16(fp)
   15bdc:	e0bff615 	stw	r2,-40(fp)
   15be0:	00003a06 	br	15ccc <altera_avalon_jtag_uart_write+0x118>
   15be4:	e0bffb17 	ldw	r2,-20(fp)
   15be8:	10800c17 	ldw	r2,48(r2)
   15bec:	e0bffa15 	stw	r2,-24(fp)
   15bf0:	e0bffb17 	ldw	r2,-20(fp)
   15bf4:	10800d17 	ldw	r2,52(r2)
   15bf8:	e0bff915 	stw	r2,-28(fp)
   15bfc:	e0fffa17 	ldw	r3,-24(fp)
   15c00:	e0bff917 	ldw	r2,-28(fp)
   15c04:	1880062e 	bgeu	r3,r2,15c20 <altera_avalon_jtag_uart_write+0x6c>
   15c08:	e0fff917 	ldw	r3,-28(fp)
   15c0c:	e0bffa17 	ldw	r2,-24(fp)
   15c10:	1885c83a 	sub	r2,r3,r2
   15c14:	10bfffc4 	addi	r2,r2,-1
   15c18:	e0bff815 	stw	r2,-32(fp)
   15c1c:	00000c06 	br	15c50 <altera_avalon_jtag_uart_write+0x9c>
   15c20:	e0bff917 	ldw	r2,-28(fp)
   15c24:	1005003a 	cmpeq	r2,r2,zero
   15c28:	1000051e 	bne	r2,zero,15c40 <altera_avalon_jtag_uart_write+0x8c>
   15c2c:	00820004 	movi	r2,2048
   15c30:	e0fffa17 	ldw	r3,-24(fp)
   15c34:	10c5c83a 	sub	r2,r2,r3
   15c38:	e0bff815 	stw	r2,-32(fp)
   15c3c:	00000406 	br	15c50 <altera_avalon_jtag_uart_write+0x9c>
   15c40:	0081ffc4 	movi	r2,2047
   15c44:	e0fffa17 	ldw	r3,-24(fp)
   15c48:	10c5c83a 	sub	r2,r2,r3
   15c4c:	e0bff815 	stw	r2,-32(fp)
   15c50:	e0bff817 	ldw	r2,-32(fp)
   15c54:	1005003a 	cmpeq	r2,r2,zero
   15c58:	10001f1e 	bne	r2,zero,15cd8 <altera_avalon_jtag_uart_write+0x124>
   15c5c:	e0fffd17 	ldw	r3,-12(fp)
   15c60:	e0bff817 	ldw	r2,-32(fp)
   15c64:	1880022e 	bgeu	r3,r2,15c70 <altera_avalon_jtag_uart_write+0xbc>
   15c68:	e0bffd17 	ldw	r2,-12(fp)
   15c6c:	e0bff815 	stw	r2,-32(fp)
   15c70:	e0bffb17 	ldw	r2,-20(fp)
   15c74:	10c20e04 	addi	r3,r2,2104
   15c78:	e0bffa17 	ldw	r2,-24(fp)
   15c7c:	1885883a 	add	r2,r3,r2
   15c80:	e0fffc17 	ldw	r3,-16(fp)
   15c84:	1009883a 	mov	r4,r2
   15c88:	180b883a 	mov	r5,r3
   15c8c:	e1bff817 	ldw	r6,-32(fp)
   15c90:	00077880 	call	7788 <memcpy>
   15c94:	e0fff817 	ldw	r3,-32(fp)
   15c98:	e0bffc17 	ldw	r2,-16(fp)
   15c9c:	10c5883a 	add	r2,r2,r3
   15ca0:	e0bffc15 	stw	r2,-16(fp)
   15ca4:	e0fffd17 	ldw	r3,-12(fp)
   15ca8:	e0bff817 	ldw	r2,-32(fp)
   15cac:	1885c83a 	sub	r2,r3,r2
   15cb0:	e0bffd15 	stw	r2,-12(fp)
   15cb4:	e0fffa17 	ldw	r3,-24(fp)
   15cb8:	e0bff817 	ldw	r2,-32(fp)
   15cbc:	1885883a 	add	r2,r3,r2
   15cc0:	10c1ffcc 	andi	r3,r2,2047
   15cc4:	e0bffb17 	ldw	r2,-20(fp)
   15cc8:	10c00c15 	stw	r3,48(r2)
   15ccc:	e0bffd17 	ldw	r2,-12(fp)
   15cd0:	10800048 	cmpgei	r2,r2,1
   15cd4:	103fc31e 	bne	r2,zero,15be4 <altera_avalon_jtag_uart_write+0x30>
   15cd8:	0005303a 	rdctl	r2,status
   15cdc:	e0bff515 	stw	r2,-44(fp)
   15ce0:	e0fff517 	ldw	r3,-44(fp)
   15ce4:	00bfff84 	movi	r2,-2
   15ce8:	1884703a 	and	r2,r3,r2
   15cec:	1001703a 	wrctl	status,r2
   15cf0:	e0bff517 	ldw	r2,-44(fp)
   15cf4:	e0bff715 	stw	r2,-36(fp)
   15cf8:	e0bffb17 	ldw	r2,-20(fp)
   15cfc:	10800817 	ldw	r2,32(r2)
   15d00:	10c00094 	ori	r3,r2,2
   15d04:	e0bffb17 	ldw	r2,-20(fp)
   15d08:	10c00815 	stw	r3,32(r2)
   15d0c:	e0bffb17 	ldw	r2,-20(fp)
   15d10:	10800017 	ldw	r2,0(r2)
   15d14:	11000104 	addi	r4,r2,4
   15d18:	e0bffb17 	ldw	r2,-20(fp)
   15d1c:	10800817 	ldw	r2,32(r2)
   15d20:	1007883a 	mov	r3,r2
   15d24:	2005883a 	mov	r2,r4
   15d28:	10c00035 	stwio	r3,0(r2)
   15d2c:	e0bff717 	ldw	r2,-36(fp)
   15d30:	e0bff415 	stw	r2,-48(fp)
   15d34:	e0bff417 	ldw	r2,-48(fp)
   15d38:	1001703a 	wrctl	status,r2
   15d3c:	e0bffd17 	ldw	r2,-12(fp)
   15d40:	10800050 	cmplti	r2,r2,1
   15d44:	1000111e 	bne	r2,zero,15d8c <altera_avalon_jtag_uart_write+0x1d8>
   15d48:	e0bffe17 	ldw	r2,-8(fp)
   15d4c:	1090000c 	andi	r2,r2,16384
   15d50:	1004c03a 	cmpne	r2,r2,zero
   15d54:	1000101e 	bne	r2,zero,15d98 <altera_avalon_jtag_uart_write+0x1e4>
   15d58:	e0bffb17 	ldw	r2,-20(fp)
   15d5c:	10c00d17 	ldw	r3,52(r2)
   15d60:	e0bff917 	ldw	r2,-28(fp)
   15d64:	1880051e 	bne	r3,r2,15d7c <altera_avalon_jtag_uart_write+0x1c8>
   15d68:	e0bffb17 	ldw	r2,-20(fp)
   15d6c:	10c00917 	ldw	r3,36(r2)
   15d70:	e0bffb17 	ldw	r2,-20(fp)
   15d74:	10800117 	ldw	r2,4(r2)
   15d78:	18bff736 	bltu	r3,r2,15d58 <altera_avalon_jtag_uart_write+0x1a4>
   15d7c:	e0bffb17 	ldw	r2,-20(fp)
   15d80:	10c00d17 	ldw	r3,52(r2)
   15d84:	e0bff917 	ldw	r2,-28(fp)
   15d88:	18800326 	beq	r3,r2,15d98 <altera_avalon_jtag_uart_write+0x1e4>
   15d8c:	e0bffd17 	ldw	r2,-12(fp)
   15d90:	10800048 	cmpgei	r2,r2,1
   15d94:	103fcd1e 	bne	r2,zero,15ccc <altera_avalon_jtag_uart_write+0x118>
   15d98:	e0fffc17 	ldw	r3,-16(fp)
   15d9c:	e0bff617 	ldw	r2,-40(fp)
   15da0:	18800526 	beq	r3,r2,15db8 <altera_avalon_jtag_uart_write+0x204>
   15da4:	e0fffc17 	ldw	r3,-16(fp)
   15da8:	e0bff617 	ldw	r2,-40(fp)
   15dac:	1887c83a 	sub	r3,r3,r2
   15db0:	e0ffff15 	stw	r3,-4(fp)
   15db4:	00000906 	br	15ddc <altera_avalon_jtag_uart_write+0x228>
   15db8:	e0bffe17 	ldw	r2,-8(fp)
   15dbc:	1090000c 	andi	r2,r2,16384
   15dc0:	1005003a 	cmpeq	r2,r2,zero
   15dc4:	1000031e 	bne	r2,zero,15dd4 <altera_avalon_jtag_uart_write+0x220>
   15dc8:	00bffd44 	movi	r2,-11
   15dcc:	e0bfff15 	stw	r2,-4(fp)
   15dd0:	00000206 	br	15ddc <altera_avalon_jtag_uart_write+0x228>
   15dd4:	00bffec4 	movi	r2,-5
   15dd8:	e0bfff15 	stw	r2,-4(fp)
   15ddc:	e0bfff17 	ldw	r2,-4(fp)
   15de0:	e037883a 	mov	sp,fp
   15de4:	dfc00117 	ldw	ra,4(sp)
   15de8:	df000017 	ldw	fp,0(sp)
   15dec:	dec00204 	addi	sp,sp,8
   15df0:	f800283a 	ret

00015df4 <lcd_write_command>:
   15df4:	defffa04 	addi	sp,sp,-24
   15df8:	dfc00515 	stw	ra,20(sp)
   15dfc:	df000415 	stw	fp,16(sp)
   15e00:	df000404 	addi	fp,sp,16
   15e04:	e13ffe15 	stw	r4,-8(fp)
   15e08:	e17fff05 	stb	r5,-4(fp)
   15e0c:	e0bffe17 	ldw	r2,-8(fp)
   15e10:	10800017 	ldw	r2,0(r2)
   15e14:	e0bffd15 	stw	r2,-12(fp)
   15e18:	008003f4 	movhi	r2,15
   15e1c:	10909004 	addi	r2,r2,16960
   15e20:	e0bffc15 	stw	r2,-16(fp)
   15e24:	e0bffe17 	ldw	r2,-8(fp)
   15e28:	10800803 	ldbu	r2,32(r2)
   15e2c:	10803fcc 	andi	r2,r2,255
   15e30:	1080201c 	xori	r2,r2,128
   15e34:	10bfe004 	addi	r2,r2,-128
   15e38:	1004c03a 	cmpne	r2,r2,zero
   15e3c:	1000161e 	bne	r2,zero,15e98 <lcd_write_command+0xa4>
   15e40:	00000a06 	br	15e6c <lcd_write_command+0x78>
   15e44:	e0bffc17 	ldw	r2,-16(fp)
   15e48:	10bfffc4 	addi	r2,r2,-1
   15e4c:	e0bffc15 	stw	r2,-16(fp)
   15e50:	e0bffc17 	ldw	r2,-16(fp)
   15e54:	1004c03a 	cmpne	r2,r2,zero
   15e58:	1000041e 	bne	r2,zero,15e6c <lcd_write_command+0x78>
   15e5c:	e0fffe17 	ldw	r3,-8(fp)
   15e60:	00800044 	movi	r2,1
   15e64:	18800805 	stb	r2,32(r3)
   15e68:	00000b06 	br	15e98 <lcd_write_command+0xa4>
   15e6c:	e0bffd17 	ldw	r2,-12(fp)
   15e70:	10800104 	addi	r2,r2,4
   15e74:	10800037 	ldwio	r2,0(r2)
   15e78:	1080200c 	andi	r2,r2,128
   15e7c:	1004c03a 	cmpne	r2,r2,zero
   15e80:	103ff01e 	bne	r2,zero,15e44 <lcd_write_command+0x50>
   15e84:	01001904 	movi	r4,100
   15e88:	001a1f40 	call	1a1f4 <usleep>
   15e8c:	e0bffd17 	ldw	r2,-12(fp)
   15e90:	e0ffff03 	ldbu	r3,-4(fp)
   15e94:	10c00035 	stwio	r3,0(r2)
   15e98:	e037883a 	mov	sp,fp
   15e9c:	dfc00117 	ldw	ra,4(sp)
   15ea0:	df000017 	ldw	fp,0(sp)
   15ea4:	dec00204 	addi	sp,sp,8
   15ea8:	f800283a 	ret

00015eac <lcd_write_data>:
   15eac:	defffa04 	addi	sp,sp,-24
   15eb0:	dfc00515 	stw	ra,20(sp)
   15eb4:	df000415 	stw	fp,16(sp)
   15eb8:	df000404 	addi	fp,sp,16
   15ebc:	e13ffe15 	stw	r4,-8(fp)
   15ec0:	e17fff05 	stb	r5,-4(fp)
   15ec4:	e0bffe17 	ldw	r2,-8(fp)
   15ec8:	10800017 	ldw	r2,0(r2)
   15ecc:	e0bffd15 	stw	r2,-12(fp)
   15ed0:	008003f4 	movhi	r2,15
   15ed4:	10909004 	addi	r2,r2,16960
   15ed8:	e0bffc15 	stw	r2,-16(fp)
   15edc:	e0bffe17 	ldw	r2,-8(fp)
   15ee0:	10800803 	ldbu	r2,32(r2)
   15ee4:	10803fcc 	andi	r2,r2,255
   15ee8:	1080201c 	xori	r2,r2,128
   15eec:	10bfe004 	addi	r2,r2,-128
   15ef0:	1004c03a 	cmpne	r2,r2,zero
   15ef4:	10001d1e 	bne	r2,zero,15f6c <lcd_write_data+0xc0>
   15ef8:	00000a06 	br	15f24 <lcd_write_data+0x78>
   15efc:	e0bffc17 	ldw	r2,-16(fp)
   15f00:	10bfffc4 	addi	r2,r2,-1
   15f04:	e0bffc15 	stw	r2,-16(fp)
   15f08:	e0bffc17 	ldw	r2,-16(fp)
   15f0c:	1004c03a 	cmpne	r2,r2,zero
   15f10:	1000041e 	bne	r2,zero,15f24 <lcd_write_data+0x78>
   15f14:	e0fffe17 	ldw	r3,-8(fp)
   15f18:	00800044 	movi	r2,1
   15f1c:	18800805 	stb	r2,32(r3)
   15f20:	00001206 	br	15f6c <lcd_write_data+0xc0>
   15f24:	e0bffd17 	ldw	r2,-12(fp)
   15f28:	10800104 	addi	r2,r2,4
   15f2c:	10800037 	ldwio	r2,0(r2)
   15f30:	1080200c 	andi	r2,r2,128
   15f34:	1004c03a 	cmpne	r2,r2,zero
   15f38:	103ff01e 	bne	r2,zero,15efc <lcd_write_data+0x50>
   15f3c:	01001904 	movi	r4,100
   15f40:	001a1f40 	call	1a1f4 <usleep>
   15f44:	e0bffd17 	ldw	r2,-12(fp)
   15f48:	10800204 	addi	r2,r2,8
   15f4c:	e0ffff03 	ldbu	r3,-4(fp)
   15f50:	10c00035 	stwio	r3,0(r2)
   15f54:	e0bffe17 	ldw	r2,-8(fp)
   15f58:	108008c3 	ldbu	r2,35(r2)
   15f5c:	10800044 	addi	r2,r2,1
   15f60:	1007883a 	mov	r3,r2
   15f64:	e0bffe17 	ldw	r2,-8(fp)
   15f68:	10c008c5 	stb	r3,35(r2)
   15f6c:	e037883a 	mov	sp,fp
   15f70:	dfc00117 	ldw	ra,4(sp)
   15f74:	df000017 	ldw	fp,0(sp)
   15f78:	dec00204 	addi	sp,sp,8
   15f7c:	f800283a 	ret

00015f80 <lcd_clear_screen>:
   15f80:	defffc04 	addi	sp,sp,-16
   15f84:	dfc00315 	stw	ra,12(sp)
   15f88:	df000215 	stw	fp,8(sp)
   15f8c:	df000204 	addi	fp,sp,8
   15f90:	e13fff15 	stw	r4,-4(fp)
   15f94:	e13fff17 	ldw	r4,-4(fp)
   15f98:	01400044 	movi	r5,1
   15f9c:	0015df40 	call	15df4 <lcd_write_command>
   15fa0:	e0bfff17 	ldw	r2,-4(fp)
   15fa4:	10000845 	stb	zero,33(r2)
   15fa8:	e0bfff17 	ldw	r2,-4(fp)
   15fac:	10000885 	stb	zero,34(r2)
   15fb0:	e0bfff17 	ldw	r2,-4(fp)
   15fb4:	100008c5 	stb	zero,35(r2)
   15fb8:	e03ffe15 	stw	zero,-8(fp)
   15fbc:	00001906 	br	16024 <lcd_clear_screen+0xa4>
   15fc0:	e0bffe17 	ldw	r2,-8(fp)
   15fc4:	10801924 	muli	r2,r2,100
   15fc8:	10c01004 	addi	r3,r2,64
   15fcc:	e0bfff17 	ldw	r2,-4(fp)
   15fd0:	1889883a 	add	r4,r3,r2
   15fd4:	01400804 	movi	r5,32
   15fd8:	01801444 	movi	r6,81
   15fdc:	00078280 	call	7828 <memset>
   15fe0:	e0bffe17 	ldw	r2,-8(fp)
   15fe4:	10801924 	muli	r2,r2,100
   15fe8:	10c00c04 	addi	r3,r2,48
   15fec:	e0bfff17 	ldw	r2,-4(fp)
   15ff0:	1889883a 	add	r4,r3,r2
   15ff4:	01400804 	movi	r5,32
   15ff8:	01800404 	movi	r6,16
   15ffc:	00078280 	call	7828 <memset>
   16000:	e0bffe17 	ldw	r2,-8(fp)
   16004:	e0ffff17 	ldw	r3,-4(fp)
   16008:	10801924 	muli	r2,r2,100
   1600c:	10c5883a 	add	r2,r2,r3
   16010:	10802404 	addi	r2,r2,144
   16014:	10000045 	stb	zero,1(r2)
   16018:	e0bffe17 	ldw	r2,-8(fp)
   1601c:	10800044 	addi	r2,r2,1
   16020:	e0bffe15 	stw	r2,-8(fp)
   16024:	e0bffe17 	ldw	r2,-8(fp)
   16028:	10800090 	cmplti	r2,r2,2
   1602c:	103fe41e 	bne	r2,zero,15fc0 <lcd_clear_screen+0x40>
   16030:	e037883a 	mov	sp,fp
   16034:	dfc00117 	ldw	ra,4(sp)
   16038:	df000017 	ldw	fp,0(sp)
   1603c:	dec00204 	addi	sp,sp,8
   16040:	f800283a 	ret

00016044 <lcd_repaint_screen>:
   16044:	defff704 	addi	sp,sp,-36
   16048:	dfc00815 	stw	ra,32(sp)
   1604c:	df000715 	stw	fp,28(sp)
   16050:	df000704 	addi	fp,sp,28
   16054:	e13fff15 	stw	r4,-4(fp)
   16058:	e0bfff17 	ldw	r2,-4(fp)
   1605c:	10800943 	ldbu	r2,37(r2)
   16060:	10803fcc 	andi	r2,r2,255
   16064:	1080201c 	xori	r2,r2,128
   16068:	10bfe004 	addi	r2,r2,-128
   1606c:	e0bffc15 	stw	r2,-16(fp)
   16070:	e03ffe15 	stw	zero,-8(fp)
   16074:	00006606 	br	16210 <lcd_repaint_screen+0x1cc>
   16078:	e0bffe17 	ldw	r2,-8(fp)
   1607c:	e0ffff17 	ldw	r3,-4(fp)
   16080:	10801924 	muli	r2,r2,100
   16084:	10c5883a 	add	r2,r2,r3
   16088:	10802404 	addi	r2,r2,144
   1608c:	10800043 	ldbu	r2,1(r2)
   16090:	10803fcc 	andi	r2,r2,255
   16094:	1080201c 	xori	r2,r2,128
   16098:	10bfe004 	addi	r2,r2,-128
   1609c:	e0bffb15 	stw	r2,-20(fp)
   160a0:	e0bffe17 	ldw	r2,-8(fp)
   160a4:	e0ffff17 	ldw	r3,-4(fp)
   160a8:	10801924 	muli	r2,r2,100
   160ac:	10c5883a 	add	r2,r2,r3
   160b0:	10802404 	addi	r2,r2,144
   160b4:	10800083 	ldbu	r2,2(r2)
   160b8:	10c03fcc 	andi	r3,r2,255
   160bc:	e0bffc17 	ldw	r2,-16(fp)
   160c0:	1885383a 	mul	r2,r3,r2
   160c4:	1005d23a 	srai	r2,r2,8
   160c8:	e0bffa15 	stw	r2,-24(fp)
   160cc:	e0fffa17 	ldw	r3,-24(fp)
   160d0:	e0bffb17 	ldw	r2,-20(fp)
   160d4:	18800116 	blt	r3,r2,160dc <lcd_repaint_screen+0x98>
   160d8:	e03ffa15 	stw	zero,-24(fp)
   160dc:	e03ffd15 	stw	zero,-12(fp)
   160e0:	00004506 	br	161f8 <lcd_repaint_screen+0x1b4>
   160e4:	e17ffe17 	ldw	r5,-8(fp)
   160e8:	e0fffd17 	ldw	r3,-12(fp)
   160ec:	e0bffa17 	ldw	r2,-24(fp)
   160f0:	1889883a 	add	r4,r3,r2
   160f4:	e0bffb17 	ldw	r2,-20(fp)
   160f8:	2087283a 	div	r3,r4,r2
   160fc:	e0bffb17 	ldw	r2,-20(fp)
   16100:	1885383a 	mul	r2,r3,r2
   16104:	2089c83a 	sub	r4,r4,r2
   16108:	e0ffff17 	ldw	r3,-4(fp)
   1610c:	28801924 	muli	r2,r5,100
   16110:	10c5883a 	add	r2,r2,r3
   16114:	1105883a 	add	r2,r2,r4
   16118:	10801004 	addi	r2,r2,64
   1611c:	10800003 	ldbu	r2,0(r2)
   16120:	e0bff945 	stb	r2,-27(fp)
   16124:	e0bffe17 	ldw	r2,-8(fp)
   16128:	e13ffd17 	ldw	r4,-12(fp)
   1612c:	e0ffff17 	ldw	r3,-4(fp)
   16130:	10801924 	muli	r2,r2,100
   16134:	10c5883a 	add	r2,r2,r3
   16138:	1105883a 	add	r2,r2,r4
   1613c:	10800c04 	addi	r2,r2,48
   16140:	10800003 	ldbu	r2,0(r2)
   16144:	10c03fcc 	andi	r3,r2,255
   16148:	18c0201c 	xori	r3,r3,128
   1614c:	18ffe004 	addi	r3,r3,-128
   16150:	e0bff947 	ldb	r2,-27(fp)
   16154:	18802526 	beq	r3,r2,161ec <lcd_repaint_screen+0x1a8>
   16158:	e0fffe17 	ldw	r3,-8(fp)
   1615c:	d0a01804 	addi	r2,gp,-32672
   16160:	1885883a 	add	r2,r3,r2
   16164:	10800003 	ldbu	r2,0(r2)
   16168:	1007883a 	mov	r3,r2
   1616c:	e0bffd17 	ldw	r2,-12(fp)
   16170:	1885883a 	add	r2,r3,r2
   16174:	e0bff905 	stb	r2,-28(fp)
   16178:	e0fff903 	ldbu	r3,-28(fp)
   1617c:	e0bfff17 	ldw	r2,-4(fp)
   16180:	108008c3 	ldbu	r2,35(r2)
   16184:	10803fcc 	andi	r2,r2,255
   16188:	1080201c 	xori	r2,r2,128
   1618c:	10bfe004 	addi	r2,r2,-128
   16190:	18800926 	beq	r3,r2,161b8 <lcd_repaint_screen+0x174>
   16194:	e0fff903 	ldbu	r3,-28(fp)
   16198:	00bfe004 	movi	r2,-128
   1619c:	1884b03a 	or	r2,r3,r2
   161a0:	11403fcc 	andi	r5,r2,255
   161a4:	e13fff17 	ldw	r4,-4(fp)
   161a8:	0015df40 	call	15df4 <lcd_write_command>
   161ac:	e0fff903 	ldbu	r3,-28(fp)
   161b0:	e0bfff17 	ldw	r2,-4(fp)
   161b4:	10c008c5 	stb	r3,35(r2)
   161b8:	e0bff943 	ldbu	r2,-27(fp)
   161bc:	11403fcc 	andi	r5,r2,255
   161c0:	e13fff17 	ldw	r4,-4(fp)
   161c4:	0015eac0 	call	15eac <lcd_write_data>
   161c8:	e0bffe17 	ldw	r2,-8(fp)
   161cc:	e13ffd17 	ldw	r4,-12(fp)
   161d0:	e0ffff17 	ldw	r3,-4(fp)
   161d4:	10801924 	muli	r2,r2,100
   161d8:	10c5883a 	add	r2,r2,r3
   161dc:	1105883a 	add	r2,r2,r4
   161e0:	10c00c04 	addi	r3,r2,48
   161e4:	e0bff943 	ldbu	r2,-27(fp)
   161e8:	18800005 	stb	r2,0(r3)
   161ec:	e0bffd17 	ldw	r2,-12(fp)
   161f0:	10800044 	addi	r2,r2,1
   161f4:	e0bffd15 	stw	r2,-12(fp)
   161f8:	e0bffd17 	ldw	r2,-12(fp)
   161fc:	10800410 	cmplti	r2,r2,16
   16200:	103fb81e 	bne	r2,zero,160e4 <lcd_repaint_screen+0xa0>
   16204:	e0bffe17 	ldw	r2,-8(fp)
   16208:	10800044 	addi	r2,r2,1
   1620c:	e0bffe15 	stw	r2,-8(fp)
   16210:	e0bffe17 	ldw	r2,-8(fp)
   16214:	10800090 	cmplti	r2,r2,2
   16218:	103f971e 	bne	r2,zero,16078 <lcd_repaint_screen+0x34>
   1621c:	e037883a 	mov	sp,fp
   16220:	dfc00117 	ldw	ra,4(sp)
   16224:	df000017 	ldw	fp,0(sp)
   16228:	dec00204 	addi	sp,sp,8
   1622c:	f800283a 	ret

00016230 <lcd_scroll_up>:
   16230:	defffc04 	addi	sp,sp,-16
   16234:	dfc00315 	stw	ra,12(sp)
   16238:	df000215 	stw	fp,8(sp)
   1623c:	df000204 	addi	fp,sp,8
   16240:	e13fff15 	stw	r4,-4(fp)
   16244:	e03ffe15 	stw	zero,-8(fp)
   16248:	00001d06 	br	162c0 <lcd_scroll_up+0x90>
   1624c:	e0bffe17 	ldw	r2,-8(fp)
   16250:	10800048 	cmpgei	r2,r2,1
   16254:	10000f1e 	bne	r2,zero,16294 <lcd_scroll_up+0x64>
   16258:	e0bffe17 	ldw	r2,-8(fp)
   1625c:	10801924 	muli	r2,r2,100
   16260:	10c01004 	addi	r3,r2,64
   16264:	e0bfff17 	ldw	r2,-4(fp)
   16268:	1889883a 	add	r4,r3,r2
   1626c:	e0bffe17 	ldw	r2,-8(fp)
   16270:	10800044 	addi	r2,r2,1
   16274:	10801924 	muli	r2,r2,100
   16278:	10c01004 	addi	r3,r2,64
   1627c:	e0bfff17 	ldw	r2,-4(fp)
   16280:	1885883a 	add	r2,r3,r2
   16284:	100b883a 	mov	r5,r2
   16288:	01801404 	movi	r6,80
   1628c:	00077880 	call	7788 <memcpy>
   16290:	00000806 	br	162b4 <lcd_scroll_up+0x84>
   16294:	e0bffe17 	ldw	r2,-8(fp)
   16298:	10801924 	muli	r2,r2,100
   1629c:	10c01004 	addi	r3,r2,64
   162a0:	e0bfff17 	ldw	r2,-4(fp)
   162a4:	1889883a 	add	r4,r3,r2
   162a8:	01400804 	movi	r5,32
   162ac:	01801404 	movi	r6,80
   162b0:	00078280 	call	7828 <memset>
   162b4:	e0bffe17 	ldw	r2,-8(fp)
   162b8:	10800044 	addi	r2,r2,1
   162bc:	e0bffe15 	stw	r2,-8(fp)
   162c0:	e0bffe17 	ldw	r2,-8(fp)
   162c4:	10800090 	cmplti	r2,r2,2
   162c8:	103fe01e 	bne	r2,zero,1624c <lcd_scroll_up+0x1c>
   162cc:	e0bfff17 	ldw	r2,-4(fp)
   162d0:	10800883 	ldbu	r2,34(r2)
   162d4:	10bfffc4 	addi	r2,r2,-1
   162d8:	1007883a 	mov	r3,r2
   162dc:	e0bfff17 	ldw	r2,-4(fp)
   162e0:	10c00885 	stb	r3,34(r2)
   162e4:	e037883a 	mov	sp,fp
   162e8:	dfc00117 	ldw	ra,4(sp)
   162ec:	df000017 	ldw	fp,0(sp)
   162f0:	dec00204 	addi	sp,sp,8
   162f4:	f800283a 	ret

000162f8 <lcd_handle_escape>:
   162f8:	defff804 	addi	sp,sp,-32
   162fc:	dfc00715 	stw	ra,28(sp)
   16300:	df000615 	stw	fp,24(sp)
   16304:	df000604 	addi	fp,sp,24
   16308:	e13ffd15 	stw	r4,-12(fp)
   1630c:	e17ffe05 	stb	r5,-8(fp)
   16310:	e03ffc15 	stw	zero,-16(fp)
   16314:	e03ffb15 	stw	zero,-20(fp)
   16318:	e0bffd17 	ldw	r2,-12(fp)
   1631c:	10800a03 	ldbu	r2,40(r2)
   16320:	10803fcc 	andi	r2,r2,255
   16324:	1080201c 	xori	r2,r2,128
   16328:	10bfe004 	addi	r2,r2,-128
   1632c:	108016d8 	cmpnei	r2,r2,91
   16330:	1000491e 	bne	r2,zero,16458 <lcd_handle_escape+0x160>
   16334:	e0bffd17 	ldw	r2,-12(fp)
   16338:	10800a04 	addi	r2,r2,40
   1633c:	10800044 	addi	r2,r2,1
   16340:	e0bffa15 	stw	r2,-24(fp)
   16344:	00000d06 	br	1637c <lcd_handle_escape+0x84>
   16348:	e0bffc17 	ldw	r2,-16(fp)
   1634c:	10c002a4 	muli	r3,r2,10
   16350:	e0bffa17 	ldw	r2,-24(fp)
   16354:	10800003 	ldbu	r2,0(r2)
   16358:	10803fcc 	andi	r2,r2,255
   1635c:	1080201c 	xori	r2,r2,128
   16360:	10bfe004 	addi	r2,r2,-128
   16364:	1885883a 	add	r2,r3,r2
   16368:	10bff404 	addi	r2,r2,-48
   1636c:	e0bffc15 	stw	r2,-16(fp)
   16370:	e0bffa17 	ldw	r2,-24(fp)
   16374:	10800044 	addi	r2,r2,1
   16378:	e0bffa15 	stw	r2,-24(fp)
   1637c:	e0bffa17 	ldw	r2,-24(fp)
   16380:	10800003 	ldbu	r2,0(r2)
   16384:	10803fcc 	andi	r2,r2,255
   16388:	1080201c 	xori	r2,r2,128
   1638c:	10bfe004 	addi	r2,r2,-128
   16390:	1007883a 	mov	r3,r2
   16394:	00820034 	movhi	r2,2048
   16398:	108a1b04 	addi	r2,r2,10348
   1639c:	10800017 	ldw	r2,0(r2)
   163a0:	1885883a 	add	r2,r3,r2
   163a4:	10800003 	ldbu	r2,0(r2)
   163a8:	10803fcc 	andi	r2,r2,255
   163ac:	1080010c 	andi	r2,r2,4
   163b0:	1004c03a 	cmpne	r2,r2,zero
   163b4:	103fe41e 	bne	r2,zero,16348 <lcd_handle_escape+0x50>
   163b8:	e0bffa17 	ldw	r2,-24(fp)
   163bc:	10800003 	ldbu	r2,0(r2)
   163c0:	10803fcc 	andi	r2,r2,255
   163c4:	1080201c 	xori	r2,r2,128
   163c8:	10bfe004 	addi	r2,r2,-128
   163cc:	10800ed8 	cmpnei	r2,r2,59
   163d0:	1000231e 	bne	r2,zero,16460 <lcd_handle_escape+0x168>
   163d4:	e0bffa17 	ldw	r2,-24(fp)
   163d8:	10800044 	addi	r2,r2,1
   163dc:	e0bffa15 	stw	r2,-24(fp)
   163e0:	00000d06 	br	16418 <lcd_handle_escape+0x120>
   163e4:	e0bffb17 	ldw	r2,-20(fp)
   163e8:	10c002a4 	muli	r3,r2,10
   163ec:	e0bffa17 	ldw	r2,-24(fp)
   163f0:	10800003 	ldbu	r2,0(r2)
   163f4:	10803fcc 	andi	r2,r2,255
   163f8:	1080201c 	xori	r2,r2,128
   163fc:	10bfe004 	addi	r2,r2,-128
   16400:	1885883a 	add	r2,r3,r2
   16404:	10bff404 	addi	r2,r2,-48
   16408:	e0bffb15 	stw	r2,-20(fp)
   1640c:	e0bffa17 	ldw	r2,-24(fp)
   16410:	10800044 	addi	r2,r2,1
   16414:	e0bffa15 	stw	r2,-24(fp)
   16418:	e0bffa17 	ldw	r2,-24(fp)
   1641c:	10800003 	ldbu	r2,0(r2)
   16420:	10803fcc 	andi	r2,r2,255
   16424:	1080201c 	xori	r2,r2,128
   16428:	10bfe004 	addi	r2,r2,-128
   1642c:	1007883a 	mov	r3,r2
   16430:	00820034 	movhi	r2,2048
   16434:	108a1b04 	addi	r2,r2,10348
   16438:	10800017 	ldw	r2,0(r2)
   1643c:	1885883a 	add	r2,r3,r2
   16440:	10800003 	ldbu	r2,0(r2)
   16444:	10803fcc 	andi	r2,r2,255
   16448:	1080010c 	andi	r2,r2,4
   1644c:	1004c03a 	cmpne	r2,r2,zero
   16450:	103fe41e 	bne	r2,zero,163e4 <lcd_handle_escape+0xec>
   16454:	00000206 	br	16460 <lcd_handle_escape+0x168>
   16458:	00bfffc4 	movi	r2,-1
   1645c:	e0bffc15 	stw	r2,-16(fp)
   16460:	e0bffe07 	ldb	r2,-8(fp)
   16464:	e0bfff15 	stw	r2,-4(fp)
   16468:	e0ffff17 	ldw	r3,-4(fp)
   1646c:	188012a0 	cmpeqi	r2,r3,74
   16470:	10002f1e 	bne	r2,zero,16530 <lcd_handle_escape+0x238>
   16474:	e0ffff17 	ldw	r3,-4(fp)
   16478:	188012c8 	cmpgei	r2,r3,75
   1647c:	1000041e 	bne	r2,zero,16490 <lcd_handle_escape+0x198>
   16480:	e0ffff17 	ldw	r3,-4(fp)
   16484:	18801220 	cmpeqi	r2,r3,72
   16488:	1000081e 	bne	r2,zero,164ac <lcd_handle_escape+0x1b4>
   1648c:	00004906 	br	165b4 <lcd_handle_escape+0x2bc>
   16490:	e0ffff17 	ldw	r3,-4(fp)
   16494:	188012e0 	cmpeqi	r2,r3,75
   16498:	10002b1e 	bne	r2,zero,16548 <lcd_handle_escape+0x250>
   1649c:	e0ffff17 	ldw	r3,-4(fp)
   164a0:	188019a0 	cmpeqi	r2,r3,102
   164a4:	1000011e 	bne	r2,zero,164ac <lcd_handle_escape+0x1b4>
   164a8:	00004206 	br	165b4 <lcd_handle_escape+0x2bc>
   164ac:	e0bffb17 	ldw	r2,-20(fp)
   164b0:	10800050 	cmplti	r2,r2,1
   164b4:	1000051e 	bne	r2,zero,164cc <lcd_handle_escape+0x1d4>
   164b8:	e0bffb17 	ldw	r2,-20(fp)
   164bc:	10bfffc4 	addi	r2,r2,-1
   164c0:	1007883a 	mov	r3,r2
   164c4:	e0bffd17 	ldw	r2,-12(fp)
   164c8:	10c00845 	stb	r3,33(r2)
   164cc:	e0bffc17 	ldw	r2,-16(fp)
   164d0:	10800050 	cmplti	r2,r2,1
   164d4:	1000371e 	bne	r2,zero,165b4 <lcd_handle_escape+0x2bc>
   164d8:	e0bffc17 	ldw	r2,-16(fp)
   164dc:	10bfffc4 	addi	r2,r2,-1
   164e0:	1007883a 	mov	r3,r2
   164e4:	e0bffd17 	ldw	r2,-12(fp)
   164e8:	10c00885 	stb	r3,34(r2)
   164ec:	e0bffd17 	ldw	r2,-12(fp)
   164f0:	10800883 	ldbu	r2,34(r2)
   164f4:	10803fcc 	andi	r2,r2,255
   164f8:	10800170 	cmpltui	r2,r2,5
   164fc:	1000061e 	bne	r2,zero,16518 <lcd_handle_escape+0x220>
   16500:	e0fffd17 	ldw	r3,-12(fp)
   16504:	00800104 	movi	r2,4
   16508:	18800885 	stb	r2,34(r3)
   1650c:	00000206 	br	16518 <lcd_handle_escape+0x220>
   16510:	e13ffd17 	ldw	r4,-12(fp)
   16514:	00162300 	call	16230 <lcd_scroll_up>
   16518:	e0bffd17 	ldw	r2,-12(fp)
   1651c:	10800883 	ldbu	r2,34(r2)
   16520:	10803fcc 	andi	r2,r2,255
   16524:	108000e8 	cmpgeui	r2,r2,3
   16528:	103ff91e 	bne	r2,zero,16510 <lcd_handle_escape+0x218>
   1652c:	00002106 	br	165b4 <lcd_handle_escape+0x2bc>
   16530:	e0bffc17 	ldw	r2,-16(fp)
   16534:	10800098 	cmpnei	r2,r2,2
   16538:	10001e1e 	bne	r2,zero,165b4 <lcd_handle_escape+0x2bc>
   1653c:	e13ffd17 	ldw	r4,-12(fp)
   16540:	0015f800 	call	15f80 <lcd_clear_screen>
   16544:	00001b06 	br	165b4 <lcd_handle_escape+0x2bc>
   16548:	e0bffc17 	ldw	r2,-16(fp)
   1654c:	10800048 	cmpgei	r2,r2,1
   16550:	1000181e 	bne	r2,zero,165b4 <lcd_handle_escape+0x2bc>
   16554:	e0bffd17 	ldw	r2,-12(fp)
   16558:	10800843 	ldbu	r2,33(r2)
   1655c:	10803fcc 	andi	r2,r2,255
   16560:	10801428 	cmpgeui	r2,r2,80
   16564:	1000131e 	bne	r2,zero,165b4 <lcd_handle_escape+0x2bc>
   16568:	e0bffd17 	ldw	r2,-12(fp)
   1656c:	10800883 	ldbu	r2,34(r2)
   16570:	10803fcc 	andi	r2,r2,255
   16574:	10801924 	muli	r2,r2,100
   16578:	10c01004 	addi	r3,r2,64
   1657c:	e0bffd17 	ldw	r2,-12(fp)
   16580:	1887883a 	add	r3,r3,r2
   16584:	e0bffd17 	ldw	r2,-12(fp)
   16588:	10800843 	ldbu	r2,33(r2)
   1658c:	10803fcc 	andi	r2,r2,255
   16590:	1889883a 	add	r4,r3,r2
   16594:	e0bffd17 	ldw	r2,-12(fp)
   16598:	10800843 	ldbu	r2,33(r2)
   1659c:	10c03fcc 	andi	r3,r2,255
   165a0:	00801404 	movi	r2,80
   165a4:	10c5c83a 	sub	r2,r2,r3
   165a8:	100d883a 	mov	r6,r2
   165ac:	01400804 	movi	r5,32
   165b0:	00078280 	call	7828 <memset>
   165b4:	e037883a 	mov	sp,fp
   165b8:	dfc00117 	ldw	ra,4(sp)
   165bc:	df000017 	ldw	fp,0(sp)
   165c0:	dec00204 	addi	sp,sp,8
   165c4:	f800283a 	ret

000165c8 <altera_avalon_lcd_16207_write>:
   165c8:	defff304 	addi	sp,sp,-52
   165cc:	dfc00c15 	stw	ra,48(sp)
   165d0:	df000b15 	stw	fp,44(sp)
   165d4:	df000b04 	addi	fp,sp,44
   165d8:	e13ffc15 	stw	r4,-16(fp)
   165dc:	e17ffd15 	stw	r5,-12(fp)
   165e0:	e1bffe15 	stw	r6,-8(fp)
   165e4:	e1ffff15 	stw	r7,-4(fp)
   165e8:	e0bffe17 	ldw	r2,-8(fp)
   165ec:	1007883a 	mov	r3,r2
   165f0:	e0bffd17 	ldw	r2,-12(fp)
   165f4:	10c5883a 	add	r2,r2,r3
   165f8:	e0bffb15 	stw	r2,-20(fp)
   165fc:	e0fffc17 	ldw	r3,-16(fp)
   16600:	00800044 	movi	r2,1
   16604:	188009c5 	stb	r2,39(r3)
   16608:	0000a206 	br	16894 <altera_avalon_lcd_16207_write+0x2cc>
   1660c:	e0bffd17 	ldw	r2,-12(fp)
   16610:	10800003 	ldbu	r2,0(r2)
   16614:	e0bff805 	stb	r2,-32(fp)
   16618:	e0bffc17 	ldw	r2,-16(fp)
   1661c:	10800903 	ldbu	r2,36(r2)
   16620:	10803fcc 	andi	r2,r2,255
   16624:	1080201c 	xori	r2,r2,128
   16628:	10bfe004 	addi	r2,r2,-128
   1662c:	1004803a 	cmplt	r2,r2,zero
   16630:	10003b1e 	bne	r2,zero,16720 <altera_avalon_lcd_16207_write+0x158>
   16634:	e0bffc17 	ldw	r2,-16(fp)
   16638:	10800903 	ldbu	r2,36(r2)
   1663c:	10803fcc 	andi	r2,r2,255
   16640:	1080201c 	xori	r2,r2,128
   16644:	10bfe004 	addi	r2,r2,-128
   16648:	e0bff715 	stw	r2,-36(fp)
   1664c:	e0bff717 	ldw	r2,-36(fp)
   16650:	1004c03a 	cmpne	r2,r2,zero
   16654:	1000031e 	bne	r2,zero,16664 <altera_avalon_lcd_16207_write+0x9c>
   16658:	e0bff807 	ldb	r2,-32(fp)
   1665c:	108016d8 	cmpnei	r2,r2,91
   16660:	1000111e 	bne	r2,zero,166a8 <altera_avalon_lcd_16207_write+0xe0>
   16664:	e0bff717 	ldw	r2,-36(fp)
   16668:	1005003a 	cmpeq	r2,r2,zero
   1666c:	10001a1e 	bne	r2,zero,166d8 <altera_avalon_lcd_16207_write+0x110>
   16670:	e0bff807 	ldb	r2,-32(fp)
   16674:	1007883a 	mov	r3,r2
   16678:	00820034 	movhi	r2,2048
   1667c:	108a1b04 	addi	r2,r2,10348
   16680:	10800017 	ldw	r2,0(r2)
   16684:	1885883a 	add	r2,r3,r2
   16688:	10800003 	ldbu	r2,0(r2)
   1668c:	10803fcc 	andi	r2,r2,255
   16690:	1080010c 	andi	r2,r2,4
   16694:	1004c03a 	cmpne	r2,r2,zero
   16698:	10000f1e 	bne	r2,zero,166d8 <altera_avalon_lcd_16207_write+0x110>
   1669c:	e0bff807 	ldb	r2,-32(fp)
   166a0:	10800ee0 	cmpeqi	r2,r2,59
   166a4:	10000c1e 	bne	r2,zero,166d8 <altera_avalon_lcd_16207_write+0x110>
   166a8:	e0fff717 	ldw	r3,-36(fp)
   166ac:	e0bffc17 	ldw	r2,-16(fp)
   166b0:	1885883a 	add	r2,r3,r2
   166b4:	10800a04 	addi	r2,r2,40
   166b8:	10000005 	stb	zero,0(r2)
   166bc:	e17ff807 	ldb	r5,-32(fp)
   166c0:	e13ffc17 	ldw	r4,-16(fp)
   166c4:	00162f80 	call	162f8 <lcd_handle_escape>
   166c8:	e0fffc17 	ldw	r3,-16(fp)
   166cc:	00bfffc4 	movi	r2,-1
   166d0:	18800905 	stb	r2,36(r3)
   166d4:	00006c06 	br	16888 <altera_avalon_lcd_16207_write+0x2c0>
   166d8:	e0bffc17 	ldw	r2,-16(fp)
   166dc:	10800903 	ldbu	r2,36(r2)
   166e0:	10803fcc 	andi	r2,r2,255
   166e4:	108001e8 	cmpgeui	r2,r2,7
   166e8:	1000671e 	bne	r2,zero,16888 <altera_avalon_lcd_16207_write+0x2c0>
   166ec:	e0fff717 	ldw	r3,-36(fp)
   166f0:	e0bffc17 	ldw	r2,-16(fp)
   166f4:	1885883a 	add	r2,r3,r2
   166f8:	10c00a04 	addi	r3,r2,40
   166fc:	e0bff803 	ldbu	r2,-32(fp)
   16700:	18800005 	stb	r2,0(r3)
   16704:	e0bffc17 	ldw	r2,-16(fp)
   16708:	10800903 	ldbu	r2,36(r2)
   1670c:	10800044 	addi	r2,r2,1
   16710:	1007883a 	mov	r3,r2
   16714:	e0bffc17 	ldw	r2,-16(fp)
   16718:	10c00905 	stb	r3,36(r2)
   1671c:	00005a06 	br	16888 <altera_avalon_lcd_16207_write+0x2c0>
   16720:	e0bff807 	ldb	r2,-32(fp)
   16724:	108006d8 	cmpnei	r2,r2,27
   16728:	1000031e 	bne	r2,zero,16738 <altera_avalon_lcd_16207_write+0x170>
   1672c:	e0bffc17 	ldw	r2,-16(fp)
   16730:	10000905 	stb	zero,36(r2)
   16734:	00005406 	br	16888 <altera_avalon_lcd_16207_write+0x2c0>
   16738:	e0bff807 	ldb	r2,-32(fp)
   1673c:	10800358 	cmpnei	r2,r2,13
   16740:	1000031e 	bne	r2,zero,16750 <altera_avalon_lcd_16207_write+0x188>
   16744:	e0bffc17 	ldw	r2,-16(fp)
   16748:	10000845 	stb	zero,33(r2)
   1674c:	00004e06 	br	16888 <altera_avalon_lcd_16207_write+0x2c0>
   16750:	e0bff807 	ldb	r2,-32(fp)
   16754:	10800298 	cmpnei	r2,r2,10
   16758:	1000101e 	bne	r2,zero,1679c <altera_avalon_lcd_16207_write+0x1d4>
   1675c:	e0bffc17 	ldw	r2,-16(fp)
   16760:	10000845 	stb	zero,33(r2)
   16764:	e0bffc17 	ldw	r2,-16(fp)
   16768:	10800883 	ldbu	r2,34(r2)
   1676c:	10800044 	addi	r2,r2,1
   16770:	1007883a 	mov	r3,r2
   16774:	e0bffc17 	ldw	r2,-16(fp)
   16778:	10c00885 	stb	r3,34(r2)
   1677c:	e0bffc17 	ldw	r2,-16(fp)
   16780:	10800883 	ldbu	r2,34(r2)
   16784:	10803fcc 	andi	r2,r2,255
   16788:	108000f0 	cmpltui	r2,r2,3
   1678c:	10003e1e 	bne	r2,zero,16888 <altera_avalon_lcd_16207_write+0x2c0>
   16790:	e13ffc17 	ldw	r4,-16(fp)
   16794:	00162300 	call	16230 <lcd_scroll_up>
   16798:	00003b06 	br	16888 <altera_avalon_lcd_16207_write+0x2c0>
   1679c:	e0bff807 	ldb	r2,-32(fp)
   167a0:	10800218 	cmpnei	r2,r2,8
   167a4:	10000c1e 	bne	r2,zero,167d8 <altera_avalon_lcd_16207_write+0x210>
   167a8:	e0bffc17 	ldw	r2,-16(fp)
   167ac:	10800843 	ldbu	r2,33(r2)
   167b0:	10803fcc 	andi	r2,r2,255
   167b4:	1005003a 	cmpeq	r2,r2,zero
   167b8:	1000331e 	bne	r2,zero,16888 <altera_avalon_lcd_16207_write+0x2c0>
   167bc:	e0bffc17 	ldw	r2,-16(fp)
   167c0:	10800843 	ldbu	r2,33(r2)
   167c4:	10bfffc4 	addi	r2,r2,-1
   167c8:	1007883a 	mov	r3,r2
   167cc:	e0bffc17 	ldw	r2,-16(fp)
   167d0:	10c00845 	stb	r3,33(r2)
   167d4:	00002c06 	br	16888 <altera_avalon_lcd_16207_write+0x2c0>
   167d8:	e0bff807 	ldb	r2,-32(fp)
   167dc:	1007883a 	mov	r3,r2
   167e0:	00820034 	movhi	r2,2048
   167e4:	108a1b04 	addi	r2,r2,10348
   167e8:	10800017 	ldw	r2,0(r2)
   167ec:	1885883a 	add	r2,r3,r2
   167f0:	10800003 	ldbu	r2,0(r2)
   167f4:	10803fcc 	andi	r2,r2,255
   167f8:	1080201c 	xori	r2,r2,128
   167fc:	10bfe004 	addi	r2,r2,-128
   16800:	108025cc 	andi	r2,r2,151
   16804:	1005003a 	cmpeq	r2,r2,zero
   16808:	10001f1e 	bne	r2,zero,16888 <altera_avalon_lcd_16207_write+0x2c0>
   1680c:	e0bffc17 	ldw	r2,-16(fp)
   16810:	10800883 	ldbu	r2,34(r2)
   16814:	10803fcc 	andi	r2,r2,255
   16818:	108000b0 	cmpltui	r2,r2,2
   1681c:	1000021e 	bne	r2,zero,16828 <altera_avalon_lcd_16207_write+0x260>
   16820:	e13ffc17 	ldw	r4,-16(fp)
   16824:	00162300 	call	16230 <lcd_scroll_up>
   16828:	e0bffc17 	ldw	r2,-16(fp)
   1682c:	10800843 	ldbu	r2,33(r2)
   16830:	10803fcc 	andi	r2,r2,255
   16834:	10801428 	cmpgeui	r2,r2,80
   16838:	10000d1e 	bne	r2,zero,16870 <altera_avalon_lcd_16207_write+0x2a8>
   1683c:	e0bffc17 	ldw	r2,-16(fp)
   16840:	10800883 	ldbu	r2,34(r2)
   16844:	11003fcc 	andi	r4,r2,255
   16848:	e0bffc17 	ldw	r2,-16(fp)
   1684c:	10800843 	ldbu	r2,33(r2)
   16850:	11403fcc 	andi	r5,r2,255
   16854:	e0fffc17 	ldw	r3,-16(fp)
   16858:	20801924 	muli	r2,r4,100
   1685c:	10c5883a 	add	r2,r2,r3
   16860:	1145883a 	add	r2,r2,r5
   16864:	10c01004 	addi	r3,r2,64
   16868:	e0bff803 	ldbu	r2,-32(fp)
   1686c:	18800005 	stb	r2,0(r3)
   16870:	e0bffc17 	ldw	r2,-16(fp)
   16874:	10800843 	ldbu	r2,33(r2)
   16878:	10800044 	addi	r2,r2,1
   1687c:	1007883a 	mov	r3,r2
   16880:	e0bffc17 	ldw	r2,-16(fp)
   16884:	10c00845 	stb	r3,33(r2)
   16888:	e0bffd17 	ldw	r2,-12(fp)
   1688c:	10800044 	addi	r2,r2,1
   16890:	e0bffd15 	stw	r2,-12(fp)
   16894:	e0fffd17 	ldw	r3,-12(fp)
   16898:	e0bffb17 	ldw	r2,-20(fp)
   1689c:	18bf5b36 	bltu	r3,r2,1660c <altera_avalon_lcd_16207_write+0x44>
   168a0:	00800404 	movi	r2,16
   168a4:	e0bff915 	stw	r2,-28(fp)
   168a8:	e03ffa15 	stw	zero,-24(fp)
   168ac:	00003606 	br	16988 <altera_avalon_lcd_16207_write+0x3c0>
   168b0:	00801404 	movi	r2,80
   168b4:	e0bff615 	stw	r2,-40(fp)
   168b8:	00001106 	br	16900 <altera_avalon_lcd_16207_write+0x338>
   168bc:	e13ffa17 	ldw	r4,-24(fp)
   168c0:	e0bff617 	ldw	r2,-40(fp)
   168c4:	117fffc4 	addi	r5,r2,-1
   168c8:	e0fffc17 	ldw	r3,-16(fp)
   168cc:	20801924 	muli	r2,r4,100
   168d0:	10c5883a 	add	r2,r2,r3
   168d4:	1145883a 	add	r2,r2,r5
   168d8:	10801004 	addi	r2,r2,64
   168dc:	10800003 	ldbu	r2,0(r2)
   168e0:	10803fcc 	andi	r2,r2,255
   168e4:	1080201c 	xori	r2,r2,128
   168e8:	10bfe004 	addi	r2,r2,-128
   168ec:	10800818 	cmpnei	r2,r2,32
   168f0:	1000061e 	bne	r2,zero,1690c <altera_avalon_lcd_16207_write+0x344>
   168f4:	e0bff617 	ldw	r2,-40(fp)
   168f8:	10bfffc4 	addi	r2,r2,-1
   168fc:	e0bff615 	stw	r2,-40(fp)
   16900:	e0bff617 	ldw	r2,-40(fp)
   16904:	10800048 	cmpgei	r2,r2,1
   16908:	103fec1e 	bne	r2,zero,168bc <altera_avalon_lcd_16207_write+0x2f4>
   1690c:	e0bff617 	ldw	r2,-40(fp)
   16910:	10800448 	cmpgei	r2,r2,17
   16914:	1000031e 	bne	r2,zero,16924 <altera_avalon_lcd_16207_write+0x35c>
   16918:	00800404 	movi	r2,16
   1691c:	e0bff615 	stw	r2,-40(fp)
   16920:	00000306 	br	16930 <altera_avalon_lcd_16207_write+0x368>
   16924:	e0bff617 	ldw	r2,-40(fp)
   16928:	10800044 	addi	r2,r2,1
   1692c:	e0bff615 	stw	r2,-40(fp)
   16930:	e13ffa17 	ldw	r4,-24(fp)
   16934:	e0bff617 	ldw	r2,-40(fp)
   16938:	100b883a 	mov	r5,r2
   1693c:	e0fffc17 	ldw	r3,-16(fp)
   16940:	20801924 	muli	r2,r4,100
   16944:	10c5883a 	add	r2,r2,r3
   16948:	10802404 	addi	r2,r2,144
   1694c:	11400045 	stb	r5,1(r2)
   16950:	e0fff917 	ldw	r3,-28(fp)
   16954:	e0bff617 	ldw	r2,-40(fp)
   16958:	1880020e 	bge	r3,r2,16964 <altera_avalon_lcd_16207_write+0x39c>
   1695c:	e0bff617 	ldw	r2,-40(fp)
   16960:	e0bff915 	stw	r2,-28(fp)
   16964:	e0bffa17 	ldw	r2,-24(fp)
   16968:	e0fffc17 	ldw	r3,-16(fp)
   1696c:	10801924 	muli	r2,r2,100
   16970:	10c5883a 	add	r2,r2,r3
   16974:	10802404 	addi	r2,r2,144
   16978:	10000085 	stb	zero,2(r2)
   1697c:	e0bffa17 	ldw	r2,-24(fp)
   16980:	10800044 	addi	r2,r2,1
   16984:	e0bffa15 	stw	r2,-24(fp)
   16988:	e0bffa17 	ldw	r2,-24(fp)
   1698c:	10800090 	cmplti	r2,r2,2
   16990:	103fc71e 	bne	r2,zero,168b0 <altera_avalon_lcd_16207_write+0x2e8>
   16994:	e0bff917 	ldw	r2,-28(fp)
   16998:	10800448 	cmpgei	r2,r2,17
   1699c:	1000031e 	bne	r2,zero,169ac <altera_avalon_lcd_16207_write+0x3e4>
   169a0:	e0bffc17 	ldw	r2,-16(fp)
   169a4:	10000985 	stb	zero,38(r2)
   169a8:	00002d06 	br	16a60 <altera_avalon_lcd_16207_write+0x498>
   169ac:	e0bff917 	ldw	r2,-28(fp)
   169b0:	1085883a 	add	r2,r2,r2
   169b4:	e0bff915 	stw	r2,-28(fp)
   169b8:	e0bff917 	ldw	r2,-28(fp)
   169bc:	1007883a 	mov	r3,r2
   169c0:	e0bffc17 	ldw	r2,-16(fp)
   169c4:	10c00985 	stb	r3,38(r2)
   169c8:	e03ffa15 	stw	zero,-24(fp)
   169cc:	00002106 	br	16a54 <altera_avalon_lcd_16207_write+0x48c>
   169d0:	e0bffa17 	ldw	r2,-24(fp)
   169d4:	e0fffc17 	ldw	r3,-16(fp)
   169d8:	10801924 	muli	r2,r2,100
   169dc:	10c5883a 	add	r2,r2,r3
   169e0:	10802404 	addi	r2,r2,144
   169e4:	10800043 	ldbu	r2,1(r2)
   169e8:	10803fcc 	andi	r2,r2,255
   169ec:	1080201c 	xori	r2,r2,128
   169f0:	10bfe004 	addi	r2,r2,-128
   169f4:	10800450 	cmplti	r2,r2,17
   169f8:	1000131e 	bne	r2,zero,16a48 <altera_avalon_lcd_16207_write+0x480>
   169fc:	e17ffa17 	ldw	r5,-24(fp)
   16a00:	e0bffa17 	ldw	r2,-24(fp)
   16a04:	e0fffc17 	ldw	r3,-16(fp)
   16a08:	10801924 	muli	r2,r2,100
   16a0c:	10c5883a 	add	r2,r2,r3
   16a10:	10802404 	addi	r2,r2,144
   16a14:	10800043 	ldbu	r2,1(r2)
   16a18:	10803fcc 	andi	r2,r2,255
   16a1c:	1080201c 	xori	r2,r2,128
   16a20:	10bfe004 	addi	r2,r2,-128
   16a24:	1006923a 	slli	r3,r2,8
   16a28:	e0bff917 	ldw	r2,-28(fp)
   16a2c:	1885283a 	div	r2,r3,r2
   16a30:	1009883a 	mov	r4,r2
   16a34:	e0fffc17 	ldw	r3,-16(fp)
   16a38:	28801924 	muli	r2,r5,100
   16a3c:	10c5883a 	add	r2,r2,r3
   16a40:	10802404 	addi	r2,r2,144
   16a44:	11000085 	stb	r4,2(r2)
   16a48:	e0bffa17 	ldw	r2,-24(fp)
   16a4c:	10800044 	addi	r2,r2,1
   16a50:	e0bffa15 	stw	r2,-24(fp)
   16a54:	e0bffa17 	ldw	r2,-24(fp)
   16a58:	10800090 	cmplti	r2,r2,2
   16a5c:	103fdc1e 	bne	r2,zero,169d0 <altera_avalon_lcd_16207_write+0x408>
   16a60:	e0bffc17 	ldw	r2,-16(fp)
   16a64:	10800943 	ldbu	r2,37(r2)
   16a68:	10803fcc 	andi	r2,r2,255
   16a6c:	1080201c 	xori	r2,r2,128
   16a70:	10bfe004 	addi	r2,r2,-128
   16a74:	e0bff515 	stw	r2,-44(fp)
   16a78:	e13ffc17 	ldw	r4,-16(fp)
   16a7c:	00160440 	call	16044 <lcd_repaint_screen>
   16a80:	e0bffc17 	ldw	r2,-16(fp)
   16a84:	100009c5 	stb	zero,39(r2)
   16a88:	e0bffc17 	ldw	r2,-16(fp)
   16a8c:	10800943 	ldbu	r2,37(r2)
   16a90:	10c03fcc 	andi	r3,r2,255
   16a94:	18c0201c 	xori	r3,r3,128
   16a98:	18ffe004 	addi	r3,r3,-128
   16a9c:	e0bff517 	ldw	r2,-44(fp)
   16aa0:	18800426 	beq	r3,r2,16ab4 <altera_avalon_lcd_16207_write+0x4ec>
   16aa4:	e0fffc17 	ldw	r3,-16(fp)
   16aa8:	00800044 	movi	r2,1
   16aac:	188009c5 	stb	r2,39(r3)
   16ab0:	003feb06 	br	16a60 <altera_avalon_lcd_16207_write+0x498>
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	e037883a 	mov	sp,fp
   16abc:	dfc00117 	ldw	ra,4(sp)
   16ac0:	df000017 	ldw	fp,0(sp)
   16ac4:	dec00204 	addi	sp,sp,8
   16ac8:	f800283a 	ret

00016acc <alt_lcd_16207_timeout>:
   16acc:	defffc04 	addi	sp,sp,-16
   16ad0:	dfc00315 	stw	ra,12(sp)
   16ad4:	df000215 	stw	fp,8(sp)
   16ad8:	df000204 	addi	fp,sp,8
   16adc:	e13fff15 	stw	r4,-4(fp)
   16ae0:	e0bfff17 	ldw	r2,-4(fp)
   16ae4:	e0bffe15 	stw	r2,-8(fp)
   16ae8:	e0bffe17 	ldw	r2,-8(fp)
   16aec:	10800943 	ldbu	r2,37(r2)
   16af0:	10803fcc 	andi	r2,r2,255
   16af4:	1080201c 	xori	r2,r2,128
   16af8:	10bfe004 	addi	r2,r2,-128
   16afc:	10c00044 	addi	r3,r2,1
   16b00:	e0bffe17 	ldw	r2,-8(fp)
   16b04:	10800983 	ldbu	r2,38(r2)
   16b08:	10803fcc 	andi	r2,r2,255
   16b0c:	1080201c 	xori	r2,r2,128
   16b10:	10bfe004 	addi	r2,r2,-128
   16b14:	18800316 	blt	r3,r2,16b24 <alt_lcd_16207_timeout+0x58>
   16b18:	e0bffe17 	ldw	r2,-8(fp)
   16b1c:	10000945 	stb	zero,37(r2)
   16b20:	00000606 	br	16b3c <alt_lcd_16207_timeout+0x70>
   16b24:	e0bffe17 	ldw	r2,-8(fp)
   16b28:	10800943 	ldbu	r2,37(r2)
   16b2c:	10800044 	addi	r2,r2,1
   16b30:	1007883a 	mov	r3,r2
   16b34:	e0bffe17 	ldw	r2,-8(fp)
   16b38:	10c00945 	stb	r3,37(r2)
   16b3c:	e0bffe17 	ldw	r2,-8(fp)
   16b40:	10800983 	ldbu	r2,38(r2)
   16b44:	10803fcc 	andi	r2,r2,255
   16b48:	1080201c 	xori	r2,r2,128
   16b4c:	10bfe004 	addi	r2,r2,-128
   16b50:	10800050 	cmplti	r2,r2,1
   16b54:	1000091e 	bne	r2,zero,16b7c <alt_lcd_16207_timeout+0xb0>
   16b58:	e0bffe17 	ldw	r2,-8(fp)
   16b5c:	108009c3 	ldbu	r2,39(r2)
   16b60:	10803fcc 	andi	r2,r2,255
   16b64:	1080201c 	xori	r2,r2,128
   16b68:	10bfe004 	addi	r2,r2,-128
   16b6c:	1004c03a 	cmpne	r2,r2,zero
   16b70:	1000021e 	bne	r2,zero,16b7c <alt_lcd_16207_timeout+0xb0>
   16b74:	e13ffe17 	ldw	r4,-8(fp)
   16b78:	00160440 	call	16044 <lcd_repaint_screen>
   16b7c:	e0bffe17 	ldw	r2,-8(fp)
   16b80:	10800717 	ldw	r2,28(r2)
   16b84:	e037883a 	mov	sp,fp
   16b88:	dfc00117 	ldw	ra,4(sp)
   16b8c:	df000017 	ldw	fp,0(sp)
   16b90:	dec00204 	addi	sp,sp,8
   16b94:	f800283a 	ret

00016b98 <altera_avalon_lcd_16207_init>:
   16b98:	defffc04 	addi	sp,sp,-16
   16b9c:	dfc00315 	stw	ra,12(sp)
   16ba0:	df000215 	stw	fp,8(sp)
   16ba4:	df000204 	addi	fp,sp,8
   16ba8:	e13fff15 	stw	r4,-4(fp)
   16bac:	e0bfff17 	ldw	r2,-4(fp)
   16bb0:	10800017 	ldw	r2,0(r2)
   16bb4:	e0bffe15 	stw	r2,-8(fp)
   16bb8:	e0bfff17 	ldw	r2,-4(fp)
   16bbc:	10000805 	stb	zero,32(r2)
   16bc0:	010ea604 	movi	r4,15000
   16bc4:	001a1f40 	call	1a1f4 <usleep>
   16bc8:	e0bffe17 	ldw	r2,-8(fp)
   16bcc:	1007883a 	mov	r3,r2
   16bd0:	00800c04 	movi	r2,48
   16bd4:	18800035 	stwio	r2,0(r3)
   16bd8:	01040104 	movi	r4,4100
   16bdc:	001a1f40 	call	1a1f4 <usleep>
   16be0:	e0bffe17 	ldw	r2,-8(fp)
   16be4:	1007883a 	mov	r3,r2
   16be8:	00800c04 	movi	r2,48
   16bec:	18800035 	stwio	r2,0(r3)
   16bf0:	0100fa04 	movi	r4,1000
   16bf4:	001a1f40 	call	1a1f4 <usleep>
   16bf8:	e0bffe17 	ldw	r2,-8(fp)
   16bfc:	1007883a 	mov	r3,r2
   16c00:	00800c04 	movi	r2,48
   16c04:	18800035 	stwio	r2,0(r3)
   16c08:	e13fff17 	ldw	r4,-4(fp)
   16c0c:	01400e04 	movi	r5,56
   16c10:	0015df40 	call	15df4 <lcd_write_command>
   16c14:	e13fff17 	ldw	r4,-4(fp)
   16c18:	01400204 	movi	r5,8
   16c1c:	0015df40 	call	15df4 <lcd_write_command>
   16c20:	e13fff17 	ldw	r4,-4(fp)
   16c24:	0015f800 	call	15f80 <lcd_clear_screen>
   16c28:	e13fff17 	ldw	r4,-4(fp)
   16c2c:	01400184 	movi	r5,6
   16c30:	0015df40 	call	15df4 <lcd_write_command>
   16c34:	e13fff17 	ldw	r4,-4(fp)
   16c38:	01400304 	movi	r5,12
   16c3c:	0015df40 	call	15df4 <lcd_write_command>
   16c40:	e0ffff17 	ldw	r3,-4(fp)
   16c44:	00bfffc4 	movi	r2,-1
   16c48:	18800905 	stb	r2,36(r3)
   16c4c:	e0bfff17 	ldw	r2,-4(fp)
   16c50:	11000a04 	addi	r4,r2,40
   16c54:	000b883a 	mov	r5,zero
   16c58:	01800204 	movi	r6,8
   16c5c:	00078280 	call	7828 <memset>
   16c60:	e0bfff17 	ldw	r2,-4(fp)
   16c64:	10000945 	stb	zero,37(r2)
   16c68:	e0bfff17 	ldw	r2,-4(fp)
   16c6c:	10000985 	stb	zero,38(r2)
   16c70:	e0bfff17 	ldw	r2,-4(fp)
   16c74:	100009c5 	stb	zero,39(r2)
   16c78:	00820034 	movhi	r2,2048
   16c7c:	108a4a04 	addi	r2,r2,10536
   16c80:	10800017 	ldw	r2,0(r2)
   16c84:	1007883a 	mov	r3,r2
   16c88:	00800284 	movi	r2,10
   16c8c:	1885203a 	divu	r2,r3,r2
   16c90:	1007883a 	mov	r3,r2
   16c94:	e0bfff17 	ldw	r2,-4(fp)
   16c98:	10c00715 	stw	r3,28(r2)
   16c9c:	e0bfff17 	ldw	r2,-4(fp)
   16ca0:	11000104 	addi	r4,r2,4
   16ca4:	e0bfff17 	ldw	r2,-4(fp)
   16ca8:	10800717 	ldw	r2,28(r2)
   16cac:	100b883a 	mov	r5,r2
   16cb0:	01800074 	movhi	r6,1
   16cb4:	319ab304 	addi	r6,r6,27340
   16cb8:	e1ffff17 	ldw	r7,-4(fp)
   16cbc:	00197440 	call	19744 <alt_alarm_start>
   16cc0:	e037883a 	mov	sp,fp
   16cc4:	dfc00117 	ldw	ra,4(sp)
   16cc8:	df000017 	ldw	fp,0(sp)
   16ccc:	dec00204 	addi	sp,sp,8
   16cd0:	f800283a 	ret

00016cd4 <altera_avalon_lcd_16207_write_fd>:
   16cd4:	defffa04 	addi	sp,sp,-24
   16cd8:	dfc00515 	stw	ra,20(sp)
   16cdc:	df000415 	stw	fp,16(sp)
   16ce0:	df000404 	addi	fp,sp,16
   16ce4:	e13ffd15 	stw	r4,-12(fp)
   16ce8:	e17ffe15 	stw	r5,-8(fp)
   16cec:	e1bfff15 	stw	r6,-4(fp)
   16cf0:	e0bffd17 	ldw	r2,-12(fp)
   16cf4:	10800017 	ldw	r2,0(r2)
   16cf8:	e0bffc15 	stw	r2,-16(fp)
   16cfc:	e0bffc17 	ldw	r2,-16(fp)
   16d00:	11000a04 	addi	r4,r2,40
   16d04:	e0bffd17 	ldw	r2,-12(fp)
   16d08:	11c00217 	ldw	r7,8(r2)
   16d0c:	e17ffe17 	ldw	r5,-8(fp)
   16d10:	e1bfff17 	ldw	r6,-4(fp)
   16d14:	00165c80 	call	165c8 <altera_avalon_lcd_16207_write>
   16d18:	e037883a 	mov	sp,fp
   16d1c:	dfc00117 	ldw	ra,4(sp)
   16d20:	df000017 	ldw	fp,0(sp)
   16d24:	dec00204 	addi	sp,sp,8
   16d28:	f800283a 	ret

00016d2c <alt_avalon_timer_sc_irq>:
   16d2c:	defff904 	addi	sp,sp,-28
   16d30:	dfc00615 	stw	ra,24(sp)
   16d34:	df000515 	stw	fp,20(sp)
   16d38:	df000504 	addi	fp,sp,20
   16d3c:	e13ffe15 	stw	r4,-8(fp)
   16d40:	e17fff15 	stw	r5,-4(fp)
   16d44:	e0bffe17 	ldw	r2,-8(fp)
   16d48:	10000035 	stwio	zero,0(r2)
   16d4c:	e0bffe17 	ldw	r2,-8(fp)
   16d50:	10800104 	addi	r2,r2,4
   16d54:	10800037 	ldwio	r2,0(r2)
   16d58:	0005303a 	rdctl	r2,status
   16d5c:	e0bffc15 	stw	r2,-16(fp)
   16d60:	e0fffc17 	ldw	r3,-16(fp)
   16d64:	00bfff84 	movi	r2,-2
   16d68:	1884703a 	and	r2,r3,r2
   16d6c:	1001703a 	wrctl	status,r2
   16d70:	e0bffc17 	ldw	r2,-16(fp)
   16d74:	e0bffd15 	stw	r2,-12(fp)
   16d78:	001a0e80 	call	1a0e8 <alt_tick>
   16d7c:	e0bffd17 	ldw	r2,-12(fp)
   16d80:	e0bffb15 	stw	r2,-20(fp)
   16d84:	e0bffb17 	ldw	r2,-20(fp)
   16d88:	1001703a 	wrctl	status,r2
   16d8c:	e037883a 	mov	sp,fp
   16d90:	dfc00117 	ldw	ra,4(sp)
   16d94:	df000017 	ldw	fp,0(sp)
   16d98:	dec00204 	addi	sp,sp,8
   16d9c:	f800283a 	ret

00016da0 <alt_avalon_timer_sc_init>:
   16da0:	defff904 	addi	sp,sp,-28
   16da4:	dfc00615 	stw	ra,24(sp)
   16da8:	df000515 	stw	fp,20(sp)
   16dac:	df000504 	addi	fp,sp,20
   16db0:	e13ffc15 	stw	r4,-16(fp)
   16db4:	e17ffd15 	stw	r5,-12(fp)
   16db8:	e1bffe15 	stw	r6,-8(fp)
   16dbc:	e1ffff15 	stw	r7,-4(fp)
   16dc0:	e0bfff17 	ldw	r2,-4(fp)
   16dc4:	e0bffb15 	stw	r2,-20(fp)
   16dc8:	00820034 	movhi	r2,2048
   16dcc:	108a4a04 	addi	r2,r2,10536
   16dd0:	10800017 	ldw	r2,0(r2)
   16dd4:	1004c03a 	cmpne	r2,r2,zero
   16dd8:	1000041e 	bne	r2,zero,16dec <alt_avalon_timer_sc_init+0x4c>
   16ddc:	00c20034 	movhi	r3,2048
   16de0:	18ca4a04 	addi	r3,r3,10536
   16de4:	e0bffb17 	ldw	r2,-20(fp)
   16de8:	18800015 	stw	r2,0(r3)
   16dec:	e0bffc17 	ldw	r2,-16(fp)
   16df0:	10800104 	addi	r2,r2,4
   16df4:	1007883a 	mov	r3,r2
   16df8:	008001c4 	movi	r2,7
   16dfc:	18800035 	stwio	r2,0(r3)
   16e00:	e13ffe17 	ldw	r4,-8(fp)
   16e04:	e17ffc17 	ldw	r5,-16(fp)
   16e08:	01800074 	movhi	r6,1
   16e0c:	319b4b04 	addi	r6,r6,27948
   16e10:	00019140 	call	1914 <alt_irq_register>
   16e14:	e037883a 	mov	sp,fp
   16e18:	dfc00117 	ldw	ra,4(sp)
   16e1c:	df000017 	ldw	fp,0(sp)
   16e20:	dec00204 	addi	sp,sp,8
   16e24:	f800283a 	ret

00016e28 <altera_avalon_uart_read_fd>:
   16e28:	defffa04 	addi	sp,sp,-24
   16e2c:	dfc00515 	stw	ra,20(sp)
   16e30:	df000415 	stw	fp,16(sp)
   16e34:	df000404 	addi	fp,sp,16
   16e38:	e13ffd15 	stw	r4,-12(fp)
   16e3c:	e17ffe15 	stw	r5,-8(fp)
   16e40:	e1bfff15 	stw	r6,-4(fp)
   16e44:	e0bffd17 	ldw	r2,-12(fp)
   16e48:	10800017 	ldw	r2,0(r2)
   16e4c:	e0bffc15 	stw	r2,-16(fp)
   16e50:	e0bffc17 	ldw	r2,-16(fp)
   16e54:	11000a04 	addi	r4,r2,40
   16e58:	e0bffd17 	ldw	r2,-12(fp)
   16e5c:	11c00217 	ldw	r7,8(r2)
   16e60:	e17ffe17 	ldw	r5,-8(fp)
   16e64:	e1bfff17 	ldw	r6,-4(fp)
   16e68:	001731c0 	call	1731c <altera_avalon_uart_read>
   16e6c:	e037883a 	mov	sp,fp
   16e70:	dfc00117 	ldw	ra,4(sp)
   16e74:	df000017 	ldw	fp,0(sp)
   16e78:	dec00204 	addi	sp,sp,8
   16e7c:	f800283a 	ret

00016e80 <altera_avalon_uart_write_fd>:
   16e80:	defffa04 	addi	sp,sp,-24
   16e84:	dfc00515 	stw	ra,20(sp)
   16e88:	df000415 	stw	fp,16(sp)
   16e8c:	df000404 	addi	fp,sp,16
   16e90:	e13ffd15 	stw	r4,-12(fp)
   16e94:	e17ffe15 	stw	r5,-8(fp)
   16e98:	e1bfff15 	stw	r6,-4(fp)
   16e9c:	e0bffd17 	ldw	r2,-12(fp)
   16ea0:	10800017 	ldw	r2,0(r2)
   16ea4:	e0bffc15 	stw	r2,-16(fp)
   16ea8:	e0bffc17 	ldw	r2,-16(fp)
   16eac:	11000a04 	addi	r4,r2,40
   16eb0:	e0bffd17 	ldw	r2,-12(fp)
   16eb4:	11c00217 	ldw	r7,8(r2)
   16eb8:	e17ffe17 	ldw	r5,-8(fp)
   16ebc:	e1bfff17 	ldw	r6,-4(fp)
   16ec0:	00175ac0 	call	175ac <altera_avalon_uart_write>
   16ec4:	e037883a 	mov	sp,fp
   16ec8:	dfc00117 	ldw	ra,4(sp)
   16ecc:	df000017 	ldw	fp,0(sp)
   16ed0:	dec00204 	addi	sp,sp,8
   16ed4:	f800283a 	ret

00016ed8 <altera_avalon_uart_close_fd>:
   16ed8:	defffc04 	addi	sp,sp,-16
   16edc:	dfc00315 	stw	ra,12(sp)
   16ee0:	df000215 	stw	fp,8(sp)
   16ee4:	df000204 	addi	fp,sp,8
   16ee8:	e13fff15 	stw	r4,-4(fp)
   16eec:	e0bfff17 	ldw	r2,-4(fp)
   16ef0:	10800017 	ldw	r2,0(r2)
   16ef4:	e0bffe15 	stw	r2,-8(fp)
   16ef8:	e0bffe17 	ldw	r2,-8(fp)
   16efc:	11000a04 	addi	r4,r2,40
   16f00:	e0bfff17 	ldw	r2,-4(fp)
   16f04:	11400217 	ldw	r5,8(r2)
   16f08:	00172bc0 	call	172bc <altera_avalon_uart_close>
   16f0c:	e037883a 	mov	sp,fp
   16f10:	dfc00117 	ldw	ra,4(sp)
   16f14:	df000017 	ldw	fp,0(sp)
   16f18:	dec00204 	addi	sp,sp,8
   16f1c:	f800283a 	ret

00016f20 <altera_avalon_uart_init>:
   16f20:	defff804 	addi	sp,sp,-32
   16f24:	dfc00715 	stw	ra,28(sp)
   16f28:	df000615 	stw	fp,24(sp)
   16f2c:	df000604 	addi	fp,sp,24
   16f30:	e13ffc15 	stw	r4,-16(fp)
   16f34:	e17ffd15 	stw	r5,-12(fp)
   16f38:	e1bffe15 	stw	r6,-8(fp)
   16f3c:	e0bffc17 	ldw	r2,-16(fp)
   16f40:	10800017 	ldw	r2,0(r2)
   16f44:	e0bffb15 	stw	r2,-20(fp)
   16f48:	0005883a 	mov	r2,zero
   16f4c:	1004c03a 	cmpne	r2,r2,zero
   16f50:	1000061e 	bne	r2,zero,16f6c <altera_avalon_uart_init+0x4c>
   16f54:	0005883a 	mov	r2,zero
   16f58:	1004c03a 	cmpne	r2,r2,zero
   16f5c:	1000031e 	bne	r2,zero,16f6c <altera_avalon_uart_init+0x4c>
   16f60:	0005883a 	mov	r2,zero
   16f64:	1005003a 	cmpeq	r2,r2,zero
   16f68:	1000031e 	bne	r2,zero,16f78 <altera_avalon_uart_init+0x58>
   16f6c:	00800044 	movi	r2,1
   16f70:	e0bfff15 	stw	r2,-4(fp)
   16f74:	00000106 	br	16f7c <altera_avalon_uart_init+0x5c>
   16f78:	e03fff15 	stw	zero,-4(fp)
   16f7c:	e0bfff17 	ldw	r2,-4(fp)
   16f80:	e0bffa15 	stw	r2,-24(fp)
   16f84:	e0bffa17 	ldw	r2,-24(fp)
   16f88:	1004c03a 	cmpne	r2,r2,zero
   16f8c:	10000f1e 	bne	r2,zero,16fcc <altera_avalon_uart_init+0xac>
   16f90:	e0fffc17 	ldw	r3,-16(fp)
   16f94:	00832004 	movi	r2,3200
   16f98:	18800115 	stw	r2,4(r3)
   16f9c:	e0bffb17 	ldw	r2,-20(fp)
   16fa0:	11000304 	addi	r4,r2,12
   16fa4:	e0bffc17 	ldw	r2,-16(fp)
   16fa8:	10800117 	ldw	r2,4(r2)
   16fac:	1007883a 	mov	r3,r2
   16fb0:	2005883a 	mov	r2,r4
   16fb4:	10c00035 	stwio	r3,0(r2)
   16fb8:	e13ffe17 	ldw	r4,-8(fp)
   16fbc:	e17ffc17 	ldw	r5,-16(fp)
   16fc0:	01800074 	movhi	r6,1
   16fc4:	319bf804 	addi	r6,r6,28640
   16fc8:	00019140 	call	1914 <alt_irq_register>
   16fcc:	e037883a 	mov	sp,fp
   16fd0:	dfc00117 	ldw	ra,4(sp)
   16fd4:	df000017 	ldw	fp,0(sp)
   16fd8:	dec00204 	addi	sp,sp,8
   16fdc:	f800283a 	ret

00016fe0 <altera_avalon_uart_irq>:
   16fe0:	defff904 	addi	sp,sp,-28
   16fe4:	dfc00615 	stw	ra,24(sp)
   16fe8:	df000515 	stw	fp,20(sp)
   16fec:	df000504 	addi	fp,sp,20
   16ff0:	e13ffe15 	stw	r4,-8(fp)
   16ff4:	e17fff15 	stw	r5,-4(fp)
   16ff8:	e0bffe17 	ldw	r2,-8(fp)
   16ffc:	e0bffc15 	stw	r2,-16(fp)
   17000:	e0bffc17 	ldw	r2,-16(fp)
   17004:	10800017 	ldw	r2,0(r2)
   17008:	e0bffb15 	stw	r2,-20(fp)
   1700c:	e0bffb17 	ldw	r2,-20(fp)
   17010:	10800204 	addi	r2,r2,8
   17014:	10800037 	ldwio	r2,0(r2)
   17018:	e0bffd15 	stw	r2,-12(fp)
   1701c:	e0bffb17 	ldw	r2,-20(fp)
   17020:	10800204 	addi	r2,r2,8
   17024:	10000035 	stwio	zero,0(r2)
   17028:	e0bffb17 	ldw	r2,-20(fp)
   1702c:	10800204 	addi	r2,r2,8
   17030:	10800037 	ldwio	r2,0(r2)
   17034:	e0bffd17 	ldw	r2,-12(fp)
   17038:	1080200c 	andi	r2,r2,128
   1703c:	1005003a 	cmpeq	r2,r2,zero
   17040:	1000031e 	bne	r2,zero,17050 <altera_avalon_uart_irq+0x70>
   17044:	e13ffc17 	ldw	r4,-16(fp)
   17048:	e17ffd17 	ldw	r5,-12(fp)
   1704c:	00170800 	call	17080 <altera_avalon_uart_rxirq>
   17050:	e0bffd17 	ldw	r2,-12(fp)
   17054:	1081100c 	andi	r2,r2,1088
   17058:	1005003a 	cmpeq	r2,r2,zero
   1705c:	1000031e 	bne	r2,zero,1706c <altera_avalon_uart_irq+0x8c>
   17060:	e13ffc17 	ldw	r4,-16(fp)
   17064:	e17ffd17 	ldw	r5,-12(fp)
   17068:	00171600 	call	17160 <altera_avalon_uart_txirq>
   1706c:	e037883a 	mov	sp,fp
   17070:	dfc00117 	ldw	ra,4(sp)
   17074:	df000017 	ldw	fp,0(sp)
   17078:	dec00204 	addi	sp,sp,8
   1707c:	f800283a 	ret

00017080 <altera_avalon_uart_rxirq>:
   17080:	defffc04 	addi	sp,sp,-16
   17084:	df000315 	stw	fp,12(sp)
   17088:	df000304 	addi	fp,sp,12
   1708c:	e13ffe15 	stw	r4,-8(fp)
   17090:	e17fff15 	stw	r5,-4(fp)
   17094:	e0bfff17 	ldw	r2,-4(fp)
   17098:	108000cc 	andi	r2,r2,3
   1709c:	1004c03a 	cmpne	r2,r2,zero
   170a0:	10002b1e 	bne	r2,zero,17150 <altera_avalon_uart_rxirq+0xd0>
   170a4:	e0bffe17 	ldw	r2,-8(fp)
   170a8:	10800317 	ldw	r2,12(r2)
   170ac:	e0bffe17 	ldw	r2,-8(fp)
   170b0:	10800317 	ldw	r2,12(r2)
   170b4:	10800044 	addi	r2,r2,1
   170b8:	10800fcc 	andi	r2,r2,63
   170bc:	e0bffd15 	stw	r2,-12(fp)
   170c0:	e0bffe17 	ldw	r2,-8(fp)
   170c4:	11000317 	ldw	r4,12(r2)
   170c8:	e0bffe17 	ldw	r2,-8(fp)
   170cc:	10800017 	ldw	r2,0(r2)
   170d0:	10800037 	ldwio	r2,0(r2)
   170d4:	1007883a 	mov	r3,r2
   170d8:	e0bffe17 	ldw	r2,-8(fp)
   170dc:	2085883a 	add	r2,r4,r2
   170e0:	10800704 	addi	r2,r2,28
   170e4:	10c00005 	stb	r3,0(r2)
   170e8:	e0fffe17 	ldw	r3,-8(fp)
   170ec:	e0bffd17 	ldw	r2,-12(fp)
   170f0:	18800315 	stw	r2,12(r3)
   170f4:	e0bffe17 	ldw	r2,-8(fp)
   170f8:	10800317 	ldw	r2,12(r2)
   170fc:	10800044 	addi	r2,r2,1
   17100:	10800fcc 	andi	r2,r2,63
   17104:	e0bffd15 	stw	r2,-12(fp)
   17108:	e0bffe17 	ldw	r2,-8(fp)
   1710c:	10c00217 	ldw	r3,8(r2)
   17110:	e0bffd17 	ldw	r2,-12(fp)
   17114:	18800e1e 	bne	r3,r2,17150 <altera_avalon_uart_rxirq+0xd0>
   17118:	e0bffe17 	ldw	r2,-8(fp)
   1711c:	10c00117 	ldw	r3,4(r2)
   17120:	00bfdfc4 	movi	r2,-129
   17124:	1886703a 	and	r3,r3,r2
   17128:	e0bffe17 	ldw	r2,-8(fp)
   1712c:	10c00115 	stw	r3,4(r2)
   17130:	e0bffe17 	ldw	r2,-8(fp)
   17134:	10800017 	ldw	r2,0(r2)
   17138:	11000304 	addi	r4,r2,12
   1713c:	e0bffe17 	ldw	r2,-8(fp)
   17140:	10800117 	ldw	r2,4(r2)
   17144:	1007883a 	mov	r3,r2
   17148:	2005883a 	mov	r2,r4
   1714c:	10c00035 	stwio	r3,0(r2)
   17150:	e037883a 	mov	sp,fp
   17154:	df000017 	ldw	fp,0(sp)
   17158:	dec00104 	addi	sp,sp,4
   1715c:	f800283a 	ret

00017160 <altera_avalon_uart_txirq>:
   17160:	defffd04 	addi	sp,sp,-12
   17164:	df000215 	stw	fp,8(sp)
   17168:	df000204 	addi	fp,sp,8
   1716c:	e13ffe15 	stw	r4,-8(fp)
   17170:	e17fff15 	stw	r5,-4(fp)
   17174:	e0bffe17 	ldw	r2,-8(fp)
   17178:	10c00417 	ldw	r3,16(r2)
   1717c:	e0bffe17 	ldw	r2,-8(fp)
   17180:	10800517 	ldw	r2,20(r2)
   17184:	18803626 	beq	r3,r2,17260 <altera_avalon_uart_txirq+0x100>
   17188:	e0bffe17 	ldw	r2,-8(fp)
   1718c:	10800617 	ldw	r2,24(r2)
   17190:	1080008c 	andi	r2,r2,2
   17194:	1005003a 	cmpeq	r2,r2,zero
   17198:	1000041e 	bne	r2,zero,171ac <altera_avalon_uart_txirq+0x4c>
   1719c:	e0bfff17 	ldw	r2,-4(fp)
   171a0:	1082000c 	andi	r2,r2,2048
   171a4:	1005003a 	cmpeq	r2,r2,zero
   171a8:	10001e1e 	bne	r2,zero,17224 <altera_avalon_uart_txirq+0xc4>
   171ac:	e0bffe17 	ldw	r2,-8(fp)
   171b0:	10800417 	ldw	r2,16(r2)
   171b4:	e0bffe17 	ldw	r2,-8(fp)
   171b8:	10800017 	ldw	r2,0(r2)
   171bc:	11000104 	addi	r4,r2,4
   171c0:	e0bffe17 	ldw	r2,-8(fp)
   171c4:	10c00417 	ldw	r3,16(r2)
   171c8:	e0bffe17 	ldw	r2,-8(fp)
   171cc:	1885883a 	add	r2,r3,r2
   171d0:	10801704 	addi	r2,r2,92
   171d4:	10800003 	ldbu	r2,0(r2)
   171d8:	10c03fcc 	andi	r3,r2,255
   171dc:	2005883a 	mov	r2,r4
   171e0:	10c00035 	stwio	r3,0(r2)
   171e4:	e0bffe17 	ldw	r2,-8(fp)
   171e8:	10800417 	ldw	r2,16(r2)
   171ec:	10c00044 	addi	r3,r2,1
   171f0:	e0bffe17 	ldw	r2,-8(fp)
   171f4:	10c00415 	stw	r3,16(r2)
   171f8:	e0bffe17 	ldw	r2,-8(fp)
   171fc:	10800417 	ldw	r2,16(r2)
   17200:	10c00fcc 	andi	r3,r2,63
   17204:	e0bffe17 	ldw	r2,-8(fp)
   17208:	10c00415 	stw	r3,16(r2)
   1720c:	e0bffe17 	ldw	r2,-8(fp)
   17210:	10800117 	ldw	r2,4(r2)
   17214:	10c01014 	ori	r3,r2,64
   17218:	e0bffe17 	ldw	r2,-8(fp)
   1721c:	10c00115 	stw	r3,4(r2)
   17220:	00000f06 	br	17260 <altera_avalon_uart_txirq+0x100>
   17224:	e0bffe17 	ldw	r2,-8(fp)
   17228:	10800017 	ldw	r2,0(r2)
   1722c:	10800204 	addi	r2,r2,8
   17230:	10800037 	ldwio	r2,0(r2)
   17234:	e0bfff15 	stw	r2,-4(fp)
   17238:	e0bfff17 	ldw	r2,-4(fp)
   1723c:	1082000c 	andi	r2,r2,2048
   17240:	1004c03a 	cmpne	r2,r2,zero
   17244:	1000061e 	bne	r2,zero,17260 <altera_avalon_uart_txirq+0x100>
   17248:	e0bffe17 	ldw	r2,-8(fp)
   1724c:	10c00117 	ldw	r3,4(r2)
   17250:	00bfefc4 	movi	r2,-65
   17254:	1886703a 	and	r3,r3,r2
   17258:	e0bffe17 	ldw	r2,-8(fp)
   1725c:	10c00115 	stw	r3,4(r2)
   17260:	e0bffe17 	ldw	r2,-8(fp)
   17264:	10c00417 	ldw	r3,16(r2)
   17268:	e0bffe17 	ldw	r2,-8(fp)
   1726c:	10800517 	ldw	r2,20(r2)
   17270:	1880061e 	bne	r3,r2,1728c <altera_avalon_uart_txirq+0x12c>
   17274:	e0bffe17 	ldw	r2,-8(fp)
   17278:	10c00117 	ldw	r3,4(r2)
   1727c:	00beefc4 	movi	r2,-1089
   17280:	1886703a 	and	r3,r3,r2
   17284:	e0bffe17 	ldw	r2,-8(fp)
   17288:	10c00115 	stw	r3,4(r2)
   1728c:	e0bffe17 	ldw	r2,-8(fp)
   17290:	10800017 	ldw	r2,0(r2)
   17294:	11000304 	addi	r4,r2,12
   17298:	e0bffe17 	ldw	r2,-8(fp)
   1729c:	10800117 	ldw	r2,4(r2)
   172a0:	1007883a 	mov	r3,r2
   172a4:	2005883a 	mov	r2,r4
   172a8:	10c00035 	stwio	r3,0(r2)
   172ac:	e037883a 	mov	sp,fp
   172b0:	df000017 	ldw	fp,0(sp)
   172b4:	dec00104 	addi	sp,sp,4
   172b8:	f800283a 	ret

000172bc <altera_avalon_uart_close>:
   172bc:	defffc04 	addi	sp,sp,-16
   172c0:	df000315 	stw	fp,12(sp)
   172c4:	df000304 	addi	fp,sp,12
   172c8:	e13ffd15 	stw	r4,-12(fp)
   172cc:	e17ffe15 	stw	r5,-8(fp)
   172d0:	00000706 	br	172f0 <altera_avalon_uart_close+0x34>
   172d4:	e0bffe17 	ldw	r2,-8(fp)
   172d8:	1090000c 	andi	r2,r2,16384
   172dc:	1005003a 	cmpeq	r2,r2,zero
   172e0:	1000031e 	bne	r2,zero,172f0 <altera_avalon_uart_close+0x34>
   172e4:	00bffd44 	movi	r2,-11
   172e8:	e0bfff15 	stw	r2,-4(fp)
   172ec:	00000606 	br	17308 <altera_avalon_uart_close+0x4c>
   172f0:	e0bffd17 	ldw	r2,-12(fp)
   172f4:	10c00417 	ldw	r3,16(r2)
   172f8:	e0bffd17 	ldw	r2,-12(fp)
   172fc:	10800517 	ldw	r2,20(r2)
   17300:	18bff41e 	bne	r3,r2,172d4 <altera_avalon_uart_close+0x18>
   17304:	e03fff15 	stw	zero,-4(fp)
   17308:	e0bfff17 	ldw	r2,-4(fp)
   1730c:	e037883a 	mov	sp,fp
   17310:	df000017 	ldw	fp,0(sp)
   17314:	dec00104 	addi	sp,sp,4
   17318:	f800283a 	ret

0001731c <altera_avalon_uart_read>:
   1731c:	defff004 	addi	sp,sp,-64
   17320:	dfc00f15 	stw	ra,60(sp)
   17324:	df000e15 	stw	fp,56(sp)
   17328:	df000e04 	addi	fp,sp,56
   1732c:	e13ffb15 	stw	r4,-20(fp)
   17330:	e17ffc15 	stw	r5,-16(fp)
   17334:	e1bffd15 	stw	r6,-12(fp)
   17338:	e1fffe15 	stw	r7,-8(fp)
   1733c:	e03ff705 	stb	zero,-36(fp)
   17340:	e03ff615 	stw	zero,-40(fp)
   17344:	e0bffe17 	ldw	r2,-8(fp)
   17348:	1090000c 	andi	r2,r2,16384
   1734c:	1005003a 	cmpeq	r2,r2,zero
   17350:	e0bff915 	stw	r2,-28(fp)
   17354:	e0bffb17 	ldw	r2,-20(fp)
   17358:	10800217 	ldw	r2,8(r2)
   1735c:	10800044 	addi	r2,r2,1
   17360:	10800fcc 	andi	r2,r2,63
   17364:	e0bff815 	stw	r2,-32(fp)
   17368:	00001906 	br	173d0 <altera_avalon_uart_read+0xb4>
   1736c:	e0bff617 	ldw	r2,-40(fp)
   17370:	10800044 	addi	r2,r2,1
   17374:	e0bff615 	stw	r2,-40(fp)
   17378:	e0bffb17 	ldw	r2,-20(fp)
   1737c:	10c00217 	ldw	r3,8(r2)
   17380:	e0bffb17 	ldw	r2,-20(fp)
   17384:	1885883a 	add	r2,r3,r2
   17388:	10800704 	addi	r2,r2,28
   1738c:	10800003 	ldbu	r2,0(r2)
   17390:	1007883a 	mov	r3,r2
   17394:	e0bffc17 	ldw	r2,-16(fp)
   17398:	10c00005 	stb	r3,0(r2)
   1739c:	e0bffc17 	ldw	r2,-16(fp)
   173a0:	10800044 	addi	r2,r2,1
   173a4:	e0bffc15 	stw	r2,-16(fp)
   173a8:	e0bffb17 	ldw	r2,-20(fp)
   173ac:	10800217 	ldw	r2,8(r2)
   173b0:	10c00044 	addi	r3,r2,1
   173b4:	e0bffb17 	ldw	r2,-20(fp)
   173b8:	10c00215 	stw	r3,8(r2)
   173bc:	e0bffb17 	ldw	r2,-20(fp)
   173c0:	10800217 	ldw	r2,8(r2)
   173c4:	10c00fcc 	andi	r3,r2,63
   173c8:	e0bffb17 	ldw	r2,-20(fp)
   173cc:	10c00215 	stw	r3,8(r2)
   173d0:	e0fff617 	ldw	r3,-40(fp)
   173d4:	e0bffd17 	ldw	r2,-12(fp)
   173d8:	1880050e 	bge	r3,r2,173f0 <altera_avalon_uart_read+0xd4>
   173dc:	e0bffb17 	ldw	r2,-20(fp)
   173e0:	10c00217 	ldw	r3,8(r2)
   173e4:	e0bffb17 	ldw	r2,-20(fp)
   173e8:	10800317 	ldw	r2,12(r2)
   173ec:	18bfdf1e 	bne	r3,r2,1736c <altera_avalon_uart_read+0x50>
   173f0:	e0bff617 	ldw	r2,-40(fp)
   173f4:	1004c03a 	cmpne	r2,r2,zero
   173f8:	1000271e 	bne	r2,zero,17498 <altera_avalon_uart_read+0x17c>
   173fc:	e0bffb17 	ldw	r2,-20(fp)
   17400:	10c00217 	ldw	r3,8(r2)
   17404:	e0bffb17 	ldw	r2,-20(fp)
   17408:	10800317 	ldw	r2,12(r2)
   1740c:	1880221e 	bne	r3,r2,17498 <altera_avalon_uart_read+0x17c>
   17410:	e0bff917 	ldw	r2,-28(fp)
   17414:	1004c03a 	cmpne	r2,r2,zero
   17418:	1000061e 	bne	r2,zero,17434 <altera_avalon_uart_read+0x118>
   1741c:	001754c0 	call	1754c <alt_get_errno>
   17420:	00c002c4 	movi	r3,11
   17424:	10c00015 	stw	r3,0(r2)
   17428:	00800044 	movi	r2,1
   1742c:	e0bff705 	stb	r2,-36(fp)
   17430:	00001f06 	br	174b0 <altera_avalon_uart_read+0x194>
   17434:	0005303a 	rdctl	r2,status
   17438:	e0bff515 	stw	r2,-44(fp)
   1743c:	e0fff517 	ldw	r3,-44(fp)
   17440:	00bfff84 	movi	r2,-2
   17444:	1884703a 	and	r2,r3,r2
   17448:	1001703a 	wrctl	status,r2
   1744c:	e0bff517 	ldw	r2,-44(fp)
   17450:	e0bffa15 	stw	r2,-24(fp)
   17454:	e0bffb17 	ldw	r2,-20(fp)
   17458:	10800117 	ldw	r2,4(r2)
   1745c:	10c02014 	ori	r3,r2,128
   17460:	e0bffb17 	ldw	r2,-20(fp)
   17464:	10c00115 	stw	r3,4(r2)
   17468:	e0bffb17 	ldw	r2,-20(fp)
   1746c:	10800017 	ldw	r2,0(r2)
   17470:	11000304 	addi	r4,r2,12
   17474:	e0bffb17 	ldw	r2,-20(fp)
   17478:	10800117 	ldw	r2,4(r2)
   1747c:	1007883a 	mov	r3,r2
   17480:	2005883a 	mov	r2,r4
   17484:	10c00035 	stwio	r3,0(r2)
   17488:	e0bffa17 	ldw	r2,-24(fp)
   1748c:	e0bff415 	stw	r2,-48(fp)
   17490:	e0bff417 	ldw	r2,-48(fp)
   17494:	1001703a 	wrctl	status,r2
   17498:	e0bff617 	ldw	r2,-40(fp)
   1749c:	1004c03a 	cmpne	r2,r2,zero
   174a0:	1000031e 	bne	r2,zero,174b0 <altera_avalon_uart_read+0x194>
   174a4:	e0bffd17 	ldw	r2,-12(fp)
   174a8:	1004c03a 	cmpne	r2,r2,zero
   174ac:	103fc81e 	bne	r2,zero,173d0 <altera_avalon_uart_read+0xb4>
   174b0:	0005303a 	rdctl	r2,status
   174b4:	e0bff315 	stw	r2,-52(fp)
   174b8:	e0fff317 	ldw	r3,-52(fp)
   174bc:	00bfff84 	movi	r2,-2
   174c0:	1884703a 	and	r2,r3,r2
   174c4:	1001703a 	wrctl	status,r2
   174c8:	e0bff317 	ldw	r2,-52(fp)
   174cc:	e0bffa15 	stw	r2,-24(fp)
   174d0:	e0bffb17 	ldw	r2,-20(fp)
   174d4:	10800117 	ldw	r2,4(r2)
   174d8:	10c02014 	ori	r3,r2,128
   174dc:	e0bffb17 	ldw	r2,-20(fp)
   174e0:	10c00115 	stw	r3,4(r2)
   174e4:	e0bffb17 	ldw	r2,-20(fp)
   174e8:	10800017 	ldw	r2,0(r2)
   174ec:	11000304 	addi	r4,r2,12
   174f0:	e0bffb17 	ldw	r2,-20(fp)
   174f4:	10800117 	ldw	r2,4(r2)
   174f8:	1007883a 	mov	r3,r2
   174fc:	2005883a 	mov	r2,r4
   17500:	10c00035 	stwio	r3,0(r2)
   17504:	e0bffa17 	ldw	r2,-24(fp)
   17508:	e0bff215 	stw	r2,-56(fp)
   1750c:	e0bff217 	ldw	r2,-56(fp)
   17510:	1001703a 	wrctl	status,r2
   17514:	e0bff703 	ldbu	r2,-36(fp)
   17518:	1005003a 	cmpeq	r2,r2,zero
   1751c:	1000031e 	bne	r2,zero,1752c <altera_avalon_uart_read+0x210>
   17520:	00bffd04 	movi	r2,-12
   17524:	e0bfff15 	stw	r2,-4(fp)
   17528:	00000206 	br	17534 <altera_avalon_uart_read+0x218>
   1752c:	e0bff617 	ldw	r2,-40(fp)
   17530:	e0bfff15 	stw	r2,-4(fp)
   17534:	e0bfff17 	ldw	r2,-4(fp)
   17538:	e037883a 	mov	sp,fp
   1753c:	dfc00117 	ldw	ra,4(sp)
   17540:	df000017 	ldw	fp,0(sp)
   17544:	dec00204 	addi	sp,sp,8
   17548:	f800283a 	ret

0001754c <alt_get_errno>:
   1754c:	defffd04 	addi	sp,sp,-12
   17550:	dfc00215 	stw	ra,8(sp)
   17554:	df000115 	stw	fp,4(sp)
   17558:	df000104 	addi	fp,sp,4
   1755c:	00820034 	movhi	r2,2048
   17560:	108a1304 	addi	r2,r2,10316
   17564:	10800017 	ldw	r2,0(r2)
   17568:	1005003a 	cmpeq	r2,r2,zero
   1756c:	1000061e 	bne	r2,zero,17588 <alt_get_errno+0x3c>
   17570:	00820034 	movhi	r2,2048
   17574:	108a1304 	addi	r2,r2,10316
   17578:	10800017 	ldw	r2,0(r2)
   1757c:	103ee83a 	callr	r2
   17580:	e0bfff15 	stw	r2,-4(fp)
   17584:	00000306 	br	17594 <alt_get_errno+0x48>
   17588:	00820034 	movhi	r2,2048
   1758c:	108a4504 	addi	r2,r2,10516
   17590:	e0bfff15 	stw	r2,-4(fp)
   17594:	e0bfff17 	ldw	r2,-4(fp)
   17598:	e037883a 	mov	sp,fp
   1759c:	dfc00117 	ldw	ra,4(sp)
   175a0:	df000017 	ldw	fp,0(sp)
   175a4:	dec00204 	addi	sp,sp,8
   175a8:	f800283a 	ret

000175ac <altera_avalon_uart_write>:
   175ac:	defff204 	addi	sp,sp,-56
   175b0:	dfc00d15 	stw	ra,52(sp)
   175b4:	df000c15 	stw	fp,48(sp)
   175b8:	df000c04 	addi	fp,sp,48
   175bc:	e13ffc15 	stw	r4,-16(fp)
   175c0:	e17ffd15 	stw	r5,-12(fp)
   175c4:	e1bffe15 	stw	r6,-8(fp)
   175c8:	e1ffff15 	stw	r7,-4(fp)
   175cc:	e0bffe17 	ldw	r2,-8(fp)
   175d0:	e0bff815 	stw	r2,-32(fp)
   175d4:	e0bfff17 	ldw	r2,-4(fp)
   175d8:	1090000c 	andi	r2,r2,16384
   175dc:	e0bffa15 	stw	r2,-24(fp)
   175e0:	00004006 	br	176e4 <altera_avalon_uart_write+0x138>
   175e4:	e0bffc17 	ldw	r2,-16(fp)
   175e8:	10800517 	ldw	r2,20(r2)
   175ec:	10800044 	addi	r2,r2,1
   175f0:	10800fcc 	andi	r2,r2,63
   175f4:	e0bff915 	stw	r2,-28(fp)
   175f8:	e0bffc17 	ldw	r2,-16(fp)
   175fc:	10c00417 	ldw	r3,16(r2)
   17600:	e0bff917 	ldw	r2,-28(fp)
   17604:	1880251e 	bne	r3,r2,1769c <altera_avalon_uart_write+0xf0>
   17608:	e0bffa17 	ldw	r2,-24(fp)
   1760c:	1005003a 	cmpeq	r2,r2,zero
   17610:	1000051e 	bne	r2,zero,17628 <altera_avalon_uart_write+0x7c>
   17614:	00177740 	call	17774 <alt_get_errno>
   17618:	1007883a 	mov	r3,r2
   1761c:	008002c4 	movi	r2,11
   17620:	18800015 	stw	r2,0(r3)
   17624:	00003206 	br	176f0 <altera_avalon_uart_write+0x144>
   17628:	0005303a 	rdctl	r2,status
   1762c:	e0bff715 	stw	r2,-36(fp)
   17630:	e0fff717 	ldw	r3,-36(fp)
   17634:	00bfff84 	movi	r2,-2
   17638:	1884703a 	and	r2,r3,r2
   1763c:	1001703a 	wrctl	status,r2
   17640:	e0bff717 	ldw	r2,-36(fp)
   17644:	e0bffb15 	stw	r2,-20(fp)
   17648:	e0bffc17 	ldw	r2,-16(fp)
   1764c:	10800117 	ldw	r2,4(r2)
   17650:	10c11014 	ori	r3,r2,1088
   17654:	e0bffc17 	ldw	r2,-16(fp)
   17658:	10c00115 	stw	r3,4(r2)
   1765c:	e0bffc17 	ldw	r2,-16(fp)
   17660:	10800017 	ldw	r2,0(r2)
   17664:	11000304 	addi	r4,r2,12
   17668:	e0bffc17 	ldw	r2,-16(fp)
   1766c:	10800117 	ldw	r2,4(r2)
   17670:	1007883a 	mov	r3,r2
   17674:	2005883a 	mov	r2,r4
   17678:	10c00035 	stwio	r3,0(r2)
   1767c:	e0bffb17 	ldw	r2,-20(fp)
   17680:	e0bff615 	stw	r2,-40(fp)
   17684:	e0bff617 	ldw	r2,-40(fp)
   17688:	1001703a 	wrctl	status,r2
   1768c:	e0bffc17 	ldw	r2,-16(fp)
   17690:	10c00417 	ldw	r3,16(r2)
   17694:	e0bff917 	ldw	r2,-28(fp)
   17698:	18bffc26 	beq	r3,r2,1768c <altera_avalon_uart_write+0xe0>
   1769c:	e0bff817 	ldw	r2,-32(fp)
   176a0:	10bfffc4 	addi	r2,r2,-1
   176a4:	e0bff815 	stw	r2,-32(fp)
   176a8:	e0bffc17 	ldw	r2,-16(fp)
   176ac:	10c00517 	ldw	r3,20(r2)
   176b0:	e0bffd17 	ldw	r2,-12(fp)
   176b4:	10800003 	ldbu	r2,0(r2)
   176b8:	1009883a 	mov	r4,r2
   176bc:	e0bffc17 	ldw	r2,-16(fp)
   176c0:	1885883a 	add	r2,r3,r2
   176c4:	10801704 	addi	r2,r2,92
   176c8:	11000005 	stb	r4,0(r2)
   176cc:	e0bffd17 	ldw	r2,-12(fp)
   176d0:	10800044 	addi	r2,r2,1
   176d4:	e0bffd15 	stw	r2,-12(fp)
   176d8:	e0fffc17 	ldw	r3,-16(fp)
   176dc:	e0bff917 	ldw	r2,-28(fp)
   176e0:	18800515 	stw	r2,20(r3)
   176e4:	e0bff817 	ldw	r2,-32(fp)
   176e8:	1004c03a 	cmpne	r2,r2,zero
   176ec:	103fbd1e 	bne	r2,zero,175e4 <altera_avalon_uart_write+0x38>
   176f0:	0005303a 	rdctl	r2,status
   176f4:	e0bff515 	stw	r2,-44(fp)
   176f8:	e0fff517 	ldw	r3,-44(fp)
   176fc:	00bfff84 	movi	r2,-2
   17700:	1884703a 	and	r2,r3,r2
   17704:	1001703a 	wrctl	status,r2
   17708:	e0bff517 	ldw	r2,-44(fp)
   1770c:	e0bffb15 	stw	r2,-20(fp)
   17710:	e0bffc17 	ldw	r2,-16(fp)
   17714:	10800117 	ldw	r2,4(r2)
   17718:	10c11014 	ori	r3,r2,1088
   1771c:	e0bffc17 	ldw	r2,-16(fp)
   17720:	10c00115 	stw	r3,4(r2)
   17724:	e0bffc17 	ldw	r2,-16(fp)
   17728:	10800017 	ldw	r2,0(r2)
   1772c:	11000304 	addi	r4,r2,12
   17730:	e0bffc17 	ldw	r2,-16(fp)
   17734:	10800117 	ldw	r2,4(r2)
   17738:	1007883a 	mov	r3,r2
   1773c:	2005883a 	mov	r2,r4
   17740:	10c00035 	stwio	r3,0(r2)
   17744:	e0bffb17 	ldw	r2,-20(fp)
   17748:	e0bff415 	stw	r2,-48(fp)
   1774c:	e0bff417 	ldw	r2,-48(fp)
   17750:	1001703a 	wrctl	status,r2
   17754:	e0fffe17 	ldw	r3,-8(fp)
   17758:	e0bff817 	ldw	r2,-32(fp)
   1775c:	1885c83a 	sub	r2,r3,r2
   17760:	e037883a 	mov	sp,fp
   17764:	dfc00117 	ldw	ra,4(sp)
   17768:	df000017 	ldw	fp,0(sp)
   1776c:	dec00204 	addi	sp,sp,8
   17770:	f800283a 	ret

00017774 <alt_get_errno>:
   17774:	defffd04 	addi	sp,sp,-12
   17778:	dfc00215 	stw	ra,8(sp)
   1777c:	df000115 	stw	fp,4(sp)
   17780:	df000104 	addi	fp,sp,4
   17784:	00820034 	movhi	r2,2048
   17788:	108a1304 	addi	r2,r2,10316
   1778c:	10800017 	ldw	r2,0(r2)
   17790:	1005003a 	cmpeq	r2,r2,zero
   17794:	1000061e 	bne	r2,zero,177b0 <alt_get_errno+0x3c>
   17798:	00820034 	movhi	r2,2048
   1779c:	108a1304 	addi	r2,r2,10316
   177a0:	10800017 	ldw	r2,0(r2)
   177a4:	103ee83a 	callr	r2
   177a8:	e0bfff15 	stw	r2,-4(fp)
   177ac:	00000306 	br	177bc <alt_get_errno+0x48>
   177b0:	00820034 	movhi	r2,2048
   177b4:	108a4504 	addi	r2,r2,10516
   177b8:	e0bfff15 	stw	r2,-4(fp)
   177bc:	e0bfff17 	ldw	r2,-4(fp)
   177c0:	e037883a 	mov	sp,fp
   177c4:	dfc00117 	ldw	ra,4(sp)
   177c8:	df000017 	ldw	fp,0(sp)
   177cc:	dec00204 	addi	sp,sp,8
   177d0:	f800283a 	ret

000177d4 <read_RI_bit>:
   177d4:	defffd04 	addi	sp,sp,-12
   177d8:	df000215 	stw	fp,8(sp)
   177dc:	df000204 	addi	fp,sp,8
   177e0:	e13fff15 	stw	r4,-4(fp)
   177e4:	e0bfff17 	ldw	r2,-4(fp)
   177e8:	1080400c 	andi	r2,r2,256
   177ec:	1004d23a 	srli	r2,r2,8
   177f0:	e0bffe05 	stb	r2,-8(fp)
   177f4:	e0bffe03 	ldbu	r2,-8(fp)
   177f8:	e037883a 	mov	sp,fp
   177fc:	df000017 	ldw	fp,0(sp)
   17800:	dec00104 	addi	sp,sp,4
   17804:	f800283a 	ret

00017808 <read_RE_bit>:
   17808:	defffd04 	addi	sp,sp,-12
   1780c:	df000215 	stw	fp,8(sp)
   17810:	df000204 	addi	fp,sp,8
   17814:	e13fff15 	stw	r4,-4(fp)
   17818:	e0bfff17 	ldw	r2,-4(fp)
   1781c:	1080004c 	andi	r2,r2,1
   17820:	e0bffe05 	stb	r2,-8(fp)
   17824:	e0bffe03 	ldbu	r2,-8(fp)
   17828:	e037883a 	mov	sp,fp
   1782c:	df000017 	ldw	fp,0(sp)
   17830:	dec00104 	addi	sp,sp,4
   17834:	f800283a 	ret

00017838 <read_CE_bit>:
   17838:	defffd04 	addi	sp,sp,-12
   1783c:	df000215 	stw	fp,8(sp)
   17840:	df000204 	addi	fp,sp,8
   17844:	e13fff15 	stw	r4,-4(fp)
   17848:	e0bfff17 	ldw	r2,-4(fp)
   1784c:	1081000c 	andi	r2,r2,1024
   17850:	1004d2ba 	srli	r2,r2,10
   17854:	e0bffe05 	stb	r2,-8(fp)
   17858:	e0bffe03 	ldbu	r2,-8(fp)
   1785c:	e037883a 	mov	sp,fp
   17860:	df000017 	ldw	fp,0(sp)
   17864:	dec00104 	addi	sp,sp,4
   17868:	f800283a 	ret

0001786c <read_num_bytes_available>:
   1786c:	defffd04 	addi	sp,sp,-12
   17870:	df000215 	stw	fp,8(sp)
   17874:	df000204 	addi	fp,sp,8
   17878:	e13fff15 	stw	r4,-4(fp)
   1787c:	e0bfff17 	ldw	r2,-4(fp)
   17880:	10bfffec 	andhi	r2,r2,65535
   17884:	1004d43a 	srli	r2,r2,16
   17888:	e0bffe0d 	sth	r2,-8(fp)
   1788c:	e0bffe0b 	ldhu	r2,-8(fp)
   17890:	e037883a 	mov	sp,fp
   17894:	df000017 	ldw	fp,0(sp)
   17898:	dec00104 	addi	sp,sp,4
   1789c:	f800283a 	ret

000178a0 <read_data_valid>:
   178a0:	defffd04 	addi	sp,sp,-12
   178a4:	df000215 	stw	fp,8(sp)
   178a8:	df000204 	addi	fp,sp,8
   178ac:	e13fff15 	stw	r4,-4(fp)
   178b0:	e0bfff17 	ldw	r2,-4(fp)
   178b4:	10a0000c 	andi	r2,r2,32768
   178b8:	1004d3fa 	srli	r2,r2,15
   178bc:	e0bffe05 	stb	r2,-8(fp)
   178c0:	e0bffe03 	ldbu	r2,-8(fp)
   178c4:	e037883a 	mov	sp,fp
   178c8:	df000017 	ldw	fp,0(sp)
   178cc:	dec00104 	addi	sp,sp,4
   178d0:	f800283a 	ret

000178d4 <read_data_byte>:
   178d4:	defffd04 	addi	sp,sp,-12
   178d8:	df000215 	stw	fp,8(sp)
   178dc:	df000204 	addi	fp,sp,8
   178e0:	e13fff15 	stw	r4,-4(fp)
   178e4:	e0bfff17 	ldw	r2,-4(fp)
   178e8:	e0bffe05 	stb	r2,-8(fp)
   178ec:	e0bffe03 	ldbu	r2,-8(fp)
   178f0:	e037883a 	mov	sp,fp
   178f4:	df000017 	ldw	fp,0(sp)
   178f8:	dec00104 	addi	sp,sp,4
   178fc:	f800283a 	ret

00017900 <alt_up_ps2_init>:
   17900:	defffb04 	addi	sp,sp,-20
   17904:	dfc00415 	stw	ra,16(sp)
   17908:	df000315 	stw	fp,12(sp)
   1790c:	df000304 	addi	fp,sp,12
   17910:	e13fff15 	stw	r4,-4(fp)
   17914:	e13fff17 	ldw	r4,-4(fp)
   17918:	01403fc4 	movi	r5,255
   1791c:	0017b600 	call	17b60 <alt_up_ps2_write_data_byte_with_ack>
   17920:	e0bffd15 	stw	r2,-12(fp)
   17924:	e0bffd17 	ldw	r2,-12(fp)
   17928:	1004c03a 	cmpne	r2,r2,zero
   1792c:	1000221e 	bne	r2,zero,179b8 <alt_up_ps2_init+0xb8>
   17930:	e17ffe04 	addi	r5,fp,-8
   17934:	e13fff17 	ldw	r4,-4(fp)
   17938:	0017bcc0 	call	17bcc <alt_up_ps2_read_data_byte_timeout>
   1793c:	e0bffd15 	stw	r2,-12(fp)
   17940:	e0bffd17 	ldw	r2,-12(fp)
   17944:	1004c03a 	cmpne	r2,r2,zero
   17948:	10001b1e 	bne	r2,zero,179b8 <alt_up_ps2_init+0xb8>
   1794c:	e0bffe03 	ldbu	r2,-8(fp)
   17950:	10803fcc 	andi	r2,r2,255
   17954:	10802a98 	cmpnei	r2,r2,170
   17958:	1000171e 	bne	r2,zero,179b8 <alt_up_ps2_init+0xb8>
   1795c:	e17ffe04 	addi	r5,fp,-8
   17960:	e13fff17 	ldw	r4,-4(fp)
   17964:	0017bcc0 	call	17bcc <alt_up_ps2_read_data_byte_timeout>
   17968:	e0bffd15 	stw	r2,-12(fp)
   1796c:	e0bffd17 	ldw	r2,-12(fp)
   17970:	10bfe318 	cmpnei	r2,r2,-116
   17974:	1000041e 	bne	r2,zero,17988 <alt_up_ps2_init+0x88>
   17978:	e0ffff17 	ldw	r3,-4(fp)
   1797c:	00800044 	movi	r2,1
   17980:	18800d15 	stw	r2,52(r3)
   17984:	00000c06 	br	179b8 <alt_up_ps2_init+0xb8>
   17988:	e0bffd17 	ldw	r2,-12(fp)
   1798c:	1004c03a 	cmpne	r2,r2,zero
   17990:	1000091e 	bne	r2,zero,179b8 <alt_up_ps2_init+0xb8>
   17994:	e0bffe03 	ldbu	r2,-8(fp)
   17998:	10803fcc 	andi	r2,r2,255
   1799c:	1004c03a 	cmpne	r2,r2,zero
   179a0:	1000051e 	bne	r2,zero,179b8 <alt_up_ps2_init+0xb8>
   179a4:	e0bfff17 	ldw	r2,-4(fp)
   179a8:	10000d15 	stw	zero,52(r2)
   179ac:	e13fff17 	ldw	r4,-4(fp)
   179b0:	01403d04 	movi	r5,244
   179b4:	0017a780 	call	17a78 <alt_up_ps2_write_data_byte>
   179b8:	e037883a 	mov	sp,fp
   179bc:	dfc00117 	ldw	ra,4(sp)
   179c0:	df000017 	ldw	fp,0(sp)
   179c4:	dec00204 	addi	sp,sp,8
   179c8:	f800283a 	ret

000179cc <alt_up_ps2_enable_read_interrupt>:
   179cc:	defffd04 	addi	sp,sp,-12
   179d0:	df000215 	stw	fp,8(sp)
   179d4:	df000204 	addi	fp,sp,8
   179d8:	e13fff15 	stw	r4,-4(fp)
   179dc:	e0bfff17 	ldw	r2,-4(fp)
   179e0:	10800a17 	ldw	r2,40(r2)
   179e4:	10800104 	addi	r2,r2,4
   179e8:	10800037 	ldwio	r2,0(r2)
   179ec:	e0bffe15 	stw	r2,-8(fp)
   179f0:	e0bffe17 	ldw	r2,-8(fp)
   179f4:	10800054 	ori	r2,r2,1
   179f8:	e0bffe15 	stw	r2,-8(fp)
   179fc:	e0bfff17 	ldw	r2,-4(fp)
   17a00:	10800a17 	ldw	r2,40(r2)
   17a04:	10800104 	addi	r2,r2,4
   17a08:	e0fffe17 	ldw	r3,-8(fp)
   17a0c:	10c00035 	stwio	r3,0(r2)
   17a10:	e037883a 	mov	sp,fp
   17a14:	df000017 	ldw	fp,0(sp)
   17a18:	dec00104 	addi	sp,sp,4
   17a1c:	f800283a 	ret

00017a20 <alt_up_ps2_disable_read_interrupt>:
   17a20:	defffd04 	addi	sp,sp,-12
   17a24:	df000215 	stw	fp,8(sp)
   17a28:	df000204 	addi	fp,sp,8
   17a2c:	e13fff15 	stw	r4,-4(fp)
   17a30:	e0bfff17 	ldw	r2,-4(fp)
   17a34:	10800a17 	ldw	r2,40(r2)
   17a38:	10800104 	addi	r2,r2,4
   17a3c:	10800037 	ldwio	r2,0(r2)
   17a40:	e0bffe15 	stw	r2,-8(fp)
   17a44:	e0fffe17 	ldw	r3,-8(fp)
   17a48:	00bfff84 	movi	r2,-2
   17a4c:	1884703a 	and	r2,r3,r2
   17a50:	e0bffe15 	stw	r2,-8(fp)
   17a54:	e0bfff17 	ldw	r2,-4(fp)
   17a58:	10800a17 	ldw	r2,40(r2)
   17a5c:	10800104 	addi	r2,r2,4
   17a60:	e0fffe17 	ldw	r3,-8(fp)
   17a64:	10c00035 	stwio	r3,0(r2)
   17a68:	e037883a 	mov	sp,fp
   17a6c:	df000017 	ldw	fp,0(sp)
   17a70:	dec00104 	addi	sp,sp,4
   17a74:	f800283a 	ret

00017a78 <alt_up_ps2_write_data_byte>:
   17a78:	defffa04 	addi	sp,sp,-24
   17a7c:	dfc00515 	stw	ra,20(sp)
   17a80:	df000415 	stw	fp,16(sp)
   17a84:	df000404 	addi	fp,sp,16
   17a88:	e13ffd15 	stw	r4,-12(fp)
   17a8c:	e17ffe05 	stb	r5,-8(fp)
   17a90:	e0bffd17 	ldw	r2,-12(fp)
   17a94:	10800a17 	ldw	r2,40(r2)
   17a98:	e0fffe03 	ldbu	r3,-8(fp)
   17a9c:	10c00025 	stbio	r3,0(r2)
   17aa0:	e0bffd17 	ldw	r2,-12(fp)
   17aa4:	10800a17 	ldw	r2,40(r2)
   17aa8:	10800104 	addi	r2,r2,4
   17aac:	10800037 	ldwio	r2,0(r2)
   17ab0:	e0bffc15 	stw	r2,-16(fp)
   17ab4:	e13ffc17 	ldw	r4,-16(fp)
   17ab8:	00178380 	call	17838 <read_CE_bit>
   17abc:	10803fcc 	andi	r2,r2,255
   17ac0:	1005003a 	cmpeq	r2,r2,zero
   17ac4:	1000031e 	bne	r2,zero,17ad4 <alt_up_ps2_write_data_byte+0x5c>
   17ac8:	00bffec4 	movi	r2,-5
   17acc:	e0bfff15 	stw	r2,-4(fp)
   17ad0:	00000106 	br	17ad8 <alt_up_ps2_write_data_byte+0x60>
   17ad4:	e03fff15 	stw	zero,-4(fp)
   17ad8:	e0bfff17 	ldw	r2,-4(fp)
   17adc:	e037883a 	mov	sp,fp
   17ae0:	dfc00117 	ldw	ra,4(sp)
   17ae4:	df000017 	ldw	fp,0(sp)
   17ae8:	dec00204 	addi	sp,sp,8
   17aec:	f800283a 	ret

00017af0 <alt_up_ps2_wait_for_ack>:
   17af0:	defffb04 	addi	sp,sp,-20
   17af4:	dfc00415 	stw	ra,16(sp)
   17af8:	df000315 	stw	fp,12(sp)
   17afc:	df000304 	addi	fp,sp,12
   17b00:	e13ffe15 	stw	r4,-8(fp)
   17b04:	e03ffd45 	stb	zero,-11(fp)
   17b08:	e03ffd05 	stb	zero,-12(fp)
   17b0c:	e17ffd44 	addi	r5,fp,-11
   17b10:	e13ffe17 	ldw	r4,-8(fp)
   17b14:	0017bcc0 	call	17bcc <alt_up_ps2_read_data_byte_timeout>
   17b18:	e0bffd05 	stb	r2,-12(fp)
   17b1c:	e0bffd03 	ldbu	r2,-12(fp)
   17b20:	1004c03a 	cmpne	r2,r2,zero
   17b24:	1000061e 	bne	r2,zero,17b40 <alt_up_ps2_wait_for_ack+0x50>
   17b28:	e0bffd43 	ldbu	r2,-11(fp)
   17b2c:	10803fcc 	andi	r2,r2,255
   17b30:	10803e98 	cmpnei	r2,r2,250
   17b34:	103ff51e 	bne	r2,zero,17b0c <alt_up_ps2_wait_for_ack+0x1c>
   17b38:	e03fff15 	stw	zero,-4(fp)
   17b3c:	00000206 	br	17b48 <alt_up_ps2_wait_for_ack+0x58>
   17b40:	e0bffd03 	ldbu	r2,-12(fp)
   17b44:	e0bfff15 	stw	r2,-4(fp)
   17b48:	e0bfff17 	ldw	r2,-4(fp)
   17b4c:	e037883a 	mov	sp,fp
   17b50:	dfc00117 	ldw	ra,4(sp)
   17b54:	df000017 	ldw	fp,0(sp)
   17b58:	dec00204 	addi	sp,sp,8
   17b5c:	f800283a 	ret

00017b60 <alt_up_ps2_write_data_byte_with_ack>:
   17b60:	defff904 	addi	sp,sp,-28
   17b64:	dfc00615 	stw	ra,24(sp)
   17b68:	df000515 	stw	fp,20(sp)
   17b6c:	df000504 	addi	fp,sp,20
   17b70:	e13ffd15 	stw	r4,-12(fp)
   17b74:	e17ffe05 	stb	r5,-8(fp)
   17b78:	e17ffe03 	ldbu	r5,-8(fp)
   17b7c:	e13ffd17 	ldw	r4,-12(fp)
   17b80:	0017a780 	call	17a78 <alt_up_ps2_write_data_byte>
   17b84:	e0bffc15 	stw	r2,-16(fp)
   17b88:	e0bffc17 	ldw	r2,-16(fp)
   17b8c:	1005003a 	cmpeq	r2,r2,zero
   17b90:	1000031e 	bne	r2,zero,17ba0 <alt_up_ps2_write_data_byte_with_ack+0x40>
   17b94:	e0bffc17 	ldw	r2,-16(fp)
   17b98:	e0bfff15 	stw	r2,-4(fp)
   17b9c:	00000506 	br	17bb4 <alt_up_ps2_write_data_byte_with_ack+0x54>
   17ba0:	e13ffd17 	ldw	r4,-12(fp)
   17ba4:	0017af00 	call	17af0 <alt_up_ps2_wait_for_ack>
   17ba8:	e0bffb15 	stw	r2,-20(fp)
   17bac:	e0bffb17 	ldw	r2,-20(fp)
   17bb0:	e0bfff15 	stw	r2,-4(fp)
   17bb4:	e0bfff17 	ldw	r2,-4(fp)
   17bb8:	e037883a 	mov	sp,fp
   17bbc:	dfc00117 	ldw	ra,4(sp)
   17bc0:	df000017 	ldw	fp,0(sp)
   17bc4:	dec00204 	addi	sp,sp,8
   17bc8:	f800283a 	ret

00017bcc <alt_up_ps2_read_data_byte_timeout>:
   17bcc:	defff904 	addi	sp,sp,-28
   17bd0:	dfc00615 	stw	ra,24(sp)
   17bd4:	df000515 	stw	fp,20(sp)
   17bd8:	df000504 	addi	fp,sp,20
   17bdc:	e13ffd15 	stw	r4,-12(fp)
   17be0:	e17ffe15 	stw	r5,-8(fp)
   17be4:	e03ffc15 	stw	zero,-16(fp)
   17be8:	e03ffb15 	stw	zero,-20(fp)
   17bec:	00000006 	br	17bf0 <alt_up_ps2_read_data_byte_timeout+0x24>
   17bf0:	e0bffb17 	ldw	r2,-20(fp)
   17bf4:	10800044 	addi	r2,r2,1
   17bf8:	e0bffb15 	stw	r2,-20(fp)
   17bfc:	e0bffd17 	ldw	r2,-12(fp)
   17c00:	10800a17 	ldw	r2,40(r2)
   17c04:	10800037 	ldwio	r2,0(r2)
   17c08:	e0bffc15 	stw	r2,-16(fp)
   17c0c:	e13ffc17 	ldw	r4,-16(fp)
   17c10:	00178a00 	call	178a0 <read_data_valid>
   17c14:	10803fcc 	andi	r2,r2,255
   17c18:	1005003a 	cmpeq	r2,r2,zero
   17c1c:	1000071e 	bne	r2,zero,17c3c <alt_up_ps2_read_data_byte_timeout+0x70>
   17c20:	e13ffc17 	ldw	r4,-16(fp)
   17c24:	00178d40 	call	178d4 <read_data_byte>
   17c28:	1007883a 	mov	r3,r2
   17c2c:	e0bffe17 	ldw	r2,-8(fp)
   17c30:	10c00005 	stb	r3,0(r2)
   17c34:	e03fff15 	stw	zero,-4(fp)
   17c38:	00000a06 	br	17c64 <alt_up_ps2_read_data_byte_timeout+0x98>
   17c3c:	e0bffd17 	ldw	r2,-12(fp)
   17c40:	10800c17 	ldw	r2,48(r2)
   17c44:	1005003a 	cmpeq	r2,r2,zero
   17c48:	103fe91e 	bne	r2,zero,17bf0 <alt_up_ps2_read_data_byte_timeout+0x24>
   17c4c:	e0bffd17 	ldw	r2,-12(fp)
   17c50:	10c00c17 	ldw	r3,48(r2)
   17c54:	e0bffb17 	ldw	r2,-20(fp)
   17c58:	18bfe52e 	bgeu	r3,r2,17bf0 <alt_up_ps2_read_data_byte_timeout+0x24>
   17c5c:	00bfe304 	movi	r2,-116
   17c60:	e0bfff15 	stw	r2,-4(fp)
   17c64:	e0bfff17 	ldw	r2,-4(fp)
   17c68:	e037883a 	mov	sp,fp
   17c6c:	dfc00117 	ldw	ra,4(sp)
   17c70:	df000017 	ldw	fp,0(sp)
   17c74:	dec00204 	addi	sp,sp,8
   17c78:	f800283a 	ret

00017c7c <alt_up_ps2_read_data_byte>:
   17c7c:	defffa04 	addi	sp,sp,-24
   17c80:	dfc00515 	stw	ra,20(sp)
   17c84:	df000415 	stw	fp,16(sp)
   17c88:	df000404 	addi	fp,sp,16
   17c8c:	e13ffd15 	stw	r4,-12(fp)
   17c90:	e17ffe15 	stw	r5,-8(fp)
   17c94:	e03ffc15 	stw	zero,-16(fp)
   17c98:	e0bffd17 	ldw	r2,-12(fp)
   17c9c:	10800a17 	ldw	r2,40(r2)
   17ca0:	10800037 	ldwio	r2,0(r2)
   17ca4:	e0bffc15 	stw	r2,-16(fp)
   17ca8:	e13ffc17 	ldw	r4,-16(fp)
   17cac:	00178a00 	call	178a0 <read_data_valid>
   17cb0:	10803fcc 	andi	r2,r2,255
   17cb4:	1005003a 	cmpeq	r2,r2,zero
   17cb8:	1000071e 	bne	r2,zero,17cd8 <alt_up_ps2_read_data_byte+0x5c>
   17cbc:	e13ffc17 	ldw	r4,-16(fp)
   17cc0:	00178d40 	call	178d4 <read_data_byte>
   17cc4:	1007883a 	mov	r3,r2
   17cc8:	e0bffe17 	ldw	r2,-8(fp)
   17ccc:	10c00005 	stb	r3,0(r2)
   17cd0:	e03fff15 	stw	zero,-4(fp)
   17cd4:	00000206 	br	17ce0 <alt_up_ps2_read_data_byte+0x64>
   17cd8:	00bfffc4 	movi	r2,-1
   17cdc:	e0bfff15 	stw	r2,-4(fp)
   17ce0:	e0bfff17 	ldw	r2,-4(fp)
   17ce4:	e037883a 	mov	sp,fp
   17ce8:	dfc00117 	ldw	ra,4(sp)
   17cec:	df000017 	ldw	fp,0(sp)
   17cf0:	dec00204 	addi	sp,sp,8
   17cf4:	f800283a 	ret

00017cf8 <alt_up_ps2_clear_fifo>:
   17cf8:	defffb04 	addi	sp,sp,-20
   17cfc:	dfc00415 	stw	ra,16(sp)
   17d00:	df000315 	stw	fp,12(sp)
   17d04:	df000304 	addi	fp,sp,12
   17d08:	e13fff15 	stw	r4,-4(fp)
   17d0c:	e03ffe0d 	sth	zero,-8(fp)
   17d10:	e03ffd15 	stw	zero,-12(fp)
   17d14:	e0bfff17 	ldw	r2,-4(fp)
   17d18:	10800a17 	ldw	r2,40(r2)
   17d1c:	10800037 	ldwio	r2,0(r2)
   17d20:	e0bffd15 	stw	r2,-12(fp)
   17d24:	e13ffd17 	ldw	r4,-12(fp)
   17d28:	001786c0 	call	1786c <read_num_bytes_available>
   17d2c:	e0bffe0d 	sth	r2,-8(fp)
   17d30:	e0bffe0b 	ldhu	r2,-8(fp)
   17d34:	1004c03a 	cmpne	r2,r2,zero
   17d38:	103ff61e 	bne	r2,zero,17d14 <alt_up_ps2_clear_fifo+0x1c>
   17d3c:	e037883a 	mov	sp,fp
   17d40:	dfc00117 	ldw	ra,4(sp)
   17d44:	df000017 	ldw	fp,0(sp)
   17d48:	dec00204 	addi	sp,sp,8
   17d4c:	f800283a 	ret

00017d50 <alt_up_ps2_read_fd>:
   17d50:	defff704 	addi	sp,sp,-36
   17d54:	dfc00815 	stw	ra,32(sp)
   17d58:	df000715 	stw	fp,28(sp)
   17d5c:	df000704 	addi	fp,sp,28
   17d60:	e13ffc15 	stw	r4,-16(fp)
   17d64:	e17ffd15 	stw	r5,-12(fp)
   17d68:	e1bffe15 	stw	r6,-8(fp)
   17d6c:	e0bffc17 	ldw	r2,-16(fp)
   17d70:	10800017 	ldw	r2,0(r2)
   17d74:	e0bffb15 	stw	r2,-20(fp)
   17d78:	e03ffa15 	stw	zero,-24(fp)
   17d7c:	e03ff915 	stw	zero,-28(fp)
   17d80:	e0fff917 	ldw	r3,-28(fp)
   17d84:	e0bffe17 	ldw	r2,-8(fp)
   17d88:	18bffd16 	blt	r3,r2,17d80 <alt_up_ps2_read_fd+0x30>
   17d8c:	e17ffd17 	ldw	r5,-12(fp)
   17d90:	e0bffd17 	ldw	r2,-12(fp)
   17d94:	10800044 	addi	r2,r2,1
   17d98:	e0bffd15 	stw	r2,-12(fp)
   17d9c:	e13ffb17 	ldw	r4,-20(fp)
   17da0:	0017bcc0 	call	17bcc <alt_up_ps2_read_data_byte_timeout>
   17da4:	e0bffa15 	stw	r2,-24(fp)
   17da8:	e0bffa17 	ldw	r2,-24(fp)
   17dac:	1005003a 	cmpeq	r2,r2,zero
   17db0:	1000031e 	bne	r2,zero,17dc0 <alt_up_ps2_read_fd+0x70>
   17db4:	e0bff917 	ldw	r2,-28(fp)
   17db8:	e0bfff15 	stw	r2,-4(fp)
   17dbc:	00000506 	br	17dd4 <alt_up_ps2_read_fd+0x84>
   17dc0:	e0bff917 	ldw	r2,-28(fp)
   17dc4:	10800044 	addi	r2,r2,1
   17dc8:	e0bff915 	stw	r2,-28(fp)
   17dcc:	e0bff917 	ldw	r2,-28(fp)
   17dd0:	e0bfff15 	stw	r2,-4(fp)
   17dd4:	e0bfff17 	ldw	r2,-4(fp)
   17dd8:	e037883a 	mov	sp,fp
   17ddc:	dfc00117 	ldw	ra,4(sp)
   17de0:	df000017 	ldw	fp,0(sp)
   17de4:	dec00204 	addi	sp,sp,8
   17de8:	f800283a 	ret

00017dec <alt_up_ps2_write_fd>:
   17dec:	defff704 	addi	sp,sp,-36
   17df0:	dfc00815 	stw	ra,32(sp)
   17df4:	df000715 	stw	fp,28(sp)
   17df8:	df000704 	addi	fp,sp,28
   17dfc:	e13ffc15 	stw	r4,-16(fp)
   17e00:	e17ffd15 	stw	r5,-12(fp)
   17e04:	e1bffe15 	stw	r6,-8(fp)
   17e08:	e0bffc17 	ldw	r2,-16(fp)
   17e0c:	10800017 	ldw	r2,0(r2)
   17e10:	e0bffb15 	stw	r2,-20(fp)
   17e14:	e03ffa15 	stw	zero,-24(fp)
   17e18:	e03ff915 	stw	zero,-28(fp)
   17e1c:	00001206 	br	17e68 <alt_up_ps2_write_fd+0x7c>
   17e20:	e0bffd17 	ldw	r2,-12(fp)
   17e24:	10800003 	ldbu	r2,0(r2)
   17e28:	11403fcc 	andi	r5,r2,255
   17e2c:	e0bffd17 	ldw	r2,-12(fp)
   17e30:	10800044 	addi	r2,r2,1
   17e34:	e0bffd15 	stw	r2,-12(fp)
   17e38:	e13ffb17 	ldw	r4,-20(fp)
   17e3c:	0017a780 	call	17a78 <alt_up_ps2_write_data_byte>
   17e40:	e0bffa15 	stw	r2,-24(fp)
   17e44:	e0bffa17 	ldw	r2,-24(fp)
   17e48:	1005003a 	cmpeq	r2,r2,zero
   17e4c:	1000031e 	bne	r2,zero,17e5c <alt_up_ps2_write_fd+0x70>
   17e50:	e0bff917 	ldw	r2,-28(fp)
   17e54:	e0bfff15 	stw	r2,-4(fp)
   17e58:	00000806 	br	17e7c <alt_up_ps2_write_fd+0x90>
   17e5c:	e0bff917 	ldw	r2,-28(fp)
   17e60:	10800044 	addi	r2,r2,1
   17e64:	e0bff915 	stw	r2,-28(fp)
   17e68:	e0fff917 	ldw	r3,-28(fp)
   17e6c:	e0bffe17 	ldw	r2,-8(fp)
   17e70:	18bfeb16 	blt	r3,r2,17e20 <alt_up_ps2_write_fd+0x34>
   17e74:	e0bff917 	ldw	r2,-28(fp)
   17e78:	e0bfff15 	stw	r2,-4(fp)
   17e7c:	e0bfff17 	ldw	r2,-4(fp)
   17e80:	e037883a 	mov	sp,fp
   17e84:	dfc00117 	ldw	ra,4(sp)
   17e88:	df000017 	ldw	fp,0(sp)
   17e8c:	dec00204 	addi	sp,sp,8
   17e90:	f800283a 	ret

00017e94 <alt_up_ps2_open_dev>:
   17e94:	defffc04 	addi	sp,sp,-16
   17e98:	dfc00315 	stw	ra,12(sp)
   17e9c:	df000215 	stw	fp,8(sp)
   17ea0:	df000204 	addi	fp,sp,8
   17ea4:	e13fff15 	stw	r4,-4(fp)
   17ea8:	e13fff17 	ldw	r4,-4(fp)
   17eac:	01420034 	movhi	r5,2048
   17eb0:	294a1004 	addi	r5,r5,10304
   17eb4:	0019aec0 	call	19aec <alt_find_dev>
   17eb8:	e0bffe15 	stw	r2,-8(fp)
   17ebc:	e0bffe17 	ldw	r2,-8(fp)
   17ec0:	e037883a 	mov	sp,fp
   17ec4:	dfc00117 	ldw	ra,4(sp)
   17ec8:	df000017 	ldw	fp,0(sp)
   17ecc:	dec00204 	addi	sp,sp,8
   17ed0:	f800283a 	ret

00017ed4 <alt_up_char_buffer_init>:
   17ed4:	defffc04 	addi	sp,sp,-16
   17ed8:	dfc00315 	stw	ra,12(sp)
   17edc:	df000215 	stw	fp,8(sp)
   17ee0:	df000204 	addi	fp,sp,8
   17ee4:	e13fff15 	stw	r4,-4(fp)
   17ee8:	e0bfff17 	ldw	r2,-4(fp)
   17eec:	10800217 	ldw	r2,8(r2)
   17ef0:	e0bffe15 	stw	r2,-8(fp)
   17ef4:	00000c06 	br	17f28 <alt_up_char_buffer_init+0x54>
   17ef8:	e13ffe17 	ldw	r4,-8(fp)
   17efc:	01420034 	movhi	r5,2048
   17f00:	2941db04 	addi	r5,r5,1900
   17f04:	0010ad40 	call	10ad4 <strcmp>
   17f08:	1004c03a 	cmpne	r2,r2,zero
   17f0c:	1000031e 	bne	r2,zero,17f1c <alt_up_char_buffer_init+0x48>
   17f10:	e0bffe17 	ldw	r2,-8(fp)
   17f14:	10000005 	stb	zero,0(r2)
   17f18:	00000a06 	br	17f44 <alt_up_char_buffer_init+0x70>
   17f1c:	e0bffe17 	ldw	r2,-8(fp)
   17f20:	10800044 	addi	r2,r2,1
   17f24:	e0bffe15 	stw	r2,-8(fp)
   17f28:	e0bffe17 	ldw	r2,-8(fp)
   17f2c:	10800003 	ldbu	r2,0(r2)
   17f30:	10803fcc 	andi	r2,r2,255
   17f34:	1080201c 	xori	r2,r2,128
   17f38:	10bfe004 	addi	r2,r2,-128
   17f3c:	1004c03a 	cmpne	r2,r2,zero
   17f40:	103fed1e 	bne	r2,zero,17ef8 <alt_up_char_buffer_init+0x24>
   17f44:	e037883a 	mov	sp,fp
   17f48:	dfc00117 	ldw	ra,4(sp)
   17f4c:	df000017 	ldw	fp,0(sp)
   17f50:	dec00204 	addi	sp,sp,8
   17f54:	f800283a 	ret

00017f58 <alt_up_char_buffer_open_dev>:
   17f58:	defffc04 	addi	sp,sp,-16
   17f5c:	dfc00315 	stw	ra,12(sp)
   17f60:	df000215 	stw	fp,8(sp)
   17f64:	df000204 	addi	fp,sp,8
   17f68:	e13fff15 	stw	r4,-4(fp)
   17f6c:	e13fff17 	ldw	r4,-4(fp)
   17f70:	01420034 	movhi	r5,2048
   17f74:	294a1004 	addi	r5,r5,10304
   17f78:	0019aec0 	call	19aec <alt_find_dev>
   17f7c:	e0bffe15 	stw	r2,-8(fp)
   17f80:	e0bffe17 	ldw	r2,-8(fp)
   17f84:	e037883a 	mov	sp,fp
   17f88:	dfc00117 	ldw	ra,4(sp)
   17f8c:	df000017 	ldw	fp,0(sp)
   17f90:	dec00204 	addi	sp,sp,8
   17f94:	f800283a 	ret

00017f98 <alt_up_char_buffer_draw>:
   17f98:	defff904 	addi	sp,sp,-28
   17f9c:	df000615 	stw	fp,24(sp)
   17fa0:	df000604 	addi	fp,sp,24
   17fa4:	e13ffb15 	stw	r4,-20(fp)
   17fa8:	e1bffd15 	stw	r6,-12(fp)
   17fac:	e1fffe15 	stw	r7,-8(fp)
   17fb0:	e17ffc05 	stb	r5,-16(fp)
   17fb4:	e0bffb17 	ldw	r2,-20(fp)
   17fb8:	10c00c17 	ldw	r3,48(r2)
   17fbc:	e0bffd17 	ldw	r2,-12(fp)
   17fc0:	10c0042e 	bgeu	r2,r3,17fd4 <alt_up_char_buffer_draw+0x3c>
   17fc4:	e0bffb17 	ldw	r2,-20(fp)
   17fc8:	10c00d17 	ldw	r3,52(r2)
   17fcc:	e0bffe17 	ldw	r2,-8(fp)
   17fd0:	10c00336 	bltu	r2,r3,17fe0 <alt_up_char_buffer_draw+0x48>
   17fd4:	00bfffc4 	movi	r2,-1
   17fd8:	e0bfff15 	stw	r2,-4(fp)
   17fdc:	00001d06 	br	18054 <alt_up_char_buffer_draw+0xbc>
   17fe0:	e03ffa15 	stw	zero,-24(fp)
   17fe4:	e0bffb17 	ldw	r2,-20(fp)
   17fe8:	10c00f17 	ldw	r3,60(r2)
   17fec:	e0bffd17 	ldw	r2,-12(fp)
   17ff0:	1886703a 	and	r3,r3,r2
   17ff4:	e0bffb17 	ldw	r2,-20(fp)
   17ff8:	10800e17 	ldw	r2,56(r2)
   17ffc:	1886983a 	sll	r3,r3,r2
   18000:	e0bffa17 	ldw	r2,-24(fp)
   18004:	10c4b03a 	or	r2,r2,r3
   18008:	e0bffa15 	stw	r2,-24(fp)
   1800c:	e0bffb17 	ldw	r2,-20(fp)
   18010:	10c01117 	ldw	r3,68(r2)
   18014:	e0bffe17 	ldw	r2,-8(fp)
   18018:	1886703a 	and	r3,r3,r2
   1801c:	e0bffb17 	ldw	r2,-20(fp)
   18020:	10801017 	ldw	r2,64(r2)
   18024:	1886983a 	sll	r3,r3,r2
   18028:	e0bffa17 	ldw	r2,-24(fp)
   1802c:	10c4b03a 	or	r2,r2,r3
   18030:	e0bffa15 	stw	r2,-24(fp)
   18034:	e0bffb17 	ldw	r2,-20(fp)
   18038:	10800b17 	ldw	r2,44(r2)
   1803c:	1007883a 	mov	r3,r2
   18040:	e0bffa17 	ldw	r2,-24(fp)
   18044:	1885883a 	add	r2,r3,r2
   18048:	e0fffc03 	ldbu	r3,-16(fp)
   1804c:	10c00025 	stbio	r3,0(r2)
   18050:	e03fff15 	stw	zero,-4(fp)
   18054:	e0bfff17 	ldw	r2,-4(fp)
   18058:	e037883a 	mov	sp,fp
   1805c:	df000017 	ldw	fp,0(sp)
   18060:	dec00104 	addi	sp,sp,4
   18064:	f800283a 	ret

00018068 <alt_up_char_buffer_string>:
   18068:	defff904 	addi	sp,sp,-28
   1806c:	df000615 	stw	fp,24(sp)
   18070:	df000604 	addi	fp,sp,24
   18074:	e13ffb15 	stw	r4,-20(fp)
   18078:	e17ffc15 	stw	r5,-16(fp)
   1807c:	e1bffd15 	stw	r6,-12(fp)
   18080:	e1fffe15 	stw	r7,-8(fp)
   18084:	e0bffb17 	ldw	r2,-20(fp)
   18088:	10c00c17 	ldw	r3,48(r2)
   1808c:	e0bffd17 	ldw	r2,-12(fp)
   18090:	10c0042e 	bgeu	r2,r3,180a4 <alt_up_char_buffer_string+0x3c>
   18094:	e0bffb17 	ldw	r2,-20(fp)
   18098:	10c00d17 	ldw	r3,52(r2)
   1809c:	e0bffe17 	ldw	r2,-8(fp)
   180a0:	10c00336 	bltu	r2,r3,180b0 <alt_up_char_buffer_string+0x48>
   180a4:	00bfffc4 	movi	r2,-1
   180a8:	e0bfff15 	stw	r2,-4(fp)
   180ac:	00002e06 	br	18168 <alt_up_char_buffer_string+0x100>
   180b0:	e03ffa15 	stw	zero,-24(fp)
   180b4:	e0bffb17 	ldw	r2,-20(fp)
   180b8:	10801017 	ldw	r2,64(r2)
   180bc:	1007883a 	mov	r3,r2
   180c0:	e0bffe17 	ldw	r2,-8(fp)
   180c4:	10c6983a 	sll	r3,r2,r3
   180c8:	e0bffd17 	ldw	r2,-12(fp)
   180cc:	1885883a 	add	r2,r3,r2
   180d0:	e0bffa15 	stw	r2,-24(fp)
   180d4:	00001c06 	br	18148 <alt_up_char_buffer_string+0xe0>
   180d8:	e0bffb17 	ldw	r2,-20(fp)
   180dc:	10800b17 	ldw	r2,44(r2)
   180e0:	1007883a 	mov	r3,r2
   180e4:	e0bffa17 	ldw	r2,-24(fp)
   180e8:	1889883a 	add	r4,r3,r2
   180ec:	e0bffc17 	ldw	r2,-16(fp)
   180f0:	10800003 	ldbu	r2,0(r2)
   180f4:	10c03fcc 	andi	r3,r2,255
   180f8:	18c0201c 	xori	r3,r3,128
   180fc:	18ffe004 	addi	r3,r3,-128
   18100:	2005883a 	mov	r2,r4
   18104:	10c00025 	stbio	r3,0(r2)
   18108:	e0bffc17 	ldw	r2,-16(fp)
   1810c:	10800044 	addi	r2,r2,1
   18110:	e0bffc15 	stw	r2,-16(fp)
   18114:	e0bffd17 	ldw	r2,-12(fp)
   18118:	10800044 	addi	r2,r2,1
   1811c:	e0bffd15 	stw	r2,-12(fp)
   18120:	e0bffb17 	ldw	r2,-20(fp)
   18124:	10c00c17 	ldw	r3,48(r2)
   18128:	e0bffd17 	ldw	r2,-12(fp)
   1812c:	10c00336 	bltu	r2,r3,1813c <alt_up_char_buffer_string+0xd4>
   18130:	00bfffc4 	movi	r2,-1
   18134:	e0bfff15 	stw	r2,-4(fp)
   18138:	00000b06 	br	18168 <alt_up_char_buffer_string+0x100>
   1813c:	e0bffa17 	ldw	r2,-24(fp)
   18140:	10800044 	addi	r2,r2,1
   18144:	e0bffa15 	stw	r2,-24(fp)
   18148:	e0bffc17 	ldw	r2,-16(fp)
   1814c:	10800003 	ldbu	r2,0(r2)
   18150:	10803fcc 	andi	r2,r2,255
   18154:	1080201c 	xori	r2,r2,128
   18158:	10bfe004 	addi	r2,r2,-128
   1815c:	1004c03a 	cmpne	r2,r2,zero
   18160:	103fdd1e 	bne	r2,zero,180d8 <alt_up_char_buffer_string+0x70>
   18164:	e03fff15 	stw	zero,-4(fp)
   18168:	e0bfff17 	ldw	r2,-4(fp)
   1816c:	e037883a 	mov	sp,fp
   18170:	df000017 	ldw	fp,0(sp)
   18174:	dec00104 	addi	sp,sp,4
   18178:	f800283a 	ret

0001817c <alt_up_char_buffer_clear>:
   1817c:	defffe04 	addi	sp,sp,-8
   18180:	df000115 	stw	fp,4(sp)
   18184:	df000104 	addi	fp,sp,4
   18188:	e13fff15 	stw	r4,-4(fp)
   1818c:	e0bfff17 	ldw	r2,-4(fp)
   18190:	10800a17 	ldw	r2,40(r2)
   18194:	10800084 	addi	r2,r2,2
   18198:	1007883a 	mov	r3,r2
   1819c:	00800044 	movi	r2,1
   181a0:	18800025 	stbio	r2,0(r3)
   181a4:	e0bfff17 	ldw	r2,-4(fp)
   181a8:	10800a17 	ldw	r2,40(r2)
   181ac:	10800084 	addi	r2,r2,2
   181b0:	10800023 	ldbuio	r2,0(r2)
   181b4:	1080004c 	andi	r2,r2,1
   181b8:	10803fcc 	andi	r2,r2,255
   181bc:	1004c03a 	cmpne	r2,r2,zero
   181c0:	103ff81e 	bne	r2,zero,181a4 <alt_up_char_buffer_clear+0x28>
   181c4:	0005883a 	mov	r2,zero
   181c8:	e037883a 	mov	sp,fp
   181cc:	df000017 	ldw	fp,0(sp)
   181d0:	dec00104 	addi	sp,sp,4
   181d4:	f800283a 	ret

000181d8 <alt_up_pixel_buffer_dma_open_dev>:
   181d8:	defffc04 	addi	sp,sp,-16
   181dc:	dfc00315 	stw	ra,12(sp)
   181e0:	df000215 	stw	fp,8(sp)
   181e4:	df000204 	addi	fp,sp,8
   181e8:	e13fff15 	stw	r4,-4(fp)
   181ec:	e13fff17 	ldw	r4,-4(fp)
   181f0:	01420034 	movhi	r5,2048
   181f4:	294a1004 	addi	r5,r5,10304
   181f8:	0019aec0 	call	19aec <alt_find_dev>
   181fc:	e0bffe15 	stw	r2,-8(fp)
   18200:	e0bffe17 	ldw	r2,-8(fp)
   18204:	e037883a 	mov	sp,fp
   18208:	dfc00117 	ldw	ra,4(sp)
   1820c:	df000017 	ldw	fp,0(sp)
   18210:	dec00204 	addi	sp,sp,8
   18214:	f800283a 	ret

00018218 <alt_up_pixel_buffer_dma_draw>:
   18218:	defff904 	addi	sp,sp,-28
   1821c:	df000615 	stw	fp,24(sp)
   18220:	df000604 	addi	fp,sp,24
   18224:	e13ffb15 	stw	r4,-20(fp)
   18228:	e17ffc15 	stw	r5,-16(fp)
   1822c:	e1bffd15 	stw	r6,-12(fp)
   18230:	e1fffe15 	stw	r7,-8(fp)
   18234:	e0bffb17 	ldw	r2,-20(fp)
   18238:	10c00f17 	ldw	r3,60(r2)
   1823c:	e0bffd17 	ldw	r2,-12(fp)
   18240:	10c0042e 	bgeu	r2,r3,18254 <alt_up_pixel_buffer_dma_draw+0x3c>
   18244:	e0bffb17 	ldw	r2,-20(fp)
   18248:	10c01017 	ldw	r3,64(r2)
   1824c:	e0bffe17 	ldw	r2,-8(fp)
   18250:	10c00336 	bltu	r2,r3,18260 <alt_up_pixel_buffer_dma_draw+0x48>
   18254:	00bfffc4 	movi	r2,-1
   18258:	e0bfff15 	stw	r2,-4(fp)
   1825c:	00005106 	br	183a4 <alt_up_pixel_buffer_dma_draw+0x18c>
   18260:	e03ffa15 	stw	zero,-24(fp)
   18264:	e0bffb17 	ldw	r2,-20(fp)
   18268:	10800d17 	ldw	r2,52(r2)
   1826c:	1004c03a 	cmpne	r2,r2,zero
   18270:	1000151e 	bne	r2,zero,182c8 <alt_up_pixel_buffer_dma_draw+0xb0>
   18274:	e0bffb17 	ldw	r2,-20(fp)
   18278:	10c01217 	ldw	r3,72(r2)
   1827c:	e0bffd17 	ldw	r2,-12(fp)
   18280:	1886703a 	and	r3,r3,r2
   18284:	e0bffb17 	ldw	r2,-20(fp)
   18288:	10801117 	ldw	r2,68(r2)
   1828c:	1886983a 	sll	r3,r3,r2
   18290:	e0bffa17 	ldw	r2,-24(fp)
   18294:	10c4b03a 	or	r2,r2,r3
   18298:	e0bffa15 	stw	r2,-24(fp)
   1829c:	e0bffb17 	ldw	r2,-20(fp)
   182a0:	10c01417 	ldw	r3,80(r2)
   182a4:	e0bffe17 	ldw	r2,-8(fp)
   182a8:	1886703a 	and	r3,r3,r2
   182ac:	e0bffb17 	ldw	r2,-20(fp)
   182b0:	10801317 	ldw	r2,76(r2)
   182b4:	1886983a 	sll	r3,r3,r2
   182b8:	e0bffa17 	ldw	r2,-24(fp)
   182bc:	10c4b03a 	or	r2,r2,r3
   182c0:	e0bffa15 	stw	r2,-24(fp)
   182c4:	00001706 	br	18324 <alt_up_pixel_buffer_dma_draw+0x10c>
   182c8:	e0bffb17 	ldw	r2,-20(fp)
   182cc:	10c01217 	ldw	r3,72(r2)
   182d0:	e0bffd17 	ldw	r2,-12(fp)
   182d4:	1886703a 	and	r3,r3,r2
   182d8:	e0bffb17 	ldw	r2,-20(fp)
   182dc:	10801117 	ldw	r2,68(r2)
   182e0:	1886983a 	sll	r3,r3,r2
   182e4:	e0bffa17 	ldw	r2,-24(fp)
   182e8:	10c5883a 	add	r2,r2,r3
   182ec:	e0bffa15 	stw	r2,-24(fp)
   182f0:	e0bffb17 	ldw	r2,-20(fp)
   182f4:	10c01417 	ldw	r3,80(r2)
   182f8:	e0bffe17 	ldw	r2,-8(fp)
   182fc:	1886703a 	and	r3,r3,r2
   18300:	e0bffb17 	ldw	r2,-20(fp)
   18304:	10800f17 	ldw	r2,60(r2)
   18308:	1887383a 	mul	r3,r3,r2
   1830c:	e0bffb17 	ldw	r2,-20(fp)
   18310:	10801117 	ldw	r2,68(r2)
   18314:	1886983a 	sll	r3,r3,r2
   18318:	e0bffa17 	ldw	r2,-24(fp)
   1831c:	10c5883a 	add	r2,r2,r3
   18320:	e0bffa15 	stw	r2,-24(fp)
   18324:	e0bffb17 	ldw	r2,-20(fp)
   18328:	10800e17 	ldw	r2,56(r2)
   1832c:	10800058 	cmpnei	r2,r2,1
   18330:	1000081e 	bne	r2,zero,18354 <alt_up_pixel_buffer_dma_draw+0x13c>
   18334:	e0bffb17 	ldw	r2,-20(fp)
   18338:	10800c17 	ldw	r2,48(r2)
   1833c:	1007883a 	mov	r3,r2
   18340:	e0bffa17 	ldw	r2,-24(fp)
   18344:	1885883a 	add	r2,r3,r2
   18348:	e0fffc17 	ldw	r3,-16(fp)
   1834c:	10c00025 	stbio	r3,0(r2)
   18350:	00001306 	br	183a0 <alt_up_pixel_buffer_dma_draw+0x188>
   18354:	e0bffb17 	ldw	r2,-20(fp)
   18358:	10800e17 	ldw	r2,56(r2)
   1835c:	10800098 	cmpnei	r2,r2,2
   18360:	1000081e 	bne	r2,zero,18384 <alt_up_pixel_buffer_dma_draw+0x16c>
   18364:	e0bffb17 	ldw	r2,-20(fp)
   18368:	10800c17 	ldw	r2,48(r2)
   1836c:	1007883a 	mov	r3,r2
   18370:	e0bffa17 	ldw	r2,-24(fp)
   18374:	1885883a 	add	r2,r3,r2
   18378:	e0fffc17 	ldw	r3,-16(fp)
   1837c:	10c0002d 	sthio	r3,0(r2)
   18380:	00000706 	br	183a0 <alt_up_pixel_buffer_dma_draw+0x188>
   18384:	e0bffb17 	ldw	r2,-20(fp)
   18388:	10800c17 	ldw	r2,48(r2)
   1838c:	1007883a 	mov	r3,r2
   18390:	e0bffa17 	ldw	r2,-24(fp)
   18394:	1885883a 	add	r2,r3,r2
   18398:	e0fffc17 	ldw	r3,-16(fp)
   1839c:	10c00035 	stwio	r3,0(r2)
   183a0:	e03fff15 	stw	zero,-4(fp)
   183a4:	e0bfff17 	ldw	r2,-4(fp)
   183a8:	e037883a 	mov	sp,fp
   183ac:	df000017 	ldw	fp,0(sp)
   183b0:	dec00104 	addi	sp,sp,4
   183b4:	f800283a 	ret

000183b8 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
   183b8:	defffd04 	addi	sp,sp,-12
   183bc:	df000215 	stw	fp,8(sp)
   183c0:	df000204 	addi	fp,sp,8
   183c4:	e13ffe15 	stw	r4,-8(fp)
   183c8:	e17fff15 	stw	r5,-4(fp)
   183cc:	e0bffe17 	ldw	r2,-8(fp)
   183d0:	10800a17 	ldw	r2,40(r2)
   183d4:	10800104 	addi	r2,r2,4
   183d8:	e0ffff17 	ldw	r3,-4(fp)
   183dc:	10c00035 	stwio	r3,0(r2)
   183e0:	e0bffe17 	ldw	r2,-8(fp)
   183e4:	10800a17 	ldw	r2,40(r2)
   183e8:	10800104 	addi	r2,r2,4
   183ec:	10800037 	ldwio	r2,0(r2)
   183f0:	1007883a 	mov	r3,r2
   183f4:	e0bffe17 	ldw	r2,-8(fp)
   183f8:	10c00c15 	stw	r3,48(r2)
   183fc:	0005883a 	mov	r2,zero
   18400:	e037883a 	mov	sp,fp
   18404:	df000017 	ldw	fp,0(sp)
   18408:	dec00104 	addi	sp,sp,4
   1840c:	f800283a 	ret

00018410 <alt_up_pixel_buffer_dma_swap_buffers>:
   18410:	defffe04 	addi	sp,sp,-8
   18414:	df000115 	stw	fp,4(sp)
   18418:	df000104 	addi	fp,sp,4
   1841c:	e13fff15 	stw	r4,-4(fp)
   18420:	e0bfff17 	ldw	r2,-4(fp)
   18424:	11000c17 	ldw	r4,48(r2)
   18428:	e0bfff17 	ldw	r2,-4(fp)
   1842c:	10800a17 	ldw	r2,40(r2)
   18430:	1007883a 	mov	r3,r2
   18434:	00800044 	movi	r2,1
   18438:	18800035 	stwio	r2,0(r3)
   1843c:	e0bfff17 	ldw	r2,-4(fp)
   18440:	10c00b17 	ldw	r3,44(r2)
   18444:	e0bfff17 	ldw	r2,-4(fp)
   18448:	10c00c15 	stw	r3,48(r2)
   1844c:	e0bfff17 	ldw	r2,-4(fp)
   18450:	11000b15 	stw	r4,44(r2)
   18454:	0005883a 	mov	r2,zero
   18458:	e037883a 	mov	sp,fp
   1845c:	df000017 	ldw	fp,0(sp)
   18460:	dec00104 	addi	sp,sp,4
   18464:	f800283a 	ret

00018468 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
   18468:	defffe04 	addi	sp,sp,-8
   1846c:	df000115 	stw	fp,4(sp)
   18470:	df000104 	addi	fp,sp,4
   18474:	e13fff15 	stw	r4,-4(fp)
   18478:	e0bfff17 	ldw	r2,-4(fp)
   1847c:	10800a17 	ldw	r2,40(r2)
   18480:	10800304 	addi	r2,r2,12
   18484:	10800037 	ldwio	r2,0(r2)
   18488:	1080004c 	andi	r2,r2,1
   1848c:	e037883a 	mov	sp,fp
   18490:	df000017 	ldw	fp,0(sp)
   18494:	dec00104 	addi	sp,sp,4
   18498:	f800283a 	ret

0001849c <alt_up_pixel_buffer_dma_clear_screen>:
   1849c:	defff604 	addi	sp,sp,-40
   184a0:	df000915 	stw	fp,36(sp)
   184a4:	df000904 	addi	fp,sp,36
   184a8:	e13ff715 	stw	r4,-36(fp)
   184ac:	e17ff815 	stw	r5,-32(fp)
   184b0:	e0bff817 	ldw	r2,-32(fp)
   184b4:	10800058 	cmpnei	r2,r2,1
   184b8:	1000041e 	bne	r2,zero,184cc <alt_up_pixel_buffer_dma_clear_screen+0x30>
   184bc:	e0bff717 	ldw	r2,-36(fp)
   184c0:	10800c17 	ldw	r2,48(r2)
   184c4:	e0bfff15 	stw	r2,-4(fp)
   184c8:	00000306 	br	184d8 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
   184cc:	e0bff717 	ldw	r2,-36(fp)
   184d0:	10800b17 	ldw	r2,44(r2)
   184d4:	e0bfff15 	stw	r2,-4(fp)
   184d8:	e0bff717 	ldw	r2,-36(fp)
   184dc:	10800f17 	ldw	r2,60(r2)
   184e0:	e0bffe15 	stw	r2,-8(fp)
   184e4:	e0bff717 	ldw	r2,-36(fp)
   184e8:	10800e17 	ldw	r2,56(r2)
   184ec:	10800098 	cmpnei	r2,r2,2
   184f0:	1000051e 	bne	r2,zero,18508 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
   184f4:	e0fffe17 	ldw	r3,-8(fp)
   184f8:	e0fffe17 	ldw	r3,-8(fp)
   184fc:	18c5883a 	add	r2,r3,r3
   18500:	e0bffe15 	stw	r2,-8(fp)
   18504:	00000506 	br	1851c <alt_up_pixel_buffer_dma_clear_screen+0x80>
   18508:	e13ffe17 	ldw	r4,-8(fp)
   1850c:	e13ffe17 	ldw	r4,-8(fp)
   18510:	2105883a 	add	r2,r4,r4
   18514:	1085883a 	add	r2,r2,r2
   18518:	e0bffe15 	stw	r2,-8(fp)
   1851c:	e0bff717 	ldw	r2,-36(fp)
   18520:	10801017 	ldw	r2,64(r2)
   18524:	e0bffd15 	stw	r2,-12(fp)
   18528:	e0bff717 	ldw	r2,-36(fp)
   1852c:	10800d17 	ldw	r2,52(r2)
   18530:	1004c03a 	cmpne	r2,r2,zero
   18534:	10001e1e 	bne	r2,zero,185b0 <alt_up_pixel_buffer_dma_clear_screen+0x114>
   18538:	e0bff717 	ldw	r2,-36(fp)
   1853c:	10801317 	ldw	r2,76(r2)
   18540:	e0bffa15 	stw	r2,-24(fp)
   18544:	e03ffb15 	stw	zero,-20(fp)
   18548:	00001506 	br	185a0 <alt_up_pixel_buffer_dma_clear_screen+0x104>
   1854c:	e03ffc15 	stw	zero,-16(fp)
   18550:	00000706 	br	18570 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
   18554:	e0ffff17 	ldw	r3,-4(fp)
   18558:	e0bffc17 	ldw	r2,-16(fp)
   1855c:	1885883a 	add	r2,r3,r2
   18560:	10000035 	stwio	zero,0(r2)
   18564:	e0bffc17 	ldw	r2,-16(fp)
   18568:	10800104 	addi	r2,r2,4
   1856c:	e0bffc15 	stw	r2,-16(fp)
   18570:	e0fffc17 	ldw	r3,-16(fp)
   18574:	e13ffe17 	ldw	r4,-8(fp)
   18578:	193ff636 	bltu	r3,r4,18554 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
   1857c:	e0fffa17 	ldw	r3,-24(fp)
   18580:	00800044 	movi	r2,1
   18584:	10c4983a 	sll	r2,r2,r3
   18588:	e0ffff17 	ldw	r3,-4(fp)
   1858c:	1887883a 	add	r3,r3,r2
   18590:	e0ffff15 	stw	r3,-4(fp)
   18594:	e13ffb17 	ldw	r4,-20(fp)
   18598:	21000044 	addi	r4,r4,1
   1859c:	e13ffb15 	stw	r4,-20(fp)
   185a0:	e0bffb17 	ldw	r2,-20(fp)
   185a4:	e0fffd17 	ldw	r3,-12(fp)
   185a8:	10ffe836 	bltu	r2,r3,1854c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   185ac:	00001006 	br	185f0 <alt_up_pixel_buffer_dma_clear_screen+0x154>
   185b0:	e13ffd17 	ldw	r4,-12(fp)
   185b4:	e0bffe17 	ldw	r2,-8(fp)
   185b8:	2089383a 	mul	r4,r4,r2
   185bc:	e13ffd15 	stw	r4,-12(fp)
   185c0:	e03ff915 	stw	zero,-28(fp)
   185c4:	00000706 	br	185e4 <alt_up_pixel_buffer_dma_clear_screen+0x148>
   185c8:	e0ffff17 	ldw	r3,-4(fp)
   185cc:	e0bff917 	ldw	r2,-28(fp)
   185d0:	1885883a 	add	r2,r3,r2
   185d4:	10000035 	stwio	zero,0(r2)
   185d8:	e0fff917 	ldw	r3,-28(fp)
   185dc:	18c00104 	addi	r3,r3,4
   185e0:	e0fff915 	stw	r3,-28(fp)
   185e4:	e0bff917 	ldw	r2,-28(fp)
   185e8:	e13ffd17 	ldw	r4,-12(fp)
   185ec:	113ff636 	bltu	r2,r4,185c8 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
   185f0:	e037883a 	mov	sp,fp
   185f4:	df000017 	ldw	fp,0(sp)
   185f8:	dec00104 	addi	sp,sp,4
   185fc:	f800283a 	ret

00018600 <alt_up_pixel_buffer_dma_draw_box>:
   18600:	deffed04 	addi	sp,sp,-76
   18604:	df001215 	stw	fp,72(sp)
   18608:	df001204 	addi	fp,sp,72
   1860c:	e13fee15 	stw	r4,-72(fp)
   18610:	e17fef15 	stw	r5,-68(fp)
   18614:	e1bff015 	stw	r6,-64(fp)
   18618:	e1fff115 	stw	r7,-60(fp)
   1861c:	e0bfee17 	ldw	r2,-72(fp)
   18620:	10800f17 	ldw	r2,60(r2)
   18624:	e0bffe15 	stw	r2,-8(fp)
   18628:	e0bfee17 	ldw	r2,-72(fp)
   1862c:	10801017 	ldw	r2,64(r2)
   18630:	e0bffd15 	stw	r2,-12(fp)
   18634:	e0bfef17 	ldw	r2,-68(fp)
   18638:	e0bffb15 	stw	r2,-20(fp)
   1863c:	e0fff117 	ldw	r3,-60(fp)
   18640:	e0fffa15 	stw	r3,-24(fp)
   18644:	e13ff017 	ldw	r4,-64(fp)
   18648:	e13ff915 	stw	r4,-28(fp)
   1864c:	e0800117 	ldw	r2,4(fp)
   18650:	e0bff815 	stw	r2,-32(fp)
   18654:	e0c00217 	ldw	r3,8(fp)
   18658:	e0fff715 	stw	r3,-36(fp)
   1865c:	e13ffa17 	ldw	r4,-24(fp)
   18660:	e0bffb17 	ldw	r2,-20(fp)
   18664:	2080062e 	bgeu	r4,r2,18680 <alt_up_pixel_buffer_dma_draw_box+0x80>
   18668:	e0fffb17 	ldw	r3,-20(fp)
   1866c:	e0fffc15 	stw	r3,-16(fp)
   18670:	e13ffa17 	ldw	r4,-24(fp)
   18674:	e13ffb15 	stw	r4,-20(fp)
   18678:	e0bffc17 	ldw	r2,-16(fp)
   1867c:	e0bffa15 	stw	r2,-24(fp)
   18680:	e0fff817 	ldw	r3,-32(fp)
   18684:	e13ff917 	ldw	r4,-28(fp)
   18688:	1900062e 	bgeu	r3,r4,186a4 <alt_up_pixel_buffer_dma_draw_box+0xa4>
   1868c:	e0bff917 	ldw	r2,-28(fp)
   18690:	e0bffc15 	stw	r2,-16(fp)
   18694:	e0fff817 	ldw	r3,-32(fp)
   18698:	e0fff915 	stw	r3,-28(fp)
   1869c:	e13ffc17 	ldw	r4,-16(fp)
   186a0:	e13ff815 	stw	r4,-32(fp)
   186a4:	e0bffb17 	ldw	r2,-20(fp)
   186a8:	e0fffe17 	ldw	r3,-8(fp)
   186ac:	10c10d2e 	bgeu	r2,r3,18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   186b0:	e13ff917 	ldw	r4,-28(fp)
   186b4:	e0bffd17 	ldw	r2,-12(fp)
   186b8:	20800136 	bltu	r4,r2,186c0 <alt_up_pixel_buffer_dma_draw_box+0xc0>
   186bc:	00010906 	br	18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   186c0:	e0fffa17 	ldw	r3,-24(fp)
   186c4:	e13ffe17 	ldw	r4,-8(fp)
   186c8:	19000336 	bltu	r3,r4,186d8 <alt_up_pixel_buffer_dma_draw_box+0xd8>
   186cc:	e0bffe17 	ldw	r2,-8(fp)
   186d0:	10bfffc4 	addi	r2,r2,-1
   186d4:	e0bffa15 	stw	r2,-24(fp)
   186d8:	e0fff817 	ldw	r3,-32(fp)
   186dc:	e13ffd17 	ldw	r4,-12(fp)
   186e0:	19000336 	bltu	r3,r4,186f0 <alt_up_pixel_buffer_dma_draw_box+0xf0>
   186e4:	e0bffd17 	ldw	r2,-12(fp)
   186e8:	10bfffc4 	addi	r2,r2,-1
   186ec:	e0bff815 	stw	r2,-32(fp)
   186f0:	e0800317 	ldw	r2,12(fp)
   186f4:	10800058 	cmpnei	r2,r2,1
   186f8:	1000041e 	bne	r2,zero,1870c <alt_up_pixel_buffer_dma_draw_box+0x10c>
   186fc:	e0bfee17 	ldw	r2,-72(fp)
   18700:	10800c17 	ldw	r2,48(r2)
   18704:	e0bfff15 	stw	r2,-4(fp)
   18708:	00000306 	br	18718 <alt_up_pixel_buffer_dma_draw_box+0x118>
   1870c:	e0bfee17 	ldw	r2,-72(fp)
   18710:	10800b17 	ldw	r2,44(r2)
   18714:	e0bfff15 	stw	r2,-4(fp)
   18718:	e0bfee17 	ldw	r2,-72(fp)
   1871c:	10800d17 	ldw	r2,52(r2)
   18720:	1004c03a 	cmpne	r2,r2,zero
   18724:	1000721e 	bne	r2,zero,188f0 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
   18728:	e0bfee17 	ldw	r2,-72(fp)
   1872c:	10801317 	ldw	r2,76(r2)
   18730:	e0bff415 	stw	r2,-48(fp)
   18734:	e0bff417 	ldw	r2,-48(fp)
   18738:	e0fff917 	ldw	r3,-28(fp)
   1873c:	1884983a 	sll	r2,r3,r2
   18740:	e13fff17 	ldw	r4,-4(fp)
   18744:	2089883a 	add	r4,r4,r2
   18748:	e13fff15 	stw	r4,-4(fp)
   1874c:	e0bfee17 	ldw	r2,-72(fp)
   18750:	10800e17 	ldw	r2,56(r2)
   18754:	10800058 	cmpnei	r2,r2,1
   18758:	10001e1e 	bne	r2,zero,187d4 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
   1875c:	e0bff917 	ldw	r2,-28(fp)
   18760:	e0bff515 	stw	r2,-44(fp)
   18764:	00001706 	br	187c4 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
   18768:	e0fffb17 	ldw	r3,-20(fp)
   1876c:	e0fff615 	stw	r3,-40(fp)
   18770:	00000806 	br	18794 <alt_up_pixel_buffer_dma_draw_box+0x194>
   18774:	e0ffff17 	ldw	r3,-4(fp)
   18778:	e0bff617 	ldw	r2,-40(fp)
   1877c:	1885883a 	add	r2,r3,r2
   18780:	e0fff717 	ldw	r3,-36(fp)
   18784:	10c00025 	stbio	r3,0(r2)
   18788:	e13ff617 	ldw	r4,-40(fp)
   1878c:	21000044 	addi	r4,r4,1
   18790:	e13ff615 	stw	r4,-40(fp)
   18794:	e0bffa17 	ldw	r2,-24(fp)
   18798:	e0fff617 	ldw	r3,-40(fp)
   1879c:	10fff52e 	bgeu	r2,r3,18774 <alt_up_pixel_buffer_dma_draw_box+0x174>
   187a0:	e0fff417 	ldw	r3,-48(fp)
   187a4:	00800044 	movi	r2,1
   187a8:	10c4983a 	sll	r2,r2,r3
   187ac:	e13fff17 	ldw	r4,-4(fp)
   187b0:	2089883a 	add	r4,r4,r2
   187b4:	e13fff15 	stw	r4,-4(fp)
   187b8:	e0bff517 	ldw	r2,-44(fp)
   187bc:	10800044 	addi	r2,r2,1
   187c0:	e0bff515 	stw	r2,-44(fp)
   187c4:	e0fff817 	ldw	r3,-32(fp)
   187c8:	e13ff517 	ldw	r4,-44(fp)
   187cc:	193fe62e 	bgeu	r3,r4,18768 <alt_up_pixel_buffer_dma_draw_box+0x168>
   187d0:	0000c406 	br	18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   187d4:	e0bfee17 	ldw	r2,-72(fp)
   187d8:	10800e17 	ldw	r2,56(r2)
   187dc:	10800098 	cmpnei	r2,r2,2
   187e0:	1000211e 	bne	r2,zero,18868 <alt_up_pixel_buffer_dma_draw_box+0x268>
   187e4:	e0bff917 	ldw	r2,-28(fp)
   187e8:	e0bff515 	stw	r2,-44(fp)
   187ec:	00001a06 	br	18858 <alt_up_pixel_buffer_dma_draw_box+0x258>
   187f0:	e0fffb17 	ldw	r3,-20(fp)
   187f4:	e0fff615 	stw	r3,-40(fp)
   187f8:	00000b06 	br	18828 <alt_up_pixel_buffer_dma_draw_box+0x228>
   187fc:	e13ff617 	ldw	r4,-40(fp)
   18800:	e13ff617 	ldw	r4,-40(fp)
   18804:	2105883a 	add	r2,r4,r4
   18808:	1007883a 	mov	r3,r2
   1880c:	e0bfff17 	ldw	r2,-4(fp)
   18810:	1885883a 	add	r2,r3,r2
   18814:	e0fff717 	ldw	r3,-36(fp)
   18818:	10c0002d 	sthio	r3,0(r2)
   1881c:	e0bff617 	ldw	r2,-40(fp)
   18820:	10800044 	addi	r2,r2,1
   18824:	e0bff615 	stw	r2,-40(fp)
   18828:	e0fffa17 	ldw	r3,-24(fp)
   1882c:	e13ff617 	ldw	r4,-40(fp)
   18830:	193ff22e 	bgeu	r3,r4,187fc <alt_up_pixel_buffer_dma_draw_box+0x1fc>
   18834:	e0fff417 	ldw	r3,-48(fp)
   18838:	00800044 	movi	r2,1
   1883c:	10c4983a 	sll	r2,r2,r3
   18840:	e0ffff17 	ldw	r3,-4(fp)
   18844:	1887883a 	add	r3,r3,r2
   18848:	e0ffff15 	stw	r3,-4(fp)
   1884c:	e13ff517 	ldw	r4,-44(fp)
   18850:	21000044 	addi	r4,r4,1
   18854:	e13ff515 	stw	r4,-44(fp)
   18858:	e0bff817 	ldw	r2,-32(fp)
   1885c:	e0fff517 	ldw	r3,-44(fp)
   18860:	10ffe32e 	bgeu	r2,r3,187f0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
   18864:	00009f06 	br	18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   18868:	e13ff917 	ldw	r4,-28(fp)
   1886c:	e13ff515 	stw	r4,-44(fp)
   18870:	00001b06 	br	188e0 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
   18874:	e0bffb17 	ldw	r2,-20(fp)
   18878:	e0bff615 	stw	r2,-40(fp)
   1887c:	00000c06 	br	188b0 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
   18880:	e0fff617 	ldw	r3,-40(fp)
   18884:	e0fff617 	ldw	r3,-40(fp)
   18888:	18c5883a 	add	r2,r3,r3
   1888c:	1085883a 	add	r2,r2,r2
   18890:	1007883a 	mov	r3,r2
   18894:	e0bfff17 	ldw	r2,-4(fp)
   18898:	1885883a 	add	r2,r3,r2
   1889c:	e0fff717 	ldw	r3,-36(fp)
   188a0:	10c00035 	stwio	r3,0(r2)
   188a4:	e13ff617 	ldw	r4,-40(fp)
   188a8:	21000044 	addi	r4,r4,1
   188ac:	e13ff615 	stw	r4,-40(fp)
   188b0:	e0bffa17 	ldw	r2,-24(fp)
   188b4:	e0fff617 	ldw	r3,-40(fp)
   188b8:	10fff12e 	bgeu	r2,r3,18880 <alt_up_pixel_buffer_dma_draw_box+0x280>
   188bc:	e0fff417 	ldw	r3,-48(fp)
   188c0:	00800044 	movi	r2,1
   188c4:	10c4983a 	sll	r2,r2,r3
   188c8:	e13fff17 	ldw	r4,-4(fp)
   188cc:	2089883a 	add	r4,r4,r2
   188d0:	e13fff15 	stw	r4,-4(fp)
   188d4:	e0bff517 	ldw	r2,-44(fp)
   188d8:	10800044 	addi	r2,r2,1
   188dc:	e0bff515 	stw	r2,-44(fp)
   188e0:	e0fff817 	ldw	r3,-32(fp)
   188e4:	e13ff517 	ldw	r4,-44(fp)
   188e8:	193fe22e 	bgeu	r3,r4,18874 <alt_up_pixel_buffer_dma_draw_box+0x274>
   188ec:	00007d06 	br	18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   188f0:	e0bfee17 	ldw	r2,-72(fp)
   188f4:	10800e17 	ldw	r2,56(r2)
   188f8:	10800058 	cmpnei	r2,r2,1
   188fc:	1000221e 	bne	r2,zero,18988 <alt_up_pixel_buffer_dma_draw_box+0x388>
   18900:	e0fff917 	ldw	r3,-28(fp)
   18904:	e13ffe17 	ldw	r4,-8(fp)
   18908:	1905383a 	mul	r2,r3,r4
   1890c:	e0ffff17 	ldw	r3,-4(fp)
   18910:	1887883a 	add	r3,r3,r2
   18914:	e0ffff15 	stw	r3,-4(fp)
   18918:	e13ff917 	ldw	r4,-28(fp)
   1891c:	e13ff215 	stw	r4,-56(fp)
   18920:	00001506 	br	18978 <alt_up_pixel_buffer_dma_draw_box+0x378>
   18924:	e0bffb17 	ldw	r2,-20(fp)
   18928:	e0bff315 	stw	r2,-52(fp)
   1892c:	00000806 	br	18950 <alt_up_pixel_buffer_dma_draw_box+0x350>
   18930:	e0ffff17 	ldw	r3,-4(fp)
   18934:	e0bff317 	ldw	r2,-52(fp)
   18938:	1885883a 	add	r2,r3,r2
   1893c:	e0fff717 	ldw	r3,-36(fp)
   18940:	10c00025 	stbio	r3,0(r2)
   18944:	e0fff317 	ldw	r3,-52(fp)
   18948:	18c00044 	addi	r3,r3,1
   1894c:	e0fff315 	stw	r3,-52(fp)
   18950:	e13ffa17 	ldw	r4,-24(fp)
   18954:	e0bff317 	ldw	r2,-52(fp)
   18958:	20bff52e 	bgeu	r4,r2,18930 <alt_up_pixel_buffer_dma_draw_box+0x330>
   1895c:	e0ffff17 	ldw	r3,-4(fp)
   18960:	e13ffe17 	ldw	r4,-8(fp)
   18964:	1907883a 	add	r3,r3,r4
   18968:	e0ffff15 	stw	r3,-4(fp)
   1896c:	e0bff217 	ldw	r2,-56(fp)
   18970:	10800044 	addi	r2,r2,1
   18974:	e0bff215 	stw	r2,-56(fp)
   18978:	e0fff817 	ldw	r3,-32(fp)
   1897c:	e13ff217 	ldw	r4,-56(fp)
   18980:	193fe82e 	bgeu	r3,r4,18924 <alt_up_pixel_buffer_dma_draw_box+0x324>
   18984:	00005706 	br	18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   18988:	e0bfee17 	ldw	r2,-72(fp)
   1898c:	10800e17 	ldw	r2,56(r2)
   18990:	10800098 	cmpnei	r2,r2,2
   18994:	1000291e 	bne	r2,zero,18a3c <alt_up_pixel_buffer_dma_draw_box+0x43c>
   18998:	e0fffe17 	ldw	r3,-8(fp)
   1899c:	e0fffe17 	ldw	r3,-8(fp)
   189a0:	18c5883a 	add	r2,r3,r3
   189a4:	e0bffe15 	stw	r2,-8(fp)
   189a8:	e13ff917 	ldw	r4,-28(fp)
   189ac:	e0fffe17 	ldw	r3,-8(fp)
   189b0:	20c5383a 	mul	r2,r4,r3
   189b4:	e13fff17 	ldw	r4,-4(fp)
   189b8:	2089883a 	add	r4,r4,r2
   189bc:	e13fff15 	stw	r4,-4(fp)
   189c0:	e0bff917 	ldw	r2,-28(fp)
   189c4:	e0bff215 	stw	r2,-56(fp)
   189c8:	00001806 	br	18a2c <alt_up_pixel_buffer_dma_draw_box+0x42c>
   189cc:	e0fffb17 	ldw	r3,-20(fp)
   189d0:	e0fff315 	stw	r3,-52(fp)
   189d4:	00000b06 	br	18a04 <alt_up_pixel_buffer_dma_draw_box+0x404>
   189d8:	e13ff317 	ldw	r4,-52(fp)
   189dc:	e13ff317 	ldw	r4,-52(fp)
   189e0:	2105883a 	add	r2,r4,r4
   189e4:	1007883a 	mov	r3,r2
   189e8:	e0bfff17 	ldw	r2,-4(fp)
   189ec:	1885883a 	add	r2,r3,r2
   189f0:	e0fff717 	ldw	r3,-36(fp)
   189f4:	10c0002d 	sthio	r3,0(r2)
   189f8:	e0bff317 	ldw	r2,-52(fp)
   189fc:	10800044 	addi	r2,r2,1
   18a00:	e0bff315 	stw	r2,-52(fp)
   18a04:	e0fffa17 	ldw	r3,-24(fp)
   18a08:	e13ff317 	ldw	r4,-52(fp)
   18a0c:	193ff22e 	bgeu	r3,r4,189d8 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
   18a10:	e0bfff17 	ldw	r2,-4(fp)
   18a14:	e0fffe17 	ldw	r3,-8(fp)
   18a18:	10c5883a 	add	r2,r2,r3
   18a1c:	e0bfff15 	stw	r2,-4(fp)
   18a20:	e13ff217 	ldw	r4,-56(fp)
   18a24:	21000044 	addi	r4,r4,1
   18a28:	e13ff215 	stw	r4,-56(fp)
   18a2c:	e0bff817 	ldw	r2,-32(fp)
   18a30:	e0fff217 	ldw	r3,-56(fp)
   18a34:	10ffe52e 	bgeu	r2,r3,189cc <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   18a38:	00002a06 	br	18ae4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   18a3c:	e13ffe17 	ldw	r4,-8(fp)
   18a40:	e13ffe17 	ldw	r4,-8(fp)
   18a44:	2105883a 	add	r2,r4,r4
   18a48:	1085883a 	add	r2,r2,r2
   18a4c:	e0bffe15 	stw	r2,-8(fp)
   18a50:	e0fff917 	ldw	r3,-28(fp)
   18a54:	e13ffe17 	ldw	r4,-8(fp)
   18a58:	1905383a 	mul	r2,r3,r4
   18a5c:	e0ffff17 	ldw	r3,-4(fp)
   18a60:	1887883a 	add	r3,r3,r2
   18a64:	e0ffff15 	stw	r3,-4(fp)
   18a68:	e13ff917 	ldw	r4,-28(fp)
   18a6c:	e13ff215 	stw	r4,-56(fp)
   18a70:	00001906 	br	18ad8 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
   18a74:	e0bffb17 	ldw	r2,-20(fp)
   18a78:	e0bff315 	stw	r2,-52(fp)
   18a7c:	00000c06 	br	18ab0 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
   18a80:	e0fff317 	ldw	r3,-52(fp)
   18a84:	e0fff317 	ldw	r3,-52(fp)
   18a88:	18c5883a 	add	r2,r3,r3
   18a8c:	1085883a 	add	r2,r2,r2
   18a90:	1007883a 	mov	r3,r2
   18a94:	e0bfff17 	ldw	r2,-4(fp)
   18a98:	1885883a 	add	r2,r3,r2
   18a9c:	e0fff717 	ldw	r3,-36(fp)
   18aa0:	10c00035 	stwio	r3,0(r2)
   18aa4:	e13ff317 	ldw	r4,-52(fp)
   18aa8:	21000044 	addi	r4,r4,1
   18aac:	e13ff315 	stw	r4,-52(fp)
   18ab0:	e0bffa17 	ldw	r2,-24(fp)
   18ab4:	e0fff317 	ldw	r3,-52(fp)
   18ab8:	10fff12e 	bgeu	r2,r3,18a80 <alt_up_pixel_buffer_dma_draw_box+0x480>
   18abc:	e13fff17 	ldw	r4,-4(fp)
   18ac0:	e0bffe17 	ldw	r2,-8(fp)
   18ac4:	2089883a 	add	r4,r4,r2
   18ac8:	e13fff15 	stw	r4,-4(fp)
   18acc:	e0fff217 	ldw	r3,-56(fp)
   18ad0:	18c00044 	addi	r3,r3,1
   18ad4:	e0fff215 	stw	r3,-56(fp)
   18ad8:	e13ff817 	ldw	r4,-32(fp)
   18adc:	e0bff217 	ldw	r2,-56(fp)
   18ae0:	20bfe42e 	bgeu	r4,r2,18a74 <alt_up_pixel_buffer_dma_draw_box+0x474>
   18ae4:	e037883a 	mov	sp,fp
   18ae8:	df000017 	ldw	fp,0(sp)
   18aec:	dec00104 	addi	sp,sp,4
   18af0:	f800283a 	ret

00018af4 <alt_up_pixel_buffer_dma_draw_hline>:
   18af4:	defff204 	addi	sp,sp,-56
   18af8:	df000d15 	stw	fp,52(sp)
   18afc:	df000d04 	addi	fp,sp,52
   18b00:	e13ff315 	stw	r4,-52(fp)
   18b04:	e17ff415 	stw	r5,-48(fp)
   18b08:	e1bff515 	stw	r6,-44(fp)
   18b0c:	e1fff615 	stw	r7,-40(fp)
   18b10:	e0bff317 	ldw	r2,-52(fp)
   18b14:	10800f17 	ldw	r2,60(r2)
   18b18:	e0bffe15 	stw	r2,-8(fp)
   18b1c:	e0bff317 	ldw	r2,-52(fp)
   18b20:	10801017 	ldw	r2,64(r2)
   18b24:	e0bffd15 	stw	r2,-12(fp)
   18b28:	e0bff417 	ldw	r2,-48(fp)
   18b2c:	e0bffc15 	stw	r2,-16(fp)
   18b30:	e0fff517 	ldw	r3,-44(fp)
   18b34:	e0fffb15 	stw	r3,-20(fp)
   18b38:	e13ff617 	ldw	r4,-40(fp)
   18b3c:	e13ffa15 	stw	r4,-24(fp)
   18b40:	e0800117 	ldw	r2,4(fp)
   18b44:	e0bff915 	stw	r2,-28(fp)
   18b48:	e0fffb17 	ldw	r3,-20(fp)
   18b4c:	e13ffc17 	ldw	r4,-16(fp)
   18b50:	1900042e 	bgeu	r3,r4,18b64 <alt_up_pixel_buffer_dma_draw_hline+0x70>
   18b54:	e0bffc17 	ldw	r2,-16(fp)
   18b58:	e0fffb17 	ldw	r3,-20(fp)
   18b5c:	e0fffc15 	stw	r3,-16(fp)
   18b60:	e0bffb15 	stw	r2,-20(fp)
   18b64:	e13ffc17 	ldw	r4,-16(fp)
   18b68:	e0bffe17 	ldw	r2,-8(fp)
   18b6c:	2080b12e 	bgeu	r4,r2,18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18b70:	e0fffa17 	ldw	r3,-24(fp)
   18b74:	e13ffd17 	ldw	r4,-12(fp)
   18b78:	19000136 	bltu	r3,r4,18b80 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
   18b7c:	0000ad06 	br	18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18b80:	e0bffb17 	ldw	r2,-20(fp)
   18b84:	e0fffe17 	ldw	r3,-8(fp)
   18b88:	10c00336 	bltu	r2,r3,18b98 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
   18b8c:	e13ffe17 	ldw	r4,-8(fp)
   18b90:	213fffc4 	addi	r4,r4,-1
   18b94:	e13ffb15 	stw	r4,-20(fp)
   18b98:	e0800217 	ldw	r2,8(fp)
   18b9c:	10800058 	cmpnei	r2,r2,1
   18ba0:	1000041e 	bne	r2,zero,18bb4 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
   18ba4:	e0bff317 	ldw	r2,-52(fp)
   18ba8:	10800c17 	ldw	r2,48(r2)
   18bac:	e0bfff15 	stw	r2,-4(fp)
   18bb0:	00000306 	br	18bc0 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
   18bb4:	e0bff317 	ldw	r2,-52(fp)
   18bb8:	10800b17 	ldw	r2,44(r2)
   18bbc:	e0bfff15 	stw	r2,-4(fp)
   18bc0:	e0bff317 	ldw	r2,-52(fp)
   18bc4:	10800d17 	ldw	r2,52(r2)
   18bc8:	1004c03a 	cmpne	r2,r2,zero
   18bcc:	1000431e 	bne	r2,zero,18cdc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
   18bd0:	e0bff317 	ldw	r2,-52(fp)
   18bd4:	10801317 	ldw	r2,76(r2)
   18bd8:	e0fffa17 	ldw	r3,-24(fp)
   18bdc:	1884983a 	sll	r2,r3,r2
   18be0:	e13fff17 	ldw	r4,-4(fp)
   18be4:	2089883a 	add	r4,r4,r2
   18be8:	e13fff15 	stw	r4,-4(fp)
   18bec:	e0bff317 	ldw	r2,-52(fp)
   18bf0:	10800e17 	ldw	r2,56(r2)
   18bf4:	10800058 	cmpnei	r2,r2,1
   18bf8:	10000f1e 	bne	r2,zero,18c38 <alt_up_pixel_buffer_dma_draw_hline+0x144>
   18bfc:	e0bffc17 	ldw	r2,-16(fp)
   18c00:	e0bff815 	stw	r2,-32(fp)
   18c04:	00000806 	br	18c28 <alt_up_pixel_buffer_dma_draw_hline+0x134>
   18c08:	e0ffff17 	ldw	r3,-4(fp)
   18c0c:	e0bff817 	ldw	r2,-32(fp)
   18c10:	1885883a 	add	r2,r3,r2
   18c14:	e0fff917 	ldw	r3,-28(fp)
   18c18:	10c00025 	stbio	r3,0(r2)
   18c1c:	e0fff817 	ldw	r3,-32(fp)
   18c20:	18c00044 	addi	r3,r3,1
   18c24:	e0fff815 	stw	r3,-32(fp)
   18c28:	e13ffb17 	ldw	r4,-20(fp)
   18c2c:	e0bff817 	ldw	r2,-32(fp)
   18c30:	20bff52e 	bgeu	r4,r2,18c08 <alt_up_pixel_buffer_dma_draw_hline+0x114>
   18c34:	00007f06 	br	18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18c38:	e0bff317 	ldw	r2,-52(fp)
   18c3c:	10800e17 	ldw	r2,56(r2)
   18c40:	10800098 	cmpnei	r2,r2,2
   18c44:	1000121e 	bne	r2,zero,18c90 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
   18c48:	e0fffc17 	ldw	r3,-16(fp)
   18c4c:	e0fff815 	stw	r3,-32(fp)
   18c50:	00000b06 	br	18c80 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
   18c54:	e13ff817 	ldw	r4,-32(fp)
   18c58:	e13ff817 	ldw	r4,-32(fp)
   18c5c:	2105883a 	add	r2,r4,r4
   18c60:	1007883a 	mov	r3,r2
   18c64:	e0bfff17 	ldw	r2,-4(fp)
   18c68:	1885883a 	add	r2,r3,r2
   18c6c:	e0fff917 	ldw	r3,-28(fp)
   18c70:	10c0002d 	sthio	r3,0(r2)
   18c74:	e0bff817 	ldw	r2,-32(fp)
   18c78:	10800044 	addi	r2,r2,1
   18c7c:	e0bff815 	stw	r2,-32(fp)
   18c80:	e0fffb17 	ldw	r3,-20(fp)
   18c84:	e13ff817 	ldw	r4,-32(fp)
   18c88:	193ff22e 	bgeu	r3,r4,18c54 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   18c8c:	00006906 	br	18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18c90:	e0bffc17 	ldw	r2,-16(fp)
   18c94:	e0bff815 	stw	r2,-32(fp)
   18c98:	00000c06 	br	18ccc <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
   18c9c:	e0fff817 	ldw	r3,-32(fp)
   18ca0:	e0fff817 	ldw	r3,-32(fp)
   18ca4:	18c5883a 	add	r2,r3,r3
   18ca8:	1085883a 	add	r2,r2,r2
   18cac:	1007883a 	mov	r3,r2
   18cb0:	e0bfff17 	ldw	r2,-4(fp)
   18cb4:	1885883a 	add	r2,r3,r2
   18cb8:	e0fff917 	ldw	r3,-28(fp)
   18cbc:	10c00035 	stwio	r3,0(r2)
   18cc0:	e13ff817 	ldw	r4,-32(fp)
   18cc4:	21000044 	addi	r4,r4,1
   18cc8:	e13ff815 	stw	r4,-32(fp)
   18ccc:	e0bffb17 	ldw	r2,-20(fp)
   18cd0:	e0fff817 	ldw	r3,-32(fp)
   18cd4:	10fff12e 	bgeu	r2,r3,18c9c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   18cd8:	00005606 	br	18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18cdc:	e0bff317 	ldw	r2,-52(fp)
   18ce0:	10800e17 	ldw	r2,56(r2)
   18ce4:	10800058 	cmpnei	r2,r2,1
   18ce8:	1000151e 	bne	r2,zero,18d40 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
   18cec:	e13ffa17 	ldw	r4,-24(fp)
   18cf0:	e0fffe17 	ldw	r3,-8(fp)
   18cf4:	20c5383a 	mul	r2,r4,r3
   18cf8:	e13fff17 	ldw	r4,-4(fp)
   18cfc:	2089883a 	add	r4,r4,r2
   18d00:	e13fff15 	stw	r4,-4(fp)
   18d04:	e0bffc17 	ldw	r2,-16(fp)
   18d08:	e0bff715 	stw	r2,-36(fp)
   18d0c:	00000806 	br	18d30 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
   18d10:	e0ffff17 	ldw	r3,-4(fp)
   18d14:	e0bff717 	ldw	r2,-36(fp)
   18d18:	1885883a 	add	r2,r3,r2
   18d1c:	e0fff917 	ldw	r3,-28(fp)
   18d20:	10c00025 	stbio	r3,0(r2)
   18d24:	e0fff717 	ldw	r3,-36(fp)
   18d28:	18c00044 	addi	r3,r3,1
   18d2c:	e0fff715 	stw	r3,-36(fp)
   18d30:	e13ffb17 	ldw	r4,-20(fp)
   18d34:	e0bff717 	ldw	r2,-36(fp)
   18d38:	20bff52e 	bgeu	r4,r2,18d10 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   18d3c:	00003d06 	br	18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18d40:	e0bff317 	ldw	r2,-52(fp)
   18d44:	10800e17 	ldw	r2,56(r2)
   18d48:	10800098 	cmpnei	r2,r2,2
   18d4c:	10001c1e 	bne	r2,zero,18dc0 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
   18d50:	e0fffe17 	ldw	r3,-8(fp)
   18d54:	e0fffe17 	ldw	r3,-8(fp)
   18d58:	18c5883a 	add	r2,r3,r3
   18d5c:	e0bffe15 	stw	r2,-8(fp)
   18d60:	e13ffa17 	ldw	r4,-24(fp)
   18d64:	e0fffe17 	ldw	r3,-8(fp)
   18d68:	20c5383a 	mul	r2,r4,r3
   18d6c:	e13fff17 	ldw	r4,-4(fp)
   18d70:	2089883a 	add	r4,r4,r2
   18d74:	e13fff15 	stw	r4,-4(fp)
   18d78:	e0bffc17 	ldw	r2,-16(fp)
   18d7c:	e0bff715 	stw	r2,-36(fp)
   18d80:	00000b06 	br	18db0 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
   18d84:	e0fff717 	ldw	r3,-36(fp)
   18d88:	e0fff717 	ldw	r3,-36(fp)
   18d8c:	18c5883a 	add	r2,r3,r3
   18d90:	1007883a 	mov	r3,r2
   18d94:	e0bfff17 	ldw	r2,-4(fp)
   18d98:	1885883a 	add	r2,r3,r2
   18d9c:	e0fff917 	ldw	r3,-28(fp)
   18da0:	10c0002d 	sthio	r3,0(r2)
   18da4:	e13ff717 	ldw	r4,-36(fp)
   18da8:	21000044 	addi	r4,r4,1
   18dac:	e13ff715 	stw	r4,-36(fp)
   18db0:	e0bffb17 	ldw	r2,-20(fp)
   18db4:	e0fff717 	ldw	r3,-36(fp)
   18db8:	10fff22e 	bgeu	r2,r3,18d84 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   18dbc:	00001d06 	br	18e34 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   18dc0:	e13ffe17 	ldw	r4,-8(fp)
   18dc4:	e13ffe17 	ldw	r4,-8(fp)
   18dc8:	2105883a 	add	r2,r4,r4
   18dcc:	1085883a 	add	r2,r2,r2
   18dd0:	e0bffe15 	stw	r2,-8(fp)
   18dd4:	e0fffa17 	ldw	r3,-24(fp)
   18dd8:	e13ffe17 	ldw	r4,-8(fp)
   18ddc:	1905383a 	mul	r2,r3,r4
   18de0:	e0ffff17 	ldw	r3,-4(fp)
   18de4:	1887883a 	add	r3,r3,r2
   18de8:	e0ffff15 	stw	r3,-4(fp)
   18dec:	e13ffc17 	ldw	r4,-16(fp)
   18df0:	e13ff715 	stw	r4,-36(fp)
   18df4:	00000c06 	br	18e28 <alt_up_pixel_buffer_dma_draw_hline+0x334>
   18df8:	e0fff717 	ldw	r3,-36(fp)
   18dfc:	e0fff717 	ldw	r3,-36(fp)
   18e00:	18c5883a 	add	r2,r3,r3
   18e04:	1085883a 	add	r2,r2,r2
   18e08:	1007883a 	mov	r3,r2
   18e0c:	e0bfff17 	ldw	r2,-4(fp)
   18e10:	1885883a 	add	r2,r3,r2
   18e14:	e0fff917 	ldw	r3,-28(fp)
   18e18:	10c00035 	stwio	r3,0(r2)
   18e1c:	e13ff717 	ldw	r4,-36(fp)
   18e20:	21000044 	addi	r4,r4,1
   18e24:	e13ff715 	stw	r4,-36(fp)
   18e28:	e0bffb17 	ldw	r2,-20(fp)
   18e2c:	e0fff717 	ldw	r3,-36(fp)
   18e30:	10fff12e 	bgeu	r2,r3,18df8 <alt_up_pixel_buffer_dma_draw_hline+0x304>
   18e34:	e037883a 	mov	sp,fp
   18e38:	df000017 	ldw	fp,0(sp)
   18e3c:	dec00104 	addi	sp,sp,4
   18e40:	f800283a 	ret

00018e44 <alt_up_pixel_buffer_dma_draw_vline>:
   18e44:	defff104 	addi	sp,sp,-60
   18e48:	df000e15 	stw	fp,56(sp)
   18e4c:	df000e04 	addi	fp,sp,56
   18e50:	e13ff215 	stw	r4,-56(fp)
   18e54:	e17ff315 	stw	r5,-52(fp)
   18e58:	e1bff415 	stw	r6,-48(fp)
   18e5c:	e1fff515 	stw	r7,-44(fp)
   18e60:	e0bff217 	ldw	r2,-56(fp)
   18e64:	10800f17 	ldw	r2,60(r2)
   18e68:	e0bffe15 	stw	r2,-8(fp)
   18e6c:	e0bff217 	ldw	r2,-56(fp)
   18e70:	10801017 	ldw	r2,64(r2)
   18e74:	e0bffd15 	stw	r2,-12(fp)
   18e78:	e0bff317 	ldw	r2,-52(fp)
   18e7c:	e0bffc15 	stw	r2,-16(fp)
   18e80:	e0fff417 	ldw	r3,-48(fp)
   18e84:	e0fffb15 	stw	r3,-20(fp)
   18e88:	e13ff517 	ldw	r4,-44(fp)
   18e8c:	e13ffa15 	stw	r4,-24(fp)
   18e90:	e0800117 	ldw	r2,4(fp)
   18e94:	e0bff915 	stw	r2,-28(fp)
   18e98:	e0fffa17 	ldw	r3,-24(fp)
   18e9c:	e13ffb17 	ldw	r4,-20(fp)
   18ea0:	1900042e 	bgeu	r3,r4,18eb4 <alt_up_pixel_buffer_dma_draw_vline+0x70>
   18ea4:	e0bffb17 	ldw	r2,-20(fp)
   18ea8:	e0fffa17 	ldw	r3,-24(fp)
   18eac:	e0fffb15 	stw	r3,-20(fp)
   18eb0:	e0bffa15 	stw	r2,-24(fp)
   18eb4:	e13ffc17 	ldw	r4,-16(fp)
   18eb8:	e0bffe17 	ldw	r2,-8(fp)
   18ebc:	2080d12e 	bgeu	r4,r2,19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   18ec0:	e0fffb17 	ldw	r3,-20(fp)
   18ec4:	e13ffd17 	ldw	r4,-12(fp)
   18ec8:	19000136 	bltu	r3,r4,18ed0 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
   18ecc:	0000cd06 	br	19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   18ed0:	e0bffa17 	ldw	r2,-24(fp)
   18ed4:	e0fffd17 	ldw	r3,-12(fp)
   18ed8:	10c00336 	bltu	r2,r3,18ee8 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
   18edc:	e13ffd17 	ldw	r4,-12(fp)
   18ee0:	213fffc4 	addi	r4,r4,-1
   18ee4:	e13ffa15 	stw	r4,-24(fp)
   18ee8:	e0800217 	ldw	r2,8(fp)
   18eec:	10800058 	cmpnei	r2,r2,1
   18ef0:	1000041e 	bne	r2,zero,18f04 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
   18ef4:	e0bff217 	ldw	r2,-56(fp)
   18ef8:	10800c17 	ldw	r2,48(r2)
   18efc:	e0bfff15 	stw	r2,-4(fp)
   18f00:	00000306 	br	18f10 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
   18f04:	e0bff217 	ldw	r2,-56(fp)
   18f08:	10800b17 	ldw	r2,44(r2)
   18f0c:	e0bfff15 	stw	r2,-4(fp)
   18f10:	e0bff217 	ldw	r2,-56(fp)
   18f14:	10800d17 	ldw	r2,52(r2)
   18f18:	1004c03a 	cmpne	r2,r2,zero
   18f1c:	1000571e 	bne	r2,zero,1907c <alt_up_pixel_buffer_dma_draw_vline+0x238>
   18f20:	e0bff217 	ldw	r2,-56(fp)
   18f24:	10801317 	ldw	r2,76(r2)
   18f28:	e0bff715 	stw	r2,-36(fp)
   18f2c:	e0bff717 	ldw	r2,-36(fp)
   18f30:	e0fffb17 	ldw	r3,-20(fp)
   18f34:	1884983a 	sll	r2,r3,r2
   18f38:	e13fff17 	ldw	r4,-4(fp)
   18f3c:	2089883a 	add	r4,r4,r2
   18f40:	e13fff15 	stw	r4,-4(fp)
   18f44:	e0bff217 	ldw	r2,-56(fp)
   18f48:	10800e17 	ldw	r2,56(r2)
   18f4c:	10800058 	cmpnei	r2,r2,1
   18f50:	1000151e 	bne	r2,zero,18fa8 <alt_up_pixel_buffer_dma_draw_vline+0x164>
   18f54:	e0bffb17 	ldw	r2,-20(fp)
   18f58:	e0bff815 	stw	r2,-32(fp)
   18f5c:	00000e06 	br	18f98 <alt_up_pixel_buffer_dma_draw_vline+0x154>
   18f60:	e0ffff17 	ldw	r3,-4(fp)
   18f64:	e0bffc17 	ldw	r2,-16(fp)
   18f68:	1885883a 	add	r2,r3,r2
   18f6c:	e0fff917 	ldw	r3,-28(fp)
   18f70:	10c00025 	stbio	r3,0(r2)
   18f74:	e0fff717 	ldw	r3,-36(fp)
   18f78:	00800044 	movi	r2,1
   18f7c:	10c4983a 	sll	r2,r2,r3
   18f80:	e0ffff17 	ldw	r3,-4(fp)
   18f84:	1887883a 	add	r3,r3,r2
   18f88:	e0ffff15 	stw	r3,-4(fp)
   18f8c:	e13ff817 	ldw	r4,-32(fp)
   18f90:	21000044 	addi	r4,r4,1
   18f94:	e13ff815 	stw	r4,-32(fp)
   18f98:	e0bffa17 	ldw	r2,-24(fp)
   18f9c:	e0fff817 	ldw	r3,-32(fp)
   18fa0:	10ffef2e 	bgeu	r2,r3,18f60 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   18fa4:	00009706 	br	19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   18fa8:	e0bff217 	ldw	r2,-56(fp)
   18fac:	10800e17 	ldw	r2,56(r2)
   18fb0:	10800098 	cmpnei	r2,r2,2
   18fb4:	1000181e 	bne	r2,zero,19018 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
   18fb8:	e13ffb17 	ldw	r4,-20(fp)
   18fbc:	e13ff815 	stw	r4,-32(fp)
   18fc0:	00001106 	br	19008 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
   18fc4:	e0fffc17 	ldw	r3,-16(fp)
   18fc8:	e0fffc17 	ldw	r3,-16(fp)
   18fcc:	18c5883a 	add	r2,r3,r3
   18fd0:	1007883a 	mov	r3,r2
   18fd4:	e0bfff17 	ldw	r2,-4(fp)
   18fd8:	1885883a 	add	r2,r3,r2
   18fdc:	e0fff917 	ldw	r3,-28(fp)
   18fe0:	10c0002d 	sthio	r3,0(r2)
   18fe4:	e0fff717 	ldw	r3,-36(fp)
   18fe8:	00800044 	movi	r2,1
   18fec:	10c4983a 	sll	r2,r2,r3
   18ff0:	e13fff17 	ldw	r4,-4(fp)
   18ff4:	2089883a 	add	r4,r4,r2
   18ff8:	e13fff15 	stw	r4,-4(fp)
   18ffc:	e0bff817 	ldw	r2,-32(fp)
   19000:	10800044 	addi	r2,r2,1
   19004:	e0bff815 	stw	r2,-32(fp)
   19008:	e0fffa17 	ldw	r3,-24(fp)
   1900c:	e13ff817 	ldw	r4,-32(fp)
   19010:	193fec2e 	bgeu	r3,r4,18fc4 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   19014:	00007b06 	br	19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   19018:	e0bffb17 	ldw	r2,-20(fp)
   1901c:	e0bff815 	stw	r2,-32(fp)
   19020:	00001206 	br	1906c <alt_up_pixel_buffer_dma_draw_vline+0x228>
   19024:	e0fffc17 	ldw	r3,-16(fp)
   19028:	e0fffc17 	ldw	r3,-16(fp)
   1902c:	18c5883a 	add	r2,r3,r3
   19030:	1085883a 	add	r2,r2,r2
   19034:	1007883a 	mov	r3,r2
   19038:	e0bfff17 	ldw	r2,-4(fp)
   1903c:	1885883a 	add	r2,r3,r2
   19040:	e0fff917 	ldw	r3,-28(fp)
   19044:	10c00035 	stwio	r3,0(r2)
   19048:	e0fff717 	ldw	r3,-36(fp)
   1904c:	00800044 	movi	r2,1
   19050:	10c4983a 	sll	r2,r2,r3
   19054:	e13fff17 	ldw	r4,-4(fp)
   19058:	2089883a 	add	r4,r4,r2
   1905c:	e13fff15 	stw	r4,-4(fp)
   19060:	e0bff817 	ldw	r2,-32(fp)
   19064:	10800044 	addi	r2,r2,1
   19068:	e0bff815 	stw	r2,-32(fp)
   1906c:	e0fffa17 	ldw	r3,-24(fp)
   19070:	e13ff817 	ldw	r4,-32(fp)
   19074:	193feb2e 	bgeu	r3,r4,19024 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   19078:	00006206 	br	19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1907c:	e0bff217 	ldw	r2,-56(fp)
   19080:	10800e17 	ldw	r2,56(r2)
   19084:	10800058 	cmpnei	r2,r2,1
   19088:	1000191e 	bne	r2,zero,190f0 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
   1908c:	e0fffb17 	ldw	r3,-20(fp)
   19090:	e13ffe17 	ldw	r4,-8(fp)
   19094:	1905383a 	mul	r2,r3,r4
   19098:	e0ffff17 	ldw	r3,-4(fp)
   1909c:	1887883a 	add	r3,r3,r2
   190a0:	e0ffff15 	stw	r3,-4(fp)
   190a4:	e13ffb17 	ldw	r4,-20(fp)
   190a8:	e13ff615 	stw	r4,-40(fp)
   190ac:	00000c06 	br	190e0 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
   190b0:	e0ffff17 	ldw	r3,-4(fp)
   190b4:	e0bffc17 	ldw	r2,-16(fp)
   190b8:	1885883a 	add	r2,r3,r2
   190bc:	e0fff917 	ldw	r3,-28(fp)
   190c0:	10c00025 	stbio	r3,0(r2)
   190c4:	e0bfff17 	ldw	r2,-4(fp)
   190c8:	e0fffe17 	ldw	r3,-8(fp)
   190cc:	10c5883a 	add	r2,r2,r3
   190d0:	e0bfff15 	stw	r2,-4(fp)
   190d4:	e13ff617 	ldw	r4,-40(fp)
   190d8:	21000044 	addi	r4,r4,1
   190dc:	e13ff615 	stw	r4,-40(fp)
   190e0:	e0bffa17 	ldw	r2,-24(fp)
   190e4:	e0fff617 	ldw	r3,-40(fp)
   190e8:	10fff12e 	bgeu	r2,r3,190b0 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   190ec:	00004506 	br	19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   190f0:	e0bff217 	ldw	r2,-56(fp)
   190f4:	10800e17 	ldw	r2,56(r2)
   190f8:	10800098 	cmpnei	r2,r2,2
   190fc:	1000201e 	bne	r2,zero,19180 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
   19100:	e13ffe17 	ldw	r4,-8(fp)
   19104:	e13ffe17 	ldw	r4,-8(fp)
   19108:	2105883a 	add	r2,r4,r4
   1910c:	e0bffe15 	stw	r2,-8(fp)
   19110:	e0fffb17 	ldw	r3,-20(fp)
   19114:	e13ffe17 	ldw	r4,-8(fp)
   19118:	1905383a 	mul	r2,r3,r4
   1911c:	e0ffff17 	ldw	r3,-4(fp)
   19120:	1887883a 	add	r3,r3,r2
   19124:	e0ffff15 	stw	r3,-4(fp)
   19128:	e13ffb17 	ldw	r4,-20(fp)
   1912c:	e13ff615 	stw	r4,-40(fp)
   19130:	00000f06 	br	19170 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
   19134:	e0fffc17 	ldw	r3,-16(fp)
   19138:	e0fffc17 	ldw	r3,-16(fp)
   1913c:	18c5883a 	add	r2,r3,r3
   19140:	1007883a 	mov	r3,r2
   19144:	e0bfff17 	ldw	r2,-4(fp)
   19148:	1885883a 	add	r2,r3,r2
   1914c:	e0fff917 	ldw	r3,-28(fp)
   19150:	10c0002d 	sthio	r3,0(r2)
   19154:	e13fff17 	ldw	r4,-4(fp)
   19158:	e0bffe17 	ldw	r2,-8(fp)
   1915c:	2089883a 	add	r4,r4,r2
   19160:	e13fff15 	stw	r4,-4(fp)
   19164:	e0fff617 	ldw	r3,-40(fp)
   19168:	18c00044 	addi	r3,r3,1
   1916c:	e0fff615 	stw	r3,-40(fp)
   19170:	e13ffa17 	ldw	r4,-24(fp)
   19174:	e0bff617 	ldw	r2,-40(fp)
   19178:	20bfee2e 	bgeu	r4,r2,19134 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   1917c:	00002106 	br	19204 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   19180:	e0fffe17 	ldw	r3,-8(fp)
   19184:	e0fffe17 	ldw	r3,-8(fp)
   19188:	18c5883a 	add	r2,r3,r3
   1918c:	1085883a 	add	r2,r2,r2
   19190:	e0bffe15 	stw	r2,-8(fp)
   19194:	e13ffb17 	ldw	r4,-20(fp)
   19198:	e0fffe17 	ldw	r3,-8(fp)
   1919c:	20c5383a 	mul	r2,r4,r3
   191a0:	e13fff17 	ldw	r4,-4(fp)
   191a4:	2089883a 	add	r4,r4,r2
   191a8:	e13fff15 	stw	r4,-4(fp)
   191ac:	e0bffb17 	ldw	r2,-20(fp)
   191b0:	e0bff615 	stw	r2,-40(fp)
   191b4:	00001006 	br	191f8 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
   191b8:	e0fffc17 	ldw	r3,-16(fp)
   191bc:	e0fffc17 	ldw	r3,-16(fp)
   191c0:	18c5883a 	add	r2,r3,r3
   191c4:	1085883a 	add	r2,r2,r2
   191c8:	1007883a 	mov	r3,r2
   191cc:	e0bfff17 	ldw	r2,-4(fp)
   191d0:	1885883a 	add	r2,r3,r2
   191d4:	e0fff917 	ldw	r3,-28(fp)
   191d8:	10c00035 	stwio	r3,0(r2)
   191dc:	e13fff17 	ldw	r4,-4(fp)
   191e0:	e0bffe17 	ldw	r2,-8(fp)
   191e4:	2089883a 	add	r4,r4,r2
   191e8:	e13fff15 	stw	r4,-4(fp)
   191ec:	e0fff617 	ldw	r3,-40(fp)
   191f0:	18c00044 	addi	r3,r3,1
   191f4:	e0fff615 	stw	r3,-40(fp)
   191f8:	e13ffa17 	ldw	r4,-24(fp)
   191fc:	e0bff617 	ldw	r2,-40(fp)
   19200:	20bfed2e 	bgeu	r4,r2,191b8 <alt_up_pixel_buffer_dma_draw_vline+0x374>
   19204:	e037883a 	mov	sp,fp
   19208:	df000017 	ldw	fp,0(sp)
   1920c:	dec00104 	addi	sp,sp,4
   19210:	f800283a 	ret

00019214 <alt_up_pixel_buffer_dma_draw_rectangle>:
   19214:	defff804 	addi	sp,sp,-32
   19218:	dfc00715 	stw	ra,28(sp)
   1921c:	df000615 	stw	fp,24(sp)
   19220:	df000604 	addi	fp,sp,24
   19224:	e13ffc15 	stw	r4,-16(fp)
   19228:	e17ffd15 	stw	r5,-12(fp)
   1922c:	e1bffe15 	stw	r6,-8(fp)
   19230:	e1ffff15 	stw	r7,-4(fp)
   19234:	e0800317 	ldw	r2,12(fp)
   19238:	d8800015 	stw	r2,0(sp)
   1923c:	e0800417 	ldw	r2,16(fp)
   19240:	d8800115 	stw	r2,4(sp)
   19244:	e13ffc17 	ldw	r4,-16(fp)
   19248:	e17ffd17 	ldw	r5,-12(fp)
   1924c:	e1bfff17 	ldw	r6,-4(fp)
   19250:	e1fffe17 	ldw	r7,-8(fp)
   19254:	0018af40 	call	18af4 <alt_up_pixel_buffer_dma_draw_hline>
   19258:	e0800317 	ldw	r2,12(fp)
   1925c:	d8800015 	stw	r2,0(sp)
   19260:	e0800417 	ldw	r2,16(fp)
   19264:	d8800115 	stw	r2,4(sp)
   19268:	e13ffc17 	ldw	r4,-16(fp)
   1926c:	e17ffd17 	ldw	r5,-12(fp)
   19270:	e1bfff17 	ldw	r6,-4(fp)
   19274:	e1c00217 	ldw	r7,8(fp)
   19278:	0018af40 	call	18af4 <alt_up_pixel_buffer_dma_draw_hline>
   1927c:	e0800317 	ldw	r2,12(fp)
   19280:	d8800015 	stw	r2,0(sp)
   19284:	e0800417 	ldw	r2,16(fp)
   19288:	d8800115 	stw	r2,4(sp)
   1928c:	e13ffc17 	ldw	r4,-16(fp)
   19290:	e17ffd17 	ldw	r5,-12(fp)
   19294:	e1bffe17 	ldw	r6,-8(fp)
   19298:	e1c00217 	ldw	r7,8(fp)
   1929c:	0018e440 	call	18e44 <alt_up_pixel_buffer_dma_draw_vline>
   192a0:	e0800317 	ldw	r2,12(fp)
   192a4:	d8800015 	stw	r2,0(sp)
   192a8:	e0800417 	ldw	r2,16(fp)
   192ac:	d8800115 	stw	r2,4(sp)
   192b0:	e13ffc17 	ldw	r4,-16(fp)
   192b4:	e17fff17 	ldw	r5,-4(fp)
   192b8:	e1bffe17 	ldw	r6,-8(fp)
   192bc:	e1c00217 	ldw	r7,8(fp)
   192c0:	0018e440 	call	18e44 <alt_up_pixel_buffer_dma_draw_vline>
   192c4:	e037883a 	mov	sp,fp
   192c8:	dfc00117 	ldw	ra,4(sp)
   192cc:	df000017 	ldw	fp,0(sp)
   192d0:	dec00204 	addi	sp,sp,8
   192d4:	f800283a 	ret

000192d8 <helper_plot_pixel>:
   192d8:	defffb04 	addi	sp,sp,-20
   192dc:	df000415 	stw	fp,16(sp)
   192e0:	df000404 	addi	fp,sp,16
   192e4:	e13ffc15 	stw	r4,-16(fp)
   192e8:	e17ffd15 	stw	r5,-12(fp)
   192ec:	e1bffe15 	stw	r6,-8(fp)
   192f0:	e1ffff15 	stw	r7,-4(fp)
   192f4:	e0c00217 	ldw	r3,8(fp)
   192f8:	1804c03a 	cmpne	r2,r3,zero
   192fc:	10000b1e 	bne	r2,zero,1932c <helper_plot_pixel+0x54>
   19300:	e13ffd17 	ldw	r4,-12(fp)
   19304:	e0ffff17 	ldw	r3,-4(fp)
   19308:	20c5383a 	mul	r2,r4,r3
   1930c:	e13ffe17 	ldw	r4,-8(fp)
   19310:	1105883a 	add	r2,r2,r4
   19314:	1007883a 	mov	r3,r2
   19318:	e0bffc17 	ldw	r2,-16(fp)
   1931c:	1885883a 	add	r2,r3,r2
   19320:	e0c00117 	ldw	r3,4(fp)
   19324:	10c00025 	stbio	r3,0(r2)
   19328:	00001b06 	br	19398 <helper_plot_pixel+0xc0>
   1932c:	e1000217 	ldw	r4,8(fp)
   19330:	20800058 	cmpnei	r2,r4,1
   19334:	10000c1e 	bne	r2,zero,19368 <helper_plot_pixel+0x90>
   19338:	e0fffd17 	ldw	r3,-12(fp)
   1933c:	e13fff17 	ldw	r4,-4(fp)
   19340:	1905383a 	mul	r2,r3,r4
   19344:	e0fffe17 	ldw	r3,-8(fp)
   19348:	10c5883a 	add	r2,r2,r3
   1934c:	1085883a 	add	r2,r2,r2
   19350:	1007883a 	mov	r3,r2
   19354:	e0bffc17 	ldw	r2,-16(fp)
   19358:	1885883a 	add	r2,r3,r2
   1935c:	e1000117 	ldw	r4,4(fp)
   19360:	1100002d 	sthio	r4,0(r2)
   19364:	00000c06 	br	19398 <helper_plot_pixel+0xc0>
   19368:	e0fffd17 	ldw	r3,-12(fp)
   1936c:	e13fff17 	ldw	r4,-4(fp)
   19370:	1905383a 	mul	r2,r3,r4
   19374:	e0fffe17 	ldw	r3,-8(fp)
   19378:	10c5883a 	add	r2,r2,r3
   1937c:	1085883a 	add	r2,r2,r2
   19380:	1085883a 	add	r2,r2,r2
   19384:	1007883a 	mov	r3,r2
   19388:	e0bffc17 	ldw	r2,-16(fp)
   1938c:	1885883a 	add	r2,r3,r2
   19390:	e1000117 	ldw	r4,4(fp)
   19394:	11000035 	stwio	r4,0(r2)
   19398:	e037883a 	mov	sp,fp
   1939c:	df000017 	ldw	fp,0(sp)
   193a0:	dec00104 	addi	sp,sp,4
   193a4:	f800283a 	ret

000193a8 <alt_up_pixel_buffer_dma_draw_line>:
   193a8:	deffe404 	addi	sp,sp,-112
   193ac:	dfc01b15 	stw	ra,108(sp)
   193b0:	df001a15 	stw	fp,104(sp)
   193b4:	df001a04 	addi	fp,sp,104
   193b8:	e13fe815 	stw	r4,-96(fp)
   193bc:	e17fe915 	stw	r5,-92(fp)
   193c0:	e1bfea15 	stw	r6,-88(fp)
   193c4:	e1ffeb15 	stw	r7,-84(fp)
   193c8:	e0bfe917 	ldw	r2,-92(fp)
   193cc:	e0bffa15 	stw	r2,-24(fp)
   193d0:	e0ffea17 	ldw	r3,-88(fp)
   193d4:	e0fff915 	stw	r3,-28(fp)
   193d8:	e13feb17 	ldw	r4,-84(fp)
   193dc:	e13ff815 	stw	r4,-32(fp)
   193e0:	e0800217 	ldw	r2,8(fp)
   193e4:	e0bff715 	stw	r2,-36(fp)
   193e8:	e0fff717 	ldw	r3,-36(fp)
   193ec:	e13ff917 	ldw	r4,-28(fp)
   193f0:	1905c83a 	sub	r2,r3,r4
   193f4:	e0bfff15 	stw	r2,-4(fp)
   193f8:	e0ffff17 	ldw	r3,-4(fp)
   193fc:	1804403a 	cmpge	r2,r3,zero
   19400:	1000031e 	bne	r2,zero,19410 <alt_up_pixel_buffer_dma_draw_line+0x68>
   19404:	e13fff17 	ldw	r4,-4(fp)
   19408:	0109c83a 	sub	r4,zero,r4
   1940c:	e13fff15 	stw	r4,-4(fp)
   19410:	e0fff817 	ldw	r3,-32(fp)
   19414:	e13ffa17 	ldw	r4,-24(fp)
   19418:	1905c83a 	sub	r2,r3,r4
   1941c:	e0bffe15 	stw	r2,-8(fp)
   19420:	e0fffe17 	ldw	r3,-8(fp)
   19424:	1804403a 	cmpge	r2,r3,zero
   19428:	1000031e 	bne	r2,zero,19438 <alt_up_pixel_buffer_dma_draw_line+0x90>
   1942c:	e13ffe17 	ldw	r4,-8(fp)
   19430:	0109c83a 	sub	r4,zero,r4
   19434:	e13ffe15 	stw	r4,-8(fp)
   19438:	e0fffe17 	ldw	r3,-8(fp)
   1943c:	e13fff17 	ldw	r4,-4(fp)
   19440:	1904803a 	cmplt	r2,r3,r4
   19444:	e0bff605 	stb	r2,-40(fp)
   19448:	e0bfe817 	ldw	r2,-96(fp)
   1944c:	10800e17 	ldw	r2,56(r2)
   19450:	10800060 	cmpeqi	r2,r2,1
   19454:	10000c1e 	bne	r2,zero,19488 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   19458:	e0bfe817 	ldw	r2,-96(fp)
   1945c:	10800e17 	ldw	r2,56(r2)
   19460:	10800098 	cmpnei	r2,r2,2
   19464:	1000031e 	bne	r2,zero,19474 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   19468:	00800044 	movi	r2,1
   1946c:	e0bffc15 	stw	r2,-16(fp)
   19470:	00000206 	br	1947c <alt_up_pixel_buffer_dma_draw_line+0xd4>
   19474:	00c00084 	movi	r3,2
   19478:	e0fffc15 	stw	r3,-16(fp)
   1947c:	e13ffc17 	ldw	r4,-16(fp)
   19480:	e13ffd15 	stw	r4,-12(fp)
   19484:	00000106 	br	1948c <alt_up_pixel_buffer_dma_draw_line+0xe4>
   19488:	e03ffd15 	stw	zero,-12(fp)
   1948c:	e0bffd17 	ldw	r2,-12(fp)
   19490:	e0bfef15 	stw	r2,-68(fp)
   19494:	e0c00317 	ldw	r3,12(fp)
   19498:	e0ffee15 	stw	r3,-72(fp)
   1949c:	e0bfe817 	ldw	r2,-96(fp)
   194a0:	10800d17 	ldw	r2,52(r2)
   194a4:	1004c03a 	cmpne	r2,r2,zero
   194a8:	1000091e 	bne	r2,zero,194d0 <alt_up_pixel_buffer_dma_draw_line+0x128>
   194ac:	e0bfe817 	ldw	r2,-96(fp)
   194b0:	10c01317 	ldw	r3,76(r2)
   194b4:	e0bfef17 	ldw	r2,-68(fp)
   194b8:	1885c83a 	sub	r2,r3,r2
   194bc:	1007883a 	mov	r3,r2
   194c0:	00800044 	movi	r2,1
   194c4:	10c4983a 	sll	r2,r2,r3
   194c8:	e0bffb15 	stw	r2,-20(fp)
   194cc:	00000306 	br	194dc <alt_up_pixel_buffer_dma_draw_line+0x134>
   194d0:	e0bfe817 	ldw	r2,-96(fp)
   194d4:	10800f17 	ldw	r2,60(r2)
   194d8:	e0bffb15 	stw	r2,-20(fp)
   194dc:	e13ffb17 	ldw	r4,-20(fp)
   194e0:	e13fec15 	stw	r4,-80(fp)
   194e4:	e0800417 	ldw	r2,16(fp)
   194e8:	10800058 	cmpnei	r2,r2,1
   194ec:	1000041e 	bne	r2,zero,19500 <alt_up_pixel_buffer_dma_draw_line+0x158>
   194f0:	e0bfe817 	ldw	r2,-96(fp)
   194f4:	10800c17 	ldw	r2,48(r2)
   194f8:	e0bfed15 	stw	r2,-76(fp)
   194fc:	00000306 	br	1950c <alt_up_pixel_buffer_dma_draw_line+0x164>
   19500:	e0bfe817 	ldw	r2,-96(fp)
   19504:	10800b17 	ldw	r2,44(r2)
   19508:	e0bfed15 	stw	r2,-76(fp)
   1950c:	e0fff603 	ldbu	r3,-40(fp)
   19510:	18803fcc 	andi	r2,r3,255
   19514:	1080201c 	xori	r2,r2,128
   19518:	10bfe004 	addi	r2,r2,-128
   1951c:	10800050 	cmplti	r2,r2,1
   19520:	10000c1e 	bne	r2,zero,19554 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
   19524:	e13ffa17 	ldw	r4,-24(fp)
   19528:	e13ff315 	stw	r4,-52(fp)
   1952c:	e0bff917 	ldw	r2,-28(fp)
   19530:	e0bffa15 	stw	r2,-24(fp)
   19534:	e0fff317 	ldw	r3,-52(fp)
   19538:	e0fff915 	stw	r3,-28(fp)
   1953c:	e13ff817 	ldw	r4,-32(fp)
   19540:	e13ff315 	stw	r4,-52(fp)
   19544:	e0bff717 	ldw	r2,-36(fp)
   19548:	e0bff815 	stw	r2,-32(fp)
   1954c:	e0fff317 	ldw	r3,-52(fp)
   19550:	e0fff715 	stw	r3,-36(fp)
   19554:	e13ff817 	ldw	r4,-32(fp)
   19558:	e0bffa17 	ldw	r2,-24(fp)
   1955c:	20800c0e 	bge	r4,r2,19590 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
   19560:	e0fffa17 	ldw	r3,-24(fp)
   19564:	e0fff315 	stw	r3,-52(fp)
   19568:	e13ff817 	ldw	r4,-32(fp)
   1956c:	e13ffa15 	stw	r4,-24(fp)
   19570:	e0bff317 	ldw	r2,-52(fp)
   19574:	e0bff815 	stw	r2,-32(fp)
   19578:	e0fff917 	ldw	r3,-28(fp)
   1957c:	e0fff315 	stw	r3,-52(fp)
   19580:	e13ff717 	ldw	r4,-36(fp)
   19584:	e13ff915 	stw	r4,-28(fp)
   19588:	e0bff317 	ldw	r2,-52(fp)
   1958c:	e0bff715 	stw	r2,-36(fp)
   19590:	e0fff817 	ldw	r3,-32(fp)
   19594:	e13ffa17 	ldw	r4,-24(fp)
   19598:	1907c83a 	sub	r3,r3,r4
   1959c:	e0fff515 	stw	r3,-44(fp)
   195a0:	e0fff717 	ldw	r3,-36(fp)
   195a4:	e13ff917 	ldw	r4,-28(fp)
   195a8:	1905c83a 	sub	r2,r3,r4
   195ac:	e0bff415 	stw	r2,-48(fp)
   195b0:	e0fff417 	ldw	r3,-48(fp)
   195b4:	1804403a 	cmpge	r2,r3,zero
   195b8:	1000031e 	bne	r2,zero,195c8 <alt_up_pixel_buffer_dma_draw_line+0x220>
   195bc:	e13ff417 	ldw	r4,-48(fp)
   195c0:	0109c83a 	sub	r4,zero,r4
   195c4:	e13ff415 	stw	r4,-48(fp)
   195c8:	e0fff517 	ldw	r3,-44(fp)
   195cc:	1804d7fa 	srli	r2,r3,31
   195d0:	e13ff517 	ldw	r4,-44(fp)
   195d4:	1105883a 	add	r2,r2,r4
   195d8:	1005d07a 	srai	r2,r2,1
   195dc:	0085c83a 	sub	r2,zero,r2
   195e0:	e0bff315 	stw	r2,-52(fp)
   195e4:	e0bff917 	ldw	r2,-28(fp)
   195e8:	e0bff015 	stw	r2,-64(fp)
   195ec:	e0fff917 	ldw	r3,-28(fp)
   195f0:	e13ff717 	ldw	r4,-36(fp)
   195f4:	1900030e 	bge	r3,r4,19604 <alt_up_pixel_buffer_dma_draw_line+0x25c>
   195f8:	00800044 	movi	r2,1
   195fc:	e0bff215 	stw	r2,-56(fp)
   19600:	00000206 	br	1960c <alt_up_pixel_buffer_dma_draw_line+0x264>
   19604:	00ffffc4 	movi	r3,-1
   19608:	e0fff215 	stw	r3,-56(fp)
   1960c:	e13ff603 	ldbu	r4,-40(fp)
   19610:	20803fcc 	andi	r2,r4,255
   19614:	1080201c 	xori	r2,r2,128
   19618:	10bfe004 	addi	r2,r2,-128
   1961c:	10800058 	cmpnei	r2,r2,1
   19620:	1000221e 	bne	r2,zero,196ac <alt_up_pixel_buffer_dma_draw_line+0x304>
   19624:	e0bffa17 	ldw	r2,-24(fp)
   19628:	e0bff115 	stw	r2,-60(fp)
   1962c:	00001b06 	br	1969c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
   19630:	e0ffee17 	ldw	r3,-72(fp)
   19634:	d8c00015 	stw	r3,0(sp)
   19638:	e13fef17 	ldw	r4,-68(fp)
   1963c:	d9000115 	stw	r4,4(sp)
   19640:	e13fed17 	ldw	r4,-76(fp)
   19644:	e17fec17 	ldw	r5,-80(fp)
   19648:	e1bff017 	ldw	r6,-64(fp)
   1964c:	e1fff117 	ldw	r7,-60(fp)
   19650:	00192d80 	call	192d8 <helper_plot_pixel>
   19654:	e0bff317 	ldw	r2,-52(fp)
   19658:	e0fff417 	ldw	r3,-48(fp)
   1965c:	10c5883a 	add	r2,r2,r3
   19660:	e0bff315 	stw	r2,-52(fp)
   19664:	e13ff317 	ldw	r4,-52(fp)
   19668:	20800050 	cmplti	r2,r4,1
   1966c:	1000081e 	bne	r2,zero,19690 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
   19670:	e0bff017 	ldw	r2,-64(fp)
   19674:	e0fff217 	ldw	r3,-56(fp)
   19678:	10c5883a 	add	r2,r2,r3
   1967c:	e0bff015 	stw	r2,-64(fp)
   19680:	e13ff317 	ldw	r4,-52(fp)
   19684:	e0bff517 	ldw	r2,-44(fp)
   19688:	2089c83a 	sub	r4,r4,r2
   1968c:	e13ff315 	stw	r4,-52(fp)
   19690:	e0fff117 	ldw	r3,-60(fp)
   19694:	18c00044 	addi	r3,r3,1
   19698:	e0fff115 	stw	r3,-60(fp)
   1969c:	e13ff817 	ldw	r4,-32(fp)
   196a0:	e0bff117 	ldw	r2,-60(fp)
   196a4:	20bfe20e 	bge	r4,r2,19630 <alt_up_pixel_buffer_dma_draw_line+0x288>
   196a8:	00002106 	br	19730 <alt_up_pixel_buffer_dma_draw_line+0x388>
   196ac:	e0fffa17 	ldw	r3,-24(fp)
   196b0:	e0fff115 	stw	r3,-60(fp)
   196b4:	00001b06 	br	19724 <alt_up_pixel_buffer_dma_draw_line+0x37c>
   196b8:	e13fee17 	ldw	r4,-72(fp)
   196bc:	d9000015 	stw	r4,0(sp)
   196c0:	e0bfef17 	ldw	r2,-68(fp)
   196c4:	d8800115 	stw	r2,4(sp)
   196c8:	e13fed17 	ldw	r4,-76(fp)
   196cc:	e17fec17 	ldw	r5,-80(fp)
   196d0:	e1bff117 	ldw	r6,-60(fp)
   196d4:	e1fff017 	ldw	r7,-64(fp)
   196d8:	00192d80 	call	192d8 <helper_plot_pixel>
   196dc:	e0fff317 	ldw	r3,-52(fp)
   196e0:	e13ff417 	ldw	r4,-48(fp)
   196e4:	1907883a 	add	r3,r3,r4
   196e8:	e0fff315 	stw	r3,-52(fp)
   196ec:	e0fff317 	ldw	r3,-52(fp)
   196f0:	18800050 	cmplti	r2,r3,1
   196f4:	1000081e 	bne	r2,zero,19718 <alt_up_pixel_buffer_dma_draw_line+0x370>
   196f8:	e13ff017 	ldw	r4,-64(fp)
   196fc:	e0bff217 	ldw	r2,-56(fp)
   19700:	2089883a 	add	r4,r4,r2
   19704:	e13ff015 	stw	r4,-64(fp)
   19708:	e0fff317 	ldw	r3,-52(fp)
   1970c:	e13ff517 	ldw	r4,-44(fp)
   19710:	1907c83a 	sub	r3,r3,r4
   19714:	e0fff315 	stw	r3,-52(fp)
   19718:	e0bff117 	ldw	r2,-60(fp)
   1971c:	10800044 	addi	r2,r2,1
   19720:	e0bff115 	stw	r2,-60(fp)
   19724:	e0fff817 	ldw	r3,-32(fp)
   19728:	e13ff117 	ldw	r4,-60(fp)
   1972c:	193fe20e 	bge	r3,r4,196b8 <alt_up_pixel_buffer_dma_draw_line+0x310>
   19730:	e037883a 	mov	sp,fp
   19734:	dfc00117 	ldw	ra,4(sp)
   19738:	df000017 	ldw	fp,0(sp)
   1973c:	dec00204 	addi	sp,sp,8
   19740:	f800283a 	ret

00019744 <alt_alarm_start>:
   19744:	defff404 	addi	sp,sp,-48
   19748:	df000b15 	stw	fp,44(sp)
   1974c:	df000b04 	addi	fp,sp,44
   19750:	e13ffb15 	stw	r4,-20(fp)
   19754:	e17ffc15 	stw	r5,-16(fp)
   19758:	e1bffd15 	stw	r6,-12(fp)
   1975c:	e1fffe15 	stw	r7,-8(fp)
   19760:	e03ff915 	stw	zero,-28(fp)
   19764:	00820034 	movhi	r2,2048
   19768:	108a4a04 	addi	r2,r2,10536
   1976c:	10800017 	ldw	r2,0(r2)
   19770:	1005003a 	cmpeq	r2,r2,zero
   19774:	1000411e 	bne	r2,zero,1987c <alt_alarm_start+0x138>
   19778:	e0bffb17 	ldw	r2,-20(fp)
   1977c:	1005003a 	cmpeq	r2,r2,zero
   19780:	10003b1e 	bne	r2,zero,19870 <alt_alarm_start+0x12c>
   19784:	e0fffb17 	ldw	r3,-20(fp)
   19788:	e0bffd17 	ldw	r2,-12(fp)
   1978c:	18800315 	stw	r2,12(r3)
   19790:	e0fffb17 	ldw	r3,-20(fp)
   19794:	e0bffe17 	ldw	r2,-8(fp)
   19798:	18800515 	stw	r2,20(r3)
   1979c:	0005303a 	rdctl	r2,status
   197a0:	e0bff815 	stw	r2,-32(fp)
   197a4:	e0fff817 	ldw	r3,-32(fp)
   197a8:	00bfff84 	movi	r2,-2
   197ac:	1884703a 	and	r2,r3,r2
   197b0:	1001703a 	wrctl	status,r2
   197b4:	e0bff817 	ldw	r2,-32(fp)
   197b8:	e0bffa15 	stw	r2,-24(fp)
   197bc:	00820034 	movhi	r2,2048
   197c0:	108a4b04 	addi	r2,r2,10540
   197c4:	10800017 	ldw	r2,0(r2)
   197c8:	e0bff915 	stw	r2,-28(fp)
   197cc:	e0fffc17 	ldw	r3,-16(fp)
   197d0:	e0bff917 	ldw	r2,-28(fp)
   197d4:	1885883a 	add	r2,r3,r2
   197d8:	10c00044 	addi	r3,r2,1
   197dc:	e0bffb17 	ldw	r2,-20(fp)
   197e0:	10c00215 	stw	r3,8(r2)
   197e4:	e0bffb17 	ldw	r2,-20(fp)
   197e8:	10c00217 	ldw	r3,8(r2)
   197ec:	e0bff917 	ldw	r2,-28(fp)
   197f0:	1880042e 	bgeu	r3,r2,19804 <alt_alarm_start+0xc0>
   197f4:	e0fffb17 	ldw	r3,-20(fp)
   197f8:	00800044 	movi	r2,1
   197fc:	18800405 	stb	r2,16(r3)
   19800:	00000206 	br	1980c <alt_alarm_start+0xc8>
   19804:	e0bffb17 	ldw	r2,-20(fp)
   19808:	10000405 	stb	zero,16(r2)
   1980c:	e0fffb17 	ldw	r3,-20(fp)
   19810:	00820034 	movhi	r2,2048
   19814:	108a1904 	addi	r2,r2,10340
   19818:	e0bff615 	stw	r2,-40(fp)
   1981c:	e0fff715 	stw	r3,-36(fp)
   19820:	e0fff717 	ldw	r3,-36(fp)
   19824:	e0bff617 	ldw	r2,-40(fp)
   19828:	18800115 	stw	r2,4(r3)
   1982c:	e0bff617 	ldw	r2,-40(fp)
   19830:	10c00017 	ldw	r3,0(r2)
   19834:	e0bff717 	ldw	r2,-36(fp)
   19838:	10c00015 	stw	r3,0(r2)
   1983c:	e0bff617 	ldw	r2,-40(fp)
   19840:	10c00017 	ldw	r3,0(r2)
   19844:	e0bff717 	ldw	r2,-36(fp)
   19848:	18800115 	stw	r2,4(r3)
   1984c:	e0fff617 	ldw	r3,-40(fp)
   19850:	e0bff717 	ldw	r2,-36(fp)
   19854:	18800015 	stw	r2,0(r3)
   19858:	e0bffa17 	ldw	r2,-24(fp)
   1985c:	e0bff515 	stw	r2,-44(fp)
   19860:	e0bff517 	ldw	r2,-44(fp)
   19864:	1001703a 	wrctl	status,r2
   19868:	e03fff15 	stw	zero,-4(fp)
   1986c:	00000506 	br	19884 <alt_alarm_start+0x140>
   19870:	00bffa84 	movi	r2,-22
   19874:	e0bfff15 	stw	r2,-4(fp)
   19878:	00000206 	br	19884 <alt_alarm_start+0x140>
   1987c:	00bfde84 	movi	r2,-134
   19880:	e0bfff15 	stw	r2,-4(fp)
   19884:	e0bfff17 	ldw	r2,-4(fp)
   19888:	e037883a 	mov	sp,fp
   1988c:	df000017 	ldw	fp,0(sp)
   19890:	dec00104 	addi	sp,sp,4
   19894:	f800283a 	ret

00019898 <alt_dcache_flush>:
   19898:	defffb04 	addi	sp,sp,-20
   1989c:	df000415 	stw	fp,16(sp)
   198a0:	df000404 	addi	fp,sp,16
   198a4:	e13ffe15 	stw	r4,-8(fp)
   198a8:	e17fff15 	stw	r5,-4(fp)
   198ac:	e0fffe17 	ldw	r3,-8(fp)
   198b0:	e0bfff17 	ldw	r2,-4(fp)
   198b4:	1885883a 	add	r2,r3,r2
   198b8:	e0bffc15 	stw	r2,-16(fp)
   198bc:	e0bffe17 	ldw	r2,-8(fp)
   198c0:	e0bffd15 	stw	r2,-12(fp)
   198c4:	00000506 	br	198dc <alt_dcache_flush+0x44>
   198c8:	e0bffd17 	ldw	r2,-12(fp)
   198cc:	1000001b 	flushda	0(r2)
   198d0:	e0bffd17 	ldw	r2,-12(fp)
   198d4:	10800804 	addi	r2,r2,32
   198d8:	e0bffd15 	stw	r2,-12(fp)
   198dc:	e0fffd17 	ldw	r3,-12(fp)
   198e0:	e0bffc17 	ldw	r2,-16(fp)
   198e4:	18bff836 	bltu	r3,r2,198c8 <alt_dcache_flush+0x30>
   198e8:	e0bffe17 	ldw	r2,-8(fp)
   198ec:	108007cc 	andi	r2,r2,31
   198f0:	1005003a 	cmpeq	r2,r2,zero
   198f4:	1000021e 	bne	r2,zero,19900 <alt_dcache_flush+0x68>
   198f8:	e0bffd17 	ldw	r2,-12(fp)
   198fc:	1000001b 	flushda	0(r2)
   19900:	e037883a 	mov	sp,fp
   19904:	df000017 	ldw	fp,0(sp)
   19908:	dec00104 	addi	sp,sp,4
   1990c:	f800283a 	ret

00019910 <alt_dev_llist_insert>:
   19910:	defff904 	addi	sp,sp,-28
   19914:	dfc00615 	stw	ra,24(sp)
   19918:	df000515 	stw	fp,20(sp)
   1991c:	df000504 	addi	fp,sp,20
   19920:	e13ffd15 	stw	r4,-12(fp)
   19924:	e17ffe15 	stw	r5,-8(fp)
   19928:	e0bffd17 	ldw	r2,-12(fp)
   1992c:	1005003a 	cmpeq	r2,r2,zero
   19930:	1000041e 	bne	r2,zero,19944 <alt_dev_llist_insert+0x34>
   19934:	e0bffd17 	ldw	r2,-12(fp)
   19938:	10800217 	ldw	r2,8(r2)
   1993c:	1004c03a 	cmpne	r2,r2,zero
   19940:	1000071e 	bne	r2,zero,19960 <alt_dev_llist_insert+0x50>
   19944:	00199c40 	call	199c4 <alt_get_errno>
   19948:	1007883a 	mov	r3,r2
   1994c:	00800584 	movi	r2,22
   19950:	18800015 	stw	r2,0(r3)
   19954:	00bffa84 	movi	r2,-22
   19958:	e0bfff15 	stw	r2,-4(fp)
   1995c:	00001306 	br	199ac <alt_dev_llist_insert+0x9c>
   19960:	e0fffd17 	ldw	r3,-12(fp)
   19964:	e0bffe17 	ldw	r2,-8(fp)
   19968:	e0bffb15 	stw	r2,-20(fp)
   1996c:	e0fffc15 	stw	r3,-16(fp)
   19970:	e0fffc17 	ldw	r3,-16(fp)
   19974:	e0bffb17 	ldw	r2,-20(fp)
   19978:	18800115 	stw	r2,4(r3)
   1997c:	e0bffb17 	ldw	r2,-20(fp)
   19980:	10c00017 	ldw	r3,0(r2)
   19984:	e0bffc17 	ldw	r2,-16(fp)
   19988:	10c00015 	stw	r3,0(r2)
   1998c:	e0bffb17 	ldw	r2,-20(fp)
   19990:	10c00017 	ldw	r3,0(r2)
   19994:	e0bffc17 	ldw	r2,-16(fp)
   19998:	18800115 	stw	r2,4(r3)
   1999c:	e0fffb17 	ldw	r3,-20(fp)
   199a0:	e0bffc17 	ldw	r2,-16(fp)
   199a4:	18800015 	stw	r2,0(r3)
   199a8:	e03fff15 	stw	zero,-4(fp)
   199ac:	e0bfff17 	ldw	r2,-4(fp)
   199b0:	e037883a 	mov	sp,fp
   199b4:	dfc00117 	ldw	ra,4(sp)
   199b8:	df000017 	ldw	fp,0(sp)
   199bc:	dec00204 	addi	sp,sp,8
   199c0:	f800283a 	ret

000199c4 <alt_get_errno>:
   199c4:	defffd04 	addi	sp,sp,-12
   199c8:	dfc00215 	stw	ra,8(sp)
   199cc:	df000115 	stw	fp,4(sp)
   199d0:	df000104 	addi	fp,sp,4
   199d4:	00820034 	movhi	r2,2048
   199d8:	108a1304 	addi	r2,r2,10316
   199dc:	10800017 	ldw	r2,0(r2)
   199e0:	1005003a 	cmpeq	r2,r2,zero
   199e4:	1000061e 	bne	r2,zero,19a00 <alt_get_errno+0x3c>
   199e8:	00820034 	movhi	r2,2048
   199ec:	108a1304 	addi	r2,r2,10316
   199f0:	10800017 	ldw	r2,0(r2)
   199f4:	103ee83a 	callr	r2
   199f8:	e0bfff15 	stw	r2,-4(fp)
   199fc:	00000306 	br	19a0c <alt_get_errno+0x48>
   19a00:	00820034 	movhi	r2,2048
   19a04:	108a4504 	addi	r2,r2,10516
   19a08:	e0bfff15 	stw	r2,-4(fp)
   19a0c:	e0bfff17 	ldw	r2,-4(fp)
   19a10:	e037883a 	mov	sp,fp
   19a14:	dfc00117 	ldw	ra,4(sp)
   19a18:	df000017 	ldw	fp,0(sp)
   19a1c:	dec00204 	addi	sp,sp,8
   19a20:	f800283a 	ret

00019a24 <_do_ctors>:
   19a24:	defffd04 	addi	sp,sp,-12
   19a28:	dfc00215 	stw	ra,8(sp)
   19a2c:	df000115 	stw	fp,4(sp)
   19a30:	df000104 	addi	fp,sp,4
   19a34:	00bfff04 	movi	r2,-4
   19a38:	00c000b4 	movhi	r3,2
   19a3c:	18ec6804 	addi	r3,r3,-20064
   19a40:	1885883a 	add	r2,r3,r2
   19a44:	e0bfff15 	stw	r2,-4(fp)
   19a48:	00000606 	br	19a64 <_do_ctors+0x40>
   19a4c:	e0bfff17 	ldw	r2,-4(fp)
   19a50:	10800017 	ldw	r2,0(r2)
   19a54:	103ee83a 	callr	r2
   19a58:	e0bfff17 	ldw	r2,-4(fp)
   19a5c:	10bfff04 	addi	r2,r2,-4
   19a60:	e0bfff15 	stw	r2,-4(fp)
   19a64:	e0ffff17 	ldw	r3,-4(fp)
   19a68:	008000b4 	movhi	r2,2
   19a6c:	10ac6704 	addi	r2,r2,-20068
   19a70:	18bff62e 	bgeu	r3,r2,19a4c <_do_ctors+0x28>
   19a74:	e037883a 	mov	sp,fp
   19a78:	dfc00117 	ldw	ra,4(sp)
   19a7c:	df000017 	ldw	fp,0(sp)
   19a80:	dec00204 	addi	sp,sp,8
   19a84:	f800283a 	ret

00019a88 <_do_dtors>:
   19a88:	defffd04 	addi	sp,sp,-12
   19a8c:	dfc00215 	stw	ra,8(sp)
   19a90:	df000115 	stw	fp,4(sp)
   19a94:	df000104 	addi	fp,sp,4
   19a98:	00bfff04 	movi	r2,-4
   19a9c:	00c000b4 	movhi	r3,2
   19aa0:	18ec6804 	addi	r3,r3,-20064
   19aa4:	1885883a 	add	r2,r3,r2
   19aa8:	e0bfff15 	stw	r2,-4(fp)
   19aac:	00000606 	br	19ac8 <_do_dtors+0x40>
   19ab0:	e0bfff17 	ldw	r2,-4(fp)
   19ab4:	10800017 	ldw	r2,0(r2)
   19ab8:	103ee83a 	callr	r2
   19abc:	e0bfff17 	ldw	r2,-4(fp)
   19ac0:	10bfff04 	addi	r2,r2,-4
   19ac4:	e0bfff15 	stw	r2,-4(fp)
   19ac8:	e0ffff17 	ldw	r3,-4(fp)
   19acc:	008000b4 	movhi	r2,2
   19ad0:	10ac6804 	addi	r2,r2,-20064
   19ad4:	18bff62e 	bgeu	r3,r2,19ab0 <_do_dtors+0x28>
   19ad8:	e037883a 	mov	sp,fp
   19adc:	dfc00117 	ldw	ra,4(sp)
   19ae0:	df000017 	ldw	fp,0(sp)
   19ae4:	dec00204 	addi	sp,sp,8
   19ae8:	f800283a 	ret

00019aec <alt_find_dev>:
   19aec:	defff904 	addi	sp,sp,-28
   19af0:	dfc00615 	stw	ra,24(sp)
   19af4:	df000515 	stw	fp,20(sp)
   19af8:	df000504 	addi	fp,sp,20
   19afc:	e13ffd15 	stw	r4,-12(fp)
   19b00:	e17ffe15 	stw	r5,-8(fp)
   19b04:	e0bffe17 	ldw	r2,-8(fp)
   19b08:	10800017 	ldw	r2,0(r2)
   19b0c:	e0bffc15 	stw	r2,-16(fp)
   19b10:	e13ffd17 	ldw	r4,-12(fp)
   19b14:	0007ae40 	call	7ae4 <strlen>
   19b18:	10800044 	addi	r2,r2,1
   19b1c:	e0bffb15 	stw	r2,-20(fp)
   19b20:	00000d06 	br	19b58 <alt_find_dev+0x6c>
   19b24:	e0bffc17 	ldw	r2,-16(fp)
   19b28:	11000217 	ldw	r4,8(r2)
   19b2c:	e1bffb17 	ldw	r6,-20(fp)
   19b30:	e17ffd17 	ldw	r5,-12(fp)
   19b34:	00077140 	call	7714 <memcmp>
   19b38:	1004c03a 	cmpne	r2,r2,zero
   19b3c:	1000031e 	bne	r2,zero,19b4c <alt_find_dev+0x60>
   19b40:	e0bffc17 	ldw	r2,-16(fp)
   19b44:	e0bfff15 	stw	r2,-4(fp)
   19b48:	00000706 	br	19b68 <alt_find_dev+0x7c>
   19b4c:	e0bffc17 	ldw	r2,-16(fp)
   19b50:	10800017 	ldw	r2,0(r2)
   19b54:	e0bffc15 	stw	r2,-16(fp)
   19b58:	e0fffe17 	ldw	r3,-8(fp)
   19b5c:	e0bffc17 	ldw	r2,-16(fp)
   19b60:	10fff01e 	bne	r2,r3,19b24 <alt_find_dev+0x38>
   19b64:	e03fff15 	stw	zero,-4(fp)
   19b68:	e0bfff17 	ldw	r2,-4(fp)
   19b6c:	e037883a 	mov	sp,fp
   19b70:	dfc00117 	ldw	ra,4(sp)
   19b74:	df000017 	ldw	fp,0(sp)
   19b78:	dec00204 	addi	sp,sp,8
   19b7c:	f800283a 	ret

00019b80 <alt_flash_open_dev>:
   19b80:	defffb04 	addi	sp,sp,-20
   19b84:	dfc00415 	stw	ra,16(sp)
   19b88:	df000315 	stw	fp,12(sp)
   19b8c:	df000304 	addi	fp,sp,12
   19b90:	e13ffe15 	stw	r4,-8(fp)
   19b94:	e13ffe17 	ldw	r4,-8(fp)
   19b98:	d1601904 	addi	r5,gp,-32668
   19b9c:	0019aec0 	call	19aec <alt_find_dev>
   19ba0:	e0bffd15 	stw	r2,-12(fp)
   19ba4:	e0bffd17 	ldw	r2,-12(fp)
   19ba8:	1005003a 	cmpeq	r2,r2,zero
   19bac:	10000b1e 	bne	r2,zero,19bdc <alt_flash_open_dev+0x5c>
   19bb0:	e0bffd17 	ldw	r2,-12(fp)
   19bb4:	10800317 	ldw	r2,12(r2)
   19bb8:	1005003a 	cmpeq	r2,r2,zero
   19bbc:	1000071e 	bne	r2,zero,19bdc <alt_flash_open_dev+0x5c>
   19bc0:	e0bffd17 	ldw	r2,-12(fp)
   19bc4:	10800317 	ldw	r2,12(r2)
   19bc8:	e13ffd17 	ldw	r4,-12(fp)
   19bcc:	e17ffe17 	ldw	r5,-8(fp)
   19bd0:	103ee83a 	callr	r2
   19bd4:	e0bfff15 	stw	r2,-4(fp)
   19bd8:	00000206 	br	19be4 <alt_flash_open_dev+0x64>
   19bdc:	e0bffd17 	ldw	r2,-12(fp)
   19be0:	e0bfff15 	stw	r2,-4(fp)
   19be4:	e0bfff17 	ldw	r2,-4(fp)
   19be8:	e037883a 	mov	sp,fp
   19bec:	dfc00117 	ldw	ra,4(sp)
   19bf0:	df000017 	ldw	fp,0(sp)
   19bf4:	dec00204 	addi	sp,sp,8
   19bf8:	f800283a 	ret

00019bfc <alt_flash_close_dev>:
   19bfc:	defffd04 	addi	sp,sp,-12
   19c00:	dfc00215 	stw	ra,8(sp)
   19c04:	df000115 	stw	fp,4(sp)
   19c08:	df000104 	addi	fp,sp,4
   19c0c:	e13fff15 	stw	r4,-4(fp)
   19c10:	e0bfff17 	ldw	r2,-4(fp)
   19c14:	1005003a 	cmpeq	r2,r2,zero
   19c18:	1000081e 	bne	r2,zero,19c3c <alt_flash_close_dev+0x40>
   19c1c:	e0bfff17 	ldw	r2,-4(fp)
   19c20:	10800417 	ldw	r2,16(r2)
   19c24:	1005003a 	cmpeq	r2,r2,zero
   19c28:	1000041e 	bne	r2,zero,19c3c <alt_flash_close_dev+0x40>
   19c2c:	e0bfff17 	ldw	r2,-4(fp)
   19c30:	10800417 	ldw	r2,16(r2)
   19c34:	e13fff17 	ldw	r4,-4(fp)
   19c38:	103ee83a 	callr	r2
   19c3c:	e037883a 	mov	sp,fp
   19c40:	dfc00117 	ldw	ra,4(sp)
   19c44:	df000017 	ldw	fp,0(sp)
   19c48:	dec00204 	addi	sp,sp,8
   19c4c:	f800283a 	ret

00019c50 <alt_open_fd>:
   19c50:	defff904 	addi	sp,sp,-28
   19c54:	dfc00615 	stw	ra,24(sp)
   19c58:	df000515 	stw	fp,20(sp)
   19c5c:	df000504 	addi	fp,sp,20
   19c60:	e13ffc15 	stw	r4,-16(fp)
   19c64:	e17ffd15 	stw	r5,-12(fp)
   19c68:	e1bffe15 	stw	r6,-8(fp)
   19c6c:	e1ffff15 	stw	r7,-4(fp)
   19c70:	e13ffd17 	ldw	r4,-12(fp)
   19c74:	e17ffe17 	ldw	r5,-8(fp)
   19c78:	e1bfff17 	ldw	r6,-4(fp)
   19c7c:	0019e680 	call	19e68 <open>
   19c80:	e0bffb15 	stw	r2,-20(fp)
   19c84:	e0bffb17 	ldw	r2,-20(fp)
   19c88:	1004803a 	cmplt	r2,r2,zero
   19c8c:	10001c1e 	bne	r2,zero,19d00 <alt_open_fd+0xb0>
   19c90:	e0bffb17 	ldw	r2,-20(fp)
   19c94:	00c20034 	movhi	r3,2048
   19c98:	18c4a204 	addi	r3,r3,4744
   19c9c:	10800324 	muli	r2,r2,12
   19ca0:	10c5883a 	add	r2,r2,r3
   19ca4:	10c00017 	ldw	r3,0(r2)
   19ca8:	e0bffc17 	ldw	r2,-16(fp)
   19cac:	10c00015 	stw	r3,0(r2)
   19cb0:	e0bffb17 	ldw	r2,-20(fp)
   19cb4:	00c20034 	movhi	r3,2048
   19cb8:	18c4a204 	addi	r3,r3,4744
   19cbc:	10800324 	muli	r2,r2,12
   19cc0:	10c5883a 	add	r2,r2,r3
   19cc4:	10800104 	addi	r2,r2,4
   19cc8:	10c00017 	ldw	r3,0(r2)
   19ccc:	e0bffc17 	ldw	r2,-16(fp)
   19cd0:	10c00115 	stw	r3,4(r2)
   19cd4:	e0bffb17 	ldw	r2,-20(fp)
   19cd8:	00c20034 	movhi	r3,2048
   19cdc:	18c4a204 	addi	r3,r3,4744
   19ce0:	10800324 	muli	r2,r2,12
   19ce4:	10c5883a 	add	r2,r2,r3
   19ce8:	10800204 	addi	r2,r2,8
   19cec:	10c00017 	ldw	r3,0(r2)
   19cf0:	e0bffc17 	ldw	r2,-16(fp)
   19cf4:	10c00215 	stw	r3,8(r2)
   19cf8:	e13ffb17 	ldw	r4,-20(fp)
   19cfc:	0012f580 	call	12f58 <alt_release_fd>
   19d00:	e037883a 	mov	sp,fp
   19d04:	dfc00117 	ldw	ra,4(sp)
   19d08:	df000017 	ldw	fp,0(sp)
   19d0c:	dec00204 	addi	sp,sp,8
   19d10:	f800283a 	ret

00019d14 <alt_io_redirect>:
   19d14:	defffb04 	addi	sp,sp,-20
   19d18:	dfc00415 	stw	ra,16(sp)
   19d1c:	df000315 	stw	fp,12(sp)
   19d20:	df000304 	addi	fp,sp,12
   19d24:	e13ffd15 	stw	r4,-12(fp)
   19d28:	e17ffe15 	stw	r5,-8(fp)
   19d2c:	e1bfff15 	stw	r6,-4(fp)
   19d30:	01020034 	movhi	r4,2048
   19d34:	2104a504 	addi	r4,r4,4756
   19d38:	e17ffd17 	ldw	r5,-12(fp)
   19d3c:	01800044 	movi	r6,1
   19d40:	01c07fc4 	movi	r7,511
   19d44:	0019c500 	call	19c50 <alt_open_fd>
   19d48:	01020034 	movhi	r4,2048
   19d4c:	2104a204 	addi	r4,r4,4744
   19d50:	e17ffe17 	ldw	r5,-8(fp)
   19d54:	000d883a 	mov	r6,zero
   19d58:	01c07fc4 	movi	r7,511
   19d5c:	0019c500 	call	19c50 <alt_open_fd>
   19d60:	01020034 	movhi	r4,2048
   19d64:	2104a804 	addi	r4,r4,4768
   19d68:	e17fff17 	ldw	r5,-4(fp)
   19d6c:	01800044 	movi	r6,1
   19d70:	01c07fc4 	movi	r7,511
   19d74:	0019c500 	call	19c50 <alt_open_fd>
   19d78:	e037883a 	mov	sp,fp
   19d7c:	dfc00117 	ldw	ra,4(sp)
   19d80:	df000017 	ldw	fp,0(sp)
   19d84:	dec00204 	addi	sp,sp,8
   19d88:	f800283a 	ret

00019d8c <alt_file_locked>:
   19d8c:	defffc04 	addi	sp,sp,-16
   19d90:	df000315 	stw	fp,12(sp)
   19d94:	df000304 	addi	fp,sp,12
   19d98:	e13ffe15 	stw	r4,-8(fp)
   19d9c:	e0bffe17 	ldw	r2,-8(fp)
   19da0:	10800217 	ldw	r2,8(r2)
   19da4:	10d00034 	orhi	r3,r2,16384
   19da8:	e0bffe17 	ldw	r2,-8(fp)
   19dac:	10c00215 	stw	r3,8(r2)
   19db0:	e03ffd15 	stw	zero,-12(fp)
   19db4:	00002006 	br	19e38 <alt_file_locked+0xac>
   19db8:	e0bffd17 	ldw	r2,-12(fp)
   19dbc:	00c20034 	movhi	r3,2048
   19dc0:	18c4a204 	addi	r3,r3,4744
   19dc4:	10800324 	muli	r2,r2,12
   19dc8:	10c5883a 	add	r2,r2,r3
   19dcc:	10c00017 	ldw	r3,0(r2)
   19dd0:	e0bffe17 	ldw	r2,-8(fp)
   19dd4:	10800017 	ldw	r2,0(r2)
   19dd8:	1880141e 	bne	r3,r2,19e2c <alt_file_locked+0xa0>
   19ddc:	e0bffd17 	ldw	r2,-12(fp)
   19de0:	00c20034 	movhi	r3,2048
   19de4:	18c4a204 	addi	r3,r3,4744
   19de8:	10800324 	muli	r2,r2,12
   19dec:	10c5883a 	add	r2,r2,r3
   19df0:	10800204 	addi	r2,r2,8
   19df4:	10800017 	ldw	r2,0(r2)
   19df8:	1004403a 	cmpge	r2,r2,zero
   19dfc:	10000b1e 	bne	r2,zero,19e2c <alt_file_locked+0xa0>
   19e00:	e0bffd17 	ldw	r2,-12(fp)
   19e04:	10800324 	muli	r2,r2,12
   19e08:	1007883a 	mov	r3,r2
   19e0c:	00820034 	movhi	r2,2048
   19e10:	1084a204 	addi	r2,r2,4744
   19e14:	1887883a 	add	r3,r3,r2
   19e18:	e0bffe17 	ldw	r2,-8(fp)
   19e1c:	18800326 	beq	r3,r2,19e2c <alt_file_locked+0xa0>
   19e20:	00bffcc4 	movi	r2,-13
   19e24:	e0bfff15 	stw	r2,-4(fp)
   19e28:	00000a06 	br	19e54 <alt_file_locked+0xc8>
   19e2c:	e0bffd17 	ldw	r2,-12(fp)
   19e30:	10800044 	addi	r2,r2,1
   19e34:	e0bffd15 	stw	r2,-12(fp)
   19e38:	00820034 	movhi	r2,2048
   19e3c:	108a1204 	addi	r2,r2,10312
   19e40:	10800017 	ldw	r2,0(r2)
   19e44:	1007883a 	mov	r3,r2
   19e48:	e0bffd17 	ldw	r2,-12(fp)
   19e4c:	18bfda2e 	bgeu	r3,r2,19db8 <alt_file_locked+0x2c>
   19e50:	e03fff15 	stw	zero,-4(fp)
   19e54:	e0bfff17 	ldw	r2,-4(fp)
   19e58:	e037883a 	mov	sp,fp
   19e5c:	df000017 	ldw	fp,0(sp)
   19e60:	dec00104 	addi	sp,sp,4
   19e64:	f800283a 	ret

00019e68 <open>:
   19e68:	defff404 	addi	sp,sp,-48
   19e6c:	dfc00b15 	stw	ra,44(sp)
   19e70:	df000a15 	stw	fp,40(sp)
   19e74:	df000a04 	addi	fp,sp,40
   19e78:	e13ffb15 	stw	r4,-20(fp)
   19e7c:	e17ffc15 	stw	r5,-16(fp)
   19e80:	e1bffd15 	stw	r6,-12(fp)
   19e84:	00bfffc4 	movi	r2,-1
   19e88:	e0bff815 	stw	r2,-32(fp)
   19e8c:	00bffb44 	movi	r2,-19
   19e90:	e0bff715 	stw	r2,-36(fp)
   19e94:	e03ff615 	stw	zero,-40(fp)
   19e98:	e13ffb17 	ldw	r4,-20(fp)
   19e9c:	01420034 	movhi	r5,2048
   19ea0:	294a1004 	addi	r5,r5,10304
   19ea4:	0019aec0 	call	19aec <alt_find_dev>
   19ea8:	e0bffa15 	stw	r2,-24(fp)
   19eac:	e0bffa17 	ldw	r2,-24(fp)
   19eb0:	1004c03a 	cmpne	r2,r2,zero
   19eb4:	1000051e 	bne	r2,zero,19ecc <open+0x64>
   19eb8:	e13ffb17 	ldw	r4,-20(fp)
   19ebc:	001ac300 	call	1ac30 <alt_find_file>
   19ec0:	e0bffa15 	stw	r2,-24(fp)
   19ec4:	00800044 	movi	r2,1
   19ec8:	e0bff615 	stw	r2,-40(fp)
   19ecc:	e0bffa17 	ldw	r2,-24(fp)
   19ed0:	1005003a 	cmpeq	r2,r2,zero
   19ed4:	1000301e 	bne	r2,zero,19f98 <open+0x130>
   19ed8:	e13ffa17 	ldw	r4,-24(fp)
   19edc:	001ad500 	call	1ad50 <alt_get_fd>
   19ee0:	e0bff815 	stw	r2,-32(fp)
   19ee4:	e0bff817 	ldw	r2,-32(fp)
   19ee8:	1004403a 	cmpge	r2,r2,zero
   19eec:	1000031e 	bne	r2,zero,19efc <open+0x94>
   19ef0:	e0bff817 	ldw	r2,-32(fp)
   19ef4:	e0bff715 	stw	r2,-36(fp)
   19ef8:	00002906 	br	19fa0 <open+0x138>
   19efc:	e0bff817 	ldw	r2,-32(fp)
   19f00:	10800324 	muli	r2,r2,12
   19f04:	1007883a 	mov	r3,r2
   19f08:	00820034 	movhi	r2,2048
   19f0c:	1084a204 	addi	r2,r2,4744
   19f10:	1885883a 	add	r2,r3,r2
   19f14:	e0bff915 	stw	r2,-28(fp)
   19f18:	e0fffc17 	ldw	r3,-16(fp)
   19f1c:	00900034 	movhi	r2,16384
   19f20:	10bfffc4 	addi	r2,r2,-1
   19f24:	1886703a 	and	r3,r3,r2
   19f28:	e0bff917 	ldw	r2,-28(fp)
   19f2c:	10c00215 	stw	r3,8(r2)
   19f30:	e0bff617 	ldw	r2,-40(fp)
   19f34:	1004c03a 	cmpne	r2,r2,zero
   19f38:	1000061e 	bne	r2,zero,19f54 <open+0xec>
   19f3c:	e13ff917 	ldw	r4,-28(fp)
   19f40:	0019d8c0 	call	19d8c <alt_file_locked>
   19f44:	e0bff715 	stw	r2,-36(fp)
   19f48:	e0bff717 	ldw	r2,-36(fp)
   19f4c:	1004803a 	cmplt	r2,r2,zero
   19f50:	1000131e 	bne	r2,zero,19fa0 <open+0x138>
   19f54:	e0bffa17 	ldw	r2,-24(fp)
   19f58:	10800317 	ldw	r2,12(r2)
   19f5c:	1005003a 	cmpeq	r2,r2,zero
   19f60:	1000091e 	bne	r2,zero,19f88 <open+0x120>
   19f64:	e0bffa17 	ldw	r2,-24(fp)
   19f68:	10800317 	ldw	r2,12(r2)
   19f6c:	e13ff917 	ldw	r4,-28(fp)
   19f70:	e17ffb17 	ldw	r5,-20(fp)
   19f74:	e1bffc17 	ldw	r6,-16(fp)
   19f78:	e1fffd17 	ldw	r7,-12(fp)
   19f7c:	103ee83a 	callr	r2
   19f80:	e0bfff15 	stw	r2,-4(fp)
   19f84:	00000106 	br	19f8c <open+0x124>
   19f88:	e03fff15 	stw	zero,-4(fp)
   19f8c:	e0bfff17 	ldw	r2,-4(fp)
   19f90:	e0bff715 	stw	r2,-36(fp)
   19f94:	00000206 	br	19fa0 <open+0x138>
   19f98:	00bffb44 	movi	r2,-19
   19f9c:	e0bff715 	stw	r2,-36(fp)
   19fa0:	e0bff717 	ldw	r2,-36(fp)
   19fa4:	1004403a 	cmpge	r2,r2,zero
   19fa8:	1000091e 	bne	r2,zero,19fd0 <open+0x168>
   19fac:	e13ff817 	ldw	r4,-32(fp)
   19fb0:	0012f580 	call	12f58 <alt_release_fd>
   19fb4:	0019ff00 	call	19ff0 <alt_get_errno>
   19fb8:	e0fff717 	ldw	r3,-36(fp)
   19fbc:	00c7c83a 	sub	r3,zero,r3
   19fc0:	10c00015 	stw	r3,0(r2)
   19fc4:	00bfffc4 	movi	r2,-1
   19fc8:	e0bffe15 	stw	r2,-8(fp)
   19fcc:	00000206 	br	19fd8 <open+0x170>
   19fd0:	e0bff817 	ldw	r2,-32(fp)
   19fd4:	e0bffe15 	stw	r2,-8(fp)
   19fd8:	e0bffe17 	ldw	r2,-8(fp)
   19fdc:	e037883a 	mov	sp,fp
   19fe0:	dfc00117 	ldw	ra,4(sp)
   19fe4:	df000017 	ldw	fp,0(sp)
   19fe8:	dec00204 	addi	sp,sp,8
   19fec:	f800283a 	ret

00019ff0 <alt_get_errno>:
   19ff0:	defffd04 	addi	sp,sp,-12
   19ff4:	dfc00215 	stw	ra,8(sp)
   19ff8:	df000115 	stw	fp,4(sp)
   19ffc:	df000104 	addi	fp,sp,4
   1a000:	00820034 	movhi	r2,2048
   1a004:	108a1304 	addi	r2,r2,10316
   1a008:	10800017 	ldw	r2,0(r2)
   1a00c:	1005003a 	cmpeq	r2,r2,zero
   1a010:	1000061e 	bne	r2,zero,1a02c <alt_get_errno+0x3c>
   1a014:	00820034 	movhi	r2,2048
   1a018:	108a1304 	addi	r2,r2,10316
   1a01c:	10800017 	ldw	r2,0(r2)
   1a020:	103ee83a 	callr	r2
   1a024:	e0bfff15 	stw	r2,-4(fp)
   1a028:	00000306 	br	1a038 <alt_get_errno+0x48>
   1a02c:	00820034 	movhi	r2,2048
   1a030:	108a4504 	addi	r2,r2,10516
   1a034:	e0bfff15 	stw	r2,-4(fp)
   1a038:	e0bfff17 	ldw	r2,-4(fp)
   1a03c:	e037883a 	mov	sp,fp
   1a040:	dfc00117 	ldw	ra,4(sp)
   1a044:	df000017 	ldw	fp,0(sp)
   1a048:	dec00204 	addi	sp,sp,8
   1a04c:	f800283a 	ret

0001a050 <alt_alarm_stop>:
   1a050:	defffa04 	addi	sp,sp,-24
   1a054:	df000515 	stw	fp,20(sp)
   1a058:	df000504 	addi	fp,sp,20
   1a05c:	e13fff15 	stw	r4,-4(fp)
   1a060:	0005303a 	rdctl	r2,status
   1a064:	e0bffd15 	stw	r2,-12(fp)
   1a068:	e0fffd17 	ldw	r3,-12(fp)
   1a06c:	00bfff84 	movi	r2,-2
   1a070:	1884703a 	and	r2,r3,r2
   1a074:	1001703a 	wrctl	status,r2
   1a078:	e0bffd17 	ldw	r2,-12(fp)
   1a07c:	e0bffe15 	stw	r2,-8(fp)
   1a080:	e0bfff17 	ldw	r2,-4(fp)
   1a084:	e0bffc15 	stw	r2,-16(fp)
   1a088:	e0bffc17 	ldw	r2,-16(fp)
   1a08c:	10c00017 	ldw	r3,0(r2)
   1a090:	e0bffc17 	ldw	r2,-16(fp)
   1a094:	10800117 	ldw	r2,4(r2)
   1a098:	18800115 	stw	r2,4(r3)
   1a09c:	e0bffc17 	ldw	r2,-16(fp)
   1a0a0:	10c00117 	ldw	r3,4(r2)
   1a0a4:	e0bffc17 	ldw	r2,-16(fp)
   1a0a8:	10800017 	ldw	r2,0(r2)
   1a0ac:	18800015 	stw	r2,0(r3)
   1a0b0:	e0fffc17 	ldw	r3,-16(fp)
   1a0b4:	e0bffc17 	ldw	r2,-16(fp)
   1a0b8:	18800115 	stw	r2,4(r3)
   1a0bc:	e0fffc17 	ldw	r3,-16(fp)
   1a0c0:	e0bffc17 	ldw	r2,-16(fp)
   1a0c4:	18800015 	stw	r2,0(r3)
   1a0c8:	e0bffe17 	ldw	r2,-8(fp)
   1a0cc:	e0bffb15 	stw	r2,-20(fp)
   1a0d0:	e0bffb17 	ldw	r2,-20(fp)
   1a0d4:	1001703a 	wrctl	status,r2
   1a0d8:	e037883a 	mov	sp,fp
   1a0dc:	df000017 	ldw	fp,0(sp)
   1a0e0:	dec00104 	addi	sp,sp,4
   1a0e4:	f800283a 	ret

0001a0e8 <alt_tick>:
   1a0e8:	defffb04 	addi	sp,sp,-20
   1a0ec:	dfc00415 	stw	ra,16(sp)
   1a0f0:	df000315 	stw	fp,12(sp)
   1a0f4:	df000304 	addi	fp,sp,12
   1a0f8:	d0a01b17 	ldw	r2,-32660(gp)
   1a0fc:	e0bffe15 	stw	r2,-8(fp)
   1a100:	d0a04d17 	ldw	r2,-32460(gp)
   1a104:	10800044 	addi	r2,r2,1
   1a108:	d0a04d15 	stw	r2,-32460(gp)
   1a10c:	00003106 	br	1a1d4 <alt_tick+0xec>
   1a110:	e0bffe17 	ldw	r2,-8(fp)
   1a114:	10800017 	ldw	r2,0(r2)
   1a118:	e0bfff15 	stw	r2,-4(fp)
   1a11c:	e0bffe17 	ldw	r2,-8(fp)
   1a120:	10800403 	ldbu	r2,16(r2)
   1a124:	10803fcc 	andi	r2,r2,255
   1a128:	1005003a 	cmpeq	r2,r2,zero
   1a12c:	1000051e 	bne	r2,zero,1a144 <alt_tick+0x5c>
   1a130:	d0a04d17 	ldw	r2,-32460(gp)
   1a134:	1004c03a 	cmpne	r2,r2,zero
   1a138:	1000021e 	bne	r2,zero,1a144 <alt_tick+0x5c>
   1a13c:	e0bffe17 	ldw	r2,-8(fp)
   1a140:	10000405 	stb	zero,16(r2)
   1a144:	e0bffe17 	ldw	r2,-8(fp)
   1a148:	10c00217 	ldw	r3,8(r2)
   1a14c:	d0a04d17 	ldw	r2,-32460(gp)
   1a150:	10c01e36 	bltu	r2,r3,1a1cc <alt_tick+0xe4>
   1a154:	e0bffe17 	ldw	r2,-8(fp)
   1a158:	10800403 	ldbu	r2,16(r2)
   1a15c:	10803fcc 	andi	r2,r2,255
   1a160:	1004c03a 	cmpne	r2,r2,zero
   1a164:	1000191e 	bne	r2,zero,1a1cc <alt_tick+0xe4>
   1a168:	e0bffe17 	ldw	r2,-8(fp)
   1a16c:	10c00317 	ldw	r3,12(r2)
   1a170:	e0bffe17 	ldw	r2,-8(fp)
   1a174:	11000517 	ldw	r4,20(r2)
   1a178:	183ee83a 	callr	r3
   1a17c:	e0bffd15 	stw	r2,-12(fp)
   1a180:	e0bffd17 	ldw	r2,-12(fp)
   1a184:	1004c03a 	cmpne	r2,r2,zero
   1a188:	1000031e 	bne	r2,zero,1a198 <alt_tick+0xb0>
   1a18c:	e13ffe17 	ldw	r4,-8(fp)
   1a190:	001a0500 	call	1a050 <alt_alarm_stop>
   1a194:	00000d06 	br	1a1cc <alt_tick+0xe4>
   1a198:	e0bffe17 	ldw	r2,-8(fp)
   1a19c:	10c00217 	ldw	r3,8(r2)
   1a1a0:	e0bffd17 	ldw	r2,-12(fp)
   1a1a4:	1887883a 	add	r3,r3,r2
   1a1a8:	e0bffe17 	ldw	r2,-8(fp)
   1a1ac:	10c00215 	stw	r3,8(r2)
   1a1b0:	e0bffe17 	ldw	r2,-8(fp)
   1a1b4:	10c00217 	ldw	r3,8(r2)
   1a1b8:	d0a04d17 	ldw	r2,-32460(gp)
   1a1bc:	1880032e 	bgeu	r3,r2,1a1cc <alt_tick+0xe4>
   1a1c0:	e0fffe17 	ldw	r3,-8(fp)
   1a1c4:	00800044 	movi	r2,1
   1a1c8:	18800405 	stb	r2,16(r3)
   1a1cc:	e0bfff17 	ldw	r2,-4(fp)
   1a1d0:	e0bffe15 	stw	r2,-8(fp)
   1a1d4:	d0e01b04 	addi	r3,gp,-32660
   1a1d8:	e0bffe17 	ldw	r2,-8(fp)
   1a1dc:	10ffcc1e 	bne	r2,r3,1a110 <alt_tick+0x28>
   1a1e0:	e037883a 	mov	sp,fp
   1a1e4:	dfc00117 	ldw	ra,4(sp)
   1a1e8:	df000017 	ldw	fp,0(sp)
   1a1ec:	dec00204 	addi	sp,sp,8
   1a1f0:	f800283a 	ret

0001a1f4 <usleep>:
   1a1f4:	defffd04 	addi	sp,sp,-12
   1a1f8:	dfc00215 	stw	ra,8(sp)
   1a1fc:	df000115 	stw	fp,4(sp)
   1a200:	df000104 	addi	fp,sp,4
   1a204:	e13fff15 	stw	r4,-4(fp)
   1a208:	e13fff17 	ldw	r4,-4(fp)
   1a20c:	001ab040 	call	1ab04 <alt_busy_sleep>
   1a210:	e037883a 	mov	sp,fp
   1a214:	dfc00117 	ldw	ra,4(sp)
   1a218:	df000017 	ldw	fp,0(sp)
   1a21c:	dec00204 	addi	sp,sp,8
   1a220:	f800283a 	ret

0001a224 <altera_nios2_qsys_irq_init>:
   1a224:	deffff04 	addi	sp,sp,-4
   1a228:	df000015 	stw	fp,0(sp)
   1a22c:	d839883a 	mov	fp,sp
   1a230:	000170fa 	wrctl	ienable,zero
   1a234:	e037883a 	mov	sp,fp
   1a238:	df000017 	ldw	fp,0(sp)
   1a23c:	dec00104 	addi	sp,sp,4
   1a240:	f800283a 	ret

0001a244 <alt_program_amd>:
   1a244:	defff704 	addi	sp,sp,-36
   1a248:	dfc00815 	stw	ra,32(sp)
   1a24c:	df000715 	stw	fp,28(sp)
   1a250:	df000704 	addi	fp,sp,28
   1a254:	e13ffc15 	stw	r4,-16(fp)
   1a258:	e17ffd15 	stw	r5,-12(fp)
   1a25c:	e1bffe15 	stw	r6,-8(fp)
   1a260:	e1ffff15 	stw	r7,-4(fp)
   1a264:	e03ffb15 	stw	zero,-20(fp)
   1a268:	e0bffc17 	ldw	r2,-16(fp)
   1a26c:	e0bffa15 	stw	r2,-24(fp)
   1a270:	e1bfff17 	ldw	r6,-4(fp)
   1a274:	008000b4 	movhi	r2,2
   1a278:	10a97a04 	addi	r2,r2,-23064
   1a27c:	d8800015 	stw	r2,0(sp)
   1a280:	e13ffa17 	ldw	r4,-24(fp)
   1a284:	e17ffe17 	ldw	r5,-8(fp)
   1a288:	e1c00217 	ldw	r7,8(fp)
   1a28c:	0013bbc0 	call	13bbc <alt_flash_program_block>
   1a290:	e0bffb15 	stw	r2,-20(fp)
   1a294:	e0bffb17 	ldw	r2,-20(fp)
   1a298:	e037883a 	mov	sp,fp
   1a29c:	dfc00117 	ldw	ra,4(sp)
   1a2a0:	df000017 	ldw	fp,0(sp)
   1a2a4:	dec00204 	addi	sp,sp,8
   1a2a8:	f800283a 	ret

0001a2ac <alt_erase_block_amd>:
   1a2ac:	defff804 	addi	sp,sp,-32
   1a2b0:	dfc00715 	stw	ra,28(sp)
   1a2b4:	df000615 	stw	fp,24(sp)
   1a2b8:	df000604 	addi	fp,sp,24
   1a2bc:	e13ffe15 	stw	r4,-8(fp)
   1a2c0:	e17fff15 	stw	r5,-4(fp)
   1a2c4:	e03ffc15 	stw	zero,-16(fp)
   1a2c8:	e0bffe17 	ldw	r2,-8(fp)
   1a2cc:	e0bffa15 	stw	r2,-24(fp)
   1a2d0:	e0bffa17 	ldw	r2,-24(fp)
   1a2d4:	10c03317 	ldw	r3,204(r2)
   1a2d8:	e0bffa17 	ldw	r2,-24(fp)
   1a2dc:	11000a17 	ldw	r4,40(r2)
   1a2e0:	01415544 	movi	r5,1365
   1a2e4:	01802a84 	movi	r6,170
   1a2e8:	183ee83a 	callr	r3
   1a2ec:	e0bffa17 	ldw	r2,-24(fp)
   1a2f0:	10c03317 	ldw	r3,204(r2)
   1a2f4:	e0bffa17 	ldw	r2,-24(fp)
   1a2f8:	11000a17 	ldw	r4,40(r2)
   1a2fc:	0140aa84 	movi	r5,682
   1a300:	01801544 	movi	r6,85
   1a304:	183ee83a 	callr	r3
   1a308:	e0bffa17 	ldw	r2,-24(fp)
   1a30c:	10c03317 	ldw	r3,204(r2)
   1a310:	e0bffa17 	ldw	r2,-24(fp)
   1a314:	11000a17 	ldw	r4,40(r2)
   1a318:	01415544 	movi	r5,1365
   1a31c:	01802004 	movi	r6,128
   1a320:	183ee83a 	callr	r3
   1a324:	e0bffa17 	ldw	r2,-24(fp)
   1a328:	10c03317 	ldw	r3,204(r2)
   1a32c:	e0bffa17 	ldw	r2,-24(fp)
   1a330:	11000a17 	ldw	r4,40(r2)
   1a334:	01415544 	movi	r5,1365
   1a338:	01802a84 	movi	r6,170
   1a33c:	183ee83a 	callr	r3
   1a340:	e0bffa17 	ldw	r2,-24(fp)
   1a344:	10c03317 	ldw	r3,204(r2)
   1a348:	e0bffa17 	ldw	r2,-24(fp)
   1a34c:	11000a17 	ldw	r4,40(r2)
   1a350:	0140aa84 	movi	r5,682
   1a354:	01801544 	movi	r6,85
   1a358:	183ee83a 	callr	r3
   1a35c:	e0bffa17 	ldw	r2,-24(fp)
   1a360:	11803517 	ldw	r6,212(r2)
   1a364:	e0bffa17 	ldw	r2,-24(fp)
   1a368:	10800a17 	ldw	r2,40(r2)
   1a36c:	1007883a 	mov	r3,r2
   1a370:	e0bfff17 	ldw	r2,-4(fp)
   1a374:	1889883a 	add	r4,r3,r2
   1a378:	01400c04 	movi	r5,48
   1a37c:	303ee83a 	callr	r6
   1a380:	0109c404 	movi	r4,10000
   1a384:	001a1f40 	call	1a1f4 <usleep>
   1a388:	00800c84 	movi	r2,50
   1a38c:	e0bffb15 	stw	r2,-20(fp)
   1a390:	e0bffa17 	ldw	r2,-24(fp)
   1a394:	10800a17 	ldw	r2,40(r2)
   1a398:	1007883a 	mov	r3,r2
   1a39c:	e0bfff17 	ldw	r2,-4(fp)
   1a3a0:	1885883a 	add	r2,r3,r2
   1a3a4:	10800023 	ldbuio	r2,0(r2)
   1a3a8:	e0bffd05 	stb	r2,-12(fp)
   1a3ac:	0100fa04 	movi	r4,1000
   1a3b0:	001a1f40 	call	1a1f4 <usleep>
   1a3b4:	e0bffb17 	ldw	r2,-20(fp)
   1a3b8:	10bfffc4 	addi	r2,r2,-1
   1a3bc:	e0bffb15 	stw	r2,-20(fp)
   1a3c0:	e0bffd03 	ldbu	r2,-12(fp)
   1a3c4:	10803fcc 	andi	r2,r2,255
   1a3c8:	1080020c 	andi	r2,r2,8
   1a3cc:	1004c03a 	cmpne	r2,r2,zero
   1a3d0:	1000031e 	bne	r2,zero,1a3e0 <alt_erase_block_amd+0x134>
   1a3d4:	e0bffb17 	ldw	r2,-20(fp)
   1a3d8:	10800048 	cmpgei	r2,r2,1
   1a3dc:	103fec1e 	bne	r2,zero,1a390 <alt_erase_block_amd+0xe4>
   1a3e0:	e0bffa17 	ldw	r2,-24(fp)
   1a3e4:	10803117 	ldw	r2,196(r2)
   1a3e8:	e0bffb15 	stw	r2,-20(fp)
   1a3ec:	00001706 	br	1a44c <alt_erase_block_amd+0x1a0>
   1a3f0:	e0bffa17 	ldw	r2,-24(fp)
   1a3f4:	10800a17 	ldw	r2,40(r2)
   1a3f8:	1007883a 	mov	r3,r2
   1a3fc:	e0bfff17 	ldw	r2,-4(fp)
   1a400:	1885883a 	add	r2,r3,r2
   1a404:	10800023 	ldbuio	r2,0(r2)
   1a408:	e0bffd05 	stb	r2,-12(fp)
   1a40c:	e0bffd03 	ldbu	r2,-12(fp)
   1a410:	10803fcc 	andi	r2,r2,255
   1a414:	1080201c 	xori	r2,r2,128
   1a418:	10bfe004 	addi	r2,r2,-128
   1a41c:	1004803a 	cmplt	r2,r2,zero
   1a420:	10000d1e 	bne	r2,zero,1a458 <alt_erase_block_amd+0x1ac>
   1a424:	e0bffd03 	ldbu	r2,-12(fp)
   1a428:	10803fcc 	andi	r2,r2,255
   1a42c:	1080080c 	andi	r2,r2,32
   1a430:	1004c03a 	cmpne	r2,r2,zero
   1a434:	1000081e 	bne	r2,zero,1a458 <alt_erase_block_amd+0x1ac>
   1a438:	0100fa04 	movi	r4,1000
   1a43c:	001a1f40 	call	1a1f4 <usleep>
   1a440:	e0bffb17 	ldw	r2,-20(fp)
   1a444:	10bf0604 	addi	r2,r2,-1000
   1a448:	e0bffb15 	stw	r2,-20(fp)
   1a44c:	e0bffb17 	ldw	r2,-20(fp)
   1a450:	10800048 	cmpgei	r2,r2,1
   1a454:	103fe61e 	bne	r2,zero,1a3f0 <alt_erase_block_amd+0x144>
   1a458:	e0bffb17 	ldw	r2,-20(fp)
   1a45c:	10800048 	cmpgei	r2,r2,1
   1a460:	1000031e 	bne	r2,zero,1a470 <alt_erase_block_amd+0x1c4>
   1a464:	00bfe304 	movi	r2,-116
   1a468:	e0bffc15 	stw	r2,-16(fp)
   1a46c:	00000f06 	br	1a4ac <alt_erase_block_amd+0x200>
   1a470:	e0bffa17 	ldw	r2,-24(fp)
   1a474:	10800a17 	ldw	r2,40(r2)
   1a478:	1007883a 	mov	r3,r2
   1a47c:	e0bfff17 	ldw	r2,-4(fp)
   1a480:	1885883a 	add	r2,r3,r2
   1a484:	10800023 	ldbuio	r2,0(r2)
   1a488:	e0bffd05 	stb	r2,-12(fp)
   1a48c:	e0bffd03 	ldbu	r2,-12(fp)
   1a490:	10803fcc 	andi	r2,r2,255
   1a494:	1080201c 	xori	r2,r2,128
   1a498:	10bfe004 	addi	r2,r2,-128
   1a49c:	1004803a 	cmplt	r2,r2,zero
   1a4a0:	1000021e 	bne	r2,zero,1a4ac <alt_erase_block_amd+0x200>
   1a4a4:	00bffec4 	movi	r2,-5
   1a4a8:	e0bffc15 	stw	r2,-16(fp)
   1a4ac:	e0bffc17 	ldw	r2,-16(fp)
   1a4b0:	e037883a 	mov	sp,fp
   1a4b4:	dfc00117 	ldw	ra,4(sp)
   1a4b8:	df000017 	ldw	fp,0(sp)
   1a4bc:	dec00204 	addi	sp,sp,8
   1a4c0:	f800283a 	ret

0001a4c4 <alt_wait_for_command_to_complete_amd>:
   1a4c4:	defff804 	addi	sp,sp,-32
   1a4c8:	dfc00715 	stw	ra,28(sp)
   1a4cc:	df000615 	stw	fp,24(sp)
   1a4d0:	df000604 	addi	fp,sp,24
   1a4d4:	e13ffd15 	stw	r4,-12(fp)
   1a4d8:	e17ffe15 	stw	r5,-8(fp)
   1a4dc:	e1bfff05 	stb	r6,-4(fp)
   1a4e0:	e0bffd17 	ldw	r2,-12(fp)
   1a4e4:	10803017 	ldw	r2,192(r2)
   1a4e8:	10801924 	muli	r2,r2,100
   1a4ec:	e0bffb15 	stw	r2,-20(fp)
   1a4f0:	e03ffa15 	stw	zero,-24(fp)
   1a4f4:	e0bffd17 	ldw	r2,-12(fp)
   1a4f8:	10800a17 	ldw	r2,40(r2)
   1a4fc:	1007883a 	mov	r3,r2
   1a500:	e0bffe17 	ldw	r2,-8(fp)
   1a504:	1885883a 	add	r2,r3,r2
   1a508:	10800023 	ldbuio	r2,0(r2)
   1a50c:	e0bffc05 	stb	r2,-16(fp)
   1a510:	00001706 	br	1a570 <alt_wait_for_command_to_complete_amd+0xac>
   1a514:	e0bffc03 	ldbu	r2,-16(fp)
   1a518:	10803fcc 	andi	r2,r2,255
   1a51c:	10c0200c 	andi	r3,r2,128
   1a520:	e0bfff03 	ldbu	r2,-4(fp)
   1a524:	1080200c 	andi	r2,r2,128
   1a528:	18801426 	beq	r3,r2,1a57c <alt_wait_for_command_to_complete_amd+0xb8>
   1a52c:	e0bffc03 	ldbu	r2,-16(fp)
   1a530:	10803fcc 	andi	r2,r2,255
   1a534:	1080080c 	andi	r2,r2,32
   1a538:	1004c03a 	cmpne	r2,r2,zero
   1a53c:	10000f1e 	bne	r2,zero,1a57c <alt_wait_for_command_to_complete_amd+0xb8>
   1a540:	01000044 	movi	r4,1
   1a544:	001a1f40 	call	1a1f4 <usleep>
   1a548:	e0bffb17 	ldw	r2,-20(fp)
   1a54c:	10bfffc4 	addi	r2,r2,-1
   1a550:	e0bffb15 	stw	r2,-20(fp)
   1a554:	e0bffd17 	ldw	r2,-12(fp)
   1a558:	10800a17 	ldw	r2,40(r2)
   1a55c:	1007883a 	mov	r3,r2
   1a560:	e0bffe17 	ldw	r2,-8(fp)
   1a564:	1885883a 	add	r2,r3,r2
   1a568:	10800023 	ldbuio	r2,0(r2)
   1a56c:	e0bffc05 	stb	r2,-16(fp)
   1a570:	e0bffb17 	ldw	r2,-20(fp)
   1a574:	10800048 	cmpgei	r2,r2,1
   1a578:	103fe61e 	bne	r2,zero,1a514 <alt_wait_for_command_to_complete_amd+0x50>
   1a57c:	e0bffb17 	ldw	r2,-20(fp)
   1a580:	1004c03a 	cmpne	r2,r2,zero
   1a584:	1000031e 	bne	r2,zero,1a594 <alt_wait_for_command_to_complete_amd+0xd0>
   1a588:	00bfe304 	movi	r2,-116
   1a58c:	e0bffa15 	stw	r2,-24(fp)
   1a590:	00000f06 	br	1a5d0 <alt_wait_for_command_to_complete_amd+0x10c>
   1a594:	e0bffd17 	ldw	r2,-12(fp)
   1a598:	10800a17 	ldw	r2,40(r2)
   1a59c:	1007883a 	mov	r3,r2
   1a5a0:	e0bffe17 	ldw	r2,-8(fp)
   1a5a4:	1885883a 	add	r2,r3,r2
   1a5a8:	10800023 	ldbuio	r2,0(r2)
   1a5ac:	e0bffc05 	stb	r2,-16(fp)
   1a5b0:	e0bffc03 	ldbu	r2,-16(fp)
   1a5b4:	10803fcc 	andi	r2,r2,255
   1a5b8:	10c0200c 	andi	r3,r2,128
   1a5bc:	e0bfff03 	ldbu	r2,-4(fp)
   1a5c0:	1080200c 	andi	r2,r2,128
   1a5c4:	18800226 	beq	r3,r2,1a5d0 <alt_wait_for_command_to_complete_amd+0x10c>
   1a5c8:	00bffec4 	movi	r2,-5
   1a5cc:	e0bffa15 	stw	r2,-24(fp)
   1a5d0:	e0bffa17 	ldw	r2,-24(fp)
   1a5d4:	e037883a 	mov	sp,fp
   1a5d8:	dfc00117 	ldw	ra,4(sp)
   1a5dc:	df000017 	ldw	fp,0(sp)
   1a5e0:	dec00204 	addi	sp,sp,8
   1a5e4:	f800283a 	ret

0001a5e8 <alt_write_word_amd>:
   1a5e8:	defff904 	addi	sp,sp,-28
   1a5ec:	dfc00615 	stw	ra,24(sp)
   1a5f0:	df000515 	stw	fp,20(sp)
   1a5f4:	df000504 	addi	fp,sp,20
   1a5f8:	e13ffd15 	stw	r4,-12(fp)
   1a5fc:	e17ffe15 	stw	r5,-8(fp)
   1a600:	e1bfff15 	stw	r6,-4(fp)
   1a604:	e03ffc15 	stw	zero,-16(fp)
   1a608:	e0bffd17 	ldw	r2,-12(fp)
   1a60c:	10c03317 	ldw	r3,204(r2)
   1a610:	e0bffd17 	ldw	r2,-12(fp)
   1a614:	11000a17 	ldw	r4,40(r2)
   1a618:	01415544 	movi	r5,1365
   1a61c:	01802a84 	movi	r6,170
   1a620:	183ee83a 	callr	r3
   1a624:	e0bffd17 	ldw	r2,-12(fp)
   1a628:	10c03317 	ldw	r3,204(r2)
   1a62c:	e0bffd17 	ldw	r2,-12(fp)
   1a630:	11000a17 	ldw	r4,40(r2)
   1a634:	0140aa84 	movi	r5,682
   1a638:	01801544 	movi	r6,85
   1a63c:	183ee83a 	callr	r3
   1a640:	e0bffd17 	ldw	r2,-12(fp)
   1a644:	10c03317 	ldw	r3,204(r2)
   1a648:	e0bffd17 	ldw	r2,-12(fp)
   1a64c:	11000a17 	ldw	r4,40(r2)
   1a650:	01415544 	movi	r5,1365
   1a654:	01802804 	movi	r6,160
   1a658:	183ee83a 	callr	r3
   1a65c:	e0bfff17 	ldw	r2,-4(fp)
   1a660:	10800003 	ldbu	r2,0(r2)
   1a664:	e0bffb05 	stb	r2,-20(fp)
   1a668:	e13ffd17 	ldw	r4,-12(fp)
   1a66c:	e17ffe17 	ldw	r5,-8(fp)
   1a670:	e1bfff17 	ldw	r6,-4(fp)
   1a674:	0013a580 	call	13a58 <alt_write_value_to_flash>
   1a678:	e1bffb03 	ldbu	r6,-20(fp)
   1a67c:	e13ffd17 	ldw	r4,-12(fp)
   1a680:	e17ffe17 	ldw	r5,-8(fp)
   1a684:	001a4c40 	call	1a4c4 <alt_wait_for_command_to_complete_amd>
   1a688:	e0bffc15 	stw	r2,-16(fp)
   1a68c:	e0bffc17 	ldw	r2,-16(fp)
   1a690:	e037883a 	mov	sp,fp
   1a694:	dfc00117 	ldw	ra,4(sp)
   1a698:	df000017 	ldw	fp,0(sp)
   1a69c:	dec00204 	addi	sp,sp,8
   1a6a0:	f800283a 	ret

0001a6a4 <alt_program_intel>:
   1a6a4:	defff704 	addi	sp,sp,-36
   1a6a8:	dfc00815 	stw	ra,32(sp)
   1a6ac:	df000715 	stw	fp,28(sp)
   1a6b0:	df000704 	addi	fp,sp,28
   1a6b4:	e13ffc15 	stw	r4,-16(fp)
   1a6b8:	e17ffd15 	stw	r5,-12(fp)
   1a6bc:	e1bffe15 	stw	r6,-8(fp)
   1a6c0:	e1ffff15 	stw	r7,-4(fp)
   1a6c4:	e03ffb15 	stw	zero,-20(fp)
   1a6c8:	e0bffc17 	ldw	r2,-16(fp)
   1a6cc:	e0bffa15 	stw	r2,-24(fp)
   1a6d0:	e13ffa17 	ldw	r4,-24(fp)
   1a6d4:	e17ffd17 	ldw	r5,-12(fp)
   1a6d8:	001a89c0 	call	1a89c <alt_unlock_block_intel>
   1a6dc:	e0bffb15 	stw	r2,-20(fp)
   1a6e0:	e0bffb17 	ldw	r2,-20(fp)
   1a6e4:	1004c03a 	cmpne	r2,r2,zero
   1a6e8:	1000091e 	bne	r2,zero,1a710 <alt_program_intel+0x6c>
   1a6ec:	e1bfff17 	ldw	r6,-4(fp)
   1a6f0:	008000b4 	movhi	r2,2
   1a6f4:	10aa8a04 	addi	r2,r2,-21976
   1a6f8:	d8800015 	stw	r2,0(sp)
   1a6fc:	e13ffa17 	ldw	r4,-24(fp)
   1a700:	e17ffe17 	ldw	r5,-8(fp)
   1a704:	e1c00217 	ldw	r7,8(fp)
   1a708:	0013bbc0 	call	13bbc <alt_flash_program_block>
   1a70c:	e0bffb15 	stw	r2,-20(fp)
   1a710:	e0bffb17 	ldw	r2,-20(fp)
   1a714:	e037883a 	mov	sp,fp
   1a718:	dfc00117 	ldw	ra,4(sp)
   1a71c:	df000017 	ldw	fp,0(sp)
   1a720:	dec00204 	addi	sp,sp,8
   1a724:	f800283a 	ret

0001a728 <alt_erase_block_intel>:
   1a728:	defff804 	addi	sp,sp,-32
   1a72c:	dfc00715 	stw	ra,28(sp)
   1a730:	df000615 	stw	fp,24(sp)
   1a734:	df000604 	addi	fp,sp,24
   1a738:	e13ffe15 	stw	r4,-8(fp)
   1a73c:	e17fff15 	stw	r5,-4(fp)
   1a740:	e03ffc15 	stw	zero,-16(fp)
   1a744:	e0bffe17 	ldw	r2,-8(fp)
   1a748:	e0bffb15 	stw	r2,-20(fp)
   1a74c:	e0bffb17 	ldw	r2,-20(fp)
   1a750:	10803117 	ldw	r2,196(r2)
   1a754:	e0bffa15 	stw	r2,-24(fp)
   1a758:	e13ffb17 	ldw	r4,-20(fp)
   1a75c:	e17fff17 	ldw	r5,-4(fp)
   1a760:	001a89c0 	call	1a89c <alt_unlock_block_intel>
   1a764:	e0bffc15 	stw	r2,-16(fp)
   1a768:	e0bffc17 	ldw	r2,-16(fp)
   1a76c:	1004c03a 	cmpne	r2,r2,zero
   1a770:	1000441e 	bne	r2,zero,1a884 <alt_erase_block_intel+0x15c>
   1a774:	e0bffb17 	ldw	r2,-20(fp)
   1a778:	11803517 	ldw	r6,212(r2)
   1a77c:	e0bffb17 	ldw	r2,-20(fp)
   1a780:	10800a17 	ldw	r2,40(r2)
   1a784:	1007883a 	mov	r3,r2
   1a788:	e0bfff17 	ldw	r2,-4(fp)
   1a78c:	1889883a 	add	r4,r3,r2
   1a790:	01400804 	movi	r5,32
   1a794:	303ee83a 	callr	r6
   1a798:	e0bffb17 	ldw	r2,-20(fp)
   1a79c:	11803517 	ldw	r6,212(r2)
   1a7a0:	e0bffb17 	ldw	r2,-20(fp)
   1a7a4:	10800a17 	ldw	r2,40(r2)
   1a7a8:	1007883a 	mov	r3,r2
   1a7ac:	e0bfff17 	ldw	r2,-4(fp)
   1a7b0:	1889883a 	add	r4,r3,r2
   1a7b4:	01403404 	movi	r5,208
   1a7b8:	303ee83a 	callr	r6
   1a7bc:	e0bffb17 	ldw	r2,-20(fp)
   1a7c0:	10800a17 	ldw	r2,40(r2)
   1a7c4:	1007883a 	mov	r3,r2
   1a7c8:	e0bfff17 	ldw	r2,-4(fp)
   1a7cc:	1885883a 	add	r2,r3,r2
   1a7d0:	10800023 	ldbuio	r2,0(r2)
   1a7d4:	e0bffd05 	stb	r2,-12(fp)
   1a7d8:	e0bffd03 	ldbu	r2,-12(fp)
   1a7dc:	10803fcc 	andi	r2,r2,255
   1a7e0:	1080201c 	xori	r2,r2,128
   1a7e4:	10bfe004 	addi	r2,r2,-128
   1a7e8:	1004803a 	cmplt	r2,r2,zero
   1a7ec:	1000081e 	bne	r2,zero,1a810 <alt_erase_block_intel+0xe8>
   1a7f0:	0100fa04 	movi	r4,1000
   1a7f4:	001a1f40 	call	1a1f4 <usleep>
   1a7f8:	e0bffa17 	ldw	r2,-24(fp)
   1a7fc:	10bf0604 	addi	r2,r2,-1000
   1a800:	e0bffa15 	stw	r2,-24(fp)
   1a804:	e0bffa17 	ldw	r2,-24(fp)
   1a808:	10800048 	cmpgei	r2,r2,1
   1a80c:	103feb1e 	bne	r2,zero,1a7bc <alt_erase_block_intel+0x94>
   1a810:	e0bffa17 	ldw	r2,-24(fp)
   1a814:	10800048 	cmpgei	r2,r2,1
   1a818:	1000031e 	bne	r2,zero,1a828 <alt_erase_block_intel+0x100>
   1a81c:	00bfe304 	movi	r2,-116
   1a820:	e0bffc15 	stw	r2,-16(fp)
   1a824:	00000e06 	br	1a860 <alt_erase_block_intel+0x138>
   1a828:	e0bffd03 	ldbu	r2,-12(fp)
   1a82c:	10803fcc 	andi	r2,r2,255
   1a830:	10801fcc 	andi	r2,r2,127
   1a834:	1005003a 	cmpeq	r2,r2,zero
   1a838:	1000091e 	bne	r2,zero,1a860 <alt_erase_block_intel+0x138>
   1a83c:	00bffec4 	movi	r2,-5
   1a840:	e0bffc15 	stw	r2,-16(fp)
   1a844:	e0bffb17 	ldw	r2,-20(fp)
   1a848:	10800a17 	ldw	r2,40(r2)
   1a84c:	1007883a 	mov	r3,r2
   1a850:	e0bfff17 	ldw	r2,-4(fp)
   1a854:	1885883a 	add	r2,r3,r2
   1a858:	10800023 	ldbuio	r2,0(r2)
   1a85c:	e0bffd05 	stb	r2,-12(fp)
   1a860:	e0bffb17 	ldw	r2,-20(fp)
   1a864:	11803517 	ldw	r6,212(r2)
   1a868:	e0bffb17 	ldw	r2,-20(fp)
   1a86c:	10800a17 	ldw	r2,40(r2)
   1a870:	1007883a 	mov	r3,r2
   1a874:	e0bfff17 	ldw	r2,-4(fp)
   1a878:	1889883a 	add	r4,r3,r2
   1a87c:	01403fc4 	movi	r5,255
   1a880:	303ee83a 	callr	r6
   1a884:	e0bffc17 	ldw	r2,-16(fp)
   1a888:	e037883a 	mov	sp,fp
   1a88c:	dfc00117 	ldw	ra,4(sp)
   1a890:	df000017 	ldw	fp,0(sp)
   1a894:	dec00204 	addi	sp,sp,8
   1a898:	f800283a 	ret

0001a89c <alt_unlock_block_intel>:
   1a89c:	defff904 	addi	sp,sp,-28
   1a8a0:	dfc00615 	stw	ra,24(sp)
   1a8a4:	df000515 	stw	fp,20(sp)
   1a8a8:	df000504 	addi	fp,sp,20
   1a8ac:	e13ffe15 	stw	r4,-8(fp)
   1a8b0:	e17fff15 	stw	r5,-4(fp)
   1a8b4:	e03ffc15 	stw	zero,-16(fp)
   1a8b8:	e0bffe17 	ldw	r2,-8(fp)
   1a8bc:	10803017 	ldw	r2,192(r2)
   1a8c0:	10801924 	muli	r2,r2,100
   1a8c4:	e0bffb15 	stw	r2,-20(fp)
   1a8c8:	e0bffe17 	ldw	r2,-8(fp)
   1a8cc:	11803517 	ldw	r6,212(r2)
   1a8d0:	e0bffe17 	ldw	r2,-8(fp)
   1a8d4:	10800a17 	ldw	r2,40(r2)
   1a8d8:	1007883a 	mov	r3,r2
   1a8dc:	e0bfff17 	ldw	r2,-4(fp)
   1a8e0:	1889883a 	add	r4,r3,r2
   1a8e4:	01402404 	movi	r5,144
   1a8e8:	303ee83a 	callr	r6
   1a8ec:	e0bffe17 	ldw	r2,-8(fp)
   1a8f0:	10800a17 	ldw	r2,40(r2)
   1a8f4:	1007883a 	mov	r3,r2
   1a8f8:	e0bfff17 	ldw	r2,-4(fp)
   1a8fc:	1885883a 	add	r2,r3,r2
   1a900:	10800104 	addi	r2,r2,4
   1a904:	10800023 	ldbuio	r2,0(r2)
   1a908:	e0bffd45 	stb	r2,-11(fp)
   1a90c:	e0bffd43 	ldbu	r2,-11(fp)
   1a910:	1080004c 	andi	r2,r2,1
   1a914:	10803fcc 	andi	r2,r2,255
   1a918:	1005003a 	cmpeq	r2,r2,zero
   1a91c:	1000331e 	bne	r2,zero,1a9ec <alt_unlock_block_intel+0x150>
   1a920:	e0bffe17 	ldw	r2,-8(fp)
   1a924:	11803517 	ldw	r6,212(r2)
   1a928:	e0bffe17 	ldw	r2,-8(fp)
   1a92c:	10800a17 	ldw	r2,40(r2)
   1a930:	1007883a 	mov	r3,r2
   1a934:	e0bfff17 	ldw	r2,-4(fp)
   1a938:	1889883a 	add	r4,r3,r2
   1a93c:	01401804 	movi	r5,96
   1a940:	303ee83a 	callr	r6
   1a944:	e0bffe17 	ldw	r2,-8(fp)
   1a948:	11803517 	ldw	r6,212(r2)
   1a94c:	e0bffe17 	ldw	r2,-8(fp)
   1a950:	10800a17 	ldw	r2,40(r2)
   1a954:	1007883a 	mov	r3,r2
   1a958:	e0bfff17 	ldw	r2,-4(fp)
   1a95c:	1889883a 	add	r4,r3,r2
   1a960:	01403404 	movi	r5,208
   1a964:	303ee83a 	callr	r6
   1a968:	e0bffe17 	ldw	r2,-8(fp)
   1a96c:	10800a17 	ldw	r2,40(r2)
   1a970:	1007883a 	mov	r3,r2
   1a974:	e0bfff17 	ldw	r2,-4(fp)
   1a978:	1885883a 	add	r2,r3,r2
   1a97c:	10800023 	ldbuio	r2,0(r2)
   1a980:	e0bffd05 	stb	r2,-12(fp)
   1a984:	e0bffd03 	ldbu	r2,-12(fp)
   1a988:	10803fcc 	andi	r2,r2,255
   1a98c:	1080201c 	xori	r2,r2,128
   1a990:	10bfe004 	addi	r2,r2,-128
   1a994:	1004803a 	cmplt	r2,r2,zero
   1a998:	1000081e 	bne	r2,zero,1a9bc <alt_unlock_block_intel+0x120>
   1a99c:	e0bffb17 	ldw	r2,-20(fp)
   1a9a0:	10bfffc4 	addi	r2,r2,-1
   1a9a4:	e0bffb15 	stw	r2,-20(fp)
   1a9a8:	01000044 	movi	r4,1
   1a9ac:	001a1f40 	call	1a1f4 <usleep>
   1a9b0:	e0bffb17 	ldw	r2,-20(fp)
   1a9b4:	10800048 	cmpgei	r2,r2,1
   1a9b8:	103feb1e 	bne	r2,zero,1a968 <alt_unlock_block_intel+0xcc>
   1a9bc:	e0bffb17 	ldw	r2,-20(fp)
   1a9c0:	1004c03a 	cmpne	r2,r2,zero
   1a9c4:	1000031e 	bne	r2,zero,1a9d4 <alt_unlock_block_intel+0x138>
   1a9c8:	00bfe304 	movi	r2,-116
   1a9cc:	e0bffc15 	stw	r2,-16(fp)
   1a9d0:	00000606 	br	1a9ec <alt_unlock_block_intel+0x150>
   1a9d4:	e0bffd03 	ldbu	r2,-12(fp)
   1a9d8:	10801fcc 	andi	r2,r2,127
   1a9dc:	1005003a 	cmpeq	r2,r2,zero
   1a9e0:	1000021e 	bne	r2,zero,1a9ec <alt_unlock_block_intel+0x150>
   1a9e4:	00bffec4 	movi	r2,-5
   1a9e8:	e0bffc15 	stw	r2,-16(fp)
   1a9ec:	e0bffe17 	ldw	r2,-8(fp)
   1a9f0:	11803517 	ldw	r6,212(r2)
   1a9f4:	e0bffe17 	ldw	r2,-8(fp)
   1a9f8:	10800a17 	ldw	r2,40(r2)
   1a9fc:	1007883a 	mov	r3,r2
   1aa00:	e0bfff17 	ldw	r2,-4(fp)
   1aa04:	1889883a 	add	r4,r3,r2
   1aa08:	01403fc4 	movi	r5,255
   1aa0c:	303ee83a 	callr	r6
   1aa10:	e0bffc17 	ldw	r2,-16(fp)
   1aa14:	e037883a 	mov	sp,fp
   1aa18:	dfc00117 	ldw	ra,4(sp)
   1aa1c:	df000017 	ldw	fp,0(sp)
   1aa20:	dec00204 	addi	sp,sp,8
   1aa24:	f800283a 	ret

0001aa28 <alt_write_word_intel>:
   1aa28:	defff904 	addi	sp,sp,-28
   1aa2c:	dfc00615 	stw	ra,24(sp)
   1aa30:	df000515 	stw	fp,20(sp)
   1aa34:	df000504 	addi	fp,sp,20
   1aa38:	e13ffd15 	stw	r4,-12(fp)
   1aa3c:	e17ffe15 	stw	r5,-8(fp)
   1aa40:	e1bfff15 	stw	r6,-4(fp)
   1aa44:	e03ffc15 	stw	zero,-16(fp)
   1aa48:	e0bffd17 	ldw	r2,-12(fp)
   1aa4c:	11803517 	ldw	r6,212(r2)
   1aa50:	e0bffd17 	ldw	r2,-12(fp)
   1aa54:	10800a17 	ldw	r2,40(r2)
   1aa58:	1007883a 	mov	r3,r2
   1aa5c:	e0bffe17 	ldw	r2,-8(fp)
   1aa60:	1889883a 	add	r4,r3,r2
   1aa64:	01401004 	movi	r5,64
   1aa68:	303ee83a 	callr	r6
   1aa6c:	e13ffd17 	ldw	r4,-12(fp)
   1aa70:	e17ffe17 	ldw	r5,-8(fp)
   1aa74:	e1bfff17 	ldw	r6,-4(fp)
   1aa78:	0013a580 	call	13a58 <alt_write_value_to_flash>
   1aa7c:	e0bffd17 	ldw	r2,-12(fp)
   1aa80:	10800a17 	ldw	r2,40(r2)
   1aa84:	1007883a 	mov	r3,r2
   1aa88:	e0bffe17 	ldw	r2,-8(fp)
   1aa8c:	1885883a 	add	r2,r3,r2
   1aa90:	10800023 	ldbuio	r2,0(r2)
   1aa94:	e0bffb05 	stb	r2,-20(fp)
   1aa98:	e0bffb03 	ldbu	r2,-20(fp)
   1aa9c:	10803fcc 	andi	r2,r2,255
   1aaa0:	1080201c 	xori	r2,r2,128
   1aaa4:	10bfe004 	addi	r2,r2,-128
   1aaa8:	1004403a 	cmpge	r2,r2,zero
   1aaac:	103ff31e 	bne	r2,zero,1aa7c <alt_write_word_intel+0x54>
   1aab0:	e0bffb03 	ldbu	r2,-20(fp)
   1aab4:	10801fcc 	andi	r2,r2,127
   1aab8:	1005003a 	cmpeq	r2,r2,zero
   1aabc:	1000021e 	bne	r2,zero,1aac8 <alt_write_word_intel+0xa0>
   1aac0:	00bffec4 	movi	r2,-5
   1aac4:	e0bffc15 	stw	r2,-16(fp)
   1aac8:	e0bffd17 	ldw	r2,-12(fp)
   1aacc:	11803517 	ldw	r6,212(r2)
   1aad0:	e0bffd17 	ldw	r2,-12(fp)
   1aad4:	10800a17 	ldw	r2,40(r2)
   1aad8:	1007883a 	mov	r3,r2
   1aadc:	e0bffe17 	ldw	r2,-8(fp)
   1aae0:	1889883a 	add	r4,r3,r2
   1aae4:	01403fc4 	movi	r5,255
   1aae8:	303ee83a 	callr	r6
   1aaec:	e0bffc17 	ldw	r2,-16(fp)
   1aaf0:	e037883a 	mov	sp,fp
   1aaf4:	dfc00117 	ldw	ra,4(sp)
   1aaf8:	df000017 	ldw	fp,0(sp)
   1aafc:	dec00204 	addi	sp,sp,8
   1ab00:	f800283a 	ret

0001ab04 <alt_busy_sleep>:
   1ab04:	defffb04 	addi	sp,sp,-20
   1ab08:	df000415 	stw	fp,16(sp)
   1ab0c:	df000404 	addi	fp,sp,16
   1ab10:	e13fff15 	stw	r4,-4(fp)
   1ab14:	008000c4 	movi	r2,3
   1ab18:	e0bffc15 	stw	r2,-16(fp)
   1ab1c:	e0fffc17 	ldw	r3,-16(fp)
   1ab20:	008003f4 	movhi	r2,15
   1ab24:	10909004 	addi	r2,r2,16960
   1ab28:	1887383a 	mul	r3,r3,r2
   1ab2c:	00817db4 	movhi	r2,1526
   1ab30:	10b84004 	addi	r2,r2,-7936
   1ab34:	10c7203a 	divu	r3,r2,r3
   1ab38:	00a00034 	movhi	r2,32768
   1ab3c:	10bfffc4 	addi	r2,r2,-1
   1ab40:	10c7203a 	divu	r3,r2,r3
   1ab44:	e0bfff17 	ldw	r2,-4(fp)
   1ab48:	10c5203a 	divu	r2,r2,r3
   1ab4c:	e0bffd15 	stw	r2,-12(fp)
   1ab50:	e0bffd17 	ldw	r2,-12(fp)
   1ab54:	1005003a 	cmpeq	r2,r2,zero
   1ab58:	1000251e 	bne	r2,zero,1abf0 <alt_busy_sleep+0xec>
   1ab5c:	e03ffe15 	stw	zero,-8(fp)
   1ab60:	00001406 	br	1abb4 <alt_busy_sleep+0xb0>
   1ab64:	00a00034 	movhi	r2,32768
   1ab68:	10bfffc4 	addi	r2,r2,-1
   1ab6c:	10bfffc4 	addi	r2,r2,-1
   1ab70:	103ffe1e 	bne	r2,zero,1ab6c <alt_busy_sleep+0x68>
   1ab74:	e0fffc17 	ldw	r3,-16(fp)
   1ab78:	008003f4 	movhi	r2,15
   1ab7c:	10909004 	addi	r2,r2,16960
   1ab80:	1887383a 	mul	r3,r3,r2
   1ab84:	00817db4 	movhi	r2,1526
   1ab88:	10b84004 	addi	r2,r2,-7936
   1ab8c:	10c7203a 	divu	r3,r2,r3
   1ab90:	00a00034 	movhi	r2,32768
   1ab94:	10bfffc4 	addi	r2,r2,-1
   1ab98:	10c7203a 	divu	r3,r2,r3
   1ab9c:	e0bfff17 	ldw	r2,-4(fp)
   1aba0:	10c5c83a 	sub	r2,r2,r3
   1aba4:	e0bfff15 	stw	r2,-4(fp)
   1aba8:	e0bffe17 	ldw	r2,-8(fp)
   1abac:	10800044 	addi	r2,r2,1
   1abb0:	e0bffe15 	stw	r2,-8(fp)
   1abb4:	e0fffe17 	ldw	r3,-8(fp)
   1abb8:	e0bffd17 	ldw	r2,-12(fp)
   1abbc:	18bfe916 	blt	r3,r2,1ab64 <alt_busy_sleep+0x60>
   1abc0:	e0fffc17 	ldw	r3,-16(fp)
   1abc4:	008003f4 	movhi	r2,15
   1abc8:	10909004 	addi	r2,r2,16960
   1abcc:	1887383a 	mul	r3,r3,r2
   1abd0:	00817db4 	movhi	r2,1526
   1abd4:	10b84004 	addi	r2,r2,-7936
   1abd8:	10c7203a 	divu	r3,r2,r3
   1abdc:	e0bfff17 	ldw	r2,-4(fp)
   1abe0:	1885383a 	mul	r2,r3,r2
   1abe4:	10bfffc4 	addi	r2,r2,-1
   1abe8:	103ffe1e 	bne	r2,zero,1abe4 <alt_busy_sleep+0xe0>
   1abec:	00000b06 	br	1ac1c <alt_busy_sleep+0x118>
   1abf0:	e0fffc17 	ldw	r3,-16(fp)
   1abf4:	008003f4 	movhi	r2,15
   1abf8:	10909004 	addi	r2,r2,16960
   1abfc:	1887383a 	mul	r3,r3,r2
   1ac00:	00817db4 	movhi	r2,1526
   1ac04:	10b84004 	addi	r2,r2,-7936
   1ac08:	10c7203a 	divu	r3,r2,r3
   1ac0c:	e0bfff17 	ldw	r2,-4(fp)
   1ac10:	1885383a 	mul	r2,r3,r2
   1ac14:	10bfffc4 	addi	r2,r2,-1
   1ac18:	00bffe16 	blt	zero,r2,1ac14 <alt_busy_sleep+0x110>
   1ac1c:	0005883a 	mov	r2,zero
   1ac20:	e037883a 	mov	sp,fp
   1ac24:	df000017 	ldw	fp,0(sp)
   1ac28:	dec00104 	addi	sp,sp,4
   1ac2c:	f800283a 	ret

0001ac30 <alt_find_file>:
   1ac30:	defffa04 	addi	sp,sp,-24
   1ac34:	dfc00515 	stw	ra,20(sp)
   1ac38:	df000415 	stw	fp,16(sp)
   1ac3c:	df000404 	addi	fp,sp,16
   1ac40:	e13ffe15 	stw	r4,-8(fp)
   1ac44:	00820034 	movhi	r2,2048
   1ac48:	108a0e04 	addi	r2,r2,10296
   1ac4c:	10800017 	ldw	r2,0(r2)
   1ac50:	e0bffd15 	stw	r2,-12(fp)
   1ac54:	00003306 	br	1ad24 <alt_find_file+0xf4>
   1ac58:	e0bffd17 	ldw	r2,-12(fp)
   1ac5c:	11000217 	ldw	r4,8(r2)
   1ac60:	0007ae40 	call	7ae4 <strlen>
   1ac64:	e0bffc15 	stw	r2,-16(fp)
   1ac68:	e0bffd17 	ldw	r2,-12(fp)
   1ac6c:	10c00217 	ldw	r3,8(r2)
   1ac70:	e0bffc17 	ldw	r2,-16(fp)
   1ac74:	1885883a 	add	r2,r3,r2
   1ac78:	10bfffc4 	addi	r2,r2,-1
   1ac7c:	10800003 	ldbu	r2,0(r2)
   1ac80:	10803fcc 	andi	r2,r2,255
   1ac84:	1080201c 	xori	r2,r2,128
   1ac88:	10bfe004 	addi	r2,r2,-128
   1ac8c:	10800bd8 	cmpnei	r2,r2,47
   1ac90:	1000031e 	bne	r2,zero,1aca0 <alt_find_file+0x70>
   1ac94:	e0bffc17 	ldw	r2,-16(fp)
   1ac98:	10bfffc4 	addi	r2,r2,-1
   1ac9c:	e0bffc15 	stw	r2,-16(fp)
   1aca0:	e0bffc17 	ldw	r2,-16(fp)
   1aca4:	1007883a 	mov	r3,r2
   1aca8:	e0bffe17 	ldw	r2,-8(fp)
   1acac:	1885883a 	add	r2,r3,r2
   1acb0:	10800003 	ldbu	r2,0(r2)
   1acb4:	10803fcc 	andi	r2,r2,255
   1acb8:	1080201c 	xori	r2,r2,128
   1acbc:	10bfe004 	addi	r2,r2,-128
   1acc0:	10800be0 	cmpeqi	r2,r2,47
   1acc4:	10000a1e 	bne	r2,zero,1acf0 <alt_find_file+0xc0>
   1acc8:	e0bffc17 	ldw	r2,-16(fp)
   1accc:	1007883a 	mov	r3,r2
   1acd0:	e0bffe17 	ldw	r2,-8(fp)
   1acd4:	1885883a 	add	r2,r3,r2
   1acd8:	10800003 	ldbu	r2,0(r2)
   1acdc:	10803fcc 	andi	r2,r2,255
   1ace0:	1080201c 	xori	r2,r2,128
   1ace4:	10bfe004 	addi	r2,r2,-128
   1ace8:	1004c03a 	cmpne	r2,r2,zero
   1acec:	10000a1e 	bne	r2,zero,1ad18 <alt_find_file+0xe8>
   1acf0:	e0bffd17 	ldw	r2,-12(fp)
   1acf4:	11000217 	ldw	r4,8(r2)
   1acf8:	e1bffc17 	ldw	r6,-16(fp)
   1acfc:	e17ffe17 	ldw	r5,-8(fp)
   1ad00:	00077140 	call	7714 <memcmp>
   1ad04:	1004c03a 	cmpne	r2,r2,zero
   1ad08:	1000031e 	bne	r2,zero,1ad18 <alt_find_file+0xe8>
   1ad0c:	e0bffd17 	ldw	r2,-12(fp)
   1ad10:	e0bfff15 	stw	r2,-4(fp)
   1ad14:	00000806 	br	1ad38 <alt_find_file+0x108>
   1ad18:	e0bffd17 	ldw	r2,-12(fp)
   1ad1c:	10800017 	ldw	r2,0(r2)
   1ad20:	e0bffd15 	stw	r2,-12(fp)
   1ad24:	00c20034 	movhi	r3,2048
   1ad28:	18ca0e04 	addi	r3,r3,10296
   1ad2c:	e0bffd17 	ldw	r2,-12(fp)
   1ad30:	10ffc91e 	bne	r2,r3,1ac58 <alt_find_file+0x28>
   1ad34:	e03fff15 	stw	zero,-4(fp)
   1ad38:	e0bfff17 	ldw	r2,-4(fp)
   1ad3c:	e037883a 	mov	sp,fp
   1ad40:	dfc00117 	ldw	ra,4(sp)
   1ad44:	df000017 	ldw	fp,0(sp)
   1ad48:	dec00204 	addi	sp,sp,8
   1ad4c:	f800283a 	ret

0001ad50 <alt_get_fd>:
   1ad50:	defffc04 	addi	sp,sp,-16
   1ad54:	df000315 	stw	fp,12(sp)
   1ad58:	df000304 	addi	fp,sp,12
   1ad5c:	e13fff15 	stw	r4,-4(fp)
   1ad60:	00bffa04 	movi	r2,-24
   1ad64:	e0bffd15 	stw	r2,-12(fp)
   1ad68:	e03ffe15 	stw	zero,-8(fp)
   1ad6c:	00001e06 	br	1ade8 <alt_get_fd+0x98>
   1ad70:	e0bffe17 	ldw	r2,-8(fp)
   1ad74:	00c20034 	movhi	r3,2048
   1ad78:	18c4a204 	addi	r3,r3,4744
   1ad7c:	10800324 	muli	r2,r2,12
   1ad80:	10c5883a 	add	r2,r2,r3
   1ad84:	10800017 	ldw	r2,0(r2)
   1ad88:	1004c03a 	cmpne	r2,r2,zero
   1ad8c:	1000131e 	bne	r2,zero,1addc <alt_get_fd+0x8c>
   1ad90:	e0bffe17 	ldw	r2,-8(fp)
   1ad94:	00c20034 	movhi	r3,2048
   1ad98:	18c4a204 	addi	r3,r3,4744
   1ad9c:	10800324 	muli	r2,r2,12
   1ada0:	10c7883a 	add	r3,r2,r3
   1ada4:	e0bfff17 	ldw	r2,-4(fp)
   1ada8:	18800015 	stw	r2,0(r3)
   1adac:	00820034 	movhi	r2,2048
   1adb0:	108a1204 	addi	r2,r2,10312
   1adb4:	10c00017 	ldw	r3,0(r2)
   1adb8:	e0bffe17 	ldw	r2,-8(fp)
   1adbc:	1880040e 	bge	r3,r2,1add0 <alt_get_fd+0x80>
   1adc0:	00c20034 	movhi	r3,2048
   1adc4:	18ca1204 	addi	r3,r3,10312
   1adc8:	e0bffe17 	ldw	r2,-8(fp)
   1adcc:	18800015 	stw	r2,0(r3)
   1add0:	e0bffe17 	ldw	r2,-8(fp)
   1add4:	e0bffd15 	stw	r2,-12(fp)
   1add8:	00000606 	br	1adf4 <alt_get_fd+0xa4>
   1addc:	e0bffe17 	ldw	r2,-8(fp)
   1ade0:	10800044 	addi	r2,r2,1
   1ade4:	e0bffe15 	stw	r2,-8(fp)
   1ade8:	e0bffe17 	ldw	r2,-8(fp)
   1adec:	10800810 	cmplti	r2,r2,32
   1adf0:	103fdf1e 	bne	r2,zero,1ad70 <alt_get_fd+0x20>
   1adf4:	e0bffd17 	ldw	r2,-12(fp)
   1adf8:	e037883a 	mov	sp,fp
   1adfc:	df000017 	ldw	fp,0(sp)
   1ae00:	dec00104 	addi	sp,sp,4
   1ae04:	f800283a 	ret

0001ae08 <atexit>:
   1ae08:	200b883a 	mov	r5,r4
   1ae0c:	000d883a 	mov	r6,zero
   1ae10:	0009883a 	mov	r4,zero
   1ae14:	000f883a 	mov	r7,zero
   1ae18:	001ae541 	jmpi	1ae54 <__register_exitproc>

0001ae1c <exit>:
   1ae1c:	defffe04 	addi	sp,sp,-8
   1ae20:	000b883a 	mov	r5,zero
   1ae24:	dc000015 	stw	r16,0(sp)
   1ae28:	dfc00115 	stw	ra,4(sp)
   1ae2c:	2021883a 	mov	r16,r4
   1ae30:	001af8c0 	call	1af8c <__call_exitprocs>
   1ae34:	00820034 	movhi	r2,2048
   1ae38:	108a0904 	addi	r2,r2,10276
   1ae3c:	11000017 	ldw	r4,0(r2)
   1ae40:	20800f17 	ldw	r2,60(r4)
   1ae44:	10000126 	beq	r2,zero,1ae4c <exit+0x30>
   1ae48:	103ee83a 	callr	r2
   1ae4c:	8009883a 	mov	r4,r16
   1ae50:	001b17c0 	call	1b17c <_exit>

0001ae54 <__register_exitproc>:
   1ae54:	defffa04 	addi	sp,sp,-24
   1ae58:	00820034 	movhi	r2,2048
   1ae5c:	108a0904 	addi	r2,r2,10276
   1ae60:	dc000015 	stw	r16,0(sp)
   1ae64:	14000017 	ldw	r16,0(r2)
   1ae68:	dd000415 	stw	r20,16(sp)
   1ae6c:	2829883a 	mov	r20,r5
   1ae70:	81405217 	ldw	r5,328(r16)
   1ae74:	dcc00315 	stw	r19,12(sp)
   1ae78:	dc800215 	stw	r18,8(sp)
   1ae7c:	dc400115 	stw	r17,4(sp)
   1ae80:	dfc00515 	stw	ra,20(sp)
   1ae84:	2023883a 	mov	r17,r4
   1ae88:	3027883a 	mov	r19,r6
   1ae8c:	3825883a 	mov	r18,r7
   1ae90:	28002526 	beq	r5,zero,1af28 <__register_exitproc+0xd4>
   1ae94:	29000117 	ldw	r4,4(r5)
   1ae98:	008007c4 	movi	r2,31
   1ae9c:	11002716 	blt	r2,r4,1af3c <__register_exitproc+0xe8>
   1aea0:	8800101e 	bne	r17,zero,1aee4 <__register_exitproc+0x90>
   1aea4:	2105883a 	add	r2,r4,r4
   1aea8:	1085883a 	add	r2,r2,r2
   1aeac:	20c00044 	addi	r3,r4,1
   1aeb0:	1145883a 	add	r2,r2,r5
   1aeb4:	0009883a 	mov	r4,zero
   1aeb8:	15000215 	stw	r20,8(r2)
   1aebc:	28c00115 	stw	r3,4(r5)
   1aec0:	2005883a 	mov	r2,r4
   1aec4:	dfc00517 	ldw	ra,20(sp)
   1aec8:	dd000417 	ldw	r20,16(sp)
   1aecc:	dcc00317 	ldw	r19,12(sp)
   1aed0:	dc800217 	ldw	r18,8(sp)
   1aed4:	dc400117 	ldw	r17,4(sp)
   1aed8:	dc000017 	ldw	r16,0(sp)
   1aedc:	dec00604 	addi	sp,sp,24
   1aee0:	f800283a 	ret
   1aee4:	29802204 	addi	r6,r5,136
   1aee8:	00800044 	movi	r2,1
   1aeec:	110e983a 	sll	r7,r2,r4
   1aef0:	30c04017 	ldw	r3,256(r6)
   1aef4:	2105883a 	add	r2,r4,r4
   1aef8:	1085883a 	add	r2,r2,r2
   1aefc:	1185883a 	add	r2,r2,r6
   1af00:	19c6b03a 	or	r3,r3,r7
   1af04:	14802015 	stw	r18,128(r2)
   1af08:	14c00015 	stw	r19,0(r2)
   1af0c:	00800084 	movi	r2,2
   1af10:	30c04015 	stw	r3,256(r6)
   1af14:	88bfe31e 	bne	r17,r2,1aea4 <__register_exitproc+0x50>
   1af18:	30804117 	ldw	r2,260(r6)
   1af1c:	11c4b03a 	or	r2,r2,r7
   1af20:	30804115 	stw	r2,260(r6)
   1af24:	003fdf06 	br	1aea4 <__register_exitproc+0x50>
   1af28:	00820234 	movhi	r2,2056
   1af2c:	1080e304 	addi	r2,r2,908
   1af30:	100b883a 	mov	r5,r2
   1af34:	80805215 	stw	r2,328(r16)
   1af38:	003fd606 	br	1ae94 <__register_exitproc+0x40>
   1af3c:	00800034 	movhi	r2,0
   1af40:	10800004 	addi	r2,r2,0
   1af44:	1000021e 	bne	r2,zero,1af50 <__register_exitproc+0xfc>
   1af48:	013fffc4 	movi	r4,-1
   1af4c:	003fdc06 	br	1aec0 <__register_exitproc+0x6c>
   1af50:	01006404 	movi	r4,400
   1af54:	103ee83a 	callr	r2
   1af58:	1007883a 	mov	r3,r2
   1af5c:	103ffa26 	beq	r2,zero,1af48 <__register_exitproc+0xf4>
   1af60:	80805217 	ldw	r2,328(r16)
   1af64:	180b883a 	mov	r5,r3
   1af68:	18000115 	stw	zero,4(r3)
   1af6c:	18800015 	stw	r2,0(r3)
   1af70:	80c05215 	stw	r3,328(r16)
   1af74:	18006215 	stw	zero,392(r3)
   1af78:	18006315 	stw	zero,396(r3)
   1af7c:	0009883a 	mov	r4,zero
   1af80:	883fc826 	beq	r17,zero,1aea4 <__register_exitproc+0x50>
   1af84:	003fd706 	br	1aee4 <__register_exitproc+0x90>

0001af88 <register_fini>:
   1af88:	f800283a 	ret

0001af8c <__call_exitprocs>:
   1af8c:	00820034 	movhi	r2,2048
   1af90:	108a0904 	addi	r2,r2,10276
   1af94:	10800017 	ldw	r2,0(r2)
   1af98:	defff304 	addi	sp,sp,-52
   1af9c:	df000b15 	stw	fp,44(sp)
   1afa0:	d8800115 	stw	r2,4(sp)
   1afa4:	00800034 	movhi	r2,0
   1afa8:	10800004 	addi	r2,r2,0
   1afac:	1005003a 	cmpeq	r2,r2,zero
   1afb0:	d8800215 	stw	r2,8(sp)
   1afb4:	d8800117 	ldw	r2,4(sp)
   1afb8:	dd400815 	stw	r21,32(sp)
   1afbc:	dd000715 	stw	r20,28(sp)
   1afc0:	10805204 	addi	r2,r2,328
   1afc4:	dfc00c15 	stw	ra,48(sp)
   1afc8:	ddc00a15 	stw	r23,40(sp)
   1afcc:	dd800915 	stw	r22,36(sp)
   1afd0:	dcc00615 	stw	r19,24(sp)
   1afd4:	dc800515 	stw	r18,20(sp)
   1afd8:	dc400415 	stw	r17,16(sp)
   1afdc:	dc000315 	stw	r16,12(sp)
   1afe0:	282b883a 	mov	r21,r5
   1afe4:	2039883a 	mov	fp,r4
   1afe8:	d8800015 	stw	r2,0(sp)
   1afec:	2829003a 	cmpeq	r20,r5,zero
   1aff0:	d8800117 	ldw	r2,4(sp)
   1aff4:	14405217 	ldw	r17,328(r2)
   1aff8:	88001026 	beq	r17,zero,1b03c <__call_exitprocs+0xb0>
   1affc:	ddc00017 	ldw	r23,0(sp)
   1b000:	88800117 	ldw	r2,4(r17)
   1b004:	8c802204 	addi	r18,r17,136
   1b008:	143fffc4 	addi	r16,r2,-1
   1b00c:	80000916 	blt	r16,zero,1b034 <__call_exitprocs+0xa8>
   1b010:	05bfffc4 	movi	r22,-1
   1b014:	a000151e 	bne	r20,zero,1b06c <__call_exitprocs+0xe0>
   1b018:	8409883a 	add	r4,r16,r16
   1b01c:	2105883a 	add	r2,r4,r4
   1b020:	1485883a 	add	r2,r2,r18
   1b024:	10c02017 	ldw	r3,128(r2)
   1b028:	a8c01126 	beq	r21,r3,1b070 <__call_exitprocs+0xe4>
   1b02c:	843fffc4 	addi	r16,r16,-1
   1b030:	85bff81e 	bne	r16,r22,1b014 <__call_exitprocs+0x88>
   1b034:	d8800217 	ldw	r2,8(sp)
   1b038:	10003126 	beq	r2,zero,1b100 <__call_exitprocs+0x174>
   1b03c:	dfc00c17 	ldw	ra,48(sp)
   1b040:	df000b17 	ldw	fp,44(sp)
   1b044:	ddc00a17 	ldw	r23,40(sp)
   1b048:	dd800917 	ldw	r22,36(sp)
   1b04c:	dd400817 	ldw	r21,32(sp)
   1b050:	dd000717 	ldw	r20,28(sp)
   1b054:	dcc00617 	ldw	r19,24(sp)
   1b058:	dc800517 	ldw	r18,20(sp)
   1b05c:	dc400417 	ldw	r17,16(sp)
   1b060:	dc000317 	ldw	r16,12(sp)
   1b064:	dec00d04 	addi	sp,sp,52
   1b068:	f800283a 	ret
   1b06c:	8409883a 	add	r4,r16,r16
   1b070:	88c00117 	ldw	r3,4(r17)
   1b074:	2105883a 	add	r2,r4,r4
   1b078:	1445883a 	add	r2,r2,r17
   1b07c:	18ffffc4 	addi	r3,r3,-1
   1b080:	11800217 	ldw	r6,8(r2)
   1b084:	1c001526 	beq	r3,r16,1b0dc <__call_exitprocs+0x150>
   1b088:	10000215 	stw	zero,8(r2)
   1b08c:	303fe726 	beq	r6,zero,1b02c <__call_exitprocs+0xa0>
   1b090:	00c00044 	movi	r3,1
   1b094:	1c06983a 	sll	r3,r3,r16
   1b098:	90804017 	ldw	r2,256(r18)
   1b09c:	8cc00117 	ldw	r19,4(r17)
   1b0a0:	1884703a 	and	r2,r3,r2
   1b0a4:	10001426 	beq	r2,zero,1b0f8 <__call_exitprocs+0x16c>
   1b0a8:	90804117 	ldw	r2,260(r18)
   1b0ac:	1884703a 	and	r2,r3,r2
   1b0b0:	10000c1e 	bne	r2,zero,1b0e4 <__call_exitprocs+0x158>
   1b0b4:	2105883a 	add	r2,r4,r4
   1b0b8:	1485883a 	add	r2,r2,r18
   1b0bc:	11400017 	ldw	r5,0(r2)
   1b0c0:	e009883a 	mov	r4,fp
   1b0c4:	303ee83a 	callr	r6
   1b0c8:	88800117 	ldw	r2,4(r17)
   1b0cc:	98bfc81e 	bne	r19,r2,1aff0 <__call_exitprocs+0x64>
   1b0d0:	b8800017 	ldw	r2,0(r23)
   1b0d4:	147fd526 	beq	r2,r17,1b02c <__call_exitprocs+0xa0>
   1b0d8:	003fc506 	br	1aff0 <__call_exitprocs+0x64>
   1b0dc:	8c000115 	stw	r16,4(r17)
   1b0e0:	003fea06 	br	1b08c <__call_exitprocs+0x100>
   1b0e4:	2105883a 	add	r2,r4,r4
   1b0e8:	1485883a 	add	r2,r2,r18
   1b0ec:	11000017 	ldw	r4,0(r2)
   1b0f0:	303ee83a 	callr	r6
   1b0f4:	003ff406 	br	1b0c8 <__call_exitprocs+0x13c>
   1b0f8:	303ee83a 	callr	r6
   1b0fc:	003ff206 	br	1b0c8 <__call_exitprocs+0x13c>
   1b100:	88800117 	ldw	r2,4(r17)
   1b104:	1000081e 	bne	r2,zero,1b128 <__call_exitprocs+0x19c>
   1b108:	89000017 	ldw	r4,0(r17)
   1b10c:	20000726 	beq	r4,zero,1b12c <__call_exitprocs+0x1a0>
   1b110:	b9000015 	stw	r4,0(r23)
   1b114:	8809883a 	mov	r4,r17
   1b118:	00000000 	call	0 <__alt_mem_onchip_memory>
   1b11c:	bc400017 	ldw	r17,0(r23)
   1b120:	883fb71e 	bne	r17,zero,1b000 <__call_exitprocs+0x74>
   1b124:	003fc506 	br	1b03c <__call_exitprocs+0xb0>
   1b128:	89000017 	ldw	r4,0(r17)
   1b12c:	882f883a 	mov	r23,r17
   1b130:	2023883a 	mov	r17,r4
   1b134:	883fb21e 	bne	r17,zero,1b000 <__call_exitprocs+0x74>
   1b138:	003fc006 	br	1b03c <__call_exitprocs+0xb0>

0001b13c <alt_sim_halt>:
   1b13c:	defffd04 	addi	sp,sp,-12
   1b140:	df000215 	stw	fp,8(sp)
   1b144:	df000204 	addi	fp,sp,8
   1b148:	e13fff15 	stw	r4,-4(fp)
   1b14c:	e0bfff17 	ldw	r2,-4(fp)
   1b150:	e0bffe15 	stw	r2,-8(fp)
   1b154:	e0bffe17 	ldw	r2,-8(fp)
   1b158:	1005003a 	cmpeq	r2,r2,zero
   1b15c:	1000021e 	bne	r2,zero,1b168 <alt_sim_halt+0x2c>
   1b160:	002af070 	cmpltui	zero,zero,43969
   1b164:	00000106 	br	1b16c <alt_sim_halt+0x30>
   1b168:	002af0b0 	cmpltui	zero,zero,43970
   1b16c:	e037883a 	mov	sp,fp
   1b170:	df000017 	ldw	fp,0(sp)
   1b174:	dec00104 	addi	sp,sp,4
   1b178:	f800283a 	ret

0001b17c <_exit>:
   1b17c:	defffd04 	addi	sp,sp,-12
   1b180:	dfc00215 	stw	ra,8(sp)
   1b184:	df000115 	stw	fp,4(sp)
   1b188:	df000104 	addi	fp,sp,4
   1b18c:	e13fff15 	stw	r4,-4(fp)
   1b190:	e13fff17 	ldw	r4,-4(fp)
   1b194:	001b13c0 	call	1b13c <alt_sim_halt>
   1b198:	003fff06 	br	1b198 <_exit+0x1c>
   1b19c:	0001af88 	cmpgei	zero,zero,1726
