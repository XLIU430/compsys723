
freertos_test.elf:     file format elf32-littlenios2
freertos_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001b95c memsz 0x0001b95c flags r-x
    LOAD off    0x0001d000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x0001d000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x000028cc memsz 0x000805e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01000000  01000000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b734  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a60  08000000  08000000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e6c  08000a60  08000a60  0001da60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007df8f  080028cc  080028cc  0001f8cc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  0001f8cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010e8  00000000  00000000  0001f918  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002ad7  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000365e7  00000000  00000000  000234d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b224  00000000  00000000  00059abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001f464  00000000  00000000  00064ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003488  00000000  00000000  00084148  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000301c  00000000  00000000  000875d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011b72  00000000  00000000  0008a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0009c160  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a08  00000000  00000000  0009c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a2bee  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a2bf1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a2bf6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a2bf7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a2bf8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a2bfc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a2c00  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000a2c04  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000a2c0d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000a2c16  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000a2c1f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000a2c24  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000a60 l    d  .rwdata	00000000 .rwdata
080028cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000028c l       .text	00000000 alt_after_alt_main
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 croutine.c
080028d0 l     O .bss	00000004 uxTopCoRoutineReadyPriority
080028d4 l     O .bss	00000004 xCoRoutineTickCount
080028d8 l     O .bss	00000004 xLastTickCount
080028dc l     O .bss	00000004 xPassedTicks
00000780 l     F .text	0000009c prvInitialiseCoRoutineLists
080029ac l     O .bss	00000028 pxReadyCoRoutineLists
080028e4 l     O .bss	00000004 pxOverflowDelayedCoRoutineList
080028e0 l     O .bss	00000004 pxDelayedCoRoutineList
00000470 l     F .text	000000d4 prvCheckPendingReadyList
080029fc l     O .bss	00000014 xPendingReadyCoRoutineList
00000544 l     F .text	00000150 prvCheckDelayedList
080029d4 l     O .bss	00000014 xDelayedCoRoutineList1
080029e8 l     O .bss	00000014 xDelayedCoRoutineList2
00000000 l    df *ABS*	00000000 event_groups.c
00000f44 l     F .text	00000078 prvTestWaitCondition
00000000 l    df *ABS*	00000000 heap.c
0800284c l     O .rwdata	00000002 heapSTRUCT_SIZE
08002850 l     O .rwdata	00000004 xTotalHeapSize
080028e8 l     O .bss	00000004 pxEnd
08002854 l     O .rwdata	00000004 xFreeBytesRemaining
0000120c l     F .text	000000c0 prvHeapInit
080028ec l     O .bss	00000008 xStart
000012cc l     F .text	00000138 prvInsertBlockIntoFreeList
08002a10 l     O .bss	0007d000 xHeap
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
000016cc l     F .text	00000028 prvReadGp
00001830 l     F .text	00000098 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 queue.c
0000270c l     F .text	00000194 prvCopyDataToQueue
00002ac4 l     F .text	00000058 prvIsQueueFull
0000293c l     F .text	000000f0 prvUnlockQueue
000028a0 l     F .text	0000009c prvCopyDataFromQueue
00002a2c l     F .text	00000054 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
080028f8 l     O .bss	00000004 uxTasksDeleted
080028fc l     O .bss	00000004 uxCurrentNumberOfTasks
08002900 l     O .bss	00000004 xTickCount
08002904 l     O .bss	00000004 uxTopReadyPriority
08002908 l     O .bss	00000004 xSchedulerRunning
0800290c l     O .bss	00000004 uxPendedTicks
08002910 l     O .bss	00000004 xYieldPending
08002914 l     O .bss	00000004 xNumOfOverflows
08002918 l     O .bss	00000004 uxTaskNumber
08002858 l     O .rwdata	00000004 xNextTaskUnblockTime
0800291c l     O .bss	00000004 uxSchedulerSuspended
00003c10 l     F .text	000000d8 prvAllocateTCBAndStack
00003910 l     F .text	0000013c prvInitialiseTCBVariables
00003a4c l     F .text	000000a8 prvInitialiseTaskLists
0807fa10 l     O .bss	000000f0 pxReadyTasksLists
0807fb3c l     O .bss	00000014 xTasksWaitingTermination
00003dfc l     F .text	00000070 prvResetNextTaskUnblockTime
00003b98 l     F .text	00000078 prvAddCurrentTaskToDelayedList
000038f4 l     F .text	0000001c prvIdleTask
0807fb28 l     O .bss	00000014 xPendingReadyList
08002920 l     O .bss	00000004 pxDelayedTaskList
08002924 l     O .bss	00000004 pxOverflowDelayedTaskList
08000039 l     O .rodata	00000014 ucExpectedStackBytes.2768
00003af4 l     F .text	000000a4 prvCheckTasksWaitingTermination
0807fb00 l     O .bss	00000014 xDelayedTaskList1
0807fb14 l     O .bss	00000014 xDelayedTaskList2
00003dc0 l     F .text	0000003c prvDeleteTCB
00003ce8 l     F .text	00000068 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
08002928 l     O .bss	00000004 xTimerQueue
00005044 l     F .text	0000007c prvCheckForValidListAndQueue
00004b50 l     F .text	00000034 prvTimerTask
00004aa4 l     F .text	000000ac prvProcessExpiredTimer
08002930 l     O .bss	00000004 pxCurrentTimerList
00004ce8 l     F .text	000000cc prvInsertTimerInActiveList
00004c24 l     F .text	00000060 prvGetNextExpireTime
00004b84 l     F .text	000000a0 prvProcessTimerOrBlockTask
00004db4 l     F .text	0000018c prvProcessReceivedCommands
00004c84 l     F .text	00000064 prvSampleTimeNow
0800292c l     O .bss	00000004 xLastTime.2546
00004f40 l     F .text	00000104 prvSwitchTimerLists
08002934 l     O .bss	00000004 pxOverflowTimerList
0807fb50 l     O .bss	00000014 xActiveTimerList1
0807fb64 l     O .bss	00000014 xActiveTimerList2
00000000 l    df *ABS*	00000000 FreeRTOS_freq_plot.c
08002944 l     O .bss	00000004 Q_freq_data
00000000 l    df *ABS*	00000000 dp-bit.c
00006b4c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strtod.c
000084f4 l     F .text	00000048 match
08000a8c l     O .rwdata	00000014 fpi.1950
080004b8 l     O .rodata	00000028 tinytens
08000a78 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 vfprintf.c
00009b60 l     F .text	00000058 __sprint_r
0800054e l     O .rodata	00000010 blanks.3452
0800053e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000bbc4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000d5c0 l     F .text	00000058 std
0000d6cc l     F .text	00000008 __fp_lock
0000d6d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e2dc l     F .text	00000024 htinit
0000e368 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000ebd0 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 impure.c
08000aa0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
08002888 l     O .rwdata	00000004 charset
080005a0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080006e8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00012b94 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
000130d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013138 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013238 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00013358 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000134a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000136d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080028b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013970 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800145c l     O .rwdata	000000d8 flash_controller
08001534 l     O .rwdata	00001060 jtag_uart
08002594 l     O .rwdata	00000120 character_lcd
080026b4 l     O .rwdata	000000c4 uart
08002778 l     O .rwdata	00000038 ps2
080027b0 l     O .rwdata	00000048 video_character_buffer_with_dma
080027f8 l     O .rwdata	00000054 video_pixel_buffer_dma
00013d70 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
00013e44 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00014c44 l     F .text	0000007c alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015d28 l     F .text	0000022c altera_avalon_jtag_uart_irq
00015f54 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
080028b4 l     O .rwdata	00000004 colstart
000165d0 l     F .text	000000b8 lcd_write_command
00016688 l     F .text	000000d4 lcd_write_data
0001675c l     F .text	000000c4 lcd_clear_screen
00016820 l     F .text	000001ec lcd_repaint_screen
00016a0c l     F .text	000000c8 lcd_scroll_up
00016ad4 l     F .text	000002d0 lcd_handle_escape
000172a8 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017508 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000177bc l     F .text	000000a0 altera_avalon_uart_irq
0001785c l     F .text	000000e0 altera_avalon_uart_rxirq
0001793c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00017d28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00017f50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a1a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a42c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0001a568 l     F .text	000000dc alt_file_locked
0001a7cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0001adc4 l     F .text	000000bc alt_write_word_amd
0001aca0 l     F .text	00000124 alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0001b078 l     F .text	0000018c alt_unlock_block_intel
0001b204 l     F .text	000000dc alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
080008dd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001b764 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001b918 l     F .text	00000040 alt_sim_halt
00008224 g     F .text	0000001c putchar
0000fdcc g     F .text	00000094 _mprec_log10
0000feb8 g     F .text	00000088 __any_on
000118fc g     F .text	00000070 _isatty_r
080006c0 g     O .rodata	00000028 __mprec_tinytens
00013508 g     F .text	0000006c alt_main
00019620 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00008248 g     F .text	000000a0 _puts_r
00014704 g     F .text	00000048 alt_read_query_entry_32bit
000181fc g     F .text	00000058 alt_up_ps2_disable_read_interrupt
08080350 g     O .bss	00000100 alt_irq
0001196c g     F .text	00000078 _lseek_r
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
00003548 g     F .text	00000074 vTaskPlaceOnUnorderedEventList
000011d0 g     F .text	00000020 xPortGetFreeHeapSize
00013e7c g     F .text	000002c0 alt_flash_cfi_write
00000c9c g     F .text	0000003c xEventGroupGetBitsFromISR
000127f4 g     F .text	00000088 __eqdf2
080805e0 g       *ABS*	00000000 __alt_heap_start
000048fc g     F .text	000000b0 xTimerCreate
000081ac g     F .text	00000044 printf
0807fba0 g     O .bss	0000000a oddStr
0001127c g     F .text	00000068 __sseek
0000d628 g     F .text	000000a4 __sinit
0001147c g     F .text	00000130 __swbuf_r
00018844 g     F .text	00000114 alt_up_char_buffer_string
00018014 g     F .text	00000034 read_CE_bit
00002b64 g     F .text	00000094 vQueueWaitForMessageRestricted
0000ee88 g     F .text	00000084 _setlocale_r
0000d728 g     F .text	00000068 __sfmoreglue
00013594 g     F .text	00000020 __malloc_unlock
000183a8 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000853c g     F .text	000014e4 _strtod_r
0807fbaa g     O .bss	0000001e testStr
00018774 g     F .text	000000d0 alt_up_char_buffer_draw
000008f0 g     F .text	00000184 xEventGroupSync
0800286c g     O .rwdata	00000008 ROCThresh
0000f8e0 g     F .text	000000e0 memmove
0000081c g     F .text	00000080 xCoRoutineRemoveFromEventList
08002874 g     O .rwdata	00000008 previousFreq
00004114 g     F .text	00000054 vTaskEnterCritical
0000d718 g     F .text	00000010 _cleanup
000020c0 g     F .text	000000e8 xQueueGenericSendFromISR
0000ff40 g     F .text	000000bc _Balloc
000067c0 g     F .text	00000118 switchPollingTask
000189f4 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000766c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00014890 g     F .text	00000048 alt_write_flash_command_32bit_device_16bit_mode
000189b4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	00000000 __reset
00001d78 g     F .text	00000094 xQueueGiveMutexRecursive
080028f4 g     O .bss	00000004 pxCurrentTCB
00011888 g     F .text	00000074 _fstat_r
08002940 g     O .bss	00000001 loadManage
00014398 g     F .text	000002e8 alt_flash_program_block
08002990 g     O .bss	00000004 errno
00012e50 g     F .text	0000002c __make_fp
0800299c g     O .bss	00000004 alt_argv
00004434 g     F .text	00000188 xTaskNotify
0800a84c g       *ABS*	00000000 _gp
0001a9d0 g     F .text	00000030 usleep
00018b94 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00000a74 g     F .text	000001c0 xEventGroupWaitBits
08002948 g     O .bss	00000004 sw_result
080012dc g     O .rwdata	00000180 alt_fd_list
08000a6c g     O .rwdata	0000000a ROCStr
000017dc g     F .text	00000038 xPortStartScheduler
00008240 g     F .text	00000008 _putchar_r
0800294c g     O .bss	00000004 checkIfFieldRequired
00002fac g     F .text	00000044 vTaskEndScheduler
0001a2c8 g     F .text	00000094 alt_find_dev
00008074 g     F .text	000000a0 memcpy
000034e8 g     F .text	00000060 vTaskPlaceOnEventList
0000ec1c g     F .text	00000248 __hexnan
00002bf8 g     F .text	000001c8 xTaskGenericCreate
00018958 g     F .text	0000005c alt_up_char_buffer_clear
0000d70c g     F .text	0000000c _cleanup_r
00007804 g     F .text	000000f8 __floatsidf
0001a4f0 g     F .text	00000078 alt_io_redirect
00012904 g     F .text	00000088 __ltdf2
00002590 g     F .text	00000080 xQueuePeekFromISR
0001b97c g       *ABS*	00000000 __DTOR_END__
000082e8 g     F .text	00000014 puts
00001150 g     F .text	00000080 vPortFree
0807fbc8 g     O .bss	00000320 freq
00000290 g     F .text	00000140 xCoRoutineCreate
0000fd1c g     F .text	000000b0 __ratio
01000000 g       *ABS*	00000000 __alt_mem_flash_controller
00018c44 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0001616c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000081f0 g     F .text	00000034 _printf_r
00012cd0 g     F .text	00000008 __udivsi3
00013298 g     F .text	000000c0 isatty
000064ac g     F .text	00000074 loadCtlTask
080005d0 g     O .rodata	000000c8 __mprec_tens
00003d50 g     F .text	00000070 uxTaskGetStackHighWaterMark
000192d0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0000ee64 g     F .text	00000008 __locale_charset
00011a5c g     F .text	000000a4 __fixunsdfsi
0000149c g     F .text	00000088 vListInsertEnd
08002984 g     O .bss	00000004 __malloc_top_pad
0807fee8 g     O .bss	00000048 sw_result_bin
0000089c g     F .text	00000054 xEventGroupCreate
08002884 g     O .rwdata	00000004 __mb_cur_max
0000ee6c g     F .text	0000000c _localeconv_r
00010638 g     F .text	0000003c __i2b
0000dcc0 g     F .text	0000049c __sfvwrite_r
00011204 g     F .text	00000070 _sbrk_r
0001ae80 g     F .text	00000084 alt_program_intel
00019ab4 g     F .text	000000d0 helper_plot_pixel
000068d8 g     F .text	000000a0 freq_relay
00000ed4 g     F .text	00000038 vEventGroupSetBitsCallback
00006520 g     F .text	00000158 shedLoads
000119e4 g     F .text	00000078 _read_r
00001474 g     F .text	00000028 vListInitialiseItem
0001a074 g     F .text	00000078 alt_dcache_flush
08000ea0 g     O .rwdata	0000000c __lc_ctype
080028a4 g     O .rwdata	00000004 alt_max_fd
00014680 g     F .text	00000040 alt_read_query_entry_8bit
000018c8 g     F .text	0000004c vPortSysTickHandler
00007e00 g     F .text	00000138 __unpack_d
00011764 g     F .text	00000110 _fclose_r
00018048 g     F .text	00000034 read_num_bytes_available
0001af04 g     F .text	00000174 alt_erase_block_intel
0000d58c g     F .text	00000034 fflush
08002988 g     O .bss	00000004 __malloc_max_sbrked_mem
00001914 g     F .text	000001b0 alt_irq_register
00006678 g     F .text	00000148 binaryToDecimal
00017fb0 g     F .text	00000034 read_RI_bit
0800285c g     O .rwdata	00000008 temp
00006fdc g     F .text	00000074 __adddf3
0001268c g     F .text	00000078 __nesf2
0000fbfc g     F .text	00000120 __b2d
00018c78 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
000120dc g     F .text	000005b0 __umoddi3
000133b8 g     F .text	000000f0 lseek
08002950 g     O .bss	00000004 stableTaskHandle
08002880 g     O .rwdata	00000004 _global_impure_ptr
00000cd8 g     F .text	0000018c xEventGroupSetBits
00010ba0 g     F .text	000005f4 _realloc_r
080805e0 g       *ABS*	00000000 __bss_end
00018ddc g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0001a8c4 g     F .text	0000010c alt_tick
08080250 g     O .bss	00000100 __hexdig
00011b00 g     F .text	000005dc __udivdi3
08000698 g     O .rodata	00000028 __mprec_bigtens
00010894 g     F .text	00000120 __s2b
00012a00 g     F .text	00000194 __floatunsidf
0000fb1c g     F .text	00000060 __mcmp
00000fbc g     F .text	00000194 pvPortMalloc
000176fc g     F .text	000000c0 altera_avalon_uart_init
000180b0 g     F .text	0000002c read_data_byte
080028c8 g     O .rwdata	00000004 __ctype_ptr
0000d6f4 g     F .text	00000018 __fp_lock_all
000026d4 g     F .text	00000038 vQueueDelete
00001814 g     F .text	0000001c vPortEndScheduler
00001404 g     F .text	00000070 vListInitialise
0001a82c g     F .text	00000098 alt_alarm_stop
08002954 g     O .bss	00000004 switchPollingTaskHandle
00017fe4 g     F .text	00000030 read_RE_bit
08002994 g     O .bss	00000004 alt_irq_active
08002958 g     O .bss	00000001 previousbyte
0000017c g     F .exceptions	000000cc alt_irq_handler
080012b4 g     O .rwdata	00000028 alt_dev_null
00003168 g     F .text	00000028 xTaskGetTickCount
00001f10 g     F .text	000001b0 xQueueGenericSend
00012ce0 g     F .text	000000c8 __unpack_f
00014b98 g     F .text	000000ac alt_set_flash_algorithm_func
00018254 g     F .text	00000078 alt_up_ps2_write_data_byte
0000f9e8 g     F .text	00000070 __hi0bits
000199f0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
000078fc g     F .text	000000d8 __fixdfsi
00004018 g     F .text	000000fc xTaskPriorityDisinherit
0001474c g     F .text	0000003c alt_write_flash_command_8bit_device_8bit_mode
00009b44 g     F .text	0000001c strtod
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0800289c g     O .rwdata	00000008 alt_dev_list
00013850 g     F .text	00000120 write
00010ab8 g     F .text	000000e8 _putc_r
00012704 g     F .text	00000078 __gtsf2
00019b84 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0000361c g     F .text	000000e8 xTaskRemoveFromEventList
00013164 g     F .text	000000d4 fstat
00000c34 g     F .text	00000068 xEventGroupClearBits
0000777c g     F .text	00000088 __ledf2
00005d7c g     F .text	000003e4 keyboard_control_task
00015a4c g     F .text	000000dc alt_check_primary_table
00010774 g     F .text	00000120 __pow5mult
00006160 g     F .text	0000034c stabilityMonitorTask
08002978 g     O .bss	00000004 __nlocale_changed
00012cd8 g     F .text	00000008 __umodsi3
000141cc g     F .text	00000068 alt_flash_cfi_read
00014920 g     F .text	00000034 alt_write_native_8bit
00005c78 g     F .text	00000104 print_status_task
080805e0 g       *ABS*	00000000 end
08000a60 g     O .rwdata	0000000a freqStr
000185c8 g     F .text	000000a8 alt_up_ps2_write_fd
00012e7c g     F .text	00000160 __pack_f
00014788 g     F .text	0000007c alt_write_flash_command_16bit_device_8bit_mode
00016da4 g     F .text	00000504 altera_avalon_lcd_16207_write
00002dc0 g     F .text	000000d8 vTaskDelete
000186b0 g     F .text	00000084 alt_up_char_buffer_init
00017d88 g     F .text	000001c8 altera_avalon_uart_write
00014cc0 g     F .text	000005e0 alt_read_cfi_table
00015c70 g     F .text	000000b8 altera_avalon_jtag_uart_init
00004214 g     F .text	0000003c pvTaskIncrementMutexHeldCount
0001b978 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0001757c g     F .text	00000088 alt_avalon_timer_sc_init
0001765c g     F .text	00000058 altera_avalon_uart_write_fd
00007a6c g     F .text	00000080 __clzsi2
000176b4 g     F .text	00000048 altera_avalon_uart_close_fd
00016390 g     F .text	00000240 altera_avalon_jtag_uart_write
00013da8 g     F .text	0000009c alt_flash_cfi_init
0000d618 g     F .text	00000004 __sfp_lock_acquire
0000f7fc g     F .text	000000e4 memchr
00009bb8 g     F .text	00001eac ___vfprintf_internal_r
00008370 g     F .text	00000060 _sprintf_r
0000380c g     F .text	000000c4 xTaskCheckForTimeOut
00000694 g     F .text	000000ec vCoRoutineSchedule
0000d9ac g     F .text	00000314 _free_r
080028cc g     O .bss	00000004 pxCurrentCoRoutine
0001b768 g     F .text	000001b0 __call_exitprocs
0800297c g     O .bss	00000004 __mlocale_changed
00004250 g     F .text	000000d8 ulTaskNotifyTake
08002890 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	00000048 _start
080029a4 g     O .bss	00000004 _alt_tick_rate
00002ff0 g     F .text	00000028 vTaskSuspendAll
00003190 g     F .text	0000002c xTaskGetTickCountFromISR
00010304 g     F .text	0000014c __lshift
080029a8 g     O .bss	00000004 _alt_nticks
000135b4 g     F .text	00000120 read
00013a04 g     F .text	0000036c alt_sys_init
000015f8 g     F .text	00000098 uxListRemove
0001b630 g     F .text	00000134 __register_exitproc
000184d4 g     F .text	00000058 alt_up_ps2_clear_fifo
000146c0 g     F .text	00000044 alt_read_query_entry_16bit
00010450 g     F .text	000001e8 __multiply
00016004 g     F .text	00000074 altera_avalon_jtag_uart_close
00003ee8 g     F .text	00000130 vTaskPriorityInherit
0807fb78 g     O .bss	00000028 __malloc_current_mallinfo
000149b8 g     F .text	000001e0 alt_set_flash_width_func
0000fffc g     F .text	0000017c __d2b
000033b8 g     F .text	00000130 vTaskSwitchContext
000045bc g     F .text	000001c0 xTaskNotifyFromISR
00015b28 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001b52c g     F .text	000000b8 alt_get_fd
000035bc g     F .text	00000060 vTaskPlaceOnEventListRestricted
0001b2e0 g     F .text	0000012c alt_busy_sleep
00007f38 g     F .text	000000c8 __fpcmp_parts_d
000116f4 g     F .text	00000070 _close_r
00004328 g     F .text	0000010c xTaskNotifyWait
0001aa88 g     F .text	00000218 alt_erase_block_amd
00008000 g     F .text	00000074 memcmp
00015bd8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
080805e0 g       *ABS*	00000000 __alt_stack_base
00015c20 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0800295c g     O .bss	00000004 PRVGADraw
000049ac g     F .text	000000c8 xTimerGenericCommand
0800293c g     O .bss	00000004 numOfShed
0000ba88 g     F .text	0000013c __swsetup_r
000152a0 g     F .text	000007ac alt_read_cfi_width
00001690 g     F .text	0000003c vApplicationStackOverflowHook
00007414 g     F .text	00000258 __divdf3
0000d790 g     F .text	000000f0 __sfp
00008444 g     F .text	000000b0 strncat
0000fe60 g     F .text	00000058 __copybits
000031bc g     F .text	00000020 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
08002960 g     O .bss	00000001 byte
08000eac g     O .rwdata	00000408 __malloc_av_
0000d624 g     F .text	00000004 __sinit_lock_release
00007050 g     F .text	000003c4 __muldf3
00011360 g     F .text	00000060 __sread
0001b40c g     F .text	00000120 alt_find_file
0001a0ec g     F .text	000000b4 alt_dev_llist_insert
00013574 g     F .text	00000020 __malloc_lock
00013794 g     F .text	000000bc sbrk
00001e0c g     F .text	000000a8 xQueueTakeMutexRecursive
0000d390 g     F .text	000001fc _fflush_r
00000e64 g     F .text	00000070 vEventGroupDelete
00011640 g     F .text	000000b4 _calloc_r
080028b8 g     O .rwdata	00000008 alt_flash_dev_list
0001484c g     F .text	00000044 alt_write_flash_command_16bit_device_16bit_mode
080028cc g       *ABS*	00000000 __bss_start
00008114 g     F .text	00000098 memset
000069c8 g     F .text	00000184 main
080029a0 g     O .bss	00000004 alt_envp
0800298c g     O .bss	00000004 __malloc_max_total_mem
00018bec g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00018734 g     F .text	00000040 alt_up_char_buffer_open_dev
00015b80 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000115ac g     F .text	0000001c __swbuf
0001277c g     F .text	00000078 __ltsf2
00001524 g     F .text	000000d4 vListInsert
00017374 g     F .text	0000013c altera_avalon_lcd_16207_init
00011274 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
00011874 g     F .text	00000014 fclose
0000488c g     F .text	00000070 xTimerCreateTimerTask
00018458 g     F .text	0000007c alt_up_ps2_read_data_byte
0001298c g     F .text	00000074 __truncdfsf2
08080450 g     O .bss	00000190 _atexit0
0000bddc g     F .text	000015b4 _dtoa_r
0000f0bc g     F .text	00000740 _malloc_r
00004a74 g     F .text	00000030 pcTimerGetTimerName
080028a8 g     O .rwdata	00000004 alt_errno
000148d8 g     F .text	00000048 alt_write_flash_command_32bit_device_32bit_mode
0000e224 g     F .text	000000b8 _fwalk
000024ac g     F .text	000000e4 xQueueReceiveFromISR
00014234 g     F .text	00000164 alt_write_value_to_flash
00003e6c g     F .text	00000028 xTaskGetCurrentTaskHandle
00018670 g     F .text	00000040 alt_up_ps2_open_dev
00014954 g     F .text	00000034 alt_write_native_16bit
000109b4 g     F .text	00000104 putc
00012c10 g     F .text	00000060 __divsi3
08000390 g     O .rodata	00000014 __thenan_df
00001bd8 g     F .text	000000dc xQueueGenericCreate
0000d880 g     F .text	0000012c _malloc_trim_r
000181a8 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0001b97c g       *ABS*	00000000 __CTOR_END__
000113c0 g     F .text	000000bc strcmp
00001eb4 g     F .text	0000005c xQueueCreateCountingSemaphore
0001b97c g       *ABS*	00000000 __DTOR_LIST__
08002964 g     O .bss	00000004 keyboardTaskHandle
0001287c g     F .text	00000088 __nedf2
000139d0 g     F .text	00000034 alt_irq_init
00003704 g     F .text	000000d0 xTaskRemoveFromUnorderedEventList
00013734 g     F .text	00000060 alt_release_fd
00003018 g     F .text	00000150 xTaskResumeAll
00002650 g     F .text	00000054 uxQueueSpacesAvailable
0001807c g     F .text	00000034 read_data_valid
000082fc g     F .text	00000074 sprintf
080003a4 g     O .rodata	00000100 __clz_tab
00002f10 g     F .text	0000009c vTaskStartScheduler
08002980 g     O .bss	00000004 _PathLocale
0807ff30 g     O .bss	00000320 dfreq
00009a20 g     F .text	00000124 strtof
0001833c g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0001b5e4 g     F .text	00000014 atexit
000115c8 g     F .text	00000078 _write_r
0000ef0c g     F .text	0000001c setlocale
00002b1c g     F .text	00000048 xQueueIsQueueFullFromISR
0000510c g     F .text	00000030 pvTimerGetTimerID
08002968 g     O .bss	00000008 currentROC
000003d0 g     F .text	000000a0 vCoRoutineAddToDelayedList
0800287c g     O .rwdata	00000004 _impure_ptr
08002998 g     O .bss	00000004 alt_argc
0001a264 g     F .text	00000064 _do_dtors
0000fb7c g     F .text	00000080 __ulp
00011194 g     F .text	00000040 __isinfd
0000d6dc g     F .text	00000018 __fp_unlock_all
08002938 g     O .bss	00000001 keyboardMode
000038d0 g     F .text	00000024 vTaskMissedYield
000174b0 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
08002894 g     O .rwdata	00000008 alt_fs_list
00014804 g     F .text	00000048 alt_write_flash_command_32bit_device_8bit_mode
00002610 g     F .text	00000040 uxQueueMessagesWaiting
00002280 g     F .text	0000022c xQueueGenericReceive
0000513c g     F .text	00000b3c PRVGADraw_Task
000031dc g     F .text	000001dc xTaskIncrementTick
0000ee78 g     F .text	00000010 localeconv
0000e300 g     F .text	00000068 __hexdig_init
00001ac4 g     F .text	00000114 xQueueGenericReset
080028cc g       *ABS*	00000000 _edata
00017604 g     F .text	00000058 altera_avalon_uart_read_fd
080805e0 g       *ABS*	00000000 _end
0001a35c g     F .text	0000007c alt_flash_open_dev
00016078 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08000058 g     O .rodata	0000002c numbers
000011f0 g     F .text	0000001c vPortInitialiseBlocks
08002970 g     O .bss	00000004 loadCtlTaskHandle
000050c0 g     F .text	0000004c xTimerIsTimerActive
000112e4 g     F .text	0000007c __swrite
0800288c g     O .rwdata	00000004 __malloc_trim_threshold
0001aa00 g     F .text	00000020 altera_nios2_qsys_irq_init
0001b5f8 g     F .text	00000038 exit
0000e15c g     F .text	000000c8 _fwalk_reent
000180dc g     F .text	000000cc alt_up_ps2_init
00010178 g     F .text	0000018c __mdiff
0001a3d8 g     F .text	00000054 alt_flash_close_dev
00012c70 g     F .text	00000060 __modsi3
00002e98 g     F .text	00000078 vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0000d61c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
00003e94 g     F .text	00000054 xTaskGetSchedulerState
080007dc g     O .rodata	00000101 _ctype_
00017a98 g     F .text	00000060 altera_avalon_uart_close
00012da8 g     F .text	000000a8 __fpcmp_parts_f
0001b958 g     F .text	00000020 _exit
000111d4 g     F .text	00000030 __isnand
00019f20 g     F .text	00000154 alt_alarm_start
000079d4 g     F .text	00000098 __muldi3
0000ef28 g     F .text	00000194 __smakebuf_r
00014988 g     F .text	00000030 alt_write_native_32bit
000182cc g     F .text	00000070 alt_up_ps2_wait_for_ack
00004168 g     F .text	00000068 vTaskExitCritical
000083d0 g     F .text	00000074 strlen
000016f4 g     F .text	000000e8 pxPortInitialiseStack
0001a644 g     F .text	00000188 open
00006978 g     F .text	00000050 ps2_isr
000076f4 g     F .text	00000088 __gedf2
0000e418 g     F .text	000007b8 __gethex
0001413c g     F .text	00000090 alt_flash_cfi_get_info
08002864 g     O .rwdata	00000008 freqThresh
000037d4 g     F .text	00000038 vTaskSetTimeOutState
080028ac g     O .rwdata	00000004 alt_priority_mask
08002974 g     O .bss	00000004 current_sw_size
0000ba64 g     F .text	00000024 __vfprintf_internal
00017af8 g     F .text	00000230 altera_avalon_uart_read
000026a4 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00002a80 g     F .text	00000044 xQueueIsQueueEmptyFromISR
0001852c g     F .text	0000009c alt_up_ps2_read_fd
00006f5c g     F .text	00000080 __subdf3
0000fa58 g     F .text	000000c4 __lo0bits
080028c0 g     O .rwdata	00000008 alt_alarm_list
0001a200 g     F .text	00000064 _do_ctors
000041d0 g     F .text	00000044 uxTaskResetEventItemValue
00001cb4 g     F .text	000000c4 xQueueCreateMutex
00012fdc g     F .text	000000fc close
0001aa20 g     F .text	00000068 alt_program_amd
0000477c g     F .text	00000110 vTaskNotifyGiveFromISR
00007aec g     F .text	00000314 __pack_d
00000f0c g     F .text	00000038 vEventGroupClearBitsCallback
000021a8 g     F .text	000000d8 xQueueGiveFromISR
00000000  w      *UND*	00000000 free
0000d620 g     F .text	00000004 __sinit_lock_acquire
00010674 g     F .text	00000100 __multadd
0000f9c0 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
  20:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
  24:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
  28:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
  2c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
  30:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
  34:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
  38:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
  3c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
  40:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
  44:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
  48:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
  4c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
  68:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
  6c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
  70:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
  74:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
  78:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
  7c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
  80:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
  84:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
  88:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
  8c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
  90:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
  94:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06020034 	movhi	et,2048

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
  a0:	c60a3d04 	addi	et,et,10484
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
  a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
  ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
  b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
  b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06020034 	movhi	et,2048

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
  c8:	c60a3d04 	addi	et,et,10484
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
  cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
  d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
  d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
  dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
  e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
  e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
  ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
  f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
  f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
  f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
  fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 10c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 11c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 15c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 164:	003da03a 	break	0
  	br		restore_context			# its something else
 168:	003fda06 	br	d4 <restore_context>

0000016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 16c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 174:	00033b80 	call	33b8 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 178:	003fd206 	br	c4 <restore_sp_from_pxCurrentTCB>

0000017c <alt_irq_handler>:
 17c:	defff904 	addi	sp,sp,-28
 180:	dfc00615 	stw	ra,24(sp)
 184:	df000515 	stw	fp,20(sp)
 188:	df000504 	addi	fp,sp,20
 18c:	0005313a 	rdctl	r2,ipending
 190:	e0bffc15 	stw	r2,-16(fp)
 194:	e0bffc17 	ldw	r2,-16(fp)
 198:	e0bfff15 	stw	r2,-4(fp)
 19c:	e03ffd15 	stw	zero,-12(fp)
 1a0:	00800044 	movi	r2,1
 1a4:	e0bffe15 	stw	r2,-8(fp)
 1a8:	e0ffff17 	ldw	r3,-4(fp)
 1ac:	e0bffe17 	ldw	r2,-8(fp)
 1b0:	1884703a 	and	r2,r3,r2
 1b4:	1005003a 	cmpeq	r2,r2,zero
 1b8:	1000171e 	bne	r2,zero,218 <alt_irq_handler+0x9c>
 1bc:	e0bffd17 	ldw	r2,-12(fp)
 1c0:	00c20234 	movhi	r3,2056
 1c4:	18c0d404 	addi	r3,r3,848
 1c8:	100490fa 	slli	r2,r2,3
 1cc:	10c5883a 	add	r2,r2,r3
 1d0:	11800017 	ldw	r6,0(r2)
 1d4:	e0bffd17 	ldw	r2,-12(fp)
 1d8:	00c20234 	movhi	r3,2056
 1dc:	18c0d404 	addi	r3,r3,848
 1e0:	100490fa 	slli	r2,r2,3
 1e4:	10c5883a 	add	r2,r2,r3
 1e8:	10800104 	addi	r2,r2,4
 1ec:	11000017 	ldw	r4,0(r2)
 1f0:	e17ffd17 	ldw	r5,-12(fp)
 1f4:	303ee83a 	callr	r6
 1f8:	0005313a 	rdctl	r2,ipending
 1fc:	e0bffb15 	stw	r2,-20(fp)
 200:	e0bffb17 	ldw	r2,-20(fp)
 204:	e0bfff15 	stw	r2,-4(fp)
 208:	e0bfff17 	ldw	r2,-4(fp)
 20c:	1004c03a 	cmpne	r2,r2,zero
 210:	103fe21e 	bne	r2,zero,19c <alt_irq_handler+0x20>
 214:	00000706 	br	234 <alt_irq_handler+0xb8>
 218:	e0bffe17 	ldw	r2,-8(fp)
 21c:	1085883a 	add	r2,r2,r2
 220:	e0bffe15 	stw	r2,-8(fp)
 224:	e0bffd17 	ldw	r2,-12(fp)
 228:	10800044 	addi	r2,r2,1
 22c:	e0bffd15 	stw	r2,-12(fp)
 230:	003fdd06 	br	1a8 <alt_irq_handler+0x2c>
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:
     248:	00820014 	movui	r2,2048
     24c:	10000033 	initd	0(r2)
     250:	10bff804 	addi	r2,r2,-32
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>
     258:	06c40034 	movhi	sp,4096
     25c:	dec00014 	ori	sp,sp,0
     260:	06820034 	movhi	gp,2048
     264:	d6aa1314 	ori	gp,gp,43084
     268:	00820034 	movhi	r2,2048
     26c:	108a3314 	ori	r2,r2,10444
     270:	00c20234 	movhi	r3,2056
     274:	18c17814 	ori	r3,r3,1504
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>
     27c:	10000015 	stw	zero,0(r2)
     280:	10800104 	addi	r2,r2,4
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     288:	00135080 	call	13508 <alt_main>

0000028c <alt_after_alt_main>:
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     290:	defff904 	addi	sp,sp,-28
     294:	dfc00615 	stw	ra,24(sp)
     298:	df000515 	stw	fp,20(sp)
     29c:	df000504 	addi	fp,sp,20
     2a0:	e13ffd15 	stw	r4,-12(fp)
     2a4:	e17ffe15 	stw	r5,-8(fp)
     2a8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2ac:	01000e04 	movi	r4,56
     2b0:	0000fbc0 	call	fbc <pvPortMalloc>
     2b4:	e0bffb15 	stw	r2,-20(fp)
	if( pxCoRoutine )
     2b8:	e0bffb17 	ldw	r2,-20(fp)
     2bc:	1005003a 	cmpeq	r2,r2,zero
     2c0:	10003b1e 	bne	r2,zero,3b0 <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2c4:	d0a02017 	ldw	r2,-32640(gp)
     2c8:	1004c03a 	cmpne	r2,r2,zero
     2cc:	1000031e 	bne	r2,zero,2dc <xCoRoutineCreate+0x4c>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2d0:	e0bffb17 	ldw	r2,-20(fp)
     2d4:	d0a02015 	stw	r2,-32640(gp)
			prvInitialiseCoRoutineLists();
     2d8:	00007800 	call	780 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	108000b0 	cmpltui	r2,r2,2
     2e4:	1000021e 	bne	r2,zero,2f0 <xCoRoutineCreate+0x60>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2e8:	00800044 	movi	r2,1
     2ec:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2f0:	e0bffb17 	ldw	r2,-20(fp)
     2f4:	10000d0d 	sth	zero,52(r2)
		pxCoRoutine->uxPriority = uxPriority;
     2f8:	e0fffb17 	ldw	r3,-20(fp)
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	18800b15 	stw	r2,44(r3)
		pxCoRoutine->uxIndex = uxIndex;
     304:	e0fffb17 	ldw	r3,-20(fp)
     308:	e0bfff17 	ldw	r2,-4(fp)
     30c:	18800c15 	stw	r2,48(r3)
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     310:	e0fffb17 	ldw	r3,-20(fp)
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     31c:	e0bffb17 	ldw	r2,-20(fp)
     320:	11000104 	addi	r4,r2,4
     324:	00014740 	call	1474 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	11000604 	addi	r4,r2,24
     330:	00014740 	call	1474 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     334:	e0fffb17 	ldw	r3,-20(fp)
     338:	e0bffb17 	ldw	r2,-20(fp)
     33c:	18800415 	stw	r2,16(r3)
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     340:	e0fffb17 	ldw	r3,-20(fp)
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	18800915 	stw	r2,36(r3)

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     34c:	00c00084 	movi	r3,2
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	1887c83a 	sub	r3,r3,r2
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10c00615 	stw	r3,24(r2)

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     360:	e0bffb17 	ldw	r2,-20(fp)
     364:	10c00b17 	ldw	r3,44(r2)
     368:	d0a02117 	ldw	r2,-32636(gp)
     36c:	10c0032e 	bgeu	r2,r3,37c <xCoRoutineCreate+0xec>
     370:	e0bffb17 	ldw	r2,-20(fp)
     374:	10800b17 	ldw	r2,44(r2)
     378:	d0a02115 	stw	r2,-32636(gp)
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	10800b17 	ldw	r2,44(r2)
     384:	10800524 	muli	r2,r2,20
     388:	1007883a 	mov	r3,r2
     38c:	00820034 	movhi	r2,2048
     390:	108a6b04 	addi	r2,r2,10668
     394:	1889883a 	add	r4,r3,r2
     398:	e0bffb17 	ldw	r2,-20(fp)
     39c:	11400104 	addi	r5,r2,4
     3a0:	000149c0 	call	149c <vListInsertEnd>

		xReturn = pdPASS;
     3a4:	00800044 	movi	r2,1
     3a8:	e0bffc15 	stw	r2,-16(fp)
     3ac:	00000206 	br	3b8 <xCoRoutineCreate+0x128>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     3b0:	00bfffc4 	movi	r2,-1
     3b4:	e0bffc15 	stw	r2,-16(fp)
	}

	return xReturn;
     3b8:	e0bffc17 	ldw	r2,-16(fp)
}
     3bc:	e037883a 	mov	sp,fp
     3c0:	dfc00117 	ldw	ra,4(sp)
     3c4:	df000017 	ldw	fp,0(sp)
     3c8:	dec00204 	addi	sp,sp,8
     3cc:	f800283a 	ret

000003d0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     3d0:	defffb04 	addi	sp,sp,-20
     3d4:	dfc00415 	stw	ra,16(sp)
     3d8:	df000315 	stw	fp,12(sp)
     3dc:	df000304 	addi	fp,sp,12
     3e0:	e13ffe15 	stw	r4,-8(fp)
     3e4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3e8:	d0e02217 	ldw	r3,-32632(gp)
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	e0bffd15 	stw	r2,-12(fp)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3f8:	d0a02017 	ldw	r2,-32640(gp)
     3fc:	11000104 	addi	r4,r2,4
     400:	00015f80 	call	15f8 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     404:	d0e02017 	ldw	r3,-32640(gp)
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xCoRoutineTickCount )
     410:	d0e02217 	ldw	r3,-32632(gp)
     414:	e0bffd17 	ldw	r2,-12(fp)
     418:	10c0052e 	bgeu	r2,r3,430 <vCoRoutineAddToDelayedList+0x60>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     41c:	d1202617 	ldw	r4,-32616(gp)
     420:	d0a02017 	ldw	r2,-32640(gp)
     424:	11400104 	addi	r5,r2,4
     428:	00015240 	call	1524 <vListInsert>
     42c:	00000406 	br	440 <vCoRoutineAddToDelayedList+0x70>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     430:	d1202517 	ldw	r4,-32620(gp)
     434:	d0a02017 	ldw	r2,-32640(gp)
     438:	11400104 	addi	r5,r2,4
     43c:	00015240 	call	1524 <vListInsert>
	}

	if( pxEventList )
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	1005003a 	cmpeq	r2,r2,zero
     448:	1000041e 	bne	r2,zero,45c <vCoRoutineAddToDelayedList+0x8c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     44c:	d0a02017 	ldw	r2,-32640(gp)
     450:	11400604 	addi	r5,r2,24
     454:	e13fff17 	ldw	r4,-4(fp)
     458:	00015240 	call	1524 <vListInsert>
	}
}
     45c:	e037883a 	mov	sp,fp
     460:	dfc00117 	ldw	ra,4(sp)
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00204 	addi	sp,sp,8
     46c:	f800283a 	ret

00000470 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     470:	defffb04 	addi	sp,sp,-20
     474:	dfc00415 	stw	ra,16(sp)
     478:	df000315 	stw	fp,12(sp)
     47c:	df000304 	addi	fp,sp,12
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     480:	00002606 	br	51c <prvCheckPendingReadyList+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     484:	0005303a 	rdctl	r2,status
     488:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	00bfff84 	movi	r2,-2
     494:	1884703a 	and	r2,r3,r2
     498:	1001703a 	wrctl	status,r2
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     49c:	00820034 	movhi	r2,2048
     4a0:	108a7f04 	addi	r2,r2,10748
     4a4:	10800317 	ldw	r2,12(r2)
     4a8:	10800317 	ldw	r2,12(r2)
     4ac:	e0bfff15 	stw	r2,-4(fp)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	11000604 	addi	r4,r2,24
     4b8:	00015f80 	call	15f8 <uxListRemove>
     4bc:	00800044 	movi	r2,1
     4c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     4c4:	e0bffd17 	ldw	r2,-12(fp)
     4c8:	1001703a 	wrctl	status,r2
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     4cc:	e0bfff17 	ldw	r2,-4(fp)
     4d0:	11000104 	addi	r4,r2,4
     4d4:	00015f80 	call	15f8 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	10c00b17 	ldw	r3,44(r2)
     4e0:	d0a02117 	ldw	r2,-32636(gp)
     4e4:	10c0032e 	bgeu	r2,r3,4f4 <prvCheckPendingReadyList+0x84>
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800b17 	ldw	r2,44(r2)
     4f0:	d0a02115 	stw	r2,-32636(gp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10800b17 	ldw	r2,44(r2)
     4fc:	10800524 	muli	r2,r2,20
     500:	1007883a 	mov	r3,r2
     504:	00820034 	movhi	r2,2048
     508:	108a6b04 	addi	r2,r2,10668
     50c:	1889883a 	add	r4,r3,r2
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	11400104 	addi	r5,r2,4
     518:	000149c0 	call	149c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     51c:	00820034 	movhi	r2,2048
     520:	108a7f04 	addi	r2,r2,10748
     524:	10800017 	ldw	r2,0(r2)
     528:	1004c03a 	cmpne	r2,r2,zero
     52c:	103fd51e 	bne	r2,zero,484 <prvCheckPendingReadyList+0x14>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     544:	defffa04 	addi	sp,sp,-24
     548:	dfc00515 	stw	ra,20(sp)
     54c:	df000415 	stw	fp,16(sp)
     550:	df000404 	addi	fp,sp,16
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     554:	00031680 	call	3168 <xTaskGetTickCount>
     558:	d0e02317 	ldw	r3,-32628(gp)
     55c:	10c5c83a 	sub	r2,r2,r3
     560:	d0a02415 	stw	r2,-32624(gp)
	while( xPassedTicks )
     564:	00004106 	br	66c <prvCheckDelayedList+0x128>
	{
		xCoRoutineTickCount++;
     568:	d0a02217 	ldw	r2,-32632(gp)
     56c:	10800044 	addi	r2,r2,1
     570:	d0a02215 	stw	r2,-32632(gp)
		xPassedTicks--;
     574:	d0a02417 	ldw	r2,-32624(gp)
     578:	10bfffc4 	addi	r2,r2,-1
     57c:	d0a02415 	stw	r2,-32624(gp)

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     580:	d0a02217 	ldw	r2,-32632(gp)
     584:	1004c03a 	cmpne	r2,r2,zero
     588:	1000341e 	bne	r2,zero,65c <prvCheckDelayedList+0x118>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     58c:	d0a02517 	ldw	r2,-32620(gp)
     590:	e0bffe15 	stw	r2,-8(fp)
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     594:	d0a02617 	ldw	r2,-32616(gp)
     598:	d0a02515 	stw	r2,-32620(gp)
			pxOverflowDelayedCoRoutineList = pxTemp;
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	d0a02615 	stw	r2,-32616(gp)
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5a4:	00002d06 	br	65c <prvCheckDelayedList+0x118>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     5a8:	d0a02517 	ldw	r2,-32620(gp)
     5ac:	10800317 	ldw	r2,12(r2)
     5b0:	10800317 	ldw	r2,12(r2)
     5b4:	e0bfff15 	stw	r2,-4(fp)

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     5b8:	e0bfff17 	ldw	r2,-4(fp)
     5bc:	10c00117 	ldw	r3,4(r2)
     5c0:	d0a02217 	ldw	r2,-32632(gp)
     5c4:	10c02936 	bltu	r2,r3,66c <prvCheckDelayedList+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     5c8:	0005303a 	rdctl	r2,status
     5cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     5d0:	e0fffd17 	ldw	r3,-12(fp)
     5d4:	00bfff84 	movi	r2,-2
     5d8:	1884703a 	and	r2,r3,r2
     5dc:	1001703a 	wrctl	status,r2
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	11000104 	addi	r4,r2,4
     5e8:	00015f80 	call	15f8 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	10800a17 	ldw	r2,40(r2)
     5f4:	1005003a 	cmpeq	r2,r2,zero
     5f8:	1000031e 	bne	r2,zero,608 <prvCheckDelayedList+0xc4>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     5fc:	e0bfff17 	ldw	r2,-4(fp)
     600:	11000604 	addi	r4,r2,24
     604:	00015f80 	call	15f8 <uxListRemove>
     608:	00800044 	movi	r2,1
     60c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	1001703a 	wrctl	status,r2
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10c00b17 	ldw	r3,44(r2)
     620:	d0a02117 	ldw	r2,-32636(gp)
     624:	10c0032e 	bgeu	r2,r3,634 <prvCheckDelayedList+0xf0>
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	10800b17 	ldw	r2,44(r2)
     630:	d0a02115 	stw	r2,-32636(gp)
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800b17 	ldw	r2,44(r2)
     63c:	10800524 	muli	r2,r2,20
     640:	1007883a 	mov	r3,r2
     644:	00820034 	movhi	r2,2048
     648:	108a6b04 	addi	r2,r2,10668
     64c:	1889883a 	add	r4,r3,r2
     650:	e0bfff17 	ldw	r2,-4(fp)
     654:	11400104 	addi	r5,r2,4
     658:	000149c0 	call	149c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     65c:	d0a02517 	ldw	r2,-32620(gp)
     660:	10800017 	ldw	r2,0(r2)
     664:	1004c03a 	cmpne	r2,r2,zero
     668:	103fcf1e 	bne	r2,zero,5a8 <prvCheckDelayedList+0x64>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     66c:	d0a02417 	ldw	r2,-32624(gp)
     670:	1004c03a 	cmpne	r2,r2,zero
     674:	103fbc1e 	bne	r2,zero,568 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     678:	d0a02217 	ldw	r2,-32632(gp)
     67c:	d0a02315 	stw	r2,-32628(gp)
}
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     694:	defffd04 	addi	sp,sp,-12
     698:	dfc00215 	stw	ra,8(sp)
     69c:	df000115 	stw	fp,4(sp)
     6a0:	df000104 	addi	fp,sp,4
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     6a4:	00004700 	call	470 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     6a8:	00005440 	call	544 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6ac:	00000606 	br	6c8 <vCoRoutineSchedule+0x34>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     6b0:	d0a02117 	ldw	r2,-32636(gp)
     6b4:	1005003a 	cmpeq	r2,r2,zero
     6b8:	10002c1e 	bne	r2,zero,76c <vCoRoutineSchedule+0xd8>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     6bc:	d0a02117 	ldw	r2,-32636(gp)
     6c0:	10bfffc4 	addi	r2,r2,-1
     6c4:	d0a02115 	stw	r2,-32636(gp)

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6c8:	d0a02117 	ldw	r2,-32636(gp)
     6cc:	10800524 	muli	r2,r2,20
     6d0:	1007883a 	mov	r3,r2
     6d4:	00820034 	movhi	r2,2048
     6d8:	108a6b04 	addi	r2,r2,10668
     6dc:	1885883a 	add	r2,r3,r2
     6e0:	10800017 	ldw	r2,0(r2)
     6e4:	1005003a 	cmpeq	r2,r2,zero
     6e8:	103ff11e 	bne	r2,zero,6b0 <vCoRoutineSchedule+0x1c>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     6ec:	d0a02117 	ldw	r2,-32636(gp)
     6f0:	10800524 	muli	r2,r2,20
     6f4:	1007883a 	mov	r3,r2
     6f8:	00820034 	movhi	r2,2048
     6fc:	108a6b04 	addi	r2,r2,10668
     700:	1885883a 	add	r2,r3,r2
     704:	e0bfff15 	stw	r2,-4(fp)
     708:	e0bfff17 	ldw	r2,-4(fp)
     70c:	10800117 	ldw	r2,4(r2)
     710:	10c00117 	ldw	r3,4(r2)
     714:	e0bfff17 	ldw	r2,-4(fp)
     718:	10c00115 	stw	r3,4(r2)
     71c:	e0bfff17 	ldw	r2,-4(fp)
     720:	10c00117 	ldw	r3,4(r2)
     724:	e0bfff17 	ldw	r2,-4(fp)
     728:	10800204 	addi	r2,r2,8
     72c:	1880051e 	bne	r3,r2,744 <vCoRoutineSchedule+0xb0>
     730:	e0bfff17 	ldw	r2,-4(fp)
     734:	10800117 	ldw	r2,4(r2)
     738:	10c00117 	ldw	r3,4(r2)
     73c:	e0bfff17 	ldw	r2,-4(fp)
     740:	10c00115 	stw	r3,4(r2)
     744:	e0bfff17 	ldw	r2,-4(fp)
     748:	10800117 	ldw	r2,4(r2)
     74c:	10800317 	ldw	r2,12(r2)
     750:	d0a02015 	stw	r2,-32640(gp)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     754:	d0a02017 	ldw	r2,-32640(gp)
     758:	10c00017 	ldw	r3,0(r2)
     75c:	d1202017 	ldw	r4,-32640(gp)
     760:	d0a02017 	ldw	r2,-32640(gp)
     764:	11400c17 	ldw	r5,48(r2)
     768:	183ee83a 	callr	r3

	return;
}
     76c:	e037883a 	mov	sp,fp
     770:	dfc00117 	ldw	ra,4(sp)
     774:	df000017 	ldw	fp,0(sp)
     778:	dec00204 	addi	sp,sp,8
     77c:	f800283a 	ret

00000780 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     790:	e03fff15 	stw	zero,-4(fp)
     794:	00000a06 	br	7c0 <prvInitialiseCoRoutineLists+0x40>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     798:	e0bfff17 	ldw	r2,-4(fp)
     79c:	10800524 	muli	r2,r2,20
     7a0:	1007883a 	mov	r3,r2
     7a4:	00820034 	movhi	r2,2048
     7a8:	108a6b04 	addi	r2,r2,10668
     7ac:	1889883a 	add	r4,r3,r2
     7b0:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7b4:	e0bfff17 	ldw	r2,-4(fp)
     7b8:	10800044 	addi	r2,r2,1
     7bc:	e0bfff15 	stw	r2,-4(fp)
     7c0:	e0bfff17 	ldw	r2,-4(fp)
     7c4:	108000b0 	cmpltui	r2,r2,2
     7c8:	103ff31e 	bne	r2,zero,798 <prvInitialiseCoRoutineLists+0x18>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     7cc:	01020034 	movhi	r4,2048
     7d0:	210a7504 	addi	r4,r4,10708
     7d4:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     7d8:	01020034 	movhi	r4,2048
     7dc:	210a7a04 	addi	r4,r4,10728
     7e0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     7e4:	01020034 	movhi	r4,2048
     7e8:	210a7f04 	addi	r4,r4,10748
     7ec:	00014040 	call	1404 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     7f0:	00820034 	movhi	r2,2048
     7f4:	108a7504 	addi	r2,r2,10708
     7f8:	d0a02515 	stw	r2,-32620(gp)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     7fc:	00820034 	movhi	r2,2048
     800:	108a7a04 	addi	r2,r2,10728
     804:	d0a02615 	stw	r2,-32616(gp)
}
     808:	e037883a 	mov	sp,fp
     80c:	dfc00117 	ldw	ra,4(sp)
     810:	df000017 	ldw	fp,0(sp)
     814:	dec00204 	addi	sp,sp,8
     818:	f800283a 	ret

0000081c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     81c:	defffb04 	addi	sp,sp,-20
     820:	dfc00415 	stw	ra,16(sp)
     824:	df000315 	stw	fp,12(sp)
     828:	df000304 	addi	fp,sp,12
     82c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10800317 	ldw	r2,12(r2)
     838:	10800317 	ldw	r2,12(r2)
     83c:	e0bffe15 	stw	r2,-8(fp)
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	11000604 	addi	r4,r2,24
     848:	00015f80 	call	15f8 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	11400604 	addi	r5,r2,24
     854:	01020034 	movhi	r4,2048
     858:	210a7f04 	addi	r4,r4,10748
     85c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     860:	e0bffe17 	ldw	r2,-8(fp)
     864:	10c00b17 	ldw	r3,44(r2)
     868:	d0a02017 	ldw	r2,-32640(gp)
     86c:	10800b17 	ldw	r2,44(r2)
     870:	18800336 	bltu	r3,r2,880 <xCoRoutineRemoveFromEventList+0x64>
	{
		xReturn = pdTRUE;
     874:	00800044 	movi	r2,1
     878:	e0bffd15 	stw	r2,-12(fp)
     87c:	00000106 	br	884 <xCoRoutineRemoveFromEventList+0x68>
	}
	else
	{
		xReturn = pdFALSE;
     880:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
     884:	e0bffd17 	ldw	r2,-12(fp)
}
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     89c:	defffd04 	addi	sp,sp,-12
     8a0:	dfc00215 	stw	ra,8(sp)
     8a4:	df000115 	stw	fp,4(sp)
     8a8:	df000104 	addi	fp,sp,4
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     8ac:	01000604 	movi	r4,24
     8b0:	0000fbc0 	call	fbc <pvPortMalloc>
     8b4:	e0bfff15 	stw	r2,-4(fp)
	if( pxEventBits != NULL )
     8b8:	e0bfff17 	ldw	r2,-4(fp)
     8bc:	1005003a 	cmpeq	r2,r2,zero
     8c0:	1000051e 	bne	r2,zero,8d8 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
     8c4:	e0bfff17 	ldw	r2,-4(fp)
     8c8:	10000015 	stw	zero,0(r2)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     8cc:	e0bfff17 	ldw	r2,-4(fp)
     8d0:	11000104 	addi	r4,r2,4
     8d4:	00014040 	call	1404 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
     8d8:	e0bfff17 	ldw	r2,-4(fp)
}
     8dc:	e037883a 	mov	sp,fp
     8e0:	dfc00117 	ldw	ra,4(sp)
     8e4:	df000017 	ldw	fp,0(sp)
     8e8:	dec00204 	addi	sp,sp,8
     8ec:	f800283a 	ret

000008f0 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     8f0:	defff504 	addi	sp,sp,-44
     8f4:	dfc00a15 	stw	ra,40(sp)
     8f8:	df000915 	stw	fp,36(sp)
     8fc:	df000904 	addi	fp,sp,36
     900:	e13ffc15 	stw	r4,-16(fp)
     904:	e17ffd15 	stw	r5,-12(fp)
     908:	e1bffe15 	stw	r6,-8(fp)
     90c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	e0bff915 	stw	r2,-28(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     918:	e03ff715 	stw	zero,-36(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     91c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     920:	e0bff917 	ldw	r2,-28(fp)
     924:	10800017 	ldw	r2,0(r2)
     928:	e0bffb15 	stw	r2,-20(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     92c:	e13ffc17 	ldw	r4,-16(fp)
     930:	e17ffd17 	ldw	r5,-12(fp)
     934:	0000cd80 	call	cd8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     938:	e0fffb17 	ldw	r3,-20(fp)
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	1886b03a 	or	r3,r3,r2
     944:	e0bffe17 	ldw	r2,-8(fp)
     948:	1886703a 	and	r3,r3,r2
     94c:	e0bffe17 	ldw	r2,-8(fp)
     950:	18800d1e 	bne	r3,r2,988 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     954:	e0fffb17 	ldw	r3,-20(fp)
     958:	e0bffd17 	ldw	r2,-12(fp)
     95c:	1884b03a 	or	r2,r3,r2
     960:	e0bffa15 	stw	r2,-24(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     964:	e0bff917 	ldw	r2,-28(fp)
     968:	10c00017 	ldw	r3,0(r2)
     96c:	e0bffe17 	ldw	r2,-8(fp)
     970:	0084303a 	nor	r2,zero,r2
     974:	1886703a 	and	r3,r3,r2
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
     980:	e03fff15 	stw	zero,-4(fp)
     984:	00000e06 	br	9c0 <xEventGroupSync+0xd0>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     988:	e0bfff17 	ldw	r2,-4(fp)
     98c:	1005003a 	cmpeq	r2,r2,zero
     990:	1000081e 	bne	r2,zero,9b4 <xEventGroupSync+0xc4>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     994:	e0bff917 	ldw	r2,-28(fp)
     998:	11000104 	addi	r4,r2,4
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	11414034 	orhi	r5,r2,1280
     9a4:	e1bfff17 	ldw	r6,-4(fp)
     9a8:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     9ac:	e03ffa15 	stw	zero,-24(fp)
     9b0:	00000306 	br	9c0 <xEventGroupSync+0xd0>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     9b4:	e0bff917 	ldw	r2,-28(fp)
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	e0bffa15 	stw	r2,-24(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     9c0:	00030180 	call	3018 <xTaskResumeAll>
     9c4:	e0bff815 	stw	r2,-32(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	1005003a 	cmpeq	r2,r2,zero
     9d0:	1000221e 	bne	r2,zero,a5c <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
     9d4:	e0bff817 	ldw	r2,-32(fp)
     9d8:	1004c03a 	cmpne	r2,r2,zero
     9dc:	1000011e 	bne	r2,zero,9e4 <xEventGroupSync+0xf4>
		{
			portYIELD_WITHIN_API();
     9e0:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     9e4:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     9e8:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     9ec:	e0bffa17 	ldw	r2,-24(fp)
     9f0:	1080802c 	andhi	r2,r2,512
     9f4:	1004c03a 	cmpne	r2,r2,zero
     9f8:	1000131e 	bne	r2,zero,a48 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     9fc:	00041140 	call	4114 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
     a00:	e0bff917 	ldw	r2,-28(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	e0bffa15 	stw	r2,-24(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a0c:	e0fffa17 	ldw	r3,-24(fp)
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	1886703a 	and	r3,r3,r2
     a18:	e0bffe17 	ldw	r2,-8(fp)
     a1c:	1880071e 	bne	r3,r2,a3c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10c00017 	ldw	r3,0(r2)
     a28:	e0bffe17 	ldw	r2,-8(fp)
     a2c:	0084303a 	nor	r2,zero,r2
     a30:	1886703a 	and	r3,r3,r2
     a34:	e0bff917 	ldw	r2,-28(fp)
     a38:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a3c:	00041680 	call	4168 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
     a40:	00800044 	movi	r2,1
     a44:	e0bff715 	stw	r2,-36(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a48:	e0bffa17 	ldw	r2,-24(fp)
     a4c:	00c04034 	movhi	r3,256
     a50:	18ffffc4 	addi	r3,r3,-1
     a54:	10c4703a 	and	r2,r2,r3
     a58:	e0bffa15 	stw	r2,-24(fp)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a5c:	e0bffa17 	ldw	r2,-24(fp)
}
     a60:	e037883a 	mov	sp,fp
     a64:	dfc00117 	ldw	ra,4(sp)
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00204 	addi	sp,sp,8
     a70:	f800283a 	ret

00000a74 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     a74:	defff304 	addi	sp,sp,-52
     a78:	dfc00c15 	stw	ra,48(sp)
     a7c:	df000b15 	stw	fp,44(sp)
     a80:	df000b04 	addi	fp,sp,44
     a84:	e13ffc15 	stw	r4,-16(fp)
     a88:	e17ffd15 	stw	r5,-12(fp)
     a8c:	e1bffe15 	stw	r6,-8(fp)
     a90:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	e0bffb15 	stw	r2,-20(fp)
EventBits_t uxReturn, uxControlBits = 0;
     a9c:	e03ff915 	stw	zero,-28(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     aa0:	e03ff615 	stw	zero,-40(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     aa4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     aa8:	e0bffb17 	ldw	r2,-20(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	e0bff515 	stw	r2,-44(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     ab4:	e13ff517 	ldw	r4,-44(fp)
     ab8:	e17ffd17 	ldw	r5,-12(fp)
     abc:	e1bfff17 	ldw	r6,-4(fp)
     ac0:	0000f440 	call	f44 <prvTestWaitCondition>
     ac4:	e0bff815 	stw	r2,-32(fp)

		if( xWaitConditionMet != pdFALSE )
     ac8:	e0bff817 	ldw	r2,-32(fp)
     acc:	1005003a 	cmpeq	r2,r2,zero
     ad0:	10000e1e 	bne	r2,zero,b0c <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     ad4:	e0bff517 	ldw	r2,-44(fp)
     ad8:	e0bffa15 	stw	r2,-24(fp)
			xTicksToWait = ( TickType_t ) 0;
     adc:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	1005003a 	cmpeq	r2,r2,zero
     ae8:	1000221e 	bne	r2,zero,b74 <xEventGroupWaitBits+0x100>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     aec:	e0bffb17 	ldw	r2,-20(fp)
     af0:	10c00017 	ldw	r3,0(r2)
     af4:	e0bffd17 	ldw	r2,-12(fp)
     af8:	0084303a 	nor	r2,zero,r2
     afc:	1886703a 	and	r3,r3,r2
     b00:	e0bffb17 	ldw	r2,-20(fp)
     b04:	10c00015 	stw	r3,0(r2)
     b08:	00001a06 	br	b74 <xEventGroupWaitBits+0x100>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     b0c:	e0800217 	ldw	r2,8(fp)
     b10:	1004c03a 	cmpne	r2,r2,zero
     b14:	1000031e 	bne	r2,zero,b24 <xEventGroupWaitBits+0xb0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     b18:	e0bff517 	ldw	r2,-44(fp)
     b1c:	e0bffa15 	stw	r2,-24(fp)
     b20:	00001406 	br	b74 <xEventGroupWaitBits+0x100>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     b24:	e0bffe17 	ldw	r2,-8(fp)
     b28:	1005003a 	cmpeq	r2,r2,zero
     b2c:	1000031e 	bne	r2,zero,b3c <xEventGroupWaitBits+0xc8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     b30:	e0bff917 	ldw	r2,-28(fp)
     b34:	10804034 	orhi	r2,r2,256
     b38:	e0bff915 	stw	r2,-28(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     b3c:	e0bfff17 	ldw	r2,-4(fp)
     b40:	1005003a 	cmpeq	r2,r2,zero
     b44:	1000031e 	bne	r2,zero,b54 <xEventGroupWaitBits+0xe0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     b48:	e0bff917 	ldw	r2,-28(fp)
     b4c:	10810034 	orhi	r2,r2,1024
     b50:	e0bff915 	stw	r2,-28(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     b54:	e0bffb17 	ldw	r2,-20(fp)
     b58:	11000104 	addi	r4,r2,4
     b5c:	e0fffd17 	ldw	r3,-12(fp)
     b60:	e0bff917 	ldw	r2,-28(fp)
     b64:	188ab03a 	or	r5,r3,r2
     b68:	e1800217 	ldw	r6,8(fp)
     b6c:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     b70:	e03ffa15 	stw	zero,-24(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     b74:	00030180 	call	3018 <xTaskResumeAll>
     b78:	e0bff715 	stw	r2,-36(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     b7c:	e0800217 	ldw	r2,8(fp)
     b80:	1005003a 	cmpeq	r2,r2,zero
     b84:	1000251e 	bne	r2,zero,c1c <xEventGroupWaitBits+0x1a8>
	{
		if( xAlreadyYielded == pdFALSE )
     b88:	e0bff717 	ldw	r2,-36(fp)
     b8c:	1004c03a 	cmpne	r2,r2,zero
     b90:	1000011e 	bne	r2,zero,b98 <xEventGroupWaitBits+0x124>
		{
			portYIELD_WITHIN_API();
     b94:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     b98:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     b9c:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     ba0:	e0bffa17 	ldw	r2,-24(fp)
     ba4:	1080802c 	andhi	r2,r2,512
     ba8:	1004c03a 	cmpne	r2,r2,zero
     bac:	1000161e 	bne	r2,zero,c08 <xEventGroupWaitBits+0x194>
		{
			taskENTER_CRITICAL();
     bb0:	00041140 	call	4114 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	10800017 	ldw	r2,0(r2)
     bbc:	e0bffa15 	stw	r2,-24(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     bc0:	e13ffa17 	ldw	r4,-24(fp)
     bc4:	e17ffd17 	ldw	r5,-12(fp)
     bc8:	e1bfff17 	ldw	r6,-4(fp)
     bcc:	0000f440 	call	f44 <prvTestWaitCondition>
     bd0:	1005003a 	cmpeq	r2,r2,zero
     bd4:	10000a1e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
				{
					if( xClearOnExit != pdFALSE )
     bd8:	e0bffe17 	ldw	r2,-8(fp)
     bdc:	1005003a 	cmpeq	r2,r2,zero
     be0:	1000071e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     be4:	e0bffb17 	ldw	r2,-20(fp)
     be8:	10c00017 	ldw	r3,0(r2)
     bec:	e0bffd17 	ldw	r2,-12(fp)
     bf0:	0084303a 	nor	r2,zero,r2
     bf4:	1886703a 	and	r3,r3,r2
     bf8:	e0bffb17 	ldw	r2,-20(fp)
     bfc:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     c00:	00041680 	call	4168 <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     c04:	e03ff615 	stw	zero,-40(fp)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     c08:	e0bffa17 	ldw	r2,-24(fp)
     c0c:	00c04034 	movhi	r3,256
     c10:	18ffffc4 	addi	r3,r3,-1
     c14:	10c4703a 	and	r2,r2,r3
     c18:	e0bffa15 	stw	r2,-24(fp)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     c1c:	e0bffa17 	ldw	r2,-24(fp)
}
     c20:	e037883a 	mov	sp,fp
     c24:	dfc00117 	ldw	ra,4(sp)
     c28:	df000017 	ldw	fp,0(sp)
     c2c:	dec00204 	addi	sp,sp,8
     c30:	f800283a 	ret

00000c34 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     c34:	defffa04 	addi	sp,sp,-24
     c38:	dfc00515 	stw	ra,20(sp)
     c3c:	df000415 	stw	fp,16(sp)
     c40:	df000404 	addi	fp,sp,16
     c44:	e13ffe15 	stw	r4,-8(fp)
     c48:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     c4c:	e0bffe17 	ldw	r2,-8(fp)
     c50:	e0bffd15 	stw	r2,-12(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     c54:	00041140 	call	4114 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     c58:	e0bffd17 	ldw	r2,-12(fp)
     c5c:	10800017 	ldw	r2,0(r2)
     c60:	e0bffc15 	stw	r2,-16(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	10c00017 	ldw	r3,0(r2)
     c6c:	e0bfff17 	ldw	r2,-4(fp)
     c70:	0084303a 	nor	r2,zero,r2
     c74:	1886703a 	and	r3,r3,r2
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
     c80:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
     c84:	e0bffc17 	ldw	r2,-16(fp)
}
     c88:	e037883a 	mov	sp,fp
     c8c:	dfc00117 	ldw	ra,4(sp)
     c90:	df000017 	ldw	fp,0(sp)
     c94:	dec00204 	addi	sp,sp,8
     c98:	f800283a 	ret

00000c9c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     c9c:	defffb04 	addi	sp,sp,-20
     ca0:	df000415 	stw	fp,16(sp)
     ca4:	df000404 	addi	fp,sp,16
     ca8:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	e0bffd15 	stw	r2,-12(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     cb4:	e03ffe15 	stw	zero,-8(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10800017 	ldw	r2,0(r2)
     cc0:	e0bffc15 	stw	r2,-16(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     cc4:	e0bffc17 	ldw	r2,-16(fp)
}
     cc8:	e037883a 	mov	sp,fp
     ccc:	df000017 	ldw	fp,0(sp)
     cd0:	dec00104 	addi	sp,sp,4
     cd4:	f800283a 	ret

00000cd8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cd8:	defff304 	addi	sp,sp,-52
     cdc:	dfc00c15 	stw	ra,48(sp)
     ce0:	df000b15 	stw	fp,44(sp)
     ce4:	df000b04 	addi	fp,sp,44
     ce8:	e13ffe15 	stw	r4,-8(fp)
     cec:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     cf0:	e03ff915 	stw	zero,-28(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cf4:	e0bffe17 	ldw	r2,-8(fp)
     cf8:	e0bff615 	stw	r2,-40(fp)
BaseType_t xMatchFound = pdFALSE;
     cfc:	e03ff515 	stw	zero,-44(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     d00:	e0bff617 	ldw	r2,-40(fp)
     d04:	10800104 	addi	r2,r2,4
     d08:	e0bffa15 	stw	r2,-24(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	10800204 	addi	r2,r2,8
     d14:	e0bffb15 	stw	r2,-20(fp)
	vTaskSuspendAll();
     d18:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     d1c:	e0bffa17 	ldw	r2,-24(fp)
     d20:	10800317 	ldw	r2,12(r2)
     d24:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     d28:	e0bff617 	ldw	r2,-40(fp)
     d2c:	10c00017 	ldw	r3,0(r2)
     d30:	e0bfff17 	ldw	r2,-4(fp)
     d34:	1886b03a 	or	r3,r3,r2
     d38:	e0bff617 	ldw	r2,-40(fp)
     d3c:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     d40:	00003606 	br	e1c <xEventGroupSetBits+0x144>
		{
			pxNext = listGET_NEXT( pxListItem );
     d44:	e0bffd17 	ldw	r2,-12(fp)
     d48:	10800117 	ldw	r2,4(r2)
     d4c:	e0bffc15 	stw	r2,-16(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800017 	ldw	r2,0(r2)
     d58:	e0bff815 	stw	r2,-32(fp)
			xMatchFound = pdFALSE;
     d5c:	e03ff515 	stw	zero,-44(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     d60:	e0bff817 	ldw	r2,-32(fp)
     d64:	10bfc02c 	andhi	r2,r2,65280
     d68:	e0bff715 	stw	r2,-36(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d6c:	e0fff817 	ldw	r3,-32(fp)
     d70:	00804034 	movhi	r2,256
     d74:	10bfffc4 	addi	r2,r2,-1
     d78:	1884703a 	and	r2,r3,r2
     d7c:	e0bff815 	stw	r2,-32(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d80:	e0bff717 	ldw	r2,-36(fp)
     d84:	1081002c 	andhi	r2,r2,1024
     d88:	1004c03a 	cmpne	r2,r2,zero
     d8c:	1000091e 	bne	r2,zero,db4 <xEventGroupSetBits+0xdc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     d90:	e0bff617 	ldw	r2,-40(fp)
     d94:	10c00017 	ldw	r3,0(r2)
     d98:	e0bff817 	ldw	r2,-32(fp)
     d9c:	1884703a 	and	r2,r3,r2
     da0:	1005003a 	cmpeq	r2,r2,zero
     da4:	10000b1e 	bne	r2,zero,dd4 <xEventGroupSetBits+0xfc>
				{
					xMatchFound = pdTRUE;
     da8:	00800044 	movi	r2,1
     dac:	e0bff515 	stw	r2,-44(fp)
     db0:	00000806 	br	dd4 <xEventGroupSetBits+0xfc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     db4:	e0bff617 	ldw	r2,-40(fp)
     db8:	10c00017 	ldw	r3,0(r2)
     dbc:	e0bff817 	ldw	r2,-32(fp)
     dc0:	1886703a 	and	r3,r3,r2
     dc4:	e0bff817 	ldw	r2,-32(fp)
     dc8:	1880021e 	bne	r3,r2,dd4 <xEventGroupSetBits+0xfc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     dcc:	00800044 	movi	r2,1
     dd0:	e0bff515 	stw	r2,-44(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     dd4:	e0bff517 	ldw	r2,-44(fp)
     dd8:	1005003a 	cmpeq	r2,r2,zero
     ddc:	10000d1e 	bne	r2,zero,e14 <xEventGroupSetBits+0x13c>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     de0:	e0bff717 	ldw	r2,-36(fp)
     de4:	1080402c 	andhi	r2,r2,256
     de8:	1005003a 	cmpeq	r2,r2,zero
     dec:	1000041e 	bne	r2,zero,e00 <xEventGroupSetBits+0x128>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     df0:	e0bff917 	ldw	r2,-28(fp)
     df4:	e0fff817 	ldw	r3,-32(fp)
     df8:	10c4b03a 	or	r2,r2,r3
     dfc:	e0bff915 	stw	r2,-28(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e00:	e0bff617 	ldw	r2,-40(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	11408034 	orhi	r5,r2,512
     e0c:	e13ffd17 	ldw	r4,-12(fp)
     e10:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     e14:	e0bffc17 	ldw	r2,-16(fp)
     e18:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     e1c:	e0fffd17 	ldw	r3,-12(fp)
     e20:	e0bffb17 	ldw	r2,-20(fp)
     e24:	18bfc71e 	bne	r3,r2,d44 <xEventGroupSetBits+0x6c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     e28:	e0bff617 	ldw	r2,-40(fp)
     e2c:	10c00017 	ldw	r3,0(r2)
     e30:	e0bff917 	ldw	r2,-28(fp)
     e34:	0084303a 	nor	r2,zero,r2
     e38:	1886703a 	and	r3,r3,r2
     e3c:	e0bff617 	ldw	r2,-40(fp)
     e40:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
     e44:	00030180 	call	3018 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     e48:	e0bff617 	ldw	r2,-40(fp)
     e4c:	10800017 	ldw	r2,0(r2)
}
     e50:	e037883a 	mov	sp,fp
     e54:	dfc00117 	ldw	ra,4(sp)
     e58:	df000017 	ldw	fp,0(sp)
     e5c:	dec00204 	addi	sp,sp,8
     e60:	f800283a 	ret

00000e64 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     e64:	defffb04 	addi	sp,sp,-20
     e68:	dfc00415 	stw	ra,16(sp)
     e6c:	df000315 	stw	fp,12(sp)
     e70:	df000304 	addi	fp,sp,12
     e74:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     e78:	e0bfff17 	ldw	r2,-4(fp)
     e7c:	e0bffe15 	stw	r2,-8(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	10800104 	addi	r2,r2,4
     e88:	e0bffd15 	stw	r2,-12(fp)

	vTaskSuspendAll();
     e8c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     e90:	00000406 	br	ea4 <vEventGroupDelete+0x40>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     e94:	e0bffd17 	ldw	r2,-12(fp)
     e98:	11000317 	ldw	r4,12(r2)
     e9c:	01408034 	movhi	r5,512
     ea0:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	1004c03a 	cmpne	r2,r2,zero
     eb0:	103ff81e 	bne	r2,zero,e94 <vEventGroupDelete+0x30>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
     eb4:	e13ffe17 	ldw	r4,-8(fp)
     eb8:	00011500 	call	1150 <vPortFree>
	}
	( void ) xTaskResumeAll();
     ebc:	00030180 	call	3018 <xTaskResumeAll>
}
     ec0:	e037883a 	mov	sp,fp
     ec4:	dfc00117 	ldw	ra,4(sp)
     ec8:	df000017 	ldw	fp,0(sp)
     ecc:	dec00204 	addi	sp,sp,8
     ed0:	f800283a 	ret

00000ed4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     ed4:	defffc04 	addi	sp,sp,-16
     ed8:	dfc00315 	stw	ra,12(sp)
     edc:	df000215 	stw	fp,8(sp)
     ee0:	df000204 	addi	fp,sp,8
     ee4:	e13ffe15 	stw	r4,-8(fp)
     ee8:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     eec:	e13ffe17 	ldw	r4,-8(fp)
     ef0:	e17fff17 	ldw	r5,-4(fp)
     ef4:	0000cd80 	call	cd8 <xEventGroupSetBits>
}
     ef8:	e037883a 	mov	sp,fp
     efc:	dfc00117 	ldw	ra,4(sp)
     f00:	df000017 	ldw	fp,0(sp)
     f04:	dec00204 	addi	sp,sp,8
     f08:	f800283a 	ret

00000f0c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     f0c:	defffc04 	addi	sp,sp,-16
     f10:	dfc00315 	stw	ra,12(sp)
     f14:	df000215 	stw	fp,8(sp)
     f18:	df000204 	addi	fp,sp,8
     f1c:	e13ffe15 	stw	r4,-8(fp)
     f20:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     f24:	e13ffe17 	ldw	r4,-8(fp)
     f28:	e17fff17 	ldw	r5,-4(fp)
     f2c:	0000c340 	call	c34 <xEventGroupClearBits>
}
     f30:	e037883a 	mov	sp,fp
     f34:	dfc00117 	ldw	ra,4(sp)
     f38:	df000017 	ldw	fp,0(sp)
     f3c:	dec00204 	addi	sp,sp,8
     f40:	f800283a 	ret

00000f44 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     f44:	defffb04 	addi	sp,sp,-20
     f48:	df000415 	stw	fp,16(sp)
     f4c:	df000404 	addi	fp,sp,16
     f50:	e13ffd15 	stw	r4,-12(fp)
     f54:	e17ffe15 	stw	r5,-8(fp)
     f58:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
     f5c:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
     f60:	e0bfff17 	ldw	r2,-4(fp)
     f64:	1004c03a 	cmpne	r2,r2,zero
     f68:	1000081e 	bne	r2,zero,f8c <prvTestWaitCondition+0x48>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f6c:	e0fffd17 	ldw	r3,-12(fp)
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	1884703a 	and	r2,r3,r2
     f78:	1005003a 	cmpeq	r2,r2,zero
     f7c:	10000a1e 	bne	r2,zero,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     f80:	00800044 	movi	r2,1
     f84:	e0bffc15 	stw	r2,-16(fp)
     f88:	00000706 	br	fa8 <prvTestWaitCondition+0x64>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     f8c:	e0fffd17 	ldw	r3,-12(fp)
     f90:	e0bffe17 	ldw	r2,-8(fp)
     f94:	1886703a 	and	r3,r3,r2
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	1880021e 	bne	r3,r2,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     fa0:	00800044 	movi	r2,1
     fa4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     fa8:	e0bffc17 	ldw	r2,-16(fp)
}
     fac:	e037883a 	mov	sp,fp
     fb0:	df000017 	ldw	fp,0(sp)
     fb4:	dec00104 	addi	sp,sp,4
     fb8:	f800283a 	ret

00000fbc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fbc:	defff904 	addi	sp,sp,-28
     fc0:	dfc00615 	stw	ra,24(sp)
     fc4:	df000515 	stw	fp,20(sp)
     fc8:	df000504 	addi	fp,sp,20
     fcc:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     fd0:	e03ffb15 	stw	zero,-20(fp)

        vTaskSuspendAll();
     fd4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
        {
                /* If this is the first call to malloc then the heap will require
                initialisation to setup the list of free blocks. */
                if( pxEnd == NULL )
     fd8:	d0a02717 	ldw	r2,-32612(gp)
     fdc:	1004c03a 	cmpne	r2,r2,zero
     fe0:	1000011e 	bne	r2,zero,fe8 <pvPortMalloc+0x2c>
                {
                        prvHeapInit();
     fe4:	000120c0 	call	120c <prvHeapInit>
                }

                /* The wanted size is increased so it can contain a xBlockLink
                structure in addition to the requested amount of bytes. */
                if( xWantedSize > 0 )
     fe8:	e0bfff17 	ldw	r2,-4(fp)
     fec:	1005003a 	cmpeq	r2,r2,zero
     ff0:	10000e1e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                {
                        xWantedSize += heapSTRUCT_SIZE;
     ff4:	d0a0000b 	ldhu	r2,-32768(gp)
     ff8:	10ffffcc 	andi	r3,r2,65535
     ffc:	e0bfff17 	ldw	r2,-4(fp)
    1000:	10c5883a 	add	r2,r2,r3
    1004:	e0bfff15 	stw	r2,-4(fp)

                        /* Ensure that blocks are always aligned to the required number of
                        bytes. */
                        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1008:	e0bfff17 	ldw	r2,-4(fp)
    100c:	108000cc 	andi	r2,r2,3
    1010:	1005003a 	cmpeq	r2,r2,zero
    1014:	1000051e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                        {
                                /* Byte alignment required. */
                                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1018:	e0ffff17 	ldw	r3,-4(fp)
    101c:	00bfff04 	movi	r2,-4
    1020:	1884703a 	and	r2,r3,r2
    1024:	10800104 	addi	r2,r2,4
    1028:	e0bfff15 	stw	r2,-4(fp)
                        }
                }

                if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
    102c:	e0bfff17 	ldw	r2,-4(fp)
    1030:	1005003a 	cmpeq	r2,r2,zero
    1034:	10003f1e 	bne	r2,zero,1134 <pvPortMalloc+0x178>
    1038:	d0e00117 	ldw	r3,-32764(gp)
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	10c03c2e 	bgeu	r2,r3,1134 <pvPortMalloc+0x178>
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
    1044:	d0a02804 	addi	r2,gp,-32608
    1048:	e0bffd15 	stw	r2,-12(fp)
                        pxBlock = xStart.pxNextFreeBlock;
    104c:	d0a02817 	ldw	r2,-32608(gp)
    1050:	e0bffe15 	stw	r2,-8(fp)
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1054:	00000506 	br	106c <pvPortMalloc+0xb0>
                        {
                                pxPreviousBlock = pxBlock;
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	e0bffd15 	stw	r2,-12(fp)
                                pxBlock = pxBlock->pxNextFreeBlock;
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10800017 	ldw	r2,0(r2)
    1068:	e0bffe15 	stw	r2,-8(fp)
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
                        pxBlock = xStart.pxNextFreeBlock;
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10c00117 	ldw	r3,4(r2)
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	1880042e 	bgeu	r3,r2,108c <pvPortMalloc+0xd0>
    107c:	e0bffe17 	ldw	r2,-8(fp)
    1080:	10800017 	ldw	r2,0(r2)
    1084:	1004c03a 	cmpne	r2,r2,zero
    1088:	103ff31e 	bne	r2,zero,1058 <pvPortMalloc+0x9c>
                                pxBlock = pxBlock->pxNextFreeBlock;
                        }

                        /* If the end marker was reached then a block of adequate size was
                        not found. */
                        if( pxBlock != pxEnd )
    108c:	d0e02717 	ldw	r3,-32612(gp)
    1090:	e0bffe17 	ldw	r2,-8(fp)
    1094:	10c02726 	beq	r2,r3,1134 <pvPortMalloc+0x178>
                        {
                                /* Return the memory space - jumping over the xBlockLink structure
                                at its start. */
                                pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1098:	e0bffd17 	ldw	r2,-12(fp)
    109c:	10800017 	ldw	r2,0(r2)
    10a0:	1007883a 	mov	r3,r2
    10a4:	d0a0000b 	ldhu	r2,-32768(gp)
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	1885883a 	add	r2,r3,r2
    10b0:	e0bffb15 	stw	r2,-20(fp)

                                /* This block is being returned for use so must be taken out of
                                the     list of free blocks. */
                                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10b4:	e0bffe17 	ldw	r2,-8(fp)
    10b8:	10c00017 	ldw	r3,0(r2)
    10bc:	e0bffd17 	ldw	r2,-12(fp)
    10c0:	10c00015 	stw	r3,0(r2)

                                /* If the block is larger than required it can be split into two. */
                                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10c4:	e0bffe17 	ldw	r2,-8(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1887c83a 	sub	r3,r3,r2
    10d4:	d0a0000b 	ldhu	r2,-32768(gp)
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c00f2e 	bgeu	r2,r3,1120 <pvPortMalloc+0x164>
                                {
                                        /* This block is to be split into two.  Create a new block
                                        following the number of bytes requested. The void cast is
                                        used to prevent byte alignment warnings from the compiler. */
                                        pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e4:	e0fffe17 	ldw	r3,-8(fp)
    10e8:	e0bfff17 	ldw	r2,-4(fp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	e0bffc15 	stw	r2,-16(fp)

                                        /* Calculate the sizes of two blocks split from the single
                                        block. */
                                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10f4:	e0bffe17 	ldw	r2,-8(fp)
    10f8:	10c00117 	ldw	r3,4(r2)
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1887c83a 	sub	r3,r3,r2
    1104:	e0bffc17 	ldw	r2,-16(fp)
    1108:	10c00115 	stw	r3,4(r2)
                                        pxBlock->xBlockSize = xWantedSize;
    110c:	e0fffe17 	ldw	r3,-8(fp)
    1110:	e0bfff17 	ldw	r2,-4(fp)
    1114:	18800115 	stw	r2,4(r3)

                                        /* Insert the new block into the list of free blocks. */
                                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1118:	e13ffc17 	ldw	r4,-16(fp)
    111c:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                                }

                                xFreeBytesRemaining -= pxBlock->xBlockSize;
    1120:	d0e00217 	ldw	r3,-32760(gp)
    1124:	e0bffe17 	ldw	r2,-8(fp)
    1128:	10800117 	ldw	r2,4(r2)
    112c:	1885c83a 	sub	r2,r3,r2
    1130:	d0a00215 	stw	r2,-32760(gp)
                        }
                }
        }
        xTaskResumeAll();
    1134:	00030180 	call	3018 <xTaskResumeAll>
                        vApplicationMallocFailedHook();
                }
        }
        #endif

        return pvReturn;
    1138:	e0bffb17 	ldw	r2,-20(fp)
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1150:	defffb04 	addi	sp,sp,-20
    1154:	dfc00415 	stw	ra,16(sp)
    1158:	df000315 	stw	fp,12(sp)
    115c:	df000304 	addi	fp,sp,12
    1160:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	e0bffe15 	stw	r2,-8(fp)
xBlockLink *pxLink;

        if( pv != NULL )
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	1005003a 	cmpeq	r2,r2,zero
    1174:	1000111e 	bne	r2,zero,11bc <vPortFree+0x6c>
        {
                /* The memory being freed will have an xBlockLink structure immediately
                before it. */
                puc -= heapSTRUCT_SIZE;
    1178:	d0a0000b 	ldhu	r2,-32768(gp)
    117c:	10bfffcc 	andi	r2,r2,65535
    1180:	1007883a 	mov	r3,r2
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10c5c83a 	sub	r2,r2,r3
    118c:	e0bffe15 	stw	r2,-8(fp)

                /* This casting is to keep the compiler from issuing warnings. */
                pxLink = ( void * ) puc;
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	e0bffd15 	stw	r2,-12(fp)

                vTaskSuspendAll();
    1198:	0002ff00 	call	2ff0 <vTaskSuspendAll>
                {
                        /* Add this block to the list of free blocks. */
                        xFreeBytesRemaining += pxLink->xBlockSize;
    119c:	e0bffd17 	ldw	r2,-12(fp)
    11a0:	10c00117 	ldw	r3,4(r2)
    11a4:	d0a00217 	ldw	r2,-32760(gp)
    11a8:	1885883a 	add	r2,r3,r2
    11ac:	d0a00215 	stw	r2,-32760(gp)
                        prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    11b0:	e13ffd17 	ldw	r4,-12(fp)
    11b4:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                }
                xTaskResumeAll();
    11b8:	00030180 	call	3018 <xTaskResumeAll>
        }
}
    11bc:	e037883a 	mov	sp,fp
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
    11cc:	f800283a 	ret

000011d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	df000015 	stw	fp,0(sp)
    11d8:	d839883a 	mov	fp,sp
        return xFreeBytesRemaining;
    11dc:	d0a00217 	ldw	r2,-32760(gp)
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	df000017 	ldw	fp,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	df000015 	stw	fp,0(sp)
    11f8:	d839883a 	mov	fp,sp
        /* This just exists to keep the linker quiet. */
}
    11fc:	e037883a 	mov	sp,fp
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00104 	addi	sp,sp,4
    1208:	f800283a 	ret

0000120c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    120c:	defffd04 	addi	sp,sp,-12
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
        /* Ensure the start of the heap is aligned. */
        configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

        /* xStart is used to hold a pointer to the first item in the list of free
        blocks.  The void cast is used to prevent compiler warnings. */
        xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
    1218:	00820034 	movhi	r2,2048
    121c:	108a8404 	addi	r2,r2,10768
    1220:	d0a02815 	stw	r2,-32608(gp)
        xStart.xBlockSize = ( size_t ) 0;
    1224:	00820034 	movhi	r2,2048
    1228:	108a3c04 	addi	r2,r2,10480
    122c:	10000015 	stw	zero,0(r2)

        /* pxEnd is used to mark the end of the list of free blocks and is inserted
        at the end of the heap space. */
        pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
    1230:	d0a00117 	ldw	r2,-32764(gp)
    1234:	1007883a 	mov	r3,r2
    1238:	00820034 	movhi	r2,2048
    123c:	108a8404 	addi	r2,r2,10768
    1240:	1885883a 	add	r2,r3,r2
    1244:	e0bffe15 	stw	r2,-8(fp)
        pucHeapEnd -= heapSTRUCT_SIZE;
    1248:	d0a0000b 	ldhu	r2,-32768(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	1007883a 	mov	r3,r2
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	10c5c83a 	sub	r2,r2,r3
    125c:	e0bffe15 	stw	r2,-8(fp)
        pxEnd = ( void * ) pucHeapEnd;
    1260:	e0bffe17 	ldw	r2,-8(fp)
    1264:	d0a02715 	stw	r2,-32612(gp)
        configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
        pxEnd->xBlockSize = 0;
    1268:	d0a02717 	ldw	r2,-32612(gp)
    126c:	10000115 	stw	zero,4(r2)
        pxEnd->pxNextFreeBlock = NULL;
    1270:	d0a02717 	ldw	r2,-32612(gp)
    1274:	10000015 	stw	zero,0(r2)

        /* To start with there is a single free block that is sized to take up the
        entire heap space, minus the space taken by pxEnd. */
        pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
    1278:	00820034 	movhi	r2,2048
    127c:	108a8404 	addi	r2,r2,10768
    1280:	e0bfff15 	stw	r2,-4(fp)
        pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
    1284:	d0e00117 	ldw	r3,-32764(gp)
    1288:	d0a0000b 	ldhu	r2,-32768(gp)
    128c:	10bfffcc 	andi	r2,r2,65535
    1290:	1887c83a 	sub	r3,r3,r2
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10c00115 	stw	r3,4(r2)
        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129c:	d0e02717 	ldw	r3,-32612(gp)
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00015 	stw	r3,0(r2)

        /* The heap now contains pxEnd. */
        xFreeBytesRemaining -= heapSTRUCT_SIZE;
    12a8:	d0e00217 	ldw	r3,-32760(gp)
    12ac:	d0a0000b 	ldhu	r2,-32768(gp)
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	d0a00215 	stw	r2,-32760(gp)
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	df000017 	ldw	fp,0(sp)
    12c4:	dec00104 	addi	sp,sp,4
    12c8:	f800283a 	ret

000012cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
    12cc:	defffc04 	addi	sp,sp,-16
    12d0:	df000315 	stw	fp,12(sp)
    12d4:	df000304 	addi	fp,sp,12
    12d8:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxIterator;
unsigned char *puc;

        /* Iterate through the list until a block is found that has a higher address
        than the block being inserted. */
        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12dc:	d0a02804 	addi	r2,gp,-32608
    12e0:	e0bffe15 	stw	r2,-8(fp)
    12e4:	00000306 	br	12f4 <prvInsertBlockIntoFreeList+0x28>
    12e8:	e0bffe17 	ldw	r2,-8(fp)
    12ec:	10800017 	ldw	r2,0(r2)
    12f0:	e0bffe15 	stw	r2,-8(fp)
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10c00017 	ldw	r3,0(r2)
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	18bff936 	bltu	r3,r2,12e8 <prvInsertBlockIntoFreeList+0x1c>
                /* Nothing to do here, just iterate to the right position. */
        }

        /* Do the block being inserted, and the block it is being inserted after
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxIterator;
    1304:	e0bffe17 	ldw	r2,-8(fp)
    1308:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	10800117 	ldw	r2,4(r2)
    1314:	1007883a 	mov	r3,r2
    1318:	e0bffd17 	ldw	r2,-12(fp)
    131c:	1887883a 	add	r3,r3,r2
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	1880091e 	bne	r3,r2,134c <prvInsertBlockIntoFreeList+0x80>
        {
                pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1328:	e0bffe17 	ldw	r2,-8(fp)
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800117 	ldw	r2,4(r2)
    1338:	1887883a 	add	r3,r3,r2
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	10c00115 	stw	r3,4(r2)
                pxBlockToInsert = pxIterator;
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Do the block being inserted, and the block it is being inserted before
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxBlockToInsert;
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10800117 	ldw	r2,4(r2)
    135c:	1007883a 	mov	r3,r2
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	1887883a 	add	r3,r3,r2
    1368:	e0bffe17 	ldw	r2,-8(fp)
    136c:	10800017 	ldw	r2,0(r2)
    1370:	1880161e 	bne	r3,r2,13cc <prvInsertBlockIntoFreeList+0x100>
        {
                if( pxIterator->pxNextFreeBlock != pxEnd )
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	10c00017 	ldw	r3,0(r2)
    137c:	d0a02717 	ldw	r2,-32612(gp)
    1380:	18800e26 	beq	r3,r2,13bc <prvInsertBlockIntoFreeList+0xf0>
                {
                        /* Form one big block from the two blocks. */
                        pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c00117 	ldw	r3,4(r2)
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	10800017 	ldw	r2,0(r2)
    1394:	10800117 	ldw	r2,4(r2)
    1398:	1887883a 	add	r3,r3,r2
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	10c00115 	stw	r3,4(r2)
                        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10800017 	ldw	r2,0(r2)
    13ac:	10c00017 	ldw	r3,0(r2)
    13b0:	e0bfff17 	ldw	r2,-4(fp)
    13b4:	10c00015 	stw	r3,0(r2)
    13b8:	00000806 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
                else
                {
                        pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13bc:	d0e02717 	ldw	r3,-32612(gp)
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10c00015 	stw	r3,0(r2)
    13c8:	00000406 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
        }
        else
        {
                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	10c00017 	ldw	r3,0(r2)
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10c00015 	stw	r3,0(r2)

        /* If the block being inserted plugged a gab, so was merged with the block
        before and the block after, then it's pxNextFreeBlock pointer will have
        already been set, and should not be set here as that would make it point
        to itself. */
        if( pxIterator != pxBlockToInsert )
    13dc:	e0fffe17 	ldw	r3,-8(fp)
    13e0:	e0bfff17 	ldw	r2,-4(fp)
    13e4:	18800326 	beq	r3,r2,13f4 <prvInsertBlockIntoFreeList+0x128>
        {
                pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e8:	e0fffe17 	ldw	r3,-8(fp)
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	18800015 	stw	r2,0(r3)
        }
}
    13f4:	e037883a 	mov	sp,fp
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00104 	addi	sp,sp,4
    1400:	f800283a 	ret

00001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1404:	defffe04 	addi	sp,sp,-8
    1408:	df000115 	stw	fp,4(sp)
    140c:	df000104 	addi	fp,sp,4
    1410:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	10800204 	addi	r2,r2,8
    141c:	1007883a 	mov	r3,r2
    1420:	e0bfff17 	ldw	r2,-4(fp)
    1424:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1428:	e0ffff17 	ldw	r3,-4(fp)
    142c:	00bfffc4 	movi	r2,-1
    1430:	18800215 	stw	r2,8(r3)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800204 	addi	r2,r2,8
    143c:	1007883a 	mov	r3,r2
    1440:	e0bfff17 	ldw	r2,-4(fp)
    1444:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10800204 	addi	r2,r2,8
    1450:	1007883a 	mov	r3,r2
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    145c:	e0bfff17 	ldw	r2,-4(fp)
    1460:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1464:	e037883a 	mov	sp,fp
    1468:	df000017 	ldw	fp,0(sp)
    146c:	dec00104 	addi	sp,sp,4
    1470:	f800283a 	ret

00001474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1474:	defffe04 	addi	sp,sp,-8
    1478:	df000115 	stw	fp,4(sp)
    147c:	df000104 	addi	fp,sp,4
    1480:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1484:	e0bfff17 	ldw	r2,-4(fp)
    1488:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    148c:	e037883a 	mov	sp,fp
    1490:	df000017 	ldw	fp,0(sp)
    1494:	dec00104 	addi	sp,sp,4
    1498:	f800283a 	ret

0000149c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    149c:	defffc04 	addi	sp,sp,-16
    14a0:	df000315 	stw	fp,12(sp)
    14a4:	df000304 	addi	fp,sp,12
    14a8:	e13ffe15 	stw	r4,-8(fp)
    14ac:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	10800117 	ldw	r2,4(r2)
    14b8:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14bc:	e0ffff17 	ldw	r3,-4(fp)
    14c0:	e0bffd17 	ldw	r2,-12(fp)
    14c4:	18800115 	stw	r2,4(r3)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c8:	e0bffd17 	ldw	r2,-12(fp)
    14cc:	10c00217 	ldw	r3,8(r2)
    14d0:	e0bfff17 	ldw	r2,-4(fp)
    14d4:	10c00215 	stw	r3,8(r2)
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	10c00217 	ldw	r3,8(r2)
    14e0:	e0bfff17 	ldw	r2,-4(fp)
    14e4:	18800115 	stw	r2,4(r3)
	pxIndex->pxPrevious = pxNewListItem;
    14e8:	e0fffd17 	ldw	r3,-12(fp)
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	18800215 	stw	r2,8(r3)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14f4:	e0ffff17 	ldw	r3,-4(fp)
    14f8:	e0bffe17 	ldw	r2,-8(fp)
    14fc:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	10800017 	ldw	r2,0(r2)
    1508:	10c00044 	addi	r3,r2,1
    150c:	e0bffe17 	ldw	r2,-8(fp)
    1510:	10c00015 	stw	r3,0(r2)
}
    1514:	e037883a 	mov	sp,fp
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	defffb04 	addi	sp,sp,-20
    1528:	df000415 	stw	fp,16(sp)
    152c:	df000404 	addi	fp,sp,16
    1530:	e13ffe15 	stw	r4,-8(fp)
    1534:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	e0bffc15 	stw	r2,-16(fp)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1544:	e0bffc17 	ldw	r2,-16(fp)
    1548:	10bfffd8 	cmpnei	r2,r2,-1
    154c:	1000041e 	bne	r2,zero,1560 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800417 	ldw	r2,16(r2)
    1558:	e0bffd15 	stw	r2,-12(fp)
    155c:	00000c06 	br	1590 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10800204 	addi	r2,r2,8
    1568:	e0bffd15 	stw	r2,-12(fp)
    156c:	00000306 	br	157c <vListInsert+0x58>
    1570:	e0bffd17 	ldw	r2,-12(fp)
    1574:	10800117 	ldw	r2,4(r2)
    1578:	e0bffd15 	stw	r2,-12(fp)
    157c:	e0bffd17 	ldw	r2,-12(fp)
    1580:	10800117 	ldw	r2,4(r2)
    1584:	10c00017 	ldw	r3,0(r2)
    1588:	e0bffc17 	ldw	r2,-16(fp)
    158c:	10fff82e 	bgeu	r2,r3,1570 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1590:	e0bffd17 	ldw	r2,-12(fp)
    1594:	10c00117 	ldw	r3,4(r2)
    1598:	e0bfff17 	ldw	r2,-4(fp)
    159c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c00117 	ldw	r3,4(r2)
    15a8:	e0bfff17 	ldw	r2,-4(fp)
    15ac:	18800215 	stw	r2,8(r3)
	pxNewListItem->pxPrevious = pxIterator;
    15b0:	e0ffff17 	ldw	r3,-4(fp)
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	18800215 	stw	r2,8(r3)
	pxIterator->pxNext = pxNewListItem;
    15bc:	e0fffd17 	ldw	r3,-12(fp)
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	18800115 	stw	r2,4(r3)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15c8:	e0ffff17 	ldw	r3,-4(fp)
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	10c00044 	addi	r3,r2,1
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00015 	stw	r3,0(r2)
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	df000017 	ldw	fp,0(sp)
    15f0:	dec00104 	addi	sp,sp,4
    15f4:	f800283a 	ret

000015f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15f8:	defffd04 	addi	sp,sp,-12
    15fc:	df000215 	stw	fp,8(sp)
    1600:	df000204 	addi	fp,sp,8
    1604:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	10800417 	ldw	r2,16(r2)
    1610:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1614:	e0bfff17 	ldw	r2,-4(fp)
    1618:	10c00117 	ldw	r3,4(r2)
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	10800217 	ldw	r2,8(r2)
    1624:	18800215 	stw	r2,8(r3)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1628:	e0bfff17 	ldw	r2,-4(fp)
    162c:	10c00217 	ldw	r3,8(r2)
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	10800117 	ldw	r2,4(r2)
    1638:	18800115 	stw	r2,4(r3)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	10c00117 	ldw	r3,4(r2)
    1644:	e0bfff17 	ldw	r2,-4(fp)
    1648:	1880041e 	bne	r3,r2,165c <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    164c:	e0bfff17 	ldw	r2,-4(fp)
    1650:	10c00217 	ldw	r3,8(r2)
    1654:	e0bffe17 	ldw	r2,-8(fp)
    1658:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    165c:	e0bfff17 	ldw	r2,-4(fp)
    1660:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	10800017 	ldw	r2,0(r2)
    166c:	10ffffc4 	addi	r3,r2,-1
    1670:	e0bffe17 	ldw	r2,-8(fp)
    1674:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10800017 	ldw	r2,0(r2)
}
    1680:	e037883a 	mov	sp,fp
    1684:	df000017 	ldw	fp,0(sp)
    1688:	dec00104 	addi	sp,sp,4
    168c:	f800283a 	ret

00001690 <vApplicationStackOverflowHook>:
#define configTICK_RATE_HZ 1000
#define configCPU_CLOCK_HZ TIMER1MS_FREQ
#define SYS_CLK_IRQ TIMER1MS_IRQ
//stack overflow hook
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName )
{
    1690:	defffc04 	addi	sp,sp,-16
    1694:	dfc00315 	stw	ra,12(sp)
    1698:	df000215 	stw	fp,8(sp)
    169c:	df000204 	addi	fp,sp,8
    16a0:	e13ffe15 	stw	r4,-8(fp)
    16a4:	e17fff15 	stw	r5,-4(fp)
	printf("[free_rtos] Application stack overflow at task: %s\n", pcTaskName);
    16a8:	01020034 	movhi	r4,2048
    16ac:	21000004 	addi	r4,r4,0
    16b0:	e17fff17 	ldw	r5,-4(fp)
    16b4:	00081ac0 	call	81ac <printf>
}
    16b8:	e037883a 	mov	sp,fp
    16bc:	dfc00117 	ldw	ra,4(sp)
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00204 	addi	sp,sp,8
    16c8:	f800283a 	ret

000016cc <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
    16cc:	defffe04 	addi	sp,sp,-8
    16d0:	df000115 	stw	fp,4(sp)
    16d4:	df000104 	addi	fp,sp,4
    16d8:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	16800015 	stw	gp,0(r2)
}
    16e4:	e037883a 	mov	sp,fp
    16e8:	df000017 	ldw	fp,0(sp)
    16ec:	dec00104 	addi	sp,sp,4
    16f0:	f800283a 	ret

000016f4 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
    16f4:	defff904 	addi	sp,sp,-28
    16f8:	dfc00615 	stw	ra,24(sp)
    16fc:	df000515 	stw	fp,20(sp)
    1700:	df000504 	addi	fp,sp,20
    1704:	e13ffd15 	stw	r4,-12(fp)
    1708:	e17ffe15 	stw	r5,-8(fp)
    170c:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
    1710:	e0bffd17 	ldw	r2,-12(fp)
    1714:	10bfff04 	addi	r2,r2,-4
    1718:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
    171c:	e13ffc04 	addi	r4,fp,-16
    1720:	00016cc0 	call	16cc <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    1724:	e0fffd17 	ldw	r3,-12(fp)
    1728:	00b7abb4 	movhi	r2,57006
    172c:	10afbbc4 	addi	r2,r2,-16657
    1730:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
    1734:	e0bffd17 	ldw	r2,-12(fp)
    1738:	10bfff04 	addi	r2,r2,-4
    173c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
    1740:	e0bffb17 	ldw	r2,-20(fp)
    1744:	1007883a 	mov	r3,r2
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1750:	e0bffd17 	ldw	r2,-12(fp)
    1754:	10bfff04 	addi	r2,r2,-4
    1758:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
    175c:	e0fffc17 	ldw	r3,-16(fp)
    1760:	e0bffd17 	ldw	r2,-12(fp)
    1764:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
    1768:	e0bffd17 	ldw	r2,-12(fp)
    176c:	10bff704 	addi	r2,r2,-36
    1770:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
    1774:	e0bffe17 	ldw	r2,-8(fp)
    1778:	1007883a 	mov	r3,r2
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	10bfff04 	addi	r2,r2,-4
    178c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
    1790:	e0fffd17 	ldw	r3,-12(fp)
    1794:	00800044 	movi	r2,1
    1798:	18800015 	stw	r2,0(r3)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
    179c:	e0bffd17 	ldw	r2,-12(fp)
    17a0:	10bff404 	addi	r2,r2,-48
    17a4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	1007883a 	mov	r3,r2
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
    17b8:	e0bffd17 	ldw	r2,-12(fp)
    17bc:	10bffb04 	addi	r2,r2,-20
    17c0:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
    17c4:	e0bffd17 	ldw	r2,-12(fp)
}
    17c8:	e037883a 	mov	sp,fp
    17cc:	dfc00117 	ldw	ra,4(sp)
    17d0:	df000017 	ldw	fp,0(sp)
    17d4:	dec00204 	addi	sp,sp,8
    17d8:	f800283a 	ret

000017dc <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
    17dc:	defffe04 	addi	sp,sp,-8
    17e0:	dfc00115 	stw	ra,4(sp)
    17e4:	df000015 	stw	fp,0(sp)
    17e8:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    17ec:	00018300 	call	1830 <prvSetupTimerInterrupt>
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
    17f0:	00800034 	movhi	r2,0
    17f4:	10803104 	addi	r2,r2,196
    17f8:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
    17fc:	0005883a 	mov	r2,zero
}
    1800:	e037883a 	mov	sp,fp
    1804:	dfc00117 	ldw	ra,4(sp)
    1808:	df000017 	ldw	fp,0(sp)
    180c:	dec00204 	addi	sp,sp,8
    1810:	f800283a 	ret

00001814 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1814:	deffff04 	addi	sp,sp,-4
    1818:	df000015 	stw	fp,0(sp)
    181c:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
    1820:	e037883a 	mov	sp,fp
    1824:	df000017 	ldw	fp,0(sp)
    1828:	dec00104 	addi	sp,sp,4
    182c:	f800283a 	ret

00001830 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1830:	defffe04 	addi	sp,sp,-8
    1834:	dfc00115 	stw	ra,4(sp)
    1838:	df000015 	stw	fp,0(sp)
    183c:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
    1840:	0009883a 	mov	r4,zero
    1844:	000b883a 	mov	r5,zero
    1848:	01800034 	movhi	r6,0
    184c:	31863204 	addi	r6,r6,6344
    1850:	00019140 	call	1914 <alt_irq_register>
    1854:	10bffa98 	cmpnei	r2,r2,-22
    1858:	1000021e 	bne	r2,zero,1864 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
    185c:	003da03a 	break	0
    1860:	00001006 	br	18a4 <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
    1864:	00c00134 	movhi	r3,4
    1868:	18cc1104 	addi	r3,r3,12356
    186c:	00800204 	movi	r2,8
    1870:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
    1874:	00c00134 	movhi	r3,4
    1878:	18cc1204 	addi	r3,r3,12360
    187c:	00a1a814 	movui	r2,34464
    1880:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
    1884:	00c00134 	movhi	r3,4
    1888:	18cc1304 	addi	r3,r3,12364
    188c:	00800044 	movi	r2,1
    1890:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
    1894:	00c00134 	movhi	r3,4
    1898:	18cc1104 	addi	r3,r3,12356
    189c:	008001c4 	movi	r2,7
    18a0:	18800035 	stwio	r2,0(r3)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18a4:	00c00134 	movhi	r3,4
    18a8:	18cc1004 	addi	r3,r3,12352
    18ac:	00bfff84 	movi	r2,-2
    18b0:	18800035 	stwio	r2,0(r3)
}
    18b4:	e037883a 	mov	sp,fp
    18b8:	dfc00117 	ldw	ra,4(sp)
    18bc:	df000017 	ldw	fp,0(sp)
    18c0:	dec00204 	addi	sp,sp,8
    18c4:	f800283a 	ret

000018c8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
    18c8:	defffc04 	addi	sp,sp,-16
    18cc:	dfc00315 	stw	ra,12(sp)
    18d0:	df000215 	stw	fp,8(sp)
    18d4:	df000204 	addi	fp,sp,8
    18d8:	e13ffe15 	stw	r4,-8(fp)
    18dc:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
    18e0:	00031dc0 	call	31dc <xTaskIncrementTick>
    18e4:	1005003a 	cmpeq	r2,r2,zero
    18e8:	1000011e 	bne	r2,zero,18f0 <vPortSysTickHandler+0x28>
	{
        vTaskSwitchContext();
    18ec:	00033b80 	call	33b8 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18f0:	00c00134 	movhi	r3,4
    18f4:	18cc1004 	addi	r3,r3,12352
    18f8:	00bfff84 	movi	r2,-2
    18fc:	18800035 	stwio	r2,0(r3)
}
    1900:	e037883a 	mov	sp,fp
    1904:	dfc00117 	ldw	ra,4(sp)
    1908:	df000017 	ldw	fp,0(sp)
    190c:	dec00204 	addi	sp,sp,8
    1910:	f800283a 	ret

00001914 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
    1914:	defff004 	addi	sp,sp,-64
    1918:	df000f15 	stw	fp,60(sp)
    191c:	df000f04 	addi	fp,sp,60
    1920:	e13ffc15 	stw	r4,-16(fp)
    1924:	e17ffd15 	stw	r5,-12(fp)
    1928:	e1bffe15 	stw	r6,-8(fp)
	int rc = -EINVAL;  
    192c:	00bffa84 	movi	r2,-22
    1930:	e0bffb15 	stw	r2,-20(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
    1934:	e0bffc17 	ldw	r2,-16(fp)
    1938:	10800828 	cmpgeui	r2,r2,32
    193c:	10005c1e 	bne	r2,zero,1ab0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1940:	0005303a 	rdctl	r2,status
    1944:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1948:	e0fff917 	ldw	r3,-28(fp)
    194c:	00bfff84 	movi	r2,-2
    1950:	1884703a 	and	r2,r3,r2
    1954:	1001703a 	wrctl	status,r2
  
  return context;
    1958:	e0bff917 	ldw	r2,-28(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all ();
    195c:	e0bffa15 	stw	r2,-24(fp)
	
		alt_irq[id].handler = handler;
    1960:	e0bffc17 	ldw	r2,-16(fp)
    1964:	00c20234 	movhi	r3,2056
    1968:	18c0d404 	addi	r3,r3,848
    196c:	100490fa 	slli	r2,r2,3
    1970:	10c7883a 	add	r3,r2,r3
    1974:	e0bffe17 	ldw	r2,-8(fp)
    1978:	18800015 	stw	r2,0(r3)
		alt_irq[id].context = context;
    197c:	e0bffc17 	ldw	r2,-16(fp)
    1980:	00c20234 	movhi	r3,2056
    1984:	18c0d404 	addi	r3,r3,848
    1988:	100490fa 	slli	r2,r2,3
    198c:	10c5883a 	add	r2,r2,r3
    1990:	10c00104 	addi	r3,r2,4
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	18800015 	stw	r2,0(r3)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    199c:	e0bffe17 	ldw	r2,-8(fp)
    19a0:	1005003a 	cmpeq	r2,r2,zero
    19a4:	1000201e 	bne	r2,zero,1a28 <alt_irq_register+0x114>
    19a8:	e0bffc17 	ldw	r2,-16(fp)
    19ac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19b0:	0005303a 	rdctl	r2,status
    19b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19b8:	e0fff617 	ldw	r3,-40(fp)
    19bc:	00bfff84 	movi	r2,-2
    19c0:	1884703a 	and	r2,r3,r2
    19c4:	1001703a 	wrctl	status,r2
  
  return context;
    19c8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    19cc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    19d0:	e0fff717 	ldw	r3,-36(fp)
    19d4:	00800044 	movi	r2,1
    19d8:	10c4983a 	sll	r2,r2,r3
    19dc:	1007883a 	mov	r3,r2
    19e0:	00820034 	movhi	r2,2048
    19e4:	108a6504 	addi	r2,r2,10644
    19e8:	10800017 	ldw	r2,0(r2)
    19ec:	1886b03a 	or	r3,r3,r2
    19f0:	00820034 	movhi	r2,2048
    19f4:	108a6504 	addi	r2,r2,10644
    19f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19fc:	00820034 	movhi	r2,2048
    1a00:	108a6504 	addi	r2,r2,10644
    1a04:	10800017 	ldw	r2,0(r2)
    1a08:	100170fa 	wrctl	ienable,r2
    1a0c:	e0bff817 	ldw	r2,-32(fp)
    1a10:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a14:	e0bff517 	ldw	r2,-44(fp)
    1a18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a1c:	0005883a 	mov	r2,zero
    1a20:	e0bfff15 	stw	r2,-4(fp)
    1a24:	00002006 	br	1aa8 <alt_irq_register+0x194>
    1a28:	e0bffc17 	ldw	r2,-16(fp)
    1a2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a30:	0005303a 	rdctl	r2,status
    1a34:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a38:	e0fff217 	ldw	r3,-56(fp)
    1a3c:	00bfff84 	movi	r2,-2
    1a40:	1884703a 	and	r2,r3,r2
    1a44:	1001703a 	wrctl	status,r2
  
  return context;
    1a48:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a4c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    1a50:	e0fff317 	ldw	r3,-52(fp)
    1a54:	00800044 	movi	r2,1
    1a58:	10c4983a 	sll	r2,r2,r3
    1a5c:	0084303a 	nor	r2,zero,r2
    1a60:	1007883a 	mov	r3,r2
    1a64:	00820034 	movhi	r2,2048
    1a68:	108a6504 	addi	r2,r2,10644
    1a6c:	10800017 	ldw	r2,0(r2)
    1a70:	1886703a 	and	r3,r3,r2
    1a74:	00820034 	movhi	r2,2048
    1a78:	108a6504 	addi	r2,r2,10644
    1a7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a80:	00820034 	movhi	r2,2048
    1a84:	108a6504 	addi	r2,r2,10644
    1a88:	10800017 	ldw	r2,0(r2)
    1a8c:	100170fa 	wrctl	ienable,r2
    1a90:	e0bff417 	ldw	r2,-48(fp)
    1a94:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a98:	e0bff117 	ldw	r2,-60(fp)
    1a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1aa0:	0005883a 	mov	r2,zero
    1aa4:	e0bfff15 	stw	r2,-4(fp)
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	e0bffb15 	stw	r2,-20(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
    1ab0:	e0bffb17 	ldw	r2,-20(fp)
}
    1ab4:	e037883a 	mov	sp,fp
    1ab8:	df000017 	ldw	fp,0(sp)
    1abc:	dec00104 	addi	sp,sp,4
    1ac0:	f800283a 	ret

00001ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1ac4:	defffb04 	addi	sp,sp,-20
    1ac8:	dfc00415 	stw	ra,16(sp)
    1acc:	df000315 	stw	fp,12(sp)
    1ad0:	df000304 	addi	fp,sp,12
    1ad4:	e13ffe15 	stw	r4,-8(fp)
    1ad8:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1adc:	e0bffe17 	ldw	r2,-8(fp)
    1ae0:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1ae4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ae8:	e0bffd17 	ldw	r2,-12(fp)
    1aec:	11000017 	ldw	r4,0(r2)
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10c00f17 	ldw	r3,60(r2)
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	10801017 	ldw	r2,64(r2)
    1b00:	1885383a 	mul	r2,r3,r2
    1b04:	2087883a 	add	r3,r4,r2
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10c00115 	stw	r3,4(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1b18:	e0bffd17 	ldw	r2,-12(fp)
    1b1c:	10c00017 	ldw	r3,0(r2)
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	10c00215 	stw	r3,8(r2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1b28:	e0bffd17 	ldw	r2,-12(fp)
    1b2c:	11000017 	ldw	r4,0(r2)
    1b30:	e0bffd17 	ldw	r2,-12(fp)
    1b34:	10800f17 	ldw	r2,60(r2)
    1b38:	10ffffc4 	addi	r3,r2,-1
    1b3c:	e0bffd17 	ldw	r2,-12(fp)
    1b40:	10801017 	ldw	r2,64(r2)
    1b44:	1885383a 	mul	r2,r3,r2
    1b48:	2087883a 	add	r3,r4,r2
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10c00315 	stw	r3,12(r2)
		pxQueue->xRxLock = queueUNLOCKED;
    1b54:	e0fffd17 	ldw	r3,-12(fp)
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	18801115 	stw	r2,68(r3)
		pxQueue->xTxLock = queueUNLOCKED;
    1b60:	e0fffd17 	ldw	r3,-12(fp)
    1b64:	00bfffc4 	movi	r2,-1
    1b68:	18801215 	stw	r2,72(r3)

		if( xNewQueue == pdFALSE )
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
    1b70:	1004c03a 	cmpne	r2,r2,zero
    1b74:	10000b1e 	bne	r2,zero,1ba4 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	10800417 	ldw	r2,16(r2)
    1b80:	1005003a 	cmpeq	r2,r2,zero
    1b84:	10000d1e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1b88:	e0bffd17 	ldw	r2,-12(fp)
    1b8c:	11000404 	addi	r4,r2,16
    1b90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1b94:	10800058 	cmpnei	r2,r2,1
    1b98:	1000081e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1b9c:	003b683a 	trap	0
    1ba0:	00000606 	br	1bbc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1ba4:	e0bffd17 	ldw	r2,-12(fp)
    1ba8:	11000404 	addi	r4,r2,16
    1bac:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	11000904 	addi	r4,r2,36
    1bb8:	00014040 	call	1404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1bbc:	00041680 	call	4168 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1bc0:	00800044 	movi	r2,1
}
    1bc4:	e037883a 	mov	sp,fp
    1bc8:	dfc00117 	ldw	ra,4(sp)
    1bcc:	df000017 	ldw	fp,0(sp)
    1bd0:	dec00204 	addi	sp,sp,8
    1bd4:	f800283a 	ret

00001bd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1bd8:	defff704 	addi	sp,sp,-36
    1bdc:	dfc00815 	stw	ra,32(sp)
    1be0:	df000715 	stw	fp,28(sp)
    1be4:	df000704 	addi	fp,sp,28
    1be8:	e13ffd15 	stw	r4,-12(fp)
    1bec:	e17ffe15 	stw	r5,-8(fp)
    1bf0:	e1bfff05 	stb	r6,-4(fp)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    1bf4:	e03ffa15 	stw	zero,-24(fp)
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    1bf8:	e0bffe17 	ldw	r2,-8(fp)
    1bfc:	1004c03a 	cmpne	r2,r2,zero
    1c00:	1000021e 	bne	r2,zero,1c0c <xQueueGenericCreate+0x34>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
    1c04:	e03ffb15 	stw	zero,-20(fp)
    1c08:	00000506 	br	1c20 <xQueueGenericCreate+0x48>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c0c:	e0fffd17 	ldw	r3,-12(fp)
    1c10:	e0bffe17 	ldw	r2,-8(fp)
    1c14:	1885383a 	mul	r2,r3,r2
    1c18:	10800044 	addi	r2,r2,1
    1c1c:	e0bffb15 	stw	r2,-20(fp)
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1c20:	e0bffb17 	ldw	r2,-20(fp)
    1c24:	11001304 	addi	r4,r2,76
    1c28:	0000fbc0 	call	fbc <pvPortMalloc>
    1c2c:	e0bff915 	stw	r2,-28(fp)

	if( pcAllocatedBuffer != NULL )
    1c30:	e0bff917 	ldw	r2,-28(fp)
    1c34:	1005003a 	cmpeq	r2,r2,zero
    1c38:	1000181e 	bne	r2,zero,1c9c <xQueueGenericCreate+0xc4>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
    1c3c:	e0bff917 	ldw	r2,-28(fp)
    1c40:	e0bffc15 	stw	r2,-16(fp)

		if( uxItemSize == ( UBaseType_t ) 0 )
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	1004c03a 	cmpne	r2,r2,zero
    1c4c:	1000041e 	bne	r2,zero,1c60 <xQueueGenericCreate+0x88>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1c50:	e0fffc17 	ldw	r3,-16(fp)
    1c54:	e0bffc17 	ldw	r2,-16(fp)
    1c58:	10c00015 	stw	r3,0(r2)
    1c5c:	00000406 	br	1c70 <xQueueGenericCreate+0x98>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
    1c60:	e0bff917 	ldw	r2,-28(fp)
    1c64:	10c01304 	addi	r3,r2,76
    1c68:	e0bffc17 	ldw	r2,-16(fp)
    1c6c:	10c00015 	stw	r3,0(r2)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    1c70:	e0fffc17 	ldw	r3,-16(fp)
    1c74:	e0bffd17 	ldw	r2,-12(fp)
    1c78:	18800f15 	stw	r2,60(r3)
		pxNewQueue->uxItemSize = uxItemSize;
    1c7c:	e0fffc17 	ldw	r3,-16(fp)
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	18801015 	stw	r2,64(r3)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1c88:	e13ffc17 	ldw	r4,-16(fp)
    1c8c:	01400044 	movi	r5,1
    1c90:	0001ac40 	call	1ac4 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    1c94:	e0bffc17 	ldw	r2,-16(fp)
    1c98:	e0bffa15 	stw	r2,-24(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    1c9c:	e0bffa17 	ldw	r2,-24(fp)
}
    1ca0:	e037883a 	mov	sp,fp
    1ca4:	dfc00117 	ldw	ra,4(sp)
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00204 	addi	sp,sp,8
    1cb0:	f800283a 	ret

00001cb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1cb4:	defffc04 	addi	sp,sp,-16
    1cb8:	dfc00315 	stw	ra,12(sp)
    1cbc:	df000215 	stw	fp,8(sp)
    1cc0:	df000204 	addi	fp,sp,8
    1cc4:	e13fff05 	stb	r4,-4(fp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1cc8:	01001304 	movi	r4,76
    1ccc:	0000fbc0 	call	fbc <pvPortMalloc>
    1cd0:	e0bffe15 	stw	r2,-8(fp)
		if( pxNewQueue != NULL )
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	1005003a 	cmpeq	r2,r2,zero
    1cdc:	1000201e 	bne	r2,zero,1d60 <xQueueCreateMutex+0xac>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1cf0:	e0bffe17 	ldw	r2,-8(fp)
    1cf4:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1d08:	e0fffe17 	ldw	r3,-8(fp)
    1d0c:	00800044 	movi	r2,1
    1d10:	18800f15 	stw	r2,60(r3)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
    1d1c:	e0fffe17 	ldw	r3,-8(fp)
    1d20:	00bfffc4 	movi	r2,-1
    1d24:	18801115 	stw	r2,68(r3)
			pxNewQueue->xTxLock = queueUNLOCKED;
    1d28:	e0fffe17 	ldw	r3,-8(fp)
    1d2c:	00bfffc4 	movi	r2,-1
    1d30:	18801215 	stw	r2,72(r3)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d34:	e0bffe17 	ldw	r2,-8(fp)
    1d38:	11000404 	addi	r4,r2,16
    1d3c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d40:	e0bffe17 	ldw	r2,-8(fp)
    1d44:	11000904 	addi	r4,r2,36
    1d48:	00014040 	call	1404 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1d4c:	e13ffe17 	ldw	r4,-8(fp)
    1d50:	000b883a 	mov	r5,zero
    1d54:	000d883a 	mov	r6,zero
    1d58:	000f883a 	mov	r7,zero
    1d5c:	0001f100 	call	1f10 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1d60:	e0bffe17 	ldw	r2,-8(fp)
	}
    1d64:	e037883a 	mov	sp,fp
    1d68:	dfc00117 	ldw	ra,4(sp)
    1d6c:	df000017 	ldw	fp,0(sp)
    1d70:	dec00204 	addi	sp,sp,8
    1d74:	f800283a 	ret

00001d78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    1d78:	defffa04 	addi	sp,sp,-24
    1d7c:	dfc00515 	stw	ra,20(sp)
    1d80:	df000415 	stw	fp,16(sp)
    1d84:	dc000315 	stw	r16,12(sp)
    1d88:	df000304 	addi	fp,sp,12
    1d8c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1d90:	e0bfff17 	ldw	r2,-4(fp)
    1d94:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	14000117 	ldw	r16,4(r2)
    1da0:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1da4:	8080111e 	bne	r16,r2,1dec <xQueueGiveMutexRecursive+0x74>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    1da8:	e0bffd17 	ldw	r2,-12(fp)
    1dac:	10800317 	ldw	r2,12(r2)
    1db0:	10ffffc4 	addi	r3,r2,-1
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	10800317 	ldw	r2,12(r2)
    1dc4:	1004c03a 	cmpne	r2,r2,zero
    1dc8:	1000051e 	bne	r2,zero,1de0 <xQueueGiveMutexRecursive+0x68>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1dcc:	e13ffd17 	ldw	r4,-12(fp)
    1dd0:	000b883a 	mov	r5,zero
    1dd4:	000d883a 	mov	r6,zero
    1dd8:	000f883a 	mov	r7,zero
    1ddc:	0001f100 	call	1f10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    1de0:	00800044 	movi	r2,1
    1de4:	e0bffe15 	stw	r2,-8(fp)
    1de8:	00000106 	br	1df0 <xQueueGiveMutexRecursive+0x78>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    1dec:	e03ffe15 	stw	zero,-8(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1df0:	e0bffe17 	ldw	r2,-8(fp)
	}
    1df4:	e037883a 	mov	sp,fp
    1df8:	dfc00217 	ldw	ra,8(sp)
    1dfc:	df000117 	ldw	fp,4(sp)
    1e00:	dc000017 	ldw	r16,0(sp)
    1e04:	dec00304 	addi	sp,sp,12
    1e08:	f800283a 	ret

00001e0c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1e0c:	defff904 	addi	sp,sp,-28
    1e10:	dfc00615 	stw	ra,24(sp)
    1e14:	df000515 	stw	fp,20(sp)
    1e18:	dc000415 	stw	r16,16(sp)
    1e1c:	df000404 	addi	fp,sp,16
    1e20:	e13ffe15 	stw	r4,-8(fp)
    1e24:	e17fff15 	stw	r5,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1e30:	e0bffc17 	ldw	r2,-16(fp)
    1e34:	14000117 	ldw	r16,4(r2)
    1e38:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1e3c:	8080081e 	bne	r16,r2,1e60 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    1e40:	e0bffc17 	ldw	r2,-16(fp)
    1e44:	10800317 	ldw	r2,12(r2)
    1e48:	10c00044 	addi	r3,r2,1
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
    1e54:	00800044 	movi	r2,1
    1e58:	e0bffd15 	stw	r2,-12(fp)
    1e5c:	00000e06 	br	1e98 <xQueueTakeMutexRecursive+0x8c>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    1e60:	e13ffc17 	ldw	r4,-16(fp)
    1e64:	000b883a 	mov	r5,zero
    1e68:	e1bfff17 	ldw	r6,-4(fp)
    1e6c:	000f883a 	mov	r7,zero
    1e70:	00022800 	call	2280 <xQueueGenericReceive>
    1e74:	e0bffd15 	stw	r2,-12(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	10800058 	cmpnei	r2,r2,1
    1e80:	1000051e 	bne	r2,zero,1e98 <xQueueTakeMutexRecursive+0x8c>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    1e84:	e0bffc17 	ldw	r2,-16(fp)
    1e88:	10800317 	ldw	r2,12(r2)
    1e8c:	10c00044 	addi	r3,r2,1
    1e90:	e0bffc17 	ldw	r2,-16(fp)
    1e94:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1e98:	e0bffd17 	ldw	r2,-12(fp)
	}
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	dfc00217 	ldw	ra,8(sp)
    1ea4:	df000117 	ldw	fp,4(sp)
    1ea8:	dc000017 	ldw	r16,0(sp)
    1eac:	dec00304 	addi	sp,sp,12
    1eb0:	f800283a 	ret

00001eb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    1eb4:	defffb04 	addi	sp,sp,-20
    1eb8:	dfc00415 	stw	ra,16(sp)
    1ebc:	df000315 	stw	fp,12(sp)
    1ec0:	df000304 	addi	fp,sp,12
    1ec4:	e13ffe15 	stw	r4,-8(fp)
    1ec8:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    1ecc:	e13ffe17 	ldw	r4,-8(fp)
    1ed0:	000b883a 	mov	r5,zero
    1ed4:	01800084 	movi	r6,2
    1ed8:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    1edc:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	1005003a 	cmpeq	r2,r2,zero
    1ee8:	1000031e 	bne	r2,zero,1ef8 <xQueueCreateCountingSemaphore+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    1eec:	e0fffd17 	ldw	r3,-12(fp)
    1ef0:	e0bfff17 	ldw	r2,-4(fp)
    1ef4:	18800e15 	stw	r2,56(r3)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
	}
    1efc:	e037883a 	mov	sp,fp
    1f00:	dfc00117 	ldw	ra,4(sp)
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00204 	addi	sp,sp,8
    1f0c:	f800283a 	ret

00001f10 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1f10:	defff404 	addi	sp,sp,-48
    1f14:	dfc00b15 	stw	ra,44(sp)
    1f18:	df000a15 	stw	fp,40(sp)
    1f1c:	df000a04 	addi	fp,sp,40
    1f20:	e13ffb15 	stw	r4,-20(fp)
    1f24:	e17ffc15 	stw	r5,-16(fp)
    1f28:	e1bffd15 	stw	r6,-12(fp)
    1f2c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1f30:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f34:	e0bffb17 	ldw	r2,-20(fp)
    1f38:	e0bff615 	stw	r2,-40(fp)
    1f3c:	00000006 	br	1f40 <xQueueGenericSend+0x30>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f40:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f44:	e0bff617 	ldw	r2,-40(fp)
    1f48:	10c00e17 	ldw	r3,56(r2)
    1f4c:	e0bff617 	ldw	r2,-40(fp)
    1f50:	10800f17 	ldw	r2,60(r2)
    1f54:	18800336 	bltu	r3,r2,1f64 <xQueueGenericSend+0x54>
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	10800098 	cmpnei	r2,r2,2
    1f60:	1000181e 	bne	r2,zero,1fc4 <xQueueGenericSend+0xb4>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f64:	e13ff617 	ldw	r4,-40(fp)
    1f68:	e17ffc17 	ldw	r5,-16(fp)
    1f6c:	e1bffe17 	ldw	r6,-8(fp)
    1f70:	000270c0 	call	270c <prvCopyDataToQueue>
    1f74:	e0bff715 	stw	r2,-36(fp)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f78:	e0bff617 	ldw	r2,-40(fp)
    1f7c:	10800917 	ldw	r2,36(r2)
    1f80:	1005003a 	cmpeq	r2,r2,zero
    1f84:	1000071e 	bne	r2,zero,1fa4 <xQueueGenericSend+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f88:	e0bff617 	ldw	r2,-40(fp)
    1f8c:	11000904 	addi	r4,r2,36
    1f90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1f94:	10800058 	cmpnei	r2,r2,1
    1f98:	1000061e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f9c:	003b683a 	trap	0
    1fa0:	00000406 	br	1fb4 <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1fa4:	e0bff717 	ldw	r2,-36(fp)
    1fa8:	1005003a 	cmpeq	r2,r2,zero
    1fac:	1000011e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1fb0:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1fb4:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    1fb8:	00800044 	movi	r2,1
    1fbc:	e0bfff15 	stw	r2,-4(fp)
    1fc0:	00003906 	br	20a8 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	1004c03a 	cmpne	r2,r2,zero
    1fcc:	1000031e 	bne	r2,zero,1fdc <xQueueGenericSend+0xcc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1fd0:	00041680 	call	4168 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1fd4:	e03fff15 	stw	zero,-4(fp)
    1fd8:	00003306 	br	20a8 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
    1fdc:	e0bff817 	ldw	r2,-32(fp)
    1fe0:	1004c03a 	cmpne	r2,r2,zero
    1fe4:	1000041e 	bne	r2,zero,1ff8 <xQueueGenericSend+0xe8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1fe8:	e13ff904 	addi	r4,fp,-28
    1fec:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ff0:	00800044 	movi	r2,1
    1ff4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ff8:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ffc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2000:	00041140 	call	4114 <vTaskEnterCritical>
    2004:	e0bff617 	ldw	r2,-40(fp)
    2008:	10801117 	ldw	r2,68(r2)
    200c:	10bfffd8 	cmpnei	r2,r2,-1
    2010:	1000021e 	bne	r2,zero,201c <xQueueGenericSend+0x10c>
    2014:	e0bff617 	ldw	r2,-40(fp)
    2018:	10001115 	stw	zero,68(r2)
    201c:	e0bff617 	ldw	r2,-40(fp)
    2020:	10801217 	ldw	r2,72(r2)
    2024:	10bfffd8 	cmpnei	r2,r2,-1
    2028:	1000021e 	bne	r2,zero,2034 <xQueueGenericSend+0x124>
    202c:	e0bff617 	ldw	r2,-40(fp)
    2030:	10001215 	stw	zero,72(r2)
    2034:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2038:	e13ff904 	addi	r4,fp,-28
    203c:	e17ffd04 	addi	r5,fp,-12
    2040:	000380c0 	call	380c <xTaskCheckForTimeOut>
    2044:	1004c03a 	cmpne	r2,r2,zero
    2048:	1000131e 	bne	r2,zero,2098 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    204c:	e13ff617 	ldw	r4,-40(fp)
    2050:	0002ac40 	call	2ac4 <prvIsQueueFull>
    2054:	1005003a 	cmpeq	r2,r2,zero
    2058:	10000b1e 	bne	r2,zero,2088 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    205c:	e0bff617 	ldw	r2,-40(fp)
    2060:	11000404 	addi	r4,r2,16
    2064:	e17ffd17 	ldw	r5,-12(fp)
    2068:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    206c:	e13ff617 	ldw	r4,-40(fp)
    2070:	000293c0 	call	293c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2074:	00030180 	call	3018 <xTaskResumeAll>
    2078:	1004c03a 	cmpne	r2,r2,zero
    207c:	103fb01e 	bne	r2,zero,1f40 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
    2080:	003b683a 	trap	0
    2084:	003fae06 	br	1f40 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2088:	e13ff617 	ldw	r4,-40(fp)
    208c:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2090:	00030180 	call	3018 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2094:	003faa06 	br	1f40 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2098:	e13ff617 	ldw	r4,-40(fp)
    209c:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    20a0:	00030180 	call	3018 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    20a4:	e03fff15 	stw	zero,-4(fp)
    20a8:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    20ac:	e037883a 	mov	sp,fp
    20b0:	dfc00117 	ldw	ra,4(sp)
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00204 	addi	sp,sp,8
    20bc:	f800283a 	ret

000020c0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    20c0:	defff704 	addi	sp,sp,-36
    20c4:	dfc00815 	stw	ra,32(sp)
    20c8:	df000715 	stw	fp,28(sp)
    20cc:	df000704 	addi	fp,sp,28
    20d0:	e13ffc15 	stw	r4,-16(fp)
    20d4:	e17ffd15 	stw	r5,-12(fp)
    20d8:	e1bffe15 	stw	r6,-8(fp)
    20dc:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    20e0:	e0bffc17 	ldw	r2,-16(fp)
    20e4:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20e8:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20ec:	e0bff917 	ldw	r2,-28(fp)
    20f0:	10c00e17 	ldw	r3,56(r2)
    20f4:	e0bff917 	ldw	r2,-28(fp)
    20f8:	10800f17 	ldw	r2,60(r2)
    20fc:	18800336 	bltu	r3,r2,210c <xQueueGenericSendFromISR+0x4c>
    2100:	e0bfff17 	ldw	r2,-4(fp)
    2104:	10800098 	cmpnei	r2,r2,2
    2108:	1000201e 	bne	r2,zero,218c <xQueueGenericSendFromISR+0xcc>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    210c:	e13ff917 	ldw	r4,-28(fp)
    2110:	e17ffd17 	ldw	r5,-12(fp)
    2114:	e1bfff17 	ldw	r6,-4(fp)
    2118:	000270c0 	call	270c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    211c:	e0bff917 	ldw	r2,-28(fp)
    2120:	10801217 	ldw	r2,72(r2)
    2124:	10bfffd8 	cmpnei	r2,r2,-1
    2128:	1000101e 	bne	r2,zero,216c <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    212c:	e0bff917 	ldw	r2,-28(fp)
    2130:	10800917 	ldw	r2,36(r2)
    2134:	1005003a 	cmpeq	r2,r2,zero
    2138:	1000111e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    213c:	e0bff917 	ldw	r2,-28(fp)
    2140:	11000904 	addi	r4,r2,36
    2144:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2148:	1005003a 	cmpeq	r2,r2,zero
    214c:	10000c1e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2150:	e0bffe17 	ldw	r2,-8(fp)
    2154:	1005003a 	cmpeq	r2,r2,zero
    2158:	1000091e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    215c:	e0fffe17 	ldw	r3,-8(fp)
    2160:	00800044 	movi	r2,1
    2164:	18800015 	stw	r2,0(r3)
    2168:	00000506 	br	2180 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    216c:	e0bff917 	ldw	r2,-28(fp)
    2170:	10801217 	ldw	r2,72(r2)
    2174:	10c00044 	addi	r3,r2,1
    2178:	e0bff917 	ldw	r2,-28(fp)
    217c:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2180:	00800044 	movi	r2,1
    2184:	e0bffb15 	stw	r2,-20(fp)
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2188:	00000106 	br	2190 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    218c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2190:	e0bffb17 	ldw	r2,-20(fp)
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    21a8:	defff904 	addi	sp,sp,-28
    21ac:	dfc00615 	stw	ra,24(sp)
    21b0:	df000515 	stw	fp,20(sp)
    21b4:	df000504 	addi	fp,sp,20
    21b8:	e13ffe15 	stw	r4,-8(fp)
    21bc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    21c0:	e0bffe17 	ldw	r2,-8(fp)
    21c4:	e0bffb15 	stw	r2,-20(fp)
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21c8:	e03ffc15 	stw	zero,-16(fp)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    21cc:	e0bffb17 	ldw	r2,-20(fp)
    21d0:	10c00e17 	ldw	r3,56(r2)
    21d4:	e0bffb17 	ldw	r2,-20(fp)
    21d8:	10800f17 	ldw	r2,60(r2)
    21dc:	1880212e 	bgeu	r3,r2,2264 <xQueueGiveFromISR+0xbc>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
    21e0:	e0bffb17 	ldw	r2,-20(fp)
    21e4:	10800e17 	ldw	r2,56(r2)
    21e8:	10c00044 	addi	r3,r2,1
    21ec:	e0bffb17 	ldw	r2,-20(fp)
    21f0:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    21f4:	e0bffb17 	ldw	r2,-20(fp)
    21f8:	10801217 	ldw	r2,72(r2)
    21fc:	10bfffd8 	cmpnei	r2,r2,-1
    2200:	1000101e 	bne	r2,zero,2244 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2204:	e0bffb17 	ldw	r2,-20(fp)
    2208:	10800917 	ldw	r2,36(r2)
    220c:	1005003a 	cmpeq	r2,r2,zero
    2210:	1000111e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2214:	e0bffb17 	ldw	r2,-20(fp)
    2218:	11000904 	addi	r4,r2,36
    221c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2220:	1005003a 	cmpeq	r2,r2,zero
    2224:	10000c1e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2228:	e0bfff17 	ldw	r2,-4(fp)
    222c:	1005003a 	cmpeq	r2,r2,zero
    2230:	1000091e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2234:	e0ffff17 	ldw	r3,-4(fp)
    2238:	00800044 	movi	r2,1
    223c:	18800015 	stw	r2,0(r3)
    2240:	00000506 	br	2258 <xQueueGiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2244:	e0bffb17 	ldw	r2,-20(fp)
    2248:	10801217 	ldw	r2,72(r2)
    224c:	10c00044 	addi	r3,r2,1
    2250:	e0bffb17 	ldw	r2,-20(fp)
    2254:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2258:	00800044 	movi	r2,1
    225c:	e0bffd15 	stw	r2,-12(fp)
    2260:	00000106 	br	2268 <xQueueGiveFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2264:	e03ffd15 	stw	zero,-12(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2268:	e0bffd17 	ldw	r2,-12(fp)
}
    226c:	e037883a 	mov	sp,fp
    2270:	dfc00117 	ldw	ra,4(sp)
    2274:	df000017 	ldw	fp,0(sp)
    2278:	dec00204 	addi	sp,sp,8
    227c:	f800283a 	ret

00002280 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2280:	defff404 	addi	sp,sp,-48
    2284:	dfc00b15 	stw	ra,44(sp)
    2288:	df000a15 	stw	fp,40(sp)
    228c:	df000a04 	addi	fp,sp,40
    2290:	e13ffb15 	stw	r4,-20(fp)
    2294:	e17ffc15 	stw	r5,-16(fp)
    2298:	e1bffd15 	stw	r6,-12(fp)
    229c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE;
    22a0:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    22a4:	e0bffb17 	ldw	r2,-20(fp)
    22a8:	e0bff615 	stw	r2,-40(fp)
    22ac:	00000006 	br	22b0 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    22b0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    22b4:	e0bff617 	ldw	r2,-40(fp)
    22b8:	10800e17 	ldw	r2,56(r2)
    22bc:	1005003a 	cmpeq	r2,r2,zero
    22c0:	1000321e 	bne	r2,zero,238c <xQueueGenericReceive+0x10c>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    22c4:	e0bff617 	ldw	r2,-40(fp)
    22c8:	10800317 	ldw	r2,12(r2)
    22cc:	e0bff715 	stw	r2,-36(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    22d0:	e13ff617 	ldw	r4,-40(fp)
    22d4:	e17ffc17 	ldw	r5,-16(fp)
    22d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	1004c03a 	cmpne	r2,r2,zero
    22e4:	1000181e 	bne	r2,zero,2348 <xQueueGenericReceive+0xc8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    22e8:	e0bff617 	ldw	r2,-40(fp)
    22ec:	10800e17 	ldw	r2,56(r2)
    22f0:	10ffffc4 	addi	r3,r2,-1
    22f4:	e0bff617 	ldw	r2,-40(fp)
    22f8:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    22fc:	e0bff617 	ldw	r2,-40(fp)
    2300:	10800017 	ldw	r2,0(r2)
    2304:	1004c03a 	cmpne	r2,r2,zero
    2308:	1000041e 	bne	r2,zero,231c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    230c:	00042140 	call	4214 <pvTaskIncrementMutexHeldCount>
    2310:	1007883a 	mov	r3,r2
    2314:	e0bff617 	ldw	r2,-40(fp)
    2318:	10c00115 	stw	r3,4(r2)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    231c:	e0bff617 	ldw	r2,-40(fp)
    2320:	10800417 	ldw	r2,16(r2)
    2324:	1005003a 	cmpeq	r2,r2,zero
    2328:	1000141e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    232c:	e0bff617 	ldw	r2,-40(fp)
    2330:	11000404 	addi	r4,r2,16
    2334:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2338:	10800058 	cmpnei	r2,r2,1
    233c:	10000f1e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2340:	003b683a 	trap	0
    2344:	00000d06 	br	237c <xQueueGenericReceive+0xfc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2348:	e0fff617 	ldw	r3,-40(fp)
    234c:	e0bff717 	ldw	r2,-36(fp)
    2350:	18800315 	stw	r2,12(r3)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2354:	e0bff617 	ldw	r2,-40(fp)
    2358:	10800917 	ldw	r2,36(r2)
    235c:	1005003a 	cmpeq	r2,r2,zero
    2360:	1000061e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2364:	e0bff617 	ldw	r2,-40(fp)
    2368:	11000904 	addi	r4,r2,36
    236c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2370:	1005003a 	cmpeq	r2,r2,zero
    2374:	1000011e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2378:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    237c:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    2380:	00800044 	movi	r2,1
    2384:	e0bfff15 	stw	r2,-4(fp)
    2388:	00004206 	br	2494 <xQueueGenericReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    238c:	e0bffd17 	ldw	r2,-12(fp)
    2390:	1004c03a 	cmpne	r2,r2,zero
    2394:	1000031e 	bne	r2,zero,23a4 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2398:	00041680 	call	4168 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    239c:	e03fff15 	stw	zero,-4(fp)
    23a0:	00003c06 	br	2494 <xQueueGenericReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
    23a4:	e0bff817 	ldw	r2,-32(fp)
    23a8:	1004c03a 	cmpne	r2,r2,zero
    23ac:	1000041e 	bne	r2,zero,23c0 <xQueueGenericReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23b0:	e13ff904 	addi	r4,fp,-28
    23b4:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    23b8:	00800044 	movi	r2,1
    23bc:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    23c0:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23c4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23c8:	00041140 	call	4114 <vTaskEnterCritical>
    23cc:	e0bff617 	ldw	r2,-40(fp)
    23d0:	10801117 	ldw	r2,68(r2)
    23d4:	10bfffd8 	cmpnei	r2,r2,-1
    23d8:	1000021e 	bne	r2,zero,23e4 <xQueueGenericReceive+0x164>
    23dc:	e0bff617 	ldw	r2,-40(fp)
    23e0:	10001115 	stw	zero,68(r2)
    23e4:	e0bff617 	ldw	r2,-40(fp)
    23e8:	10801217 	ldw	r2,72(r2)
    23ec:	10bfffd8 	cmpnei	r2,r2,-1
    23f0:	1000021e 	bne	r2,zero,23fc <xQueueGenericReceive+0x17c>
    23f4:	e0bff617 	ldw	r2,-40(fp)
    23f8:	10001215 	stw	zero,72(r2)
    23fc:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2400:	e13ff904 	addi	r4,fp,-28
    2404:	e17ffd04 	addi	r5,fp,-12
    2408:	000380c0 	call	380c <xTaskCheckForTimeOut>
    240c:	1004c03a 	cmpne	r2,r2,zero
    2410:	10001c1e 	bne	r2,zero,2484 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2414:	e13ff617 	ldw	r4,-40(fp)
    2418:	0002a2c0 	call	2a2c <prvIsQueueEmpty>
    241c:	1005003a 	cmpeq	r2,r2,zero
    2420:	1000141e 	bne	r2,zero,2474 <xQueueGenericReceive+0x1f4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2424:	e0bff617 	ldw	r2,-40(fp)
    2428:	10800017 	ldw	r2,0(r2)
    242c:	1004c03a 	cmpne	r2,r2,zero
    2430:	1000051e 	bne	r2,zero,2448 <xQueueGenericReceive+0x1c8>
					{
						taskENTER_CRITICAL();
    2434:	00041140 	call	4114 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2438:	e0bff617 	ldw	r2,-40(fp)
    243c:	11000117 	ldw	r4,4(r2)
    2440:	0003ee80 	call	3ee8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2444:	00041680 	call	4168 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2448:	e0bff617 	ldw	r2,-40(fp)
    244c:	11000904 	addi	r4,r2,36
    2450:	e17ffd17 	ldw	r5,-12(fp)
    2454:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2458:	e13ff617 	ldw	r4,-40(fp)
    245c:	000293c0 	call	293c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2460:	00030180 	call	3018 <xTaskResumeAll>
    2464:	1004c03a 	cmpne	r2,r2,zero
    2468:	103f911e 	bne	r2,zero,22b0 <xQueueGenericReceive+0x30>
				{
					portYIELD_WITHIN_API();
    246c:	003b683a 	trap	0
    2470:	003f8f06 	br	22b0 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2474:	e13ff617 	ldw	r4,-40(fp)
    2478:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    247c:	00030180 	call	3018 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2480:	003f8b06 	br	22b0 <xQueueGenericReceive+0x30>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2484:	e13ff617 	ldw	r4,-40(fp)
    2488:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    248c:	00030180 	call	3018 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2490:	e03fff15 	stw	zero,-4(fp)
    2494:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    24ac:	defff804 	addi	sp,sp,-32
    24b0:	dfc00715 	stw	ra,28(sp)
    24b4:	df000615 	stw	fp,24(sp)
    24b8:	df000604 	addi	fp,sp,24
    24bc:	e13ffd15 	stw	r4,-12(fp)
    24c0:	e17ffe15 	stw	r5,-8(fp)
    24c4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24d0:	e03ffb15 	stw	zero,-20(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    24d4:	e0bffa17 	ldw	r2,-24(fp)
    24d8:	10800e17 	ldw	r2,56(r2)
    24dc:	1005003a 	cmpeq	r2,r2,zero
    24e0:	1000241e 	bne	r2,zero,2574 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24e4:	e13ffa17 	ldw	r4,-24(fp)
    24e8:	e17ffe17 	ldw	r5,-8(fp)
    24ec:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    24f0:	e0bffa17 	ldw	r2,-24(fp)
    24f4:	10800e17 	ldw	r2,56(r2)
    24f8:	10ffffc4 	addi	r3,r2,-1
    24fc:	e0bffa17 	ldw	r2,-24(fp)
    2500:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2504:	e0bffa17 	ldw	r2,-24(fp)
    2508:	10801117 	ldw	r2,68(r2)
    250c:	10bfffd8 	cmpnei	r2,r2,-1
    2510:	1000101e 	bne	r2,zero,2554 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2514:	e0bffa17 	ldw	r2,-24(fp)
    2518:	10800417 	ldw	r2,16(r2)
    251c:	1005003a 	cmpeq	r2,r2,zero
    2520:	1000111e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2524:	e0bffa17 	ldw	r2,-24(fp)
    2528:	11000404 	addi	r4,r2,16
    252c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2530:	1005003a 	cmpeq	r2,r2,zero
    2534:	10000c1e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2538:	e0bfff17 	ldw	r2,-4(fp)
    253c:	1005003a 	cmpeq	r2,r2,zero
    2540:	1000091e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2544:	e0ffff17 	ldw	r3,-4(fp)
    2548:	00800044 	movi	r2,1
    254c:	18800015 	stw	r2,0(r3)
    2550:	00000506 	br	2568 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	10801117 	ldw	r2,68(r2)
    255c:	10c00044 	addi	r3,r2,1
    2560:	e0bffa17 	ldw	r2,-24(fp)
    2564:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
    2568:	00800044 	movi	r2,1
    256c:	e0bffc15 	stw	r2,-16(fp)
    2570:	00000106 	br	2578 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
    2574:	e03ffc15 	stw	zero,-16(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2578:	e0bffc17 	ldw	r2,-16(fp)
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2590:	defff804 	addi	sp,sp,-32
    2594:	dfc00715 	stw	ra,28(sp)
    2598:	df000615 	stw	fp,24(sp)
    259c:	df000604 	addi	fp,sp,24
    25a0:	e13ffe15 	stw	r4,-8(fp)
    25a4:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    25b0:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    25b4:	e0bffa17 	ldw	r2,-24(fp)
    25b8:	10800e17 	ldw	r2,56(r2)
    25bc:	1005003a 	cmpeq	r2,r2,zero
    25c0:	10000c1e 	bne	r2,zero,25f4 <xQueuePeekFromISR+0x64>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    25c4:	e0bffa17 	ldw	r2,-24(fp)
    25c8:	10800317 	ldw	r2,12(r2)
    25cc:	e0bffb15 	stw	r2,-20(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    25d0:	e13ffa17 	ldw	r4,-24(fp)
    25d4:	e17fff17 	ldw	r5,-4(fp)
    25d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    25dc:	e0fffa17 	ldw	r3,-24(fp)
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	18800315 	stw	r2,12(r3)

			xReturn = pdPASS;
    25e8:	00800044 	movi	r2,1
    25ec:	e0bffd15 	stw	r2,-12(fp)
    25f0:	00000106 	br	25f8 <xQueuePeekFromISR+0x68>
		}
		else
		{
			xReturn = pdFAIL;
    25f4:	e03ffd15 	stw	zero,-12(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    25f8:	e0bffd17 	ldw	r2,-12(fp)
}
    25fc:	e037883a 	mov	sp,fp
    2600:	dfc00117 	ldw	ra,4(sp)
    2604:	df000017 	ldw	fp,0(sp)
    2608:	dec00204 	addi	sp,sp,8
    260c:	f800283a 	ret

00002610 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2610:	defffc04 	addi	sp,sp,-16
    2614:	dfc00315 	stw	ra,12(sp)
    2618:	df000215 	stw	fp,8(sp)
    261c:	df000204 	addi	fp,sp,8
    2620:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2624:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2628:	e0bfff17 	ldw	r2,-4(fp)
    262c:	10800e17 	ldw	r2,56(r2)
    2630:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2634:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    2638:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    263c:	e037883a 	mov	sp,fp
    2640:	dfc00117 	ldw	ra,4(sp)
    2644:	df000017 	ldw	fp,0(sp)
    2648:	dec00204 	addi	sp,sp,8
    264c:	f800283a 	ret

00002650 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2650:	defffb04 	addi	sp,sp,-20
    2654:	dfc00415 	stw	ra,16(sp)
    2658:	df000315 	stw	fp,12(sp)
    265c:	df000304 	addi	fp,sp,12
    2660:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2664:	e0bfff17 	ldw	r2,-4(fp)
    2668:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    266c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	10c00f17 	ldw	r3,60(r2)
    2678:	e0bffd17 	ldw	r2,-12(fp)
    267c:	10800e17 	ldw	r2,56(r2)
    2680:	1885c83a 	sub	r2,r3,r2
    2684:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2688:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    268c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2690:	e037883a 	mov	sp,fp
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret

000026a4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    26a4:	defffd04 	addi	sp,sp,-12
    26a8:	df000215 	stw	fp,8(sp)
    26ac:	df000204 	addi	fp,sp,8
    26b0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    26b4:	e0bfff17 	ldw	r2,-4(fp)
    26b8:	10800e17 	ldw	r2,56(r2)
    26bc:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
    26c0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    26c4:	e037883a 	mov	sp,fp
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    26d4:	defffc04 	addi	sp,sp,-16
    26d8:	dfc00315 	stw	ra,12(sp)
    26dc:	df000215 	stw	fp,8(sp)
    26e0:	df000204 	addi	fp,sp,8
    26e4:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26e8:	e0bfff17 	ldw	r2,-4(fp)
    26ec:	e0bffe15 	stw	r2,-8(fp)
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    26f0:	e13ffe17 	ldw	r4,-8(fp)
    26f4:	00011500 	call	1150 <vPortFree>
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    270c:	defffa04 	addi	sp,sp,-24
    2710:	dfc00515 	stw	ra,20(sp)
    2714:	df000415 	stw	fp,16(sp)
    2718:	df000404 	addi	fp,sp,16
    271c:	e13ffd15 	stw	r4,-12(fp)
    2720:	e17ffe15 	stw	r5,-8(fp)
    2724:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
    2728:	e03ffc15 	stw	zero,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	10801017 	ldw	r2,64(r2)
    2734:	1004c03a 	cmpne	r2,r2,zero
    2738:	10000b1e 	bne	r2,zero,2768 <prvCopyDataToQueue+0x5c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    273c:	e0bffd17 	ldw	r2,-12(fp)
    2740:	10800017 	ldw	r2,0(r2)
    2744:	1004c03a 	cmpne	r2,r2,zero
    2748:	10004a1e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	11000117 	ldw	r4,4(r2)
    2754:	00040180 	call	4018 <xTaskPriorityDisinherit>
    2758:	e0bffc15 	stw	r2,-16(fp)
				pxQueue->pxMutexHolder = NULL;
    275c:	e0bffd17 	ldw	r2,-12(fp)
    2760:	10000115 	stw	zero,4(r2)
    2764:	00004306 	br	2874 <prvCopyDataToQueue+0x168>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2768:	e0bfff17 	ldw	r2,-4(fp)
    276c:	1004c03a 	cmpne	r2,r2,zero
    2770:	1000191e 	bne	r2,zero,27d8 <prvCopyDataToQueue+0xcc>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00217 	ldw	r3,8(r2)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	11801017 	ldw	r6,64(r2)
    2784:	e0bffe17 	ldw	r2,-8(fp)
    2788:	1809883a 	mov	r4,r3
    278c:	100b883a 	mov	r5,r2
    2790:	00080740 	call	8074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2794:	e0bffd17 	ldw	r2,-12(fp)
    2798:	10c00217 	ldw	r3,8(r2)
    279c:	e0bffd17 	ldw	r2,-12(fp)
    27a0:	10801017 	ldw	r2,64(r2)
    27a4:	1887883a 	add	r3,r3,r2
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10c00217 	ldw	r3,8(r2)
    27b8:	e0bffd17 	ldw	r2,-12(fp)
    27bc:	10800117 	ldw	r2,4(r2)
    27c0:	18802c36 	bltu	r3,r2,2874 <prvCopyDataToQueue+0x168>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    27c4:	e0bffd17 	ldw	r2,-12(fp)
    27c8:	10c00017 	ldw	r3,0(r2)
    27cc:	e0bffd17 	ldw	r2,-12(fp)
    27d0:	10c00215 	stw	r3,8(r2)
    27d4:	00002706 	br	2874 <prvCopyDataToQueue+0x168>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	10c00317 	ldw	r3,12(r2)
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	11801017 	ldw	r6,64(r2)
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1809883a 	mov	r4,r3
    27f0:	100b883a 	mov	r5,r2
    27f4:	00080740 	call	8074 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    27f8:	e0bffd17 	ldw	r2,-12(fp)
    27fc:	10c00317 	ldw	r3,12(r2)
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10801017 	ldw	r2,64(r2)
    2808:	1887c83a 	sub	r3,r3,r2
    280c:	e0bffd17 	ldw	r2,-12(fp)
    2810:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2814:	e0bffd17 	ldw	r2,-12(fp)
    2818:	10c00317 	ldw	r3,12(r2)
    281c:	e0bffd17 	ldw	r2,-12(fp)
    2820:	10800017 	ldw	r2,0(r2)
    2824:	1880072e 	bgeu	r3,r2,2844 <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	10c00117 	ldw	r3,4(r2)
    2830:	e0bffd17 	ldw	r2,-12(fp)
    2834:	10801017 	ldw	r2,64(r2)
    2838:	1887c83a 	sub	r3,r3,r2
    283c:	e0bffd17 	ldw	r2,-12(fp)
    2840:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	10800098 	cmpnei	r2,r2,2
    284c:	1000091e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	10800e17 	ldw	r2,56(r2)
    2858:	1005003a 	cmpeq	r2,r2,zero
    285c:	1000051e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2860:	e0bffd17 	ldw	r2,-12(fp)
    2864:	10800e17 	ldw	r2,56(r2)
    2868:	10ffffc4 	addi	r3,r2,-1
    286c:	e0bffd17 	ldw	r2,-12(fp)
    2870:	10c00e15 	stw	r3,56(r2)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	10800e17 	ldw	r2,56(r2)
    287c:	10c00044 	addi	r3,r2,1
    2880:	e0bffd17 	ldw	r2,-12(fp)
    2884:	10c00e15 	stw	r3,56(r2)

	return xReturn;
    2888:	e0bffc17 	ldw	r2,-16(fp)
}
    288c:	e037883a 	mov	sp,fp
    2890:	dfc00117 	ldw	ra,4(sp)
    2894:	df000017 	ldw	fp,0(sp)
    2898:	dec00204 	addi	sp,sp,8
    289c:	f800283a 	ret

000028a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    28a0:	defffc04 	addi	sp,sp,-16
    28a4:	dfc00315 	stw	ra,12(sp)
    28a8:	df000215 	stw	fp,8(sp)
    28ac:	df000204 	addi	fp,sp,8
    28b0:	e13ffe15 	stw	r4,-8(fp)
    28b4:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    28b8:	e0bffe17 	ldw	r2,-8(fp)
    28bc:	10801017 	ldw	r2,64(r2)
    28c0:	1005003a 	cmpeq	r2,r2,zero
    28c4:	1000181e 	bne	r2,zero,2928 <prvCopyDataFromQueue+0x88>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    28c8:	e0bffe17 	ldw	r2,-8(fp)
    28cc:	10c00317 	ldw	r3,12(r2)
    28d0:	e0bffe17 	ldw	r2,-8(fp)
    28d4:	10801017 	ldw	r2,64(r2)
    28d8:	1887883a 	add	r3,r3,r2
    28dc:	e0bffe17 	ldw	r2,-8(fp)
    28e0:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	10c00317 	ldw	r3,12(r2)
    28ec:	e0bffe17 	ldw	r2,-8(fp)
    28f0:	10800117 	ldw	r2,4(r2)
    28f4:	18800436 	bltu	r3,r2,2908 <prvCopyDataFromQueue+0x68>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	10c00017 	ldw	r3,0(r2)
    2900:	e0bffe17 	ldw	r2,-8(fp)
    2904:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2908:	e0bffe17 	ldw	r2,-8(fp)
    290c:	10c00317 	ldw	r3,12(r2)
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	11801017 	ldw	r6,64(r2)
    2918:	e0bfff17 	ldw	r2,-4(fp)
    291c:	1009883a 	mov	r4,r2
    2920:	180b883a 	mov	r5,r3
    2924:	00080740 	call	8074 <memcpy>
	}
}
    2928:	e037883a 	mov	sp,fp
    292c:	dfc00117 	ldw	ra,4(sp)
    2930:	df000017 	ldw	fp,0(sp)
    2934:	dec00204 	addi	sp,sp,8
    2938:	f800283a 	ret

0000293c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    293c:	defffd04 	addi	sp,sp,-12
    2940:	dfc00215 	stw	ra,8(sp)
    2944:	df000115 	stw	fp,4(sp)
    2948:	df000104 	addi	fp,sp,4
    294c:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2950:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2954:	00000f06 	br	2994 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2958:	e0bfff17 	ldw	r2,-4(fp)
    295c:	10800917 	ldw	r2,36(r2)
    2960:	1005003a 	cmpeq	r2,r2,zero
    2964:	10000f1e 	bne	r2,zero,29a4 <prvUnlockQueue+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2968:	e0bfff17 	ldw	r2,-4(fp)
    296c:	11000904 	addi	r4,r2,36
    2970:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2974:	1005003a 	cmpeq	r2,r2,zero
    2978:	1000011e 	bne	r2,zero,2980 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    297c:	00038d00 	call	38d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	10801217 	ldw	r2,72(r2)
    2988:	10ffffc4 	addi	r3,r2,-1
    298c:	e0bfff17 	ldw	r2,-4(fp)
    2990:	10c01215 	stw	r3,72(r2)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2994:	e0bfff17 	ldw	r2,-4(fp)
    2998:	10801217 	ldw	r2,72(r2)
    299c:	10800048 	cmpgei	r2,r2,1
    29a0:	103fed1e 	bne	r2,zero,2958 <prvUnlockQueue+0x1c>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    29a4:	e0ffff17 	ldw	r3,-4(fp)
    29a8:	00bfffc4 	movi	r2,-1
    29ac:	18801215 	stw	r2,72(r3)
	}
	taskEXIT_CRITICAL();
    29b0:	00041680 	call	4168 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    29b4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29b8:	00000f06 	br	29f8 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    29bc:	e0bfff17 	ldw	r2,-4(fp)
    29c0:	10800417 	ldw	r2,16(r2)
    29c4:	1005003a 	cmpeq	r2,r2,zero
    29c8:	10000f1e 	bne	r2,zero,2a08 <prvUnlockQueue+0xcc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	11000404 	addi	r4,r2,16
    29d4:	000361c0 	call	361c <xTaskRemoveFromEventList>
    29d8:	1005003a 	cmpeq	r2,r2,zero
    29dc:	1000011e 	bne	r2,zero,29e4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    29e0:	00038d00 	call	38d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	10801117 	ldw	r2,68(r2)
    29ec:	10ffffc4 	addi	r3,r2,-1
    29f0:	e0bfff17 	ldw	r2,-4(fp)
    29f4:	10c01115 	stw	r3,68(r2)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	10801117 	ldw	r2,68(r2)
    2a00:	10800048 	cmpgei	r2,r2,1
    2a04:	103fed1e 	bne	r2,zero,29bc <prvUnlockQueue+0x80>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2a08:	e0ffff17 	ldw	r3,-4(fp)
    2a0c:	00bfffc4 	movi	r2,-1
    2a10:	18801115 	stw	r2,68(r3)
	}
	taskEXIT_CRITICAL();
    2a14:	00041680 	call	4168 <vTaskExitCritical>
}
    2a18:	e037883a 	mov	sp,fp
    2a1c:	dfc00117 	ldw	ra,4(sp)
    2a20:	df000017 	ldw	fp,0(sp)
    2a24:	dec00204 	addi	sp,sp,8
    2a28:	f800283a 	ret

00002a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2a2c:	defffc04 	addi	sp,sp,-16
    2a30:	dfc00315 	stw	ra,12(sp)
    2a34:	df000215 	stw	fp,8(sp)
    2a38:	df000204 	addi	fp,sp,8
    2a3c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a40:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2a44:	e0bfff17 	ldw	r2,-4(fp)
    2a48:	10800e17 	ldw	r2,56(r2)
    2a4c:	1004c03a 	cmpne	r2,r2,zero
    2a50:	1000031e 	bne	r2,zero,2a60 <prvIsQueueEmpty+0x34>
		{
			xReturn = pdTRUE;
    2a54:	00800044 	movi	r2,1
    2a58:	e0bffe15 	stw	r2,-8(fp)
    2a5c:	00000106 	br	2a64 <prvIsQueueEmpty+0x38>
		}
		else
		{
			xReturn = pdFALSE;
    2a60:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2a64:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2a68:	e0bffe17 	ldw	r2,-8(fp)
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	dfc00117 	ldw	ra,4(sp)
    2a74:	df000017 	ldw	fp,0(sp)
    2a78:	dec00204 	addi	sp,sp,8
    2a7c:	f800283a 	ret

00002a80 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2a80:	defffd04 	addi	sp,sp,-12
    2a84:	df000215 	stw	fp,8(sp)
    2a88:	df000204 	addi	fp,sp,8
    2a8c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2a90:	e0bfff17 	ldw	r2,-4(fp)
    2a94:	10800e17 	ldw	r2,56(r2)
    2a98:	1004c03a 	cmpne	r2,r2,zero
    2a9c:	1000031e 	bne	r2,zero,2aac <xQueueIsQueueEmptyFromISR+0x2c>
	{
		xReturn = pdTRUE;
    2aa0:	00800044 	movi	r2,1
    2aa4:	e0bffe15 	stw	r2,-8(fp)
    2aa8:	00000106 	br	2ab0 <xQueueIsQueueEmptyFromISR+0x30>
	}
	else
	{
		xReturn = pdFALSE;
    2aac:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2ab0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ab4:	e037883a 	mov	sp,fp
    2ab8:	df000017 	ldw	fp,0(sp)
    2abc:	dec00104 	addi	sp,sp,4
    2ac0:	f800283a 	ret

00002ac4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2ac4:	defffc04 	addi	sp,sp,-16
    2ac8:	dfc00315 	stw	ra,12(sp)
    2acc:	df000215 	stw	fp,8(sp)
    2ad0:	df000204 	addi	fp,sp,8
    2ad4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ad8:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2adc:	e0bfff17 	ldw	r2,-4(fp)
    2ae0:	10c00e17 	ldw	r3,56(r2)
    2ae4:	e0bfff17 	ldw	r2,-4(fp)
    2ae8:	10800f17 	ldw	r2,60(r2)
    2aec:	1880031e 	bne	r3,r2,2afc <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
    2af0:	00800044 	movi	r2,1
    2af4:	e0bffe15 	stw	r2,-8(fp)
    2af8:	00000106 	br	2b00 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
    2afc:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2b00:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2b04:	e0bffe17 	ldw	r2,-8(fp)
}
    2b08:	e037883a 	mov	sp,fp
    2b0c:	dfc00117 	ldw	ra,4(sp)
    2b10:	df000017 	ldw	fp,0(sp)
    2b14:	dec00204 	addi	sp,sp,8
    2b18:	f800283a 	ret

00002b1c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2b1c:	defffd04 	addi	sp,sp,-12
    2b20:	df000215 	stw	fp,8(sp)
    2b24:	df000204 	addi	fp,sp,8
    2b28:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2b2c:	e0bfff17 	ldw	r2,-4(fp)
    2b30:	10c00e17 	ldw	r3,56(r2)
    2b34:	e0bfff17 	ldw	r2,-4(fp)
    2b38:	10800f17 	ldw	r2,60(r2)
    2b3c:	1880031e 	bne	r3,r2,2b4c <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2b40:	00800044 	movi	r2,1
    2b44:	e0bffe15 	stw	r2,-8(fp)
    2b48:	00000106 	br	2b50 <xQueueIsQueueFullFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
    2b4c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2b50:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2b54:	e037883a 	mov	sp,fp
    2b58:	df000017 	ldw	fp,0(sp)
    2b5c:	dec00104 	addi	sp,sp,4
    2b60:	f800283a 	ret

00002b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2b64:	defffb04 	addi	sp,sp,-20
    2b68:	dfc00415 	stw	ra,16(sp)
    2b6c:	df000315 	stw	fp,12(sp)
    2b70:	df000304 	addi	fp,sp,12
    2b74:	e13ffe15 	stw	r4,-8(fp)
    2b78:	e17fff15 	stw	r5,-4(fp)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b7c:	e0bffe17 	ldw	r2,-8(fp)
    2b80:	e0bffd15 	stw	r2,-12(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2b84:	00041140 	call	4114 <vTaskEnterCritical>
    2b88:	e0bffd17 	ldw	r2,-12(fp)
    2b8c:	10801117 	ldw	r2,68(r2)
    2b90:	10bfffd8 	cmpnei	r2,r2,-1
    2b94:	1000021e 	bne	r2,zero,2ba0 <vQueueWaitForMessageRestricted+0x3c>
    2b98:	e0bffd17 	ldw	r2,-12(fp)
    2b9c:	10001115 	stw	zero,68(r2)
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10801217 	ldw	r2,72(r2)
    2ba8:	10bfffd8 	cmpnei	r2,r2,-1
    2bac:	1000021e 	bne	r2,zero,2bb8 <vQueueWaitForMessageRestricted+0x54>
    2bb0:	e0bffd17 	ldw	r2,-12(fp)
    2bb4:	10001215 	stw	zero,72(r2)
    2bb8:	00041680 	call	4168 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2bbc:	e0bffd17 	ldw	r2,-12(fp)
    2bc0:	10800e17 	ldw	r2,56(r2)
    2bc4:	1004c03a 	cmpne	r2,r2,zero
    2bc8:	1000041e 	bne	r2,zero,2bdc <vQueueWaitForMessageRestricted+0x78>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2bcc:	e0bffd17 	ldw	r2,-12(fp)
    2bd0:	11000904 	addi	r4,r2,36
    2bd4:	e17fff17 	ldw	r5,-4(fp)
    2bd8:	00035bc0 	call	35bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2bdc:	e13ffd17 	ldw	r4,-12(fp)
    2be0:	000293c0 	call	293c <prvUnlockQueue>
	}
    2be4:	e037883a 	mov	sp,fp
    2be8:	dfc00117 	ldw	ra,4(sp)
    2bec:	df000017 	ldw	fp,0(sp)
    2bf0:	dec00204 	addi	sp,sp,8
    2bf4:	f800283a 	ret

00002bf8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2bf8:	defff604 	addi	sp,sp,-40
    2bfc:	dfc00915 	stw	ra,36(sp)
    2c00:	df000815 	stw	fp,32(sp)
    2c04:	df000804 	addi	fp,sp,32
    2c08:	e13ffc15 	stw	r4,-16(fp)
    2c0c:	e17ffd15 	stw	r5,-12(fp)
    2c10:	e1ffff15 	stw	r7,-4(fp)
    2c14:	e1bffe0d 	sth	r6,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2c18:	e13ffe0b 	ldhu	r4,-8(fp)
    2c1c:	e1400417 	ldw	r5,16(fp)
    2c20:	0003c100 	call	3c10 <prvAllocateTCBAndStack>
    2c24:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
    2c28:	e0bffa17 	ldw	r2,-24(fp)
    2c2c:	1005003a 	cmpeq	r2,r2,zero
    2c30:	1000501e 	bne	r2,zero,2d74 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2c34:	e0bffa17 	ldw	r2,-24(fp)
    2c38:	10c00c17 	ldw	r3,48(r2)
    2c3c:	e0bffe0b 	ldhu	r2,-8(fp)
    2c40:	1085883a 	add	r2,r2,r2
    2c44:	1085883a 	add	r2,r2,r2
    2c48:	1885883a 	add	r2,r3,r2
    2c4c:	10bfff04 	addi	r2,r2,-4
    2c50:	e0bff915 	stw	r2,-28(fp)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2c54:	e0bff917 	ldw	r2,-28(fp)
    2c58:	1007883a 	mov	r3,r2
    2c5c:	00bfff04 	movi	r2,-4
    2c60:	1884703a 	and	r2,r3,r2
    2c64:	e0bff915 	stw	r2,-28(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2c68:	e0bffe0b 	ldhu	r2,-8(fp)
    2c6c:	d8800015 	stw	r2,0(sp)
    2c70:	e13ffa17 	ldw	r4,-24(fp)
    2c74:	e17ffd17 	ldw	r5,-12(fp)
    2c78:	e1800217 	ldw	r6,8(fp)
    2c7c:	e1c00517 	ldw	r7,20(fp)
    2c80:	00039100 	call	3910 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c84:	e13ff917 	ldw	r4,-28(fp)
    2c88:	e17ffc17 	ldw	r5,-16(fp)
    2c8c:	e1bfff17 	ldw	r6,-4(fp)
    2c90:	00016f40 	call	16f4 <pxPortInitialiseStack>
    2c94:	1007883a 	mov	r3,r2
    2c98:	e0bffa17 	ldw	r2,-24(fp)
    2c9c:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2ca0:	e0800317 	ldw	r2,12(fp)
    2ca4:	1005003a 	cmpeq	r2,r2,zero
    2ca8:	1000031e 	bne	r2,zero,2cb8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2cac:	e0c00317 	ldw	r3,12(fp)
    2cb0:	e0bffa17 	ldw	r2,-24(fp)
    2cb4:	18800015 	stw	r2,0(r3)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2cb8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    2cbc:	d0a02c17 	ldw	r2,-32592(gp)
    2cc0:	10800044 	addi	r2,r2,1
    2cc4:	d0a02c15 	stw	r2,-32592(gp)
			if( pxCurrentTCB == NULL )
    2cc8:	d0a02a17 	ldw	r2,-32600(gp)
    2ccc:	1004c03a 	cmpne	r2,r2,zero
    2cd0:	1000071e 	bne	r2,zero,2cf0 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2cd4:	e0bffa17 	ldw	r2,-24(fp)
    2cd8:	d0a02a15 	stw	r2,-32600(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2cdc:	d0a02c17 	ldw	r2,-32592(gp)
    2ce0:	10800058 	cmpnei	r2,r2,1
    2ce4:	10000b1e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2ce8:	0003a4c0 	call	3a4c <prvInitialiseTaskLists>
    2cec:	00000906 	br	2d14 <xTaskGenericCreate+0x11c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2cf0:	d0a02f17 	ldw	r2,-32580(gp)
    2cf4:	1004c03a 	cmpne	r2,r2,zero
    2cf8:	1000061e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2cfc:	d0a02a17 	ldw	r2,-32600(gp)
    2d00:	10c00b17 	ldw	r3,44(r2)
    2d04:	e0800217 	ldw	r2,8(fp)
    2d08:	10c00236 	bltu	r2,r3,2d14 <xTaskGenericCreate+0x11c>
					{
						pxCurrentTCB = pxNewTCB;
    2d0c:	e0bffa17 	ldw	r2,-24(fp)
    2d10:	d0a02a15 	stw	r2,-32600(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2d14:	d0a03317 	ldw	r2,-32564(gp)
    2d18:	10800044 	addi	r2,r2,1
    2d1c:	d0a03315 	stw	r2,-32564(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2d20:	e0bffa17 	ldw	r2,-24(fp)
    2d24:	10c00b17 	ldw	r3,44(r2)
    2d28:	d0a02e17 	ldw	r2,-32584(gp)
    2d2c:	10c0032e 	bgeu	r2,r3,2d3c <xTaskGenericCreate+0x144>
    2d30:	e0bffa17 	ldw	r2,-24(fp)
    2d34:	10800b17 	ldw	r2,44(r2)
    2d38:	d0a02e15 	stw	r2,-32584(gp)
    2d3c:	e0bffa17 	ldw	r2,-24(fp)
    2d40:	10800b17 	ldw	r2,44(r2)
    2d44:	10800524 	muli	r2,r2,20
    2d48:	1007883a 	mov	r3,r2
    2d4c:	00820234 	movhi	r2,2056
    2d50:	10be8404 	addi	r2,r2,-1520
    2d54:	1889883a 	add	r4,r3,r2
    2d58:	e0bffa17 	ldw	r2,-24(fp)
    2d5c:	11400104 	addi	r5,r2,4
    2d60:	000149c0 	call	149c <vListInsertEnd>

			xReturn = pdPASS;
    2d64:	00800044 	movi	r2,1
    2d68:	e0bffb15 	stw	r2,-20(fp)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2d6c:	00041680 	call	4168 <vTaskExitCritical>
    2d70:	00000206 	br	2d7c <xTaskGenericCreate+0x184>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2d74:	00bfffc4 	movi	r2,-1
    2d78:	e0bffb15 	stw	r2,-20(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	10800058 	cmpnei	r2,r2,1
    2d84:	1000081e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
	{
		if( xSchedulerRunning != pdFALSE )
    2d88:	d0a02f17 	ldw	r2,-32580(gp)
    2d8c:	1005003a 	cmpeq	r2,r2,zero
    2d90:	1000051e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2d94:	d0a02a17 	ldw	r2,-32600(gp)
    2d98:	10c00b17 	ldw	r3,44(r2)
    2d9c:	e0800217 	ldw	r2,8(fp)
    2da0:	1880012e 	bgeu	r3,r2,2da8 <xTaskGenericCreate+0x1b0>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2da4:	003b683a 	trap	0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2da8:	e0bffb17 	ldw	r2,-20(fp)
}
    2dac:	e037883a 	mov	sp,fp
    2db0:	dfc00117 	ldw	ra,4(sp)
    2db4:	df000017 	ldw	fp,0(sp)
    2db8:	dec00204 	addi	sp,sp,8
    2dbc:	f800283a 	ret

00002dc0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2dc0:	defffb04 	addi	sp,sp,-20
    2dc4:	dfc00415 	stw	ra,16(sp)
    2dc8:	df000315 	stw	fp,12(sp)
    2dcc:	df000304 	addi	fp,sp,12
    2dd0:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2dd4:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2dd8:	e0bffe17 	ldw	r2,-8(fp)
    2ddc:	1004c03a 	cmpne	r2,r2,zero
    2de0:	1000031e 	bne	r2,zero,2df0 <vTaskDelete+0x30>
    2de4:	d0a02a17 	ldw	r2,-32600(gp)
    2de8:	e0bfff15 	stw	r2,-4(fp)
    2dec:	00000206 	br	2df8 <vTaskDelete+0x38>
    2df0:	e0bffe17 	ldw	r2,-8(fp)
    2df4:	e0bfff15 	stw	r2,-4(fp)
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	e0bffd15 	stw	r2,-12(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	11000104 	addi	r4,r2,4
    2e08:	00015f80 	call	15f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2e0c:	e0bffd17 	ldw	r2,-12(fp)
    2e10:	10800a17 	ldw	r2,40(r2)
    2e14:	1005003a 	cmpeq	r2,r2,zero
    2e18:	1000031e 	bne	r2,zero,2e28 <vTaskDelete+0x68>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	11000604 	addi	r4,r2,24
    2e24:	00015f80 	call	15f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2e28:	e0bffd17 	ldw	r2,-12(fp)
    2e2c:	11400104 	addi	r5,r2,4
    2e30:	01020234 	movhi	r4,2056
    2e34:	213ecf04 	addi	r4,r4,-1220
    2e38:	000149c0 	call	149c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2e3c:	d0a02b17 	ldw	r2,-32596(gp)
    2e40:	10800044 	addi	r2,r2,1
    2e44:	d0a02b15 	stw	r2,-32596(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2e48:	d0a03317 	ldw	r2,-32564(gp)
    2e4c:	10800044 	addi	r2,r2,1
    2e50:	d0a03315 	stw	r2,-32564(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2e54:	00041680 	call	4168 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2e58:	d0a02f17 	ldw	r2,-32580(gp)
    2e5c:	1005003a 	cmpeq	r2,r2,zero
    2e60:	1000081e 	bne	r2,zero,2e84 <vTaskDelete+0xc4>
		{
			if( pxTCB == pxCurrentTCB )
    2e64:	d0e02a17 	ldw	r3,-32600(gp)
    2e68:	e0bffd17 	ldw	r2,-12(fp)
    2e6c:	10c0021e 	bne	r2,r3,2e78 <vTaskDelete+0xb8>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    2e70:	003b683a 	trap	0
    2e74:	00000306 	br	2e84 <vTaskDelete+0xc4>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    2e78:	00041140 	call	4114 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2e7c:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    2e80:	00041680 	call	4168 <vTaskExitCritical>
			}
		}
	}
    2e84:	e037883a 	mov	sp,fp
    2e88:	dfc00117 	ldw	ra,4(sp)
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00204 	addi	sp,sp,8
    2e94:	f800283a 	ret

00002e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2e98:	defffb04 	addi	sp,sp,-20
    2e9c:	dfc00415 	stw	ra,16(sp)
    2ea0:	df000315 	stw	fp,12(sp)
    2ea4:	df000304 	addi	fp,sp,12
    2ea8:	e13fff15 	stw	r4,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2eac:	e03ffd15 	stw	zero,-12(fp)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2eb0:	e0bfff17 	ldw	r2,-4(fp)
    2eb4:	1005003a 	cmpeq	r2,r2,zero
    2eb8:	10000c1e 	bne	r2,zero,2eec <vTaskDelay+0x54>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2ebc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2ec0:	d0e02d17 	ldw	r3,-32588(gp)
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	1885883a 	add	r2,r3,r2
    2ecc:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2ed0:	d0a02a17 	ldw	r2,-32600(gp)
    2ed4:	11000104 	addi	r4,r2,4
    2ed8:	00015f80 	call	15f8 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2edc:	e13ffe17 	ldw	r4,-8(fp)
    2ee0:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2ee4:	00030180 	call	3018 <xTaskResumeAll>
    2ee8:	e0bffd15 	stw	r2,-12(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2eec:	e0bffd17 	ldw	r2,-12(fp)
    2ef0:	1004c03a 	cmpne	r2,r2,zero
    2ef4:	1000011e 	bne	r2,zero,2efc <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
    2ef8:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2efc:	e037883a 	mov	sp,fp
    2f00:	dfc00117 	ldw	ra,4(sp)
    2f04:	df000017 	ldw	fp,0(sp)
    2f08:	dec00204 	addi	sp,sp,8
    2f0c:	f800283a 	ret

00002f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2f10:	defff804 	addi	sp,sp,-32
    2f14:	dfc00715 	stw	ra,28(sp)
    2f18:	df000615 	stw	fp,24(sp)
    2f1c:	df000604 	addi	fp,sp,24
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2f20:	d8000015 	stw	zero,0(sp)
    2f24:	d8000115 	stw	zero,4(sp)
    2f28:	d8000215 	stw	zero,8(sp)
    2f2c:	d8000315 	stw	zero,12(sp)
    2f30:	01000034 	movhi	r4,0
    2f34:	210e3d04 	addi	r4,r4,14580
    2f38:	01420034 	movhi	r5,2048
    2f3c:	29400d04 	addi	r5,r5,52
    2f40:	01900004 	movi	r6,16384
    2f44:	000f883a 	mov	r7,zero
    2f48:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    2f4c:	e0bfff15 	stw	r2,-4(fp)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2f50:	e0bfff17 	ldw	r2,-4(fp)
    2f54:	10800058 	cmpnei	r2,r2,1
    2f58:	1000021e 	bne	r2,zero,2f64 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
    2f5c:	000488c0 	call	488c <xTimerCreateTimerTask>
    2f60:	e0bfff15 	stw	r2,-4(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2f64:	e0bfff17 	ldw	r2,-4(fp)
    2f68:	10800058 	cmpnei	r2,r2,1
    2f6c:	10000a1e 	bne	r2,zero,2f98 <vTaskStartScheduler+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f70:	0005303a 	rdctl	r2,status
    2f74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f78:	e0fffe17 	ldw	r3,-8(fp)
    2f7c:	00bfff84 	movi	r2,-2
    2f80:	1884703a 	and	r2,r3,r2
    2f84:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2f88:	00800044 	movi	r2,1
    2f8c:	d0a02f15 	stw	r2,-32580(gp)
		xTickCount = ( TickType_t ) 0U;
    2f90:	d0202d15 	stw	zero,-32588(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f94:	00017dc0 	call	17dc <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    2f98:	e037883a 	mov	sp,fp
    2f9c:	dfc00117 	ldw	ra,4(sp)
    2fa0:	df000017 	ldw	fp,0(sp)
    2fa4:	dec00204 	addi	sp,sp,8
    2fa8:	f800283a 	ret

00002fac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2fac:	defffd04 	addi	sp,sp,-12
    2fb0:	dfc00215 	stw	ra,8(sp)
    2fb4:	df000115 	stw	fp,4(sp)
    2fb8:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2fbc:	0005303a 	rdctl	r2,status
    2fc0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fc4:	e0ffff17 	ldw	r3,-4(fp)
    2fc8:	00bfff84 	movi	r2,-2
    2fcc:	1884703a 	and	r2,r3,r2
    2fd0:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    2fd4:	d0202f15 	stw	zero,-32580(gp)
	vPortEndScheduler();
    2fd8:	00018140 	call	1814 <vPortEndScheduler>
}
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	dfc00117 	ldw	ra,4(sp)
    2fe4:	df000017 	ldw	fp,0(sp)
    2fe8:	dec00204 	addi	sp,sp,8
    2fec:	f800283a 	ret

00002ff0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2ff0:	deffff04 	addi	sp,sp,-4
    2ff4:	df000015 	stw	fp,0(sp)
    2ff8:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2ffc:	d0a03417 	ldw	r2,-32560(gp)
    3000:	10800044 	addi	r2,r2,1
    3004:	d0a03415 	stw	r2,-32560(gp)
}
    3008:	e037883a 	mov	sp,fp
    300c:	df000017 	ldw	fp,0(sp)
    3010:	dec00104 	addi	sp,sp,4
    3014:	f800283a 	ret

00003018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3018:	defffc04 	addi	sp,sp,-16
    301c:	dfc00315 	stw	ra,12(sp)
    3020:	df000215 	stw	fp,8(sp)
    3024:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3028:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    302c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    3030:	d0a03417 	ldw	r2,-32560(gp)
    3034:	10bfffc4 	addi	r2,r2,-1
    3038:	d0a03415 	stw	r2,-32560(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    303c:	d0a03417 	ldw	r2,-32560(gp)
    3040:	1004c03a 	cmpne	r2,r2,zero
    3044:	1000411e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3048:	d0a02c17 	ldw	r2,-32592(gp)
    304c:	1005003a 	cmpeq	r2,r2,zero
    3050:	10003e1e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3054:	00002306 	br	30e4 <xTaskResumeAll+0xcc>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3058:	00820234 	movhi	r2,2056
    305c:	10beca04 	addi	r2,r2,-1240
    3060:	10800317 	ldw	r2,12(r2)
    3064:	10800317 	ldw	r2,12(r2)
    3068:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    306c:	e0bfff17 	ldw	r2,-4(fp)
    3070:	11000604 	addi	r4,r2,24
    3074:	00015f80 	call	15f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3078:	e0bfff17 	ldw	r2,-4(fp)
    307c:	11000104 	addi	r4,r2,4
    3080:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3084:	e0bfff17 	ldw	r2,-4(fp)
    3088:	10c00b17 	ldw	r3,44(r2)
    308c:	d0a02e17 	ldw	r2,-32584(gp)
    3090:	10c0032e 	bgeu	r2,r3,30a0 <xTaskResumeAll+0x88>
    3094:	e0bfff17 	ldw	r2,-4(fp)
    3098:	10800b17 	ldw	r2,44(r2)
    309c:	d0a02e15 	stw	r2,-32584(gp)
    30a0:	e0bfff17 	ldw	r2,-4(fp)
    30a4:	10800b17 	ldw	r2,44(r2)
    30a8:	10800524 	muli	r2,r2,20
    30ac:	1007883a 	mov	r3,r2
    30b0:	00820234 	movhi	r2,2056
    30b4:	10be8404 	addi	r2,r2,-1520
    30b8:	1889883a 	add	r4,r3,r2
    30bc:	e0bfff17 	ldw	r2,-4(fp)
    30c0:	11400104 	addi	r5,r2,4
    30c4:	000149c0 	call	149c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	10c00b17 	ldw	r3,44(r2)
    30d0:	d0a02a17 	ldw	r2,-32600(gp)
    30d4:	10800b17 	ldw	r2,44(r2)
    30d8:	18800236 	bltu	r3,r2,30e4 <xTaskResumeAll+0xcc>
					{
						xYieldPending = pdTRUE;
    30dc:	00800044 	movi	r2,1
    30e0:	d0a03115 	stw	r2,-32572(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    30e4:	00820234 	movhi	r2,2056
    30e8:	10beca04 	addi	r2,r2,-1240
    30ec:	10800017 	ldw	r2,0(r2)
    30f0:	1004c03a 	cmpne	r2,r2,zero
    30f4:	103fd81e 	bne	r2,zero,3058 <xTaskResumeAll+0x40>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    30f8:	d0a03017 	ldw	r2,-32576(gp)
    30fc:	1005003a 	cmpeq	r2,r2,zero
    3100:	10000c1e 	bne	r2,zero,3134 <xTaskResumeAll+0x11c>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3104:	00000806 	br	3128 <xTaskResumeAll+0x110>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3108:	00031dc0 	call	31dc <xTaskIncrementTick>
    310c:	1005003a 	cmpeq	r2,r2,zero
    3110:	1000021e 	bne	r2,zero,311c <xTaskResumeAll+0x104>
						{
							xYieldPending = pdTRUE;
    3114:	00800044 	movi	r2,1
    3118:	d0a03115 	stw	r2,-32572(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    311c:	d0a03017 	ldw	r2,-32576(gp)
    3120:	10bfffc4 	addi	r2,r2,-1
    3124:	d0a03015 	stw	r2,-32576(gp)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3128:	d0a03017 	ldw	r2,-32576(gp)
    312c:	1004c03a 	cmpne	r2,r2,zero
    3130:	103ff51e 	bne	r2,zero,3108 <xTaskResumeAll+0xf0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3134:	d0a03117 	ldw	r2,-32572(gp)
    3138:	10800058 	cmpnei	r2,r2,1
    313c:	1000031e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3140:	00800044 	movi	r2,1
    3144:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3148:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    314c:	00041680 	call	4168 <vTaskExitCritical>

	return xAlreadyYielded;
    3150:	e0bffe17 	ldw	r2,-8(fp)
}
    3154:	e037883a 	mov	sp,fp
    3158:	dfc00117 	ldw	ra,4(sp)
    315c:	df000017 	ldw	fp,0(sp)
    3160:	dec00204 	addi	sp,sp,8
    3164:	f800283a 	ret

00003168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3168:	defffe04 	addi	sp,sp,-8
    316c:	df000115 	stw	fp,4(sp)
    3170:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    3174:	d0a02d17 	ldw	r2,-32588(gp)
    3178:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    317c:	e0bfff17 	ldw	r2,-4(fp)
}
    3180:	e037883a 	mov	sp,fp
    3184:	df000017 	ldw	fp,0(sp)
    3188:	dec00104 	addi	sp,sp,4
    318c:	f800283a 	ret

00003190 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3190:	defffd04 	addi	sp,sp,-12
    3194:	df000215 	stw	fp,8(sp)
    3198:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    319c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
    31a0:	d0a02d17 	ldw	r2,-32588(gp)
    31a4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31a8:	e0bfff17 	ldw	r2,-4(fp)
}
    31ac:	e037883a 	mov	sp,fp
    31b0:	df000017 	ldw	fp,0(sp)
    31b4:	dec00104 	addi	sp,sp,4
    31b8:	f800283a 	ret

000031bc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    31bc:	deffff04 	addi	sp,sp,-4
    31c0:	df000015 	stw	fp,0(sp)
    31c4:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    31c8:	d0a02c17 	ldw	r2,-32592(gp)
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00104 	addi	sp,sp,4
    31d8:	f800283a 	ret

000031dc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    31dc:	defff804 	addi	sp,sp,-32
    31e0:	dfc00715 	stw	ra,28(sp)
    31e4:	df000615 	stw	fp,24(sp)
    31e8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    31ec:	e03ffc15 	stw	zero,-16(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    31f0:	d0a03417 	ldw	r2,-32560(gp)
    31f4:	1004c03a 	cmpne	r2,r2,zero
    31f8:	1000611e 	bne	r2,zero,3380 <xTaskIncrementTick+0x1a4>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    31fc:	d0a02d17 	ldw	r2,-32588(gp)
    3200:	10800044 	addi	r2,r2,1
    3204:	d0a02d15 	stw	r2,-32588(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3208:	d0a02d17 	ldw	r2,-32588(gp)
    320c:	e0bffb15 	stw	r2,-20(fp)

			if( xConstTickCount == ( TickType_t ) 0U )
    3210:	e0bffb17 	ldw	r2,-20(fp)
    3214:	1004c03a 	cmpne	r2,r2,zero
    3218:	10000a1e 	bne	r2,zero,3244 <xTaskIncrementTick+0x68>
			{
				taskSWITCH_DELAYED_LISTS();
    321c:	d0a03517 	ldw	r2,-32556(gp)
    3220:	e0bffa15 	stw	r2,-24(fp)
    3224:	d0a03617 	ldw	r2,-32552(gp)
    3228:	d0a03515 	stw	r2,-32556(gp)
    322c:	e0bffa17 	ldw	r2,-24(fp)
    3230:	d0a03615 	stw	r2,-32552(gp)
    3234:	d0a03217 	ldw	r2,-32568(gp)
    3238:	10800044 	addi	r2,r2,1
    323c:	d0a03215 	stw	r2,-32568(gp)
    3240:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3244:	d0e00317 	ldw	r3,-32756(gp)
    3248:	e0bffb17 	ldw	r2,-20(fp)
    324c:	10c03f36 	bltu	r2,r3,334c <xTaskIncrementTick+0x170>
    3250:	00000006 	br	3254 <xTaskIncrementTick+0x78>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3254:	d0a03517 	ldw	r2,-32556(gp)
    3258:	10800017 	ldw	r2,0(r2)
    325c:	1004c03a 	cmpne	r2,r2,zero
    3260:	1000031e 	bne	r2,zero,3270 <xTaskIncrementTick+0x94>
    3264:	00800044 	movi	r2,1
    3268:	e0bfff05 	stb	r2,-4(fp)
    326c:	00000106 	br	3274 <xTaskIncrementTick+0x98>
    3270:	e03fff05 	stb	zero,-4(fp)
    3274:	e0bfff03 	ldbu	r2,-4(fp)
    3278:	1005003a 	cmpeq	r2,r2,zero
    327c:	1000031e 	bne	r2,zero,328c <xTaskIncrementTick+0xb0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3280:	00bfffc4 	movi	r2,-1
    3284:	d0a00315 	stw	r2,-32756(gp)
						break;
    3288:	00003006 	br	334c <xTaskIncrementTick+0x170>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    328c:	d0a03517 	ldw	r2,-32556(gp)
    3290:	10800317 	ldw	r2,12(r2)
    3294:	10800317 	ldw	r2,12(r2)
    3298:	e0bffe15 	stw	r2,-8(fp)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    329c:	e0bffe17 	ldw	r2,-8(fp)
    32a0:	10800117 	ldw	r2,4(r2)
    32a4:	e0bffd15 	stw	r2,-12(fp)

						if( xConstTickCount < xItemValue )
    32a8:	e0fffb17 	ldw	r3,-20(fp)
    32ac:	e0bffd17 	ldw	r2,-12(fp)
    32b0:	1880032e 	bgeu	r3,r2,32c0 <xTaskIncrementTick+0xe4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	d0a00315 	stw	r2,-32756(gp)
							break;
    32bc:	00002306 	br	334c <xTaskIncrementTick+0x170>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    32c0:	e0bffe17 	ldw	r2,-8(fp)
    32c4:	11000104 	addi	r4,r2,4
    32c8:	00015f80 	call	15f8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	10800a17 	ldw	r2,40(r2)
    32d4:	1005003a 	cmpeq	r2,r2,zero
    32d8:	1000031e 	bne	r2,zero,32e8 <xTaskIncrementTick+0x10c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	11000604 	addi	r4,r2,24
    32e4:	00015f80 	call	15f8 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    32e8:	e0bffe17 	ldw	r2,-8(fp)
    32ec:	10c00b17 	ldw	r3,44(r2)
    32f0:	d0a02e17 	ldw	r2,-32584(gp)
    32f4:	10c0032e 	bgeu	r2,r3,3304 <xTaskIncrementTick+0x128>
    32f8:	e0bffe17 	ldw	r2,-8(fp)
    32fc:	10800b17 	ldw	r2,44(r2)
    3300:	d0a02e15 	stw	r2,-32584(gp)
    3304:	e0bffe17 	ldw	r2,-8(fp)
    3308:	10800b17 	ldw	r2,44(r2)
    330c:	10800524 	muli	r2,r2,20
    3310:	1007883a 	mov	r3,r2
    3314:	00820234 	movhi	r2,2056
    3318:	10be8404 	addi	r2,r2,-1520
    331c:	1889883a 	add	r4,r3,r2
    3320:	e0bffe17 	ldw	r2,-8(fp)
    3324:	11400104 	addi	r5,r2,4
    3328:	000149c0 	call	149c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    332c:	e0bffe17 	ldw	r2,-8(fp)
    3330:	10c00b17 	ldw	r3,44(r2)
    3334:	d0a02a17 	ldw	r2,-32600(gp)
    3338:	10800b17 	ldw	r2,44(r2)
    333c:	18bfc536 	bltu	r3,r2,3254 <xTaskIncrementTick+0x78>
							{
								xSwitchRequired = pdTRUE;
    3340:	00800044 	movi	r2,1
    3344:	e0bffc15 	stw	r2,-16(fp)
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    3348:	003fc206 	br	3254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    334c:	d0a02a17 	ldw	r2,-32600(gp)
    3350:	10800b17 	ldw	r2,44(r2)
    3354:	10800524 	muli	r2,r2,20
    3358:	1007883a 	mov	r3,r2
    335c:	00820234 	movhi	r2,2056
    3360:	10be8404 	addi	r2,r2,-1520
    3364:	1885883a 	add	r2,r3,r2
    3368:	10800017 	ldw	r2,0(r2)
    336c:	108000b0 	cmpltui	r2,r2,2
    3370:	1000061e 	bne	r2,zero,338c <xTaskIncrementTick+0x1b0>
			{
				xSwitchRequired = pdTRUE;
    3374:	00800044 	movi	r2,1
    3378:	e0bffc15 	stw	r2,-16(fp)
    337c:	00000306 	br	338c <xTaskIncrementTick+0x1b0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3380:	d0a03017 	ldw	r2,-32576(gp)
    3384:	10800044 	addi	r2,r2,1
    3388:	d0a03015 	stw	r2,-32576(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    338c:	d0a03117 	ldw	r2,-32572(gp)
    3390:	1005003a 	cmpeq	r2,r2,zero
    3394:	1000021e 	bne	r2,zero,33a0 <xTaskIncrementTick+0x1c4>
		{
			xSwitchRequired = pdTRUE;
    3398:	00800044 	movi	r2,1
    339c:	e0bffc15 	stw	r2,-16(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    33a0:	e0bffc17 	ldw	r2,-16(fp)
}
    33a4:	e037883a 	mov	sp,fp
    33a8:	dfc00117 	ldw	ra,4(sp)
    33ac:	df000017 	ldw	fp,0(sp)
    33b0:	dec00204 	addi	sp,sp,8
    33b4:	f800283a 	ret

000033b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    33b8:	defffd04 	addi	sp,sp,-12
    33bc:	dfc00215 	stw	ra,8(sp)
    33c0:	df000115 	stw	fp,4(sp)
    33c4:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    33c8:	d0a03417 	ldw	r2,-32560(gp)
    33cc:	1005003a 	cmpeq	r2,r2,zero
    33d0:	1000031e 	bne	r2,zero,33e0 <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    33d4:	00800044 	movi	r2,1
    33d8:	d0a03115 	stw	r2,-32572(gp)
    33dc:	00003d06 	br	34d4 <vTaskSwitchContext+0x11c>
	}
	else
	{
		xYieldPending = pdFALSE;
    33e0:	d0203115 	stw	zero,-32572(gp)
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    33e4:	d0a02a17 	ldw	r2,-32600(gp)
    33e8:	10c00017 	ldw	r3,0(r2)
    33ec:	d0a02a17 	ldw	r2,-32600(gp)
    33f0:	10800c17 	ldw	r2,48(r2)
    33f4:	10c00436 	bltu	r2,r3,3408 <vTaskSwitchContext+0x50>
    33f8:	d1202a17 	ldw	r4,-32600(gp)
    33fc:	d0a02a17 	ldw	r2,-32600(gp)
    3400:	11400d04 	addi	r5,r2,52
    3404:	00016900 	call	1690 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    3408:	d0a02a17 	ldw	r2,-32600(gp)
    340c:	11000c17 	ldw	r4,48(r2)
    3410:	01420034 	movhi	r5,2048
    3414:	29400e44 	addi	r5,r5,57
    3418:	01800504 	movi	r6,20
    341c:	00080000 	call	8000 <memcmp>
    3420:	1005003a 	cmpeq	r2,r2,zero
    3424:	1000081e 	bne	r2,zero,3448 <vTaskSwitchContext+0x90>
    3428:	d1202a17 	ldw	r4,-32600(gp)
    342c:	d0a02a17 	ldw	r2,-32600(gp)
    3430:	11400d04 	addi	r5,r2,52
    3434:	00016900 	call	1690 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3438:	00000306 	br	3448 <vTaskSwitchContext+0x90>
    343c:	d0a02e17 	ldw	r2,-32584(gp)
    3440:	10bfffc4 	addi	r2,r2,-1
    3444:	d0a02e15 	stw	r2,-32584(gp)
    3448:	d0a02e17 	ldw	r2,-32584(gp)
    344c:	10800524 	muli	r2,r2,20
    3450:	1007883a 	mov	r3,r2
    3454:	00820234 	movhi	r2,2056
    3458:	10be8404 	addi	r2,r2,-1520
    345c:	1885883a 	add	r2,r3,r2
    3460:	10800017 	ldw	r2,0(r2)
    3464:	1005003a 	cmpeq	r2,r2,zero
    3468:	103ff41e 	bne	r2,zero,343c <vTaskSwitchContext+0x84>
    346c:	d0a02e17 	ldw	r2,-32584(gp)
    3470:	10800524 	muli	r2,r2,20
    3474:	1007883a 	mov	r3,r2
    3478:	00820234 	movhi	r2,2056
    347c:	10be8404 	addi	r2,r2,-1520
    3480:	1885883a 	add	r2,r3,r2
    3484:	e0bfff15 	stw	r2,-4(fp)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	10800117 	ldw	r2,4(r2)
    3490:	10c00117 	ldw	r3,4(r2)
    3494:	e0bfff17 	ldw	r2,-4(fp)
    3498:	10c00115 	stw	r3,4(r2)
    349c:	e0bfff17 	ldw	r2,-4(fp)
    34a0:	10c00117 	ldw	r3,4(r2)
    34a4:	e0bfff17 	ldw	r2,-4(fp)
    34a8:	10800204 	addi	r2,r2,8
    34ac:	1880051e 	bne	r3,r2,34c4 <vTaskSwitchContext+0x10c>
    34b0:	e0bfff17 	ldw	r2,-4(fp)
    34b4:	10800117 	ldw	r2,4(r2)
    34b8:	10c00117 	ldw	r3,4(r2)
    34bc:	e0bfff17 	ldw	r2,-4(fp)
    34c0:	10c00115 	stw	r3,4(r2)
    34c4:	e0bfff17 	ldw	r2,-4(fp)
    34c8:	10800117 	ldw	r2,4(r2)
    34cc:	10800317 	ldw	r2,12(r2)
    34d0:	d0a02a15 	stw	r2,-32600(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    34d4:	e037883a 	mov	sp,fp
    34d8:	dfc00117 	ldw	ra,4(sp)
    34dc:	df000017 	ldw	fp,0(sp)
    34e0:	dec00204 	addi	sp,sp,8
    34e4:	f800283a 	ret

000034e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    34e8:	defffb04 	addi	sp,sp,-20
    34ec:	dfc00415 	stw	ra,16(sp)
    34f0:	df000315 	stw	fp,12(sp)
    34f4:	df000304 	addi	fp,sp,12
    34f8:	e13ffe15 	stw	r4,-8(fp)
    34fc:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3500:	d0a02a17 	ldw	r2,-32600(gp)
    3504:	11400604 	addi	r5,r2,24
    3508:	e13ffe17 	ldw	r4,-8(fp)
    350c:	00015240 	call	1524 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3510:	d0a02a17 	ldw	r2,-32600(gp)
    3514:	11000104 	addi	r4,r2,4
    3518:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    351c:	d0e02d17 	ldw	r3,-32588(gp)
    3520:	e0bfff17 	ldw	r2,-4(fp)
    3524:	1885883a 	add	r2,r3,r2
    3528:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    352c:	e13ffd17 	ldw	r4,-12(fp)
    3530:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3534:	e037883a 	mov	sp,fp
    3538:	dfc00117 	ldw	ra,4(sp)
    353c:	df000017 	ldw	fp,0(sp)
    3540:	dec00204 	addi	sp,sp,8
    3544:	f800283a 	ret

00003548 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3548:	defffa04 	addi	sp,sp,-24
    354c:	dfc00515 	stw	ra,20(sp)
    3550:	df000415 	stw	fp,16(sp)
    3554:	df000404 	addi	fp,sp,16
    3558:	e13ffd15 	stw	r4,-12(fp)
    355c:	e17ffe15 	stw	r5,-8(fp)
    3560:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3564:	d0e02a17 	ldw	r3,-32600(gp)
    3568:	e0bffe17 	ldw	r2,-8(fp)
    356c:	10a00034 	orhi	r2,r2,32768
    3570:	18800615 	stw	r2,24(r3)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3574:	d0a02a17 	ldw	r2,-32600(gp)
    3578:	11400604 	addi	r5,r2,24
    357c:	e13ffd17 	ldw	r4,-12(fp)
    3580:	000149c0 	call	149c <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3584:	d0a02a17 	ldw	r2,-32600(gp)
    3588:	11000104 	addi	r4,r2,4
    358c:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3590:	d0e02d17 	ldw	r3,-32588(gp)
    3594:	e0bfff17 	ldw	r2,-4(fp)
    3598:	1885883a 	add	r2,r3,r2
    359c:	e0bffc15 	stw	r2,-16(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    35a0:	e13ffc17 	ldw	r4,-16(fp)
    35a4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35a8:	e037883a 	mov	sp,fp
    35ac:	dfc00117 	ldw	ra,4(sp)
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00204 	addi	sp,sp,8
    35b8:	f800283a 	ret

000035bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    35bc:	defffb04 	addi	sp,sp,-20
    35c0:	dfc00415 	stw	ra,16(sp)
    35c4:	df000315 	stw	fp,12(sp)
    35c8:	df000304 	addi	fp,sp,12
    35cc:	e13ffe15 	stw	r4,-8(fp)
    35d0:	e17fff15 	stw	r5,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    35d4:	d0a02a17 	ldw	r2,-32600(gp)
    35d8:	11400604 	addi	r5,r2,24
    35dc:	e13ffe17 	ldw	r4,-8(fp)
    35e0:	000149c0 	call	149c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    35e4:	d0a02a17 	ldw	r2,-32600(gp)
    35e8:	11000104 	addi	r4,r2,4
    35ec:	00015f80 	call	15f8 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    35f0:	d0e02d17 	ldw	r3,-32588(gp)
    35f4:	e0bfff17 	ldw	r2,-4(fp)
    35f8:	1885883a 	add	r2,r3,r2
    35fc:	e0bffd15 	stw	r2,-12(fp)

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3600:	e13ffd17 	ldw	r4,-12(fp)
    3604:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
    3608:	e037883a 	mov	sp,fp
    360c:	dfc00117 	ldw	ra,4(sp)
    3610:	df000017 	ldw	fp,0(sp)
    3614:	dec00204 	addi	sp,sp,8
    3618:	f800283a 	ret

0000361c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    361c:	defffb04 	addi	sp,sp,-20
    3620:	dfc00415 	stw	ra,16(sp)
    3624:	df000315 	stw	fp,12(sp)
    3628:	df000304 	addi	fp,sp,12
    362c:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3630:	e0bfff17 	ldw	r2,-4(fp)
    3634:	10800317 	ldw	r2,12(r2)
    3638:	10800317 	ldw	r2,12(r2)
    363c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3640:	e0bffe17 	ldw	r2,-8(fp)
    3644:	11000604 	addi	r4,r2,24
    3648:	00015f80 	call	15f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    364c:	d0a03417 	ldw	r2,-32560(gp)
    3650:	1004c03a 	cmpne	r2,r2,zero
    3654:	1000151e 	bne	r2,zero,36ac <xTaskRemoveFromEventList+0x90>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	11000104 	addi	r4,r2,4
    3660:	00015f80 	call	15f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3664:	e0bffe17 	ldw	r2,-8(fp)
    3668:	10c00b17 	ldw	r3,44(r2)
    366c:	d0a02e17 	ldw	r2,-32584(gp)
    3670:	10c0032e 	bgeu	r2,r3,3680 <xTaskRemoveFromEventList+0x64>
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800b17 	ldw	r2,44(r2)
    367c:	d0a02e15 	stw	r2,-32584(gp)
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800b17 	ldw	r2,44(r2)
    3688:	10800524 	muli	r2,r2,20
    368c:	1007883a 	mov	r3,r2
    3690:	00820234 	movhi	r2,2056
    3694:	10be8404 	addi	r2,r2,-1520
    3698:	1889883a 	add	r4,r3,r2
    369c:	e0bffe17 	ldw	r2,-8(fp)
    36a0:	11400104 	addi	r5,r2,4
    36a4:	000149c0 	call	149c <vListInsertEnd>
    36a8:	00000506 	br	36c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    36ac:	e0bffe17 	ldw	r2,-8(fp)
    36b0:	11400604 	addi	r5,r2,24
    36b4:	01020234 	movhi	r4,2056
    36b8:	213eca04 	addi	r4,r4,-1240
    36bc:	000149c0 	call	149c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    36c0:	e0bffe17 	ldw	r2,-8(fp)
    36c4:	10c00b17 	ldw	r3,44(r2)
    36c8:	d0a02a17 	ldw	r2,-32600(gp)
    36cc:	10800b17 	ldw	r2,44(r2)
    36d0:	10c0052e 	bgeu	r2,r3,36e8 <xTaskRemoveFromEventList+0xcc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    36d4:	00800044 	movi	r2,1
    36d8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    36dc:	00800044 	movi	r2,1
    36e0:	d0a03115 	stw	r2,-32572(gp)
    36e4:	00000106 	br	36ec <xTaskRemoveFromEventList+0xd0>
	}
	else
	{
		xReturn = pdFALSE;
    36e8:	e03ffd15 	stw	zero,-12(fp)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    36ec:	e0bffd17 	ldw	r2,-12(fp)
}
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3704:	defffa04 	addi	sp,sp,-24
    3708:	dfc00515 	stw	ra,20(sp)
    370c:	df000415 	stw	fp,16(sp)
    3710:	df000404 	addi	fp,sp,16
    3714:	e13ffe15 	stw	r4,-8(fp)
    3718:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    371c:	e0bfff17 	ldw	r2,-4(fp)
    3720:	10e00034 	orhi	r3,r2,32768
    3724:	e0bffe17 	ldw	r2,-8(fp)
    3728:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    372c:	e0bffe17 	ldw	r2,-8(fp)
    3730:	10800317 	ldw	r2,12(r2)
    3734:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3738:	e13ffe17 	ldw	r4,-8(fp)
    373c:	00015f80 	call	15f8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3740:	e0bffd17 	ldw	r2,-12(fp)
    3744:	11000104 	addi	r4,r2,4
    3748:	00015f80 	call	15f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    374c:	e0bffd17 	ldw	r2,-12(fp)
    3750:	10c00b17 	ldw	r3,44(r2)
    3754:	d0a02e17 	ldw	r2,-32584(gp)
    3758:	10c0032e 	bgeu	r2,r3,3768 <xTaskRemoveFromUnorderedEventList+0x64>
    375c:	e0bffd17 	ldw	r2,-12(fp)
    3760:	10800b17 	ldw	r2,44(r2)
    3764:	d0a02e15 	stw	r2,-32584(gp)
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	10800b17 	ldw	r2,44(r2)
    3770:	10800524 	muli	r2,r2,20
    3774:	1007883a 	mov	r3,r2
    3778:	00820234 	movhi	r2,2056
    377c:	10be8404 	addi	r2,r2,-1520
    3780:	1889883a 	add	r4,r3,r2
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	11400104 	addi	r5,r2,4
    378c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3790:	e0bffd17 	ldw	r2,-12(fp)
    3794:	10c00b17 	ldw	r3,44(r2)
    3798:	d0a02a17 	ldw	r2,-32600(gp)
    379c:	10800b17 	ldw	r2,44(r2)
    37a0:	10c0052e 	bgeu	r2,r3,37b8 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    37a4:	00800044 	movi	r2,1
    37a8:	e0bffc15 	stw	r2,-16(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    37ac:	00800044 	movi	r2,1
    37b0:	d0a03115 	stw	r2,-32572(gp)
    37b4:	00000106 	br	37bc <xTaskRemoveFromUnorderedEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    37b8:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
    37bc:	e0bffc17 	ldw	r2,-16(fp)
}
    37c0:	e037883a 	mov	sp,fp
    37c4:	dfc00117 	ldw	ra,4(sp)
    37c8:	df000017 	ldw	fp,0(sp)
    37cc:	dec00204 	addi	sp,sp,8
    37d0:	f800283a 	ret

000037d4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    37d4:	defffe04 	addi	sp,sp,-8
    37d8:	df000115 	stw	fp,4(sp)
    37dc:	df000104 	addi	fp,sp,4
    37e0:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    37e4:	d0e03217 	ldw	r3,-32568(gp)
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
    37f0:	d0e02d17 	ldw	r3,-32588(gp)
    37f4:	e0bfff17 	ldw	r2,-4(fp)
    37f8:	10c00115 	stw	r3,4(r2)
}
    37fc:	e037883a 	mov	sp,fp
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00104 	addi	sp,sp,4
    3808:	f800283a 	ret

0000380c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    380c:	defffa04 	addi	sp,sp,-24
    3810:	dfc00515 	stw	ra,20(sp)
    3814:	df000415 	stw	fp,16(sp)
    3818:	df000404 	addi	fp,sp,16
    381c:	e13ffe15 	stw	r4,-8(fp)
    3820:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3824:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3828:	d0a02d17 	ldw	r2,-32588(gp)
    382c:	e0bffc15 	stw	r2,-16(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3830:	e0bffe17 	ldw	r2,-8(fp)
    3834:	10c00017 	ldw	r3,0(r2)
    3838:	d0a03217 	ldw	r2,-32568(gp)
    383c:	18800726 	beq	r3,r2,385c <xTaskCheckForTimeOut+0x50>
    3840:	e0bffe17 	ldw	r2,-8(fp)
    3844:	10c00117 	ldw	r3,4(r2)
    3848:	e0bffc17 	ldw	r2,-16(fp)
    384c:	10c00336 	bltu	r2,r3,385c <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3850:	00800044 	movi	r2,1
    3854:	e0bffd15 	stw	r2,-12(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3858:	00001606 	br	38b4 <xTaskCheckForTimeOut+0xa8>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    385c:	e0bffe17 	ldw	r2,-8(fp)
    3860:	10c00117 	ldw	r3,4(r2)
    3864:	e0bffc17 	ldw	r2,-16(fp)
    3868:	10c7c83a 	sub	r3,r2,r3
    386c:	e0bfff17 	ldw	r2,-4(fp)
    3870:	10800017 	ldw	r2,0(r2)
    3874:	18800d2e 	bgeu	r3,r2,38ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3878:	e0bfff17 	ldw	r2,-4(fp)
    387c:	11000017 	ldw	r4,0(r2)
    3880:	e0bffe17 	ldw	r2,-8(fp)
    3884:	10c00117 	ldw	r3,4(r2)
    3888:	e0bffc17 	ldw	r2,-16(fp)
    388c:	10c5c83a 	sub	r2,r2,r3
    3890:	2087c83a 	sub	r3,r4,r2
    3894:	e0bfff17 	ldw	r2,-4(fp)
    3898:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
    389c:	e13ffe17 	ldw	r4,-8(fp)
    38a0:	00037d40 	call	37d4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    38a4:	e03ffd15 	stw	zero,-12(fp)
    38a8:	00000206 	br	38b4 <xTaskCheckForTimeOut+0xa8>
		}
		else
		{
			xReturn = pdTRUE;
    38ac:	00800044 	movi	r2,1
    38b0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
    38b4:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    38b8:	e0bffd17 	ldw	r2,-12(fp)
}
    38bc:	e037883a 	mov	sp,fp
    38c0:	dfc00117 	ldw	ra,4(sp)
    38c4:	df000017 	ldw	fp,0(sp)
    38c8:	dec00204 	addi	sp,sp,8
    38cc:	f800283a 	ret

000038d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    38d0:	deffff04 	addi	sp,sp,-4
    38d4:	df000015 	stw	fp,0(sp)
    38d8:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
    38dc:	00800044 	movi	r2,1
    38e0:	d0a03115 	stw	r2,-32572(gp)
}
    38e4:	e037883a 	mov	sp,fp
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00104 	addi	sp,sp,4
    38f0:	f800283a 	ret

000038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    38f4:	defffd04 	addi	sp,sp,-12
    38f8:	dfc00215 	stw	ra,8(sp)
    38fc:	df000115 	stw	fp,4(sp)
    3900:	df000104 	addi	fp,sp,4
    3904:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3908:	0003af40 	call	3af4 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    390c:	003ffe06 	br	3908 <prvIdleTask+0x14>

00003910 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3910:	defff804 	addi	sp,sp,-32
    3914:	dfc00715 	stw	ra,28(sp)
    3918:	df000615 	stw	fp,24(sp)
    391c:	df000604 	addi	fp,sp,24
    3920:	e13ffb15 	stw	r4,-20(fp)
    3924:	e17ffc15 	stw	r5,-16(fp)
    3928:	e1bffd15 	stw	r6,-12(fp)
    392c:	e1fffe15 	stw	r7,-8(fp)
    3930:	e0800217 	ldw	r2,8(fp)
    3934:	e0bfff0d 	sth	r2,-4(fp)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3938:	e03ffa15 	stw	zero,-24(fp)
    393c:	00001506 	br	3994 <prvInitialiseTCBVariables+0x84>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3940:	e13ffa17 	ldw	r4,-24(fp)
    3944:	e0fffa17 	ldw	r3,-24(fp)
    3948:	e0bffc17 	ldw	r2,-16(fp)
    394c:	1885883a 	add	r2,r3,r2
    3950:	10c00003 	ldbu	r3,0(r2)
    3954:	e0bffb17 	ldw	r2,-20(fp)
    3958:	2085883a 	add	r2,r4,r2
    395c:	10800d04 	addi	r2,r2,52
    3960:	10c00005 	stb	r3,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3964:	e0fffa17 	ldw	r3,-24(fp)
    3968:	e0bffc17 	ldw	r2,-16(fp)
    396c:	1885883a 	add	r2,r3,r2
    3970:	10800003 	ldbu	r2,0(r2)
    3974:	10803fcc 	andi	r2,r2,255
    3978:	1080201c 	xori	r2,r2,128
    397c:	10bfe004 	addi	r2,r2,-128
    3980:	1005003a 	cmpeq	r2,r2,zero
    3984:	1000061e 	bne	r2,zero,39a0 <prvInitialiseTCBVariables+0x90>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3988:	e0bffa17 	ldw	r2,-24(fp)
    398c:	10800044 	addi	r2,r2,1
    3990:	e0bffa15 	stw	r2,-24(fp)
    3994:	e0bffa17 	ldw	r2,-24(fp)
    3998:	10800230 	cmpltui	r2,r2,8
    399c:	103fe81e 	bne	r2,zero,3940 <prvInitialiseTCBVariables+0x30>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    39a0:	e0bffb17 	ldw	r2,-20(fp)
    39a4:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    39a8:	e0bffd17 	ldw	r2,-12(fp)
    39ac:	10800330 	cmpltui	r2,r2,12
    39b0:	1000021e 	bne	r2,zero,39bc <prvInitialiseTCBVariables+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    39b4:	008002c4 	movi	r2,11
    39b8:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    39bc:	e0fffb17 	ldw	r3,-20(fp)
    39c0:	e0bffd17 	ldw	r2,-12(fp)
    39c4:	18800b15 	stw	r2,44(r3)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    39c8:	e0fffb17 	ldw	r3,-20(fp)
    39cc:	e0bffd17 	ldw	r2,-12(fp)
    39d0:	18801015 	stw	r2,64(r3)
		pxTCB->uxMutexesHeld = 0;
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	11000104 	addi	r4,r2,4
    39e4:	00014740 	call	1474 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    39e8:	e0bffb17 	ldw	r2,-20(fp)
    39ec:	11000604 	addi	r4,r2,24
    39f0:	00014740 	call	1474 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    39f4:	e0fffb17 	ldw	r3,-20(fp)
    39f8:	e0bffb17 	ldw	r2,-20(fp)
    39fc:	18800415 	stw	r2,16(r3)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a00:	00c00304 	movi	r3,12
    3a04:	e0bffd17 	ldw	r2,-12(fp)
    3a08:	1887c83a 	sub	r3,r3,r2
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3a14:	e0fffb17 	ldw	r3,-20(fp)
    3a18:	e0bffb17 	ldw	r2,-20(fp)
    3a1c:	18800915 	stw	r2,36(r3)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10000f15 	stw	zero,60(r2)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    3a28:	e0bffb17 	ldw	r2,-20(fp)
    3a2c:	10001215 	stw	zero,72(r2)
		pxTCB->eNotifyState = eNotWaitingNotification;
    3a30:	e0bffb17 	ldw	r2,-20(fp)
    3a34:	10001315 	stw	zero,76(r2)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    3a38:	e037883a 	mov	sp,fp
    3a3c:	dfc00117 	ldw	ra,4(sp)
    3a40:	df000017 	ldw	fp,0(sp)
    3a44:	dec00204 	addi	sp,sp,8
    3a48:	f800283a 	ret

00003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3a4c:	defffd04 	addi	sp,sp,-12
    3a50:	dfc00215 	stw	ra,8(sp)
    3a54:	df000115 	stw	fp,4(sp)
    3a58:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a5c:	e03fff15 	stw	zero,-4(fp)
    3a60:	00000a06 	br	3a8c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a64:	e0bfff17 	ldw	r2,-4(fp)
    3a68:	10800524 	muli	r2,r2,20
    3a6c:	1007883a 	mov	r3,r2
    3a70:	00820234 	movhi	r2,2056
    3a74:	10be8404 	addi	r2,r2,-1520
    3a78:	1889883a 	add	r4,r3,r2
    3a7c:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10800044 	addi	r2,r2,1
    3a88:	e0bfff15 	stw	r2,-4(fp)
    3a8c:	e0bfff17 	ldw	r2,-4(fp)
    3a90:	10800330 	cmpltui	r2,r2,12
    3a94:	103ff31e 	bne	r2,zero,3a64 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3a98:	01020234 	movhi	r4,2056
    3a9c:	213ec004 	addi	r4,r4,-1280
    3aa0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3aa4:	01020234 	movhi	r4,2056
    3aa8:	213ec504 	addi	r4,r4,-1260
    3aac:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3ab0:	01020234 	movhi	r4,2056
    3ab4:	213eca04 	addi	r4,r4,-1240
    3ab8:	00014040 	call	1404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3abc:	01020234 	movhi	r4,2056
    3ac0:	213ecf04 	addi	r4,r4,-1220
    3ac4:	00014040 	call	1404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3ac8:	00820234 	movhi	r2,2056
    3acc:	10bec004 	addi	r2,r2,-1280
    3ad0:	d0a03515 	stw	r2,-32556(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ad4:	00820234 	movhi	r2,2056
    3ad8:	10bec504 	addi	r2,r2,-1260
    3adc:	d0a03615 	stw	r2,-32552(gp)
}
    3ae0:	e037883a 	mov	sp,fp
    3ae4:	dfc00117 	ldw	ra,4(sp)
    3ae8:	df000017 	ldw	fp,0(sp)
    3aec:	dec00204 	addi	sp,sp,8
    3af0:	f800283a 	ret

00003af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3af4:	defffc04 	addi	sp,sp,-16
    3af8:	dfc00315 	stw	ra,12(sp)
    3afc:	df000215 	stw	fp,8(sp)
    3b00:	df000204 	addi	fp,sp,8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b04:	00001c06 	br	3b78 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
    3b08:	0002ff00 	call	2ff0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3b0c:	00820234 	movhi	r2,2056
    3b10:	10becf04 	addi	r2,r2,-1220
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	1005003a 	cmpeq	r2,r2,zero
    3b1c:	e0bfff15 	stw	r2,-4(fp)
			}
			( void ) xTaskResumeAll();
    3b20:	00030180 	call	3018 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3b24:	e0bfff17 	ldw	r2,-4(fp)
    3b28:	1004c03a 	cmpne	r2,r2,zero
    3b2c:	1000121e 	bne	r2,zero,3b78 <prvCheckTasksWaitingTermination+0x84>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3b30:	00041140 	call	4114 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3b34:	00820234 	movhi	r2,2056
    3b38:	10becf04 	addi	r2,r2,-1220
    3b3c:	10800317 	ldw	r2,12(r2)
    3b40:	10800317 	ldw	r2,12(r2)
    3b44:	e0bffe15 	stw	r2,-8(fp)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3b48:	e0bffe17 	ldw	r2,-8(fp)
    3b4c:	11000104 	addi	r4,r2,4
    3b50:	00015f80 	call	15f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
    3b54:	d0a02c17 	ldw	r2,-32592(gp)
    3b58:	10bfffc4 	addi	r2,r2,-1
    3b5c:	d0a02c15 	stw	r2,-32592(gp)
					--uxTasksDeleted;
    3b60:	d0a02b17 	ldw	r2,-32596(gp)
    3b64:	10bfffc4 	addi	r2,r2,-1
    3b68:	d0a02b15 	stw	r2,-32596(gp)
				}
				taskEXIT_CRITICAL();
    3b6c:	00041680 	call	4168 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
    3b70:	e13ffe17 	ldw	r4,-8(fp)
    3b74:	0003dc00 	call	3dc0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b78:	d0a02b17 	ldw	r2,-32596(gp)
    3b7c:	1004c03a 	cmpne	r2,r2,zero
    3b80:	103fe11e 	bne	r2,zero,3b08 <prvCheckTasksWaitingTermination+0x14>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3b84:	e037883a 	mov	sp,fp
    3b88:	dfc00117 	ldw	ra,4(sp)
    3b8c:	df000017 	ldw	fp,0(sp)
    3b90:	dec00204 	addi	sp,sp,8
    3b94:	f800283a 	ret

00003b98 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3b98:	defffd04 	addi	sp,sp,-12
    3b9c:	dfc00215 	stw	ra,8(sp)
    3ba0:	df000115 	stw	fp,4(sp)
    3ba4:	df000104 	addi	fp,sp,4
    3ba8:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3bac:	d0e02a17 	ldw	r3,-32600(gp)
    3bb0:	e0bfff17 	ldw	r2,-4(fp)
    3bb4:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xTickCount )
    3bb8:	d0e02d17 	ldw	r3,-32588(gp)
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	10c0052e 	bgeu	r2,r3,3bd8 <prvAddCurrentTaskToDelayedList+0x40>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bc4:	d1203617 	ldw	r4,-32552(gp)
    3bc8:	d0a02a17 	ldw	r2,-32600(gp)
    3bcc:	11400104 	addi	r5,r2,4
    3bd0:	00015240 	call	1524 <vListInsert>
    3bd4:	00000906 	br	3bfc <prvAddCurrentTaskToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bd8:	d1203517 	ldw	r4,-32556(gp)
    3bdc:	d0a02a17 	ldw	r2,-32600(gp)
    3be0:	11400104 	addi	r5,r2,4
    3be4:	00015240 	call	1524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3be8:	d0e00317 	ldw	r3,-32756(gp)
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	10c0022e 	bgeu	r2,r3,3bfc <prvAddCurrentTaskToDelayedList+0x64>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	d0a00315 	stw	r2,-32756(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3bfc:	e037883a 	mov	sp,fp
    3c00:	dfc00117 	ldw	ra,4(sp)
    3c04:	df000017 	ldw	fp,0(sp)
    3c08:	dec00204 	addi	sp,sp,8
    3c0c:	f800283a 	ret

00003c10 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    3c10:	defff904 	addi	sp,sp,-28
    3c14:	dfc00615 	stw	ra,24(sp)
    3c18:	df000515 	stw	fp,20(sp)
    3c1c:	df000504 	addi	fp,sp,20
    3c20:	e17ffe15 	stw	r5,-8(fp)
    3c24:	e13ffd0d 	sth	r4,-12(fp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c28:	e0bffe17 	ldw	r2,-8(fp)
    3c2c:	1004c03a 	cmpne	r2,r2,zero
    3c30:	1000071e 	bne	r2,zero,3c50 <prvAllocateTCBAndStack+0x40>
    3c34:	e0bffd0b 	ldhu	r2,-12(fp)
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	1085883a 	add	r2,r2,r2
    3c40:	1009883a 	mov	r4,r2
    3c44:	0000fbc0 	call	fbc <pvPortMalloc>
    3c48:	e0bfff15 	stw	r2,-4(fp)
    3c4c:	00000206 	br	3c58 <prvAllocateTCBAndStack+0x48>
    3c50:	e0bffe17 	ldw	r2,-8(fp)
    3c54:	e0bfff15 	stw	r2,-4(fp)
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	e0bffb15 	stw	r2,-20(fp)

		if( pxStack != NULL )
    3c60:	e0bffb17 	ldw	r2,-20(fp)
    3c64:	1005003a 	cmpeq	r2,r2,zero
    3c68:	10000d1e 	bne	r2,zero,3ca0 <prvAllocateTCBAndStack+0x90>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3c6c:	01001404 	movi	r4,80
    3c70:	0000fbc0 	call	fbc <pvPortMalloc>
    3c74:	e0bffc15 	stw	r2,-16(fp)

			if( pxNewTCB != NULL )
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	1005003a 	cmpeq	r2,r2,zero
    3c80:	1000041e 	bne	r2,zero,3c94 <prvAllocateTCBAndStack+0x84>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    3c84:	e0fffc17 	ldw	r3,-16(fp)
    3c88:	e0bffb17 	ldw	r2,-20(fp)
    3c8c:	18800c15 	stw	r2,48(r3)
    3c90:	00000406 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    3c94:	e13ffb17 	ldw	r4,-20(fp)
    3c98:	00011500 	call	1150 <vPortFree>
    3c9c:	00000106 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
		}
		else
		{
			pxNewTCB = NULL;
    3ca0:	e03ffc15 	stw	zero,-16(fp)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
    3ca4:	e0bffc17 	ldw	r2,-16(fp)
    3ca8:	1005003a 	cmpeq	r2,r2,zero
    3cac:	1000081e 	bne	r2,zero,3cd0 <prvAllocateTCBAndStack+0xc0>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3cb0:	e0bffc17 	ldw	r2,-16(fp)
    3cb4:	11000c17 	ldw	r4,48(r2)
    3cb8:	e0bffd0b 	ldhu	r2,-12(fp)
    3cbc:	1085883a 	add	r2,r2,r2
    3cc0:	1085883a 	add	r2,r2,r2
    3cc4:	100d883a 	mov	r6,r2
    3cc8:	01402944 	movi	r5,165
    3ccc:	00081140 	call	8114 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    3cd0:	e0bffc17 	ldw	r2,-16(fp)
}
    3cd4:	e037883a 	mov	sp,fp
    3cd8:	dfc00117 	ldw	ra,4(sp)
    3cdc:	df000017 	ldw	fp,0(sp)
    3ce0:	dec00204 	addi	sp,sp,8
    3ce4:	f800283a 	ret

00003ce8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    3ce8:	defffd04 	addi	sp,sp,-12
    3cec:	df000215 	stw	fp,8(sp)
    3cf0:	df000204 	addi	fp,sp,8
    3cf4:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
    3cf8:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cfc:	00000606 	br	3d18 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
    3d00:	e0bfff17 	ldw	r2,-4(fp)
    3d04:	10800044 	addi	r2,r2,1
    3d08:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
    3d0c:	e0bffe17 	ldw	r2,-8(fp)
    3d10:	10800044 	addi	r2,r2,1
    3d14:	e0bffe15 	stw	r2,-8(fp)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3d18:	e0bfff17 	ldw	r2,-4(fp)
    3d1c:	10800003 	ldbu	r2,0(r2)
    3d20:	10803fcc 	andi	r2,r2,255
    3d24:	10802960 	cmpeqi	r2,r2,165
    3d28:	103ff51e 	bne	r2,zero,3d00 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3d2c:	e0bffe17 	ldw	r2,-8(fp)
    3d30:	1004d0ba 	srli	r2,r2,2
    3d34:	e0bffe15 	stw	r2,-8(fp)

		return ( uint16_t ) ulCount;
    3d38:	e0bffe17 	ldw	r2,-8(fp)
    3d3c:	10bfffcc 	andi	r2,r2,65535
	}
    3d40:	e037883a 	mov	sp,fp
    3d44:	df000017 	ldw	fp,0(sp)
    3d48:	dec00104 	addi	sp,sp,4
    3d4c:	f800283a 	ret

00003d50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    3d50:	defff904 	addi	sp,sp,-28
    3d54:	dfc00615 	stw	ra,24(sp)
    3d58:	df000515 	stw	fp,20(sp)
    3d5c:	df000504 	addi	fp,sp,20
    3d60:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d64:	e0bffe17 	ldw	r2,-8(fp)
    3d68:	1004c03a 	cmpne	r2,r2,zero
    3d6c:	1000031e 	bne	r2,zero,3d7c <uxTaskGetStackHighWaterMark+0x2c>
    3d70:	d0a02a17 	ldw	r2,-32600(gp)
    3d74:	e0bfff15 	stw	r2,-4(fp)
    3d78:	00000206 	br	3d84 <uxTaskGetStackHighWaterMark+0x34>
    3d7c:	e0bffe17 	ldw	r2,-8(fp)
    3d80:	e0bfff15 	stw	r2,-4(fp)
    3d84:	e0bfff17 	ldw	r2,-4(fp)
    3d88:	e0bffd15 	stw	r2,-12(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	10800c17 	ldw	r2,48(r2)
    3d94:	e0bffc15 	stw	r2,-16(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    3d98:	e13ffc17 	ldw	r4,-16(fp)
    3d9c:	0003ce80 	call	3ce8 <prvTaskCheckFreeStackSpace>
    3da0:	10bfffcc 	andi	r2,r2,65535
    3da4:	e0bffb15 	stw	r2,-20(fp)

		return uxReturn;
    3da8:	e0bffb17 	ldw	r2,-20(fp)
	}
    3dac:	e037883a 	mov	sp,fp
    3db0:	dfc00117 	ldw	ra,4(sp)
    3db4:	df000017 	ldw	fp,0(sp)
    3db8:	dec00204 	addi	sp,sp,8
    3dbc:	f800283a 	ret

00003dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3dc0:	defffd04 	addi	sp,sp,-12
    3dc4:	dfc00215 	stw	ra,8(sp)
    3dc8:	df000115 	stw	fp,4(sp)
    3dcc:	df000104 	addi	fp,sp,4
    3dd0:	e13fff15 	stw	r4,-4(fp)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    3dd4:	e0bfff17 	ldw	r2,-4(fp)
    3dd8:	11000c17 	ldw	r4,48(r2)
    3ddc:	00011500 	call	1150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    3de0:	e13fff17 	ldw	r4,-4(fp)
    3de4:	00011500 	call	1150 <vPortFree>
	}
    3de8:	e037883a 	mov	sp,fp
    3dec:	dfc00117 	ldw	ra,4(sp)
    3df0:	df000017 	ldw	fp,0(sp)
    3df4:	dec00204 	addi	sp,sp,8
    3df8:	f800283a 	ret

00003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3dfc:	defffd04 	addi	sp,sp,-12
    3e00:	df000215 	stw	fp,8(sp)
    3e04:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3e08:	d0a03517 	ldw	r2,-32556(gp)
    3e0c:	10800017 	ldw	r2,0(r2)
    3e10:	1004c03a 	cmpne	r2,r2,zero
    3e14:	1000031e 	bne	r2,zero,3e24 <prvResetNextTaskUnblockTime+0x28>
    3e18:	00800044 	movi	r2,1
    3e1c:	e0bfff05 	stb	r2,-4(fp)
    3e20:	00000106 	br	3e28 <prvResetNextTaskUnblockTime+0x2c>
    3e24:	e03fff05 	stb	zero,-4(fp)
    3e28:	e0bfff03 	ldbu	r2,-4(fp)
    3e2c:	1005003a 	cmpeq	r2,r2,zero
    3e30:	1000031e 	bne	r2,zero,3e40 <prvResetNextTaskUnblockTime+0x44>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3e34:	00bfffc4 	movi	r2,-1
    3e38:	d0a00315 	stw	r2,-32756(gp)
    3e3c:	00000706 	br	3e5c <prvResetNextTaskUnblockTime+0x60>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3e40:	d0a03517 	ldw	r2,-32556(gp)
    3e44:	10800317 	ldw	r2,12(r2)
    3e48:	10800317 	ldw	r2,12(r2)
    3e4c:	e0bffe15 	stw	r2,-8(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3e50:	e0bffe17 	ldw	r2,-8(fp)
    3e54:	10800117 	ldw	r2,4(r2)
    3e58:	d0a00315 	stw	r2,-32756(gp)
	}
}
    3e5c:	e037883a 	mov	sp,fp
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00104 	addi	sp,sp,4
    3e68:	f800283a 	ret

00003e6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3e6c:	defffe04 	addi	sp,sp,-8
    3e70:	df000115 	stw	fp,4(sp)
    3e74:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e78:	d0a02a17 	ldw	r2,-32600(gp)
    3e7c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
    3e80:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e84:	e037883a 	mov	sp,fp
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00104 	addi	sp,sp,4
    3e90:	f800283a 	ret

00003e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3e94:	defffe04 	addi	sp,sp,-8
    3e98:	df000115 	stw	fp,4(sp)
    3e9c:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3ea0:	d0a02f17 	ldw	r2,-32580(gp)
    3ea4:	1004c03a 	cmpne	r2,r2,zero
    3ea8:	1000031e 	bne	r2,zero,3eb8 <xTaskGetSchedulerState+0x24>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3eac:	00800044 	movi	r2,1
    3eb0:	e0bfff15 	stw	r2,-4(fp)
    3eb4:	00000706 	br	3ed4 <xTaskGetSchedulerState+0x40>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3eb8:	d0a03417 	ldw	r2,-32560(gp)
    3ebc:	1004c03a 	cmpne	r2,r2,zero
    3ec0:	1000031e 	bne	r2,zero,3ed0 <xTaskGetSchedulerState+0x3c>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3ec4:	00800084 	movi	r2,2
    3ec8:	e0bfff15 	stw	r2,-4(fp)
    3ecc:	00000106 	br	3ed4 <xTaskGetSchedulerState+0x40>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3ed0:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
	}
    3ed8:	e037883a 	mov	sp,fp
    3edc:	df000017 	ldw	fp,0(sp)
    3ee0:	dec00104 	addi	sp,sp,4
    3ee4:	f800283a 	ret

00003ee8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3ee8:	defffb04 	addi	sp,sp,-20
    3eec:	dfc00415 	stw	ra,16(sp)
    3ef0:	df000315 	stw	fp,12(sp)
    3ef4:	df000304 	addi	fp,sp,12
    3ef8:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3efc:	e0bffe17 	ldw	r2,-8(fp)
    3f00:	e0bffd15 	stw	r2,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3f04:	e0bffe17 	ldw	r2,-8(fp)
    3f08:	1005003a 	cmpeq	r2,r2,zero
    3f0c:	10003d1e 	bne	r2,zero,4004 <vTaskPriorityInherit+0x11c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	10c00b17 	ldw	r3,44(r2)
    3f18:	d0a02a17 	ldw	r2,-32600(gp)
    3f1c:	10800b17 	ldw	r2,44(r2)
    3f20:	1880382e 	bgeu	r3,r2,4004 <vTaskPriorityInherit+0x11c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3f24:	e0bffd17 	ldw	r2,-12(fp)
    3f28:	10800617 	ldw	r2,24(r2)
    3f2c:	1004803a 	cmplt	r2,r2,zero
    3f30:	1000061e 	bne	r2,zero,3f4c <vTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3f34:	d0a02a17 	ldw	r2,-32600(gp)
    3f38:	10c00b17 	ldw	r3,44(r2)
    3f3c:	00800304 	movi	r2,12
    3f40:	10c7c83a 	sub	r3,r2,r3
    3f44:	e0bffd17 	ldw	r2,-12(fp)
    3f48:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3f4c:	e0bffd17 	ldw	r2,-12(fp)
    3f50:	11000517 	ldw	r4,20(r2)
    3f54:	e0bffd17 	ldw	r2,-12(fp)
    3f58:	10800b17 	ldw	r2,44(r2)
    3f5c:	10800524 	muli	r2,r2,20
    3f60:	1007883a 	mov	r3,r2
    3f64:	00820234 	movhi	r2,2056
    3f68:	10be8404 	addi	r2,r2,-1520
    3f6c:	1885883a 	add	r2,r3,r2
    3f70:	2080031e 	bne	r4,r2,3f80 <vTaskPriorityInherit+0x98>
    3f74:	00800044 	movi	r2,1
    3f78:	e0bfff05 	stb	r2,-4(fp)
    3f7c:	00000106 	br	3f84 <vTaskPriorityInherit+0x9c>
    3f80:	e03fff05 	stb	zero,-4(fp)
    3f84:	e0bfff03 	ldbu	r2,-4(fp)
    3f88:	1005003a 	cmpeq	r2,r2,zero
    3f8c:	1000191e 	bne	r2,zero,3ff4 <vTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	11000104 	addi	r4,r2,4
    3f98:	00015f80 	call	15f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f9c:	d0a02a17 	ldw	r2,-32600(gp)
    3fa0:	10c00b17 	ldw	r3,44(r2)
    3fa4:	e0bffd17 	ldw	r2,-12(fp)
    3fa8:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxTCB );
    3fac:	e0bffd17 	ldw	r2,-12(fp)
    3fb0:	10c00b17 	ldw	r3,44(r2)
    3fb4:	d0a02e17 	ldw	r2,-32584(gp)
    3fb8:	10c0032e 	bgeu	r2,r3,3fc8 <vTaskPriorityInherit+0xe0>
    3fbc:	e0bffd17 	ldw	r2,-12(fp)
    3fc0:	10800b17 	ldw	r2,44(r2)
    3fc4:	d0a02e15 	stw	r2,-32584(gp)
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	10800b17 	ldw	r2,44(r2)
    3fd0:	10800524 	muli	r2,r2,20
    3fd4:	1007883a 	mov	r3,r2
    3fd8:	00820234 	movhi	r2,2056
    3fdc:	10be8404 	addi	r2,r2,-1520
    3fe0:	1889883a 	add	r4,r3,r2
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	11400104 	addi	r5,r2,4
    3fec:	000149c0 	call	149c <vListInsertEnd>
    3ff0:	00000406 	br	4004 <vTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3ff4:	d0a02a17 	ldw	r2,-32600(gp)
    3ff8:	10c00b17 	ldw	r3,44(r2)
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10c00b15 	stw	r3,44(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4004:	e037883a 	mov	sp,fp
    4008:	dfc00117 	ldw	ra,4(sp)
    400c:	df000017 	ldw	fp,0(sp)
    4010:	dec00204 	addi	sp,sp,8
    4014:	f800283a 	ret

00004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4018:	defffb04 	addi	sp,sp,-20
    401c:	dfc00415 	stw	ra,16(sp)
    4020:	df000315 	stw	fp,12(sp)
    4024:	df000304 	addi	fp,sp,12
    4028:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    402c:	e0bfff17 	ldw	r2,-4(fp)
    4030:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
    4034:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
    4038:	e0bfff17 	ldw	r2,-4(fp)
    403c:	1005003a 	cmpeq	r2,r2,zero
    4040:	10002e1e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4044:	e0bffe17 	ldw	r2,-8(fp)
    4048:	10801117 	ldw	r2,68(r2)
    404c:	10ffffc4 	addi	r3,r2,-1
    4050:	e0bffe17 	ldw	r2,-8(fp)
    4054:	10c01115 	stw	r3,68(r2)

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	10c00b17 	ldw	r3,44(r2)
    4060:	e0bffe17 	ldw	r2,-8(fp)
    4064:	10801017 	ldw	r2,64(r2)
    4068:	18802426 	beq	r3,r2,40fc <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    406c:	e0bffe17 	ldw	r2,-8(fp)
    4070:	10801117 	ldw	r2,68(r2)
    4074:	1004c03a 	cmpne	r2,r2,zero
    4078:	1000201e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    407c:	e0bffe17 	ldw	r2,-8(fp)
    4080:	11000104 	addi	r4,r2,4
    4084:	00015f80 	call	15f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4088:	e0bffe17 	ldw	r2,-8(fp)
    408c:	10c01017 	ldw	r3,64(r2)
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4098:	e0bffe17 	ldw	r2,-8(fp)
    409c:	10c00b17 	ldw	r3,44(r2)
    40a0:	00800304 	movi	r2,12
    40a4:	10c7c83a 	sub	r3,r2,r3
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10c00b17 	ldw	r3,44(r2)
    40b8:	d0a02e17 	ldw	r2,-32584(gp)
    40bc:	10c0032e 	bgeu	r2,r3,40cc <xTaskPriorityDisinherit+0xb4>
    40c0:	e0bffe17 	ldw	r2,-8(fp)
    40c4:	10800b17 	ldw	r2,44(r2)
    40c8:	d0a02e15 	stw	r2,-32584(gp)
    40cc:	e0bffe17 	ldw	r2,-8(fp)
    40d0:	10800b17 	ldw	r2,44(r2)
    40d4:	10800524 	muli	r2,r2,20
    40d8:	1007883a 	mov	r3,r2
    40dc:	00820234 	movhi	r2,2056
    40e0:	10be8404 	addi	r2,r2,-1520
    40e4:	1889883a 	add	r4,r3,r2
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	11400104 	addi	r5,r2,4
    40f0:	000149c0 	call	149c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    40f4:	00800044 	movi	r2,1
    40f8:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    40fc:	e0bffd17 	ldw	r2,-12(fp)
	}
    4100:	e037883a 	mov	sp,fp
    4104:	dfc00117 	ldw	ra,4(sp)
    4108:	df000017 	ldw	fp,0(sp)
    410c:	dec00204 	addi	sp,sp,8
    4110:	f800283a 	ret

00004114 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    4114:	defffe04 	addi	sp,sp,-8
    4118:	df000115 	stw	fp,4(sp)
    411c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4120:	0005303a 	rdctl	r2,status
    4124:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4128:	e0ffff17 	ldw	r3,-4(fp)
    412c:	00bfff84 	movi	r2,-2
    4130:	1884703a 	and	r2,r3,r2
    4134:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    4138:	d0a02f17 	ldw	r2,-32580(gp)
    413c:	1005003a 	cmpeq	r2,r2,zero
    4140:	1000051e 	bne	r2,zero,4158 <vTaskEnterCritical+0x44>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    4144:	d0e02a17 	ldw	r3,-32600(gp)
    4148:	18800f17 	ldw	r2,60(r3)
    414c:	10800044 	addi	r2,r2,1
    4150:	18800f15 	stw	r2,60(r3)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    4154:	d0a02a17 	ldw	r2,-32600(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4158:	e037883a 	mov	sp,fp
    415c:	df000017 	ldw	fp,0(sp)
    4160:	dec00104 	addi	sp,sp,4
    4164:	f800283a 	ret

00004168 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    4168:	defffe04 	addi	sp,sp,-8
    416c:	df000115 	stw	fp,4(sp)
    4170:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
    4174:	d0a02f17 	ldw	r2,-32580(gp)
    4178:	1005003a 	cmpeq	r2,r2,zero
    417c:	1000101e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    4180:	d0a02a17 	ldw	r2,-32600(gp)
    4184:	10800f17 	ldw	r2,60(r2)
    4188:	1005003a 	cmpeq	r2,r2,zero
    418c:	10000c1e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    4190:	d0e02a17 	ldw	r3,-32600(gp)
    4194:	18800f17 	ldw	r2,60(r3)
    4198:	10bfffc4 	addi	r2,r2,-1
    419c:	18800f15 	stw	r2,60(r3)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    41a0:	d0a02a17 	ldw	r2,-32600(gp)
    41a4:	10800f17 	ldw	r2,60(r2)
    41a8:	1004c03a 	cmpne	r2,r2,zero
    41ac:	1000041e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
    41b0:	00800044 	movi	r2,1
    41b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    41c0:	e037883a 	mov	sp,fp
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00104 	addi	sp,sp,4
    41cc:	f800283a 	ret

000041d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    41d0:	defffe04 	addi	sp,sp,-8
    41d4:	df000115 	stw	fp,4(sp)
    41d8:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    41dc:	d0a02a17 	ldw	r2,-32600(gp)
    41e0:	10800617 	ldw	r2,24(r2)
    41e4:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41e8:	d1202a17 	ldw	r4,-32600(gp)
    41ec:	d0a02a17 	ldw	r2,-32600(gp)
    41f0:	10c00b17 	ldw	r3,44(r2)
    41f4:	00800304 	movi	r2,12
    41f8:	10c5c83a 	sub	r2,r2,r3
    41fc:	20800615 	stw	r2,24(r4)

	return uxReturn;
    4200:	e0bfff17 	ldw	r2,-4(fp)
}
    4204:	e037883a 	mov	sp,fp
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00104 	addi	sp,sp,4
    4210:	f800283a 	ret

00004214 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4214:	deffff04 	addi	sp,sp,-4
    4218:	df000015 	stw	fp,0(sp)
    421c:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4220:	d0a02a17 	ldw	r2,-32600(gp)
    4224:	1005003a 	cmpeq	r2,r2,zero
    4228:	1000041e 	bne	r2,zero,423c <pvTaskIncrementMutexHeldCount+0x28>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    422c:	d0a02a17 	ldw	r2,-32600(gp)
    4230:	10c01117 	ldw	r3,68(r2)
    4234:	18c00044 	addi	r3,r3,1
    4238:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
    423c:	d0a02a17 	ldw	r2,-32600(gp)
	}
    4240:	e037883a 	mov	sp,fp
    4244:	df000017 	ldw	fp,0(sp)
    4248:	dec00104 	addi	sp,sp,4
    424c:	f800283a 	ret

00004250 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4250:	defffa04 	addi	sp,sp,-24
    4254:	dfc00515 	stw	ra,20(sp)
    4258:	df000415 	stw	fp,16(sp)
    425c:	df000404 	addi	fp,sp,16
    4260:	e13ffe15 	stw	r4,-8(fp)
    4264:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4268:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    426c:	d0a02a17 	ldw	r2,-32600(gp)
    4270:	10801217 	ldw	r2,72(r2)
    4274:	1004c03a 	cmpne	r2,r2,zero
    4278:	1000101e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    427c:	d0e02a17 	ldw	r3,-32600(gp)
    4280:	00800044 	movi	r2,1
    4284:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	1005003a 	cmpeq	r2,r2,zero
    4290:	10000a1e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4294:	d0a02a17 	ldw	r2,-32600(gp)
    4298:	11000104 	addi	r4,r2,4
    429c:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    42a0:	d0e02d17 	ldw	r3,-32588(gp)
    42a4:	e0bfff17 	ldw	r2,-4(fp)
    42a8:	1885883a 	add	r2,r3,r2
    42ac:	e0bffd15 	stw	r2,-12(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    42b0:	e13ffd17 	ldw	r4,-12(fp)
    42b4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    42b8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    42bc:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    42c0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    42c4:	d0a02a17 	ldw	r2,-32600(gp)
    42c8:	10801217 	ldw	r2,72(r2)
    42cc:	e0bffc15 	stw	r2,-16(fp)

			if( ulReturn != 0UL )
    42d0:	e0bffc17 	ldw	r2,-16(fp)
    42d4:	1005003a 	cmpeq	r2,r2,zero
    42d8:	10000a1e 	bne	r2,zero,4304 <ulTaskNotifyTake+0xb4>
			{
				if( xClearCountOnExit != pdFALSE )
    42dc:	e0bffe17 	ldw	r2,-8(fp)
    42e0:	1005003a 	cmpeq	r2,r2,zero
    42e4:	1000031e 	bne	r2,zero,42f4 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    42e8:	d0a02a17 	ldw	r2,-32600(gp)
    42ec:	10001215 	stw	zero,72(r2)
    42f0:	00000406 	br	4304 <ulTaskNotifyTake+0xb4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    42f4:	d0a02a17 	ldw	r2,-32600(gp)
    42f8:	10c01217 	ldw	r3,72(r2)
    42fc:	18ffffc4 	addi	r3,r3,-1
    4300:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4304:	d0a02a17 	ldw	r2,-32600(gp)
    4308:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    430c:	00041680 	call	4168 <vTaskExitCritical>

		return ulReturn;
    4310:	e0bffc17 	ldw	r2,-16(fp)
	}
    4314:	e037883a 	mov	sp,fp
    4318:	dfc00117 	ldw	ra,4(sp)
    431c:	df000017 	ldw	fp,0(sp)
    4320:	dec00204 	addi	sp,sp,8
    4324:	f800283a 	ret

00004328 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4328:	defff804 	addi	sp,sp,-32
    432c:	dfc00715 	stw	ra,28(sp)
    4330:	df000615 	stw	fp,24(sp)
    4334:	df000604 	addi	fp,sp,24
    4338:	e13ffc15 	stw	r4,-16(fp)
    433c:	e17ffd15 	stw	r5,-12(fp)
    4340:	e1bffe15 	stw	r6,-8(fp)
    4344:	e1ffff15 	stw	r7,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4348:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    434c:	d0a02a17 	ldw	r2,-32600(gp)
    4350:	10801317 	ldw	r2,76(r2)
    4354:	108000a0 	cmpeqi	r2,r2,2
    4358:	1000161e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    435c:	d0e02a17 	ldw	r3,-32600(gp)
    4360:	19001217 	ldw	r4,72(r3)
    4364:	e0bffc17 	ldw	r2,-16(fp)
    4368:	0084303a 	nor	r2,zero,r2
    436c:	2084703a 	and	r2,r4,r2
    4370:	18801215 	stw	r2,72(r3)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    4374:	d0e02a17 	ldw	r3,-32600(gp)
    4378:	00800044 	movi	r2,1
    437c:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	1005003a 	cmpeq	r2,r2,zero
    4388:	10000a1e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    438c:	d0a02a17 	ldw	r2,-32600(gp)
    4390:	11000104 	addi	r4,r2,4
    4394:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4398:	d0e02d17 	ldw	r3,-32588(gp)
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	1885883a 	add	r2,r3,r2
    43a4:	e0bffb15 	stw	r2,-20(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    43a8:	e13ffb17 	ldw	r4,-20(fp)
    43ac:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    43b0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    43b4:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    43b8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			if( pulNotificationValue != NULL )
    43bc:	e0bffe17 	ldw	r2,-8(fp)
    43c0:	1005003a 	cmpeq	r2,r2,zero
    43c4:	1000041e 	bne	r2,zero,43d8 <xTaskNotifyWait+0xb0>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    43c8:	d0a02a17 	ldw	r2,-32600(gp)
    43cc:	10c01217 	ldw	r3,72(r2)
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10c00015 	stw	r3,0(r2)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    43d8:	d0a02a17 	ldw	r2,-32600(gp)
    43dc:	10801317 	ldw	r2,76(r2)
    43e0:	10800058 	cmpnei	r2,r2,1
    43e4:	1000021e 	bne	r2,zero,43f0 <xTaskNotifyWait+0xc8>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    43e8:	e03ffa15 	stw	zero,-24(fp)
    43ec:	00000806 	br	4410 <xTaskNotifyWait+0xe8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    43f0:	d0e02a17 	ldw	r3,-32600(gp)
    43f4:	19001217 	ldw	r4,72(r3)
    43f8:	e0bffd17 	ldw	r2,-12(fp)
    43fc:	0084303a 	nor	r2,zero,r2
    4400:	2084703a 	and	r2,r4,r2
    4404:	18801215 	stw	r2,72(r3)
				xReturn = pdTRUE;
    4408:	00800044 	movi	r2,1
    440c:	e0bffa15 	stw	r2,-24(fp)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4410:	d0a02a17 	ldw	r2,-32600(gp)
    4414:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4418:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    441c:	e0bffa17 	ldw	r2,-24(fp)
	}
    4420:	e037883a 	mov	sp,fp
    4424:	dfc00117 	ldw	ra,4(sp)
    4428:	df000017 	ldw	fp,0(sp)
    442c:	dec00204 	addi	sp,sp,8
    4430:	f800283a 	ret

00004434 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
    4434:	defff704 	addi	sp,sp,-36
    4438:	dfc00815 	stw	ra,32(sp)
    443c:	df000715 	stw	fp,28(sp)
    4440:	df000704 	addi	fp,sp,28
    4444:	e13ffc15 	stw	r4,-16(fp)
    4448:	e17ffd15 	stw	r5,-12(fp)
    444c:	e1bffe15 	stw	r6,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4450:	00800044 	movi	r2,1
    4454:	e0bff915 	stw	r2,-28(fp)

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4458:	e0bffc17 	ldw	r2,-16(fp)
    445c:	e0bffb15 	stw	r2,-20(fp)

		taskENTER_CRITICAL();
    4460:	00041140 	call	4114 <vTaskEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	10801317 	ldw	r2,76(r2)
    446c:	e0bffa15 	stw	r2,-24(fp)

			pxTCB->eNotifyState = eNotified;
    4470:	e0fffb17 	ldw	r3,-20(fp)
    4474:	00800084 	movi	r2,2
    4478:	18801315 	stw	r2,76(r3)

			switch( eAction )
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	e0bfff15 	stw	r2,-4(fp)
    4484:	e0ffff17 	ldw	r3,-4(fp)
    4488:	188000a0 	cmpeqi	r2,r3,2
    448c:	1000151e 	bne	r2,zero,44e4 <xTaskNotify+0xb0>
    4490:	e0ffff17 	ldw	r3,-4(fp)
    4494:	188000e8 	cmpgeui	r2,r3,3
    4498:	1000041e 	bne	r2,zero,44ac <xTaskNotify+0x78>
    449c:	e0ffff17 	ldw	r3,-4(fp)
    44a0:	18800060 	cmpeqi	r2,r3,1
    44a4:	1000081e 	bne	r2,zero,44c8 <xTaskNotify+0x94>
    44a8:	00002006 	br	452c <xTaskNotify+0xf8>
    44ac:	e0ffff17 	ldw	r3,-4(fp)
    44b0:	188000e0 	cmpeqi	r2,r3,3
    44b4:	1000111e 	bne	r2,zero,44fc <xTaskNotify+0xc8>
    44b8:	e0ffff17 	ldw	r3,-4(fp)
    44bc:	18800120 	cmpeqi	r2,r3,4
    44c0:	1000121e 	bne	r2,zero,450c <xTaskNotify+0xd8>
    44c4:	00001906 	br	452c <xTaskNotify+0xf8>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10c01217 	ldw	r3,72(r2)
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	1886b03a 	or	r3,r3,r2
    44d8:	e0bffb17 	ldw	r2,-20(fp)
    44dc:	10c01215 	stw	r3,72(r2)
					break;
    44e0:	00001206 	br	452c <xTaskNotify+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    44e4:	e0bffb17 	ldw	r2,-20(fp)
    44e8:	10801217 	ldw	r2,72(r2)
    44ec:	10c00044 	addi	r3,r2,1
    44f0:	e0bffb17 	ldw	r2,-20(fp)
    44f4:	10c01215 	stw	r3,72(r2)
					break;
    44f8:	00000c06 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    44fc:	e0fffb17 	ldw	r3,-20(fp)
    4500:	e0bffd17 	ldw	r2,-12(fp)
    4504:	18801215 	stw	r2,72(r3)
					break;
    4508:	00000806 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    450c:	e0bffa17 	ldw	r2,-24(fp)
    4510:	108000a0 	cmpeqi	r2,r2,2
    4514:	1000041e 	bne	r2,zero,4528 <xTaskNotify+0xf4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4518:	e0fffb17 	ldw	r3,-20(fp)
    451c:	e0bffd17 	ldw	r2,-12(fp)
    4520:	18801215 	stw	r2,72(r3)
    4524:	00000106 	br	452c <xTaskNotify+0xf8>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4528:	e03ff915 	stw	zero,-28(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    452c:	e0bffa17 	ldw	r2,-24(fp)
    4530:	10800058 	cmpnei	r2,r2,1
    4534:	10001a1e 	bne	r2,zero,45a0 <xTaskNotify+0x16c>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4538:	e0bffb17 	ldw	r2,-20(fp)
    453c:	11000104 	addi	r4,r2,4
    4540:	00015f80 	call	15f8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4544:	e0bffb17 	ldw	r2,-20(fp)
    4548:	10c00b17 	ldw	r3,44(r2)
    454c:	d0a02e17 	ldw	r2,-32584(gp)
    4550:	10c0032e 	bgeu	r2,r3,4560 <xTaskNotify+0x12c>
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10800b17 	ldw	r2,44(r2)
    455c:	d0a02e15 	stw	r2,-32584(gp)
    4560:	e0bffb17 	ldw	r2,-20(fp)
    4564:	10800b17 	ldw	r2,44(r2)
    4568:	10800524 	muli	r2,r2,20
    456c:	1007883a 	mov	r3,r2
    4570:	00820234 	movhi	r2,2056
    4574:	10be8404 	addi	r2,r2,-1520
    4578:	1889883a 	add	r4,r3,r2
    457c:	e0bffb17 	ldw	r2,-20(fp)
    4580:	11400104 	addi	r5,r2,4
    4584:	000149c0 	call	149c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4588:	e0bffb17 	ldw	r2,-20(fp)
    458c:	10c00b17 	ldw	r3,44(r2)
    4590:	d0a02a17 	ldw	r2,-32600(gp)
    4594:	10800b17 	ldw	r2,44(r2)
    4598:	10c0012e 	bgeu	r2,r3,45a0 <xTaskNotify+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
    459c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    45a0:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    45a4:	e0bff917 	ldw	r2,-28(fp)
	}
    45a8:	e037883a 	mov	sp,fp
    45ac:	dfc00117 	ldw	ra,4(sp)
    45b0:	df000017 	ldw	fp,0(sp)
    45b4:	dec00204 	addi	sp,sp,8
    45b8:	f800283a 	ret

000045bc <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
    45bc:	defff504 	addi	sp,sp,-44
    45c0:	dfc00a15 	stw	ra,40(sp)
    45c4:	df000915 	stw	fp,36(sp)
    45c8:	df000904 	addi	fp,sp,36
    45cc:	e13ffb15 	stw	r4,-20(fp)
    45d0:	e17ffc15 	stw	r5,-16(fp)
    45d4:	e1bffd15 	stw	r6,-12(fp)
    45d8:	e1fffe15 	stw	r7,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    45dc:	00800044 	movi	r2,1
    45e0:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    45e4:	e0bffb17 	ldw	r2,-20(fp)
    45e8:	e0bffa15 	stw	r2,-24(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45ec:	e03ff715 	stw	zero,-36(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    45f0:	e0bffa17 	ldw	r2,-24(fp)
    45f4:	10801317 	ldw	r2,76(r2)
    45f8:	e0bff915 	stw	r2,-28(fp)

			pxTCB->eNotifyState = eNotified;
    45fc:	e0fffa17 	ldw	r3,-24(fp)
    4600:	00800084 	movi	r2,2
    4604:	18801315 	stw	r2,76(r3)

			switch( eAction )
    4608:	e0bffd17 	ldw	r2,-12(fp)
    460c:	e0bfff15 	stw	r2,-4(fp)
    4610:	e0ffff17 	ldw	r3,-4(fp)
    4614:	188000a0 	cmpeqi	r2,r3,2
    4618:	1000151e 	bne	r2,zero,4670 <xTaskNotifyFromISR+0xb4>
    461c:	e0ffff17 	ldw	r3,-4(fp)
    4620:	188000e8 	cmpgeui	r2,r3,3
    4624:	1000041e 	bne	r2,zero,4638 <xTaskNotifyFromISR+0x7c>
    4628:	e0ffff17 	ldw	r3,-4(fp)
    462c:	18800060 	cmpeqi	r2,r3,1
    4630:	1000081e 	bne	r2,zero,4654 <xTaskNotifyFromISR+0x98>
    4634:	00002006 	br	46b8 <xTaskNotifyFromISR+0xfc>
    4638:	e0ffff17 	ldw	r3,-4(fp)
    463c:	188000e0 	cmpeqi	r2,r3,3
    4640:	1000111e 	bne	r2,zero,4688 <xTaskNotifyFromISR+0xcc>
    4644:	e0ffff17 	ldw	r3,-4(fp)
    4648:	18800120 	cmpeqi	r2,r3,4
    464c:	1000121e 	bne	r2,zero,4698 <xTaskNotifyFromISR+0xdc>
    4650:	00001906 	br	46b8 <xTaskNotifyFromISR+0xfc>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4654:	e0bffa17 	ldw	r2,-24(fp)
    4658:	10c01217 	ldw	r3,72(r2)
    465c:	e0bffc17 	ldw	r2,-16(fp)
    4660:	1886b03a 	or	r3,r3,r2
    4664:	e0bffa17 	ldw	r2,-24(fp)
    4668:	10c01215 	stw	r3,72(r2)
					break;
    466c:	00001206 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4670:	e0bffa17 	ldw	r2,-24(fp)
    4674:	10801217 	ldw	r2,72(r2)
    4678:	10c00044 	addi	r3,r2,1
    467c:	e0bffa17 	ldw	r2,-24(fp)
    4680:	10c01215 	stw	r3,72(r2)
					break;
    4684:	00000c06 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4688:	e0fffa17 	ldw	r3,-24(fp)
    468c:	e0bffc17 	ldw	r2,-16(fp)
    4690:	18801215 	stw	r2,72(r3)
					break;
    4694:	00000806 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	108000a0 	cmpeqi	r2,r2,2
    46a0:	1000041e 	bne	r2,zero,46b4 <xTaskNotifyFromISR+0xf8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    46a4:	e0fffa17 	ldw	r3,-24(fp)
    46a8:	e0bffc17 	ldw	r2,-16(fp)
    46ac:	18801215 	stw	r2,72(r3)
    46b0:	00000106 	br	46b8 <xTaskNotifyFromISR+0xfc>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    46b4:	e03ff815 	stw	zero,-32(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    46b8:	e0bff917 	ldw	r2,-28(fp)
    46bc:	10800058 	cmpnei	r2,r2,1
    46c0:	1000281e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    46c4:	d0a03417 	ldw	r2,-32560(gp)
    46c8:	1004c03a 	cmpne	r2,r2,zero
    46cc:	1000151e 	bne	r2,zero,4724 <xTaskNotifyFromISR+0x168>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    46d0:	e0bffa17 	ldw	r2,-24(fp)
    46d4:	11000104 	addi	r4,r2,4
    46d8:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    46dc:	e0bffa17 	ldw	r2,-24(fp)
    46e0:	10c00b17 	ldw	r3,44(r2)
    46e4:	d0a02e17 	ldw	r2,-32584(gp)
    46e8:	10c0032e 	bgeu	r2,r3,46f8 <xTaskNotifyFromISR+0x13c>
    46ec:	e0bffa17 	ldw	r2,-24(fp)
    46f0:	10800b17 	ldw	r2,44(r2)
    46f4:	d0a02e15 	stw	r2,-32584(gp)
    46f8:	e0bffa17 	ldw	r2,-24(fp)
    46fc:	10800b17 	ldw	r2,44(r2)
    4700:	10800524 	muli	r2,r2,20
    4704:	1007883a 	mov	r3,r2
    4708:	00820234 	movhi	r2,2056
    470c:	10be8404 	addi	r2,r2,-1520
    4710:	1889883a 	add	r4,r3,r2
    4714:	e0bffa17 	ldw	r2,-24(fp)
    4718:	11400104 	addi	r5,r2,4
    471c:	000149c0 	call	149c <vListInsertEnd>
    4720:	00000506 	br	4738 <xTaskNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4724:	e0bffa17 	ldw	r2,-24(fp)
    4728:	11400604 	addi	r5,r2,24
    472c:	01020234 	movhi	r4,2056
    4730:	213eca04 	addi	r4,r4,-1240
    4734:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4738:	e0bffa17 	ldw	r2,-24(fp)
    473c:	10c00b17 	ldw	r3,44(r2)
    4740:	d0a02a17 	ldw	r2,-32600(gp)
    4744:	10800b17 	ldw	r2,44(r2)
    4748:	10c0062e 	bgeu	r2,r3,4764 <xTaskNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    474c:	e0bffe17 	ldw	r2,-8(fp)
    4750:	1005003a 	cmpeq	r2,r2,zero
    4754:	1000031e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4758:	e0fffe17 	ldw	r3,-8(fp)
    475c:	00800044 	movi	r2,1
    4760:	18800015 	stw	r2,0(r3)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    4764:	e0bff817 	ldw	r2,-32(fp)
	}
    4768:	e037883a 	mov	sp,fp
    476c:	dfc00117 	ldw	ra,4(sp)
    4770:	df000017 	ldw	fp,0(sp)
    4774:	dec00204 	addi	sp,sp,8
    4778:	f800283a 	ret

0000477c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    477c:	defff904 	addi	sp,sp,-28
    4780:	dfc00615 	stw	ra,24(sp)
    4784:	df000515 	stw	fp,20(sp)
    4788:	df000504 	addi	fp,sp,20
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4794:	e0bffe17 	ldw	r2,-8(fp)
    4798:	e0bffd15 	stw	r2,-12(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    479c:	e03ffb15 	stw	zero,-20(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    47a0:	e0bffd17 	ldw	r2,-12(fp)
    47a4:	10801317 	ldw	r2,76(r2)
    47a8:	e0bffc15 	stw	r2,-16(fp)
			pxTCB->eNotifyState = eNotified;
    47ac:	e0fffd17 	ldw	r3,-12(fp)
    47b0:	00800084 	movi	r2,2
    47b4:	18801315 	stw	r2,76(r3)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    47b8:	e0bffd17 	ldw	r2,-12(fp)
    47bc:	10801217 	ldw	r2,72(r2)
    47c0:	10c00044 	addi	r3,r2,1
    47c4:	e0bffd17 	ldw	r2,-12(fp)
    47c8:	10c01215 	stw	r3,72(r2)

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10800058 	cmpnei	r2,r2,1
    47d4:	1000281e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47d8:	d0a03417 	ldw	r2,-32560(gp)
    47dc:	1004c03a 	cmpne	r2,r2,zero
    47e0:	1000151e 	bne	r2,zero,4838 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    47e4:	e0bffd17 	ldw	r2,-12(fp)
    47e8:	11000104 	addi	r4,r2,4
    47ec:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    47f0:	e0bffd17 	ldw	r2,-12(fp)
    47f4:	10c00b17 	ldw	r3,44(r2)
    47f8:	d0a02e17 	ldw	r2,-32584(gp)
    47fc:	10c0032e 	bgeu	r2,r3,480c <vTaskNotifyGiveFromISR+0x90>
    4800:	e0bffd17 	ldw	r2,-12(fp)
    4804:	10800b17 	ldw	r2,44(r2)
    4808:	d0a02e15 	stw	r2,-32584(gp)
    480c:	e0bffd17 	ldw	r2,-12(fp)
    4810:	10800b17 	ldw	r2,44(r2)
    4814:	10800524 	muli	r2,r2,20
    4818:	1007883a 	mov	r3,r2
    481c:	00820234 	movhi	r2,2056
    4820:	10be8404 	addi	r2,r2,-1520
    4824:	1889883a 	add	r4,r3,r2
    4828:	e0bffd17 	ldw	r2,-12(fp)
    482c:	11400104 	addi	r5,r2,4
    4830:	000149c0 	call	149c <vListInsertEnd>
    4834:	00000506 	br	484c <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4838:	e0bffd17 	ldw	r2,-12(fp)
    483c:	11400604 	addi	r5,r2,24
    4840:	01020234 	movhi	r4,2056
    4844:	213eca04 	addi	r4,r4,-1240
    4848:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10c00b17 	ldw	r3,44(r2)
    4854:	d0a02a17 	ldw	r2,-32600(gp)
    4858:	10800b17 	ldw	r2,44(r2)
    485c:	10c0062e 	bgeu	r2,r3,4878 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	1005003a 	cmpeq	r2,r2,zero
    4868:	1000031e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    486c:	e0ffff17 	ldw	r3,-4(fp)
    4870:	00800044 	movi	r2,1
    4874:	18800015 	stw	r2,0(r3)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4878:	e037883a 	mov	sp,fp
    487c:	dfc00117 	ldw	ra,4(sp)
    4880:	df000017 	ldw	fp,0(sp)
    4884:	dec00204 	addi	sp,sp,8
    4888:	f800283a 	ret

0000488c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    488c:	defff904 	addi	sp,sp,-28
    4890:	dfc00615 	stw	ra,24(sp)
    4894:	df000515 	stw	fp,20(sp)
    4898:	df000504 	addi	fp,sp,20
BaseType_t xReturn = pdFAIL;
    489c:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    48a0:	00050440 	call	5044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    48a4:	d0a03717 	ldw	r2,-32548(gp)
    48a8:	1005003a 	cmpeq	r2,r2,zero
    48ac:	10000d1e 	bne	r2,zero,48e4 <xTimerCreateTimerTask+0x58>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    48b0:	008000c4 	movi	r2,3
    48b4:	d8800015 	stw	r2,0(sp)
    48b8:	d8000115 	stw	zero,4(sp)
    48bc:	d8000215 	stw	zero,8(sp)
    48c0:	d8000315 	stw	zero,12(sp)
    48c4:	01000034 	movhi	r4,0
    48c8:	2112d404 	addi	r4,r4,19280
    48cc:	01420034 	movhi	r5,2048
    48d0:	29401404 	addi	r5,r5,80
    48d4:	01820004 	movi	r6,2048
    48d8:	000f883a 	mov	r7,zero
    48dc:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    48e0:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    48e4:	e0bfff17 	ldw	r2,-4(fp)
}
    48e8:	e037883a 	mov	sp,fp
    48ec:	dfc00117 	ldw	ra,4(sp)
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00204 	addi	sp,sp,8
    48f8:	f800283a 	ret

000048fc <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    48fc:	defff904 	addi	sp,sp,-28
    4900:	dfc00615 	stw	ra,24(sp)
    4904:	df000515 	stw	fp,20(sp)
    4908:	df000504 	addi	fp,sp,20
    490c:	e13ffc15 	stw	r4,-16(fp)
    4910:	e17ffd15 	stw	r5,-12(fp)
    4914:	e1bffe15 	stw	r6,-8(fp)
    4918:	e1ffff15 	stw	r7,-4(fp)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1004c03a 	cmpne	r2,r2,zero
    4924:	1000021e 	bne	r2,zero,4930 <xTimerCreate+0x34>
	{
		pxNewTimer = NULL;
    4928:	e03ffb15 	stw	zero,-20(fp)
    492c:	00001906 	br	4994 <xTimerCreate+0x98>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4930:	01000a04 	movi	r4,40
    4934:	0000fbc0 	call	fbc <pvPortMalloc>
    4938:	e0bffb15 	stw	r2,-20(fp)
		if( pxNewTimer != NULL )
    493c:	e0bffb17 	ldw	r2,-20(fp)
    4940:	1005003a 	cmpeq	r2,r2,zero
    4944:	1000131e 	bne	r2,zero,4994 <xTimerCreate+0x98>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    4948:	00050440 	call	5044 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    494c:	e0fffb17 	ldw	r3,-20(fp)
    4950:	e0bffc17 	ldw	r2,-16(fp)
    4954:	18800015 	stw	r2,0(r3)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4958:	e0fffb17 	ldw	r3,-20(fp)
    495c:	e0bffd17 	ldw	r2,-12(fp)
    4960:	18800615 	stw	r2,24(r3)
			pxNewTimer->uxAutoReload = uxAutoReload;
    4964:	e0fffb17 	ldw	r3,-20(fp)
    4968:	e0bffe17 	ldw	r2,-8(fp)
    496c:	18800715 	stw	r2,28(r3)
			pxNewTimer->pvTimerID = pvTimerID;
    4970:	e0fffb17 	ldw	r3,-20(fp)
    4974:	e0bfff17 	ldw	r2,-4(fp)
    4978:	18800815 	stw	r2,32(r3)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    497c:	e0fffb17 	ldw	r3,-20(fp)
    4980:	e0800217 	ldw	r2,8(fp)
    4984:	18800915 	stw	r2,36(r3)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    4988:	e0bffb17 	ldw	r2,-20(fp)
    498c:	11000104 	addi	r4,r2,4
    4990:	00014740 	call	1474 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
    4994:	e0bffb17 	ldw	r2,-20(fp)
}
    4998:	e037883a 	mov	sp,fp
    499c:	dfc00117 	ldw	ra,4(sp)
    49a0:	df000017 	ldw	fp,0(sp)
    49a4:	dec00204 	addi	sp,sp,8
    49a8:	f800283a 	ret

000049ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    49ac:	defff604 	addi	sp,sp,-40
    49b0:	dfc00915 	stw	ra,36(sp)
    49b4:	df000815 	stw	fp,32(sp)
    49b8:	df000804 	addi	fp,sp,32
    49bc:	e13ffc15 	stw	r4,-16(fp)
    49c0:	e17ffd15 	stw	r5,-12(fp)
    49c4:	e1bffe15 	stw	r6,-8(fp)
    49c8:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
    49cc:	e03ff815 	stw	zero,-32(fp)
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    49d0:	d0a03717 	ldw	r2,-32548(gp)
    49d4:	1005003a 	cmpeq	r2,r2,zero
    49d8:	1000201e 	bne	r2,zero,4a5c <xTimerGenericCommand+0xb0>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    49dc:	e0bffd17 	ldw	r2,-12(fp)
    49e0:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    49e4:	e0bffe17 	ldw	r2,-8(fp)
    49e8:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    49ec:	e0bffc17 	ldw	r2,-16(fp)
    49f0:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	10800188 	cmpgei	r2,r2,6
    49fc:	1000111e 	bne	r2,zero,4a44 <xTimerGenericCommand+0x98>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a00:	0003e940 	call	3e94 <xTaskGetSchedulerState>
    4a04:	10800098 	cmpnei	r2,r2,2
    4a08:	1000071e 	bne	r2,zero,4a28 <xTimerGenericCommand+0x7c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4a0c:	d1203717 	ldw	r4,-32548(gp)
    4a10:	e17ff904 	addi	r5,fp,-28
    4a14:	e1800217 	ldw	r6,8(fp)
    4a18:	000f883a 	mov	r7,zero
    4a1c:	0001f100 	call	1f10 <xQueueGenericSend>
    4a20:	e0bff815 	stw	r2,-32(fp)
    4a24:	00000d06 	br	4a5c <xTimerGenericCommand+0xb0>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4a28:	d1203717 	ldw	r4,-32548(gp)
    4a2c:	e17ff904 	addi	r5,fp,-28
    4a30:	000d883a 	mov	r6,zero
    4a34:	000f883a 	mov	r7,zero
    4a38:	0001f100 	call	1f10 <xQueueGenericSend>
    4a3c:	e0bff815 	stw	r2,-32(fp)
    4a40:	00000606 	br	4a5c <xTimerGenericCommand+0xb0>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4a44:	d1203717 	ldw	r4,-32548(gp)
    4a48:	e17ff904 	addi	r5,fp,-28
    4a4c:	e1bfff17 	ldw	r6,-4(fp)
    4a50:	000f883a 	mov	r7,zero
    4a54:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
    4a58:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    4a5c:	e0bff817 	ldw	r2,-32(fp)
}
    4a60:	e037883a 	mov	sp,fp
    4a64:	dfc00117 	ldw	ra,4(sp)
    4a68:	df000017 	ldw	fp,0(sp)
    4a6c:	dec00204 	addi	sp,sp,8
    4a70:	f800283a 	ret

00004a74 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
    4a74:	defffd04 	addi	sp,sp,-12
    4a78:	df000215 	stw	fp,8(sp)
    4a7c:	df000204 	addi	fp,sp,8
    4a80:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    4a84:	e0bfff17 	ldw	r2,-4(fp)
    4a88:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pcTimerName;
    4a8c:	e0bffe17 	ldw	r2,-8(fp)
    4a90:	10800017 	ldw	r2,0(r2)
}
    4a94:	e037883a 	mov	sp,fp
    4a98:	df000017 	ldw	fp,0(sp)
    4a9c:	dec00104 	addi	sp,sp,4
    4aa0:	f800283a 	ret

00004aa4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    4aa4:	defff904 	addi	sp,sp,-28
    4aa8:	dfc00615 	stw	ra,24(sp)
    4aac:	df000515 	stw	fp,20(sp)
    4ab0:	df000504 	addi	fp,sp,20
    4ab4:	e13ffe15 	stw	r4,-8(fp)
    4ab8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4abc:	d0a03917 	ldw	r2,-32540(gp)
    4ac0:	10800317 	ldw	r2,12(r2)
    4ac4:	10800317 	ldw	r2,12(r2)
    4ac8:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4acc:	e0bffc17 	ldw	r2,-16(fp)
    4ad0:	11000104 	addi	r4,r2,4
    4ad4:	00015f80 	call	15f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4ad8:	e0bffc17 	ldw	r2,-16(fp)
    4adc:	10800717 	ldw	r2,28(r2)
    4ae0:	10800058 	cmpnei	r2,r2,1
    4ae4:	1000111e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    4ae8:	e0bffc17 	ldw	r2,-16(fp)
    4aec:	10c00617 	ldw	r3,24(r2)
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	188b883a 	add	r5,r3,r2
    4af8:	e13ffc17 	ldw	r4,-16(fp)
    4afc:	e1bfff17 	ldw	r6,-4(fp)
    4b00:	e1fffe17 	ldw	r7,-8(fp)
    4b04:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4b08:	10800058 	cmpnei	r2,r2,1
    4b0c:	1000071e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4b10:	d8000015 	stw	zero,0(sp)
    4b14:	e13ffc17 	ldw	r4,-16(fp)
    4b18:	000b883a 	mov	r5,zero
    4b1c:	e1bffe17 	ldw	r6,-8(fp)
    4b20:	000f883a 	mov	r7,zero
    4b24:	00049ac0 	call	49ac <xTimerGenericCommand>
    4b28:	e0bffd15 	stw	r2,-12(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4b2c:	e0bffc17 	ldw	r2,-16(fp)
    4b30:	10800917 	ldw	r2,36(r2)
    4b34:	e13ffc17 	ldw	r4,-16(fp)
    4b38:	103ee83a 	callr	r2
}
    4b3c:	e037883a 	mov	sp,fp
    4b40:	dfc00117 	ldw	ra,4(sp)
    4b44:	df000017 	ldw	fp,0(sp)
    4b48:	dec00204 	addi	sp,sp,8
    4b4c:	f800283a 	ret

00004b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4b50:	defffb04 	addi	sp,sp,-20
    4b54:	dfc00415 	stw	ra,16(sp)
    4b58:	df000315 	stw	fp,12(sp)
    4b5c:	df000304 	addi	fp,sp,12
    4b60:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    4b64:	e13ffe04 	addi	r4,fp,-8
    4b68:	0004c240 	call	4c24 <prvGetNextExpireTime>
    4b6c:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    4b70:	e17ffe17 	ldw	r5,-8(fp)
    4b74:	e13ffd17 	ldw	r4,-12(fp)
    4b78:	0004b840 	call	4b84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    4b7c:	0004db40 	call	4db4 <prvProcessReceivedCommands>
	}
    4b80:	003ff806 	br	4b64 <prvTimerTask+0x14>

00004b84 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    4b84:	defffa04 	addi	sp,sp,-24
    4b88:	dfc00515 	stw	ra,20(sp)
    4b8c:	df000415 	stw	fp,16(sp)
    4b90:	df000404 	addi	fp,sp,16
    4b94:	e13ffe15 	stw	r4,-8(fp)
    4b98:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4b9c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4ba0:	e13ffd04 	addi	r4,fp,-12
    4ba4:	0004c840 	call	4c84 <prvSampleTimeNow>
    4ba8:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
    4bac:	e0bffd17 	ldw	r2,-12(fp)
    4bb0:	1004c03a 	cmpne	r2,r2,zero
    4bb4:	1000151e 	bne	r2,zero,4c0c <prvProcessTimerOrBlockTask+0x88>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4bb8:	e0bfff17 	ldw	r2,-4(fp)
    4bbc:	1004c03a 	cmpne	r2,r2,zero
    4bc0:	1000081e 	bne	r2,zero,4be4 <prvProcessTimerOrBlockTask+0x60>
    4bc4:	e0fffe17 	ldw	r3,-8(fp)
    4bc8:	e0bffc17 	ldw	r2,-16(fp)
    4bcc:	10c00536 	bltu	r2,r3,4be4 <prvProcessTimerOrBlockTask+0x60>
			{
				( void ) xTaskResumeAll();
    4bd0:	00030180 	call	3018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4bd4:	e13ffe17 	ldw	r4,-8(fp)
    4bd8:	e17ffc17 	ldw	r5,-16(fp)
    4bdc:	0004aa40 	call	4aa4 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4be0:	00000b06 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4be4:	d1203717 	ldw	r4,-32548(gp)
    4be8:	e0fffe17 	ldw	r3,-8(fp)
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	188bc83a 	sub	r5,r3,r2
    4bf4:	0002b640 	call	2b64 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    4bf8:	00030180 	call	3018 <xTaskResumeAll>
    4bfc:	1004c03a 	cmpne	r2,r2,zero
    4c00:	1000031e 	bne	r2,zero,4c10 <prvProcessTimerOrBlockTask+0x8c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    4c04:	003b683a 	trap	0
    4c08:	00000106 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4c0c:	00030180 	call	3018 <xTaskResumeAll>
		}
	}
}
    4c10:	e037883a 	mov	sp,fp
    4c14:	dfc00117 	ldw	ra,4(sp)
    4c18:	df000017 	ldw	fp,0(sp)
    4c1c:	dec00204 	addi	sp,sp,8
    4c20:	f800283a 	ret

00004c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    4c24:	defffd04 	addi	sp,sp,-12
    4c28:	df000215 	stw	fp,8(sp)
    4c2c:	df000204 	addi	fp,sp,8
    4c30:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4c34:	d0a03917 	ldw	r2,-32540(gp)
    4c38:	10800017 	ldw	r2,0(r2)
    4c3c:	1007003a 	cmpeq	r3,r2,zero
    4c40:	e0bfff17 	ldw	r2,-4(fp)
    4c44:	10c00015 	stw	r3,0(r2)
	if( *pxListWasEmpty == pdFALSE )
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	10800017 	ldw	r2,0(r2)
    4c50:	1004c03a 	cmpne	r2,r2,zero
    4c54:	1000051e 	bne	r2,zero,4c6c <prvGetNextExpireTime+0x48>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4c58:	d0a03917 	ldw	r2,-32540(gp)
    4c5c:	10800317 	ldw	r2,12(r2)
    4c60:	10800017 	ldw	r2,0(r2)
    4c64:	e0bffe15 	stw	r2,-8(fp)
    4c68:	00000106 	br	4c70 <prvGetNextExpireTime+0x4c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4c6c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
    4c70:	e0bffe17 	ldw	r2,-8(fp)
}
    4c74:	e037883a 	mov	sp,fp
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00104 	addi	sp,sp,4
    4c80:	f800283a 	ret

00004c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4c84:	defffc04 	addi	sp,sp,-16
    4c88:	dfc00315 	stw	ra,12(sp)
    4c8c:	df000215 	stw	fp,8(sp)
    4c90:	df000204 	addi	fp,sp,8
    4c94:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    4c98:	00031680 	call	3168 <xTaskGetTickCount>
    4c9c:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
    4ca0:	d0e03817 	ldw	r3,-32544(gp)
    4ca4:	e0bffe17 	ldw	r2,-8(fp)
    4ca8:	10c0052e 	bgeu	r2,r3,4cc0 <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
    4cac:	0004f400 	call	4f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    4cb0:	e0ffff17 	ldw	r3,-4(fp)
    4cb4:	00800044 	movi	r2,1
    4cb8:	18800015 	stw	r2,0(r3)
    4cbc:	00000206 	br	4cc8 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4cc0:	e0bfff17 	ldw	r2,-4(fp)
    4cc4:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
    4cc8:	e0bffe17 	ldw	r2,-8(fp)
    4ccc:	d0a03815 	stw	r2,-32544(gp)

	return xTimeNow;
    4cd0:	e0bffe17 	ldw	r2,-8(fp)
}
    4cd4:	e037883a 	mov	sp,fp
    4cd8:	dfc00117 	ldw	ra,4(sp)
    4cdc:	df000017 	ldw	fp,0(sp)
    4ce0:	dec00204 	addi	sp,sp,8
    4ce4:	f800283a 	ret

00004ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4ce8:	defff904 	addi	sp,sp,-28
    4cec:	dfc00615 	stw	ra,24(sp)
    4cf0:	df000515 	stw	fp,20(sp)
    4cf4:	df000504 	addi	fp,sp,20
    4cf8:	e13ffc15 	stw	r4,-16(fp)
    4cfc:	e17ffd15 	stw	r5,-12(fp)
    4d00:	e1bffe15 	stw	r6,-8(fp)
    4d04:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
    4d08:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4d0c:	e0fffc17 	ldw	r3,-16(fp)
    4d10:	e0bffd17 	ldw	r2,-12(fp)
    4d14:	18800115 	stw	r2,4(r3)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4d18:	e0fffc17 	ldw	r3,-16(fp)
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	18800415 	stw	r2,16(r3)

	if( xNextExpiryTime <= xTimeNow )
    4d24:	e0fffd17 	ldw	r3,-12(fp)
    4d28:	e0bffe17 	ldw	r2,-8(fp)
    4d2c:	10c00e36 	bltu	r2,r3,4d68 <prvInsertTimerInActiveList+0x80>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4d30:	e0fffe17 	ldw	r3,-8(fp)
    4d34:	e0bfff17 	ldw	r2,-4(fp)
    4d38:	1887c83a 	sub	r3,r3,r2
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	10800617 	ldw	r2,24(r2)
    4d44:	18800336 	bltu	r3,r2,4d54 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4d48:	00800044 	movi	r2,1
    4d4c:	e0bffb15 	stw	r2,-20(fp)
    4d50:	00001206 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4d54:	d1203a17 	ldw	r4,-32536(gp)
    4d58:	e0bffc17 	ldw	r2,-16(fp)
    4d5c:	11400104 	addi	r5,r2,4
    4d60:	00015240 	call	1524 <vListInsert>
    4d64:	00000d06 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d68:	e0fffe17 	ldw	r3,-8(fp)
    4d6c:	e0bfff17 	ldw	r2,-4(fp)
    4d70:	1880062e 	bgeu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
    4d74:	e0fffd17 	ldw	r3,-12(fp)
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	18800336 	bltu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4d80:	00800044 	movi	r2,1
    4d84:	e0bffb15 	stw	r2,-20(fp)
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d88:	00000406 	br	4d9c <prvInsertTimerInActiveList+0xb4>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d8c:	d1203917 	ldw	r4,-32540(gp)
    4d90:	e0bffc17 	ldw	r2,-16(fp)
    4d94:	11400104 	addi	r5,r2,4
    4d98:	00015240 	call	1524 <vListInsert>
		}
	}

	return xProcessTimerNow;
    4d9c:	e0bffb17 	ldw	r2,-20(fp)
}
    4da0:	e037883a 	mov	sp,fp
    4da4:	dfc00117 	ldw	ra,4(sp)
    4da8:	df000017 	ldw	fp,0(sp)
    4dac:	dec00204 	addi	sp,sp,8
    4db0:	f800283a 	ret

00004db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    4db4:	defff504 	addi	sp,sp,-44
    4db8:	dfc00a15 	stw	ra,40(sp)
    4dbc:	df000915 	stw	fp,36(sp)
    4dc0:	df000904 	addi	fp,sp,36
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4dc4:	00005206 	br	4f10 <prvProcessReceivedCommands+0x15c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4dc8:	e0bffb17 	ldw	r2,-20(fp)
    4dcc:	1004803a 	cmplt	r2,r2,zero
    4dd0:	10004f1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4dd4:	e0bffd17 	ldw	r2,-12(fp)
    4dd8:	e0bffa15 	stw	r2,-24(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4ddc:	e0bffa17 	ldw	r2,-24(fp)
    4de0:	10800517 	ldw	r2,20(r2)
    4de4:	1005003a 	cmpeq	r2,r2,zero
    4de8:	1000031e 	bne	r2,zero,4df8 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4dec:	e0bffa17 	ldw	r2,-24(fp)
    4df0:	11000104 	addi	r4,r2,4
    4df4:	00015f80 	call	15f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4df8:	e13ffe04 	addi	r4,fp,-8
    4dfc:	0004c840 	call	4c84 <prvSampleTimeNow>
    4e00:	e0bff815 	stw	r2,-32(fp)

			switch( xMessage.xMessageID )
    4e04:	e0bffb17 	ldw	r2,-20(fp)
    4e08:	e0bfff15 	stw	r2,-4(fp)
    4e0c:	e0ffff17 	ldw	r3,-4(fp)
    4e10:	188002a8 	cmpgeui	r2,r3,10
    4e14:	10003e1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
    4e18:	e13fff17 	ldw	r4,-4(fp)
    4e1c:	e13fff17 	ldw	r4,-4(fp)
    4e20:	2105883a 	add	r2,r4,r4
    4e24:	1087883a 	add	r3,r2,r2
    4e28:	00800034 	movhi	r2,0
    4e2c:	10938f04 	addi	r2,r2,20028
    4e30:	1885883a 	add	r2,r3,r2
    4e34:	10800017 	ldw	r2,0(r2)
    4e38:	1000683a 	jmp	r2
    4e3c:	00004e64 	muli	zero,zero,313
    4e40:	00004e64 	muli	zero,zero,313
    4e44:	00004e64 	muli	zero,zero,313
    4e48:	00004f10 	cmplti	zero,zero,316
    4e4c:	00004ed8 	cmpnei	zero,zero,315
    4e50:	00004f08 	cmpgei	zero,zero,316
    4e54:	00004e64 	muli	zero,zero,313
    4e58:	00004e64 	muli	zero,zero,313
    4e5c:	00004f10 	cmplti	zero,zero,316
    4e60:	00004ed8 	cmpnei	zero,zero,315
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4e64:	e0fffc17 	ldw	r3,-16(fp)
    4e68:	e0bffa17 	ldw	r2,-24(fp)
    4e6c:	10800617 	ldw	r2,24(r2)
    4e70:	188b883a 	add	r5,r3,r2
    4e74:	e1fffc17 	ldw	r7,-16(fp)
    4e78:	e13ffa17 	ldw	r4,-24(fp)
    4e7c:	e1bff817 	ldw	r6,-32(fp)
    4e80:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4e84:	10800058 	cmpnei	r2,r2,1
    4e88:	1000211e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e8c:	e0bffa17 	ldw	r2,-24(fp)
    4e90:	10800917 	ldw	r2,36(r2)
    4e94:	e13ffa17 	ldw	r4,-24(fp)
    4e98:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4e9c:	e0bffa17 	ldw	r2,-24(fp)
    4ea0:	10800717 	ldw	r2,28(r2)
    4ea4:	10800058 	cmpnei	r2,r2,1
    4ea8:	1000191e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4eac:	e0fffc17 	ldw	r3,-16(fp)
    4eb0:	e0bffa17 	ldw	r2,-24(fp)
    4eb4:	10800617 	ldw	r2,24(r2)
    4eb8:	188d883a 	add	r6,r3,r2
    4ebc:	d8000015 	stw	zero,0(sp)
    4ec0:	e13ffa17 	ldw	r4,-24(fp)
    4ec4:	000b883a 	mov	r5,zero
    4ec8:	000f883a 	mov	r7,zero
    4ecc:	00049ac0 	call	49ac <xTimerGenericCommand>
    4ed0:	e0bff915 	stw	r2,-28(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    4ed4:	00000e06 	br	4f10 <prvProcessReceivedCommands+0x15c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4ed8:	e0fffc17 	ldw	r3,-16(fp)
    4edc:	e0bffa17 	ldw	r2,-24(fp)
    4ee0:	10c00615 	stw	r3,24(r2)
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4ee4:	e0bffa17 	ldw	r2,-24(fp)
    4ee8:	10c00617 	ldw	r3,24(r2)
    4eec:	e0bff817 	ldw	r2,-32(fp)
    4ef0:	188b883a 	add	r5,r3,r2
    4ef4:	e13ffa17 	ldw	r4,-24(fp)
    4ef8:	e1bff817 	ldw	r6,-32(fp)
    4efc:	e1fff817 	ldw	r7,-32(fp)
    4f00:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
					break;
    4f04:	00000206 	br	4f10 <prvProcessReceivedCommands+0x15c>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4f08:	e13ffa17 	ldw	r4,-24(fp)
    4f0c:	00011500 	call	1150 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4f10:	d1203717 	ldw	r4,-32548(gp)
    4f14:	e17ffb04 	addi	r5,fp,-20
    4f18:	000d883a 	mov	r6,zero
    4f1c:	000f883a 	mov	r7,zero
    4f20:	00022800 	call	2280 <xQueueGenericReceive>
    4f24:	1004c03a 	cmpne	r2,r2,zero
    4f28:	103fa71e 	bne	r2,zero,4dc8 <prvProcessReceivedCommands+0x14>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    4f2c:	e037883a 	mov	sp,fp
    4f30:	dfc00117 	ldw	ra,4(sp)
    4f34:	df000017 	ldw	fp,0(sp)
    4f38:	dec00204 	addi	sp,sp,8
    4f3c:	f800283a 	ret

00004f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4f40:	defff804 	addi	sp,sp,-32
    4f44:	dfc00715 	stw	ra,28(sp)
    4f48:	df000615 	stw	fp,24(sp)
    4f4c:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4f50:	00002d06 	br	5008 <prvSwitchTimerLists+0xc8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f54:	d0a03917 	ldw	r2,-32540(gp)
    4f58:	10800317 	ldw	r2,12(r2)
    4f5c:	10800017 	ldw	r2,0(r2)
    4f60:	e0bfff15 	stw	r2,-4(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f64:	d0a03917 	ldw	r2,-32540(gp)
    4f68:	10800317 	ldw	r2,12(r2)
    4f6c:	10800317 	ldw	r2,12(r2)
    4f70:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4f74:	e0bffc17 	ldw	r2,-16(fp)
    4f78:	11000104 	addi	r4,r2,4
    4f7c:	00015f80 	call	15f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4f80:	e0bffc17 	ldw	r2,-16(fp)
    4f84:	10800917 	ldw	r2,36(r2)
    4f88:	e13ffc17 	ldw	r4,-16(fp)
    4f8c:	103ee83a 	callr	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	10800717 	ldw	r2,28(r2)
    4f98:	10800058 	cmpnei	r2,r2,1
    4f9c:	10001a1e 	bne	r2,zero,5008 <prvSwitchTimerLists+0xc8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4fa0:	e0bffc17 	ldw	r2,-16(fp)
    4fa4:	10c00617 	ldw	r3,24(r2)
    4fa8:	e0bfff17 	ldw	r2,-4(fp)
    4fac:	1885883a 	add	r2,r3,r2
    4fb0:	e0bffe15 	stw	r2,-8(fp)
			if( xReloadTime > xNextExpireTime )
    4fb4:	e0fffe17 	ldw	r3,-8(fp)
    4fb8:	e0bfff17 	ldw	r2,-4(fp)
    4fbc:	10c00b2e 	bgeu	r2,r3,4fec <prvSwitchTimerLists+0xac>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4fc0:	e0fffc17 	ldw	r3,-16(fp)
    4fc4:	e0bffe17 	ldw	r2,-8(fp)
    4fc8:	18800115 	stw	r2,4(r3)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4fcc:	e0fffc17 	ldw	r3,-16(fp)
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	18800415 	stw	r2,16(r3)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4fd8:	d1203917 	ldw	r4,-32540(gp)
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	11400104 	addi	r5,r2,4
    4fe4:	00015240 	call	1524 <vListInsert>
    4fe8:	00000706 	br	5008 <prvSwitchTimerLists+0xc8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fec:	d8000015 	stw	zero,0(sp)
    4ff0:	e13ffc17 	ldw	r4,-16(fp)
    4ff4:	000b883a 	mov	r5,zero
    4ff8:	e1bfff17 	ldw	r6,-4(fp)
    4ffc:	000f883a 	mov	r7,zero
    5000:	00049ac0 	call	49ac <xTimerGenericCommand>
    5004:	e0bffb15 	stw	r2,-20(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5008:	d0a03917 	ldw	r2,-32540(gp)
    500c:	10800017 	ldw	r2,0(r2)
    5010:	1004c03a 	cmpne	r2,r2,zero
    5014:	103fcf1e 	bne	r2,zero,4f54 <prvSwitchTimerLists+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    5018:	d0a03917 	ldw	r2,-32540(gp)
    501c:	e0bffd15 	stw	r2,-12(fp)
	pxCurrentTimerList = pxOverflowTimerList;
    5020:	d0a03a17 	ldw	r2,-32536(gp)
    5024:	d0a03915 	stw	r2,-32540(gp)
	pxOverflowTimerList = pxTemp;
    5028:	e0bffd17 	ldw	r2,-12(fp)
    502c:	d0a03a15 	stw	r2,-32536(gp)
}
    5030:	e037883a 	mov	sp,fp
    5034:	dfc00117 	ldw	ra,4(sp)
    5038:	df000017 	ldw	fp,0(sp)
    503c:	dec00204 	addi	sp,sp,8
    5040:	f800283a 	ret

00005044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5044:	defffe04 	addi	sp,sp,-8
    5048:	dfc00115 	stw	ra,4(sp)
    504c:	df000015 	stw	fp,0(sp)
    5050:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5054:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
    5058:	d0a03717 	ldw	r2,-32548(gp)
    505c:	1004c03a 	cmpne	r2,r2,zero
    5060:	1000111e 	bne	r2,zero,50a8 <prvCheckForValidListAndQueue+0x64>
		{
			vListInitialise( &xActiveTimerList1 );
    5064:	01020234 	movhi	r4,2056
    5068:	213ed404 	addi	r4,r4,-1200
    506c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5070:	01020234 	movhi	r4,2056
    5074:	213ed904 	addi	r4,r4,-1180
    5078:	00014040 	call	1404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    507c:	00820234 	movhi	r2,2056
    5080:	10bed404 	addi	r2,r2,-1200
    5084:	d0a03915 	stw	r2,-32540(gp)
			pxOverflowTimerList = &xActiveTimerList2;
    5088:	00820234 	movhi	r2,2056
    508c:	10bed904 	addi	r2,r2,-1180
    5090:	d0a03a15 	stw	r2,-32536(gp)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5094:	01000284 	movi	r4,10
    5098:	01400304 	movi	r5,12
    509c:	000d883a 	mov	r6,zero
    50a0:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    50a4:	d0a03715 	stw	r2,-32548(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    50a8:	00041680 	call	4168 <vTaskExitCritical>
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	dfc00117 	ldw	ra,4(sp)
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00204 	addi	sp,sp,8
    50bc:	f800283a 	ret

000050c0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    50c0:	defffb04 	addi	sp,sp,-20
    50c4:	dfc00415 	stw	ra,16(sp)
    50c8:	df000315 	stw	fp,12(sp)
    50cc:	df000304 	addi	fp,sp,12
    50d0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    50d4:	e0bfff17 	ldw	r2,-4(fp)
    50d8:	e0bffd15 	stw	r2,-12(fp)

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    50dc:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    50e0:	e0bffd17 	ldw	r2,-12(fp)
    50e4:	10800517 	ldw	r2,20(r2)
    50e8:	1004c03a 	cmpne	r2,r2,zero
    50ec:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    50f0:	00041680 	call	4168 <vTaskExitCritical>

	return xTimerIsInActiveList;
    50f4:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
    50f8:	e037883a 	mov	sp,fp
    50fc:	dfc00117 	ldw	ra,4(sp)
    5100:	df000017 	ldw	fp,0(sp)
    5104:	dec00204 	addi	sp,sp,8
    5108:	f800283a 	ret

0000510c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    510c:	defffd04 	addi	sp,sp,-12
    5110:	df000215 	stw	fp,8(sp)
    5114:	df000204 	addi	fp,sp,8
    5118:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
    511c:	e0bfff17 	ldw	r2,-4(fp)
    5120:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pvTimerID;
    5124:	e0bffe17 	ldw	r2,-8(fp)
    5128:	10800817 	ldw	r2,32(r2)
}
    512c:	e037883a 	mov	sp,fp
    5130:	df000017 	ldw	fp,0(sp)
    5134:	dec00104 	addi	sp,sp,4
    5138:	f800283a 	ret

0000513c <PRVGADraw_Task>:



/****** VGA display ******/

void PRVGADraw_Task(void *pvParameters ){
    513c:	deffeb04 	addi	sp,sp,-84
    5140:	dfc01415 	stw	ra,80(sp)
    5144:	df001315 	stw	fp,76(sp)
    5148:	dc801215 	stw	r18,72(sp)
    514c:	dc401115 	stw	r17,68(sp)
    5150:	dc001015 	stw	r16,64(sp)
    5154:	df001004 	addi	fp,sp,64
    5158:	e13fff15 	stw	r4,-4(fp)


	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
    515c:	01020034 	movhi	r4,2048
    5160:	21002104 	addi	r4,r4,132
    5164:	00189b40 	call	189b4 <alt_up_pixel_buffer_dma_open_dev>
    5168:	e0bff615 	stw	r2,-40(fp)
	if(pixel_buf == NULL){
    516c:	e0bff617 	ldw	r2,-40(fp)
    5170:	1004c03a 	cmpne	r2,r2,zero
    5174:	1000031e 	bne	r2,zero,5184 <PRVGADraw_Task+0x48>
		printf("can't find pixel buffer device\n");
    5178:	01020034 	movhi	r4,2048
    517c:	21002804 	addi	r4,r4,160
    5180:	00082e80 	call	82e8 <puts>
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);
    5184:	e13ff617 	ldw	r4,-40(fp)
    5188:	000b883a 	mov	r5,zero
    518c:	0018c780 	call	18c78 <alt_up_pixel_buffer_dma_clear_screen>

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
    5190:	01020034 	movhi	r4,2048
    5194:	21003004 	addi	r4,r4,192
    5198:	00187340 	call	18734 <alt_up_char_buffer_open_dev>
    519c:	e0bff515 	stw	r2,-44(fp)
	if(char_buf == NULL){
    51a0:	e0bff517 	ldw	r2,-44(fp)
    51a4:	1004c03a 	cmpne	r2,r2,zero
    51a8:	1000031e 	bne	r2,zero,51b8 <PRVGADraw_Task+0x7c>
		printf("can't find char buffer device\n");
    51ac:	01020034 	movhi	r4,2048
    51b0:	21003a04 	addi	r4,r4,232
    51b4:	00082e80 	call	82e8 <puts>
	}
	alt_up_char_buffer_clear(char_buf);
    51b8:	e13ff517 	ldw	r4,-44(fp)
    51bc:	00189580 	call	18958 <alt_up_char_buffer_clear>



	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51c0:	00900034 	movhi	r2,16384
    51c4:	10bfffc4 	addi	r2,r2,-1
    51c8:	d8800015 	stw	r2,0(sp)
    51cc:	d8000115 	stw	zero,4(sp)
    51d0:	e13ff617 	ldw	r4,-40(fp)
    51d4:	01401904 	movi	r5,100
    51d8:	01809384 	movi	r6,590
    51dc:	01c03204 	movi	r7,200
    51e0:	00192d00 	call	192d0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51e4:	00900034 	movhi	r2,16384
    51e8:	10bfffc4 	addi	r2,r2,-1
    51ec:	d8800015 	stw	r2,0(sp)
    51f0:	d8000115 	stw	zero,4(sp)
    51f4:	e13ff617 	ldw	r4,-40(fp)
    51f8:	01401904 	movi	r5,100
    51fc:	01809384 	movi	r6,590
    5200:	01c04b04 	movi	r7,300
    5204:	00192d00 	call	192d0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5208:	00900034 	movhi	r2,16384
    520c:	10bfffc4 	addi	r2,r2,-1
    5210:	d8800015 	stw	r2,0(sp)
    5214:	d8000115 	stw	zero,4(sp)
    5218:	e13ff617 	ldw	r4,-40(fp)
    521c:	01401904 	movi	r5,100
    5220:	01800c84 	movi	r6,50
    5224:	01c03204 	movi	r7,200
    5228:	00196200 	call	19620 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    522c:	00900034 	movhi	r2,16384
    5230:	10bfffc4 	addi	r2,r2,-1
    5234:	d8800015 	stw	r2,0(sp)
    5238:	d8000115 	stw	zero,4(sp)
    523c:	e13ff617 	ldw	r4,-40(fp)
    5240:	01401904 	movi	r5,100
    5244:	01803704 	movi	r6,220
    5248:	01c04b04 	movi	r7,300
    524c:	00196200 	call	19620 <alt_up_pixel_buffer_dma_draw_vline>

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
    5250:	e13ff517 	ldw	r4,-44(fp)
    5254:	01420034 	movhi	r5,2048
    5258:	29404204 	addi	r5,r5,264
    525c:	01800104 	movi	r6,4
    5260:	01c00104 	movi	r7,4
    5264:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
    5268:	e13ff517 	ldw	r4,-44(fp)
    526c:	01420034 	movhi	r5,2048
    5270:	29404604 	addi	r5,r5,280
    5274:	01800284 	movi	r6,10
    5278:	01c001c4 	movi	r7,7
    527c:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
    5280:	e13ff517 	ldw	r4,-44(fp)
    5284:	01420034 	movhi	r5,2048
    5288:	29404704 	addi	r5,r5,284
    528c:	01800284 	movi	r6,10
    5290:	01c00304 	movi	r7,12
    5294:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
    5298:	e13ff517 	ldw	r4,-44(fp)
    529c:	01420034 	movhi	r5,2048
    52a0:	29404804 	addi	r5,r5,288
    52a4:	01800284 	movi	r6,10
    52a8:	01c00444 	movi	r7,17
    52ac:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "46", 10, 22);
    52b0:	e13ff517 	ldw	r4,-44(fp)
    52b4:	01420034 	movhi	r5,2048
    52b8:	29404904 	addi	r5,r5,292
    52bc:	01800284 	movi	r6,10
    52c0:	01c00584 	movi	r7,22
    52c4:	00188440 	call	18844 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
    52c8:	e13ff517 	ldw	r4,-44(fp)
    52cc:	01420034 	movhi	r5,2048
    52d0:	29404a04 	addi	r5,r5,296
    52d4:	01800104 	movi	r6,4
    52d8:	01c00684 	movi	r7,26
    52dc:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
    52e0:	e13ff517 	ldw	r4,-44(fp)
    52e4:	01420034 	movhi	r5,2048
    52e8:	29404d04 	addi	r5,r5,308
    52ec:	01800284 	movi	r6,10
    52f0:	01c00704 	movi	r7,28
    52f4:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
    52f8:	e13ff517 	ldw	r4,-44(fp)
    52fc:	01420034 	movhi	r5,2048
    5300:	29404e04 	addi	r5,r5,312
    5304:	01800284 	movi	r6,10
    5308:	01c00784 	movi	r7,30
    530c:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
    5310:	e13ff517 	ldw	r4,-44(fp)
    5314:	01420034 	movhi	r5,2048
    5318:	29404f04 	addi	r5,r5,316
    531c:	01800284 	movi	r6,10
    5320:	01c00804 	movi	r7,32
    5324:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
    5328:	e13ff517 	ldw	r4,-44(fp)
    532c:	01420034 	movhi	r5,2048
    5330:	29405004 	addi	r5,r5,320
    5334:	01800244 	movi	r6,9
    5338:	01c00884 	movi	r7,34
    533c:	00188440 	call	18844 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);
    5340:	e13ff517 	ldw	r4,-44(fp)
    5344:	01420034 	movhi	r5,2048
    5348:	29405104 	addi	r5,r5,324
    534c:	01800244 	movi	r6,9
    5350:	01c00904 	movi	r7,36
    5354:	00188440 	call	18844 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "Frequency threshold:", 4, 46);
    5358:	e13ff517 	ldw	r4,-44(fp)
    535c:	01420034 	movhi	r5,2048
    5360:	29405204 	addi	r5,r5,328
    5364:	01800104 	movi	r6,4
    5368:	01c00b84 	movi	r7,46
    536c:	00188440 	call	18844 <alt_up_char_buffer_string>


	alt_up_char_buffer_string(char_buf, "RoC threshold:", 4, 50);
    5370:	e13ff517 	ldw	r4,-44(fp)
    5374:	01420034 	movhi	r5,2048
    5378:	29405804 	addi	r5,r5,352
    537c:	01800104 	movi	r6,4
    5380:	01c00c84 	movi	r7,50
    5384:	00188440 	call	18844 <alt_up_char_buffer_string>



	int i = 99, j = 0;
    5388:	008018c4 	movi	r2,99
    538c:	e0bff415 	stw	r2,-48(fp)
    5390:	e03ff315 	stw	zero,-52(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    5394:	00010c06 	br	57c8 <PRVGADraw_Task+0x68c>
			xQueueReceive( Q_freq_data, freq+i, 0 );
    5398:	d1203e17 	ldw	r4,-32520(gp)
    539c:	e0bff417 	ldw	r2,-48(fp)
    53a0:	100490fa 	slli	r2,r2,3
    53a4:	1007883a 	mov	r3,r2
    53a8:	00820234 	movhi	r2,2056
    53ac:	10bef204 	addi	r2,r2,-1080
    53b0:	188b883a 	add	r5,r3,r2
    53b4:	000d883a 	mov	r6,zero
    53b8:	000f883a 	mov	r7,zero
    53bc:	00022800 	call	2280 <xQueueGenericReceive>

			sprintf(freqStr, "%f", freqThresh);
    53c0:	d0a00617 	ldw	r2,-32744(gp)
    53c4:	01020034 	movhi	r4,2048
    53c8:	210a1a04 	addi	r4,r4,10344
    53cc:	20c00017 	ldw	r3,0(r4)
    53d0:	01020034 	movhi	r4,2048
    53d4:	21029804 	addi	r4,r4,2656
    53d8:	01420034 	movhi	r5,2048
    53dc:	29405c04 	addi	r5,r5,368
    53e0:	100d883a 	mov	r6,r2
    53e4:	180f883a 	mov	r7,r3
    53e8:	00082fc0 	call	82fc <sprintf>
			sprintf(ROCStr, "%f", ROCThresh);
    53ec:	d0a00817 	ldw	r2,-32736(gp)
    53f0:	01020034 	movhi	r4,2048
    53f4:	210a1c04 	addi	r4,r4,10352
    53f8:	20c00017 	ldw	r3,0(r4)
    53fc:	01020034 	movhi	r4,2048
    5400:	21029b04 	addi	r4,r4,2668
    5404:	01420034 	movhi	r5,2048
    5408:	29405c04 	addi	r5,r5,368
    540c:	100d883a 	mov	r6,r2
    5410:	180f883a 	mov	r7,r3
    5414:	00082fc0 	call	82fc <sprintf>
			alt_up_char_buffer_string(char_buf, ROCStr, 30, 50);
    5418:	e13ff517 	ldw	r4,-44(fp)
    541c:	01420034 	movhi	r5,2048
    5420:	29429b04 	addi	r5,r5,2668
    5424:	01800784 	movi	r6,30
    5428:	01c00c84 	movi	r7,50
    542c:	00188440 	call	18844 <alt_up_char_buffer_string>
			alt_up_char_buffer_string(char_buf, freqStr, 30, 46);
    5430:	e13ff517 	ldw	r4,-44(fp)
    5434:	01420034 	movhi	r5,2048
    5438:	29429804 	addi	r5,r5,2656
    543c:	01800784 	movi	r6,30
    5440:	01c00b84 	movi	r7,46
    5444:	00188440 	call	18844 <alt_up_char_buffer_string>
			//calculate frequency RoC

			if(i==0){
    5448:	e0bff417 	ldw	r2,-48(fp)
    544c:	1004c03a 	cmpne	r2,r2,zero
    5450:	1000531e 	bne	r2,zero,55a0 <PRVGADraw_Task+0x464>
				dfreq[0] = (freq[0]-freq[99]) * 2.0 * freq[0] * freq[99] / (freq[0]+freq[99]);
    5454:	00820234 	movhi	r2,2056
    5458:	10bef204 	addi	r2,r2,-1080
    545c:	11400017 	ldw	r5,0(r2)
    5460:	11800117 	ldw	r6,4(r2)
    5464:	01020234 	movhi	r4,2056
    5468:	213ef204 	addi	r4,r4,-1080
    546c:	2080c617 	ldw	r2,792(r4)
    5470:	20c0c717 	ldw	r3,796(r4)
    5474:	2809883a 	mov	r4,r5
    5478:	300b883a 	mov	r5,r6
    547c:	100d883a 	mov	r6,r2
    5480:	180f883a 	mov	r7,r3
    5484:	0006f5c0 	call	6f5c <__subdf3>
    5488:	1009883a 	mov	r4,r2
    548c:	180b883a 	mov	r5,r3
    5490:	2005883a 	mov	r2,r4
    5494:	2807883a 	mov	r3,r5
    5498:	1009883a 	mov	r4,r2
    549c:	180b883a 	mov	r5,r3
    54a0:	100d883a 	mov	r6,r2
    54a4:	180f883a 	mov	r7,r3
    54a8:	0006fdc0 	call	6fdc <__adddf3>
    54ac:	1009883a 	mov	r4,r2
    54b0:	180b883a 	mov	r5,r3
    54b4:	200d883a 	mov	r6,r4
    54b8:	280f883a 	mov	r7,r5
    54bc:	01020234 	movhi	r4,2056
    54c0:	213ef204 	addi	r4,r4,-1080
    54c4:	20800017 	ldw	r2,0(r4)
    54c8:	20c00117 	ldw	r3,4(r4)
    54cc:	3009883a 	mov	r4,r6
    54d0:	380b883a 	mov	r5,r7
    54d4:	100d883a 	mov	r6,r2
    54d8:	180f883a 	mov	r7,r3
    54dc:	00070500 	call	7050 <__muldf3>
    54e0:	1009883a 	mov	r4,r2
    54e4:	180b883a 	mov	r5,r3
    54e8:	200d883a 	mov	r6,r4
    54ec:	280f883a 	mov	r7,r5
    54f0:	01020234 	movhi	r4,2056
    54f4:	213ef204 	addi	r4,r4,-1080
    54f8:	2080c617 	ldw	r2,792(r4)
    54fc:	20c0c717 	ldw	r3,796(r4)
    5500:	3009883a 	mov	r4,r6
    5504:	380b883a 	mov	r5,r7
    5508:	100d883a 	mov	r6,r2
    550c:	180f883a 	mov	r7,r3
    5510:	00070500 	call	7050 <__muldf3>
    5514:	1009883a 	mov	r4,r2
    5518:	180b883a 	mov	r5,r3
    551c:	2021883a 	mov	r16,r4
    5520:	2823883a 	mov	r17,r5
    5524:	00820234 	movhi	r2,2056
    5528:	10bef204 	addi	r2,r2,-1080
    552c:	11400017 	ldw	r5,0(r2)
    5530:	11800117 	ldw	r6,4(r2)
    5534:	01020234 	movhi	r4,2056
    5538:	213ef204 	addi	r4,r4,-1080
    553c:	2080c617 	ldw	r2,792(r4)
    5540:	20c0c717 	ldw	r3,796(r4)
    5544:	2809883a 	mov	r4,r5
    5548:	300b883a 	mov	r5,r6
    554c:	100d883a 	mov	r6,r2
    5550:	180f883a 	mov	r7,r3
    5554:	0006fdc0 	call	6fdc <__adddf3>
    5558:	1009883a 	mov	r4,r2
    555c:	180b883a 	mov	r5,r3
    5560:	2005883a 	mov	r2,r4
    5564:	2807883a 	mov	r3,r5
    5568:	8009883a 	mov	r4,r16
    556c:	880b883a 	mov	r5,r17
    5570:	100d883a 	mov	r6,r2
    5574:	180f883a 	mov	r7,r3
    5578:	00074140 	call	7414 <__divdf3>
    557c:	1009883a 	mov	r4,r2
    5580:	180b883a 	mov	r5,r3
    5584:	2005883a 	mov	r2,r4
    5588:	2807883a 	mov	r3,r5
    558c:	01020234 	movhi	r4,2056
    5590:	213fcc04 	addi	r4,r4,-208
    5594:	20800015 	stw	r2,0(r4)
    5598:	20c00115 	stw	r3,4(r4)
    559c:	00006a06 	br	5748 <PRVGADraw_Task+0x60c>
			}
			else{
				dfreq[i] = (freq[i]-freq[i-1]) * 2.0 * freq[i]* freq[i-1] / (freq[i]+freq[i-1]);
    55a0:	e4bff417 	ldw	r18,-48(fp)
    55a4:	e0bff417 	ldw	r2,-48(fp)
    55a8:	00c20234 	movhi	r3,2056
    55ac:	18fef204 	addi	r3,r3,-1080
    55b0:	100490fa 	slli	r2,r2,3
    55b4:	10c5883a 	add	r2,r2,r3
    55b8:	11400017 	ldw	r5,0(r2)
    55bc:	11800117 	ldw	r6,4(r2)
    55c0:	e0bff417 	ldw	r2,-48(fp)
    55c4:	10bfffc4 	addi	r2,r2,-1
    55c8:	00c20234 	movhi	r3,2056
    55cc:	18fef204 	addi	r3,r3,-1080
    55d0:	100490fa 	slli	r2,r2,3
    55d4:	10c9883a 	add	r4,r2,r3
    55d8:	20800017 	ldw	r2,0(r4)
    55dc:	20c00117 	ldw	r3,4(r4)
    55e0:	2809883a 	mov	r4,r5
    55e4:	300b883a 	mov	r5,r6
    55e8:	100d883a 	mov	r6,r2
    55ec:	180f883a 	mov	r7,r3
    55f0:	0006f5c0 	call	6f5c <__subdf3>
    55f4:	1009883a 	mov	r4,r2
    55f8:	180b883a 	mov	r5,r3
    55fc:	2005883a 	mov	r2,r4
    5600:	2807883a 	mov	r3,r5
    5604:	1009883a 	mov	r4,r2
    5608:	180b883a 	mov	r5,r3
    560c:	100d883a 	mov	r6,r2
    5610:	180f883a 	mov	r7,r3
    5614:	0006fdc0 	call	6fdc <__adddf3>
    5618:	1009883a 	mov	r4,r2
    561c:	180b883a 	mov	r5,r3
    5620:	200d883a 	mov	r6,r4
    5624:	280f883a 	mov	r7,r5
    5628:	e0bff417 	ldw	r2,-48(fp)
    562c:	00c20234 	movhi	r3,2056
    5630:	18fef204 	addi	r3,r3,-1080
    5634:	100490fa 	slli	r2,r2,3
    5638:	10c9883a 	add	r4,r2,r3
    563c:	20800017 	ldw	r2,0(r4)
    5640:	20c00117 	ldw	r3,4(r4)
    5644:	3009883a 	mov	r4,r6
    5648:	380b883a 	mov	r5,r7
    564c:	100d883a 	mov	r6,r2
    5650:	180f883a 	mov	r7,r3
    5654:	00070500 	call	7050 <__muldf3>
    5658:	1009883a 	mov	r4,r2
    565c:	180b883a 	mov	r5,r3
    5660:	200d883a 	mov	r6,r4
    5664:	280f883a 	mov	r7,r5
    5668:	e0bff417 	ldw	r2,-48(fp)
    566c:	10bfffc4 	addi	r2,r2,-1
    5670:	00c20234 	movhi	r3,2056
    5674:	18fef204 	addi	r3,r3,-1080
    5678:	100490fa 	slli	r2,r2,3
    567c:	10c9883a 	add	r4,r2,r3
    5680:	20800017 	ldw	r2,0(r4)
    5684:	20c00117 	ldw	r3,4(r4)
    5688:	3009883a 	mov	r4,r6
    568c:	380b883a 	mov	r5,r7
    5690:	100d883a 	mov	r6,r2
    5694:	180f883a 	mov	r7,r3
    5698:	00070500 	call	7050 <__muldf3>
    569c:	1009883a 	mov	r4,r2
    56a0:	180b883a 	mov	r5,r3
    56a4:	2021883a 	mov	r16,r4
    56a8:	2823883a 	mov	r17,r5
    56ac:	e0bff417 	ldw	r2,-48(fp)
    56b0:	00c20234 	movhi	r3,2056
    56b4:	18fef204 	addi	r3,r3,-1080
    56b8:	100490fa 	slli	r2,r2,3
    56bc:	10c5883a 	add	r2,r2,r3
    56c0:	11400017 	ldw	r5,0(r2)
    56c4:	11800117 	ldw	r6,4(r2)
    56c8:	e0bff417 	ldw	r2,-48(fp)
    56cc:	10bfffc4 	addi	r2,r2,-1
    56d0:	00c20234 	movhi	r3,2056
    56d4:	18fef204 	addi	r3,r3,-1080
    56d8:	100490fa 	slli	r2,r2,3
    56dc:	10c9883a 	add	r4,r2,r3
    56e0:	20800017 	ldw	r2,0(r4)
    56e4:	20c00117 	ldw	r3,4(r4)
    56e8:	2809883a 	mov	r4,r5
    56ec:	300b883a 	mov	r5,r6
    56f0:	100d883a 	mov	r6,r2
    56f4:	180f883a 	mov	r7,r3
    56f8:	0006fdc0 	call	6fdc <__adddf3>
    56fc:	1009883a 	mov	r4,r2
    5700:	180b883a 	mov	r5,r3
    5704:	2005883a 	mov	r2,r4
    5708:	2807883a 	mov	r3,r5
    570c:	8009883a 	mov	r4,r16
    5710:	880b883a 	mov	r5,r17
    5714:	100d883a 	mov	r6,r2
    5718:	180f883a 	mov	r7,r3
    571c:	00074140 	call	7414 <__divdf3>
    5720:	1009883a 	mov	r4,r2
    5724:	180b883a 	mov	r5,r3
    5728:	2005883a 	mov	r2,r4
    572c:	2807883a 	mov	r3,r5
    5730:	01420234 	movhi	r5,2056
    5734:	297fcc04 	addi	r5,r5,-208
    5738:	900890fa 	slli	r4,r18,3
    573c:	2149883a 	add	r4,r4,r5
    5740:	20800015 	stw	r2,0(r4)
    5744:	20c00115 	stw	r3,4(r4)
			}

			if (dfreq[i] > 100.0){
    5748:	e0bff417 	ldw	r2,-48(fp)
    574c:	00c20234 	movhi	r3,2056
    5750:	18ffcc04 	addi	r3,r3,-208
    5754:	100490fa 	slli	r2,r2,3
    5758:	10c9883a 	add	r4,r2,r3
    575c:	20800017 	ldw	r2,0(r4)
    5760:	20c00117 	ldw	r3,4(r4)
    5764:	1009883a 	mov	r4,r2
    5768:	180b883a 	mov	r5,r3
    576c:	000d883a 	mov	r6,zero
    5770:	01d01674 	movhi	r7,16473
    5774:	000766c0 	call	766c <__gtdf2>
    5778:	10800048 	cmpgei	r2,r2,1
    577c:	1000011e 	bne	r2,zero,5784 <PRVGADraw_Task+0x648>
    5780:	00000806 	br	57a4 <PRVGADraw_Task+0x668>
				dfreq[i] = 100.0;
    5784:	e0bff417 	ldw	r2,-48(fp)
    5788:	00c20234 	movhi	r3,2056
    578c:	18ffcc04 	addi	r3,r3,-208
    5790:	100490fa 	slli	r2,r2,3
    5794:	10c7883a 	add	r3,r2,r3
    5798:	18000015 	stw	zero,0(r3)
    579c:	00901674 	movhi	r2,16473
    57a0:	18800115 	stw	r2,4(r3)
			}


			i =	++i%100; //point to the next data (oldest) to be overwritten
    57a4:	e0bff417 	ldw	r2,-48(fp)
    57a8:	10800044 	addi	r2,r2,1
    57ac:	e0bff415 	stw	r2,-48(fp)
    57b0:	e0fff417 	ldw	r3,-48(fp)
    57b4:	00801904 	movi	r2,100
    57b8:	1885283a 	div	r2,r3,r2
    57bc:	10801924 	muli	r2,r2,100
    57c0:	1885c83a 	sub	r2,r3,r2
    57c4:	e0bff415 	stw	r2,-48(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    57c8:	d1203e17 	ldw	r4,-32520(gp)
    57cc:	00026100 	call	2610 <uxQueueMessagesWaiting>
    57d0:	1004c03a 	cmpne	r2,r2,zero
    57d4:	103ef01e 	bne	r2,zero,5398 <PRVGADraw_Task+0x25c>
			i =	++i%100; //point to the next data (oldest) to be overwritten

		}

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
    57d8:	008031c4 	movi	r2,199
    57dc:	d8800015 	stw	r2,0(sp)
    57e0:	d8000115 	stw	zero,4(sp)
    57e4:	d8000215 	stw	zero,8(sp)
    57e8:	e13ff617 	ldw	r4,-40(fp)
    57ec:	01401944 	movi	r5,101
    57f0:	000d883a 	mov	r6,zero
    57f4:	01c09fc4 	movi	r7,639
    57f8:	0018ddc0 	call	18ddc <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);
    57fc:	00804ac4 	movi	r2,299
    5800:	d8800015 	stw	r2,0(sp)
    5804:	d8000115 	stw	zero,4(sp)
    5808:	d8000215 	stw	zero,8(sp)
    580c:	e13ff617 	ldw	r4,-40(fp)
    5810:	01401944 	movi	r5,101
    5814:	01803244 	movi	r6,201
    5818:	01c09fc4 	movi	r7,639
    581c:	0018ddc0 	call	18ddc <alt_up_pixel_buffer_dma_draw_box>

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5820:	e03ff315 	stw	zero,-52(fp)
    5824:	00010e06 	br	5c60 <PRVGADraw_Task+0xb24>
			if (((int)(freq[(i+j)%100]) > MIN_FREQ) && ((int)(freq[(i+j+1)%100]) > MIN_FREQ)){
    5828:	e0fff417 	ldw	r3,-48(fp)
    582c:	e0bff317 	ldw	r2,-52(fp)
    5830:	1887883a 	add	r3,r3,r2
    5834:	00801904 	movi	r2,100
    5838:	1885283a 	div	r2,r3,r2
    583c:	10801924 	muli	r2,r2,100
    5840:	1885c83a 	sub	r2,r3,r2
    5844:	00c20234 	movhi	r3,2056
    5848:	18fef204 	addi	r3,r3,-1080
    584c:	100490fa 	slli	r2,r2,3
    5850:	10c9883a 	add	r4,r2,r3
    5854:	20800017 	ldw	r2,0(r4)
    5858:	20c00117 	ldw	r3,4(r4)
    585c:	1009883a 	mov	r4,r2
    5860:	180b883a 	mov	r5,r3
    5864:	00078fc0 	call	78fc <__fixdfsi>
    5868:	1009883a 	mov	r4,r2
    586c:	00078040 	call	7804 <__floatsidf>
    5870:	100b883a 	mov	r5,r2
    5874:	180d883a 	mov	r6,r3
    5878:	2809883a 	mov	r4,r5
    587c:	300b883a 	mov	r5,r6
    5880:	000d883a 	mov	r6,zero
    5884:	01d011f4 	movhi	r7,16455
    5888:	39e00004 	addi	r7,r7,-32768
    588c:	000766c0 	call	766c <__gtdf2>
    5890:	10800048 	cmpgei	r2,r2,1
    5894:	1000011e 	bne	r2,zero,589c <PRVGADraw_Task+0x760>
    5898:	0000ee06 	br	5c54 <PRVGADraw_Task+0xb18>
    589c:	e0fff417 	ldw	r3,-48(fp)
    58a0:	e0bff317 	ldw	r2,-52(fp)
    58a4:	1885883a 	add	r2,r3,r2
    58a8:	10c00044 	addi	r3,r2,1
    58ac:	00801904 	movi	r2,100
    58b0:	1885283a 	div	r2,r3,r2
    58b4:	10801924 	muli	r2,r2,100
    58b8:	1885c83a 	sub	r2,r3,r2
    58bc:	00c20234 	movhi	r3,2056
    58c0:	18fef204 	addi	r3,r3,-1080
    58c4:	100490fa 	slli	r2,r2,3
    58c8:	10c9883a 	add	r4,r2,r3
    58cc:	20800017 	ldw	r2,0(r4)
    58d0:	20c00117 	ldw	r3,4(r4)
    58d4:	1009883a 	mov	r4,r2
    58d8:	180b883a 	mov	r5,r3
    58dc:	00078fc0 	call	78fc <__fixdfsi>
    58e0:	1009883a 	mov	r4,r2
    58e4:	00078040 	call	7804 <__floatsidf>
    58e8:	100b883a 	mov	r5,r2
    58ec:	180d883a 	mov	r6,r3
    58f0:	2809883a 	mov	r4,r5
    58f4:	300b883a 	mov	r5,r6
    58f8:	000d883a 	mov	r6,zero
    58fc:	01d011f4 	movhi	r7,16455
    5900:	39e00004 	addi	r7,r7,-32768
    5904:	000766c0 	call	766c <__gtdf2>
    5908:	10800048 	cmpgei	r2,r2,1
    590c:	1000011e 	bne	r2,zero,5914 <PRVGADraw_Task+0x7d8>
    5910:	0000d006 	br	5c54 <PRVGADraw_Task+0xb18>
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
    5914:	e0bff317 	ldw	r2,-52(fp)
    5918:	10800164 	muli	r2,r2,5
    591c:	10801944 	addi	r2,r2,101
    5920:	e0bff715 	stw	r2,-36(fp)
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j)%100] - MIN_FREQ));
    5924:	e0fff417 	ldw	r3,-48(fp)
    5928:	e0bff317 	ldw	r2,-52(fp)
    592c:	1887883a 	add	r3,r3,r2
    5930:	00801904 	movi	r2,100
    5934:	1885283a 	div	r2,r3,r2
    5938:	10801924 	muli	r2,r2,100
    593c:	1885c83a 	sub	r2,r3,r2
    5940:	00c20234 	movhi	r3,2056
    5944:	18fef204 	addi	r3,r3,-1080
    5948:	100490fa 	slli	r2,r2,3
    594c:	10c9883a 	add	r4,r2,r3
    5950:	20800017 	ldw	r2,0(r4)
    5954:	20c00117 	ldw	r3,4(r4)
    5958:	1009883a 	mov	r4,r2
    595c:	180b883a 	mov	r5,r3
    5960:	000d883a 	mov	r6,zero
    5964:	01d011f4 	movhi	r7,16455
    5968:	39e00004 	addi	r7,r7,-32768
    596c:	0006f5c0 	call	6f5c <__subdf3>
    5970:	1009883a 	mov	r4,r2
    5974:	180b883a 	mov	r5,r3
    5978:	2005883a 	mov	r2,r4
    597c:	2807883a 	mov	r3,r5
    5980:	1009883a 	mov	r4,r2
    5984:	180b883a 	mov	r5,r3
    5988:	000d883a 	mov	r6,zero
    598c:	01f00d34 	movhi	r7,49204
    5990:	00070500 	call	7050 <__muldf3>
    5994:	1009883a 	mov	r4,r2
    5998:	180b883a 	mov	r5,r3
    599c:	2005883a 	mov	r2,r4
    59a0:	2807883a 	mov	r3,r5
    59a4:	1009883a 	mov	r4,r2
    59a8:	180b883a 	mov	r5,r3
    59ac:	000d883a 	mov	r6,zero
    59b0:	01d01a74 	movhi	r7,16489
    59b4:	39f80004 	addi	r7,r7,-8192
    59b8:	0006fdc0 	call	6fdc <__adddf3>
    59bc:	1009883a 	mov	r4,r2
    59c0:	180b883a 	mov	r5,r3
    59c4:	2005883a 	mov	r2,r4
    59c8:	2807883a 	mov	r3,r5
    59cc:	1009883a 	mov	r4,r2
    59d0:	180b883a 	mov	r5,r3
    59d4:	00078fc0 	call	78fc <__fixdfsi>
    59d8:	e0bff815 	stw	r2,-32(fp)

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
    59dc:	e0bff317 	ldw	r2,-52(fp)
    59e0:	10800164 	muli	r2,r2,5
    59e4:	10801a84 	addi	r2,r2,106
    59e8:	e0bff915 	stw	r2,-28(fp)
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j+1)%100] - MIN_FREQ));
    59ec:	e0fff417 	ldw	r3,-48(fp)
    59f0:	e0bff317 	ldw	r2,-52(fp)
    59f4:	1885883a 	add	r2,r3,r2
    59f8:	10c00044 	addi	r3,r2,1
    59fc:	00801904 	movi	r2,100
    5a00:	1885283a 	div	r2,r3,r2
    5a04:	10801924 	muli	r2,r2,100
    5a08:	1885c83a 	sub	r2,r3,r2
    5a0c:	00c20234 	movhi	r3,2056
    5a10:	18fef204 	addi	r3,r3,-1080
    5a14:	100490fa 	slli	r2,r2,3
    5a18:	10c9883a 	add	r4,r2,r3
    5a1c:	20800017 	ldw	r2,0(r4)
    5a20:	20c00117 	ldw	r3,4(r4)
    5a24:	1009883a 	mov	r4,r2
    5a28:	180b883a 	mov	r5,r3
    5a2c:	000d883a 	mov	r6,zero
    5a30:	01d011f4 	movhi	r7,16455
    5a34:	39e00004 	addi	r7,r7,-32768
    5a38:	0006f5c0 	call	6f5c <__subdf3>
    5a3c:	1009883a 	mov	r4,r2
    5a40:	180b883a 	mov	r5,r3
    5a44:	2005883a 	mov	r2,r4
    5a48:	2807883a 	mov	r3,r5
    5a4c:	1009883a 	mov	r4,r2
    5a50:	180b883a 	mov	r5,r3
    5a54:	000d883a 	mov	r6,zero
    5a58:	01f00d34 	movhi	r7,49204
    5a5c:	00070500 	call	7050 <__muldf3>
    5a60:	1009883a 	mov	r4,r2
    5a64:	180b883a 	mov	r5,r3
    5a68:	2005883a 	mov	r2,r4
    5a6c:	2807883a 	mov	r3,r5
    5a70:	1009883a 	mov	r4,r2
    5a74:	180b883a 	mov	r5,r3
    5a78:	000d883a 	mov	r6,zero
    5a7c:	01d01a74 	movhi	r7,16489
    5a80:	39f80004 	addi	r7,r7,-8192
    5a84:	0006fdc0 	call	6fdc <__adddf3>
    5a88:	1009883a 	mov	r4,r2
    5a8c:	180b883a 	mov	r5,r3
    5a90:	2005883a 	mov	r2,r4
    5a94:	2807883a 	mov	r3,r5
    5a98:	1009883a 	mov	r4,r2
    5a9c:	180b883a 	mov	r5,r3
    5aa0:	00078fc0 	call	78fc <__fixdfsi>
    5aa4:	e0bffa15 	stw	r2,-24(fp)

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
    5aa8:	e0bff317 	ldw	r2,-52(fp)
    5aac:	10800164 	muli	r2,r2,5
    5ab0:	10801944 	addi	r2,r2,101
    5ab4:	e0bffb15 	stw	r2,-20(fp)
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j)%100]);
    5ab8:	e0fff417 	ldw	r3,-48(fp)
    5abc:	e0bff317 	ldw	r2,-52(fp)
    5ac0:	1887883a 	add	r3,r3,r2
    5ac4:	00801904 	movi	r2,100
    5ac8:	1885283a 	div	r2,r3,r2
    5acc:	10801924 	muli	r2,r2,100
    5ad0:	1885c83a 	sub	r2,r3,r2
    5ad4:	00c20234 	movhi	r3,2056
    5ad8:	18ffcc04 	addi	r3,r3,-208
    5adc:	100490fa 	slli	r2,r2,3
    5ae0:	10c9883a 	add	r4,r2,r3
    5ae4:	20800017 	ldw	r2,0(r4)
    5ae8:	20c00117 	ldw	r3,4(r4)
    5aec:	1009883a 	mov	r4,r2
    5af0:	180b883a 	mov	r5,r3
    5af4:	000d883a 	mov	r6,zero
    5af8:	01eff834 	movhi	r7,49120
    5afc:	00070500 	call	7050 <__muldf3>
    5b00:	1009883a 	mov	r4,r2
    5b04:	180b883a 	mov	r5,r3
    5b08:	2005883a 	mov	r2,r4
    5b0c:	2807883a 	mov	r3,r5
    5b10:	1009883a 	mov	r4,r2
    5b14:	180b883a 	mov	r5,r3
    5b18:	000d883a 	mov	r6,zero
    5b1c:	01d01c34 	movhi	r7,16496
    5b20:	39cc0004 	addi	r7,r7,12288
    5b24:	0006fdc0 	call	6fdc <__adddf3>
    5b28:	1009883a 	mov	r4,r2
    5b2c:	180b883a 	mov	r5,r3
    5b30:	2005883a 	mov	r2,r4
    5b34:	2807883a 	mov	r3,r5
    5b38:	1009883a 	mov	r4,r2
    5b3c:	180b883a 	mov	r5,r3
    5b40:	00078fc0 	call	78fc <__fixdfsi>
    5b44:	e0bffc15 	stw	r2,-16(fp)

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
    5b48:	e0bff317 	ldw	r2,-52(fp)
    5b4c:	10800164 	muli	r2,r2,5
    5b50:	10801a84 	addi	r2,r2,106
    5b54:	e0bffd15 	stw	r2,-12(fp)
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j+1)%100]);
    5b58:	e0fff417 	ldw	r3,-48(fp)
    5b5c:	e0bff317 	ldw	r2,-52(fp)
    5b60:	1885883a 	add	r2,r3,r2
    5b64:	10c00044 	addi	r3,r2,1
    5b68:	00801904 	movi	r2,100
    5b6c:	1885283a 	div	r2,r3,r2
    5b70:	10801924 	muli	r2,r2,100
    5b74:	1885c83a 	sub	r2,r3,r2
    5b78:	00c20234 	movhi	r3,2056
    5b7c:	18ffcc04 	addi	r3,r3,-208
    5b80:	100490fa 	slli	r2,r2,3
    5b84:	10c9883a 	add	r4,r2,r3
    5b88:	20800017 	ldw	r2,0(r4)
    5b8c:	20c00117 	ldw	r3,4(r4)
    5b90:	1009883a 	mov	r4,r2
    5b94:	180b883a 	mov	r5,r3
    5b98:	000d883a 	mov	r6,zero
    5b9c:	01eff834 	movhi	r7,49120
    5ba0:	00070500 	call	7050 <__muldf3>
    5ba4:	1009883a 	mov	r4,r2
    5ba8:	180b883a 	mov	r5,r3
    5bac:	2005883a 	mov	r2,r4
    5bb0:	2807883a 	mov	r3,r5
    5bb4:	1009883a 	mov	r4,r2
    5bb8:	180b883a 	mov	r5,r3
    5bbc:	000d883a 	mov	r6,zero
    5bc0:	01d01c34 	movhi	r7,16496
    5bc4:	39cc0004 	addi	r7,r7,12288
    5bc8:	0006fdc0 	call	6fdc <__adddf3>
    5bcc:	1009883a 	mov	r4,r2
    5bd0:	180b883a 	mov	r5,r3
    5bd4:	2005883a 	mov	r2,r4
    5bd8:	2807883a 	mov	r3,r5
    5bdc:	1009883a 	mov	r4,r2
    5be0:	180b883a 	mov	r5,r3
    5be4:	00078fc0 	call	78fc <__fixdfsi>
    5be8:	e0bffe15 	stw	r2,-8(fp)

				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
    5bec:	e0bff717 	ldw	r2,-36(fp)
    5bf0:	100b883a 	mov	r5,r2
    5bf4:	e0bff817 	ldw	r2,-32(fp)
    5bf8:	100d883a 	mov	r6,r2
    5bfc:	e0bff917 	ldw	r2,-28(fp)
    5c00:	100f883a 	mov	r7,r2
    5c04:	e0bffa17 	ldw	r2,-24(fp)
    5c08:	d8800015 	stw	r2,0(sp)
    5c0c:	0080ffc4 	movi	r2,1023
    5c10:	d8800115 	stw	r2,4(sp)
    5c14:	d8000215 	stw	zero,8(sp)
    5c18:	e13ff617 	ldw	r4,-40(fp)
    5c1c:	0019b840 	call	19b84 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
    5c20:	e0bffb17 	ldw	r2,-20(fp)
    5c24:	100b883a 	mov	r5,r2
    5c28:	e0bffc17 	ldw	r2,-16(fp)
    5c2c:	100d883a 	mov	r6,r2
    5c30:	e0bffd17 	ldw	r2,-12(fp)
    5c34:	100f883a 	mov	r7,r2
    5c38:	e0bffe17 	ldw	r2,-8(fp)
    5c3c:	d8800015 	stw	r2,0(sp)
    5c40:	0080ffc4 	movi	r2,1023
    5c44:	d8800115 	stw	r2,4(sp)
    5c48:	d8000215 	stw	zero,8(sp)
    5c4c:	e13ff617 	ldw	r4,-40(fp)
    5c50:	0019b840 	call	19b84 <alt_up_pixel_buffer_dma_draw_line>

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5c54:	e0bff317 	ldw	r2,-52(fp)
    5c58:	10800044 	addi	r2,r2,1
    5c5c:	e0bff315 	stw	r2,-52(fp)
    5c60:	e0bff317 	ldw	r2,-52(fp)
    5c64:	108018d0 	cmplti	r2,r2,99
    5c68:	103eef1e 	bne	r2,zero,5828 <PRVGADraw_Task+0x6ec>
				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}
		vTaskDelay(10);
    5c6c:	01000284 	movi	r4,10
    5c70:	0002e980 	call	2e98 <vTaskDelay>

	}
    5c74:	003ed406 	br	57c8 <PRVGADraw_Task+0x68c>

00005c78 <print_status_task>:
}

// The following test prints out status information every 3 seconds.
void print_status_task(void *pvParameters)
{
    5c78:	defffd04 	addi	sp,sp,-12
    5c7c:	dfc00215 	stw	ra,8(sp)
    5c80:	df000115 	stw	fp,4(sp)
    5c84:	df000104 	addi	fp,sp,4
    5c88:	e13fff15 	stw	r4,-4(fp)
	while (1)
	{
		vTaskDelay(3000);
    5c8c:	0102ee04 	movi	r4,3000
    5c90:	0002e980 	call	2e98 <vTaskDelay>
		printf("****************************************************************\n");
    5c94:	01020034 	movhi	r4,2048
    5c98:	21005d04 	addi	r4,r4,372
    5c9c:	00082e80 	call	82e8 <puts>
		printf("Hello From FreeRTOS Running on NIOS II.  Here is the status:\n");
    5ca0:	01020034 	movhi	r4,2048
    5ca4:	21006e04 	addi	r4,r4,440
    5ca8:	00082e80 	call	82e8 <puts>
		printf("\n");
    5cac:	01000284 	movi	r4,10
    5cb0:	00082240 	call	8224 <putchar>
		printf("The current frequency is:         %lf\n", temp);
    5cb4:	d0a00417 	ldw	r2,-32752(gp)
    5cb8:	01020034 	movhi	r4,2048
    5cbc:	210a1804 	addi	r4,r4,10336
    5cc0:	20c00017 	ldw	r3,0(r4)
    5cc4:	01020034 	movhi	r4,2048
    5cc8:	21007e04 	addi	r4,r4,504
    5ccc:	100b883a 	mov	r5,r2
    5cd0:	180d883a 	mov	r6,r3
    5cd4:	00081ac0 	call	81ac <printf>
		printf("\n");
    5cd8:	01000284 	movi	r4,10
    5cdc:	00082240 	call	8224 <putchar>
		printf("The frequency threshold is: %lf\n",freqThresh );
    5ce0:	d0a00617 	ldw	r2,-32744(gp)
    5ce4:	01020034 	movhi	r4,2048
    5ce8:	210a1a04 	addi	r4,r4,10344
    5cec:	20c00017 	ldw	r3,0(r4)
    5cf0:	01020034 	movhi	r4,2048
    5cf4:	21008804 	addi	r4,r4,544
    5cf8:	100b883a 	mov	r5,r2
    5cfc:	180d883a 	mov	r6,r3
    5d00:	00081ac0 	call	81ac <printf>
		printf("\n");
    5d04:	01000284 	movi	r4,10
    5d08:	00082240 	call	8224 <putchar>
		printf("The current ROC is : %lf\n", ROCThresh);
    5d0c:	d0a00817 	ldw	r2,-32736(gp)
    5d10:	01020034 	movhi	r4,2048
    5d14:	210a1c04 	addi	r4,r4,10352
    5d18:	20c00017 	ldw	r3,0(r4)
    5d1c:	01020034 	movhi	r4,2048
    5d20:	21009104 	addi	r4,r4,580
    5d24:	100b883a 	mov	r5,r2
    5d28:	180d883a 	mov	r6,r3
    5d2c:	00081ac0 	call	81ac <printf>
		printf("\n");
    5d30:	01000284 	movi	r4,10
    5d34:	00082240 	call	8224 <putchar>
		printf("The ROC threshold is: %lf\n", ROCThresh);
    5d38:	d0a00817 	ldw	r2,-32736(gp)
    5d3c:	01020034 	movhi	r4,2048
    5d40:	210a1c04 	addi	r4,r4,10352
    5d44:	20c00017 	ldw	r3,0(r4)
    5d48:	01020034 	movhi	r4,2048
    5d4c:	21009804 	addi	r4,r4,608
    5d50:	100b883a 	mov	r5,r2
    5d54:	180d883a 	mov	r6,r3
    5d58:	00081ac0 	call	81ac <printf>
		printf("\n");
    5d5c:	01000284 	movi	r4,10
    5d60:	00082240 	call	8224 <putchar>
		printf("****************************************************************\n");
    5d64:	01020034 	movhi	r4,2048
    5d68:	21005d04 	addi	r4,r4,372
    5d6c:	00082e80 	call	82e8 <puts>
		printf("\n");
    5d70:	01000284 	movi	r4,10
    5d74:	00082240 	call	8224 <putchar>
	}
    5d78:	003fc406 	br	5c8c <print_status_task+0x14>

00005d7c <keyboard_control_task>:
}

void keyboard_control_task(void *pvParameters)
{	int notiValue;
    5d7c:	defff804 	addi	sp,sp,-32
    5d80:	dfc00715 	stw	ra,28(sp)
    5d84:	df000615 	stw	fp,24(sp)
    5d88:	df000604 	addi	fp,sp,24
    5d8c:	e13fff15 	stw	r4,-4(fp)
	int i;
	int j = 0;
    5d90:	e03ffa15 	stw	zero,-24(fp)
	while (1)
	{	notiValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    5d94:	01000044 	movi	r4,1
    5d98:	017fffc4 	movi	r5,-1
    5d9c:	00042500 	call	4250 <ulTaskNotifyTake>
    5da0:	e0bffc15 	stw	r2,-16(fp)
		//printf("Scan code: %x\n", byte);



	if((byte == 45)&&(keyboardMode ==0)){
    5da4:	d0a04503 	ldbu	r2,-32492(gp)
    5da8:	10803fcc 	andi	r2,r2,255
    5dac:	10800b58 	cmpnei	r2,r2,45
    5db0:	1000101e 	bne	r2,zero,5df4 <keyboard_control_task+0x78>
    5db4:	d0a03b03 	ldbu	r2,-32532(gp)
    5db8:	10803fcc 	andi	r2,r2,255
    5dbc:	1004c03a 	cmpne	r2,r2,zero
    5dc0:	10000c1e 	bne	r2,zero,5df4 <keyboard_control_task+0x78>
		memset(testStr, 0, 30);
    5dc4:	00820234 	movhi	r2,2056
    5dc8:	10beea84 	addi	r2,r2,-1110
    5dcc:	1009883a 	mov	r4,r2
    5dd0:	01800784 	movi	r6,30
    5dd4:	000b883a 	mov	r5,zero
    5dd8:	00081140 	call	8114 <memset>
		j =0;
    5ddc:	e03ffa15 	stw	zero,-24(fp)
		printf("you are about to change ROC threshold\n");
    5de0:	01020034 	movhi	r4,2048
    5de4:	21009f04 	addi	r4,r4,636
    5de8:	00082e80 	call	82e8 <puts>
		keyboardMode =2;
    5dec:	00800084 	movi	r2,2
    5df0:	d0a03b05 	stb	r2,-32532(gp)
	}
	if(keyboardMode ==2){
    5df4:	d0a03b03 	ldbu	r2,-32532(gp)
    5df8:	10803fcc 	andi	r2,r2,255
    5dfc:	10800098 	cmpnei	r2,r2,2
    5e00:	10005e1e 	bne	r2,zero,5f7c <keyboard_control_task+0x200>
		if(byte == 90){
    5e04:	d0a04503 	ldbu	r2,-32492(gp)
    5e08:	10803fcc 	andi	r2,r2,255
    5e0c:	10801698 	cmpnei	r2,r2,90
    5e10:	10002f1e 	bne	r2,zero,5ed0 <keyboard_control_task+0x154>
		for(i = 0; i <20; i++){
    5e14:	e03ffb15 	stw	zero,-20(fp)
    5e18:	00001406 	br	5e6c <keyboard_control_task+0xf0>
			if(i%2 == 0){
    5e1c:	e0bffb17 	ldw	r2,-20(fp)
    5e20:	1080004c 	andi	r2,r2,1
    5e24:	1004c03a 	cmpne	r2,r2,zero
    5e28:	10000d1e 	bne	r2,zero,5e60 <keyboard_control_task+0xe4>
				oddStr[j++] = testStr[i];
    5e2c:	e13ffa17 	ldw	r4,-24(fp)
    5e30:	e0fffb17 	ldw	r3,-20(fp)
    5e34:	00820234 	movhi	r2,2056
    5e38:	10beea84 	addi	r2,r2,-1110
    5e3c:	10c5883a 	add	r2,r2,r3
    5e40:	10c00003 	ldbu	r3,0(r2)
    5e44:	00820234 	movhi	r2,2056
    5e48:	10bee804 	addi	r2,r2,-1120
    5e4c:	1105883a 	add	r2,r2,r4
    5e50:	10c00005 	stb	r3,0(r2)
    5e54:	e0bffa17 	ldw	r2,-24(fp)
    5e58:	10800044 	addi	r2,r2,1
    5e5c:	e0bffa15 	stw	r2,-24(fp)
		printf("you are about to change ROC threshold\n");
		keyboardMode =2;
	}
	if(keyboardMode ==2){
		if(byte == 90){
		for(i = 0; i <20; i++){
    5e60:	e0bffb17 	ldw	r2,-20(fp)
    5e64:	10800044 	addi	r2,r2,1
    5e68:	e0bffb15 	stw	r2,-20(fp)
    5e6c:	e0bffb17 	ldw	r2,-20(fp)
    5e70:	10800510 	cmplti	r2,r2,20
    5e74:	103fe91e 	bne	r2,zero,5e1c <keyboard_control_task+0xa0>
			if(i%2 == 0){
				oddStr[j++] = testStr[i];
			}
		}
		ROCThresh = strtod(oddStr, &oddStr);
    5e78:	01420234 	movhi	r5,2056
    5e7c:	297ee804 	addi	r5,r5,-1120
    5e80:	01020234 	movhi	r4,2056
    5e84:	213ee804 	addi	r4,r4,-1120
    5e88:	0009b440 	call	9b44 <strtod>
    5e8c:	1009883a 	mov	r4,r2
    5e90:	180b883a 	mov	r5,r3
    5e94:	d1200815 	stw	r4,-32736(gp)
    5e98:	00820034 	movhi	r2,2048
    5e9c:	108a1c04 	addi	r2,r2,10352
    5ea0:	11400015 	stw	r5,0(r2)
		printf("double ROC Threshold: %lf\n", ROCThresh);
    5ea4:	d0a00817 	ldw	r2,-32736(gp)
    5ea8:	01020034 	movhi	r4,2048
    5eac:	210a1c04 	addi	r4,r4,10352
    5eb0:	20c00017 	ldw	r3,0(r4)
    5eb4:	01020034 	movhi	r4,2048
    5eb8:	2100a904 	addi	r4,r4,676
    5ebc:	100b883a 	mov	r5,r2
    5ec0:	180d883a 	mov	r6,r3
    5ec4:	00081ac0 	call	81ac <printf>
		keyboardMode =0;
    5ec8:	d0203b05 	stb	zero,-32532(gp)
    5ecc:	00002b06 	br	5f7c <keyboard_control_task+0x200>
		}
		else{
					for(i = 0; i < 11; i ++){
    5ed0:	e03ffb15 	stw	zero,-20(fp)
    5ed4:	00002606 	br	5f70 <keyboard_control_task+0x1f4>
						char keyPadNum[4];
						if(byte == numbers[i]){
    5ed8:	d0a04503 	ldbu	r2,-32492(gp)
    5edc:	11003fcc 	andi	r4,r2,255
    5ee0:	e0bffb17 	ldw	r2,-20(fp)
    5ee4:	00c20034 	movhi	r3,2048
    5ee8:	18c01604 	addi	r3,r3,88
    5eec:	1085883a 	add	r2,r2,r2
    5ef0:	1085883a 	add	r2,r2,r2
    5ef4:	10c5883a 	add	r2,r2,r3
    5ef8:	10800017 	ldw	r2,0(r2)
    5efc:	2080191e 	bne	r4,r2,5f64 <keyboard_control_task+0x1e8>
							if(i != 10){
    5f00:	e0bffb17 	ldw	r2,-20(fp)
    5f04:	108002a0 	cmpeqi	r2,r2,10
    5f08:	10000b1e 	bne	r2,zero,5f38 <keyboard_control_task+0x1bc>
							sprintf(keyPadNum, "%d", i);
    5f0c:	e13ffd04 	addi	r4,fp,-12
    5f10:	01420034 	movhi	r5,2048
    5f14:	2940b004 	addi	r5,r5,704
    5f18:	e1bffb17 	ldw	r6,-20(fp)
    5f1c:	00082fc0 	call	82fc <sprintf>
							//printf("new freq Threshold: %s\n", keyPadNum);
							strncat(testStr, &keyPadNum[0], 1);
    5f20:	e17ffd04 	addi	r5,fp,-12
    5f24:	01020234 	movhi	r4,2056
    5f28:	213eea84 	addi	r4,r4,-1110
    5f2c:	01800044 	movi	r6,1
    5f30:	00084440 	call	8444 <strncat>
    5f34:	00000b06 	br	5f64 <keyboard_control_task+0x1e8>
							//printf("new ROC Threshold: %s\n", testStr);

						}else{
							strncat(testStr, &".", 1);
    5f38:	01020234 	movhi	r4,2056
    5f3c:	213eea84 	addi	r4,r4,-1110
    5f40:	00083d00 	call	83d0 <strlen>
    5f44:	1007883a 	mov	r3,r2
    5f48:	00820234 	movhi	r2,2056
    5f4c:	10beea84 	addi	r2,r2,-1110
    5f50:	1885883a 	add	r2,r3,r2
    5f54:	1007883a 	mov	r3,r2
    5f58:	00800b84 	movi	r2,46
    5f5c:	18800005 	stb	r2,0(r3)
    5f60:	18000045 	stb	zero,1(r3)
		ROCThresh = strtod(oddStr, &oddStr);
		printf("double ROC Threshold: %lf\n", ROCThresh);
		keyboardMode =0;
		}
		else{
					for(i = 0; i < 11; i ++){
    5f64:	e0bffb17 	ldw	r2,-20(fp)
    5f68:	10800044 	addi	r2,r2,1
    5f6c:	e0bffb15 	stw	r2,-20(fp)
    5f70:	e0bffb17 	ldw	r2,-20(fp)
    5f74:	108002d0 	cmplti	r2,r2,11
    5f78:	103fd71e 	bne	r2,zero,5ed8 <keyboard_control_task+0x15c>





		if((byte == 43)&&(keyboardMode ==0)){
    5f7c:	d0a04503 	ldbu	r2,-32492(gp)
    5f80:	10803fcc 	andi	r2,r2,255
    5f84:	10800ad8 	cmpnei	r2,r2,43
    5f88:	1000101e 	bne	r2,zero,5fcc <keyboard_control_task+0x250>
    5f8c:	d0a03b03 	ldbu	r2,-32532(gp)
    5f90:	10803fcc 	andi	r2,r2,255
    5f94:	1004c03a 	cmpne	r2,r2,zero
    5f98:	10000c1e 	bne	r2,zero,5fcc <keyboard_control_task+0x250>
			memset(testStr, 0, 30);
    5f9c:	00820234 	movhi	r2,2056
    5fa0:	10beea84 	addi	r2,r2,-1110
    5fa4:	1009883a 	mov	r4,r2
    5fa8:	01800784 	movi	r6,30
    5fac:	000b883a 	mov	r5,zero
    5fb0:	00081140 	call	8114 <memset>
			j =0;
    5fb4:	e03ffa15 	stw	zero,-24(fp)
			printf("you are about to change frequency threshold\n");
    5fb8:	01020034 	movhi	r4,2048
    5fbc:	2100b104 	addi	r4,r4,708
    5fc0:	00082e80 	call	82e8 <puts>
			keyboardMode =1;
    5fc4:	00800044 	movi	r2,1
    5fc8:	d0a03b05 	stb	r2,-32532(gp)
		}
		if(keyboardMode ==1){
    5fcc:	d0a03b03 	ldbu	r2,-32532(gp)
    5fd0:	10803fcc 	andi	r2,r2,255
    5fd4:	10800058 	cmpnei	r2,r2,1
    5fd8:	10005e1e 	bne	r2,zero,6154 <keyboard_control_task+0x3d8>
			if(byte == 90){
    5fdc:	d0a04503 	ldbu	r2,-32492(gp)
    5fe0:	10803fcc 	andi	r2,r2,255
    5fe4:	10801698 	cmpnei	r2,r2,90
    5fe8:	10002f1e 	bne	r2,zero,60a8 <keyboard_control_task+0x32c>
			for(i = 0; i <20; i++){
    5fec:	e03ffb15 	stw	zero,-20(fp)
    5ff0:	00001406 	br	6044 <keyboard_control_task+0x2c8>
				if(i%2 == 0){
    5ff4:	e0bffb17 	ldw	r2,-20(fp)
    5ff8:	1080004c 	andi	r2,r2,1
    5ffc:	1004c03a 	cmpne	r2,r2,zero
    6000:	10000d1e 	bne	r2,zero,6038 <keyboard_control_task+0x2bc>
					oddStr[j++] = testStr[i];
    6004:	e13ffa17 	ldw	r4,-24(fp)
    6008:	e0fffb17 	ldw	r3,-20(fp)
    600c:	00820234 	movhi	r2,2056
    6010:	10beea84 	addi	r2,r2,-1110
    6014:	10c5883a 	add	r2,r2,r3
    6018:	10c00003 	ldbu	r3,0(r2)
    601c:	00820234 	movhi	r2,2056
    6020:	10bee804 	addi	r2,r2,-1120
    6024:	1105883a 	add	r2,r2,r4
    6028:	10c00005 	stb	r3,0(r2)
    602c:	e0bffa17 	ldw	r2,-24(fp)
    6030:	10800044 	addi	r2,r2,1
    6034:	e0bffa15 	stw	r2,-24(fp)
			printf("you are about to change frequency threshold\n");
			keyboardMode =1;
		}
		if(keyboardMode ==1){
			if(byte == 90){
			for(i = 0; i <20; i++){
    6038:	e0bffb17 	ldw	r2,-20(fp)
    603c:	10800044 	addi	r2,r2,1
    6040:	e0bffb15 	stw	r2,-20(fp)
    6044:	e0bffb17 	ldw	r2,-20(fp)
    6048:	10800510 	cmplti	r2,r2,20
    604c:	103fe91e 	bne	r2,zero,5ff4 <keyboard_control_task+0x278>
				if(i%2 == 0){
					oddStr[j++] = testStr[i];
				}
			}
			freqThresh = strtod(oddStr, &oddStr);
    6050:	01420234 	movhi	r5,2056
    6054:	297ee804 	addi	r5,r5,-1120
    6058:	01020234 	movhi	r4,2056
    605c:	213ee804 	addi	r4,r4,-1120
    6060:	0009b440 	call	9b44 <strtod>
    6064:	1009883a 	mov	r4,r2
    6068:	180b883a 	mov	r5,r3
    606c:	d1200615 	stw	r4,-32744(gp)
    6070:	00820034 	movhi	r2,2048
    6074:	108a1a04 	addi	r2,r2,10344
    6078:	11400015 	stw	r5,0(r2)
			printf("double freq Threshold: %lf\n", freqThresh);
    607c:	d0a00617 	ldw	r2,-32744(gp)
    6080:	01020034 	movhi	r4,2048
    6084:	210a1a04 	addi	r4,r4,10344
    6088:	20c00017 	ldw	r3,0(r4)
    608c:	01020034 	movhi	r4,2048
    6090:	2100bc04 	addi	r4,r4,752
    6094:	100b883a 	mov	r5,r2
    6098:	180d883a 	mov	r6,r3
    609c:	00081ac0 	call	81ac <printf>
			keyboardMode =0;
    60a0:	d0203b05 	stb	zero,-32532(gp)
    60a4:	00002b06 	br	6154 <keyboard_control_task+0x3d8>
			}else{
			for(i = 0; i < 11; i ++){
    60a8:	e03ffb15 	stw	zero,-20(fp)
    60ac:	00002606 	br	6148 <keyboard_control_task+0x3cc>
				char keyPadNum[4];
				if(byte == numbers[i]){
    60b0:	d0a04503 	ldbu	r2,-32492(gp)
    60b4:	11003fcc 	andi	r4,r2,255
    60b8:	e0bffb17 	ldw	r2,-20(fp)
    60bc:	00c20034 	movhi	r3,2048
    60c0:	18c01604 	addi	r3,r3,88
    60c4:	1085883a 	add	r2,r2,r2
    60c8:	1085883a 	add	r2,r2,r2
    60cc:	10c5883a 	add	r2,r2,r3
    60d0:	10800017 	ldw	r2,0(r2)
    60d4:	2080191e 	bne	r4,r2,613c <keyboard_control_task+0x3c0>
					if(i != 10){
    60d8:	e0bffb17 	ldw	r2,-20(fp)
    60dc:	108002a0 	cmpeqi	r2,r2,10
    60e0:	10000b1e 	bne	r2,zero,6110 <keyboard_control_task+0x394>
					sprintf(keyPadNum, "%d", i);
    60e4:	e13ffe04 	addi	r4,fp,-8
    60e8:	01420034 	movhi	r5,2048
    60ec:	2940b004 	addi	r5,r5,704
    60f0:	e1bffb17 	ldw	r6,-20(fp)
    60f4:	00082fc0 	call	82fc <sprintf>
					//printf("new freq Threshold: %s\n", keyPadNum);
					strncat(testStr, &keyPadNum[0], 1);
    60f8:	e17ffe04 	addi	r5,fp,-8
    60fc:	01020234 	movhi	r4,2056
    6100:	213eea84 	addi	r4,r4,-1110
    6104:	01800044 	movi	r6,1
    6108:	00084440 	call	8444 <strncat>
    610c:	00000b06 	br	613c <keyboard_control_task+0x3c0>
					//printf("new freq Threshold: %s\n", testStr);

				}else{
					strncat(testStr, &".", 1);
    6110:	01020234 	movhi	r4,2056
    6114:	213eea84 	addi	r4,r4,-1110
    6118:	00083d00 	call	83d0 <strlen>
    611c:	1007883a 	mov	r3,r2
    6120:	00820234 	movhi	r2,2056
    6124:	10beea84 	addi	r2,r2,-1110
    6128:	1885883a 	add	r2,r3,r2
    612c:	1007883a 	mov	r3,r2
    6130:	00800b84 	movi	r2,46
    6134:	18800005 	stb	r2,0(r3)
    6138:	18000045 	stb	zero,1(r3)
			}
			freqThresh = strtod(oddStr, &oddStr);
			printf("double freq Threshold: %lf\n", freqThresh);
			keyboardMode =0;
			}else{
			for(i = 0; i < 11; i ++){
    613c:	e0bffb17 	ldw	r2,-20(fp)
    6140:	10800044 	addi	r2,r2,1
    6144:	e0bffb15 	stw	r2,-20(fp)
    6148:	e0bffb17 	ldw	r2,-20(fp)
    614c:	108002d0 	cmplti	r2,r2,11
    6150:	103fd71e 	bne	r2,zero,60b0 <keyboard_control_task+0x334>
				}
			}
		}
		}

		previousbyte = byte;
    6154:	d0a04503 	ldbu	r2,-32492(gp)
    6158:	d0a04305 	stb	r2,-32500(gp)
	}
    615c:	003f0d06 	br	5d94 <keyboard_control_task+0x18>

00006160 <stabilityMonitorTask>:
}

void stabilityMonitorTask(void *p){
    6160:	defffa04 	addi	sp,sp,-24
    6164:	dfc00515 	stw	ra,20(sp)
    6168:	df000415 	stw	fp,16(sp)
    616c:	dc400315 	stw	r17,12(sp)
    6170:	dc000215 	stw	r16,8(sp)
    6174:	df000204 	addi	fp,sp,8
    6178:	e13fff15 	stw	r4,-4(fp)
    617c:	00000006 	br	6180 <stabilityMonitorTask+0x20>
	int notiValue;
	while (1)
		{	notiValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    6180:	01000044 	movi	r4,1
    6184:	017fffc4 	movi	r5,-1
    6188:	00042500 	call	4250 <ulTaskNotifyTake>
    618c:	e0bffe15 	stw	r2,-8(fp)

			currentROC = (temp-previousFreq) * 2.0 *temp* previousFreq / (temp+previousFreq);
    6190:	d1600417 	ldw	r5,-32752(gp)
    6194:	00820034 	movhi	r2,2048
    6198:	108a1804 	addi	r2,r2,10336
    619c:	11800017 	ldw	r6,0(r2)
    61a0:	d0a00a17 	ldw	r2,-32728(gp)
    61a4:	01020034 	movhi	r4,2048
    61a8:	210a1e04 	addi	r4,r4,10360
    61ac:	20c00017 	ldw	r3,0(r4)
    61b0:	2809883a 	mov	r4,r5
    61b4:	300b883a 	mov	r5,r6
    61b8:	100d883a 	mov	r6,r2
    61bc:	180f883a 	mov	r7,r3
    61c0:	0006f5c0 	call	6f5c <__subdf3>
    61c4:	1009883a 	mov	r4,r2
    61c8:	180b883a 	mov	r5,r3
    61cc:	2005883a 	mov	r2,r4
    61d0:	2807883a 	mov	r3,r5
    61d4:	1009883a 	mov	r4,r2
    61d8:	180b883a 	mov	r5,r3
    61dc:	100d883a 	mov	r6,r2
    61e0:	180f883a 	mov	r7,r3
    61e4:	0006fdc0 	call	6fdc <__adddf3>
    61e8:	1009883a 	mov	r4,r2
    61ec:	180b883a 	mov	r5,r3
    61f0:	200d883a 	mov	r6,r4
    61f4:	280f883a 	mov	r7,r5
    61f8:	d0a00417 	ldw	r2,-32752(gp)
    61fc:	01020034 	movhi	r4,2048
    6200:	210a1804 	addi	r4,r4,10336
    6204:	20c00017 	ldw	r3,0(r4)
    6208:	3009883a 	mov	r4,r6
    620c:	380b883a 	mov	r5,r7
    6210:	100d883a 	mov	r6,r2
    6214:	180f883a 	mov	r7,r3
    6218:	00070500 	call	7050 <__muldf3>
    621c:	1009883a 	mov	r4,r2
    6220:	180b883a 	mov	r5,r3
    6224:	200d883a 	mov	r6,r4
    6228:	280f883a 	mov	r7,r5
    622c:	d0a00a17 	ldw	r2,-32728(gp)
    6230:	01020034 	movhi	r4,2048
    6234:	210a1e04 	addi	r4,r4,10360
    6238:	20c00017 	ldw	r3,0(r4)
    623c:	3009883a 	mov	r4,r6
    6240:	380b883a 	mov	r5,r7
    6244:	100d883a 	mov	r6,r2
    6248:	180f883a 	mov	r7,r3
    624c:	00070500 	call	7050 <__muldf3>
    6250:	1009883a 	mov	r4,r2
    6254:	180b883a 	mov	r5,r3
    6258:	2021883a 	mov	r16,r4
    625c:	2823883a 	mov	r17,r5
    6260:	d1600417 	ldw	r5,-32752(gp)
    6264:	00820034 	movhi	r2,2048
    6268:	108a1804 	addi	r2,r2,10336
    626c:	11800017 	ldw	r6,0(r2)
    6270:	d0a00a17 	ldw	r2,-32728(gp)
    6274:	01020034 	movhi	r4,2048
    6278:	210a1e04 	addi	r4,r4,10360
    627c:	20c00017 	ldw	r3,0(r4)
    6280:	2809883a 	mov	r4,r5
    6284:	300b883a 	mov	r5,r6
    6288:	100d883a 	mov	r6,r2
    628c:	180f883a 	mov	r7,r3
    6290:	0006fdc0 	call	6fdc <__adddf3>
    6294:	1009883a 	mov	r4,r2
    6298:	180b883a 	mov	r5,r3
    629c:	2005883a 	mov	r2,r4
    62a0:	2807883a 	mov	r3,r5
    62a4:	8009883a 	mov	r4,r16
    62a8:	880b883a 	mov	r5,r17
    62ac:	100d883a 	mov	r6,r2
    62b0:	180f883a 	mov	r7,r3
    62b4:	00074140 	call	7414 <__divdf3>
    62b8:	1009883a 	mov	r4,r2
    62bc:	180b883a 	mov	r5,r3
    62c0:	2005883a 	mov	r2,r4
    62c4:	2807883a 	mov	r3,r5
    62c8:	d0a04715 	stw	r2,-32484(gp)
    62cc:	01020034 	movhi	r4,2048
    62d0:	210a5b04 	addi	r4,r4,10604
    62d4:	20c00015 	stw	r3,0(r4)
			currentROC = fabs(currentROC);
    62d8:	d1204717 	ldw	r4,-32484(gp)
    62dc:	00820034 	movhi	r2,2048
    62e0:	108a5b04 	addi	r2,r2,10604
    62e4:	11400017 	ldw	r5,0(r2)
    62e8:	01a00034 	movhi	r6,32768
    62ec:	31bfffc4 	addi	r6,r6,-1
    62f0:	2005883a 	mov	r2,r4
    62f4:	2986703a 	and	r3,r5,r6
    62f8:	d0a04715 	stw	r2,-32484(gp)
    62fc:	01020034 	movhi	r4,2048
    6300:	210a5b04 	addi	r4,r4,10604
    6304:	20c00015 	stw	r3,0(r4)
			printf("real time frequency: %lf\n", temp);
    6308:	d0a00417 	ldw	r2,-32752(gp)
    630c:	01020034 	movhi	r4,2048
    6310:	210a1804 	addi	r4,r4,10336
    6314:	20c00017 	ldw	r3,0(r4)
    6318:	01020034 	movhi	r4,2048
    631c:	2100c304 	addi	r4,r4,780
    6320:	100b883a 	mov	r5,r2
    6324:	180d883a 	mov	r6,r3
    6328:	00081ac0 	call	81ac <printf>
			printf("real time ROC: %lf\n", currentROC);
    632c:	d0a04717 	ldw	r2,-32484(gp)
    6330:	01020034 	movhi	r4,2048
    6334:	210a5b04 	addi	r4,r4,10604
    6338:	20c00017 	ldw	r3,0(r4)
    633c:	01020034 	movhi	r4,2048
    6340:	2100ca04 	addi	r4,r4,808
    6344:	100b883a 	mov	r5,r2
    6348:	180d883a 	mov	r6,r3
    634c:	00081ac0 	call	81ac <printf>
			previousFreq = temp;
    6350:	d0a00417 	ldw	r2,-32752(gp)
    6354:	01020034 	movhi	r4,2048
    6358:	210a1804 	addi	r4,r4,10336
    635c:	20c00017 	ldw	r3,0(r4)
    6360:	d0a00a15 	stw	r2,-32728(gp)
    6364:	01020034 	movhi	r4,2048
    6368:	210a1e04 	addi	r4,r4,10360
    636c:	20c00015 	stw	r3,0(r4)

			if((loadManage ==false )&&((temp <= freqThresh )||(currentROC >= ROCThresh))){
    6370:	d0a03d03 	ldbu	r2,-32524(gp)
    6374:	10803fcc 	andi	r2,r2,255
    6378:	1004c03a 	cmpne	r2,r2,zero
    637c:	1000241e 	bne	r2,zero,6410 <stabilityMonitorTask+0x2b0>
    6380:	d1600417 	ldw	r5,-32752(gp)
    6384:	00820034 	movhi	r2,2048
    6388:	108a1804 	addi	r2,r2,10336
    638c:	11800017 	ldw	r6,0(r2)
    6390:	d0a00617 	ldw	r2,-32744(gp)
    6394:	01020034 	movhi	r4,2048
    6398:	210a1a04 	addi	r4,r4,10344
    639c:	20c00017 	ldw	r3,0(r4)
    63a0:	2809883a 	mov	r4,r5
    63a4:	300b883a 	mov	r5,r6
    63a8:	100d883a 	mov	r6,r2
    63ac:	180f883a 	mov	r7,r3
    63b0:	000777c0 	call	777c <__ledf2>
    63b4:	10800050 	cmplti	r2,r2,1
    63b8:	1000101e 	bne	r2,zero,63fc <stabilityMonitorTask+0x29c>
    63bc:	d1604717 	ldw	r5,-32484(gp)
    63c0:	00820034 	movhi	r2,2048
    63c4:	108a5b04 	addi	r2,r2,10604
    63c8:	11800017 	ldw	r6,0(r2)
    63cc:	d0a00817 	ldw	r2,-32736(gp)
    63d0:	01020034 	movhi	r4,2048
    63d4:	210a1c04 	addi	r4,r4,10352
    63d8:	20c00017 	ldw	r3,0(r4)
    63dc:	2809883a 	mov	r4,r5
    63e0:	300b883a 	mov	r5,r6
    63e4:	100d883a 	mov	r6,r2
    63e8:	180f883a 	mov	r7,r3
    63ec:	00076f40 	call	76f4 <__gedf2>
    63f0:	1004403a 	cmpge	r2,r2,zero
    63f4:	1000011e 	bne	r2,zero,63fc <stabilityMonitorTask+0x29c>
    63f8:	00000506 	br	6410 <stabilityMonitorTask+0x2b0>
				loadManage = true;
    63fc:	00800044 	movi	r2,1
    6400:	d0a03d05 	stb	r2,-32524(gp)
				numOfShed = numOfShed+1;
    6404:	d0a03c17 	ldw	r2,-32528(gp)
    6408:	10800044 	addi	r2,r2,1
    640c:	d0a03c15 	stw	r2,-32528(gp)
			}
			if((loadManage ==true )&&((temp >= freqThresh )&&(currentROC <= ROCThresh))){
    6410:	d0a03d03 	ldbu	r2,-32524(gp)
    6414:	10803fcc 	andi	r2,r2,255
    6418:	1005003a 	cmpeq	r2,r2,zero
    641c:	103f581e 	bne	r2,zero,6180 <stabilityMonitorTask+0x20>
    6420:	d1600417 	ldw	r5,-32752(gp)
    6424:	00820034 	movhi	r2,2048
    6428:	108a1804 	addi	r2,r2,10336
    642c:	11800017 	ldw	r6,0(r2)
    6430:	d0a00617 	ldw	r2,-32744(gp)
    6434:	01020034 	movhi	r4,2048
    6438:	210a1a04 	addi	r4,r4,10344
    643c:	20c00017 	ldw	r3,0(r4)
    6440:	2809883a 	mov	r4,r5
    6444:	300b883a 	mov	r5,r6
    6448:	100d883a 	mov	r6,r2
    644c:	180f883a 	mov	r7,r3
    6450:	00076f40 	call	76f4 <__gedf2>
    6454:	1004403a 	cmpge	r2,r2,zero
    6458:	1000011e 	bne	r2,zero,6460 <stabilityMonitorTask+0x300>
    645c:	003f4806 	br	6180 <stabilityMonitorTask+0x20>
    6460:	d1604717 	ldw	r5,-32484(gp)
    6464:	00820034 	movhi	r2,2048
    6468:	108a5b04 	addi	r2,r2,10604
    646c:	11800017 	ldw	r6,0(r2)
    6470:	d0a00817 	ldw	r2,-32736(gp)
    6474:	01020034 	movhi	r4,2048
    6478:	210a1c04 	addi	r4,r4,10352
    647c:	20c00017 	ldw	r3,0(r4)
    6480:	2809883a 	mov	r4,r5
    6484:	300b883a 	mov	r5,r6
    6488:	100d883a 	mov	r6,r2
    648c:	180f883a 	mov	r7,r3
    6490:	000777c0 	call	777c <__ledf2>
    6494:	10800050 	cmplti	r2,r2,1
    6498:	1000011e 	bne	r2,zero,64a0 <stabilityMonitorTask+0x340>
    649c:	003f3806 	br	6180 <stabilityMonitorTask+0x20>
				loadManage = false;
    64a0:	d0203d05 	stb	zero,-32524(gp)
				numOfShed = 0;
    64a4:	d0203c15 	stw	zero,-32528(gp)
			}

		}
    64a8:	003f3506 	br	6180 <stabilityMonitorTask+0x20>

000064ac <loadCtlTask>:
}


void loadCtlTask(void *p){
    64ac:	defffb04 	addi	sp,sp,-20
    64b0:	dfc00415 	stw	ra,16(sp)
    64b4:	df000315 	stw	fp,12(sp)
    64b8:	df000304 	addi	fp,sp,12
    64bc:	e13fff15 	stw	r4,-4(fp)

	int load_output;
	while(1){
		if(loadManage ==true){
    64c0:	d0a03d03 	ldbu	r2,-32524(gp)
    64c4:	10803fcc 	andi	r2,r2,255
    64c8:	1005003a 	cmpeq	r2,r2,zero
    64cc:	1000091e 	bne	r2,zero,64f4 <loadCtlTask+0x48>
			int* output = shedLoads(numOfShed,sw_result_bin);
    64d0:	d1203c17 	ldw	r4,-32528(gp)
    64d4:	01420234 	movhi	r5,2056
    64d8:	297fba04 	addi	r5,r5,-280
    64dc:	00065200 	call	6520 <shedLoads>
    64e0:	e0bffd15 	stw	r2,-12(fp)
			load_output = binaryToDecimal(output);
    64e4:	e13ffd17 	ldw	r4,-12(fp)
    64e8:	00066780 	call	6678 <binaryToDecimal>
    64ec:	e0bffe15 	stw	r2,-8(fp)
    64f0:	00000406 	br	6504 <loadCtlTask+0x58>
		}else{

		load_output = binaryToDecimal(sw_result_bin);
    64f4:	01020234 	movhi	r4,2056
    64f8:	213fba04 	addi	r4,r4,-280
    64fc:	00066780 	call	6678 <binaryToDecimal>
    6500:	e0bffe15 	stw	r2,-8(fp)
		//printf(" %d ",  load_output);
		}
	    IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, load_output);    //light red LEDs according to switch positions
    6504:	00c00134 	movhi	r3,4
    6508:	18cc1804 	addi	r3,r3,12384
    650c:	e0bffe17 	ldw	r2,-8(fp)
    6510:	18800035 	stwio	r2,0(r3)
	    vTaskDelay(50);
    6514:	01000c84 	movi	r4,50
    6518:	0002e980 	call	2e98 <vTaskDelay>
	}
    651c:	003fe806 	br	64c0 <loadCtlTask+0x14>

00006520 <shedLoads>:

}

int* shedLoads(int numOfShed,int sw_result_bin[]){
    6520:	defff604 	addi	sp,sp,-40
    6524:	df000915 	stw	fp,36(sp)
    6528:	df000904 	addi	fp,sp,36
    652c:	e13ffb15 	stw	r4,-20(fp)
    6530:	e17ffc15 	stw	r5,-16(fp)
    6534:	e6ffff15 	stw	sp,-4(fp)
    6538:	d805883a 	mov	r2,sp
    653c:	e0bffd15 	stw	r2,-12(fp)

	int len = current_sw_size;
    6540:	d0a04a17 	ldw	r2,-32472(gp)
    6544:	e0bff915 	stw	r2,-28(fp)
	int output[len];
    6548:	e0bff917 	ldw	r2,-28(fp)
    654c:	1085883a 	add	r2,r2,r2
    6550:	1085883a 	add	r2,r2,r2
    6554:	108000c4 	addi	r2,r2,3
    6558:	108000c4 	addi	r2,r2,3
    655c:	1004d0ba 	srli	r2,r2,2
    6560:	1085883a 	add	r2,r2,r2
    6564:	1085883a 	add	r2,r2,r2
    6568:	d8b7c83a 	sub	sp,sp,r2
    656c:	e6fffe15 	stw	sp,-8(fp)
    6570:	e0fffe17 	ldw	r3,-8(fp)
    6574:	188000c4 	addi	r2,r3,3
    6578:	1004d0ba 	srli	r2,r2,2
    657c:	1085883a 	add	r2,r2,r2
    6580:	1085883a 	add	r2,r2,r2
    6584:	e0bffe15 	stw	r2,-8(fp)
    6588:	e0bffe17 	ldw	r2,-8(fp)
    658c:	e0bffa15 	stw	r2,-24(fp)
	int m = 0;
    6590:	e03ff815 	stw	zero,-32(fp)
	int count = 0;
    6594:	e03ff715 	stw	zero,-36(fp)

	for (m = 0; m < len; m++) {
    6598:	e03ff815 	stw	zero,-32(fp)
    659c:	00001006 	br	65e0 <shedLoads+0xc0>
		 output[m] = sw_result_bin[m];
    65a0:	e17ff817 	ldw	r5,-32(fp)
    65a4:	e0bff817 	ldw	r2,-32(fp)
    65a8:	1085883a 	add	r2,r2,r2
    65ac:	1085883a 	add	r2,r2,r2
    65b0:	1007883a 	mov	r3,r2
    65b4:	e0bffc17 	ldw	r2,-16(fp)
    65b8:	1885883a 	add	r2,r3,r2
    65bc:	11000017 	ldw	r4,0(r2)
    65c0:	e0fffa17 	ldw	r3,-24(fp)
    65c4:	2945883a 	add	r2,r5,r5
    65c8:	1085883a 	add	r2,r2,r2
    65cc:	10c5883a 	add	r2,r2,r3
    65d0:	11000015 	stw	r4,0(r2)
	int len = current_sw_size;
	int output[len];
	int m = 0;
	int count = 0;

	for (m = 0; m < len; m++) {
    65d4:	e0bff817 	ldw	r2,-32(fp)
    65d8:	10800044 	addi	r2,r2,1
    65dc:	e0bff815 	stw	r2,-32(fp)
    65e0:	e0fff817 	ldw	r3,-32(fp)
    65e4:	e0bff917 	ldw	r2,-28(fp)
    65e8:	18bfed16 	blt	r3,r2,65a0 <shedLoads+0x80>
		 output[m] = sw_result_bin[m];
	}

	for (m = 0; m< len ; m++) {
    65ec:	e03ff815 	stw	zero,-32(fp)
    65f0:	00001706 	br	6650 <shedLoads+0x130>
	        if((output[m] == 1)&&(count < numOfShed)){
    65f4:	e0bff817 	ldw	r2,-32(fp)
    65f8:	e0fffa17 	ldw	r3,-24(fp)
    65fc:	1085883a 	add	r2,r2,r2
    6600:	1085883a 	add	r2,r2,r2
    6604:	10c5883a 	add	r2,r2,r3
    6608:	10800017 	ldw	r2,0(r2)
    660c:	10800058 	cmpnei	r2,r2,1
    6610:	10000c1e 	bne	r2,zero,6644 <shedLoads+0x124>
    6614:	e0fff717 	ldw	r3,-36(fp)
    6618:	e0bffb17 	ldw	r2,-20(fp)
    661c:	1880090e 	bge	r3,r2,6644 <shedLoads+0x124>
	        	output[m] = 0;
    6620:	e0bff817 	ldw	r2,-32(fp)
    6624:	e0fffa17 	ldw	r3,-24(fp)
    6628:	1085883a 	add	r2,r2,r2
    662c:	1085883a 	add	r2,r2,r2
    6630:	10c5883a 	add	r2,r2,r3
    6634:	10000015 	stw	zero,0(r2)
	        	count ++;
    6638:	e0bff717 	ldw	r2,-36(fp)
    663c:	10800044 	addi	r2,r2,1
    6640:	e0bff715 	stw	r2,-36(fp)

	for (m = 0; m < len; m++) {
		 output[m] = sw_result_bin[m];
	}

	for (m = 0; m< len ; m++) {
    6644:	e0bff817 	ldw	r2,-32(fp)
    6648:	10800044 	addi	r2,r2,1
    664c:	e0bff815 	stw	r2,-32(fp)
    6650:	e0fff817 	ldw	r3,-32(fp)
    6654:	e0bff917 	ldw	r2,-28(fp)
    6658:	18bfe616 	blt	r3,r2,65f4 <shedLoads+0xd4>
	        if((output[m] == 1)&&(count < numOfShed)){
	        	output[m] = 0;
	        	count ++;
	        }
	}
	return output;
    665c:	e0bffa17 	ldw	r2,-24(fp)
    6660:	e6fffd17 	ldw	sp,-12(fp)
}
    6664:	e6ffff17 	ldw	sp,-4(fp)
    6668:	e037883a 	mov	sp,fp
    666c:	df000017 	ldw	fp,0(sp)
    6670:	dec00104 	addi	sp,sp,4
    6674:	f800283a 	ret

00006678 <binaryToDecimal>:


int binaryToDecimal(int sw_result_bin[]){
    6678:	defff604 	addi	sp,sp,-40
    667c:	df000915 	stw	fp,36(sp)
    6680:	df000904 	addi	fp,sp,36
    6684:	e13ffc15 	stw	r4,-16(fp)
    6688:	e6ffff15 	stw	sp,-4(fp)
    668c:	d805883a 	mov	r2,sp
    6690:	e0bffd15 	stw	r2,-12(fp)
	int m = 0;
    6694:	e03ffa15 	stw	zero,-24(fp)
	int dec_value = 0;
    6698:	e03ff915 	stw	zero,-28(fp)
	int base = 1;
    669c:	00800044 	movi	r2,1
    66a0:	e0bff815 	stw	r2,-32(fp)
	int len = current_sw_size;
    66a4:	d0a04a17 	ldw	r2,-32472(gp)
    66a8:	e0bff715 	stw	r2,-36(fp)
	int output[len];
    66ac:	e0bff717 	ldw	r2,-36(fp)
    66b0:	1085883a 	add	r2,r2,r2
    66b4:	1085883a 	add	r2,r2,r2
    66b8:	108000c4 	addi	r2,r2,3
    66bc:	108000c4 	addi	r2,r2,3
    66c0:	1004d0ba 	srli	r2,r2,2
    66c4:	1085883a 	add	r2,r2,r2
    66c8:	1085883a 	add	r2,r2,r2
    66cc:	d8b7c83a 	sub	sp,sp,r2
    66d0:	e6fffe15 	stw	sp,-8(fp)
    66d4:	e0fffe17 	ldw	r3,-8(fp)
    66d8:	188000c4 	addi	r2,r3,3
    66dc:	1004d0ba 	srli	r2,r2,2
    66e0:	1085883a 	add	r2,r2,r2
    66e4:	1085883a 	add	r2,r2,r2
    66e8:	e0bffe15 	stw	r2,-8(fp)
    66ec:	e0bffe17 	ldw	r2,-8(fp)
    66f0:	e0bffb15 	stw	r2,-20(fp)
	//printf(" %d ",  len);
	  for (m = 0; m < len; m++) {
    66f4:	e03ffa15 	stw	zero,-24(fp)
    66f8:	00001006 	br	673c <binaryToDecimal+0xc4>
		  output[m] = sw_result_bin[m];
    66fc:	e17ffa17 	ldw	r5,-24(fp)
    6700:	e0bffa17 	ldw	r2,-24(fp)
    6704:	1085883a 	add	r2,r2,r2
    6708:	1085883a 	add	r2,r2,r2
    670c:	1007883a 	mov	r3,r2
    6710:	e0bffc17 	ldw	r2,-16(fp)
    6714:	1885883a 	add	r2,r3,r2
    6718:	11000017 	ldw	r4,0(r2)
    671c:	e0fffb17 	ldw	r3,-20(fp)
    6720:	2945883a 	add	r2,r5,r5
    6724:	1085883a 	add	r2,r2,r2
    6728:	10c5883a 	add	r2,r2,r3
    672c:	11000015 	stw	r4,0(r2)
	int dec_value = 0;
	int base = 1;
	int len = current_sw_size;
	int output[len];
	//printf(" %d ",  len);
	  for (m = 0; m < len; m++) {
    6730:	e0bffa17 	ldw	r2,-24(fp)
    6734:	10800044 	addi	r2,r2,1
    6738:	e0bffa15 	stw	r2,-24(fp)
    673c:	e0fffa17 	ldw	r3,-24(fp)
    6740:	e0bff717 	ldw	r2,-36(fp)
    6744:	18bfed16 	blt	r3,r2,66fc <binaryToDecimal+0x84>
		  output[m] = sw_result_bin[m];
	    }

	for (m = 0; m < len; m++) {
    6748:	e03ffa15 	stw	zero,-24(fp)
    674c:	00001206 	br	6798 <binaryToDecimal+0x120>
	        if(output[m] == 1){
    6750:	e0bffa17 	ldw	r2,-24(fp)
    6754:	e0fffb17 	ldw	r3,-20(fp)
    6758:	1085883a 	add	r2,r2,r2
    675c:	1085883a 	add	r2,r2,r2
    6760:	10c5883a 	add	r2,r2,r3
    6764:	10800017 	ldw	r2,0(r2)
    6768:	10800058 	cmpnei	r2,r2,1
    676c:	1000041e 	bne	r2,zero,6780 <binaryToDecimal+0x108>
	            dec_value += base;
    6770:	e0bff917 	ldw	r2,-28(fp)
    6774:	e0fff817 	ldw	r3,-32(fp)
    6778:	10c5883a 	add	r2,r2,r3
    677c:	e0bff915 	stw	r2,-28(fp)
	        }
	        base = base * 2;
    6780:	e0bff817 	ldw	r2,-32(fp)
    6784:	1085883a 	add	r2,r2,r2
    6788:	e0bff815 	stw	r2,-32(fp)
	//printf(" %d ",  len);
	  for (m = 0; m < len; m++) {
		  output[m] = sw_result_bin[m];
	    }

	for (m = 0; m < len; m++) {
    678c:	e0bffa17 	ldw	r2,-24(fp)
    6790:	10800044 	addi	r2,r2,1
    6794:	e0bffa15 	stw	r2,-24(fp)
    6798:	e0fffa17 	ldw	r3,-24(fp)
    679c:	e0bff717 	ldw	r2,-36(fp)
    67a0:	18bfeb16 	blt	r3,r2,6750 <binaryToDecimal+0xd8>
	        if(output[m] == 1){
	            dec_value += base;
	        }
	        base = base * 2;
}
	return dec_value;
    67a4:	e0bff917 	ldw	r2,-28(fp)
    67a8:	e6fffd17 	ldw	sp,-12(fp)
}
    67ac:	e6ffff17 	ldw	sp,-4(fp)
    67b0:	e037883a 	mov	sp,fp
    67b4:	df000017 	ldw	fp,0(sp)
    67b8:	dec00104 	addi	sp,sp,4
    67bc:	f800283a 	ret

000067c0 <switchPollingTask>:

void switchPollingTask(void *p){
    67c0:	defff904 	addi	sp,sp,-28
    67c4:	dfc00615 	stw	ra,24(sp)
    67c8:	df000515 	stw	fp,20(sp)
    67cc:	df000504 	addi	fp,sp,20
    67d0:	e13ffd15 	stw	r4,-12(fp)
	int k,l;
	while(1){
	if(loadManage == false){
    67d4:	d0a03d03 	ldbu	r2,-32524(gp)
    67d8:	10803fcc 	andi	r2,r2,255
    67dc:	1004c03a 	cmpne	r2,r2,zero
    67e0:	10003a1e 	bne	r2,zero,68cc <switchPollingTask+0x10c>
	sw_result=IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE); //read slide switches
    67e4:	00800134 	movhi	r2,4
    67e8:	108c2c04 	addi	r2,r2,12464
    67ec:	10800037 	ldwio	r2,0(r2)
    67f0:	d0a03f15 	stw	r2,-32516(gp)
	for(k=0; sw_result>0; k++){
    67f4:	e03ffc15 	stw	zero,-16(fp)
    67f8:	00002506 	br	6890 <switchPollingTask+0xd0>
		sw_result_bin[k] = sw_result%2;
    67fc:	e0bffc17 	ldw	r2,-16(fp)
    6800:	e0bffe15 	stw	r2,-8(fp)
    6804:	d0a03f17 	ldw	r2,-32516(gp)
    6808:	00e00034 	movhi	r3,32768
    680c:	18c00044 	addi	r3,r3,1
    6810:	10c4703a 	and	r2,r2,r3
    6814:	e0bfff15 	stw	r2,-4(fp)
    6818:	e0ffff17 	ldw	r3,-4(fp)
    681c:	1804403a 	cmpge	r2,r3,zero
    6820:	10000a1e 	bne	r2,zero,684c <switchPollingTask+0x8c>
    6824:	e17fff17 	ldw	r5,-4(fp)
    6828:	297fffc4 	addi	r5,r5,-1
    682c:	e17fff15 	stw	r5,-4(fp)
    6830:	00bfff84 	movi	r2,-2
    6834:	e1bfff17 	ldw	r6,-4(fp)
    6838:	308cb03a 	or	r6,r6,r2
    683c:	e1bfff15 	stw	r6,-4(fp)
    6840:	e0bfff17 	ldw	r2,-4(fp)
    6844:	10800044 	addi	r2,r2,1
    6848:	e0bfff15 	stw	r2,-4(fp)
    684c:	e13fff17 	ldw	r4,-4(fp)
    6850:	00c20234 	movhi	r3,2056
    6854:	18ffba04 	addi	r3,r3,-280
    6858:	e17ffe17 	ldw	r5,-8(fp)
    685c:	e17ffe17 	ldw	r5,-8(fp)
    6860:	2945883a 	add	r2,r5,r5
    6864:	1085883a 	add	r2,r2,r2
    6868:	10c5883a 	add	r2,r2,r3
    686c:	11000015 	stw	r4,0(r2)
		sw_result = sw_result /2;
    6870:	d0e03f17 	ldw	r3,-32516(gp)
    6874:	1804d7fa 	srli	r2,r3,31
    6878:	10c5883a 	add	r2,r2,r3
    687c:	1005d07a 	srai	r2,r2,1
    6880:	d0a03f15 	stw	r2,-32516(gp)
void switchPollingTask(void *p){
	int k,l;
	while(1){
	if(loadManage == false){
	sw_result=IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE); //read slide switches
	for(k=0; sw_result>0; k++){
    6884:	e0bffc17 	ldw	r2,-16(fp)
    6888:	10800044 	addi	r2,r2,1
    688c:	e0bffc15 	stw	r2,-16(fp)
    6890:	d0a03f17 	ldw	r2,-32516(gp)
    6894:	10800048 	cmpgei	r2,r2,1
    6898:	103fd81e 	bne	r2,zero,67fc <switchPollingTask+0x3c>
		sw_result_bin[k] = sw_result%2;
		sw_result = sw_result /2;
	}
	current_sw_size =k;
    689c:	e0bffc17 	ldw	r2,-16(fp)
    68a0:	d0a04a15 	stw	r2,-32472(gp)
	//printf("real time ROC:");
    for(l = k - 1; l >= 0; l--)  {
    68a4:	e0bffc17 	ldw	r2,-16(fp)
    68a8:	10bfffc4 	addi	r2,r2,-1
    68ac:	e0bffb15 	stw	r2,-20(fp)
    68b0:	00000306 	br	68c0 <switchPollingTask+0x100>
    68b4:	e0bffb17 	ldw	r2,-20(fp)
    68b8:	10bfffc4 	addi	r2,r2,-1
    68bc:	e0bffb15 	stw	r2,-20(fp)
    68c0:	e0bffb17 	ldw	r2,-20(fp)
    68c4:	1004403a 	cmpge	r2,r2,zero
    68c8:	103ffa1e 	bne	r2,zero,68b4 <switchPollingTask+0xf4>
        //printf(" %d ", sw_result_bin[l]);
    }
	}
    vTaskDelay(150);
    68cc:	01002584 	movi	r4,150
    68d0:	0002e980 	call	2e98 <vTaskDelay>
	}
    68d4:	003fbf06 	br	67d4 <switchPollingTask+0x14>

000068d8 <freq_relay>:
}


void freq_relay(){
    68d8:	defffd04 	addi	sp,sp,-12
    68dc:	dfc00215 	stw	ra,8(sp)
    68e0:	df000115 	stw	fp,4(sp)
    68e4:	df000104 	addi	fp,sp,4
	#define SAMPLING_FREQ 16000.0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    68e8:	e03fff15 	stw	zero,-4(fp)
	temp = SAMPLING_FREQ/(double)IORD(FREQUENCY_ANALYSER_BASE, 0);
    68ec:	00800134 	movhi	r2,4
    68f0:	108c4004 	addi	r2,r2,12544
    68f4:	11000037 	ldwio	r4,0(r2)
    68f8:	00078040 	call	7804 <__floatsidf>
    68fc:	100f883a 	mov	r7,r2
    6900:	1811883a 	mov	r8,r3
    6904:	0009883a 	mov	r4,zero
    6908:	015033f4 	movhi	r5,16591
    690c:	29500004 	addi	r5,r5,16384
    6910:	380d883a 	mov	r6,r7
    6914:	400f883a 	mov	r7,r8
    6918:	00074140 	call	7414 <__divdf3>
    691c:	1009883a 	mov	r4,r2
    6920:	180b883a 	mov	r5,r3
    6924:	2005883a 	mov	r2,r4
    6928:	2807883a 	mov	r3,r5
    692c:	d0a00415 	stw	r2,-32752(gp)
    6930:	01020034 	movhi	r4,2048
    6934:	210a1804 	addi	r4,r4,10336
    6938:	20c00015 	stw	r3,0(r4)


	xQueueSendToBackFromISR( Q_freq_data, &temp, pdFALSE );
    693c:	d1203e17 	ldw	r4,-32520(gp)
    6940:	d1600404 	addi	r5,gp,-32752
    6944:	000d883a 	mov	r6,zero
    6948:	000f883a 	mov	r7,zero
    694c:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
	xTaskNotifyFromISR(stableTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    6950:	d1204117 	ldw	r4,-32508(gp)
    6954:	01400044 	movi	r5,1
    6958:	018000c4 	movi	r6,3
    695c:	e1ffff04 	addi	r7,fp,-4
    6960:	00045bc0 	call	45bc <xTaskNotifyFromISR>
	return;
}
    6964:	e037883a 	mov	sp,fp
    6968:	dfc00117 	ldw	ra,4(sp)
    696c:	df000017 	ldw	fp,0(sp)
    6970:	dec00204 	addi	sp,sp,8
    6974:	f800283a 	ret

00006978 <ps2_isr>:

void ps2_isr(void* ps2_device, alt_u32 id){
    6978:	defffb04 	addi	sp,sp,-20
    697c:	dfc00415 	stw	ra,16(sp)
    6980:	df000315 	stw	fp,12(sp)
    6984:	df000304 	addi	fp,sp,12
    6988:	e13ffe15 	stw	r4,-8(fp)
    698c:	e17fff15 	stw	r5,-4(fp)

	alt_up_ps2_read_data_byte_timeout(ps2_device, &byte);
    6990:	e13ffe17 	ldw	r4,-8(fp)
    6994:	d1604504 	addi	r5,gp,-32492
    6998:	00183a80 	call	183a8 <alt_up_ps2_read_data_byte_timeout>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    699c:	e03ffd15 	stw	zero,-12(fp)
	  // Send a notification to index 0 with value 1
	xTaskNotifyFromISR(keyboardTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    69a0:	d1204617 	ldw	r4,-32488(gp)
    69a4:	01400044 	movi	r5,1
    69a8:	018000c4 	movi	r6,3
    69ac:	e1fffd04 	addi	r7,fp,-12
    69b0:	00045bc0 	call	45bc <xTaskNotifyFromISR>
}
    69b4:	e037883a 	mov	sp,fp
    69b8:	dfc00117 	ldw	ra,4(sp)
    69bc:	df000017 	ldw	fp,0(sp)
    69c0:	dec00204 	addi	sp,sp,8
    69c4:	f800283a 	ret

000069c8 <main>:

int main()
{
    69c8:	defff904 	addi	sp,sp,-28
    69cc:	dfc00615 	stw	ra,24(sp)
    69d0:	df000515 	stw	fp,20(sp)
    69d4:	df000504 	addi	fp,sp,20
	Q_freq_data = xQueueCreate(100,sizeof(double));
    69d8:	01001904 	movi	r4,100
    69dc:	01400204 	movi	r5,8
    69e0:	000d883a 	mov	r6,zero
    69e4:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    69e8:	d0a03e15 	stw	r2,-32520(gp)
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
    69ec:	01020034 	movhi	r4,2048
    69f0:	2100cf04 	addi	r4,r4,828
    69f4:	00186700 	call	18670 <alt_up_ps2_open_dev>
    69f8:	e0bfff15 	stw	r2,-4(fp)

	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay);
    69fc:	010001c4 	movi	r4,7
    6a00:	000b883a 	mov	r5,zero
    6a04:	01800034 	movhi	r6,0
    6a08:	319a3604 	addi	r6,r6,26840
    6a0c:	00019140 	call	1914 <alt_irq_register>

	alt_up_ps2_enable_read_interrupt(ps2_device);
    6a10:	e13fff17 	ldw	r4,-4(fp)
    6a14:	00181a80 	call	181a8 <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
    6a18:	01000084 	movi	r4,2
    6a1c:	e17fff17 	ldw	r5,-4(fp)
    6a20:	01800034 	movhi	r6,0
    6a24:	319a5e04 	addi	r6,r6,27000
    6a28:	00019140 	call	1914 <alt_irq_register>

	xTaskCreate( PRVGADraw_Task, "DrawTsk", configMINIMAL_STACK_SIZE, NULL, PRVGADraw_Task_P, &PRVGADraw );
    6a2c:	00800044 	movi	r2,1
    6a30:	d8800015 	stw	r2,0(sp)
    6a34:	d0a04404 	addi	r2,gp,-32496
    6a38:	d8800115 	stw	r2,4(sp)
    6a3c:	d8000215 	stw	zero,8(sp)
    6a40:	d8000315 	stw	zero,12(sp)
    6a44:	01000034 	movhi	r4,0
    6a48:	21144f04 	addi	r4,r4,20796
    6a4c:	01420034 	movhi	r5,2048
    6a50:	2940d204 	addi	r5,r5,840
    6a54:	01900004 	movi	r6,16384
    6a58:	000f883a 	mov	r7,zero
    6a5c:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	//xTaskCreate(print_status_task, "print_status_task", configMINIMAL_STACK_SIZE, NULL, PRINT_STATUS_TASK_PRIORITY, NULL);
	xTaskCreate(keyboard_control_task, "keyboardTsk", configMINIMAL_STACK_SIZE, NULL, KEYBOARD_TASK_PRIORITY, &keyboardTaskHandle);
    6a60:	00800084 	movi	r2,2
    6a64:	d8800015 	stw	r2,0(sp)
    6a68:	d0a04604 	addi	r2,gp,-32488
    6a6c:	d8800115 	stw	r2,4(sp)
    6a70:	d8000215 	stw	zero,8(sp)
    6a74:	d8000315 	stw	zero,12(sp)
    6a78:	01000034 	movhi	r4,0
    6a7c:	21175f04 	addi	r4,r4,23932
    6a80:	01420034 	movhi	r5,2048
    6a84:	2940d404 	addi	r5,r5,848
    6a88:	01900004 	movi	r6,16384
    6a8c:	000f883a 	mov	r7,zero
    6a90:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	xTaskCreate(stabilityMonitorTask, "stableMonitorTsk", configMINIMAL_STACK_SIZE, NULL, STABLE_MONITOR_TASK_P, &stableTaskHandle);
    6a94:	00800144 	movi	r2,5
    6a98:	d8800015 	stw	r2,0(sp)
    6a9c:	d0a04104 	addi	r2,gp,-32508
    6aa0:	d8800115 	stw	r2,4(sp)
    6aa4:	d8000215 	stw	zero,8(sp)
    6aa8:	d8000315 	stw	zero,12(sp)
    6aac:	01000034 	movhi	r4,0
    6ab0:	21185804 	addi	r4,r4,24928
    6ab4:	01420034 	movhi	r5,2048
    6ab8:	2940d704 	addi	r5,r5,860
    6abc:	01900004 	movi	r6,16384
    6ac0:	000f883a 	mov	r7,zero
    6ac4:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	xTaskCreate(loadCtlTask, "loadCtlTask", configMINIMAL_STACK_SIZE, NULL, LOAD_CONTROL_TASK_P, &loadCtlTaskHandle);
    6ac8:	00800184 	movi	r2,6
    6acc:	d8800015 	stw	r2,0(sp)
    6ad0:	d0a04904 	addi	r2,gp,-32476
    6ad4:	d8800115 	stw	r2,4(sp)
    6ad8:	d8000215 	stw	zero,8(sp)
    6adc:	d8000315 	stw	zero,12(sp)
    6ae0:	01000034 	movhi	r4,0
    6ae4:	21192b04 	addi	r4,r4,25772
    6ae8:	01420034 	movhi	r5,2048
    6aec:	2940dc04 	addi	r5,r5,880
    6af0:	01900004 	movi	r6,16384
    6af4:	000f883a 	mov	r7,zero
    6af8:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	xTaskCreate(switchPollingTask, "switchPollingTask", configMINIMAL_STACK_SIZE, NULL, LOAD_CONTROL_TASK_P, &switchPollingTaskHandle);
    6afc:	00800184 	movi	r2,6
    6b00:	d8800015 	stw	r2,0(sp)
    6b04:	d0a04204 	addi	r2,gp,-32504
    6b08:	d8800115 	stw	r2,4(sp)
    6b0c:	d8000215 	stw	zero,8(sp)
    6b10:	d8000315 	stw	zero,12(sp)
    6b14:	01000034 	movhi	r4,0
    6b18:	2119f004 	addi	r4,r4,26560
    6b1c:	01420034 	movhi	r5,2048
    6b20:	2940df04 	addi	r5,r5,892
    6b24:	01900004 	movi	r6,16384
    6b28:	000f883a 	mov	r7,zero
    6b2c:	0002bf80 	call	2bf8 <xTaskGenericCreate>


	vTaskStartScheduler();
    6b30:	0002f100 	call	2f10 <vTaskStartScheduler>

	while(1)

  return 0;
    6b34:	0005883a 	mov	r2,zero
}
    6b38:	e037883a 	mov	sp,fp
    6b3c:	dfc00117 	ldw	ra,4(sp)
    6b40:	df000017 	ldw	fp,0(sp)
    6b44:	dec00204 	addi	sp,sp,8
    6b48:	f800283a 	ret

00006b4c <_fpadd_parts>:
    6b4c:	defff804 	addi	sp,sp,-32
    6b50:	dcc00315 	stw	r19,12(sp)
    6b54:	2027883a 	mov	r19,r4
    6b58:	21000017 	ldw	r4,0(r4)
    6b5c:	00c00044 	movi	r3,1
    6b60:	dd400515 	stw	r21,20(sp)
    6b64:	dd000415 	stw	r20,16(sp)
    6b68:	ddc00715 	stw	r23,28(sp)
    6b6c:	dd800615 	stw	r22,24(sp)
    6b70:	dc800215 	stw	r18,8(sp)
    6b74:	dc400115 	stw	r17,4(sp)
    6b78:	dc000015 	stw	r16,0(sp)
    6b7c:	282b883a 	mov	r21,r5
    6b80:	3029883a 	mov	r20,r6
    6b84:	1900632e 	bgeu	r3,r4,6d14 <_fpadd_parts+0x1c8>
    6b88:	28800017 	ldw	r2,0(r5)
    6b8c:	1880812e 	bgeu	r3,r2,6d94 <_fpadd_parts+0x248>
    6b90:	00c00104 	movi	r3,4
    6b94:	20c0dc26 	beq	r4,r3,6f08 <_fpadd_parts+0x3bc>
    6b98:	10c07e26 	beq	r2,r3,6d94 <_fpadd_parts+0x248>
    6b9c:	00c00084 	movi	r3,2
    6ba0:	10c06726 	beq	r2,r3,6d40 <_fpadd_parts+0x1f4>
    6ba4:	20c07b26 	beq	r4,r3,6d94 <_fpadd_parts+0x248>
    6ba8:	9dc00217 	ldw	r23,8(r19)
    6bac:	28c00217 	ldw	r3,8(r5)
    6bb0:	9c400317 	ldw	r17,12(r19)
    6bb4:	2bc00317 	ldw	r15,12(r5)
    6bb8:	b8cdc83a 	sub	r6,r23,r3
    6bbc:	9c800417 	ldw	r18,16(r19)
    6bc0:	2c000417 	ldw	r16,16(r5)
    6bc4:	3009883a 	mov	r4,r6
    6bc8:	30009716 	blt	r6,zero,6e28 <_fpadd_parts+0x2dc>
    6bcc:	00800fc4 	movi	r2,63
    6bd0:	11806b16 	blt	r2,r6,6d80 <_fpadd_parts+0x234>
    6bd4:	0100a40e 	bge	zero,r4,6e68 <_fpadd_parts+0x31c>
    6bd8:	35bff804 	addi	r22,r6,-32
    6bdc:	b000bc16 	blt	r22,zero,6ed0 <_fpadd_parts+0x384>
    6be0:	8596d83a 	srl	r11,r16,r22
    6be4:	0019883a 	mov	r12,zero
    6be8:	0013883a 	mov	r9,zero
    6bec:	01000044 	movi	r4,1
    6bf0:	0015883a 	mov	r10,zero
    6bf4:	b000be16 	blt	r22,zero,6ef0 <_fpadd_parts+0x3a4>
    6bf8:	2590983a 	sll	r8,r4,r22
    6bfc:	000f883a 	mov	r7,zero
    6c00:	00bfffc4 	movi	r2,-1
    6c04:	3889883a 	add	r4,r7,r2
    6c08:	408b883a 	add	r5,r8,r2
    6c0c:	21cd803a 	cmpltu	r6,r4,r7
    6c10:	314b883a 	add	r5,r6,r5
    6c14:	7904703a 	and	r2,r15,r4
    6c18:	8146703a 	and	r3,r16,r5
    6c1c:	10c4b03a 	or	r2,r2,r3
    6c20:	10000226 	beq	r2,zero,6c2c <_fpadd_parts+0xe0>
    6c24:	02400044 	movi	r9,1
    6c28:	0015883a 	mov	r10,zero
    6c2c:	5a5eb03a 	or	r15,r11,r9
    6c30:	62a0b03a 	or	r16,r12,r10
    6c34:	99400117 	ldw	r5,4(r19)
    6c38:	a8800117 	ldw	r2,4(r21)
    6c3c:	28806e26 	beq	r5,r2,6df8 <_fpadd_parts+0x2ac>
    6c40:	28006626 	beq	r5,zero,6ddc <_fpadd_parts+0x290>
    6c44:	7c45c83a 	sub	r2,r15,r17
    6c48:	7889803a 	cmpltu	r4,r15,r2
    6c4c:	8487c83a 	sub	r3,r16,r18
    6c50:	1909c83a 	sub	r4,r3,r4
    6c54:	100d883a 	mov	r6,r2
    6c58:	200f883a 	mov	r7,r4
    6c5c:	38007716 	blt	r7,zero,6e3c <_fpadd_parts+0x2f0>
    6c60:	a5c00215 	stw	r23,8(r20)
    6c64:	a1c00415 	stw	r7,16(r20)
    6c68:	a0000115 	stw	zero,4(r20)
    6c6c:	a1800315 	stw	r6,12(r20)
    6c70:	a2000317 	ldw	r8,12(r20)
    6c74:	a2400417 	ldw	r9,16(r20)
    6c78:	00bfffc4 	movi	r2,-1
    6c7c:	408b883a 	add	r5,r8,r2
    6c80:	2a09803a 	cmpltu	r4,r5,r8
    6c84:	488d883a 	add	r6,r9,r2
    6c88:	01c40034 	movhi	r7,4096
    6c8c:	39ffffc4 	addi	r7,r7,-1
    6c90:	218d883a 	add	r6,r4,r6
    6c94:	39801736 	bltu	r7,r6,6cf4 <_fpadd_parts+0x1a8>
    6c98:	31c06526 	beq	r6,r7,6e30 <_fpadd_parts+0x2e4>
    6c9c:	a3000217 	ldw	r12,8(r20)
    6ca0:	4209883a 	add	r4,r8,r8
    6ca4:	00bfffc4 	movi	r2,-1
    6ca8:	220f803a 	cmpltu	r7,r4,r8
    6cac:	4a4b883a 	add	r5,r9,r9
    6cb0:	394f883a 	add	r7,r7,r5
    6cb4:	2095883a 	add	r10,r4,r2
    6cb8:	3897883a 	add	r11,r7,r2
    6cbc:	510d803a 	cmpltu	r6,r10,r4
    6cc0:	6099883a 	add	r12,r12,r2
    6cc4:	32d7883a 	add	r11,r6,r11
    6cc8:	00840034 	movhi	r2,4096
    6ccc:	10bfffc4 	addi	r2,r2,-1
    6cd0:	2011883a 	mov	r8,r4
    6cd4:	3813883a 	mov	r9,r7
    6cd8:	a1000315 	stw	r4,12(r20)
    6cdc:	a1c00415 	stw	r7,16(r20)
    6ce0:	a3000215 	stw	r12,8(r20)
    6ce4:	12c00336 	bltu	r2,r11,6cf4 <_fpadd_parts+0x1a8>
    6ce8:	58bfed1e 	bne	r11,r2,6ca0 <_fpadd_parts+0x154>
    6cec:	00bfff84 	movi	r2,-2
    6cf0:	12bfeb2e 	bgeu	r2,r10,6ca0 <_fpadd_parts+0x154>
    6cf4:	a2800417 	ldw	r10,16(r20)
    6cf8:	008000c4 	movi	r2,3
    6cfc:	00c80034 	movhi	r3,8192
    6d00:	18ffffc4 	addi	r3,r3,-1
    6d04:	a2400317 	ldw	r9,12(r20)
    6d08:	a0800015 	stw	r2,0(r20)
    6d0c:	1a802336 	bltu	r3,r10,6d9c <_fpadd_parts+0x250>
    6d10:	a027883a 	mov	r19,r20
    6d14:	9805883a 	mov	r2,r19
    6d18:	ddc00717 	ldw	r23,28(sp)
    6d1c:	dd800617 	ldw	r22,24(sp)
    6d20:	dd400517 	ldw	r21,20(sp)
    6d24:	dd000417 	ldw	r20,16(sp)
    6d28:	dcc00317 	ldw	r19,12(sp)
    6d2c:	dc800217 	ldw	r18,8(sp)
    6d30:	dc400117 	ldw	r17,4(sp)
    6d34:	dc000017 	ldw	r16,0(sp)
    6d38:	dec00804 	addi	sp,sp,32
    6d3c:	f800283a 	ret
    6d40:	20fff41e 	bne	r4,r3,6d14 <_fpadd_parts+0x1c8>
    6d44:	31000015 	stw	r4,0(r6)
    6d48:	98800117 	ldw	r2,4(r19)
    6d4c:	30800115 	stw	r2,4(r6)
    6d50:	98c00217 	ldw	r3,8(r19)
    6d54:	30c00215 	stw	r3,8(r6)
    6d58:	98800317 	ldw	r2,12(r19)
    6d5c:	30800315 	stw	r2,12(r6)
    6d60:	98c00417 	ldw	r3,16(r19)
    6d64:	30c00415 	stw	r3,16(r6)
    6d68:	98800117 	ldw	r2,4(r19)
    6d6c:	28c00117 	ldw	r3,4(r5)
    6d70:	3027883a 	mov	r19,r6
    6d74:	10c4703a 	and	r2,r2,r3
    6d78:	30800115 	stw	r2,4(r6)
    6d7c:	003fe506 	br	6d14 <_fpadd_parts+0x1c8>
    6d80:	1dc02616 	blt	r3,r23,6e1c <_fpadd_parts+0x2d0>
    6d84:	0023883a 	mov	r17,zero
    6d88:	182f883a 	mov	r23,r3
    6d8c:	0025883a 	mov	r18,zero
    6d90:	003fa806 	br	6c34 <_fpadd_parts+0xe8>
    6d94:	a827883a 	mov	r19,r21
    6d98:	003fde06 	br	6d14 <_fpadd_parts+0x1c8>
    6d9c:	01800044 	movi	r6,1
    6da0:	500497fa 	slli	r2,r10,31
    6da4:	4808d07a 	srli	r4,r9,1
    6da8:	518ad83a 	srl	r5,r10,r6
    6dac:	a2000217 	ldw	r8,8(r20)
    6db0:	1108b03a 	or	r4,r2,r4
    6db4:	0007883a 	mov	r3,zero
    6db8:	4984703a 	and	r2,r9,r6
    6dbc:	208cb03a 	or	r6,r4,r2
    6dc0:	28ceb03a 	or	r7,r5,r3
    6dc4:	42000044 	addi	r8,r8,1
    6dc8:	a027883a 	mov	r19,r20
    6dcc:	a1c00415 	stw	r7,16(r20)
    6dd0:	a2000215 	stw	r8,8(r20)
    6dd4:	a1800315 	stw	r6,12(r20)
    6dd8:	003fce06 	br	6d14 <_fpadd_parts+0x1c8>
    6ddc:	8bc5c83a 	sub	r2,r17,r15
    6de0:	8889803a 	cmpltu	r4,r17,r2
    6de4:	9407c83a 	sub	r3,r18,r16
    6de8:	1909c83a 	sub	r4,r3,r4
    6dec:	100d883a 	mov	r6,r2
    6df0:	200f883a 	mov	r7,r4
    6df4:	003f9906 	br	6c5c <_fpadd_parts+0x110>
    6df8:	7c45883a 	add	r2,r15,r17
    6dfc:	13c9803a 	cmpltu	r4,r2,r15
    6e00:	8487883a 	add	r3,r16,r18
    6e04:	20c9883a 	add	r4,r4,r3
    6e08:	a1400115 	stw	r5,4(r20)
    6e0c:	a5c00215 	stw	r23,8(r20)
    6e10:	a0800315 	stw	r2,12(r20)
    6e14:	a1000415 	stw	r4,16(r20)
    6e18:	003fb606 	br	6cf4 <_fpadd_parts+0x1a8>
    6e1c:	001f883a 	mov	r15,zero
    6e20:	0021883a 	mov	r16,zero
    6e24:	003f8306 	br	6c34 <_fpadd_parts+0xe8>
    6e28:	018dc83a 	sub	r6,zero,r6
    6e2c:	003f6706 	br	6bcc <_fpadd_parts+0x80>
    6e30:	00bfff84 	movi	r2,-2
    6e34:	117faf36 	bltu	r2,r5,6cf4 <_fpadd_parts+0x1a8>
    6e38:	003f9806 	br	6c9c <_fpadd_parts+0x150>
    6e3c:	0005883a 	mov	r2,zero
    6e40:	1189c83a 	sub	r4,r2,r6
    6e44:	1105803a 	cmpltu	r2,r2,r4
    6e48:	01cbc83a 	sub	r5,zero,r7
    6e4c:	2885c83a 	sub	r2,r5,r2
    6e50:	01800044 	movi	r6,1
    6e54:	a1800115 	stw	r6,4(r20)
    6e58:	a5c00215 	stw	r23,8(r20)
    6e5c:	a1000315 	stw	r4,12(r20)
    6e60:	a0800415 	stw	r2,16(r20)
    6e64:	003f8206 	br	6c70 <_fpadd_parts+0x124>
    6e68:	203f7226 	beq	r4,zero,6c34 <_fpadd_parts+0xe8>
    6e6c:	35bff804 	addi	r22,r6,-32
    6e70:	b9af883a 	add	r23,r23,r6
    6e74:	b0003116 	blt	r22,zero,6f3c <_fpadd_parts+0x3f0>
    6e78:	959ad83a 	srl	r13,r18,r22
    6e7c:	001d883a 	mov	r14,zero
    6e80:	000f883a 	mov	r7,zero
    6e84:	01000044 	movi	r4,1
    6e88:	0011883a 	mov	r8,zero
    6e8c:	b0002516 	blt	r22,zero,6f24 <_fpadd_parts+0x3d8>
    6e90:	2594983a 	sll	r10,r4,r22
    6e94:	0013883a 	mov	r9,zero
    6e98:	00bfffc4 	movi	r2,-1
    6e9c:	4889883a 	add	r4,r9,r2
    6ea0:	508b883a 	add	r5,r10,r2
    6ea4:	224d803a 	cmpltu	r6,r4,r9
    6ea8:	314b883a 	add	r5,r6,r5
    6eac:	8904703a 	and	r2,r17,r4
    6eb0:	9146703a 	and	r3,r18,r5
    6eb4:	10c4b03a 	or	r2,r2,r3
    6eb8:	10000226 	beq	r2,zero,6ec4 <_fpadd_parts+0x378>
    6ebc:	01c00044 	movi	r7,1
    6ec0:	0011883a 	mov	r8,zero
    6ec4:	69e2b03a 	or	r17,r13,r7
    6ec8:	7224b03a 	or	r18,r14,r8
    6ecc:	003f5906 	br	6c34 <_fpadd_parts+0xe8>
    6ed0:	8407883a 	add	r3,r16,r16
    6ed4:	008007c4 	movi	r2,31
    6ed8:	1185c83a 	sub	r2,r2,r6
    6edc:	1886983a 	sll	r3,r3,r2
    6ee0:	7996d83a 	srl	r11,r15,r6
    6ee4:	8198d83a 	srl	r12,r16,r6
    6ee8:	1ad6b03a 	or	r11,r3,r11
    6eec:	003f3e06 	br	6be8 <_fpadd_parts+0x9c>
    6ef0:	2006d07a 	srli	r3,r4,1
    6ef4:	008007c4 	movi	r2,31
    6ef8:	1185c83a 	sub	r2,r2,r6
    6efc:	1890d83a 	srl	r8,r3,r2
    6f00:	218e983a 	sll	r7,r4,r6
    6f04:	003f3e06 	br	6c00 <_fpadd_parts+0xb4>
    6f08:	113f821e 	bne	r2,r4,6d14 <_fpadd_parts+0x1c8>
    6f0c:	28c00117 	ldw	r3,4(r5)
    6f10:	98800117 	ldw	r2,4(r19)
    6f14:	10ff7f26 	beq	r2,r3,6d14 <_fpadd_parts+0x1c8>
    6f18:	04c20034 	movhi	r19,2048
    6f1c:	9cc0e404 	addi	r19,r19,912
    6f20:	003f7c06 	br	6d14 <_fpadd_parts+0x1c8>
    6f24:	2006d07a 	srli	r3,r4,1
    6f28:	008007c4 	movi	r2,31
    6f2c:	1185c83a 	sub	r2,r2,r6
    6f30:	1894d83a 	srl	r10,r3,r2
    6f34:	2192983a 	sll	r9,r4,r6
    6f38:	003fd706 	br	6e98 <_fpadd_parts+0x34c>
    6f3c:	9487883a 	add	r3,r18,r18
    6f40:	008007c4 	movi	r2,31
    6f44:	1185c83a 	sub	r2,r2,r6
    6f48:	1886983a 	sll	r3,r3,r2
    6f4c:	899ad83a 	srl	r13,r17,r6
    6f50:	919cd83a 	srl	r14,r18,r6
    6f54:	1b5ab03a 	or	r13,r3,r13
    6f58:	003fc906 	br	6e80 <_fpadd_parts+0x334>

00006f5c <__subdf3>:
    6f5c:	deffea04 	addi	sp,sp,-88
    6f60:	dcc01415 	stw	r19,80(sp)
    6f64:	dcc00404 	addi	r19,sp,16
    6f68:	2011883a 	mov	r8,r4
    6f6c:	2813883a 	mov	r9,r5
    6f70:	dc401315 	stw	r17,76(sp)
    6f74:	d809883a 	mov	r4,sp
    6f78:	980b883a 	mov	r5,r19
    6f7c:	dc400904 	addi	r17,sp,36
    6f80:	dfc01515 	stw	ra,84(sp)
    6f84:	da400115 	stw	r9,4(sp)
    6f88:	d9c00315 	stw	r7,12(sp)
    6f8c:	da000015 	stw	r8,0(sp)
    6f90:	d9800215 	stw	r6,8(sp)
    6f94:	0007e000 	call	7e00 <__unpack_d>
    6f98:	d9000204 	addi	r4,sp,8
    6f9c:	880b883a 	mov	r5,r17
    6fa0:	0007e000 	call	7e00 <__unpack_d>
    6fa4:	d8800a17 	ldw	r2,40(sp)
    6fa8:	880b883a 	mov	r5,r17
    6fac:	9809883a 	mov	r4,r19
    6fb0:	d9800e04 	addi	r6,sp,56
    6fb4:	1080005c 	xori	r2,r2,1
    6fb8:	d8800a15 	stw	r2,40(sp)
    6fbc:	0006b4c0 	call	6b4c <_fpadd_parts>
    6fc0:	1009883a 	mov	r4,r2
    6fc4:	0007aec0 	call	7aec <__pack_d>
    6fc8:	dfc01517 	ldw	ra,84(sp)
    6fcc:	dcc01417 	ldw	r19,80(sp)
    6fd0:	dc401317 	ldw	r17,76(sp)
    6fd4:	dec01604 	addi	sp,sp,88
    6fd8:	f800283a 	ret

00006fdc <__adddf3>:
    6fdc:	deffea04 	addi	sp,sp,-88
    6fe0:	dcc01415 	stw	r19,80(sp)
    6fe4:	dcc00404 	addi	r19,sp,16
    6fe8:	2011883a 	mov	r8,r4
    6fec:	2813883a 	mov	r9,r5
    6ff0:	dc401315 	stw	r17,76(sp)
    6ff4:	d809883a 	mov	r4,sp
    6ff8:	980b883a 	mov	r5,r19
    6ffc:	dc400904 	addi	r17,sp,36
    7000:	dfc01515 	stw	ra,84(sp)
    7004:	da400115 	stw	r9,4(sp)
    7008:	d9c00315 	stw	r7,12(sp)
    700c:	da000015 	stw	r8,0(sp)
    7010:	d9800215 	stw	r6,8(sp)
    7014:	0007e000 	call	7e00 <__unpack_d>
    7018:	d9000204 	addi	r4,sp,8
    701c:	880b883a 	mov	r5,r17
    7020:	0007e000 	call	7e00 <__unpack_d>
    7024:	d9800e04 	addi	r6,sp,56
    7028:	9809883a 	mov	r4,r19
    702c:	880b883a 	mov	r5,r17
    7030:	0006b4c0 	call	6b4c <_fpadd_parts>
    7034:	1009883a 	mov	r4,r2
    7038:	0007aec0 	call	7aec <__pack_d>
    703c:	dfc01517 	ldw	ra,84(sp)
    7040:	dcc01417 	ldw	r19,80(sp)
    7044:	dc401317 	ldw	r17,76(sp)
    7048:	dec01604 	addi	sp,sp,88
    704c:	f800283a 	ret

00007050 <__muldf3>:
    7050:	deffe004 	addi	sp,sp,-128
    7054:	dc401815 	stw	r17,96(sp)
    7058:	dc400404 	addi	r17,sp,16
    705c:	2011883a 	mov	r8,r4
    7060:	2813883a 	mov	r9,r5
    7064:	dc001715 	stw	r16,92(sp)
    7068:	d809883a 	mov	r4,sp
    706c:	880b883a 	mov	r5,r17
    7070:	dc000904 	addi	r16,sp,36
    7074:	dfc01f15 	stw	ra,124(sp)
    7078:	da400115 	stw	r9,4(sp)
    707c:	d9c00315 	stw	r7,12(sp)
    7080:	da000015 	stw	r8,0(sp)
    7084:	d9800215 	stw	r6,8(sp)
    7088:	ddc01e15 	stw	r23,120(sp)
    708c:	dd801d15 	stw	r22,116(sp)
    7090:	dd401c15 	stw	r21,112(sp)
    7094:	dd001b15 	stw	r20,108(sp)
    7098:	dcc01a15 	stw	r19,104(sp)
    709c:	dc801915 	stw	r18,100(sp)
    70a0:	0007e000 	call	7e00 <__unpack_d>
    70a4:	d9000204 	addi	r4,sp,8
    70a8:	800b883a 	mov	r5,r16
    70ac:	0007e000 	call	7e00 <__unpack_d>
    70b0:	d9000417 	ldw	r4,16(sp)
    70b4:	00800044 	movi	r2,1
    70b8:	1100102e 	bgeu	r2,r4,70fc <__muldf3+0xac>
    70bc:	d8c00917 	ldw	r3,36(sp)
    70c0:	10c0062e 	bgeu	r2,r3,70dc <__muldf3+0x8c>
    70c4:	00800104 	movi	r2,4
    70c8:	20800a26 	beq	r4,r2,70f4 <__muldf3+0xa4>
    70cc:	1880cc26 	beq	r3,r2,7400 <__muldf3+0x3b0>
    70d0:	00800084 	movi	r2,2
    70d4:	20800926 	beq	r4,r2,70fc <__muldf3+0xac>
    70d8:	1880191e 	bne	r3,r2,7140 <__muldf3+0xf0>
    70dc:	d8c00a17 	ldw	r3,40(sp)
    70e0:	d8800517 	ldw	r2,20(sp)
    70e4:	8009883a 	mov	r4,r16
    70e8:	10c4c03a 	cmpne	r2,r2,r3
    70ec:	d8800a15 	stw	r2,40(sp)
    70f0:	00000706 	br	7110 <__muldf3+0xc0>
    70f4:	00800084 	movi	r2,2
    70f8:	1880c326 	beq	r3,r2,7408 <__muldf3+0x3b8>
    70fc:	d8800517 	ldw	r2,20(sp)
    7100:	d8c00a17 	ldw	r3,40(sp)
    7104:	8809883a 	mov	r4,r17
    7108:	10c4c03a 	cmpne	r2,r2,r3
    710c:	d8800515 	stw	r2,20(sp)
    7110:	0007aec0 	call	7aec <__pack_d>
    7114:	dfc01f17 	ldw	ra,124(sp)
    7118:	ddc01e17 	ldw	r23,120(sp)
    711c:	dd801d17 	ldw	r22,116(sp)
    7120:	dd401c17 	ldw	r21,112(sp)
    7124:	dd001b17 	ldw	r20,108(sp)
    7128:	dcc01a17 	ldw	r19,104(sp)
    712c:	dc801917 	ldw	r18,100(sp)
    7130:	dc401817 	ldw	r17,96(sp)
    7134:	dc001717 	ldw	r16,92(sp)
    7138:	dec02004 	addi	sp,sp,128
    713c:	f800283a 	ret
    7140:	dd800717 	ldw	r22,28(sp)
    7144:	dc800c17 	ldw	r18,48(sp)
    7148:	002b883a 	mov	r21,zero
    714c:	0023883a 	mov	r17,zero
    7150:	a80b883a 	mov	r5,r21
    7154:	b00d883a 	mov	r6,r22
    7158:	880f883a 	mov	r7,r17
    715c:	ddc00817 	ldw	r23,32(sp)
    7160:	dcc00d17 	ldw	r19,52(sp)
    7164:	9009883a 	mov	r4,r18
    7168:	00079d40 	call	79d4 <__muldi3>
    716c:	001b883a 	mov	r13,zero
    7170:	680f883a 	mov	r7,r13
    7174:	b009883a 	mov	r4,r22
    7178:	000b883a 	mov	r5,zero
    717c:	980d883a 	mov	r6,r19
    7180:	b82d883a 	mov	r22,r23
    7184:	002f883a 	mov	r23,zero
    7188:	db401615 	stw	r13,88(sp)
    718c:	d8801315 	stw	r2,76(sp)
    7190:	d8c01415 	stw	r3,80(sp)
    7194:	dcc01515 	stw	r19,84(sp)
    7198:	00079d40 	call	79d4 <__muldi3>
    719c:	b00d883a 	mov	r6,r22
    71a0:	000b883a 	mov	r5,zero
    71a4:	9009883a 	mov	r4,r18
    71a8:	b80f883a 	mov	r7,r23
    71ac:	1021883a 	mov	r16,r2
    71b0:	1823883a 	mov	r17,r3
    71b4:	00079d40 	call	79d4 <__muldi3>
    71b8:	8085883a 	add	r2,r16,r2
    71bc:	140d803a 	cmpltu	r6,r2,r16
    71c0:	88c7883a 	add	r3,r17,r3
    71c4:	30cd883a 	add	r6,r6,r3
    71c8:	1029883a 	mov	r20,r2
    71cc:	302b883a 	mov	r21,r6
    71d0:	da801317 	ldw	r10,76(sp)
    71d4:	dac01417 	ldw	r11,80(sp)
    71d8:	db001517 	ldw	r12,84(sp)
    71dc:	db401617 	ldw	r13,88(sp)
    71e0:	3440612e 	bgeu	r6,r17,7368 <__muldf3+0x318>
    71e4:	0009883a 	mov	r4,zero
    71e8:	5105883a 	add	r2,r10,r4
    71ec:	128d803a 	cmpltu	r6,r2,r10
    71f0:	5d07883a 	add	r3,r11,r20
    71f4:	30cd883a 	add	r6,r6,r3
    71f8:	0021883a 	mov	r16,zero
    71fc:	04400044 	movi	r17,1
    7200:	1025883a 	mov	r18,r2
    7204:	3027883a 	mov	r19,r6
    7208:	32c06236 	bltu	r6,r11,7394 <__muldf3+0x344>
    720c:	59807a26 	beq	r11,r6,73f8 <__muldf3+0x3a8>
    7210:	680b883a 	mov	r5,r13
    7214:	b80f883a 	mov	r7,r23
    7218:	6009883a 	mov	r4,r12
    721c:	b00d883a 	mov	r6,r22
    7220:	00079d40 	call	79d4 <__muldi3>
    7224:	1009883a 	mov	r4,r2
    7228:	000f883a 	mov	r7,zero
    722c:	1545883a 	add	r2,r2,r21
    7230:	1111803a 	cmpltu	r8,r2,r4
    7234:	19c7883a 	add	r3,r3,r7
    7238:	40c7883a 	add	r3,r8,r3
    723c:	88cb883a 	add	r5,r17,r3
    7240:	d8c00617 	ldw	r3,24(sp)
    7244:	8089883a 	add	r4,r16,r2
    7248:	d8800b17 	ldw	r2,44(sp)
    724c:	18c00104 	addi	r3,r3,4
    7250:	240d803a 	cmpltu	r6,r4,r16
    7254:	10c7883a 	add	r3,r2,r3
    7258:	2013883a 	mov	r9,r4
    725c:	d8800a17 	ldw	r2,40(sp)
    7260:	d9000517 	ldw	r4,20(sp)
    7264:	314d883a 	add	r6,r6,r5
    7268:	3015883a 	mov	r10,r6
    726c:	2088c03a 	cmpne	r4,r4,r2
    7270:	00880034 	movhi	r2,8192
    7274:	10bfffc4 	addi	r2,r2,-1
    7278:	d9000f15 	stw	r4,60(sp)
    727c:	d8c01015 	stw	r3,64(sp)
    7280:	1180162e 	bgeu	r2,r6,72dc <__muldf3+0x28c>
    7284:	1811883a 	mov	r8,r3
    7288:	101f883a 	mov	r15,r2
    728c:	980497fa 	slli	r2,r19,31
    7290:	9016d07a 	srli	r11,r18,1
    7294:	500697fa 	slli	r3,r10,31
    7298:	480cd07a 	srli	r6,r9,1
    729c:	500ed07a 	srli	r7,r10,1
    72a0:	12d6b03a 	or	r11,r2,r11
    72a4:	00800044 	movi	r2,1
    72a8:	198cb03a 	or	r6,r3,r6
    72ac:	4888703a 	and	r4,r9,r2
    72b0:	9818d07a 	srli	r12,r19,1
    72b4:	001b883a 	mov	r13,zero
    72b8:	03a00034 	movhi	r14,32768
    72bc:	3013883a 	mov	r9,r6
    72c0:	3815883a 	mov	r10,r7
    72c4:	4091883a 	add	r8,r8,r2
    72c8:	20000226 	beq	r4,zero,72d4 <__muldf3+0x284>
    72cc:	5b64b03a 	or	r18,r11,r13
    72d0:	63a6b03a 	or	r19,r12,r14
    72d4:	7abfed36 	bltu	r15,r10,728c <__muldf3+0x23c>
    72d8:	da001015 	stw	r8,64(sp)
    72dc:	00840034 	movhi	r2,4096
    72e0:	10bfffc4 	addi	r2,r2,-1
    72e4:	12801436 	bltu	r2,r10,7338 <__muldf3+0x2e8>
    72e8:	da001017 	ldw	r8,64(sp)
    72ec:	101f883a 	mov	r15,r2
    72f0:	4a45883a 	add	r2,r9,r9
    72f4:	124d803a 	cmpltu	r6,r2,r9
    72f8:	5287883a 	add	r3,r10,r10
    72fc:	9497883a 	add	r11,r18,r18
    7300:	5c8f803a 	cmpltu	r7,r11,r18
    7304:	9cd9883a 	add	r12,r19,r19
    7308:	01000044 	movi	r4,1
    730c:	30cd883a 	add	r6,r6,r3
    7310:	3b0f883a 	add	r7,r7,r12
    7314:	423fffc4 	addi	r8,r8,-1
    7318:	1013883a 	mov	r9,r2
    731c:	3015883a 	mov	r10,r6
    7320:	111ab03a 	or	r13,r2,r4
    7324:	98003016 	blt	r19,zero,73e8 <__muldf3+0x398>
    7328:	5825883a 	mov	r18,r11
    732c:	3827883a 	mov	r19,r7
    7330:	7abfef2e 	bgeu	r15,r10,72f0 <__muldf3+0x2a0>
    7334:	da001015 	stw	r8,64(sp)
    7338:	00803fc4 	movi	r2,255
    733c:	488e703a 	and	r7,r9,r2
    7340:	00802004 	movi	r2,128
    7344:	0007883a 	mov	r3,zero
    7348:	0011883a 	mov	r8,zero
    734c:	38801826 	beq	r7,r2,73b0 <__muldf3+0x360>
    7350:	008000c4 	movi	r2,3
    7354:	d9000e04 	addi	r4,sp,56
    7358:	da801215 	stw	r10,72(sp)
    735c:	d8800e15 	stw	r2,56(sp)
    7360:	da401115 	stw	r9,68(sp)
    7364:	003f6a06 	br	7110 <__muldf3+0xc0>
    7368:	89802126 	beq	r17,r6,73f0 <__muldf3+0x3a0>
    736c:	0009883a 	mov	r4,zero
    7370:	5105883a 	add	r2,r10,r4
    7374:	128d803a 	cmpltu	r6,r2,r10
    7378:	5d07883a 	add	r3,r11,r20
    737c:	30cd883a 	add	r6,r6,r3
    7380:	0021883a 	mov	r16,zero
    7384:	0023883a 	mov	r17,zero
    7388:	1025883a 	mov	r18,r2
    738c:	3027883a 	mov	r19,r6
    7390:	32ff9e2e 	bgeu	r6,r11,720c <__muldf3+0x1bc>
    7394:	00800044 	movi	r2,1
    7398:	8089883a 	add	r4,r16,r2
    739c:	240d803a 	cmpltu	r6,r4,r16
    73a0:	344d883a 	add	r6,r6,r17
    73a4:	2021883a 	mov	r16,r4
    73a8:	3023883a 	mov	r17,r6
    73ac:	003f9806 	br	7210 <__muldf3+0x1c0>
    73b0:	403fe71e 	bne	r8,zero,7350 <__muldf3+0x300>
    73b4:	01004004 	movi	r4,256
    73b8:	4904703a 	and	r2,r9,r4
    73bc:	10c4b03a 	or	r2,r2,r3
    73c0:	103fe31e 	bne	r2,zero,7350 <__muldf3+0x300>
    73c4:	94c4b03a 	or	r2,r18,r19
    73c8:	103fe126 	beq	r2,zero,7350 <__muldf3+0x300>
    73cc:	49c5883a 	add	r2,r9,r7
    73d0:	1251803a 	cmpltu	r8,r2,r9
    73d4:	4291883a 	add	r8,r8,r10
    73d8:	013fc004 	movi	r4,-256
    73dc:	1112703a 	and	r9,r2,r4
    73e0:	4015883a 	mov	r10,r8
    73e4:	003fda06 	br	7350 <__muldf3+0x300>
    73e8:	6813883a 	mov	r9,r13
    73ec:	003fce06 	br	7328 <__muldf3+0x2d8>
    73f0:	143f7c36 	bltu	r2,r16,71e4 <__muldf3+0x194>
    73f4:	003fdd06 	br	736c <__muldf3+0x31c>
    73f8:	12bf852e 	bgeu	r2,r10,7210 <__muldf3+0x1c0>
    73fc:	003fe506 	br	7394 <__muldf3+0x344>
    7400:	00800084 	movi	r2,2
    7404:	20bf351e 	bne	r4,r2,70dc <__muldf3+0x8c>
    7408:	01020034 	movhi	r4,2048
    740c:	2100e404 	addi	r4,r4,912
    7410:	003f3f06 	br	7110 <__muldf3+0xc0>

00007414 <__divdf3>:
    7414:	deffed04 	addi	sp,sp,-76
    7418:	dcc01115 	stw	r19,68(sp)
    741c:	dcc00404 	addi	r19,sp,16
    7420:	2011883a 	mov	r8,r4
    7424:	2813883a 	mov	r9,r5
    7428:	dc000e15 	stw	r16,56(sp)
    742c:	d809883a 	mov	r4,sp
    7430:	980b883a 	mov	r5,r19
    7434:	dc000904 	addi	r16,sp,36
    7438:	dfc01215 	stw	ra,72(sp)
    743c:	da400115 	stw	r9,4(sp)
    7440:	d9c00315 	stw	r7,12(sp)
    7444:	da000015 	stw	r8,0(sp)
    7448:	d9800215 	stw	r6,8(sp)
    744c:	dc801015 	stw	r18,64(sp)
    7450:	dc400f15 	stw	r17,60(sp)
    7454:	0007e000 	call	7e00 <__unpack_d>
    7458:	d9000204 	addi	r4,sp,8
    745c:	800b883a 	mov	r5,r16
    7460:	0007e000 	call	7e00 <__unpack_d>
    7464:	d9000417 	ldw	r4,16(sp)
    7468:	00800044 	movi	r2,1
    746c:	11000b2e 	bgeu	r2,r4,749c <__divdf3+0x88>
    7470:	d9400917 	ldw	r5,36(sp)
    7474:	1140762e 	bgeu	r2,r5,7650 <__divdf3+0x23c>
    7478:	d8800517 	ldw	r2,20(sp)
    747c:	d8c00a17 	ldw	r3,40(sp)
    7480:	01800104 	movi	r6,4
    7484:	10c4f03a 	xor	r2,r2,r3
    7488:	d8800515 	stw	r2,20(sp)
    748c:	21800226 	beq	r4,r6,7498 <__divdf3+0x84>
    7490:	00800084 	movi	r2,2
    7494:	2080141e 	bne	r4,r2,74e8 <__divdf3+0xd4>
    7498:	29000926 	beq	r5,r4,74c0 <__divdf3+0xac>
    749c:	9809883a 	mov	r4,r19
    74a0:	0007aec0 	call	7aec <__pack_d>
    74a4:	dfc01217 	ldw	ra,72(sp)
    74a8:	dcc01117 	ldw	r19,68(sp)
    74ac:	dc801017 	ldw	r18,64(sp)
    74b0:	dc400f17 	ldw	r17,60(sp)
    74b4:	dc000e17 	ldw	r16,56(sp)
    74b8:	dec01304 	addi	sp,sp,76
    74bc:	f800283a 	ret
    74c0:	01020034 	movhi	r4,2048
    74c4:	2100e404 	addi	r4,r4,912
    74c8:	0007aec0 	call	7aec <__pack_d>
    74cc:	dfc01217 	ldw	ra,72(sp)
    74d0:	dcc01117 	ldw	r19,68(sp)
    74d4:	dc801017 	ldw	r18,64(sp)
    74d8:	dc400f17 	ldw	r17,60(sp)
    74dc:	dc000e17 	ldw	r16,56(sp)
    74e0:	dec01304 	addi	sp,sp,76
    74e4:	f800283a 	ret
    74e8:	29805b26 	beq	r5,r6,7658 <__divdf3+0x244>
    74ec:	28802d26 	beq	r5,r2,75a4 <__divdf3+0x190>
    74f0:	d8c00617 	ldw	r3,24(sp)
    74f4:	d8800b17 	ldw	r2,44(sp)
    74f8:	d9c00817 	ldw	r7,32(sp)
    74fc:	dc400d17 	ldw	r17,52(sp)
    7500:	188bc83a 	sub	r5,r3,r2
    7504:	d9800717 	ldw	r6,28(sp)
    7508:	dc000c17 	ldw	r16,48(sp)
    750c:	d9400615 	stw	r5,24(sp)
    7510:	3c403836 	bltu	r7,r17,75f4 <__divdf3+0x1e0>
    7514:	89c03626 	beq	r17,r7,75f0 <__divdf3+0x1dc>
    7518:	0015883a 	mov	r10,zero
    751c:	001d883a 	mov	r14,zero
    7520:	02c40034 	movhi	r11,4096
    7524:	001f883a 	mov	r15,zero
    7528:	003f883a 	mov	ra,zero
    752c:	04800f44 	movi	r18,61
    7530:	00000f06 	br	7570 <__divdf3+0x15c>
    7534:	601d883a 	mov	r14,r12
    7538:	681f883a 	mov	r15,r13
    753c:	400d883a 	mov	r6,r8
    7540:	100f883a 	mov	r7,r2
    7544:	3191883a 	add	r8,r6,r6
    7548:	5808d07a 	srli	r4,r11,1
    754c:	4185803a 	cmpltu	r2,r8,r6
    7550:	39d3883a 	add	r9,r7,r7
    7554:	28c6b03a 	or	r3,r5,r3
    7558:	1245883a 	add	r2,r2,r9
    755c:	1815883a 	mov	r10,r3
    7560:	2017883a 	mov	r11,r4
    7564:	400d883a 	mov	r6,r8
    7568:	100f883a 	mov	r7,r2
    756c:	fc801726 	beq	ra,r18,75cc <__divdf3+0x1b8>
    7570:	580a97fa 	slli	r5,r11,31
    7574:	5006d07a 	srli	r3,r10,1
    7578:	ffc00044 	addi	ra,ra,1
    757c:	3c7ff136 	bltu	r7,r17,7544 <__divdf3+0x130>
    7580:	3411c83a 	sub	r8,r6,r16
    7584:	3205803a 	cmpltu	r2,r6,r8
    7588:	3c53c83a 	sub	r9,r7,r17
    758c:	7298b03a 	or	r12,r14,r10
    7590:	7adab03a 	or	r13,r15,r11
    7594:	4885c83a 	sub	r2,r9,r2
    7598:	89ffe61e 	bne	r17,r7,7534 <__divdf3+0x120>
    759c:	343fe936 	bltu	r6,r16,7544 <__divdf3+0x130>
    75a0:	003fe406 	br	7534 <__divdf3+0x120>
    75a4:	9809883a 	mov	r4,r19
    75a8:	d9800415 	stw	r6,16(sp)
    75ac:	0007aec0 	call	7aec <__pack_d>
    75b0:	dfc01217 	ldw	ra,72(sp)
    75b4:	dcc01117 	ldw	r19,68(sp)
    75b8:	dc801017 	ldw	r18,64(sp)
    75bc:	dc400f17 	ldw	r17,60(sp)
    75c0:	dc000e17 	ldw	r16,56(sp)
    75c4:	dec01304 	addi	sp,sp,76
    75c8:	f800283a 	ret
    75cc:	00803fc4 	movi	r2,255
    75d0:	7090703a 	and	r8,r14,r2
    75d4:	00802004 	movi	r2,128
    75d8:	0007883a 	mov	r3,zero
    75dc:	0013883a 	mov	r9,zero
    75e0:	40800d26 	beq	r8,r2,7618 <__divdf3+0x204>
    75e4:	dbc00815 	stw	r15,32(sp)
    75e8:	db800715 	stw	r14,28(sp)
    75ec:	003fab06 	br	749c <__divdf3+0x88>
    75f0:	343fc92e 	bgeu	r6,r16,7518 <__divdf3+0x104>
    75f4:	3185883a 	add	r2,r6,r6
    75f8:	1189803a 	cmpltu	r4,r2,r6
    75fc:	39c7883a 	add	r3,r7,r7
    7600:	20c9883a 	add	r4,r4,r3
    7604:	297fffc4 	addi	r5,r5,-1
    7608:	100d883a 	mov	r6,r2
    760c:	200f883a 	mov	r7,r4
    7610:	d9400615 	stw	r5,24(sp)
    7614:	003fc006 	br	7518 <__divdf3+0x104>
    7618:	483ff21e 	bne	r9,zero,75e4 <__divdf3+0x1d0>
    761c:	01004004 	movi	r4,256
    7620:	7104703a 	and	r2,r14,r4
    7624:	10c4b03a 	or	r2,r2,r3
    7628:	103fee1e 	bne	r2,zero,75e4 <__divdf3+0x1d0>
    762c:	31c4b03a 	or	r2,r6,r7
    7630:	103fec26 	beq	r2,zero,75e4 <__divdf3+0x1d0>
    7634:	7205883a 	add	r2,r14,r8
    7638:	1391803a 	cmpltu	r8,r2,r14
    763c:	43d1883a 	add	r8,r8,r15
    7640:	013fc004 	movi	r4,-256
    7644:	111c703a 	and	r14,r2,r4
    7648:	401f883a 	mov	r15,r8
    764c:	003fe506 	br	75e4 <__divdf3+0x1d0>
    7650:	8009883a 	mov	r4,r16
    7654:	003f9206 	br	74a0 <__divdf3+0x8c>
    7658:	9809883a 	mov	r4,r19
    765c:	d8000715 	stw	zero,28(sp)
    7660:	d8000815 	stw	zero,32(sp)
    7664:	d8000615 	stw	zero,24(sp)
    7668:	003f8d06 	br	74a0 <__divdf3+0x8c>

0000766c <__gtdf2>:
    766c:	deffef04 	addi	sp,sp,-68
    7670:	dc400f15 	stw	r17,60(sp)
    7674:	dc400404 	addi	r17,sp,16
    7678:	2005883a 	mov	r2,r4
    767c:	2807883a 	mov	r3,r5
    7680:	dc000e15 	stw	r16,56(sp)
    7684:	d809883a 	mov	r4,sp
    7688:	880b883a 	mov	r5,r17
    768c:	dc000904 	addi	r16,sp,36
    7690:	d8c00115 	stw	r3,4(sp)
    7694:	d8800015 	stw	r2,0(sp)
    7698:	d9800215 	stw	r6,8(sp)
    769c:	dfc01015 	stw	ra,64(sp)
    76a0:	d9c00315 	stw	r7,12(sp)
    76a4:	0007e000 	call	7e00 <__unpack_d>
    76a8:	d9000204 	addi	r4,sp,8
    76ac:	800b883a 	mov	r5,r16
    76b0:	0007e000 	call	7e00 <__unpack_d>
    76b4:	d8800417 	ldw	r2,16(sp)
    76b8:	00c00044 	movi	r3,1
    76bc:	01bfffc4 	movi	r6,-1
    76c0:	1880062e 	bgeu	r3,r2,76dc <__gtdf2+0x70>
    76c4:	d8800917 	ldw	r2,36(sp)
    76c8:	8809883a 	mov	r4,r17
    76cc:	800b883a 	mov	r5,r16
    76d0:	1880022e 	bgeu	r3,r2,76dc <__gtdf2+0x70>
    76d4:	0007f380 	call	7f38 <__fpcmp_parts_d>
    76d8:	100d883a 	mov	r6,r2
    76dc:	3005883a 	mov	r2,r6
    76e0:	dfc01017 	ldw	ra,64(sp)
    76e4:	dc400f17 	ldw	r17,60(sp)
    76e8:	dc000e17 	ldw	r16,56(sp)
    76ec:	dec01104 	addi	sp,sp,68
    76f0:	f800283a 	ret

000076f4 <__gedf2>:
    76f4:	deffef04 	addi	sp,sp,-68
    76f8:	dc400f15 	stw	r17,60(sp)
    76fc:	dc400404 	addi	r17,sp,16
    7700:	2005883a 	mov	r2,r4
    7704:	2807883a 	mov	r3,r5
    7708:	dc000e15 	stw	r16,56(sp)
    770c:	d809883a 	mov	r4,sp
    7710:	880b883a 	mov	r5,r17
    7714:	dc000904 	addi	r16,sp,36
    7718:	d8c00115 	stw	r3,4(sp)
    771c:	d8800015 	stw	r2,0(sp)
    7720:	d9800215 	stw	r6,8(sp)
    7724:	dfc01015 	stw	ra,64(sp)
    7728:	d9c00315 	stw	r7,12(sp)
    772c:	0007e000 	call	7e00 <__unpack_d>
    7730:	d9000204 	addi	r4,sp,8
    7734:	800b883a 	mov	r5,r16
    7738:	0007e000 	call	7e00 <__unpack_d>
    773c:	d8800417 	ldw	r2,16(sp)
    7740:	00c00044 	movi	r3,1
    7744:	01bfffc4 	movi	r6,-1
    7748:	1880062e 	bgeu	r3,r2,7764 <__gedf2+0x70>
    774c:	d8800917 	ldw	r2,36(sp)
    7750:	8809883a 	mov	r4,r17
    7754:	800b883a 	mov	r5,r16
    7758:	1880022e 	bgeu	r3,r2,7764 <__gedf2+0x70>
    775c:	0007f380 	call	7f38 <__fpcmp_parts_d>
    7760:	100d883a 	mov	r6,r2
    7764:	3005883a 	mov	r2,r6
    7768:	dfc01017 	ldw	ra,64(sp)
    776c:	dc400f17 	ldw	r17,60(sp)
    7770:	dc000e17 	ldw	r16,56(sp)
    7774:	dec01104 	addi	sp,sp,68
    7778:	f800283a 	ret

0000777c <__ledf2>:
    777c:	deffef04 	addi	sp,sp,-68
    7780:	dc400f15 	stw	r17,60(sp)
    7784:	dc400404 	addi	r17,sp,16
    7788:	2005883a 	mov	r2,r4
    778c:	2807883a 	mov	r3,r5
    7790:	dc000e15 	stw	r16,56(sp)
    7794:	d809883a 	mov	r4,sp
    7798:	880b883a 	mov	r5,r17
    779c:	dc000904 	addi	r16,sp,36
    77a0:	d8c00115 	stw	r3,4(sp)
    77a4:	d8800015 	stw	r2,0(sp)
    77a8:	d9800215 	stw	r6,8(sp)
    77ac:	dfc01015 	stw	ra,64(sp)
    77b0:	d9c00315 	stw	r7,12(sp)
    77b4:	0007e000 	call	7e00 <__unpack_d>
    77b8:	d9000204 	addi	r4,sp,8
    77bc:	800b883a 	mov	r5,r16
    77c0:	0007e000 	call	7e00 <__unpack_d>
    77c4:	d8800417 	ldw	r2,16(sp)
    77c8:	00c00044 	movi	r3,1
    77cc:	180d883a 	mov	r6,r3
    77d0:	1880062e 	bgeu	r3,r2,77ec <__ledf2+0x70>
    77d4:	d8800917 	ldw	r2,36(sp)
    77d8:	8809883a 	mov	r4,r17
    77dc:	800b883a 	mov	r5,r16
    77e0:	1880022e 	bgeu	r3,r2,77ec <__ledf2+0x70>
    77e4:	0007f380 	call	7f38 <__fpcmp_parts_d>
    77e8:	100d883a 	mov	r6,r2
    77ec:	3005883a 	mov	r2,r6
    77f0:	dfc01017 	ldw	ra,64(sp)
    77f4:	dc400f17 	ldw	r17,60(sp)
    77f8:	dc000e17 	ldw	r16,56(sp)
    77fc:	dec01104 	addi	sp,sp,68
    7800:	f800283a 	ret

00007804 <__floatsidf>:
    7804:	2006d7fa 	srli	r3,r4,31
    7808:	defff604 	addi	sp,sp,-40
    780c:	008000c4 	movi	r2,3
    7810:	dfc00915 	stw	ra,36(sp)
    7814:	dcc00815 	stw	r19,32(sp)
    7818:	dc800715 	stw	r18,28(sp)
    781c:	dc400615 	stw	r17,24(sp)
    7820:	dc000515 	stw	r16,20(sp)
    7824:	d8800015 	stw	r2,0(sp)
    7828:	d8c00115 	stw	r3,4(sp)
    782c:	20000f1e 	bne	r4,zero,786c <__floatsidf+0x68>
    7830:	00800084 	movi	r2,2
    7834:	d8800015 	stw	r2,0(sp)
    7838:	d809883a 	mov	r4,sp
    783c:	0007aec0 	call	7aec <__pack_d>
    7840:	1009883a 	mov	r4,r2
    7844:	180b883a 	mov	r5,r3
    7848:	2005883a 	mov	r2,r4
    784c:	2807883a 	mov	r3,r5
    7850:	dfc00917 	ldw	ra,36(sp)
    7854:	dcc00817 	ldw	r19,32(sp)
    7858:	dc800717 	ldw	r18,28(sp)
    785c:	dc400617 	ldw	r17,24(sp)
    7860:	dc000517 	ldw	r16,20(sp)
    7864:	dec00a04 	addi	sp,sp,40
    7868:	f800283a 	ret
    786c:	00800f04 	movi	r2,60
    7870:	1807003a 	cmpeq	r3,r3,zero
    7874:	d8800215 	stw	r2,8(sp)
    7878:	18001126 	beq	r3,zero,78c0 <__floatsidf+0xbc>
    787c:	0027883a 	mov	r19,zero
    7880:	2025883a 	mov	r18,r4
    7884:	d9000315 	stw	r4,12(sp)
    7888:	dcc00415 	stw	r19,16(sp)
    788c:	0007a6c0 	call	7a6c <__clzsi2>
    7890:	11000744 	addi	r4,r2,29
    7894:	013fe80e 	bge	zero,r4,7838 <__floatsidf+0x34>
    7898:	10bfff44 	addi	r2,r2,-3
    789c:	10000c16 	blt	r2,zero,78d0 <__floatsidf+0xcc>
    78a0:	90a2983a 	sll	r17,r18,r2
    78a4:	0021883a 	mov	r16,zero
    78a8:	d8800217 	ldw	r2,8(sp)
    78ac:	dc400415 	stw	r17,16(sp)
    78b0:	dc000315 	stw	r16,12(sp)
    78b4:	1105c83a 	sub	r2,r2,r4
    78b8:	d8800215 	stw	r2,8(sp)
    78bc:	003fde06 	br	7838 <__floatsidf+0x34>
    78c0:	00a00034 	movhi	r2,32768
    78c4:	20800a26 	beq	r4,r2,78f0 <__floatsidf+0xec>
    78c8:	0109c83a 	sub	r4,zero,r4
    78cc:	003feb06 	br	787c <__floatsidf+0x78>
    78d0:	9006d07a 	srli	r3,r18,1
    78d4:	008007c4 	movi	r2,31
    78d8:	1105c83a 	sub	r2,r2,r4
    78dc:	1886d83a 	srl	r3,r3,r2
    78e0:	9922983a 	sll	r17,r19,r4
    78e4:	9120983a 	sll	r16,r18,r4
    78e8:	1c62b03a 	or	r17,r3,r17
    78ec:	003fee06 	br	78a8 <__floatsidf+0xa4>
    78f0:	0009883a 	mov	r4,zero
    78f4:	01707834 	movhi	r5,49632
    78f8:	003fd306 	br	7848 <__floatsidf+0x44>

000078fc <__fixdfsi>:
    78fc:	defff804 	addi	sp,sp,-32
    7900:	2005883a 	mov	r2,r4
    7904:	2807883a 	mov	r3,r5
    7908:	d809883a 	mov	r4,sp
    790c:	d9400204 	addi	r5,sp,8
    7910:	d8c00115 	stw	r3,4(sp)
    7914:	d8800015 	stw	r2,0(sp)
    7918:	dfc00715 	stw	ra,28(sp)
    791c:	0007e000 	call	7e00 <__unpack_d>
    7920:	d8c00217 	ldw	r3,8(sp)
    7924:	00800084 	movi	r2,2
    7928:	1880051e 	bne	r3,r2,7940 <__fixdfsi+0x44>
    792c:	0007883a 	mov	r3,zero
    7930:	1805883a 	mov	r2,r3
    7934:	dfc00717 	ldw	ra,28(sp)
    7938:	dec00804 	addi	sp,sp,32
    793c:	f800283a 	ret
    7940:	00800044 	movi	r2,1
    7944:	10fff92e 	bgeu	r2,r3,792c <__fixdfsi+0x30>
    7948:	00800104 	movi	r2,4
    794c:	18800426 	beq	r3,r2,7960 <__fixdfsi+0x64>
    7950:	d8c00417 	ldw	r3,16(sp)
    7954:	183ff516 	blt	r3,zero,792c <__fixdfsi+0x30>
    7958:	00800784 	movi	r2,30
    795c:	10c0080e 	bge	r2,r3,7980 <__fixdfsi+0x84>
    7960:	d8800317 	ldw	r2,12(sp)
    7964:	1000121e 	bne	r2,zero,79b0 <__fixdfsi+0xb4>
    7968:	00e00034 	movhi	r3,32768
    796c:	18ffffc4 	addi	r3,r3,-1
    7970:	1805883a 	mov	r2,r3
    7974:	dfc00717 	ldw	ra,28(sp)
    7978:	dec00804 	addi	sp,sp,32
    797c:	f800283a 	ret
    7980:	00800f04 	movi	r2,60
    7984:	10d1c83a 	sub	r8,r2,r3
    7988:	40bff804 	addi	r2,r8,-32
    798c:	d9800517 	ldw	r6,20(sp)
    7990:	d9c00617 	ldw	r7,24(sp)
    7994:	10000816 	blt	r2,zero,79b8 <__fixdfsi+0xbc>
    7998:	3888d83a 	srl	r4,r7,r2
    799c:	d8800317 	ldw	r2,12(sp)
    79a0:	2007883a 	mov	r3,r4
    79a4:	103fe226 	beq	r2,zero,7930 <__fixdfsi+0x34>
    79a8:	0107c83a 	sub	r3,zero,r4
    79ac:	003fe006 	br	7930 <__fixdfsi+0x34>
    79b0:	00e00034 	movhi	r3,32768
    79b4:	003fde06 	br	7930 <__fixdfsi+0x34>
    79b8:	39c7883a 	add	r3,r7,r7
    79bc:	008007c4 	movi	r2,31
    79c0:	1205c83a 	sub	r2,r2,r8
    79c4:	1886983a 	sll	r3,r3,r2
    79c8:	3208d83a 	srl	r4,r6,r8
    79cc:	1908b03a 	or	r4,r3,r4
    79d0:	003ff206 	br	799c <__fixdfsi+0xa0>

000079d4 <__muldi3>:
    79d4:	2011883a 	mov	r8,r4
    79d8:	427fffcc 	andi	r9,r8,65535
    79dc:	4018d43a 	srli	r12,r8,16
    79e0:	32bfffcc 	andi	r10,r6,65535
    79e4:	3016d43a 	srli	r11,r6,16
    79e8:	4a85383a 	mul	r2,r9,r10
    79ec:	6295383a 	mul	r10,r12,r10
    79f0:	4ad3383a 	mul	r9,r9,r11
    79f4:	113fffcc 	andi	r4,r2,65535
    79f8:	1004d43a 	srli	r2,r2,16
    79fc:	4a93883a 	add	r9,r9,r10
    7a00:	3807883a 	mov	r3,r7
    7a04:	1245883a 	add	r2,r2,r9
    7a08:	280f883a 	mov	r7,r5
    7a0c:	180b883a 	mov	r5,r3
    7a10:	1006943a 	slli	r3,r2,16
    7a14:	defffd04 	addi	sp,sp,-12
    7a18:	dc800215 	stw	r18,8(sp)
    7a1c:	1907883a 	add	r3,r3,r4
    7a20:	dc400115 	stw	r17,4(sp)
    7a24:	dc000015 	stw	r16,0(sp)
    7a28:	4165383a 	mul	r18,r8,r5
    7a2c:	31e3383a 	mul	r17,r6,r7
    7a30:	1012d43a 	srli	r9,r2,16
    7a34:	62d9383a 	mul	r12,r12,r11
    7a38:	181f883a 	mov	r15,r3
    7a3c:	1280022e 	bgeu	r2,r10,7a48 <__muldi3+0x74>
    7a40:	00800074 	movhi	r2,1
    7a44:	6099883a 	add	r12,r12,r2
    7a48:	624d883a 	add	r6,r12,r9
    7a4c:	9187883a 	add	r3,r18,r6
    7a50:	88c7883a 	add	r3,r17,r3
    7a54:	7805883a 	mov	r2,r15
    7a58:	dc800217 	ldw	r18,8(sp)
    7a5c:	dc400117 	ldw	r17,4(sp)
    7a60:	dc000017 	ldw	r16,0(sp)
    7a64:	dec00304 	addi	sp,sp,12
    7a68:	f800283a 	ret

00007a6c <__clzsi2>:
    7a6c:	00bfffd4 	movui	r2,65535
    7a70:	11000e36 	bltu	r2,r4,7aac <__clzsi2+0x40>
    7a74:	00803fc4 	movi	r2,255
    7a78:	01400204 	movi	r5,8
    7a7c:	0007883a 	mov	r3,zero
    7a80:	11001036 	bltu	r2,r4,7ac4 <__clzsi2+0x58>
    7a84:	000b883a 	mov	r5,zero
    7a88:	20c6d83a 	srl	r3,r4,r3
    7a8c:	00820034 	movhi	r2,2048
    7a90:	1080e904 	addi	r2,r2,932
    7a94:	1887883a 	add	r3,r3,r2
    7a98:	18800003 	ldbu	r2,0(r3)
    7a9c:	00c00804 	movi	r3,32
    7aa0:	2885883a 	add	r2,r5,r2
    7aa4:	1885c83a 	sub	r2,r3,r2
    7aa8:	f800283a 	ret
    7aac:	01400404 	movi	r5,16
    7ab0:	00804034 	movhi	r2,256
    7ab4:	10bfffc4 	addi	r2,r2,-1
    7ab8:	2807883a 	mov	r3,r5
    7abc:	113ff22e 	bgeu	r2,r4,7a88 <__clzsi2+0x1c>
    7ac0:	01400604 	movi	r5,24
    7ac4:	2807883a 	mov	r3,r5
    7ac8:	20c6d83a 	srl	r3,r4,r3
    7acc:	00820034 	movhi	r2,2048
    7ad0:	1080e904 	addi	r2,r2,932
    7ad4:	1887883a 	add	r3,r3,r2
    7ad8:	18800003 	ldbu	r2,0(r3)
    7adc:	00c00804 	movi	r3,32
    7ae0:	2885883a 	add	r2,r5,r2
    7ae4:	1885c83a 	sub	r2,r3,r2
    7ae8:	f800283a 	ret

00007aec <__pack_d>:
    7aec:	20c00017 	ldw	r3,0(r4)
    7af0:	defffd04 	addi	sp,sp,-12
    7af4:	dc000015 	stw	r16,0(sp)
    7af8:	dc800215 	stw	r18,8(sp)
    7afc:	dc400115 	stw	r17,4(sp)
    7b00:	00800044 	movi	r2,1
    7b04:	22000317 	ldw	r8,12(r4)
    7b08:	001f883a 	mov	r15,zero
    7b0c:	22400417 	ldw	r9,16(r4)
    7b10:	24000117 	ldw	r16,4(r4)
    7b14:	10c0552e 	bgeu	r2,r3,7c6c <__pack_d+0x180>
    7b18:	00800104 	movi	r2,4
    7b1c:	18804f26 	beq	r3,r2,7c5c <__pack_d+0x170>
    7b20:	00800084 	movi	r2,2
    7b24:	18800226 	beq	r3,r2,7b30 <__pack_d+0x44>
    7b28:	4244b03a 	or	r2,r8,r9
    7b2c:	10001a1e 	bne	r2,zero,7b98 <__pack_d+0xac>
    7b30:	000d883a 	mov	r6,zero
    7b34:	000f883a 	mov	r7,zero
    7b38:	0011883a 	mov	r8,zero
    7b3c:	00800434 	movhi	r2,16
    7b40:	10bfffc4 	addi	r2,r2,-1
    7b44:	301d883a 	mov	r14,r6
    7b48:	3884703a 	and	r2,r7,r2
    7b4c:	400a953a 	slli	r5,r8,20
    7b50:	79bffc2c 	andhi	r6,r15,65520
    7b54:	308cb03a 	or	r6,r6,r2
    7b58:	00e00434 	movhi	r3,32784
    7b5c:	18ffffc4 	addi	r3,r3,-1
    7b60:	800497fa 	slli	r2,r16,31
    7b64:	30c6703a 	and	r3,r6,r3
    7b68:	1946b03a 	or	r3,r3,r5
    7b6c:	01600034 	movhi	r5,32768
    7b70:	297fffc4 	addi	r5,r5,-1
    7b74:	194a703a 	and	r5,r3,r5
    7b78:	288ab03a 	or	r5,r5,r2
    7b7c:	2807883a 	mov	r3,r5
    7b80:	7005883a 	mov	r2,r14
    7b84:	dc800217 	ldw	r18,8(sp)
    7b88:	dc400117 	ldw	r17,4(sp)
    7b8c:	dc000017 	ldw	r16,0(sp)
    7b90:	dec00304 	addi	sp,sp,12
    7b94:	f800283a 	ret
    7b98:	21000217 	ldw	r4,8(r4)
    7b9c:	00bf0084 	movi	r2,-1022
    7ba0:	20803f16 	blt	r4,r2,7ca0 <__pack_d+0x1b4>
    7ba4:	0080ffc4 	movi	r2,1023
    7ba8:	11002c16 	blt	r2,r4,7c5c <__pack_d+0x170>
    7bac:	00803fc4 	movi	r2,255
    7bb0:	408c703a 	and	r6,r8,r2
    7bb4:	00802004 	movi	r2,128
    7bb8:	0007883a 	mov	r3,zero
    7bbc:	000f883a 	mov	r7,zero
    7bc0:	2280ffc4 	addi	r10,r4,1023
    7bc4:	30801e26 	beq	r6,r2,7c40 <__pack_d+0x154>
    7bc8:	00801fc4 	movi	r2,127
    7bcc:	4089883a 	add	r4,r8,r2
    7bd0:	220d803a 	cmpltu	r6,r4,r8
    7bd4:	324d883a 	add	r6,r6,r9
    7bd8:	2011883a 	mov	r8,r4
    7bdc:	3013883a 	mov	r9,r6
    7be0:	00880034 	movhi	r2,8192
    7be4:	10bfffc4 	addi	r2,r2,-1
    7be8:	12400d36 	bltu	r2,r9,7c20 <__pack_d+0x134>
    7bec:	4804963a 	slli	r2,r9,24
    7bf0:	400cd23a 	srli	r6,r8,8
    7bf4:	480ed23a 	srli	r7,r9,8
    7bf8:	013fffc4 	movi	r4,-1
    7bfc:	118cb03a 	or	r6,r2,r6
    7c00:	01400434 	movhi	r5,16
    7c04:	297fffc4 	addi	r5,r5,-1
    7c08:	3104703a 	and	r2,r6,r4
    7c0c:	3946703a 	and	r3,r7,r5
    7c10:	5201ffcc 	andi	r8,r10,2047
    7c14:	100d883a 	mov	r6,r2
    7c18:	180f883a 	mov	r7,r3
    7c1c:	003fc706 	br	7b3c <__pack_d+0x50>
    7c20:	480897fa 	slli	r4,r9,31
    7c24:	4004d07a 	srli	r2,r8,1
    7c28:	4806d07a 	srli	r3,r9,1
    7c2c:	52800044 	addi	r10,r10,1
    7c30:	2084b03a 	or	r2,r4,r2
    7c34:	1011883a 	mov	r8,r2
    7c38:	1813883a 	mov	r9,r3
    7c3c:	003feb06 	br	7bec <__pack_d+0x100>
    7c40:	383fe11e 	bne	r7,zero,7bc8 <__pack_d+0xdc>
    7c44:	01004004 	movi	r4,256
    7c48:	4104703a 	and	r2,r8,r4
    7c4c:	10c4b03a 	or	r2,r2,r3
    7c50:	103fe326 	beq	r2,zero,7be0 <__pack_d+0xf4>
    7c54:	3005883a 	mov	r2,r6
    7c58:	003fdc06 	br	7bcc <__pack_d+0xe0>
    7c5c:	000d883a 	mov	r6,zero
    7c60:	000f883a 	mov	r7,zero
    7c64:	0201ffc4 	movi	r8,2047
    7c68:	003fb406 	br	7b3c <__pack_d+0x50>
    7c6c:	0005883a 	mov	r2,zero
    7c70:	00c00234 	movhi	r3,8
    7c74:	408cb03a 	or	r6,r8,r2
    7c78:	48ceb03a 	or	r7,r9,r3
    7c7c:	013fffc4 	movi	r4,-1
    7c80:	01400434 	movhi	r5,16
    7c84:	297fffc4 	addi	r5,r5,-1
    7c88:	3104703a 	and	r2,r6,r4
    7c8c:	3946703a 	and	r3,r7,r5
    7c90:	100d883a 	mov	r6,r2
    7c94:	180f883a 	mov	r7,r3
    7c98:	0201ffc4 	movi	r8,2047
    7c9c:	003fa706 	br	7b3c <__pack_d+0x50>
    7ca0:	1109c83a 	sub	r4,r2,r4
    7ca4:	00800e04 	movi	r2,56
    7ca8:	11004316 	blt	r2,r4,7db8 <__pack_d+0x2cc>
    7cac:	21fff804 	addi	r7,r4,-32
    7cb0:	38004516 	blt	r7,zero,7dc8 <__pack_d+0x2dc>
    7cb4:	49d8d83a 	srl	r12,r9,r7
    7cb8:	001b883a 	mov	r13,zero
    7cbc:	0023883a 	mov	r17,zero
    7cc0:	01400044 	movi	r5,1
    7cc4:	0025883a 	mov	r18,zero
    7cc8:	38004716 	blt	r7,zero,7de8 <__pack_d+0x2fc>
    7ccc:	29d6983a 	sll	r11,r5,r7
    7cd0:	0015883a 	mov	r10,zero
    7cd4:	00bfffc4 	movi	r2,-1
    7cd8:	5089883a 	add	r4,r10,r2
    7cdc:	588b883a 	add	r5,r11,r2
    7ce0:	228d803a 	cmpltu	r6,r4,r10
    7ce4:	314b883a 	add	r5,r6,r5
    7ce8:	4104703a 	and	r2,r8,r4
    7cec:	4946703a 	and	r3,r9,r5
    7cf0:	10c4b03a 	or	r2,r2,r3
    7cf4:	10000226 	beq	r2,zero,7d00 <__pack_d+0x214>
    7cf8:	04400044 	movi	r17,1
    7cfc:	0025883a 	mov	r18,zero
    7d00:	00803fc4 	movi	r2,255
    7d04:	644eb03a 	or	r7,r12,r17
    7d08:	3892703a 	and	r9,r7,r2
    7d0c:	00802004 	movi	r2,128
    7d10:	6c90b03a 	or	r8,r13,r18
    7d14:	0015883a 	mov	r10,zero
    7d18:	48801626 	beq	r9,r2,7d74 <__pack_d+0x288>
    7d1c:	01001fc4 	movi	r4,127
    7d20:	3905883a 	add	r2,r7,r4
    7d24:	11cd803a 	cmpltu	r6,r2,r7
    7d28:	320d883a 	add	r6,r6,r8
    7d2c:	100f883a 	mov	r7,r2
    7d30:	00840034 	movhi	r2,4096
    7d34:	10bfffc4 	addi	r2,r2,-1
    7d38:	3011883a 	mov	r8,r6
    7d3c:	0007883a 	mov	r3,zero
    7d40:	11801b36 	bltu	r2,r6,7db0 <__pack_d+0x2c4>
    7d44:	4004963a 	slli	r2,r8,24
    7d48:	3808d23a 	srli	r4,r7,8
    7d4c:	400ad23a 	srli	r5,r8,8
    7d50:	1813883a 	mov	r9,r3
    7d54:	1108b03a 	or	r4,r2,r4
    7d58:	00bfffc4 	movi	r2,-1
    7d5c:	00c00434 	movhi	r3,16
    7d60:	18ffffc4 	addi	r3,r3,-1
    7d64:	208c703a 	and	r6,r4,r2
    7d68:	28ce703a 	and	r7,r5,r3
    7d6c:	4a01ffcc 	andi	r8,r9,2047
    7d70:	003f7206 	br	7b3c <__pack_d+0x50>
    7d74:	503fe91e 	bne	r10,zero,7d1c <__pack_d+0x230>
    7d78:	01004004 	movi	r4,256
    7d7c:	3904703a 	and	r2,r7,r4
    7d80:	0007883a 	mov	r3,zero
    7d84:	10c4b03a 	or	r2,r2,r3
    7d88:	10000626 	beq	r2,zero,7da4 <__pack_d+0x2b8>
    7d8c:	3a45883a 	add	r2,r7,r9
    7d90:	11cd803a 	cmpltu	r6,r2,r7
    7d94:	320d883a 	add	r6,r6,r8
    7d98:	100f883a 	mov	r7,r2
    7d9c:	3011883a 	mov	r8,r6
    7da0:	0007883a 	mov	r3,zero
    7da4:	00840034 	movhi	r2,4096
    7da8:	10bfffc4 	addi	r2,r2,-1
    7dac:	123fe52e 	bgeu	r2,r8,7d44 <__pack_d+0x258>
    7db0:	00c00044 	movi	r3,1
    7db4:	003fe306 	br	7d44 <__pack_d+0x258>
    7db8:	0009883a 	mov	r4,zero
    7dbc:	0013883a 	mov	r9,zero
    7dc0:	000b883a 	mov	r5,zero
    7dc4:	003fe406 	br	7d58 <__pack_d+0x26c>
    7dc8:	4a47883a 	add	r3,r9,r9
    7dcc:	008007c4 	movi	r2,31
    7dd0:	1105c83a 	sub	r2,r2,r4
    7dd4:	1886983a 	sll	r3,r3,r2
    7dd8:	4118d83a 	srl	r12,r8,r4
    7ddc:	491ad83a 	srl	r13,r9,r4
    7de0:	1b18b03a 	or	r12,r3,r12
    7de4:	003fb506 	br	7cbc <__pack_d+0x1d0>
    7de8:	2806d07a 	srli	r3,r5,1
    7dec:	008007c4 	movi	r2,31
    7df0:	1105c83a 	sub	r2,r2,r4
    7df4:	1896d83a 	srl	r11,r3,r2
    7df8:	2914983a 	sll	r10,r5,r4
    7dfc:	003fb506 	br	7cd4 <__pack_d+0x1e8>

00007e00 <__unpack_d>:
    7e00:	20c00117 	ldw	r3,4(r4)
    7e04:	22400017 	ldw	r9,0(r4)
    7e08:	00800434 	movhi	r2,16
    7e0c:	10bfffc4 	addi	r2,r2,-1
    7e10:	1808d53a 	srli	r4,r3,20
    7e14:	180cd7fa 	srli	r6,r3,31
    7e18:	1894703a 	and	r10,r3,r2
    7e1c:	2201ffcc 	andi	r8,r4,2047
    7e20:	281b883a 	mov	r13,r5
    7e24:	4817883a 	mov	r11,r9
    7e28:	29800115 	stw	r6,4(r5)
    7e2c:	5019883a 	mov	r12,r10
    7e30:	40001e1e 	bne	r8,zero,7eac <__unpack_d+0xac>
    7e34:	4a84b03a 	or	r2,r9,r10
    7e38:	10001926 	beq	r2,zero,7ea0 <__unpack_d+0xa0>
    7e3c:	4804d63a 	srli	r2,r9,24
    7e40:	500c923a 	slli	r6,r10,8
    7e44:	013f0084 	movi	r4,-1022
    7e48:	00c40034 	movhi	r3,4096
    7e4c:	18ffffc4 	addi	r3,r3,-1
    7e50:	118cb03a 	or	r6,r2,r6
    7e54:	008000c4 	movi	r2,3
    7e58:	480a923a 	slli	r5,r9,8
    7e5c:	68800015 	stw	r2,0(r13)
    7e60:	69000215 	stw	r4,8(r13)
    7e64:	19800b36 	bltu	r3,r6,7e94 <__unpack_d+0x94>
    7e68:	200f883a 	mov	r7,r4
    7e6c:	1811883a 	mov	r8,r3
    7e70:	2945883a 	add	r2,r5,r5
    7e74:	1149803a 	cmpltu	r4,r2,r5
    7e78:	3187883a 	add	r3,r6,r6
    7e7c:	20c9883a 	add	r4,r4,r3
    7e80:	100b883a 	mov	r5,r2
    7e84:	200d883a 	mov	r6,r4
    7e88:	39ffffc4 	addi	r7,r7,-1
    7e8c:	413ff82e 	bgeu	r8,r4,7e70 <__unpack_d+0x70>
    7e90:	69c00215 	stw	r7,8(r13)
    7e94:	69800415 	stw	r6,16(r13)
    7e98:	69400315 	stw	r5,12(r13)
    7e9c:	f800283a 	ret
    7ea0:	00800084 	movi	r2,2
    7ea4:	28800015 	stw	r2,0(r5)
    7ea8:	f800283a 	ret
    7eac:	0081ffc4 	movi	r2,2047
    7eb0:	40800f26 	beq	r8,r2,7ef0 <__unpack_d+0xf0>
    7eb4:	480cd63a 	srli	r6,r9,24
    7eb8:	5006923a 	slli	r3,r10,8
    7ebc:	4804923a 	slli	r2,r9,8
    7ec0:	0009883a 	mov	r4,zero
    7ec4:	30c6b03a 	or	r3,r6,r3
    7ec8:	01440034 	movhi	r5,4096
    7ecc:	110cb03a 	or	r6,r2,r4
    7ed0:	423f0044 	addi	r8,r8,-1023
    7ed4:	194eb03a 	or	r7,r3,r5
    7ed8:	008000c4 	movi	r2,3
    7edc:	69c00415 	stw	r7,16(r13)
    7ee0:	6a000215 	stw	r8,8(r13)
    7ee4:	68800015 	stw	r2,0(r13)
    7ee8:	69800315 	stw	r6,12(r13)
    7eec:	f800283a 	ret
    7ef0:	4a84b03a 	or	r2,r9,r10
    7ef4:	1000031e 	bne	r2,zero,7f04 <__unpack_d+0x104>
    7ef8:	00800104 	movi	r2,4
    7efc:	28800015 	stw	r2,0(r5)
    7f00:	f800283a 	ret
    7f04:	0009883a 	mov	r4,zero
    7f08:	01400234 	movhi	r5,8
    7f0c:	4904703a 	and	r2,r9,r4
    7f10:	5146703a 	and	r3,r10,r5
    7f14:	10c4b03a 	or	r2,r2,r3
    7f18:	10000526 	beq	r2,zero,7f30 <__unpack_d+0x130>
    7f1c:	00800044 	movi	r2,1
    7f20:	68800015 	stw	r2,0(r13)
    7f24:	6b000415 	stw	r12,16(r13)
    7f28:	6ac00315 	stw	r11,12(r13)
    7f2c:	f800283a 	ret
    7f30:	68000015 	stw	zero,0(r13)
    7f34:	003ffb06 	br	7f24 <__unpack_d+0x124>

00007f38 <__fpcmp_parts_d>:
    7f38:	21800017 	ldw	r6,0(r4)
    7f3c:	00c00044 	movi	r3,1
    7f40:	19800a2e 	bgeu	r3,r6,7f6c <__fpcmp_parts_d+0x34>
    7f44:	28800017 	ldw	r2,0(r5)
    7f48:	1880082e 	bgeu	r3,r2,7f6c <__fpcmp_parts_d+0x34>
    7f4c:	00c00104 	movi	r3,4
    7f50:	30c02626 	beq	r6,r3,7fec <__fpcmp_parts_d+0xb4>
    7f54:	10c02226 	beq	r2,r3,7fe0 <__fpcmp_parts_d+0xa8>
    7f58:	00c00084 	movi	r3,2
    7f5c:	30c00526 	beq	r6,r3,7f74 <__fpcmp_parts_d+0x3c>
    7f60:	10c0071e 	bne	r2,r3,7f80 <__fpcmp_parts_d+0x48>
    7f64:	20800117 	ldw	r2,4(r4)
    7f68:	1000091e 	bne	r2,zero,7f90 <__fpcmp_parts_d+0x58>
    7f6c:	00800044 	movi	r2,1
    7f70:	f800283a 	ret
    7f74:	10c01a1e 	bne	r2,r3,7fe0 <__fpcmp_parts_d+0xa8>
    7f78:	0005883a 	mov	r2,zero
    7f7c:	f800283a 	ret
    7f80:	22000117 	ldw	r8,4(r4)
    7f84:	28800117 	ldw	r2,4(r5)
    7f88:	40800326 	beq	r8,r2,7f98 <__fpcmp_parts_d+0x60>
    7f8c:	403ff726 	beq	r8,zero,7f6c <__fpcmp_parts_d+0x34>
    7f90:	00bfffc4 	movi	r2,-1
    7f94:	f800283a 	ret
    7f98:	20c00217 	ldw	r3,8(r4)
    7f9c:	28800217 	ldw	r2,8(r5)
    7fa0:	10fffa16 	blt	r2,r3,7f8c <__fpcmp_parts_d+0x54>
    7fa4:	18800916 	blt	r3,r2,7fcc <__fpcmp_parts_d+0x94>
    7fa8:	21c00417 	ldw	r7,16(r4)
    7fac:	28c00417 	ldw	r3,16(r5)
    7fb0:	21800317 	ldw	r6,12(r4)
    7fb4:	28800317 	ldw	r2,12(r5)
    7fb8:	19fff436 	bltu	r3,r7,7f8c <__fpcmp_parts_d+0x54>
    7fbc:	38c00526 	beq	r7,r3,7fd4 <__fpcmp_parts_d+0x9c>
    7fc0:	38c00236 	bltu	r7,r3,7fcc <__fpcmp_parts_d+0x94>
    7fc4:	19ffec1e 	bne	r3,r7,7f78 <__fpcmp_parts_d+0x40>
    7fc8:	30bfeb2e 	bgeu	r6,r2,7f78 <__fpcmp_parts_d+0x40>
    7fcc:	403fe71e 	bne	r8,zero,7f6c <__fpcmp_parts_d+0x34>
    7fd0:	003fef06 	br	7f90 <__fpcmp_parts_d+0x58>
    7fd4:	11bffa2e 	bgeu	r2,r6,7fc0 <__fpcmp_parts_d+0x88>
    7fd8:	403fe426 	beq	r8,zero,7f6c <__fpcmp_parts_d+0x34>
    7fdc:	003fec06 	br	7f90 <__fpcmp_parts_d+0x58>
    7fe0:	28800117 	ldw	r2,4(r5)
    7fe4:	103fe11e 	bne	r2,zero,7f6c <__fpcmp_parts_d+0x34>
    7fe8:	003fe906 	br	7f90 <__fpcmp_parts_d+0x58>
    7fec:	11bfdd1e 	bne	r2,r6,7f64 <__fpcmp_parts_d+0x2c>
    7ff0:	28c00117 	ldw	r3,4(r5)
    7ff4:	20800117 	ldw	r2,4(r4)
    7ff8:	1885c83a 	sub	r2,r3,r2
    7ffc:	f800283a 	ret

00008000 <memcmp>:
    8000:	00c000c4 	movi	r3,3
    8004:	1980032e 	bgeu	r3,r6,8014 <memcmp+0x14>
    8008:	2144b03a 	or	r2,r4,r5
    800c:	10c4703a 	and	r2,r2,r3
    8010:	10000f26 	beq	r2,zero,8050 <memcmp+0x50>
    8014:	31ffffc4 	addi	r7,r6,-1
    8018:	3000061e 	bne	r6,zero,8034 <memcmp+0x34>
    801c:	00000a06 	br	8048 <memcmp+0x48>
    8020:	39ffffc4 	addi	r7,r7,-1
    8024:	00bfffc4 	movi	r2,-1
    8028:	21000044 	addi	r4,r4,1
    802c:	29400044 	addi	r5,r5,1
    8030:	38800526 	beq	r7,r2,8048 <memcmp+0x48>
    8034:	20c00003 	ldbu	r3,0(r4)
    8038:	28800003 	ldbu	r2,0(r5)
    803c:	18bff826 	beq	r3,r2,8020 <memcmp+0x20>
    8040:	1885c83a 	sub	r2,r3,r2
    8044:	f800283a 	ret
    8048:	0005883a 	mov	r2,zero
    804c:	f800283a 	ret
    8050:	180f883a 	mov	r7,r3
    8054:	20c00017 	ldw	r3,0(r4)
    8058:	28800017 	ldw	r2,0(r5)
    805c:	18bfed1e 	bne	r3,r2,8014 <memcmp+0x14>
    8060:	31bfff04 	addi	r6,r6,-4
    8064:	21000104 	addi	r4,r4,4
    8068:	29400104 	addi	r5,r5,4
    806c:	39bff936 	bltu	r7,r6,8054 <memcmp+0x54>
    8070:	003fe806 	br	8014 <memcmp+0x14>

00008074 <memcpy>:
    8074:	01c003c4 	movi	r7,15
    8078:	2007883a 	mov	r3,r4
    807c:	3980032e 	bgeu	r7,r6,808c <memcpy+0x18>
    8080:	2904b03a 	or	r2,r5,r4
    8084:	108000cc 	andi	r2,r2,3
    8088:	10000926 	beq	r2,zero,80b0 <memcpy+0x3c>
    808c:	30000626 	beq	r6,zero,80a8 <memcpy+0x34>
    8090:	30cd883a 	add	r6,r6,r3
    8094:	28800003 	ldbu	r2,0(r5)
    8098:	29400044 	addi	r5,r5,1
    809c:	18800005 	stb	r2,0(r3)
    80a0:	18c00044 	addi	r3,r3,1
    80a4:	30fffb1e 	bne	r6,r3,8094 <memcpy+0x20>
    80a8:	2005883a 	mov	r2,r4
    80ac:	f800283a 	ret
    80b0:	3811883a 	mov	r8,r7
    80b4:	200f883a 	mov	r7,r4
    80b8:	28c00017 	ldw	r3,0(r5)
    80bc:	31bffc04 	addi	r6,r6,-16
    80c0:	38c00015 	stw	r3,0(r7)
    80c4:	28800117 	ldw	r2,4(r5)
    80c8:	38800115 	stw	r2,4(r7)
    80cc:	28c00217 	ldw	r3,8(r5)
    80d0:	38c00215 	stw	r3,8(r7)
    80d4:	28800317 	ldw	r2,12(r5)
    80d8:	29400404 	addi	r5,r5,16
    80dc:	38800315 	stw	r2,12(r7)
    80e0:	39c00404 	addi	r7,r7,16
    80e4:	41bff436 	bltu	r8,r6,80b8 <memcpy+0x44>
    80e8:	008000c4 	movi	r2,3
    80ec:	1180072e 	bgeu	r2,r6,810c <memcpy+0x98>
    80f0:	1007883a 	mov	r3,r2
    80f4:	28800017 	ldw	r2,0(r5)
    80f8:	31bfff04 	addi	r6,r6,-4
    80fc:	29400104 	addi	r5,r5,4
    8100:	38800015 	stw	r2,0(r7)
    8104:	39c00104 	addi	r7,r7,4
    8108:	19bffa36 	bltu	r3,r6,80f4 <memcpy+0x80>
    810c:	3807883a 	mov	r3,r7
    8110:	003fde06 	br	808c <memcpy+0x18>

00008114 <memset>:
    8114:	008000c4 	movi	r2,3
    8118:	29403fcc 	andi	r5,r5,255
    811c:	2007883a 	mov	r3,r4
    8120:	1180022e 	bgeu	r2,r6,812c <memset+0x18>
    8124:	2084703a 	and	r2,r4,r2
    8128:	10000826 	beq	r2,zero,814c <memset+0x38>
    812c:	30000526 	beq	r6,zero,8144 <memset+0x30>
    8130:	2805883a 	mov	r2,r5
    8134:	30cd883a 	add	r6,r6,r3
    8138:	18800005 	stb	r2,0(r3)
    813c:	18c00044 	addi	r3,r3,1
    8140:	19bffd1e 	bne	r3,r6,8138 <memset+0x24>
    8144:	2005883a 	mov	r2,r4
    8148:	f800283a 	ret
    814c:	2804923a 	slli	r2,r5,8
    8150:	020003c4 	movi	r8,15
    8154:	200f883a 	mov	r7,r4
    8158:	2884b03a 	or	r2,r5,r2
    815c:	1006943a 	slli	r3,r2,16
    8160:	10c6b03a 	or	r3,r2,r3
    8164:	41800a2e 	bgeu	r8,r6,8190 <memset+0x7c>
    8168:	4005883a 	mov	r2,r8
    816c:	31bffc04 	addi	r6,r6,-16
    8170:	38c00015 	stw	r3,0(r7)
    8174:	38c00115 	stw	r3,4(r7)
    8178:	38c00215 	stw	r3,8(r7)
    817c:	38c00315 	stw	r3,12(r7)
    8180:	39c00404 	addi	r7,r7,16
    8184:	11bff936 	bltu	r2,r6,816c <memset+0x58>
    8188:	008000c4 	movi	r2,3
    818c:	1180052e 	bgeu	r2,r6,81a4 <memset+0x90>
    8190:	31bfff04 	addi	r6,r6,-4
    8194:	008000c4 	movi	r2,3
    8198:	38c00015 	stw	r3,0(r7)
    819c:	39c00104 	addi	r7,r7,4
    81a0:	11bffb36 	bltu	r2,r6,8190 <memset+0x7c>
    81a4:	3807883a 	mov	r3,r7
    81a8:	003fe006 	br	812c <memset+0x18>

000081ac <printf>:
    81ac:	defffb04 	addi	sp,sp,-20
    81b0:	dfc00115 	stw	ra,4(sp)
    81b4:	d9400215 	stw	r5,8(sp)
    81b8:	d9800315 	stw	r6,12(sp)
    81bc:	d9c00415 	stw	r7,16(sp)
    81c0:	00820034 	movhi	r2,2048
    81c4:	108a1f04 	addi	r2,r2,10364
    81c8:	10c00017 	ldw	r3,0(r2)
    81cc:	200b883a 	mov	r5,r4
    81d0:	d8800204 	addi	r2,sp,8
    81d4:	19000217 	ldw	r4,8(r3)
    81d8:	100d883a 	mov	r6,r2
    81dc:	d8800015 	stw	r2,0(sp)
    81e0:	000ba640 	call	ba64 <__vfprintf_internal>
    81e4:	dfc00117 	ldw	ra,4(sp)
    81e8:	dec00504 	addi	sp,sp,20
    81ec:	f800283a 	ret

000081f0 <_printf_r>:
    81f0:	defffc04 	addi	sp,sp,-16
    81f4:	dfc00115 	stw	ra,4(sp)
    81f8:	d9800215 	stw	r6,8(sp)
    81fc:	d9c00315 	stw	r7,12(sp)
    8200:	280d883a 	mov	r6,r5
    8204:	21400217 	ldw	r5,8(r4)
    8208:	d8c00204 	addi	r3,sp,8
    820c:	180f883a 	mov	r7,r3
    8210:	d8c00015 	stw	r3,0(sp)
    8214:	0009bb80 	call	9bb8 <___vfprintf_internal_r>
    8218:	dfc00117 	ldw	ra,4(sp)
    821c:	dec00404 	addi	sp,sp,16
    8220:	f800283a 	ret

00008224 <putchar>:
    8224:	00820034 	movhi	r2,2048
    8228:	108a1f04 	addi	r2,r2,10364
    822c:	11800017 	ldw	r6,0(r2)
    8230:	200b883a 	mov	r5,r4
    8234:	3009883a 	mov	r4,r6
    8238:	31800217 	ldw	r6,8(r6)
    823c:	0010ab81 	jmpi	10ab8 <_putc_r>

00008240 <_putchar_r>:
    8240:	21800217 	ldw	r6,8(r4)
    8244:	0010ab81 	jmpi	10ab8 <_putc_r>

00008248 <_puts_r>:
    8248:	defff604 	addi	sp,sp,-40
    824c:	dc400715 	stw	r17,28(sp)
    8250:	2023883a 	mov	r17,r4
    8254:	2809883a 	mov	r4,r5
    8258:	dfc00915 	stw	ra,36(sp)
    825c:	dcc00815 	stw	r19,32(sp)
    8260:	2827883a 	mov	r19,r5
    8264:	00083d00 	call	83d0 <strlen>
    8268:	89400217 	ldw	r5,8(r17)
    826c:	00c20034 	movhi	r3,2048
    8270:	18c12904 	addi	r3,r3,1188
    8274:	01c00044 	movi	r7,1
    8278:	12000044 	addi	r8,r2,1
    827c:	d8c00515 	stw	r3,20(sp)
    8280:	d9c00615 	stw	r7,24(sp)
    8284:	d8c00304 	addi	r3,sp,12
    8288:	01c00084 	movi	r7,2
    828c:	8809883a 	mov	r4,r17
    8290:	d80d883a 	mov	r6,sp
    8294:	d8c00015 	stw	r3,0(sp)
    8298:	dcc00315 	stw	r19,12(sp)
    829c:	da000215 	stw	r8,8(sp)
    82a0:	d9c00115 	stw	r7,4(sp)
    82a4:	d8800415 	stw	r2,16(sp)
    82a8:	000dcc00 	call	dcc0 <__sfvwrite_r>
    82ac:	00ffffc4 	movi	r3,-1
    82b0:	10000626 	beq	r2,zero,82cc <_puts_r+0x84>
    82b4:	1805883a 	mov	r2,r3
    82b8:	dfc00917 	ldw	ra,36(sp)
    82bc:	dcc00817 	ldw	r19,32(sp)
    82c0:	dc400717 	ldw	r17,28(sp)
    82c4:	dec00a04 	addi	sp,sp,40
    82c8:	f800283a 	ret
    82cc:	00c00284 	movi	r3,10
    82d0:	1805883a 	mov	r2,r3
    82d4:	dfc00917 	ldw	ra,36(sp)
    82d8:	dcc00817 	ldw	r19,32(sp)
    82dc:	dc400717 	ldw	r17,28(sp)
    82e0:	dec00a04 	addi	sp,sp,40
    82e4:	f800283a 	ret

000082e8 <puts>:
    82e8:	00820034 	movhi	r2,2048
    82ec:	108a1f04 	addi	r2,r2,10364
    82f0:	200b883a 	mov	r5,r4
    82f4:	11000017 	ldw	r4,0(r2)
    82f8:	00082481 	jmpi	8248 <_puts_r>

000082fc <sprintf>:
    82fc:	deffe504 	addi	sp,sp,-108
    8300:	2013883a 	mov	r9,r4
    8304:	dfc01815 	stw	ra,96(sp)
    8308:	d9801915 	stw	r6,100(sp)
    830c:	d9c01a15 	stw	r7,104(sp)
    8310:	d8801904 	addi	r2,sp,100
    8314:	d8800015 	stw	r2,0(sp)
    8318:	00820034 	movhi	r2,2048
    831c:	108a1f04 	addi	r2,r2,10364
    8320:	11000017 	ldw	r4,0(r2)
    8324:	d9c00017 	ldw	r7,0(sp)
    8328:	00808204 	movi	r2,520
    832c:	00e00034 	movhi	r3,32768
    8330:	18ffffc4 	addi	r3,r3,-1
    8334:	280d883a 	mov	r6,r5
    8338:	d880040d 	sth	r2,16(sp)
    833c:	d9400104 	addi	r5,sp,4
    8340:	00bfffc4 	movi	r2,-1
    8344:	d8c00615 	stw	r3,24(sp)
    8348:	d8c00315 	stw	r3,12(sp)
    834c:	da400515 	stw	r9,20(sp)
    8350:	d880048d 	sth	r2,18(sp)
    8354:	da400115 	stw	r9,4(sp)
    8358:	0009bb80 	call	9bb8 <___vfprintf_internal_r>
    835c:	d8c00117 	ldw	r3,4(sp)
    8360:	18000005 	stb	zero,0(r3)
    8364:	dfc01817 	ldw	ra,96(sp)
    8368:	dec01b04 	addi	sp,sp,108
    836c:	f800283a 	ret

00008370 <_sprintf_r>:
    8370:	deffe604 	addi	sp,sp,-104
    8374:	2813883a 	mov	r9,r5
    8378:	dfc01815 	stw	ra,96(sp)
    837c:	d9c01915 	stw	r7,100(sp)
    8380:	d8801904 	addi	r2,sp,100
    8384:	d8800015 	stw	r2,0(sp)
    8388:	100f883a 	mov	r7,r2
    838c:	00808204 	movi	r2,520
    8390:	00e00034 	movhi	r3,32768
    8394:	18ffffc4 	addi	r3,r3,-1
    8398:	d880040d 	sth	r2,16(sp)
    839c:	d9400104 	addi	r5,sp,4
    83a0:	00bfffc4 	movi	r2,-1
    83a4:	d8c00615 	stw	r3,24(sp)
    83a8:	d8c00315 	stw	r3,12(sp)
    83ac:	da400515 	stw	r9,20(sp)
    83b0:	d880048d 	sth	r2,18(sp)
    83b4:	da400115 	stw	r9,4(sp)
    83b8:	0009bb80 	call	9bb8 <___vfprintf_internal_r>
    83bc:	d8c00117 	ldw	r3,4(sp)
    83c0:	18000005 	stb	zero,0(r3)
    83c4:	dfc01817 	ldw	ra,96(sp)
    83c8:	dec01a04 	addi	sp,sp,104
    83cc:	f800283a 	ret

000083d0 <strlen>:
    83d0:	208000cc 	andi	r2,r4,3
    83d4:	2011883a 	mov	r8,r4
    83d8:	1000161e 	bne	r2,zero,8434 <strlen+0x64>
    83dc:	20c00017 	ldw	r3,0(r4)
    83e0:	017fbff4 	movhi	r5,65279
    83e4:	297fbfc4 	addi	r5,r5,-257
    83e8:	01e02074 	movhi	r7,32897
    83ec:	39e02004 	addi	r7,r7,-32640
    83f0:	1945883a 	add	r2,r3,r5
    83f4:	11c4703a 	and	r2,r2,r7
    83f8:	00c6303a 	nor	r3,zero,r3
    83fc:	1886703a 	and	r3,r3,r2
    8400:	18000c1e 	bne	r3,zero,8434 <strlen+0x64>
    8404:	280d883a 	mov	r6,r5
    8408:	380b883a 	mov	r5,r7
    840c:	21000104 	addi	r4,r4,4
    8410:	20800017 	ldw	r2,0(r4)
    8414:	1187883a 	add	r3,r2,r6
    8418:	1946703a 	and	r3,r3,r5
    841c:	0084303a 	nor	r2,zero,r2
    8420:	10c4703a 	and	r2,r2,r3
    8424:	103ff926 	beq	r2,zero,840c <strlen+0x3c>
    8428:	20800007 	ldb	r2,0(r4)
    842c:	10000326 	beq	r2,zero,843c <strlen+0x6c>
    8430:	21000044 	addi	r4,r4,1
    8434:	20800007 	ldb	r2,0(r4)
    8438:	103ffd1e 	bne	r2,zero,8430 <strlen+0x60>
    843c:	2205c83a 	sub	r2,r4,r8
    8440:	f800283a 	ret

00008444 <strncat>:
    8444:	208000cc 	andi	r2,r4,3
    8448:	10001426 	beq	r2,zero,849c <strncat+0x58>
    844c:	2007883a 	mov	r3,r4
    8450:	00000106 	br	8458 <strncat+0x14>
    8454:	18c00044 	addi	r3,r3,1
    8458:	18800007 	ldb	r2,0(r3)
    845c:	103ffd1e 	bne	r2,zero,8454 <strncat+0x10>
    8460:	31bfffc4 	addi	r6,r6,-1
    8464:	00bfffc4 	movi	r2,-1
    8468:	30800a26 	beq	r6,r2,8494 <strncat+0x50>
    846c:	28800003 	ldbu	r2,0(r5)
    8470:	29400044 	addi	r5,r5,1
    8474:	18800005 	stb	r2,0(r3)
    8478:	10000626 	beq	r2,zero,8494 <strncat+0x50>
    847c:	18c00044 	addi	r3,r3,1
    8480:	303ff71e 	bne	r6,zero,8460 <strncat+0x1c>
    8484:	31bfffc4 	addi	r6,r6,-1
    8488:	00bfffc4 	movi	r2,-1
    848c:	18000005 	stb	zero,0(r3)
    8490:	30bff61e 	bne	r6,r2,846c <strncat+0x28>
    8494:	2005883a 	mov	r2,r4
    8498:	f800283a 	ret
    849c:	20c00017 	ldw	r3,0(r4)
    84a0:	023fbff4 	movhi	r8,65279
    84a4:	423fbfc4 	addi	r8,r8,-257
    84a8:	02a02074 	movhi	r10,32897
    84ac:	52a02004 	addi	r10,r10,-32640
    84b0:	1a05883a 	add	r2,r3,r8
    84b4:	1284703a 	and	r2,r2,r10
    84b8:	00c6303a 	nor	r3,zero,r3
    84bc:	1886703a 	and	r3,r3,r2
    84c0:	200f883a 	mov	r7,r4
    84c4:	1800091e 	bne	r3,zero,84ec <strncat+0xa8>
    84c8:	4013883a 	mov	r9,r8
    84cc:	5011883a 	mov	r8,r10
    84d0:	39c00104 	addi	r7,r7,4
    84d4:	38800017 	ldw	r2,0(r7)
    84d8:	1247883a 	add	r3,r2,r9
    84dc:	1a06703a 	and	r3,r3,r8
    84e0:	0084303a 	nor	r2,zero,r2
    84e4:	10c4703a 	and	r2,r2,r3
    84e8:	103ff926 	beq	r2,zero,84d0 <strncat+0x8c>
    84ec:	3807883a 	mov	r3,r7
    84f0:	003fd906 	br	8458 <strncat+0x14>

000084f4 <match>:
    84f4:	21800017 	ldw	r6,0(r4)
    84f8:	01c01004 	movi	r7,64
    84fc:	02001684 	movi	r8,90
    8500:	28800007 	ldb	r2,0(r5)
    8504:	29400044 	addi	r5,r5,1
    8508:	10000826 	beq	r2,zero,852c <match+0x38>
    850c:	31800044 	addi	r6,r6,1
    8510:	30c00007 	ldb	r3,0(r6)
    8514:	38c0020e 	bge	r7,r3,8520 <match+0x2c>
    8518:	40c00116 	blt	r8,r3,8520 <match+0x2c>
    851c:	18c00804 	addi	r3,r3,32
    8520:	18bff726 	beq	r3,r2,8500 <match+0xc>
    8524:	0005883a 	mov	r2,zero
    8528:	f800283a 	ret
    852c:	30800044 	addi	r2,r6,1
    8530:	20800015 	stw	r2,0(r4)
    8534:	00800044 	movi	r2,1
    8538:	f800283a 	ret

0000853c <_strtod_r>:
    853c:	deffde04 	addi	sp,sp,-136
    8540:	df002015 	stw	fp,128(sp)
    8544:	dd401d15 	stw	r21,116(sp)
    8548:	dc401915 	stw	r17,100(sp)
    854c:	dfc02115 	stw	ra,132(sp)
    8550:	ddc01f15 	stw	r23,124(sp)
    8554:	dd801e15 	stw	r22,120(sp)
    8558:	dd001c15 	stw	r20,112(sp)
    855c:	dcc01b15 	stw	r19,108(sp)
    8560:	dc801a15 	stw	r18,104(sp)
    8564:	dc001815 	stw	r16,96(sp)
    8568:	2823883a 	mov	r17,r5
    856c:	202b883a 	mov	r21,r4
    8570:	d9801515 	stw	r6,84(sp)
    8574:	d8000915 	stw	zero,36(sp)
    8578:	d8000a15 	stw	zero,40(sp)
    857c:	d9400415 	stw	r5,16(sp)
    8580:	df000904 	addi	fp,sp,36
    8584:	da000417 	ldw	r8,16(sp)
    8588:	00800b44 	movi	r2,45
    858c:	40c00003 	ldbu	r3,0(r8)
    8590:	10c03536 	bltu	r2,r3,8668 <_strtod_r+0x12c>
    8594:	18c5883a 	add	r2,r3,r3
    8598:	1085883a 	add	r2,r2,r2
    859c:	00c00074 	movhi	r3,1
    85a0:	18e16c04 	addi	r3,r3,-31312
    85a4:	10c5883a 	add	r2,r2,r3
    85a8:	11000017 	ldw	r4,0(r2)
    85ac:	2000683a 	jmp	r4
    85b0:	000087a4 	muli	zero,zero,542
    85b4:	00008668 	cmpgeui	zero,zero,537
    85b8:	00008668 	cmpgeui	zero,zero,537
    85bc:	00008668 	cmpgeui	zero,zero,537
    85c0:	00008668 	cmpgeui	zero,zero,537
    85c4:	00008668 	cmpgeui	zero,zero,537
    85c8:	00008668 	cmpgeui	zero,zero,537
    85cc:	00008668 	cmpgeui	zero,zero,537
    85d0:	00008668 	cmpgeui	zero,zero,537
    85d4:	00008abc 	xorhi	zero,zero,554
    85d8:	00008abc 	xorhi	zero,zero,554
    85dc:	00008abc 	xorhi	zero,zero,554
    85e0:	00008abc 	xorhi	zero,zero,554
    85e4:	00008abc 	xorhi	zero,zero,554
    85e8:	00008668 	cmpgeui	zero,zero,537
    85ec:	00008668 	cmpgeui	zero,zero,537
    85f0:	00008668 	cmpgeui	zero,zero,537
    85f4:	00008668 	cmpgeui	zero,zero,537
    85f8:	00008668 	cmpgeui	zero,zero,537
    85fc:	00008668 	cmpgeui	zero,zero,537
    8600:	00008668 	cmpgeui	zero,zero,537
    8604:	00008668 	cmpgeui	zero,zero,537
    8608:	00008668 	cmpgeui	zero,zero,537
    860c:	00008668 	cmpgeui	zero,zero,537
    8610:	00008668 	cmpgeui	zero,zero,537
    8614:	00008668 	cmpgeui	zero,zero,537
    8618:	00008668 	cmpgeui	zero,zero,537
    861c:	00008668 	cmpgeui	zero,zero,537
    8620:	00008668 	cmpgeui	zero,zero,537
    8624:	00008668 	cmpgeui	zero,zero,537
    8628:	00008668 	cmpgeui	zero,zero,537
    862c:	00008668 	cmpgeui	zero,zero,537
    8630:	00008abc 	xorhi	zero,zero,554
    8634:	00008668 	cmpgeui	zero,zero,537
    8638:	00008668 	cmpgeui	zero,zero,537
    863c:	00008668 	cmpgeui	zero,zero,537
    8640:	00008668 	cmpgeui	zero,zero,537
    8644:	00008668 	cmpgeui	zero,zero,537
    8648:	00008668 	cmpgeui	zero,zero,537
    864c:	00008668 	cmpgeui	zero,zero,537
    8650:	00008668 	cmpgeui	zero,zero,537
    8654:	00008668 	cmpgeui	zero,zero,537
    8658:	00008668 	cmpgeui	zero,zero,537
    865c:	00008a9c 	xori	zero,zero,554
    8660:	00008668 	cmpgeui	zero,zero,537
    8664:	00008ac8 	cmpgei	zero,zero,555
    8668:	d8001115 	stw	zero,68(sp)
    866c:	40c00007 	ldb	r3,0(r8)
    8670:	00800c04 	movi	r2,48
    8674:	1880d026 	beq	r3,r2,89b8 <_strtod_r+0x47c>
    8678:	001f883a 	mov	r15,zero
    867c:	41000007 	ldb	r4,0(r8)
    8680:	00c00bc4 	movi	r3,47
    8684:	402d883a 	mov	r22,r8
    8688:	1903470e 	bge	r3,r4,93a8 <_strtod_r+0xe6c>
    868c:	00800e44 	movi	r2,57
    8690:	11034516 	blt	r2,r4,93a8 <_strtod_r+0xe6c>
    8694:	180f883a 	mov	r7,r3
    8698:	1013883a 	mov	r9,r2
    869c:	4007883a 	mov	r3,r8
    86a0:	000d883a 	mov	r6,zero
    86a4:	0029883a 	mov	r20,zero
    86a8:	0021883a 	mov	r16,zero
    86ac:	01400204 	movi	r5,8
    86b0:	028003c4 	movi	r10,15
    86b4:	29803116 	blt	r5,r6,877c <_strtod_r+0x240>
    86b8:	a08002a4 	muli	r2,r20,10
    86bc:	1105883a 	add	r2,r2,r4
    86c0:	153ff404 	addi	r20,r2,-48
    86c4:	1a000044 	addi	r8,r3,1
    86c8:	da000415 	stw	r8,16(sp)
    86cc:	41000007 	ldb	r4,0(r8)
    86d0:	31800044 	addi	r6,r6,1
    86d4:	4007883a 	mov	r3,r8
    86d8:	3900010e 	bge	r7,r4,86e0 <_strtod_r+0x1a4>
    86dc:	493ff50e 	bge	r9,r4,86b4 <_strtod_r+0x178>
    86e0:	00800b84 	movi	r2,46
    86e4:	2080c126 	beq	r4,r2,89ec <_strtod_r+0x4b0>
    86e8:	3027883a 	mov	r19,r6
    86ec:	0025883a 	mov	r18,zero
    86f0:	0015883a 	mov	r10,zero
    86f4:	000f883a 	mov	r7,zero
    86f8:	00801944 	movi	r2,101
    86fc:	20802426 	beq	r4,r2,8790 <_strtod_r+0x254>
    8700:	00801144 	movi	r2,69
    8704:	20802226 	beq	r4,r2,8790 <_strtod_r+0x254>
    8708:	9816c03a 	cmpne	r11,r19,zero
    870c:	000b883a 	mov	r5,zero
    8710:	5800631e 	bne	r11,zero,88a0 <_strtod_r+0x364>
    8714:	3800c126 	beq	r7,zero,8a1c <_strtod_r+0x4e0>
    8718:	d8c01517 	ldw	r3,84(sp)
    871c:	18000226 	beq	r3,zero,8728 <_strtod_r+0x1ec>
    8720:	d8800417 	ldw	r2,16(sp)
    8724:	18800015 	stw	r2,0(r3)
    8728:	d9001117 	ldw	r4,68(sp)
    872c:	2005003a 	cmpeq	r2,r4,zero
    8730:	10001f1e 	bne	r2,zero,87b0 <_strtod_r+0x274>
    8734:	e0800017 	ldw	r2,0(fp)
    8738:	e0c00117 	ldw	r3,4(fp)
    873c:	1009883a 	mov	r4,r2
    8740:	1960003c 	xorhi	r5,r3,32768
    8744:	2005883a 	mov	r2,r4
    8748:	2807883a 	mov	r3,r5
    874c:	dfc02117 	ldw	ra,132(sp)
    8750:	df002017 	ldw	fp,128(sp)
    8754:	ddc01f17 	ldw	r23,124(sp)
    8758:	dd801e17 	ldw	r22,120(sp)
    875c:	dd401d17 	ldw	r21,116(sp)
    8760:	dd001c17 	ldw	r20,112(sp)
    8764:	dcc01b17 	ldw	r19,108(sp)
    8768:	dc801a17 	ldw	r18,104(sp)
    876c:	dc401917 	ldw	r17,100(sp)
    8770:	dc001817 	ldw	r16,96(sp)
    8774:	dec02204 	addi	sp,sp,136
    8778:	f800283a 	ret
    877c:	51bfd116 	blt	r10,r6,86c4 <_strtod_r+0x188>
    8780:	808002a4 	muli	r2,r16,10
    8784:	1105883a 	add	r2,r2,r4
    8788:	143ff404 	addi	r16,r2,-48
    878c:	003fcd06 	br	86c4 <_strtod_r+0x188>
    8790:	9816c03a 	cmpne	r11,r19,zero
    8794:	5800091e 	bne	r11,zero,87bc <_strtod_r+0x280>
    8798:	3800081e 	bne	r7,zero,87bc <_strtod_r+0x280>
    879c:	7805003a 	cmpeq	r2,r15,zero
    87a0:	10000626 	beq	r2,zero,87bc <_strtod_r+0x280>
    87a4:	d8001115 	stw	zero,68(sp)
    87a8:	dc400415 	stw	r17,16(sp)
    87ac:	003fda06 	br	8718 <_strtod_r+0x1dc>
    87b0:	e1000017 	ldw	r4,0(fp)
    87b4:	e1400117 	ldw	r5,4(fp)
    87b8:	003fe206 	br	8744 <_strtod_r+0x208>
    87bc:	dc400417 	ldw	r17,16(sp)
    87c0:	00800ac4 	movi	r2,43
    87c4:	8a000044 	addi	r8,r17,1
    87c8:	da000415 	stw	r8,16(sp)
    87cc:	88c00047 	ldb	r3,1(r17)
    87d0:	4009883a 	mov	r4,r8
    87d4:	1880bf26 	beq	r3,r2,8ad4 <_strtod_r+0x598>
    87d8:	00800b44 	movi	r2,45
    87dc:	18834526 	beq	r3,r2,94f4 <_strtod_r+0xfb8>
    87e0:	1809883a 	mov	r4,r3
    87e4:	20fff404 	addi	r3,r4,-48
    87e8:	00800244 	movi	r2,9
    87ec:	001d883a 	mov	r14,zero
    87f0:	10c0bf36 	bltu	r2,r3,8af0 <_strtod_r+0x5b4>
    87f4:	00800c04 	movi	r2,48
    87f8:	2080061e 	bne	r4,r2,8814 <_strtod_r+0x2d8>
    87fc:	da000417 	ldw	r8,16(sp)
    8800:	2005883a 	mov	r2,r4
    8804:	42000044 	addi	r8,r8,1
    8808:	da000415 	stw	r8,16(sp)
    880c:	41000007 	ldb	r4,0(r8)
    8810:	20bffc26 	beq	r4,r2,8804 <_strtod_r+0x2c8>
    8814:	20fff3c4 	addi	r3,r4,-49
    8818:	00800204 	movi	r2,8
    881c:	10ffbb36 	bltu	r2,r3,870c <_strtod_r+0x1d0>
    8820:	da000417 	ldw	r8,16(sp)
    8824:	227ff404 	addi	r9,r4,-48
    8828:	03000bc4 	movi	r12,47
    882c:	4007883a 	mov	r3,r8
    8830:	42000044 	addi	r8,r8,1
    8834:	da000415 	stw	r8,16(sp)
    8838:	41000007 	ldb	r4,0(r8)
    883c:	61000d0e 	bge	r12,r4,8874 <_strtod_r+0x338>
    8840:	00800e44 	movi	r2,57
    8844:	11000b16 	blt	r2,r4,8874 <_strtod_r+0x338>
    8848:	601b883a 	mov	r13,r12
    884c:	1019883a 	mov	r12,r2
    8850:	00000106 	br	8858 <_strtod_r+0x31c>
    8854:	61000716 	blt	r12,r4,8874 <_strtod_r+0x338>
    8858:	488002a4 	muli	r2,r9,10
    885c:	42000044 	addi	r8,r8,1
    8860:	da000415 	stw	r8,16(sp)
    8864:	2085883a 	add	r2,r4,r2
    8868:	41000007 	ldb	r4,0(r8)
    886c:	127ff404 	addi	r9,r2,-48
    8870:	693ff816 	blt	r13,r4,8854 <_strtod_r+0x318>
    8874:	40c7c83a 	sub	r3,r8,r3
    8878:	00800204 	movi	r2,8
    887c:	10c2e416 	blt	r2,r3,9410 <_strtod_r+0xed4>
    8880:	009387c4 	movi	r2,19999
    8884:	480b883a 	mov	r5,r9
    8888:	1240010e 	bge	r2,r9,8890 <_strtod_r+0x354>
    888c:	100b883a 	mov	r5,r2
    8890:	7005003a 	cmpeq	r2,r14,zero
    8894:	103f9e1e 	bne	r2,zero,8710 <_strtod_r+0x1d4>
    8898:	014bc83a 	sub	r5,zero,r5
    889c:	583f9d26 	beq	r11,zero,8714 <_strtod_r+0x1d8>
    88a0:	2a8bc83a 	sub	r5,r5,r10
    88a4:	d9400f15 	stw	r5,60(sp)
    88a8:	30007a1e 	bne	r6,zero,8a94 <_strtod_r+0x558>
    88ac:	dcc01215 	stw	r19,72(sp)
    88b0:	00800404 	movi	r2,16
    88b4:	9825883a 	mov	r18,r19
    88b8:	14c0010e 	bge	r2,r19,88c0 <_strtod_r+0x384>
    88bc:	1025883a 	mov	r18,r2
    88c0:	a009883a 	mov	r4,r20
    88c4:	0012a000 	call	12a00 <__floatunsidf>
    88c8:	100f883a 	mov	r7,r2
    88cc:	e0800015 	stw	r2,0(fp)
    88d0:	00800244 	movi	r2,9
    88d4:	e0c00115 	stw	r3,4(fp)
    88d8:	1480160e 	bge	r2,r18,8934 <_strtod_r+0x3f8>
    88dc:	900c90fa 	slli	r6,r18,3
    88e0:	01020034 	movhi	r4,2048
    88e4:	21017404 	addi	r4,r4,1488
    88e8:	180b883a 	mov	r5,r3
    88ec:	310d883a 	add	r6,r6,r4
    88f0:	30ffef17 	ldw	r3,-68(r6)
    88f4:	30bfee17 	ldw	r2,-72(r6)
    88f8:	3809883a 	mov	r4,r7
    88fc:	180f883a 	mov	r7,r3
    8900:	100d883a 	mov	r6,r2
    8904:	00070500 	call	7050 <__muldf3>
    8908:	8009883a 	mov	r4,r16
    890c:	1823883a 	mov	r17,r3
    8910:	1021883a 	mov	r16,r2
    8914:	0012a000 	call	12a00 <__floatunsidf>
    8918:	880b883a 	mov	r5,r17
    891c:	180f883a 	mov	r7,r3
    8920:	8009883a 	mov	r4,r16
    8924:	100d883a 	mov	r6,r2
    8928:	0006fdc0 	call	6fdc <__adddf3>
    892c:	e0c00115 	stw	r3,4(fp)
    8930:	e0800015 	stw	r2,0(fp)
    8934:	010003c4 	movi	r4,15
    8938:	24c09816 	blt	r4,r19,8b9c <_strtod_r+0x660>
    893c:	d9800f17 	ldw	r6,60(sp)
    8940:	303f7526 	beq	r6,zero,8718 <_strtod_r+0x1dc>
    8944:	0183be0e 	bge	zero,r6,9840 <_strtod_r+0x1304>
    8948:	00800584 	movi	r2,22
    894c:	1182b20e 	bge	r2,r6,9418 <_strtod_r+0xedc>
    8950:	d8c00f17 	ldw	r3,60(sp)
    8954:	24e3c83a 	sub	r17,r4,r19
    8958:	88800584 	addi	r2,r17,22
    895c:	10c08f16 	blt	r2,r3,8b9c <_strtod_r+0x660>
    8960:	880890fa 	slli	r4,r17,3
    8964:	04020034 	movhi	r16,2048
    8968:	84017404 	addi	r16,r16,1488
    896c:	e0800017 	ldw	r2,0(fp)
    8970:	2409883a 	add	r4,r4,r16
    8974:	22000017 	ldw	r8,0(r4)
    8978:	22400117 	ldw	r9,4(r4)
    897c:	e0c00117 	ldw	r3,4(fp)
    8980:	1009883a 	mov	r4,r2
    8984:	480f883a 	mov	r7,r9
    8988:	180b883a 	mov	r5,r3
    898c:	400d883a 	mov	r6,r8
    8990:	00070500 	call	7050 <__muldf3>
    8994:	d9000f17 	ldw	r4,60(sp)
    8998:	180b883a 	mov	r5,r3
    899c:	2455c83a 	sub	r10,r4,r17
    89a0:	501490fa 	slli	r10,r10,3
    89a4:	1009883a 	mov	r4,r2
    89a8:	5415883a 	add	r10,r10,r16
    89ac:	52000017 	ldw	r8,0(r10)
    89b0:	52400117 	ldw	r9,4(r10)
    89b4:	0002a206 	br	9440 <_strtod_r+0xf04>
    89b8:	40c00047 	ldb	r3,1(r8)
    89bc:	00801604 	movi	r2,88
    89c0:	18804e26 	beq	r3,r2,8afc <_strtod_r+0x5c0>
    89c4:	00801e04 	movi	r2,120
    89c8:	18804c26 	beq	r3,r2,8afc <_strtod_r+0x5c0>
    89cc:	42000044 	addi	r8,r8,1
    89d0:	da000415 	stw	r8,16(sp)
    89d4:	40c00007 	ldb	r3,0(r8)
    89d8:	00800c04 	movi	r2,48
    89dc:	18bffb26 	beq	r3,r2,89cc <_strtod_r+0x490>
    89e0:	183f4d26 	beq	r3,zero,8718 <_strtod_r+0x1dc>
    89e4:	03c00044 	movi	r15,1
    89e8:	003f2406 	br	867c <_strtod_r+0x140>
    89ec:	42000044 	addi	r8,r8,1
    89f0:	da000415 	stw	r8,16(sp)
    89f4:	19000047 	ldb	r4,1(r3)
    89f8:	3000b726 	beq	r6,zero,8cd8 <_strtod_r+0x79c>
    89fc:	3027883a 	mov	r19,r6
    8a00:	0015883a 	mov	r10,zero
    8a04:	000f883a 	mov	r7,zero
    8a08:	227ff404 	addi	r9,r4,-48
    8a0c:	00800244 	movi	r2,9
    8a10:	1242592e 	bgeu	r2,r9,9378 <_strtod_r+0xe3c>
    8a14:	04800044 	movi	r18,1
    8a18:	003f3706 	br	86f8 <_strtod_r+0x1bc>
    8a1c:	7804c03a 	cmpne	r2,r15,zero
    8a20:	103f3d1e 	bne	r2,zero,8718 <_strtod_r+0x1dc>
    8a24:	9004c03a 	cmpne	r2,r18,zero
    8a28:	103f5e1e 	bne	r2,zero,87a4 <_strtod_r+0x268>
    8a2c:	00801384 	movi	r2,78
    8a30:	2083a226 	beq	r4,r2,98bc <_strtod_r+0x1380>
    8a34:	11039d16 	blt	r2,r4,98ac <_strtod_r+0x1370>
    8a38:	00801244 	movi	r2,73
    8a3c:	20bf591e 	bne	r4,r2,87a4 <_strtod_r+0x268>
    8a40:	dc000404 	addi	r16,sp,16
    8a44:	8009883a 	mov	r4,r16
    8a48:	01420034 	movhi	r5,2048
    8a4c:	29412a04 	addi	r5,r5,1192
    8a50:	00084f40 	call	84f4 <match>
    8a54:	103f5326 	beq	r2,zero,87a4 <_strtod_r+0x268>
    8a58:	d8800417 	ldw	r2,16(sp)
    8a5c:	8009883a 	mov	r4,r16
    8a60:	01420034 	movhi	r5,2048
    8a64:	29412b04 	addi	r5,r5,1196
    8a68:	123fffc4 	addi	r8,r2,-1
    8a6c:	da000415 	stw	r8,16(sp)
    8a70:	00084f40 	call	84f4 <match>
    8a74:	1000031e 	bne	r2,zero,8a84 <_strtod_r+0x548>
    8a78:	d8800417 	ldw	r2,16(sp)
    8a7c:	12000044 	addi	r8,r2,1
    8a80:	da000415 	stw	r8,16(sp)
    8a84:	019ffc34 	movhi	r6,32752
    8a88:	e1800115 	stw	r6,4(fp)
    8a8c:	e0000015 	stw	zero,0(fp)
    8a90:	003f2106 	br	8718 <_strtod_r+0x1dc>
    8a94:	d9801215 	stw	r6,72(sp)
    8a98:	003f8506 	br	88b0 <_strtod_r+0x374>
    8a9c:	d8001115 	stw	zero,68(sp)
    8aa0:	42000044 	addi	r8,r8,1
    8aa4:	da000415 	stw	r8,16(sp)
    8aa8:	40800007 	ldb	r2,0(r8)
    8aac:	103eef1e 	bne	r2,zero,866c <_strtod_r+0x130>
    8ab0:	d8001115 	stw	zero,68(sp)
    8ab4:	dc400415 	stw	r17,16(sp)
    8ab8:	003f1706 	br	8718 <_strtod_r+0x1dc>
    8abc:	42000044 	addi	r8,r8,1
    8ac0:	da000415 	stw	r8,16(sp)
    8ac4:	003eaf06 	br	8584 <_strtod_r+0x48>
    8ac8:	00800044 	movi	r2,1
    8acc:	d8801115 	stw	r2,68(sp)
    8ad0:	003ff306 	br	8aa0 <_strtod_r+0x564>
    8ad4:	001d883a 	mov	r14,zero
    8ad8:	42000044 	addi	r8,r8,1
    8adc:	da000415 	stw	r8,16(sp)
    8ae0:	21000047 	ldb	r4,1(r4)
    8ae4:	00800244 	movi	r2,9
    8ae8:	20fff404 	addi	r3,r4,-48
    8aec:	10ff412e 	bgeu	r2,r3,87f4 <_strtod_r+0x2b8>
    8af0:	000b883a 	mov	r5,zero
    8af4:	dc400415 	stw	r17,16(sp)
    8af8:	003f0506 	br	8710 <_strtod_r+0x1d4>
    8afc:	d8c01117 	ldw	r3,68(sp)
    8b00:	04820034 	movhi	r18,2048
    8b04:	9482a304 	addi	r18,r18,2700
    8b08:	d8800504 	addi	r2,sp,20
    8b0c:	a809883a 	mov	r4,r21
    8b10:	d9400404 	addi	r5,sp,16
    8b14:	900d883a 	mov	r6,r18
    8b18:	d9c00604 	addi	r7,sp,24
    8b1c:	d8800015 	stw	r2,0(sp)
    8b20:	d8c00115 	stw	r3,4(sp)
    8b24:	000e4180 	call	e418 <__gethex>
    8b28:	140001cc 	andi	r16,r2,7
    8b2c:	1027883a 	mov	r19,r2
    8b30:	803ef926 	beq	r16,zero,8718 <_strtod_r+0x1dc>
    8b34:	05000184 	movi	r20,6
    8b38:	853f1a26 	beq	r16,r20,87a4 <_strtod_r+0x268>
    8b3c:	d9800517 	ldw	r6,20(sp)
    8b40:	30000626 	beq	r6,zero,8b5c <_strtod_r+0x620>
    8b44:	91400017 	ldw	r5,0(r18)
    8b48:	d9000d04 	addi	r4,sp,52
    8b4c:	000fe600 	call	fe60 <__copybits>
    8b50:	d9400517 	ldw	r5,20(sp)
    8b54:	a809883a 	mov	r4,r21
    8b58:	000f9c00 	call	f9c0 <_Bfree>
    8b5c:	d9400617 	ldw	r5,24(sp)
    8b60:	a4024136 	bltu	r20,r16,9468 <_strtod_r+0xf2c>
    8b64:	8405883a 	add	r2,r16,r16
    8b68:	1085883a 	add	r2,r2,r2
    8b6c:	00c00074 	movhi	r3,1
    8b70:	18e2e004 	addi	r3,r3,-29824
    8b74:	10c5883a 	add	r2,r2,r3
    8b78:	11000017 	ldw	r4,0(r2)
    8b7c:	2000683a 	jmp	r4
    8b80:	000094a8 	cmpgeui	zero,zero,594
    8b84:	000094b4 	movhi	zero,594
    8b88:	00009458 	cmpnei	zero,zero,593
    8b8c:	00009480 	call	948 <xEventGroupSync+0x58>
    8b90:	00009490 	cmplti	zero,zero,594
    8b94:	000094b4 	movhi	zero,594
    8b98:	000094a8 	cmpgeui	zero,zero,594
    8b9c:	d8c00f17 	ldw	r3,60(sp)
    8ba0:	9c85c83a 	sub	r2,r19,r18
    8ba4:	18a1883a 	add	r16,r3,r2
    8ba8:	0402d00e 	bge	zero,r16,96ec <_strtod_r+0x11b0>
    8bac:	814003cc 	andi	r5,r16,15
    8bb0:	28000f26 	beq	r5,zero,8bf0 <_strtod_r+0x6b4>
    8bb4:	280a90fa 	slli	r5,r5,3
    8bb8:	01020034 	movhi	r4,2048
    8bbc:	21017404 	addi	r4,r4,1488
    8bc0:	e0800017 	ldw	r2,0(fp)
    8bc4:	290b883a 	add	r5,r5,r4
    8bc8:	2a000017 	ldw	r8,0(r5)
    8bcc:	e0c00117 	ldw	r3,4(fp)
    8bd0:	2a400117 	ldw	r9,4(r5)
    8bd4:	1009883a 	mov	r4,r2
    8bd8:	180b883a 	mov	r5,r3
    8bdc:	480f883a 	mov	r7,r9
    8be0:	400d883a 	mov	r6,r8
    8be4:	00070500 	call	7050 <__muldf3>
    8be8:	e0c00115 	stw	r3,4(fp)
    8bec:	e0800015 	stw	r2,0(fp)
    8bf0:	00bffc04 	movi	r2,-16
    8bf4:	808c703a 	and	r6,r16,r2
    8bf8:	30005b26 	beq	r6,zero,8d68 <_strtod_r+0x82c>
    8bfc:	00804d04 	movi	r2,308
    8c00:	1181fd16 	blt	r2,r6,93f8 <_strtod_r+0xebc>
    8c04:	3021d13a 	srai	r16,r6,4
    8c08:	00800044 	movi	r2,1
    8c0c:	1403610e 	bge	r2,r16,9994 <_strtod_r+0x1458>
    8c10:	102f883a 	mov	r23,r2
    8c14:	0025883a 	mov	r18,zero
    8c18:	04420034 	movhi	r17,2048
    8c1c:	8c41a604 	addi	r17,r17,1688
    8c20:	8080004c 	andi	r2,r16,1
    8c24:	1005003a 	cmpeq	r2,r2,zero
    8c28:	1000091e 	bne	r2,zero,8c50 <_strtod_r+0x714>
    8c2c:	e0800017 	ldw	r2,0(fp)
    8c30:	e0c00117 	ldw	r3,4(fp)
    8c34:	89800017 	ldw	r6,0(r17)
    8c38:	89c00117 	ldw	r7,4(r17)
    8c3c:	180b883a 	mov	r5,r3
    8c40:	1009883a 	mov	r4,r2
    8c44:	00070500 	call	7050 <__muldf3>
    8c48:	e0c00115 	stw	r3,4(fp)
    8c4c:	e0800015 	stw	r2,0(fp)
    8c50:	8021d07a 	srai	r16,r16,1
    8c54:	94800044 	addi	r18,r18,1
    8c58:	8c400204 	addi	r17,r17,8
    8c5c:	bc3ff016 	blt	r23,r16,8c20 <_strtod_r+0x6e4>
    8c60:	900e90fa 	slli	r7,r18,3
    8c64:	01820034 	movhi	r6,2048
    8c68:	3181a604 	addi	r6,r6,1688
    8c6c:	e2000117 	ldw	r8,4(fp)
    8c70:	398f883a 	add	r7,r7,r6
    8c74:	38800017 	ldw	r2,0(r7)
    8c78:	38c00117 	ldw	r3,4(r7)
    8c7c:	e1000017 	ldw	r4,0(fp)
    8c80:	01bf2c34 	movhi	r6,64688
    8c84:	418d883a 	add	r6,r8,r6
    8c88:	300b883a 	mov	r5,r6
    8c8c:	180f883a 	mov	r7,r3
    8c90:	100d883a 	mov	r6,r2
    8c94:	00070500 	call	7050 <__muldf3>
    8c98:	1009883a 	mov	r4,r2
    8c9c:	180b883a 	mov	r5,r3
    8ca0:	199ffc2c 	andhi	r6,r3,32752
    8ca4:	009f2834 	movhi	r2,31904
    8ca8:	e1000015 	stw	r4,0(fp)
    8cac:	e1400115 	stw	r5,4(fp)
    8cb0:	1181d136 	bltu	r2,r6,93f8 <_strtod_r+0xebc>
    8cb4:	009f2434 	movhi	r2,31888
    8cb8:	1183202e 	bgeu	r2,r6,993c <_strtod_r+0x1400>
    8cbc:	d8001415 	stw	zero,80(sp)
    8cc0:	019ffc34 	movhi	r6,32752
    8cc4:	31bfffc4 	addi	r6,r6,-1
    8cc8:	01ffffc4 	movi	r7,-1
    8ccc:	e1800115 	stw	r6,4(fp)
    8cd0:	e1c00015 	stw	r7,0(fp)
    8cd4:	00002506 	br	8d6c <_strtod_r+0x830>
    8cd8:	00800c04 	movi	r2,48
    8cdc:	2083151e 	bne	r4,r2,9934 <_strtod_r+0x13f8>
    8ce0:	2005883a 	mov	r2,r4
    8ce4:	000f883a 	mov	r7,zero
    8ce8:	42000044 	addi	r8,r8,1
    8cec:	da000415 	stw	r8,16(sp)
    8cf0:	41000007 	ldb	r4,0(r8)
    8cf4:	39c00044 	addi	r7,r7,1
    8cf8:	20bffb26 	beq	r4,r2,8ce8 <_strtod_r+0x7ac>
    8cfc:	20fff3c4 	addi	r3,r4,-49
    8d00:	00800204 	movi	r2,8
    8d04:	10c1b836 	bltu	r2,r3,93e8 <_strtod_r+0xeac>
    8d08:	dd800417 	ldw	r22,16(sp)
    8d0c:	3815883a 	mov	r10,r7
    8d10:	227ff404 	addi	r9,r4,-48
    8d14:	b011883a 	mov	r8,r22
    8d18:	0027883a 	mov	r19,zero
    8d1c:	01c00044 	movi	r7,1
    8d20:	4801fe26 	beq	r9,zero,951c <_strtod_r+0xfe0>
    8d24:	00800044 	movi	r2,1
    8d28:	51d5883a 	add	r10,r10,r7
    8d2c:	11c31f0e 	bge	r2,r7,99ac <_strtod_r+0x1470>
    8d30:	1009883a 	mov	r4,r2
    8d34:	9807883a 	mov	r3,r19
    8d38:	02c00204 	movi	r11,8
    8d3c:	03000404 	movi	r12,16
    8d40:	00000306 	br	8d50 <_strtod_r+0x814>
    8d44:	a50002a4 	muli	r20,r20,10
    8d48:	21000044 	addi	r4,r4,1
    8d4c:	21c1eb26 	beq	r4,r7,94fc <_strtod_r+0xfc0>
    8d50:	18c00044 	addi	r3,r3,1
    8d54:	18bfffc4 	addi	r2,r3,-1
    8d58:	58bffa0e 	bge	r11,r2,8d44 <_strtod_r+0x808>
    8d5c:	60fffa16 	blt	r12,r3,8d48 <_strtod_r+0x80c>
    8d60:	840002a4 	muli	r16,r16,10
    8d64:	003ff806 	br	8d48 <_strtod_r+0x80c>
    8d68:	d8001415 	stw	zero,80(sp)
    8d6c:	d9801217 	ldw	r6,72(sp)
    8d70:	a809883a 	mov	r4,r21
    8d74:	b00b883a 	mov	r5,r22
    8d78:	980f883a 	mov	r7,r19
    8d7c:	dd000015 	stw	r20,0(sp)
    8d80:	00108940 	call	10894 <__s2b>
    8d84:	d9800f17 	ldw	r6,60(sp)
    8d88:	11000304 	addi	r4,r2,12
    8d8c:	d8801015 	stw	r2,64(sp)
    8d90:	300c803a 	cmplt	r6,r6,zero
    8d94:	d9001715 	stw	r4,92(sp)
    8d98:	d9801615 	stw	r6,88(sp)
    8d9c:	d8801017 	ldw	r2,64(sp)
    8da0:	a809883a 	mov	r4,r21
    8da4:	11400117 	ldw	r5,4(r2)
    8da8:	000ff400 	call	ff40 <_Balloc>
    8dac:	d8c01017 	ldw	r3,64(sp)
    8db0:	d9401717 	ldw	r5,92(sp)
    8db4:	11000304 	addi	r4,r2,12
    8db8:	19800417 	ldw	r6,16(r3)
    8dbc:	102f883a 	mov	r23,r2
    8dc0:	318d883a 	add	r6,r6,r6
    8dc4:	318d883a 	add	r6,r6,r6
    8dc8:	31800204 	addi	r6,r6,8
    8dcc:	00080740 	call	8074 <memcpy>
    8dd0:	e2000017 	ldw	r8,0(fp)
    8dd4:	e2400117 	ldw	r9,4(fp)
    8dd8:	d9800304 	addi	r6,sp,12
    8ddc:	400b883a 	mov	r5,r8
    8de0:	a809883a 	mov	r4,r21
    8de4:	d9c00204 	addi	r7,sp,8
    8de8:	d9800015 	stw	r6,0(sp)
    8dec:	480d883a 	mov	r6,r9
    8df0:	000fffc0 	call	fffc <__d2b>
    8df4:	a809883a 	mov	r4,r21
    8df8:	01400044 	movi	r5,1
    8dfc:	d8800515 	stw	r2,20(sp)
    8e00:	00106380 	call	10638 <__i2b>
    8e04:	102d883a 	mov	r22,r2
    8e08:	d8801617 	ldw	r2,88(sp)
    8e0c:	1001051e 	bne	r2,zero,9224 <_strtod_r+0xce8>
    8e10:	dd000f17 	ldw	r20,60(sp)
    8e14:	000f883a 	mov	r7,zero
    8e18:	0013883a 	mov	r9,zero
    8e1c:	a011883a 	mov	r8,r20
    8e20:	d8800217 	ldw	r2,8(sp)
    8e24:	1000fd16 	blt	r2,zero,921c <_strtod_r+0xce0>
    8e28:	388f883a 	add	r7,r7,r2
    8e2c:	d9801417 	ldw	r6,80(sp)
    8e30:	d9400317 	ldw	r5,12(sp)
    8e34:	00ff0084 	movi	r3,-1022
    8e38:	1189c83a 	sub	r4,r2,r6
    8e3c:	2145883a 	add	r2,r4,r5
    8e40:	10bfffc4 	addi	r2,r2,-1
    8e44:	10c09f0e 	bge	r2,r3,90c4 <_strtod_r+0xb88>
    8e48:	21810cc4 	addi	r6,r4,1075
    8e4c:	d8c01417 	ldw	r3,80(sp)
    8e50:	4185883a 	add	r2,r8,r6
    8e54:	39a1883a 	add	r16,r7,r6
    8e58:	18a5883a 	add	r18,r3,r2
    8e5c:	3807883a 	mov	r3,r7
    8e60:	81c0010e 	bge	r16,r7,8e68 <_strtod_r+0x92c>
    8e64:	8007883a 	mov	r3,r16
    8e68:	9005883a 	mov	r2,r18
    8e6c:	1c80010e 	bge	r3,r18,8e74 <_strtod_r+0x938>
    8e70:	1805883a 	mov	r2,r3
    8e74:	0080e70e 	bge	zero,r2,9214 <_strtod_r+0xcd8>
    8e78:	38a7c83a 	sub	r19,r7,r2
    8e7c:	80a1c83a 	sub	r16,r16,r2
    8e80:	90a5c83a 	sub	r18,r18,r2
    8e84:	02400e0e 	bge	zero,r9,8ec0 <_strtod_r+0x984>
    8e88:	480d883a 	mov	r6,r9
    8e8c:	b00b883a 	mov	r5,r22
    8e90:	a809883a 	mov	r4,r21
    8e94:	00107740 	call	10774 <__pow5mult>
    8e98:	d9800517 	ldw	r6,20(sp)
    8e9c:	a809883a 	mov	r4,r21
    8ea0:	100b883a 	mov	r5,r2
    8ea4:	102d883a 	mov	r22,r2
    8ea8:	00104500 	call	10450 <__multiply>
    8eac:	d9400517 	ldw	r5,20(sp)
    8eb0:	1023883a 	mov	r17,r2
    8eb4:	a809883a 	mov	r4,r21
    8eb8:	000f9c00 	call	f9c0 <_Bfree>
    8ebc:	dc400515 	stw	r17,20(sp)
    8ec0:	0400050e 	bge	zero,r16,8ed8 <_strtod_r+0x99c>
    8ec4:	d9400517 	ldw	r5,20(sp)
    8ec8:	800d883a 	mov	r6,r16
    8ecc:	a809883a 	mov	r4,r21
    8ed0:	00103040 	call	10304 <__lshift>
    8ed4:	d8800515 	stw	r2,20(sp)
    8ed8:	a000741e 	bne	r20,zero,90ac <_strtod_r+0xb70>
    8edc:	0480050e 	bge	zero,r18,8ef4 <_strtod_r+0x9b8>
    8ee0:	b80b883a 	mov	r5,r23
    8ee4:	900d883a 	mov	r6,r18
    8ee8:	a809883a 	mov	r4,r21
    8eec:	00103040 	call	10304 <__lshift>
    8ef0:	102f883a 	mov	r23,r2
    8ef4:	04c0050e 	bge	zero,r19,8f0c <_strtod_r+0x9d0>
    8ef8:	b00b883a 	mov	r5,r22
    8efc:	980d883a 	mov	r6,r19
    8f00:	a809883a 	mov	r4,r21
    8f04:	00103040 	call	10304 <__lshift>
    8f08:	102d883a 	mov	r22,r2
    8f0c:	d9400517 	ldw	r5,20(sp)
    8f10:	a809883a 	mov	r4,r21
    8f14:	b80d883a 	mov	r6,r23
    8f18:	00101780 	call	10178 <__mdiff>
    8f1c:	11000317 	ldw	r4,12(r2)
    8f20:	b00b883a 	mov	r5,r22
    8f24:	10000315 	stw	zero,12(r2)
    8f28:	d9001315 	stw	r4,76(sp)
    8f2c:	1009883a 	mov	r4,r2
    8f30:	1029883a 	mov	r20,r2
    8f34:	000fb1c0 	call	fb1c <__mcmp>
    8f38:	10017c16 	blt	r2,zero,952c <_strtod_r+0xff0>
    8f3c:	1001af26 	beq	r2,zero,95fc <_strtod_r+0x10c0>
    8f40:	a009883a 	mov	r4,r20
    8f44:	b00b883a 	mov	r5,r22
    8f48:	000fd1c0 	call	fd1c <__ratio>
    8f4c:	0011883a 	mov	r8,zero
    8f50:	02500034 	movhi	r9,16384
    8f54:	480f883a 	mov	r7,r9
    8f58:	1009883a 	mov	r4,r2
    8f5c:	180b883a 	mov	r5,r3
    8f60:	400d883a 	mov	r6,r8
    8f64:	1021883a 	mov	r16,r2
    8f68:	1823883a 	mov	r17,r3
    8f6c:	000777c0 	call	777c <__ledf2>
    8f70:	00805716 	blt	zero,r2,90d0 <_strtod_r+0xb94>
    8f74:	d9801317 	ldw	r6,76(sp)
    8f78:	3025003a 	cmpeq	r18,r6,zero
    8f7c:	90008b1e 	bne	r18,zero,91ac <_strtod_r+0xc70>
    8f80:	008ffc34 	movhi	r2,16368
    8f84:	0021883a 	mov	r16,zero
    8f88:	1023883a 	mov	r17,r2
    8f8c:	d8000715 	stw	zero,28(sp)
    8f90:	d8800815 	stw	r2,32(sp)
    8f94:	e1c00117 	ldw	r7,4(fp)
    8f98:	009ff834 	movhi	r2,32736
    8f9c:	3cdffc2c 	andhi	r19,r7,32752
    8fa0:	98805e26 	beq	r19,r2,911c <_strtod_r+0xbe0>
    8fa4:	d8801417 	ldw	r2,80(sp)
    8fa8:	10001b26 	beq	r2,zero,9018 <_strtod_r+0xadc>
    8fac:	0081a834 	movhi	r2,1696
    8fb0:	14c01936 	bltu	r2,r19,9018 <_strtod_r+0xadc>
    8fb4:	00bff034 	movhi	r2,65472
    8fb8:	00d07834 	movhi	r3,16864
    8fbc:	18ffffc4 	addi	r3,r3,-1
    8fc0:	180f883a 	mov	r7,r3
    8fc4:	8009883a 	mov	r4,r16
    8fc8:	880b883a 	mov	r5,r17
    8fcc:	100d883a 	mov	r6,r2
    8fd0:	000777c0 	call	777c <__ledf2>
    8fd4:	00800b16 	blt	zero,r2,9004 <_strtod_r+0xac8>
    8fd8:	880b883a 	mov	r5,r17
    8fdc:	8009883a 	mov	r4,r16
    8fe0:	0011a5c0 	call	11a5c <__fixunsdfsi>
    8fe4:	1000df1e 	bne	r2,zero,9364 <_strtod_r+0xe28>
    8fe8:	0021883a 	mov	r16,zero
    8fec:	044ffc34 	movhi	r17,16368
    8ff0:	9000d91e 	bne	r18,zero,9358 <_strtod_r+0xe1c>
    8ff4:	8005883a 	mov	r2,r16
    8ff8:	8807883a 	mov	r3,r17
    8ffc:	d8c00815 	stw	r3,32(sp)
    9000:	d8800715 	stw	r2,28(sp)
    9004:	d8800817 	ldw	r2,32(sp)
    9008:	00c1ac34 	movhi	r3,1712
    900c:	14c5c83a 	sub	r2,r2,r19
    9010:	10c5883a 	add	r2,r2,r3
    9014:	d8800815 	stw	r2,32(sp)
    9018:	e0800017 	ldw	r2,0(fp)
    901c:	e0c00117 	ldw	r3,4(fp)
    9020:	1009883a 	mov	r4,r2
    9024:	180b883a 	mov	r5,r3
    9028:	000fb7c0 	call	fb7c <__ulp>
    902c:	d9800717 	ldw	r6,28(sp)
    9030:	d9c00817 	ldw	r7,32(sp)
    9034:	180b883a 	mov	r5,r3
    9038:	1009883a 	mov	r4,r2
    903c:	00070500 	call	7050 <__muldf3>
    9040:	e2000017 	ldw	r8,0(fp)
    9044:	e2400117 	ldw	r9,4(fp)
    9048:	180b883a 	mov	r5,r3
    904c:	1009883a 	mov	r4,r2
    9050:	480f883a 	mov	r7,r9
    9054:	400d883a 	mov	r6,r8
    9058:	0006fdc0 	call	6fdc <__adddf3>
    905c:	e0c00115 	stw	r3,4(fp)
    9060:	e0800015 	stw	r2,0(fp)
    9064:	d8c01417 	ldw	r3,80(sp)
    9068:	e4800117 	ldw	r18,4(fp)
    906c:	1800021e 	bne	r3,zero,9078 <_strtod_r+0xb3c>
    9070:	909ffc2c 	andhi	r2,r18,32752
    9074:	98807b26 	beq	r19,r2,9264 <_strtod_r+0xd28>
    9078:	d9400517 	ldw	r5,20(sp)
    907c:	a809883a 	mov	r4,r21
    9080:	000f9c00 	call	f9c0 <_Bfree>
    9084:	a809883a 	mov	r4,r21
    9088:	b80b883a 	mov	r5,r23
    908c:	000f9c00 	call	f9c0 <_Bfree>
    9090:	a809883a 	mov	r4,r21
    9094:	b00b883a 	mov	r5,r22
    9098:	000f9c00 	call	f9c0 <_Bfree>
    909c:	a809883a 	mov	r4,r21
    90a0:	a00b883a 	mov	r5,r20
    90a4:	000f9c00 	call	f9c0 <_Bfree>
    90a8:	003f3c06 	br	8d9c <_strtod_r+0x860>
    90ac:	b80b883a 	mov	r5,r23
    90b0:	a00d883a 	mov	r6,r20
    90b4:	a809883a 	mov	r4,r21
    90b8:	00107740 	call	10774 <__pow5mult>
    90bc:	102f883a 	mov	r23,r2
    90c0:	003f8606 	br	8edc <_strtod_r+0x9a0>
    90c4:	00800d84 	movi	r2,54
    90c8:	114dc83a 	sub	r6,r2,r5
    90cc:	003f5f06 	br	8e4c <_strtod_r+0x910>
    90d0:	0005883a 	mov	r2,zero
    90d4:	00cff834 	movhi	r3,16352
    90d8:	880b883a 	mov	r5,r17
    90dc:	8009883a 	mov	r4,r16
    90e0:	100d883a 	mov	r6,r2
    90e4:	180f883a 	mov	r7,r3
    90e8:	00070500 	call	7050 <__muldf3>
    90ec:	d9801317 	ldw	r6,76(sp)
    90f0:	1021883a 	mov	r16,r2
    90f4:	1823883a 	mov	r17,r3
    90f8:	3025003a 	cmpeq	r18,r6,zero
    90fc:	90000126 	beq	r18,zero,9104 <_strtod_r+0xbc8>
    9100:	18e0003c 	xorhi	r3,r3,32768
    9104:	d8800715 	stw	r2,28(sp)
    9108:	d8c00815 	stw	r3,32(sp)
    910c:	e1c00117 	ldw	r7,4(fp)
    9110:	009ff834 	movhi	r2,32736
    9114:	3cdffc2c 	andhi	r19,r7,32752
    9118:	98bfa21e 	bne	r19,r2,8fa4 <_strtod_r+0xa68>
    911c:	e1000017 	ldw	r4,0(fp)
    9120:	01bf2c34 	movhi	r6,64688
    9124:	398d883a 	add	r6,r7,r6
    9128:	d9000b15 	stw	r4,44(sp)
    912c:	d9c00c15 	stw	r7,48(sp)
    9130:	300b883a 	mov	r5,r6
    9134:	e1800115 	stw	r6,4(fp)
    9138:	000fb7c0 	call	fb7c <__ulp>
    913c:	d9800717 	ldw	r6,28(sp)
    9140:	d9c00817 	ldw	r7,32(sp)
    9144:	180b883a 	mov	r5,r3
    9148:	1009883a 	mov	r4,r2
    914c:	00070500 	call	7050 <__muldf3>
    9150:	e2000017 	ldw	r8,0(fp)
    9154:	e2400117 	ldw	r9,4(fp)
    9158:	180b883a 	mov	r5,r3
    915c:	1009883a 	mov	r4,r2
    9160:	480f883a 	mov	r7,r9
    9164:	400d883a 	mov	r6,r8
    9168:	0006fdc0 	call	6fdc <__adddf3>
    916c:	1009883a 	mov	r4,r2
    9170:	180b883a 	mov	r5,r3
    9174:	009f2834 	movhi	r2,31904
    9178:	10bfffc4 	addi	r2,r2,-1
    917c:	18dffc2c 	andhi	r3,r3,32752
    9180:	e1000015 	stw	r4,0(fp)
    9184:	e1400115 	stw	r5,4(fp)
    9188:	10c06f2e 	bgeu	r2,r3,9348 <_strtod_r+0xe0c>
    918c:	d8800c17 	ldw	r2,48(sp)
    9190:	011ffc34 	movhi	r4,32752
    9194:	213fffc4 	addi	r4,r4,-1
    9198:	11007a26 	beq	r2,r4,9384 <_strtod_r+0xe48>
    919c:	01ffffc4 	movi	r7,-1
    91a0:	e1000115 	stw	r4,4(fp)
    91a4:	e1c00015 	stw	r7,0(fp)
    91a8:	003fb306 	br	9078 <_strtod_r+0xb3c>
    91ac:	e0c00017 	ldw	r3,0(fp)
    91b0:	1800221e 	bne	r3,zero,923c <_strtod_r+0xd00>
    91b4:	e0800117 	ldw	r2,4(fp)
    91b8:	00c00434 	movhi	r3,16
    91bc:	18ffffc4 	addi	r3,r3,-1
    91c0:	10c4703a 	and	r2,r2,r3
    91c4:	1000211e 	bne	r2,zero,924c <_strtod_r+0xd10>
    91c8:	0005883a 	mov	r2,zero
    91cc:	00cffc34 	movhi	r3,16368
    91d0:	180f883a 	mov	r7,r3
    91d4:	8009883a 	mov	r4,r16
    91d8:	880b883a 	mov	r5,r17
    91dc:	100d883a 	mov	r6,r2
    91e0:	00129040 	call	12904 <__ltdf2>
    91e4:	10013c16 	blt	r2,zero,96d8 <_strtod_r+0x119c>
    91e8:	0005883a 	mov	r2,zero
    91ec:	00cff834 	movhi	r3,16352
    91f0:	880b883a 	mov	r5,r17
    91f4:	8009883a 	mov	r4,r16
    91f8:	180f883a 	mov	r7,r3
    91fc:	100d883a 	mov	r6,r2
    9200:	00070500 	call	7050 <__muldf3>
    9204:	1823883a 	mov	r17,r3
    9208:	1021883a 	mov	r16,r2
    920c:	18e0003c 	xorhi	r3,r3,32768
    9210:	003fbc06 	br	9104 <_strtod_r+0xbc8>
    9214:	3827883a 	mov	r19,r7
    9218:	003f1a06 	br	8e84 <_strtod_r+0x948>
    921c:	4091c83a 	sub	r8,r8,r2
    9220:	003f0206 	br	8e2c <_strtod_r+0x8f0>
    9224:	d8c00f17 	ldw	r3,60(sp)
    9228:	0011883a 	mov	r8,zero
    922c:	0029883a 	mov	r20,zero
    9230:	00d3c83a 	sub	r9,zero,r3
    9234:	480f883a 	mov	r7,r9
    9238:	003ef906 	br	8e20 <_strtod_r+0x8e4>
    923c:	00800044 	movi	r2,1
    9240:	1880021e 	bne	r3,r2,924c <_strtod_r+0xd10>
    9244:	e0800117 	ldw	r2,4(fp)
    9248:	1000a526 	beq	r2,zero,94e0 <_strtod_r+0xfa4>
    924c:	00affc34 	movhi	r2,49136
    9250:	0021883a 	mov	r16,zero
    9254:	044ffc34 	movhi	r17,16368
    9258:	d8800815 	stw	r2,32(sp)
    925c:	d8000715 	stw	zero,28(sp)
    9260:	003f4c06 	br	8f94 <_strtod_r+0xa58>
    9264:	880b883a 	mov	r5,r17
    9268:	8009883a 	mov	r4,r16
    926c:	00078fc0 	call	78fc <__fixdfsi>
    9270:	1009883a 	mov	r4,r2
    9274:	00078040 	call	7804 <__floatsidf>
    9278:	880b883a 	mov	r5,r17
    927c:	8009883a 	mov	r4,r16
    9280:	100d883a 	mov	r6,r2
    9284:	180f883a 	mov	r7,r3
    9288:	0006f5c0 	call	6f5c <__subdf3>
    928c:	d9001317 	ldw	r4,76(sp)
    9290:	100b883a 	mov	r5,r2
    9294:	180d883a 	mov	r6,r3
    9298:	1021883a 	mov	r16,r2
    929c:	1823883a 	mov	r17,r3
    92a0:	2000061e 	bne	r4,zero,92bc <_strtod_r+0xd80>
    92a4:	e0800017 	ldw	r2,0(fp)
    92a8:	1000041e 	bne	r2,zero,92bc <_strtod_r+0xd80>
    92ac:	00c00434 	movhi	r3,16
    92b0:	18ffffc4 	addi	r3,r3,-1
    92b4:	90c4703a 	and	r2,r18,r3
    92b8:	10004026 	beq	r2,zero,93bc <_strtod_r+0xe80>
    92bc:	00a52834 	movhi	r2,38048
    92c0:	108d6544 	addi	r2,r2,13717
    92c4:	00cff834 	movhi	r3,16352
    92c8:	18ffffc4 	addi	r3,r3,-1
    92cc:	180f883a 	mov	r7,r3
    92d0:	8009883a 	mov	r4,r16
    92d4:	880b883a 	mov	r5,r17
    92d8:	100d883a 	mov	r6,r2
    92dc:	00129040 	call	12904 <__ltdf2>
    92e0:	10000916 	blt	r2,zero,9308 <_strtod_r+0xdcc>
    92e4:	008d6c34 	movhi	r2,13744
    92e8:	10b94d44 	addi	r2,r2,-6859
    92ec:	00cff834 	movhi	r3,16352
    92f0:	880b883a 	mov	r5,r17
    92f4:	180f883a 	mov	r7,r3
    92f8:	8009883a 	mov	r4,r16
    92fc:	100d883a 	mov	r6,r2
    9300:	000766c0 	call	766c <__gtdf2>
    9304:	00bf5c0e 	bge	zero,r2,9078 <_strtod_r+0xb3c>
    9308:	d9400517 	ldw	r5,20(sp)
    930c:	a809883a 	mov	r4,r21
    9310:	000f9c00 	call	f9c0 <_Bfree>
    9314:	a809883a 	mov	r4,r21
    9318:	b80b883a 	mov	r5,r23
    931c:	000f9c00 	call	f9c0 <_Bfree>
    9320:	a809883a 	mov	r4,r21
    9324:	b00b883a 	mov	r5,r22
    9328:	000f9c00 	call	f9c0 <_Bfree>
    932c:	d9401017 	ldw	r5,64(sp)
    9330:	a809883a 	mov	r4,r21
    9334:	000f9c00 	call	f9c0 <_Bfree>
    9338:	a809883a 	mov	r4,r21
    933c:	a00b883a 	mov	r5,r20
    9340:	000f9c00 	call	f9c0 <_Bfree>
    9344:	003cf406 	br	8718 <_strtod_r+0x1dc>
    9348:	0080d434 	movhi	r2,848
    934c:	288d883a 	add	r6,r5,r2
    9350:	e1800115 	stw	r6,4(fp)
    9354:	003f4306 	br	9064 <_strtod_r+0xb28>
    9358:	8005883a 	mov	r2,r16
    935c:	88e0003c 	xorhi	r3,r17,32768
    9360:	003f2606 	br	8ffc <_strtod_r+0xac0>
    9364:	1009883a 	mov	r4,r2
    9368:	0012a000 	call	12a00 <__floatunsidf>
    936c:	1021883a 	mov	r16,r2
    9370:	1823883a 	mov	r17,r3
    9374:	003f1e06 	br	8ff0 <_strtod_r+0xab4>
    9378:	da000417 	ldw	r8,16(sp)
    937c:	39c00044 	addi	r7,r7,1
    9380:	003e6706 	br	8d20 <_strtod_r+0x7e4>
    9384:	d8c00b17 	ldw	r3,44(sp)
    9388:	00bfffc4 	movi	r2,-1
    938c:	18bf831e 	bne	r3,r2,919c <_strtod_r+0xc60>
    9390:	00c00884 	movi	r3,34
    9394:	a8c00015 	stw	r3,0(r21)
    9398:	009ffc34 	movhi	r2,32752
    939c:	e0800115 	stw	r2,4(fp)
    93a0:	e0000015 	stw	zero,0(fp)
    93a4:	003fd806 	br	9308 <_strtod_r+0xdcc>
    93a8:	4007883a 	mov	r3,r8
    93ac:	000d883a 	mov	r6,zero
    93b0:	0029883a 	mov	r20,zero
    93b4:	0021883a 	mov	r16,zero
    93b8:	003cc906 	br	86e0 <_strtod_r+0x1a4>
    93bc:	00a52834 	movhi	r2,38048
    93c0:	108d6544 	addi	r2,r2,13717
    93c4:	00cff434 	movhi	r3,16336
    93c8:	18ffffc4 	addi	r3,r3,-1
    93cc:	2809883a 	mov	r4,r5
    93d0:	180f883a 	mov	r7,r3
    93d4:	300b883a 	mov	r5,r6
    93d8:	100d883a 	mov	r6,r2
    93dc:	00129040 	call	12904 <__ltdf2>
    93e0:	103f250e 	bge	r2,zero,9078 <_strtod_r+0xb3c>
    93e4:	003fc806 	br	9308 <_strtod_r+0xdcc>
    93e8:	0027883a 	mov	r19,zero
    93ec:	04800044 	movi	r18,1
    93f0:	0015883a 	mov	r10,zero
    93f4:	003cc006 	br	86f8 <_strtod_r+0x1bc>
    93f8:	00800884 	movi	r2,34
    93fc:	a8800015 	stw	r2,0(r21)
    9400:	019ffc34 	movhi	r6,32752
    9404:	e1800115 	stw	r6,4(fp)
    9408:	e0000015 	stw	zero,0(fp)
    940c:	003cc206 	br	8718 <_strtod_r+0x1dc>
    9410:	015387c4 	movi	r5,19999
    9414:	003d1e06 	br	8890 <_strtod_r+0x354>
    9418:	300a90fa 	slli	r5,r6,3
    941c:	e0800017 	ldw	r2,0(fp)
    9420:	e0c00117 	ldw	r3,4(fp)
    9424:	01020034 	movhi	r4,2048
    9428:	21017404 	addi	r4,r4,1488
    942c:	290b883a 	add	r5,r5,r4
    9430:	2a000017 	ldw	r8,0(r5)
    9434:	2a400117 	ldw	r9,4(r5)
    9438:	1009883a 	mov	r4,r2
    943c:	180b883a 	mov	r5,r3
    9440:	480f883a 	mov	r7,r9
    9444:	400d883a 	mov	r6,r8
    9448:	00070500 	call	7050 <__muldf3>
    944c:	e0c00115 	stw	r3,4(fp)
    9450:	e0800015 	stw	r2,0(fp)
    9454:	003cb006 	br	8718 <_strtod_r+0x1dc>
    9458:	d8800d17 	ldw	r2,52(sp)
    945c:	e0800015 	stw	r2,0(fp)
    9460:	d8c00e17 	ldw	r3,56(sp)
    9464:	e0c00115 	stw	r3,4(fp)
    9468:	9880020c 	andi	r2,r19,8
    946c:	103caa26 	beq	r2,zero,8718 <_strtod_r+0x1dc>
    9470:	e0800117 	ldw	r2,4(fp)
    9474:	10a00034 	orhi	r2,r2,32768
    9478:	e0800115 	stw	r2,4(fp)
    947c:	003ca606 	br	8718 <_strtod_r+0x1dc>
    9480:	009ffc34 	movhi	r2,32752
    9484:	e0800115 	stw	r2,4(fp)
    9488:	e0000015 	stw	zero,0(fp)
    948c:	003ff606 	br	9468 <_strtod_r+0xf2c>
    9490:	00a00034 	movhi	r2,32768
    9494:	10bfffc4 	addi	r2,r2,-1
    9498:	00ffffc4 	movi	r3,-1
    949c:	e0800115 	stw	r2,4(fp)
    94a0:	e0c00015 	stw	r3,0(fp)
    94a4:	003ff006 	br	9468 <_strtod_r+0xf2c>
    94a8:	e0000115 	stw	zero,4(fp)
    94ac:	e0000015 	stw	zero,0(fp)
    94b0:	003fed06 	br	9468 <_strtod_r+0xf2c>
    94b4:	d8800e17 	ldw	r2,56(sp)
    94b8:	29010cc4 	addi	r4,r5,1075
    94bc:	00fffc34 	movhi	r3,65520
    94c0:	18ffffc4 	addi	r3,r3,-1
    94c4:	2008953a 	slli	r4,r4,20
    94c8:	10c4703a 	and	r2,r2,r3
    94cc:	d8c00d17 	ldw	r3,52(sp)
    94d0:	1104b03a 	or	r2,r2,r4
    94d4:	e0800115 	stw	r2,4(fp)
    94d8:	e0c00015 	stw	r3,0(fp)
    94dc:	003fe206 	br	9468 <_strtod_r+0xf2c>
    94e0:	00800884 	movi	r2,34
    94e4:	a8800015 	stw	r2,0(r21)
    94e8:	e0000015 	stw	zero,0(fp)
    94ec:	e0000115 	stw	zero,4(fp)
    94f0:	003f8506 	br	9308 <_strtod_r+0xdcc>
    94f4:	03800044 	movi	r14,1
    94f8:	003d7706 	br	8ad8 <_strtod_r+0x59c>
    94fc:	99c5883a 	add	r2,r19,r7
    9500:	11ffffc4 	addi	r7,r2,-1
    9504:	00800204 	movi	r2,8
    9508:	3cc00044 	addi	r19,r7,1
    950c:	11c0df16 	blt	r2,r7,988c <_strtod_r+0x1350>
    9510:	a08002a4 	muli	r2,r20,10
    9514:	000f883a 	mov	r7,zero
    9518:	1269883a 	add	r20,r2,r9
    951c:	42000044 	addi	r8,r8,1
    9520:	da000415 	stw	r8,16(sp)
    9524:	41000007 	ldb	r4,0(r8)
    9528:	003d3706 	br	8a08 <_strtod_r+0x4cc>
    952c:	d9801317 	ldw	r6,76(sp)
    9530:	3000511e 	bne	r6,zero,9678 <_strtod_r+0x113c>
    9534:	e0800017 	ldw	r2,0(fp)
    9538:	1000d81e 	bne	r2,zero,989c <_strtod_r+0x1360>
    953c:	e0c00117 	ldw	r3,4(fp)
    9540:	01000434 	movhi	r4,16
    9544:	213fffc4 	addi	r4,r4,-1
    9548:	1904703a 	and	r2,r3,r4
    954c:	1000b01e 	bne	r2,zero,9810 <_strtod_r+0x12d4>
    9550:	18dffc2c 	andhi	r3,r3,32752
    9554:	0081ac34 	movhi	r2,1712
    9558:	10c1102e 	bgeu	r2,r3,999c <_strtod_r+0x1460>
    955c:	a0800517 	ldw	r2,20(r20)
    9560:	1000031e 	bne	r2,zero,9570 <_strtod_r+0x1034>
    9564:	a0c00417 	ldw	r3,16(r20)
    9568:	00800044 	movi	r2,1
    956c:	10c0420e 	bge	r2,r3,9678 <_strtod_r+0x113c>
    9570:	a00b883a 	mov	r5,r20
    9574:	a809883a 	mov	r4,r21
    9578:	01800044 	movi	r6,1
    957c:	00103040 	call	10304 <__lshift>
    9580:	1009883a 	mov	r4,r2
    9584:	b00b883a 	mov	r5,r22
    9588:	1029883a 	mov	r20,r2
    958c:	000fb1c0 	call	fb1c <__mcmp>
    9590:	0080c20e 	bge	zero,r2,989c <_strtod_r+0x1360>
    9594:	e1800117 	ldw	r6,4(fp)
    9598:	d9001417 	ldw	r4,80(sp)
    959c:	2013003a 	cmpeq	r9,r4,zero
    95a0:	4800ef1e 	bne	r9,zero,9960 <_strtod_r+0x1424>
    95a4:	30dffc2c 	andhi	r3,r6,32752
    95a8:	0081ac34 	movhi	r2,1712
    95ac:	10c0ec36 	bltu	r2,r3,9960 <_strtod_r+0x1424>
    95b0:	0080dc34 	movhi	r2,880
    95b4:	10ffca2e 	bgeu	r2,r3,94e0 <_strtod_r+0xfa4>
    95b8:	e0800017 	ldw	r2,0(fp)
    95bc:	e0c00117 	ldw	r3,4(fp)
    95c0:	020e5434 	movhi	r8,14672
    95c4:	000d883a 	mov	r6,zero
    95c8:	400f883a 	mov	r7,r8
    95cc:	180b883a 	mov	r5,r3
    95d0:	1009883a 	mov	r4,r2
    95d4:	da000c15 	stw	r8,48(sp)
    95d8:	d8000b15 	stw	zero,44(sp)
    95dc:	00070500 	call	7050 <__muldf3>
    95e0:	e0800015 	stw	r2,0(fp)
    95e4:	e0c00115 	stw	r3,4(fp)
    95e8:	183f471e 	bne	r3,zero,9308 <_strtod_r+0xdcc>
    95ec:	103f461e 	bne	r2,zero,9308 <_strtod_r+0xdcc>
    95f0:	00800884 	movi	r2,34
    95f4:	a8800015 	stw	r2,0(r21)
    95f8:	003f4306 	br	9308 <_strtod_r+0xdcc>
    95fc:	d8801317 	ldw	r2,76(sp)
    9600:	1025003a 	cmpeq	r18,r2,zero
    9604:	9000861e 	bne	r18,zero,9820 <_strtod_r+0x12e4>
    9608:	e1400117 	ldw	r5,4(fp)
    960c:	00c00434 	movhi	r3,16
    9610:	18ffffc4 	addi	r3,r3,-1
    9614:	28c4703a 	and	r2,r5,r3
    9618:	10c01b26 	beq	r2,r3,9688 <_strtod_r+0x114c>
    961c:	e1c00017 	ldw	r7,0(fp)
    9620:	3880004c 	andi	r2,r7,1
    9624:	1005003a 	cmpeq	r2,r2,zero
    9628:	1000791e 	bne	r2,zero,9810 <_strtod_r+0x12d4>
    962c:	9000b126 	beq	r18,zero,98f4 <_strtod_r+0x13b8>
    9630:	e4400117 	ldw	r17,4(fp)
    9634:	3809883a 	mov	r4,r7
    9638:	3821883a 	mov	r16,r7
    963c:	880b883a 	mov	r5,r17
    9640:	000fb7c0 	call	fb7c <__ulp>
    9644:	180f883a 	mov	r7,r3
    9648:	880b883a 	mov	r5,r17
    964c:	8009883a 	mov	r4,r16
    9650:	100d883a 	mov	r6,r2
    9654:	0006f5c0 	call	6f5c <__subdf3>
    9658:	1009883a 	mov	r4,r2
    965c:	000d883a 	mov	r6,zero
    9660:	000f883a 	mov	r7,zero
    9664:	180b883a 	mov	r5,r3
    9668:	e0800015 	stw	r2,0(fp)
    966c:	e0c00115 	stw	r3,4(fp)
    9670:	001287c0 	call	1287c <__nedf2>
    9674:	103f9a26 	beq	r2,zero,94e0 <_strtod_r+0xfa4>
    9678:	d9001417 	ldw	r4,80(sp)
    967c:	2013003a 	cmpeq	r9,r4,zero
    9680:	483f211e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    9684:	003fcc06 	br	95b8 <_strtod_r+0x107c>
    9688:	d9001417 	ldw	r4,80(sp)
    968c:	e1c00017 	ldw	r7,0(fp)
    9690:	2013003a 	cmpeq	r9,r4,zero
    9694:	4800bd1e 	bne	r9,zero,998c <_strtod_r+0x1450>
    9698:	28dffc2c 	andhi	r3,r5,32752
    969c:	0081a834 	movhi	r2,1696
    96a0:	10c0ba36 	bltu	r2,r3,998c <_strtod_r+0x1450>
    96a4:	1804d53a 	srli	r2,r3,20
    96a8:	00c01ac4 	movi	r3,107
    96ac:	013fffc4 	movi	r4,-1
    96b0:	1887c83a 	sub	r3,r3,r2
    96b4:	20c4983a 	sll	r2,r4,r3
    96b8:	11ffd91e 	bne	r2,r7,9620 <_strtod_r+0x10e4>
    96bc:	28dffc2c 	andhi	r3,r5,32752
    96c0:	00800434 	movhi	r2,16
    96c4:	188d883a 	add	r6,r3,r2
    96c8:	e1800115 	stw	r6,4(fp)
    96cc:	e0000015 	stw	zero,0(fp)
    96d0:	483f0d1e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    96d4:	003fb806 	br	95b8 <_strtod_r+0x107c>
    96d8:	0021883a 	mov	r16,zero
    96dc:	0005883a 	mov	r2,zero
    96e0:	044ff834 	movhi	r17,16352
    96e4:	00eff834 	movhi	r3,49120
    96e8:	003e8606 	br	9104 <_strtod_r+0xbc8>
    96ec:	803d9e26 	beq	r16,zero,8d68 <_strtod_r+0x82c>
    96f0:	0421c83a 	sub	r16,zero,r16
    96f4:	814003cc 	andi	r5,r16,15
    96f8:	28000f26 	beq	r5,zero,9738 <_strtod_r+0x11fc>
    96fc:	280a90fa 	slli	r5,r5,3
    9700:	01020034 	movhi	r4,2048
    9704:	21017404 	addi	r4,r4,1488
    9708:	e0800017 	ldw	r2,0(fp)
    970c:	290b883a 	add	r5,r5,r4
    9710:	2a000017 	ldw	r8,0(r5)
    9714:	e0c00117 	ldw	r3,4(fp)
    9718:	2a400117 	ldw	r9,4(r5)
    971c:	1009883a 	mov	r4,r2
    9720:	180b883a 	mov	r5,r3
    9724:	480f883a 	mov	r7,r9
    9728:	400d883a 	mov	r6,r8
    972c:	00074140 	call	7414 <__divdf3>
    9730:	e0c00115 	stw	r3,4(fp)
    9734:	e0800015 	stw	r2,0(fp)
    9738:	8021d13a 	srai	r16,r16,4
    973c:	803d8a26 	beq	r16,zero,8d68 <_strtod_r+0x82c>
    9740:	008007c4 	movi	r2,31
    9744:	14002d16 	blt	r2,r16,97fc <_strtod_r+0x12c0>
    9748:	8080040c 	andi	r2,r16,16
    974c:	10009926 	beq	r2,zero,99b4 <_strtod_r+0x1478>
    9750:	00801a84 	movi	r2,106
    9754:	d8801415 	stw	r2,80(sp)
    9758:	0400110e 	bge	zero,r16,97a0 <_strtod_r+0x1264>
    975c:	04420034 	movhi	r17,2048
    9760:	8c412e04 	addi	r17,r17,1208
    9764:	8080004c 	andi	r2,r16,1
    9768:	1005003a 	cmpeq	r2,r2,zero
    976c:	1000091e 	bne	r2,zero,9794 <_strtod_r+0x1258>
    9770:	e0800017 	ldw	r2,0(fp)
    9774:	e0c00117 	ldw	r3,4(fp)
    9778:	89800017 	ldw	r6,0(r17)
    977c:	89c00117 	ldw	r7,4(r17)
    9780:	180b883a 	mov	r5,r3
    9784:	1009883a 	mov	r4,r2
    9788:	00070500 	call	7050 <__muldf3>
    978c:	e0c00115 	stw	r3,4(fp)
    9790:	e0800015 	stw	r2,0(fp)
    9794:	8021d07a 	srai	r16,r16,1
    9798:	8c400204 	addi	r17,r17,8
    979c:	043ff116 	blt	zero,r16,9764 <_strtod_r+0x1228>
    97a0:	d8c01417 	ldw	r3,80(sp)
    97a4:	18000d26 	beq	r3,zero,97dc <_strtod_r+0x12a0>
    97a8:	e1000117 	ldw	r4,4(fp)
    97ac:	00c01ac4 	movi	r3,107
    97b0:	209ffc2c 	andhi	r2,r4,32752
    97b4:	1004d53a 	srli	r2,r2,20
    97b8:	1887c83a 	sub	r3,r3,r2
    97bc:	00c0070e 	bge	zero,r3,97dc <_strtod_r+0x12a0>
    97c0:	008007c4 	movi	r2,31
    97c4:	10c0900e 	bge	r2,r3,9a08 <_strtod_r+0x14cc>
    97c8:	00800d04 	movi	r2,52
    97cc:	e0000015 	stw	zero,0(fp)
    97d0:	10c0870e 	bge	r2,r3,99f0 <_strtod_r+0x14b4>
    97d4:	0180dc34 	movhi	r6,880
    97d8:	e1800115 	stw	r6,4(fp)
    97dc:	e0800017 	ldw	r2,0(fp)
    97e0:	e0c00117 	ldw	r3,4(fp)
    97e4:	000d883a 	mov	r6,zero
    97e8:	000f883a 	mov	r7,zero
    97ec:	180b883a 	mov	r5,r3
    97f0:	1009883a 	mov	r4,r2
    97f4:	001287c0 	call	1287c <__nedf2>
    97f8:	103d5c1e 	bne	r2,zero,8d6c <_strtod_r+0x830>
    97fc:	00800884 	movi	r2,34
    9800:	a8800015 	stw	r2,0(r21)
    9804:	e0000015 	stw	zero,0(fp)
    9808:	e0000115 	stw	zero,4(fp)
    980c:	003bc206 	br	8718 <_strtod_r+0x1dc>
    9810:	d8801417 	ldw	r2,80(sp)
    9814:	1013003a 	cmpeq	r9,r2,zero
    9818:	483ebb1e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    981c:	003f6606 	br	95b8 <_strtod_r+0x107c>
    9820:	e1800117 	ldw	r6,4(fp)
    9824:	00c00434 	movhi	r3,16
    9828:	18ffffc4 	addi	r3,r3,-1
    982c:	30c4703a 	and	r2,r6,r3
    9830:	103f7a1e 	bne	r2,zero,961c <_strtod_r+0x10e0>
    9834:	e1c00017 	ldw	r7,0(fp)
    9838:	383f791e 	bne	r7,zero,9620 <_strtod_r+0x10e4>
    983c:	003f5606 	br	9598 <_strtod_r+0x105c>
    9840:	d9800f17 	ldw	r6,60(sp)
    9844:	00bffa84 	movi	r2,-22
    9848:	30bcd416 	blt	r6,r2,8b9c <_strtod_r+0x660>
    984c:	317ffe24 	muli	r5,r6,-8
    9850:	01020034 	movhi	r4,2048
    9854:	21017404 	addi	r4,r4,1488
    9858:	e0800017 	ldw	r2,0(fp)
    985c:	290b883a 	add	r5,r5,r4
    9860:	2a000017 	ldw	r8,0(r5)
    9864:	e0c00117 	ldw	r3,4(fp)
    9868:	2a400117 	ldw	r9,4(r5)
    986c:	1009883a 	mov	r4,r2
    9870:	180b883a 	mov	r5,r3
    9874:	480f883a 	mov	r7,r9
    9878:	400d883a 	mov	r6,r8
    987c:	00074140 	call	7414 <__divdf3>
    9880:	e0c00115 	stw	r3,4(fp)
    9884:	e0800015 	stw	r2,0(fp)
    9888:	003ba306 	br	8718 <_strtod_r+0x1dc>
    988c:	00800404 	movi	r2,16
    9890:	14c02f0e 	bge	r2,r19,9950 <_strtod_r+0x1414>
    9894:	000f883a 	mov	r7,zero
    9898:	003f2006 	br	951c <_strtod_r+0xfe0>
    989c:	d9801417 	ldw	r6,80(sp)
    98a0:	3013003a 	cmpeq	r9,r6,zero
    98a4:	483e981e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    98a8:	003f4306 	br	95b8 <_strtod_r+0x107c>
    98ac:	00801a44 	movi	r2,105
    98b0:	20bc6326 	beq	r4,r2,8a40 <_strtod_r+0x504>
    98b4:	00801b84 	movi	r2,110
    98b8:	20bbba1e 	bne	r4,r2,87a4 <_strtod_r+0x268>
    98bc:	dc000404 	addi	r16,sp,16
    98c0:	8009883a 	mov	r4,r16
    98c4:	01420034 	movhi	r5,2048
    98c8:	29412d04 	addi	r5,r5,1204
    98cc:	00084f40 	call	84f4 <match>
    98d0:	103bb426 	beq	r2,zero,87a4 <_strtod_r+0x268>
    98d4:	d8800417 	ldw	r2,16(sp)
    98d8:	00c00a04 	movi	r3,40
    98dc:	11000007 	ldb	r4,0(r2)
    98e0:	20c03626 	beq	r4,r3,99bc <_strtod_r+0x1480>
    98e4:	01bffe34 	movhi	r6,65528
    98e8:	e1800115 	stw	r6,4(fp)
    98ec:	e0000015 	stw	zero,0(fp)
    98f0:	003b8906 	br	8718 <_strtod_r+0x1dc>
    98f4:	e4400117 	ldw	r17,4(fp)
    98f8:	3809883a 	mov	r4,r7
    98fc:	3821883a 	mov	r16,r7
    9900:	880b883a 	mov	r5,r17
    9904:	000fb7c0 	call	fb7c <__ulp>
    9908:	100d883a 	mov	r6,r2
    990c:	880b883a 	mov	r5,r17
    9910:	180f883a 	mov	r7,r3
    9914:	8009883a 	mov	r4,r16
    9918:	0006fdc0 	call	6fdc <__adddf3>
    991c:	d9801417 	ldw	r6,80(sp)
    9920:	e0c00115 	stw	r3,4(fp)
    9924:	e0800015 	stw	r2,0(fp)
    9928:	3013003a 	cmpeq	r9,r6,zero
    992c:	483e761e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    9930:	003f2106 	br	95b8 <_strtod_r+0x107c>
    9934:	000f883a 	mov	r7,zero
    9938:	003cf006 	br	8cfc <_strtod_r+0x7c0>
    993c:	0080d434 	movhi	r2,848
    9940:	188d883a 	add	r6,r3,r2
    9944:	d8001415 	stw	zero,80(sp)
    9948:	e1800115 	stw	r6,4(fp)
    994c:	003d0706 	br	8d6c <_strtod_r+0x830>
    9950:	808002a4 	muli	r2,r16,10
    9954:	000f883a 	mov	r7,zero
    9958:	1261883a 	add	r16,r2,r9
    995c:	003eef06 	br	951c <_strtod_r+0xfe0>
    9960:	309ffc2c 	andhi	r2,r6,32752
    9964:	00fffc34 	movhi	r3,65520
    9968:	10c5883a 	add	r2,r2,r3
    996c:	00c00434 	movhi	r3,16
    9970:	18ffffc4 	addi	r3,r3,-1
    9974:	10ccb03a 	or	r6,r2,r3
    9978:	01ffffc4 	movi	r7,-1
    997c:	e1800115 	stw	r6,4(fp)
    9980:	e1c00015 	stw	r7,0(fp)
    9984:	483e601e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    9988:	003f0b06 	br	95b8 <_strtod_r+0x107c>
    998c:	00bfffc4 	movi	r2,-1
    9990:	003f4906 	br	96b8 <_strtod_r+0x117c>
    9994:	0025883a 	mov	r18,zero
    9998:	003cb106 	br	8c60 <_strtod_r+0x724>
    999c:	d8c01417 	ldw	r3,80(sp)
    99a0:	1813003a 	cmpeq	r9,r3,zero
    99a4:	483e581e 	bne	r9,zero,9308 <_strtod_r+0xdcc>
    99a8:	003f0306 	br	95b8 <_strtod_r+0x107c>
    99ac:	980f883a 	mov	r7,r19
    99b0:	003ed406 	br	9504 <_strtod_r+0xfc8>
    99b4:	d8001415 	stw	zero,80(sp)
    99b8:	003f6706 	br	9758 <_strtod_r+0x121c>
    99bc:	8009883a 	mov	r4,r16
    99c0:	01420034 	movhi	r5,2048
    99c4:	29429e04 	addi	r5,r5,2680
    99c8:	d9800d04 	addi	r6,sp,52
    99cc:	000ec1c0 	call	ec1c <__hexnan>
    99d0:	00c00144 	movi	r3,5
    99d4:	10ffc31e 	bne	r2,r3,98e4 <_strtod_r+0x13a8>
    99d8:	d8800e17 	ldw	r2,56(sp)
    99dc:	d9c00d17 	ldw	r7,52(sp)
    99e0:	119ffc34 	orhi	r6,r2,32752
    99e4:	e1800115 	stw	r6,4(fp)
    99e8:	e1c00015 	stw	r7,0(fp)
    99ec:	003b4a06 	br	8718 <_strtod_r+0x1dc>
    99f0:	18fff804 	addi	r3,r3,-32
    99f4:	00bfffc4 	movi	r2,-1
    99f8:	10c4983a 	sll	r2,r2,r3
    99fc:	208c703a 	and	r6,r4,r2
    9a00:	e1800115 	stw	r6,4(fp)
    9a04:	003f7506 	br	97dc <_strtod_r+0x12a0>
    9a08:	00bfffc4 	movi	r2,-1
    9a0c:	10c4983a 	sll	r2,r2,r3
    9a10:	e0c00017 	ldw	r3,0(fp)
    9a14:	188e703a 	and	r7,r3,r2
    9a18:	e1c00015 	stw	r7,0(fp)
    9a1c:	003f6f06 	br	97dc <_strtod_r+0x12a0>

00009a20 <strtof>:
    9a20:	defffa04 	addi	sp,sp,-24
    9a24:	dd000415 	stw	r20,16(sp)
    9a28:	05020034 	movhi	r20,2048
    9a2c:	a50a1f04 	addi	r20,r20,10364
    9a30:	2007883a 	mov	r3,r4
    9a34:	a1000017 	ldw	r4,0(r20)
    9a38:	280d883a 	mov	r6,r5
    9a3c:	180b883a 	mov	r5,r3
    9a40:	dfc00515 	stw	ra,20(sp)
    9a44:	dcc00315 	stw	r19,12(sp)
    9a48:	dc800215 	stw	r18,8(sp)
    9a4c:	dc400115 	stw	r17,4(sp)
    9a50:	dc000015 	stw	r16,0(sp)
    9a54:	000853c0 	call	853c <_strtod_r>
    9a58:	180b883a 	mov	r5,r3
    9a5c:	1009883a 	mov	r4,r2
    9a60:	1823883a 	mov	r17,r3
    9a64:	1021883a 	mov	r16,r2
    9a68:	001298c0 	call	1298c <__truncdfsf2>
    9a6c:	1009883a 	mov	r4,r2
    9a70:	000b883a 	mov	r5,zero
    9a74:	1025883a 	mov	r18,r2
    9a78:	1027883a 	mov	r19,r2
    9a7c:	001268c0 	call	1268c <__nesf2>
    9a80:	000d883a 	mov	r6,zero
    9a84:	000f883a 	mov	r7,zero
    9a88:	8009883a 	mov	r4,r16
    9a8c:	880b883a 	mov	r5,r17
    9a90:	10000e1e 	bne	r2,zero,9acc <strtof+0xac>
    9a94:	001287c0 	call	1287c <__nedf2>
    9a98:	10000c26 	beq	r2,zero,9acc <strtof+0xac>
    9a9c:	a0c00017 	ldw	r3,0(r20)
    9aa0:	00800884 	movi	r2,34
    9aa4:	18800015 	stw	r2,0(r3)
    9aa8:	9805883a 	mov	r2,r19
    9aac:	dfc00517 	ldw	ra,20(sp)
    9ab0:	dd000417 	ldw	r20,16(sp)
    9ab4:	dcc00317 	ldw	r19,12(sp)
    9ab8:	dc800217 	ldw	r18,8(sp)
    9abc:	dc400117 	ldw	r17,4(sp)
    9ac0:	dc000017 	ldw	r16,0(sp)
    9ac4:	dec00604 	addi	sp,sp,24
    9ac8:	f800283a 	ret
    9acc:	9009883a 	mov	r4,r18
    9ad0:	015fe034 	movhi	r5,32640
    9ad4:	297fffc4 	addi	r5,r5,-1
    9ad8:	00127040 	call	12704 <__gtsf2>
    9adc:	00ffffc4 	movi	r3,-1
    9ae0:	011ffc34 	movhi	r4,32752
    9ae4:	213fffc4 	addi	r4,r4,-1
    9ae8:	200f883a 	mov	r7,r4
    9aec:	180d883a 	mov	r6,r3
    9af0:	8009883a 	mov	r4,r16
    9af4:	880b883a 	mov	r5,r17
    9af8:	00800f16 	blt	zero,r2,9b38 <strtof+0x118>
    9afc:	9009883a 	mov	r4,r18
    9b00:	017fe034 	movhi	r5,65408
    9b04:	297fffc4 	addi	r5,r5,-1
    9b08:	001277c0 	call	1277c <__ltsf2>
    9b0c:	023fffc4 	movi	r8,-1
    9b10:	027ffc34 	movhi	r9,65520
    9b14:	4a7fffc4 	addi	r9,r9,-1
    9b18:	880b883a 	mov	r5,r17
    9b1c:	480f883a 	mov	r7,r9
    9b20:	8009883a 	mov	r4,r16
    9b24:	400d883a 	mov	r6,r8
    9b28:	103fdf0e 	bge	r2,zero,9aa8 <strtof+0x88>
    9b2c:	00129040 	call	12904 <__ltdf2>
    9b30:	103fda0e 	bge	r2,zero,9a9c <strtof+0x7c>
    9b34:	003fdc06 	br	9aa8 <strtof+0x88>
    9b38:	000766c0 	call	766c <__gtdf2>
    9b3c:	00bfd70e 	bge	zero,r2,9a9c <strtof+0x7c>
    9b40:	003fee06 	br	9afc <strtof+0xdc>

00009b44 <strtod>:
    9b44:	01820034 	movhi	r6,2048
    9b48:	318a1f04 	addi	r6,r6,10364
    9b4c:	2007883a 	mov	r3,r4
    9b50:	31000017 	ldw	r4,0(r6)
    9b54:	280d883a 	mov	r6,r5
    9b58:	180b883a 	mov	r5,r3
    9b5c:	000853c1 	jmpi	853c <_strtod_r>

00009b60 <__sprint_r>:
    9b60:	30800217 	ldw	r2,8(r6)
    9b64:	defffe04 	addi	sp,sp,-8
    9b68:	dc000015 	stw	r16,0(sp)
    9b6c:	dfc00115 	stw	ra,4(sp)
    9b70:	3021883a 	mov	r16,r6
    9b74:	0007883a 	mov	r3,zero
    9b78:	1000061e 	bne	r2,zero,9b94 <__sprint_r+0x34>
    9b7c:	1805883a 	mov	r2,r3
    9b80:	30000115 	stw	zero,4(r6)
    9b84:	dfc00117 	ldw	ra,4(sp)
    9b88:	dc000017 	ldw	r16,0(sp)
    9b8c:	dec00204 	addi	sp,sp,8
    9b90:	f800283a 	ret
    9b94:	000dcc00 	call	dcc0 <__sfvwrite_r>
    9b98:	1007883a 	mov	r3,r2
    9b9c:	1805883a 	mov	r2,r3
    9ba0:	80000115 	stw	zero,4(r16)
    9ba4:	80000215 	stw	zero,8(r16)
    9ba8:	dfc00117 	ldw	ra,4(sp)
    9bac:	dc000017 	ldw	r16,0(sp)
    9bb0:	dec00204 	addi	sp,sp,8
    9bb4:	f800283a 	ret

00009bb8 <___vfprintf_internal_r>:
    9bb8:	defea404 	addi	sp,sp,-1392
    9bbc:	dd815815 	stw	r22,1376(sp)
    9bc0:	dc015215 	stw	r16,1352(sp)
    9bc4:	d9c15115 	stw	r7,1348(sp)
    9bc8:	dfc15b15 	stw	ra,1388(sp)
    9bcc:	df015a15 	stw	fp,1384(sp)
    9bd0:	ddc15915 	stw	r23,1380(sp)
    9bd4:	dd415715 	stw	r21,1372(sp)
    9bd8:	dd015615 	stw	r20,1368(sp)
    9bdc:	dcc15515 	stw	r19,1364(sp)
    9be0:	dc815415 	stw	r18,1360(sp)
    9be4:	dc415315 	stw	r17,1356(sp)
    9be8:	282d883a 	mov	r22,r5
    9bec:	3021883a 	mov	r16,r6
    9bf0:	d9014f15 	stw	r4,1340(sp)
    9bf4:	000ee6c0 	call	ee6c <_localeconv_r>
    9bf8:	10800017 	ldw	r2,0(r2)
    9bfc:	d9c15117 	ldw	r7,1348(sp)
    9c00:	d8814915 	stw	r2,1316(sp)
    9c04:	d8814f17 	ldw	r2,1340(sp)
    9c08:	10000226 	beq	r2,zero,9c14 <___vfprintf_internal_r+0x5c>
    9c0c:	10800e17 	ldw	r2,56(r2)
    9c10:	10020d26 	beq	r2,zero,a448 <___vfprintf_internal_r+0x890>
    9c14:	b080030b 	ldhu	r2,12(r22)
    9c18:	1080020c 	andi	r2,r2,8
    9c1c:	10020e26 	beq	r2,zero,a458 <___vfprintf_internal_r+0x8a0>
    9c20:	b0800417 	ldw	r2,16(r22)
    9c24:	10020c26 	beq	r2,zero,a458 <___vfprintf_internal_r+0x8a0>
    9c28:	b200030b 	ldhu	r8,12(r22)
    9c2c:	00800284 	movi	r2,10
    9c30:	40c0068c 	andi	r3,r8,26
    9c34:	18802f1e 	bne	r3,r2,9cf4 <___vfprintf_internal_r+0x13c>
    9c38:	b080038f 	ldh	r2,14(r22)
    9c3c:	10002d16 	blt	r2,zero,9cf4 <___vfprintf_internal_r+0x13c>
    9c40:	b240038b 	ldhu	r9,14(r22)
    9c44:	b2800717 	ldw	r10,28(r22)
    9c48:	b2c00917 	ldw	r11,36(r22)
    9c4c:	d9014f17 	ldw	r4,1340(sp)
    9c50:	dc402904 	addi	r17,sp,164
    9c54:	d8804004 	addi	r2,sp,256
    9c58:	00c10004 	movi	r3,1024
    9c5c:	423fff4c 	andi	r8,r8,65533
    9c60:	800d883a 	mov	r6,r16
    9c64:	880b883a 	mov	r5,r17
    9c68:	da002c0d 	sth	r8,176(sp)
    9c6c:	da402c8d 	sth	r9,178(sp)
    9c70:	da803015 	stw	r10,192(sp)
    9c74:	dac03215 	stw	r11,200(sp)
    9c78:	d8802d15 	stw	r2,180(sp)
    9c7c:	d8c02e15 	stw	r3,184(sp)
    9c80:	d8802915 	stw	r2,164(sp)
    9c84:	d8c02b15 	stw	r3,172(sp)
    9c88:	d8002f15 	stw	zero,188(sp)
    9c8c:	0009bb80 	call	9bb8 <___vfprintf_internal_r>
    9c90:	d8814b15 	stw	r2,1324(sp)
    9c94:	10000416 	blt	r2,zero,9ca8 <___vfprintf_internal_r+0xf0>
    9c98:	d9014f17 	ldw	r4,1340(sp)
    9c9c:	880b883a 	mov	r5,r17
    9ca0:	000d3900 	call	d390 <_fflush_r>
    9ca4:	1002321e 	bne	r2,zero,a570 <___vfprintf_internal_r+0x9b8>
    9ca8:	d8802c0b 	ldhu	r2,176(sp)
    9cac:	1080100c 	andi	r2,r2,64
    9cb0:	10000326 	beq	r2,zero,9cc0 <___vfprintf_internal_r+0x108>
    9cb4:	b080030b 	ldhu	r2,12(r22)
    9cb8:	10801014 	ori	r2,r2,64
    9cbc:	b080030d 	sth	r2,12(r22)
    9cc0:	d8814b17 	ldw	r2,1324(sp)
    9cc4:	dfc15b17 	ldw	ra,1388(sp)
    9cc8:	df015a17 	ldw	fp,1384(sp)
    9ccc:	ddc15917 	ldw	r23,1380(sp)
    9cd0:	dd815817 	ldw	r22,1376(sp)
    9cd4:	dd415717 	ldw	r21,1372(sp)
    9cd8:	dd015617 	ldw	r20,1368(sp)
    9cdc:	dcc15517 	ldw	r19,1364(sp)
    9ce0:	dc815417 	ldw	r18,1360(sp)
    9ce4:	dc415317 	ldw	r17,1356(sp)
    9ce8:	dc015217 	ldw	r16,1352(sp)
    9cec:	dec15c04 	addi	sp,sp,1392
    9cf0:	f800283a 	ret
    9cf4:	0005883a 	mov	r2,zero
    9cf8:	0007883a 	mov	r3,zero
    9cfc:	dd401904 	addi	r21,sp,100
    9d00:	d8814215 	stw	r2,1288(sp)
    9d04:	802f883a 	mov	r23,r16
    9d08:	d8c14315 	stw	r3,1292(sp)
    9d0c:	d8014b15 	stw	zero,1324(sp)
    9d10:	d8014815 	stw	zero,1312(sp)
    9d14:	d8014415 	stw	zero,1296(sp)
    9d18:	d8014715 	stw	zero,1308(sp)
    9d1c:	dd400c15 	stw	r21,48(sp)
    9d20:	d8000e15 	stw	zero,56(sp)
    9d24:	d8000d15 	stw	zero,52(sp)
    9d28:	b8800007 	ldb	r2,0(r23)
    9d2c:	10001926 	beq	r2,zero,9d94 <___vfprintf_internal_r+0x1dc>
    9d30:	00c00944 	movi	r3,37
    9d34:	10c01726 	beq	r2,r3,9d94 <___vfprintf_internal_r+0x1dc>
    9d38:	b821883a 	mov	r16,r23
    9d3c:	00000106 	br	9d44 <___vfprintf_internal_r+0x18c>
    9d40:	10c00326 	beq	r2,r3,9d50 <___vfprintf_internal_r+0x198>
    9d44:	84000044 	addi	r16,r16,1
    9d48:	80800007 	ldb	r2,0(r16)
    9d4c:	103ffc1e 	bne	r2,zero,9d40 <___vfprintf_internal_r+0x188>
    9d50:	85e7c83a 	sub	r19,r16,r23
    9d54:	98000e26 	beq	r19,zero,9d90 <___vfprintf_internal_r+0x1d8>
    9d58:	dc800e17 	ldw	r18,56(sp)
    9d5c:	dc400d17 	ldw	r17,52(sp)
    9d60:	008001c4 	movi	r2,7
    9d64:	94e5883a 	add	r18,r18,r19
    9d68:	8c400044 	addi	r17,r17,1
    9d6c:	adc00015 	stw	r23,0(r21)
    9d70:	dc800e15 	stw	r18,56(sp)
    9d74:	acc00115 	stw	r19,4(r21)
    9d78:	dc400d15 	stw	r17,52(sp)
    9d7c:	14428b16 	blt	r2,r17,a7ac <___vfprintf_internal_r+0xbf4>
    9d80:	ad400204 	addi	r21,r21,8
    9d84:	d9014b17 	ldw	r4,1324(sp)
    9d88:	24c9883a 	add	r4,r4,r19
    9d8c:	d9014b15 	stw	r4,1324(sp)
    9d90:	802f883a 	mov	r23,r16
    9d94:	b8800007 	ldb	r2,0(r23)
    9d98:	10013c26 	beq	r2,zero,a28c <___vfprintf_internal_r+0x6d4>
    9d9c:	bdc00044 	addi	r23,r23,1
    9da0:	d8000405 	stb	zero,16(sp)
    9da4:	b8c00007 	ldb	r3,0(r23)
    9da8:	04ffffc4 	movi	r19,-1
    9dac:	d8014c15 	stw	zero,1328(sp)
    9db0:	d8014a15 	stw	zero,1320(sp)
    9db4:	d8c14d15 	stw	r3,1332(sp)
    9db8:	bdc00044 	addi	r23,r23,1
    9dbc:	d9414d17 	ldw	r5,1332(sp)
    9dc0:	00801604 	movi	r2,88
    9dc4:	28fff804 	addi	r3,r5,-32
    9dc8:	10c06036 	bltu	r2,r3,9f4c <___vfprintf_internal_r+0x394>
    9dcc:	18c5883a 	add	r2,r3,r3
    9dd0:	1085883a 	add	r2,r2,r2
    9dd4:	00c00074 	movhi	r3,1
    9dd8:	18e77a04 	addi	r3,r3,-25112
    9ddc:	10c5883a 	add	r2,r2,r3
    9de0:	11000017 	ldw	r4,0(r2)
    9de4:	2000683a 	jmp	r4
    9de8:	0000ad5c 	xori	zero,zero,693
    9dec:	00009f4c 	andi	zero,zero,637
    9df0:	00009f4c 	andi	zero,zero,637
    9df4:	0000ad48 	cmpgei	zero,zero,693
    9df8:	00009f4c 	andi	zero,zero,637
    9dfc:	00009f4c 	andi	zero,zero,637
    9e00:	00009f4c 	andi	zero,zero,637
    9e04:	00009f4c 	andi	zero,zero,637
    9e08:	00009f4c 	andi	zero,zero,637
    9e0c:	00009f4c 	andi	zero,zero,637
    9e10:	0000ab28 	cmpgeui	zero,zero,684
    9e14:	0000ad38 	rdprs	zero,zero,692
    9e18:	00009f4c 	andi	zero,zero,637
    9e1c:	0000ab40 	call	ab4 <xEventGroupWaitBits+0x40>
    9e20:	0000add4 	movui	zero,695
    9e24:	00009f4c 	andi	zero,zero,637
    9e28:	0000adc0 	call	adc <xEventGroupWaitBits+0x68>
    9e2c:	0000ad88 	cmpgei	zero,zero,694
    9e30:	0000ad88 	cmpgei	zero,zero,694
    9e34:	0000ad88 	cmpgei	zero,zero,694
    9e38:	0000ad88 	cmpgei	zero,zero,694
    9e3c:	0000ad88 	cmpgei	zero,zero,694
    9e40:	0000ad88 	cmpgei	zero,zero,694
    9e44:	0000ad88 	cmpgei	zero,zero,694
    9e48:	0000ad88 	cmpgei	zero,zero,694
    9e4c:	0000ad88 	cmpgei	zero,zero,694
    9e50:	00009f4c 	andi	zero,zero,637
    9e54:	00009f4c 	andi	zero,zero,637
    9e58:	00009f4c 	andi	zero,zero,637
    9e5c:	00009f4c 	andi	zero,zero,637
    9e60:	00009f4c 	andi	zero,zero,637
    9e64:	00009f4c 	andi	zero,zero,637
    9e68:	00009f4c 	andi	zero,zero,637
    9e6c:	00009f4c 	andi	zero,zero,637
    9e70:	00009f4c 	andi	zero,zero,637
    9e74:	00009f4c 	andi	zero,zero,637
    9e78:	0000a5a4 	muli	zero,zero,662
    9e7c:	0000ac10 	cmplti	zero,zero,688
    9e80:	00009f4c 	andi	zero,zero,637
    9e84:	0000ac10 	cmplti	zero,zero,688
    9e88:	00009f4c 	andi	zero,zero,637
    9e8c:	00009f4c 	andi	zero,zero,637
    9e90:	00009f4c 	andi	zero,zero,637
    9e94:	00009f4c 	andi	zero,zero,637
    9e98:	0000ad74 	movhi	zero,693
    9e9c:	00009f4c 	andi	zero,zero,637
    9ea0:	00009f4c 	andi	zero,zero,637
    9ea4:	0000a658 	cmpnei	zero,zero,665
    9ea8:	00009f4c 	andi	zero,zero,637
    9eac:	00009f4c 	andi	zero,zero,637
    9eb0:	00009f4c 	andi	zero,zero,637
    9eb4:	00009f4c 	andi	zero,zero,637
    9eb8:	00009f4c 	andi	zero,zero,637
    9ebc:	0000a6a4 	muli	zero,zero,666
    9ec0:	00009f4c 	andi	zero,zero,637
    9ec4:	00009f4c 	andi	zero,zero,637
    9ec8:	0000acc4 	movi	zero,691
    9ecc:	00009f4c 	andi	zero,zero,637
    9ed0:	00009f4c 	andi	zero,zero,637
    9ed4:	00009f4c 	andi	zero,zero,637
    9ed8:	00009f4c 	andi	zero,zero,637
    9edc:	00009f4c 	andi	zero,zero,637
    9ee0:	00009f4c 	andi	zero,zero,637
    9ee4:	00009f4c 	andi	zero,zero,637
    9ee8:	00009f4c 	andi	zero,zero,637
    9eec:	00009f4c 	andi	zero,zero,637
    9ef0:	00009f4c 	andi	zero,zero,637
    9ef4:	0000ac98 	cmpnei	zero,zero,690
    9ef8:	0000a5b0 	cmpltui	zero,zero,662
    9efc:	0000ac10 	cmplti	zero,zero,688
    9f00:	0000ac10 	cmplti	zero,zero,688
    9f04:	0000ac10 	cmplti	zero,zero,688
    9f08:	0000abfc 	xorhi	zero,zero,687
    9f0c:	0000a5b0 	cmpltui	zero,zero,662
    9f10:	00009f4c 	andi	zero,zero,637
    9f14:	00009f4c 	andi	zero,zero,637
    9f18:	0000ab84 	movi	zero,686
    9f1c:	00009f4c 	andi	zero,zero,637
    9f20:	0000ab54 	movui	zero,685
    9f24:	0000a664 	muli	zero,zero,665
    9f28:	0000abb4 	movhi	zero,686
    9f2c:	0000aba0 	cmpeqi	zero,zero,686
    9f30:	00009f4c 	andi	zero,zero,637
    9f34:	0000ae30 	cmpltui	zero,zero,696
    9f38:	00009f4c 	andi	zero,zero,637
    9f3c:	0000a6b0 	cmpltui	zero,zero,666
    9f40:	00009f4c 	andi	zero,zero,637
    9f44:	00009f4c 	andi	zero,zero,637
    9f48:	0000ad28 	cmpgeui	zero,zero,692
    9f4c:	d9014d17 	ldw	r4,1332(sp)
    9f50:	2000ce26 	beq	r4,zero,a28c <___vfprintf_internal_r+0x6d4>
    9f54:	01400044 	movi	r5,1
    9f58:	d9800f04 	addi	r6,sp,60
    9f5c:	d9c14015 	stw	r7,1280(sp)
    9f60:	d9414515 	stw	r5,1300(sp)
    9f64:	d9814115 	stw	r6,1284(sp)
    9f68:	280f883a 	mov	r7,r5
    9f6c:	d9000f05 	stb	r4,60(sp)
    9f70:	d8000405 	stb	zero,16(sp)
    9f74:	d8014615 	stw	zero,1304(sp)
    9f78:	d8c14c17 	ldw	r3,1328(sp)
    9f7c:	1880008c 	andi	r2,r3,2
    9f80:	1005003a 	cmpeq	r2,r2,zero
    9f84:	d8815015 	stw	r2,1344(sp)
    9f88:	1000031e 	bne	r2,zero,9f98 <___vfprintf_internal_r+0x3e0>
    9f8c:	d9014517 	ldw	r4,1300(sp)
    9f90:	21000084 	addi	r4,r4,2
    9f94:	d9014515 	stw	r4,1300(sp)
    9f98:	d9414c17 	ldw	r5,1328(sp)
    9f9c:	2940210c 	andi	r5,r5,132
    9fa0:	d9414e15 	stw	r5,1336(sp)
    9fa4:	28002d1e 	bne	r5,zero,a05c <___vfprintf_internal_r+0x4a4>
    9fa8:	d9814a17 	ldw	r6,1320(sp)
    9fac:	d8814517 	ldw	r2,1300(sp)
    9fb0:	30a1c83a 	sub	r16,r6,r2
    9fb4:	0400290e 	bge	zero,r16,a05c <___vfprintf_internal_r+0x4a4>
    9fb8:	00800404 	movi	r2,16
    9fbc:	1404580e 	bge	r2,r16,b120 <___vfprintf_internal_r+0x1568>
    9fc0:	dc800e17 	ldw	r18,56(sp)
    9fc4:	dc400d17 	ldw	r17,52(sp)
    9fc8:	1027883a 	mov	r19,r2
    9fcc:	07020034 	movhi	fp,2048
    9fd0:	e7015384 	addi	fp,fp,1358
    9fd4:	050001c4 	movi	r20,7
    9fd8:	00000306 	br	9fe8 <___vfprintf_internal_r+0x430>
    9fdc:	843ffc04 	addi	r16,r16,-16
    9fe0:	ad400204 	addi	r21,r21,8
    9fe4:	9c00130e 	bge	r19,r16,a034 <___vfprintf_internal_r+0x47c>
    9fe8:	94800404 	addi	r18,r18,16
    9fec:	8c400044 	addi	r17,r17,1
    9ff0:	af000015 	stw	fp,0(r21)
    9ff4:	acc00115 	stw	r19,4(r21)
    9ff8:	dc800e15 	stw	r18,56(sp)
    9ffc:	dc400d15 	stw	r17,52(sp)
    a000:	a47ff60e 	bge	r20,r17,9fdc <___vfprintf_internal_r+0x424>
    a004:	d9014f17 	ldw	r4,1340(sp)
    a008:	b00b883a 	mov	r5,r22
    a00c:	d9800c04 	addi	r6,sp,48
    a010:	d9c15115 	stw	r7,1348(sp)
    a014:	0009b600 	call	9b60 <__sprint_r>
    a018:	d9c15117 	ldw	r7,1348(sp)
    a01c:	10009e1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a020:	843ffc04 	addi	r16,r16,-16
    a024:	dc800e17 	ldw	r18,56(sp)
    a028:	dc400d17 	ldw	r17,52(sp)
    a02c:	dd401904 	addi	r21,sp,100
    a030:	9c3fed16 	blt	r19,r16,9fe8 <___vfprintf_internal_r+0x430>
    a034:	9425883a 	add	r18,r18,r16
    a038:	8c400044 	addi	r17,r17,1
    a03c:	008001c4 	movi	r2,7
    a040:	af000015 	stw	fp,0(r21)
    a044:	ac000115 	stw	r16,4(r21)
    a048:	dc800e15 	stw	r18,56(sp)
    a04c:	dc400d15 	stw	r17,52(sp)
    a050:	1441f516 	blt	r2,r17,a828 <___vfprintf_internal_r+0xc70>
    a054:	ad400204 	addi	r21,r21,8
    a058:	00000206 	br	a064 <___vfprintf_internal_r+0x4ac>
    a05c:	dc800e17 	ldw	r18,56(sp)
    a060:	dc400d17 	ldw	r17,52(sp)
    a064:	d8800407 	ldb	r2,16(sp)
    a068:	10000b26 	beq	r2,zero,a098 <___vfprintf_internal_r+0x4e0>
    a06c:	00800044 	movi	r2,1
    a070:	94800044 	addi	r18,r18,1
    a074:	8c400044 	addi	r17,r17,1
    a078:	a8800115 	stw	r2,4(r21)
    a07c:	d8c00404 	addi	r3,sp,16
    a080:	008001c4 	movi	r2,7
    a084:	a8c00015 	stw	r3,0(r21)
    a088:	dc800e15 	stw	r18,56(sp)
    a08c:	dc400d15 	stw	r17,52(sp)
    a090:	1441da16 	blt	r2,r17,a7fc <___vfprintf_internal_r+0xc44>
    a094:	ad400204 	addi	r21,r21,8
    a098:	d9015017 	ldw	r4,1344(sp)
    a09c:	20000b1e 	bne	r4,zero,a0cc <___vfprintf_internal_r+0x514>
    a0a0:	d8800444 	addi	r2,sp,17
    a0a4:	94800084 	addi	r18,r18,2
    a0a8:	8c400044 	addi	r17,r17,1
    a0ac:	a8800015 	stw	r2,0(r21)
    a0b0:	00c00084 	movi	r3,2
    a0b4:	008001c4 	movi	r2,7
    a0b8:	a8c00115 	stw	r3,4(r21)
    a0bc:	dc800e15 	stw	r18,56(sp)
    a0c0:	dc400d15 	stw	r17,52(sp)
    a0c4:	1441c216 	blt	r2,r17,a7d0 <___vfprintf_internal_r+0xc18>
    a0c8:	ad400204 	addi	r21,r21,8
    a0cc:	d9414e17 	ldw	r5,1336(sp)
    a0d0:	00802004 	movi	r2,128
    a0d4:	2880b126 	beq	r5,r2,a39c <___vfprintf_internal_r+0x7e4>
    a0d8:	d8c14617 	ldw	r3,1304(sp)
    a0dc:	19e1c83a 	sub	r16,r3,r7
    a0e0:	0400260e 	bge	zero,r16,a17c <___vfprintf_internal_r+0x5c4>
    a0e4:	00800404 	movi	r2,16
    a0e8:	1403c90e 	bge	r2,r16,b010 <___vfprintf_internal_r+0x1458>
    a0ec:	1027883a 	mov	r19,r2
    a0f0:	07020034 	movhi	fp,2048
    a0f4:	e7014f84 	addi	fp,fp,1342
    a0f8:	050001c4 	movi	r20,7
    a0fc:	00000306 	br	a10c <___vfprintf_internal_r+0x554>
    a100:	843ffc04 	addi	r16,r16,-16
    a104:	ad400204 	addi	r21,r21,8
    a108:	9c00130e 	bge	r19,r16,a158 <___vfprintf_internal_r+0x5a0>
    a10c:	94800404 	addi	r18,r18,16
    a110:	8c400044 	addi	r17,r17,1
    a114:	af000015 	stw	fp,0(r21)
    a118:	acc00115 	stw	r19,4(r21)
    a11c:	dc800e15 	stw	r18,56(sp)
    a120:	dc400d15 	stw	r17,52(sp)
    a124:	a47ff60e 	bge	r20,r17,a100 <___vfprintf_internal_r+0x548>
    a128:	d9014f17 	ldw	r4,1340(sp)
    a12c:	b00b883a 	mov	r5,r22
    a130:	d9800c04 	addi	r6,sp,48
    a134:	d9c15115 	stw	r7,1348(sp)
    a138:	0009b600 	call	9b60 <__sprint_r>
    a13c:	d9c15117 	ldw	r7,1348(sp)
    a140:	1000551e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a144:	843ffc04 	addi	r16,r16,-16
    a148:	dc800e17 	ldw	r18,56(sp)
    a14c:	dc400d17 	ldw	r17,52(sp)
    a150:	dd401904 	addi	r21,sp,100
    a154:	9c3fed16 	blt	r19,r16,a10c <___vfprintf_internal_r+0x554>
    a158:	9425883a 	add	r18,r18,r16
    a15c:	8c400044 	addi	r17,r17,1
    a160:	008001c4 	movi	r2,7
    a164:	af000015 	stw	fp,0(r21)
    a168:	ac000115 	stw	r16,4(r21)
    a16c:	dc800e15 	stw	r18,56(sp)
    a170:	dc400d15 	stw	r17,52(sp)
    a174:	14418216 	blt	r2,r17,a780 <___vfprintf_internal_r+0xbc8>
    a178:	ad400204 	addi	r21,r21,8
    a17c:	d9014c17 	ldw	r4,1328(sp)
    a180:	2080400c 	andi	r2,r4,256
    a184:	10004a1e 	bne	r2,zero,a2b0 <___vfprintf_internal_r+0x6f8>
    a188:	d9414117 	ldw	r5,1284(sp)
    a18c:	91e5883a 	add	r18,r18,r7
    a190:	8c400044 	addi	r17,r17,1
    a194:	008001c4 	movi	r2,7
    a198:	a9400015 	stw	r5,0(r21)
    a19c:	a9c00115 	stw	r7,4(r21)
    a1a0:	dc800e15 	stw	r18,56(sp)
    a1a4:	dc400d15 	stw	r17,52(sp)
    a1a8:	14416716 	blt	r2,r17,a748 <___vfprintf_internal_r+0xb90>
    a1ac:	a8c00204 	addi	r3,r21,8
    a1b0:	d9814c17 	ldw	r6,1328(sp)
    a1b4:	3080010c 	andi	r2,r6,4
    a1b8:	10002826 	beq	r2,zero,a25c <___vfprintf_internal_r+0x6a4>
    a1bc:	d8814a17 	ldw	r2,1320(sp)
    a1c0:	d9014517 	ldw	r4,1300(sp)
    a1c4:	1121c83a 	sub	r16,r2,r4
    a1c8:	0400240e 	bge	zero,r16,a25c <___vfprintf_internal_r+0x6a4>
    a1cc:	00800404 	movi	r2,16
    a1d0:	14044f0e 	bge	r2,r16,b310 <___vfprintf_internal_r+0x1758>
    a1d4:	dc400d17 	ldw	r17,52(sp)
    a1d8:	1027883a 	mov	r19,r2
    a1dc:	07020034 	movhi	fp,2048
    a1e0:	e7015384 	addi	fp,fp,1358
    a1e4:	050001c4 	movi	r20,7
    a1e8:	00000306 	br	a1f8 <___vfprintf_internal_r+0x640>
    a1ec:	843ffc04 	addi	r16,r16,-16
    a1f0:	18c00204 	addi	r3,r3,8
    a1f4:	9c00110e 	bge	r19,r16,a23c <___vfprintf_internal_r+0x684>
    a1f8:	94800404 	addi	r18,r18,16
    a1fc:	8c400044 	addi	r17,r17,1
    a200:	1f000015 	stw	fp,0(r3)
    a204:	1cc00115 	stw	r19,4(r3)
    a208:	dc800e15 	stw	r18,56(sp)
    a20c:	dc400d15 	stw	r17,52(sp)
    a210:	a47ff60e 	bge	r20,r17,a1ec <___vfprintf_internal_r+0x634>
    a214:	d9014f17 	ldw	r4,1340(sp)
    a218:	b00b883a 	mov	r5,r22
    a21c:	d9800c04 	addi	r6,sp,48
    a220:	0009b600 	call	9b60 <__sprint_r>
    a224:	10001c1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a228:	843ffc04 	addi	r16,r16,-16
    a22c:	dc800e17 	ldw	r18,56(sp)
    a230:	dc400d17 	ldw	r17,52(sp)
    a234:	d8c01904 	addi	r3,sp,100
    a238:	9c3fef16 	blt	r19,r16,a1f8 <___vfprintf_internal_r+0x640>
    a23c:	9425883a 	add	r18,r18,r16
    a240:	8c400044 	addi	r17,r17,1
    a244:	008001c4 	movi	r2,7
    a248:	1f000015 	stw	fp,0(r3)
    a24c:	1c000115 	stw	r16,4(r3)
    a250:	dc800e15 	stw	r18,56(sp)
    a254:	dc400d15 	stw	r17,52(sp)
    a258:	1440cb16 	blt	r2,r17,a588 <___vfprintf_internal_r+0x9d0>
    a25c:	d8814a17 	ldw	r2,1320(sp)
    a260:	d9414517 	ldw	r5,1300(sp)
    a264:	1140010e 	bge	r2,r5,a26c <___vfprintf_internal_r+0x6b4>
    a268:	2805883a 	mov	r2,r5
    a26c:	d9814b17 	ldw	r6,1324(sp)
    a270:	308d883a 	add	r6,r6,r2
    a274:	d9814b15 	stw	r6,1324(sp)
    a278:	90013b1e 	bne	r18,zero,a768 <___vfprintf_internal_r+0xbb0>
    a27c:	d9c14017 	ldw	r7,1280(sp)
    a280:	dd401904 	addi	r21,sp,100
    a284:	d8000d15 	stw	zero,52(sp)
    a288:	003ea706 	br	9d28 <___vfprintf_internal_r+0x170>
    a28c:	d8800e17 	ldw	r2,56(sp)
    a290:	10053f1e 	bne	r2,zero,b790 <___vfprintf_internal_r+0x1bd8>
    a294:	d8000d15 	stw	zero,52(sp)
    a298:	b080030b 	ldhu	r2,12(r22)
    a29c:	1080100c 	andi	r2,r2,64
    a2a0:	103e8726 	beq	r2,zero,9cc0 <___vfprintf_internal_r+0x108>
    a2a4:	00bfffc4 	movi	r2,-1
    a2a8:	d8814b15 	stw	r2,1324(sp)
    a2ac:	003e8406 	br	9cc0 <___vfprintf_internal_r+0x108>
    a2b0:	d9814d17 	ldw	r6,1332(sp)
    a2b4:	00801944 	movi	r2,101
    a2b8:	11806e16 	blt	r2,r6,a474 <___vfprintf_internal_r+0x8bc>
    a2bc:	d9414717 	ldw	r5,1308(sp)
    a2c0:	00c00044 	movi	r3,1
    a2c4:	1943430e 	bge	r3,r5,afd4 <___vfprintf_internal_r+0x141c>
    a2c8:	d8814117 	ldw	r2,1284(sp)
    a2cc:	94800044 	addi	r18,r18,1
    a2d0:	8c400044 	addi	r17,r17,1
    a2d4:	a8800015 	stw	r2,0(r21)
    a2d8:	008001c4 	movi	r2,7
    a2dc:	a8c00115 	stw	r3,4(r21)
    a2e0:	dc800e15 	stw	r18,56(sp)
    a2e4:	dc400d15 	stw	r17,52(sp)
    a2e8:	1441ca16 	blt	r2,r17,aa14 <___vfprintf_internal_r+0xe5c>
    a2ec:	a8c00204 	addi	r3,r21,8
    a2f0:	d9014917 	ldw	r4,1316(sp)
    a2f4:	00800044 	movi	r2,1
    a2f8:	94800044 	addi	r18,r18,1
    a2fc:	8c400044 	addi	r17,r17,1
    a300:	18800115 	stw	r2,4(r3)
    a304:	008001c4 	movi	r2,7
    a308:	19000015 	stw	r4,0(r3)
    a30c:	dc800e15 	stw	r18,56(sp)
    a310:	dc400d15 	stw	r17,52(sp)
    a314:	1441b616 	blt	r2,r17,a9f0 <___vfprintf_internal_r+0xe38>
    a318:	1cc00204 	addi	r19,r3,8
    a31c:	d9014217 	ldw	r4,1288(sp)
    a320:	d9414317 	ldw	r5,1292(sp)
    a324:	000d883a 	mov	r6,zero
    a328:	000f883a 	mov	r7,zero
    a32c:	001287c0 	call	1287c <__nedf2>
    a330:	10017426 	beq	r2,zero,a904 <___vfprintf_internal_r+0xd4c>
    a334:	d9414717 	ldw	r5,1308(sp)
    a338:	d9814117 	ldw	r6,1284(sp)
    a33c:	8c400044 	addi	r17,r17,1
    a340:	2c85883a 	add	r2,r5,r18
    a344:	14bfffc4 	addi	r18,r2,-1
    a348:	28bfffc4 	addi	r2,r5,-1
    a34c:	30c00044 	addi	r3,r6,1
    a350:	98800115 	stw	r2,4(r19)
    a354:	008001c4 	movi	r2,7
    a358:	98c00015 	stw	r3,0(r19)
    a35c:	dc800e15 	stw	r18,56(sp)
    a360:	dc400d15 	stw	r17,52(sp)
    a364:	14418e16 	blt	r2,r17,a9a0 <___vfprintf_internal_r+0xde8>
    a368:	9cc00204 	addi	r19,r19,8
    a36c:	d9414817 	ldw	r5,1312(sp)
    a370:	d8800804 	addi	r2,sp,32
    a374:	8c400044 	addi	r17,r17,1
    a378:	9165883a 	add	r18,r18,r5
    a37c:	98800015 	stw	r2,0(r19)
    a380:	008001c4 	movi	r2,7
    a384:	99400115 	stw	r5,4(r19)
    a388:	dc800e15 	stw	r18,56(sp)
    a38c:	dc400d15 	stw	r17,52(sp)
    a390:	1440ed16 	blt	r2,r17,a748 <___vfprintf_internal_r+0xb90>
    a394:	98c00204 	addi	r3,r19,8
    a398:	003f8506 	br	a1b0 <___vfprintf_internal_r+0x5f8>
    a39c:	d9814a17 	ldw	r6,1320(sp)
    a3a0:	d8814517 	ldw	r2,1300(sp)
    a3a4:	30a1c83a 	sub	r16,r6,r2
    a3a8:	043f4b0e 	bge	zero,r16,a0d8 <___vfprintf_internal_r+0x520>
    a3ac:	00800404 	movi	r2,16
    a3b0:	1404340e 	bge	r2,r16,b484 <___vfprintf_internal_r+0x18cc>
    a3b4:	1027883a 	mov	r19,r2
    a3b8:	07020034 	movhi	fp,2048
    a3bc:	e7014f84 	addi	fp,fp,1342
    a3c0:	050001c4 	movi	r20,7
    a3c4:	00000306 	br	a3d4 <___vfprintf_internal_r+0x81c>
    a3c8:	843ffc04 	addi	r16,r16,-16
    a3cc:	ad400204 	addi	r21,r21,8
    a3d0:	9c00130e 	bge	r19,r16,a420 <___vfprintf_internal_r+0x868>
    a3d4:	94800404 	addi	r18,r18,16
    a3d8:	8c400044 	addi	r17,r17,1
    a3dc:	af000015 	stw	fp,0(r21)
    a3e0:	acc00115 	stw	r19,4(r21)
    a3e4:	dc800e15 	stw	r18,56(sp)
    a3e8:	dc400d15 	stw	r17,52(sp)
    a3ec:	a47ff60e 	bge	r20,r17,a3c8 <___vfprintf_internal_r+0x810>
    a3f0:	d9014f17 	ldw	r4,1340(sp)
    a3f4:	b00b883a 	mov	r5,r22
    a3f8:	d9800c04 	addi	r6,sp,48
    a3fc:	d9c15115 	stw	r7,1348(sp)
    a400:	0009b600 	call	9b60 <__sprint_r>
    a404:	d9c15117 	ldw	r7,1348(sp)
    a408:	103fa31e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a40c:	843ffc04 	addi	r16,r16,-16
    a410:	dc800e17 	ldw	r18,56(sp)
    a414:	dc400d17 	ldw	r17,52(sp)
    a418:	dd401904 	addi	r21,sp,100
    a41c:	9c3fed16 	blt	r19,r16,a3d4 <___vfprintf_internal_r+0x81c>
    a420:	9425883a 	add	r18,r18,r16
    a424:	8c400044 	addi	r17,r17,1
    a428:	008001c4 	movi	r2,7
    a42c:	af000015 	stw	fp,0(r21)
    a430:	ac000115 	stw	r16,4(r21)
    a434:	dc800e15 	stw	r18,56(sp)
    a438:	dc400d15 	stw	r17,52(sp)
    a43c:	14416116 	blt	r2,r17,a9c4 <___vfprintf_internal_r+0xe0c>
    a440:	ad400204 	addi	r21,r21,8
    a444:	003f2406 	br	a0d8 <___vfprintf_internal_r+0x520>
    a448:	d9014f17 	ldw	r4,1340(sp)
    a44c:	000d6280 	call	d628 <__sinit>
    a450:	d9c15117 	ldw	r7,1348(sp)
    a454:	003def06 	br	9c14 <___vfprintf_internal_r+0x5c>
    a458:	d9014f17 	ldw	r4,1340(sp)
    a45c:	b00b883a 	mov	r5,r22
    a460:	d9c15115 	stw	r7,1348(sp)
    a464:	000ba880 	call	ba88 <__swsetup_r>
    a468:	d9c15117 	ldw	r7,1348(sp)
    a46c:	103dee26 	beq	r2,zero,9c28 <___vfprintf_internal_r+0x70>
    a470:	003f8c06 	br	a2a4 <___vfprintf_internal_r+0x6ec>
    a474:	d9014217 	ldw	r4,1288(sp)
    a478:	d9414317 	ldw	r5,1292(sp)
    a47c:	000d883a 	mov	r6,zero
    a480:	000f883a 	mov	r7,zero
    a484:	00127f40 	call	127f4 <__eqdf2>
    a488:	1000f21e 	bne	r2,zero,a854 <___vfprintf_internal_r+0xc9c>
    a48c:	00820034 	movhi	r2,2048
    a490:	10814f04 	addi	r2,r2,1340
    a494:	94800044 	addi	r18,r18,1
    a498:	8c400044 	addi	r17,r17,1
    a49c:	a8800015 	stw	r2,0(r21)
    a4a0:	00c00044 	movi	r3,1
    a4a4:	008001c4 	movi	r2,7
    a4a8:	a8c00115 	stw	r3,4(r21)
    a4ac:	dc800e15 	stw	r18,56(sp)
    a4b0:	dc400d15 	stw	r17,52(sp)
    a4b4:	1442fa16 	blt	r2,r17,b0a0 <___vfprintf_internal_r+0x14e8>
    a4b8:	a8c00204 	addi	r3,r21,8
    a4bc:	d8800517 	ldw	r2,20(sp)
    a4c0:	d9014717 	ldw	r4,1308(sp)
    a4c4:	11015c0e 	bge	r2,r4,aa38 <___vfprintf_internal_r+0xe80>
    a4c8:	dc400d17 	ldw	r17,52(sp)
    a4cc:	d9814917 	ldw	r6,1316(sp)
    a4d0:	00800044 	movi	r2,1
    a4d4:	94800044 	addi	r18,r18,1
    a4d8:	8c400044 	addi	r17,r17,1
    a4dc:	18800115 	stw	r2,4(r3)
    a4e0:	008001c4 	movi	r2,7
    a4e4:	19800015 	stw	r6,0(r3)
    a4e8:	dc800e15 	stw	r18,56(sp)
    a4ec:	dc400d15 	stw	r17,52(sp)
    a4f0:	14431016 	blt	r2,r17,b134 <___vfprintf_internal_r+0x157c>
    a4f4:	18c00204 	addi	r3,r3,8
    a4f8:	d8814717 	ldw	r2,1308(sp)
    a4fc:	143fffc4 	addi	r16,r2,-1
    a500:	043f2b0e 	bge	zero,r16,a1b0 <___vfprintf_internal_r+0x5f8>
    a504:	00800404 	movi	r2,16
    a508:	1402a20e 	bge	r2,r16,af94 <___vfprintf_internal_r+0x13dc>
    a50c:	dc400d17 	ldw	r17,52(sp)
    a510:	1027883a 	mov	r19,r2
    a514:	07020034 	movhi	fp,2048
    a518:	e7014f84 	addi	fp,fp,1342
    a51c:	050001c4 	movi	r20,7
    a520:	00000306 	br	a530 <___vfprintf_internal_r+0x978>
    a524:	18c00204 	addi	r3,r3,8
    a528:	843ffc04 	addi	r16,r16,-16
    a52c:	9c029c0e 	bge	r19,r16,afa0 <___vfprintf_internal_r+0x13e8>
    a530:	94800404 	addi	r18,r18,16
    a534:	8c400044 	addi	r17,r17,1
    a538:	1f000015 	stw	fp,0(r3)
    a53c:	1cc00115 	stw	r19,4(r3)
    a540:	dc800e15 	stw	r18,56(sp)
    a544:	dc400d15 	stw	r17,52(sp)
    a548:	a47ff60e 	bge	r20,r17,a524 <___vfprintf_internal_r+0x96c>
    a54c:	d9014f17 	ldw	r4,1340(sp)
    a550:	b00b883a 	mov	r5,r22
    a554:	d9800c04 	addi	r6,sp,48
    a558:	0009b600 	call	9b60 <__sprint_r>
    a55c:	103f4e1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a560:	dc800e17 	ldw	r18,56(sp)
    a564:	dc400d17 	ldw	r17,52(sp)
    a568:	d8c01904 	addi	r3,sp,100
    a56c:	003fee06 	br	a528 <___vfprintf_internal_r+0x970>
    a570:	d8802c0b 	ldhu	r2,176(sp)
    a574:	00ffffc4 	movi	r3,-1
    a578:	d8c14b15 	stw	r3,1324(sp)
    a57c:	1080100c 	andi	r2,r2,64
    a580:	103dcc1e 	bne	r2,zero,9cb4 <___vfprintf_internal_r+0xfc>
    a584:	003dce06 	br	9cc0 <___vfprintf_internal_r+0x108>
    a588:	d9014f17 	ldw	r4,1340(sp)
    a58c:	b00b883a 	mov	r5,r22
    a590:	d9800c04 	addi	r6,sp,48
    a594:	0009b600 	call	9b60 <__sprint_r>
    a598:	103f3f1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a59c:	dc800e17 	ldw	r18,56(sp)
    a5a0:	003f2e06 	br	a25c <___vfprintf_internal_r+0x6a4>
    a5a4:	d9414c17 	ldw	r5,1328(sp)
    a5a8:	29400414 	ori	r5,r5,16
    a5ac:	d9414c15 	stw	r5,1328(sp)
    a5b0:	d9814c17 	ldw	r6,1328(sp)
    a5b4:	3080080c 	andi	r2,r6,32
    a5b8:	10014f1e 	bne	r2,zero,aaf8 <___vfprintf_internal_r+0xf40>
    a5bc:	d8c14c17 	ldw	r3,1328(sp)
    a5c0:	1880040c 	andi	r2,r3,16
    a5c4:	1002ea1e 	bne	r2,zero,b170 <___vfprintf_internal_r+0x15b8>
    a5c8:	d9014c17 	ldw	r4,1328(sp)
    a5cc:	2080100c 	andi	r2,r4,64
    a5d0:	1002e726 	beq	r2,zero,b170 <___vfprintf_internal_r+0x15b8>
    a5d4:	3880000f 	ldh	r2,0(r7)
    a5d8:	39c00104 	addi	r7,r7,4
    a5dc:	d9c14015 	stw	r7,1280(sp)
    a5e0:	1023d7fa 	srai	r17,r2,31
    a5e4:	1021883a 	mov	r16,r2
    a5e8:	88037216 	blt	r17,zero,b3b4 <___vfprintf_internal_r+0x17fc>
    a5ec:	01000044 	movi	r4,1
    a5f0:	98000416 	blt	r19,zero,a604 <___vfprintf_internal_r+0xa4c>
    a5f4:	d8c14c17 	ldw	r3,1328(sp)
    a5f8:	00bfdfc4 	movi	r2,-129
    a5fc:	1886703a 	and	r3,r3,r2
    a600:	d8c14c15 	stw	r3,1328(sp)
    a604:	8444b03a 	or	r2,r16,r17
    a608:	1002261e 	bne	r2,zero,aea4 <___vfprintf_internal_r+0x12ec>
    a60c:	9802251e 	bne	r19,zero,aea4 <___vfprintf_internal_r+0x12ec>
    a610:	20803fcc 	andi	r2,r4,255
    a614:	10029b26 	beq	r2,zero,b084 <___vfprintf_internal_r+0x14cc>
    a618:	d8c01904 	addi	r3,sp,100
    a61c:	dd000f04 	addi	r20,sp,60
    a620:	d8c14115 	stw	r3,1284(sp)
    a624:	d8c14117 	ldw	r3,1284(sp)
    a628:	dcc14515 	stw	r19,1300(sp)
    a62c:	a0c5c83a 	sub	r2,r20,r3
    a630:	11c00a04 	addi	r7,r2,40
    a634:	99c0010e 	bge	r19,r7,a63c <___vfprintf_internal_r+0xa84>
    a638:	d9c14515 	stw	r7,1300(sp)
    a63c:	dcc14615 	stw	r19,1304(sp)
    a640:	d8800407 	ldb	r2,16(sp)
    a644:	103e4c26 	beq	r2,zero,9f78 <___vfprintf_internal_r+0x3c0>
    a648:	d8814517 	ldw	r2,1300(sp)
    a64c:	10800044 	addi	r2,r2,1
    a650:	d8814515 	stw	r2,1300(sp)
    a654:	003e4806 	br	9f78 <___vfprintf_internal_r+0x3c0>
    a658:	d9814c17 	ldw	r6,1328(sp)
    a65c:	31800414 	ori	r6,r6,16
    a660:	d9814c15 	stw	r6,1328(sp)
    a664:	d8c14c17 	ldw	r3,1328(sp)
    a668:	1880080c 	andi	r2,r3,32
    a66c:	1001271e 	bne	r2,zero,ab0c <___vfprintf_internal_r+0xf54>
    a670:	d9414c17 	ldw	r5,1328(sp)
    a674:	2880040c 	andi	r2,r5,16
    a678:	1002b61e 	bne	r2,zero,b154 <___vfprintf_internal_r+0x159c>
    a67c:	d9814c17 	ldw	r6,1328(sp)
    a680:	3080100c 	andi	r2,r6,64
    a684:	1002b326 	beq	r2,zero,b154 <___vfprintf_internal_r+0x159c>
    a688:	3c00000b 	ldhu	r16,0(r7)
    a68c:	0009883a 	mov	r4,zero
    a690:	39c00104 	addi	r7,r7,4
    a694:	0023883a 	mov	r17,zero
    a698:	d9c14015 	stw	r7,1280(sp)
    a69c:	d8000405 	stb	zero,16(sp)
    a6a0:	003fd306 	br	a5f0 <___vfprintf_internal_r+0xa38>
    a6a4:	d9014c17 	ldw	r4,1328(sp)
    a6a8:	21000414 	ori	r4,r4,16
    a6ac:	d9014c15 	stw	r4,1328(sp)
    a6b0:	d9414c17 	ldw	r5,1328(sp)
    a6b4:	2880080c 	andi	r2,r5,32
    a6b8:	1001081e 	bne	r2,zero,aadc <___vfprintf_internal_r+0xf24>
    a6bc:	d8c14c17 	ldw	r3,1328(sp)
    a6c0:	1880040c 	andi	r2,r3,16
    a6c4:	1002b01e 	bne	r2,zero,b188 <___vfprintf_internal_r+0x15d0>
    a6c8:	d9014c17 	ldw	r4,1328(sp)
    a6cc:	2080100c 	andi	r2,r4,64
    a6d0:	1002ad26 	beq	r2,zero,b188 <___vfprintf_internal_r+0x15d0>
    a6d4:	3c00000b 	ldhu	r16,0(r7)
    a6d8:	01000044 	movi	r4,1
    a6dc:	39c00104 	addi	r7,r7,4
    a6e0:	0023883a 	mov	r17,zero
    a6e4:	d9c14015 	stw	r7,1280(sp)
    a6e8:	d8000405 	stb	zero,16(sp)
    a6ec:	003fc006 	br	a5f0 <___vfprintf_internal_r+0xa38>
    a6f0:	d9014f17 	ldw	r4,1340(sp)
    a6f4:	b00b883a 	mov	r5,r22
    a6f8:	d9800c04 	addi	r6,sp,48
    a6fc:	0009b600 	call	9b60 <__sprint_r>
    a700:	103ee51e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a704:	dc800e17 	ldw	r18,56(sp)
    a708:	d8c01904 	addi	r3,sp,100
    a70c:	d9814c17 	ldw	r6,1328(sp)
    a710:	3080004c 	andi	r2,r6,1
    a714:	1005003a 	cmpeq	r2,r2,zero
    a718:	103ea51e 	bne	r2,zero,a1b0 <___vfprintf_internal_r+0x5f8>
    a71c:	00800044 	movi	r2,1
    a720:	dc400d17 	ldw	r17,52(sp)
    a724:	18800115 	stw	r2,4(r3)
    a728:	d8814917 	ldw	r2,1316(sp)
    a72c:	94800044 	addi	r18,r18,1
    a730:	8c400044 	addi	r17,r17,1
    a734:	18800015 	stw	r2,0(r3)
    a738:	008001c4 	movi	r2,7
    a73c:	dc800e15 	stw	r18,56(sp)
    a740:	dc400d15 	stw	r17,52(sp)
    a744:	14421e0e 	bge	r2,r17,afc0 <___vfprintf_internal_r+0x1408>
    a748:	d9014f17 	ldw	r4,1340(sp)
    a74c:	b00b883a 	mov	r5,r22
    a750:	d9800c04 	addi	r6,sp,48
    a754:	0009b600 	call	9b60 <__sprint_r>
    a758:	103ecf1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a75c:	dc800e17 	ldw	r18,56(sp)
    a760:	d8c01904 	addi	r3,sp,100
    a764:	003e9206 	br	a1b0 <___vfprintf_internal_r+0x5f8>
    a768:	d9014f17 	ldw	r4,1340(sp)
    a76c:	b00b883a 	mov	r5,r22
    a770:	d9800c04 	addi	r6,sp,48
    a774:	0009b600 	call	9b60 <__sprint_r>
    a778:	103ec026 	beq	r2,zero,a27c <___vfprintf_internal_r+0x6c4>
    a77c:	003ec606 	br	a298 <___vfprintf_internal_r+0x6e0>
    a780:	d9014f17 	ldw	r4,1340(sp)
    a784:	b00b883a 	mov	r5,r22
    a788:	d9800c04 	addi	r6,sp,48
    a78c:	d9c15115 	stw	r7,1348(sp)
    a790:	0009b600 	call	9b60 <__sprint_r>
    a794:	d9c15117 	ldw	r7,1348(sp)
    a798:	103ebf1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a79c:	dc800e17 	ldw	r18,56(sp)
    a7a0:	dc400d17 	ldw	r17,52(sp)
    a7a4:	dd401904 	addi	r21,sp,100
    a7a8:	003e7406 	br	a17c <___vfprintf_internal_r+0x5c4>
    a7ac:	d9014f17 	ldw	r4,1340(sp)
    a7b0:	b00b883a 	mov	r5,r22
    a7b4:	d9800c04 	addi	r6,sp,48
    a7b8:	d9c15115 	stw	r7,1348(sp)
    a7bc:	0009b600 	call	9b60 <__sprint_r>
    a7c0:	d9c15117 	ldw	r7,1348(sp)
    a7c4:	103eb41e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a7c8:	dd401904 	addi	r21,sp,100
    a7cc:	003d6d06 	br	9d84 <___vfprintf_internal_r+0x1cc>
    a7d0:	d9014f17 	ldw	r4,1340(sp)
    a7d4:	b00b883a 	mov	r5,r22
    a7d8:	d9800c04 	addi	r6,sp,48
    a7dc:	d9c15115 	stw	r7,1348(sp)
    a7e0:	0009b600 	call	9b60 <__sprint_r>
    a7e4:	d9c15117 	ldw	r7,1348(sp)
    a7e8:	103eab1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a7ec:	dc800e17 	ldw	r18,56(sp)
    a7f0:	dc400d17 	ldw	r17,52(sp)
    a7f4:	dd401904 	addi	r21,sp,100
    a7f8:	003e3406 	br	a0cc <___vfprintf_internal_r+0x514>
    a7fc:	d9014f17 	ldw	r4,1340(sp)
    a800:	b00b883a 	mov	r5,r22
    a804:	d9800c04 	addi	r6,sp,48
    a808:	d9c15115 	stw	r7,1348(sp)
    a80c:	0009b600 	call	9b60 <__sprint_r>
    a810:	d9c15117 	ldw	r7,1348(sp)
    a814:	103ea01e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a818:	dc800e17 	ldw	r18,56(sp)
    a81c:	dc400d17 	ldw	r17,52(sp)
    a820:	dd401904 	addi	r21,sp,100
    a824:	003e1c06 	br	a098 <___vfprintf_internal_r+0x4e0>
    a828:	d9014f17 	ldw	r4,1340(sp)
    a82c:	b00b883a 	mov	r5,r22
    a830:	d9800c04 	addi	r6,sp,48
    a834:	d9c15115 	stw	r7,1348(sp)
    a838:	0009b600 	call	9b60 <__sprint_r>
    a83c:	d9c15117 	ldw	r7,1348(sp)
    a840:	103e951e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a844:	dc800e17 	ldw	r18,56(sp)
    a848:	dc400d17 	ldw	r17,52(sp)
    a84c:	dd401904 	addi	r21,sp,100
    a850:	003e0406 	br	a064 <___vfprintf_internal_r+0x4ac>
    a854:	d9000517 	ldw	r4,20(sp)
    a858:	0102520e 	bge	zero,r4,b1a4 <___vfprintf_internal_r+0x15ec>
    a85c:	d9814717 	ldw	r6,1308(sp)
    a860:	21807a16 	blt	r4,r6,aa4c <___vfprintf_internal_r+0xe94>
    a864:	d8814117 	ldw	r2,1284(sp)
    a868:	91a5883a 	add	r18,r18,r6
    a86c:	8c400044 	addi	r17,r17,1
    a870:	a8800015 	stw	r2,0(r21)
    a874:	008001c4 	movi	r2,7
    a878:	a9800115 	stw	r6,4(r21)
    a87c:	dc800e15 	stw	r18,56(sp)
    a880:	dc400d15 	stw	r17,52(sp)
    a884:	1442f616 	blt	r2,r17,b460 <___vfprintf_internal_r+0x18a8>
    a888:	a8c00204 	addi	r3,r21,8
    a88c:	d9414717 	ldw	r5,1308(sp)
    a890:	2161c83a 	sub	r16,r4,r5
    a894:	043f9d0e 	bge	zero,r16,a70c <___vfprintf_internal_r+0xb54>
    a898:	00800404 	movi	r2,16
    a89c:	1402130e 	bge	r2,r16,b0ec <___vfprintf_internal_r+0x1534>
    a8a0:	dc400d17 	ldw	r17,52(sp)
    a8a4:	1027883a 	mov	r19,r2
    a8a8:	07020034 	movhi	fp,2048
    a8ac:	e7014f84 	addi	fp,fp,1342
    a8b0:	050001c4 	movi	r20,7
    a8b4:	00000306 	br	a8c4 <___vfprintf_internal_r+0xd0c>
    a8b8:	18c00204 	addi	r3,r3,8
    a8bc:	843ffc04 	addi	r16,r16,-16
    a8c0:	9c020d0e 	bge	r19,r16,b0f8 <___vfprintf_internal_r+0x1540>
    a8c4:	94800404 	addi	r18,r18,16
    a8c8:	8c400044 	addi	r17,r17,1
    a8cc:	1f000015 	stw	fp,0(r3)
    a8d0:	1cc00115 	stw	r19,4(r3)
    a8d4:	dc800e15 	stw	r18,56(sp)
    a8d8:	dc400d15 	stw	r17,52(sp)
    a8dc:	a47ff60e 	bge	r20,r17,a8b8 <___vfprintf_internal_r+0xd00>
    a8e0:	d9014f17 	ldw	r4,1340(sp)
    a8e4:	b00b883a 	mov	r5,r22
    a8e8:	d9800c04 	addi	r6,sp,48
    a8ec:	0009b600 	call	9b60 <__sprint_r>
    a8f0:	103e691e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a8f4:	dc800e17 	ldw	r18,56(sp)
    a8f8:	dc400d17 	ldw	r17,52(sp)
    a8fc:	d8c01904 	addi	r3,sp,100
    a900:	003fee06 	br	a8bc <___vfprintf_internal_r+0xd04>
    a904:	d8814717 	ldw	r2,1308(sp)
    a908:	143fffc4 	addi	r16,r2,-1
    a90c:	043e970e 	bge	zero,r16,a36c <___vfprintf_internal_r+0x7b4>
    a910:	00800404 	movi	r2,16
    a914:	1400180e 	bge	r2,r16,a978 <___vfprintf_internal_r+0xdc0>
    a918:	1029883a 	mov	r20,r2
    a91c:	07020034 	movhi	fp,2048
    a920:	e7014f84 	addi	fp,fp,1342
    a924:	054001c4 	movi	r21,7
    a928:	00000306 	br	a938 <___vfprintf_internal_r+0xd80>
    a92c:	9cc00204 	addi	r19,r19,8
    a930:	843ffc04 	addi	r16,r16,-16
    a934:	a400120e 	bge	r20,r16,a980 <___vfprintf_internal_r+0xdc8>
    a938:	94800404 	addi	r18,r18,16
    a93c:	8c400044 	addi	r17,r17,1
    a940:	9f000015 	stw	fp,0(r19)
    a944:	9d000115 	stw	r20,4(r19)
    a948:	dc800e15 	stw	r18,56(sp)
    a94c:	dc400d15 	stw	r17,52(sp)
    a950:	ac7ff60e 	bge	r21,r17,a92c <___vfprintf_internal_r+0xd74>
    a954:	d9014f17 	ldw	r4,1340(sp)
    a958:	b00b883a 	mov	r5,r22
    a95c:	d9800c04 	addi	r6,sp,48
    a960:	0009b600 	call	9b60 <__sprint_r>
    a964:	103e4c1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a968:	dc800e17 	ldw	r18,56(sp)
    a96c:	dc400d17 	ldw	r17,52(sp)
    a970:	dcc01904 	addi	r19,sp,100
    a974:	003fee06 	br	a930 <___vfprintf_internal_r+0xd78>
    a978:	07020034 	movhi	fp,2048
    a97c:	e7014f84 	addi	fp,fp,1342
    a980:	9425883a 	add	r18,r18,r16
    a984:	8c400044 	addi	r17,r17,1
    a988:	008001c4 	movi	r2,7
    a98c:	9f000015 	stw	fp,0(r19)
    a990:	9c000115 	stw	r16,4(r19)
    a994:	dc800e15 	stw	r18,56(sp)
    a998:	dc400d15 	stw	r17,52(sp)
    a99c:	147e720e 	bge	r2,r17,a368 <___vfprintf_internal_r+0x7b0>
    a9a0:	d9014f17 	ldw	r4,1340(sp)
    a9a4:	b00b883a 	mov	r5,r22
    a9a8:	d9800c04 	addi	r6,sp,48
    a9ac:	0009b600 	call	9b60 <__sprint_r>
    a9b0:	103e391e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a9b4:	dc800e17 	ldw	r18,56(sp)
    a9b8:	dc400d17 	ldw	r17,52(sp)
    a9bc:	dcc01904 	addi	r19,sp,100
    a9c0:	003e6a06 	br	a36c <___vfprintf_internal_r+0x7b4>
    a9c4:	d9014f17 	ldw	r4,1340(sp)
    a9c8:	b00b883a 	mov	r5,r22
    a9cc:	d9800c04 	addi	r6,sp,48
    a9d0:	d9c15115 	stw	r7,1348(sp)
    a9d4:	0009b600 	call	9b60 <__sprint_r>
    a9d8:	d9c15117 	ldw	r7,1348(sp)
    a9dc:	103e2e1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    a9e0:	dc800e17 	ldw	r18,56(sp)
    a9e4:	dc400d17 	ldw	r17,52(sp)
    a9e8:	dd401904 	addi	r21,sp,100
    a9ec:	003dba06 	br	a0d8 <___vfprintf_internal_r+0x520>
    a9f0:	d9014f17 	ldw	r4,1340(sp)
    a9f4:	b00b883a 	mov	r5,r22
    a9f8:	d9800c04 	addi	r6,sp,48
    a9fc:	0009b600 	call	9b60 <__sprint_r>
    aa00:	103e251e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    aa04:	dc800e17 	ldw	r18,56(sp)
    aa08:	dc400d17 	ldw	r17,52(sp)
    aa0c:	dcc01904 	addi	r19,sp,100
    aa10:	003e4206 	br	a31c <___vfprintf_internal_r+0x764>
    aa14:	d9014f17 	ldw	r4,1340(sp)
    aa18:	b00b883a 	mov	r5,r22
    aa1c:	d9800c04 	addi	r6,sp,48
    aa20:	0009b600 	call	9b60 <__sprint_r>
    aa24:	103e1c1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    aa28:	dc800e17 	ldw	r18,56(sp)
    aa2c:	dc400d17 	ldw	r17,52(sp)
    aa30:	d8c01904 	addi	r3,sp,100
    aa34:	003e2e06 	br	a2f0 <___vfprintf_internal_r+0x738>
    aa38:	d9414c17 	ldw	r5,1328(sp)
    aa3c:	2880004c 	andi	r2,r5,1
    aa40:	1005003a 	cmpeq	r2,r2,zero
    aa44:	103dda1e 	bne	r2,zero,a1b0 <___vfprintf_internal_r+0x5f8>
    aa48:	003e9f06 	br	a4c8 <___vfprintf_internal_r+0x910>
    aa4c:	d8c14117 	ldw	r3,1284(sp)
    aa50:	9125883a 	add	r18,r18,r4
    aa54:	8c400044 	addi	r17,r17,1
    aa58:	008001c4 	movi	r2,7
    aa5c:	a8c00015 	stw	r3,0(r21)
    aa60:	a9000115 	stw	r4,4(r21)
    aa64:	dc800e15 	stw	r18,56(sp)
    aa68:	dc400d15 	stw	r17,52(sp)
    aa6c:	14426616 	blt	r2,r17,b408 <___vfprintf_internal_r+0x1850>
    aa70:	a8c00204 	addi	r3,r21,8
    aa74:	d9414917 	ldw	r5,1316(sp)
    aa78:	00800044 	movi	r2,1
    aa7c:	94800044 	addi	r18,r18,1
    aa80:	8c400044 	addi	r17,r17,1
    aa84:	18800115 	stw	r2,4(r3)
    aa88:	008001c4 	movi	r2,7
    aa8c:	19400015 	stw	r5,0(r3)
    aa90:	dc800e15 	stw	r18,56(sp)
    aa94:	dc400d15 	stw	r17,52(sp)
    aa98:	2021883a 	mov	r16,r4
    aa9c:	14425016 	blt	r2,r17,b3e0 <___vfprintf_internal_r+0x1828>
    aaa0:	19400204 	addi	r5,r3,8
    aaa4:	d9814717 	ldw	r6,1308(sp)
    aaa8:	8c400044 	addi	r17,r17,1
    aaac:	dc400d15 	stw	r17,52(sp)
    aab0:	3107c83a 	sub	r3,r6,r4
    aab4:	d9014117 	ldw	r4,1284(sp)
    aab8:	90e5883a 	add	r18,r18,r3
    aabc:	28c00115 	stw	r3,4(r5)
    aac0:	8105883a 	add	r2,r16,r4
    aac4:	28800015 	stw	r2,0(r5)
    aac8:	008001c4 	movi	r2,7
    aacc:	dc800e15 	stw	r18,56(sp)
    aad0:	147f1d16 	blt	r2,r17,a748 <___vfprintf_internal_r+0xb90>
    aad4:	28c00204 	addi	r3,r5,8
    aad8:	003db506 	br	a1b0 <___vfprintf_internal_r+0x5f8>
    aadc:	3c000017 	ldw	r16,0(r7)
    aae0:	3c400117 	ldw	r17,4(r7)
    aae4:	39800204 	addi	r6,r7,8
    aae8:	01000044 	movi	r4,1
    aaec:	d9814015 	stw	r6,1280(sp)
    aaf0:	d8000405 	stb	zero,16(sp)
    aaf4:	003ebe06 	br	a5f0 <___vfprintf_internal_r+0xa38>
    aaf8:	3c000017 	ldw	r16,0(r7)
    aafc:	3c400117 	ldw	r17,4(r7)
    ab00:	38800204 	addi	r2,r7,8
    ab04:	d8814015 	stw	r2,1280(sp)
    ab08:	003eb706 	br	a5e8 <___vfprintf_internal_r+0xa30>
    ab0c:	3c000017 	ldw	r16,0(r7)
    ab10:	3c400117 	ldw	r17,4(r7)
    ab14:	39000204 	addi	r4,r7,8
    ab18:	d9014015 	stw	r4,1280(sp)
    ab1c:	0009883a 	mov	r4,zero
    ab20:	d8000405 	stb	zero,16(sp)
    ab24:	003eb206 	br	a5f0 <___vfprintf_internal_r+0xa38>
    ab28:	38c00017 	ldw	r3,0(r7)
    ab2c:	39c00104 	addi	r7,r7,4
    ab30:	d8c14a15 	stw	r3,1320(sp)
    ab34:	1800d10e 	bge	r3,zero,ae7c <___vfprintf_internal_r+0x12c4>
    ab38:	00c7c83a 	sub	r3,zero,r3
    ab3c:	d8c14a15 	stw	r3,1320(sp)
    ab40:	d9014c17 	ldw	r4,1328(sp)
    ab44:	b8c00007 	ldb	r3,0(r23)
    ab48:	21000114 	ori	r4,r4,4
    ab4c:	d9014c15 	stw	r4,1328(sp)
    ab50:	003c9806 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ab54:	d9814c17 	ldw	r6,1328(sp)
    ab58:	3080080c 	andi	r2,r6,32
    ab5c:	1001f026 	beq	r2,zero,b320 <___vfprintf_internal_r+0x1768>
    ab60:	d9014b17 	ldw	r4,1324(sp)
    ab64:	38800017 	ldw	r2,0(r7)
    ab68:	39c00104 	addi	r7,r7,4
    ab6c:	d9c14015 	stw	r7,1280(sp)
    ab70:	2007d7fa 	srai	r3,r4,31
    ab74:	d9c14017 	ldw	r7,1280(sp)
    ab78:	11000015 	stw	r4,0(r2)
    ab7c:	10c00115 	stw	r3,4(r2)
    ab80:	003c6906 	br	9d28 <___vfprintf_internal_r+0x170>
    ab84:	b8c00007 	ldb	r3,0(r23)
    ab88:	00801b04 	movi	r2,108
    ab8c:	18824f26 	beq	r3,r2,b4cc <___vfprintf_internal_r+0x1914>
    ab90:	d9414c17 	ldw	r5,1328(sp)
    ab94:	29400414 	ori	r5,r5,16
    ab98:	d9414c15 	stw	r5,1328(sp)
    ab9c:	003c8506 	br	9db4 <___vfprintf_internal_r+0x1fc>
    aba0:	d9814c17 	ldw	r6,1328(sp)
    aba4:	b8c00007 	ldb	r3,0(r23)
    aba8:	31800814 	ori	r6,r6,32
    abac:	d9814c15 	stw	r6,1328(sp)
    abb0:	003c8006 	br	9db4 <___vfprintf_internal_r+0x1fc>
    abb4:	d8814c17 	ldw	r2,1328(sp)
    abb8:	3c000017 	ldw	r16,0(r7)
    abbc:	00c01e04 	movi	r3,120
    abc0:	10800094 	ori	r2,r2,2
    abc4:	d8814c15 	stw	r2,1328(sp)
    abc8:	39c00104 	addi	r7,r7,4
    abcc:	01420034 	movhi	r5,2048
    abd0:	29413804 	addi	r5,r5,1248
    abd4:	00800c04 	movi	r2,48
    abd8:	0023883a 	mov	r17,zero
    abdc:	01000084 	movi	r4,2
    abe0:	d9c14015 	stw	r7,1280(sp)
    abe4:	d8c14d15 	stw	r3,1332(sp)
    abe8:	d9414415 	stw	r5,1296(sp)
    abec:	d8800445 	stb	r2,17(sp)
    abf0:	d8c00485 	stb	r3,18(sp)
    abf4:	d8000405 	stb	zero,16(sp)
    abf8:	003e7d06 	br	a5f0 <___vfprintf_internal_r+0xa38>
    abfc:	d8814c17 	ldw	r2,1328(sp)
    ac00:	b8c00007 	ldb	r3,0(r23)
    ac04:	10801014 	ori	r2,r2,64
    ac08:	d8814c15 	stw	r2,1328(sp)
    ac0c:	003c6906 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ac10:	d9414c17 	ldw	r5,1328(sp)
    ac14:	2880020c 	andi	r2,r5,8
    ac18:	1001df26 	beq	r2,zero,b398 <___vfprintf_internal_r+0x17e0>
    ac1c:	39800017 	ldw	r6,0(r7)
    ac20:	38800204 	addi	r2,r7,8
    ac24:	d8814015 	stw	r2,1280(sp)
    ac28:	d9814215 	stw	r6,1288(sp)
    ac2c:	39c00117 	ldw	r7,4(r7)
    ac30:	d9c14315 	stw	r7,1292(sp)
    ac34:	d9014217 	ldw	r4,1288(sp)
    ac38:	d9414317 	ldw	r5,1292(sp)
    ac3c:	00111940 	call	11194 <__isinfd>
    ac40:	10021726 	beq	r2,zero,b4a0 <___vfprintf_internal_r+0x18e8>
    ac44:	d9014217 	ldw	r4,1288(sp)
    ac48:	d9414317 	ldw	r5,1292(sp)
    ac4c:	000d883a 	mov	r6,zero
    ac50:	000f883a 	mov	r7,zero
    ac54:	00129040 	call	12904 <__ltdf2>
    ac58:	1002ca16 	blt	r2,zero,b784 <___vfprintf_internal_r+0x1bcc>
    ac5c:	d9414d17 	ldw	r5,1332(sp)
    ac60:	008011c4 	movi	r2,71
    ac64:	11420a16 	blt	r2,r5,b490 <___vfprintf_internal_r+0x18d8>
    ac68:	01820034 	movhi	r6,2048
    ac6c:	31813d04 	addi	r6,r6,1268
    ac70:	d9814115 	stw	r6,1284(sp)
    ac74:	d9014c17 	ldw	r4,1328(sp)
    ac78:	00c000c4 	movi	r3,3
    ac7c:	00bfdfc4 	movi	r2,-129
    ac80:	2088703a 	and	r4,r4,r2
    ac84:	180f883a 	mov	r7,r3
    ac88:	d8c14515 	stw	r3,1300(sp)
    ac8c:	d9014c15 	stw	r4,1328(sp)
    ac90:	d8014615 	stw	zero,1304(sp)
    ac94:	003e6a06 	br	a640 <___vfprintf_internal_r+0xa88>
    ac98:	38800017 	ldw	r2,0(r7)
    ac9c:	00c00044 	movi	r3,1
    aca0:	39c00104 	addi	r7,r7,4
    aca4:	d9c14015 	stw	r7,1280(sp)
    aca8:	d9000f04 	addi	r4,sp,60
    acac:	180f883a 	mov	r7,r3
    acb0:	d8c14515 	stw	r3,1300(sp)
    acb4:	d9014115 	stw	r4,1284(sp)
    acb8:	d8800f05 	stb	r2,60(sp)
    acbc:	d8000405 	stb	zero,16(sp)
    acc0:	003cac06 	br	9f74 <___vfprintf_internal_r+0x3bc>
    acc4:	01420034 	movhi	r5,2048
    acc8:	29414304 	addi	r5,r5,1292
    accc:	d9414415 	stw	r5,1296(sp)
    acd0:	d9814c17 	ldw	r6,1328(sp)
    acd4:	3080080c 	andi	r2,r6,32
    acd8:	1000f926 	beq	r2,zero,b0c0 <___vfprintf_internal_r+0x1508>
    acdc:	3c000017 	ldw	r16,0(r7)
    ace0:	3c400117 	ldw	r17,4(r7)
    ace4:	38800204 	addi	r2,r7,8
    ace8:	d8814015 	stw	r2,1280(sp)
    acec:	d9414c17 	ldw	r5,1328(sp)
    acf0:	2880004c 	andi	r2,r5,1
    acf4:	1005003a 	cmpeq	r2,r2,zero
    acf8:	1000b31e 	bne	r2,zero,afc8 <___vfprintf_internal_r+0x1410>
    acfc:	8444b03a 	or	r2,r16,r17
    ad00:	1000b126 	beq	r2,zero,afc8 <___vfprintf_internal_r+0x1410>
    ad04:	d9814d17 	ldw	r6,1332(sp)
    ad08:	29400094 	ori	r5,r5,2
    ad0c:	00800c04 	movi	r2,48
    ad10:	01000084 	movi	r4,2
    ad14:	d9414c15 	stw	r5,1328(sp)
    ad18:	d8800445 	stb	r2,17(sp)
    ad1c:	d9800485 	stb	r6,18(sp)
    ad20:	d8000405 	stb	zero,16(sp)
    ad24:	003e3206 	br	a5f0 <___vfprintf_internal_r+0xa38>
    ad28:	01820034 	movhi	r6,2048
    ad2c:	31813804 	addi	r6,r6,1248
    ad30:	d9814415 	stw	r6,1296(sp)
    ad34:	003fe606 	br	acd0 <___vfprintf_internal_r+0x1118>
    ad38:	00800ac4 	movi	r2,43
    ad3c:	d8800405 	stb	r2,16(sp)
    ad40:	b8c00007 	ldb	r3,0(r23)
    ad44:	003c1b06 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ad48:	d8814c17 	ldw	r2,1328(sp)
    ad4c:	b8c00007 	ldb	r3,0(r23)
    ad50:	10800054 	ori	r2,r2,1
    ad54:	d8814c15 	stw	r2,1328(sp)
    ad58:	003c1606 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ad5c:	d8800407 	ldb	r2,16(sp)
    ad60:	1000461e 	bne	r2,zero,ae7c <___vfprintf_internal_r+0x12c4>
    ad64:	00800804 	movi	r2,32
    ad68:	d8800405 	stb	r2,16(sp)
    ad6c:	b8c00007 	ldb	r3,0(r23)
    ad70:	003c1006 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ad74:	d9814c17 	ldw	r6,1328(sp)
    ad78:	b8c00007 	ldb	r3,0(r23)
    ad7c:	31800214 	ori	r6,r6,8
    ad80:	d9814c15 	stw	r6,1328(sp)
    ad84:	003c0b06 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ad88:	0007883a 	mov	r3,zero
    ad8c:	01000244 	movi	r4,9
    ad90:	188002a4 	muli	r2,r3,10
    ad94:	b8c00007 	ldb	r3,0(r23)
    ad98:	d9814d17 	ldw	r6,1332(sp)
    ad9c:	bdc00044 	addi	r23,r23,1
    ada0:	d8c14d15 	stw	r3,1332(sp)
    ada4:	d9414d17 	ldw	r5,1332(sp)
    ada8:	3085883a 	add	r2,r6,r2
    adac:	10fff404 	addi	r3,r2,-48
    adb0:	28bff404 	addi	r2,r5,-48
    adb4:	20bff62e 	bgeu	r4,r2,ad90 <___vfprintf_internal_r+0x11d8>
    adb8:	d8c14a15 	stw	r3,1320(sp)
    adbc:	003bff06 	br	9dbc <___vfprintf_internal_r+0x204>
    adc0:	d9414c17 	ldw	r5,1328(sp)
    adc4:	b8c00007 	ldb	r3,0(r23)
    adc8:	29402014 	ori	r5,r5,128
    adcc:	d9414c15 	stw	r5,1328(sp)
    add0:	003bf806 	br	9db4 <___vfprintf_internal_r+0x1fc>
    add4:	b8c00007 	ldb	r3,0(r23)
    add8:	00800a84 	movi	r2,42
    addc:	bdc00044 	addi	r23,r23,1
    ade0:	18831526 	beq	r3,r2,ba38 <___vfprintf_internal_r+0x1e80>
    ade4:	d8c14d15 	stw	r3,1332(sp)
    ade8:	18bff404 	addi	r2,r3,-48
    adec:	00c00244 	movi	r3,9
    adf0:	18827836 	bltu	r3,r2,b7d4 <___vfprintf_internal_r+0x1c1c>
    adf4:	000d883a 	mov	r6,zero
    adf8:	308002a4 	muli	r2,r6,10
    adfc:	b9800007 	ldb	r6,0(r23)
    ae00:	d9414d17 	ldw	r5,1332(sp)
    ae04:	bdc00044 	addi	r23,r23,1
    ae08:	d9814d15 	stw	r6,1332(sp)
    ae0c:	d9014d17 	ldw	r4,1332(sp)
    ae10:	1145883a 	add	r2,r2,r5
    ae14:	11bff404 	addi	r6,r2,-48
    ae18:	20bff404 	addi	r2,r4,-48
    ae1c:	18bff62e 	bgeu	r3,r2,adf8 <___vfprintf_internal_r+0x1240>
    ae20:	3027883a 	mov	r19,r6
    ae24:	303be50e 	bge	r6,zero,9dbc <___vfprintf_internal_r+0x204>
    ae28:	04ffffc4 	movi	r19,-1
    ae2c:	003be306 	br	9dbc <___vfprintf_internal_r+0x204>
    ae30:	d8000405 	stb	zero,16(sp)
    ae34:	39800017 	ldw	r6,0(r7)
    ae38:	39c00104 	addi	r7,r7,4
    ae3c:	d9c14015 	stw	r7,1280(sp)
    ae40:	d9814115 	stw	r6,1284(sp)
    ae44:	3001c926 	beq	r6,zero,b56c <___vfprintf_internal_r+0x19b4>
    ae48:	98000e16 	blt	r19,zero,ae84 <___vfprintf_internal_r+0x12cc>
    ae4c:	d9014117 	ldw	r4,1284(sp)
    ae50:	000b883a 	mov	r5,zero
    ae54:	980d883a 	mov	r6,r19
    ae58:	000f7fc0 	call	f7fc <memchr>
    ae5c:	10025926 	beq	r2,zero,b7c4 <___vfprintf_internal_r+0x1c0c>
    ae60:	d8c14117 	ldw	r3,1284(sp)
    ae64:	10cfc83a 	sub	r7,r2,r3
    ae68:	99c19e16 	blt	r19,r7,b4e4 <___vfprintf_internal_r+0x192c>
    ae6c:	d9c14515 	stw	r7,1300(sp)
    ae70:	38000916 	blt	r7,zero,ae98 <___vfprintf_internal_r+0x12e0>
    ae74:	d8014615 	stw	zero,1304(sp)
    ae78:	003df106 	br	a640 <___vfprintf_internal_r+0xa88>
    ae7c:	b8c00007 	ldb	r3,0(r23)
    ae80:	003bcc06 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ae84:	d9014117 	ldw	r4,1284(sp)
    ae88:	00083d00 	call	83d0 <strlen>
    ae8c:	d8814515 	stw	r2,1300(sp)
    ae90:	100f883a 	mov	r7,r2
    ae94:	103ff70e 	bge	r2,zero,ae74 <___vfprintf_internal_r+0x12bc>
    ae98:	d8014515 	stw	zero,1300(sp)
    ae9c:	d8014615 	stw	zero,1304(sp)
    aea0:	003de706 	br	a640 <___vfprintf_internal_r+0xa88>
    aea4:	20c03fcc 	andi	r3,r4,255
    aea8:	00800044 	movi	r2,1
    aeac:	18802d26 	beq	r3,r2,af64 <___vfprintf_internal_r+0x13ac>
    aeb0:	18800e36 	bltu	r3,r2,aeec <___vfprintf_internal_r+0x1334>
    aeb4:	00800084 	movi	r2,2
    aeb8:	1880fa26 	beq	r3,r2,b2a4 <___vfprintf_internal_r+0x16ec>
    aebc:	01020034 	movhi	r4,2048
    aec0:	21014804 	addi	r4,r4,1312
    aec4:	00083d00 	call	83d0 <strlen>
    aec8:	100f883a 	mov	r7,r2
    aecc:	dcc14515 	stw	r19,1300(sp)
    aed0:	9880010e 	bge	r19,r2,aed8 <___vfprintf_internal_r+0x1320>
    aed4:	d8814515 	stw	r2,1300(sp)
    aed8:	00820034 	movhi	r2,2048
    aedc:	10814804 	addi	r2,r2,1312
    aee0:	dcc14615 	stw	r19,1304(sp)
    aee4:	d8814115 	stw	r2,1284(sp)
    aee8:	003dd506 	br	a640 <___vfprintf_internal_r+0xa88>
    aeec:	d9401904 	addi	r5,sp,100
    aef0:	dd000f04 	addi	r20,sp,60
    aef4:	d9414115 	stw	r5,1284(sp)
    aef8:	880a977a 	slli	r5,r17,29
    aefc:	d9814117 	ldw	r6,1284(sp)
    af00:	8004d0fa 	srli	r2,r16,3
    af04:	8806d0fa 	srli	r3,r17,3
    af08:	810001cc 	andi	r4,r16,7
    af0c:	2884b03a 	or	r2,r5,r2
    af10:	31bfffc4 	addi	r6,r6,-1
    af14:	21000c04 	addi	r4,r4,48
    af18:	d9814115 	stw	r6,1284(sp)
    af1c:	10cab03a 	or	r5,r2,r3
    af20:	31000005 	stb	r4,0(r6)
    af24:	1021883a 	mov	r16,r2
    af28:	1823883a 	mov	r17,r3
    af2c:	283ff21e 	bne	r5,zero,aef8 <___vfprintf_internal_r+0x1340>
    af30:	d8c14c17 	ldw	r3,1328(sp)
    af34:	1880004c 	andi	r2,r3,1
    af38:	1005003a 	cmpeq	r2,r2,zero
    af3c:	103db91e 	bne	r2,zero,a624 <___vfprintf_internal_r+0xa6c>
    af40:	20803fcc 	andi	r2,r4,255
    af44:	1080201c 	xori	r2,r2,128
    af48:	10bfe004 	addi	r2,r2,-128
    af4c:	00c00c04 	movi	r3,48
    af50:	10fdb426 	beq	r2,r3,a624 <___vfprintf_internal_r+0xa6c>
    af54:	31bfffc4 	addi	r6,r6,-1
    af58:	d9814115 	stw	r6,1284(sp)
    af5c:	30c00005 	stb	r3,0(r6)
    af60:	003db006 	br	a624 <___vfprintf_internal_r+0xa6c>
    af64:	88800068 	cmpgeui	r2,r17,1
    af68:	10002c1e 	bne	r2,zero,b01c <___vfprintf_internal_r+0x1464>
    af6c:	8800021e 	bne	r17,zero,af78 <___vfprintf_internal_r+0x13c0>
    af70:	00800244 	movi	r2,9
    af74:	14002936 	bltu	r2,r16,b01c <___vfprintf_internal_r+0x1464>
    af78:	d90018c4 	addi	r4,sp,99
    af7c:	dd000f04 	addi	r20,sp,60
    af80:	d9014115 	stw	r4,1284(sp)
    af84:	d9014117 	ldw	r4,1284(sp)
    af88:	80800c04 	addi	r2,r16,48
    af8c:	20800005 	stb	r2,0(r4)
    af90:	003da406 	br	a624 <___vfprintf_internal_r+0xa6c>
    af94:	dc400d17 	ldw	r17,52(sp)
    af98:	07020034 	movhi	fp,2048
    af9c:	e7014f84 	addi	fp,fp,1342
    afa0:	9425883a 	add	r18,r18,r16
    afa4:	8c400044 	addi	r17,r17,1
    afa8:	008001c4 	movi	r2,7
    afac:	1f000015 	stw	fp,0(r3)
    afb0:	1c000115 	stw	r16,4(r3)
    afb4:	dc800e15 	stw	r18,56(sp)
    afb8:	dc400d15 	stw	r17,52(sp)
    afbc:	147de216 	blt	r2,r17,a748 <___vfprintf_internal_r+0xb90>
    afc0:	18c00204 	addi	r3,r3,8
    afc4:	003c7a06 	br	a1b0 <___vfprintf_internal_r+0x5f8>
    afc8:	01000084 	movi	r4,2
    afcc:	d8000405 	stb	zero,16(sp)
    afd0:	003d8706 	br	a5f0 <___vfprintf_internal_r+0xa38>
    afd4:	d9814c17 	ldw	r6,1328(sp)
    afd8:	30c4703a 	and	r2,r6,r3
    afdc:	1005003a 	cmpeq	r2,r2,zero
    afe0:	103cb926 	beq	r2,zero,a2c8 <___vfprintf_internal_r+0x710>
    afe4:	d9014117 	ldw	r4,1284(sp)
    afe8:	94800044 	addi	r18,r18,1
    afec:	8c400044 	addi	r17,r17,1
    aff0:	008001c4 	movi	r2,7
    aff4:	a9000015 	stw	r4,0(r21)
    aff8:	a8c00115 	stw	r3,4(r21)
    affc:	dc800e15 	stw	r18,56(sp)
    b000:	dc400d15 	stw	r17,52(sp)
    b004:	147e6616 	blt	r2,r17,a9a0 <___vfprintf_internal_r+0xde8>
    b008:	acc00204 	addi	r19,r21,8
    b00c:	003cd706 	br	a36c <___vfprintf_internal_r+0x7b4>
    b010:	07020034 	movhi	fp,2048
    b014:	e7014f84 	addi	fp,fp,1342
    b018:	003c4f06 	br	a158 <___vfprintf_internal_r+0x5a0>
    b01c:	dd000f04 	addi	r20,sp,60
    b020:	dc801904 	addi	r18,sp,100
    b024:	8009883a 	mov	r4,r16
    b028:	880b883a 	mov	r5,r17
    b02c:	01800284 	movi	r6,10
    b030:	000f883a 	mov	r7,zero
    b034:	00120dc0 	call	120dc <__umoddi3>
    b038:	12000c04 	addi	r8,r2,48
    b03c:	94bfffc4 	addi	r18,r18,-1
    b040:	8009883a 	mov	r4,r16
    b044:	880b883a 	mov	r5,r17
    b048:	01800284 	movi	r6,10
    b04c:	000f883a 	mov	r7,zero
    b050:	92000005 	stb	r8,0(r18)
    b054:	0011b000 	call	11b00 <__udivdi3>
    b058:	1009883a 	mov	r4,r2
    b05c:	1021883a 	mov	r16,r2
    b060:	18800068 	cmpgeui	r2,r3,1
    b064:	1823883a 	mov	r17,r3
    b068:	103fee1e 	bne	r2,zero,b024 <___vfprintf_internal_r+0x146c>
    b06c:	1800021e 	bne	r3,zero,b078 <___vfprintf_internal_r+0x14c0>
    b070:	00800244 	movi	r2,9
    b074:	113feb36 	bltu	r2,r4,b024 <___vfprintf_internal_r+0x146c>
    b078:	94bfffc4 	addi	r18,r18,-1
    b07c:	dc814115 	stw	r18,1284(sp)
    b080:	003fc006 	br	af84 <___vfprintf_internal_r+0x13cc>
    b084:	d9014c17 	ldw	r4,1328(sp)
    b088:	2080004c 	andi	r2,r4,1
    b08c:	10009a1e 	bne	r2,zero,b2f8 <___vfprintf_internal_r+0x1740>
    b090:	d9401904 	addi	r5,sp,100
    b094:	dd000f04 	addi	r20,sp,60
    b098:	d9414115 	stw	r5,1284(sp)
    b09c:	003d6106 	br	a624 <___vfprintf_internal_r+0xa6c>
    b0a0:	d9014f17 	ldw	r4,1340(sp)
    b0a4:	b00b883a 	mov	r5,r22
    b0a8:	d9800c04 	addi	r6,sp,48
    b0ac:	0009b600 	call	9b60 <__sprint_r>
    b0b0:	103c791e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b0b4:	dc800e17 	ldw	r18,56(sp)
    b0b8:	d8c01904 	addi	r3,sp,100
    b0bc:	003cff06 	br	a4bc <___vfprintf_internal_r+0x904>
    b0c0:	d8c14c17 	ldw	r3,1328(sp)
    b0c4:	1880040c 	andi	r2,r3,16
    b0c8:	1000711e 	bne	r2,zero,b290 <___vfprintf_internal_r+0x16d8>
    b0cc:	d9014c17 	ldw	r4,1328(sp)
    b0d0:	2080100c 	andi	r2,r4,64
    b0d4:	10006e26 	beq	r2,zero,b290 <___vfprintf_internal_r+0x16d8>
    b0d8:	3c00000b 	ldhu	r16,0(r7)
    b0dc:	0023883a 	mov	r17,zero
    b0e0:	39c00104 	addi	r7,r7,4
    b0e4:	d9c14015 	stw	r7,1280(sp)
    b0e8:	003f0006 	br	acec <___vfprintf_internal_r+0x1134>
    b0ec:	dc400d17 	ldw	r17,52(sp)
    b0f0:	07020034 	movhi	fp,2048
    b0f4:	e7014f84 	addi	fp,fp,1342
    b0f8:	9425883a 	add	r18,r18,r16
    b0fc:	8c400044 	addi	r17,r17,1
    b100:	008001c4 	movi	r2,7
    b104:	1f000015 	stw	fp,0(r3)
    b108:	1c000115 	stw	r16,4(r3)
    b10c:	dc800e15 	stw	r18,56(sp)
    b110:	dc400d15 	stw	r17,52(sp)
    b114:	147d7616 	blt	r2,r17,a6f0 <___vfprintf_internal_r+0xb38>
    b118:	18c00204 	addi	r3,r3,8
    b11c:	003d7b06 	br	a70c <___vfprintf_internal_r+0xb54>
    b120:	dc800e17 	ldw	r18,56(sp)
    b124:	dc400d17 	ldw	r17,52(sp)
    b128:	07020034 	movhi	fp,2048
    b12c:	e7015384 	addi	fp,fp,1358
    b130:	003bc006 	br	a034 <___vfprintf_internal_r+0x47c>
    b134:	d9014f17 	ldw	r4,1340(sp)
    b138:	b00b883a 	mov	r5,r22
    b13c:	d9800c04 	addi	r6,sp,48
    b140:	0009b600 	call	9b60 <__sprint_r>
    b144:	103c541e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b148:	dc800e17 	ldw	r18,56(sp)
    b14c:	d8c01904 	addi	r3,sp,100
    b150:	003ce906 	br	a4f8 <___vfprintf_internal_r+0x940>
    b154:	3c000017 	ldw	r16,0(r7)
    b158:	0009883a 	mov	r4,zero
    b15c:	39c00104 	addi	r7,r7,4
    b160:	0023883a 	mov	r17,zero
    b164:	d9c14015 	stw	r7,1280(sp)
    b168:	d8000405 	stb	zero,16(sp)
    b16c:	003d2006 	br	a5f0 <___vfprintf_internal_r+0xa38>
    b170:	38800017 	ldw	r2,0(r7)
    b174:	39c00104 	addi	r7,r7,4
    b178:	d9c14015 	stw	r7,1280(sp)
    b17c:	1023d7fa 	srai	r17,r2,31
    b180:	1021883a 	mov	r16,r2
    b184:	003d1806 	br	a5e8 <___vfprintf_internal_r+0xa30>
    b188:	3c000017 	ldw	r16,0(r7)
    b18c:	01000044 	movi	r4,1
    b190:	39c00104 	addi	r7,r7,4
    b194:	0023883a 	mov	r17,zero
    b198:	d9c14015 	stw	r7,1280(sp)
    b19c:	d8000405 	stb	zero,16(sp)
    b1a0:	003d1306 	br	a5f0 <___vfprintf_internal_r+0xa38>
    b1a4:	00820034 	movhi	r2,2048
    b1a8:	10814f04 	addi	r2,r2,1340
    b1ac:	94800044 	addi	r18,r18,1
    b1b0:	8c400044 	addi	r17,r17,1
    b1b4:	a8800015 	stw	r2,0(r21)
    b1b8:	00c00044 	movi	r3,1
    b1bc:	008001c4 	movi	r2,7
    b1c0:	a8c00115 	stw	r3,4(r21)
    b1c4:	dc800e15 	stw	r18,56(sp)
    b1c8:	dc400d15 	stw	r17,52(sp)
    b1cc:	1440ca16 	blt	r2,r17,b4f8 <___vfprintf_internal_r+0x1940>
    b1d0:	a8c00204 	addi	r3,r21,8
    b1d4:	2000061e 	bne	r4,zero,b1f0 <___vfprintf_internal_r+0x1638>
    b1d8:	d9414717 	ldw	r5,1308(sp)
    b1dc:	2800041e 	bne	r5,zero,b1f0 <___vfprintf_internal_r+0x1638>
    b1e0:	d9814c17 	ldw	r6,1328(sp)
    b1e4:	3080004c 	andi	r2,r6,1
    b1e8:	1005003a 	cmpeq	r2,r2,zero
    b1ec:	103bf01e 	bne	r2,zero,a1b0 <___vfprintf_internal_r+0x5f8>
    b1f0:	00800044 	movi	r2,1
    b1f4:	dc400d17 	ldw	r17,52(sp)
    b1f8:	18800115 	stw	r2,4(r3)
    b1fc:	d8814917 	ldw	r2,1316(sp)
    b200:	94800044 	addi	r18,r18,1
    b204:	8c400044 	addi	r17,r17,1
    b208:	18800015 	stw	r2,0(r3)
    b20c:	008001c4 	movi	r2,7
    b210:	dc800e15 	stw	r18,56(sp)
    b214:	dc400d15 	stw	r17,52(sp)
    b218:	1440ca16 	blt	r2,r17,b544 <___vfprintf_internal_r+0x198c>
    b21c:	18c00204 	addi	r3,r3,8
    b220:	0121c83a 	sub	r16,zero,r4
    b224:	0400500e 	bge	zero,r16,b368 <___vfprintf_internal_r+0x17b0>
    b228:	00800404 	movi	r2,16
    b22c:	1400800e 	bge	r2,r16,b430 <___vfprintf_internal_r+0x1878>
    b230:	1027883a 	mov	r19,r2
    b234:	07020034 	movhi	fp,2048
    b238:	e7014f84 	addi	fp,fp,1342
    b23c:	050001c4 	movi	r20,7
    b240:	00000306 	br	b250 <___vfprintf_internal_r+0x1698>
    b244:	18c00204 	addi	r3,r3,8
    b248:	843ffc04 	addi	r16,r16,-16
    b24c:	9c007a0e 	bge	r19,r16,b438 <___vfprintf_internal_r+0x1880>
    b250:	94800404 	addi	r18,r18,16
    b254:	8c400044 	addi	r17,r17,1
    b258:	1f000015 	stw	fp,0(r3)
    b25c:	1cc00115 	stw	r19,4(r3)
    b260:	dc800e15 	stw	r18,56(sp)
    b264:	dc400d15 	stw	r17,52(sp)
    b268:	a47ff60e 	bge	r20,r17,b244 <___vfprintf_internal_r+0x168c>
    b26c:	d9014f17 	ldw	r4,1340(sp)
    b270:	b00b883a 	mov	r5,r22
    b274:	d9800c04 	addi	r6,sp,48
    b278:	0009b600 	call	9b60 <__sprint_r>
    b27c:	103c061e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b280:	dc800e17 	ldw	r18,56(sp)
    b284:	dc400d17 	ldw	r17,52(sp)
    b288:	d8c01904 	addi	r3,sp,100
    b28c:	003fee06 	br	b248 <___vfprintf_internal_r+0x1690>
    b290:	3c000017 	ldw	r16,0(r7)
    b294:	0023883a 	mov	r17,zero
    b298:	39c00104 	addi	r7,r7,4
    b29c:	d9c14015 	stw	r7,1280(sp)
    b2a0:	003e9206 	br	acec <___vfprintf_internal_r+0x1134>
    b2a4:	d9401904 	addi	r5,sp,100
    b2a8:	dd000f04 	addi	r20,sp,60
    b2ac:	d9414115 	stw	r5,1284(sp)
    b2b0:	d9814417 	ldw	r6,1296(sp)
    b2b4:	880a973a 	slli	r5,r17,28
    b2b8:	8004d13a 	srli	r2,r16,4
    b2bc:	810003cc 	andi	r4,r16,15
    b2c0:	3109883a 	add	r4,r6,r4
    b2c4:	2884b03a 	or	r2,r5,r2
    b2c8:	21400003 	ldbu	r5,0(r4)
    b2cc:	d9014117 	ldw	r4,1284(sp)
    b2d0:	8806d13a 	srli	r3,r17,4
    b2d4:	1021883a 	mov	r16,r2
    b2d8:	213fffc4 	addi	r4,r4,-1
    b2dc:	d9014115 	stw	r4,1284(sp)
    b2e0:	d9814117 	ldw	r6,1284(sp)
    b2e4:	10c8b03a 	or	r4,r2,r3
    b2e8:	1823883a 	mov	r17,r3
    b2ec:	31400005 	stb	r5,0(r6)
    b2f0:	203fef1e 	bne	r4,zero,b2b0 <___vfprintf_internal_r+0x16f8>
    b2f4:	003ccb06 	br	a624 <___vfprintf_internal_r+0xa6c>
    b2f8:	00800c04 	movi	r2,48
    b2fc:	d98018c4 	addi	r6,sp,99
    b300:	dd000f04 	addi	r20,sp,60
    b304:	d88018c5 	stb	r2,99(sp)
    b308:	d9814115 	stw	r6,1284(sp)
    b30c:	003cc506 	br	a624 <___vfprintf_internal_r+0xa6c>
    b310:	dc400d17 	ldw	r17,52(sp)
    b314:	07020034 	movhi	fp,2048
    b318:	e7015384 	addi	fp,fp,1358
    b31c:	003bc706 	br	a23c <___vfprintf_internal_r+0x684>
    b320:	d9414c17 	ldw	r5,1328(sp)
    b324:	2880040c 	andi	r2,r5,16
    b328:	10007c26 	beq	r2,zero,b51c <___vfprintf_internal_r+0x1964>
    b32c:	38800017 	ldw	r2,0(r7)
    b330:	39c00104 	addi	r7,r7,4
    b334:	d9c14015 	stw	r7,1280(sp)
    b338:	d9814b17 	ldw	r6,1324(sp)
    b33c:	d9c14017 	ldw	r7,1280(sp)
    b340:	11800015 	stw	r6,0(r2)
    b344:	003a7806 	br	9d28 <___vfprintf_internal_r+0x170>
    b348:	d9014f17 	ldw	r4,1340(sp)
    b34c:	b00b883a 	mov	r5,r22
    b350:	d9800c04 	addi	r6,sp,48
    b354:	0009b600 	call	9b60 <__sprint_r>
    b358:	103bcf1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b35c:	dc800e17 	ldw	r18,56(sp)
    b360:	dc400d17 	ldw	r17,52(sp)
    b364:	d8c01904 	addi	r3,sp,100
    b368:	d9014717 	ldw	r4,1308(sp)
    b36c:	d9414117 	ldw	r5,1284(sp)
    b370:	8c400044 	addi	r17,r17,1
    b374:	9125883a 	add	r18,r18,r4
    b378:	008001c4 	movi	r2,7
    b37c:	19400015 	stw	r5,0(r3)
    b380:	19000115 	stw	r4,4(r3)
    b384:	dc800e15 	stw	r18,56(sp)
    b388:	dc400d15 	stw	r17,52(sp)
    b38c:	147cee16 	blt	r2,r17,a748 <___vfprintf_internal_r+0xb90>
    b390:	18c00204 	addi	r3,r3,8
    b394:	003b8606 	br	a1b0 <___vfprintf_internal_r+0x5f8>
    b398:	38c00017 	ldw	r3,0(r7)
    b39c:	39000204 	addi	r4,r7,8
    b3a0:	d9014015 	stw	r4,1280(sp)
    b3a4:	d8c14215 	stw	r3,1288(sp)
    b3a8:	39c00117 	ldw	r7,4(r7)
    b3ac:	d9c14315 	stw	r7,1292(sp)
    b3b0:	003e2006 	br	ac34 <___vfprintf_internal_r+0x107c>
    b3b4:	0005883a 	mov	r2,zero
    b3b8:	1409c83a 	sub	r4,r2,r16
    b3bc:	1105803a 	cmpltu	r2,r2,r4
    b3c0:	044bc83a 	sub	r5,zero,r17
    b3c4:	2885c83a 	sub	r2,r5,r2
    b3c8:	2021883a 	mov	r16,r4
    b3cc:	1023883a 	mov	r17,r2
    b3d0:	01000044 	movi	r4,1
    b3d4:	00800b44 	movi	r2,45
    b3d8:	d8800405 	stb	r2,16(sp)
    b3dc:	003c8406 	br	a5f0 <___vfprintf_internal_r+0xa38>
    b3e0:	d9014f17 	ldw	r4,1340(sp)
    b3e4:	b00b883a 	mov	r5,r22
    b3e8:	d9800c04 	addi	r6,sp,48
    b3ec:	0009b600 	call	9b60 <__sprint_r>
    b3f0:	103ba91e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b3f4:	dc800e17 	ldw	r18,56(sp)
    b3f8:	dc400d17 	ldw	r17,52(sp)
    b3fc:	d9000517 	ldw	r4,20(sp)
    b400:	d9401904 	addi	r5,sp,100
    b404:	003da706 	br	aaa4 <___vfprintf_internal_r+0xeec>
    b408:	d9014f17 	ldw	r4,1340(sp)
    b40c:	b00b883a 	mov	r5,r22
    b410:	d9800c04 	addi	r6,sp,48
    b414:	0009b600 	call	9b60 <__sprint_r>
    b418:	103b9f1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b41c:	dc800e17 	ldw	r18,56(sp)
    b420:	dc400d17 	ldw	r17,52(sp)
    b424:	d9000517 	ldw	r4,20(sp)
    b428:	d8c01904 	addi	r3,sp,100
    b42c:	003d9106 	br	aa74 <___vfprintf_internal_r+0xebc>
    b430:	07020034 	movhi	fp,2048
    b434:	e7014f84 	addi	fp,fp,1342
    b438:	9425883a 	add	r18,r18,r16
    b43c:	8c400044 	addi	r17,r17,1
    b440:	008001c4 	movi	r2,7
    b444:	1f000015 	stw	fp,0(r3)
    b448:	1c000115 	stw	r16,4(r3)
    b44c:	dc800e15 	stw	r18,56(sp)
    b450:	dc400d15 	stw	r17,52(sp)
    b454:	147fbc16 	blt	r2,r17,b348 <___vfprintf_internal_r+0x1790>
    b458:	18c00204 	addi	r3,r3,8
    b45c:	003fc206 	br	b368 <___vfprintf_internal_r+0x17b0>
    b460:	d9014f17 	ldw	r4,1340(sp)
    b464:	b00b883a 	mov	r5,r22
    b468:	d9800c04 	addi	r6,sp,48
    b46c:	0009b600 	call	9b60 <__sprint_r>
    b470:	103b891e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b474:	dc800e17 	ldw	r18,56(sp)
    b478:	d9000517 	ldw	r4,20(sp)
    b47c:	d8c01904 	addi	r3,sp,100
    b480:	003d0206 	br	a88c <___vfprintf_internal_r+0xcd4>
    b484:	07020034 	movhi	fp,2048
    b488:	e7014f84 	addi	fp,fp,1342
    b48c:	003be406 	br	a420 <___vfprintf_internal_r+0x868>
    b490:	00820034 	movhi	r2,2048
    b494:	10813e04 	addi	r2,r2,1272
    b498:	d8814115 	stw	r2,1284(sp)
    b49c:	003df506 	br	ac74 <___vfprintf_internal_r+0x10bc>
    b4a0:	d9014217 	ldw	r4,1288(sp)
    b4a4:	d9414317 	ldw	r5,1292(sp)
    b4a8:	00111d40 	call	111d4 <__isnand>
    b4ac:	10003926 	beq	r2,zero,b594 <___vfprintf_internal_r+0x19dc>
    b4b0:	d9414d17 	ldw	r5,1332(sp)
    b4b4:	008011c4 	movi	r2,71
    b4b8:	1140ce16 	blt	r2,r5,b7f4 <___vfprintf_internal_r+0x1c3c>
    b4bc:	01820034 	movhi	r6,2048
    b4c0:	31813f04 	addi	r6,r6,1276
    b4c4:	d9814115 	stw	r6,1284(sp)
    b4c8:	003dea06 	br	ac74 <___vfprintf_internal_r+0x10bc>
    b4cc:	d9014c17 	ldw	r4,1328(sp)
    b4d0:	bdc00044 	addi	r23,r23,1
    b4d4:	b8c00007 	ldb	r3,0(r23)
    b4d8:	21000814 	ori	r4,r4,32
    b4dc:	d9014c15 	stw	r4,1328(sp)
    b4e0:	003a3406 	br	9db4 <___vfprintf_internal_r+0x1fc>
    b4e4:	dcc14515 	stw	r19,1300(sp)
    b4e8:	98011016 	blt	r19,zero,b92c <___vfprintf_internal_r+0x1d74>
    b4ec:	980f883a 	mov	r7,r19
    b4f0:	d8014615 	stw	zero,1304(sp)
    b4f4:	003c5206 	br	a640 <___vfprintf_internal_r+0xa88>
    b4f8:	d9014f17 	ldw	r4,1340(sp)
    b4fc:	b00b883a 	mov	r5,r22
    b500:	d9800c04 	addi	r6,sp,48
    b504:	0009b600 	call	9b60 <__sprint_r>
    b508:	103b631e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b50c:	dc800e17 	ldw	r18,56(sp)
    b510:	d9000517 	ldw	r4,20(sp)
    b514:	d8c01904 	addi	r3,sp,100
    b518:	003f2e06 	br	b1d4 <___vfprintf_internal_r+0x161c>
    b51c:	d8c14c17 	ldw	r3,1328(sp)
    b520:	1880100c 	andi	r2,r3,64
    b524:	1000a026 	beq	r2,zero,b7a8 <___vfprintf_internal_r+0x1bf0>
    b528:	38800017 	ldw	r2,0(r7)
    b52c:	39c00104 	addi	r7,r7,4
    b530:	d9c14015 	stw	r7,1280(sp)
    b534:	d9014b17 	ldw	r4,1324(sp)
    b538:	d9c14017 	ldw	r7,1280(sp)
    b53c:	1100000d 	sth	r4,0(r2)
    b540:	0039f906 	br	9d28 <___vfprintf_internal_r+0x170>
    b544:	d9014f17 	ldw	r4,1340(sp)
    b548:	b00b883a 	mov	r5,r22
    b54c:	d9800c04 	addi	r6,sp,48
    b550:	0009b600 	call	9b60 <__sprint_r>
    b554:	103b501e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b558:	dc800e17 	ldw	r18,56(sp)
    b55c:	dc400d17 	ldw	r17,52(sp)
    b560:	d9000517 	ldw	r4,20(sp)
    b564:	d8c01904 	addi	r3,sp,100
    b568:	003f2d06 	br	b220 <___vfprintf_internal_r+0x1668>
    b56c:	00800184 	movi	r2,6
    b570:	14c09a36 	bltu	r2,r19,b7dc <___vfprintf_internal_r+0x1c24>
    b574:	dcc14515 	stw	r19,1300(sp)
    b578:	9800010e 	bge	r19,zero,b580 <___vfprintf_internal_r+0x19c8>
    b57c:	d8014515 	stw	zero,1300(sp)
    b580:	00820034 	movhi	r2,2048
    b584:	10814104 	addi	r2,r2,1284
    b588:	980f883a 	mov	r7,r19
    b58c:	d8814115 	stw	r2,1284(sp)
    b590:	003a7806 	br	9f74 <___vfprintf_internal_r+0x3bc>
    b594:	00bfffc4 	movi	r2,-1
    b598:	9880e226 	beq	r19,r2,b924 <___vfprintf_internal_r+0x1d6c>
    b59c:	d9414d17 	ldw	r5,1332(sp)
    b5a0:	008019c4 	movi	r2,103
    b5a4:	2880dc26 	beq	r5,r2,b918 <___vfprintf_internal_r+0x1d60>
    b5a8:	008011c4 	movi	r2,71
    b5ac:	2880da26 	beq	r5,r2,b918 <___vfprintf_internal_r+0x1d60>
    b5b0:	d9414c17 	ldw	r5,1328(sp)
    b5b4:	d9014317 	ldw	r4,1292(sp)
    b5b8:	d9814217 	ldw	r6,1288(sp)
    b5bc:	29404014 	ori	r5,r5,256
    b5c0:	d9414c15 	stw	r5,1328(sp)
    b5c4:	2000cc16 	blt	r4,zero,b8f8 <___vfprintf_internal_r+0x1d40>
    b5c8:	3021883a 	mov	r16,r6
    b5cc:	2023883a 	mov	r17,r4
    b5d0:	0039883a 	mov	fp,zero
    b5d4:	d9414d17 	ldw	r5,1332(sp)
    b5d8:	00801984 	movi	r2,102
    b5dc:	2880b726 	beq	r5,r2,b8bc <___vfprintf_internal_r+0x1d04>
    b5e0:	00801184 	movi	r2,70
    b5e4:	2880b526 	beq	r5,r2,b8bc <___vfprintf_internal_r+0x1d04>
    b5e8:	00801944 	movi	r2,101
    b5ec:	2880c826 	beq	r5,r2,b910 <___vfprintf_internal_r+0x1d58>
    b5f0:	00801144 	movi	r2,69
    b5f4:	2880c626 	beq	r5,r2,b910 <___vfprintf_internal_r+0x1d58>
    b5f8:	9829883a 	mov	r20,r19
    b5fc:	d9014f17 	ldw	r4,1340(sp)
    b600:	d8800504 	addi	r2,sp,20
    b604:	880d883a 	mov	r6,r17
    b608:	d8800115 	stw	r2,4(sp)
    b60c:	d8c00604 	addi	r3,sp,24
    b610:	d8800704 	addi	r2,sp,28
    b614:	800b883a 	mov	r5,r16
    b618:	01c00084 	movi	r7,2
    b61c:	d8c00215 	stw	r3,8(sp)
    b620:	d8800315 	stw	r2,12(sp)
    b624:	dd000015 	stw	r20,0(sp)
    b628:	000bddc0 	call	bddc <_dtoa_r>
    b62c:	d9814d17 	ldw	r6,1332(sp)
    b630:	d8814115 	stw	r2,1284(sp)
    b634:	008019c4 	movi	r2,103
    b638:	30809526 	beq	r6,r2,b890 <___vfprintf_internal_r+0x1cd8>
    b63c:	d8c14d17 	ldw	r3,1332(sp)
    b640:	008011c4 	movi	r2,71
    b644:	18809226 	beq	r3,r2,b890 <___vfprintf_internal_r+0x1cd8>
    b648:	d9414117 	ldw	r5,1284(sp)
    b64c:	d9814d17 	ldw	r6,1332(sp)
    b650:	00801984 	movi	r2,102
    b654:	2d25883a 	add	r18,r5,r20
    b658:	30808626 	beq	r6,r2,b874 <___vfprintf_internal_r+0x1cbc>
    b65c:	00801184 	movi	r2,70
    b660:	30808426 	beq	r6,r2,b874 <___vfprintf_internal_r+0x1cbc>
    b664:	000d883a 	mov	r6,zero
    b668:	000f883a 	mov	r7,zero
    b66c:	880b883a 	mov	r5,r17
    b670:	8009883a 	mov	r4,r16
    b674:	00127f40 	call	127f4 <__eqdf2>
    b678:	1000751e 	bne	r2,zero,b850 <___vfprintf_internal_r+0x1c98>
    b67c:	9005883a 	mov	r2,r18
    b680:	dc800715 	stw	r18,28(sp)
    b684:	d9014117 	ldw	r4,1284(sp)
    b688:	d9414d17 	ldw	r5,1332(sp)
    b68c:	00c019c4 	movi	r3,103
    b690:	1125c83a 	sub	r18,r2,r4
    b694:	28c06826 	beq	r5,r3,b838 <___vfprintf_internal_r+0x1c80>
    b698:	008011c4 	movi	r2,71
    b69c:	28806626 	beq	r5,r2,b838 <___vfprintf_internal_r+0x1c80>
    b6a0:	d9000517 	ldw	r4,20(sp)
    b6a4:	d8c14d17 	ldw	r3,1332(sp)
    b6a8:	00801944 	movi	r2,101
    b6ac:	10c05516 	blt	r2,r3,b804 <___vfprintf_internal_r+0x1c4c>
    b6b0:	213fffc4 	addi	r4,r4,-1
    b6b4:	d9000515 	stw	r4,20(sp)
    b6b8:	d8c00805 	stb	r3,32(sp)
    b6bc:	2021883a 	mov	r16,r4
    b6c0:	2000c116 	blt	r4,zero,b9c8 <___vfprintf_internal_r+0x1e10>
    b6c4:	00800ac4 	movi	r2,43
    b6c8:	d8800845 	stb	r2,33(sp)
    b6cc:	00800244 	movi	r2,9
    b6d0:	1400af0e 	bge	r2,r16,b990 <___vfprintf_internal_r+0x1dd8>
    b6d4:	1027883a 	mov	r19,r2
    b6d8:	dc400b84 	addi	r17,sp,46
    b6dc:	8009883a 	mov	r4,r16
    b6e0:	01400284 	movi	r5,10
    b6e4:	0012c700 	call	12c70 <__modsi3>
    b6e8:	10800c04 	addi	r2,r2,48
    b6ec:	8c7fffc4 	addi	r17,r17,-1
    b6f0:	8009883a 	mov	r4,r16
    b6f4:	01400284 	movi	r5,10
    b6f8:	88800005 	stb	r2,0(r17)
    b6fc:	0012c100 	call	12c10 <__divsi3>
    b700:	1021883a 	mov	r16,r2
    b704:	98bff516 	blt	r19,r2,b6dc <___vfprintf_internal_r+0x1b24>
    b708:	10c00c04 	addi	r3,r2,48
    b70c:	d88009c4 	addi	r2,sp,39
    b710:	108001c4 	addi	r2,r2,7
    b714:	897fffc4 	addi	r5,r17,-1
    b718:	88ffffc5 	stb	r3,-1(r17)
    b71c:	2880a72e 	bgeu	r5,r2,b9bc <___vfprintf_internal_r+0x1e04>
    b720:	1009883a 	mov	r4,r2
    b724:	d9800804 	addi	r6,sp,32
    b728:	d8c00884 	addi	r3,sp,34
    b72c:	28800003 	ldbu	r2,0(r5)
    b730:	29400044 	addi	r5,r5,1
    b734:	18800005 	stb	r2,0(r3)
    b738:	18c00044 	addi	r3,r3,1
    b73c:	293ffb36 	bltu	r5,r4,b72c <___vfprintf_internal_r+0x1b74>
    b740:	1987c83a 	sub	r3,r3,r6
    b744:	00800044 	movi	r2,1
    b748:	d8c14815 	stw	r3,1312(sp)
    b74c:	90cf883a 	add	r7,r18,r3
    b750:	1480960e 	bge	r2,r18,b9ac <___vfprintf_internal_r+0x1df4>
    b754:	39c00044 	addi	r7,r7,1
    b758:	d9c14515 	stw	r7,1300(sp)
    b75c:	38003416 	blt	r7,zero,b830 <___vfprintf_internal_r+0x1c78>
    b760:	e0803fcc 	andi	r2,fp,255
    b764:	1080201c 	xori	r2,r2,128
    b768:	10bfe004 	addi	r2,r2,-128
    b76c:	10004e26 	beq	r2,zero,b8a8 <___vfprintf_internal_r+0x1cf0>
    b770:	00800b44 	movi	r2,45
    b774:	dc814715 	stw	r18,1308(sp)
    b778:	d8014615 	stw	zero,1304(sp)
    b77c:	d8800405 	stb	r2,16(sp)
    b780:	003bb106 	br	a648 <___vfprintf_internal_r+0xa90>
    b784:	00800b44 	movi	r2,45
    b788:	d8800405 	stb	r2,16(sp)
    b78c:	003d3306 	br	ac5c <___vfprintf_internal_r+0x10a4>
    b790:	d9014f17 	ldw	r4,1340(sp)
    b794:	b00b883a 	mov	r5,r22
    b798:	d9800c04 	addi	r6,sp,48
    b79c:	0009b600 	call	9b60 <__sprint_r>
    b7a0:	103abd1e 	bne	r2,zero,a298 <___vfprintf_internal_r+0x6e0>
    b7a4:	003abb06 	br	a294 <___vfprintf_internal_r+0x6dc>
    b7a8:	38800017 	ldw	r2,0(r7)
    b7ac:	39c00104 	addi	r7,r7,4
    b7b0:	d9c14015 	stw	r7,1280(sp)
    b7b4:	d9414b17 	ldw	r5,1324(sp)
    b7b8:	d9c14017 	ldw	r7,1280(sp)
    b7bc:	11400015 	stw	r5,0(r2)
    b7c0:	00395906 	br	9d28 <___vfprintf_internal_r+0x170>
    b7c4:	980f883a 	mov	r7,r19
    b7c8:	dcc14515 	stw	r19,1300(sp)
    b7cc:	d8014615 	stw	zero,1304(sp)
    b7d0:	003b9b06 	br	a640 <___vfprintf_internal_r+0xa88>
    b7d4:	0027883a 	mov	r19,zero
    b7d8:	00397806 	br	9dbc <___vfprintf_internal_r+0x204>
    b7dc:	00c20034 	movhi	r3,2048
    b7e0:	18c14104 	addi	r3,r3,1284
    b7e4:	100f883a 	mov	r7,r2
    b7e8:	d8814515 	stw	r2,1300(sp)
    b7ec:	d8c14115 	stw	r3,1284(sp)
    b7f0:	0039e006 	br	9f74 <___vfprintf_internal_r+0x3bc>
    b7f4:	00820034 	movhi	r2,2048
    b7f8:	10814004 	addi	r2,r2,1280
    b7fc:	d8814115 	stw	r2,1284(sp)
    b800:	003d1c06 	br	ac74 <___vfprintf_internal_r+0x10bc>
    b804:	d9414d17 	ldw	r5,1332(sp)
    b808:	00801984 	movi	r2,102
    b80c:	28804926 	beq	r5,r2,b934 <___vfprintf_internal_r+0x1d7c>
    b810:	200f883a 	mov	r7,r4
    b814:	24805716 	blt	r4,r18,b974 <___vfprintf_internal_r+0x1dbc>
    b818:	d9414c17 	ldw	r5,1328(sp)
    b81c:	2880004c 	andi	r2,r5,1
    b820:	10000126 	beq	r2,zero,b828 <___vfprintf_internal_r+0x1c70>
    b824:	21c00044 	addi	r7,r4,1
    b828:	d9c14515 	stw	r7,1300(sp)
    b82c:	383fcc0e 	bge	r7,zero,b760 <___vfprintf_internal_r+0x1ba8>
    b830:	d8014515 	stw	zero,1300(sp)
    b834:	003fca06 	br	b760 <___vfprintf_internal_r+0x1ba8>
    b838:	d9000517 	ldw	r4,20(sp)
    b83c:	00bfff04 	movi	r2,-4
    b840:	1100480e 	bge	r2,r4,b964 <___vfprintf_internal_r+0x1dac>
    b844:	99004716 	blt	r19,r4,b964 <___vfprintf_internal_r+0x1dac>
    b848:	d8c14d15 	stw	r3,1332(sp)
    b84c:	003ff006 	br	b810 <___vfprintf_internal_r+0x1c58>
    b850:	d8800717 	ldw	r2,28(sp)
    b854:	14bf8b2e 	bgeu	r2,r18,b684 <___vfprintf_internal_r+0x1acc>
    b858:	9007883a 	mov	r3,r18
    b85c:	01000c04 	movi	r4,48
    b860:	11000005 	stb	r4,0(r2)
    b864:	10800044 	addi	r2,r2,1
    b868:	d8800715 	stw	r2,28(sp)
    b86c:	18bffc1e 	bne	r3,r2,b860 <___vfprintf_internal_r+0x1ca8>
    b870:	003f8406 	br	b684 <___vfprintf_internal_r+0x1acc>
    b874:	d8814117 	ldw	r2,1284(sp)
    b878:	10c00007 	ldb	r3,0(r2)
    b87c:	00800c04 	movi	r2,48
    b880:	18805b26 	beq	r3,r2,b9f0 <___vfprintf_internal_r+0x1e38>
    b884:	d9000517 	ldw	r4,20(sp)
    b888:	9125883a 	add	r18,r18,r4
    b88c:	003f7506 	br	b664 <___vfprintf_internal_r+0x1aac>
    b890:	d9014c17 	ldw	r4,1328(sp)
    b894:	2080004c 	andi	r2,r4,1
    b898:	1005003a 	cmpeq	r2,r2,zero
    b89c:	103f6a26 	beq	r2,zero,b648 <___vfprintf_internal_r+0x1a90>
    b8a0:	d8800717 	ldw	r2,28(sp)
    b8a4:	003f7706 	br	b684 <___vfprintf_internal_r+0x1acc>
    b8a8:	d9c14515 	stw	r7,1300(sp)
    b8ac:	38004d16 	blt	r7,zero,b9e4 <___vfprintf_internal_r+0x1e2c>
    b8b0:	dc814715 	stw	r18,1308(sp)
    b8b4:	d8014615 	stw	zero,1304(sp)
    b8b8:	003b6106 	br	a640 <___vfprintf_internal_r+0xa88>
    b8bc:	d9014f17 	ldw	r4,1340(sp)
    b8c0:	d8800504 	addi	r2,sp,20
    b8c4:	d8800115 	stw	r2,4(sp)
    b8c8:	d8c00604 	addi	r3,sp,24
    b8cc:	d8800704 	addi	r2,sp,28
    b8d0:	800b883a 	mov	r5,r16
    b8d4:	880d883a 	mov	r6,r17
    b8d8:	01c000c4 	movi	r7,3
    b8dc:	d8c00215 	stw	r3,8(sp)
    b8e0:	d8800315 	stw	r2,12(sp)
    b8e4:	dcc00015 	stw	r19,0(sp)
    b8e8:	9829883a 	mov	r20,r19
    b8ec:	000bddc0 	call	bddc <_dtoa_r>
    b8f0:	d8814115 	stw	r2,1284(sp)
    b8f4:	003f5106 	br	b63c <___vfprintf_internal_r+0x1a84>
    b8f8:	d8c14217 	ldw	r3,1288(sp)
    b8fc:	d9014317 	ldw	r4,1292(sp)
    b900:	07000b44 	movi	fp,45
    b904:	1821883a 	mov	r16,r3
    b908:	2460003c 	xorhi	r17,r4,32768
    b90c:	003f3106 	br	b5d4 <___vfprintf_internal_r+0x1a1c>
    b910:	9d000044 	addi	r20,r19,1
    b914:	003f3906 	br	b5fc <___vfprintf_internal_r+0x1a44>
    b918:	983f251e 	bne	r19,zero,b5b0 <___vfprintf_internal_r+0x19f8>
    b91c:	04c00044 	movi	r19,1
    b920:	003f2306 	br	b5b0 <___vfprintf_internal_r+0x19f8>
    b924:	04c00184 	movi	r19,6
    b928:	003f2106 	br	b5b0 <___vfprintf_internal_r+0x19f8>
    b92c:	d8014515 	stw	zero,1300(sp)
    b930:	003eee06 	br	b4ec <___vfprintf_internal_r+0x1934>
    b934:	200f883a 	mov	r7,r4
    b938:	0100370e 	bge	zero,r4,ba18 <___vfprintf_internal_r+0x1e60>
    b93c:	9800031e 	bne	r19,zero,b94c <___vfprintf_internal_r+0x1d94>
    b940:	d9814c17 	ldw	r6,1328(sp)
    b944:	3080004c 	andi	r2,r6,1
    b948:	103fb726 	beq	r2,zero,b828 <___vfprintf_internal_r+0x1c70>
    b94c:	20800044 	addi	r2,r4,1
    b950:	98a7883a 	add	r19,r19,r2
    b954:	dcc14515 	stw	r19,1300(sp)
    b958:	980f883a 	mov	r7,r19
    b95c:	983f800e 	bge	r19,zero,b760 <___vfprintf_internal_r+0x1ba8>
    b960:	003fb306 	br	b830 <___vfprintf_internal_r+0x1c78>
    b964:	d9814d17 	ldw	r6,1332(sp)
    b968:	31bfff84 	addi	r6,r6,-2
    b96c:	d9814d15 	stw	r6,1332(sp)
    b970:	003f4c06 	br	b6a4 <___vfprintf_internal_r+0x1aec>
    b974:	0100180e 	bge	zero,r4,b9d8 <___vfprintf_internal_r+0x1e20>
    b978:	00800044 	movi	r2,1
    b97c:	1485883a 	add	r2,r2,r18
    b980:	d8814515 	stw	r2,1300(sp)
    b984:	100f883a 	mov	r7,r2
    b988:	103f750e 	bge	r2,zero,b760 <___vfprintf_internal_r+0x1ba8>
    b98c:	003fa806 	br	b830 <___vfprintf_internal_r+0x1c78>
    b990:	80c00c04 	addi	r3,r16,48
    b994:	00800c04 	movi	r2,48
    b998:	d8c008c5 	stb	r3,35(sp)
    b99c:	d9800804 	addi	r6,sp,32
    b9a0:	d8c00904 	addi	r3,sp,36
    b9a4:	d8800885 	stb	r2,34(sp)
    b9a8:	003f6506 	br	b740 <___vfprintf_internal_r+0x1b88>
    b9ac:	d9014c17 	ldw	r4,1328(sp)
    b9b0:	2084703a 	and	r2,r4,r2
    b9b4:	103f9c26 	beq	r2,zero,b828 <___vfprintf_internal_r+0x1c70>
    b9b8:	003f6606 	br	b754 <___vfprintf_internal_r+0x1b9c>
    b9bc:	d9800804 	addi	r6,sp,32
    b9c0:	d8c00884 	addi	r3,sp,34
    b9c4:	003f5e06 	br	b740 <___vfprintf_internal_r+0x1b88>
    b9c8:	00800b44 	movi	r2,45
    b9cc:	0121c83a 	sub	r16,zero,r4
    b9d0:	d8800845 	stb	r2,33(sp)
    b9d4:	003f3d06 	br	b6cc <___vfprintf_internal_r+0x1b14>
    b9d8:	00800084 	movi	r2,2
    b9dc:	1105c83a 	sub	r2,r2,r4
    b9e0:	003fe606 	br	b97c <___vfprintf_internal_r+0x1dc4>
    b9e4:	d8014515 	stw	zero,1300(sp)
    b9e8:	dc814715 	stw	r18,1308(sp)
    b9ec:	003fb106 	br	b8b4 <___vfprintf_internal_r+0x1cfc>
    b9f0:	000d883a 	mov	r6,zero
    b9f4:	000f883a 	mov	r7,zero
    b9f8:	8009883a 	mov	r4,r16
    b9fc:	880b883a 	mov	r5,r17
    ba00:	001287c0 	call	1287c <__nedf2>
    ba04:	103f9f26 	beq	r2,zero,b884 <___vfprintf_internal_r+0x1ccc>
    ba08:	00800044 	movi	r2,1
    ba0c:	1509c83a 	sub	r4,r2,r20
    ba10:	d9000515 	stw	r4,20(sp)
    ba14:	003f9b06 	br	b884 <___vfprintf_internal_r+0x1ccc>
    ba18:	98000d1e 	bne	r19,zero,ba50 <___vfprintf_internal_r+0x1e98>
    ba1c:	d8c14c17 	ldw	r3,1328(sp)
    ba20:	1880004c 	andi	r2,r3,1
    ba24:	10000a1e 	bne	r2,zero,ba50 <___vfprintf_internal_r+0x1e98>
    ba28:	01000044 	movi	r4,1
    ba2c:	200f883a 	mov	r7,r4
    ba30:	d9014515 	stw	r4,1300(sp)
    ba34:	003f4a06 	br	b760 <___vfprintf_internal_r+0x1ba8>
    ba38:	3cc00017 	ldw	r19,0(r7)
    ba3c:	39c00104 	addi	r7,r7,4
    ba40:	983d0e0e 	bge	r19,zero,ae7c <___vfprintf_internal_r+0x12c4>
    ba44:	b8c00007 	ldb	r3,0(r23)
    ba48:	04ffffc4 	movi	r19,-1
    ba4c:	0038d906 	br	9db4 <___vfprintf_internal_r+0x1fc>
    ba50:	9cc00084 	addi	r19,r19,2
    ba54:	dcc14515 	stw	r19,1300(sp)
    ba58:	980f883a 	mov	r7,r19
    ba5c:	983f400e 	bge	r19,zero,b760 <___vfprintf_internal_r+0x1ba8>
    ba60:	003f7306 	br	b830 <___vfprintf_internal_r+0x1c78>

0000ba64 <__vfprintf_internal>:
    ba64:	00820034 	movhi	r2,2048
    ba68:	108a1f04 	addi	r2,r2,10364
    ba6c:	2013883a 	mov	r9,r4
    ba70:	11000017 	ldw	r4,0(r2)
    ba74:	2805883a 	mov	r2,r5
    ba78:	300f883a 	mov	r7,r6
    ba7c:	480b883a 	mov	r5,r9
    ba80:	100d883a 	mov	r6,r2
    ba84:	0009bb81 	jmpi	9bb8 <___vfprintf_internal_r>

0000ba88 <__swsetup_r>:
    ba88:	00820034 	movhi	r2,2048
    ba8c:	108a1f04 	addi	r2,r2,10364
    ba90:	10c00017 	ldw	r3,0(r2)
    ba94:	defffd04 	addi	sp,sp,-12
    ba98:	dc400115 	stw	r17,4(sp)
    ba9c:	dc000015 	stw	r16,0(sp)
    baa0:	dfc00215 	stw	ra,8(sp)
    baa4:	2023883a 	mov	r17,r4
    baa8:	2821883a 	mov	r16,r5
    baac:	18000226 	beq	r3,zero,bab8 <__swsetup_r+0x30>
    bab0:	18800e17 	ldw	r2,56(r3)
    bab4:	10001f26 	beq	r2,zero,bb34 <__swsetup_r+0xac>
    bab8:	8100030b 	ldhu	r4,12(r16)
    babc:	2080020c 	andi	r2,r4,8
    bac0:	10002826 	beq	r2,zero,bb64 <__swsetup_r+0xdc>
    bac4:	81400417 	ldw	r5,16(r16)
    bac8:	28001d26 	beq	r5,zero,bb40 <__swsetup_r+0xb8>
    bacc:	2080004c 	andi	r2,r4,1
    bad0:	1005003a 	cmpeq	r2,r2,zero
    bad4:	10000b26 	beq	r2,zero,bb04 <__swsetup_r+0x7c>
    bad8:	2080008c 	andi	r2,r4,2
    badc:	10001226 	beq	r2,zero,bb28 <__swsetup_r+0xa0>
    bae0:	0005883a 	mov	r2,zero
    bae4:	80800215 	stw	r2,8(r16)
    bae8:	28000b26 	beq	r5,zero,bb18 <__swsetup_r+0x90>
    baec:	0005883a 	mov	r2,zero
    baf0:	dfc00217 	ldw	ra,8(sp)
    baf4:	dc400117 	ldw	r17,4(sp)
    baf8:	dc000017 	ldw	r16,0(sp)
    bafc:	dec00304 	addi	sp,sp,12
    bb00:	f800283a 	ret
    bb04:	80800517 	ldw	r2,20(r16)
    bb08:	80000215 	stw	zero,8(r16)
    bb0c:	0085c83a 	sub	r2,zero,r2
    bb10:	80800615 	stw	r2,24(r16)
    bb14:	283ff51e 	bne	r5,zero,baec <__swsetup_r+0x64>
    bb18:	2080200c 	andi	r2,r4,128
    bb1c:	103ff326 	beq	r2,zero,baec <__swsetup_r+0x64>
    bb20:	00bfffc4 	movi	r2,-1
    bb24:	003ff206 	br	baf0 <__swsetup_r+0x68>
    bb28:	80800517 	ldw	r2,20(r16)
    bb2c:	80800215 	stw	r2,8(r16)
    bb30:	003fed06 	br	bae8 <__swsetup_r+0x60>
    bb34:	1809883a 	mov	r4,r3
    bb38:	000d6280 	call	d628 <__sinit>
    bb3c:	003fde06 	br	bab8 <__swsetup_r+0x30>
    bb40:	20c0a00c 	andi	r3,r4,640
    bb44:	00808004 	movi	r2,512
    bb48:	18bfe026 	beq	r3,r2,bacc <__swsetup_r+0x44>
    bb4c:	8809883a 	mov	r4,r17
    bb50:	800b883a 	mov	r5,r16
    bb54:	000ef280 	call	ef28 <__smakebuf_r>
    bb58:	8100030b 	ldhu	r4,12(r16)
    bb5c:	81400417 	ldw	r5,16(r16)
    bb60:	003fda06 	br	bacc <__swsetup_r+0x44>
    bb64:	2080040c 	andi	r2,r4,16
    bb68:	103fed26 	beq	r2,zero,bb20 <__swsetup_r+0x98>
    bb6c:	2080010c 	andi	r2,r4,4
    bb70:	10001226 	beq	r2,zero,bbbc <__swsetup_r+0x134>
    bb74:	81400c17 	ldw	r5,48(r16)
    bb78:	28000526 	beq	r5,zero,bb90 <__swsetup_r+0x108>
    bb7c:	80801004 	addi	r2,r16,64
    bb80:	28800226 	beq	r5,r2,bb8c <__swsetup_r+0x104>
    bb84:	8809883a 	mov	r4,r17
    bb88:	000d9ac0 	call	d9ac <_free_r>
    bb8c:	80000c15 	stw	zero,48(r16)
    bb90:	8080030b 	ldhu	r2,12(r16)
    bb94:	81400417 	ldw	r5,16(r16)
    bb98:	80000115 	stw	zero,4(r16)
    bb9c:	10bff6cc 	andi	r2,r2,65499
    bba0:	8080030d 	sth	r2,12(r16)
    bba4:	81400015 	stw	r5,0(r16)
    bba8:	8080030b 	ldhu	r2,12(r16)
    bbac:	10800214 	ori	r2,r2,8
    bbb0:	113fffcc 	andi	r4,r2,65535
    bbb4:	8080030d 	sth	r2,12(r16)
    bbb8:	003fc306 	br	bac8 <__swsetup_r+0x40>
    bbbc:	81400417 	ldw	r5,16(r16)
    bbc0:	003ff906 	br	bba8 <__swsetup_r+0x120>

0000bbc4 <quorem>:
    bbc4:	28c00417 	ldw	r3,16(r5)
    bbc8:	20800417 	ldw	r2,16(r4)
    bbcc:	defff604 	addi	sp,sp,-40
    bbd0:	ddc00715 	stw	r23,28(sp)
    bbd4:	dd400515 	stw	r21,20(sp)
    bbd8:	dfc00915 	stw	ra,36(sp)
    bbdc:	df000815 	stw	fp,32(sp)
    bbe0:	dd800615 	stw	r22,24(sp)
    bbe4:	dd000415 	stw	r20,16(sp)
    bbe8:	dcc00315 	stw	r19,12(sp)
    bbec:	dc800215 	stw	r18,8(sp)
    bbf0:	dc400115 	stw	r17,4(sp)
    bbf4:	dc000015 	stw	r16,0(sp)
    bbf8:	202f883a 	mov	r23,r4
    bbfc:	282b883a 	mov	r21,r5
    bc00:	10c07416 	blt	r2,r3,bdd4 <quorem+0x210>
    bc04:	1c7fffc4 	addi	r17,r3,-1
    bc08:	8c45883a 	add	r2,r17,r17
    bc0c:	1085883a 	add	r2,r2,r2
    bc10:	2c000504 	addi	r16,r5,20
    bc14:	24c00504 	addi	r19,r4,20
    bc18:	14ed883a 	add	r22,r2,r19
    bc1c:	80a5883a 	add	r18,r16,r2
    bc20:	b7000017 	ldw	fp,0(r22)
    bc24:	91400017 	ldw	r5,0(r18)
    bc28:	e009883a 	mov	r4,fp
    bc2c:	29400044 	addi	r5,r5,1
    bc30:	0012cd00 	call	12cd0 <__udivsi3>
    bc34:	1029883a 	mov	r20,r2
    bc38:	10003c1e 	bne	r2,zero,bd2c <quorem+0x168>
    bc3c:	a80b883a 	mov	r5,r21
    bc40:	b809883a 	mov	r4,r23
    bc44:	000fb1c0 	call	fb1c <__mcmp>
    bc48:	10002b16 	blt	r2,zero,bcf8 <quorem+0x134>
    bc4c:	a5000044 	addi	r20,r20,1
    bc50:	980f883a 	mov	r7,r19
    bc54:	0011883a 	mov	r8,zero
    bc58:	0009883a 	mov	r4,zero
    bc5c:	81400017 	ldw	r5,0(r16)
    bc60:	38c00017 	ldw	r3,0(r7)
    bc64:	84000104 	addi	r16,r16,4
    bc68:	28bfffcc 	andi	r2,r5,65535
    bc6c:	2085883a 	add	r2,r4,r2
    bc70:	11bfffcc 	andi	r6,r2,65535
    bc74:	193fffcc 	andi	r4,r3,65535
    bc78:	1004d43a 	srli	r2,r2,16
    bc7c:	280ad43a 	srli	r5,r5,16
    bc80:	2189c83a 	sub	r4,r4,r6
    bc84:	2209883a 	add	r4,r4,r8
    bc88:	1806d43a 	srli	r3,r3,16
    bc8c:	288b883a 	add	r5,r5,r2
    bc90:	200dd43a 	srai	r6,r4,16
    bc94:	28bfffcc 	andi	r2,r5,65535
    bc98:	1887c83a 	sub	r3,r3,r2
    bc9c:	1987883a 	add	r3,r3,r6
    bca0:	3900000d 	sth	r4,0(r7)
    bca4:	38c0008d 	sth	r3,2(r7)
    bca8:	2808d43a 	srli	r4,r5,16
    bcac:	39c00104 	addi	r7,r7,4
    bcb0:	1811d43a 	srai	r8,r3,16
    bcb4:	943fe92e 	bgeu	r18,r16,bc5c <quorem+0x98>
    bcb8:	8c45883a 	add	r2,r17,r17
    bcbc:	1085883a 	add	r2,r2,r2
    bcc0:	9885883a 	add	r2,r19,r2
    bcc4:	10c00017 	ldw	r3,0(r2)
    bcc8:	18000b1e 	bne	r3,zero,bcf8 <quorem+0x134>
    bccc:	113fff04 	addi	r4,r2,-4
    bcd0:	9900082e 	bgeu	r19,r4,bcf4 <quorem+0x130>
    bcd4:	10bfff17 	ldw	r2,-4(r2)
    bcd8:	10000326 	beq	r2,zero,bce8 <quorem+0x124>
    bcdc:	00000506 	br	bcf4 <quorem+0x130>
    bce0:	20800017 	ldw	r2,0(r4)
    bce4:	1000031e 	bne	r2,zero,bcf4 <quorem+0x130>
    bce8:	213fff04 	addi	r4,r4,-4
    bcec:	8c7fffc4 	addi	r17,r17,-1
    bcf0:	993ffb36 	bltu	r19,r4,bce0 <quorem+0x11c>
    bcf4:	bc400415 	stw	r17,16(r23)
    bcf8:	a005883a 	mov	r2,r20
    bcfc:	dfc00917 	ldw	ra,36(sp)
    bd00:	df000817 	ldw	fp,32(sp)
    bd04:	ddc00717 	ldw	r23,28(sp)
    bd08:	dd800617 	ldw	r22,24(sp)
    bd0c:	dd400517 	ldw	r21,20(sp)
    bd10:	dd000417 	ldw	r20,16(sp)
    bd14:	dcc00317 	ldw	r19,12(sp)
    bd18:	dc800217 	ldw	r18,8(sp)
    bd1c:	dc400117 	ldw	r17,4(sp)
    bd20:	dc000017 	ldw	r16,0(sp)
    bd24:	dec00a04 	addi	sp,sp,40
    bd28:	f800283a 	ret
    bd2c:	980f883a 	mov	r7,r19
    bd30:	8011883a 	mov	r8,r16
    bd34:	0013883a 	mov	r9,zero
    bd38:	000d883a 	mov	r6,zero
    bd3c:	40c00017 	ldw	r3,0(r8)
    bd40:	39000017 	ldw	r4,0(r7)
    bd44:	42000104 	addi	r8,r8,4
    bd48:	18bfffcc 	andi	r2,r3,65535
    bd4c:	a085383a 	mul	r2,r20,r2
    bd50:	1806d43a 	srli	r3,r3,16
    bd54:	217fffcc 	andi	r5,r4,65535
    bd58:	3085883a 	add	r2,r6,r2
    bd5c:	11bfffcc 	andi	r6,r2,65535
    bd60:	a0c7383a 	mul	r3,r20,r3
    bd64:	1004d43a 	srli	r2,r2,16
    bd68:	298bc83a 	sub	r5,r5,r6
    bd6c:	2a4b883a 	add	r5,r5,r9
    bd70:	2008d43a 	srli	r4,r4,16
    bd74:	1887883a 	add	r3,r3,r2
    bd78:	280dd43a 	srai	r6,r5,16
    bd7c:	18bfffcc 	andi	r2,r3,65535
    bd80:	2089c83a 	sub	r4,r4,r2
    bd84:	2189883a 	add	r4,r4,r6
    bd88:	3900008d 	sth	r4,2(r7)
    bd8c:	3940000d 	sth	r5,0(r7)
    bd90:	180cd43a 	srli	r6,r3,16
    bd94:	39c00104 	addi	r7,r7,4
    bd98:	2013d43a 	srai	r9,r4,16
    bd9c:	923fe72e 	bgeu	r18,r8,bd3c <quorem+0x178>
    bda0:	e03fa61e 	bne	fp,zero,bc3c <quorem+0x78>
    bda4:	b0ffff04 	addi	r3,r22,-4
    bda8:	98c0082e 	bgeu	r19,r3,bdcc <quorem+0x208>
    bdac:	b0bfff17 	ldw	r2,-4(r22)
    bdb0:	10000326 	beq	r2,zero,bdc0 <quorem+0x1fc>
    bdb4:	00000506 	br	bdcc <quorem+0x208>
    bdb8:	18800017 	ldw	r2,0(r3)
    bdbc:	1000031e 	bne	r2,zero,bdcc <quorem+0x208>
    bdc0:	18ffff04 	addi	r3,r3,-4
    bdc4:	8c7fffc4 	addi	r17,r17,-1
    bdc8:	98fffb36 	bltu	r19,r3,bdb8 <quorem+0x1f4>
    bdcc:	bc400415 	stw	r17,16(r23)
    bdd0:	003f9a06 	br	bc3c <quorem+0x78>
    bdd4:	0005883a 	mov	r2,zero
    bdd8:	003fc806 	br	bcfc <quorem+0x138>

0000bddc <_dtoa_r>:
    bddc:	22001017 	ldw	r8,64(r4)
    bde0:	deffda04 	addi	sp,sp,-152
    bde4:	dd402115 	stw	r21,132(sp)
    bde8:	dd002015 	stw	r20,128(sp)
    bdec:	dc801e15 	stw	r18,120(sp)
    bdf0:	dc401d15 	stw	r17,116(sp)
    bdf4:	dfc02515 	stw	ra,148(sp)
    bdf8:	df002415 	stw	fp,144(sp)
    bdfc:	ddc02315 	stw	r23,140(sp)
    be00:	dd802215 	stw	r22,136(sp)
    be04:	dcc01f15 	stw	r19,124(sp)
    be08:	dc001c15 	stw	r16,112(sp)
    be0c:	d9001615 	stw	r4,88(sp)
    be10:	3023883a 	mov	r17,r6
    be14:	2829883a 	mov	r20,r5
    be18:	d9c01715 	stw	r7,92(sp)
    be1c:	dc802817 	ldw	r18,160(sp)
    be20:	302b883a 	mov	r21,r6
    be24:	40000a26 	beq	r8,zero,be50 <_dtoa_r+0x74>
    be28:	20801117 	ldw	r2,68(r4)
    be2c:	400b883a 	mov	r5,r8
    be30:	40800115 	stw	r2,4(r8)
    be34:	20c01117 	ldw	r3,68(r4)
    be38:	00800044 	movi	r2,1
    be3c:	10c4983a 	sll	r2,r2,r3
    be40:	40800215 	stw	r2,8(r8)
    be44:	000f9c00 	call	f9c0 <_Bfree>
    be48:	d8c01617 	ldw	r3,88(sp)
    be4c:	18001015 	stw	zero,64(r3)
    be50:	8800a316 	blt	r17,zero,c0e0 <_dtoa_r+0x304>
    be54:	90000015 	stw	zero,0(r18)
    be58:	a8dffc2c 	andhi	r3,r21,32752
    be5c:	009ffc34 	movhi	r2,32752
    be60:	18809126 	beq	r3,r2,c0a8 <_dtoa_r+0x2cc>
    be64:	000d883a 	mov	r6,zero
    be68:	000f883a 	mov	r7,zero
    be6c:	a009883a 	mov	r4,r20
    be70:	a80b883a 	mov	r5,r21
    be74:	dd001215 	stw	r20,72(sp)
    be78:	dd401315 	stw	r21,76(sp)
    be7c:	001287c0 	call	1287c <__nedf2>
    be80:	1000171e 	bne	r2,zero,bee0 <_dtoa_r+0x104>
    be84:	d9802717 	ldw	r6,156(sp)
    be88:	00800044 	movi	r2,1
    be8c:	30800015 	stw	r2,0(r6)
    be90:	d8802917 	ldw	r2,164(sp)
    be94:	10029b26 	beq	r2,zero,c904 <_dtoa_r+0xb28>
    be98:	d9002917 	ldw	r4,164(sp)
    be9c:	00820034 	movhi	r2,2048
    bea0:	10814f44 	addi	r2,r2,1341
    bea4:	10ffffc4 	addi	r3,r2,-1
    bea8:	20800015 	stw	r2,0(r4)
    beac:	1805883a 	mov	r2,r3
    beb0:	dfc02517 	ldw	ra,148(sp)
    beb4:	df002417 	ldw	fp,144(sp)
    beb8:	ddc02317 	ldw	r23,140(sp)
    bebc:	dd802217 	ldw	r22,136(sp)
    bec0:	dd402117 	ldw	r21,132(sp)
    bec4:	dd002017 	ldw	r20,128(sp)
    bec8:	dcc01f17 	ldw	r19,124(sp)
    becc:	dc801e17 	ldw	r18,120(sp)
    bed0:	dc401d17 	ldw	r17,116(sp)
    bed4:	dc001c17 	ldw	r16,112(sp)
    bed8:	dec02604 	addi	sp,sp,152
    bedc:	f800283a 	ret
    bee0:	d9001617 	ldw	r4,88(sp)
    bee4:	d9401217 	ldw	r5,72(sp)
    bee8:	d8800104 	addi	r2,sp,4
    beec:	a80d883a 	mov	r6,r21
    bef0:	d9c00204 	addi	r7,sp,8
    bef4:	d8800015 	stw	r2,0(sp)
    bef8:	000fffc0 	call	fffc <__d2b>
    befc:	d8800715 	stw	r2,28(sp)
    bf00:	a804d53a 	srli	r2,r21,20
    bf04:	1101ffcc 	andi	r4,r2,2047
    bf08:	20008626 	beq	r4,zero,c124 <_dtoa_r+0x348>
    bf0c:	d8c01217 	ldw	r3,72(sp)
    bf10:	00800434 	movhi	r2,16
    bf14:	10bfffc4 	addi	r2,r2,-1
    bf18:	ddc00117 	ldw	r23,4(sp)
    bf1c:	a884703a 	and	r2,r21,r2
    bf20:	1811883a 	mov	r8,r3
    bf24:	124ffc34 	orhi	r9,r2,16368
    bf28:	25bf0044 	addi	r22,r4,-1023
    bf2c:	d8000815 	stw	zero,32(sp)
    bf30:	0005883a 	mov	r2,zero
    bf34:	00cffe34 	movhi	r3,16376
    bf38:	480b883a 	mov	r5,r9
    bf3c:	4009883a 	mov	r4,r8
    bf40:	180f883a 	mov	r7,r3
    bf44:	100d883a 	mov	r6,r2
    bf48:	0006f5c0 	call	6f5c <__subdf3>
    bf4c:	0218dbf4 	movhi	r8,25455
    bf50:	4210d844 	addi	r8,r8,17249
    bf54:	024ff4f4 	movhi	r9,16339
    bf58:	4a61e9c4 	addi	r9,r9,-30809
    bf5c:	480f883a 	mov	r7,r9
    bf60:	400d883a 	mov	r6,r8
    bf64:	180b883a 	mov	r5,r3
    bf68:	1009883a 	mov	r4,r2
    bf6c:	00070500 	call	7050 <__muldf3>
    bf70:	0222d874 	movhi	r8,35681
    bf74:	42322cc4 	addi	r8,r8,-14157
    bf78:	024ff1f4 	movhi	r9,16327
    bf7c:	4a628a04 	addi	r9,r9,-30168
    bf80:	480f883a 	mov	r7,r9
    bf84:	400d883a 	mov	r6,r8
    bf88:	180b883a 	mov	r5,r3
    bf8c:	1009883a 	mov	r4,r2
    bf90:	0006fdc0 	call	6fdc <__adddf3>
    bf94:	b009883a 	mov	r4,r22
    bf98:	1021883a 	mov	r16,r2
    bf9c:	1823883a 	mov	r17,r3
    bfa0:	00078040 	call	7804 <__floatsidf>
    bfa4:	021427f4 	movhi	r8,20639
    bfa8:	421e7ec4 	addi	r8,r8,31227
    bfac:	024ff4f4 	movhi	r9,16339
    bfb0:	4a5104c4 	addi	r9,r9,17427
    bfb4:	480f883a 	mov	r7,r9
    bfb8:	400d883a 	mov	r6,r8
    bfbc:	180b883a 	mov	r5,r3
    bfc0:	1009883a 	mov	r4,r2
    bfc4:	00070500 	call	7050 <__muldf3>
    bfc8:	180f883a 	mov	r7,r3
    bfcc:	880b883a 	mov	r5,r17
    bfd0:	100d883a 	mov	r6,r2
    bfd4:	8009883a 	mov	r4,r16
    bfd8:	0006fdc0 	call	6fdc <__adddf3>
    bfdc:	1009883a 	mov	r4,r2
    bfe0:	180b883a 	mov	r5,r3
    bfe4:	1021883a 	mov	r16,r2
    bfe8:	1823883a 	mov	r17,r3
    bfec:	00078fc0 	call	78fc <__fixdfsi>
    bff0:	000d883a 	mov	r6,zero
    bff4:	000f883a 	mov	r7,zero
    bff8:	8009883a 	mov	r4,r16
    bffc:	880b883a 	mov	r5,r17
    c000:	d8800d15 	stw	r2,52(sp)
    c004:	00129040 	call	12904 <__ltdf2>
    c008:	10031716 	blt	r2,zero,cc68 <_dtoa_r+0xe8c>
    c00c:	d8c00d17 	ldw	r3,52(sp)
    c010:	00800584 	movi	r2,22
    c014:	10c1482e 	bgeu	r2,r3,c538 <_dtoa_r+0x75c>
    c018:	01000044 	movi	r4,1
    c01c:	d9000c15 	stw	r4,48(sp)
    c020:	bd85c83a 	sub	r2,r23,r22
    c024:	11bfffc4 	addi	r6,r2,-1
    c028:	30030b16 	blt	r6,zero,cc58 <_dtoa_r+0xe7c>
    c02c:	d9800a15 	stw	r6,40(sp)
    c030:	d8001115 	stw	zero,68(sp)
    c034:	d8c00d17 	ldw	r3,52(sp)
    c038:	1802ff16 	blt	r3,zero,cc38 <_dtoa_r+0xe5c>
    c03c:	d9000a17 	ldw	r4,40(sp)
    c040:	d8c00915 	stw	r3,36(sp)
    c044:	d8001015 	stw	zero,64(sp)
    c048:	20c9883a 	add	r4,r4,r3
    c04c:	d9000a15 	stw	r4,40(sp)
    c050:	d9001717 	ldw	r4,92(sp)
    c054:	00800244 	movi	r2,9
    c058:	11004636 	bltu	r2,r4,c174 <_dtoa_r+0x398>
    c05c:	00800144 	movi	r2,5
    c060:	11020416 	blt	r2,r4,c874 <_dtoa_r+0xa98>
    c064:	04400044 	movi	r17,1
    c068:	d8c01717 	ldw	r3,92(sp)
    c06c:	00800144 	movi	r2,5
    c070:	10c1ed36 	bltu	r2,r3,c828 <_dtoa_r+0xa4c>
    c074:	18c5883a 	add	r2,r3,r3
    c078:	1085883a 	add	r2,r2,r2
    c07c:	00c00074 	movhi	r3,1
    c080:	18f02404 	addi	r3,r3,-16240
    c084:	10c5883a 	add	r2,r2,r3
    c088:	11000017 	ldw	r4,0(r2)
    c08c:	2000683a 	jmp	r4
    c090:	0000c17c 	xorhi	zero,zero,773
    c094:	0000c17c 	xorhi	zero,zero,773
    c098:	0000cb7c 	xorhi	zero,zero,813
    c09c:	0000cb54 	movui	zero,813
    c0a0:	0000cb98 	cmpnei	zero,zero,814
    c0a4:	0000cba4 	muli	zero,zero,814
    c0a8:	d9002717 	ldw	r4,156(sp)
    c0ac:	0089c3c4 	movi	r2,9999
    c0b0:	20800015 	stw	r2,0(r4)
    c0b4:	a0001026 	beq	r20,zero,c0f8 <_dtoa_r+0x31c>
    c0b8:	00c20034 	movhi	r3,2048
    c0bc:	18c15b04 	addi	r3,r3,1388
    c0c0:	d9802917 	ldw	r6,164(sp)
    c0c4:	303f7926 	beq	r6,zero,beac <_dtoa_r+0xd0>
    c0c8:	188000c7 	ldb	r2,3(r3)
    c0cc:	190000c4 	addi	r4,r3,3
    c0d0:	1000101e 	bne	r2,zero,c114 <_dtoa_r+0x338>
    c0d4:	d8802917 	ldw	r2,164(sp)
    c0d8:	11000015 	stw	r4,0(r2)
    c0dc:	003f7306 	br	beac <_dtoa_r+0xd0>
    c0e0:	00a00034 	movhi	r2,32768
    c0e4:	10bfffc4 	addi	r2,r2,-1
    c0e8:	00c00044 	movi	r3,1
    c0ec:	88aa703a 	and	r21,r17,r2
    c0f0:	90c00015 	stw	r3,0(r18)
    c0f4:	003f5806 	br	be58 <_dtoa_r+0x7c>
    c0f8:	00800434 	movhi	r2,16
    c0fc:	10bfffc4 	addi	r2,r2,-1
    c100:	a884703a 	and	r2,r21,r2
    c104:	103fec1e 	bne	r2,zero,c0b8 <_dtoa_r+0x2dc>
    c108:	00c20034 	movhi	r3,2048
    c10c:	18c15804 	addi	r3,r3,1376
    c110:	003feb06 	br	c0c0 <_dtoa_r+0x2e4>
    c114:	d8802917 	ldw	r2,164(sp)
    c118:	19000204 	addi	r4,r3,8
    c11c:	11000015 	stw	r4,0(r2)
    c120:	003f6206 	br	beac <_dtoa_r+0xd0>
    c124:	ddc00117 	ldw	r23,4(sp)
    c128:	d8800217 	ldw	r2,8(sp)
    c12c:	01000804 	movi	r4,32
    c130:	b8c10c84 	addi	r3,r23,1074
    c134:	18a3883a 	add	r17,r3,r2
    c138:	2441b80e 	bge	r4,r17,c81c <_dtoa_r+0xa40>
    c13c:	00c01004 	movi	r3,64
    c140:	1c47c83a 	sub	r3,r3,r17
    c144:	88bff804 	addi	r2,r17,-32
    c148:	a8c6983a 	sll	r3,r21,r3
    c14c:	a084d83a 	srl	r2,r20,r2
    c150:	1888b03a 	or	r4,r3,r2
    c154:	0012a000 	call	12a00 <__floatunsidf>
    c158:	1011883a 	mov	r8,r2
    c15c:	00bf8434 	movhi	r2,65040
    c160:	01000044 	movi	r4,1
    c164:	10d3883a 	add	r9,r2,r3
    c168:	8dbef344 	addi	r22,r17,-1075
    c16c:	d9000815 	stw	r4,32(sp)
    c170:	003f6f06 	br	bf30 <_dtoa_r+0x154>
    c174:	d8001715 	stw	zero,92(sp)
    c178:	04400044 	movi	r17,1
    c17c:	00bfffc4 	movi	r2,-1
    c180:	00c00044 	movi	r3,1
    c184:	d8800e15 	stw	r2,56(sp)
    c188:	d8002615 	stw	zero,152(sp)
    c18c:	d8800f15 	stw	r2,60(sp)
    c190:	d8c00b15 	stw	r3,44(sp)
    c194:	1021883a 	mov	r16,r2
    c198:	d8801617 	ldw	r2,88(sp)
    c19c:	10001115 	stw	zero,68(r2)
    c1a0:	d8801617 	ldw	r2,88(sp)
    c1a4:	11401117 	ldw	r5,68(r2)
    c1a8:	1009883a 	mov	r4,r2
    c1ac:	000ff400 	call	ff40 <_Balloc>
    c1b0:	d8c01617 	ldw	r3,88(sp)
    c1b4:	d8800515 	stw	r2,20(sp)
    c1b8:	18801015 	stw	r2,64(r3)
    c1bc:	00800384 	movi	r2,14
    c1c0:	14006836 	bltu	r2,r16,c364 <_dtoa_r+0x588>
    c1c4:	8805003a 	cmpeq	r2,r17,zero
    c1c8:	1000661e 	bne	r2,zero,c364 <_dtoa_r+0x588>
    c1cc:	d9000d17 	ldw	r4,52(sp)
    c1d0:	0102300e 	bge	zero,r4,ca94 <_dtoa_r+0xcb8>
    c1d4:	208003cc 	andi	r2,r4,15
    c1d8:	100490fa 	slli	r2,r2,3
    c1dc:	2025d13a 	srai	r18,r4,4
    c1e0:	00c20034 	movhi	r3,2048
    c1e4:	18c17404 	addi	r3,r3,1488
    c1e8:	10c5883a 	add	r2,r2,r3
    c1ec:	90c0040c 	andi	r3,r18,16
    c1f0:	14000017 	ldw	r16,0(r2)
    c1f4:	14400117 	ldw	r17,4(r2)
    c1f8:	18036a1e 	bne	r3,zero,cfa4 <_dtoa_r+0x11c8>
    c1fc:	05800084 	movi	r22,2
    c200:	90001026 	beq	r18,zero,c244 <_dtoa_r+0x468>
    c204:	04c20034 	movhi	r19,2048
    c208:	9cc1a604 	addi	r19,r19,1688
    c20c:	9080004c 	andi	r2,r18,1
    c210:	1005003a 	cmpeq	r2,r2,zero
    c214:	1000081e 	bne	r2,zero,c238 <_dtoa_r+0x45c>
    c218:	99800017 	ldw	r6,0(r19)
    c21c:	99c00117 	ldw	r7,4(r19)
    c220:	880b883a 	mov	r5,r17
    c224:	8009883a 	mov	r4,r16
    c228:	00070500 	call	7050 <__muldf3>
    c22c:	1021883a 	mov	r16,r2
    c230:	b5800044 	addi	r22,r22,1
    c234:	1823883a 	mov	r17,r3
    c238:	9025d07a 	srai	r18,r18,1
    c23c:	9cc00204 	addi	r19,r19,8
    c240:	903ff21e 	bne	r18,zero,c20c <_dtoa_r+0x430>
    c244:	a80b883a 	mov	r5,r21
    c248:	a009883a 	mov	r4,r20
    c24c:	880f883a 	mov	r7,r17
    c250:	800d883a 	mov	r6,r16
    c254:	00074140 	call	7414 <__divdf3>
    c258:	1029883a 	mov	r20,r2
    c25c:	182b883a 	mov	r21,r3
    c260:	d8c00c17 	ldw	r3,48(sp)
    c264:	1805003a 	cmpeq	r2,r3,zero
    c268:	1000081e 	bne	r2,zero,c28c <_dtoa_r+0x4b0>
    c26c:	0005883a 	mov	r2,zero
    c270:	00cffc34 	movhi	r3,16368
    c274:	180f883a 	mov	r7,r3
    c278:	a009883a 	mov	r4,r20
    c27c:	a80b883a 	mov	r5,r21
    c280:	100d883a 	mov	r6,r2
    c284:	00129040 	call	12904 <__ltdf2>
    c288:	1003fe16 	blt	r2,zero,d284 <_dtoa_r+0x14a8>
    c28c:	b009883a 	mov	r4,r22
    c290:	00078040 	call	7804 <__floatsidf>
    c294:	180b883a 	mov	r5,r3
    c298:	1009883a 	mov	r4,r2
    c29c:	a00d883a 	mov	r6,r20
    c2a0:	a80f883a 	mov	r7,r21
    c2a4:	00070500 	call	7050 <__muldf3>
    c2a8:	0011883a 	mov	r8,zero
    c2ac:	02500734 	movhi	r9,16412
    c2b0:	1009883a 	mov	r4,r2
    c2b4:	180b883a 	mov	r5,r3
    c2b8:	480f883a 	mov	r7,r9
    c2bc:	400d883a 	mov	r6,r8
    c2c0:	0006fdc0 	call	6fdc <__adddf3>
    c2c4:	d9000f17 	ldw	r4,60(sp)
    c2c8:	102d883a 	mov	r22,r2
    c2cc:	00bf3034 	movhi	r2,64704
    c2d0:	18b9883a 	add	fp,r3,r2
    c2d4:	e02f883a 	mov	r23,fp
    c2d8:	20028f1e 	bne	r4,zero,cd18 <_dtoa_r+0xf3c>
    c2dc:	0005883a 	mov	r2,zero
    c2e0:	00d00534 	movhi	r3,16404
    c2e4:	a009883a 	mov	r4,r20
    c2e8:	a80b883a 	mov	r5,r21
    c2ec:	180f883a 	mov	r7,r3
    c2f0:	100d883a 	mov	r6,r2
    c2f4:	0006f5c0 	call	6f5c <__subdf3>
    c2f8:	1009883a 	mov	r4,r2
    c2fc:	e00f883a 	mov	r7,fp
    c300:	180b883a 	mov	r5,r3
    c304:	b00d883a 	mov	r6,r22
    c308:	1025883a 	mov	r18,r2
    c30c:	1827883a 	mov	r19,r3
    c310:	000766c0 	call	766c <__gtdf2>
    c314:	00834f16 	blt	zero,r2,d054 <_dtoa_r+0x1278>
    c318:	e0e0003c 	xorhi	r3,fp,32768
    c31c:	9009883a 	mov	r4,r18
    c320:	980b883a 	mov	r5,r19
    c324:	180f883a 	mov	r7,r3
    c328:	b00d883a 	mov	r6,r22
    c32c:	00129040 	call	12904 <__ltdf2>
    c330:	1000080e 	bge	r2,zero,c354 <_dtoa_r+0x578>
    c334:	0027883a 	mov	r19,zero
    c338:	0025883a 	mov	r18,zero
    c33c:	d8802617 	ldw	r2,152(sp)
    c340:	df000517 	ldw	fp,20(sp)
    c344:	d8000615 	stw	zero,24(sp)
    c348:	0084303a 	nor	r2,zero,r2
    c34c:	d8800d15 	stw	r2,52(sp)
    c350:	00019b06 	br	c9c0 <_dtoa_r+0xbe4>
    c354:	d9801217 	ldw	r6,72(sp)
    c358:	d8801317 	ldw	r2,76(sp)
    c35c:	3029883a 	mov	r20,r6
    c360:	102b883a 	mov	r21,r2
    c364:	d8c00217 	ldw	r3,8(sp)
    c368:	18008516 	blt	r3,zero,c580 <_dtoa_r+0x7a4>
    c36c:	d9000d17 	ldw	r4,52(sp)
    c370:	00800384 	movi	r2,14
    c374:	11008216 	blt	r2,r4,c580 <_dtoa_r+0x7a4>
    c378:	200490fa 	slli	r2,r4,3
    c37c:	d9802617 	ldw	r6,152(sp)
    c380:	00c20034 	movhi	r3,2048
    c384:	18c17404 	addi	r3,r3,1488
    c388:	10c5883a 	add	r2,r2,r3
    c38c:	14800017 	ldw	r18,0(r2)
    c390:	14c00117 	ldw	r19,4(r2)
    c394:	30031e16 	blt	r6,zero,d010 <_dtoa_r+0x1234>
    c398:	d9000517 	ldw	r4,20(sp)
    c39c:	d8c00f17 	ldw	r3,60(sp)
    c3a0:	a823883a 	mov	r17,r21
    c3a4:	a021883a 	mov	r16,r20
    c3a8:	192b883a 	add	r21,r3,r4
    c3ac:	2039883a 	mov	fp,r4
    c3b0:	00000f06 	br	c3f0 <_dtoa_r+0x614>
    c3b4:	0005883a 	mov	r2,zero
    c3b8:	00d00934 	movhi	r3,16420
    c3bc:	5009883a 	mov	r4,r10
    c3c0:	580b883a 	mov	r5,r11
    c3c4:	180f883a 	mov	r7,r3
    c3c8:	100d883a 	mov	r6,r2
    c3cc:	00070500 	call	7050 <__muldf3>
    c3d0:	180b883a 	mov	r5,r3
    c3d4:	000d883a 	mov	r6,zero
    c3d8:	000f883a 	mov	r7,zero
    c3dc:	1009883a 	mov	r4,r2
    c3e0:	1021883a 	mov	r16,r2
    c3e4:	1823883a 	mov	r17,r3
    c3e8:	001287c0 	call	1287c <__nedf2>
    c3ec:	10004526 	beq	r2,zero,c504 <_dtoa_r+0x728>
    c3f0:	900d883a 	mov	r6,r18
    c3f4:	980f883a 	mov	r7,r19
    c3f8:	8009883a 	mov	r4,r16
    c3fc:	880b883a 	mov	r5,r17
    c400:	00074140 	call	7414 <__divdf3>
    c404:	180b883a 	mov	r5,r3
    c408:	1009883a 	mov	r4,r2
    c40c:	00078fc0 	call	78fc <__fixdfsi>
    c410:	1009883a 	mov	r4,r2
    c414:	1029883a 	mov	r20,r2
    c418:	00078040 	call	7804 <__floatsidf>
    c41c:	180f883a 	mov	r7,r3
    c420:	9009883a 	mov	r4,r18
    c424:	980b883a 	mov	r5,r19
    c428:	100d883a 	mov	r6,r2
    c42c:	00070500 	call	7050 <__muldf3>
    c430:	180f883a 	mov	r7,r3
    c434:	880b883a 	mov	r5,r17
    c438:	8009883a 	mov	r4,r16
    c43c:	100d883a 	mov	r6,r2
    c440:	0006f5c0 	call	6f5c <__subdf3>
    c444:	1015883a 	mov	r10,r2
    c448:	a0800c04 	addi	r2,r20,48
    c44c:	e0800005 	stb	r2,0(fp)
    c450:	e7000044 	addi	fp,fp,1
    c454:	1817883a 	mov	r11,r3
    c458:	e57fd61e 	bne	fp,r21,c3b4 <_dtoa_r+0x5d8>
    c45c:	500d883a 	mov	r6,r10
    c460:	180f883a 	mov	r7,r3
    c464:	5009883a 	mov	r4,r10
    c468:	180b883a 	mov	r5,r3
    c46c:	0006fdc0 	call	6fdc <__adddf3>
    c470:	100d883a 	mov	r6,r2
    c474:	9009883a 	mov	r4,r18
    c478:	980b883a 	mov	r5,r19
    c47c:	180f883a 	mov	r7,r3
    c480:	1021883a 	mov	r16,r2
    c484:	1823883a 	mov	r17,r3
    c488:	00129040 	call	12904 <__ltdf2>
    c48c:	10000816 	blt	r2,zero,c4b0 <_dtoa_r+0x6d4>
    c490:	980b883a 	mov	r5,r19
    c494:	800d883a 	mov	r6,r16
    c498:	880f883a 	mov	r7,r17
    c49c:	9009883a 	mov	r4,r18
    c4a0:	00127f40 	call	127f4 <__eqdf2>
    c4a4:	1000171e 	bne	r2,zero,c504 <_dtoa_r+0x728>
    c4a8:	a080004c 	andi	r2,r20,1
    c4ac:	10001526 	beq	r2,zero,c504 <_dtoa_r+0x728>
    c4b0:	d8800d17 	ldw	r2,52(sp)
    c4b4:	d8800415 	stw	r2,16(sp)
    c4b8:	e009883a 	mov	r4,fp
    c4bc:	213fffc4 	addi	r4,r4,-1
    c4c0:	20c00007 	ldb	r3,0(r4)
    c4c4:	00800e44 	movi	r2,57
    c4c8:	1880081e 	bne	r3,r2,c4ec <_dtoa_r+0x710>
    c4cc:	d8800517 	ldw	r2,20(sp)
    c4d0:	113ffa1e 	bne	r2,r4,c4bc <_dtoa_r+0x6e0>
    c4d4:	d8c00417 	ldw	r3,16(sp)
    c4d8:	d9800517 	ldw	r6,20(sp)
    c4dc:	00800c04 	movi	r2,48
    c4e0:	18c00044 	addi	r3,r3,1
    c4e4:	d8c00415 	stw	r3,16(sp)
    c4e8:	30800005 	stb	r2,0(r6)
    c4ec:	20800003 	ldbu	r2,0(r4)
    c4f0:	d8c00417 	ldw	r3,16(sp)
    c4f4:	27000044 	addi	fp,r4,1
    c4f8:	10800044 	addi	r2,r2,1
    c4fc:	d8c00d15 	stw	r3,52(sp)
    c500:	20800005 	stb	r2,0(r4)
    c504:	d9001617 	ldw	r4,88(sp)
    c508:	d9400717 	ldw	r5,28(sp)
    c50c:	000f9c00 	call	f9c0 <_Bfree>
    c510:	e0000005 	stb	zero,0(fp)
    c514:	d9800d17 	ldw	r6,52(sp)
    c518:	d8c02717 	ldw	r3,156(sp)
    c51c:	d9002917 	ldw	r4,164(sp)
    c520:	30800044 	addi	r2,r6,1
    c524:	18800015 	stw	r2,0(r3)
    c528:	20029c26 	beq	r4,zero,cf9c <_dtoa_r+0x11c0>
    c52c:	d8c00517 	ldw	r3,20(sp)
    c530:	27000015 	stw	fp,0(r4)
    c534:	003e5d06 	br	beac <_dtoa_r+0xd0>
    c538:	d9800d17 	ldw	r6,52(sp)
    c53c:	00c20034 	movhi	r3,2048
    c540:	18c17404 	addi	r3,r3,1488
    c544:	d9001217 	ldw	r4,72(sp)
    c548:	300490fa 	slli	r2,r6,3
    c54c:	d9401317 	ldw	r5,76(sp)
    c550:	10c5883a 	add	r2,r2,r3
    c554:	12000017 	ldw	r8,0(r2)
    c558:	12400117 	ldw	r9,4(r2)
    c55c:	400d883a 	mov	r6,r8
    c560:	480f883a 	mov	r7,r9
    c564:	00129040 	call	12904 <__ltdf2>
    c568:	1000030e 	bge	r2,zero,c578 <_dtoa_r+0x79c>
    c56c:	d8800d17 	ldw	r2,52(sp)
    c570:	10bfffc4 	addi	r2,r2,-1
    c574:	d8800d15 	stw	r2,52(sp)
    c578:	d8000c15 	stw	zero,48(sp)
    c57c:	003ea806 	br	c020 <_dtoa_r+0x244>
    c580:	d9000b17 	ldw	r4,44(sp)
    c584:	202cc03a 	cmpne	r22,r4,zero
    c588:	b000c71e 	bne	r22,zero,c8a8 <_dtoa_r+0xacc>
    c58c:	dc001117 	ldw	r16,68(sp)
    c590:	dc801017 	ldw	r18,64(sp)
    c594:	0027883a 	mov	r19,zero
    c598:	04000b0e 	bge	zero,r16,c5c8 <_dtoa_r+0x7ec>
    c59c:	d8c00a17 	ldw	r3,40(sp)
    c5a0:	00c0090e 	bge	zero,r3,c5c8 <_dtoa_r+0x7ec>
    c5a4:	8005883a 	mov	r2,r16
    c5a8:	1c011316 	blt	r3,r16,c9f8 <_dtoa_r+0xc1c>
    c5ac:	d9000a17 	ldw	r4,40(sp)
    c5b0:	d9801117 	ldw	r6,68(sp)
    c5b4:	80a1c83a 	sub	r16,r16,r2
    c5b8:	2089c83a 	sub	r4,r4,r2
    c5bc:	308dc83a 	sub	r6,r6,r2
    c5c0:	d9000a15 	stw	r4,40(sp)
    c5c4:	d9801115 	stw	r6,68(sp)
    c5c8:	d8801017 	ldw	r2,64(sp)
    c5cc:	0080150e 	bge	zero,r2,c624 <_dtoa_r+0x848>
    c5d0:	d8c00b17 	ldw	r3,44(sp)
    c5d4:	1805003a 	cmpeq	r2,r3,zero
    c5d8:	1001c91e 	bne	r2,zero,cd00 <_dtoa_r+0xf24>
    c5dc:	04800e0e 	bge	zero,r18,c618 <_dtoa_r+0x83c>
    c5e0:	d9001617 	ldw	r4,88(sp)
    c5e4:	980b883a 	mov	r5,r19
    c5e8:	900d883a 	mov	r6,r18
    c5ec:	00107740 	call	10774 <__pow5mult>
    c5f0:	d9001617 	ldw	r4,88(sp)
    c5f4:	d9800717 	ldw	r6,28(sp)
    c5f8:	100b883a 	mov	r5,r2
    c5fc:	1027883a 	mov	r19,r2
    c600:	00104500 	call	10450 <__multiply>
    c604:	d9001617 	ldw	r4,88(sp)
    c608:	d9400717 	ldw	r5,28(sp)
    c60c:	1023883a 	mov	r17,r2
    c610:	000f9c00 	call	f9c0 <_Bfree>
    c614:	dc400715 	stw	r17,28(sp)
    c618:	d9001017 	ldw	r4,64(sp)
    c61c:	248dc83a 	sub	r6,r4,r18
    c620:	30010e1e 	bne	r6,zero,ca5c <_dtoa_r+0xc80>
    c624:	d9001617 	ldw	r4,88(sp)
    c628:	04400044 	movi	r17,1
    c62c:	880b883a 	mov	r5,r17
    c630:	00106380 	call	10638 <__i2b>
    c634:	d9800917 	ldw	r6,36(sp)
    c638:	1025883a 	mov	r18,r2
    c63c:	0180040e 	bge	zero,r6,c650 <_dtoa_r+0x874>
    c640:	d9001617 	ldw	r4,88(sp)
    c644:	100b883a 	mov	r5,r2
    c648:	00107740 	call	10774 <__pow5mult>
    c64c:	1025883a 	mov	r18,r2
    c650:	d8801717 	ldw	r2,92(sp)
    c654:	8880f30e 	bge	r17,r2,ca24 <_dtoa_r+0xc48>
    c658:	0023883a 	mov	r17,zero
    c65c:	d9800917 	ldw	r6,36(sp)
    c660:	30019e1e 	bne	r6,zero,ccdc <_dtoa_r+0xf00>
    c664:	00c00044 	movi	r3,1
    c668:	d9000a17 	ldw	r4,40(sp)
    c66c:	20c5883a 	add	r2,r4,r3
    c670:	10c007cc 	andi	r3,r2,31
    c674:	1800841e 	bne	r3,zero,c888 <_dtoa_r+0xaac>
    c678:	00800704 	movi	r2,28
    c67c:	d9000a17 	ldw	r4,40(sp)
    c680:	d9801117 	ldw	r6,68(sp)
    c684:	80a1883a 	add	r16,r16,r2
    c688:	2089883a 	add	r4,r4,r2
    c68c:	308d883a 	add	r6,r6,r2
    c690:	d9000a15 	stw	r4,40(sp)
    c694:	d9801115 	stw	r6,68(sp)
    c698:	d8801117 	ldw	r2,68(sp)
    c69c:	0080050e 	bge	zero,r2,c6b4 <_dtoa_r+0x8d8>
    c6a0:	d9400717 	ldw	r5,28(sp)
    c6a4:	d9001617 	ldw	r4,88(sp)
    c6a8:	100d883a 	mov	r6,r2
    c6ac:	00103040 	call	10304 <__lshift>
    c6b0:	d8800715 	stw	r2,28(sp)
    c6b4:	d8c00a17 	ldw	r3,40(sp)
    c6b8:	00c0050e 	bge	zero,r3,c6d0 <_dtoa_r+0x8f4>
    c6bc:	d9001617 	ldw	r4,88(sp)
    c6c0:	900b883a 	mov	r5,r18
    c6c4:	180d883a 	mov	r6,r3
    c6c8:	00103040 	call	10304 <__lshift>
    c6cc:	1025883a 	mov	r18,r2
    c6d0:	d9000c17 	ldw	r4,48(sp)
    c6d4:	2005003a 	cmpeq	r2,r4,zero
    c6d8:	10016f26 	beq	r2,zero,cc98 <_dtoa_r+0xebc>
    c6dc:	d9000f17 	ldw	r4,60(sp)
    c6e0:	0102170e 	bge	zero,r4,cf40 <_dtoa_r+0x1164>
    c6e4:	d9800b17 	ldw	r6,44(sp)
    c6e8:	3005003a 	cmpeq	r2,r6,zero
    c6ec:	1000881e 	bne	r2,zero,c910 <_dtoa_r+0xb34>
    c6f0:	0400050e 	bge	zero,r16,c708 <_dtoa_r+0x92c>
    c6f4:	d9001617 	ldw	r4,88(sp)
    c6f8:	980b883a 	mov	r5,r19
    c6fc:	800d883a 	mov	r6,r16
    c700:	00103040 	call	10304 <__lshift>
    c704:	1027883a 	mov	r19,r2
    c708:	8804c03a 	cmpne	r2,r17,zero
    c70c:	1002541e 	bne	r2,zero,d060 <_dtoa_r+0x1284>
    c710:	980b883a 	mov	r5,r19
    c714:	dd800517 	ldw	r22,20(sp)
    c718:	dcc00615 	stw	r19,24(sp)
    c71c:	a700004c 	andi	fp,r20,1
    c720:	2827883a 	mov	r19,r5
    c724:	d9000717 	ldw	r4,28(sp)
    c728:	900b883a 	mov	r5,r18
    c72c:	000bbc40 	call	bbc4 <quorem>
    c730:	d9000717 	ldw	r4,28(sp)
    c734:	d9400617 	ldw	r5,24(sp)
    c738:	1023883a 	mov	r17,r2
    c73c:	8dc00c04 	addi	r23,r17,48
    c740:	000fb1c0 	call	fb1c <__mcmp>
    c744:	d9001617 	ldw	r4,88(sp)
    c748:	900b883a 	mov	r5,r18
    c74c:	980d883a 	mov	r6,r19
    c750:	1029883a 	mov	r20,r2
    c754:	00101780 	call	10178 <__mdiff>
    c758:	102b883a 	mov	r21,r2
    c75c:	10800317 	ldw	r2,12(r2)
    c760:	1001281e 	bne	r2,zero,cc04 <_dtoa_r+0xe28>
    c764:	d9000717 	ldw	r4,28(sp)
    c768:	a80b883a 	mov	r5,r21
    c76c:	000fb1c0 	call	fb1c <__mcmp>
    c770:	d9001617 	ldw	r4,88(sp)
    c774:	1021883a 	mov	r16,r2
    c778:	a80b883a 	mov	r5,r21
    c77c:	000f9c00 	call	f9c0 <_Bfree>
    c780:	8000041e 	bne	r16,zero,c794 <_dtoa_r+0x9b8>
    c784:	d8801717 	ldw	r2,92(sp)
    c788:	1000021e 	bne	r2,zero,c794 <_dtoa_r+0x9b8>
    c78c:	e004c03a 	cmpne	r2,fp,zero
    c790:	10011726 	beq	r2,zero,cbf0 <_dtoa_r+0xe14>
    c794:	a0010616 	blt	r20,zero,cbb0 <_dtoa_r+0xdd4>
    c798:	a000041e 	bne	r20,zero,c7ac <_dtoa_r+0x9d0>
    c79c:	d8c01717 	ldw	r3,92(sp)
    c7a0:	1800021e 	bne	r3,zero,c7ac <_dtoa_r+0x9d0>
    c7a4:	e004c03a 	cmpne	r2,fp,zero
    c7a8:	10010126 	beq	r2,zero,cbb0 <_dtoa_r+0xdd4>
    c7ac:	04023d16 	blt	zero,r16,d0a4 <_dtoa_r+0x12c8>
    c7b0:	b5c00005 	stb	r23,0(r22)
    c7b4:	d9800517 	ldw	r6,20(sp)
    c7b8:	d9000f17 	ldw	r4,60(sp)
    c7bc:	b5800044 	addi	r22,r22,1
    c7c0:	3105883a 	add	r2,r6,r4
    c7c4:	b0806526 	beq	r22,r2,c95c <_dtoa_r+0xb80>
    c7c8:	d9400717 	ldw	r5,28(sp)
    c7cc:	d9001617 	ldw	r4,88(sp)
    c7d0:	01800284 	movi	r6,10
    c7d4:	000f883a 	mov	r7,zero
    c7d8:	00106740 	call	10674 <__multadd>
    c7dc:	d8800715 	stw	r2,28(sp)
    c7e0:	d8800617 	ldw	r2,24(sp)
    c7e4:	14c10c26 	beq	r2,r19,cc18 <_dtoa_r+0xe3c>
    c7e8:	d9400617 	ldw	r5,24(sp)
    c7ec:	d9001617 	ldw	r4,88(sp)
    c7f0:	01800284 	movi	r6,10
    c7f4:	000f883a 	mov	r7,zero
    c7f8:	00106740 	call	10674 <__multadd>
    c7fc:	d9001617 	ldw	r4,88(sp)
    c800:	980b883a 	mov	r5,r19
    c804:	01800284 	movi	r6,10
    c808:	000f883a 	mov	r7,zero
    c80c:	d8800615 	stw	r2,24(sp)
    c810:	00106740 	call	10674 <__multadd>
    c814:	1027883a 	mov	r19,r2
    c818:	003fc206 	br	c724 <_dtoa_r+0x948>
    c81c:	2445c83a 	sub	r2,r4,r17
    c820:	a088983a 	sll	r4,r20,r2
    c824:	003e4b06 	br	c154 <_dtoa_r+0x378>
    c828:	01bfffc4 	movi	r6,-1
    c82c:	00800044 	movi	r2,1
    c830:	d9800e15 	stw	r6,56(sp)
    c834:	d9800f15 	stw	r6,60(sp)
    c838:	d8800b15 	stw	r2,44(sp)
    c83c:	d8c01617 	ldw	r3,88(sp)
    c840:	008005c4 	movi	r2,23
    c844:	18001115 	stw	zero,68(r3)
    c848:	1580082e 	bgeu	r2,r22,c86c <_dtoa_r+0xa90>
    c84c:	00c00104 	movi	r3,4
    c850:	0009883a 	mov	r4,zero
    c854:	18c7883a 	add	r3,r3,r3
    c858:	18800504 	addi	r2,r3,20
    c85c:	21000044 	addi	r4,r4,1
    c860:	b0bffc2e 	bgeu	r22,r2,c854 <_dtoa_r+0xa78>
    c864:	d9801617 	ldw	r6,88(sp)
    c868:	31001115 	stw	r4,68(r6)
    c86c:	dc000f17 	ldw	r16,60(sp)
    c870:	003e4b06 	br	c1a0 <_dtoa_r+0x3c4>
    c874:	d9801717 	ldw	r6,92(sp)
    c878:	0023883a 	mov	r17,zero
    c87c:	31bfff04 	addi	r6,r6,-4
    c880:	d9801715 	stw	r6,92(sp)
    c884:	003df806 	br	c068 <_dtoa_r+0x28c>
    c888:	00800804 	movi	r2,32
    c88c:	10c9c83a 	sub	r4,r2,r3
    c890:	00c00104 	movi	r3,4
    c894:	19005a16 	blt	r3,r4,ca00 <_dtoa_r+0xc24>
    c898:	008000c4 	movi	r2,3
    c89c:	113f7e16 	blt	r2,r4,c698 <_dtoa_r+0x8bc>
    c8a0:	20800704 	addi	r2,r4,28
    c8a4:	003f7506 	br	c67c <_dtoa_r+0x8a0>
    c8a8:	d9801717 	ldw	r6,92(sp)
    c8ac:	00800044 	movi	r2,1
    c8b0:	1180a10e 	bge	r2,r6,cb38 <_dtoa_r+0xd5c>
    c8b4:	d9800f17 	ldw	r6,60(sp)
    c8b8:	d8c01017 	ldw	r3,64(sp)
    c8bc:	30bfffc4 	addi	r2,r6,-1
    c8c0:	1881c616 	blt	r3,r2,cfdc <_dtoa_r+0x1200>
    c8c4:	18a5c83a 	sub	r18,r3,r2
    c8c8:	d8800f17 	ldw	r2,60(sp)
    c8cc:	10026216 	blt	r2,zero,d258 <_dtoa_r+0x147c>
    c8d0:	dc001117 	ldw	r16,68(sp)
    c8d4:	1007883a 	mov	r3,r2
    c8d8:	d9800a17 	ldw	r6,40(sp)
    c8dc:	d8801117 	ldw	r2,68(sp)
    c8e0:	d9001617 	ldw	r4,88(sp)
    c8e4:	30cd883a 	add	r6,r6,r3
    c8e8:	10c5883a 	add	r2,r2,r3
    c8ec:	01400044 	movi	r5,1
    c8f0:	d9800a15 	stw	r6,40(sp)
    c8f4:	d8801115 	stw	r2,68(sp)
    c8f8:	00106380 	call	10638 <__i2b>
    c8fc:	1027883a 	mov	r19,r2
    c900:	003f2506 	br	c598 <_dtoa_r+0x7bc>
    c904:	00c20034 	movhi	r3,2048
    c908:	18c14f04 	addi	r3,r3,1340
    c90c:	003d6706 	br	beac <_dtoa_r+0xd0>
    c910:	dd800517 	ldw	r22,20(sp)
    c914:	04000044 	movi	r16,1
    c918:	00000706 	br	c938 <_dtoa_r+0xb5c>
    c91c:	d9400717 	ldw	r5,28(sp)
    c920:	d9001617 	ldw	r4,88(sp)
    c924:	01800284 	movi	r6,10
    c928:	000f883a 	mov	r7,zero
    c92c:	00106740 	call	10674 <__multadd>
    c930:	d8800715 	stw	r2,28(sp)
    c934:	84000044 	addi	r16,r16,1
    c938:	d9000717 	ldw	r4,28(sp)
    c93c:	900b883a 	mov	r5,r18
    c940:	000bbc40 	call	bbc4 <quorem>
    c944:	15c00c04 	addi	r23,r2,48
    c948:	b5c00005 	stb	r23,0(r22)
    c94c:	d8c00f17 	ldw	r3,60(sp)
    c950:	b5800044 	addi	r22,r22,1
    c954:	80fff116 	blt	r16,r3,c91c <_dtoa_r+0xb40>
    c958:	d8000615 	stw	zero,24(sp)
    c95c:	d9400717 	ldw	r5,28(sp)
    c960:	d9001617 	ldw	r4,88(sp)
    c964:	01800044 	movi	r6,1
    c968:	00103040 	call	10304 <__lshift>
    c96c:	1009883a 	mov	r4,r2
    c970:	900b883a 	mov	r5,r18
    c974:	d8800715 	stw	r2,28(sp)
    c978:	000fb1c0 	call	fb1c <__mcmp>
    c97c:	00803c0e 	bge	zero,r2,ca70 <_dtoa_r+0xc94>
    c980:	b009883a 	mov	r4,r22
    c984:	213fffc4 	addi	r4,r4,-1
    c988:	21400003 	ldbu	r5,0(r4)
    c98c:	00800e44 	movi	r2,57
    c990:	28c03fcc 	andi	r3,r5,255
    c994:	18c0201c 	xori	r3,r3,128
    c998:	18ffe004 	addi	r3,r3,-128
    c99c:	1881981e 	bne	r3,r2,d000 <_dtoa_r+0x1224>
    c9a0:	d9800517 	ldw	r6,20(sp)
    c9a4:	21bff71e 	bne	r4,r6,c984 <_dtoa_r+0xba8>
    c9a8:	d8800d17 	ldw	r2,52(sp)
    c9ac:	37000044 	addi	fp,r6,1
    c9b0:	10800044 	addi	r2,r2,1
    c9b4:	d8800d15 	stw	r2,52(sp)
    c9b8:	00800c44 	movi	r2,49
    c9bc:	30800005 	stb	r2,0(r6)
    c9c0:	d9001617 	ldw	r4,88(sp)
    c9c4:	900b883a 	mov	r5,r18
    c9c8:	000f9c00 	call	f9c0 <_Bfree>
    c9cc:	983ecd26 	beq	r19,zero,c504 <_dtoa_r+0x728>
    c9d0:	d8c00617 	ldw	r3,24(sp)
    c9d4:	18000426 	beq	r3,zero,c9e8 <_dtoa_r+0xc0c>
    c9d8:	1cc00326 	beq	r3,r19,c9e8 <_dtoa_r+0xc0c>
    c9dc:	d9001617 	ldw	r4,88(sp)
    c9e0:	180b883a 	mov	r5,r3
    c9e4:	000f9c00 	call	f9c0 <_Bfree>
    c9e8:	d9001617 	ldw	r4,88(sp)
    c9ec:	980b883a 	mov	r5,r19
    c9f0:	000f9c00 	call	f9c0 <_Bfree>
    c9f4:	003ec306 	br	c504 <_dtoa_r+0x728>
    c9f8:	1805883a 	mov	r2,r3
    c9fc:	003eeb06 	br	c5ac <_dtoa_r+0x7d0>
    ca00:	d9800a17 	ldw	r6,40(sp)
    ca04:	d8c01117 	ldw	r3,68(sp)
    ca08:	20bfff04 	addi	r2,r4,-4
    ca0c:	308d883a 	add	r6,r6,r2
    ca10:	1887883a 	add	r3,r3,r2
    ca14:	80a1883a 	add	r16,r16,r2
    ca18:	d9800a15 	stw	r6,40(sp)
    ca1c:	d8c01115 	stw	r3,68(sp)
    ca20:	003f1d06 	br	c698 <_dtoa_r+0x8bc>
    ca24:	a03f0c1e 	bne	r20,zero,c658 <_dtoa_r+0x87c>
    ca28:	00800434 	movhi	r2,16
    ca2c:	10bfffc4 	addi	r2,r2,-1
    ca30:	a884703a 	and	r2,r21,r2
    ca34:	103f081e 	bne	r2,zero,c658 <_dtoa_r+0x87c>
    ca38:	a89ffc2c 	andhi	r2,r21,32752
    ca3c:	103f0626 	beq	r2,zero,c658 <_dtoa_r+0x87c>
    ca40:	d8c01117 	ldw	r3,68(sp)
    ca44:	d9000a17 	ldw	r4,40(sp)
    ca48:	18c00044 	addi	r3,r3,1
    ca4c:	21000044 	addi	r4,r4,1
    ca50:	d8c01115 	stw	r3,68(sp)
    ca54:	d9000a15 	stw	r4,40(sp)
    ca58:	003f0006 	br	c65c <_dtoa_r+0x880>
    ca5c:	d9400717 	ldw	r5,28(sp)
    ca60:	d9001617 	ldw	r4,88(sp)
    ca64:	00107740 	call	10774 <__pow5mult>
    ca68:	d8800715 	stw	r2,28(sp)
    ca6c:	003eed06 	br	c624 <_dtoa_r+0x848>
    ca70:	1000021e 	bne	r2,zero,ca7c <_dtoa_r+0xca0>
    ca74:	b880004c 	andi	r2,r23,1
    ca78:	103fc11e 	bne	r2,zero,c980 <_dtoa_r+0xba4>
    ca7c:	b5bfffc4 	addi	r22,r22,-1
    ca80:	b0c00007 	ldb	r3,0(r22)
    ca84:	00800c04 	movi	r2,48
    ca88:	18bffc26 	beq	r3,r2,ca7c <_dtoa_r+0xca0>
    ca8c:	b7000044 	addi	fp,r22,1
    ca90:	003fcb06 	br	c9c0 <_dtoa_r+0xbe4>
    ca94:	d9800d17 	ldw	r6,52(sp)
    ca98:	018fc83a 	sub	r7,zero,r6
    ca9c:	3801f726 	beq	r7,zero,d27c <_dtoa_r+0x14a0>
    caa0:	398003cc 	andi	r6,r7,15
    caa4:	300c90fa 	slli	r6,r6,3
    caa8:	01420034 	movhi	r5,2048
    caac:	29417404 	addi	r5,r5,1488
    cab0:	d9001217 	ldw	r4,72(sp)
    cab4:	314d883a 	add	r6,r6,r5
    cab8:	30c00117 	ldw	r3,4(r6)
    cabc:	30800017 	ldw	r2,0(r6)
    cac0:	d9401317 	ldw	r5,76(sp)
    cac4:	3821d13a 	srai	r16,r7,4
    cac8:	100d883a 	mov	r6,r2
    cacc:	180f883a 	mov	r7,r3
    cad0:	00070500 	call	7050 <__muldf3>
    cad4:	1011883a 	mov	r8,r2
    cad8:	1813883a 	mov	r9,r3
    cadc:	1029883a 	mov	r20,r2
    cae0:	182b883a 	mov	r21,r3
    cae4:	8001e526 	beq	r16,zero,d27c <_dtoa_r+0x14a0>
    cae8:	05800084 	movi	r22,2
    caec:	04420034 	movhi	r17,2048
    caf0:	8c41a604 	addi	r17,r17,1688
    caf4:	8080004c 	andi	r2,r16,1
    caf8:	1005003a 	cmpeq	r2,r2,zero
    cafc:	1000081e 	bne	r2,zero,cb20 <_dtoa_r+0xd44>
    cb00:	89800017 	ldw	r6,0(r17)
    cb04:	89c00117 	ldw	r7,4(r17)
    cb08:	480b883a 	mov	r5,r9
    cb0c:	4009883a 	mov	r4,r8
    cb10:	00070500 	call	7050 <__muldf3>
    cb14:	1011883a 	mov	r8,r2
    cb18:	b5800044 	addi	r22,r22,1
    cb1c:	1813883a 	mov	r9,r3
    cb20:	8021d07a 	srai	r16,r16,1
    cb24:	8c400204 	addi	r17,r17,8
    cb28:	803ff21e 	bne	r16,zero,caf4 <_dtoa_r+0xd18>
    cb2c:	4029883a 	mov	r20,r8
    cb30:	482b883a 	mov	r21,r9
    cb34:	003dca06 	br	c260 <_dtoa_r+0x484>
    cb38:	d9000817 	ldw	r4,32(sp)
    cb3c:	2005003a 	cmpeq	r2,r4,zero
    cb40:	1001f61e 	bne	r2,zero,d31c <_dtoa_r+0x1540>
    cb44:	dc001117 	ldw	r16,68(sp)
    cb48:	dc801017 	ldw	r18,64(sp)
    cb4c:	18c10cc4 	addi	r3,r3,1075
    cb50:	003f6106 	br	c8d8 <_dtoa_r+0xafc>
    cb54:	d8000b15 	stw	zero,44(sp)
    cb58:	d9802617 	ldw	r6,152(sp)
    cb5c:	d8c00d17 	ldw	r3,52(sp)
    cb60:	30800044 	addi	r2,r6,1
    cb64:	18ad883a 	add	r22,r3,r2
    cb68:	b13fffc4 	addi	r4,r22,-1
    cb6c:	d9000e15 	stw	r4,56(sp)
    cb70:	0581f60e 	bge	zero,r22,d34c <_dtoa_r+0x1570>
    cb74:	dd800f15 	stw	r22,60(sp)
    cb78:	003f3006 	br	c83c <_dtoa_r+0xa60>
    cb7c:	d8000b15 	stw	zero,44(sp)
    cb80:	d9002617 	ldw	r4,152(sp)
    cb84:	0101eb0e 	bge	zero,r4,d334 <_dtoa_r+0x1558>
    cb88:	202d883a 	mov	r22,r4
    cb8c:	d9000e15 	stw	r4,56(sp)
    cb90:	d9000f15 	stw	r4,60(sp)
    cb94:	003f2906 	br	c83c <_dtoa_r+0xa60>
    cb98:	01800044 	movi	r6,1
    cb9c:	d9800b15 	stw	r6,44(sp)
    cba0:	003ff706 	br	cb80 <_dtoa_r+0xda4>
    cba4:	01000044 	movi	r4,1
    cba8:	d9000b15 	stw	r4,44(sp)
    cbac:	003fea06 	br	cb58 <_dtoa_r+0xd7c>
    cbb0:	04000c0e 	bge	zero,r16,cbe4 <_dtoa_r+0xe08>
    cbb4:	d9400717 	ldw	r5,28(sp)
    cbb8:	d9001617 	ldw	r4,88(sp)
    cbbc:	01800044 	movi	r6,1
    cbc0:	00103040 	call	10304 <__lshift>
    cbc4:	1009883a 	mov	r4,r2
    cbc8:	900b883a 	mov	r5,r18
    cbcc:	d8800715 	stw	r2,28(sp)
    cbd0:	000fb1c0 	call	fb1c <__mcmp>
    cbd4:	0081e00e 	bge	zero,r2,d358 <_dtoa_r+0x157c>
    cbd8:	bdc00044 	addi	r23,r23,1
    cbdc:	00800e84 	movi	r2,58
    cbe0:	b881a226 	beq	r23,r2,d26c <_dtoa_r+0x1490>
    cbe4:	b7000044 	addi	fp,r22,1
    cbe8:	b5c00005 	stb	r23,0(r22)
    cbec:	003f7406 	br	c9c0 <_dtoa_r+0xbe4>
    cbf0:	00800e44 	movi	r2,57
    cbf4:	b8819d26 	beq	r23,r2,d26c <_dtoa_r+0x1490>
    cbf8:	053ffa0e 	bge	zero,r20,cbe4 <_dtoa_r+0xe08>
    cbfc:	8dc00c44 	addi	r23,r17,49
    cc00:	003ff806 	br	cbe4 <_dtoa_r+0xe08>
    cc04:	d9001617 	ldw	r4,88(sp)
    cc08:	a80b883a 	mov	r5,r21
    cc0c:	04000044 	movi	r16,1
    cc10:	000f9c00 	call	f9c0 <_Bfree>
    cc14:	003edf06 	br	c794 <_dtoa_r+0x9b8>
    cc18:	d9001617 	ldw	r4,88(sp)
    cc1c:	980b883a 	mov	r5,r19
    cc20:	01800284 	movi	r6,10
    cc24:	000f883a 	mov	r7,zero
    cc28:	00106740 	call	10674 <__multadd>
    cc2c:	1027883a 	mov	r19,r2
    cc30:	d8800615 	stw	r2,24(sp)
    cc34:	003ebb06 	br	c724 <_dtoa_r+0x948>
    cc38:	d9801117 	ldw	r6,68(sp)
    cc3c:	d8800d17 	ldw	r2,52(sp)
    cc40:	d8000915 	stw	zero,36(sp)
    cc44:	308dc83a 	sub	r6,r6,r2
    cc48:	0087c83a 	sub	r3,zero,r2
    cc4c:	d9801115 	stw	r6,68(sp)
    cc50:	d8c01015 	stw	r3,64(sp)
    cc54:	003cfe06 	br	c050 <_dtoa_r+0x274>
    cc58:	018dc83a 	sub	r6,zero,r6
    cc5c:	d9801115 	stw	r6,68(sp)
    cc60:	d8000a15 	stw	zero,40(sp)
    cc64:	003cf306 	br	c034 <_dtoa_r+0x258>
    cc68:	d9000d17 	ldw	r4,52(sp)
    cc6c:	00078040 	call	7804 <__floatsidf>
    cc70:	880b883a 	mov	r5,r17
    cc74:	8009883a 	mov	r4,r16
    cc78:	180f883a 	mov	r7,r3
    cc7c:	100d883a 	mov	r6,r2
    cc80:	001287c0 	call	1287c <__nedf2>
    cc84:	103ce126 	beq	r2,zero,c00c <_dtoa_r+0x230>
    cc88:	d9800d17 	ldw	r6,52(sp)
    cc8c:	31bfffc4 	addi	r6,r6,-1
    cc90:	d9800d15 	stw	r6,52(sp)
    cc94:	003cdd06 	br	c00c <_dtoa_r+0x230>
    cc98:	d9000717 	ldw	r4,28(sp)
    cc9c:	900b883a 	mov	r5,r18
    cca0:	000fb1c0 	call	fb1c <__mcmp>
    cca4:	103e8d0e 	bge	r2,zero,c6dc <_dtoa_r+0x900>
    cca8:	d9400717 	ldw	r5,28(sp)
    ccac:	d9001617 	ldw	r4,88(sp)
    ccb0:	01800284 	movi	r6,10
    ccb4:	000f883a 	mov	r7,zero
    ccb8:	00106740 	call	10674 <__multadd>
    ccbc:	d9800d17 	ldw	r6,52(sp)
    ccc0:	d8800715 	stw	r2,28(sp)
    ccc4:	31bfffc4 	addi	r6,r6,-1
    ccc8:	d9800d15 	stw	r6,52(sp)
    cccc:	b001a71e 	bne	r22,zero,d36c <_dtoa_r+0x1590>
    ccd0:	d8800e17 	ldw	r2,56(sp)
    ccd4:	d8800f15 	stw	r2,60(sp)
    ccd8:	003e8006 	br	c6dc <_dtoa_r+0x900>
    ccdc:	90800417 	ldw	r2,16(r18)
    cce0:	1085883a 	add	r2,r2,r2
    cce4:	1085883a 	add	r2,r2,r2
    cce8:	1485883a 	add	r2,r2,r18
    ccec:	11000417 	ldw	r4,16(r2)
    ccf0:	000f9e80 	call	f9e8 <__hi0bits>
    ccf4:	00c00804 	movi	r3,32
    ccf8:	1887c83a 	sub	r3,r3,r2
    ccfc:	003e5a06 	br	c668 <_dtoa_r+0x88c>
    cd00:	d9400717 	ldw	r5,28(sp)
    cd04:	d9801017 	ldw	r6,64(sp)
    cd08:	d9001617 	ldw	r4,88(sp)
    cd0c:	00107740 	call	10774 <__pow5mult>
    cd10:	d8800715 	stw	r2,28(sp)
    cd14:	003e4306 	br	c624 <_dtoa_r+0x848>
    cd18:	d9800f17 	ldw	r6,60(sp)
    cd1c:	d8800d17 	ldw	r2,52(sp)
    cd20:	d9800315 	stw	r6,12(sp)
    cd24:	d8800415 	stw	r2,16(sp)
    cd28:	d8c00b17 	ldw	r3,44(sp)
    cd2c:	1805003a 	cmpeq	r2,r3,zero
    cd30:	1000e21e 	bne	r2,zero,d0bc <_dtoa_r+0x12e0>
    cd34:	d9000317 	ldw	r4,12(sp)
    cd38:	0005883a 	mov	r2,zero
    cd3c:	00cff834 	movhi	r3,16352
    cd40:	200c90fa 	slli	r6,r4,3
    cd44:	01020034 	movhi	r4,2048
    cd48:	21017404 	addi	r4,r4,1488
    cd4c:	180b883a 	mov	r5,r3
    cd50:	310d883a 	add	r6,r6,r4
    cd54:	327fff17 	ldw	r9,-4(r6)
    cd58:	323ffe17 	ldw	r8,-8(r6)
    cd5c:	1009883a 	mov	r4,r2
    cd60:	480f883a 	mov	r7,r9
    cd64:	400d883a 	mov	r6,r8
    cd68:	00074140 	call	7414 <__divdf3>
    cd6c:	180b883a 	mov	r5,r3
    cd70:	b00d883a 	mov	r6,r22
    cd74:	b80f883a 	mov	r7,r23
    cd78:	1009883a 	mov	r4,r2
    cd7c:	0006f5c0 	call	6f5c <__subdf3>
    cd80:	a80b883a 	mov	r5,r21
    cd84:	a009883a 	mov	r4,r20
    cd88:	d8c01915 	stw	r3,100(sp)
    cd8c:	d8801815 	stw	r2,96(sp)
    cd90:	00078fc0 	call	78fc <__fixdfsi>
    cd94:	1009883a 	mov	r4,r2
    cd98:	1027883a 	mov	r19,r2
    cd9c:	00078040 	call	7804 <__floatsidf>
    cda0:	a80b883a 	mov	r5,r21
    cda4:	a009883a 	mov	r4,r20
    cda8:	180f883a 	mov	r7,r3
    cdac:	100d883a 	mov	r6,r2
    cdb0:	0006f5c0 	call	6f5c <__subdf3>
    cdb4:	d9801817 	ldw	r6,96(sp)
    cdb8:	1823883a 	mov	r17,r3
    cdbc:	d8801415 	stw	r2,80(sp)
    cdc0:	302d883a 	mov	r22,r6
    cdc4:	d9800517 	ldw	r6,20(sp)
    cdc8:	9cc00c04 	addi	r19,r19,48
    cdcc:	dc401515 	stw	r17,84(sp)
    cdd0:	d8c01917 	ldw	r3,100(sp)
    cdd4:	34c00005 	stb	r19,0(r6)
    cdd8:	d8800517 	ldw	r2,20(sp)
    cddc:	d9401917 	ldw	r5,100(sp)
    cde0:	d9801417 	ldw	r6,80(sp)
    cde4:	b009883a 	mov	r4,r22
    cde8:	880f883a 	mov	r7,r17
    cdec:	182f883a 	mov	r23,r3
    cdf0:	17000044 	addi	fp,r2,1
    cdf4:	000766c0 	call	766c <__gtdf2>
    cdf8:	00804e16 	blt	zero,r2,cf34 <_dtoa_r+0x1158>
    cdfc:	d9801417 	ldw	r6,80(sp)
    ce00:	0005883a 	mov	r2,zero
    ce04:	00cffc34 	movhi	r3,16368
    ce08:	180b883a 	mov	r5,r3
    ce0c:	880f883a 	mov	r7,r17
    ce10:	1009883a 	mov	r4,r2
    ce14:	0006f5c0 	call	6f5c <__subdf3>
    ce18:	d9401917 	ldw	r5,100(sp)
    ce1c:	180f883a 	mov	r7,r3
    ce20:	b009883a 	mov	r4,r22
    ce24:	100d883a 	mov	r6,r2
    ce28:	000766c0 	call	766c <__gtdf2>
    ce2c:	00bda216 	blt	zero,r2,c4b8 <_dtoa_r+0x6dc>
    ce30:	d8c00317 	ldw	r3,12(sp)
    ce34:	00800044 	movi	r2,1
    ce38:	10c01216 	blt	r2,r3,ce84 <_dtoa_r+0x10a8>
    ce3c:	003d4506 	br	c354 <_dtoa_r+0x578>
    ce40:	d9801417 	ldw	r6,80(sp)
    ce44:	0005883a 	mov	r2,zero
    ce48:	00cffc34 	movhi	r3,16368
    ce4c:	180b883a 	mov	r5,r3
    ce50:	880f883a 	mov	r7,r17
    ce54:	1009883a 	mov	r4,r2
    ce58:	0006f5c0 	call	6f5c <__subdf3>
    ce5c:	d9c01b17 	ldw	r7,108(sp)
    ce60:	180b883a 	mov	r5,r3
    ce64:	1009883a 	mov	r4,r2
    ce68:	b00d883a 	mov	r6,r22
    ce6c:	00129040 	call	12904 <__ltdf2>
    ce70:	103d9116 	blt	r2,zero,c4b8 <_dtoa_r+0x6dc>
    ce74:	d9800517 	ldw	r6,20(sp)
    ce78:	d9000317 	ldw	r4,12(sp)
    ce7c:	3105883a 	add	r2,r6,r4
    ce80:	e0bd3426 	beq	fp,r2,c354 <_dtoa_r+0x578>
    ce84:	04500934 	movhi	r17,16420
    ce88:	0021883a 	mov	r16,zero
    ce8c:	b80b883a 	mov	r5,r23
    ce90:	b009883a 	mov	r4,r22
    ce94:	800d883a 	mov	r6,r16
    ce98:	880f883a 	mov	r7,r17
    ce9c:	00070500 	call	7050 <__muldf3>
    cea0:	d9401517 	ldw	r5,84(sp)
    cea4:	d9001417 	ldw	r4,80(sp)
    cea8:	880f883a 	mov	r7,r17
    ceac:	000d883a 	mov	r6,zero
    ceb0:	d8801a15 	stw	r2,104(sp)
    ceb4:	d8c01b15 	stw	r3,108(sp)
    ceb8:	00070500 	call	7050 <__muldf3>
    cebc:	180b883a 	mov	r5,r3
    cec0:	1009883a 	mov	r4,r2
    cec4:	1823883a 	mov	r17,r3
    cec8:	1021883a 	mov	r16,r2
    cecc:	00078fc0 	call	78fc <__fixdfsi>
    ced0:	1009883a 	mov	r4,r2
    ced4:	102b883a 	mov	r21,r2
    ced8:	00078040 	call	7804 <__floatsidf>
    cedc:	880b883a 	mov	r5,r17
    cee0:	8009883a 	mov	r4,r16
    cee4:	180f883a 	mov	r7,r3
    cee8:	100d883a 	mov	r6,r2
    ceec:	0006f5c0 	call	6f5c <__subdf3>
    cef0:	1021883a 	mov	r16,r2
    cef4:	d9001b17 	ldw	r4,108(sp)
    cef8:	1823883a 	mov	r17,r3
    cefc:	dc001415 	stw	r16,80(sp)
    cf00:	ad400c04 	addi	r21,r21,48
    cf04:	dc401515 	stw	r17,84(sp)
    cf08:	d8801a17 	ldw	r2,104(sp)
    cf0c:	e5400005 	stb	r21,0(fp)
    cf10:	202f883a 	mov	r23,r4
    cf14:	d9c01b17 	ldw	r7,108(sp)
    cf18:	d9001417 	ldw	r4,80(sp)
    cf1c:	880b883a 	mov	r5,r17
    cf20:	100d883a 	mov	r6,r2
    cf24:	102d883a 	mov	r22,r2
    cf28:	e7000044 	addi	fp,fp,1
    cf2c:	00129040 	call	12904 <__ltdf2>
    cf30:	103fc30e 	bge	r2,zero,ce40 <_dtoa_r+0x1064>
    cf34:	d9000417 	ldw	r4,16(sp)
    cf38:	d9000d15 	stw	r4,52(sp)
    cf3c:	003d7106 	br	c504 <_dtoa_r+0x728>
    cf40:	d9801717 	ldw	r6,92(sp)
    cf44:	00800084 	movi	r2,2
    cf48:	11bde60e 	bge	r2,r6,c6e4 <_dtoa_r+0x908>
    cf4c:	203cfb1e 	bne	r4,zero,c33c <_dtoa_r+0x560>
    cf50:	d9001617 	ldw	r4,88(sp)
    cf54:	900b883a 	mov	r5,r18
    cf58:	01800144 	movi	r6,5
    cf5c:	000f883a 	mov	r7,zero
    cf60:	00106740 	call	10674 <__multadd>
    cf64:	d9000717 	ldw	r4,28(sp)
    cf68:	100b883a 	mov	r5,r2
    cf6c:	1025883a 	mov	r18,r2
    cf70:	000fb1c0 	call	fb1c <__mcmp>
    cf74:	00bcf10e 	bge	zero,r2,c33c <_dtoa_r+0x560>
    cf78:	d8c00d17 	ldw	r3,52(sp)
    cf7c:	d9000517 	ldw	r4,20(sp)
    cf80:	d8000615 	stw	zero,24(sp)
    cf84:	18c00044 	addi	r3,r3,1
    cf88:	d8c00d15 	stw	r3,52(sp)
    cf8c:	00800c44 	movi	r2,49
    cf90:	27000044 	addi	fp,r4,1
    cf94:	20800005 	stb	r2,0(r4)
    cf98:	003e8906 	br	c9c0 <_dtoa_r+0xbe4>
    cf9c:	d8c00517 	ldw	r3,20(sp)
    cfa0:	003bc206 	br	beac <_dtoa_r+0xd0>
    cfa4:	01820034 	movhi	r6,2048
    cfa8:	3181a604 	addi	r6,r6,1688
    cfac:	30c00917 	ldw	r3,36(r6)
    cfb0:	30800817 	ldw	r2,32(r6)
    cfb4:	d9001217 	ldw	r4,72(sp)
    cfb8:	d9401317 	ldw	r5,76(sp)
    cfbc:	180f883a 	mov	r7,r3
    cfc0:	100d883a 	mov	r6,r2
    cfc4:	00074140 	call	7414 <__divdf3>
    cfc8:	948003cc 	andi	r18,r18,15
    cfcc:	058000c4 	movi	r22,3
    cfd0:	1029883a 	mov	r20,r2
    cfd4:	182b883a 	mov	r21,r3
    cfd8:	003c8906 	br	c200 <_dtoa_r+0x424>
    cfdc:	d9001017 	ldw	r4,64(sp)
    cfe0:	d9800917 	ldw	r6,36(sp)
    cfe4:	0025883a 	mov	r18,zero
    cfe8:	1105c83a 	sub	r2,r2,r4
    cfec:	2089883a 	add	r4,r4,r2
    cff0:	308d883a 	add	r6,r6,r2
    cff4:	d9001015 	stw	r4,64(sp)
    cff8:	d9800915 	stw	r6,36(sp)
    cffc:	003e3206 	br	c8c8 <_dtoa_r+0xaec>
    d000:	28800044 	addi	r2,r5,1
    d004:	27000044 	addi	fp,r4,1
    d008:	20800005 	stb	r2,0(r4)
    d00c:	003e6c06 	br	c9c0 <_dtoa_r+0xbe4>
    d010:	d8800f17 	ldw	r2,60(sp)
    d014:	00bce016 	blt	zero,r2,c398 <_dtoa_r+0x5bc>
    d018:	d9800f17 	ldw	r6,60(sp)
    d01c:	303cc51e 	bne	r6,zero,c334 <_dtoa_r+0x558>
    d020:	0005883a 	mov	r2,zero
    d024:	00d00534 	movhi	r3,16404
    d028:	980b883a 	mov	r5,r19
    d02c:	180f883a 	mov	r7,r3
    d030:	9009883a 	mov	r4,r18
    d034:	100d883a 	mov	r6,r2
    d038:	00070500 	call	7050 <__muldf3>
    d03c:	180b883a 	mov	r5,r3
    d040:	a80f883a 	mov	r7,r21
    d044:	1009883a 	mov	r4,r2
    d048:	a00d883a 	mov	r6,r20
    d04c:	00076f40 	call	76f4 <__gedf2>
    d050:	103cb80e 	bge	r2,zero,c334 <_dtoa_r+0x558>
    d054:	0027883a 	mov	r19,zero
    d058:	0025883a 	mov	r18,zero
    d05c:	003fc606 	br	cf78 <_dtoa_r+0x119c>
    d060:	99400117 	ldw	r5,4(r19)
    d064:	d9001617 	ldw	r4,88(sp)
    d068:	000ff400 	call	ff40 <_Balloc>
    d06c:	99800417 	ldw	r6,16(r19)
    d070:	11000304 	addi	r4,r2,12
    d074:	99400304 	addi	r5,r19,12
    d078:	318d883a 	add	r6,r6,r6
    d07c:	318d883a 	add	r6,r6,r6
    d080:	31800204 	addi	r6,r6,8
    d084:	1023883a 	mov	r17,r2
    d088:	00080740 	call	8074 <memcpy>
    d08c:	d9001617 	ldw	r4,88(sp)
    d090:	880b883a 	mov	r5,r17
    d094:	01800044 	movi	r6,1
    d098:	00103040 	call	10304 <__lshift>
    d09c:	100b883a 	mov	r5,r2
    d0a0:	003d9c06 	br	c714 <_dtoa_r+0x938>
    d0a4:	00800e44 	movi	r2,57
    d0a8:	b8807026 	beq	r23,r2,d26c <_dtoa_r+0x1490>
    d0ac:	b8800044 	addi	r2,r23,1
    d0b0:	b7000044 	addi	fp,r22,1
    d0b4:	b0800005 	stb	r2,0(r22)
    d0b8:	003e4106 	br	c9c0 <_dtoa_r+0xbe4>
    d0bc:	d8800317 	ldw	r2,12(sp)
    d0c0:	01820034 	movhi	r6,2048
    d0c4:	31817404 	addi	r6,r6,1488
    d0c8:	b009883a 	mov	r4,r22
    d0cc:	100e90fa 	slli	r7,r2,3
    d0d0:	b80b883a 	mov	r5,r23
    d0d4:	398f883a 	add	r7,r7,r6
    d0d8:	38bffe17 	ldw	r2,-8(r7)
    d0dc:	d9800517 	ldw	r6,20(sp)
    d0e0:	38ffff17 	ldw	r3,-4(r7)
    d0e4:	37000044 	addi	fp,r6,1
    d0e8:	180f883a 	mov	r7,r3
    d0ec:	100d883a 	mov	r6,r2
    d0f0:	00070500 	call	7050 <__muldf3>
    d0f4:	a80b883a 	mov	r5,r21
    d0f8:	a009883a 	mov	r4,r20
    d0fc:	182f883a 	mov	r23,r3
    d100:	102d883a 	mov	r22,r2
    d104:	00078fc0 	call	78fc <__fixdfsi>
    d108:	1009883a 	mov	r4,r2
    d10c:	1027883a 	mov	r19,r2
    d110:	00078040 	call	7804 <__floatsidf>
    d114:	a80b883a 	mov	r5,r21
    d118:	a009883a 	mov	r4,r20
    d11c:	180f883a 	mov	r7,r3
    d120:	100d883a 	mov	r6,r2
    d124:	0006f5c0 	call	6f5c <__subdf3>
    d128:	180b883a 	mov	r5,r3
    d12c:	d8c00517 	ldw	r3,20(sp)
    d130:	9cc00c04 	addi	r19,r19,48
    d134:	1009883a 	mov	r4,r2
    d138:	1cc00005 	stb	r19,0(r3)
    d13c:	2021883a 	mov	r16,r4
    d140:	d9000317 	ldw	r4,12(sp)
    d144:	00800044 	movi	r2,1
    d148:	2823883a 	mov	r17,r5
    d14c:	20802226 	beq	r4,r2,d1d8 <_dtoa_r+0x13fc>
    d150:	1029883a 	mov	r20,r2
    d154:	0005883a 	mov	r2,zero
    d158:	00d00934 	movhi	r3,16420
    d15c:	180f883a 	mov	r7,r3
    d160:	100d883a 	mov	r6,r2
    d164:	880b883a 	mov	r5,r17
    d168:	8009883a 	mov	r4,r16
    d16c:	00070500 	call	7050 <__muldf3>
    d170:	180b883a 	mov	r5,r3
    d174:	1009883a 	mov	r4,r2
    d178:	1823883a 	mov	r17,r3
    d17c:	1021883a 	mov	r16,r2
    d180:	00078fc0 	call	78fc <__fixdfsi>
    d184:	1009883a 	mov	r4,r2
    d188:	102b883a 	mov	r21,r2
    d18c:	00078040 	call	7804 <__floatsidf>
    d190:	880b883a 	mov	r5,r17
    d194:	8009883a 	mov	r4,r16
    d198:	180f883a 	mov	r7,r3
    d19c:	100d883a 	mov	r6,r2
    d1a0:	0006f5c0 	call	6f5c <__subdf3>
    d1a4:	180b883a 	mov	r5,r3
    d1a8:	d8c00517 	ldw	r3,20(sp)
    d1ac:	1009883a 	mov	r4,r2
    d1b0:	ad400c04 	addi	r21,r21,48
    d1b4:	1d05883a 	add	r2,r3,r20
    d1b8:	15400005 	stb	r21,0(r2)
    d1bc:	2021883a 	mov	r16,r4
    d1c0:	d9000317 	ldw	r4,12(sp)
    d1c4:	a5000044 	addi	r20,r20,1
    d1c8:	2823883a 	mov	r17,r5
    d1cc:	a13fe11e 	bne	r20,r4,d154 <_dtoa_r+0x1378>
    d1d0:	e505883a 	add	r2,fp,r20
    d1d4:	173fffc4 	addi	fp,r2,-1
    d1d8:	0025883a 	mov	r18,zero
    d1dc:	04cff834 	movhi	r19,16352
    d1e0:	b009883a 	mov	r4,r22
    d1e4:	b80b883a 	mov	r5,r23
    d1e8:	900d883a 	mov	r6,r18
    d1ec:	980f883a 	mov	r7,r19
    d1f0:	0006fdc0 	call	6fdc <__adddf3>
    d1f4:	180b883a 	mov	r5,r3
    d1f8:	1009883a 	mov	r4,r2
    d1fc:	800d883a 	mov	r6,r16
    d200:	880f883a 	mov	r7,r17
    d204:	00129040 	call	12904 <__ltdf2>
    d208:	103cab16 	blt	r2,zero,c4b8 <_dtoa_r+0x6dc>
    d20c:	0009883a 	mov	r4,zero
    d210:	980b883a 	mov	r5,r19
    d214:	b80f883a 	mov	r7,r23
    d218:	b00d883a 	mov	r6,r22
    d21c:	0006f5c0 	call	6f5c <__subdf3>
    d220:	180b883a 	mov	r5,r3
    d224:	880f883a 	mov	r7,r17
    d228:	1009883a 	mov	r4,r2
    d22c:	800d883a 	mov	r6,r16
    d230:	000766c0 	call	766c <__gtdf2>
    d234:	00bc470e 	bge	zero,r2,c354 <_dtoa_r+0x578>
    d238:	00c00c04 	movi	r3,48
    d23c:	e73fffc4 	addi	fp,fp,-1
    d240:	e0800007 	ldb	r2,0(fp)
    d244:	10fffd26 	beq	r2,r3,d23c <_dtoa_r+0x1460>
    d248:	d9800417 	ldw	r6,16(sp)
    d24c:	e7000044 	addi	fp,fp,1
    d250:	d9800d15 	stw	r6,52(sp)
    d254:	003cab06 	br	c504 <_dtoa_r+0x728>
    d258:	d8c00f17 	ldw	r3,60(sp)
    d25c:	d9001117 	ldw	r4,68(sp)
    d260:	20e1c83a 	sub	r16,r4,r3
    d264:	0007883a 	mov	r3,zero
    d268:	003d9b06 	br	c8d8 <_dtoa_r+0xafc>
    d26c:	00800e44 	movi	r2,57
    d270:	b0800005 	stb	r2,0(r22)
    d274:	b5800044 	addi	r22,r22,1
    d278:	003dc106 	br	c980 <_dtoa_r+0xba4>
    d27c:	05800084 	movi	r22,2
    d280:	003bf706 	br	c260 <_dtoa_r+0x484>
    d284:	d9000f17 	ldw	r4,60(sp)
    d288:	013c000e 	bge	zero,r4,c28c <_dtoa_r+0x4b0>
    d28c:	d9800e17 	ldw	r6,56(sp)
    d290:	01bc300e 	bge	zero,r6,c354 <_dtoa_r+0x578>
    d294:	0005883a 	mov	r2,zero
    d298:	00d00934 	movhi	r3,16420
    d29c:	a80b883a 	mov	r5,r21
    d2a0:	180f883a 	mov	r7,r3
    d2a4:	a009883a 	mov	r4,r20
    d2a8:	100d883a 	mov	r6,r2
    d2ac:	00070500 	call	7050 <__muldf3>
    d2b0:	b1000044 	addi	r4,r22,1
    d2b4:	1021883a 	mov	r16,r2
    d2b8:	1823883a 	mov	r17,r3
    d2bc:	00078040 	call	7804 <__floatsidf>
    d2c0:	880b883a 	mov	r5,r17
    d2c4:	8009883a 	mov	r4,r16
    d2c8:	180f883a 	mov	r7,r3
    d2cc:	100d883a 	mov	r6,r2
    d2d0:	00070500 	call	7050 <__muldf3>
    d2d4:	0011883a 	mov	r8,zero
    d2d8:	02500734 	movhi	r9,16412
    d2dc:	180b883a 	mov	r5,r3
    d2e0:	480f883a 	mov	r7,r9
    d2e4:	1009883a 	mov	r4,r2
    d2e8:	400d883a 	mov	r6,r8
    d2ec:	0006fdc0 	call	6fdc <__adddf3>
    d2f0:	102d883a 	mov	r22,r2
    d2f4:	00bf3034 	movhi	r2,64704
    d2f8:	10ef883a 	add	r23,r2,r3
    d2fc:	d8800d17 	ldw	r2,52(sp)
    d300:	d8c00e17 	ldw	r3,56(sp)
    d304:	8029883a 	mov	r20,r16
    d308:	10bfffc4 	addi	r2,r2,-1
    d30c:	882b883a 	mov	r21,r17
    d310:	d8800415 	stw	r2,16(sp)
    d314:	d8c00315 	stw	r3,12(sp)
    d318:	003e8306 	br	cd28 <_dtoa_r+0xf4c>
    d31c:	d8800117 	ldw	r2,4(sp)
    d320:	dc001117 	ldw	r16,68(sp)
    d324:	dc801017 	ldw	r18,64(sp)
    d328:	00c00d84 	movi	r3,54
    d32c:	1887c83a 	sub	r3,r3,r2
    d330:	003d6906 	br	c8d8 <_dtoa_r+0xafc>
    d334:	01800044 	movi	r6,1
    d338:	3021883a 	mov	r16,r6
    d33c:	d9800f15 	stw	r6,60(sp)
    d340:	d9802615 	stw	r6,152(sp)
    d344:	d9800e15 	stw	r6,56(sp)
    d348:	003b9306 	br	c198 <_dtoa_r+0x3bc>
    d34c:	b021883a 	mov	r16,r22
    d350:	dd800f15 	stw	r22,60(sp)
    d354:	003b9006 	br	c198 <_dtoa_r+0x3bc>
    d358:	103e221e 	bne	r2,zero,cbe4 <_dtoa_r+0xe08>
    d35c:	b880004c 	andi	r2,r23,1
    d360:	1005003a 	cmpeq	r2,r2,zero
    d364:	103e1f1e 	bne	r2,zero,cbe4 <_dtoa_r+0xe08>
    d368:	003e1b06 	br	cbd8 <_dtoa_r+0xdfc>
    d36c:	d9001617 	ldw	r4,88(sp)
    d370:	980b883a 	mov	r5,r19
    d374:	01800284 	movi	r6,10
    d378:	000f883a 	mov	r7,zero
    d37c:	00106740 	call	10674 <__multadd>
    d380:	d8c00e17 	ldw	r3,56(sp)
    d384:	1027883a 	mov	r19,r2
    d388:	d8c00f15 	stw	r3,60(sp)
    d38c:	003cd306 	br	c6dc <_dtoa_r+0x900>

0000d390 <_fflush_r>:
    d390:	defffb04 	addi	sp,sp,-20
    d394:	dcc00315 	stw	r19,12(sp)
    d398:	dc800215 	stw	r18,8(sp)
    d39c:	dfc00415 	stw	ra,16(sp)
    d3a0:	dc400115 	stw	r17,4(sp)
    d3a4:	dc000015 	stw	r16,0(sp)
    d3a8:	2027883a 	mov	r19,r4
    d3ac:	2825883a 	mov	r18,r5
    d3b0:	20000226 	beq	r4,zero,d3bc <_fflush_r+0x2c>
    d3b4:	20800e17 	ldw	r2,56(r4)
    d3b8:	10005626 	beq	r2,zero,d514 <_fflush_r+0x184>
    d3bc:	9100030b 	ldhu	r4,12(r18)
    d3c0:	20ffffcc 	andi	r3,r4,65535
    d3c4:	18e0001c 	xori	r3,r3,32768
    d3c8:	18e00004 	addi	r3,r3,-32768
    d3cc:	1880020c 	andi	r2,r3,8
    d3d0:	1000261e 	bne	r2,zero,d46c <_fflush_r+0xdc>
    d3d4:	90c00117 	ldw	r3,4(r18)
    d3d8:	20820014 	ori	r2,r4,2048
    d3dc:	9080030d 	sth	r2,12(r18)
    d3e0:	1009883a 	mov	r4,r2
    d3e4:	00c0400e 	bge	zero,r3,d4e8 <_fflush_r+0x158>
    d3e8:	92000a17 	ldw	r8,40(r18)
    d3ec:	40004026 	beq	r8,zero,d4f0 <_fflush_r+0x160>
    d3f0:	2084000c 	andi	r2,r4,4096
    d3f4:	10005326 	beq	r2,zero,d544 <_fflush_r+0x1b4>
    d3f8:	94001417 	ldw	r16,80(r18)
    d3fc:	9080030b 	ldhu	r2,12(r18)
    d400:	1080010c 	andi	r2,r2,4
    d404:	1000481e 	bne	r2,zero,d528 <_fflush_r+0x198>
    d408:	91400717 	ldw	r5,28(r18)
    d40c:	9809883a 	mov	r4,r19
    d410:	800d883a 	mov	r6,r16
    d414:	000f883a 	mov	r7,zero
    d418:	403ee83a 	callr	r8
    d41c:	8080261e 	bne	r16,r2,d4b8 <_fflush_r+0x128>
    d420:	9080030b 	ldhu	r2,12(r18)
    d424:	91000417 	ldw	r4,16(r18)
    d428:	90000115 	stw	zero,4(r18)
    d42c:	10bdffcc 	andi	r2,r2,63487
    d430:	10ffffcc 	andi	r3,r2,65535
    d434:	18c4000c 	andi	r3,r3,4096
    d438:	9080030d 	sth	r2,12(r18)
    d43c:	91000015 	stw	r4,0(r18)
    d440:	18002b26 	beq	r3,zero,d4f0 <_fflush_r+0x160>
    d444:	0007883a 	mov	r3,zero
    d448:	1805883a 	mov	r2,r3
    d44c:	94001415 	stw	r16,80(r18)
    d450:	dfc00417 	ldw	ra,16(sp)
    d454:	dcc00317 	ldw	r19,12(sp)
    d458:	dc800217 	ldw	r18,8(sp)
    d45c:	dc400117 	ldw	r17,4(sp)
    d460:	dc000017 	ldw	r16,0(sp)
    d464:	dec00504 	addi	sp,sp,20
    d468:	f800283a 	ret
    d46c:	94400417 	ldw	r17,16(r18)
    d470:	88001f26 	beq	r17,zero,d4f0 <_fflush_r+0x160>
    d474:	90800017 	ldw	r2,0(r18)
    d478:	18c000cc 	andi	r3,r3,3
    d47c:	94400015 	stw	r17,0(r18)
    d480:	1461c83a 	sub	r16,r2,r17
    d484:	18002526 	beq	r3,zero,d51c <_fflush_r+0x18c>
    d488:	0005883a 	mov	r2,zero
    d48c:	90800215 	stw	r2,8(r18)
    d490:	0400170e 	bge	zero,r16,d4f0 <_fflush_r+0x160>
    d494:	90c00917 	ldw	r3,36(r18)
    d498:	91400717 	ldw	r5,28(r18)
    d49c:	880d883a 	mov	r6,r17
    d4a0:	800f883a 	mov	r7,r16
    d4a4:	9809883a 	mov	r4,r19
    d4a8:	183ee83a 	callr	r3
    d4ac:	88a3883a 	add	r17,r17,r2
    d4b0:	80a1c83a 	sub	r16,r16,r2
    d4b4:	00bff616 	blt	zero,r2,d490 <_fflush_r+0x100>
    d4b8:	9080030b 	ldhu	r2,12(r18)
    d4bc:	00ffffc4 	movi	r3,-1
    d4c0:	10801014 	ori	r2,r2,64
    d4c4:	9080030d 	sth	r2,12(r18)
    d4c8:	1805883a 	mov	r2,r3
    d4cc:	dfc00417 	ldw	ra,16(sp)
    d4d0:	dcc00317 	ldw	r19,12(sp)
    d4d4:	dc800217 	ldw	r18,8(sp)
    d4d8:	dc400117 	ldw	r17,4(sp)
    d4dc:	dc000017 	ldw	r16,0(sp)
    d4e0:	dec00504 	addi	sp,sp,20
    d4e4:	f800283a 	ret
    d4e8:	90800f17 	ldw	r2,60(r18)
    d4ec:	00bfbe16 	blt	zero,r2,d3e8 <_fflush_r+0x58>
    d4f0:	0007883a 	mov	r3,zero
    d4f4:	1805883a 	mov	r2,r3
    d4f8:	dfc00417 	ldw	ra,16(sp)
    d4fc:	dcc00317 	ldw	r19,12(sp)
    d500:	dc800217 	ldw	r18,8(sp)
    d504:	dc400117 	ldw	r17,4(sp)
    d508:	dc000017 	ldw	r16,0(sp)
    d50c:	dec00504 	addi	sp,sp,20
    d510:	f800283a 	ret
    d514:	000d6280 	call	d628 <__sinit>
    d518:	003fa806 	br	d3bc <_fflush_r+0x2c>
    d51c:	90800517 	ldw	r2,20(r18)
    d520:	90800215 	stw	r2,8(r18)
    d524:	003fda06 	br	d490 <_fflush_r+0x100>
    d528:	90800117 	ldw	r2,4(r18)
    d52c:	90c00c17 	ldw	r3,48(r18)
    d530:	80a1c83a 	sub	r16,r16,r2
    d534:	183fb426 	beq	r3,zero,d408 <_fflush_r+0x78>
    d538:	90800f17 	ldw	r2,60(r18)
    d53c:	80a1c83a 	sub	r16,r16,r2
    d540:	003fb106 	br	d408 <_fflush_r+0x78>
    d544:	91400717 	ldw	r5,28(r18)
    d548:	9809883a 	mov	r4,r19
    d54c:	000d883a 	mov	r6,zero
    d550:	01c00044 	movi	r7,1
    d554:	403ee83a 	callr	r8
    d558:	1021883a 	mov	r16,r2
    d55c:	00bfffc4 	movi	r2,-1
    d560:	80800226 	beq	r16,r2,d56c <_fflush_r+0x1dc>
    d564:	92000a17 	ldw	r8,40(r18)
    d568:	003fa406 	br	d3fc <_fflush_r+0x6c>
    d56c:	98c00017 	ldw	r3,0(r19)
    d570:	00800744 	movi	r2,29
    d574:	18bfde26 	beq	r3,r2,d4f0 <_fflush_r+0x160>
    d578:	9080030b 	ldhu	r2,12(r18)
    d57c:	8007883a 	mov	r3,r16
    d580:	10801014 	ori	r2,r2,64
    d584:	9080030d 	sth	r2,12(r18)
    d588:	003fcf06 	br	d4c8 <_fflush_r+0x138>

0000d58c <fflush>:
    d58c:	01400074 	movhi	r5,1
    d590:	2974e404 	addi	r5,r5,-11376
    d594:	2007883a 	mov	r3,r4
    d598:	20000526 	beq	r4,zero,d5b0 <fflush+0x24>
    d59c:	00820034 	movhi	r2,2048
    d5a0:	108a1f04 	addi	r2,r2,10364
    d5a4:	11000017 	ldw	r4,0(r2)
    d5a8:	180b883a 	mov	r5,r3
    d5ac:	000d3901 	jmpi	d390 <_fflush_r>
    d5b0:	00820034 	movhi	r2,2048
    d5b4:	108a2004 	addi	r2,r2,10368
    d5b8:	11000017 	ldw	r4,0(r2)
    d5bc:	000e15c1 	jmpi	e15c <_fwalk_reent>

0000d5c0 <std>:
    d5c0:	00800074 	movhi	r2,1
    d5c4:	10849d04 	addi	r2,r2,4724
    d5c8:	20800b15 	stw	r2,44(r4)
    d5cc:	00800074 	movhi	r2,1
    d5d0:	1084d804 	addi	r2,r2,4960
    d5d4:	20800815 	stw	r2,32(r4)
    d5d8:	00c00074 	movhi	r3,1
    d5dc:	18c4b904 	addi	r3,r3,4836
    d5e0:	00800074 	movhi	r2,1
    d5e4:	10849f04 	addi	r2,r2,4732
    d5e8:	2140030d 	sth	r5,12(r4)
    d5ec:	2180038d 	sth	r6,14(r4)
    d5f0:	20c00915 	stw	r3,36(r4)
    d5f4:	20800a15 	stw	r2,40(r4)
    d5f8:	20000015 	stw	zero,0(r4)
    d5fc:	20000115 	stw	zero,4(r4)
    d600:	20000215 	stw	zero,8(r4)
    d604:	20000415 	stw	zero,16(r4)
    d608:	20000515 	stw	zero,20(r4)
    d60c:	20000615 	stw	zero,24(r4)
    d610:	21000715 	stw	r4,28(r4)
    d614:	f800283a 	ret

0000d618 <__sfp_lock_acquire>:
    d618:	f800283a 	ret

0000d61c <__sfp_lock_release>:
    d61c:	f800283a 	ret

0000d620 <__sinit_lock_acquire>:
    d620:	f800283a 	ret

0000d624 <__sinit_lock_release>:
    d624:	f800283a 	ret

0000d628 <__sinit>:
    d628:	20800e17 	ldw	r2,56(r4)
    d62c:	defffd04 	addi	sp,sp,-12
    d630:	dc400115 	stw	r17,4(sp)
    d634:	dc000015 	stw	r16,0(sp)
    d638:	dfc00215 	stw	ra,8(sp)
    d63c:	04400044 	movi	r17,1
    d640:	01400104 	movi	r5,4
    d644:	000d883a 	mov	r6,zero
    d648:	2021883a 	mov	r16,r4
    d64c:	2200bb04 	addi	r8,r4,748
    d650:	200f883a 	mov	r7,r4
    d654:	10000526 	beq	r2,zero,d66c <__sinit+0x44>
    d658:	dfc00217 	ldw	ra,8(sp)
    d65c:	dc400117 	ldw	r17,4(sp)
    d660:	dc000017 	ldw	r16,0(sp)
    d664:	dec00304 	addi	sp,sp,12
    d668:	f800283a 	ret
    d66c:	21000117 	ldw	r4,4(r4)
    d670:	00800074 	movhi	r2,1
    d674:	10b5c304 	addi	r2,r2,-10484
    d678:	00c000c4 	movi	r3,3
    d67c:	80800f15 	stw	r2,60(r16)
    d680:	80c0b915 	stw	r3,740(r16)
    d684:	8200ba15 	stw	r8,744(r16)
    d688:	84400e15 	stw	r17,56(r16)
    d68c:	8000b815 	stw	zero,736(r16)
    d690:	000d5c00 	call	d5c0 <std>
    d694:	81000217 	ldw	r4,8(r16)
    d698:	880d883a 	mov	r6,r17
    d69c:	800f883a 	mov	r7,r16
    d6a0:	01400284 	movi	r5,10
    d6a4:	000d5c00 	call	d5c0 <std>
    d6a8:	81000317 	ldw	r4,12(r16)
    d6ac:	800f883a 	mov	r7,r16
    d6b0:	01400484 	movi	r5,18
    d6b4:	01800084 	movi	r6,2
    d6b8:	dfc00217 	ldw	ra,8(sp)
    d6bc:	dc400117 	ldw	r17,4(sp)
    d6c0:	dc000017 	ldw	r16,0(sp)
    d6c4:	dec00304 	addi	sp,sp,12
    d6c8:	000d5c01 	jmpi	d5c0 <std>

0000d6cc <__fp_lock>:
    d6cc:	0005883a 	mov	r2,zero
    d6d0:	f800283a 	ret

0000d6d4 <__fp_unlock>:
    d6d4:	0005883a 	mov	r2,zero
    d6d8:	f800283a 	ret

0000d6dc <__fp_unlock_all>:
    d6dc:	00820034 	movhi	r2,2048
    d6e0:	108a1f04 	addi	r2,r2,10364
    d6e4:	11000017 	ldw	r4,0(r2)
    d6e8:	01400074 	movhi	r5,1
    d6ec:	2975b504 	addi	r5,r5,-10540
    d6f0:	000e2241 	jmpi	e224 <_fwalk>

0000d6f4 <__fp_lock_all>:
    d6f4:	00820034 	movhi	r2,2048
    d6f8:	108a1f04 	addi	r2,r2,10364
    d6fc:	11000017 	ldw	r4,0(r2)
    d700:	01400074 	movhi	r5,1
    d704:	2975b304 	addi	r5,r5,-10548
    d708:	000e2241 	jmpi	e224 <_fwalk>

0000d70c <_cleanup_r>:
    d70c:	01400074 	movhi	r5,1
    d710:	29461d04 	addi	r5,r5,6260
    d714:	000e2241 	jmpi	e224 <_fwalk>

0000d718 <_cleanup>:
    d718:	00820034 	movhi	r2,2048
    d71c:	108a2004 	addi	r2,r2,10368
    d720:	11000017 	ldw	r4,0(r2)
    d724:	000d70c1 	jmpi	d70c <_cleanup_r>

0000d728 <__sfmoreglue>:
    d728:	defffc04 	addi	sp,sp,-16
    d72c:	dc400115 	stw	r17,4(sp)
    d730:	2c401724 	muli	r17,r5,92
    d734:	dc800215 	stw	r18,8(sp)
    d738:	2825883a 	mov	r18,r5
    d73c:	89400304 	addi	r5,r17,12
    d740:	dc000015 	stw	r16,0(sp)
    d744:	dfc00315 	stw	ra,12(sp)
    d748:	000f0bc0 	call	f0bc <_malloc_r>
    d74c:	0021883a 	mov	r16,zero
    d750:	880d883a 	mov	r6,r17
    d754:	000b883a 	mov	r5,zero
    d758:	10000626 	beq	r2,zero,d774 <__sfmoreglue+0x4c>
    d75c:	11000304 	addi	r4,r2,12
    d760:	14800115 	stw	r18,4(r2)
    d764:	10000015 	stw	zero,0(r2)
    d768:	11000215 	stw	r4,8(r2)
    d76c:	1021883a 	mov	r16,r2
    d770:	00081140 	call	8114 <memset>
    d774:	8005883a 	mov	r2,r16
    d778:	dfc00317 	ldw	ra,12(sp)
    d77c:	dc800217 	ldw	r18,8(sp)
    d780:	dc400117 	ldw	r17,4(sp)
    d784:	dc000017 	ldw	r16,0(sp)
    d788:	dec00404 	addi	sp,sp,16
    d78c:	f800283a 	ret

0000d790 <__sfp>:
    d790:	defffd04 	addi	sp,sp,-12
    d794:	00820034 	movhi	r2,2048
    d798:	108a2004 	addi	r2,r2,10368
    d79c:	dc000015 	stw	r16,0(sp)
    d7a0:	14000017 	ldw	r16,0(r2)
    d7a4:	dc400115 	stw	r17,4(sp)
    d7a8:	dfc00215 	stw	ra,8(sp)
    d7ac:	80800e17 	ldw	r2,56(r16)
    d7b0:	2023883a 	mov	r17,r4
    d7b4:	10002626 	beq	r2,zero,d850 <__sfp+0xc0>
    d7b8:	8400b804 	addi	r16,r16,736
    d7bc:	80800117 	ldw	r2,4(r16)
    d7c0:	81000217 	ldw	r4,8(r16)
    d7c4:	10ffffc4 	addi	r3,r2,-1
    d7c8:	18000916 	blt	r3,zero,d7f0 <__sfp+0x60>
    d7cc:	2080030f 	ldh	r2,12(r4)
    d7d0:	10000b26 	beq	r2,zero,d800 <__sfp+0x70>
    d7d4:	017fffc4 	movi	r5,-1
    d7d8:	00000206 	br	d7e4 <__sfp+0x54>
    d7dc:	2080030f 	ldh	r2,12(r4)
    d7e0:	10000726 	beq	r2,zero,d800 <__sfp+0x70>
    d7e4:	18ffffc4 	addi	r3,r3,-1
    d7e8:	21001704 	addi	r4,r4,92
    d7ec:	197ffb1e 	bne	r3,r5,d7dc <__sfp+0x4c>
    d7f0:	80800017 	ldw	r2,0(r16)
    d7f4:	10001926 	beq	r2,zero,d85c <__sfp+0xcc>
    d7f8:	1021883a 	mov	r16,r2
    d7fc:	003fef06 	br	d7bc <__sfp+0x2c>
    d800:	00bfffc4 	movi	r2,-1
    d804:	00c00044 	movi	r3,1
    d808:	2080038d 	sth	r2,14(r4)
    d80c:	20c0030d 	sth	r3,12(r4)
    d810:	20000015 	stw	zero,0(r4)
    d814:	20000215 	stw	zero,8(r4)
    d818:	20000115 	stw	zero,4(r4)
    d81c:	20000415 	stw	zero,16(r4)
    d820:	20000515 	stw	zero,20(r4)
    d824:	20000615 	stw	zero,24(r4)
    d828:	20000c15 	stw	zero,48(r4)
    d82c:	20000d15 	stw	zero,52(r4)
    d830:	20001115 	stw	zero,68(r4)
    d834:	20001215 	stw	zero,72(r4)
    d838:	2005883a 	mov	r2,r4
    d83c:	dfc00217 	ldw	ra,8(sp)
    d840:	dc400117 	ldw	r17,4(sp)
    d844:	dc000017 	ldw	r16,0(sp)
    d848:	dec00304 	addi	sp,sp,12
    d84c:	f800283a 	ret
    d850:	8009883a 	mov	r4,r16
    d854:	000d6280 	call	d628 <__sinit>
    d858:	003fd706 	br	d7b8 <__sfp+0x28>
    d85c:	8809883a 	mov	r4,r17
    d860:	01400104 	movi	r5,4
    d864:	000d7280 	call	d728 <__sfmoreglue>
    d868:	80800015 	stw	r2,0(r16)
    d86c:	103fe21e 	bne	r2,zero,d7f8 <__sfp+0x68>
    d870:	00800304 	movi	r2,12
    d874:	0009883a 	mov	r4,zero
    d878:	88800015 	stw	r2,0(r17)
    d87c:	003fee06 	br	d838 <__sfp+0xa8>

0000d880 <_malloc_trim_r>:
    d880:	defffb04 	addi	sp,sp,-20
    d884:	dcc00315 	stw	r19,12(sp)
    d888:	04c20034 	movhi	r19,2048
    d88c:	9cc3ab04 	addi	r19,r19,3756
    d890:	dc800215 	stw	r18,8(sp)
    d894:	dc400115 	stw	r17,4(sp)
    d898:	dc000015 	stw	r16,0(sp)
    d89c:	2823883a 	mov	r17,r5
    d8a0:	2025883a 	mov	r18,r4
    d8a4:	dfc00415 	stw	ra,16(sp)
    d8a8:	00135740 	call	13574 <__malloc_lock>
    d8ac:	98800217 	ldw	r2,8(r19)
    d8b0:	9009883a 	mov	r4,r18
    d8b4:	000b883a 	mov	r5,zero
    d8b8:	10c00117 	ldw	r3,4(r2)
    d8bc:	00bfff04 	movi	r2,-4
    d8c0:	18a0703a 	and	r16,r3,r2
    d8c4:	8463c83a 	sub	r17,r16,r17
    d8c8:	8c43fbc4 	addi	r17,r17,4079
    d8cc:	8822d33a 	srli	r17,r17,12
    d8d0:	0083ffc4 	movi	r2,4095
    d8d4:	8c7fffc4 	addi	r17,r17,-1
    d8d8:	8822933a 	slli	r17,r17,12
    d8dc:	1440060e 	bge	r2,r17,d8f8 <_malloc_trim_r+0x78>
    d8e0:	00112040 	call	11204 <_sbrk_r>
    d8e4:	98c00217 	ldw	r3,8(r19)
    d8e8:	9009883a 	mov	r4,r18
    d8ec:	044bc83a 	sub	r5,zero,r17
    d8f0:	80c7883a 	add	r3,r16,r3
    d8f4:	10c00926 	beq	r2,r3,d91c <_malloc_trim_r+0x9c>
    d8f8:	00135940 	call	13594 <__malloc_unlock>
    d8fc:	0005883a 	mov	r2,zero
    d900:	dfc00417 	ldw	ra,16(sp)
    d904:	dcc00317 	ldw	r19,12(sp)
    d908:	dc800217 	ldw	r18,8(sp)
    d90c:	dc400117 	ldw	r17,4(sp)
    d910:	dc000017 	ldw	r16,0(sp)
    d914:	dec00504 	addi	sp,sp,20
    d918:	f800283a 	ret
    d91c:	9009883a 	mov	r4,r18
    d920:	00112040 	call	11204 <_sbrk_r>
    d924:	844dc83a 	sub	r6,r16,r17
    d928:	00ffffc4 	movi	r3,-1
    d92c:	9009883a 	mov	r4,r18
    d930:	000b883a 	mov	r5,zero
    d934:	01c20234 	movhi	r7,2056
    d938:	39fede04 	addi	r7,r7,-1160
    d93c:	31800054 	ori	r6,r6,1
    d940:	10c00926 	beq	r2,r3,d968 <_malloc_trim_r+0xe8>
    d944:	38800017 	ldw	r2,0(r7)
    d948:	98c00217 	ldw	r3,8(r19)
    d94c:	9009883a 	mov	r4,r18
    d950:	1445c83a 	sub	r2,r2,r17
    d954:	38800015 	stw	r2,0(r7)
    d958:	19800115 	stw	r6,4(r3)
    d95c:	00135940 	call	13594 <__malloc_unlock>
    d960:	00800044 	movi	r2,1
    d964:	003fe606 	br	d900 <_malloc_trim_r+0x80>
    d968:	00112040 	call	11204 <_sbrk_r>
    d96c:	99800217 	ldw	r6,8(r19)
    d970:	100f883a 	mov	r7,r2
    d974:	9009883a 	mov	r4,r18
    d978:	1187c83a 	sub	r3,r2,r6
    d97c:	008003c4 	movi	r2,15
    d980:	19400054 	ori	r5,r3,1
    d984:	10ffdc0e 	bge	r2,r3,d8f8 <_malloc_trim_r+0x78>
    d988:	00820034 	movhi	r2,2048
    d98c:	108a2404 	addi	r2,r2,10384
    d990:	10c00017 	ldw	r3,0(r2)
    d994:	00820234 	movhi	r2,2056
    d998:	10bede04 	addi	r2,r2,-1160
    d99c:	31400115 	stw	r5,4(r6)
    d9a0:	38c7c83a 	sub	r3,r7,r3
    d9a4:	10c00015 	stw	r3,0(r2)
    d9a8:	003fd306 	br	d8f8 <_malloc_trim_r+0x78>

0000d9ac <_free_r>:
    d9ac:	defffd04 	addi	sp,sp,-12
    d9b0:	dc400115 	stw	r17,4(sp)
    d9b4:	dc000015 	stw	r16,0(sp)
    d9b8:	dfc00215 	stw	ra,8(sp)
    d9bc:	2821883a 	mov	r16,r5
    d9c0:	2023883a 	mov	r17,r4
    d9c4:	28005a26 	beq	r5,zero,db30 <_free_r+0x184>
    d9c8:	00135740 	call	13574 <__malloc_lock>
    d9cc:	823ffe04 	addi	r8,r16,-8
    d9d0:	41400117 	ldw	r5,4(r8)
    d9d4:	00bfff84 	movi	r2,-2
    d9d8:	02820034 	movhi	r10,2048
    d9dc:	5283ab04 	addi	r10,r10,3756
    d9e0:	288e703a 	and	r7,r5,r2
    d9e4:	41cd883a 	add	r6,r8,r7
    d9e8:	30c00117 	ldw	r3,4(r6)
    d9ec:	51000217 	ldw	r4,8(r10)
    d9f0:	00bfff04 	movi	r2,-4
    d9f4:	1892703a 	and	r9,r3,r2
    d9f8:	5017883a 	mov	r11,r10
    d9fc:	31006726 	beq	r6,r4,db9c <_free_r+0x1f0>
    da00:	2880004c 	andi	r2,r5,1
    da04:	1005003a 	cmpeq	r2,r2,zero
    da08:	32400115 	stw	r9,4(r6)
    da0c:	10001a1e 	bne	r2,zero,da78 <_free_r+0xcc>
    da10:	000b883a 	mov	r5,zero
    da14:	3247883a 	add	r3,r6,r9
    da18:	18800117 	ldw	r2,4(r3)
    da1c:	1080004c 	andi	r2,r2,1
    da20:	1000231e 	bne	r2,zero,dab0 <_free_r+0x104>
    da24:	280ac03a 	cmpne	r5,r5,zero
    da28:	3a4f883a 	add	r7,r7,r9
    da2c:	2800451e 	bne	r5,zero,db44 <_free_r+0x198>
    da30:	31000217 	ldw	r4,8(r6)
    da34:	00820034 	movhi	r2,2048
    da38:	1083ad04 	addi	r2,r2,3764
    da3c:	20807b26 	beq	r4,r2,dc2c <_free_r+0x280>
    da40:	30800317 	ldw	r2,12(r6)
    da44:	3a07883a 	add	r3,r7,r8
    da48:	19c00015 	stw	r7,0(r3)
    da4c:	11000215 	stw	r4,8(r2)
    da50:	20800315 	stw	r2,12(r4)
    da54:	38800054 	ori	r2,r7,1
    da58:	40800115 	stw	r2,4(r8)
    da5c:	28001a26 	beq	r5,zero,dac8 <_free_r+0x11c>
    da60:	8809883a 	mov	r4,r17
    da64:	dfc00217 	ldw	ra,8(sp)
    da68:	dc400117 	ldw	r17,4(sp)
    da6c:	dc000017 	ldw	r16,0(sp)
    da70:	dec00304 	addi	sp,sp,12
    da74:	00135941 	jmpi	13594 <__malloc_unlock>
    da78:	80bffe17 	ldw	r2,-8(r16)
    da7c:	50c00204 	addi	r3,r10,8
    da80:	4091c83a 	sub	r8,r8,r2
    da84:	41000217 	ldw	r4,8(r8)
    da88:	388f883a 	add	r7,r7,r2
    da8c:	20c06126 	beq	r4,r3,dc14 <_free_r+0x268>
    da90:	40800317 	ldw	r2,12(r8)
    da94:	3247883a 	add	r3,r6,r9
    da98:	000b883a 	mov	r5,zero
    da9c:	11000215 	stw	r4,8(r2)
    daa0:	20800315 	stw	r2,12(r4)
    daa4:	18800117 	ldw	r2,4(r3)
    daa8:	1080004c 	andi	r2,r2,1
    daac:	103fdd26 	beq	r2,zero,da24 <_free_r+0x78>
    dab0:	38800054 	ori	r2,r7,1
    dab4:	3a07883a 	add	r3,r7,r8
    dab8:	280ac03a 	cmpne	r5,r5,zero
    dabc:	40800115 	stw	r2,4(r8)
    dac0:	19c00015 	stw	r7,0(r3)
    dac4:	283fe61e 	bne	r5,zero,da60 <_free_r+0xb4>
    dac8:	00807fc4 	movi	r2,511
    dacc:	11c01f2e 	bgeu	r2,r7,db4c <_free_r+0x1a0>
    dad0:	3806d27a 	srli	r3,r7,9
    dad4:	1800481e 	bne	r3,zero,dbf8 <_free_r+0x24c>
    dad8:	3804d0fa 	srli	r2,r7,3
    dadc:	100690fa 	slli	r3,r2,3
    dae0:	1acd883a 	add	r6,r3,r11
    dae4:	31400217 	ldw	r5,8(r6)
    dae8:	31405926 	beq	r6,r5,dc50 <_free_r+0x2a4>
    daec:	28800117 	ldw	r2,4(r5)
    daf0:	00ffff04 	movi	r3,-4
    daf4:	10c4703a 	and	r2,r2,r3
    daf8:	3880022e 	bgeu	r7,r2,db04 <_free_r+0x158>
    dafc:	29400217 	ldw	r5,8(r5)
    db00:	317ffa1e 	bne	r6,r5,daec <_free_r+0x140>
    db04:	29800317 	ldw	r6,12(r5)
    db08:	41800315 	stw	r6,12(r8)
    db0c:	41400215 	stw	r5,8(r8)
    db10:	8809883a 	mov	r4,r17
    db14:	2a000315 	stw	r8,12(r5)
    db18:	32000215 	stw	r8,8(r6)
    db1c:	dfc00217 	ldw	ra,8(sp)
    db20:	dc400117 	ldw	r17,4(sp)
    db24:	dc000017 	ldw	r16,0(sp)
    db28:	dec00304 	addi	sp,sp,12
    db2c:	00135941 	jmpi	13594 <__malloc_unlock>
    db30:	dfc00217 	ldw	ra,8(sp)
    db34:	dc400117 	ldw	r17,4(sp)
    db38:	dc000017 	ldw	r16,0(sp)
    db3c:	dec00304 	addi	sp,sp,12
    db40:	f800283a 	ret
    db44:	31000217 	ldw	r4,8(r6)
    db48:	003fbd06 	br	da40 <_free_r+0x94>
    db4c:	3806d0fa 	srli	r3,r7,3
    db50:	00800044 	movi	r2,1
    db54:	51400117 	ldw	r5,4(r10)
    db58:	180890fa 	slli	r4,r3,3
    db5c:	1807d0ba 	srai	r3,r3,2
    db60:	22c9883a 	add	r4,r4,r11
    db64:	21800217 	ldw	r6,8(r4)
    db68:	10c4983a 	sll	r2,r2,r3
    db6c:	41000315 	stw	r4,12(r8)
    db70:	41800215 	stw	r6,8(r8)
    db74:	288ab03a 	or	r5,r5,r2
    db78:	22000215 	stw	r8,8(r4)
    db7c:	8809883a 	mov	r4,r17
    db80:	51400115 	stw	r5,4(r10)
    db84:	32000315 	stw	r8,12(r6)
    db88:	dfc00217 	ldw	ra,8(sp)
    db8c:	dc400117 	ldw	r17,4(sp)
    db90:	dc000017 	ldw	r16,0(sp)
    db94:	dec00304 	addi	sp,sp,12
    db98:	00135941 	jmpi	13594 <__malloc_unlock>
    db9c:	2880004c 	andi	r2,r5,1
    dba0:	3a4d883a 	add	r6,r7,r9
    dba4:	1000071e 	bne	r2,zero,dbc4 <_free_r+0x218>
    dba8:	80bffe17 	ldw	r2,-8(r16)
    dbac:	4091c83a 	sub	r8,r8,r2
    dbb0:	41000317 	ldw	r4,12(r8)
    dbb4:	40c00217 	ldw	r3,8(r8)
    dbb8:	308d883a 	add	r6,r6,r2
    dbbc:	20c00215 	stw	r3,8(r4)
    dbc0:	19000315 	stw	r4,12(r3)
    dbc4:	00820034 	movhi	r2,2048
    dbc8:	108a2304 	addi	r2,r2,10380
    dbcc:	11000017 	ldw	r4,0(r2)
    dbd0:	30c00054 	ori	r3,r6,1
    dbd4:	52000215 	stw	r8,8(r10)
    dbd8:	40c00115 	stw	r3,4(r8)
    dbdc:	313fa036 	bltu	r6,r4,da60 <_free_r+0xb4>
    dbe0:	00820034 	movhi	r2,2048
    dbe4:	108a6104 	addi	r2,r2,10628
    dbe8:	11400017 	ldw	r5,0(r2)
    dbec:	8809883a 	mov	r4,r17
    dbf0:	000d8800 	call	d880 <_malloc_trim_r>
    dbf4:	003f9a06 	br	da60 <_free_r+0xb4>
    dbf8:	00800104 	movi	r2,4
    dbfc:	10c0072e 	bgeu	r2,r3,dc1c <_free_r+0x270>
    dc00:	00800504 	movi	r2,20
    dc04:	10c01936 	bltu	r2,r3,dc6c <_free_r+0x2c0>
    dc08:	188016c4 	addi	r2,r3,91
    dc0c:	100690fa 	slli	r3,r2,3
    dc10:	003fb306 	br	dae0 <_free_r+0x134>
    dc14:	01400044 	movi	r5,1
    dc18:	003f7e06 	br	da14 <_free_r+0x68>
    dc1c:	3804d1ba 	srli	r2,r7,6
    dc20:	10800e04 	addi	r2,r2,56
    dc24:	100690fa 	slli	r3,r2,3
    dc28:	003fad06 	br	dae0 <_free_r+0x134>
    dc2c:	22000315 	stw	r8,12(r4)
    dc30:	22000215 	stw	r8,8(r4)
    dc34:	3a05883a 	add	r2,r7,r8
    dc38:	38c00054 	ori	r3,r7,1
    dc3c:	11c00015 	stw	r7,0(r2)
    dc40:	41000215 	stw	r4,8(r8)
    dc44:	40c00115 	stw	r3,4(r8)
    dc48:	41000315 	stw	r4,12(r8)
    dc4c:	003f8406 	br	da60 <_free_r+0xb4>
    dc50:	1005d0ba 	srai	r2,r2,2
    dc54:	00c00044 	movi	r3,1
    dc58:	51000117 	ldw	r4,4(r10)
    dc5c:	1886983a 	sll	r3,r3,r2
    dc60:	20c8b03a 	or	r4,r4,r3
    dc64:	51000115 	stw	r4,4(r10)
    dc68:	003fa706 	br	db08 <_free_r+0x15c>
    dc6c:	00801504 	movi	r2,84
    dc70:	10c00436 	bltu	r2,r3,dc84 <_free_r+0x2d8>
    dc74:	3804d33a 	srli	r2,r7,12
    dc78:	10801b84 	addi	r2,r2,110
    dc7c:	100690fa 	slli	r3,r2,3
    dc80:	003f9706 	br	dae0 <_free_r+0x134>
    dc84:	00805504 	movi	r2,340
    dc88:	10c00436 	bltu	r2,r3,dc9c <_free_r+0x2f0>
    dc8c:	3804d3fa 	srli	r2,r7,15
    dc90:	10801dc4 	addi	r2,r2,119
    dc94:	100690fa 	slli	r3,r2,3
    dc98:	003f9106 	br	dae0 <_free_r+0x134>
    dc9c:	00815504 	movi	r2,1364
    dca0:	10c0032e 	bgeu	r2,r3,dcb0 <_free_r+0x304>
    dca4:	00801f84 	movi	r2,126
    dca8:	00c0fc04 	movi	r3,1008
    dcac:	003f8c06 	br	dae0 <_free_r+0x134>
    dcb0:	3804d4ba 	srli	r2,r7,18
    dcb4:	10801f04 	addi	r2,r2,124
    dcb8:	100690fa 	slli	r3,r2,3
    dcbc:	003f8806 	br	dae0 <_free_r+0x134>

0000dcc0 <__sfvwrite_r>:
    dcc0:	30800217 	ldw	r2,8(r6)
    dcc4:	defff504 	addi	sp,sp,-44
    dcc8:	df000915 	stw	fp,36(sp)
    dccc:	dd800715 	stw	r22,28(sp)
    dcd0:	dc800315 	stw	r18,12(sp)
    dcd4:	dfc00a15 	stw	ra,40(sp)
    dcd8:	ddc00815 	stw	r23,32(sp)
    dcdc:	dd400615 	stw	r21,24(sp)
    dce0:	dd000515 	stw	r20,20(sp)
    dce4:	dcc00415 	stw	r19,16(sp)
    dce8:	dc400215 	stw	r17,8(sp)
    dcec:	dc000115 	stw	r16,4(sp)
    dcf0:	302d883a 	mov	r22,r6
    dcf4:	2039883a 	mov	fp,r4
    dcf8:	2825883a 	mov	r18,r5
    dcfc:	10001c26 	beq	r2,zero,dd70 <__sfvwrite_r+0xb0>
    dd00:	29c0030b 	ldhu	r7,12(r5)
    dd04:	3880020c 	andi	r2,r7,8
    dd08:	10002726 	beq	r2,zero,dda8 <__sfvwrite_r+0xe8>
    dd0c:	28800417 	ldw	r2,16(r5)
    dd10:	10002526 	beq	r2,zero,dda8 <__sfvwrite_r+0xe8>
    dd14:	3880008c 	andi	r2,r7,2
    dd18:	b5400017 	ldw	r21,0(r22)
    dd1c:	10002826 	beq	r2,zero,ddc0 <__sfvwrite_r+0x100>
    dd20:	0021883a 	mov	r16,zero
    dd24:	0023883a 	mov	r17,zero
    dd28:	880d883a 	mov	r6,r17
    dd2c:	e009883a 	mov	r4,fp
    dd30:	00810004 	movi	r2,1024
    dd34:	80006e26 	beq	r16,zero,def0 <__sfvwrite_r+0x230>
    dd38:	800f883a 	mov	r7,r16
    dd3c:	91400717 	ldw	r5,28(r18)
    dd40:	1400012e 	bgeu	r2,r16,dd48 <__sfvwrite_r+0x88>
    dd44:	100f883a 	mov	r7,r2
    dd48:	90c00917 	ldw	r3,36(r18)
    dd4c:	183ee83a 	callr	r3
    dd50:	1007883a 	mov	r3,r2
    dd54:	80a1c83a 	sub	r16,r16,r2
    dd58:	88a3883a 	add	r17,r17,r2
    dd5c:	00806d0e 	bge	zero,r2,df14 <__sfvwrite_r+0x254>
    dd60:	b0800217 	ldw	r2,8(r22)
    dd64:	10c5c83a 	sub	r2,r2,r3
    dd68:	b0800215 	stw	r2,8(r22)
    dd6c:	103fee1e 	bne	r2,zero,dd28 <__sfvwrite_r+0x68>
    dd70:	0009883a 	mov	r4,zero
    dd74:	2005883a 	mov	r2,r4
    dd78:	dfc00a17 	ldw	ra,40(sp)
    dd7c:	df000917 	ldw	fp,36(sp)
    dd80:	ddc00817 	ldw	r23,32(sp)
    dd84:	dd800717 	ldw	r22,28(sp)
    dd88:	dd400617 	ldw	r21,24(sp)
    dd8c:	dd000517 	ldw	r20,20(sp)
    dd90:	dcc00417 	ldw	r19,16(sp)
    dd94:	dc800317 	ldw	r18,12(sp)
    dd98:	dc400217 	ldw	r17,8(sp)
    dd9c:	dc000117 	ldw	r16,4(sp)
    dda0:	dec00b04 	addi	sp,sp,44
    dda4:	f800283a 	ret
    dda8:	000ba880 	call	ba88 <__swsetup_r>
    ddac:	1000e41e 	bne	r2,zero,e140 <__sfvwrite_r+0x480>
    ddb0:	91c0030b 	ldhu	r7,12(r18)
    ddb4:	b5400017 	ldw	r21,0(r22)
    ddb8:	3880008c 	andi	r2,r7,2
    ddbc:	103fd81e 	bne	r2,zero,dd20 <__sfvwrite_r+0x60>
    ddc0:	3880004c 	andi	r2,r7,1
    ddc4:	1005003a 	cmpeq	r2,r2,zero
    ddc8:	10005726 	beq	r2,zero,df28 <__sfvwrite_r+0x268>
    ddcc:	0029883a 	mov	r20,zero
    ddd0:	002f883a 	mov	r23,zero
    ddd4:	a0004226 	beq	r20,zero,dee0 <__sfvwrite_r+0x220>
    ddd8:	3880800c 	andi	r2,r7,512
    dddc:	94000217 	ldw	r16,8(r18)
    dde0:	10008b26 	beq	r2,zero,e010 <__sfvwrite_r+0x350>
    dde4:	800d883a 	mov	r6,r16
    dde8:	a400a536 	bltu	r20,r16,e080 <__sfvwrite_r+0x3c0>
    ddec:	3881200c 	andi	r2,r7,1152
    ddf0:	10002726 	beq	r2,zero,de90 <__sfvwrite_r+0x1d0>
    ddf4:	90800517 	ldw	r2,20(r18)
    ddf8:	92000417 	ldw	r8,16(r18)
    ddfc:	91400017 	ldw	r5,0(r18)
    de00:	1087883a 	add	r3,r2,r2
    de04:	1887883a 	add	r3,r3,r2
    de08:	1808d7fa 	srli	r4,r3,31
    de0c:	2a21c83a 	sub	r16,r5,r8
    de10:	80800044 	addi	r2,r16,1
    de14:	20c9883a 	add	r4,r4,r3
    de18:	2027d07a 	srai	r19,r4,1
    de1c:	a085883a 	add	r2,r20,r2
    de20:	980d883a 	mov	r6,r19
    de24:	9880022e 	bgeu	r19,r2,de30 <__sfvwrite_r+0x170>
    de28:	1027883a 	mov	r19,r2
    de2c:	100d883a 	mov	r6,r2
    de30:	3881000c 	andi	r2,r7,1024
    de34:	1000b826 	beq	r2,zero,e118 <__sfvwrite_r+0x458>
    de38:	300b883a 	mov	r5,r6
    de3c:	e009883a 	mov	r4,fp
    de40:	000f0bc0 	call	f0bc <_malloc_r>
    de44:	10003126 	beq	r2,zero,df0c <__sfvwrite_r+0x24c>
    de48:	91400417 	ldw	r5,16(r18)
    de4c:	1009883a 	mov	r4,r2
    de50:	800d883a 	mov	r6,r16
    de54:	1023883a 	mov	r17,r2
    de58:	00080740 	call	8074 <memcpy>
    de5c:	90c0030b 	ldhu	r3,12(r18)
    de60:	00beffc4 	movi	r2,-1025
    de64:	1886703a 	and	r3,r3,r2
    de68:	18c02014 	ori	r3,r3,128
    de6c:	90c0030d 	sth	r3,12(r18)
    de70:	9c07c83a 	sub	r3,r19,r16
    de74:	8c05883a 	add	r2,r17,r16
    de78:	a00d883a 	mov	r6,r20
    de7c:	a021883a 	mov	r16,r20
    de80:	90800015 	stw	r2,0(r18)
    de84:	90c00215 	stw	r3,8(r18)
    de88:	94400415 	stw	r17,16(r18)
    de8c:	94c00515 	stw	r19,20(r18)
    de90:	91000017 	ldw	r4,0(r18)
    de94:	b80b883a 	mov	r5,r23
    de98:	a023883a 	mov	r17,r20
    de9c:	000f8e00 	call	f8e0 <memmove>
    dea0:	90c00217 	ldw	r3,8(r18)
    dea4:	90800017 	ldw	r2,0(r18)
    dea8:	a027883a 	mov	r19,r20
    deac:	1c07c83a 	sub	r3,r3,r16
    deb0:	1405883a 	add	r2,r2,r16
    deb4:	90c00215 	stw	r3,8(r18)
    deb8:	a021883a 	mov	r16,r20
    debc:	90800015 	stw	r2,0(r18)
    dec0:	b0800217 	ldw	r2,8(r22)
    dec4:	1405c83a 	sub	r2,r2,r16
    dec8:	b0800215 	stw	r2,8(r22)
    decc:	103fa826 	beq	r2,zero,dd70 <__sfvwrite_r+0xb0>
    ded0:	a469c83a 	sub	r20,r20,r17
    ded4:	91c0030b 	ldhu	r7,12(r18)
    ded8:	bcef883a 	add	r23,r23,r19
    dedc:	a03fbe1e 	bne	r20,zero,ddd8 <__sfvwrite_r+0x118>
    dee0:	adc00017 	ldw	r23,0(r21)
    dee4:	ad000117 	ldw	r20,4(r21)
    dee8:	ad400204 	addi	r21,r21,8
    deec:	003fb906 	br	ddd4 <__sfvwrite_r+0x114>
    def0:	ac400017 	ldw	r17,0(r21)
    def4:	ac000117 	ldw	r16,4(r21)
    def8:	ad400204 	addi	r21,r21,8
    defc:	003f8a06 	br	dd28 <__sfvwrite_r+0x68>
    df00:	91400417 	ldw	r5,16(r18)
    df04:	e009883a 	mov	r4,fp
    df08:	000d9ac0 	call	d9ac <_free_r>
    df0c:	00800304 	movi	r2,12
    df10:	e0800015 	stw	r2,0(fp)
    df14:	9080030b 	ldhu	r2,12(r18)
    df18:	013fffc4 	movi	r4,-1
    df1c:	10801014 	ori	r2,r2,64
    df20:	9080030d 	sth	r2,12(r18)
    df24:	003f9306 	br	dd74 <__sfvwrite_r+0xb4>
    df28:	0027883a 	mov	r19,zero
    df2c:	002f883a 	mov	r23,zero
    df30:	d8000015 	stw	zero,0(sp)
    df34:	0029883a 	mov	r20,zero
    df38:	98001e26 	beq	r19,zero,dfb4 <__sfvwrite_r+0x2f4>
    df3c:	d8c00017 	ldw	r3,0(sp)
    df40:	1804c03a 	cmpne	r2,r3,zero
    df44:	10005e26 	beq	r2,zero,e0c0 <__sfvwrite_r+0x400>
    df48:	9821883a 	mov	r16,r19
    df4c:	a4c0012e 	bgeu	r20,r19,df54 <__sfvwrite_r+0x294>
    df50:	a021883a 	mov	r16,r20
    df54:	91000017 	ldw	r4,0(r18)
    df58:	90800417 	ldw	r2,16(r18)
    df5c:	91800217 	ldw	r6,8(r18)
    df60:	91c00517 	ldw	r7,20(r18)
    df64:	1100022e 	bgeu	r2,r4,df70 <__sfvwrite_r+0x2b0>
    df68:	31e3883a 	add	r17,r6,r7
    df6c:	8c001616 	blt	r17,r16,dfc8 <__sfvwrite_r+0x308>
    df70:	81c03816 	blt	r16,r7,e054 <__sfvwrite_r+0x394>
    df74:	90c00917 	ldw	r3,36(r18)
    df78:	91400717 	ldw	r5,28(r18)
    df7c:	e009883a 	mov	r4,fp
    df80:	b80d883a 	mov	r6,r23
    df84:	183ee83a 	callr	r3
    df88:	1023883a 	mov	r17,r2
    df8c:	00bfe10e 	bge	zero,r2,df14 <__sfvwrite_r+0x254>
    df90:	a469c83a 	sub	r20,r20,r17
    df94:	a0001826 	beq	r20,zero,dff8 <__sfvwrite_r+0x338>
    df98:	b0800217 	ldw	r2,8(r22)
    df9c:	1445c83a 	sub	r2,r2,r17
    dfa0:	b0800215 	stw	r2,8(r22)
    dfa4:	103f7226 	beq	r2,zero,dd70 <__sfvwrite_r+0xb0>
    dfa8:	9c67c83a 	sub	r19,r19,r17
    dfac:	bc6f883a 	add	r23,r23,r17
    dfb0:	983fe21e 	bne	r19,zero,df3c <__sfvwrite_r+0x27c>
    dfb4:	adc00017 	ldw	r23,0(r21)
    dfb8:	acc00117 	ldw	r19,4(r21)
    dfbc:	ad400204 	addi	r21,r21,8
    dfc0:	d8000015 	stw	zero,0(sp)
    dfc4:	003fdc06 	br	df38 <__sfvwrite_r+0x278>
    dfc8:	b80b883a 	mov	r5,r23
    dfcc:	880d883a 	mov	r6,r17
    dfd0:	000f8e00 	call	f8e0 <memmove>
    dfd4:	90c00017 	ldw	r3,0(r18)
    dfd8:	e009883a 	mov	r4,fp
    dfdc:	900b883a 	mov	r5,r18
    dfe0:	1c47883a 	add	r3,r3,r17
    dfe4:	90c00015 	stw	r3,0(r18)
    dfe8:	000d3900 	call	d390 <_fflush_r>
    dfec:	103fc91e 	bne	r2,zero,df14 <__sfvwrite_r+0x254>
    dff0:	a469c83a 	sub	r20,r20,r17
    dff4:	a03fe81e 	bne	r20,zero,df98 <__sfvwrite_r+0x2d8>
    dff8:	e009883a 	mov	r4,fp
    dffc:	900b883a 	mov	r5,r18
    e000:	000d3900 	call	d390 <_fflush_r>
    e004:	103fc31e 	bne	r2,zero,df14 <__sfvwrite_r+0x254>
    e008:	d8000015 	stw	zero,0(sp)
    e00c:	003fe206 	br	df98 <__sfvwrite_r+0x2d8>
    e010:	91000017 	ldw	r4,0(r18)
    e014:	90800417 	ldw	r2,16(r18)
    e018:	1100022e 	bgeu	r2,r4,e024 <__sfvwrite_r+0x364>
    e01c:	8023883a 	mov	r17,r16
    e020:	85003136 	bltu	r16,r20,e0e8 <__sfvwrite_r+0x428>
    e024:	91c00517 	ldw	r7,20(r18)
    e028:	a1c01836 	bltu	r20,r7,e08c <__sfvwrite_r+0x3cc>
    e02c:	90c00917 	ldw	r3,36(r18)
    e030:	91400717 	ldw	r5,28(r18)
    e034:	e009883a 	mov	r4,fp
    e038:	b80d883a 	mov	r6,r23
    e03c:	183ee83a 	callr	r3
    e040:	1021883a 	mov	r16,r2
    e044:	00bfb30e 	bge	zero,r2,df14 <__sfvwrite_r+0x254>
    e048:	1023883a 	mov	r17,r2
    e04c:	1027883a 	mov	r19,r2
    e050:	003f9b06 	br	dec0 <__sfvwrite_r+0x200>
    e054:	b80b883a 	mov	r5,r23
    e058:	800d883a 	mov	r6,r16
    e05c:	000f8e00 	call	f8e0 <memmove>
    e060:	90c00217 	ldw	r3,8(r18)
    e064:	90800017 	ldw	r2,0(r18)
    e068:	8023883a 	mov	r17,r16
    e06c:	1c07c83a 	sub	r3,r3,r16
    e070:	1405883a 	add	r2,r2,r16
    e074:	90c00215 	stw	r3,8(r18)
    e078:	90800015 	stw	r2,0(r18)
    e07c:	003fc406 	br	df90 <__sfvwrite_r+0x2d0>
    e080:	a00d883a 	mov	r6,r20
    e084:	a021883a 	mov	r16,r20
    e088:	003f8106 	br	de90 <__sfvwrite_r+0x1d0>
    e08c:	b80b883a 	mov	r5,r23
    e090:	a00d883a 	mov	r6,r20
    e094:	000f8e00 	call	f8e0 <memmove>
    e098:	90c00217 	ldw	r3,8(r18)
    e09c:	90800017 	ldw	r2,0(r18)
    e0a0:	a021883a 	mov	r16,r20
    e0a4:	1d07c83a 	sub	r3,r3,r20
    e0a8:	1505883a 	add	r2,r2,r20
    e0ac:	a023883a 	mov	r17,r20
    e0b0:	a027883a 	mov	r19,r20
    e0b4:	90c00215 	stw	r3,8(r18)
    e0b8:	90800015 	stw	r2,0(r18)
    e0bc:	003f8006 	br	dec0 <__sfvwrite_r+0x200>
    e0c0:	b809883a 	mov	r4,r23
    e0c4:	01400284 	movi	r5,10
    e0c8:	980d883a 	mov	r6,r19
    e0cc:	000f7fc0 	call	f7fc <memchr>
    e0d0:	10001726 	beq	r2,zero,e130 <__sfvwrite_r+0x470>
    e0d4:	15c5c83a 	sub	r2,r2,r23
    e0d8:	15000044 	addi	r20,r2,1
    e0dc:	00800044 	movi	r2,1
    e0e0:	d8800015 	stw	r2,0(sp)
    e0e4:	003f9806 	br	df48 <__sfvwrite_r+0x288>
    e0e8:	b80b883a 	mov	r5,r23
    e0ec:	800d883a 	mov	r6,r16
    e0f0:	000f8e00 	call	f8e0 <memmove>
    e0f4:	90c00017 	ldw	r3,0(r18)
    e0f8:	e009883a 	mov	r4,fp
    e0fc:	900b883a 	mov	r5,r18
    e100:	1c07883a 	add	r3,r3,r16
    e104:	90c00015 	stw	r3,0(r18)
    e108:	8027883a 	mov	r19,r16
    e10c:	000d3900 	call	d390 <_fflush_r>
    e110:	103f6b26 	beq	r2,zero,dec0 <__sfvwrite_r+0x200>
    e114:	003f7f06 	br	df14 <__sfvwrite_r+0x254>
    e118:	400b883a 	mov	r5,r8
    e11c:	e009883a 	mov	r4,fp
    e120:	0010ba00 	call	10ba0 <_realloc_r>
    e124:	103f7626 	beq	r2,zero,df00 <__sfvwrite_r+0x240>
    e128:	1023883a 	mov	r17,r2
    e12c:	003f5006 	br	de70 <__sfvwrite_r+0x1b0>
    e130:	00c00044 	movi	r3,1
    e134:	9d000044 	addi	r20,r19,1
    e138:	d8c00015 	stw	r3,0(sp)
    e13c:	003f8206 	br	df48 <__sfvwrite_r+0x288>
    e140:	9080030b 	ldhu	r2,12(r18)
    e144:	00c00244 	movi	r3,9
    e148:	013fffc4 	movi	r4,-1
    e14c:	10801014 	ori	r2,r2,64
    e150:	9080030d 	sth	r2,12(r18)
    e154:	e0c00015 	stw	r3,0(fp)
    e158:	003f0606 	br	dd74 <__sfvwrite_r+0xb4>

0000e15c <_fwalk_reent>:
    e15c:	defff704 	addi	sp,sp,-36
    e160:	dcc00315 	stw	r19,12(sp)
    e164:	24c0b804 	addi	r19,r4,736
    e168:	dd800615 	stw	r22,24(sp)
    e16c:	dd400515 	stw	r21,20(sp)
    e170:	dfc00815 	stw	ra,32(sp)
    e174:	ddc00715 	stw	r23,28(sp)
    e178:	dd000415 	stw	r20,16(sp)
    e17c:	dc800215 	stw	r18,8(sp)
    e180:	dc400115 	stw	r17,4(sp)
    e184:	dc000015 	stw	r16,0(sp)
    e188:	202b883a 	mov	r21,r4
    e18c:	282d883a 	mov	r22,r5
    e190:	000d6180 	call	d618 <__sfp_lock_acquire>
    e194:	98002126 	beq	r19,zero,e21c <_fwalk_reent+0xc0>
    e198:	002f883a 	mov	r23,zero
    e19c:	9c800117 	ldw	r18,4(r19)
    e1a0:	9c000217 	ldw	r16,8(r19)
    e1a4:	90bfffc4 	addi	r2,r18,-1
    e1a8:	10000d16 	blt	r2,zero,e1e0 <_fwalk_reent+0x84>
    e1ac:	0023883a 	mov	r17,zero
    e1b0:	053fffc4 	movi	r20,-1
    e1b4:	8080030f 	ldh	r2,12(r16)
    e1b8:	8c400044 	addi	r17,r17,1
    e1bc:	10000626 	beq	r2,zero,e1d8 <_fwalk_reent+0x7c>
    e1c0:	8080038f 	ldh	r2,14(r16)
    e1c4:	800b883a 	mov	r5,r16
    e1c8:	a809883a 	mov	r4,r21
    e1cc:	15000226 	beq	r2,r20,e1d8 <_fwalk_reent+0x7c>
    e1d0:	b03ee83a 	callr	r22
    e1d4:	b8aeb03a 	or	r23,r23,r2
    e1d8:	84001704 	addi	r16,r16,92
    e1dc:	947ff51e 	bne	r18,r17,e1b4 <_fwalk_reent+0x58>
    e1e0:	9cc00017 	ldw	r19,0(r19)
    e1e4:	983fed1e 	bne	r19,zero,e19c <_fwalk_reent+0x40>
    e1e8:	000d61c0 	call	d61c <__sfp_lock_release>
    e1ec:	b805883a 	mov	r2,r23
    e1f0:	dfc00817 	ldw	ra,32(sp)
    e1f4:	ddc00717 	ldw	r23,28(sp)
    e1f8:	dd800617 	ldw	r22,24(sp)
    e1fc:	dd400517 	ldw	r21,20(sp)
    e200:	dd000417 	ldw	r20,16(sp)
    e204:	dcc00317 	ldw	r19,12(sp)
    e208:	dc800217 	ldw	r18,8(sp)
    e20c:	dc400117 	ldw	r17,4(sp)
    e210:	dc000017 	ldw	r16,0(sp)
    e214:	dec00904 	addi	sp,sp,36
    e218:	f800283a 	ret
    e21c:	002f883a 	mov	r23,zero
    e220:	003ff106 	br	e1e8 <_fwalk_reent+0x8c>

0000e224 <_fwalk>:
    e224:	defff804 	addi	sp,sp,-32
    e228:	dcc00315 	stw	r19,12(sp)
    e22c:	24c0b804 	addi	r19,r4,736
    e230:	dd400515 	stw	r21,20(sp)
    e234:	dfc00715 	stw	ra,28(sp)
    e238:	dd800615 	stw	r22,24(sp)
    e23c:	dd000415 	stw	r20,16(sp)
    e240:	dc800215 	stw	r18,8(sp)
    e244:	dc400115 	stw	r17,4(sp)
    e248:	dc000015 	stw	r16,0(sp)
    e24c:	282b883a 	mov	r21,r5
    e250:	000d6180 	call	d618 <__sfp_lock_acquire>
    e254:	98001f26 	beq	r19,zero,e2d4 <_fwalk+0xb0>
    e258:	002d883a 	mov	r22,zero
    e25c:	9c800117 	ldw	r18,4(r19)
    e260:	9c000217 	ldw	r16,8(r19)
    e264:	90bfffc4 	addi	r2,r18,-1
    e268:	10000c16 	blt	r2,zero,e29c <_fwalk+0x78>
    e26c:	0023883a 	mov	r17,zero
    e270:	053fffc4 	movi	r20,-1
    e274:	8080030f 	ldh	r2,12(r16)
    e278:	8c400044 	addi	r17,r17,1
    e27c:	10000526 	beq	r2,zero,e294 <_fwalk+0x70>
    e280:	8080038f 	ldh	r2,14(r16)
    e284:	8009883a 	mov	r4,r16
    e288:	15000226 	beq	r2,r20,e294 <_fwalk+0x70>
    e28c:	a83ee83a 	callr	r21
    e290:	b0acb03a 	or	r22,r22,r2
    e294:	84001704 	addi	r16,r16,92
    e298:	947ff61e 	bne	r18,r17,e274 <_fwalk+0x50>
    e29c:	9cc00017 	ldw	r19,0(r19)
    e2a0:	983fee1e 	bne	r19,zero,e25c <_fwalk+0x38>
    e2a4:	000d61c0 	call	d61c <__sfp_lock_release>
    e2a8:	b005883a 	mov	r2,r22
    e2ac:	dfc00717 	ldw	ra,28(sp)
    e2b0:	dd800617 	ldw	r22,24(sp)
    e2b4:	dd400517 	ldw	r21,20(sp)
    e2b8:	dd000417 	ldw	r20,16(sp)
    e2bc:	dcc00317 	ldw	r19,12(sp)
    e2c0:	dc800217 	ldw	r18,8(sp)
    e2c4:	dc400117 	ldw	r17,4(sp)
    e2c8:	dc000017 	ldw	r16,0(sp)
    e2cc:	dec00804 	addi	sp,sp,32
    e2d0:	f800283a 	ret
    e2d4:	002d883a 	mov	r22,zero
    e2d8:	003ff206 	br	e2a4 <_fwalk+0x80>

0000e2dc <htinit>:
    e2dc:	28800003 	ldbu	r2,0(r5)
    e2e0:	10000626 	beq	r2,zero,e2fc <htinit+0x20>
    e2e4:	1105883a 	add	r2,r2,r4
    e2e8:	11800005 	stb	r6,0(r2)
    e2ec:	28800043 	ldbu	r2,1(r5)
    e2f0:	31800044 	addi	r6,r6,1
    e2f4:	29400044 	addi	r5,r5,1
    e2f8:	103ffa1e 	bne	r2,zero,e2e4 <htinit+0x8>
    e2fc:	f800283a 	ret

0000e300 <__hexdig_init>:
    e300:	defffd04 	addi	sp,sp,-12
    e304:	dc400015 	stw	r17,0(sp)
    e308:	04420234 	movhi	r17,2056
    e30c:	8c409404 	addi	r17,r17,592
    e310:	dcc00115 	stw	r19,4(sp)
    e314:	8809883a 	mov	r4,r17
    e318:	04c00684 	movi	r19,26
    e31c:	01420034 	movhi	r5,2048
    e320:	29415c04 	addi	r5,r5,1392
    e324:	01800404 	movi	r6,16
    e328:	dfc00215 	stw	ra,8(sp)
    e32c:	000e2dc0 	call	e2dc <htinit>
    e330:	980d883a 	mov	r6,r19
    e334:	8809883a 	mov	r4,r17
    e338:	01420034 	movhi	r5,2048
    e33c:	29415f04 	addi	r5,r5,1404
    e340:	000e2dc0 	call	e2dc <htinit>
    e344:	8809883a 	mov	r4,r17
    e348:	980d883a 	mov	r6,r19
    e34c:	01420034 	movhi	r5,2048
    e350:	29416104 	addi	r5,r5,1412
    e354:	dfc00217 	ldw	ra,8(sp)
    e358:	dcc00117 	ldw	r19,4(sp)
    e35c:	dc400017 	ldw	r17,0(sp)
    e360:	dec00304 	addi	sp,sp,12
    e364:	000e2dc1 	jmpi	e2dc <htinit>

0000e368 <rshift>:
    e368:	2807d17a 	srai	r3,r5,5
    e36c:	20800417 	ldw	r2,16(r4)
    e370:	22400504 	addi	r9,r4,20
    e374:	480f883a 	mov	r7,r9
    e378:	1880190e 	bge	r3,r2,e3e0 <rshift+0x78>
    e37c:	1085883a 	add	r2,r2,r2
    e380:	18c7883a 	add	r3,r3,r3
    e384:	1085883a 	add	r2,r2,r2
    e388:	18c7883a 	add	r3,r3,r3
    e38c:	294007cc 	andi	r5,r5,31
    e390:	4891883a 	add	r8,r9,r2
    e394:	48cd883a 	add	r6,r9,r3
    e398:	28001726 	beq	r5,zero,e3f8 <rshift+0x90>
    e39c:	30c00017 	ldw	r3,0(r6)
    e3a0:	00800804 	movi	r2,32
    e3a4:	31800104 	addi	r6,r6,4
    e3a8:	1155c83a 	sub	r10,r2,r5
    e3ac:	1946d83a 	srl	r3,r3,r5
    e3b0:	3200092e 	bgeu	r6,r8,e3d8 <rshift+0x70>
    e3b4:	30800017 	ldw	r2,0(r6)
    e3b8:	1284983a 	sll	r2,r2,r10
    e3bc:	10c4b03a 	or	r2,r2,r3
    e3c0:	38800015 	stw	r2,0(r7)
    e3c4:	30c00017 	ldw	r3,0(r6)
    e3c8:	31800104 	addi	r6,r6,4
    e3cc:	39c00104 	addi	r7,r7,4
    e3d0:	1946d83a 	srl	r3,r3,r5
    e3d4:	323ff736 	bltu	r6,r8,e3b4 <rshift+0x4c>
    e3d8:	38c00015 	stw	r3,0(r7)
    e3dc:	18000c1e 	bne	r3,zero,e410 <rshift+0xa8>
    e3e0:	3a45c83a 	sub	r2,r7,r9
    e3e4:	1005d0ba 	srai	r2,r2,2
    e3e8:	20800415 	stw	r2,16(r4)
    e3ec:	1000011e 	bne	r2,zero,e3f4 <rshift+0x8c>
    e3f0:	20000515 	stw	zero,20(r4)
    e3f4:	f800283a 	ret
    e3f8:	323ff92e 	bgeu	r6,r8,e3e0 <rshift+0x78>
    e3fc:	30800017 	ldw	r2,0(r6)
    e400:	31800104 	addi	r6,r6,4
    e404:	38800015 	stw	r2,0(r7)
    e408:	39c00104 	addi	r7,r7,4
    e40c:	003ffa06 	br	e3f8 <rshift+0x90>
    e410:	39c00104 	addi	r7,r7,4
    e414:	003ff206 	br	e3e0 <rshift+0x78>

0000e418 <__gethex>:
    e418:	defff304 	addi	sp,sp,-52
    e41c:	dd400815 	stw	r21,32(sp)
    e420:	dd000715 	stw	r20,28(sp)
    e424:	dcc00615 	stw	r19,24(sp)
    e428:	dc400415 	stw	r17,16(sp)
    e42c:	dfc00c15 	stw	ra,48(sp)
    e430:	df000b15 	stw	fp,44(sp)
    e434:	ddc00a15 	stw	r23,40(sp)
    e438:	dd800915 	stw	r22,36(sp)
    e43c:	dc800515 	stw	r18,20(sp)
    e440:	dc000315 	stw	r16,12(sp)
    e444:	04420234 	movhi	r17,2056
    e448:	8c409404 	addi	r17,r17,592
    e44c:	88800c03 	ldbu	r2,48(r17)
    e450:	202b883a 	mov	r21,r4
    e454:	2827883a 	mov	r19,r5
    e458:	3029883a 	mov	r20,r6
    e45c:	d9c00115 	stw	r7,4(sp)
    e460:	10006e26 	beq	r2,zero,e61c <__gethex+0x204>
    e464:	99800017 	ldw	r6,0(r19)
    e468:	00800c04 	movi	r2,48
    e46c:	31000083 	ldbu	r4,2(r6)
    e470:	30c00084 	addi	r3,r6,2
    e474:	20806f1e 	bne	r4,r2,e634 <__gethex+0x21c>
    e478:	200b883a 	mov	r5,r4
    e47c:	3007883a 	mov	r3,r6
    e480:	188000c3 	ldbu	r2,3(r3)
    e484:	18c00044 	addi	r3,r3,1
    e488:	1009883a 	mov	r4,r2
    e48c:	117ffc26 	beq	r2,r5,e480 <__gethex+0x68>
    e490:	1997c83a 	sub	r11,r3,r6
    e494:	19400084 	addi	r5,r3,2
    e498:	2445883a 	add	r2,r4,r17
    e49c:	10c00003 	ldbu	r3,0(r2)
    e4a0:	18002d26 	beq	r3,zero,e558 <__gethex+0x140>
    e4a4:	29000003 	ldbu	r4,0(r5)
    e4a8:	2825883a 	mov	r18,r5
    e4ac:	000d883a 	mov	r6,zero
    e4b0:	0013883a 	mov	r9,zero
    e4b4:	21003fcc 	andi	r4,r4,255
    e4b8:	2445883a 	add	r2,r4,r17
    e4bc:	10c00003 	ldbu	r3,0(r2)
    e4c0:	18000526 	beq	r3,zero,e4d8 <__gethex+0xc0>
    e4c4:	29400044 	addi	r5,r5,1
    e4c8:	29000003 	ldbu	r4,0(r5)
    e4cc:	2445883a 	add	r2,r4,r17
    e4d0:	10c00003 	ldbu	r3,0(r2)
    e4d4:	183ffb1e 	bne	r3,zero,e4c4 <__gethex+0xac>
    e4d8:	00800b84 	movi	r2,46
    e4dc:	20805826 	beq	r4,r2,e640 <__gethex+0x228>
    e4e0:	30007a26 	beq	r6,zero,e6cc <__gethex+0x2b4>
    e4e4:	2985c83a 	sub	r2,r5,r6
    e4e8:	1085883a 	add	r2,r2,r2
    e4ec:	1085883a 	add	r2,r2,r2
    e4f0:	00adc83a 	sub	r22,zero,r2
    e4f4:	2821883a 	mov	r16,r5
    e4f8:	80c00003 	ldbu	r3,0(r16)
    e4fc:	00801404 	movi	r2,80
    e500:	18801e26 	beq	r3,r2,e57c <__gethex+0x164>
    e504:	00801c04 	movi	r2,112
    e508:	18801c26 	beq	r3,r2,e57c <__gethex+0x164>
    e50c:	800d883a 	mov	r6,r16
    e510:	4805003a 	cmpeq	r2,r9,zero
    e514:	99800015 	stw	r6,0(r19)
    e518:	1000861e 	bne	r2,zero,e734 <__gethex+0x31c>
    e51c:	58003d26 	beq	r11,zero,e614 <__gethex+0x1fc>
    e520:	0025883a 	mov	r18,zero
    e524:	9005883a 	mov	r2,r18
    e528:	dfc00c17 	ldw	ra,48(sp)
    e52c:	df000b17 	ldw	fp,44(sp)
    e530:	ddc00a17 	ldw	r23,40(sp)
    e534:	dd800917 	ldw	r22,36(sp)
    e538:	dd400817 	ldw	r21,32(sp)
    e53c:	dd000717 	ldw	r20,28(sp)
    e540:	dcc00617 	ldw	r19,24(sp)
    e544:	dc800517 	ldw	r18,20(sp)
    e548:	dc400417 	ldw	r17,16(sp)
    e54c:	dc000317 	ldw	r16,12(sp)
    e550:	dec00d04 	addi	sp,sp,52
    e554:	f800283a 	ret
    e558:	00800b84 	movi	r2,46
    e55c:	20804a26 	beq	r4,r2,e688 <__gethex+0x270>
    e560:	2821883a 	mov	r16,r5
    e564:	80c00003 	ldbu	r3,0(r16)
    e568:	00801404 	movi	r2,80
    e56c:	2825883a 	mov	r18,r5
    e570:	02400044 	movi	r9,1
    e574:	002d883a 	mov	r22,zero
    e578:	18bfe21e 	bne	r3,r2,e504 <__gethex+0xec>
    e57c:	80c00043 	ldbu	r3,1(r16)
    e580:	00800ac4 	movi	r2,43
    e584:	81000044 	addi	r4,r16,1
    e588:	18804a26 	beq	r3,r2,e6b4 <__gethex+0x29c>
    e58c:	00800b44 	movi	r2,45
    e590:	18804c26 	beq	r3,r2,e6c4 <__gethex+0x2ac>
    e594:	0015883a 	mov	r10,zero
    e598:	1c45883a 	add	r2,r3,r17
    e59c:	10800003 	ldbu	r2,0(r2)
    e5a0:	103fda26 	beq	r2,zero,e50c <__gethex+0xf4>
    e5a4:	02000644 	movi	r8,25
    e5a8:	40bfd816 	blt	r8,r2,e50c <__gethex+0xf4>
    e5ac:	20c00043 	ldbu	r3,1(r4)
    e5b0:	11fffc04 	addi	r7,r2,-16
    e5b4:	00820234 	movhi	r2,2056
    e5b8:	10809404 	addi	r2,r2,592
    e5bc:	1887883a 	add	r3,r3,r2
    e5c0:	18800003 	ldbu	r2,0(r3)
    e5c4:	21800044 	addi	r6,r4,1
    e5c8:	10000d26 	beq	r2,zero,e600 <__gethex+0x1e8>
    e5cc:	100b883a 	mov	r5,r2
    e5d0:	4080020e 	bge	r8,r2,e5dc <__gethex+0x1c4>
    e5d4:	00000a06 	br	e600 <__gethex+0x1e8>
    e5d8:	41000916 	blt	r8,r4,e600 <__gethex+0x1e8>
    e5dc:	31800044 	addi	r6,r6,1
    e5e0:	30800003 	ldbu	r2,0(r6)
    e5e4:	38c002a4 	muli	r3,r7,10
    e5e8:	1445883a 	add	r2,r2,r17
    e5ec:	11000003 	ldbu	r4,0(r2)
    e5f0:	1947883a 	add	r3,r3,r5
    e5f4:	19fffc04 	addi	r7,r3,-16
    e5f8:	200b883a 	mov	r5,r4
    e5fc:	203ff61e 	bne	r4,zero,e5d8 <__gethex+0x1c0>
    e600:	5005003a 	cmpeq	r2,r10,zero
    e604:	1000011e 	bne	r2,zero,e60c <__gethex+0x1f4>
    e608:	01cfc83a 	sub	r7,zero,r7
    e60c:	b1ed883a 	add	r22,r22,r7
    e610:	003fbf06 	br	e510 <__gethex+0xf8>
    e614:	04800184 	movi	r18,6
    e618:	003fc206 	br	e524 <__gethex+0x10c>
    e61c:	000e3000 	call	e300 <__hexdig_init>
    e620:	99800017 	ldw	r6,0(r19)
    e624:	00800c04 	movi	r2,48
    e628:	31000083 	ldbu	r4,2(r6)
    e62c:	30c00084 	addi	r3,r6,2
    e630:	20bf9126 	beq	r4,r2,e478 <__gethex+0x60>
    e634:	180b883a 	mov	r5,r3
    e638:	0017883a 	mov	r11,zero
    e63c:	003f9606 	br	e498 <__gethex+0x80>
    e640:	303fa81e 	bne	r6,zero,e4e4 <__gethex+0xcc>
    e644:	29400044 	addi	r5,r5,1
    e648:	28800003 	ldbu	r2,0(r5)
    e64c:	1445883a 	add	r2,r2,r17
    e650:	10c00003 	ldbu	r3,0(r2)
    e654:	1800ad26 	beq	r3,zero,e90c <__gethex+0x4f4>
    e658:	2809883a 	mov	r4,r5
    e65c:	21000044 	addi	r4,r4,1
    e660:	20800003 	ldbu	r2,0(r4)
    e664:	1445883a 	add	r2,r2,r17
    e668:	10c00003 	ldbu	r3,0(r2)
    e66c:	183ffb1e 	bne	r3,zero,e65c <__gethex+0x244>
    e670:	2145c83a 	sub	r2,r4,r5
    e674:	1085883a 	add	r2,r2,r2
    e678:	1085883a 	add	r2,r2,r2
    e67c:	00adc83a 	sub	r22,zero,r2
    e680:	200b883a 	mov	r5,r4
    e684:	003f9b06 	br	e4f4 <__gethex+0xdc>
    e688:	29000043 	ldbu	r4,1(r5)
    e68c:	00820234 	movhi	r2,2056
    e690:	10809404 	addi	r2,r2,592
    e694:	2c000044 	addi	r16,r5,1
    e698:	2085883a 	add	r2,r4,r2
    e69c:	10c00003 	ldbu	r3,0(r2)
    e6a0:	18000d1e 	bne	r3,zero,e6d8 <__gethex+0x2c0>
    e6a4:	2825883a 	mov	r18,r5
    e6a8:	02400044 	movi	r9,1
    e6ac:	002d883a 	mov	r22,zero
    e6b0:	003f9106 	br	e4f8 <__gethex+0xe0>
    e6b4:	0015883a 	mov	r10,zero
    e6b8:	21000044 	addi	r4,r4,1
    e6bc:	20c00003 	ldbu	r3,0(r4)
    e6c0:	003fb506 	br	e598 <__gethex+0x180>
    e6c4:	02800044 	movi	r10,1
    e6c8:	003ffb06 	br	e6b8 <__gethex+0x2a0>
    e6cc:	2821883a 	mov	r16,r5
    e6d0:	002d883a 	mov	r22,zero
    e6d4:	003f8806 	br	e4f8 <__gethex+0xe0>
    e6d8:	00800c04 	movi	r2,48
    e6dc:	20800e1e 	bne	r4,r2,e718 <__gethex+0x300>
    e6e0:	2007883a 	mov	r3,r4
    e6e4:	800b883a 	mov	r5,r16
    e6e8:	29400044 	addi	r5,r5,1
    e6ec:	29000003 	ldbu	r4,0(r5)
    e6f0:	20803fcc 	andi	r2,r4,255
    e6f4:	10fffc26 	beq	r2,r3,e6e8 <__gethex+0x2d0>
    e6f8:	1445883a 	add	r2,r2,r17
    e6fc:	10c00003 	ldbu	r3,0(r2)
    e700:	1800071e 	bne	r3,zero,e720 <__gethex+0x308>
    e704:	02c00044 	movi	r11,1
    e708:	800d883a 	mov	r6,r16
    e70c:	2825883a 	mov	r18,r5
    e710:	5813883a 	mov	r9,r11
    e714:	003f6706 	br	e4b4 <__gethex+0x9c>
    e718:	81000003 	ldbu	r4,0(r16)
    e71c:	800b883a 	mov	r5,r16
    e720:	800d883a 	mov	r6,r16
    e724:	2825883a 	mov	r18,r5
    e728:	02c00044 	movi	r11,1
    e72c:	0013883a 	mov	r9,zero
    e730:	003f6006 	br	e4b4 <__gethex+0x9c>
    e734:	8485c83a 	sub	r2,r16,r18
    e738:	10bfffc4 	addi	r2,r2,-1
    e73c:	00c001c4 	movi	r3,7
    e740:	1880700e 	bge	r3,r2,e904 <__gethex+0x4ec>
    e744:	000b883a 	mov	r5,zero
    e748:	1005d07a 	srai	r2,r2,1
    e74c:	29400044 	addi	r5,r5,1
    e750:	18bffd16 	blt	r3,r2,e748 <__gethex+0x330>
    e754:	a809883a 	mov	r4,r21
    e758:	000ff400 	call	ff40 <_Balloc>
    e75c:	1027883a 	mov	r19,r2
    e760:	10800504 	addi	r2,r2,20
    e764:	d8800215 	stw	r2,8(sp)
    e768:	9400522e 	bgeu	r18,r16,e8b4 <__gethex+0x49c>
    e76c:	da000217 	ldw	r8,8(sp)
    e770:	800b883a 	mov	r5,r16
    e774:	000f883a 	mov	r7,zero
    e778:	0009883a 	mov	r4,zero
    e77c:	02400b84 	movi	r9,46
    e780:	02800804 	movi	r10,32
    e784:	297fffc4 	addi	r5,r5,-1
    e788:	28c00003 	ldbu	r3,0(r5)
    e78c:	1a400826 	beq	r3,r9,e7b0 <__gethex+0x398>
    e790:	380d883a 	mov	r6,r7
    e794:	3a802726 	beq	r7,r10,e834 <__gethex+0x41c>
    e798:	39c00104 	addi	r7,r7,4
    e79c:	1c47883a 	add	r3,r3,r17
    e7a0:	18800003 	ldbu	r2,0(r3)
    e7a4:	108003cc 	andi	r2,r2,15
    e7a8:	1184983a 	sll	r2,r2,r6
    e7ac:	2088b03a 	or	r4,r4,r2
    e7b0:	917ff436 	bltu	r18,r5,e784 <__gethex+0x36c>
    e7b4:	d8c00217 	ldw	r3,8(sp)
    e7b8:	40800104 	addi	r2,r8,4
    e7bc:	41000015 	stw	r4,0(r8)
    e7c0:	10c5c83a 	sub	r2,r2,r3
    e7c4:	1021d0ba 	srai	r16,r2,2
    e7c8:	9c000415 	stw	r16,16(r19)
    e7cc:	000f9e80 	call	f9e8 <__hi0bits>
    e7d0:	8006917a 	slli	r3,r16,5
    e7d4:	a5c00017 	ldw	r23,0(r20)
    e7d8:	1885c83a 	sub	r2,r3,r2
    e7dc:	b8801c16 	blt	r23,r2,e850 <__gethex+0x438>
    e7e0:	15c00a16 	blt	r2,r23,e80c <__gethex+0x3f4>
    e7e4:	0039883a 	mov	fp,zero
    e7e8:	a0800217 	ldw	r2,8(r20)
    e7ec:	1580340e 	bge	r2,r22,e8c0 <__gethex+0x4a8>
    e7f0:	a809883a 	mov	r4,r21
    e7f4:	980b883a 	mov	r5,r19
    e7f8:	000f9c00 	call	f9c0 <_Bfree>
    e7fc:	d8c00d17 	ldw	r3,52(sp)
    e800:	048028c4 	movi	r18,163
    e804:	18000015 	stw	zero,0(r3)
    e808:	003f4606 	br	e524 <__gethex+0x10c>
    e80c:	b8a1c83a 	sub	r16,r23,r2
    e810:	980b883a 	mov	r5,r19
    e814:	a809883a 	mov	r4,r21
    e818:	800d883a 	mov	r6,r16
    e81c:	00103040 	call	10304 <__lshift>
    e820:	1027883a 	mov	r19,r2
    e824:	b42dc83a 	sub	r22,r22,r16
    e828:	10800504 	addi	r2,r2,20
    e82c:	d8800215 	stw	r2,8(sp)
    e830:	003fec06 	br	e7e4 <__gethex+0x3cc>
    e834:	41000015 	stw	r4,0(r8)
    e838:	28c00003 	ldbu	r3,0(r5)
    e83c:	01c00104 	movi	r7,4
    e840:	000d883a 	mov	r6,zero
    e844:	41d1883a 	add	r8,r8,r7
    e848:	0009883a 	mov	r4,zero
    e84c:	003fd306 	br	e79c <__gethex+0x384>
    e850:	15e1c83a 	sub	r16,r2,r23
    e854:	9809883a 	mov	r4,r19
    e858:	800b883a 	mov	r5,r16
    e85c:	000feb80 	call	feb8 <__any_on>
    e860:	1000061e 	bne	r2,zero,e87c <__gethex+0x464>
    e864:	0039883a 	mov	fp,zero
    e868:	9809883a 	mov	r4,r19
    e86c:	800b883a 	mov	r5,r16
    e870:	000e3680 	call	e368 <rshift>
    e874:	b42d883a 	add	r22,r22,r16
    e878:	003fdb06 	br	e7e8 <__gethex+0x3d0>
    e87c:	817fffc4 	addi	r5,r16,-1
    e880:	2805d17a 	srai	r2,r5,5
    e884:	d8c00217 	ldw	r3,8(sp)
    e888:	290007cc 	andi	r4,r5,31
    e88c:	1085883a 	add	r2,r2,r2
    e890:	1085883a 	add	r2,r2,r2
    e894:	01800044 	movi	r6,1
    e898:	10c5883a 	add	r2,r2,r3
    e89c:	3108983a 	sll	r4,r6,r4
    e8a0:	10c00017 	ldw	r3,0(r2)
    e8a4:	20c8703a 	and	r4,r4,r3
    e8a8:	20001a1e 	bne	r4,zero,e914 <__gethex+0x4fc>
    e8ac:	3039883a 	mov	fp,r6
    e8b0:	003fed06 	br	e868 <__gethex+0x450>
    e8b4:	1011883a 	mov	r8,r2
    e8b8:	0009883a 	mov	r4,zero
    e8bc:	003fbd06 	br	e7b4 <__gethex+0x39c>
    e8c0:	a1000117 	ldw	r4,4(r20)
    e8c4:	b1001a16 	blt	r22,r4,e930 <__gethex+0x518>
    e8c8:	04800044 	movi	r18,1
    e8cc:	e0000826 	beq	fp,zero,e8f0 <__gethex+0x4d8>
    e8d0:	a1000317 	ldw	r4,12(r20)
    e8d4:	00800084 	movi	r2,2
    e8d8:	20809426 	beq	r4,r2,eb2c <__gethex+0x714>
    e8dc:	008000c4 	movi	r2,3
    e8e0:	20805826 	beq	r4,r2,ea44 <__gethex+0x62c>
    e8e4:	00800044 	movi	r2,1
    e8e8:	20803f26 	beq	r4,r2,e9e8 <__gethex+0x5d0>
    e8ec:	94800414 	ori	r18,r18,16
    e8f0:	d8800d17 	ldw	r2,52(sp)
    e8f4:	d8c00117 	ldw	r3,4(sp)
    e8f8:	14c00015 	stw	r19,0(r2)
    e8fc:	1d800015 	stw	r22,0(r3)
    e900:	003f0806 	br	e524 <__gethex+0x10c>
    e904:	000b883a 	mov	r5,zero
    e908:	003f9206 	br	e754 <__gethex+0x33c>
    e90c:	002d883a 	mov	r22,zero
    e910:	003ef806 	br	e4f4 <__gethex+0xdc>
    e914:	3140160e 	bge	r6,r5,e970 <__gethex+0x558>
    e918:	9809883a 	mov	r4,r19
    e91c:	817fff84 	addi	r5,r16,-2
    e920:	000feb80 	call	feb8 <__any_on>
    e924:	10001226 	beq	r2,zero,e970 <__gethex+0x558>
    e928:	070000c4 	movi	fp,3
    e92c:	003fce06 	br	e868 <__gethex+0x450>
    e930:	25a3c83a 	sub	r17,r4,r22
    e934:	8dc01016 	blt	r17,r23,e978 <__gethex+0x560>
    e938:	a0c00317 	ldw	r3,12(r20)
    e93c:	00800084 	movi	r2,2
    e940:	18809326 	beq	r3,r2,eb90 <__gethex+0x778>
    e944:	008000c4 	movi	r2,3
    e948:	18808e26 	beq	r3,r2,eb84 <__gethex+0x76c>
    e94c:	00800044 	movi	r2,1
    e950:	18807b26 	beq	r3,r2,eb40 <__gethex+0x728>
    e954:	a809883a 	mov	r4,r21
    e958:	980b883a 	mov	r5,r19
    e95c:	000f9c00 	call	f9c0 <_Bfree>
    e960:	d8c00d17 	ldw	r3,52(sp)
    e964:	04801404 	movi	r18,80
    e968:	18000015 	stw	zero,0(r3)
    e96c:	003eed06 	br	e524 <__gethex+0x10c>
    e970:	07000084 	movi	fp,2
    e974:	003fbc06 	br	e868 <__gethex+0x450>
    e978:	8c3fffc4 	addi	r16,r17,-1
    e97c:	e0001426 	beq	fp,zero,e9d0 <__gethex+0x5b8>
    e980:	07000044 	movi	fp,1
    e984:	8005d17a 	srai	r2,r16,5
    e988:	d8c00217 	ldw	r3,8(sp)
    e98c:	814007cc 	andi	r5,r16,31
    e990:	1085883a 	add	r2,r2,r2
    e994:	1085883a 	add	r2,r2,r2
    e998:	10c5883a 	add	r2,r2,r3
    e99c:	00c00044 	movi	r3,1
    e9a0:	1946983a 	sll	r3,r3,r5
    e9a4:	11000017 	ldw	r4,0(r2)
    e9a8:	1906703a 	and	r3,r3,r4
    e9ac:	18000126 	beq	r3,zero,e9b4 <__gethex+0x59c>
    e9b0:	e7000094 	ori	fp,fp,2
    e9b4:	880b883a 	mov	r5,r17
    e9b8:	9809883a 	mov	r4,r19
    e9bc:	000e3680 	call	e368 <rshift>
    e9c0:	a5800117 	ldw	r22,4(r20)
    e9c4:	bc6fc83a 	sub	r23,r23,r17
    e9c8:	04800084 	movi	r18,2
    e9cc:	003fbf06 	br	e8cc <__gethex+0x4b4>
    e9d0:	043fec0e 	bge	zero,r16,e984 <__gethex+0x56c>
    e9d4:	9809883a 	mov	r4,r19
    e9d8:	800b883a 	mov	r5,r16
    e9dc:	000feb80 	call	feb8 <__any_on>
    e9e0:	1039883a 	mov	fp,r2
    e9e4:	003fe706 	br	e984 <__gethex+0x56c>
    e9e8:	e080008c 	andi	r2,fp,2
    e9ec:	103fbf26 	beq	r2,zero,e8ec <__gethex+0x4d4>
    e9f0:	d8c00217 	ldw	r3,8(sp)
    e9f4:	18800017 	ldw	r2,0(r3)
    e9f8:	e084b03a 	or	r2,fp,r2
    e9fc:	1104703a 	and	r2,r2,r4
    ea00:	103fba26 	beq	r2,zero,e8ec <__gethex+0x4d4>
    ea04:	9c000417 	ldw	r16,16(r19)
    ea08:	d8c00217 	ldw	r3,8(sp)
    ea0c:	017fffc4 	movi	r5,-1
    ea10:	8405883a 	add	r2,r16,r16
    ea14:	10b9883a 	add	fp,r2,r2
    ea18:	1f09883a 	add	r4,r3,fp
    ea1c:	dc000015 	stw	r16,0(sp)
    ea20:	00000306 	br	ea30 <__gethex+0x618>
    ea24:	18000015 	stw	zero,0(r3)
    ea28:	18c00104 	addi	r3,r3,4
    ea2c:	1900082e 	bgeu	r3,r4,ea50 <__gethex+0x638>
    ea30:	18800017 	ldw	r2,0(r3)
    ea34:	117ffb26 	beq	r2,r5,ea24 <__gethex+0x60c>
    ea38:	10800044 	addi	r2,r2,1
    ea3c:	18800015 	stw	r2,0(r3)
    ea40:	00001f06 	br	eac0 <__gethex+0x6a8>
    ea44:	d8800e17 	ldw	r2,56(sp)
    ea48:	103fa826 	beq	r2,zero,e8ec <__gethex+0x4d4>
    ea4c:	003fed06 	br	ea04 <__gethex+0x5ec>
    ea50:	98800217 	ldw	r2,8(r19)
    ea54:	80801316 	blt	r16,r2,eaa4 <__gethex+0x68c>
    ea58:	99400117 	ldw	r5,4(r19)
    ea5c:	a809883a 	mov	r4,r21
    ea60:	29400044 	addi	r5,r5,1
    ea64:	000ff400 	call	ff40 <_Balloc>
    ea68:	99800417 	ldw	r6,16(r19)
    ea6c:	99400304 	addi	r5,r19,12
    ea70:	11000304 	addi	r4,r2,12
    ea74:	318d883a 	add	r6,r6,r6
    ea78:	318d883a 	add	r6,r6,r6
    ea7c:	31800204 	addi	r6,r6,8
    ea80:	1023883a 	mov	r17,r2
    ea84:	00080740 	call	8074 <memcpy>
    ea88:	980b883a 	mov	r5,r19
    ea8c:	a809883a 	mov	r4,r21
    ea90:	000f9c00 	call	f9c0 <_Bfree>
    ea94:	8c000417 	ldw	r16,16(r17)
    ea98:	88800504 	addi	r2,r17,20
    ea9c:	8827883a 	mov	r19,r17
    eaa0:	d8800215 	stw	r2,8(sp)
    eaa4:	8405883a 	add	r2,r16,r16
    eaa8:	1085883a 	add	r2,r2,r2
    eaac:	14c5883a 	add	r2,r2,r19
    eab0:	84000044 	addi	r16,r16,1
    eab4:	00c00044 	movi	r3,1
    eab8:	10c00515 	stw	r3,20(r2)
    eabc:	9c000415 	stw	r16,16(r19)
    eac0:	00800084 	movi	r2,2
    eac4:	90801426 	beq	r18,r2,eb18 <__gethex+0x700>
    eac8:	d8800017 	ldw	r2,0(sp)
    eacc:	14000b16 	blt	r2,r16,eafc <__gethex+0x6e4>
    ead0:	bc0007cc 	andi	r16,r23,31
    ead4:	8000021e 	bne	r16,zero,eae0 <__gethex+0x6c8>
    ead8:	94800814 	ori	r18,r18,32
    eadc:	003f8406 	br	e8f0 <__gethex+0x4d8>
    eae0:	d8c00217 	ldw	r3,8(sp)
    eae4:	1f05883a 	add	r2,r3,fp
    eae8:	113fff17 	ldw	r4,-4(r2)
    eaec:	000f9e80 	call	f9e8 <__hi0bits>
    eaf0:	00c00804 	movi	r3,32
    eaf4:	1c07c83a 	sub	r3,r3,r16
    eaf8:	10fff70e 	bge	r2,r3,ead8 <__gethex+0x6c0>
    eafc:	9809883a 	mov	r4,r19
    eb00:	01400044 	movi	r5,1
    eb04:	000e3680 	call	e368 <rshift>
    eb08:	a0800217 	ldw	r2,8(r20)
    eb0c:	b5800044 	addi	r22,r22,1
    eb10:	15bf3716 	blt	r2,r22,e7f0 <__gethex+0x3d8>
    eb14:	003ff006 	br	ead8 <__gethex+0x6c0>
    eb18:	a0800017 	ldw	r2,0(r20)
    eb1c:	10bfffc4 	addi	r2,r2,-1
    eb20:	b8801e26 	beq	r23,r2,eb9c <__gethex+0x784>
    eb24:	04800884 	movi	r18,34
    eb28:	003f7106 	br	e8f0 <__gethex+0x4d8>
    eb2c:	d8c00e17 	ldw	r3,56(sp)
    eb30:	00800044 	movi	r2,1
    eb34:	10c5c83a 	sub	r2,r2,r3
    eb38:	103f6c26 	beq	r2,zero,e8ec <__gethex+0x4d4>
    eb3c:	003fb106 	br	ea04 <__gethex+0x5ec>
    eb40:	bc7f841e 	bne	r23,r17,e954 <__gethex+0x53c>
    eb44:	1dc0050e 	bge	r3,r23,eb5c <__gethex+0x744>
    eb48:	b8cbc83a 	sub	r5,r23,r3
    eb4c:	9809883a 	mov	r4,r19
    eb50:	000feb80 	call	feb8 <__any_on>
    eb54:	103f7f26 	beq	r2,zero,e954 <__gethex+0x53c>
    eb58:	a1000117 	ldw	r4,4(r20)
    eb5c:	d8800117 	ldw	r2,4(sp)
    eb60:	d8c00217 	ldw	r3,8(sp)
    eb64:	04000044 	movi	r16,1
    eb68:	11000015 	stw	r4,0(r2)
    eb6c:	d8800d17 	ldw	r2,52(sp)
    eb70:	04801884 	movi	r18,98
    eb74:	1c000015 	stw	r16,0(r3)
    eb78:	14c00015 	stw	r19,0(r2)
    eb7c:	9c000415 	stw	r16,16(r19)
    eb80:	003e6806 	br	e524 <__gethex+0x10c>
    eb84:	d8c00e17 	ldw	r3,56(sp)
    eb88:	183f7226 	beq	r3,zero,e954 <__gethex+0x53c>
    eb8c:	003ff306 	br	eb5c <__gethex+0x744>
    eb90:	d8800e17 	ldw	r2,56(sp)
    eb94:	103ff126 	beq	r2,zero,eb5c <__gethex+0x744>
    eb98:	003f6e06 	br	e954 <__gethex+0x53c>
    eb9c:	b805d17a 	srai	r2,r23,5
    eba0:	d8c00217 	ldw	r3,8(sp)
    eba4:	b94007cc 	andi	r5,r23,31
    eba8:	1085883a 	add	r2,r2,r2
    ebac:	1085883a 	add	r2,r2,r2
    ebb0:	10c5883a 	add	r2,r2,r3
    ebb4:	00c00044 	movi	r3,1
    ebb8:	1946983a 	sll	r3,r3,r5
    ebbc:	11000017 	ldw	r4,0(r2)
    ebc0:	1906703a 	and	r3,r3,r4
    ebc4:	183fd726 	beq	r3,zero,eb24 <__gethex+0x70c>
    ebc8:	04800844 	movi	r18,33
    ebcc:	003f4806 	br	e8f0 <__gethex+0x4d8>

0000ebd0 <L_shift>:
    ebd0:	00800204 	movi	r2,8
    ebd4:	1185c83a 	sub	r2,r2,r6
    ebd8:	1085883a 	add	r2,r2,r2
    ebdc:	21c00017 	ldw	r7,0(r4)
    ebe0:	1093883a 	add	r9,r2,r2
    ebe4:	00800804 	movi	r2,32
    ebe8:	200d883a 	mov	r6,r4
    ebec:	1251c83a 	sub	r8,r2,r9
    ebf0:	31800104 	addi	r6,r6,4
    ebf4:	3805883a 	mov	r2,r7
    ebf8:	31c00017 	ldw	r7,0(r6)
    ebfc:	3a08983a 	sll	r4,r7,r8
    ec00:	3a46d83a 	srl	r3,r7,r9
    ec04:	1104b03a 	or	r2,r2,r4
    ec08:	180f883a 	mov	r7,r3
    ec0c:	30bfff15 	stw	r2,-4(r6)
    ec10:	30c00015 	stw	r3,0(r6)
    ec14:	317ff636 	bltu	r6,r5,ebf0 <L_shift+0x20>
    ec18:	f800283a 	ret

0000ec1c <__hexnan>:
    ec1c:	defff404 	addi	sp,sp,-48
    ec20:	dd800815 	stw	r22,32(sp)
    ec24:	05820234 	movhi	r22,2056
    ec28:	b5809404 	addi	r22,r22,592
    ec2c:	b0800c03 	ldbu	r2,48(r22)
    ec30:	dcc00515 	stw	r19,20(sp)
    ec34:	dc000215 	stw	r16,8(sp)
    ec38:	dfc00b15 	stw	ra,44(sp)
    ec3c:	df000a15 	stw	fp,40(sp)
    ec40:	ddc00915 	stw	r23,36(sp)
    ec44:	dd400715 	stw	r21,28(sp)
    ec48:	dd000615 	stw	r20,24(sp)
    ec4c:	dc800415 	stw	r18,16(sp)
    ec50:	dc400315 	stw	r17,12(sp)
    ec54:	d9000115 	stw	r4,4(sp)
    ec58:	2821883a 	mov	r16,r5
    ec5c:	3027883a 	mov	r19,r6
    ec60:	10007426 	beq	r2,zero,ee34 <__hexnan+0x218>
    ec64:	80c00017 	ldw	r3,0(r16)
    ec68:	1805d17a 	srai	r2,r3,5
    ec6c:	18c007cc 	andi	r3,r3,31
    ec70:	1839003a 	cmpeq	fp,r3,zero
    ec74:	1085883a 	add	r2,r2,r2
    ec78:	1085883a 	add	r2,r2,r2
    ec7c:	d8c00015 	stw	r3,0(sp)
    ec80:	14c5883a 	add	r2,r2,r19
    ec84:	e000011e 	bne	fp,zero,ec8c <__hexnan+0x70>
    ec88:	10800104 	addi	r2,r2,4
    ec8c:	d8c00117 	ldw	r3,4(sp)
    ec90:	153fff04 	addi	r20,r2,-4
    ec94:	a021883a 	mov	r16,r20
    ec98:	1c400017 	ldw	r17,0(r3)
    ec9c:	a02b883a 	mov	r21,r20
    eca0:	0025883a 	mov	r18,zero
    eca4:	002f883a 	mov	r23,zero
    eca8:	000d883a 	mov	r6,zero
    ecac:	103fff15 	stw	zero,-4(r2)
    ecb0:	8c400044 	addi	r17,r17,1
    ecb4:	89000003 	ldbu	r4,0(r17)
    ecb8:	20000e26 	beq	r4,zero,ecf4 <__hexnan+0xd8>
    ecbc:	2585883a 	add	r2,r4,r22
    ecc0:	10c00003 	ldbu	r3,0(r2)
    ecc4:	18002e1e 	bne	r3,zero,ed80 <__hexnan+0x164>
    ecc8:	00800804 	movi	r2,32
    eccc:	11005536 	bltu	r2,r4,ee24 <__hexnan+0x208>
    ecd0:	bcbff70e 	bge	r23,r18,ecb0 <__hexnan+0x94>
    ecd4:	8540022e 	bgeu	r16,r21,ece0 <__hexnan+0xc4>
    ecd8:	008001c4 	movi	r2,7
    ecdc:	11803c0e 	bge	r2,r6,edd0 <__hexnan+0x1b4>
    ece0:	9c003536 	bltu	r19,r16,edb8 <__hexnan+0x19c>
    ece4:	8c400044 	addi	r17,r17,1
    ece8:	89000003 	ldbu	r4,0(r17)
    ecec:	01800204 	movi	r6,8
    ecf0:	203ff21e 	bne	r4,zero,ecbc <__hexnan+0xa0>
    ecf4:	90004d26 	beq	r18,zero,ee2c <__hexnan+0x210>
    ecf8:	85404336 	bltu	r16,r21,ee08 <__hexnan+0x1ec>
    ecfc:	9c00382e 	bgeu	r19,r16,ede0 <__hexnan+0x1c4>
    ed00:	9807883a 	mov	r3,r19
    ed04:	80800017 	ldw	r2,0(r16)
    ed08:	84000104 	addi	r16,r16,4
    ed0c:	18800015 	stw	r2,0(r3)
    ed10:	18c00104 	addi	r3,r3,4
    ed14:	a43ffb2e 	bgeu	r20,r16,ed04 <__hexnan+0xe8>
    ed18:	18000015 	stw	zero,0(r3)
    ed1c:	18c00104 	addi	r3,r3,4
    ed20:	a0fffd2e 	bgeu	r20,r3,ed18 <__hexnan+0xfc>
    ed24:	a0800017 	ldw	r2,0(r20)
    ed28:	1000071e 	bne	r2,zero,ed48 <__hexnan+0x12c>
    ed2c:	9d004326 	beq	r19,r20,ee3c <__hexnan+0x220>
    ed30:	a007883a 	mov	r3,r20
    ed34:	00000106 	br	ed3c <__hexnan+0x120>
    ed38:	98c04026 	beq	r19,r3,ee3c <__hexnan+0x220>
    ed3c:	18ffff04 	addi	r3,r3,-4
    ed40:	18800017 	ldw	r2,0(r3)
    ed44:	103ffc26 	beq	r2,zero,ed38 <__hexnan+0x11c>
    ed48:	00c00144 	movi	r3,5
    ed4c:	1805883a 	mov	r2,r3
    ed50:	dfc00b17 	ldw	ra,44(sp)
    ed54:	df000a17 	ldw	fp,40(sp)
    ed58:	ddc00917 	ldw	r23,36(sp)
    ed5c:	dd800817 	ldw	r22,32(sp)
    ed60:	dd400717 	ldw	r21,28(sp)
    ed64:	dd000617 	ldw	r20,24(sp)
    ed68:	dcc00517 	ldw	r19,20(sp)
    ed6c:	dc800417 	ldw	r18,16(sp)
    ed70:	dc400317 	ldw	r17,12(sp)
    ed74:	dc000217 	ldw	r16,8(sp)
    ed78:	dec00c04 	addi	sp,sp,48
    ed7c:	f800283a 	ret
    ed80:	31800044 	addi	r6,r6,1
    ed84:	00800204 	movi	r2,8
    ed88:	94800044 	addi	r18,r18,1
    ed8c:	1180040e 	bge	r2,r6,eda0 <__hexnan+0x184>
    ed90:	9c3fc72e 	bgeu	r19,r16,ecb0 <__hexnan+0x94>
    ed94:	843fff04 	addi	r16,r16,-4
    ed98:	80000015 	stw	zero,0(r16)
    ed9c:	01800044 	movi	r6,1
    eda0:	80800017 	ldw	r2,0(r16)
    eda4:	18c003cc 	andi	r3,r3,15
    eda8:	1004913a 	slli	r2,r2,4
    edac:	10c4b03a 	or	r2,r2,r3
    edb0:	80800015 	stw	r2,0(r16)
    edb4:	003fbe06 	br	ecb0 <__hexnan+0x94>
    edb8:	843fff04 	addi	r16,r16,-4
    edbc:	802b883a 	mov	r21,r16
    edc0:	902f883a 	mov	r23,r18
    edc4:	000d883a 	mov	r6,zero
    edc8:	80000015 	stw	zero,0(r16)
    edcc:	003fb806 	br	ecb0 <__hexnan+0x94>
    edd0:	8009883a 	mov	r4,r16
    edd4:	a80b883a 	mov	r5,r21
    edd8:	000ebd00 	call	ebd0 <L_shift>
    eddc:	003fc006 	br	ece0 <__hexnan+0xc4>
    ede0:	e03fd01e 	bne	fp,zero,ed24 <__hexnan+0x108>
    ede4:	d8c00017 	ldw	r3,0(sp)
    ede8:	00800804 	movi	r2,32
    edec:	10c5c83a 	sub	r2,r2,r3
    edf0:	00ffffc4 	movi	r3,-1
    edf4:	1886d83a 	srl	r3,r3,r2
    edf8:	a0800017 	ldw	r2,0(r20)
    edfc:	10c4703a 	and	r2,r2,r3
    ee00:	a0800015 	stw	r2,0(r20)
    ee04:	003fc806 	br	ed28 <__hexnan+0x10c>
    ee08:	008001c4 	movi	r2,7
    ee0c:	11bfbb16 	blt	r2,r6,ecfc <__hexnan+0xe0>
    ee10:	a80b883a 	mov	r5,r21
    ee14:	8009883a 	mov	r4,r16
    ee18:	000ebd00 	call	ebd0 <L_shift>
    ee1c:	9c3ff02e 	bgeu	r19,r16,ede0 <__hexnan+0x1c4>
    ee20:	003fb706 	br	ed00 <__hexnan+0xe4>
    ee24:	00800a44 	movi	r2,41
    ee28:	20800826 	beq	r4,r2,ee4c <__hexnan+0x230>
    ee2c:	00c00104 	movi	r3,4
    ee30:	003fc606 	br	ed4c <__hexnan+0x130>
    ee34:	000e3000 	call	e300 <__hexdig_init>
    ee38:	003f8a06 	br	ec64 <__hexnan+0x48>
    ee3c:	00800044 	movi	r2,1
    ee40:	00c00144 	movi	r3,5
    ee44:	98800015 	stw	r2,0(r19)
    ee48:	003fc006 	br	ed4c <__hexnan+0x130>
    ee4c:	903ff726 	beq	r18,zero,ee2c <__hexnan+0x210>
    ee50:	d8c00117 	ldw	r3,4(sp)
    ee54:	88800044 	addi	r2,r17,1
    ee58:	18800015 	stw	r2,0(r3)
    ee5c:	857fa72e 	bgeu	r16,r21,ecfc <__hexnan+0xe0>
    ee60:	003fe906 	br	ee08 <__hexnan+0x1ec>

0000ee64 <__locale_charset>:
    ee64:	d0a00f17 	ldw	r2,-32708(gp)
    ee68:	f800283a 	ret

0000ee6c <_localeconv_r>:
    ee6c:	00820034 	movhi	r2,2048
    ee70:	10816804 	addi	r2,r2,1440
    ee74:	f800283a 	ret

0000ee78 <localeconv>:
    ee78:	00820034 	movhi	r2,2048
    ee7c:	108a1f04 	addi	r2,r2,10364
    ee80:	11000017 	ldw	r4,0(r2)
    ee84:	000ee6c1 	jmpi	ee6c <_localeconv_r>

0000ee88 <_setlocale_r>:
    ee88:	defffc04 	addi	sp,sp,-16
    ee8c:	00c20034 	movhi	r3,2048
    ee90:	18c16304 	addi	r3,r3,1420
    ee94:	dc800215 	stw	r18,8(sp)
    ee98:	dc400115 	stw	r17,4(sp)
    ee9c:	dc000015 	stw	r16,0(sp)
    eea0:	2023883a 	mov	r17,r4
    eea4:	2825883a 	mov	r18,r5
    eea8:	dfc00315 	stw	ra,12(sp)
    eeac:	3021883a 	mov	r16,r6
    eeb0:	3009883a 	mov	r4,r6
    eeb4:	180b883a 	mov	r5,r3
    eeb8:	30000926 	beq	r6,zero,eee0 <_setlocale_r+0x58>
    eebc:	00113c00 	call	113c0 <strcmp>
    eec0:	8009883a 	mov	r4,r16
    eec4:	01420034 	movhi	r5,2048
    eec8:	29414704 	addi	r5,r5,1308
    eecc:	10000b1e 	bne	r2,zero,eefc <_setlocale_r+0x74>
    eed0:	8c000d15 	stw	r16,52(r17)
    eed4:	8c800c15 	stw	r18,48(r17)
    eed8:	00c20034 	movhi	r3,2048
    eedc:	18c16304 	addi	r3,r3,1420
    eee0:	1805883a 	mov	r2,r3
    eee4:	dfc00317 	ldw	ra,12(sp)
    eee8:	dc800217 	ldw	r18,8(sp)
    eeec:	dc400117 	ldw	r17,4(sp)
    eef0:	dc000017 	ldw	r16,0(sp)
    eef4:	dec00404 	addi	sp,sp,16
    eef8:	f800283a 	ret
    eefc:	00113c00 	call	113c0 <strcmp>
    ef00:	0007883a 	mov	r3,zero
    ef04:	103ff226 	beq	r2,zero,eed0 <_setlocale_r+0x48>
    ef08:	003ff506 	br	eee0 <_setlocale_r+0x58>

0000ef0c <setlocale>:
    ef0c:	01820034 	movhi	r6,2048
    ef10:	318a1f04 	addi	r6,r6,10364
    ef14:	2007883a 	mov	r3,r4
    ef18:	31000017 	ldw	r4,0(r6)
    ef1c:	280d883a 	mov	r6,r5
    ef20:	180b883a 	mov	r5,r3
    ef24:	000ee881 	jmpi	ee88 <_setlocale_r>

0000ef28 <__smakebuf_r>:
    ef28:	2880030b 	ldhu	r2,12(r5)
    ef2c:	deffed04 	addi	sp,sp,-76
    ef30:	dc401015 	stw	r17,64(sp)
    ef34:	1080008c 	andi	r2,r2,2
    ef38:	dc000f15 	stw	r16,60(sp)
    ef3c:	dfc01215 	stw	ra,72(sp)
    ef40:	dc801115 	stw	r18,68(sp)
    ef44:	2821883a 	mov	r16,r5
    ef48:	2023883a 	mov	r17,r4
    ef4c:	10000b26 	beq	r2,zero,ef7c <__smakebuf_r+0x54>
    ef50:	28c010c4 	addi	r3,r5,67
    ef54:	00800044 	movi	r2,1
    ef58:	28800515 	stw	r2,20(r5)
    ef5c:	28c00415 	stw	r3,16(r5)
    ef60:	28c00015 	stw	r3,0(r5)
    ef64:	dfc01217 	ldw	ra,72(sp)
    ef68:	dc801117 	ldw	r18,68(sp)
    ef6c:	dc401017 	ldw	r17,64(sp)
    ef70:	dc000f17 	ldw	r16,60(sp)
    ef74:	dec01304 	addi	sp,sp,76
    ef78:	f800283a 	ret
    ef7c:	2940038f 	ldh	r5,14(r5)
    ef80:	28002116 	blt	r5,zero,f008 <__smakebuf_r+0xe0>
    ef84:	d80d883a 	mov	r6,sp
    ef88:	00118880 	call	11888 <_fstat_r>
    ef8c:	10001e16 	blt	r2,zero,f008 <__smakebuf_r+0xe0>
    ef90:	d8800117 	ldw	r2,4(sp)
    ef94:	00e00014 	movui	r3,32768
    ef98:	113c000c 	andi	r4,r2,61440
    ef9c:	20c03126 	beq	r4,r3,f064 <__smakebuf_r+0x13c>
    efa0:	8080030b 	ldhu	r2,12(r16)
    efa4:	00c80004 	movi	r3,8192
    efa8:	10820014 	ori	r2,r2,2048
    efac:	8080030d 	sth	r2,12(r16)
    efb0:	20c01e26 	beq	r4,r3,f02c <__smakebuf_r+0x104>
    efb4:	04810004 	movi	r18,1024
    efb8:	8809883a 	mov	r4,r17
    efbc:	900b883a 	mov	r5,r18
    efc0:	000f0bc0 	call	f0bc <_malloc_r>
    efc4:	1009883a 	mov	r4,r2
    efc8:	10003126 	beq	r2,zero,f090 <__smakebuf_r+0x168>
    efcc:	80c0030b 	ldhu	r3,12(r16)
    efd0:	00800074 	movhi	r2,1
    efd4:	10b5c304 	addi	r2,r2,-10484
    efd8:	88800f15 	stw	r2,60(r17)
    efdc:	18c02014 	ori	r3,r3,128
    efe0:	84800515 	stw	r18,20(r16)
    efe4:	80c0030d 	sth	r3,12(r16)
    efe8:	81000415 	stw	r4,16(r16)
    efec:	81000015 	stw	r4,0(r16)
    eff0:	dfc01217 	ldw	ra,72(sp)
    eff4:	dc801117 	ldw	r18,68(sp)
    eff8:	dc401017 	ldw	r17,64(sp)
    effc:	dc000f17 	ldw	r16,60(sp)
    f000:	dec01304 	addi	sp,sp,76
    f004:	f800283a 	ret
    f008:	80c0030b 	ldhu	r3,12(r16)
    f00c:	1880200c 	andi	r2,r3,128
    f010:	10000426 	beq	r2,zero,f024 <__smakebuf_r+0xfc>
    f014:	04801004 	movi	r18,64
    f018:	18820014 	ori	r2,r3,2048
    f01c:	8080030d 	sth	r2,12(r16)
    f020:	003fe506 	br	efb8 <__smakebuf_r+0x90>
    f024:	04810004 	movi	r18,1024
    f028:	003ffb06 	br	f018 <__smakebuf_r+0xf0>
    f02c:	8140038f 	ldh	r5,14(r16)
    f030:	8809883a 	mov	r4,r17
    f034:	00118fc0 	call	118fc <_isatty_r>
    f038:	103fde26 	beq	r2,zero,efb4 <__smakebuf_r+0x8c>
    f03c:	8080030b 	ldhu	r2,12(r16)
    f040:	80c010c4 	addi	r3,r16,67
    f044:	04810004 	movi	r18,1024
    f048:	10800054 	ori	r2,r2,1
    f04c:	8080030d 	sth	r2,12(r16)
    f050:	00800044 	movi	r2,1
    f054:	80c00415 	stw	r3,16(r16)
    f058:	80800515 	stw	r2,20(r16)
    f05c:	80c00015 	stw	r3,0(r16)
    f060:	003fd506 	br	efb8 <__smakebuf_r+0x90>
    f064:	80c00a17 	ldw	r3,40(r16)
    f068:	00800074 	movhi	r2,1
    f06c:	10849f04 	addi	r2,r2,4732
    f070:	18bfcb1e 	bne	r3,r2,efa0 <__smakebuf_r+0x78>
    f074:	8080030b 	ldhu	r2,12(r16)
    f078:	00c10004 	movi	r3,1024
    f07c:	1825883a 	mov	r18,r3
    f080:	10c4b03a 	or	r2,r2,r3
    f084:	8080030d 	sth	r2,12(r16)
    f088:	80c01315 	stw	r3,76(r16)
    f08c:	003fca06 	br	efb8 <__smakebuf_r+0x90>
    f090:	8100030b 	ldhu	r4,12(r16)
    f094:	2080800c 	andi	r2,r4,512
    f098:	103fb21e 	bne	r2,zero,ef64 <__smakebuf_r+0x3c>
    f09c:	80c010c4 	addi	r3,r16,67
    f0a0:	21000094 	ori	r4,r4,2
    f0a4:	00800044 	movi	r2,1
    f0a8:	80800515 	stw	r2,20(r16)
    f0ac:	8100030d 	sth	r4,12(r16)
    f0b0:	80c00415 	stw	r3,16(r16)
    f0b4:	80c00015 	stw	r3,0(r16)
    f0b8:	003faa06 	br	ef64 <__smakebuf_r+0x3c>

0000f0bc <_malloc_r>:
    f0bc:	defff604 	addi	sp,sp,-40
    f0c0:	28c002c4 	addi	r3,r5,11
    f0c4:	00800584 	movi	r2,22
    f0c8:	dc800215 	stw	r18,8(sp)
    f0cc:	dfc00915 	stw	ra,36(sp)
    f0d0:	df000815 	stw	fp,32(sp)
    f0d4:	ddc00715 	stw	r23,28(sp)
    f0d8:	dd800615 	stw	r22,24(sp)
    f0dc:	dd400515 	stw	r21,20(sp)
    f0e0:	dd000415 	stw	r20,16(sp)
    f0e4:	dcc00315 	stw	r19,12(sp)
    f0e8:	dc400115 	stw	r17,4(sp)
    f0ec:	dc000015 	stw	r16,0(sp)
    f0f0:	2025883a 	mov	r18,r4
    f0f4:	10c01236 	bltu	r2,r3,f140 <_malloc_r+0x84>
    f0f8:	04400404 	movi	r17,16
    f0fc:	8940142e 	bgeu	r17,r5,f150 <_malloc_r+0x94>
    f100:	00800304 	movi	r2,12
    f104:	0007883a 	mov	r3,zero
    f108:	90800015 	stw	r2,0(r18)
    f10c:	1805883a 	mov	r2,r3
    f110:	dfc00917 	ldw	ra,36(sp)
    f114:	df000817 	ldw	fp,32(sp)
    f118:	ddc00717 	ldw	r23,28(sp)
    f11c:	dd800617 	ldw	r22,24(sp)
    f120:	dd400517 	ldw	r21,20(sp)
    f124:	dd000417 	ldw	r20,16(sp)
    f128:	dcc00317 	ldw	r19,12(sp)
    f12c:	dc800217 	ldw	r18,8(sp)
    f130:	dc400117 	ldw	r17,4(sp)
    f134:	dc000017 	ldw	r16,0(sp)
    f138:	dec00a04 	addi	sp,sp,40
    f13c:	f800283a 	ret
    f140:	00bffe04 	movi	r2,-8
    f144:	18a2703a 	and	r17,r3,r2
    f148:	883fed16 	blt	r17,zero,f100 <_malloc_r+0x44>
    f14c:	897fec36 	bltu	r17,r5,f100 <_malloc_r+0x44>
    f150:	9009883a 	mov	r4,r18
    f154:	00135740 	call	13574 <__malloc_lock>
    f158:	00807dc4 	movi	r2,503
    f15c:	14402b2e 	bgeu	r2,r17,f20c <_malloc_r+0x150>
    f160:	8806d27a 	srli	r3,r17,9
    f164:	18003f1e 	bne	r3,zero,f264 <_malloc_r+0x1a8>
    f168:	880cd0fa 	srli	r6,r17,3
    f16c:	300490fa 	slli	r2,r6,3
    f170:	02c20034 	movhi	r11,2048
    f174:	5ac3ab04 	addi	r11,r11,3756
    f178:	12cb883a 	add	r5,r2,r11
    f17c:	2c000317 	ldw	r16,12(r5)
    f180:	580f883a 	mov	r7,r11
    f184:	2c00041e 	bne	r5,r16,f198 <_malloc_r+0xdc>
    f188:	00000a06 	br	f1b4 <_malloc_r+0xf8>
    f18c:	1800860e 	bge	r3,zero,f3a8 <_malloc_r+0x2ec>
    f190:	84000317 	ldw	r16,12(r16)
    f194:	2c000726 	beq	r5,r16,f1b4 <_malloc_r+0xf8>
    f198:	80800117 	ldw	r2,4(r16)
    f19c:	00ffff04 	movi	r3,-4
    f1a0:	10c8703a 	and	r4,r2,r3
    f1a4:	2447c83a 	sub	r3,r4,r17
    f1a8:	008003c4 	movi	r2,15
    f1ac:	10fff70e 	bge	r2,r3,f18c <_malloc_r+0xd0>
    f1b0:	31bfffc4 	addi	r6,r6,-1
    f1b4:	32400044 	addi	r9,r6,1
    f1b8:	02820034 	movhi	r10,2048
    f1bc:	5283ad04 	addi	r10,r10,3764
    f1c0:	54000217 	ldw	r16,8(r10)
    f1c4:	8280a026 	beq	r16,r10,f448 <_malloc_r+0x38c>
    f1c8:	80800117 	ldw	r2,4(r16)
    f1cc:	00ffff04 	movi	r3,-4
    f1d0:	10ca703a 	and	r5,r2,r3
    f1d4:	2c4dc83a 	sub	r6,r5,r17
    f1d8:	008003c4 	movi	r2,15
    f1dc:	11808316 	blt	r2,r6,f3ec <_malloc_r+0x330>
    f1e0:	52800315 	stw	r10,12(r10)
    f1e4:	52800215 	stw	r10,8(r10)
    f1e8:	30002916 	blt	r6,zero,f290 <_malloc_r+0x1d4>
    f1ec:	8147883a 	add	r3,r16,r5
    f1f0:	18800117 	ldw	r2,4(r3)
    f1f4:	9009883a 	mov	r4,r18
    f1f8:	10800054 	ori	r2,r2,1
    f1fc:	18800115 	stw	r2,4(r3)
    f200:	00135940 	call	13594 <__malloc_unlock>
    f204:	80c00204 	addi	r3,r16,8
    f208:	003fc006 	br	f10c <_malloc_r+0x50>
    f20c:	02c20034 	movhi	r11,2048
    f210:	5ac3ab04 	addi	r11,r11,3756
    f214:	8ac5883a 	add	r2,r17,r11
    f218:	14000317 	ldw	r16,12(r2)
    f21c:	580f883a 	mov	r7,r11
    f220:	8806d0fa 	srli	r3,r17,3
    f224:	14006c26 	beq	r2,r16,f3d8 <_malloc_r+0x31c>
    f228:	80c00117 	ldw	r3,4(r16)
    f22c:	00bfff04 	movi	r2,-4
    f230:	81800317 	ldw	r6,12(r16)
    f234:	1886703a 	and	r3,r3,r2
    f238:	80c7883a 	add	r3,r16,r3
    f23c:	18800117 	ldw	r2,4(r3)
    f240:	81400217 	ldw	r5,8(r16)
    f244:	9009883a 	mov	r4,r18
    f248:	10800054 	ori	r2,r2,1
    f24c:	18800115 	stw	r2,4(r3)
    f250:	31400215 	stw	r5,8(r6)
    f254:	29800315 	stw	r6,12(r5)
    f258:	00135940 	call	13594 <__malloc_unlock>
    f25c:	80c00204 	addi	r3,r16,8
    f260:	003faa06 	br	f10c <_malloc_r+0x50>
    f264:	00800104 	movi	r2,4
    f268:	10c0052e 	bgeu	r2,r3,f280 <_malloc_r+0x1c4>
    f26c:	00800504 	movi	r2,20
    f270:	10c07836 	bltu	r2,r3,f454 <_malloc_r+0x398>
    f274:	198016c4 	addi	r6,r3,91
    f278:	300490fa 	slli	r2,r6,3
    f27c:	003fbc06 	br	f170 <_malloc_r+0xb4>
    f280:	8804d1ba 	srli	r2,r17,6
    f284:	11800e04 	addi	r6,r2,56
    f288:	300490fa 	slli	r2,r6,3
    f28c:	003fb806 	br	f170 <_malloc_r+0xb4>
    f290:	00807fc4 	movi	r2,511
    f294:	1140bb36 	bltu	r2,r5,f584 <_malloc_r+0x4c8>
    f298:	2806d0fa 	srli	r3,r5,3
    f29c:	573ffe04 	addi	fp,r10,-8
    f2a0:	00800044 	movi	r2,1
    f2a4:	180890fa 	slli	r4,r3,3
    f2a8:	1807d0ba 	srai	r3,r3,2
    f2ac:	e1c00117 	ldw	r7,4(fp)
    f2b0:	5909883a 	add	r4,r11,r4
    f2b4:	21400217 	ldw	r5,8(r4)
    f2b8:	10c4983a 	sll	r2,r2,r3
    f2bc:	81000315 	stw	r4,12(r16)
    f2c0:	81400215 	stw	r5,8(r16)
    f2c4:	388eb03a 	or	r7,r7,r2
    f2c8:	2c000315 	stw	r16,12(r5)
    f2cc:	24000215 	stw	r16,8(r4)
    f2d0:	e1c00115 	stw	r7,4(fp)
    f2d4:	4807883a 	mov	r3,r9
    f2d8:	4800cd16 	blt	r9,zero,f610 <_malloc_r+0x554>
    f2dc:	1807d0ba 	srai	r3,r3,2
    f2e0:	00800044 	movi	r2,1
    f2e4:	10c8983a 	sll	r4,r2,r3
    f2e8:	39004436 	bltu	r7,r4,f3fc <_malloc_r+0x340>
    f2ec:	21c4703a 	and	r2,r4,r7
    f2f0:	10000a1e 	bne	r2,zero,f31c <_malloc_r+0x260>
    f2f4:	2109883a 	add	r4,r4,r4
    f2f8:	00bfff04 	movi	r2,-4
    f2fc:	4884703a 	and	r2,r9,r2
    f300:	3906703a 	and	r3,r7,r4
    f304:	12400104 	addi	r9,r2,4
    f308:	1800041e 	bne	r3,zero,f31c <_malloc_r+0x260>
    f30c:	2109883a 	add	r4,r4,r4
    f310:	3904703a 	and	r2,r7,r4
    f314:	4a400104 	addi	r9,r9,4
    f318:	103ffc26 	beq	r2,zero,f30c <_malloc_r+0x250>
    f31c:	480490fa 	slli	r2,r9,3
    f320:	4819883a 	mov	r12,r9
    f324:	023fff04 	movi	r8,-4
    f328:	589b883a 	add	r13,r11,r2
    f32c:	6807883a 	mov	r3,r13
    f330:	014003c4 	movi	r5,15
    f334:	1c000317 	ldw	r16,12(r3)
    f338:	1c00041e 	bne	r3,r16,f34c <_malloc_r+0x290>
    f33c:	0000a706 	br	f5dc <_malloc_r+0x520>
    f340:	3000ab0e 	bge	r6,zero,f5f0 <_malloc_r+0x534>
    f344:	84000317 	ldw	r16,12(r16)
    f348:	1c00a426 	beq	r3,r16,f5dc <_malloc_r+0x520>
    f34c:	80800117 	ldw	r2,4(r16)
    f350:	1204703a 	and	r2,r2,r8
    f354:	144dc83a 	sub	r6,r2,r17
    f358:	29bff90e 	bge	r5,r6,f340 <_malloc_r+0x284>
    f35c:	81000317 	ldw	r4,12(r16)
    f360:	80c00217 	ldw	r3,8(r16)
    f364:	89400054 	ori	r5,r17,1
    f368:	8445883a 	add	r2,r16,r17
    f36c:	20c00215 	stw	r3,8(r4)
    f370:	19000315 	stw	r4,12(r3)
    f374:	81400115 	stw	r5,4(r16)
    f378:	1187883a 	add	r3,r2,r6
    f37c:	31000054 	ori	r4,r6,1
    f380:	50800315 	stw	r2,12(r10)
    f384:	50800215 	stw	r2,8(r10)
    f388:	19800015 	stw	r6,0(r3)
    f38c:	11000115 	stw	r4,4(r2)
    f390:	12800215 	stw	r10,8(r2)
    f394:	12800315 	stw	r10,12(r2)
    f398:	9009883a 	mov	r4,r18
    f39c:	00135940 	call	13594 <__malloc_unlock>
    f3a0:	80c00204 	addi	r3,r16,8
    f3a4:	003f5906 	br	f10c <_malloc_r+0x50>
    f3a8:	8109883a 	add	r4,r16,r4
    f3ac:	20800117 	ldw	r2,4(r4)
    f3b0:	80c00217 	ldw	r3,8(r16)
    f3b4:	81400317 	ldw	r5,12(r16)
    f3b8:	10800054 	ori	r2,r2,1
    f3bc:	20800115 	stw	r2,4(r4)
    f3c0:	28c00215 	stw	r3,8(r5)
    f3c4:	19400315 	stw	r5,12(r3)
    f3c8:	9009883a 	mov	r4,r18
    f3cc:	00135940 	call	13594 <__malloc_unlock>
    f3d0:	80c00204 	addi	r3,r16,8
    f3d4:	003f4d06 	br	f10c <_malloc_r+0x50>
    f3d8:	80800204 	addi	r2,r16,8
    f3dc:	14000317 	ldw	r16,12(r2)
    f3e0:	143f911e 	bne	r2,r16,f228 <_malloc_r+0x16c>
    f3e4:	1a400084 	addi	r9,r3,2
    f3e8:	003f7306 	br	f1b8 <_malloc_r+0xfc>
    f3ec:	88c00054 	ori	r3,r17,1
    f3f0:	8445883a 	add	r2,r16,r17
    f3f4:	80c00115 	stw	r3,4(r16)
    f3f8:	003fdf06 	br	f378 <_malloc_r+0x2bc>
    f3fc:	e4000217 	ldw	r16,8(fp)
    f400:	00bfff04 	movi	r2,-4
    f404:	80c00117 	ldw	r3,4(r16)
    f408:	802d883a 	mov	r22,r16
    f40c:	18aa703a 	and	r21,r3,r2
    f410:	ac401636 	bltu	r21,r17,f46c <_malloc_r+0x3b0>
    f414:	ac49c83a 	sub	r4,r21,r17
    f418:	008003c4 	movi	r2,15
    f41c:	1100130e 	bge	r2,r4,f46c <_malloc_r+0x3b0>
    f420:	88800054 	ori	r2,r17,1
    f424:	8447883a 	add	r3,r16,r17
    f428:	80800115 	stw	r2,4(r16)
    f42c:	20800054 	ori	r2,r4,1
    f430:	18800115 	stw	r2,4(r3)
    f434:	e0c00215 	stw	r3,8(fp)
    f438:	9009883a 	mov	r4,r18
    f43c:	00135940 	call	13594 <__malloc_unlock>
    f440:	80c00204 	addi	r3,r16,8
    f444:	003f3106 	br	f10c <_malloc_r+0x50>
    f448:	39c00117 	ldw	r7,4(r7)
    f44c:	573ffe04 	addi	fp,r10,-8
    f450:	003fa006 	br	f2d4 <_malloc_r+0x218>
    f454:	00801504 	movi	r2,84
    f458:	10c06736 	bltu	r2,r3,f5f8 <_malloc_r+0x53c>
    f45c:	8804d33a 	srli	r2,r17,12
    f460:	11801b84 	addi	r6,r2,110
    f464:	300490fa 	slli	r2,r6,3
    f468:	003f4106 	br	f170 <_malloc_r+0xb4>
    f46c:	d0a04e17 	ldw	r2,-32456(gp)
    f470:	d0e01117 	ldw	r3,-32700(gp)
    f474:	053fffc4 	movi	r20,-1
    f478:	10800404 	addi	r2,r2,16
    f47c:	88a7883a 	add	r19,r17,r2
    f480:	1d000326 	beq	r3,r20,f490 <_malloc_r+0x3d4>
    f484:	98c3ffc4 	addi	r3,r19,4095
    f488:	00bc0004 	movi	r2,-4096
    f48c:	18a6703a 	and	r19,r3,r2
    f490:	9009883a 	mov	r4,r18
    f494:	980b883a 	mov	r5,r19
    f498:	00112040 	call	11204 <_sbrk_r>
    f49c:	1009883a 	mov	r4,r2
    f4a0:	15000426 	beq	r2,r20,f4b4 <_malloc_r+0x3f8>
    f4a4:	854b883a 	add	r5,r16,r21
    f4a8:	1029883a 	mov	r20,r2
    f4ac:	11405a2e 	bgeu	r2,r5,f618 <_malloc_r+0x55c>
    f4b0:	87000c26 	beq	r16,fp,f4e4 <_malloc_r+0x428>
    f4b4:	e4000217 	ldw	r16,8(fp)
    f4b8:	80c00117 	ldw	r3,4(r16)
    f4bc:	00bfff04 	movi	r2,-4
    f4c0:	1884703a 	and	r2,r3,r2
    f4c4:	14400336 	bltu	r2,r17,f4d4 <_malloc_r+0x418>
    f4c8:	1449c83a 	sub	r4,r2,r17
    f4cc:	008003c4 	movi	r2,15
    f4d0:	113fd316 	blt	r2,r4,f420 <_malloc_r+0x364>
    f4d4:	9009883a 	mov	r4,r18
    f4d8:	00135940 	call	13594 <__malloc_unlock>
    f4dc:	0007883a 	mov	r3,zero
    f4e0:	003f0a06 	br	f10c <_malloc_r+0x50>
    f4e4:	05c20234 	movhi	r23,2056
    f4e8:	bdfede04 	addi	r23,r23,-1160
    f4ec:	b8800017 	ldw	r2,0(r23)
    f4f0:	988d883a 	add	r6,r19,r2
    f4f4:	b9800015 	stw	r6,0(r23)
    f4f8:	d0e01117 	ldw	r3,-32700(gp)
    f4fc:	00bfffc4 	movi	r2,-1
    f500:	18808e26 	beq	r3,r2,f73c <_malloc_r+0x680>
    f504:	2145c83a 	sub	r2,r4,r5
    f508:	3085883a 	add	r2,r6,r2
    f50c:	b8800015 	stw	r2,0(r23)
    f510:	20c001cc 	andi	r3,r4,7
    f514:	18005f1e 	bne	r3,zero,f694 <_malloc_r+0x5d8>
    f518:	000b883a 	mov	r5,zero
    f51c:	a4c5883a 	add	r2,r20,r19
    f520:	1083ffcc 	andi	r2,r2,4095
    f524:	00c40004 	movi	r3,4096
    f528:	1887c83a 	sub	r3,r3,r2
    f52c:	28e7883a 	add	r19,r5,r3
    f530:	9009883a 	mov	r4,r18
    f534:	980b883a 	mov	r5,r19
    f538:	00112040 	call	11204 <_sbrk_r>
    f53c:	1007883a 	mov	r3,r2
    f540:	00bfffc4 	movi	r2,-1
    f544:	18807a26 	beq	r3,r2,f730 <_malloc_r+0x674>
    f548:	1d05c83a 	sub	r2,r3,r20
    f54c:	9885883a 	add	r2,r19,r2
    f550:	10c00054 	ori	r3,r2,1
    f554:	b8800017 	ldw	r2,0(r23)
    f558:	a021883a 	mov	r16,r20
    f55c:	a0c00115 	stw	r3,4(r20)
    f560:	9885883a 	add	r2,r19,r2
    f564:	b8800015 	stw	r2,0(r23)
    f568:	e5000215 	stw	r20,8(fp)
    f56c:	b7003626 	beq	r22,fp,f648 <_malloc_r+0x58c>
    f570:	018003c4 	movi	r6,15
    f574:	35404b36 	bltu	r6,r21,f6a4 <_malloc_r+0x5e8>
    f578:	00800044 	movi	r2,1
    f57c:	a0800115 	stw	r2,4(r20)
    f580:	003fcd06 	br	f4b8 <_malloc_r+0x3fc>
    f584:	2808d27a 	srli	r4,r5,9
    f588:	2000371e 	bne	r4,zero,f668 <_malloc_r+0x5ac>
    f58c:	2808d0fa 	srli	r4,r5,3
    f590:	200690fa 	slli	r3,r4,3
    f594:	1ad1883a 	add	r8,r3,r11
    f598:	41800217 	ldw	r6,8(r8)
    f59c:	41805b26 	beq	r8,r6,f70c <_malloc_r+0x650>
    f5a0:	30800117 	ldw	r2,4(r6)
    f5a4:	00ffff04 	movi	r3,-4
    f5a8:	10c4703a 	and	r2,r2,r3
    f5ac:	2880022e 	bgeu	r5,r2,f5b8 <_malloc_r+0x4fc>
    f5b0:	31800217 	ldw	r6,8(r6)
    f5b4:	41bffa1e 	bne	r8,r6,f5a0 <_malloc_r+0x4e4>
    f5b8:	32000317 	ldw	r8,12(r6)
    f5bc:	39c00117 	ldw	r7,4(r7)
    f5c0:	82000315 	stw	r8,12(r16)
    f5c4:	81800215 	stw	r6,8(r16)
    f5c8:	07020034 	movhi	fp,2048
    f5cc:	e703ab04 	addi	fp,fp,3756
    f5d0:	34000315 	stw	r16,12(r6)
    f5d4:	44000215 	stw	r16,8(r8)
    f5d8:	003f3e06 	br	f2d4 <_malloc_r+0x218>
    f5dc:	63000044 	addi	r12,r12,1
    f5e0:	608000cc 	andi	r2,r12,3
    f5e4:	10005d26 	beq	r2,zero,f75c <_malloc_r+0x6a0>
    f5e8:	18c00204 	addi	r3,r3,8
    f5ec:	003f5106 	br	f334 <_malloc_r+0x278>
    f5f0:	8089883a 	add	r4,r16,r2
    f5f4:	003f6d06 	br	f3ac <_malloc_r+0x2f0>
    f5f8:	00805504 	movi	r2,340
    f5fc:	10c02036 	bltu	r2,r3,f680 <_malloc_r+0x5c4>
    f600:	8804d3fa 	srli	r2,r17,15
    f604:	11801dc4 	addi	r6,r2,119
    f608:	300490fa 	slli	r2,r6,3
    f60c:	003ed806 	br	f170 <_malloc_r+0xb4>
    f610:	48c000c4 	addi	r3,r9,3
    f614:	003f3106 	br	f2dc <_malloc_r+0x220>
    f618:	05c20234 	movhi	r23,2056
    f61c:	bdfede04 	addi	r23,r23,-1160
    f620:	b8800017 	ldw	r2,0(r23)
    f624:	988d883a 	add	r6,r19,r2
    f628:	b9800015 	stw	r6,0(r23)
    f62c:	293fb21e 	bne	r5,r4,f4f8 <_malloc_r+0x43c>
    f630:	2083ffcc 	andi	r2,r4,4095
    f634:	103fb01e 	bne	r2,zero,f4f8 <_malloc_r+0x43c>
    f638:	e4000217 	ldw	r16,8(fp)
    f63c:	9d45883a 	add	r2,r19,r21
    f640:	10800054 	ori	r2,r2,1
    f644:	80800115 	stw	r2,4(r16)
    f648:	b8c00017 	ldw	r3,0(r23)
    f64c:	d0a04f17 	ldw	r2,-32452(gp)
    f650:	10c0012e 	bgeu	r2,r3,f658 <_malloc_r+0x59c>
    f654:	d0e04f15 	stw	r3,-32452(gp)
    f658:	d0a05017 	ldw	r2,-32448(gp)
    f65c:	10ff962e 	bgeu	r2,r3,f4b8 <_malloc_r+0x3fc>
    f660:	d0e05015 	stw	r3,-32448(gp)
    f664:	003f9406 	br	f4b8 <_malloc_r+0x3fc>
    f668:	00800104 	movi	r2,4
    f66c:	11001e36 	bltu	r2,r4,f6e8 <_malloc_r+0x62c>
    f670:	2804d1ba 	srli	r2,r5,6
    f674:	11000e04 	addi	r4,r2,56
    f678:	200690fa 	slli	r3,r4,3
    f67c:	003fc506 	br	f594 <_malloc_r+0x4d8>
    f680:	00815504 	movi	r2,1364
    f684:	10c01d2e 	bgeu	r2,r3,f6fc <_malloc_r+0x640>
    f688:	01801f84 	movi	r6,126
    f68c:	0080fc04 	movi	r2,1008
    f690:	003eb706 	br	f170 <_malloc_r+0xb4>
    f694:	00800204 	movi	r2,8
    f698:	10cbc83a 	sub	r5,r2,r3
    f69c:	2169883a 	add	r20,r4,r5
    f6a0:	003f9e06 	br	f51c <_malloc_r+0x460>
    f6a4:	00bffe04 	movi	r2,-8
    f6a8:	a93ffd04 	addi	r4,r21,-12
    f6ac:	2088703a 	and	r4,r4,r2
    f6b0:	b10b883a 	add	r5,r22,r4
    f6b4:	00c00144 	movi	r3,5
    f6b8:	28c00215 	stw	r3,8(r5)
    f6bc:	28c00115 	stw	r3,4(r5)
    f6c0:	b0800117 	ldw	r2,4(r22)
    f6c4:	1080004c 	andi	r2,r2,1
    f6c8:	2084b03a 	or	r2,r4,r2
    f6cc:	b0800115 	stw	r2,4(r22)
    f6d0:	313fdd2e 	bgeu	r6,r4,f648 <_malloc_r+0x58c>
    f6d4:	b1400204 	addi	r5,r22,8
    f6d8:	9009883a 	mov	r4,r18
    f6dc:	000d9ac0 	call	d9ac <_free_r>
    f6e0:	e4000217 	ldw	r16,8(fp)
    f6e4:	003fd806 	br	f648 <_malloc_r+0x58c>
    f6e8:	00800504 	movi	r2,20
    f6ec:	11001536 	bltu	r2,r4,f744 <_malloc_r+0x688>
    f6f0:	210016c4 	addi	r4,r4,91
    f6f4:	200690fa 	slli	r3,r4,3
    f6f8:	003fa606 	br	f594 <_malloc_r+0x4d8>
    f6fc:	8804d4ba 	srli	r2,r17,18
    f700:	11801f04 	addi	r6,r2,124
    f704:	300490fa 	slli	r2,r6,3
    f708:	003e9906 	br	f170 <_malloc_r+0xb4>
    f70c:	2009d0ba 	srai	r4,r4,2
    f710:	01420034 	movhi	r5,2048
    f714:	2943ab04 	addi	r5,r5,3756
    f718:	00c00044 	movi	r3,1
    f71c:	28800117 	ldw	r2,4(r5)
    f720:	1906983a 	sll	r3,r3,r4
    f724:	10c4b03a 	or	r2,r2,r3
    f728:	28800115 	stw	r2,4(r5)
    f72c:	003fa306 	br	f5bc <_malloc_r+0x500>
    f730:	0027883a 	mov	r19,zero
    f734:	00c00044 	movi	r3,1
    f738:	003f8606 	br	f554 <_malloc_r+0x498>
    f73c:	d1201115 	stw	r4,-32700(gp)
    f740:	003f7306 	br	f510 <_malloc_r+0x454>
    f744:	00801504 	movi	r2,84
    f748:	11001936 	bltu	r2,r4,f7b0 <_malloc_r+0x6f4>
    f74c:	2804d33a 	srli	r2,r5,12
    f750:	11001b84 	addi	r4,r2,110
    f754:	200690fa 	slli	r3,r4,3
    f758:	003f8e06 	br	f594 <_malloc_r+0x4d8>
    f75c:	480b883a 	mov	r5,r9
    f760:	6807883a 	mov	r3,r13
    f764:	288000cc 	andi	r2,r5,3
    f768:	18fffe04 	addi	r3,r3,-8
    f76c:	297fffc4 	addi	r5,r5,-1
    f770:	10001526 	beq	r2,zero,f7c8 <_malloc_r+0x70c>
    f774:	18800217 	ldw	r2,8(r3)
    f778:	10fffa26 	beq	r2,r3,f764 <_malloc_r+0x6a8>
    f77c:	2109883a 	add	r4,r4,r4
    f780:	393f1e36 	bltu	r7,r4,f3fc <_malloc_r+0x340>
    f784:	203f1d26 	beq	r4,zero,f3fc <_malloc_r+0x340>
    f788:	21c4703a 	and	r2,r4,r7
    f78c:	10000226 	beq	r2,zero,f798 <_malloc_r+0x6dc>
    f790:	6013883a 	mov	r9,r12
    f794:	003ee106 	br	f31c <_malloc_r+0x260>
    f798:	2109883a 	add	r4,r4,r4
    f79c:	3904703a 	and	r2,r7,r4
    f7a0:	63000104 	addi	r12,r12,4
    f7a4:	103ffc26 	beq	r2,zero,f798 <_malloc_r+0x6dc>
    f7a8:	6013883a 	mov	r9,r12
    f7ac:	003edb06 	br	f31c <_malloc_r+0x260>
    f7b0:	00805504 	movi	r2,340
    f7b4:	11000836 	bltu	r2,r4,f7d8 <_malloc_r+0x71c>
    f7b8:	2804d3fa 	srli	r2,r5,15
    f7bc:	11001dc4 	addi	r4,r2,119
    f7c0:	200690fa 	slli	r3,r4,3
    f7c4:	003f7306 	br	f594 <_malloc_r+0x4d8>
    f7c8:	0104303a 	nor	r2,zero,r4
    f7cc:	388e703a 	and	r7,r7,r2
    f7d0:	e1c00115 	stw	r7,4(fp)
    f7d4:	003fe906 	br	f77c <_malloc_r+0x6c0>
    f7d8:	00815504 	movi	r2,1364
    f7dc:	1100032e 	bgeu	r2,r4,f7ec <_malloc_r+0x730>
    f7e0:	01001f84 	movi	r4,126
    f7e4:	00c0fc04 	movi	r3,1008
    f7e8:	003f6a06 	br	f594 <_malloc_r+0x4d8>
    f7ec:	2804d4ba 	srli	r2,r5,18
    f7f0:	11001f04 	addi	r4,r2,124
    f7f4:	200690fa 	slli	r3,r4,3
    f7f8:	003f6606 	br	f594 <_malloc_r+0x4d8>

0000f7fc <memchr>:
    f7fc:	008000c4 	movi	r2,3
    f800:	29403fcc 	andi	r5,r5,255
    f804:	2007883a 	mov	r3,r4
    f808:	1180022e 	bgeu	r2,r6,f814 <memchr+0x18>
    f80c:	2084703a 	and	r2,r4,r2
    f810:	10000b26 	beq	r2,zero,f840 <memchr+0x44>
    f814:	313fffc4 	addi	r4,r6,-1
    f818:	3000051e 	bne	r6,zero,f830 <memchr+0x34>
    f81c:	00002c06 	br	f8d0 <memchr+0xd4>
    f820:	213fffc4 	addi	r4,r4,-1
    f824:	00bfffc4 	movi	r2,-1
    f828:	18c00044 	addi	r3,r3,1
    f82c:	20802826 	beq	r4,r2,f8d0 <memchr+0xd4>
    f830:	18800003 	ldbu	r2,0(r3)
    f834:	28bffa1e 	bne	r5,r2,f820 <memchr+0x24>
    f838:	1805883a 	mov	r2,r3
    f83c:	f800283a 	ret
    f840:	0011883a 	mov	r8,zero
    f844:	0007883a 	mov	r3,zero
    f848:	01c00104 	movi	r7,4
    f84c:	4004923a 	slli	r2,r8,8
    f850:	18c00044 	addi	r3,r3,1
    f854:	1151883a 	add	r8,r2,r5
    f858:	19fffc1e 	bne	r3,r7,f84c <memchr+0x50>
    f85c:	02bfbff4 	movhi	r10,65279
    f860:	52bfbfc4 	addi	r10,r10,-257
    f864:	02602074 	movhi	r9,32897
    f868:	4a602004 	addi	r9,r9,-32640
    f86c:	02c000c4 	movi	r11,3
    f870:	20800017 	ldw	r2,0(r4)
    f874:	31bfff04 	addi	r6,r6,-4
    f878:	200f883a 	mov	r7,r4
    f87c:	1204f03a 	xor	r2,r2,r8
    f880:	1287883a 	add	r3,r2,r10
    f884:	1a46703a 	and	r3,r3,r9
    f888:	0084303a 	nor	r2,zero,r2
    f88c:	10c4703a 	and	r2,r2,r3
    f890:	10000b26 	beq	r2,zero,f8c0 <memchr+0xc4>
    f894:	20800003 	ldbu	r2,0(r4)
    f898:	28800f26 	beq	r5,r2,f8d8 <memchr+0xdc>
    f89c:	20800043 	ldbu	r2,1(r4)
    f8a0:	21c00044 	addi	r7,r4,1
    f8a4:	28800c26 	beq	r5,r2,f8d8 <memchr+0xdc>
    f8a8:	20800083 	ldbu	r2,2(r4)
    f8ac:	21c00084 	addi	r7,r4,2
    f8b0:	28800926 	beq	r5,r2,f8d8 <memchr+0xdc>
    f8b4:	208000c3 	ldbu	r2,3(r4)
    f8b8:	21c000c4 	addi	r7,r4,3
    f8bc:	28800626 	beq	r5,r2,f8d8 <memchr+0xdc>
    f8c0:	21000104 	addi	r4,r4,4
    f8c4:	59bfea36 	bltu	r11,r6,f870 <memchr+0x74>
    f8c8:	2007883a 	mov	r3,r4
    f8cc:	003fd106 	br	f814 <memchr+0x18>
    f8d0:	0005883a 	mov	r2,zero
    f8d4:	f800283a 	ret
    f8d8:	3805883a 	mov	r2,r7
    f8dc:	f800283a 	ret

0000f8e0 <memmove>:
    f8e0:	2807883a 	mov	r3,r5
    f8e4:	2011883a 	mov	r8,r4
    f8e8:	29000c2e 	bgeu	r5,r4,f91c <memmove+0x3c>
    f8ec:	298f883a 	add	r7,r5,r6
    f8f0:	21c00a2e 	bgeu	r4,r7,f91c <memmove+0x3c>
    f8f4:	30000726 	beq	r6,zero,f914 <memmove+0x34>
    f8f8:	2187883a 	add	r3,r4,r6
    f8fc:	198dc83a 	sub	r6,r3,r6
    f900:	39ffffc4 	addi	r7,r7,-1
    f904:	38800003 	ldbu	r2,0(r7)
    f908:	18ffffc4 	addi	r3,r3,-1
    f90c:	18800005 	stb	r2,0(r3)
    f910:	19bffb1e 	bne	r3,r6,f900 <memmove+0x20>
    f914:	2005883a 	mov	r2,r4
    f918:	f800283a 	ret
    f91c:	01c003c4 	movi	r7,15
    f920:	39800a36 	bltu	r7,r6,f94c <memmove+0x6c>
    f924:	303ffb26 	beq	r6,zero,f914 <memmove+0x34>
    f928:	400f883a 	mov	r7,r8
    f92c:	320d883a 	add	r6,r6,r8
    f930:	28800003 	ldbu	r2,0(r5)
    f934:	29400044 	addi	r5,r5,1
    f938:	38800005 	stb	r2,0(r7)
    f93c:	39c00044 	addi	r7,r7,1
    f940:	39bffb1e 	bne	r7,r6,f930 <memmove+0x50>
    f944:	2005883a 	mov	r2,r4
    f948:	f800283a 	ret
    f94c:	1904b03a 	or	r2,r3,r4
    f950:	108000cc 	andi	r2,r2,3
    f954:	103ff31e 	bne	r2,zero,f924 <memmove+0x44>
    f958:	3811883a 	mov	r8,r7
    f95c:	180b883a 	mov	r5,r3
    f960:	200f883a 	mov	r7,r4
    f964:	28c00017 	ldw	r3,0(r5)
    f968:	31bffc04 	addi	r6,r6,-16
    f96c:	38c00015 	stw	r3,0(r7)
    f970:	28800117 	ldw	r2,4(r5)
    f974:	38800115 	stw	r2,4(r7)
    f978:	28c00217 	ldw	r3,8(r5)
    f97c:	38c00215 	stw	r3,8(r7)
    f980:	28800317 	ldw	r2,12(r5)
    f984:	29400404 	addi	r5,r5,16
    f988:	38800315 	stw	r2,12(r7)
    f98c:	39c00404 	addi	r7,r7,16
    f990:	41bff436 	bltu	r8,r6,f964 <memmove+0x84>
    f994:	008000c4 	movi	r2,3
    f998:	1180072e 	bgeu	r2,r6,f9b8 <memmove+0xd8>
    f99c:	1007883a 	mov	r3,r2
    f9a0:	28800017 	ldw	r2,0(r5)
    f9a4:	31bfff04 	addi	r6,r6,-4
    f9a8:	29400104 	addi	r5,r5,4
    f9ac:	38800015 	stw	r2,0(r7)
    f9b0:	39c00104 	addi	r7,r7,4
    f9b4:	19bffa36 	bltu	r3,r6,f9a0 <memmove+0xc0>
    f9b8:	3811883a 	mov	r8,r7
    f9bc:	003fd906 	br	f924 <memmove+0x44>

0000f9c0 <_Bfree>:
    f9c0:	28000826 	beq	r5,zero,f9e4 <_Bfree+0x24>
    f9c4:	28800117 	ldw	r2,4(r5)
    f9c8:	21001317 	ldw	r4,76(r4)
    f9cc:	1085883a 	add	r2,r2,r2
    f9d0:	1085883a 	add	r2,r2,r2
    f9d4:	1105883a 	add	r2,r2,r4
    f9d8:	10c00017 	ldw	r3,0(r2)
    f9dc:	28c00015 	stw	r3,0(r5)
    f9e0:	11400015 	stw	r5,0(r2)
    f9e4:	f800283a 	ret

0000f9e8 <__hi0bits>:
    f9e8:	20bfffec 	andhi	r2,r4,65535
    f9ec:	10001426 	beq	r2,zero,fa40 <__hi0bits+0x58>
    f9f0:	0007883a 	mov	r3,zero
    f9f4:	20bfc02c 	andhi	r2,r4,65280
    f9f8:	1000021e 	bne	r2,zero,fa04 <__hi0bits+0x1c>
    f9fc:	2008923a 	slli	r4,r4,8
    fa00:	18c00204 	addi	r3,r3,8
    fa04:	20bc002c 	andhi	r2,r4,61440
    fa08:	1000021e 	bne	r2,zero,fa14 <__hi0bits+0x2c>
    fa0c:	2008913a 	slli	r4,r4,4
    fa10:	18c00104 	addi	r3,r3,4
    fa14:	20b0002c 	andhi	r2,r4,49152
    fa18:	1000031e 	bne	r2,zero,fa28 <__hi0bits+0x40>
    fa1c:	2105883a 	add	r2,r4,r4
    fa20:	18c00084 	addi	r3,r3,2
    fa24:	1089883a 	add	r4,r2,r2
    fa28:	20000316 	blt	r4,zero,fa38 <__hi0bits+0x50>
    fa2c:	2090002c 	andhi	r2,r4,16384
    fa30:	10000626 	beq	r2,zero,fa4c <__hi0bits+0x64>
    fa34:	18c00044 	addi	r3,r3,1
    fa38:	1805883a 	mov	r2,r3
    fa3c:	f800283a 	ret
    fa40:	2008943a 	slli	r4,r4,16
    fa44:	00c00404 	movi	r3,16
    fa48:	003fea06 	br	f9f4 <__hi0bits+0xc>
    fa4c:	00c00804 	movi	r3,32
    fa50:	1805883a 	mov	r2,r3
    fa54:	f800283a 	ret

0000fa58 <__lo0bits>:
    fa58:	20c00017 	ldw	r3,0(r4)
    fa5c:	188001cc 	andi	r2,r3,7
    fa60:	10000a26 	beq	r2,zero,fa8c <__lo0bits+0x34>
    fa64:	1880004c 	andi	r2,r3,1
    fa68:	1005003a 	cmpeq	r2,r2,zero
    fa6c:	10002126 	beq	r2,zero,faf4 <__lo0bits+0x9c>
    fa70:	1880008c 	andi	r2,r3,2
    fa74:	1000251e 	bne	r2,zero,fb0c <__lo0bits+0xb4>
    fa78:	1804d0ba 	srli	r2,r3,2
    fa7c:	01400084 	movi	r5,2
    fa80:	20800015 	stw	r2,0(r4)
    fa84:	2805883a 	mov	r2,r5
    fa88:	f800283a 	ret
    fa8c:	18bfffcc 	andi	r2,r3,65535
    fa90:	10001526 	beq	r2,zero,fae8 <__lo0bits+0x90>
    fa94:	000b883a 	mov	r5,zero
    fa98:	18803fcc 	andi	r2,r3,255
    fa9c:	1000021e 	bne	r2,zero,faa8 <__lo0bits+0x50>
    faa0:	1806d23a 	srli	r3,r3,8
    faa4:	29400204 	addi	r5,r5,8
    faa8:	188003cc 	andi	r2,r3,15
    faac:	1000021e 	bne	r2,zero,fab8 <__lo0bits+0x60>
    fab0:	1806d13a 	srli	r3,r3,4
    fab4:	29400104 	addi	r5,r5,4
    fab8:	188000cc 	andi	r2,r3,3
    fabc:	1000021e 	bne	r2,zero,fac8 <__lo0bits+0x70>
    fac0:	1806d0ba 	srli	r3,r3,2
    fac4:	29400084 	addi	r5,r5,2
    fac8:	1880004c 	andi	r2,r3,1
    facc:	1000031e 	bne	r2,zero,fadc <__lo0bits+0x84>
    fad0:	1806d07a 	srli	r3,r3,1
    fad4:	18000a26 	beq	r3,zero,fb00 <__lo0bits+0xa8>
    fad8:	29400044 	addi	r5,r5,1
    fadc:	2805883a 	mov	r2,r5
    fae0:	20c00015 	stw	r3,0(r4)
    fae4:	f800283a 	ret
    fae8:	1806d43a 	srli	r3,r3,16
    faec:	01400404 	movi	r5,16
    faf0:	003fe906 	br	fa98 <__lo0bits+0x40>
    faf4:	000b883a 	mov	r5,zero
    faf8:	2805883a 	mov	r2,r5
    fafc:	f800283a 	ret
    fb00:	01400804 	movi	r5,32
    fb04:	2805883a 	mov	r2,r5
    fb08:	f800283a 	ret
    fb0c:	1804d07a 	srli	r2,r3,1
    fb10:	01400044 	movi	r5,1
    fb14:	20800015 	stw	r2,0(r4)
    fb18:	003fda06 	br	fa84 <__lo0bits+0x2c>

0000fb1c <__mcmp>:
    fb1c:	20800417 	ldw	r2,16(r4)
    fb20:	28c00417 	ldw	r3,16(r5)
    fb24:	10cfc83a 	sub	r7,r2,r3
    fb28:	38000c1e 	bne	r7,zero,fb5c <__mcmp+0x40>
    fb2c:	18c5883a 	add	r2,r3,r3
    fb30:	1085883a 	add	r2,r2,r2
    fb34:	10c00504 	addi	r3,r2,20
    fb38:	21000504 	addi	r4,r4,20
    fb3c:	28cb883a 	add	r5,r5,r3
    fb40:	2085883a 	add	r2,r4,r2
    fb44:	10bfff04 	addi	r2,r2,-4
    fb48:	297fff04 	addi	r5,r5,-4
    fb4c:	11800017 	ldw	r6,0(r2)
    fb50:	28c00017 	ldw	r3,0(r5)
    fb54:	30c0031e 	bne	r6,r3,fb64 <__mcmp+0x48>
    fb58:	20bffa36 	bltu	r4,r2,fb44 <__mcmp+0x28>
    fb5c:	3805883a 	mov	r2,r7
    fb60:	f800283a 	ret
    fb64:	30c00336 	bltu	r6,r3,fb74 <__mcmp+0x58>
    fb68:	01c00044 	movi	r7,1
    fb6c:	3805883a 	mov	r2,r7
    fb70:	f800283a 	ret
    fb74:	01ffffc4 	movi	r7,-1
    fb78:	003ff806 	br	fb5c <__mcmp+0x40>

0000fb7c <__ulp>:
    fb7c:	295ffc2c 	andhi	r5,r5,32752
    fb80:	013f3034 	movhi	r4,64704
    fb84:	290b883a 	add	r5,r5,r4
    fb88:	0145c83a 	sub	r2,zero,r5
    fb8c:	1007d53a 	srai	r3,r2,20
    fb90:	000d883a 	mov	r6,zero
    fb94:	0140040e 	bge	zero,r5,fba8 <__ulp+0x2c>
    fb98:	280f883a 	mov	r7,r5
    fb9c:	3807883a 	mov	r3,r7
    fba0:	3005883a 	mov	r2,r6
    fba4:	f800283a 	ret
    fba8:	008004c4 	movi	r2,19
    fbac:	193ffb04 	addi	r4,r3,-20
    fbb0:	10c00c0e 	bge	r2,r3,fbe4 <__ulp+0x68>
    fbb4:	008007c4 	movi	r2,31
    fbb8:	1107c83a 	sub	r3,r2,r4
    fbbc:	00800784 	movi	r2,30
    fbc0:	01400044 	movi	r5,1
    fbc4:	11000216 	blt	r2,r4,fbd0 <__ulp+0x54>
    fbc8:	00800044 	movi	r2,1
    fbcc:	10ca983a 	sll	r5,r2,r3
    fbd0:	000f883a 	mov	r7,zero
    fbd4:	280d883a 	mov	r6,r5
    fbd8:	3807883a 	mov	r3,r7
    fbdc:	3005883a 	mov	r2,r6
    fbe0:	f800283a 	ret
    fbe4:	00800234 	movhi	r2,8
    fbe8:	10cfd83a 	sra	r7,r2,r3
    fbec:	000d883a 	mov	r6,zero
    fbf0:	3005883a 	mov	r2,r6
    fbf4:	3807883a 	mov	r3,r7
    fbf8:	f800283a 	ret

0000fbfc <__b2d>:
    fbfc:	20800417 	ldw	r2,16(r4)
    fc00:	defff904 	addi	sp,sp,-28
    fc04:	dd000415 	stw	r20,16(sp)
    fc08:	1085883a 	add	r2,r2,r2
    fc0c:	25000504 	addi	r20,r4,20
    fc10:	1085883a 	add	r2,r2,r2
    fc14:	dc000015 	stw	r16,0(sp)
    fc18:	a0a1883a 	add	r16,r20,r2
    fc1c:	dd400515 	stw	r21,20(sp)
    fc20:	857fff17 	ldw	r21,-4(r16)
    fc24:	dc400115 	stw	r17,4(sp)
    fc28:	dfc00615 	stw	ra,24(sp)
    fc2c:	a809883a 	mov	r4,r21
    fc30:	2823883a 	mov	r17,r5
    fc34:	dcc00315 	stw	r19,12(sp)
    fc38:	dc800215 	stw	r18,8(sp)
    fc3c:	000f9e80 	call	f9e8 <__hi0bits>
    fc40:	100b883a 	mov	r5,r2
    fc44:	00800804 	movi	r2,32
    fc48:	1145c83a 	sub	r2,r2,r5
    fc4c:	88800015 	stw	r2,0(r17)
    fc50:	00800284 	movi	r2,10
    fc54:	80ffff04 	addi	r3,r16,-4
    fc58:	11401416 	blt	r2,r5,fcac <__b2d+0xb0>
    fc5c:	008002c4 	movi	r2,11
    fc60:	1149c83a 	sub	r4,r2,r5
    fc64:	a0c02736 	bltu	r20,r3,fd04 <__b2d+0x108>
    fc68:	000d883a 	mov	r6,zero
    fc6c:	28800544 	addi	r2,r5,21
    fc70:	a906d83a 	srl	r3,r21,r4
    fc74:	a884983a 	sll	r2,r21,r2
    fc78:	1ccffc34 	orhi	r19,r3,16368
    fc7c:	11a4b03a 	or	r18,r2,r6
    fc80:	9005883a 	mov	r2,r18
    fc84:	9807883a 	mov	r3,r19
    fc88:	dfc00617 	ldw	ra,24(sp)
    fc8c:	dd400517 	ldw	r21,20(sp)
    fc90:	dd000417 	ldw	r20,16(sp)
    fc94:	dcc00317 	ldw	r19,12(sp)
    fc98:	dc800217 	ldw	r18,8(sp)
    fc9c:	dc400117 	ldw	r17,4(sp)
    fca0:	dc000017 	ldw	r16,0(sp)
    fca4:	dec00704 	addi	sp,sp,28
    fca8:	f800283a 	ret
    fcac:	a0c00e36 	bltu	r20,r3,fce8 <__b2d+0xec>
    fcb0:	293ffd44 	addi	r4,r5,-11
    fcb4:	000d883a 	mov	r6,zero
    fcb8:	20000f26 	beq	r4,zero,fcf8 <__b2d+0xfc>
    fcbc:	00800804 	movi	r2,32
    fcc0:	110bc83a 	sub	r5,r2,r4
    fcc4:	a0c01236 	bltu	r20,r3,fd10 <__b2d+0x114>
    fcc8:	000f883a 	mov	r7,zero
    fccc:	a904983a 	sll	r2,r21,r4
    fcd0:	3146d83a 	srl	r3,r6,r5
    fcd4:	3108983a 	sll	r4,r6,r4
    fcd8:	108ffc34 	orhi	r2,r2,16368
    fcdc:	18a6b03a 	or	r19,r3,r2
    fce0:	3924b03a 	or	r18,r7,r4
    fce4:	003fe606 	br	fc80 <__b2d+0x84>
    fce8:	293ffd44 	addi	r4,r5,-11
    fcec:	81bffe17 	ldw	r6,-8(r16)
    fcf0:	80fffe04 	addi	r3,r16,-8
    fcf4:	203ff11e 	bne	r4,zero,fcbc <__b2d+0xc0>
    fcf8:	accffc34 	orhi	r19,r21,16368
    fcfc:	3025883a 	mov	r18,r6
    fd00:	003fdf06 	br	fc80 <__b2d+0x84>
    fd04:	18bfff17 	ldw	r2,-4(r3)
    fd08:	110cd83a 	srl	r6,r2,r4
    fd0c:	003fd706 	br	fc6c <__b2d+0x70>
    fd10:	18bfff17 	ldw	r2,-4(r3)
    fd14:	114ed83a 	srl	r7,r2,r5
    fd18:	003fec06 	br	fccc <__b2d+0xd0>

0000fd1c <__ratio>:
    fd1c:	defff904 	addi	sp,sp,-28
    fd20:	dc400215 	stw	r17,8(sp)
    fd24:	2823883a 	mov	r17,r5
    fd28:	d80b883a 	mov	r5,sp
    fd2c:	dfc00615 	stw	ra,24(sp)
    fd30:	dd000515 	stw	r20,20(sp)
    fd34:	dcc00415 	stw	r19,16(sp)
    fd38:	dc800315 	stw	r18,12(sp)
    fd3c:	2025883a 	mov	r18,r4
    fd40:	000fbfc0 	call	fbfc <__b2d>
    fd44:	8809883a 	mov	r4,r17
    fd48:	d9400104 	addi	r5,sp,4
    fd4c:	1027883a 	mov	r19,r2
    fd50:	1829883a 	mov	r20,r3
    fd54:	000fbfc0 	call	fbfc <__b2d>
    fd58:	89000417 	ldw	r4,16(r17)
    fd5c:	91c00417 	ldw	r7,16(r18)
    fd60:	d9800117 	ldw	r6,4(sp)
    fd64:	180b883a 	mov	r5,r3
    fd68:	390fc83a 	sub	r7,r7,r4
    fd6c:	1009883a 	mov	r4,r2
    fd70:	d8800017 	ldw	r2,0(sp)
    fd74:	380e917a 	slli	r7,r7,5
    fd78:	2011883a 	mov	r8,r4
    fd7c:	1185c83a 	sub	r2,r2,r6
    fd80:	11c5883a 	add	r2,r2,r7
    fd84:	1006953a 	slli	r3,r2,20
    fd88:	2813883a 	mov	r9,r5
    fd8c:	00800d0e 	bge	zero,r2,fdc4 <__ratio+0xa8>
    fd90:	1d29883a 	add	r20,r3,r20
    fd94:	a00b883a 	mov	r5,r20
    fd98:	480f883a 	mov	r7,r9
    fd9c:	9809883a 	mov	r4,r19
    fda0:	400d883a 	mov	r6,r8
    fda4:	00074140 	call	7414 <__divdf3>
    fda8:	dfc00617 	ldw	ra,24(sp)
    fdac:	dd000517 	ldw	r20,20(sp)
    fdb0:	dcc00417 	ldw	r19,16(sp)
    fdb4:	dc800317 	ldw	r18,12(sp)
    fdb8:	dc400217 	ldw	r17,8(sp)
    fdbc:	dec00704 	addi	sp,sp,28
    fdc0:	f800283a 	ret
    fdc4:	28d3c83a 	sub	r9,r5,r3
    fdc8:	003ff206 	br	fd94 <__ratio+0x78>

0000fdcc <_mprec_log10>:
    fdcc:	defffe04 	addi	sp,sp,-8
    fdd0:	008005c4 	movi	r2,23
    fdd4:	dc000015 	stw	r16,0(sp)
    fdd8:	dfc00115 	stw	ra,4(sp)
    fddc:	2021883a 	mov	r16,r4
    fde0:	11000c16 	blt	r2,r4,fe14 <_mprec_log10+0x48>
    fde4:	200490fa 	slli	r2,r4,3
    fde8:	00c20034 	movhi	r3,2048
    fdec:	18c17404 	addi	r3,r3,1488
    fdf0:	10c5883a 	add	r2,r2,r3
    fdf4:	12400117 	ldw	r9,4(r2)
    fdf8:	12000017 	ldw	r8,0(r2)
    fdfc:	4807883a 	mov	r3,r9
    fe00:	4005883a 	mov	r2,r8
    fe04:	dfc00117 	ldw	ra,4(sp)
    fe08:	dc000017 	ldw	r16,0(sp)
    fe0c:	dec00204 	addi	sp,sp,8
    fe10:	f800283a 	ret
    fe14:	0011883a 	mov	r8,zero
    fe18:	024ffc34 	movhi	r9,16368
    fe1c:	0005883a 	mov	r2,zero
    fe20:	00d00934 	movhi	r3,16420
    fe24:	480b883a 	mov	r5,r9
    fe28:	4009883a 	mov	r4,r8
    fe2c:	180f883a 	mov	r7,r3
    fe30:	100d883a 	mov	r6,r2
    fe34:	00070500 	call	7050 <__muldf3>
    fe38:	843fffc4 	addi	r16,r16,-1
    fe3c:	1011883a 	mov	r8,r2
    fe40:	1813883a 	mov	r9,r3
    fe44:	803ff51e 	bne	r16,zero,fe1c <_mprec_log10+0x50>
    fe48:	4005883a 	mov	r2,r8
    fe4c:	4807883a 	mov	r3,r9
    fe50:	dfc00117 	ldw	ra,4(sp)
    fe54:	dc000017 	ldw	r16,0(sp)
    fe58:	dec00204 	addi	sp,sp,8
    fe5c:	f800283a 	ret

0000fe60 <__copybits>:
    fe60:	297fffc4 	addi	r5,r5,-1
    fe64:	30800417 	ldw	r2,16(r6)
    fe68:	280bd17a 	srai	r5,r5,5
    fe6c:	31800504 	addi	r6,r6,20
    fe70:	1085883a 	add	r2,r2,r2
    fe74:	294b883a 	add	r5,r5,r5
    fe78:	294b883a 	add	r5,r5,r5
    fe7c:	1085883a 	add	r2,r2,r2
    fe80:	290b883a 	add	r5,r5,r4
    fe84:	3087883a 	add	r3,r6,r2
    fe88:	29400104 	addi	r5,r5,4
    fe8c:	30c0052e 	bgeu	r6,r3,fea4 <__copybits+0x44>
    fe90:	30800017 	ldw	r2,0(r6)
    fe94:	31800104 	addi	r6,r6,4
    fe98:	20800015 	stw	r2,0(r4)
    fe9c:	21000104 	addi	r4,r4,4
    fea0:	30fffb36 	bltu	r6,r3,fe90 <__copybits+0x30>
    fea4:	2140032e 	bgeu	r4,r5,feb4 <__copybits+0x54>
    fea8:	20000015 	stw	zero,0(r4)
    feac:	21000104 	addi	r4,r4,4
    feb0:	217ffd36 	bltu	r4,r5,fea8 <__copybits+0x48>
    feb4:	f800283a 	ret

0000feb8 <__any_on>:
    feb8:	20800417 	ldw	r2,16(r4)
    febc:	2807d17a 	srai	r3,r5,5
    fec0:	21000504 	addi	r4,r4,20
    fec4:	10c00d0e 	bge	r2,r3,fefc <__any_on+0x44>
    fec8:	1085883a 	add	r2,r2,r2
    fecc:	1085883a 	add	r2,r2,r2
    fed0:	208d883a 	add	r6,r4,r2
    fed4:	2180182e 	bgeu	r4,r6,ff38 <__any_on+0x80>
    fed8:	30bfff17 	ldw	r2,-4(r6)
    fedc:	30ffff04 	addi	r3,r6,-4
    fee0:	1000041e 	bne	r2,zero,fef4 <__any_on+0x3c>
    fee4:	20c0142e 	bgeu	r4,r3,ff38 <__any_on+0x80>
    fee8:	18ffff04 	addi	r3,r3,-4
    feec:	18800017 	ldw	r2,0(r3)
    fef0:	103ffc26 	beq	r2,zero,fee4 <__any_on+0x2c>
    fef4:	00800044 	movi	r2,1
    fef8:	f800283a 	ret
    fefc:	18800a0e 	bge	r3,r2,ff28 <__any_on+0x70>
    ff00:	294007cc 	andi	r5,r5,31
    ff04:	28000826 	beq	r5,zero,ff28 <__any_on+0x70>
    ff08:	18c5883a 	add	r2,r3,r3
    ff0c:	1085883a 	add	r2,r2,r2
    ff10:	208d883a 	add	r6,r4,r2
    ff14:	30c00017 	ldw	r3,0(r6)
    ff18:	1944d83a 	srl	r2,r3,r5
    ff1c:	1144983a 	sll	r2,r2,r5
    ff20:	18bff41e 	bne	r3,r2,fef4 <__any_on+0x3c>
    ff24:	003feb06 	br	fed4 <__any_on+0x1c>
    ff28:	18c5883a 	add	r2,r3,r3
    ff2c:	1085883a 	add	r2,r2,r2
    ff30:	208d883a 	add	r6,r4,r2
    ff34:	003fe706 	br	fed4 <__any_on+0x1c>
    ff38:	0005883a 	mov	r2,zero
    ff3c:	f800283a 	ret

0000ff40 <_Balloc>:
    ff40:	20c01317 	ldw	r3,76(r4)
    ff44:	defffb04 	addi	sp,sp,-20
    ff48:	dcc00315 	stw	r19,12(sp)
    ff4c:	dc800215 	stw	r18,8(sp)
    ff50:	dfc00415 	stw	ra,16(sp)
    ff54:	2825883a 	mov	r18,r5
    ff58:	dc400115 	stw	r17,4(sp)
    ff5c:	dc000015 	stw	r16,0(sp)
    ff60:	2027883a 	mov	r19,r4
    ff64:	01800404 	movi	r6,16
    ff68:	01400104 	movi	r5,4
    ff6c:	18001726 	beq	r3,zero,ffcc <_Balloc+0x8c>
    ff70:	01400044 	movi	r5,1
    ff74:	9485883a 	add	r2,r18,r18
    ff78:	2ca2983a 	sll	r17,r5,r18
    ff7c:	1085883a 	add	r2,r2,r2
    ff80:	10c7883a 	add	r3,r2,r3
    ff84:	1c000017 	ldw	r16,0(r3)
    ff88:	8c4d883a 	add	r6,r17,r17
    ff8c:	318d883a 	add	r6,r6,r6
    ff90:	9809883a 	mov	r4,r19
    ff94:	31800504 	addi	r6,r6,20
    ff98:	80001226 	beq	r16,zero,ffe4 <_Balloc+0xa4>
    ff9c:	80800017 	ldw	r2,0(r16)
    ffa0:	18800015 	stw	r2,0(r3)
    ffa4:	80000415 	stw	zero,16(r16)
    ffa8:	80000315 	stw	zero,12(r16)
    ffac:	8005883a 	mov	r2,r16
    ffb0:	dfc00417 	ldw	ra,16(sp)
    ffb4:	dcc00317 	ldw	r19,12(sp)
    ffb8:	dc800217 	ldw	r18,8(sp)
    ffbc:	dc400117 	ldw	r17,4(sp)
    ffc0:	dc000017 	ldw	r16,0(sp)
    ffc4:	dec00504 	addi	sp,sp,20
    ffc8:	f800283a 	ret
    ffcc:	00116400 	call	11640 <_calloc_r>
    ffd0:	1007883a 	mov	r3,r2
    ffd4:	0021883a 	mov	r16,zero
    ffd8:	98801315 	stw	r2,76(r19)
    ffdc:	103fe41e 	bne	r2,zero,ff70 <_Balloc+0x30>
    ffe0:	003ff206 	br	ffac <_Balloc+0x6c>
    ffe4:	00116400 	call	11640 <_calloc_r>
    ffe8:	103ff026 	beq	r2,zero,ffac <_Balloc+0x6c>
    ffec:	1021883a 	mov	r16,r2
    fff0:	14800115 	stw	r18,4(r2)
    fff4:	14400215 	stw	r17,8(r2)
    fff8:	003fea06 	br	ffa4 <_Balloc+0x64>

0000fffc <__d2b>:
    fffc:	defff504 	addi	sp,sp,-44
   10000:	dcc00515 	stw	r19,20(sp)
   10004:	04c00044 	movi	r19,1
   10008:	dc000215 	stw	r16,8(sp)
   1000c:	2821883a 	mov	r16,r5
   10010:	980b883a 	mov	r5,r19
   10014:	ddc00915 	stw	r23,36(sp)
   10018:	dd800815 	stw	r22,32(sp)
   1001c:	dd400715 	stw	r21,28(sp)
   10020:	dd000615 	stw	r20,24(sp)
   10024:	dc800415 	stw	r18,16(sp)
   10028:	dc400315 	stw	r17,12(sp)
   1002c:	dfc00a15 	stw	ra,40(sp)
   10030:	3023883a 	mov	r17,r6
   10034:	382d883a 	mov	r22,r7
   10038:	ddc00b17 	ldw	r23,44(sp)
   1003c:	000ff400 	call	ff40 <_Balloc>
   10040:	1025883a 	mov	r18,r2
   10044:	00a00034 	movhi	r2,32768
   10048:	10bfffc4 	addi	r2,r2,-1
   1004c:	8888703a 	and	r4,r17,r2
   10050:	202ad53a 	srli	r21,r4,20
   10054:	00800434 	movhi	r2,16
   10058:	10bfffc4 	addi	r2,r2,-1
   1005c:	8886703a 	and	r3,r17,r2
   10060:	a829003a 	cmpeq	r20,r21,zero
   10064:	800b883a 	mov	r5,r16
   10068:	d8c00115 	stw	r3,4(sp)
   1006c:	94000504 	addi	r16,r18,20
   10070:	a000021e 	bne	r20,zero,1007c <__d2b+0x80>
   10074:	18c00434 	orhi	r3,r3,16
   10078:	d8c00115 	stw	r3,4(sp)
   1007c:	28002726 	beq	r5,zero,1011c <__d2b+0x120>
   10080:	d809883a 	mov	r4,sp
   10084:	d9400015 	stw	r5,0(sp)
   10088:	000fa580 	call	fa58 <__lo0bits>
   1008c:	100d883a 	mov	r6,r2
   10090:	10003526 	beq	r2,zero,10168 <__d2b+0x16c>
   10094:	d8c00117 	ldw	r3,4(sp)
   10098:	00800804 	movi	r2,32
   1009c:	1185c83a 	sub	r2,r2,r6
   100a0:	d9000017 	ldw	r4,0(sp)
   100a4:	1886983a 	sll	r3,r3,r2
   100a8:	1906b03a 	or	r3,r3,r4
   100ac:	90c00515 	stw	r3,20(r18)
   100b0:	d8c00117 	ldw	r3,4(sp)
   100b4:	1986d83a 	srl	r3,r3,r6
   100b8:	d8c00115 	stw	r3,4(sp)
   100bc:	180b003a 	cmpeq	r5,r3,zero
   100c0:	00800084 	movi	r2,2
   100c4:	114bc83a 	sub	r5,r2,r5
   100c8:	80c00115 	stw	r3,4(r16)
   100cc:	91400415 	stw	r5,16(r18)
   100d0:	a0001a1e 	bne	r20,zero,1013c <__d2b+0x140>
   100d4:	3545883a 	add	r2,r6,r21
   100d8:	10bef344 	addi	r2,r2,-1075
   100dc:	00c00d44 	movi	r3,53
   100e0:	b0800015 	stw	r2,0(r22)
   100e4:	1987c83a 	sub	r3,r3,r6
   100e8:	b8c00015 	stw	r3,0(r23)
   100ec:	9005883a 	mov	r2,r18
   100f0:	dfc00a17 	ldw	ra,40(sp)
   100f4:	ddc00917 	ldw	r23,36(sp)
   100f8:	dd800817 	ldw	r22,32(sp)
   100fc:	dd400717 	ldw	r21,28(sp)
   10100:	dd000617 	ldw	r20,24(sp)
   10104:	dcc00517 	ldw	r19,20(sp)
   10108:	dc800417 	ldw	r18,16(sp)
   1010c:	dc400317 	ldw	r17,12(sp)
   10110:	dc000217 	ldw	r16,8(sp)
   10114:	dec00b04 	addi	sp,sp,44
   10118:	f800283a 	ret
   1011c:	d9000104 	addi	r4,sp,4
   10120:	000fa580 	call	fa58 <__lo0bits>
   10124:	11800804 	addi	r6,r2,32
   10128:	d8800117 	ldw	r2,4(sp)
   1012c:	94c00415 	stw	r19,16(r18)
   10130:	980b883a 	mov	r5,r19
   10134:	90800515 	stw	r2,20(r18)
   10138:	a03fe626 	beq	r20,zero,100d4 <__d2b+0xd8>
   1013c:	2945883a 	add	r2,r5,r5
   10140:	1085883a 	add	r2,r2,r2
   10144:	1405883a 	add	r2,r2,r16
   10148:	113fff17 	ldw	r4,-4(r2)
   1014c:	30fef384 	addi	r3,r6,-1074
   10150:	2820917a 	slli	r16,r5,5
   10154:	b0c00015 	stw	r3,0(r22)
   10158:	000f9e80 	call	f9e8 <__hi0bits>
   1015c:	80a1c83a 	sub	r16,r16,r2
   10160:	bc000015 	stw	r16,0(r23)
   10164:	003fe106 	br	100ec <__d2b+0xf0>
   10168:	d8800017 	ldw	r2,0(sp)
   1016c:	90800515 	stw	r2,20(r18)
   10170:	d8c00117 	ldw	r3,4(sp)
   10174:	003fd106 	br	100bc <__d2b+0xc0>

00010178 <__mdiff>:
   10178:	defffb04 	addi	sp,sp,-20
   1017c:	dc000015 	stw	r16,0(sp)
   10180:	2821883a 	mov	r16,r5
   10184:	dc800215 	stw	r18,8(sp)
   10188:	300b883a 	mov	r5,r6
   1018c:	2025883a 	mov	r18,r4
   10190:	8009883a 	mov	r4,r16
   10194:	dc400115 	stw	r17,4(sp)
   10198:	dfc00415 	stw	ra,16(sp)
   1019c:	dcc00315 	stw	r19,12(sp)
   101a0:	3023883a 	mov	r17,r6
   101a4:	000fb1c0 	call	fb1c <__mcmp>
   101a8:	10004226 	beq	r2,zero,102b4 <__mdiff+0x13c>
   101ac:	10005016 	blt	r2,zero,102f0 <__mdiff+0x178>
   101b0:	0027883a 	mov	r19,zero
   101b4:	81400117 	ldw	r5,4(r16)
   101b8:	9009883a 	mov	r4,r18
   101bc:	000ff400 	call	ff40 <_Balloc>
   101c0:	1019883a 	mov	r12,r2
   101c4:	82800417 	ldw	r10,16(r16)
   101c8:	88800417 	ldw	r2,16(r17)
   101cc:	81800504 	addi	r6,r16,20
   101d0:	5287883a 	add	r3,r10,r10
   101d4:	1085883a 	add	r2,r2,r2
   101d8:	18c7883a 	add	r3,r3,r3
   101dc:	1085883a 	add	r2,r2,r2
   101e0:	8a000504 	addi	r8,r17,20
   101e4:	64c00315 	stw	r19,12(r12)
   101e8:	30db883a 	add	r13,r6,r3
   101ec:	4097883a 	add	r11,r8,r2
   101f0:	61c00504 	addi	r7,r12,20
   101f4:	0013883a 	mov	r9,zero
   101f8:	31000017 	ldw	r4,0(r6)
   101fc:	41400017 	ldw	r5,0(r8)
   10200:	42000104 	addi	r8,r8,4
   10204:	20bfffcc 	andi	r2,r4,65535
   10208:	28ffffcc 	andi	r3,r5,65535
   1020c:	10c5c83a 	sub	r2,r2,r3
   10210:	1245883a 	add	r2,r2,r9
   10214:	2008d43a 	srli	r4,r4,16
   10218:	280ad43a 	srli	r5,r5,16
   1021c:	1007d43a 	srai	r3,r2,16
   10220:	3880000d 	sth	r2,0(r7)
   10224:	2149c83a 	sub	r4,r4,r5
   10228:	20c9883a 	add	r4,r4,r3
   1022c:	3900008d 	sth	r4,2(r7)
   10230:	31800104 	addi	r6,r6,4
   10234:	39c00104 	addi	r7,r7,4
   10238:	2013d43a 	srai	r9,r4,16
   1023c:	42ffee36 	bltu	r8,r11,101f8 <__mdiff+0x80>
   10240:	33400c2e 	bgeu	r6,r13,10274 <__mdiff+0xfc>
   10244:	30800017 	ldw	r2,0(r6)
   10248:	31800104 	addi	r6,r6,4
   1024c:	10ffffcc 	andi	r3,r2,65535
   10250:	1a47883a 	add	r3,r3,r9
   10254:	1004d43a 	srli	r2,r2,16
   10258:	1809d43a 	srai	r4,r3,16
   1025c:	38c0000d 	sth	r3,0(r7)
   10260:	1105883a 	add	r2,r2,r4
   10264:	3880008d 	sth	r2,2(r7)
   10268:	1013d43a 	srai	r9,r2,16
   1026c:	39c00104 	addi	r7,r7,4
   10270:	337ff436 	bltu	r6,r13,10244 <__mdiff+0xcc>
   10274:	38bfff17 	ldw	r2,-4(r7)
   10278:	38ffff04 	addi	r3,r7,-4
   1027c:	1000041e 	bne	r2,zero,10290 <__mdiff+0x118>
   10280:	18ffff04 	addi	r3,r3,-4
   10284:	18800017 	ldw	r2,0(r3)
   10288:	52bfffc4 	addi	r10,r10,-1
   1028c:	103ffc26 	beq	r2,zero,10280 <__mdiff+0x108>
   10290:	6005883a 	mov	r2,r12
   10294:	62800415 	stw	r10,16(r12)
   10298:	dfc00417 	ldw	ra,16(sp)
   1029c:	dcc00317 	ldw	r19,12(sp)
   102a0:	dc800217 	ldw	r18,8(sp)
   102a4:	dc400117 	ldw	r17,4(sp)
   102a8:	dc000017 	ldw	r16,0(sp)
   102ac:	dec00504 	addi	sp,sp,20
   102b0:	f800283a 	ret
   102b4:	9009883a 	mov	r4,r18
   102b8:	000b883a 	mov	r5,zero
   102bc:	000ff400 	call	ff40 <_Balloc>
   102c0:	1019883a 	mov	r12,r2
   102c4:	00800044 	movi	r2,1
   102c8:	60800415 	stw	r2,16(r12)
   102cc:	6005883a 	mov	r2,r12
   102d0:	60000515 	stw	zero,20(r12)
   102d4:	dfc00417 	ldw	ra,16(sp)
   102d8:	dcc00317 	ldw	r19,12(sp)
   102dc:	dc800217 	ldw	r18,8(sp)
   102e0:	dc400117 	ldw	r17,4(sp)
   102e4:	dc000017 	ldw	r16,0(sp)
   102e8:	dec00504 	addi	sp,sp,20
   102ec:	f800283a 	ret
   102f0:	880d883a 	mov	r6,r17
   102f4:	04c00044 	movi	r19,1
   102f8:	8023883a 	mov	r17,r16
   102fc:	3021883a 	mov	r16,r6
   10300:	003fac06 	br	101b4 <__mdiff+0x3c>

00010304 <__lshift>:
   10304:	defff904 	addi	sp,sp,-28
   10308:	28800417 	ldw	r2,16(r5)
   1030c:	dc000015 	stw	r16,0(sp)
   10310:	3021d17a 	srai	r16,r6,5
   10314:	28c00217 	ldw	r3,8(r5)
   10318:	10800044 	addi	r2,r2,1
   1031c:	dc400115 	stw	r17,4(sp)
   10320:	80a3883a 	add	r17,r16,r2
   10324:	dd400515 	stw	r21,20(sp)
   10328:	dd000415 	stw	r20,16(sp)
   1032c:	dc800215 	stw	r18,8(sp)
   10330:	dfc00615 	stw	ra,24(sp)
   10334:	2825883a 	mov	r18,r5
   10338:	dcc00315 	stw	r19,12(sp)
   1033c:	3029883a 	mov	r20,r6
   10340:	202b883a 	mov	r21,r4
   10344:	29400117 	ldw	r5,4(r5)
   10348:	1c40030e 	bge	r3,r17,10358 <__lshift+0x54>
   1034c:	18c7883a 	add	r3,r3,r3
   10350:	29400044 	addi	r5,r5,1
   10354:	1c7ffd16 	blt	r3,r17,1034c <__lshift+0x48>
   10358:	a809883a 	mov	r4,r21
   1035c:	000ff400 	call	ff40 <_Balloc>
   10360:	1027883a 	mov	r19,r2
   10364:	11400504 	addi	r5,r2,20
   10368:	0400090e 	bge	zero,r16,10390 <__lshift+0x8c>
   1036c:	2805883a 	mov	r2,r5
   10370:	0007883a 	mov	r3,zero
   10374:	18c00044 	addi	r3,r3,1
   10378:	10000015 	stw	zero,0(r2)
   1037c:	10800104 	addi	r2,r2,4
   10380:	80fffc1e 	bne	r16,r3,10374 <__lshift+0x70>
   10384:	8405883a 	add	r2,r16,r16
   10388:	1085883a 	add	r2,r2,r2
   1038c:	288b883a 	add	r5,r5,r2
   10390:	90800417 	ldw	r2,16(r18)
   10394:	91000504 	addi	r4,r18,20
   10398:	a18007cc 	andi	r6,r20,31
   1039c:	1085883a 	add	r2,r2,r2
   103a0:	1085883a 	add	r2,r2,r2
   103a4:	208f883a 	add	r7,r4,r2
   103a8:	30001e26 	beq	r6,zero,10424 <__lshift+0x120>
   103ac:	00800804 	movi	r2,32
   103b0:	1191c83a 	sub	r8,r2,r6
   103b4:	0007883a 	mov	r3,zero
   103b8:	20800017 	ldw	r2,0(r4)
   103bc:	1184983a 	sll	r2,r2,r6
   103c0:	1884b03a 	or	r2,r3,r2
   103c4:	28800015 	stw	r2,0(r5)
   103c8:	20c00017 	ldw	r3,0(r4)
   103cc:	21000104 	addi	r4,r4,4
   103d0:	29400104 	addi	r5,r5,4
   103d4:	1a06d83a 	srl	r3,r3,r8
   103d8:	21fff736 	bltu	r4,r7,103b8 <__lshift+0xb4>
   103dc:	28c00015 	stw	r3,0(r5)
   103e0:	18000126 	beq	r3,zero,103e8 <__lshift+0xe4>
   103e4:	8c400044 	addi	r17,r17,1
   103e8:	88bfffc4 	addi	r2,r17,-1
   103ec:	98800415 	stw	r2,16(r19)
   103f0:	a809883a 	mov	r4,r21
   103f4:	900b883a 	mov	r5,r18
   103f8:	000f9c00 	call	f9c0 <_Bfree>
   103fc:	9805883a 	mov	r2,r19
   10400:	dfc00617 	ldw	ra,24(sp)
   10404:	dd400517 	ldw	r21,20(sp)
   10408:	dd000417 	ldw	r20,16(sp)
   1040c:	dcc00317 	ldw	r19,12(sp)
   10410:	dc800217 	ldw	r18,8(sp)
   10414:	dc400117 	ldw	r17,4(sp)
   10418:	dc000017 	ldw	r16,0(sp)
   1041c:	dec00704 	addi	sp,sp,28
   10420:	f800283a 	ret
   10424:	20800017 	ldw	r2,0(r4)
   10428:	21000104 	addi	r4,r4,4
   1042c:	28800015 	stw	r2,0(r5)
   10430:	29400104 	addi	r5,r5,4
   10434:	21ffec2e 	bgeu	r4,r7,103e8 <__lshift+0xe4>
   10438:	20800017 	ldw	r2,0(r4)
   1043c:	21000104 	addi	r4,r4,4
   10440:	28800015 	stw	r2,0(r5)
   10444:	29400104 	addi	r5,r5,4
   10448:	21fff636 	bltu	r4,r7,10424 <__lshift+0x120>
   1044c:	003fe606 	br	103e8 <__lshift+0xe4>

00010450 <__multiply>:
   10450:	defff904 	addi	sp,sp,-28
   10454:	dcc00315 	stw	r19,12(sp)
   10458:	dc800215 	stw	r18,8(sp)
   1045c:	2cc00417 	ldw	r19,16(r5)
   10460:	34800417 	ldw	r18,16(r6)
   10464:	dd000415 	stw	r20,16(sp)
   10468:	dc400115 	stw	r17,4(sp)
   1046c:	dfc00615 	stw	ra,24(sp)
   10470:	dd400515 	stw	r21,20(sp)
   10474:	dc000015 	stw	r16,0(sp)
   10478:	2823883a 	mov	r17,r5
   1047c:	3029883a 	mov	r20,r6
   10480:	9c80040e 	bge	r19,r18,10494 <__multiply+0x44>
   10484:	9027883a 	mov	r19,r18
   10488:	2c800417 	ldw	r18,16(r5)
   1048c:	2829883a 	mov	r20,r5
   10490:	3023883a 	mov	r17,r6
   10494:	88800217 	ldw	r2,8(r17)
   10498:	9ca1883a 	add	r16,r19,r18
   1049c:	89400117 	ldw	r5,4(r17)
   104a0:	1400010e 	bge	r2,r16,104a8 <__multiply+0x58>
   104a4:	29400044 	addi	r5,r5,1
   104a8:	000ff400 	call	ff40 <_Balloc>
   104ac:	102b883a 	mov	r21,r2
   104b0:	8405883a 	add	r2,r16,r16
   104b4:	1085883a 	add	r2,r2,r2
   104b8:	a9000504 	addi	r4,r21,20
   104bc:	209d883a 	add	r14,r4,r2
   104c0:	2380042e 	bgeu	r4,r14,104d4 <__multiply+0x84>
   104c4:	2005883a 	mov	r2,r4
   104c8:	10000015 	stw	zero,0(r2)
   104cc:	10800104 	addi	r2,r2,4
   104d0:	13bffd36 	bltu	r2,r14,104c8 <__multiply+0x78>
   104d4:	9485883a 	add	r2,r18,r18
   104d8:	9cc7883a 	add	r3,r19,r19
   104dc:	a1800504 	addi	r6,r20,20
   104e0:	1085883a 	add	r2,r2,r2
   104e4:	8b400504 	addi	r13,r17,20
   104e8:	18c7883a 	add	r3,r3,r3
   104ec:	309f883a 	add	r15,r6,r2
   104f0:	68d7883a 	add	r11,r13,r3
   104f4:	33c03b2e 	bgeu	r6,r15,105e4 <__multiply+0x194>
   104f8:	2019883a 	mov	r12,r4
   104fc:	30800017 	ldw	r2,0(r6)
   10500:	127fffcc 	andi	r9,r2,65535
   10504:	48001826 	beq	r9,zero,10568 <__multiply+0x118>
   10508:	6811883a 	mov	r8,r13
   1050c:	600f883a 	mov	r7,r12
   10510:	0015883a 	mov	r10,zero
   10514:	40c00017 	ldw	r3,0(r8)
   10518:	39400017 	ldw	r5,0(r7)
   1051c:	42000104 	addi	r8,r8,4
   10520:	193fffcc 	andi	r4,r3,65535
   10524:	4909383a 	mul	r4,r9,r4
   10528:	1806d43a 	srli	r3,r3,16
   1052c:	28bfffcc 	andi	r2,r5,65535
   10530:	5085883a 	add	r2,r10,r2
   10534:	2089883a 	add	r4,r4,r2
   10538:	48c7383a 	mul	r3,r9,r3
   1053c:	280ad43a 	srli	r5,r5,16
   10540:	2004d43a 	srli	r2,r4,16
   10544:	3900000d 	sth	r4,0(r7)
   10548:	1947883a 	add	r3,r3,r5
   1054c:	10c5883a 	add	r2,r2,r3
   10550:	3880008d 	sth	r2,2(r7)
   10554:	1014d43a 	srli	r10,r2,16
   10558:	39c00104 	addi	r7,r7,4
   1055c:	42ffed36 	bltu	r8,r11,10514 <__multiply+0xc4>
   10560:	3a800015 	stw	r10,0(r7)
   10564:	30800017 	ldw	r2,0(r6)
   10568:	1012d43a 	srli	r9,r2,16
   1056c:	48001926 	beq	r9,zero,105d4 <__multiply+0x184>
   10570:	60800017 	ldw	r2,0(r12)
   10574:	6811883a 	mov	r8,r13
   10578:	600f883a 	mov	r7,r12
   1057c:	0015883a 	mov	r10,zero
   10580:	100b883a 	mov	r5,r2
   10584:	41000017 	ldw	r4,0(r8)
   10588:	2806d43a 	srli	r3,r5,16
   1058c:	3880000d 	sth	r2,0(r7)
   10590:	20bfffcc 	andi	r2,r4,65535
   10594:	4885383a 	mul	r2,r9,r2
   10598:	50c7883a 	add	r3,r10,r3
   1059c:	2008d43a 	srli	r4,r4,16
   105a0:	10c5883a 	add	r2,r2,r3
   105a4:	3880008d 	sth	r2,2(r7)
   105a8:	39c00104 	addi	r7,r7,4
   105ac:	39400017 	ldw	r5,0(r7)
   105b0:	4909383a 	mul	r4,r9,r4
   105b4:	1004d43a 	srli	r2,r2,16
   105b8:	28ffffcc 	andi	r3,r5,65535
   105bc:	20c9883a 	add	r4,r4,r3
   105c0:	1105883a 	add	r2,r2,r4
   105c4:	42000104 	addi	r8,r8,4
   105c8:	1014d43a 	srli	r10,r2,16
   105cc:	42ffed36 	bltu	r8,r11,10584 <__multiply+0x134>
   105d0:	38800015 	stw	r2,0(r7)
   105d4:	31800104 	addi	r6,r6,4
   105d8:	33c0022e 	bgeu	r6,r15,105e4 <__multiply+0x194>
   105dc:	63000104 	addi	r12,r12,4
   105e0:	003fc606 	br	104fc <__multiply+0xac>
   105e4:	0400090e 	bge	zero,r16,1060c <__multiply+0x1bc>
   105e8:	70bfff17 	ldw	r2,-4(r14)
   105ec:	70ffff04 	addi	r3,r14,-4
   105f0:	10000326 	beq	r2,zero,10600 <__multiply+0x1b0>
   105f4:	00000506 	br	1060c <__multiply+0x1bc>
   105f8:	18800017 	ldw	r2,0(r3)
   105fc:	1000031e 	bne	r2,zero,1060c <__multiply+0x1bc>
   10600:	843fffc4 	addi	r16,r16,-1
   10604:	18ffff04 	addi	r3,r3,-4
   10608:	803ffb1e 	bne	r16,zero,105f8 <__multiply+0x1a8>
   1060c:	a805883a 	mov	r2,r21
   10610:	ac000415 	stw	r16,16(r21)
   10614:	dfc00617 	ldw	ra,24(sp)
   10618:	dd400517 	ldw	r21,20(sp)
   1061c:	dd000417 	ldw	r20,16(sp)
   10620:	dcc00317 	ldw	r19,12(sp)
   10624:	dc800217 	ldw	r18,8(sp)
   10628:	dc400117 	ldw	r17,4(sp)
   1062c:	dc000017 	ldw	r16,0(sp)
   10630:	dec00704 	addi	sp,sp,28
   10634:	f800283a 	ret

00010638 <__i2b>:
   10638:	defffd04 	addi	sp,sp,-12
   1063c:	dc000015 	stw	r16,0(sp)
   10640:	04000044 	movi	r16,1
   10644:	dc800115 	stw	r18,4(sp)
   10648:	2825883a 	mov	r18,r5
   1064c:	800b883a 	mov	r5,r16
   10650:	dfc00215 	stw	ra,8(sp)
   10654:	000ff400 	call	ff40 <_Balloc>
   10658:	14000415 	stw	r16,16(r2)
   1065c:	14800515 	stw	r18,20(r2)
   10660:	dfc00217 	ldw	ra,8(sp)
   10664:	dc800117 	ldw	r18,4(sp)
   10668:	dc000017 	ldw	r16,0(sp)
   1066c:	dec00304 	addi	sp,sp,12
   10670:	f800283a 	ret

00010674 <__multadd>:
   10674:	defffa04 	addi	sp,sp,-24
   10678:	dc800215 	stw	r18,8(sp)
   1067c:	2c800417 	ldw	r18,16(r5)
   10680:	dd000415 	stw	r20,16(sp)
   10684:	dcc00315 	stw	r19,12(sp)
   10688:	dc000015 	stw	r16,0(sp)
   1068c:	dfc00515 	stw	ra,20(sp)
   10690:	3821883a 	mov	r16,r7
   10694:	dc400115 	stw	r17,4(sp)
   10698:	2827883a 	mov	r19,r5
   1069c:	2029883a 	mov	r20,r4
   106a0:	2a000504 	addi	r8,r5,20
   106a4:	000f883a 	mov	r7,zero
   106a8:	40800017 	ldw	r2,0(r8)
   106ac:	39c00044 	addi	r7,r7,1
   106b0:	10ffffcc 	andi	r3,r2,65535
   106b4:	1987383a 	mul	r3,r3,r6
   106b8:	1004d43a 	srli	r2,r2,16
   106bc:	1c07883a 	add	r3,r3,r16
   106c0:	180ad43a 	srli	r5,r3,16
   106c4:	1185383a 	mul	r2,r2,r6
   106c8:	18ffffcc 	andi	r3,r3,65535
   106cc:	1145883a 	add	r2,r2,r5
   106d0:	1008943a 	slli	r4,r2,16
   106d4:	1020d43a 	srli	r16,r2,16
   106d8:	20c9883a 	add	r4,r4,r3
   106dc:	41000015 	stw	r4,0(r8)
   106e0:	42000104 	addi	r8,r8,4
   106e4:	3cbff016 	blt	r7,r18,106a8 <__multadd+0x34>
   106e8:	80000826 	beq	r16,zero,1070c <__multadd+0x98>
   106ec:	98800217 	ldw	r2,8(r19)
   106f0:	90800f0e 	bge	r18,r2,10730 <__multadd+0xbc>
   106f4:	9485883a 	add	r2,r18,r18
   106f8:	1085883a 	add	r2,r2,r2
   106fc:	14c5883a 	add	r2,r2,r19
   10700:	90c00044 	addi	r3,r18,1
   10704:	14000515 	stw	r16,20(r2)
   10708:	98c00415 	stw	r3,16(r19)
   1070c:	9805883a 	mov	r2,r19
   10710:	dfc00517 	ldw	ra,20(sp)
   10714:	dd000417 	ldw	r20,16(sp)
   10718:	dcc00317 	ldw	r19,12(sp)
   1071c:	dc800217 	ldw	r18,8(sp)
   10720:	dc400117 	ldw	r17,4(sp)
   10724:	dc000017 	ldw	r16,0(sp)
   10728:	dec00604 	addi	sp,sp,24
   1072c:	f800283a 	ret
   10730:	99400117 	ldw	r5,4(r19)
   10734:	a009883a 	mov	r4,r20
   10738:	29400044 	addi	r5,r5,1
   1073c:	000ff400 	call	ff40 <_Balloc>
   10740:	99800417 	ldw	r6,16(r19)
   10744:	99400304 	addi	r5,r19,12
   10748:	11000304 	addi	r4,r2,12
   1074c:	318d883a 	add	r6,r6,r6
   10750:	318d883a 	add	r6,r6,r6
   10754:	31800204 	addi	r6,r6,8
   10758:	1023883a 	mov	r17,r2
   1075c:	00080740 	call	8074 <memcpy>
   10760:	980b883a 	mov	r5,r19
   10764:	a009883a 	mov	r4,r20
   10768:	000f9c00 	call	f9c0 <_Bfree>
   1076c:	8827883a 	mov	r19,r17
   10770:	003fe006 	br	106f4 <__multadd+0x80>

00010774 <__pow5mult>:
   10774:	defffa04 	addi	sp,sp,-24
   10778:	308000cc 	andi	r2,r6,3
   1077c:	dd000415 	stw	r20,16(sp)
   10780:	dcc00315 	stw	r19,12(sp)
   10784:	dc000015 	stw	r16,0(sp)
   10788:	dfc00515 	stw	ra,20(sp)
   1078c:	dc800215 	stw	r18,8(sp)
   10790:	dc400115 	stw	r17,4(sp)
   10794:	3021883a 	mov	r16,r6
   10798:	2027883a 	mov	r19,r4
   1079c:	2829883a 	mov	r20,r5
   107a0:	10002b1e 	bne	r2,zero,10850 <__pow5mult+0xdc>
   107a4:	8025d0ba 	srai	r18,r16,2
   107a8:	90001b26 	beq	r18,zero,10818 <__pow5mult+0xa4>
   107ac:	9c001217 	ldw	r16,72(r19)
   107b0:	8000081e 	bne	r16,zero,107d4 <__pow5mult+0x60>
   107b4:	00003006 	br	10878 <__pow5mult+0x104>
   107b8:	800b883a 	mov	r5,r16
   107bc:	800d883a 	mov	r6,r16
   107c0:	9809883a 	mov	r4,r19
   107c4:	90001426 	beq	r18,zero,10818 <__pow5mult+0xa4>
   107c8:	80800017 	ldw	r2,0(r16)
   107cc:	10001b26 	beq	r2,zero,1083c <__pow5mult+0xc8>
   107d0:	1021883a 	mov	r16,r2
   107d4:	9080004c 	andi	r2,r18,1
   107d8:	1005003a 	cmpeq	r2,r2,zero
   107dc:	9025d07a 	srai	r18,r18,1
   107e0:	800d883a 	mov	r6,r16
   107e4:	9809883a 	mov	r4,r19
   107e8:	a00b883a 	mov	r5,r20
   107ec:	103ff21e 	bne	r2,zero,107b8 <__pow5mult+0x44>
   107f0:	00104500 	call	10450 <__multiply>
   107f4:	a00b883a 	mov	r5,r20
   107f8:	9809883a 	mov	r4,r19
   107fc:	1023883a 	mov	r17,r2
   10800:	000f9c00 	call	f9c0 <_Bfree>
   10804:	8829883a 	mov	r20,r17
   10808:	800b883a 	mov	r5,r16
   1080c:	800d883a 	mov	r6,r16
   10810:	9809883a 	mov	r4,r19
   10814:	903fec1e 	bne	r18,zero,107c8 <__pow5mult+0x54>
   10818:	a005883a 	mov	r2,r20
   1081c:	dfc00517 	ldw	ra,20(sp)
   10820:	dd000417 	ldw	r20,16(sp)
   10824:	dcc00317 	ldw	r19,12(sp)
   10828:	dc800217 	ldw	r18,8(sp)
   1082c:	dc400117 	ldw	r17,4(sp)
   10830:	dc000017 	ldw	r16,0(sp)
   10834:	dec00604 	addi	sp,sp,24
   10838:	f800283a 	ret
   1083c:	00104500 	call	10450 <__multiply>
   10840:	80800015 	stw	r2,0(r16)
   10844:	1021883a 	mov	r16,r2
   10848:	10000015 	stw	zero,0(r2)
   1084c:	003fe106 	br	107d4 <__pow5mult+0x60>
   10850:	1085883a 	add	r2,r2,r2
   10854:	00c20034 	movhi	r3,2048
   10858:	18c1ba04 	addi	r3,r3,1768
   1085c:	1085883a 	add	r2,r2,r2
   10860:	10c5883a 	add	r2,r2,r3
   10864:	11bfff17 	ldw	r6,-4(r2)
   10868:	000f883a 	mov	r7,zero
   1086c:	00106740 	call	10674 <__multadd>
   10870:	1029883a 	mov	r20,r2
   10874:	003fcb06 	br	107a4 <__pow5mult+0x30>
   10878:	9809883a 	mov	r4,r19
   1087c:	01409c44 	movi	r5,625
   10880:	00106380 	call	10638 <__i2b>
   10884:	98801215 	stw	r2,72(r19)
   10888:	1021883a 	mov	r16,r2
   1088c:	10000015 	stw	zero,0(r2)
   10890:	003fd006 	br	107d4 <__pow5mult+0x60>

00010894 <__s2b>:
   10894:	defff904 	addi	sp,sp,-28
   10898:	dcc00315 	stw	r19,12(sp)
   1089c:	dc800215 	stw	r18,8(sp)
   108a0:	2827883a 	mov	r19,r5
   108a4:	2025883a 	mov	r18,r4
   108a8:	01400244 	movi	r5,9
   108ac:	39000204 	addi	r4,r7,8
   108b0:	dd000415 	stw	r20,16(sp)
   108b4:	dc400115 	stw	r17,4(sp)
   108b8:	dfc00615 	stw	ra,24(sp)
   108bc:	dd400515 	stw	r21,20(sp)
   108c0:	dc000015 	stw	r16,0(sp)
   108c4:	3829883a 	mov	r20,r7
   108c8:	3023883a 	mov	r17,r6
   108cc:	0012c100 	call	12c10 <__divsi3>
   108d0:	00c00044 	movi	r3,1
   108d4:	1880350e 	bge	r3,r2,109ac <__s2b+0x118>
   108d8:	000b883a 	mov	r5,zero
   108dc:	18c7883a 	add	r3,r3,r3
   108e0:	29400044 	addi	r5,r5,1
   108e4:	18bffd16 	blt	r3,r2,108dc <__s2b+0x48>
   108e8:	9009883a 	mov	r4,r18
   108ec:	000ff400 	call	ff40 <_Balloc>
   108f0:	1011883a 	mov	r8,r2
   108f4:	d8800717 	ldw	r2,28(sp)
   108f8:	00c00044 	movi	r3,1
   108fc:	01800244 	movi	r6,9
   10900:	40800515 	stw	r2,20(r8)
   10904:	40c00415 	stw	r3,16(r8)
   10908:	3440260e 	bge	r6,r17,109a4 <__s2b+0x110>
   1090c:	3021883a 	mov	r16,r6
   10910:	99ab883a 	add	r21,r19,r6
   10914:	9c05883a 	add	r2,r19,r16
   10918:	11c00007 	ldb	r7,0(r2)
   1091c:	400b883a 	mov	r5,r8
   10920:	9009883a 	mov	r4,r18
   10924:	39fff404 	addi	r7,r7,-48
   10928:	01800284 	movi	r6,10
   1092c:	00106740 	call	10674 <__multadd>
   10930:	84000044 	addi	r16,r16,1
   10934:	1011883a 	mov	r8,r2
   10938:	8c3ff61e 	bne	r17,r16,10914 <__s2b+0x80>
   1093c:	ac45883a 	add	r2,r21,r17
   10940:	117ffe04 	addi	r5,r2,-8
   10944:	880d883a 	mov	r6,r17
   10948:	35000c0e 	bge	r6,r20,1097c <__s2b+0xe8>
   1094c:	a185c83a 	sub	r2,r20,r6
   10950:	2821883a 	mov	r16,r5
   10954:	28a3883a 	add	r17,r5,r2
   10958:	81c00007 	ldb	r7,0(r16)
   1095c:	400b883a 	mov	r5,r8
   10960:	9009883a 	mov	r4,r18
   10964:	39fff404 	addi	r7,r7,-48
   10968:	01800284 	movi	r6,10
   1096c:	00106740 	call	10674 <__multadd>
   10970:	84000044 	addi	r16,r16,1
   10974:	1011883a 	mov	r8,r2
   10978:	847ff71e 	bne	r16,r17,10958 <__s2b+0xc4>
   1097c:	4005883a 	mov	r2,r8
   10980:	dfc00617 	ldw	ra,24(sp)
   10984:	dd400517 	ldw	r21,20(sp)
   10988:	dd000417 	ldw	r20,16(sp)
   1098c:	dcc00317 	ldw	r19,12(sp)
   10990:	dc800217 	ldw	r18,8(sp)
   10994:	dc400117 	ldw	r17,4(sp)
   10998:	dc000017 	ldw	r16,0(sp)
   1099c:	dec00704 	addi	sp,sp,28
   109a0:	f800283a 	ret
   109a4:	99400284 	addi	r5,r19,10
   109a8:	003fe706 	br	10948 <__s2b+0xb4>
   109ac:	000b883a 	mov	r5,zero
   109b0:	003fcd06 	br	108e8 <__s2b+0x54>

000109b4 <putc>:
   109b4:	defffc04 	addi	sp,sp,-16
   109b8:	dc800215 	stw	r18,8(sp)
   109bc:	04820034 	movhi	r18,2048
   109c0:	948a1f04 	addi	r18,r18,10364
   109c4:	90c00017 	ldw	r3,0(r18)
   109c8:	dc400115 	stw	r17,4(sp)
   109cc:	dc000015 	stw	r16,0(sp)
   109d0:	dfc00315 	stw	ra,12(sp)
   109d4:	2023883a 	mov	r17,r4
   109d8:	2821883a 	mov	r16,r5
   109dc:	18000226 	beq	r3,zero,109e8 <putc+0x34>
   109e0:	18800e17 	ldw	r2,56(r3)
   109e4:	10001126 	beq	r2,zero,10a2c <putc+0x78>
   109e8:	80800217 	ldw	r2,8(r16)
   109ec:	10ffffc4 	addi	r3,r2,-1
   109f0:	80c00215 	stw	r3,8(r16)
   109f4:	18001316 	blt	r3,zero,10a44 <putc+0x90>
   109f8:	80800017 	ldw	r2,0(r16)
   109fc:	14400005 	stb	r17,0(r2)
   10a00:	80c00017 	ldw	r3,0(r16)
   10a04:	18800044 	addi	r2,r3,1
   10a08:	18c00003 	ldbu	r3,0(r3)
   10a0c:	80800015 	stw	r2,0(r16)
   10a10:	1805883a 	mov	r2,r3
   10a14:	dfc00317 	ldw	ra,12(sp)
   10a18:	dc800217 	ldw	r18,8(sp)
   10a1c:	dc400117 	ldw	r17,4(sp)
   10a20:	dc000017 	ldw	r16,0(sp)
   10a24:	dec00404 	addi	sp,sp,16
   10a28:	f800283a 	ret
   10a2c:	1809883a 	mov	r4,r3
   10a30:	000d6280 	call	d628 <__sinit>
   10a34:	80800217 	ldw	r2,8(r16)
   10a38:	10ffffc4 	addi	r3,r2,-1
   10a3c:	80c00215 	stw	r3,8(r16)
   10a40:	183fed0e 	bge	r3,zero,109f8 <putc+0x44>
   10a44:	80800617 	ldw	r2,24(r16)
   10a48:	18800f16 	blt	r3,r2,10a88 <putc+0xd4>
   10a4c:	80800017 	ldw	r2,0(r16)
   10a50:	14400005 	stb	r17,0(r2)
   10a54:	81000017 	ldw	r4,0(r16)
   10a58:	00800284 	movi	r2,10
   10a5c:	20c00003 	ldbu	r3,0(r4)
   10a60:	18801226 	beq	r3,r2,10aac <putc+0xf8>
   10a64:	20800044 	addi	r2,r4,1
   10a68:	80800015 	stw	r2,0(r16)
   10a6c:	1805883a 	mov	r2,r3
   10a70:	dfc00317 	ldw	ra,12(sp)
   10a74:	dc800217 	ldw	r18,8(sp)
   10a78:	dc400117 	ldw	r17,4(sp)
   10a7c:	dc000017 	ldw	r16,0(sp)
   10a80:	dec00404 	addi	sp,sp,16
   10a84:	f800283a 	ret
   10a88:	91000017 	ldw	r4,0(r18)
   10a8c:	880b883a 	mov	r5,r17
   10a90:	800d883a 	mov	r6,r16
   10a94:	dfc00317 	ldw	ra,12(sp)
   10a98:	dc800217 	ldw	r18,8(sp)
   10a9c:	dc400117 	ldw	r17,4(sp)
   10aa0:	dc000017 	ldw	r16,0(sp)
   10aa4:	dec00404 	addi	sp,sp,16
   10aa8:	001147c1 	jmpi	1147c <__swbuf_r>
   10aac:	91000017 	ldw	r4,0(r18)
   10ab0:	180b883a 	mov	r5,r3
   10ab4:	003ff606 	br	10a90 <putc+0xdc>

00010ab8 <_putc_r>:
   10ab8:	defffc04 	addi	sp,sp,-16
   10abc:	dc400215 	stw	r17,8(sp)
   10ac0:	dc000115 	stw	r16,4(sp)
   10ac4:	dfc00315 	stw	ra,12(sp)
   10ac8:	2021883a 	mov	r16,r4
   10acc:	2823883a 	mov	r17,r5
   10ad0:	20000226 	beq	r4,zero,10adc <_putc_r+0x24>
   10ad4:	20800e17 	ldw	r2,56(r4)
   10ad8:	10001026 	beq	r2,zero,10b1c <_putc_r+0x64>
   10adc:	30800217 	ldw	r2,8(r6)
   10ae0:	10ffffc4 	addi	r3,r2,-1
   10ae4:	30c00215 	stw	r3,8(r6)
   10ae8:	18001316 	blt	r3,zero,10b38 <_putc_r+0x80>
   10aec:	30800017 	ldw	r2,0(r6)
   10af0:	14400005 	stb	r17,0(r2)
   10af4:	30c00017 	ldw	r3,0(r6)
   10af8:	18800044 	addi	r2,r3,1
   10afc:	18c00003 	ldbu	r3,0(r3)
   10b00:	30800015 	stw	r2,0(r6)
   10b04:	1805883a 	mov	r2,r3
   10b08:	dfc00317 	ldw	ra,12(sp)
   10b0c:	dc400217 	ldw	r17,8(sp)
   10b10:	dc000117 	ldw	r16,4(sp)
   10b14:	dec00404 	addi	sp,sp,16
   10b18:	f800283a 	ret
   10b1c:	d9800015 	stw	r6,0(sp)
   10b20:	000d6280 	call	d628 <__sinit>
   10b24:	d9800017 	ldw	r6,0(sp)
   10b28:	30800217 	ldw	r2,8(r6)
   10b2c:	10ffffc4 	addi	r3,r2,-1
   10b30:	30c00215 	stw	r3,8(r6)
   10b34:	183fed0e 	bge	r3,zero,10aec <_putc_r+0x34>
   10b38:	30800617 	ldw	r2,24(r6)
   10b3c:	18800e16 	blt	r3,r2,10b78 <_putc_r+0xc0>
   10b40:	30800017 	ldw	r2,0(r6)
   10b44:	14400005 	stb	r17,0(r2)
   10b48:	31000017 	ldw	r4,0(r6)
   10b4c:	00800284 	movi	r2,10
   10b50:	20c00003 	ldbu	r3,0(r4)
   10b54:	18800f26 	beq	r3,r2,10b94 <_putc_r+0xdc>
   10b58:	20800044 	addi	r2,r4,1
   10b5c:	30800015 	stw	r2,0(r6)
   10b60:	1805883a 	mov	r2,r3
   10b64:	dfc00317 	ldw	ra,12(sp)
   10b68:	dc400217 	ldw	r17,8(sp)
   10b6c:	dc000117 	ldw	r16,4(sp)
   10b70:	dec00404 	addi	sp,sp,16
   10b74:	f800283a 	ret
   10b78:	8009883a 	mov	r4,r16
   10b7c:	880b883a 	mov	r5,r17
   10b80:	dfc00317 	ldw	ra,12(sp)
   10b84:	dc400217 	ldw	r17,8(sp)
   10b88:	dc000117 	ldw	r16,4(sp)
   10b8c:	dec00404 	addi	sp,sp,16
   10b90:	001147c1 	jmpi	1147c <__swbuf_r>
   10b94:	8009883a 	mov	r4,r16
   10b98:	180b883a 	mov	r5,r3
   10b9c:	003ff806 	br	10b80 <_putc_r+0xc8>

00010ba0 <_realloc_r>:
   10ba0:	defff404 	addi	sp,sp,-48
   10ba4:	dd800815 	stw	r22,32(sp)
   10ba8:	dc800415 	stw	r18,16(sp)
   10bac:	dc400315 	stw	r17,12(sp)
   10bb0:	dfc00b15 	stw	ra,44(sp)
   10bb4:	df000a15 	stw	fp,40(sp)
   10bb8:	ddc00915 	stw	r23,36(sp)
   10bbc:	dd400715 	stw	r21,28(sp)
   10bc0:	dd000615 	stw	r20,24(sp)
   10bc4:	dcc00515 	stw	r19,20(sp)
   10bc8:	dc000215 	stw	r16,8(sp)
   10bcc:	2825883a 	mov	r18,r5
   10bd0:	3023883a 	mov	r17,r6
   10bd4:	202d883a 	mov	r22,r4
   10bd8:	2800c926 	beq	r5,zero,10f00 <_realloc_r+0x360>
   10bdc:	00135740 	call	13574 <__malloc_lock>
   10be0:	943ffe04 	addi	r16,r18,-8
   10be4:	88c002c4 	addi	r3,r17,11
   10be8:	00800584 	movi	r2,22
   10bec:	82000117 	ldw	r8,4(r16)
   10bf0:	10c01b2e 	bgeu	r2,r3,10c60 <_realloc_r+0xc0>
   10bf4:	00bffe04 	movi	r2,-8
   10bf8:	188e703a 	and	r7,r3,r2
   10bfc:	3839883a 	mov	fp,r7
   10c00:	38001a16 	blt	r7,zero,10c6c <_realloc_r+0xcc>
   10c04:	e4401936 	bltu	fp,r17,10c6c <_realloc_r+0xcc>
   10c08:	013fff04 	movi	r4,-4
   10c0c:	4126703a 	and	r19,r8,r4
   10c10:	99c02616 	blt	r19,r7,10cac <_realloc_r+0x10c>
   10c14:	802b883a 	mov	r21,r16
   10c18:	9829883a 	mov	r20,r19
   10c1c:	84000204 	addi	r16,r16,8
   10c20:	a80f883a 	mov	r7,r21
   10c24:	a70dc83a 	sub	r6,r20,fp
   10c28:	008003c4 	movi	r2,15
   10c2c:	1180c136 	bltu	r2,r6,10f34 <_realloc_r+0x394>
   10c30:	38800117 	ldw	r2,4(r7)
   10c34:	a549883a 	add	r4,r20,r21
   10c38:	1080004c 	andi	r2,r2,1
   10c3c:	a084b03a 	or	r2,r20,r2
   10c40:	38800115 	stw	r2,4(r7)
   10c44:	20c00117 	ldw	r3,4(r4)
   10c48:	18c00054 	ori	r3,r3,1
   10c4c:	20c00115 	stw	r3,4(r4)
   10c50:	b009883a 	mov	r4,r22
   10c54:	00135940 	call	13594 <__malloc_unlock>
   10c58:	8023883a 	mov	r17,r16
   10c5c:	00000606 	br	10c78 <_realloc_r+0xd8>
   10c60:	01c00404 	movi	r7,16
   10c64:	3839883a 	mov	fp,r7
   10c68:	e47fe72e 	bgeu	fp,r17,10c08 <_realloc_r+0x68>
   10c6c:	00800304 	movi	r2,12
   10c70:	0023883a 	mov	r17,zero
   10c74:	b0800015 	stw	r2,0(r22)
   10c78:	8805883a 	mov	r2,r17
   10c7c:	dfc00b17 	ldw	ra,44(sp)
   10c80:	df000a17 	ldw	fp,40(sp)
   10c84:	ddc00917 	ldw	r23,36(sp)
   10c88:	dd800817 	ldw	r22,32(sp)
   10c8c:	dd400717 	ldw	r21,28(sp)
   10c90:	dd000617 	ldw	r20,24(sp)
   10c94:	dcc00517 	ldw	r19,20(sp)
   10c98:	dc800417 	ldw	r18,16(sp)
   10c9c:	dc400317 	ldw	r17,12(sp)
   10ca0:	dc000217 	ldw	r16,8(sp)
   10ca4:	dec00c04 	addi	sp,sp,48
   10ca8:	f800283a 	ret
   10cac:	00820034 	movhi	r2,2048
   10cb0:	1083ab04 	addi	r2,r2,3756
   10cb4:	12400217 	ldw	r9,8(r2)
   10cb8:	84cd883a 	add	r6,r16,r19
   10cbc:	802b883a 	mov	r21,r16
   10cc0:	3240b926 	beq	r6,r9,10fa8 <_realloc_r+0x408>
   10cc4:	31400117 	ldw	r5,4(r6)
   10cc8:	00bfff84 	movi	r2,-2
   10ccc:	2884703a 	and	r2,r5,r2
   10cd0:	1185883a 	add	r2,r2,r6
   10cd4:	10c00117 	ldw	r3,4(r2)
   10cd8:	18c0004c 	andi	r3,r3,1
   10cdc:	1807003a 	cmpeq	r3,r3,zero
   10ce0:	1800a326 	beq	r3,zero,10f70 <_realloc_r+0x3d0>
   10ce4:	2908703a 	and	r4,r5,r4
   10ce8:	9929883a 	add	r20,r19,r4
   10cec:	a1c0a30e 	bge	r20,r7,10f7c <_realloc_r+0x3dc>
   10cf0:	4080004c 	andi	r2,r8,1
   10cf4:	1000551e 	bne	r2,zero,10e4c <_realloc_r+0x2ac>
   10cf8:	80800017 	ldw	r2,0(r16)
   10cfc:	80afc83a 	sub	r23,r16,r2
   10d00:	b8c00117 	ldw	r3,4(r23)
   10d04:	00bfff04 	movi	r2,-4
   10d08:	1884703a 	and	r2,r3,r2
   10d0c:	30002e26 	beq	r6,zero,10dc8 <_realloc_r+0x228>
   10d10:	3240b926 	beq	r6,r9,10ff8 <_realloc_r+0x458>
   10d14:	98a9883a 	add	r20,r19,r2
   10d18:	2509883a 	add	r4,r4,r20
   10d1c:	d9000015 	stw	r4,0(sp)
   10d20:	21c02a16 	blt	r4,r7,10dcc <_realloc_r+0x22c>
   10d24:	30800317 	ldw	r2,12(r6)
   10d28:	30c00217 	ldw	r3,8(r6)
   10d2c:	01400904 	movi	r5,36
   10d30:	99bfff04 	addi	r6,r19,-4
   10d34:	18800315 	stw	r2,12(r3)
   10d38:	10c00215 	stw	r3,8(r2)
   10d3c:	b9000317 	ldw	r4,12(r23)
   10d40:	b8800217 	ldw	r2,8(r23)
   10d44:	b82b883a 	mov	r21,r23
   10d48:	bc000204 	addi	r16,r23,8
   10d4c:	20800215 	stw	r2,8(r4)
   10d50:	11000315 	stw	r4,12(r2)
   10d54:	2980e436 	bltu	r5,r6,110e8 <_realloc_r+0x548>
   10d58:	008004c4 	movi	r2,19
   10d5c:	9009883a 	mov	r4,r18
   10d60:	8011883a 	mov	r8,r16
   10d64:	11800f2e 	bgeu	r2,r6,10da4 <_realloc_r+0x204>
   10d68:	90800017 	ldw	r2,0(r18)
   10d6c:	ba000404 	addi	r8,r23,16
   10d70:	91000204 	addi	r4,r18,8
   10d74:	b8800215 	stw	r2,8(r23)
   10d78:	90c00117 	ldw	r3,4(r18)
   10d7c:	008006c4 	movi	r2,27
   10d80:	b8c00315 	stw	r3,12(r23)
   10d84:	1180072e 	bgeu	r2,r6,10da4 <_realloc_r+0x204>
   10d88:	90c00217 	ldw	r3,8(r18)
   10d8c:	ba000604 	addi	r8,r23,24
   10d90:	91000404 	addi	r4,r18,16
   10d94:	b8c00415 	stw	r3,16(r23)
   10d98:	90800317 	ldw	r2,12(r18)
   10d9c:	b8800515 	stw	r2,20(r23)
   10da0:	3140e726 	beq	r6,r5,11140 <_realloc_r+0x5a0>
   10da4:	20800017 	ldw	r2,0(r4)
   10da8:	dd000017 	ldw	r20,0(sp)
   10dac:	b80f883a 	mov	r7,r23
   10db0:	40800015 	stw	r2,0(r8)
   10db4:	20c00117 	ldw	r3,4(r4)
   10db8:	40c00115 	stw	r3,4(r8)
   10dbc:	20800217 	ldw	r2,8(r4)
   10dc0:	40800215 	stw	r2,8(r8)
   10dc4:	003f9706 	br	10c24 <_realloc_r+0x84>
   10dc8:	98a9883a 	add	r20,r19,r2
   10dcc:	a1c01f16 	blt	r20,r7,10e4c <_realloc_r+0x2ac>
   10dd0:	b8c00317 	ldw	r3,12(r23)
   10dd4:	b8800217 	ldw	r2,8(r23)
   10dd8:	99bfff04 	addi	r6,r19,-4
   10ddc:	01400904 	movi	r5,36
   10de0:	b82b883a 	mov	r21,r23
   10de4:	18800215 	stw	r2,8(r3)
   10de8:	10c00315 	stw	r3,12(r2)
   10dec:	bc000204 	addi	r16,r23,8
   10df0:	2980c336 	bltu	r5,r6,11100 <_realloc_r+0x560>
   10df4:	008004c4 	movi	r2,19
   10df8:	9009883a 	mov	r4,r18
   10dfc:	8011883a 	mov	r8,r16
   10e00:	11800f2e 	bgeu	r2,r6,10e40 <_realloc_r+0x2a0>
   10e04:	90800017 	ldw	r2,0(r18)
   10e08:	ba000404 	addi	r8,r23,16
   10e0c:	91000204 	addi	r4,r18,8
   10e10:	b8800215 	stw	r2,8(r23)
   10e14:	90c00117 	ldw	r3,4(r18)
   10e18:	008006c4 	movi	r2,27
   10e1c:	b8c00315 	stw	r3,12(r23)
   10e20:	1180072e 	bgeu	r2,r6,10e40 <_realloc_r+0x2a0>
   10e24:	90c00217 	ldw	r3,8(r18)
   10e28:	ba000604 	addi	r8,r23,24
   10e2c:	91000404 	addi	r4,r18,16
   10e30:	b8c00415 	stw	r3,16(r23)
   10e34:	90800317 	ldw	r2,12(r18)
   10e38:	b8800515 	stw	r2,20(r23)
   10e3c:	3140c726 	beq	r6,r5,1115c <_realloc_r+0x5bc>
   10e40:	20800017 	ldw	r2,0(r4)
   10e44:	b80f883a 	mov	r7,r23
   10e48:	003fd906 	br	10db0 <_realloc_r+0x210>
   10e4c:	880b883a 	mov	r5,r17
   10e50:	b009883a 	mov	r4,r22
   10e54:	000f0bc0 	call	f0bc <_malloc_r>
   10e58:	1023883a 	mov	r17,r2
   10e5c:	10002526 	beq	r2,zero,10ef4 <_realloc_r+0x354>
   10e60:	80800117 	ldw	r2,4(r16)
   10e64:	00ffff84 	movi	r3,-2
   10e68:	893ffe04 	addi	r4,r17,-8
   10e6c:	10c4703a 	and	r2,r2,r3
   10e70:	8085883a 	add	r2,r16,r2
   10e74:	20809526 	beq	r4,r2,110cc <_realloc_r+0x52c>
   10e78:	99bfff04 	addi	r6,r19,-4
   10e7c:	01c00904 	movi	r7,36
   10e80:	39804536 	bltu	r7,r6,10f98 <_realloc_r+0x3f8>
   10e84:	008004c4 	movi	r2,19
   10e88:	9009883a 	mov	r4,r18
   10e8c:	880b883a 	mov	r5,r17
   10e90:	11800f2e 	bgeu	r2,r6,10ed0 <_realloc_r+0x330>
   10e94:	90800017 	ldw	r2,0(r18)
   10e98:	89400204 	addi	r5,r17,8
   10e9c:	91000204 	addi	r4,r18,8
   10ea0:	88800015 	stw	r2,0(r17)
   10ea4:	90c00117 	ldw	r3,4(r18)
   10ea8:	008006c4 	movi	r2,27
   10eac:	88c00115 	stw	r3,4(r17)
   10eb0:	1180072e 	bgeu	r2,r6,10ed0 <_realloc_r+0x330>
   10eb4:	90c00217 	ldw	r3,8(r18)
   10eb8:	89400404 	addi	r5,r17,16
   10ebc:	91000404 	addi	r4,r18,16
   10ec0:	88c00215 	stw	r3,8(r17)
   10ec4:	90800317 	ldw	r2,12(r18)
   10ec8:	88800315 	stw	r2,12(r17)
   10ecc:	31c09126 	beq	r6,r7,11114 <_realloc_r+0x574>
   10ed0:	20800017 	ldw	r2,0(r4)
   10ed4:	28800015 	stw	r2,0(r5)
   10ed8:	20c00117 	ldw	r3,4(r4)
   10edc:	28c00115 	stw	r3,4(r5)
   10ee0:	20800217 	ldw	r2,8(r4)
   10ee4:	28800215 	stw	r2,8(r5)
   10ee8:	900b883a 	mov	r5,r18
   10eec:	b009883a 	mov	r4,r22
   10ef0:	000d9ac0 	call	d9ac <_free_r>
   10ef4:	b009883a 	mov	r4,r22
   10ef8:	00135940 	call	13594 <__malloc_unlock>
   10efc:	003f5e06 	br	10c78 <_realloc_r+0xd8>
   10f00:	300b883a 	mov	r5,r6
   10f04:	dfc00b17 	ldw	ra,44(sp)
   10f08:	df000a17 	ldw	fp,40(sp)
   10f0c:	ddc00917 	ldw	r23,36(sp)
   10f10:	dd800817 	ldw	r22,32(sp)
   10f14:	dd400717 	ldw	r21,28(sp)
   10f18:	dd000617 	ldw	r20,24(sp)
   10f1c:	dcc00517 	ldw	r19,20(sp)
   10f20:	dc800417 	ldw	r18,16(sp)
   10f24:	dc400317 	ldw	r17,12(sp)
   10f28:	dc000217 	ldw	r16,8(sp)
   10f2c:	dec00c04 	addi	sp,sp,48
   10f30:	000f0bc1 	jmpi	f0bc <_malloc_r>
   10f34:	38800117 	ldw	r2,4(r7)
   10f38:	e54b883a 	add	r5,fp,r21
   10f3c:	31000054 	ori	r4,r6,1
   10f40:	1080004c 	andi	r2,r2,1
   10f44:	1704b03a 	or	r2,r2,fp
   10f48:	38800115 	stw	r2,4(r7)
   10f4c:	29000115 	stw	r4,4(r5)
   10f50:	2987883a 	add	r3,r5,r6
   10f54:	18800117 	ldw	r2,4(r3)
   10f58:	29400204 	addi	r5,r5,8
   10f5c:	b009883a 	mov	r4,r22
   10f60:	10800054 	ori	r2,r2,1
   10f64:	18800115 	stw	r2,4(r3)
   10f68:	000d9ac0 	call	d9ac <_free_r>
   10f6c:	003f3806 	br	10c50 <_realloc_r+0xb0>
   10f70:	000d883a 	mov	r6,zero
   10f74:	0009883a 	mov	r4,zero
   10f78:	003f5d06 	br	10cf0 <_realloc_r+0x150>
   10f7c:	30c00217 	ldw	r3,8(r6)
   10f80:	30800317 	ldw	r2,12(r6)
   10f84:	800f883a 	mov	r7,r16
   10f88:	84000204 	addi	r16,r16,8
   10f8c:	10c00215 	stw	r3,8(r2)
   10f90:	18800315 	stw	r2,12(r3)
   10f94:	003f2306 	br	10c24 <_realloc_r+0x84>
   10f98:	8809883a 	mov	r4,r17
   10f9c:	900b883a 	mov	r5,r18
   10fa0:	000f8e00 	call	f8e0 <memmove>
   10fa4:	003fd006 	br	10ee8 <_realloc_r+0x348>
   10fa8:	30800117 	ldw	r2,4(r6)
   10fac:	e0c00404 	addi	r3,fp,16
   10fb0:	1108703a 	and	r4,r2,r4
   10fb4:	9905883a 	add	r2,r19,r4
   10fb8:	10ff4d16 	blt	r2,r3,10cf0 <_realloc_r+0x150>
   10fbc:	1705c83a 	sub	r2,r2,fp
   10fc0:	870b883a 	add	r5,r16,fp
   10fc4:	10800054 	ori	r2,r2,1
   10fc8:	28800115 	stw	r2,4(r5)
   10fcc:	80c00117 	ldw	r3,4(r16)
   10fd0:	00820034 	movhi	r2,2048
   10fd4:	1083ab04 	addi	r2,r2,3756
   10fd8:	b009883a 	mov	r4,r22
   10fdc:	18c0004c 	andi	r3,r3,1
   10fe0:	e0c6b03a 	or	r3,fp,r3
   10fe4:	11400215 	stw	r5,8(r2)
   10fe8:	80c00115 	stw	r3,4(r16)
   10fec:	00135940 	call	13594 <__malloc_unlock>
   10ff0:	84400204 	addi	r17,r16,8
   10ff4:	003f2006 	br	10c78 <_realloc_r+0xd8>
   10ff8:	98a9883a 	add	r20,r19,r2
   10ffc:	2509883a 	add	r4,r4,r20
   11000:	e0800404 	addi	r2,fp,16
   11004:	d9000115 	stw	r4,4(sp)
   11008:	20bf7016 	blt	r4,r2,10dcc <_realloc_r+0x22c>
   1100c:	b8c00317 	ldw	r3,12(r23)
   11010:	b8800217 	ldw	r2,8(r23)
   11014:	99bfff04 	addi	r6,r19,-4
   11018:	01400904 	movi	r5,36
   1101c:	18800215 	stw	r2,8(r3)
   11020:	10c00315 	stw	r3,12(r2)
   11024:	bc400204 	addi	r17,r23,8
   11028:	29804136 	bltu	r5,r6,11130 <_realloc_r+0x590>
   1102c:	008004c4 	movi	r2,19
   11030:	9009883a 	mov	r4,r18
   11034:	880f883a 	mov	r7,r17
   11038:	11800f2e 	bgeu	r2,r6,11078 <_realloc_r+0x4d8>
   1103c:	90800017 	ldw	r2,0(r18)
   11040:	b9c00404 	addi	r7,r23,16
   11044:	91000204 	addi	r4,r18,8
   11048:	b8800215 	stw	r2,8(r23)
   1104c:	90c00117 	ldw	r3,4(r18)
   11050:	008006c4 	movi	r2,27
   11054:	b8c00315 	stw	r3,12(r23)
   11058:	1180072e 	bgeu	r2,r6,11078 <_realloc_r+0x4d8>
   1105c:	90c00217 	ldw	r3,8(r18)
   11060:	b9c00604 	addi	r7,r23,24
   11064:	91000404 	addi	r4,r18,16
   11068:	b8c00415 	stw	r3,16(r23)
   1106c:	90800317 	ldw	r2,12(r18)
   11070:	b8800515 	stw	r2,20(r23)
   11074:	31404026 	beq	r6,r5,11178 <_realloc_r+0x5d8>
   11078:	20800017 	ldw	r2,0(r4)
   1107c:	38800015 	stw	r2,0(r7)
   11080:	20c00117 	ldw	r3,4(r4)
   11084:	38c00115 	stw	r3,4(r7)
   11088:	20800217 	ldw	r2,8(r4)
   1108c:	38800215 	stw	r2,8(r7)
   11090:	d8c00117 	ldw	r3,4(sp)
   11094:	bf0b883a 	add	r5,r23,fp
   11098:	b009883a 	mov	r4,r22
   1109c:	1f05c83a 	sub	r2,r3,fp
   110a0:	10800054 	ori	r2,r2,1
   110a4:	28800115 	stw	r2,4(r5)
   110a8:	b8c00117 	ldw	r3,4(r23)
   110ac:	00820034 	movhi	r2,2048
   110b0:	1083ab04 	addi	r2,r2,3756
   110b4:	11400215 	stw	r5,8(r2)
   110b8:	18c0004c 	andi	r3,r3,1
   110bc:	e0c6b03a 	or	r3,fp,r3
   110c0:	b8c00115 	stw	r3,4(r23)
   110c4:	00135940 	call	13594 <__malloc_unlock>
   110c8:	003eeb06 	br	10c78 <_realloc_r+0xd8>
   110cc:	20800117 	ldw	r2,4(r4)
   110d0:	00ffff04 	movi	r3,-4
   110d4:	800f883a 	mov	r7,r16
   110d8:	10c4703a 	and	r2,r2,r3
   110dc:	98a9883a 	add	r20,r19,r2
   110e0:	84000204 	addi	r16,r16,8
   110e4:	003ecf06 	br	10c24 <_realloc_r+0x84>
   110e8:	900b883a 	mov	r5,r18
   110ec:	8009883a 	mov	r4,r16
   110f0:	000f8e00 	call	f8e0 <memmove>
   110f4:	dd000017 	ldw	r20,0(sp)
   110f8:	b80f883a 	mov	r7,r23
   110fc:	003ec906 	br	10c24 <_realloc_r+0x84>
   11100:	900b883a 	mov	r5,r18
   11104:	8009883a 	mov	r4,r16
   11108:	000f8e00 	call	f8e0 <memmove>
   1110c:	b80f883a 	mov	r7,r23
   11110:	003ec406 	br	10c24 <_realloc_r+0x84>
   11114:	90c00417 	ldw	r3,16(r18)
   11118:	89400604 	addi	r5,r17,24
   1111c:	91000604 	addi	r4,r18,24
   11120:	88c00415 	stw	r3,16(r17)
   11124:	90800517 	ldw	r2,20(r18)
   11128:	88800515 	stw	r2,20(r17)
   1112c:	003f6806 	br	10ed0 <_realloc_r+0x330>
   11130:	900b883a 	mov	r5,r18
   11134:	8809883a 	mov	r4,r17
   11138:	000f8e00 	call	f8e0 <memmove>
   1113c:	003fd406 	br	11090 <_realloc_r+0x4f0>
   11140:	90c00417 	ldw	r3,16(r18)
   11144:	91000604 	addi	r4,r18,24
   11148:	ba000804 	addi	r8,r23,32
   1114c:	b8c00615 	stw	r3,24(r23)
   11150:	90800517 	ldw	r2,20(r18)
   11154:	b8800715 	stw	r2,28(r23)
   11158:	003f1206 	br	10da4 <_realloc_r+0x204>
   1115c:	90c00417 	ldw	r3,16(r18)
   11160:	91000604 	addi	r4,r18,24
   11164:	ba000804 	addi	r8,r23,32
   11168:	b8c00615 	stw	r3,24(r23)
   1116c:	90800517 	ldw	r2,20(r18)
   11170:	b8800715 	stw	r2,28(r23)
   11174:	003f3206 	br	10e40 <_realloc_r+0x2a0>
   11178:	90c00417 	ldw	r3,16(r18)
   1117c:	91000604 	addi	r4,r18,24
   11180:	b9c00804 	addi	r7,r23,32
   11184:	b8c00615 	stw	r3,24(r23)
   11188:	90800517 	ldw	r2,20(r18)
   1118c:	b8800715 	stw	r2,28(r23)
   11190:	003fb906 	br	11078 <_realloc_r+0x4d8>

00011194 <__isinfd>:
   11194:	200d883a 	mov	r6,r4
   11198:	0109c83a 	sub	r4,zero,r4
   1119c:	2188b03a 	or	r4,r4,r6
   111a0:	2008d7fa 	srli	r4,r4,31
   111a4:	00a00034 	movhi	r2,32768
   111a8:	10bfffc4 	addi	r2,r2,-1
   111ac:	1144703a 	and	r2,r2,r5
   111b0:	2088b03a 	or	r4,r4,r2
   111b4:	009ffc34 	movhi	r2,32752
   111b8:	1105c83a 	sub	r2,r2,r4
   111bc:	0087c83a 	sub	r3,zero,r2
   111c0:	10c4b03a 	or	r2,r2,r3
   111c4:	1004d7fa 	srli	r2,r2,31
   111c8:	00c00044 	movi	r3,1
   111cc:	1885c83a 	sub	r2,r3,r2
   111d0:	f800283a 	ret

000111d4 <__isnand>:
   111d4:	200d883a 	mov	r6,r4
   111d8:	0109c83a 	sub	r4,zero,r4
   111dc:	2188b03a 	or	r4,r4,r6
   111e0:	2008d7fa 	srli	r4,r4,31
   111e4:	00a00034 	movhi	r2,32768
   111e8:	10bfffc4 	addi	r2,r2,-1
   111ec:	1144703a 	and	r2,r2,r5
   111f0:	2088b03a 	or	r4,r4,r2
   111f4:	009ffc34 	movhi	r2,32752
   111f8:	1105c83a 	sub	r2,r2,r4
   111fc:	1004d7fa 	srli	r2,r2,31
   11200:	f800283a 	ret

00011204 <_sbrk_r>:
   11204:	defffd04 	addi	sp,sp,-12
   11208:	dc000015 	stw	r16,0(sp)
   1120c:	04020034 	movhi	r16,2048
   11210:	840a6404 	addi	r16,r16,10640
   11214:	dc400115 	stw	r17,4(sp)
   11218:	80000015 	stw	zero,0(r16)
   1121c:	2023883a 	mov	r17,r4
   11220:	2809883a 	mov	r4,r5
   11224:	dfc00215 	stw	ra,8(sp)
   11228:	00137940 	call	13794 <sbrk>
   1122c:	1007883a 	mov	r3,r2
   11230:	00bfffc4 	movi	r2,-1
   11234:	18800626 	beq	r3,r2,11250 <_sbrk_r+0x4c>
   11238:	1805883a 	mov	r2,r3
   1123c:	dfc00217 	ldw	ra,8(sp)
   11240:	dc400117 	ldw	r17,4(sp)
   11244:	dc000017 	ldw	r16,0(sp)
   11248:	dec00304 	addi	sp,sp,12
   1124c:	f800283a 	ret
   11250:	80800017 	ldw	r2,0(r16)
   11254:	103ff826 	beq	r2,zero,11238 <_sbrk_r+0x34>
   11258:	88800015 	stw	r2,0(r17)
   1125c:	1805883a 	mov	r2,r3
   11260:	dfc00217 	ldw	ra,8(sp)
   11264:	dc400117 	ldw	r17,4(sp)
   11268:	dc000017 	ldw	r16,0(sp)
   1126c:	dec00304 	addi	sp,sp,12
   11270:	f800283a 	ret

00011274 <__sclose>:
   11274:	2940038f 	ldh	r5,14(r5)
   11278:	00116f41 	jmpi	116f4 <_close_r>

0001127c <__sseek>:
   1127c:	defffe04 	addi	sp,sp,-8
   11280:	dc000015 	stw	r16,0(sp)
   11284:	2821883a 	mov	r16,r5
   11288:	2940038f 	ldh	r5,14(r5)
   1128c:	dfc00115 	stw	ra,4(sp)
   11290:	001196c0 	call	1196c <_lseek_r>
   11294:	1007883a 	mov	r3,r2
   11298:	00bfffc4 	movi	r2,-1
   1129c:	18800926 	beq	r3,r2,112c4 <__sseek+0x48>
   112a0:	8080030b 	ldhu	r2,12(r16)
   112a4:	80c01415 	stw	r3,80(r16)
   112a8:	10840014 	ori	r2,r2,4096
   112ac:	8080030d 	sth	r2,12(r16)
   112b0:	1805883a 	mov	r2,r3
   112b4:	dfc00117 	ldw	ra,4(sp)
   112b8:	dc000017 	ldw	r16,0(sp)
   112bc:	dec00204 	addi	sp,sp,8
   112c0:	f800283a 	ret
   112c4:	8080030b 	ldhu	r2,12(r16)
   112c8:	10bbffcc 	andi	r2,r2,61439
   112cc:	8080030d 	sth	r2,12(r16)
   112d0:	1805883a 	mov	r2,r3
   112d4:	dfc00117 	ldw	ra,4(sp)
   112d8:	dc000017 	ldw	r16,0(sp)
   112dc:	dec00204 	addi	sp,sp,8
   112e0:	f800283a 	ret

000112e4 <__swrite>:
   112e4:	2880030b 	ldhu	r2,12(r5)
   112e8:	defffb04 	addi	sp,sp,-20
   112ec:	dcc00315 	stw	r19,12(sp)
   112f0:	1080400c 	andi	r2,r2,256
   112f4:	dc800215 	stw	r18,8(sp)
   112f8:	dc400115 	stw	r17,4(sp)
   112fc:	dc000015 	stw	r16,0(sp)
   11300:	3027883a 	mov	r19,r6
   11304:	3825883a 	mov	r18,r7
   11308:	dfc00415 	stw	ra,16(sp)
   1130c:	2821883a 	mov	r16,r5
   11310:	000d883a 	mov	r6,zero
   11314:	01c00084 	movi	r7,2
   11318:	2023883a 	mov	r17,r4
   1131c:	10000226 	beq	r2,zero,11328 <__swrite+0x44>
   11320:	2940038f 	ldh	r5,14(r5)
   11324:	001196c0 	call	1196c <_lseek_r>
   11328:	8080030b 	ldhu	r2,12(r16)
   1132c:	8140038f 	ldh	r5,14(r16)
   11330:	8809883a 	mov	r4,r17
   11334:	10bbffcc 	andi	r2,r2,61439
   11338:	980d883a 	mov	r6,r19
   1133c:	900f883a 	mov	r7,r18
   11340:	8080030d 	sth	r2,12(r16)
   11344:	dfc00417 	ldw	ra,16(sp)
   11348:	dcc00317 	ldw	r19,12(sp)
   1134c:	dc800217 	ldw	r18,8(sp)
   11350:	dc400117 	ldw	r17,4(sp)
   11354:	dc000017 	ldw	r16,0(sp)
   11358:	dec00504 	addi	sp,sp,20
   1135c:	00115c81 	jmpi	115c8 <_write_r>

00011360 <__sread>:
   11360:	defffe04 	addi	sp,sp,-8
   11364:	dc000015 	stw	r16,0(sp)
   11368:	2821883a 	mov	r16,r5
   1136c:	2940038f 	ldh	r5,14(r5)
   11370:	dfc00115 	stw	ra,4(sp)
   11374:	00119e40 	call	119e4 <_read_r>
   11378:	1007883a 	mov	r3,r2
   1137c:	10000816 	blt	r2,zero,113a0 <__sread+0x40>
   11380:	80801417 	ldw	r2,80(r16)
   11384:	10c5883a 	add	r2,r2,r3
   11388:	80801415 	stw	r2,80(r16)
   1138c:	1805883a 	mov	r2,r3
   11390:	dfc00117 	ldw	ra,4(sp)
   11394:	dc000017 	ldw	r16,0(sp)
   11398:	dec00204 	addi	sp,sp,8
   1139c:	f800283a 	ret
   113a0:	8080030b 	ldhu	r2,12(r16)
   113a4:	10bbffcc 	andi	r2,r2,61439
   113a8:	8080030d 	sth	r2,12(r16)
   113ac:	1805883a 	mov	r2,r3
   113b0:	dfc00117 	ldw	ra,4(sp)
   113b4:	dc000017 	ldw	r16,0(sp)
   113b8:	dec00204 	addi	sp,sp,8
   113bc:	f800283a 	ret

000113c0 <strcmp>:
   113c0:	2144b03a 	or	r2,r4,r5
   113c4:	108000cc 	andi	r2,r2,3
   113c8:	10001d1e 	bne	r2,zero,11440 <strcmp+0x80>
   113cc:	200f883a 	mov	r7,r4
   113d0:	28800017 	ldw	r2,0(r5)
   113d4:	21000017 	ldw	r4,0(r4)
   113d8:	280d883a 	mov	r6,r5
   113dc:	2080161e 	bne	r4,r2,11438 <strcmp+0x78>
   113e0:	023fbff4 	movhi	r8,65279
   113e4:	423fbfc4 	addi	r8,r8,-257
   113e8:	2207883a 	add	r3,r4,r8
   113ec:	01602074 	movhi	r5,32897
   113f0:	29602004 	addi	r5,r5,-32640
   113f4:	1946703a 	and	r3,r3,r5
   113f8:	0104303a 	nor	r2,zero,r4
   113fc:	10c4703a 	and	r2,r2,r3
   11400:	10001c1e 	bne	r2,zero,11474 <strcmp+0xb4>
   11404:	4013883a 	mov	r9,r8
   11408:	2811883a 	mov	r8,r5
   1140c:	00000106 	br	11414 <strcmp+0x54>
   11410:	1800181e 	bne	r3,zero,11474 <strcmp+0xb4>
   11414:	39c00104 	addi	r7,r7,4
   11418:	39000017 	ldw	r4,0(r7)
   1141c:	31800104 	addi	r6,r6,4
   11420:	31400017 	ldw	r5,0(r6)
   11424:	2245883a 	add	r2,r4,r9
   11428:	1204703a 	and	r2,r2,r8
   1142c:	0106303a 	nor	r3,zero,r4
   11430:	1886703a 	and	r3,r3,r2
   11434:	217ff626 	beq	r4,r5,11410 <strcmp+0x50>
   11438:	3809883a 	mov	r4,r7
   1143c:	300b883a 	mov	r5,r6
   11440:	20c00007 	ldb	r3,0(r4)
   11444:	1800051e 	bne	r3,zero,1145c <strcmp+0x9c>
   11448:	00000606 	br	11464 <strcmp+0xa4>
   1144c:	21000044 	addi	r4,r4,1
   11450:	20c00007 	ldb	r3,0(r4)
   11454:	29400044 	addi	r5,r5,1
   11458:	18000226 	beq	r3,zero,11464 <strcmp+0xa4>
   1145c:	28800007 	ldb	r2,0(r5)
   11460:	18bffa26 	beq	r3,r2,1144c <strcmp+0x8c>
   11464:	20c00003 	ldbu	r3,0(r4)
   11468:	28800003 	ldbu	r2,0(r5)
   1146c:	1885c83a 	sub	r2,r3,r2
   11470:	f800283a 	ret
   11474:	0005883a 	mov	r2,zero
   11478:	f800283a 	ret

0001147c <__swbuf_r>:
   1147c:	defffc04 	addi	sp,sp,-16
   11480:	dc400215 	stw	r17,8(sp)
   11484:	dc000115 	stw	r16,4(sp)
   11488:	dfc00315 	stw	ra,12(sp)
   1148c:	2023883a 	mov	r17,r4
   11490:	2821883a 	mov	r16,r5
   11494:	20000226 	beq	r4,zero,114a0 <__swbuf_r+0x24>
   11498:	20800e17 	ldw	r2,56(r4)
   1149c:	10002f26 	beq	r2,zero,1155c <__swbuf_r+0xe0>
   114a0:	3080030b 	ldhu	r2,12(r6)
   114a4:	30c00617 	ldw	r3,24(r6)
   114a8:	1080020c 	andi	r2,r2,8
   114ac:	30c00215 	stw	r3,8(r6)
   114b0:	10002226 	beq	r2,zero,1153c <__swbuf_r+0xc0>
   114b4:	30c00417 	ldw	r3,16(r6)
   114b8:	18002026 	beq	r3,zero,1153c <__swbuf_r+0xc0>
   114bc:	31000017 	ldw	r4,0(r6)
   114c0:	30800517 	ldw	r2,20(r6)
   114c4:	20c7c83a 	sub	r3,r4,r3
   114c8:	18802f0e 	bge	r3,r2,11588 <__swbuf_r+0x10c>
   114cc:	19400044 	addi	r5,r3,1
   114d0:	30800217 	ldw	r2,8(r6)
   114d4:	84003fcc 	andi	r16,r16,255
   114d8:	20c00044 	addi	r3,r4,1
   114dc:	10bfffc4 	addi	r2,r2,-1
   114e0:	30800215 	stw	r2,8(r6)
   114e4:	24000005 	stb	r16,0(r4)
   114e8:	30800517 	ldw	r2,20(r6)
   114ec:	30c00015 	stw	r3,0(r6)
   114f0:	11400c26 	beq	r2,r5,11524 <__swbuf_r+0xa8>
   114f4:	3080030b 	ldhu	r2,12(r6)
   114f8:	1080004c 	andi	r2,r2,1
   114fc:	1005003a 	cmpeq	r2,r2,zero
   11500:	10000626 	beq	r2,zero,1151c <__swbuf_r+0xa0>
   11504:	8005883a 	mov	r2,r16
   11508:	dfc00317 	ldw	ra,12(sp)
   1150c:	dc400217 	ldw	r17,8(sp)
   11510:	dc000117 	ldw	r16,4(sp)
   11514:	dec00404 	addi	sp,sp,16
   11518:	f800283a 	ret
   1151c:	00800284 	movi	r2,10
   11520:	80bff81e 	bne	r16,r2,11504 <__swbuf_r+0x88>
   11524:	8809883a 	mov	r4,r17
   11528:	300b883a 	mov	r5,r6
   1152c:	000d3900 	call	d390 <_fflush_r>
   11530:	103ff426 	beq	r2,zero,11504 <__swbuf_r+0x88>
   11534:	043fffc4 	movi	r16,-1
   11538:	003ff206 	br	11504 <__swbuf_r+0x88>
   1153c:	300b883a 	mov	r5,r6
   11540:	8809883a 	mov	r4,r17
   11544:	d9800015 	stw	r6,0(sp)
   11548:	000ba880 	call	ba88 <__swsetup_r>
   1154c:	d9800017 	ldw	r6,0(sp)
   11550:	1000061e 	bne	r2,zero,1156c <__swbuf_r+0xf0>
   11554:	30c00417 	ldw	r3,16(r6)
   11558:	003fd806 	br	114bc <__swbuf_r+0x40>
   1155c:	d9800015 	stw	r6,0(sp)
   11560:	000d6280 	call	d628 <__sinit>
   11564:	d9800017 	ldw	r6,0(sp)
   11568:	003fcd06 	br	114a0 <__swbuf_r+0x24>
   1156c:	3080030b 	ldhu	r2,12(r6)
   11570:	00c00244 	movi	r3,9
   11574:	043fffc4 	movi	r16,-1
   11578:	10801014 	ori	r2,r2,64
   1157c:	3080030d 	sth	r2,12(r6)
   11580:	88c00015 	stw	r3,0(r17)
   11584:	003fdf06 	br	11504 <__swbuf_r+0x88>
   11588:	300b883a 	mov	r5,r6
   1158c:	8809883a 	mov	r4,r17
   11590:	d9800015 	stw	r6,0(sp)
   11594:	000d3900 	call	d390 <_fflush_r>
   11598:	d9800017 	ldw	r6,0(sp)
   1159c:	103fe51e 	bne	r2,zero,11534 <__swbuf_r+0xb8>
   115a0:	31000017 	ldw	r4,0(r6)
   115a4:	01400044 	movi	r5,1
   115a8:	003fc906 	br	114d0 <__swbuf_r+0x54>

000115ac <__swbuf>:
   115ac:	01820034 	movhi	r6,2048
   115b0:	318a1f04 	addi	r6,r6,10364
   115b4:	2007883a 	mov	r3,r4
   115b8:	31000017 	ldw	r4,0(r6)
   115bc:	280d883a 	mov	r6,r5
   115c0:	180b883a 	mov	r5,r3
   115c4:	001147c1 	jmpi	1147c <__swbuf_r>

000115c8 <_write_r>:
   115c8:	defffd04 	addi	sp,sp,-12
   115cc:	dc000015 	stw	r16,0(sp)
   115d0:	04020034 	movhi	r16,2048
   115d4:	840a6404 	addi	r16,r16,10640
   115d8:	dc400115 	stw	r17,4(sp)
   115dc:	80000015 	stw	zero,0(r16)
   115e0:	2023883a 	mov	r17,r4
   115e4:	2809883a 	mov	r4,r5
   115e8:	300b883a 	mov	r5,r6
   115ec:	380d883a 	mov	r6,r7
   115f0:	dfc00215 	stw	ra,8(sp)
   115f4:	00138500 	call	13850 <write>
   115f8:	1007883a 	mov	r3,r2
   115fc:	00bfffc4 	movi	r2,-1
   11600:	18800626 	beq	r3,r2,1161c <_write_r+0x54>
   11604:	1805883a 	mov	r2,r3
   11608:	dfc00217 	ldw	ra,8(sp)
   1160c:	dc400117 	ldw	r17,4(sp)
   11610:	dc000017 	ldw	r16,0(sp)
   11614:	dec00304 	addi	sp,sp,12
   11618:	f800283a 	ret
   1161c:	80800017 	ldw	r2,0(r16)
   11620:	103ff826 	beq	r2,zero,11604 <_write_r+0x3c>
   11624:	88800015 	stw	r2,0(r17)
   11628:	1805883a 	mov	r2,r3
   1162c:	dfc00217 	ldw	ra,8(sp)
   11630:	dc400117 	ldw	r17,4(sp)
   11634:	dc000017 	ldw	r16,0(sp)
   11638:	dec00304 	addi	sp,sp,12
   1163c:	f800283a 	ret

00011640 <_calloc_r>:
   11640:	298b383a 	mul	r5,r5,r6
   11644:	defffe04 	addi	sp,sp,-8
   11648:	dc000015 	stw	r16,0(sp)
   1164c:	dfc00115 	stw	ra,4(sp)
   11650:	000f0bc0 	call	f0bc <_malloc_r>
   11654:	1021883a 	mov	r16,r2
   11658:	01c00904 	movi	r7,36
   1165c:	10000d26 	beq	r2,zero,11694 <_calloc_r+0x54>
   11660:	10ffff17 	ldw	r3,-4(r2)
   11664:	1009883a 	mov	r4,r2
   11668:	00bfff04 	movi	r2,-4
   1166c:	1886703a 	and	r3,r3,r2
   11670:	1887883a 	add	r3,r3,r2
   11674:	180d883a 	mov	r6,r3
   11678:	000b883a 	mov	r5,zero
   1167c:	38c01736 	bltu	r7,r3,116dc <_calloc_r+0x9c>
   11680:	008004c4 	movi	r2,19
   11684:	10c00836 	bltu	r2,r3,116a8 <_calloc_r+0x68>
   11688:	20000215 	stw	zero,8(r4)
   1168c:	20000015 	stw	zero,0(r4)
   11690:	20000115 	stw	zero,4(r4)
   11694:	8005883a 	mov	r2,r16
   11698:	dfc00117 	ldw	ra,4(sp)
   1169c:	dc000017 	ldw	r16,0(sp)
   116a0:	dec00204 	addi	sp,sp,8
   116a4:	f800283a 	ret
   116a8:	008006c4 	movi	r2,27
   116ac:	80000015 	stw	zero,0(r16)
   116b0:	80000115 	stw	zero,4(r16)
   116b4:	81000204 	addi	r4,r16,8
   116b8:	10fff32e 	bgeu	r2,r3,11688 <_calloc_r+0x48>
   116bc:	80000215 	stw	zero,8(r16)
   116c0:	80000315 	stw	zero,12(r16)
   116c4:	81000404 	addi	r4,r16,16
   116c8:	19ffef1e 	bne	r3,r7,11688 <_calloc_r+0x48>
   116cc:	81000604 	addi	r4,r16,24
   116d0:	80000415 	stw	zero,16(r16)
   116d4:	80000515 	stw	zero,20(r16)
   116d8:	003feb06 	br	11688 <_calloc_r+0x48>
   116dc:	00081140 	call	8114 <memset>
   116e0:	8005883a 	mov	r2,r16
   116e4:	dfc00117 	ldw	ra,4(sp)
   116e8:	dc000017 	ldw	r16,0(sp)
   116ec:	dec00204 	addi	sp,sp,8
   116f0:	f800283a 	ret

000116f4 <_close_r>:
   116f4:	defffd04 	addi	sp,sp,-12
   116f8:	dc000015 	stw	r16,0(sp)
   116fc:	04020034 	movhi	r16,2048
   11700:	840a6404 	addi	r16,r16,10640
   11704:	dc400115 	stw	r17,4(sp)
   11708:	80000015 	stw	zero,0(r16)
   1170c:	2023883a 	mov	r17,r4
   11710:	2809883a 	mov	r4,r5
   11714:	dfc00215 	stw	ra,8(sp)
   11718:	0012fdc0 	call	12fdc <close>
   1171c:	1007883a 	mov	r3,r2
   11720:	00bfffc4 	movi	r2,-1
   11724:	18800626 	beq	r3,r2,11740 <_close_r+0x4c>
   11728:	1805883a 	mov	r2,r3
   1172c:	dfc00217 	ldw	ra,8(sp)
   11730:	dc400117 	ldw	r17,4(sp)
   11734:	dc000017 	ldw	r16,0(sp)
   11738:	dec00304 	addi	sp,sp,12
   1173c:	f800283a 	ret
   11740:	80800017 	ldw	r2,0(r16)
   11744:	103ff826 	beq	r2,zero,11728 <_close_r+0x34>
   11748:	88800015 	stw	r2,0(r17)
   1174c:	1805883a 	mov	r2,r3
   11750:	dfc00217 	ldw	ra,8(sp)
   11754:	dc400117 	ldw	r17,4(sp)
   11758:	dc000017 	ldw	r16,0(sp)
   1175c:	dec00304 	addi	sp,sp,12
   11760:	f800283a 	ret

00011764 <_fclose_r>:
   11764:	defffc04 	addi	sp,sp,-16
   11768:	dc400115 	stw	r17,4(sp)
   1176c:	dc000015 	stw	r16,0(sp)
   11770:	dfc00315 	stw	ra,12(sp)
   11774:	dc800215 	stw	r18,8(sp)
   11778:	2821883a 	mov	r16,r5
   1177c:	2023883a 	mov	r17,r4
   11780:	28002926 	beq	r5,zero,11828 <_fclose_r+0xc4>
   11784:	000d6180 	call	d618 <__sfp_lock_acquire>
   11788:	88000226 	beq	r17,zero,11794 <_fclose_r+0x30>
   1178c:	88800e17 	ldw	r2,56(r17)
   11790:	10002d26 	beq	r2,zero,11848 <_fclose_r+0xe4>
   11794:	8080030f 	ldh	r2,12(r16)
   11798:	10002226 	beq	r2,zero,11824 <_fclose_r+0xc0>
   1179c:	8809883a 	mov	r4,r17
   117a0:	800b883a 	mov	r5,r16
   117a4:	000d3900 	call	d390 <_fflush_r>
   117a8:	1025883a 	mov	r18,r2
   117ac:	80800b17 	ldw	r2,44(r16)
   117b0:	10000426 	beq	r2,zero,117c4 <_fclose_r+0x60>
   117b4:	81400717 	ldw	r5,28(r16)
   117b8:	8809883a 	mov	r4,r17
   117bc:	103ee83a 	callr	r2
   117c0:	10002a16 	blt	r2,zero,1186c <_fclose_r+0x108>
   117c4:	8080030b 	ldhu	r2,12(r16)
   117c8:	1080200c 	andi	r2,r2,128
   117cc:	1000231e 	bne	r2,zero,1185c <_fclose_r+0xf8>
   117d0:	81400c17 	ldw	r5,48(r16)
   117d4:	28000526 	beq	r5,zero,117ec <_fclose_r+0x88>
   117d8:	80801004 	addi	r2,r16,64
   117dc:	28800226 	beq	r5,r2,117e8 <_fclose_r+0x84>
   117e0:	8809883a 	mov	r4,r17
   117e4:	000d9ac0 	call	d9ac <_free_r>
   117e8:	80000c15 	stw	zero,48(r16)
   117ec:	81401117 	ldw	r5,68(r16)
   117f0:	28000326 	beq	r5,zero,11800 <_fclose_r+0x9c>
   117f4:	8809883a 	mov	r4,r17
   117f8:	000d9ac0 	call	d9ac <_free_r>
   117fc:	80001115 	stw	zero,68(r16)
   11800:	8000030d 	sth	zero,12(r16)
   11804:	000d61c0 	call	d61c <__sfp_lock_release>
   11808:	9005883a 	mov	r2,r18
   1180c:	dfc00317 	ldw	ra,12(sp)
   11810:	dc800217 	ldw	r18,8(sp)
   11814:	dc400117 	ldw	r17,4(sp)
   11818:	dc000017 	ldw	r16,0(sp)
   1181c:	dec00404 	addi	sp,sp,16
   11820:	f800283a 	ret
   11824:	000d61c0 	call	d61c <__sfp_lock_release>
   11828:	0025883a 	mov	r18,zero
   1182c:	9005883a 	mov	r2,r18
   11830:	dfc00317 	ldw	ra,12(sp)
   11834:	dc800217 	ldw	r18,8(sp)
   11838:	dc400117 	ldw	r17,4(sp)
   1183c:	dc000017 	ldw	r16,0(sp)
   11840:	dec00404 	addi	sp,sp,16
   11844:	f800283a 	ret
   11848:	8809883a 	mov	r4,r17
   1184c:	000d6280 	call	d628 <__sinit>
   11850:	8080030f 	ldh	r2,12(r16)
   11854:	103fd11e 	bne	r2,zero,1179c <_fclose_r+0x38>
   11858:	003ff206 	br	11824 <_fclose_r+0xc0>
   1185c:	81400417 	ldw	r5,16(r16)
   11860:	8809883a 	mov	r4,r17
   11864:	000d9ac0 	call	d9ac <_free_r>
   11868:	003fd906 	br	117d0 <_fclose_r+0x6c>
   1186c:	04bfffc4 	movi	r18,-1
   11870:	003fd406 	br	117c4 <_fclose_r+0x60>

00011874 <fclose>:
   11874:	00820034 	movhi	r2,2048
   11878:	108a1f04 	addi	r2,r2,10364
   1187c:	200b883a 	mov	r5,r4
   11880:	11000017 	ldw	r4,0(r2)
   11884:	00117641 	jmpi	11764 <_fclose_r>

00011888 <_fstat_r>:
   11888:	defffd04 	addi	sp,sp,-12
   1188c:	dc000015 	stw	r16,0(sp)
   11890:	04020034 	movhi	r16,2048
   11894:	840a6404 	addi	r16,r16,10640
   11898:	dc400115 	stw	r17,4(sp)
   1189c:	80000015 	stw	zero,0(r16)
   118a0:	2023883a 	mov	r17,r4
   118a4:	2809883a 	mov	r4,r5
   118a8:	300b883a 	mov	r5,r6
   118ac:	dfc00215 	stw	ra,8(sp)
   118b0:	00131640 	call	13164 <fstat>
   118b4:	1007883a 	mov	r3,r2
   118b8:	00bfffc4 	movi	r2,-1
   118bc:	18800626 	beq	r3,r2,118d8 <_fstat_r+0x50>
   118c0:	1805883a 	mov	r2,r3
   118c4:	dfc00217 	ldw	ra,8(sp)
   118c8:	dc400117 	ldw	r17,4(sp)
   118cc:	dc000017 	ldw	r16,0(sp)
   118d0:	dec00304 	addi	sp,sp,12
   118d4:	f800283a 	ret
   118d8:	80800017 	ldw	r2,0(r16)
   118dc:	103ff826 	beq	r2,zero,118c0 <_fstat_r+0x38>
   118e0:	88800015 	stw	r2,0(r17)
   118e4:	1805883a 	mov	r2,r3
   118e8:	dfc00217 	ldw	ra,8(sp)
   118ec:	dc400117 	ldw	r17,4(sp)
   118f0:	dc000017 	ldw	r16,0(sp)
   118f4:	dec00304 	addi	sp,sp,12
   118f8:	f800283a 	ret

000118fc <_isatty_r>:
   118fc:	defffd04 	addi	sp,sp,-12
   11900:	dc000015 	stw	r16,0(sp)
   11904:	04020034 	movhi	r16,2048
   11908:	840a6404 	addi	r16,r16,10640
   1190c:	dc400115 	stw	r17,4(sp)
   11910:	80000015 	stw	zero,0(r16)
   11914:	2023883a 	mov	r17,r4
   11918:	2809883a 	mov	r4,r5
   1191c:	dfc00215 	stw	ra,8(sp)
   11920:	00132980 	call	13298 <isatty>
   11924:	1007883a 	mov	r3,r2
   11928:	00bfffc4 	movi	r2,-1
   1192c:	18800626 	beq	r3,r2,11948 <_isatty_r+0x4c>
   11930:	1805883a 	mov	r2,r3
   11934:	dfc00217 	ldw	ra,8(sp)
   11938:	dc400117 	ldw	r17,4(sp)
   1193c:	dc000017 	ldw	r16,0(sp)
   11940:	dec00304 	addi	sp,sp,12
   11944:	f800283a 	ret
   11948:	80800017 	ldw	r2,0(r16)
   1194c:	103ff826 	beq	r2,zero,11930 <_isatty_r+0x34>
   11950:	88800015 	stw	r2,0(r17)
   11954:	1805883a 	mov	r2,r3
   11958:	dfc00217 	ldw	ra,8(sp)
   1195c:	dc400117 	ldw	r17,4(sp)
   11960:	dc000017 	ldw	r16,0(sp)
   11964:	dec00304 	addi	sp,sp,12
   11968:	f800283a 	ret

0001196c <_lseek_r>:
   1196c:	defffd04 	addi	sp,sp,-12
   11970:	dc000015 	stw	r16,0(sp)
   11974:	04020034 	movhi	r16,2048
   11978:	840a6404 	addi	r16,r16,10640
   1197c:	dc400115 	stw	r17,4(sp)
   11980:	80000015 	stw	zero,0(r16)
   11984:	2023883a 	mov	r17,r4
   11988:	2809883a 	mov	r4,r5
   1198c:	300b883a 	mov	r5,r6
   11990:	380d883a 	mov	r6,r7
   11994:	dfc00215 	stw	ra,8(sp)
   11998:	00133b80 	call	133b8 <lseek>
   1199c:	1007883a 	mov	r3,r2
   119a0:	00bfffc4 	movi	r2,-1
   119a4:	18800626 	beq	r3,r2,119c0 <_lseek_r+0x54>
   119a8:	1805883a 	mov	r2,r3
   119ac:	dfc00217 	ldw	ra,8(sp)
   119b0:	dc400117 	ldw	r17,4(sp)
   119b4:	dc000017 	ldw	r16,0(sp)
   119b8:	dec00304 	addi	sp,sp,12
   119bc:	f800283a 	ret
   119c0:	80800017 	ldw	r2,0(r16)
   119c4:	103ff826 	beq	r2,zero,119a8 <_lseek_r+0x3c>
   119c8:	88800015 	stw	r2,0(r17)
   119cc:	1805883a 	mov	r2,r3
   119d0:	dfc00217 	ldw	ra,8(sp)
   119d4:	dc400117 	ldw	r17,4(sp)
   119d8:	dc000017 	ldw	r16,0(sp)
   119dc:	dec00304 	addi	sp,sp,12
   119e0:	f800283a 	ret

000119e4 <_read_r>:
   119e4:	defffd04 	addi	sp,sp,-12
   119e8:	dc000015 	stw	r16,0(sp)
   119ec:	04020034 	movhi	r16,2048
   119f0:	840a6404 	addi	r16,r16,10640
   119f4:	dc400115 	stw	r17,4(sp)
   119f8:	80000015 	stw	zero,0(r16)
   119fc:	2023883a 	mov	r17,r4
   11a00:	2809883a 	mov	r4,r5
   11a04:	300b883a 	mov	r5,r6
   11a08:	380d883a 	mov	r6,r7
   11a0c:	dfc00215 	stw	ra,8(sp)
   11a10:	00135b40 	call	135b4 <read>
   11a14:	1007883a 	mov	r3,r2
   11a18:	00bfffc4 	movi	r2,-1
   11a1c:	18800626 	beq	r3,r2,11a38 <_read_r+0x54>
   11a20:	1805883a 	mov	r2,r3
   11a24:	dfc00217 	ldw	ra,8(sp)
   11a28:	dc400117 	ldw	r17,4(sp)
   11a2c:	dc000017 	ldw	r16,0(sp)
   11a30:	dec00304 	addi	sp,sp,12
   11a34:	f800283a 	ret
   11a38:	80800017 	ldw	r2,0(r16)
   11a3c:	103ff826 	beq	r2,zero,11a20 <_read_r+0x3c>
   11a40:	88800015 	stw	r2,0(r17)
   11a44:	1805883a 	mov	r2,r3
   11a48:	dfc00217 	ldw	ra,8(sp)
   11a4c:	dc400117 	ldw	r17,4(sp)
   11a50:	dc000017 	ldw	r16,0(sp)
   11a54:	dec00304 	addi	sp,sp,12
   11a58:	f800283a 	ret

00011a5c <__fixunsdfsi>:
   11a5c:	defffb04 	addi	sp,sp,-20
   11a60:	dc400115 	stw	r17,4(sp)
   11a64:	dc000015 	stw	r16,0(sp)
   11a68:	04507834 	movhi	r17,16864
   11a6c:	0021883a 	mov	r16,zero
   11a70:	800d883a 	mov	r6,r16
   11a74:	880f883a 	mov	r7,r17
   11a78:	dcc00315 	stw	r19,12(sp)
   11a7c:	dc800215 	stw	r18,8(sp)
   11a80:	2827883a 	mov	r19,r5
   11a84:	2025883a 	mov	r18,r4
   11a88:	dfc00415 	stw	ra,16(sp)
   11a8c:	00076f40 	call	76f4 <__gedf2>
   11a90:	000d883a 	mov	r6,zero
   11a94:	880f883a 	mov	r7,r17
   11a98:	980b883a 	mov	r5,r19
   11a9c:	9009883a 	mov	r4,r18
   11aa0:	10000d16 	blt	r2,zero,11ad8 <__fixunsdfsi+0x7c>
   11aa4:	0006f5c0 	call	6f5c <__subdf3>
   11aa8:	180b883a 	mov	r5,r3
   11aac:	1009883a 	mov	r4,r2
   11ab0:	00078fc0 	call	78fc <__fixdfsi>
   11ab4:	00e00034 	movhi	r3,32768
   11ab8:	10c5883a 	add	r2,r2,r3
   11abc:	dfc00417 	ldw	ra,16(sp)
   11ac0:	dcc00317 	ldw	r19,12(sp)
   11ac4:	dc800217 	ldw	r18,8(sp)
   11ac8:	dc400117 	ldw	r17,4(sp)
   11acc:	dc000017 	ldw	r16,0(sp)
   11ad0:	dec00504 	addi	sp,sp,20
   11ad4:	f800283a 	ret
   11ad8:	980b883a 	mov	r5,r19
   11adc:	9009883a 	mov	r4,r18
   11ae0:	00078fc0 	call	78fc <__fixdfsi>
   11ae4:	dfc00417 	ldw	ra,16(sp)
   11ae8:	dcc00317 	ldw	r19,12(sp)
   11aec:	dc800217 	ldw	r18,8(sp)
   11af0:	dc400117 	ldw	r17,4(sp)
   11af4:	dc000017 	ldw	r16,0(sp)
   11af8:	dec00504 	addi	sp,sp,20
   11afc:	f800283a 	ret

00011b00 <__udivdi3>:
   11b00:	defff004 	addi	sp,sp,-64
   11b04:	2005883a 	mov	r2,r4
   11b08:	3011883a 	mov	r8,r6
   11b0c:	df000e15 	stw	fp,56(sp)
   11b10:	dd000a15 	stw	r20,40(sp)
   11b14:	dc000615 	stw	r16,24(sp)
   11b18:	dfc00f15 	stw	ra,60(sp)
   11b1c:	ddc00d15 	stw	r23,52(sp)
   11b20:	dd800c15 	stw	r22,48(sp)
   11b24:	dd400b15 	stw	r21,44(sp)
   11b28:	dcc00915 	stw	r19,36(sp)
   11b2c:	dc800815 	stw	r18,32(sp)
   11b30:	dc400715 	stw	r17,28(sp)
   11b34:	4021883a 	mov	r16,r8
   11b38:	1039883a 	mov	fp,r2
   11b3c:	2829883a 	mov	r20,r5
   11b40:	38003b1e 	bne	r7,zero,11c30 <__udivdi3+0x130>
   11b44:	2a005c36 	bltu	r5,r8,11cb8 <__udivdi3+0x1b8>
   11b48:	4000a626 	beq	r8,zero,11de4 <__udivdi3+0x2e4>
   11b4c:	00bfffd4 	movui	r2,65535
   11b50:	14009e36 	bltu	r2,r16,11dcc <__udivdi3+0x2cc>
   11b54:	00803fc4 	movi	r2,255
   11b58:	14013d36 	bltu	r2,r16,12050 <__udivdi3+0x550>
   11b5c:	000b883a 	mov	r5,zero
   11b60:	0005883a 	mov	r2,zero
   11b64:	8084d83a 	srl	r2,r16,r2
   11b68:	01020034 	movhi	r4,2048
   11b6c:	2100e904 	addi	r4,r4,932
   11b70:	01800804 	movi	r6,32
   11b74:	1105883a 	add	r2,r2,r4
   11b78:	10c00003 	ldbu	r3,0(r2)
   11b7c:	28c7883a 	add	r3,r5,r3
   11b80:	30edc83a 	sub	r22,r6,r3
   11b84:	b000ee1e 	bne	r22,zero,11f40 <__udivdi3+0x440>
   11b88:	802ad43a 	srli	r21,r16,16
   11b8c:	00800044 	movi	r2,1
   11b90:	a423c83a 	sub	r17,r20,r16
   11b94:	85ffffcc 	andi	r23,r16,65535
   11b98:	d8800315 	stw	r2,12(sp)
   11b9c:	8809883a 	mov	r4,r17
   11ba0:	a80b883a 	mov	r5,r21
   11ba4:	0012cd00 	call	12cd0 <__udivsi3>
   11ba8:	8809883a 	mov	r4,r17
   11bac:	a80b883a 	mov	r5,r21
   11bb0:	102d883a 	mov	r22,r2
   11bb4:	0012cd80 	call	12cd8 <__umodsi3>
   11bb8:	1004943a 	slli	r2,r2,16
   11bbc:	e006d43a 	srli	r3,fp,16
   11bc0:	bda3383a 	mul	r17,r23,r22
   11bc4:	10c4b03a 	or	r2,r2,r3
   11bc8:	1440042e 	bgeu	r2,r17,11bdc <__udivdi3+0xdc>
   11bcc:	1405883a 	add	r2,r2,r16
   11bd0:	b5bfffc4 	addi	r22,r22,-1
   11bd4:	14000136 	bltu	r2,r16,11bdc <__udivdi3+0xdc>
   11bd8:	14413d36 	bltu	r2,r17,120d0 <__udivdi3+0x5d0>
   11bdc:	1463c83a 	sub	r17,r2,r17
   11be0:	8809883a 	mov	r4,r17
   11be4:	a80b883a 	mov	r5,r21
   11be8:	0012cd00 	call	12cd0 <__udivsi3>
   11bec:	8809883a 	mov	r4,r17
   11bf0:	a80b883a 	mov	r5,r21
   11bf4:	1029883a 	mov	r20,r2
   11bf8:	0012cd80 	call	12cd8 <__umodsi3>
   11bfc:	1004943a 	slli	r2,r2,16
   11c00:	bd09383a 	mul	r4,r23,r20
   11c04:	e0ffffcc 	andi	r3,fp,65535
   11c08:	10c4b03a 	or	r2,r2,r3
   11c0c:	1100042e 	bgeu	r2,r4,11c20 <__udivdi3+0x120>
   11c10:	8085883a 	add	r2,r16,r2
   11c14:	a53fffc4 	addi	r20,r20,-1
   11c18:	14000136 	bltu	r2,r16,11c20 <__udivdi3+0x120>
   11c1c:	11012036 	bltu	r2,r4,120a0 <__udivdi3+0x5a0>
   11c20:	b004943a 	slli	r2,r22,16
   11c24:	d9000317 	ldw	r4,12(sp)
   11c28:	a084b03a 	or	r2,r20,r2
   11c2c:	00001506 	br	11c84 <__udivdi3+0x184>
   11c30:	380d883a 	mov	r6,r7
   11c34:	29c06236 	bltu	r5,r7,11dc0 <__udivdi3+0x2c0>
   11c38:	00bfffd4 	movui	r2,65535
   11c3c:	11c05a36 	bltu	r2,r7,11da8 <__udivdi3+0x2a8>
   11c40:	00803fc4 	movi	r2,255
   11c44:	11c0fc36 	bltu	r2,r7,12038 <__udivdi3+0x538>
   11c48:	000b883a 	mov	r5,zero
   11c4c:	0005883a 	mov	r2,zero
   11c50:	3084d83a 	srl	r2,r6,r2
   11c54:	01020034 	movhi	r4,2048
   11c58:	2100e904 	addi	r4,r4,932
   11c5c:	01c00804 	movi	r7,32
   11c60:	1105883a 	add	r2,r2,r4
   11c64:	10c00003 	ldbu	r3,0(r2)
   11c68:	28c7883a 	add	r3,r5,r3
   11c6c:	38efc83a 	sub	r23,r7,r3
   11c70:	b800691e 	bne	r23,zero,11e18 <__udivdi3+0x318>
   11c74:	35000136 	bltu	r6,r20,11c7c <__udivdi3+0x17c>
   11c78:	e4005136 	bltu	fp,r16,11dc0 <__udivdi3+0x2c0>
   11c7c:	00800044 	movi	r2,1
   11c80:	0009883a 	mov	r4,zero
   11c84:	2007883a 	mov	r3,r4
   11c88:	dfc00f17 	ldw	ra,60(sp)
   11c8c:	df000e17 	ldw	fp,56(sp)
   11c90:	ddc00d17 	ldw	r23,52(sp)
   11c94:	dd800c17 	ldw	r22,48(sp)
   11c98:	dd400b17 	ldw	r21,44(sp)
   11c9c:	dd000a17 	ldw	r20,40(sp)
   11ca0:	dcc00917 	ldw	r19,36(sp)
   11ca4:	dc800817 	ldw	r18,32(sp)
   11ca8:	dc400717 	ldw	r17,28(sp)
   11cac:	dc000617 	ldw	r16,24(sp)
   11cb0:	dec01004 	addi	sp,sp,64
   11cb4:	f800283a 	ret
   11cb8:	00bfffd4 	movui	r2,65535
   11cbc:	12005036 	bltu	r2,r8,11e00 <__udivdi3+0x300>
   11cc0:	00803fc4 	movi	r2,255
   11cc4:	1200e836 	bltu	r2,r8,12068 <__udivdi3+0x568>
   11cc8:	000b883a 	mov	r5,zero
   11ccc:	0005883a 	mov	r2,zero
   11cd0:	8084d83a 	srl	r2,r16,r2
   11cd4:	01020034 	movhi	r4,2048
   11cd8:	2100e904 	addi	r4,r4,932
   11cdc:	01800804 	movi	r6,32
   11ce0:	1105883a 	add	r2,r2,r4
   11ce4:	10c00003 	ldbu	r3,0(r2)
   11ce8:	28c7883a 	add	r3,r5,r3
   11cec:	30cbc83a 	sub	r5,r6,r3
   11cf0:	28000626 	beq	r5,zero,11d0c <__udivdi3+0x20c>
   11cf4:	3145c83a 	sub	r2,r6,r5
   11cf8:	e084d83a 	srl	r2,fp,r2
   11cfc:	a146983a 	sll	r3,r20,r5
   11d00:	e178983a 	sll	fp,fp,r5
   11d04:	8160983a 	sll	r16,r16,r5
   11d08:	18a8b03a 	or	r20,r3,r2
   11d0c:	802ad43a 	srli	r21,r16,16
   11d10:	a009883a 	mov	r4,r20
   11d14:	85ffffcc 	andi	r23,r16,65535
   11d18:	a80b883a 	mov	r5,r21
   11d1c:	0012cd00 	call	12cd0 <__udivsi3>
   11d20:	a009883a 	mov	r4,r20
   11d24:	a80b883a 	mov	r5,r21
   11d28:	102d883a 	mov	r22,r2
   11d2c:	0012cd80 	call	12cd8 <__umodsi3>
   11d30:	1004943a 	slli	r2,r2,16
   11d34:	e006d43a 	srli	r3,fp,16
   11d38:	bda3383a 	mul	r17,r23,r22
   11d3c:	10c4b03a 	or	r2,r2,r3
   11d40:	1440042e 	bgeu	r2,r17,11d54 <__udivdi3+0x254>
   11d44:	1405883a 	add	r2,r2,r16
   11d48:	b5bfffc4 	addi	r22,r22,-1
   11d4c:	14000136 	bltu	r2,r16,11d54 <__udivdi3+0x254>
   11d50:	1440d536 	bltu	r2,r17,120a8 <__udivdi3+0x5a8>
   11d54:	1463c83a 	sub	r17,r2,r17
   11d58:	8809883a 	mov	r4,r17
   11d5c:	a80b883a 	mov	r5,r21
   11d60:	0012cd00 	call	12cd0 <__udivsi3>
   11d64:	8809883a 	mov	r4,r17
   11d68:	a80b883a 	mov	r5,r21
   11d6c:	1029883a 	mov	r20,r2
   11d70:	0012cd80 	call	12cd8 <__umodsi3>
   11d74:	1004943a 	slli	r2,r2,16
   11d78:	bd09383a 	mul	r4,r23,r20
   11d7c:	e0ffffcc 	andi	r3,fp,65535
   11d80:	10c4b03a 	or	r2,r2,r3
   11d84:	1100042e 	bgeu	r2,r4,11d98 <__udivdi3+0x298>
   11d88:	8085883a 	add	r2,r16,r2
   11d8c:	a53fffc4 	addi	r20,r20,-1
   11d90:	14000136 	bltu	r2,r16,11d98 <__udivdi3+0x298>
   11d94:	1100c736 	bltu	r2,r4,120b4 <__udivdi3+0x5b4>
   11d98:	b004943a 	slli	r2,r22,16
   11d9c:	0009883a 	mov	r4,zero
   11da0:	a084b03a 	or	r2,r20,r2
   11da4:	003fb706 	br	11c84 <__udivdi3+0x184>
   11da8:	00804034 	movhi	r2,256
   11dac:	10bfffc4 	addi	r2,r2,-1
   11db0:	11c0a436 	bltu	r2,r7,12044 <__udivdi3+0x544>
   11db4:	01400404 	movi	r5,16
   11db8:	2805883a 	mov	r2,r5
   11dbc:	003fa406 	br	11c50 <__udivdi3+0x150>
   11dc0:	0005883a 	mov	r2,zero
   11dc4:	0009883a 	mov	r4,zero
   11dc8:	003fae06 	br	11c84 <__udivdi3+0x184>
   11dcc:	00804034 	movhi	r2,256
   11dd0:	10bfffc4 	addi	r2,r2,-1
   11dd4:	1400a136 	bltu	r2,r16,1205c <__udivdi3+0x55c>
   11dd8:	01400404 	movi	r5,16
   11ddc:	2805883a 	mov	r2,r5
   11de0:	003f6006 	br	11b64 <__udivdi3+0x64>
   11de4:	01000044 	movi	r4,1
   11de8:	000b883a 	mov	r5,zero
   11dec:	0012cd00 	call	12cd0 <__udivsi3>
   11df0:	1021883a 	mov	r16,r2
   11df4:	00bfffd4 	movui	r2,65535
   11df8:	143ff436 	bltu	r2,r16,11dcc <__udivdi3+0x2cc>
   11dfc:	003f5506 	br	11b54 <__udivdi3+0x54>
   11e00:	00804034 	movhi	r2,256
   11e04:	10bfffc4 	addi	r2,r2,-1
   11e08:	12009a36 	bltu	r2,r8,12074 <__udivdi3+0x574>
   11e0c:	01400404 	movi	r5,16
   11e10:	2805883a 	mov	r2,r5
   11e14:	003fae06 	br	11cd0 <__udivdi3+0x1d0>
   11e18:	3dc5c83a 	sub	r2,r7,r23
   11e1c:	35c8983a 	sll	r4,r6,r23
   11e20:	8086d83a 	srl	r3,r16,r2
   11e24:	a0a2d83a 	srl	r17,r20,r2
   11e28:	e084d83a 	srl	r2,fp,r2
   11e2c:	20eab03a 	or	r21,r4,r3
   11e30:	a82cd43a 	srli	r22,r21,16
   11e34:	a5c6983a 	sll	r3,r20,r23
   11e38:	8809883a 	mov	r4,r17
   11e3c:	b00b883a 	mov	r5,r22
   11e40:	1886b03a 	or	r3,r3,r2
   11e44:	d8c00215 	stw	r3,8(sp)
   11e48:	0012cd00 	call	12cd0 <__udivsi3>
   11e4c:	8809883a 	mov	r4,r17
   11e50:	b00b883a 	mov	r5,r22
   11e54:	1029883a 	mov	r20,r2
   11e58:	0012cd80 	call	12cd8 <__umodsi3>
   11e5c:	a8ffffcc 	andi	r3,r21,65535
   11e60:	d8c00515 	stw	r3,20(sp)
   11e64:	d9000217 	ldw	r4,8(sp)
   11e68:	d9400517 	ldw	r5,20(sp)
   11e6c:	1004943a 	slli	r2,r2,16
   11e70:	2006d43a 	srli	r3,r4,16
   11e74:	85e0983a 	sll	r16,r16,r23
   11e78:	2d23383a 	mul	r17,r5,r20
   11e7c:	10c4b03a 	or	r2,r2,r3
   11e80:	dc000015 	stw	r16,0(sp)
   11e84:	1440032e 	bgeu	r2,r17,11e94 <__udivdi3+0x394>
   11e88:	1545883a 	add	r2,r2,r21
   11e8c:	a53fffc4 	addi	r20,r20,-1
   11e90:	15407f2e 	bgeu	r2,r21,12090 <__udivdi3+0x590>
   11e94:	1463c83a 	sub	r17,r2,r17
   11e98:	8809883a 	mov	r4,r17
   11e9c:	b00b883a 	mov	r5,r22
   11ea0:	0012cd00 	call	12cd0 <__udivsi3>
   11ea4:	8809883a 	mov	r4,r17
   11ea8:	b00b883a 	mov	r5,r22
   11eac:	1021883a 	mov	r16,r2
   11eb0:	0012cd80 	call	12cd8 <__umodsi3>
   11eb4:	d8c00517 	ldw	r3,20(sp)
   11eb8:	d9000217 	ldw	r4,8(sp)
   11ebc:	1004943a 	slli	r2,r2,16
   11ec0:	1c0f383a 	mul	r7,r3,r16
   11ec4:	20ffffcc 	andi	r3,r4,65535
   11ec8:	10e2b03a 	or	r17,r2,r3
   11ecc:	89c0032e 	bgeu	r17,r7,11edc <__udivdi3+0x3dc>
   11ed0:	8d63883a 	add	r17,r17,r21
   11ed4:	843fffc4 	addi	r16,r16,-1
   11ed8:	8d40692e 	bgeu	r17,r21,12080 <__udivdi3+0x580>
   11edc:	a008943a 	slli	r4,r20,16
   11ee0:	d9400017 	ldw	r5,0(sp)
   11ee4:	89e3c83a 	sub	r17,r17,r7
   11ee8:	8110b03a 	or	r8,r16,r4
   11eec:	280cd43a 	srli	r6,r5,16
   11ef0:	28ffffcc 	andi	r3,r5,65535
   11ef4:	40bfffcc 	andi	r2,r8,65535
   11ef8:	400ad43a 	srli	r5,r8,16
   11efc:	10d3383a 	mul	r9,r2,r3
   11f00:	1185383a 	mul	r2,r2,r6
   11f04:	28c7383a 	mul	r3,r5,r3
   11f08:	4808d43a 	srli	r4,r9,16
   11f0c:	298b383a 	mul	r5,r5,r6
   11f10:	10c5883a 	add	r2,r2,r3
   11f14:	2089883a 	add	r4,r4,r2
   11f18:	20c0022e 	bgeu	r4,r3,11f24 <__udivdi3+0x424>
   11f1c:	00800074 	movhi	r2,1
   11f20:	288b883a 	add	r5,r5,r2
   11f24:	2004d43a 	srli	r2,r4,16
   11f28:	288b883a 	add	r5,r5,r2
   11f2c:	89403f36 	bltu	r17,r5,1202c <__udivdi3+0x52c>
   11f30:	89403926 	beq	r17,r5,12018 <__udivdi3+0x518>
   11f34:	4005883a 	mov	r2,r8
   11f38:	0009883a 	mov	r4,zero
   11f3c:	003f5106 	br	11c84 <__udivdi3+0x184>
   11f40:	85a0983a 	sll	r16,r16,r22
   11f44:	3585c83a 	sub	r2,r6,r22
   11f48:	a0a2d83a 	srl	r17,r20,r2
   11f4c:	802ad43a 	srli	r21,r16,16
   11f50:	e084d83a 	srl	r2,fp,r2
   11f54:	a586983a 	sll	r3,r20,r22
   11f58:	8809883a 	mov	r4,r17
   11f5c:	a80b883a 	mov	r5,r21
   11f60:	1886b03a 	or	r3,r3,r2
   11f64:	d8c00115 	stw	r3,4(sp)
   11f68:	0012cd00 	call	12cd0 <__udivsi3>
   11f6c:	8809883a 	mov	r4,r17
   11f70:	a80b883a 	mov	r5,r21
   11f74:	d8800415 	stw	r2,16(sp)
   11f78:	0012cd80 	call	12cd8 <__umodsi3>
   11f7c:	d9000117 	ldw	r4,4(sp)
   11f80:	d9400417 	ldw	r5,16(sp)
   11f84:	1004943a 	slli	r2,r2,16
   11f88:	85ffffcc 	andi	r23,r16,65535
   11f8c:	2006d43a 	srli	r3,r4,16
   11f90:	b963383a 	mul	r17,r23,r5
   11f94:	10c4b03a 	or	r2,r2,r3
   11f98:	1440042e 	bgeu	r2,r17,11fac <__udivdi3+0x4ac>
   11f9c:	297fffc4 	addi	r5,r5,-1
   11fa0:	1405883a 	add	r2,r2,r16
   11fa4:	d9400415 	stw	r5,16(sp)
   11fa8:	1400442e 	bgeu	r2,r16,120bc <__udivdi3+0x5bc>
   11fac:	1463c83a 	sub	r17,r2,r17
   11fb0:	8809883a 	mov	r4,r17
   11fb4:	a80b883a 	mov	r5,r21
   11fb8:	0012cd00 	call	12cd0 <__udivsi3>
   11fbc:	8809883a 	mov	r4,r17
   11fc0:	a80b883a 	mov	r5,r21
   11fc4:	1029883a 	mov	r20,r2
   11fc8:	0012cd80 	call	12cd8 <__umodsi3>
   11fcc:	d9400117 	ldw	r5,4(sp)
   11fd0:	1004943a 	slli	r2,r2,16
   11fd4:	bd09383a 	mul	r4,r23,r20
   11fd8:	28ffffcc 	andi	r3,r5,65535
   11fdc:	10c6b03a 	or	r3,r2,r3
   11fe0:	1900062e 	bgeu	r3,r4,11ffc <__udivdi3+0x4fc>
   11fe4:	1c07883a 	add	r3,r3,r16
   11fe8:	a53fffc4 	addi	r20,r20,-1
   11fec:	1c000336 	bltu	r3,r16,11ffc <__udivdi3+0x4fc>
   11ff0:	1900022e 	bgeu	r3,r4,11ffc <__udivdi3+0x4fc>
   11ff4:	a53fffc4 	addi	r20,r20,-1
   11ff8:	1c07883a 	add	r3,r3,r16
   11ffc:	d9400417 	ldw	r5,16(sp)
   12000:	e5b8983a 	sll	fp,fp,r22
   12004:	1923c83a 	sub	r17,r3,r4
   12008:	2804943a 	slli	r2,r5,16
   1200c:	a0a8b03a 	or	r20,r20,r2
   12010:	dd000315 	stw	r20,12(sp)
   12014:	003ee106 	br	11b9c <__udivdi3+0x9c>
   12018:	2004943a 	slli	r2,r4,16
   1201c:	e5c8983a 	sll	r4,fp,r23
   12020:	48ffffcc 	andi	r3,r9,65535
   12024:	10c5883a 	add	r2,r2,r3
   12028:	20bfc22e 	bgeu	r4,r2,11f34 <__udivdi3+0x434>
   1202c:	40bfffc4 	addi	r2,r8,-1
   12030:	0009883a 	mov	r4,zero
   12034:	003f1306 	br	11c84 <__udivdi3+0x184>
   12038:	01400204 	movi	r5,8
   1203c:	2805883a 	mov	r2,r5
   12040:	003f0306 	br	11c50 <__udivdi3+0x150>
   12044:	01400604 	movi	r5,24
   12048:	2805883a 	mov	r2,r5
   1204c:	003f0006 	br	11c50 <__udivdi3+0x150>
   12050:	01400204 	movi	r5,8
   12054:	2805883a 	mov	r2,r5
   12058:	003ec206 	br	11b64 <__udivdi3+0x64>
   1205c:	01400604 	movi	r5,24
   12060:	2805883a 	mov	r2,r5
   12064:	003ebf06 	br	11b64 <__udivdi3+0x64>
   12068:	01400204 	movi	r5,8
   1206c:	2805883a 	mov	r2,r5
   12070:	003f1706 	br	11cd0 <__udivdi3+0x1d0>
   12074:	01400604 	movi	r5,24
   12078:	2805883a 	mov	r2,r5
   1207c:	003f1406 	br	11cd0 <__udivdi3+0x1d0>
   12080:	89ff962e 	bgeu	r17,r7,11edc <__udivdi3+0x3dc>
   12084:	8d63883a 	add	r17,r17,r21
   12088:	843fffc4 	addi	r16,r16,-1
   1208c:	003f9306 	br	11edc <__udivdi3+0x3dc>
   12090:	147f802e 	bgeu	r2,r17,11e94 <__udivdi3+0x394>
   12094:	a53fffc4 	addi	r20,r20,-1
   12098:	1545883a 	add	r2,r2,r21
   1209c:	003f7d06 	br	11e94 <__udivdi3+0x394>
   120a0:	a53fffc4 	addi	r20,r20,-1
   120a4:	003ede06 	br	11c20 <__udivdi3+0x120>
   120a8:	b5bfffc4 	addi	r22,r22,-1
   120ac:	1405883a 	add	r2,r2,r16
   120b0:	003f2806 	br	11d54 <__udivdi3+0x254>
   120b4:	a53fffc4 	addi	r20,r20,-1
   120b8:	003f3706 	br	11d98 <__udivdi3+0x298>
   120bc:	147fbb2e 	bgeu	r2,r17,11fac <__udivdi3+0x4ac>
   120c0:	297fffc4 	addi	r5,r5,-1
   120c4:	1405883a 	add	r2,r2,r16
   120c8:	d9400415 	stw	r5,16(sp)
   120cc:	003fb706 	br	11fac <__udivdi3+0x4ac>
   120d0:	b5bfffc4 	addi	r22,r22,-1
   120d4:	1405883a 	add	r2,r2,r16
   120d8:	003ec006 	br	11bdc <__udivdi3+0xdc>

000120dc <__umoddi3>:
   120dc:	defff104 	addi	sp,sp,-60
   120e0:	dd800b15 	stw	r22,44(sp)
   120e4:	dd000915 	stw	r20,36(sp)
   120e8:	dc000515 	stw	r16,20(sp)
   120ec:	dfc00e15 	stw	ra,56(sp)
   120f0:	df000d15 	stw	fp,52(sp)
   120f4:	ddc00c15 	stw	r23,48(sp)
   120f8:	dd400a15 	stw	r21,40(sp)
   120fc:	dcc00815 	stw	r19,32(sp)
   12100:	dc800715 	stw	r18,28(sp)
   12104:	dc400615 	stw	r17,24(sp)
   12108:	3021883a 	mov	r16,r6
   1210c:	202d883a 	mov	r22,r4
   12110:	2829883a 	mov	r20,r5
   12114:	38002b1e 	bne	r7,zero,121c4 <__umoddi3+0xe8>
   12118:	29805036 	bltu	r5,r6,1225c <__umoddi3+0x180>
   1211c:	30008a26 	beq	r6,zero,12348 <__umoddi3+0x26c>
   12120:	00bfffd4 	movui	r2,65535
   12124:	14008236 	bltu	r2,r16,12330 <__umoddi3+0x254>
   12128:	00803fc4 	movi	r2,255
   1212c:	14013636 	bltu	r2,r16,12608 <__umoddi3+0x52c>
   12130:	000b883a 	mov	r5,zero
   12134:	0005883a 	mov	r2,zero
   12138:	8084d83a 	srl	r2,r16,r2
   1213c:	01020034 	movhi	r4,2048
   12140:	2100e904 	addi	r4,r4,932
   12144:	01800804 	movi	r6,32
   12148:	1105883a 	add	r2,r2,r4
   1214c:	10c00003 	ldbu	r3,0(r2)
   12150:	28c7883a 	add	r3,r5,r3
   12154:	30efc83a 	sub	r23,r6,r3
   12158:	b800941e 	bne	r23,zero,123ac <__umoddi3+0x2d0>
   1215c:	802ad43a 	srli	r21,r16,16
   12160:	a423c83a 	sub	r17,r20,r16
   12164:	0039883a 	mov	fp,zero
   12168:	853fffcc 	andi	r20,r16,65535
   1216c:	8809883a 	mov	r4,r17
   12170:	a80b883a 	mov	r5,r21
   12174:	0012cd00 	call	12cd0 <__udivsi3>
   12178:	8809883a 	mov	r4,r17
   1217c:	a80b883a 	mov	r5,r21
   12180:	a0a3383a 	mul	r17,r20,r2
   12184:	0012cd80 	call	12cd8 <__umodsi3>
   12188:	1004943a 	slli	r2,r2,16
   1218c:	b006d43a 	srli	r3,r22,16
   12190:	10c4b03a 	or	r2,r2,r3
   12194:	1440032e 	bgeu	r2,r17,121a4 <__umoddi3+0xc8>
   12198:	1405883a 	add	r2,r2,r16
   1219c:	14000136 	bltu	r2,r16,121a4 <__umoddi3+0xc8>
   121a0:	14413536 	bltu	r2,r17,12678 <__umoddi3+0x59c>
   121a4:	1463c83a 	sub	r17,r2,r17
   121a8:	8809883a 	mov	r4,r17
   121ac:	a80b883a 	mov	r5,r21
   121b0:	0012cd00 	call	12cd0 <__udivsi3>
   121b4:	8809883a 	mov	r4,r17
   121b8:	a0a3383a 	mul	r17,r20,r2
   121bc:	a80b883a 	mov	r5,r21
   121c0:	00004d06 	br	122f8 <__umoddi3+0x21c>
   121c4:	380d883a 	mov	r6,r7
   121c8:	29c0102e 	bgeu	r5,r7,1220c <__umoddi3+0x130>
   121cc:	2011883a 	mov	r8,r4
   121d0:	2813883a 	mov	r9,r5
   121d4:	4005883a 	mov	r2,r8
   121d8:	4807883a 	mov	r3,r9
   121dc:	dfc00e17 	ldw	ra,56(sp)
   121e0:	df000d17 	ldw	fp,52(sp)
   121e4:	ddc00c17 	ldw	r23,48(sp)
   121e8:	dd800b17 	ldw	r22,44(sp)
   121ec:	dd400a17 	ldw	r21,40(sp)
   121f0:	dd000917 	ldw	r20,36(sp)
   121f4:	dcc00817 	ldw	r19,32(sp)
   121f8:	dc800717 	ldw	r18,28(sp)
   121fc:	dc400617 	ldw	r17,24(sp)
   12200:	dc000517 	ldw	r16,20(sp)
   12204:	dec00f04 	addi	sp,sp,60
   12208:	f800283a 	ret
   1220c:	00bfffd4 	movui	r2,65535
   12210:	11c05a36 	bltu	r2,r7,1237c <__umoddi3+0x2a0>
   12214:	00803fc4 	movi	r2,255
   12218:	11c0fe36 	bltu	r2,r7,12614 <__umoddi3+0x538>
   1221c:	000b883a 	mov	r5,zero
   12220:	0005883a 	mov	r2,zero
   12224:	3084d83a 	srl	r2,r6,r2
   12228:	01020034 	movhi	r4,2048
   1222c:	2100e904 	addi	r4,r4,932
   12230:	01c00804 	movi	r7,32
   12234:	1105883a 	add	r2,r2,r4
   12238:	10c00003 	ldbu	r3,0(r2)
   1223c:	28c7883a 	add	r3,r5,r3
   12240:	38ebc83a 	sub	r21,r7,r3
   12244:	a800851e 	bne	r21,zero,1245c <__umoddi3+0x380>
   12248:	35005236 	bltu	r6,r20,12394 <__umoddi3+0x2b8>
   1224c:	b400512e 	bgeu	r22,r16,12394 <__umoddi3+0x2b8>
   12250:	b011883a 	mov	r8,r22
   12254:	a013883a 	mov	r9,r20
   12258:	003fde06 	br	121d4 <__umoddi3+0xf8>
   1225c:	00bfffd4 	movui	r2,65535
   12260:	11804036 	bltu	r2,r6,12364 <__umoddi3+0x288>
   12264:	00803fc4 	movi	r2,255
   12268:	1180ed36 	bltu	r2,r6,12620 <__umoddi3+0x544>
   1226c:	000b883a 	mov	r5,zero
   12270:	0005883a 	mov	r2,zero
   12274:	8084d83a 	srl	r2,r16,r2
   12278:	01020034 	movhi	r4,2048
   1227c:	2100e904 	addi	r4,r4,932
   12280:	01800804 	movi	r6,32
   12284:	1105883a 	add	r2,r2,r4
   12288:	10c00003 	ldbu	r3,0(r2)
   1228c:	28c7883a 	add	r3,r5,r3
   12290:	30c7c83a 	sub	r3,r6,r3
   12294:	1800bf1e 	bne	r3,zero,12594 <__umoddi3+0x4b8>
   12298:	0039883a 	mov	fp,zero
   1229c:	802ad43a 	srli	r21,r16,16
   122a0:	a009883a 	mov	r4,r20
   122a4:	85ffffcc 	andi	r23,r16,65535
   122a8:	a80b883a 	mov	r5,r21
   122ac:	0012cd00 	call	12cd0 <__udivsi3>
   122b0:	a009883a 	mov	r4,r20
   122b4:	a80b883a 	mov	r5,r21
   122b8:	b8a3383a 	mul	r17,r23,r2
   122bc:	0012cd80 	call	12cd8 <__umodsi3>
   122c0:	1004943a 	slli	r2,r2,16
   122c4:	b006d43a 	srli	r3,r22,16
   122c8:	10c4b03a 	or	r2,r2,r3
   122cc:	1440032e 	bgeu	r2,r17,122dc <__umoddi3+0x200>
   122d0:	1405883a 	add	r2,r2,r16
   122d4:	14000136 	bltu	r2,r16,122dc <__umoddi3+0x200>
   122d8:	1440e536 	bltu	r2,r17,12670 <__umoddi3+0x594>
   122dc:	1463c83a 	sub	r17,r2,r17
   122e0:	8809883a 	mov	r4,r17
   122e4:	a80b883a 	mov	r5,r21
   122e8:	0012cd00 	call	12cd0 <__udivsi3>
   122ec:	8809883a 	mov	r4,r17
   122f0:	b8a3383a 	mul	r17,r23,r2
   122f4:	a80b883a 	mov	r5,r21
   122f8:	0012cd80 	call	12cd8 <__umodsi3>
   122fc:	1004943a 	slli	r2,r2,16
   12300:	b0ffffcc 	andi	r3,r22,65535
   12304:	10c4b03a 	or	r2,r2,r3
   12308:	1440042e 	bgeu	r2,r17,1231c <__umoddi3+0x240>
   1230c:	1405883a 	add	r2,r2,r16
   12310:	14000236 	bltu	r2,r16,1231c <__umoddi3+0x240>
   12314:	1440012e 	bgeu	r2,r17,1231c <__umoddi3+0x240>
   12318:	1405883a 	add	r2,r2,r16
   1231c:	1445c83a 	sub	r2,r2,r17
   12320:	1724d83a 	srl	r18,r2,fp
   12324:	0013883a 	mov	r9,zero
   12328:	9011883a 	mov	r8,r18
   1232c:	003fa906 	br	121d4 <__umoddi3+0xf8>
   12330:	00804034 	movhi	r2,256
   12334:	10bfffc4 	addi	r2,r2,-1
   12338:	1400b036 	bltu	r2,r16,125fc <__umoddi3+0x520>
   1233c:	01400404 	movi	r5,16
   12340:	2805883a 	mov	r2,r5
   12344:	003f7c06 	br	12138 <__umoddi3+0x5c>
   12348:	01000044 	movi	r4,1
   1234c:	000b883a 	mov	r5,zero
   12350:	0012cd00 	call	12cd0 <__udivsi3>
   12354:	1021883a 	mov	r16,r2
   12358:	00bfffd4 	movui	r2,65535
   1235c:	143ff436 	bltu	r2,r16,12330 <__umoddi3+0x254>
   12360:	003f7106 	br	12128 <__umoddi3+0x4c>
   12364:	00804034 	movhi	r2,256
   12368:	10bfffc4 	addi	r2,r2,-1
   1236c:	1180af36 	bltu	r2,r6,1262c <__umoddi3+0x550>
   12370:	01400404 	movi	r5,16
   12374:	2805883a 	mov	r2,r5
   12378:	003fbe06 	br	12274 <__umoddi3+0x198>
   1237c:	00804034 	movhi	r2,256
   12380:	10bfffc4 	addi	r2,r2,-1
   12384:	11c0ac36 	bltu	r2,r7,12638 <__umoddi3+0x55c>
   12388:	01400404 	movi	r5,16
   1238c:	2805883a 	mov	r2,r5
   12390:	003fa406 	br	12224 <__umoddi3+0x148>
   12394:	b409c83a 	sub	r4,r22,r16
   12398:	b105803a 	cmpltu	r2,r22,r4
   1239c:	a187c83a 	sub	r3,r20,r6
   123a0:	18a9c83a 	sub	r20,r3,r2
   123a4:	202d883a 	mov	r22,r4
   123a8:	003fa906 	br	12250 <__umoddi3+0x174>
   123ac:	85e0983a 	sll	r16,r16,r23
   123b0:	35c5c83a 	sub	r2,r6,r23
   123b4:	a0a2d83a 	srl	r17,r20,r2
   123b8:	802ad43a 	srli	r21,r16,16
   123bc:	b084d83a 	srl	r2,r22,r2
   123c0:	a5c6983a 	sll	r3,r20,r23
   123c4:	8809883a 	mov	r4,r17
   123c8:	a80b883a 	mov	r5,r21
   123cc:	1886b03a 	or	r3,r3,r2
   123d0:	d8c00115 	stw	r3,4(sp)
   123d4:	853fffcc 	andi	r20,r16,65535
   123d8:	0012cd00 	call	12cd0 <__udivsi3>
   123dc:	8809883a 	mov	r4,r17
   123e0:	a80b883a 	mov	r5,r21
   123e4:	a0a3383a 	mul	r17,r20,r2
   123e8:	0012cd80 	call	12cd8 <__umodsi3>
   123ec:	d9000117 	ldw	r4,4(sp)
   123f0:	1004943a 	slli	r2,r2,16
   123f4:	b839883a 	mov	fp,r23
   123f8:	2006d43a 	srli	r3,r4,16
   123fc:	10c4b03a 	or	r2,r2,r3
   12400:	1440022e 	bgeu	r2,r17,1240c <__umoddi3+0x330>
   12404:	1405883a 	add	r2,r2,r16
   12408:	1400962e 	bgeu	r2,r16,12664 <__umoddi3+0x588>
   1240c:	1463c83a 	sub	r17,r2,r17
   12410:	8809883a 	mov	r4,r17
   12414:	a80b883a 	mov	r5,r21
   12418:	0012cd00 	call	12cd0 <__udivsi3>
   1241c:	8809883a 	mov	r4,r17
   12420:	a80b883a 	mov	r5,r21
   12424:	a0a3383a 	mul	r17,r20,r2
   12428:	0012cd80 	call	12cd8 <__umodsi3>
   1242c:	d9400117 	ldw	r5,4(sp)
   12430:	1004943a 	slli	r2,r2,16
   12434:	28ffffcc 	andi	r3,r5,65535
   12438:	10c4b03a 	or	r2,r2,r3
   1243c:	1440042e 	bgeu	r2,r17,12450 <__umoddi3+0x374>
   12440:	1405883a 	add	r2,r2,r16
   12444:	14000236 	bltu	r2,r16,12450 <__umoddi3+0x374>
   12448:	1440012e 	bgeu	r2,r17,12450 <__umoddi3+0x374>
   1244c:	1405883a 	add	r2,r2,r16
   12450:	b5ec983a 	sll	r22,r22,r23
   12454:	1463c83a 	sub	r17,r2,r17
   12458:	003f4406 	br	1216c <__umoddi3+0x90>
   1245c:	3d4fc83a 	sub	r7,r7,r21
   12460:	3546983a 	sll	r3,r6,r21
   12464:	81c4d83a 	srl	r2,r16,r7
   12468:	a1e2d83a 	srl	r17,r20,r7
   1246c:	a54c983a 	sll	r6,r20,r21
   12470:	18aeb03a 	or	r23,r3,r2
   12474:	b828d43a 	srli	r20,r23,16
   12478:	b1c4d83a 	srl	r2,r22,r7
   1247c:	8809883a 	mov	r4,r17
   12480:	a00b883a 	mov	r5,r20
   12484:	308cb03a 	or	r6,r6,r2
   12488:	d9c00315 	stw	r7,12(sp)
   1248c:	d9800215 	stw	r6,8(sp)
   12490:	0012cd00 	call	12cd0 <__udivsi3>
   12494:	8809883a 	mov	r4,r17
   12498:	a00b883a 	mov	r5,r20
   1249c:	1039883a 	mov	fp,r2
   124a0:	0012cd80 	call	12cd8 <__umodsi3>
   124a4:	b8ffffcc 	andi	r3,r23,65535
   124a8:	d8c00415 	stw	r3,16(sp)
   124ac:	d9000217 	ldw	r4,8(sp)
   124b0:	d9400417 	ldw	r5,16(sp)
   124b4:	1004943a 	slli	r2,r2,16
   124b8:	2006d43a 	srli	r3,r4,16
   124bc:	8560983a 	sll	r16,r16,r21
   124c0:	2f23383a 	mul	r17,r5,fp
   124c4:	10c4b03a 	or	r2,r2,r3
   124c8:	dc000015 	stw	r16,0(sp)
   124cc:	b56c983a 	sll	r22,r22,r21
   124d0:	1440032e 	bgeu	r2,r17,124e0 <__umoddi3+0x404>
   124d4:	15c5883a 	add	r2,r2,r23
   124d8:	e73fffc4 	addi	fp,fp,-1
   124dc:	15c05d2e 	bgeu	r2,r23,12654 <__umoddi3+0x578>
   124e0:	1463c83a 	sub	r17,r2,r17
   124e4:	8809883a 	mov	r4,r17
   124e8:	a00b883a 	mov	r5,r20
   124ec:	0012cd00 	call	12cd0 <__udivsi3>
   124f0:	8809883a 	mov	r4,r17
   124f4:	a00b883a 	mov	r5,r20
   124f8:	1021883a 	mov	r16,r2
   124fc:	0012cd80 	call	12cd8 <__umodsi3>
   12500:	d8c00417 	ldw	r3,16(sp)
   12504:	d9000217 	ldw	r4,8(sp)
   12508:	1004943a 	slli	r2,r2,16
   1250c:	1c23383a 	mul	r17,r3,r16
   12510:	20ffffcc 	andi	r3,r4,65535
   12514:	10ceb03a 	or	r7,r2,r3
   12518:	3c40032e 	bgeu	r7,r17,12528 <__umoddi3+0x44c>
   1251c:	3dcf883a 	add	r7,r7,r23
   12520:	843fffc4 	addi	r16,r16,-1
   12524:	3dc0472e 	bgeu	r7,r23,12644 <__umoddi3+0x568>
   12528:	e004943a 	slli	r2,fp,16
   1252c:	d9400017 	ldw	r5,0(sp)
   12530:	3c4fc83a 	sub	r7,r7,r17
   12534:	8084b03a 	or	r2,r16,r2
   12538:	28ffffcc 	andi	r3,r5,65535
   1253c:	280cd43a 	srli	r6,r5,16
   12540:	100ad43a 	srli	r5,r2,16
   12544:	10bfffcc 	andi	r2,r2,65535
   12548:	10d1383a 	mul	r8,r2,r3
   1254c:	28c7383a 	mul	r3,r5,r3
   12550:	1185383a 	mul	r2,r2,r6
   12554:	4008d43a 	srli	r4,r8,16
   12558:	298b383a 	mul	r5,r5,r6
   1255c:	10c5883a 	add	r2,r2,r3
   12560:	2089883a 	add	r4,r4,r2
   12564:	20c0022e 	bgeu	r4,r3,12570 <__umoddi3+0x494>
   12568:	00800074 	movhi	r2,1
   1256c:	288b883a 	add	r5,r5,r2
   12570:	2004d43a 	srli	r2,r4,16
   12574:	2008943a 	slli	r4,r4,16
   12578:	40ffffcc 	andi	r3,r8,65535
   1257c:	288b883a 	add	r5,r5,r2
   12580:	20c9883a 	add	r4,r4,r3
   12584:	39400b36 	bltu	r7,r5,125b4 <__umoddi3+0x4d8>
   12588:	39403d26 	beq	r7,r5,12680 <__umoddi3+0x5a4>
   1258c:	394bc83a 	sub	r5,r7,r5
   12590:	00000f06 	br	125d0 <__umoddi3+0x4f4>
   12594:	30c5c83a 	sub	r2,r6,r3
   12598:	1839883a 	mov	fp,r3
   1259c:	b084d83a 	srl	r2,r22,r2
   125a0:	a0c6983a 	sll	r3,r20,r3
   125a4:	8720983a 	sll	r16,r16,fp
   125a8:	b72c983a 	sll	r22,r22,fp
   125ac:	18a8b03a 	or	r20,r3,r2
   125b0:	003f3a06 	br	1229c <__umoddi3+0x1c0>
   125b4:	d8c00017 	ldw	r3,0(sp)
   125b8:	20c5c83a 	sub	r2,r4,r3
   125bc:	2089803a 	cmpltu	r4,r4,r2
   125c0:	2dc7c83a 	sub	r3,r5,r23
   125c4:	1907c83a 	sub	r3,r3,r4
   125c8:	38cbc83a 	sub	r5,r7,r3
   125cc:	1009883a 	mov	r4,r2
   125d0:	b105c83a 	sub	r2,r22,r4
   125d4:	b087803a 	cmpltu	r3,r22,r2
   125d8:	28c7c83a 	sub	r3,r5,r3
   125dc:	d9400317 	ldw	r5,12(sp)
   125e0:	1544d83a 	srl	r2,r2,r21
   125e4:	1948983a 	sll	r4,r3,r5
   125e8:	1d46d83a 	srl	r3,r3,r21
   125ec:	20a4b03a 	or	r18,r4,r2
   125f0:	9011883a 	mov	r8,r18
   125f4:	1813883a 	mov	r9,r3
   125f8:	003ef606 	br	121d4 <__umoddi3+0xf8>
   125fc:	01400604 	movi	r5,24
   12600:	2805883a 	mov	r2,r5
   12604:	003ecc06 	br	12138 <__umoddi3+0x5c>
   12608:	01400204 	movi	r5,8
   1260c:	2805883a 	mov	r2,r5
   12610:	003ec906 	br	12138 <__umoddi3+0x5c>
   12614:	01400204 	movi	r5,8
   12618:	2805883a 	mov	r2,r5
   1261c:	003f0106 	br	12224 <__umoddi3+0x148>
   12620:	01400204 	movi	r5,8
   12624:	2805883a 	mov	r2,r5
   12628:	003f1206 	br	12274 <__umoddi3+0x198>
   1262c:	01400604 	movi	r5,24
   12630:	2805883a 	mov	r2,r5
   12634:	003f0f06 	br	12274 <__umoddi3+0x198>
   12638:	01400604 	movi	r5,24
   1263c:	2805883a 	mov	r2,r5
   12640:	003ef806 	br	12224 <__umoddi3+0x148>
   12644:	3c7fb82e 	bgeu	r7,r17,12528 <__umoddi3+0x44c>
   12648:	843fffc4 	addi	r16,r16,-1
   1264c:	3dcf883a 	add	r7,r7,r23
   12650:	003fb506 	br	12528 <__umoddi3+0x44c>
   12654:	147fa22e 	bgeu	r2,r17,124e0 <__umoddi3+0x404>
   12658:	e73fffc4 	addi	fp,fp,-1
   1265c:	15c5883a 	add	r2,r2,r23
   12660:	003f9f06 	br	124e0 <__umoddi3+0x404>
   12664:	147f692e 	bgeu	r2,r17,1240c <__umoddi3+0x330>
   12668:	1405883a 	add	r2,r2,r16
   1266c:	003f6706 	br	1240c <__umoddi3+0x330>
   12670:	1405883a 	add	r2,r2,r16
   12674:	003f1906 	br	122dc <__umoddi3+0x200>
   12678:	1405883a 	add	r2,r2,r16
   1267c:	003ec906 	br	121a4 <__umoddi3+0xc8>
   12680:	b13fcc36 	bltu	r22,r4,125b4 <__umoddi3+0x4d8>
   12684:	000b883a 	mov	r5,zero
   12688:	003fd106 	br	125d0 <__umoddi3+0x4f4>

0001268c <__nesf2>:
   1268c:	defff304 	addi	sp,sp,-52
   12690:	dc400b15 	stw	r17,44(sp)
   12694:	dc400204 	addi	r17,sp,8
   12698:	dc000a15 	stw	r16,40(sp)
   1269c:	d9000015 	stw	r4,0(sp)
   126a0:	d9400115 	stw	r5,4(sp)
   126a4:	d809883a 	mov	r4,sp
   126a8:	880b883a 	mov	r5,r17
   126ac:	dc000604 	addi	r16,sp,24
   126b0:	dfc00c15 	stw	ra,48(sp)
   126b4:	0012ce00 	call	12ce0 <__unpack_f>
   126b8:	d9000104 	addi	r4,sp,4
   126bc:	800b883a 	mov	r5,r16
   126c0:	0012ce00 	call	12ce0 <__unpack_f>
   126c4:	d8800217 	ldw	r2,8(sp)
   126c8:	00c00044 	movi	r3,1
   126cc:	180d883a 	mov	r6,r3
   126d0:	1880062e 	bgeu	r3,r2,126ec <__nesf2+0x60>
   126d4:	d8800617 	ldw	r2,24(sp)
   126d8:	8809883a 	mov	r4,r17
   126dc:	800b883a 	mov	r5,r16
   126e0:	1880022e 	bgeu	r3,r2,126ec <__nesf2+0x60>
   126e4:	0012da80 	call	12da8 <__fpcmp_parts_f>
   126e8:	100d883a 	mov	r6,r2
   126ec:	3005883a 	mov	r2,r6
   126f0:	dfc00c17 	ldw	ra,48(sp)
   126f4:	dc400b17 	ldw	r17,44(sp)
   126f8:	dc000a17 	ldw	r16,40(sp)
   126fc:	dec00d04 	addi	sp,sp,52
   12700:	f800283a 	ret

00012704 <__gtsf2>:
   12704:	defff304 	addi	sp,sp,-52
   12708:	dc400b15 	stw	r17,44(sp)
   1270c:	dc400204 	addi	r17,sp,8
   12710:	dc000a15 	stw	r16,40(sp)
   12714:	d9000015 	stw	r4,0(sp)
   12718:	d9400115 	stw	r5,4(sp)
   1271c:	d809883a 	mov	r4,sp
   12720:	880b883a 	mov	r5,r17
   12724:	dc000604 	addi	r16,sp,24
   12728:	dfc00c15 	stw	ra,48(sp)
   1272c:	0012ce00 	call	12ce0 <__unpack_f>
   12730:	d9000104 	addi	r4,sp,4
   12734:	800b883a 	mov	r5,r16
   12738:	0012ce00 	call	12ce0 <__unpack_f>
   1273c:	d8800217 	ldw	r2,8(sp)
   12740:	00c00044 	movi	r3,1
   12744:	01bfffc4 	movi	r6,-1
   12748:	1880062e 	bgeu	r3,r2,12764 <__gtsf2+0x60>
   1274c:	d8800617 	ldw	r2,24(sp)
   12750:	8809883a 	mov	r4,r17
   12754:	800b883a 	mov	r5,r16
   12758:	1880022e 	bgeu	r3,r2,12764 <__gtsf2+0x60>
   1275c:	0012da80 	call	12da8 <__fpcmp_parts_f>
   12760:	100d883a 	mov	r6,r2
   12764:	3005883a 	mov	r2,r6
   12768:	dfc00c17 	ldw	ra,48(sp)
   1276c:	dc400b17 	ldw	r17,44(sp)
   12770:	dc000a17 	ldw	r16,40(sp)
   12774:	dec00d04 	addi	sp,sp,52
   12778:	f800283a 	ret

0001277c <__ltsf2>:
   1277c:	defff304 	addi	sp,sp,-52
   12780:	dc400b15 	stw	r17,44(sp)
   12784:	dc400204 	addi	r17,sp,8
   12788:	dc000a15 	stw	r16,40(sp)
   1278c:	d9000015 	stw	r4,0(sp)
   12790:	d9400115 	stw	r5,4(sp)
   12794:	d809883a 	mov	r4,sp
   12798:	880b883a 	mov	r5,r17
   1279c:	dc000604 	addi	r16,sp,24
   127a0:	dfc00c15 	stw	ra,48(sp)
   127a4:	0012ce00 	call	12ce0 <__unpack_f>
   127a8:	d9000104 	addi	r4,sp,4
   127ac:	800b883a 	mov	r5,r16
   127b0:	0012ce00 	call	12ce0 <__unpack_f>
   127b4:	d8800217 	ldw	r2,8(sp)
   127b8:	00c00044 	movi	r3,1
   127bc:	180d883a 	mov	r6,r3
   127c0:	1880062e 	bgeu	r3,r2,127dc <__ltsf2+0x60>
   127c4:	d8800617 	ldw	r2,24(sp)
   127c8:	8809883a 	mov	r4,r17
   127cc:	800b883a 	mov	r5,r16
   127d0:	1880022e 	bgeu	r3,r2,127dc <__ltsf2+0x60>
   127d4:	0012da80 	call	12da8 <__fpcmp_parts_f>
   127d8:	100d883a 	mov	r6,r2
   127dc:	3005883a 	mov	r2,r6
   127e0:	dfc00c17 	ldw	ra,48(sp)
   127e4:	dc400b17 	ldw	r17,44(sp)
   127e8:	dc000a17 	ldw	r16,40(sp)
   127ec:	dec00d04 	addi	sp,sp,52
   127f0:	f800283a 	ret

000127f4 <__eqdf2>:
   127f4:	deffef04 	addi	sp,sp,-68
   127f8:	dc400f15 	stw	r17,60(sp)
   127fc:	dc400404 	addi	r17,sp,16
   12800:	2005883a 	mov	r2,r4
   12804:	2807883a 	mov	r3,r5
   12808:	dc000e15 	stw	r16,56(sp)
   1280c:	d809883a 	mov	r4,sp
   12810:	880b883a 	mov	r5,r17
   12814:	dc000904 	addi	r16,sp,36
   12818:	d8c00115 	stw	r3,4(sp)
   1281c:	d8800015 	stw	r2,0(sp)
   12820:	d9800215 	stw	r6,8(sp)
   12824:	dfc01015 	stw	ra,64(sp)
   12828:	d9c00315 	stw	r7,12(sp)
   1282c:	0007e000 	call	7e00 <__unpack_d>
   12830:	d9000204 	addi	r4,sp,8
   12834:	800b883a 	mov	r5,r16
   12838:	0007e000 	call	7e00 <__unpack_d>
   1283c:	d8800417 	ldw	r2,16(sp)
   12840:	00c00044 	movi	r3,1
   12844:	180d883a 	mov	r6,r3
   12848:	1880062e 	bgeu	r3,r2,12864 <__eqdf2+0x70>
   1284c:	d8800917 	ldw	r2,36(sp)
   12850:	8809883a 	mov	r4,r17
   12854:	800b883a 	mov	r5,r16
   12858:	1880022e 	bgeu	r3,r2,12864 <__eqdf2+0x70>
   1285c:	0007f380 	call	7f38 <__fpcmp_parts_d>
   12860:	100d883a 	mov	r6,r2
   12864:	3005883a 	mov	r2,r6
   12868:	dfc01017 	ldw	ra,64(sp)
   1286c:	dc400f17 	ldw	r17,60(sp)
   12870:	dc000e17 	ldw	r16,56(sp)
   12874:	dec01104 	addi	sp,sp,68
   12878:	f800283a 	ret

0001287c <__nedf2>:
   1287c:	deffef04 	addi	sp,sp,-68
   12880:	dc400f15 	stw	r17,60(sp)
   12884:	dc400404 	addi	r17,sp,16
   12888:	2005883a 	mov	r2,r4
   1288c:	2807883a 	mov	r3,r5
   12890:	dc000e15 	stw	r16,56(sp)
   12894:	d809883a 	mov	r4,sp
   12898:	880b883a 	mov	r5,r17
   1289c:	dc000904 	addi	r16,sp,36
   128a0:	d8c00115 	stw	r3,4(sp)
   128a4:	d8800015 	stw	r2,0(sp)
   128a8:	d9800215 	stw	r6,8(sp)
   128ac:	dfc01015 	stw	ra,64(sp)
   128b0:	d9c00315 	stw	r7,12(sp)
   128b4:	0007e000 	call	7e00 <__unpack_d>
   128b8:	d9000204 	addi	r4,sp,8
   128bc:	800b883a 	mov	r5,r16
   128c0:	0007e000 	call	7e00 <__unpack_d>
   128c4:	d8800417 	ldw	r2,16(sp)
   128c8:	00c00044 	movi	r3,1
   128cc:	180d883a 	mov	r6,r3
   128d0:	1880062e 	bgeu	r3,r2,128ec <__nedf2+0x70>
   128d4:	d8800917 	ldw	r2,36(sp)
   128d8:	8809883a 	mov	r4,r17
   128dc:	800b883a 	mov	r5,r16
   128e0:	1880022e 	bgeu	r3,r2,128ec <__nedf2+0x70>
   128e4:	0007f380 	call	7f38 <__fpcmp_parts_d>
   128e8:	100d883a 	mov	r6,r2
   128ec:	3005883a 	mov	r2,r6
   128f0:	dfc01017 	ldw	ra,64(sp)
   128f4:	dc400f17 	ldw	r17,60(sp)
   128f8:	dc000e17 	ldw	r16,56(sp)
   128fc:	dec01104 	addi	sp,sp,68
   12900:	f800283a 	ret

00012904 <__ltdf2>:
   12904:	deffef04 	addi	sp,sp,-68
   12908:	dc400f15 	stw	r17,60(sp)
   1290c:	dc400404 	addi	r17,sp,16
   12910:	2005883a 	mov	r2,r4
   12914:	2807883a 	mov	r3,r5
   12918:	dc000e15 	stw	r16,56(sp)
   1291c:	d809883a 	mov	r4,sp
   12920:	880b883a 	mov	r5,r17
   12924:	dc000904 	addi	r16,sp,36
   12928:	d8c00115 	stw	r3,4(sp)
   1292c:	d8800015 	stw	r2,0(sp)
   12930:	d9800215 	stw	r6,8(sp)
   12934:	dfc01015 	stw	ra,64(sp)
   12938:	d9c00315 	stw	r7,12(sp)
   1293c:	0007e000 	call	7e00 <__unpack_d>
   12940:	d9000204 	addi	r4,sp,8
   12944:	800b883a 	mov	r5,r16
   12948:	0007e000 	call	7e00 <__unpack_d>
   1294c:	d8800417 	ldw	r2,16(sp)
   12950:	00c00044 	movi	r3,1
   12954:	180d883a 	mov	r6,r3
   12958:	1880062e 	bgeu	r3,r2,12974 <__ltdf2+0x70>
   1295c:	d8800917 	ldw	r2,36(sp)
   12960:	8809883a 	mov	r4,r17
   12964:	800b883a 	mov	r5,r16
   12968:	1880022e 	bgeu	r3,r2,12974 <__ltdf2+0x70>
   1296c:	0007f380 	call	7f38 <__fpcmp_parts_d>
   12970:	100d883a 	mov	r6,r2
   12974:	3005883a 	mov	r2,r6
   12978:	dfc01017 	ldw	ra,64(sp)
   1297c:	dc400f17 	ldw	r17,60(sp)
   12980:	dc000e17 	ldw	r16,56(sp)
   12984:	dec01104 	addi	sp,sp,68
   12988:	f800283a 	ret

0001298c <__truncdfsf2>:
   1298c:	defff804 	addi	sp,sp,-32
   12990:	2005883a 	mov	r2,r4
   12994:	2807883a 	mov	r3,r5
   12998:	d809883a 	mov	r4,sp
   1299c:	d9400204 	addi	r5,sp,8
   129a0:	d8c00115 	stw	r3,4(sp)
   129a4:	d8800015 	stw	r2,0(sp)
   129a8:	dfc00715 	stw	ra,28(sp)
   129ac:	0007e000 	call	7e00 <__unpack_d>
   129b0:	d9c00517 	ldw	r7,20(sp)
   129b4:	da000617 	ldw	r8,24(sp)
   129b8:	02d00034 	movhi	r11,16384
   129bc:	5affffc4 	addi	r11,r11,-1
   129c0:	3812d7ba 	srli	r9,r7,30
   129c4:	401a90ba 	slli	r13,r8,2
   129c8:	3ac4703a 	and	r2,r7,r11
   129cc:	0007883a 	mov	r3,zero
   129d0:	6a52b03a 	or	r9,r13,r9
   129d4:	10c4b03a 	or	r2,r2,r3
   129d8:	d9000217 	ldw	r4,8(sp)
   129dc:	d9400317 	ldw	r5,12(sp)
   129e0:	d9800417 	ldw	r6,16(sp)
   129e4:	480f883a 	mov	r7,r9
   129e8:	10000126 	beq	r2,zero,129f0 <__truncdfsf2+0x64>
   129ec:	49c00054 	ori	r7,r9,1
   129f0:	0012e500 	call	12e50 <__make_fp>
   129f4:	dfc00717 	ldw	ra,28(sp)
   129f8:	dec00804 	addi	sp,sp,32
   129fc:	f800283a 	ret

00012a00 <__floatunsidf>:
   12a00:	defff204 	addi	sp,sp,-56
   12a04:	dfc00d15 	stw	ra,52(sp)
   12a08:	ddc00c15 	stw	r23,48(sp)
   12a0c:	dd800b15 	stw	r22,44(sp)
   12a10:	dd400a15 	stw	r21,40(sp)
   12a14:	dd000915 	stw	r20,36(sp)
   12a18:	dcc00815 	stw	r19,32(sp)
   12a1c:	dc800715 	stw	r18,28(sp)
   12a20:	dc400615 	stw	r17,24(sp)
   12a24:	dc000515 	stw	r16,20(sp)
   12a28:	d8000115 	stw	zero,4(sp)
   12a2c:	20000f1e 	bne	r4,zero,12a6c <__floatunsidf+0x6c>
   12a30:	00800084 	movi	r2,2
   12a34:	d8800015 	stw	r2,0(sp)
   12a38:	d809883a 	mov	r4,sp
   12a3c:	0007aec0 	call	7aec <__pack_d>
   12a40:	dfc00d17 	ldw	ra,52(sp)
   12a44:	ddc00c17 	ldw	r23,48(sp)
   12a48:	dd800b17 	ldw	r22,44(sp)
   12a4c:	dd400a17 	ldw	r21,40(sp)
   12a50:	dd000917 	ldw	r20,36(sp)
   12a54:	dcc00817 	ldw	r19,32(sp)
   12a58:	dc800717 	ldw	r18,28(sp)
   12a5c:	dc400617 	ldw	r17,24(sp)
   12a60:	dc000517 	ldw	r16,20(sp)
   12a64:	dec00e04 	addi	sp,sp,56
   12a68:	f800283a 	ret
   12a6c:	008000c4 	movi	r2,3
   12a70:	00c00f04 	movi	r3,60
   12a74:	002f883a 	mov	r23,zero
   12a78:	202d883a 	mov	r22,r4
   12a7c:	d8800015 	stw	r2,0(sp)
   12a80:	d8c00215 	stw	r3,8(sp)
   12a84:	d9000315 	stw	r4,12(sp)
   12a88:	ddc00415 	stw	r23,16(sp)
   12a8c:	0007a6c0 	call	7a6c <__clzsi2>
   12a90:	12400744 	addi	r9,r2,29
   12a94:	48000b16 	blt	r9,zero,12ac4 <__floatunsidf+0xc4>
   12a98:	483fe726 	beq	r9,zero,12a38 <__floatunsidf+0x38>
   12a9c:	10bfff44 	addi	r2,r2,-3
   12aa0:	10002e16 	blt	r2,zero,12b5c <__floatunsidf+0x15c>
   12aa4:	b0a2983a 	sll	r17,r22,r2
   12aa8:	0021883a 	mov	r16,zero
   12aac:	d8800217 	ldw	r2,8(sp)
   12ab0:	dc400415 	stw	r17,16(sp)
   12ab4:	dc000315 	stw	r16,12(sp)
   12ab8:	1245c83a 	sub	r2,r2,r9
   12abc:	d8800215 	stw	r2,8(sp)
   12ac0:	003fdd06 	br	12a38 <__floatunsidf+0x38>
   12ac4:	0255c83a 	sub	r10,zero,r9
   12ac8:	51bff804 	addi	r6,r10,-32
   12acc:	30001b16 	blt	r6,zero,12b3c <__floatunsidf+0x13c>
   12ad0:	b9a8d83a 	srl	r20,r23,r6
   12ad4:	002b883a 	mov	r21,zero
   12ad8:	000f883a 	mov	r7,zero
   12adc:	01000044 	movi	r4,1
   12ae0:	0011883a 	mov	r8,zero
   12ae4:	30002516 	blt	r6,zero,12b7c <__floatunsidf+0x17c>
   12ae8:	21a6983a 	sll	r19,r4,r6
   12aec:	0025883a 	mov	r18,zero
   12af0:	00bfffc4 	movi	r2,-1
   12af4:	9089883a 	add	r4,r18,r2
   12af8:	988b883a 	add	r5,r19,r2
   12afc:	248d803a 	cmpltu	r6,r4,r18
   12b00:	314b883a 	add	r5,r6,r5
   12b04:	b104703a 	and	r2,r22,r4
   12b08:	b946703a 	and	r3,r23,r5
   12b0c:	10c4b03a 	or	r2,r2,r3
   12b10:	10000226 	beq	r2,zero,12b1c <__floatunsidf+0x11c>
   12b14:	01c00044 	movi	r7,1
   12b18:	0011883a 	mov	r8,zero
   12b1c:	d9000217 	ldw	r4,8(sp)
   12b20:	a1c4b03a 	or	r2,r20,r7
   12b24:	aa06b03a 	or	r3,r21,r8
   12b28:	2249c83a 	sub	r4,r4,r9
   12b2c:	d8c00415 	stw	r3,16(sp)
   12b30:	d9000215 	stw	r4,8(sp)
   12b34:	d8800315 	stw	r2,12(sp)
   12b38:	003fbf06 	br	12a38 <__floatunsidf+0x38>
   12b3c:	bdc7883a 	add	r3,r23,r23
   12b40:	008007c4 	movi	r2,31
   12b44:	1285c83a 	sub	r2,r2,r10
   12b48:	1886983a 	sll	r3,r3,r2
   12b4c:	b2a8d83a 	srl	r20,r22,r10
   12b50:	baaad83a 	srl	r21,r23,r10
   12b54:	1d28b03a 	or	r20,r3,r20
   12b58:	003fdf06 	br	12ad8 <__floatunsidf+0xd8>
   12b5c:	b006d07a 	srli	r3,r22,1
   12b60:	008007c4 	movi	r2,31
   12b64:	1245c83a 	sub	r2,r2,r9
   12b68:	1886d83a 	srl	r3,r3,r2
   12b6c:	ba62983a 	sll	r17,r23,r9
   12b70:	b260983a 	sll	r16,r22,r9
   12b74:	1c62b03a 	or	r17,r3,r17
   12b78:	003fcc06 	br	12aac <__floatunsidf+0xac>
   12b7c:	2006d07a 	srli	r3,r4,1
   12b80:	008007c4 	movi	r2,31
   12b84:	1285c83a 	sub	r2,r2,r10
   12b88:	18a6d83a 	srl	r19,r3,r2
   12b8c:	22a4983a 	sll	r18,r4,r10
   12b90:	003fd706 	br	12af0 <__floatunsidf+0xf0>

00012b94 <udivmodsi4>:
   12b94:	29001b2e 	bgeu	r5,r4,12c04 <udivmodsi4+0x70>
   12b98:	28001a16 	blt	r5,zero,12c04 <udivmodsi4+0x70>
   12b9c:	00800044 	movi	r2,1
   12ba0:	0007883a 	mov	r3,zero
   12ba4:	01c007c4 	movi	r7,31
   12ba8:	00000306 	br	12bb8 <udivmodsi4+0x24>
   12bac:	19c01326 	beq	r3,r7,12bfc <udivmodsi4+0x68>
   12bb0:	18c00044 	addi	r3,r3,1
   12bb4:	28000416 	blt	r5,zero,12bc8 <udivmodsi4+0x34>
   12bb8:	294b883a 	add	r5,r5,r5
   12bbc:	1085883a 	add	r2,r2,r2
   12bc0:	293ffa36 	bltu	r5,r4,12bac <udivmodsi4+0x18>
   12bc4:	10000d26 	beq	r2,zero,12bfc <udivmodsi4+0x68>
   12bc8:	0007883a 	mov	r3,zero
   12bcc:	21400236 	bltu	r4,r5,12bd8 <udivmodsi4+0x44>
   12bd0:	2149c83a 	sub	r4,r4,r5
   12bd4:	1886b03a 	or	r3,r3,r2
   12bd8:	1004d07a 	srli	r2,r2,1
   12bdc:	280ad07a 	srli	r5,r5,1
   12be0:	103ffa1e 	bne	r2,zero,12bcc <udivmodsi4+0x38>
   12be4:	30000226 	beq	r6,zero,12bf0 <udivmodsi4+0x5c>
   12be8:	2005883a 	mov	r2,r4
   12bec:	f800283a 	ret
   12bf0:	1809883a 	mov	r4,r3
   12bf4:	2005883a 	mov	r2,r4
   12bf8:	f800283a 	ret
   12bfc:	0007883a 	mov	r3,zero
   12c00:	003ff806 	br	12be4 <udivmodsi4+0x50>
   12c04:	00800044 	movi	r2,1
   12c08:	0007883a 	mov	r3,zero
   12c0c:	003fef06 	br	12bcc <udivmodsi4+0x38>

00012c10 <__divsi3>:
   12c10:	defffe04 	addi	sp,sp,-8
   12c14:	dc000015 	stw	r16,0(sp)
   12c18:	dfc00115 	stw	ra,4(sp)
   12c1c:	0021883a 	mov	r16,zero
   12c20:	20000c16 	blt	r4,zero,12c54 <__divsi3+0x44>
   12c24:	000d883a 	mov	r6,zero
   12c28:	28000e16 	blt	r5,zero,12c64 <__divsi3+0x54>
   12c2c:	0012b940 	call	12b94 <udivmodsi4>
   12c30:	1007883a 	mov	r3,r2
   12c34:	8005003a 	cmpeq	r2,r16,zero
   12c38:	1000011e 	bne	r2,zero,12c40 <__divsi3+0x30>
   12c3c:	00c7c83a 	sub	r3,zero,r3
   12c40:	1805883a 	mov	r2,r3
   12c44:	dfc00117 	ldw	ra,4(sp)
   12c48:	dc000017 	ldw	r16,0(sp)
   12c4c:	dec00204 	addi	sp,sp,8
   12c50:	f800283a 	ret
   12c54:	0109c83a 	sub	r4,zero,r4
   12c58:	04000044 	movi	r16,1
   12c5c:	000d883a 	mov	r6,zero
   12c60:	283ff20e 	bge	r5,zero,12c2c <__divsi3+0x1c>
   12c64:	014bc83a 	sub	r5,zero,r5
   12c68:	8021003a 	cmpeq	r16,r16,zero
   12c6c:	003fef06 	br	12c2c <__divsi3+0x1c>

00012c70 <__modsi3>:
   12c70:	deffff04 	addi	sp,sp,-4
   12c74:	dfc00015 	stw	ra,0(sp)
   12c78:	01800044 	movi	r6,1
   12c7c:	2807883a 	mov	r3,r5
   12c80:	20000416 	blt	r4,zero,12c94 <__modsi3+0x24>
   12c84:	28000c16 	blt	r5,zero,12cb8 <__modsi3+0x48>
   12c88:	dfc00017 	ldw	ra,0(sp)
   12c8c:	dec00104 	addi	sp,sp,4
   12c90:	0012b941 	jmpi	12b94 <udivmodsi4>
   12c94:	0109c83a 	sub	r4,zero,r4
   12c98:	28000b16 	blt	r5,zero,12cc8 <__modsi3+0x58>
   12c9c:	180b883a 	mov	r5,r3
   12ca0:	01800044 	movi	r6,1
   12ca4:	0012b940 	call	12b94 <udivmodsi4>
   12ca8:	0085c83a 	sub	r2,zero,r2
   12cac:	dfc00017 	ldw	ra,0(sp)
   12cb0:	dec00104 	addi	sp,sp,4
   12cb4:	f800283a 	ret
   12cb8:	014bc83a 	sub	r5,zero,r5
   12cbc:	dfc00017 	ldw	ra,0(sp)
   12cc0:	dec00104 	addi	sp,sp,4
   12cc4:	0012b941 	jmpi	12b94 <udivmodsi4>
   12cc8:	0147c83a 	sub	r3,zero,r5
   12ccc:	003ff306 	br	12c9c <__modsi3+0x2c>

00012cd0 <__udivsi3>:
   12cd0:	000d883a 	mov	r6,zero
   12cd4:	0012b941 	jmpi	12b94 <udivmodsi4>

00012cd8 <__umodsi3>:
   12cd8:	01800044 	movi	r6,1
   12cdc:	0012b941 	jmpi	12b94 <udivmodsi4>

00012ce0 <__unpack_f>:
   12ce0:	21800017 	ldw	r6,0(r4)
   12ce4:	00c02034 	movhi	r3,128
   12ce8:	18ffffc4 	addi	r3,r3,-1
   12cec:	3004d5fa 	srli	r2,r6,23
   12cf0:	3008d7fa 	srli	r4,r6,31
   12cf4:	30ce703a 	and	r7,r6,r3
   12cf8:	10c03fcc 	andi	r3,r2,255
   12cfc:	29000115 	stw	r4,4(r5)
   12d00:	1800131e 	bne	r3,zero,12d50 <__unpack_f+0x70>
   12d04:	38000f26 	beq	r7,zero,12d44 <__unpack_f+0x64>
   12d08:	380691fa 	slli	r3,r7,7
   12d0c:	01bfe084 	movi	r6,-126
   12d10:	008000c4 	movi	r2,3
   12d14:	01100034 	movhi	r4,16384
   12d18:	213fffc4 	addi	r4,r4,-1
   12d1c:	28800015 	stw	r2,0(r5)
   12d20:	29800215 	stw	r6,8(r5)
   12d24:	20c00536 	bltu	r4,r3,12d3c <__unpack_f+0x5c>
   12d28:	3005883a 	mov	r2,r6
   12d2c:	18c7883a 	add	r3,r3,r3
   12d30:	10bfffc4 	addi	r2,r2,-1
   12d34:	20fffd2e 	bgeu	r4,r3,12d2c <__unpack_f+0x4c>
   12d38:	28800215 	stw	r2,8(r5)
   12d3c:	28c00315 	stw	r3,12(r5)
   12d40:	f800283a 	ret
   12d44:	00800084 	movi	r2,2
   12d48:	28800015 	stw	r2,0(r5)
   12d4c:	f800283a 	ret
   12d50:	00803fc4 	movi	r2,255
   12d54:	18800826 	beq	r3,r2,12d78 <__unpack_f+0x98>
   12d58:	380491fa 	slli	r2,r7,7
   12d5c:	18ffe044 	addi	r3,r3,-127
   12d60:	28c00215 	stw	r3,8(r5)
   12d64:	10900034 	orhi	r2,r2,16384
   12d68:	28800315 	stw	r2,12(r5)
   12d6c:	008000c4 	movi	r2,3
   12d70:	28800015 	stw	r2,0(r5)
   12d74:	f800283a 	ret
   12d78:	3800031e 	bne	r7,zero,12d88 <__unpack_f+0xa8>
   12d7c:	00800104 	movi	r2,4
   12d80:	28800015 	stw	r2,0(r5)
   12d84:	f800283a 	ret
   12d88:	3080042c 	andhi	r2,r6,16
   12d8c:	10000426 	beq	r2,zero,12da0 <__unpack_f+0xc0>
   12d90:	00800044 	movi	r2,1
   12d94:	28800015 	stw	r2,0(r5)
   12d98:	29c00315 	stw	r7,12(r5)
   12d9c:	f800283a 	ret
   12da0:	28000015 	stw	zero,0(r5)
   12da4:	003ffc06 	br	12d98 <__unpack_f+0xb8>

00012da8 <__fpcmp_parts_f>:
   12da8:	21800017 	ldw	r6,0(r4)
   12dac:	00c00044 	movi	r3,1
   12db0:	19800a2e 	bgeu	r3,r6,12ddc <__fpcmp_parts_f+0x34>
   12db4:	28800017 	ldw	r2,0(r5)
   12db8:	1880082e 	bgeu	r3,r2,12ddc <__fpcmp_parts_f+0x34>
   12dbc:	00c00104 	movi	r3,4
   12dc0:	30c01e26 	beq	r6,r3,12e3c <__fpcmp_parts_f+0x94>
   12dc4:	10c01a26 	beq	r2,r3,12e30 <__fpcmp_parts_f+0x88>
   12dc8:	00c00084 	movi	r3,2
   12dcc:	30c00526 	beq	r6,r3,12de4 <__fpcmp_parts_f+0x3c>
   12dd0:	10c0071e 	bne	r2,r3,12df0 <__fpcmp_parts_f+0x48>
   12dd4:	20800117 	ldw	r2,4(r4)
   12dd8:	1000091e 	bne	r2,zero,12e00 <__fpcmp_parts_f+0x58>
   12ddc:	00800044 	movi	r2,1
   12de0:	f800283a 	ret
   12de4:	10c0121e 	bne	r2,r3,12e30 <__fpcmp_parts_f+0x88>
   12de8:	0005883a 	mov	r2,zero
   12dec:	f800283a 	ret
   12df0:	20c00117 	ldw	r3,4(r4)
   12df4:	28800117 	ldw	r2,4(r5)
   12df8:	18800326 	beq	r3,r2,12e08 <__fpcmp_parts_f+0x60>
   12dfc:	183ff726 	beq	r3,zero,12ddc <__fpcmp_parts_f+0x34>
   12e00:	00bfffc4 	movi	r2,-1
   12e04:	f800283a 	ret
   12e08:	21800217 	ldw	r6,8(r4)
   12e0c:	28800217 	ldw	r2,8(r5)
   12e10:	11bffa16 	blt	r2,r6,12dfc <__fpcmp_parts_f+0x54>
   12e14:	30800416 	blt	r6,r2,12e28 <__fpcmp_parts_f+0x80>
   12e18:	21000317 	ldw	r4,12(r4)
   12e1c:	29400317 	ldw	r5,12(r5)
   12e20:	293ff636 	bltu	r5,r4,12dfc <__fpcmp_parts_f+0x54>
   12e24:	217ff02e 	bgeu	r4,r5,12de8 <__fpcmp_parts_f+0x40>
   12e28:	183fec1e 	bne	r3,zero,12ddc <__fpcmp_parts_f+0x34>
   12e2c:	003ff406 	br	12e00 <__fpcmp_parts_f+0x58>
   12e30:	28800117 	ldw	r2,4(r5)
   12e34:	103fe91e 	bne	r2,zero,12ddc <__fpcmp_parts_f+0x34>
   12e38:	003ff106 	br	12e00 <__fpcmp_parts_f+0x58>
   12e3c:	11bfe51e 	bne	r2,r6,12dd4 <__fpcmp_parts_f+0x2c>
   12e40:	28c00117 	ldw	r3,4(r5)
   12e44:	20800117 	ldw	r2,4(r4)
   12e48:	1885c83a 	sub	r2,r3,r2
   12e4c:	f800283a 	ret

00012e50 <__make_fp>:
   12e50:	defffb04 	addi	sp,sp,-20
   12e54:	d9000015 	stw	r4,0(sp)
   12e58:	d809883a 	mov	r4,sp
   12e5c:	dfc00415 	stw	ra,16(sp)
   12e60:	d9400115 	stw	r5,4(sp)
   12e64:	d9800215 	stw	r6,8(sp)
   12e68:	d9c00315 	stw	r7,12(sp)
   12e6c:	0012e7c0 	call	12e7c <__pack_f>
   12e70:	dfc00417 	ldw	ra,16(sp)
   12e74:	dec00504 	addi	sp,sp,20
   12e78:	f800283a 	ret

00012e7c <__pack_f>:
   12e7c:	20c00017 	ldw	r3,0(r4)
   12e80:	01c00044 	movi	r7,1
   12e84:	21800317 	ldw	r6,12(r4)
   12e88:	21400117 	ldw	r5,4(r4)
   12e8c:	38c02d2e 	bgeu	r7,r3,12f44 <__pack_f+0xc8>
   12e90:	00800104 	movi	r2,4
   12e94:	18802826 	beq	r3,r2,12f38 <__pack_f+0xbc>
   12e98:	00800084 	movi	r2,2
   12e9c:	18800126 	beq	r3,r2,12ea4 <__pack_f+0x28>
   12ea0:	3000101e 	bne	r6,zero,12ee4 <__pack_f+0x68>
   12ea4:	000d883a 	mov	r6,zero
   12ea8:	0007883a 	mov	r3,zero
   12eac:	19003fcc 	andi	r4,r3,255
   12eb0:	200895fa 	slli	r4,r4,23
   12eb4:	00c02034 	movhi	r3,128
   12eb8:	18ffffc4 	addi	r3,r3,-1
   12ebc:	30c6703a 	and	r3,r6,r3
   12ec0:	10a0002c 	andhi	r2,r2,32768
   12ec4:	10c4b03a 	or	r2,r2,r3
   12ec8:	280a97fa 	slli	r5,r5,31
   12ecc:	1104b03a 	or	r2,r2,r4
   12ed0:	00e00034 	movhi	r3,32768
   12ed4:	18ffffc4 	addi	r3,r3,-1
   12ed8:	10c4703a 	and	r2,r2,r3
   12edc:	1144b03a 	or	r2,r2,r5
   12ee0:	f800283a 	ret
   12ee4:	21000217 	ldw	r4,8(r4)
   12ee8:	00bfe084 	movi	r2,-126
   12eec:	20801b16 	blt	r4,r2,12f5c <__pack_f+0xe0>
   12ef0:	00801fc4 	movi	r2,127
   12ef4:	11001016 	blt	r2,r4,12f38 <__pack_f+0xbc>
   12ef8:	308e703a 	and	r7,r6,r2
   12efc:	2087883a 	add	r3,r4,r2
   12f00:	00801004 	movi	r2,64
   12f04:	38800526 	beq	r7,r2,12f1c <__pack_f+0xa0>
   12f08:	31800fc4 	addi	r6,r6,63
   12f0c:	30000716 	blt	r6,zero,12f2c <__pack_f+0xb0>
   12f10:	300490ba 	slli	r2,r6,2
   12f14:	100cd27a 	srli	r6,r2,9
   12f18:	003fe406 	br	12eac <__pack_f+0x30>
   12f1c:	3080200c 	andi	r2,r6,128
   12f20:	103ffa26 	beq	r2,zero,12f0c <__pack_f+0x90>
   12f24:	31cd883a 	add	r6,r6,r7
   12f28:	003ff806 	br	12f0c <__pack_f+0x90>
   12f2c:	300cd07a 	srli	r6,r6,1
   12f30:	18c00044 	addi	r3,r3,1
   12f34:	003ff606 	br	12f10 <__pack_f+0x94>
   12f38:	000d883a 	mov	r6,zero
   12f3c:	00ffffc4 	movi	r3,-1
   12f40:	003fda06 	br	12eac <__pack_f+0x30>
   12f44:	31800434 	orhi	r6,r6,16
   12f48:	00802034 	movhi	r2,128
   12f4c:	10bfffc4 	addi	r2,r2,-1
   12f50:	308c703a 	and	r6,r6,r2
   12f54:	00ffffc4 	movi	r3,-1
   12f58:	003fd406 	br	12eac <__pack_f+0x30>
   12f5c:	1109c83a 	sub	r4,r2,r4
   12f60:	00800644 	movi	r2,25
   12f64:	11001216 	blt	r2,r4,12fb0 <__pack_f+0x134>
   12f68:	3904983a 	sll	r2,r7,r4
   12f6c:	3106d83a 	srl	r3,r6,r4
   12f70:	10bfffc4 	addi	r2,r2,-1
   12f74:	3084703a 	and	r2,r6,r2
   12f78:	1004c03a 	cmpne	r2,r2,zero
   12f7c:	1886b03a 	or	r3,r3,r2
   12f80:	19001fcc 	andi	r4,r3,127
   12f84:	00801004 	movi	r2,64
   12f88:	20800c26 	beq	r4,r2,12fbc <__pack_f+0x140>
   12f8c:	18c00fc4 	addi	r3,r3,63
   12f90:	00900034 	movhi	r2,16384
   12f94:	10bfffc4 	addi	r2,r2,-1
   12f98:	180cd1fa 	srli	r6,r3,7
   12f9c:	10c7803a 	cmpltu	r3,r2,r3
   12fa0:	00802034 	movhi	r2,128
   12fa4:	10bfffc4 	addi	r2,r2,-1
   12fa8:	308c703a 	and	r6,r6,r2
   12fac:	003fbf06 	br	12eac <__pack_f+0x30>
   12fb0:	0007883a 	mov	r3,zero
   12fb4:	000d883a 	mov	r6,zero
   12fb8:	003ff906 	br	12fa0 <__pack_f+0x124>
   12fbc:	1880200c 	andi	r2,r3,128
   12fc0:	10000126 	beq	r2,zero,12fc8 <__pack_f+0x14c>
   12fc4:	1907883a 	add	r3,r3,r4
   12fc8:	180cd1fa 	srli	r6,r3,7
   12fcc:	00900034 	movhi	r2,16384
   12fd0:	10bfffc4 	addi	r2,r2,-1
   12fd4:	10c7803a 	cmpltu	r3,r2,r3
   12fd8:	003ff106 	br	12fa0 <__pack_f+0x124>

00012fdc <close>:
   12fdc:	defff804 	addi	sp,sp,-32
   12fe0:	dfc00715 	stw	ra,28(sp)
   12fe4:	df000615 	stw	fp,24(sp)
   12fe8:	df000604 	addi	fp,sp,24
   12fec:	e13ffc15 	stw	r4,-16(fp)
   12ff0:	e0bffc17 	ldw	r2,-16(fp)
   12ff4:	1004803a 	cmplt	r2,r2,zero
   12ff8:	1000081e 	bne	r2,zero,1301c <close+0x40>
   12ffc:	e0bffc17 	ldw	r2,-16(fp)
   13000:	10800324 	muli	r2,r2,12
   13004:	1007883a 	mov	r3,r2
   13008:	00820034 	movhi	r2,2048
   1300c:	1084b704 	addi	r2,r2,4828
   13010:	1887883a 	add	r3,r3,r2
   13014:	e0ffff15 	stw	r3,-4(fp)
   13018:	00000106 	br	13020 <close+0x44>
   1301c:	e03fff15 	stw	zero,-4(fp)
   13020:	e0bfff17 	ldw	r2,-4(fp)
   13024:	e0bffb15 	stw	r2,-20(fp)
   13028:	e0bffb17 	ldw	r2,-20(fp)
   1302c:	1005003a 	cmpeq	r2,r2,zero
   13030:	10001d1e 	bne	r2,zero,130a8 <close+0xcc>
   13034:	e0bffb17 	ldw	r2,-20(fp)
   13038:	10800017 	ldw	r2,0(r2)
   1303c:	10800417 	ldw	r2,16(r2)
   13040:	1005003a 	cmpeq	r2,r2,zero
   13044:	1000071e 	bne	r2,zero,13064 <close+0x88>
   13048:	e0bffb17 	ldw	r2,-20(fp)
   1304c:	10800017 	ldw	r2,0(r2)
   13050:	10800417 	ldw	r2,16(r2)
   13054:	e13ffb17 	ldw	r4,-20(fp)
   13058:	103ee83a 	callr	r2
   1305c:	e0bffe15 	stw	r2,-8(fp)
   13060:	00000106 	br	13068 <close+0x8c>
   13064:	e03ffe15 	stw	zero,-8(fp)
   13068:	e0bffe17 	ldw	r2,-8(fp)
   1306c:	e0bffa15 	stw	r2,-24(fp)
   13070:	e13ffc17 	ldw	r4,-16(fp)
   13074:	00137340 	call	13734 <alt_release_fd>
   13078:	e0bffa17 	ldw	r2,-24(fp)
   1307c:	1004403a 	cmpge	r2,r2,zero
   13080:	1000071e 	bne	r2,zero,130a0 <close+0xc4>
   13084:	00130d80 	call	130d8 <alt_get_errno>
   13088:	e0fffa17 	ldw	r3,-24(fp)
   1308c:	00c7c83a 	sub	r3,zero,r3
   13090:	10c00015 	stw	r3,0(r2)
   13094:	00bfffc4 	movi	r2,-1
   13098:	e0bffd15 	stw	r2,-12(fp)
   1309c:	00000806 	br	130c0 <close+0xe4>
   130a0:	e03ffd15 	stw	zero,-12(fp)
   130a4:	00000606 	br	130c0 <close+0xe4>
   130a8:	00130d80 	call	130d8 <alt_get_errno>
   130ac:	1007883a 	mov	r3,r2
   130b0:	00801444 	movi	r2,81
   130b4:	18800015 	stw	r2,0(r3)
   130b8:	00bfffc4 	movi	r2,-1
   130bc:	e0bffd15 	stw	r2,-12(fp)
   130c0:	e0bffd17 	ldw	r2,-12(fp)
   130c4:	e037883a 	mov	sp,fp
   130c8:	dfc00117 	ldw	ra,4(sp)
   130cc:	df000017 	ldw	fp,0(sp)
   130d0:	dec00204 	addi	sp,sp,8
   130d4:	f800283a 	ret

000130d8 <alt_get_errno>:
   130d8:	defffd04 	addi	sp,sp,-12
   130dc:	dfc00215 	stw	ra,8(sp)
   130e0:	df000115 	stw	fp,4(sp)
   130e4:	df000104 	addi	fp,sp,4
   130e8:	00820034 	movhi	r2,2048
   130ec:	108a2a04 	addi	r2,r2,10408
   130f0:	10800017 	ldw	r2,0(r2)
   130f4:	1005003a 	cmpeq	r2,r2,zero
   130f8:	1000061e 	bne	r2,zero,13114 <alt_get_errno+0x3c>
   130fc:	00820034 	movhi	r2,2048
   13100:	108a2a04 	addi	r2,r2,10408
   13104:	10800017 	ldw	r2,0(r2)
   13108:	103ee83a 	callr	r2
   1310c:	e0bfff15 	stw	r2,-4(fp)
   13110:	00000306 	br	13120 <alt_get_errno+0x48>
   13114:	00820034 	movhi	r2,2048
   13118:	108a6404 	addi	r2,r2,10640
   1311c:	e0bfff15 	stw	r2,-4(fp)
   13120:	e0bfff17 	ldw	r2,-4(fp)
   13124:	e037883a 	mov	sp,fp
   13128:	dfc00117 	ldw	ra,4(sp)
   1312c:	df000017 	ldw	fp,0(sp)
   13130:	dec00204 	addi	sp,sp,8
   13134:	f800283a 	ret

00013138 <alt_dev_null_write>:
   13138:	defffc04 	addi	sp,sp,-16
   1313c:	df000315 	stw	fp,12(sp)
   13140:	df000304 	addi	fp,sp,12
   13144:	e13ffd15 	stw	r4,-12(fp)
   13148:	e17ffe15 	stw	r5,-8(fp)
   1314c:	e1bfff15 	stw	r6,-4(fp)
   13150:	e0bfff17 	ldw	r2,-4(fp)
   13154:	e037883a 	mov	sp,fp
   13158:	df000017 	ldw	fp,0(sp)
   1315c:	dec00104 	addi	sp,sp,4
   13160:	f800283a 	ret

00013164 <fstat>:
   13164:	defff904 	addi	sp,sp,-28
   13168:	dfc00615 	stw	ra,24(sp)
   1316c:	df000515 	stw	fp,20(sp)
   13170:	df000504 	addi	fp,sp,20
   13174:	e13ffc15 	stw	r4,-16(fp)
   13178:	e17ffd15 	stw	r5,-12(fp)
   1317c:	e0bffc17 	ldw	r2,-16(fp)
   13180:	1004803a 	cmplt	r2,r2,zero
   13184:	1000081e 	bne	r2,zero,131a8 <fstat+0x44>
   13188:	e0bffc17 	ldw	r2,-16(fp)
   1318c:	10800324 	muli	r2,r2,12
   13190:	1007883a 	mov	r3,r2
   13194:	00820034 	movhi	r2,2048
   13198:	1084b704 	addi	r2,r2,4828
   1319c:	1887883a 	add	r3,r3,r2
   131a0:	e0ffff15 	stw	r3,-4(fp)
   131a4:	00000106 	br	131ac <fstat+0x48>
   131a8:	e03fff15 	stw	zero,-4(fp)
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	e0bffb15 	stw	r2,-20(fp)
   131b4:	e0bffb17 	ldw	r2,-20(fp)
   131b8:	1005003a 	cmpeq	r2,r2,zero
   131bc:	1000121e 	bne	r2,zero,13208 <fstat+0xa4>
   131c0:	e0bffb17 	ldw	r2,-20(fp)
   131c4:	10800017 	ldw	r2,0(r2)
   131c8:	10800817 	ldw	r2,32(r2)
   131cc:	1005003a 	cmpeq	r2,r2,zero
   131d0:	1000081e 	bne	r2,zero,131f4 <fstat+0x90>
   131d4:	e0bffb17 	ldw	r2,-20(fp)
   131d8:	10800017 	ldw	r2,0(r2)
   131dc:	10800817 	ldw	r2,32(r2)
   131e0:	e13ffb17 	ldw	r4,-20(fp)
   131e4:	e17ffd17 	ldw	r5,-12(fp)
   131e8:	103ee83a 	callr	r2
   131ec:	e0bffe15 	stw	r2,-8(fp)
   131f0:	00000b06 	br	13220 <fstat+0xbc>
   131f4:	e0fffd17 	ldw	r3,-12(fp)
   131f8:	00880004 	movi	r2,8192
   131fc:	18800115 	stw	r2,4(r3)
   13200:	e03ffe15 	stw	zero,-8(fp)
   13204:	00000606 	br	13220 <fstat+0xbc>
   13208:	00132380 	call	13238 <alt_get_errno>
   1320c:	1007883a 	mov	r3,r2
   13210:	00801444 	movi	r2,81
   13214:	18800015 	stw	r2,0(r3)
   13218:	00bfffc4 	movi	r2,-1
   1321c:	e0bffe15 	stw	r2,-8(fp)
   13220:	e0bffe17 	ldw	r2,-8(fp)
   13224:	e037883a 	mov	sp,fp
   13228:	dfc00117 	ldw	ra,4(sp)
   1322c:	df000017 	ldw	fp,0(sp)
   13230:	dec00204 	addi	sp,sp,8
   13234:	f800283a 	ret

00013238 <alt_get_errno>:
   13238:	defffd04 	addi	sp,sp,-12
   1323c:	dfc00215 	stw	ra,8(sp)
   13240:	df000115 	stw	fp,4(sp)
   13244:	df000104 	addi	fp,sp,4
   13248:	00820034 	movhi	r2,2048
   1324c:	108a2a04 	addi	r2,r2,10408
   13250:	10800017 	ldw	r2,0(r2)
   13254:	1005003a 	cmpeq	r2,r2,zero
   13258:	1000061e 	bne	r2,zero,13274 <alt_get_errno+0x3c>
   1325c:	00820034 	movhi	r2,2048
   13260:	108a2a04 	addi	r2,r2,10408
   13264:	10800017 	ldw	r2,0(r2)
   13268:	103ee83a 	callr	r2
   1326c:	e0bfff15 	stw	r2,-4(fp)
   13270:	00000306 	br	13280 <alt_get_errno+0x48>
   13274:	00820034 	movhi	r2,2048
   13278:	108a6404 	addi	r2,r2,10640
   1327c:	e0bfff15 	stw	r2,-4(fp)
   13280:	e0bfff17 	ldw	r2,-4(fp)
   13284:	e037883a 	mov	sp,fp
   13288:	dfc00117 	ldw	ra,4(sp)
   1328c:	df000017 	ldw	fp,0(sp)
   13290:	dec00204 	addi	sp,sp,8
   13294:	f800283a 	ret

00013298 <isatty>:
   13298:	deffeb04 	addi	sp,sp,-84
   1329c:	dfc01415 	stw	ra,80(sp)
   132a0:	df001315 	stw	fp,76(sp)
   132a4:	df001304 	addi	fp,sp,76
   132a8:	e13ffd15 	stw	r4,-12(fp)
   132ac:	e0bffd17 	ldw	r2,-12(fp)
   132b0:	1004803a 	cmplt	r2,r2,zero
   132b4:	1000081e 	bne	r2,zero,132d8 <isatty+0x40>
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	10800324 	muli	r2,r2,12
   132c0:	1007883a 	mov	r3,r2
   132c4:	00820034 	movhi	r2,2048
   132c8:	1084b704 	addi	r2,r2,4828
   132cc:	1887883a 	add	r3,r3,r2
   132d0:	e0ffff15 	stw	r3,-4(fp)
   132d4:	00000106 	br	132dc <isatty+0x44>
   132d8:	e03fff15 	stw	zero,-4(fp)
   132dc:	e0bfff17 	ldw	r2,-4(fp)
   132e0:	e0bfed15 	stw	r2,-76(fp)
   132e4:	e0bfed17 	ldw	r2,-76(fp)
   132e8:	1005003a 	cmpeq	r2,r2,zero
   132ec:	10000f1e 	bne	r2,zero,1332c <isatty+0x94>
   132f0:	e0bfed17 	ldw	r2,-76(fp)
   132f4:	10800017 	ldw	r2,0(r2)
   132f8:	10800817 	ldw	r2,32(r2)
   132fc:	1004c03a 	cmpne	r2,r2,zero
   13300:	1000031e 	bne	r2,zero,13310 <isatty+0x78>
   13304:	00800044 	movi	r2,1
   13308:	e0bffe15 	stw	r2,-8(fp)
   1330c:	00000c06 	br	13340 <isatty+0xa8>
   13310:	e17fee04 	addi	r5,fp,-72
   13314:	e13ffd17 	ldw	r4,-12(fp)
   13318:	00131640 	call	13164 <fstat>
   1331c:	e0bfef17 	ldw	r2,-68(fp)
   13320:	10880020 	cmpeqi	r2,r2,8192
   13324:	e0bffe15 	stw	r2,-8(fp)
   13328:	00000506 	br	13340 <isatty+0xa8>
   1332c:	00133580 	call	13358 <alt_get_errno>
   13330:	1007883a 	mov	r3,r2
   13334:	00801444 	movi	r2,81
   13338:	18800015 	stw	r2,0(r3)
   1333c:	e03ffe15 	stw	zero,-8(fp)
   13340:	e0bffe17 	ldw	r2,-8(fp)
   13344:	e037883a 	mov	sp,fp
   13348:	dfc00117 	ldw	ra,4(sp)
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00204 	addi	sp,sp,8
   13354:	f800283a 	ret

00013358 <alt_get_errno>:
   13358:	defffd04 	addi	sp,sp,-12
   1335c:	dfc00215 	stw	ra,8(sp)
   13360:	df000115 	stw	fp,4(sp)
   13364:	df000104 	addi	fp,sp,4
   13368:	00820034 	movhi	r2,2048
   1336c:	108a2a04 	addi	r2,r2,10408
   13370:	10800017 	ldw	r2,0(r2)
   13374:	1005003a 	cmpeq	r2,r2,zero
   13378:	1000061e 	bne	r2,zero,13394 <alt_get_errno+0x3c>
   1337c:	00820034 	movhi	r2,2048
   13380:	108a2a04 	addi	r2,r2,10408
   13384:	10800017 	ldw	r2,0(r2)
   13388:	103ee83a 	callr	r2
   1338c:	e0bfff15 	stw	r2,-4(fp)
   13390:	00000306 	br	133a0 <alt_get_errno+0x48>
   13394:	00820034 	movhi	r2,2048
   13398:	108a6404 	addi	r2,r2,10640
   1339c:	e0bfff15 	stw	r2,-4(fp)
   133a0:	e0bfff17 	ldw	r2,-4(fp)
   133a4:	e037883a 	mov	sp,fp
   133a8:	dfc00117 	ldw	ra,4(sp)
   133ac:	df000017 	ldw	fp,0(sp)
   133b0:	dec00204 	addi	sp,sp,8
   133b4:	f800283a 	ret

000133b8 <lseek>:
   133b8:	defff804 	addi	sp,sp,-32
   133bc:	dfc00715 	stw	ra,28(sp)
   133c0:	df000615 	stw	fp,24(sp)
   133c4:	df000604 	addi	fp,sp,24
   133c8:	e13ffc15 	stw	r4,-16(fp)
   133cc:	e17ffd15 	stw	r5,-12(fp)
   133d0:	e1bffe15 	stw	r6,-8(fp)
   133d4:	e03ffa15 	stw	zero,-24(fp)
   133d8:	e0bffc17 	ldw	r2,-16(fp)
   133dc:	1004803a 	cmplt	r2,r2,zero
   133e0:	1000081e 	bne	r2,zero,13404 <lseek+0x4c>
   133e4:	e0bffc17 	ldw	r2,-16(fp)
   133e8:	10800324 	muli	r2,r2,12
   133ec:	1007883a 	mov	r3,r2
   133f0:	00820034 	movhi	r2,2048
   133f4:	1084b704 	addi	r2,r2,4828
   133f8:	1887883a 	add	r3,r3,r2
   133fc:	e0ffff15 	stw	r3,-4(fp)
   13400:	00000106 	br	13408 <lseek+0x50>
   13404:	e03fff15 	stw	zero,-4(fp)
   13408:	e0bfff17 	ldw	r2,-4(fp)
   1340c:	e0bffb15 	stw	r2,-20(fp)
   13410:	e0bffb17 	ldw	r2,-20(fp)
   13414:	1005003a 	cmpeq	r2,r2,zero
   13418:	1000111e 	bne	r2,zero,13460 <lseek+0xa8>
   1341c:	e0bffb17 	ldw	r2,-20(fp)
   13420:	10800017 	ldw	r2,0(r2)
   13424:	10800717 	ldw	r2,28(r2)
   13428:	1005003a 	cmpeq	r2,r2,zero
   1342c:	1000091e 	bne	r2,zero,13454 <lseek+0x9c>
   13430:	e0bffb17 	ldw	r2,-20(fp)
   13434:	10800017 	ldw	r2,0(r2)
   13438:	10800717 	ldw	r2,28(r2)
   1343c:	e13ffb17 	ldw	r4,-20(fp)
   13440:	e17ffd17 	ldw	r5,-12(fp)
   13444:	e1bffe17 	ldw	r6,-8(fp)
   13448:	103ee83a 	callr	r2
   1344c:	e0bffa15 	stw	r2,-24(fp)
   13450:	00000506 	br	13468 <lseek+0xb0>
   13454:	00bfde84 	movi	r2,-134
   13458:	e0bffa15 	stw	r2,-24(fp)
   1345c:	00000206 	br	13468 <lseek+0xb0>
   13460:	00bfebc4 	movi	r2,-81
   13464:	e0bffa15 	stw	r2,-24(fp)
   13468:	e0bffa17 	ldw	r2,-24(fp)
   1346c:	1004403a 	cmpge	r2,r2,zero
   13470:	1000071e 	bne	r2,zero,13490 <lseek+0xd8>
   13474:	00134a80 	call	134a8 <alt_get_errno>
   13478:	1007883a 	mov	r3,r2
   1347c:	e0bffa17 	ldw	r2,-24(fp)
   13480:	0085c83a 	sub	r2,zero,r2
   13484:	18800015 	stw	r2,0(r3)
   13488:	00bfffc4 	movi	r2,-1
   1348c:	e0bffa15 	stw	r2,-24(fp)
   13490:	e0bffa17 	ldw	r2,-24(fp)
   13494:	e037883a 	mov	sp,fp
   13498:	dfc00117 	ldw	ra,4(sp)
   1349c:	df000017 	ldw	fp,0(sp)
   134a0:	dec00204 	addi	sp,sp,8
   134a4:	f800283a 	ret

000134a8 <alt_get_errno>:
   134a8:	defffd04 	addi	sp,sp,-12
   134ac:	dfc00215 	stw	ra,8(sp)
   134b0:	df000115 	stw	fp,4(sp)
   134b4:	df000104 	addi	fp,sp,4
   134b8:	00820034 	movhi	r2,2048
   134bc:	108a2a04 	addi	r2,r2,10408
   134c0:	10800017 	ldw	r2,0(r2)
   134c4:	1005003a 	cmpeq	r2,r2,zero
   134c8:	1000061e 	bne	r2,zero,134e4 <alt_get_errno+0x3c>
   134cc:	00820034 	movhi	r2,2048
   134d0:	108a2a04 	addi	r2,r2,10408
   134d4:	10800017 	ldw	r2,0(r2)
   134d8:	103ee83a 	callr	r2
   134dc:	e0bfff15 	stw	r2,-4(fp)
   134e0:	00000306 	br	134f0 <alt_get_errno+0x48>
   134e4:	00820034 	movhi	r2,2048
   134e8:	108a6404 	addi	r2,r2,10640
   134ec:	e0bfff15 	stw	r2,-4(fp)
   134f0:	e0bfff17 	ldw	r2,-4(fp)
   134f4:	e037883a 	mov	sp,fp
   134f8:	dfc00117 	ldw	ra,4(sp)
   134fc:	df000017 	ldw	fp,0(sp)
   13500:	dec00204 	addi	sp,sp,8
   13504:	f800283a 	ret

00013508 <alt_main>:
   13508:	defffd04 	addi	sp,sp,-12
   1350c:	dfc00215 	stw	ra,8(sp)
   13510:	df000115 	stw	fp,4(sp)
   13514:	df000104 	addi	fp,sp,4
   13518:	0009883a 	mov	r4,zero
   1351c:	00139d00 	call	139d0 <alt_irq_init>
   13520:	0013a040 	call	13a04 <alt_sys_init>
   13524:	01020034 	movhi	r4,2048
   13528:	2101c004 	addi	r4,r4,1792
   1352c:	01420034 	movhi	r5,2048
   13530:	2941c004 	addi	r5,r5,1792
   13534:	01820034 	movhi	r6,2048
   13538:	3181c004 	addi	r6,r6,1792
   1353c:	001a4f00 	call	1a4f0 <alt_io_redirect>
   13540:	001a2000 	call	1a200 <_do_ctors>
   13544:	010000b4 	movhi	r4,2
   13548:	21289904 	addi	r4,r4,-23964
   1354c:	001b5e40 	call	1b5e4 <atexit>
   13550:	d1205317 	ldw	r4,-32436(gp)
   13554:	d1605417 	ldw	r5,-32432(gp)
   13558:	d1a05517 	ldw	r6,-32428(gp)
   1355c:	00069c80 	call	69c8 <main>
   13560:	e0bfff15 	stw	r2,-4(fp)
   13564:	01000044 	movi	r4,1
   13568:	0012fdc0 	call	12fdc <close>
   1356c:	e13fff17 	ldw	r4,-4(fp)
   13570:	001b5f80 	call	1b5f8 <exit>

00013574 <__malloc_lock>:
   13574:	defffe04 	addi	sp,sp,-8
   13578:	df000115 	stw	fp,4(sp)
   1357c:	df000104 	addi	fp,sp,4
   13580:	e13fff15 	stw	r4,-4(fp)
   13584:	e037883a 	mov	sp,fp
   13588:	df000017 	ldw	fp,0(sp)
   1358c:	dec00104 	addi	sp,sp,4
   13590:	f800283a 	ret

00013594 <__malloc_unlock>:
   13594:	defffe04 	addi	sp,sp,-8
   13598:	df000115 	stw	fp,4(sp)
   1359c:	df000104 	addi	fp,sp,4
   135a0:	e13fff15 	stw	r4,-4(fp)
   135a4:	e037883a 	mov	sp,fp
   135a8:	df000017 	ldw	fp,0(sp)
   135ac:	dec00104 	addi	sp,sp,4
   135b0:	f800283a 	ret

000135b4 <read>:
   135b4:	defff704 	addi	sp,sp,-36
   135b8:	dfc00815 	stw	ra,32(sp)
   135bc:	df000715 	stw	fp,28(sp)
   135c0:	df000704 	addi	fp,sp,28
   135c4:	e13ffb15 	stw	r4,-20(fp)
   135c8:	e17ffc15 	stw	r5,-16(fp)
   135cc:	e1bffd15 	stw	r6,-12(fp)
   135d0:	e0bffb17 	ldw	r2,-20(fp)
   135d4:	1004803a 	cmplt	r2,r2,zero
   135d8:	1000081e 	bne	r2,zero,135fc <read+0x48>
   135dc:	e0bffb17 	ldw	r2,-20(fp)
   135e0:	10800324 	muli	r2,r2,12
   135e4:	1007883a 	mov	r3,r2
   135e8:	00820034 	movhi	r2,2048
   135ec:	1084b704 	addi	r2,r2,4828
   135f0:	1887883a 	add	r3,r3,r2
   135f4:	e0ffff15 	stw	r3,-4(fp)
   135f8:	00000106 	br	13600 <read+0x4c>
   135fc:	e03fff15 	stw	zero,-4(fp)
   13600:	e0bfff17 	ldw	r2,-4(fp)
   13604:	e0bffa15 	stw	r2,-24(fp)
   13608:	e0bffa17 	ldw	r2,-24(fp)
   1360c:	1005003a 	cmpeq	r2,r2,zero
   13610:	1000241e 	bne	r2,zero,136a4 <read+0xf0>
   13614:	e0bffa17 	ldw	r2,-24(fp)
   13618:	10800217 	ldw	r2,8(r2)
   1361c:	108000cc 	andi	r2,r2,3
   13620:	10800060 	cmpeqi	r2,r2,1
   13624:	10001a1e 	bne	r2,zero,13690 <read+0xdc>
   13628:	e0bffa17 	ldw	r2,-24(fp)
   1362c:	10800017 	ldw	r2,0(r2)
   13630:	10800517 	ldw	r2,20(r2)
   13634:	1005003a 	cmpeq	r2,r2,zero
   13638:	1000151e 	bne	r2,zero,13690 <read+0xdc>
   1363c:	e0bffa17 	ldw	r2,-24(fp)
   13640:	10800017 	ldw	r2,0(r2)
   13644:	10800517 	ldw	r2,20(r2)
   13648:	e17ffc17 	ldw	r5,-16(fp)
   1364c:	e1bffd17 	ldw	r6,-12(fp)
   13650:	e13ffa17 	ldw	r4,-24(fp)
   13654:	103ee83a 	callr	r2
   13658:	e0bff915 	stw	r2,-28(fp)
   1365c:	e0bff917 	ldw	r2,-28(fp)
   13660:	1004403a 	cmpge	r2,r2,zero
   13664:	1000071e 	bne	r2,zero,13684 <read+0xd0>
   13668:	00136d40 	call	136d4 <alt_get_errno>
   1366c:	e0fff917 	ldw	r3,-28(fp)
   13670:	00c7c83a 	sub	r3,zero,r3
   13674:	10c00015 	stw	r3,0(r2)
   13678:	00bfffc4 	movi	r2,-1
   1367c:	e0bffe15 	stw	r2,-8(fp)
   13680:	00000e06 	br	136bc <read+0x108>
   13684:	e0bff917 	ldw	r2,-28(fp)
   13688:	e0bffe15 	stw	r2,-8(fp)
   1368c:	00000b06 	br	136bc <read+0x108>
   13690:	00136d40 	call	136d4 <alt_get_errno>
   13694:	1007883a 	mov	r3,r2
   13698:	00800344 	movi	r2,13
   1369c:	18800015 	stw	r2,0(r3)
   136a0:	00000406 	br	136b4 <read+0x100>
   136a4:	00136d40 	call	136d4 <alt_get_errno>
   136a8:	1007883a 	mov	r3,r2
   136ac:	00801444 	movi	r2,81
   136b0:	18800015 	stw	r2,0(r3)
   136b4:	00bfffc4 	movi	r2,-1
   136b8:	e0bffe15 	stw	r2,-8(fp)
   136bc:	e0bffe17 	ldw	r2,-8(fp)
   136c0:	e037883a 	mov	sp,fp
   136c4:	dfc00117 	ldw	ra,4(sp)
   136c8:	df000017 	ldw	fp,0(sp)
   136cc:	dec00204 	addi	sp,sp,8
   136d0:	f800283a 	ret

000136d4 <alt_get_errno>:
   136d4:	defffd04 	addi	sp,sp,-12
   136d8:	dfc00215 	stw	ra,8(sp)
   136dc:	df000115 	stw	fp,4(sp)
   136e0:	df000104 	addi	fp,sp,4
   136e4:	00820034 	movhi	r2,2048
   136e8:	108a2a04 	addi	r2,r2,10408
   136ec:	10800017 	ldw	r2,0(r2)
   136f0:	1005003a 	cmpeq	r2,r2,zero
   136f4:	1000061e 	bne	r2,zero,13710 <alt_get_errno+0x3c>
   136f8:	00820034 	movhi	r2,2048
   136fc:	108a2a04 	addi	r2,r2,10408
   13700:	10800017 	ldw	r2,0(r2)
   13704:	103ee83a 	callr	r2
   13708:	e0bfff15 	stw	r2,-4(fp)
   1370c:	00000306 	br	1371c <alt_get_errno+0x48>
   13710:	00820034 	movhi	r2,2048
   13714:	108a6404 	addi	r2,r2,10640
   13718:	e0bfff15 	stw	r2,-4(fp)
   1371c:	e0bfff17 	ldw	r2,-4(fp)
   13720:	e037883a 	mov	sp,fp
   13724:	dfc00117 	ldw	ra,4(sp)
   13728:	df000017 	ldw	fp,0(sp)
   1372c:	dec00204 	addi	sp,sp,8
   13730:	f800283a 	ret

00013734 <alt_release_fd>:
   13734:	defffe04 	addi	sp,sp,-8
   13738:	df000115 	stw	fp,4(sp)
   1373c:	df000104 	addi	fp,sp,4
   13740:	e13fff15 	stw	r4,-4(fp)
   13744:	e0bfff17 	ldw	r2,-4(fp)
   13748:	108000d0 	cmplti	r2,r2,3
   1374c:	10000d1e 	bne	r2,zero,13784 <alt_release_fd+0x50>
   13750:	e0bfff17 	ldw	r2,-4(fp)
   13754:	00c20034 	movhi	r3,2048
   13758:	18c4b704 	addi	r3,r3,4828
   1375c:	10800324 	muli	r2,r2,12
   13760:	10c5883a 	add	r2,r2,r3
   13764:	10800204 	addi	r2,r2,8
   13768:	10000015 	stw	zero,0(r2)
   1376c:	e0bfff17 	ldw	r2,-4(fp)
   13770:	00c20034 	movhi	r3,2048
   13774:	18c4b704 	addi	r3,r3,4828
   13778:	10800324 	muli	r2,r2,12
   1377c:	10c5883a 	add	r2,r2,r3
   13780:	10000015 	stw	zero,0(r2)
   13784:	e037883a 	mov	sp,fp
   13788:	df000017 	ldw	fp,0(sp)
   1378c:	dec00104 	addi	sp,sp,4
   13790:	f800283a 	ret

00013794 <sbrk>:
   13794:	defff804 	addi	sp,sp,-32
   13798:	df000715 	stw	fp,28(sp)
   1379c:	df000704 	addi	fp,sp,28
   137a0:	e13ffe15 	stw	r4,-8(fp)
   137a4:	0005303a 	rdctl	r2,status
   137a8:	e0bffb15 	stw	r2,-20(fp)
   137ac:	e0fffb17 	ldw	r3,-20(fp)
   137b0:	00bfff84 	movi	r2,-2
   137b4:	1884703a 	and	r2,r3,r2
   137b8:	1001703a 	wrctl	status,r2
   137bc:	e0bffb17 	ldw	r2,-20(fp)
   137c0:	e0bffd15 	stw	r2,-12(fp)
   137c4:	d0a01917 	ldw	r2,-32668(gp)
   137c8:	10c000c4 	addi	r3,r2,3
   137cc:	00bfff04 	movi	r2,-4
   137d0:	1884703a 	and	r2,r3,r2
   137d4:	d0a01915 	stw	r2,-32668(gp)
   137d8:	d0e01917 	ldw	r3,-32668(gp)
   137dc:	e0bffe17 	ldw	r2,-8(fp)
   137e0:	1887883a 	add	r3,r3,r2
   137e4:	00840034 	movhi	r2,4096
   137e8:	10800004 	addi	r2,r2,0
   137ec:	10c0072e 	bgeu	r2,r3,1380c <sbrk+0x78>
   137f0:	e0bffd17 	ldw	r2,-12(fp)
   137f4:	e0bffa15 	stw	r2,-24(fp)
   137f8:	e0bffa17 	ldw	r2,-24(fp)
   137fc:	1001703a 	wrctl	status,r2
   13800:	00bfffc4 	movi	r2,-1
   13804:	e0bfff15 	stw	r2,-4(fp)
   13808:	00000c06 	br	1383c <sbrk+0xa8>
   1380c:	d0a01917 	ldw	r2,-32668(gp)
   13810:	e0bffc15 	stw	r2,-16(fp)
   13814:	d0e01917 	ldw	r3,-32668(gp)
   13818:	e0bffe17 	ldw	r2,-8(fp)
   1381c:	1885883a 	add	r2,r3,r2
   13820:	d0a01915 	stw	r2,-32668(gp)
   13824:	e0bffd17 	ldw	r2,-12(fp)
   13828:	e0bff915 	stw	r2,-28(fp)
   1382c:	e0bff917 	ldw	r2,-28(fp)
   13830:	1001703a 	wrctl	status,r2
   13834:	e0bffc17 	ldw	r2,-16(fp)
   13838:	e0bfff15 	stw	r2,-4(fp)
   1383c:	e0bfff17 	ldw	r2,-4(fp)
   13840:	e037883a 	mov	sp,fp
   13844:	df000017 	ldw	fp,0(sp)
   13848:	dec00104 	addi	sp,sp,4
   1384c:	f800283a 	ret

00013850 <write>:
   13850:	defff704 	addi	sp,sp,-36
   13854:	dfc00815 	stw	ra,32(sp)
   13858:	df000715 	stw	fp,28(sp)
   1385c:	df000704 	addi	fp,sp,28
   13860:	e13ffb15 	stw	r4,-20(fp)
   13864:	e17ffc15 	stw	r5,-16(fp)
   13868:	e1bffd15 	stw	r6,-12(fp)
   1386c:	e0bffb17 	ldw	r2,-20(fp)
   13870:	1004803a 	cmplt	r2,r2,zero
   13874:	1000081e 	bne	r2,zero,13898 <write+0x48>
   13878:	e0bffb17 	ldw	r2,-20(fp)
   1387c:	10800324 	muli	r2,r2,12
   13880:	1007883a 	mov	r3,r2
   13884:	00820034 	movhi	r2,2048
   13888:	1084b704 	addi	r2,r2,4828
   1388c:	1887883a 	add	r3,r3,r2
   13890:	e0ffff15 	stw	r3,-4(fp)
   13894:	00000106 	br	1389c <write+0x4c>
   13898:	e03fff15 	stw	zero,-4(fp)
   1389c:	e0bfff17 	ldw	r2,-4(fp)
   138a0:	e0bffa15 	stw	r2,-24(fp)
   138a4:	e0bffa17 	ldw	r2,-24(fp)
   138a8:	1005003a 	cmpeq	r2,r2,zero
   138ac:	1000241e 	bne	r2,zero,13940 <write+0xf0>
   138b0:	e0bffa17 	ldw	r2,-24(fp)
   138b4:	10800217 	ldw	r2,8(r2)
   138b8:	108000cc 	andi	r2,r2,3
   138bc:	1005003a 	cmpeq	r2,r2,zero
   138c0:	10001a1e 	bne	r2,zero,1392c <write+0xdc>
   138c4:	e0bffa17 	ldw	r2,-24(fp)
   138c8:	10800017 	ldw	r2,0(r2)
   138cc:	10800617 	ldw	r2,24(r2)
   138d0:	1005003a 	cmpeq	r2,r2,zero
   138d4:	1000151e 	bne	r2,zero,1392c <write+0xdc>
   138d8:	e0bffa17 	ldw	r2,-24(fp)
   138dc:	10800017 	ldw	r2,0(r2)
   138e0:	10800617 	ldw	r2,24(r2)
   138e4:	e17ffc17 	ldw	r5,-16(fp)
   138e8:	e1bffd17 	ldw	r6,-12(fp)
   138ec:	e13ffa17 	ldw	r4,-24(fp)
   138f0:	103ee83a 	callr	r2
   138f4:	e0bff915 	stw	r2,-28(fp)
   138f8:	e0bff917 	ldw	r2,-28(fp)
   138fc:	1004403a 	cmpge	r2,r2,zero
   13900:	1000071e 	bne	r2,zero,13920 <write+0xd0>
   13904:	00139700 	call	13970 <alt_get_errno>
   13908:	e0fff917 	ldw	r3,-28(fp)
   1390c:	00c7c83a 	sub	r3,zero,r3
   13910:	10c00015 	stw	r3,0(r2)
   13914:	00bfffc4 	movi	r2,-1
   13918:	e0bffe15 	stw	r2,-8(fp)
   1391c:	00000e06 	br	13958 <write+0x108>
   13920:	e0bff917 	ldw	r2,-28(fp)
   13924:	e0bffe15 	stw	r2,-8(fp)
   13928:	00000b06 	br	13958 <write+0x108>
   1392c:	00139700 	call	13970 <alt_get_errno>
   13930:	1007883a 	mov	r3,r2
   13934:	00800344 	movi	r2,13
   13938:	18800015 	stw	r2,0(r3)
   1393c:	00000406 	br	13950 <write+0x100>
   13940:	00139700 	call	13970 <alt_get_errno>
   13944:	1007883a 	mov	r3,r2
   13948:	00801444 	movi	r2,81
   1394c:	18800015 	stw	r2,0(r3)
   13950:	00bfffc4 	movi	r2,-1
   13954:	e0bffe15 	stw	r2,-8(fp)
   13958:	e0bffe17 	ldw	r2,-8(fp)
   1395c:	e037883a 	mov	sp,fp
   13960:	dfc00117 	ldw	ra,4(sp)
   13964:	df000017 	ldw	fp,0(sp)
   13968:	dec00204 	addi	sp,sp,8
   1396c:	f800283a 	ret

00013970 <alt_get_errno>:
   13970:	defffd04 	addi	sp,sp,-12
   13974:	dfc00215 	stw	ra,8(sp)
   13978:	df000115 	stw	fp,4(sp)
   1397c:	df000104 	addi	fp,sp,4
   13980:	00820034 	movhi	r2,2048
   13984:	108a2a04 	addi	r2,r2,10408
   13988:	10800017 	ldw	r2,0(r2)
   1398c:	1005003a 	cmpeq	r2,r2,zero
   13990:	1000061e 	bne	r2,zero,139ac <alt_get_errno+0x3c>
   13994:	00820034 	movhi	r2,2048
   13998:	108a2a04 	addi	r2,r2,10408
   1399c:	10800017 	ldw	r2,0(r2)
   139a0:	103ee83a 	callr	r2
   139a4:	e0bfff15 	stw	r2,-4(fp)
   139a8:	00000306 	br	139b8 <alt_get_errno+0x48>
   139ac:	00820034 	movhi	r2,2048
   139b0:	108a6404 	addi	r2,r2,10640
   139b4:	e0bfff15 	stw	r2,-4(fp)
   139b8:	e0bfff17 	ldw	r2,-4(fp)
   139bc:	e037883a 	mov	sp,fp
   139c0:	dfc00117 	ldw	ra,4(sp)
   139c4:	df000017 	ldw	fp,0(sp)
   139c8:	dec00204 	addi	sp,sp,8
   139cc:	f800283a 	ret

000139d0 <alt_irq_init>:
   139d0:	defffd04 	addi	sp,sp,-12
   139d4:	dfc00215 	stw	ra,8(sp)
   139d8:	df000115 	stw	fp,4(sp)
   139dc:	df000104 	addi	fp,sp,4
   139e0:	e13fff15 	stw	r4,-4(fp)
   139e4:	001aa000 	call	1aa00 <altera_nios2_qsys_irq_init>
   139e8:	00800044 	movi	r2,1
   139ec:	1001703a 	wrctl	status,r2
   139f0:	e037883a 	mov	sp,fp
   139f4:	dfc00117 	ldw	ra,4(sp)
   139f8:	df000017 	ldw	fp,0(sp)
   139fc:	dec00204 	addi	sp,sp,8
   13a00:	f800283a 	ret

00013a04 <alt_sys_init>:
   13a04:	defffd04 	addi	sp,sp,-12
   13a08:	dfc00215 	stw	ra,8(sp)
   13a0c:	df000115 	stw	fp,4(sp)
   13a10:	df000104 	addi	fp,sp,4
   13a14:	01000134 	movhi	r4,4
   13a18:	210c1004 	addi	r4,r4,12352
   13a1c:	000b883a 	mov	r5,zero
   13a20:	000d883a 	mov	r6,zero
   13a24:	01c0fa04 	movi	r7,1000
   13a28:	001757c0 	call	1757c <alt_avalon_timer_sc_init>
   13a2c:	01020034 	movhi	r4,2048
   13a30:	21051704 	addi	r4,r4,5212
   13a34:	0013da80 	call	13da8 <alt_flash_cfi_init>
   13a38:	01020034 	movhi	r4,2048
   13a3c:	21055704 	addi	r4,r4,5468
   13a40:	000b883a 	mov	r5,zero
   13a44:	01800144 	movi	r6,5
   13a48:	0015c700 	call	15c70 <altera_avalon_jtag_uart_init>
   13a4c:	01020034 	movhi	r4,2048
   13a50:	21054d04 	addi	r4,r4,5428
   13a54:	0013d700 	call	13d70 <alt_dev_reg>
   13a58:	01020034 	movhi	r4,2048
   13a5c:	21096f04 	addi	r4,r4,9660
   13a60:	00173740 	call	17374 <altera_avalon_lcd_16207_init>
   13a64:	01020034 	movhi	r4,2048
   13a68:	21096504 	addi	r4,r4,9620
   13a6c:	0013d700 	call	13d70 <alt_dev_reg>
   13a70:	01020034 	movhi	r4,2048
   13a74:	2109b704 	addi	r4,r4,9948
   13a78:	000b883a 	mov	r5,zero
   13a7c:	018000c4 	movi	r6,3
   13a80:	00176fc0 	call	176fc <altera_avalon_uart_init>
   13a84:	01020034 	movhi	r4,2048
   13a88:	2109ad04 	addi	r4,r4,9908
   13a8c:	0013d700 	call	13d70 <alt_dev_reg>
   13a90:	01020034 	movhi	r4,2048
   13a94:	2109de04 	addi	r4,r4,10104
   13a98:	00180dc0 	call	180dc <alt_up_ps2_init>
   13a9c:	01020034 	movhi	r4,2048
   13aa0:	2109de04 	addi	r4,r4,10104
   13aa4:	0013d700 	call	13d70 <alt_dev_reg>
   13aa8:	00820034 	movhi	r2,2048
   13aac:	1089ec04 	addi	r2,r2,10160
   13ab0:	10800a17 	ldw	r2,40(r2)
   13ab4:	10800104 	addi	r2,r2,4
   13ab8:	10800017 	ldw	r2,0(r2)
   13abc:	10ffffcc 	andi	r3,r2,65535
   13ac0:	00820034 	movhi	r2,2048
   13ac4:	1089ec04 	addi	r2,r2,10160
   13ac8:	10c00c15 	stw	r3,48(r2)
   13acc:	00820034 	movhi	r2,2048
   13ad0:	1089ec04 	addi	r2,r2,10160
   13ad4:	10800a17 	ldw	r2,40(r2)
   13ad8:	10800104 	addi	r2,r2,4
   13adc:	10800017 	ldw	r2,0(r2)
   13ae0:	1005d43a 	srai	r2,r2,16
   13ae4:	10ffffcc 	andi	r3,r2,65535
   13ae8:	00820034 	movhi	r2,2048
   13aec:	1089ec04 	addi	r2,r2,10160
   13af0:	10c00d15 	stw	r3,52(r2)
   13af4:	00820034 	movhi	r2,2048
   13af8:	1089ec04 	addi	r2,r2,10160
   13afc:	10800c17 	ldw	r2,48(r2)
   13b00:	10801068 	cmpgeui	r2,r2,65
   13b04:	1000081e 	bne	r2,zero,13b28 <alt_sys_init+0x124>
   13b08:	00c20034 	movhi	r3,2048
   13b0c:	18c9ec04 	addi	r3,r3,10160
   13b10:	00800fc4 	movi	r2,63
   13b14:	18800f15 	stw	r2,60(r3)
   13b18:	00c20034 	movhi	r3,2048
   13b1c:	18c9ec04 	addi	r3,r3,10160
   13b20:	00800184 	movi	r2,6
   13b24:	18801015 	stw	r2,64(r3)
   13b28:	00820034 	movhi	r2,2048
   13b2c:	1089ec04 	addi	r2,r2,10160
   13b30:	10800d17 	ldw	r2,52(r2)
   13b34:	10800868 	cmpgeui	r2,r2,33
   13b38:	1000041e 	bne	r2,zero,13b4c <alt_sys_init+0x148>
   13b3c:	00c20034 	movhi	r3,2048
   13b40:	18c9ec04 	addi	r3,r3,10160
   13b44:	008007c4 	movi	r2,31
   13b48:	18801115 	stw	r2,68(r3)
   13b4c:	01020034 	movhi	r4,2048
   13b50:	2109ec04 	addi	r4,r4,10160
   13b54:	00186b00 	call	186b0 <alt_up_char_buffer_init>
   13b58:	01020034 	movhi	r4,2048
   13b5c:	2109ec04 	addi	r4,r4,10160
   13b60:	0013d700 	call	13d70 <alt_dev_reg>
   13b64:	00820034 	movhi	r2,2048
   13b68:	1089fe04 	addi	r2,r2,10232
   13b6c:	10800a17 	ldw	r2,40(r2)
   13b70:	10800017 	ldw	r2,0(r2)
   13b74:	1007883a 	mov	r3,r2
   13b78:	00820034 	movhi	r2,2048
   13b7c:	1089fe04 	addi	r2,r2,10232
   13b80:	10c00b15 	stw	r3,44(r2)
   13b84:	00820034 	movhi	r2,2048
   13b88:	1089fe04 	addi	r2,r2,10232
   13b8c:	10800a17 	ldw	r2,40(r2)
   13b90:	10800104 	addi	r2,r2,4
   13b94:	10800017 	ldw	r2,0(r2)
   13b98:	1007883a 	mov	r3,r2
   13b9c:	00820034 	movhi	r2,2048
   13ba0:	1089fe04 	addi	r2,r2,10232
   13ba4:	10c00c15 	stw	r3,48(r2)
   13ba8:	00820034 	movhi	r2,2048
   13bac:	1089fe04 	addi	r2,r2,10232
   13bb0:	10800a17 	ldw	r2,40(r2)
   13bb4:	10800204 	addi	r2,r2,8
   13bb8:	10800017 	ldw	r2,0(r2)
   13bbc:	10ffffcc 	andi	r3,r2,65535
   13bc0:	00820034 	movhi	r2,2048
   13bc4:	1089fe04 	addi	r2,r2,10232
   13bc8:	10c00f15 	stw	r3,60(r2)
   13bcc:	00820034 	movhi	r2,2048
   13bd0:	1089fe04 	addi	r2,r2,10232
   13bd4:	10800a17 	ldw	r2,40(r2)
   13bd8:	10800204 	addi	r2,r2,8
   13bdc:	10800017 	ldw	r2,0(r2)
   13be0:	1005d43a 	srai	r2,r2,16
   13be4:	10ffffcc 	andi	r3,r2,65535
   13be8:	00820034 	movhi	r2,2048
   13bec:	1089fe04 	addi	r2,r2,10232
   13bf0:	10c01015 	stw	r3,64(r2)
   13bf4:	00820034 	movhi	r2,2048
   13bf8:	1089fe04 	addi	r2,r2,10232
   13bfc:	10800a17 	ldw	r2,40(r2)
   13c00:	10800304 	addi	r2,r2,12
   13c04:	10800017 	ldw	r2,0(r2)
   13c08:	1005d07a 	srai	r2,r2,1
   13c0c:	10c0004c 	andi	r3,r2,1
   13c10:	00820034 	movhi	r2,2048
   13c14:	1089fe04 	addi	r2,r2,10232
   13c18:	10c00d15 	stw	r3,52(r2)
   13c1c:	00820034 	movhi	r2,2048
   13c20:	1089fe04 	addi	r2,r2,10232
   13c24:	10800a17 	ldw	r2,40(r2)
   13c28:	10800304 	addi	r2,r2,12
   13c2c:	10800017 	ldw	r2,0(r2)
   13c30:	1005d13a 	srai	r2,r2,4
   13c34:	10c003cc 	andi	r3,r2,15
   13c38:	00820034 	movhi	r2,2048
   13c3c:	1089fe04 	addi	r2,r2,10232
   13c40:	10c00e15 	stw	r3,56(r2)
   13c44:	00820034 	movhi	r2,2048
   13c48:	1089fe04 	addi	r2,r2,10232
   13c4c:	10800a17 	ldw	r2,40(r2)
   13c50:	10800304 	addi	r2,r2,12
   13c54:	10800017 	ldw	r2,0(r2)
   13c58:	1005d43a 	srai	r2,r2,16
   13c5c:	1007883a 	mov	r3,r2
   13c60:	00bfffc4 	movi	r2,-1
   13c64:	1884703a 	and	r2,r3,r2
   13c68:	e0bfff45 	stb	r2,-3(fp)
   13c6c:	00820034 	movhi	r2,2048
   13c70:	1089fe04 	addi	r2,r2,10232
   13c74:	10800a17 	ldw	r2,40(r2)
   13c78:	10800304 	addi	r2,r2,12
   13c7c:	10800017 	ldw	r2,0(r2)
   13c80:	1005d63a 	srai	r2,r2,24
   13c84:	1007883a 	mov	r3,r2
   13c88:	00bfffc4 	movi	r2,-1
   13c8c:	1884703a 	and	r2,r3,r2
   13c90:	e0bfff05 	stb	r2,-4(fp)
   13c94:	00820034 	movhi	r2,2048
   13c98:	1089fe04 	addi	r2,r2,10232
   13c9c:	10800e17 	ldw	r2,56(r2)
   13ca0:	10800058 	cmpnei	r2,r2,1
   13ca4:	1000041e 	bne	r2,zero,13cb8 <alt_sys_init+0x2b4>
   13ca8:	00820034 	movhi	r2,2048
   13cac:	1089fe04 	addi	r2,r2,10232
   13cb0:	10001115 	stw	zero,68(r2)
   13cb4:	00000e06 	br	13cf0 <alt_sys_init+0x2ec>
   13cb8:	00820034 	movhi	r2,2048
   13cbc:	1089fe04 	addi	r2,r2,10232
   13cc0:	10800e17 	ldw	r2,56(r2)
   13cc4:	10800098 	cmpnei	r2,r2,2
   13cc8:	1000051e 	bne	r2,zero,13ce0 <alt_sys_init+0x2dc>
   13ccc:	00c20034 	movhi	r3,2048
   13cd0:	18c9fe04 	addi	r3,r3,10232
   13cd4:	00800044 	movi	r2,1
   13cd8:	18801115 	stw	r2,68(r3)
   13cdc:	00000406 	br	13cf0 <alt_sys_init+0x2ec>
   13ce0:	00c20034 	movhi	r3,2048
   13ce4:	18c9fe04 	addi	r3,r3,10232
   13ce8:	00800084 	movi	r2,2
   13cec:	18801115 	stw	r2,68(r3)
   13cf0:	e0ffff43 	ldbu	r3,-3(fp)
   13cf4:	00800804 	movi	r2,32
   13cf8:	10c7c83a 	sub	r3,r2,r3
   13cfc:	00bfffc4 	movi	r2,-1
   13d00:	10c6d83a 	srl	r3,r2,r3
   13d04:	00820034 	movhi	r2,2048
   13d08:	1089fe04 	addi	r2,r2,10232
   13d0c:	10c01215 	stw	r3,72(r2)
   13d10:	e0ffff43 	ldbu	r3,-3(fp)
   13d14:	00820034 	movhi	r2,2048
   13d18:	1089fe04 	addi	r2,r2,10232
   13d1c:	10801117 	ldw	r2,68(r2)
   13d20:	1887883a 	add	r3,r3,r2
   13d24:	00820034 	movhi	r2,2048
   13d28:	1089fe04 	addi	r2,r2,10232
   13d2c:	10c01315 	stw	r3,76(r2)
   13d30:	e0ffff03 	ldbu	r3,-4(fp)
   13d34:	00800804 	movi	r2,32
   13d38:	10c7c83a 	sub	r3,r2,r3
   13d3c:	00bfffc4 	movi	r2,-1
   13d40:	10c6d83a 	srl	r3,r2,r3
   13d44:	00820034 	movhi	r2,2048
   13d48:	1089fe04 	addi	r2,r2,10232
   13d4c:	10c01415 	stw	r3,80(r2)
   13d50:	01020034 	movhi	r4,2048
   13d54:	2109fe04 	addi	r4,r4,10232
   13d58:	0013d700 	call	13d70 <alt_dev_reg>
   13d5c:	e037883a 	mov	sp,fp
   13d60:	dfc00117 	ldw	ra,4(sp)
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00204 	addi	sp,sp,8
   13d6c:	f800283a 	ret

00013d70 <alt_dev_reg>:
   13d70:	defffd04 	addi	sp,sp,-12
   13d74:	dfc00215 	stw	ra,8(sp)
   13d78:	df000115 	stw	fp,4(sp)
   13d7c:	df000104 	addi	fp,sp,4
   13d80:	e13fff15 	stw	r4,-4(fp)
   13d84:	e13fff17 	ldw	r4,-4(fp)
   13d88:	01420034 	movhi	r5,2048
   13d8c:	294a2704 	addi	r5,r5,10396
   13d90:	001a0ec0 	call	1a0ec <alt_dev_llist_insert>
   13d94:	e037883a 	mov	sp,fp
   13d98:	dfc00117 	ldw	ra,4(sp)
   13d9c:	df000017 	ldw	fp,0(sp)
   13da0:	dec00204 	addi	sp,sp,8
   13da4:	f800283a 	ret

00013da8 <alt_flash_cfi_init>:
   13da8:	defffc04 	addi	sp,sp,-16
   13dac:	dfc00315 	stw	ra,12(sp)
   13db0:	df000215 	stw	fp,8(sp)
   13db4:	df000204 	addi	fp,sp,8
   13db8:	e13fff15 	stw	r4,-4(fp)
   13dbc:	e03ffe15 	stw	zero,-8(fp)
   13dc0:	e13fff17 	ldw	r4,-4(fp)
   13dc4:	00152a00 	call	152a0 <alt_read_cfi_width>
   13dc8:	e0bffe15 	stw	r2,-8(fp)
   13dcc:	e0bffe17 	ldw	r2,-8(fp)
   13dd0:	1004c03a 	cmpne	r2,r2,zero
   13dd4:	1000031e 	bne	r2,zero,13de4 <alt_flash_cfi_init+0x3c>
   13dd8:	e13fff17 	ldw	r4,-4(fp)
   13ddc:	00149b80 	call	149b8 <alt_set_flash_width_func>
   13de0:	e0bffe15 	stw	r2,-8(fp)
   13de4:	e0bffe17 	ldw	r2,-8(fp)
   13de8:	1004c03a 	cmpne	r2,r2,zero
   13dec:	1000031e 	bne	r2,zero,13dfc <alt_flash_cfi_init+0x54>
   13df0:	e13fff17 	ldw	r4,-4(fp)
   13df4:	0014cc00 	call	14cc0 <alt_read_cfi_table>
   13df8:	e0bffe15 	stw	r2,-8(fp)
   13dfc:	e0bffe17 	ldw	r2,-8(fp)
   13e00:	1004c03a 	cmpne	r2,r2,zero
   13e04:	1000031e 	bne	r2,zero,13e14 <alt_flash_cfi_init+0x6c>
   13e08:	e13fff17 	ldw	r4,-4(fp)
   13e0c:	0014b980 	call	14b98 <alt_set_flash_algorithm_func>
   13e10:	e0bffe15 	stw	r2,-8(fp)
   13e14:	e0bffe17 	ldw	r2,-8(fp)
   13e18:	1004c03a 	cmpne	r2,r2,zero
   13e1c:	1000031e 	bne	r2,zero,13e2c <alt_flash_cfi_init+0x84>
   13e20:	e13fff17 	ldw	r4,-4(fp)
   13e24:	0013e440 	call	13e44 <alt_flash_device_register>
   13e28:	e0bffe15 	stw	r2,-8(fp)
   13e2c:	e0bffe17 	ldw	r2,-8(fp)
   13e30:	e037883a 	mov	sp,fp
   13e34:	dfc00117 	ldw	ra,4(sp)
   13e38:	df000017 	ldw	fp,0(sp)
   13e3c:	dec00204 	addi	sp,sp,8
   13e40:	f800283a 	ret

00013e44 <alt_flash_device_register>:
   13e44:	defffd04 	addi	sp,sp,-12
   13e48:	dfc00215 	stw	ra,8(sp)
   13e4c:	df000115 	stw	fp,4(sp)
   13e50:	df000104 	addi	fp,sp,4
   13e54:	e13fff15 	stw	r4,-4(fp)
   13e58:	e13fff17 	ldw	r4,-4(fp)
   13e5c:	01420034 	movhi	r5,2048
   13e60:	294a2e04 	addi	r5,r5,10424
   13e64:	001a0ec0 	call	1a0ec <alt_dev_llist_insert>
   13e68:	e037883a 	mov	sp,fp
   13e6c:	dfc00117 	ldw	ra,4(sp)
   13e70:	df000017 	ldw	fp,0(sp)
   13e74:	dec00204 	addi	sp,sp,8
   13e78:	f800283a 	ret

00013e7c <alt_flash_cfi_write>:
   13e7c:	deffef04 	addi	sp,sp,-68
   13e80:	dfc01015 	stw	ra,64(sp)
   13e84:	df000f15 	stw	fp,60(sp)
   13e88:	df000f04 	addi	fp,sp,60
   13e8c:	e13ffa15 	stw	r4,-24(fp)
   13e90:	e17ffb15 	stw	r5,-20(fp)
   13e94:	e1bffc15 	stw	r6,-16(fp)
   13e98:	e1fffd15 	stw	r7,-12(fp)
   13e9c:	e03ff915 	stw	zero,-28(fp)
   13ea0:	e0bffd17 	ldw	r2,-12(fp)
   13ea4:	e0bff515 	stw	r2,-44(fp)
   13ea8:	e0bffb17 	ldw	r2,-20(fp)
   13eac:	e0bff315 	stw	r2,-52(fp)
   13eb0:	e0bffa17 	ldw	r2,-24(fp)
   13eb4:	e0bff215 	stw	r2,-56(fp)
   13eb8:	e03ff815 	stw	zero,-32(fp)
   13ebc:	00008e06 	br	140f8 <alt_flash_cfi_write+0x27c>
   13ec0:	e0bff817 	ldw	r2,-32(fp)
   13ec4:	e0fff217 	ldw	r3,-56(fp)
   13ec8:	1004913a 	slli	r2,r2,4
   13ecc:	10c5883a 	add	r2,r2,r3
   13ed0:	10800d04 	addi	r2,r2,52
   13ed4:	10c00017 	ldw	r3,0(r2)
   13ed8:	e0bffb17 	ldw	r2,-20(fp)
   13edc:	10c08316 	blt	r2,r3,140ec <alt_flash_cfi_write+0x270>
   13ee0:	e0bff817 	ldw	r2,-32(fp)
   13ee4:	e0fff217 	ldw	r3,-56(fp)
   13ee8:	1004913a 	slli	r2,r2,4
   13eec:	10c5883a 	add	r2,r2,r3
   13ef0:	10800d04 	addi	r2,r2,52
   13ef4:	11000017 	ldw	r4,0(r2)
   13ef8:	e0bff817 	ldw	r2,-32(fp)
   13efc:	e0fff217 	ldw	r3,-56(fp)
   13f00:	1004913a 	slli	r2,r2,4
   13f04:	10c5883a 	add	r2,r2,r3
   13f08:	10800e04 	addi	r2,r2,56
   13f0c:	10800017 	ldw	r2,0(r2)
   13f10:	2087883a 	add	r3,r4,r2
   13f14:	e0bffb17 	ldw	r2,-20(fp)
   13f18:	10c0740e 	bge	r2,r3,140ec <alt_flash_cfi_write+0x270>
   13f1c:	e0bff817 	ldw	r2,-32(fp)
   13f20:	e0fff217 	ldw	r3,-56(fp)
   13f24:	1004913a 	slli	r2,r2,4
   13f28:	10c5883a 	add	r2,r2,r3
   13f2c:	10800d04 	addi	r2,r2,52
   13f30:	10800017 	ldw	r2,0(r2)
   13f34:	e0bff415 	stw	r2,-48(fp)
   13f38:	e03ff715 	stw	zero,-36(fp)
   13f3c:	00006306 	br	140cc <alt_flash_cfi_write+0x250>
   13f40:	e0fffb17 	ldw	r3,-20(fp)
   13f44:	e0bff417 	ldw	r2,-48(fp)
   13f48:	18805416 	blt	r3,r2,1409c <alt_flash_cfi_write+0x220>
   13f4c:	e0bff817 	ldw	r2,-32(fp)
   13f50:	e0fff217 	ldw	r3,-56(fp)
   13f54:	1004913a 	slli	r2,r2,4
   13f58:	10c5883a 	add	r2,r2,r3
   13f5c:	10801004 	addi	r2,r2,64
   13f60:	10c00017 	ldw	r3,0(r2)
   13f64:	e0bff417 	ldw	r2,-48(fp)
   13f68:	1887883a 	add	r3,r3,r2
   13f6c:	e0bffb17 	ldw	r2,-20(fp)
   13f70:	10c04a0e 	bge	r2,r3,1409c <alt_flash_cfi_write+0x220>
   13f74:	e0bff817 	ldw	r2,-32(fp)
   13f78:	e0fff217 	ldw	r3,-56(fp)
   13f7c:	1004913a 	slli	r2,r2,4
   13f80:	10c5883a 	add	r2,r2,r3
   13f84:	10801004 	addi	r2,r2,64
   13f88:	10c00017 	ldw	r3,0(r2)
   13f8c:	e0bff417 	ldw	r2,-48(fp)
   13f90:	1887883a 	add	r3,r3,r2
   13f94:	e0bffb17 	ldw	r2,-20(fp)
   13f98:	1885c83a 	sub	r2,r3,r2
   13f9c:	e0bff615 	stw	r2,-40(fp)
   13fa0:	e0bff617 	ldw	r2,-40(fp)
   13fa4:	e0bfff15 	stw	r2,-4(fp)
   13fa8:	e0fffd17 	ldw	r3,-12(fp)
   13fac:	e0fffe15 	stw	r3,-8(fp)
   13fb0:	e0bfff17 	ldw	r2,-4(fp)
   13fb4:	e0fffe17 	ldw	r3,-8(fp)
   13fb8:	10c0020e 	bge	r2,r3,13fc4 <alt_flash_cfi_write+0x148>
   13fbc:	e0bfff17 	ldw	r2,-4(fp)
   13fc0:	e0bffe15 	stw	r2,-8(fp)
   13fc4:	e0fffe17 	ldw	r3,-8(fp)
   13fc8:	e0fff615 	stw	r3,-40(fp)
   13fcc:	e0bff217 	ldw	r2,-56(fp)
   13fd0:	10800a17 	ldw	r2,40(r2)
   13fd4:	1007883a 	mov	r3,r2
   13fd8:	e0bffb17 	ldw	r2,-20(fp)
   13fdc:	188b883a 	add	r5,r3,r2
   13fe0:	e1bff617 	ldw	r6,-40(fp)
   13fe4:	e13ffc17 	ldw	r4,-16(fp)
   13fe8:	00080000 	call	8000 <memcmp>
   13fec:	1005003a 	cmpeq	r2,r2,zero
   13ff0:	1000131e 	bne	r2,zero,14040 <alt_flash_cfi_write+0x1c4>
   13ff4:	e0bff217 	ldw	r2,-56(fp)
   13ff8:	10800817 	ldw	r2,32(r2)
   13ffc:	e13ff217 	ldw	r4,-56(fp)
   14000:	e17ff417 	ldw	r5,-48(fp)
   14004:	103ee83a 	callr	r2
   14008:	e0bff915 	stw	r2,-28(fp)
   1400c:	e0bff917 	ldw	r2,-28(fp)
   14010:	1004c03a 	cmpne	r2,r2,zero
   14014:	10000a1e 	bne	r2,zero,14040 <alt_flash_cfi_write+0x1c4>
   14018:	e0bff217 	ldw	r2,-56(fp)
   1401c:	10c00917 	ldw	r3,36(r2)
   14020:	e13ff217 	ldw	r4,-56(fp)
   14024:	e0bff617 	ldw	r2,-40(fp)
   14028:	d8800015 	stw	r2,0(sp)
   1402c:	e17ff417 	ldw	r5,-48(fp)
   14030:	e1bffb17 	ldw	r6,-20(fp)
   14034:	e1fffc17 	ldw	r7,-16(fp)
   14038:	183ee83a 	callr	r3
   1403c:	e0bff915 	stw	r2,-28(fp)
   14040:	e0fffd17 	ldw	r3,-12(fp)
   14044:	e0bff617 	ldw	r2,-40(fp)
   14048:	18802f26 	beq	r3,r2,14108 <alt_flash_cfi_write+0x28c>
   1404c:	e0bff917 	ldw	r2,-28(fp)
   14050:	1004c03a 	cmpne	r2,r2,zero
   14054:	10002c1e 	bne	r2,zero,14108 <alt_flash_cfi_write+0x28c>
   14058:	e0fffd17 	ldw	r3,-12(fp)
   1405c:	e0bff617 	ldw	r2,-40(fp)
   14060:	1885c83a 	sub	r2,r3,r2
   14064:	e0bffd15 	stw	r2,-12(fp)
   14068:	e0bff817 	ldw	r2,-32(fp)
   1406c:	e0fff217 	ldw	r3,-56(fp)
   14070:	1004913a 	slli	r2,r2,4
   14074:	10c5883a 	add	r2,r2,r3
   14078:	10801004 	addi	r2,r2,64
   1407c:	10c00017 	ldw	r3,0(r2)
   14080:	e0bff417 	ldw	r2,-48(fp)
   14084:	1885883a 	add	r2,r3,r2
   14088:	e0bffb15 	stw	r2,-20(fp)
   1408c:	e0fffc17 	ldw	r3,-16(fp)
   14090:	e0bff617 	ldw	r2,-40(fp)
   14094:	1885883a 	add	r2,r3,r2
   14098:	e0bffc15 	stw	r2,-16(fp)
   1409c:	e0bff817 	ldw	r2,-32(fp)
   140a0:	e0fff217 	ldw	r3,-56(fp)
   140a4:	1004913a 	slli	r2,r2,4
   140a8:	10c5883a 	add	r2,r2,r3
   140ac:	10801004 	addi	r2,r2,64
   140b0:	10c00017 	ldw	r3,0(r2)
   140b4:	e0bff417 	ldw	r2,-48(fp)
   140b8:	10c5883a 	add	r2,r2,r3
   140bc:	e0bff415 	stw	r2,-48(fp)
   140c0:	e0bff717 	ldw	r2,-36(fp)
   140c4:	10800044 	addi	r2,r2,1
   140c8:	e0bff715 	stw	r2,-36(fp)
   140cc:	e0bff817 	ldw	r2,-32(fp)
   140d0:	e0fff217 	ldw	r3,-56(fp)
   140d4:	1004913a 	slli	r2,r2,4
   140d8:	10c5883a 	add	r2,r2,r3
   140dc:	10800f04 	addi	r2,r2,60
   140e0:	10c00017 	ldw	r3,0(r2)
   140e4:	e0bff717 	ldw	r2,-36(fp)
   140e8:	10ff9516 	blt	r2,r3,13f40 <alt_flash_cfi_write+0xc4>
   140ec:	e0bff817 	ldw	r2,-32(fp)
   140f0:	10800044 	addi	r2,r2,1
   140f4:	e0bff815 	stw	r2,-32(fp)
   140f8:	e0bff217 	ldw	r2,-56(fp)
   140fc:	10c00c17 	ldw	r3,48(r2)
   14100:	e0bff817 	ldw	r2,-32(fp)
   14104:	10ff6e16 	blt	r2,r3,13ec0 <alt_flash_cfi_write+0x44>
   14108:	e0bff217 	ldw	r2,-56(fp)
   1410c:	10800a17 	ldw	r2,40(r2)
   14110:	1007883a 	mov	r3,r2
   14114:	e0bff317 	ldw	r2,-52(fp)
   14118:	1889883a 	add	r4,r3,r2
   1411c:	e17ff517 	ldw	r5,-44(fp)
   14120:	001a0740 	call	1a074 <alt_dcache_flush>
   14124:	e0bff917 	ldw	r2,-28(fp)
   14128:	e037883a 	mov	sp,fp
   1412c:	dfc00117 	ldw	ra,4(sp)
   14130:	df000017 	ldw	fp,0(sp)
   14134:	dec00204 	addi	sp,sp,8
   14138:	f800283a 	ret

0001413c <alt_flash_cfi_get_info>:
   1413c:	defffa04 	addi	sp,sp,-24
   14140:	df000515 	stw	fp,20(sp)
   14144:	df000504 	addi	fp,sp,20
   14148:	e13ffd15 	stw	r4,-12(fp)
   1414c:	e17ffe15 	stw	r5,-8(fp)
   14150:	e1bfff15 	stw	r6,-4(fp)
   14154:	e03ffc15 	stw	zero,-16(fp)
   14158:	e0bffd17 	ldw	r2,-12(fp)
   1415c:	e0bffb15 	stw	r2,-20(fp)
   14160:	e0bffb17 	ldw	r2,-20(fp)
   14164:	10c00c17 	ldw	r3,48(r2)
   14168:	e0bfff17 	ldw	r2,-4(fp)
   1416c:	10c00015 	stw	r3,0(r2)
   14170:	e0bffb17 	ldw	r2,-20(fp)
   14174:	10800c17 	ldw	r2,48(r2)
   14178:	1004c03a 	cmpne	r2,r2,zero
   1417c:	1000031e 	bne	r2,zero,1418c <alt_flash_cfi_get_info+0x50>
   14180:	00bffec4 	movi	r2,-5
   14184:	e0bffc15 	stw	r2,-16(fp)
   14188:	00000b06 	br	141b8 <alt_flash_cfi_get_info+0x7c>
   1418c:	e0bffb17 	ldw	r2,-20(fp)
   14190:	10800c17 	ldw	r2,48(r2)
   14194:	10800250 	cmplti	r2,r2,9
   14198:	1000031e 	bne	r2,zero,141a8 <alt_flash_cfi_get_info+0x6c>
   1419c:	00bffd04 	movi	r2,-12
   141a0:	e0bffc15 	stw	r2,-16(fp)
   141a4:	00000406 	br	141b8 <alt_flash_cfi_get_info+0x7c>
   141a8:	e0bffb17 	ldw	r2,-20(fp)
   141ac:	10c00d04 	addi	r3,r2,52
   141b0:	e0bffe17 	ldw	r2,-8(fp)
   141b4:	10c00015 	stw	r3,0(r2)
   141b8:	e0bffc17 	ldw	r2,-16(fp)
   141bc:	e037883a 	mov	sp,fp
   141c0:	df000017 	ldw	fp,0(sp)
   141c4:	dec00104 	addi	sp,sp,4
   141c8:	f800283a 	ret

000141cc <alt_flash_cfi_read>:
   141cc:	defff904 	addi	sp,sp,-28
   141d0:	dfc00615 	stw	ra,24(sp)
   141d4:	df000515 	stw	fp,20(sp)
   141d8:	df000504 	addi	fp,sp,20
   141dc:	e13ffc15 	stw	r4,-16(fp)
   141e0:	e17ffd15 	stw	r5,-12(fp)
   141e4:	e1bffe15 	stw	r6,-8(fp)
   141e8:	e1ffff15 	stw	r7,-4(fp)
   141ec:	e0bffc17 	ldw	r2,-16(fp)
   141f0:	e0bffb15 	stw	r2,-20(fp)
   141f4:	e0bffb17 	ldw	r2,-20(fp)
   141f8:	10800a17 	ldw	r2,40(r2)
   141fc:	1007883a 	mov	r3,r2
   14200:	e0bffd17 	ldw	r2,-12(fp)
   14204:	1887883a 	add	r3,r3,r2
   14208:	e1bfff17 	ldw	r6,-4(fp)
   1420c:	e0bffe17 	ldw	r2,-8(fp)
   14210:	1009883a 	mov	r4,r2
   14214:	180b883a 	mov	r5,r3
   14218:	00080740 	call	8074 <memcpy>
   1421c:	0005883a 	mov	r2,zero
   14220:	e037883a 	mov	sp,fp
   14224:	dfc00117 	ldw	ra,4(sp)
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00204 	addi	sp,sp,8
   14230:	f800283a 	ret

00014234 <alt_write_value_to_flash>:
   14234:	defffa04 	addi	sp,sp,-24
   14238:	df000515 	stw	fp,20(sp)
   1423c:	df000504 	addi	fp,sp,20
   14240:	e13ffd15 	stw	r4,-12(fp)
   14244:	e17ffe15 	stw	r5,-8(fp)
   14248:	e1bfff15 	stw	r6,-4(fp)
   1424c:	e0bffd17 	ldw	r2,-12(fp)
   14250:	10802e17 	ldw	r2,184(r2)
   14254:	10800058 	cmpnei	r2,r2,1
   14258:	10000b1e 	bne	r2,zero,14288 <alt_write_value_to_flash+0x54>
   1425c:	e0bffd17 	ldw	r2,-12(fp)
   14260:	10800a17 	ldw	r2,40(r2)
   14264:	1007883a 	mov	r3,r2
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	1889883a 	add	r4,r3,r2
   14270:	e0bfff17 	ldw	r2,-4(fp)
   14274:	10800003 	ldbu	r2,0(r2)
   14278:	10c03fcc 	andi	r3,r2,255
   1427c:	2005883a 	mov	r2,r4
   14280:	10c00025 	stbio	r3,0(r2)
   14284:	00004006 	br	14388 <alt_write_value_to_flash+0x154>
   14288:	e0bffd17 	ldw	r2,-12(fp)
   1428c:	10802e17 	ldw	r2,184(r2)
   14290:	10800098 	cmpnei	r2,r2,2
   14294:	1000151e 	bne	r2,zero,142ec <alt_write_value_to_flash+0xb8>
   14298:	e0bfff17 	ldw	r2,-4(fp)
   1429c:	10800003 	ldbu	r2,0(r2)
   142a0:	10803fcc 	andi	r2,r2,255
   142a4:	e0bffc0d 	sth	r2,-16(fp)
   142a8:	e0bfff17 	ldw	r2,-4(fp)
   142ac:	10800044 	addi	r2,r2,1
   142b0:	10800003 	ldbu	r2,0(r2)
   142b4:	10803fcc 	andi	r2,r2,255
   142b8:	1004923a 	slli	r2,r2,8
   142bc:	1007883a 	mov	r3,r2
   142c0:	e0bffc0b 	ldhu	r2,-16(fp)
   142c4:	1884b03a 	or	r2,r3,r2
   142c8:	e0bffc0d 	sth	r2,-16(fp)
   142cc:	e0bffd17 	ldw	r2,-12(fp)
   142d0:	10800a17 	ldw	r2,40(r2)
   142d4:	1007883a 	mov	r3,r2
   142d8:	e0bffe17 	ldw	r2,-8(fp)
   142dc:	1885883a 	add	r2,r3,r2
   142e0:	e0fffc0b 	ldhu	r3,-16(fp)
   142e4:	10c0002d 	sthio	r3,0(r2)
   142e8:	00002706 	br	14388 <alt_write_value_to_flash+0x154>
   142ec:	e0bffd17 	ldw	r2,-12(fp)
   142f0:	10802e17 	ldw	r2,184(r2)
   142f4:	10800118 	cmpnei	r2,r2,4
   142f8:	1000231e 	bne	r2,zero,14388 <alt_write_value_to_flash+0x154>
   142fc:	e0bfff17 	ldw	r2,-4(fp)
   14300:	10800003 	ldbu	r2,0(r2)
   14304:	10803fcc 	andi	r2,r2,255
   14308:	e0bffb15 	stw	r2,-20(fp)
   1430c:	e0bfff17 	ldw	r2,-4(fp)
   14310:	10800044 	addi	r2,r2,1
   14314:	10800003 	ldbu	r2,0(r2)
   14318:	10803fcc 	andi	r2,r2,255
   1431c:	1006923a 	slli	r3,r2,8
   14320:	e0bffb17 	ldw	r2,-20(fp)
   14324:	10c4b03a 	or	r2,r2,r3
   14328:	e0bffb15 	stw	r2,-20(fp)
   1432c:	e0bfff17 	ldw	r2,-4(fp)
   14330:	10800084 	addi	r2,r2,2
   14334:	10800003 	ldbu	r2,0(r2)
   14338:	10803fcc 	andi	r2,r2,255
   1433c:	1006943a 	slli	r3,r2,16
   14340:	e0bffb17 	ldw	r2,-20(fp)
   14344:	10c4b03a 	or	r2,r2,r3
   14348:	e0bffb15 	stw	r2,-20(fp)
   1434c:	e0bfff17 	ldw	r2,-4(fp)
   14350:	108000c4 	addi	r2,r2,3
   14354:	10800003 	ldbu	r2,0(r2)
   14358:	10803fcc 	andi	r2,r2,255
   1435c:	1006963a 	slli	r3,r2,24
   14360:	e0bffb17 	ldw	r2,-20(fp)
   14364:	10c4b03a 	or	r2,r2,r3
   14368:	e0bffb15 	stw	r2,-20(fp)
   1436c:	e0bffd17 	ldw	r2,-12(fp)
   14370:	10800a17 	ldw	r2,40(r2)
   14374:	1007883a 	mov	r3,r2
   14378:	e0bffe17 	ldw	r2,-8(fp)
   1437c:	1885883a 	add	r2,r3,r2
   14380:	e0fffb17 	ldw	r3,-20(fp)
   14384:	10c00035 	stwio	r3,0(r2)
   14388:	e037883a 	mov	sp,fp
   1438c:	df000017 	ldw	fp,0(sp)
   14390:	dec00104 	addi	sp,sp,4
   14394:	f800283a 	ret

00014398 <alt_flash_program_block>:
   14398:	defff304 	addi	sp,sp,-52
   1439c:	dfc00c15 	stw	ra,48(sp)
   143a0:	df000b15 	stw	fp,44(sp)
   143a4:	df000b04 	addi	fp,sp,44
   143a8:	e13ffc15 	stw	r4,-16(fp)
   143ac:	e17ffd15 	stw	r5,-12(fp)
   143b0:	e1bffe15 	stw	r6,-8(fp)
   143b4:	e1ffff15 	stw	r7,-4(fp)
   143b8:	e03ffa15 	stw	zero,-24(fp)
   143bc:	e0bffc17 	ldw	r2,-16(fp)
   143c0:	10800a17 	ldw	r2,40(r2)
   143c4:	1007883a 	mov	r3,r2
   143c8:	e0bffd17 	ldw	r2,-12(fp)
   143cc:	1885883a 	add	r2,r3,r2
   143d0:	1009883a 	mov	r4,r2
   143d4:	e0bffc17 	ldw	r2,-16(fp)
   143d8:	10c02e17 	ldw	r3,184(r2)
   143dc:	20c5283a 	div	r2,r4,r3
   143e0:	10c5383a 	mul	r2,r2,r3
   143e4:	2085c83a 	sub	r2,r4,r2
   143e8:	e0bff915 	stw	r2,-28(fp)
   143ec:	e0bff917 	ldw	r2,-28(fp)
   143f0:	1005003a 	cmpeq	r2,r2,zero
   143f4:	10003a1e 	bne	r2,zero,144e0 <alt_flash_program_block+0x148>
   143f8:	e0bffc17 	ldw	r2,-16(fp)
   143fc:	10c02e17 	ldw	r3,184(r2)
   14400:	e0bff917 	ldw	r2,-28(fp)
   14404:	1885c83a 	sub	r2,r3,r2
   14408:	e0bff815 	stw	r2,-32(fp)
   1440c:	e03ff615 	stw	zero,-40(fp)
   14410:	00001206 	br	1445c <alt_flash_program_block+0xc4>
   14414:	e17ff617 	ldw	r5,-40(fp)
   14418:	e0bffc17 	ldw	r2,-16(fp)
   1441c:	10800a17 	ldw	r2,40(r2)
   14420:	1009883a 	mov	r4,r2
   14424:	e0fffd17 	ldw	r3,-12(fp)
   14428:	e0bff917 	ldw	r2,-28(fp)
   1442c:	1887c83a 	sub	r3,r3,r2
   14430:	e0bff617 	ldw	r2,-40(fp)
   14434:	1885883a 	add	r2,r3,r2
   14438:	2085883a 	add	r2,r4,r2
   1443c:	10800023 	ldbuio	r2,0(r2)
   14440:	1007883a 	mov	r3,r2
   14444:	e0bffb04 	addi	r2,fp,-20
   14448:	1145883a 	add	r2,r2,r5
   1444c:	10c00005 	stb	r3,0(r2)
   14450:	e0bff617 	ldw	r2,-40(fp)
   14454:	10800044 	addi	r2,r2,1
   14458:	e0bff615 	stw	r2,-40(fp)
   1445c:	e0fff617 	ldw	r3,-40(fp)
   14460:	e0bff917 	ldw	r2,-28(fp)
   14464:	18bfeb16 	blt	r3,r2,14414 <alt_flash_program_block+0x7c>
   14468:	e03ff615 	stw	zero,-40(fp)
   1446c:	00000e06 	br	144a8 <alt_flash_program_block+0x110>
   14470:	e0fff917 	ldw	r3,-28(fp)
   14474:	e0bff617 	ldw	r2,-40(fp)
   14478:	1889883a 	add	r4,r3,r2
   1447c:	e0bff617 	ldw	r2,-40(fp)
   14480:	1007883a 	mov	r3,r2
   14484:	e0bffe17 	ldw	r2,-8(fp)
   14488:	1885883a 	add	r2,r3,r2
   1448c:	10c00003 	ldbu	r3,0(r2)
   14490:	e0bffb04 	addi	r2,fp,-20
   14494:	1105883a 	add	r2,r2,r4
   14498:	10c00005 	stb	r3,0(r2)
   1449c:	e0bff617 	ldw	r2,-40(fp)
   144a0:	10800044 	addi	r2,r2,1
   144a4:	e0bff615 	stw	r2,-40(fp)
   144a8:	e0fff617 	ldw	r3,-40(fp)
   144ac:	e0bff817 	ldw	r2,-32(fp)
   144b0:	18bfef16 	blt	r3,r2,14470 <alt_flash_program_block+0xd8>
   144b4:	e0fffd17 	ldw	r3,-12(fp)
   144b8:	e0bff917 	ldw	r2,-28(fp)
   144bc:	188bc83a 	sub	r5,r3,r2
   144c0:	e1bffb04 	addi	r6,fp,-20
   144c4:	e0800217 	ldw	r2,8(fp)
   144c8:	e13ffc17 	ldw	r4,-16(fp)
   144cc:	103ee83a 	callr	r2
   144d0:	e0bffa15 	stw	r2,-24(fp)
   144d4:	e0bff817 	ldw	r2,-32(fp)
   144d8:	e0bff615 	stw	r2,-40(fp)
   144dc:	00000106 	br	144e4 <alt_flash_program_block+0x14c>
   144e0:	e03ff615 	stw	zero,-40(fp)
   144e4:	e0fffd17 	ldw	r3,-12(fp)
   144e8:	e0bfff17 	ldw	r2,-4(fp)
   144ec:	1889883a 	add	r4,r3,r2
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	10c02e17 	ldw	r3,184(r2)
   144f8:	20c5283a 	div	r2,r4,r3
   144fc:	10c5383a 	mul	r2,r2,r3
   14500:	2085c83a 	sub	r2,r4,r2
   14504:	e0bff715 	stw	r2,-36(fp)
   14508:	00001006 	br	1454c <alt_flash_program_block+0x1b4>
   1450c:	e0fffd17 	ldw	r3,-12(fp)
   14510:	e0bff617 	ldw	r2,-40(fp)
   14514:	188b883a 	add	r5,r3,r2
   14518:	e0bff617 	ldw	r2,-40(fp)
   1451c:	1007883a 	mov	r3,r2
   14520:	e0bffe17 	ldw	r2,-8(fp)
   14524:	188d883a 	add	r6,r3,r2
   14528:	e0800217 	ldw	r2,8(fp)
   1452c:	e13ffc17 	ldw	r4,-16(fp)
   14530:	103ee83a 	callr	r2
   14534:	e0bffa15 	stw	r2,-24(fp)
   14538:	e0bffc17 	ldw	r2,-16(fp)
   1453c:	10c02e17 	ldw	r3,184(r2)
   14540:	e0bff617 	ldw	r2,-40(fp)
   14544:	10c5883a 	add	r2,r2,r3
   14548:	e0bff615 	stw	r2,-40(fp)
   1454c:	e0bffa17 	ldw	r2,-24(fp)
   14550:	1004c03a 	cmpne	r2,r2,zero
   14554:	1000051e 	bne	r2,zero,1456c <alt_flash_program_block+0x1d4>
   14558:	e0ffff17 	ldw	r3,-4(fp)
   1455c:	e0bff717 	ldw	r2,-36(fp)
   14560:	1887c83a 	sub	r3,r3,r2
   14564:	e0bff617 	ldw	r2,-40(fp)
   14568:	10ffe816 	blt	r2,r3,1450c <alt_flash_program_block+0x174>
   1456c:	e0bff717 	ldw	r2,-36(fp)
   14570:	1005003a 	cmpeq	r2,r2,zero
   14574:	10003c1e 	bne	r2,zero,14668 <alt_flash_program_block+0x2d0>
   14578:	e0bffa17 	ldw	r2,-24(fp)
   1457c:	1004c03a 	cmpne	r2,r2,zero
   14580:	1000391e 	bne	r2,zero,14668 <alt_flash_program_block+0x2d0>
   14584:	e0bffc17 	ldw	r2,-16(fp)
   14588:	10c02e17 	ldw	r3,184(r2)
   1458c:	e0bff717 	ldw	r2,-36(fp)
   14590:	1885c83a 	sub	r2,r3,r2
   14594:	e0bff915 	stw	r2,-28(fp)
   14598:	e03ff515 	stw	zero,-44(fp)
   1459c:	00000e06 	br	145d8 <alt_flash_program_block+0x240>
   145a0:	e13ff517 	ldw	r4,-44(fp)
   145a4:	e0bff617 	ldw	r2,-40(fp)
   145a8:	1007883a 	mov	r3,r2
   145ac:	e0bffe17 	ldw	r2,-8(fp)
   145b0:	1887883a 	add	r3,r3,r2
   145b4:	e0bff517 	ldw	r2,-44(fp)
   145b8:	1885883a 	add	r2,r3,r2
   145bc:	10c00003 	ldbu	r3,0(r2)
   145c0:	e0bffb04 	addi	r2,fp,-20
   145c4:	1105883a 	add	r2,r2,r4
   145c8:	10c00005 	stb	r3,0(r2)
   145cc:	e0bff517 	ldw	r2,-44(fp)
   145d0:	10800044 	addi	r2,r2,1
   145d4:	e0bff515 	stw	r2,-44(fp)
   145d8:	e0fff517 	ldw	r3,-44(fp)
   145dc:	e0bff717 	ldw	r2,-36(fp)
   145e0:	18bfef16 	blt	r3,r2,145a0 <alt_flash_program_block+0x208>
   145e4:	e03ff515 	stw	zero,-44(fp)
   145e8:	00001406 	br	1463c <alt_flash_program_block+0x2a4>
   145ec:	e0fff717 	ldw	r3,-36(fp)
   145f0:	e0bff517 	ldw	r2,-44(fp)
   145f4:	188b883a 	add	r5,r3,r2
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	10800a17 	ldw	r2,40(r2)
   14600:	1009883a 	mov	r4,r2
   14604:	e0fffd17 	ldw	r3,-12(fp)
   14608:	e0bfff17 	ldw	r2,-4(fp)
   1460c:	1887883a 	add	r3,r3,r2
   14610:	e0bff517 	ldw	r2,-44(fp)
   14614:	1885883a 	add	r2,r3,r2
   14618:	2085883a 	add	r2,r4,r2
   1461c:	10800023 	ldbuio	r2,0(r2)
   14620:	1007883a 	mov	r3,r2
   14624:	e0bffb04 	addi	r2,fp,-20
   14628:	1145883a 	add	r2,r2,r5
   1462c:	10c00005 	stb	r3,0(r2)
   14630:	e0bff517 	ldw	r2,-44(fp)
   14634:	10800044 	addi	r2,r2,1
   14638:	e0bff515 	stw	r2,-44(fp)
   1463c:	e0fff517 	ldw	r3,-44(fp)
   14640:	e0bff917 	ldw	r2,-28(fp)
   14644:	18bfe916 	blt	r3,r2,145ec <alt_flash_program_block+0x254>
   14648:	e0fffd17 	ldw	r3,-12(fp)
   1464c:	e0bff617 	ldw	r2,-40(fp)
   14650:	188b883a 	add	r5,r3,r2
   14654:	e1bffb04 	addi	r6,fp,-20
   14658:	e0800217 	ldw	r2,8(fp)
   1465c:	e13ffc17 	ldw	r4,-16(fp)
   14660:	103ee83a 	callr	r2
   14664:	e0bffa15 	stw	r2,-24(fp)
   14668:	e0bffa17 	ldw	r2,-24(fp)
   1466c:	e037883a 	mov	sp,fp
   14670:	dfc00117 	ldw	ra,4(sp)
   14674:	df000017 	ldw	fp,0(sp)
   14678:	dec00204 	addi	sp,sp,8
   1467c:	f800283a 	ret

00014680 <alt_read_query_entry_8bit>:
   14680:	defffd04 	addi	sp,sp,-12
   14684:	df000215 	stw	fp,8(sp)
   14688:	df000204 	addi	fp,sp,8
   1468c:	e13ffe15 	stw	r4,-8(fp)
   14690:	e17fff15 	stw	r5,-4(fp)
   14694:	e0bffe17 	ldw	r2,-8(fp)
   14698:	10800a17 	ldw	r2,40(r2)
   1469c:	1007883a 	mov	r3,r2
   146a0:	e0bfff17 	ldw	r2,-4(fp)
   146a4:	1885883a 	add	r2,r3,r2
   146a8:	10800023 	ldbuio	r2,0(r2)
   146ac:	10803fcc 	andi	r2,r2,255
   146b0:	e037883a 	mov	sp,fp
   146b4:	df000017 	ldw	fp,0(sp)
   146b8:	dec00104 	addi	sp,sp,4
   146bc:	f800283a 	ret

000146c0 <alt_read_query_entry_16bit>:
   146c0:	defffd04 	addi	sp,sp,-12
   146c4:	df000215 	stw	fp,8(sp)
   146c8:	df000204 	addi	fp,sp,8
   146cc:	e13ffe15 	stw	r4,-8(fp)
   146d0:	e17fff15 	stw	r5,-4(fp)
   146d4:	e0bffe17 	ldw	r2,-8(fp)
   146d8:	10800a17 	ldw	r2,40(r2)
   146dc:	1007883a 	mov	r3,r2
   146e0:	e0bfff17 	ldw	r2,-4(fp)
   146e4:	1085883a 	add	r2,r2,r2
   146e8:	1885883a 	add	r2,r3,r2
   146ec:	1080002b 	ldhuio	r2,0(r2)
   146f0:	10803fcc 	andi	r2,r2,255
   146f4:	e037883a 	mov	sp,fp
   146f8:	df000017 	ldw	fp,0(sp)
   146fc:	dec00104 	addi	sp,sp,4
   14700:	f800283a 	ret

00014704 <alt_read_query_entry_32bit>:
   14704:	defffd04 	addi	sp,sp,-12
   14708:	df000215 	stw	fp,8(sp)
   1470c:	df000204 	addi	fp,sp,8
   14710:	e13ffe15 	stw	r4,-8(fp)
   14714:	e17fff15 	stw	r5,-4(fp)
   14718:	e0bffe17 	ldw	r2,-8(fp)
   1471c:	10800a17 	ldw	r2,40(r2)
   14720:	1007883a 	mov	r3,r2
   14724:	e0bfff17 	ldw	r2,-4(fp)
   14728:	1085883a 	add	r2,r2,r2
   1472c:	1085883a 	add	r2,r2,r2
   14730:	1885883a 	add	r2,r3,r2
   14734:	10800037 	ldwio	r2,0(r2)
   14738:	10803fcc 	andi	r2,r2,255
   1473c:	e037883a 	mov	sp,fp
   14740:	df000017 	ldw	fp,0(sp)
   14744:	dec00104 	addi	sp,sp,4
   14748:	f800283a 	ret

0001474c <alt_write_flash_command_8bit_device_8bit_mode>:
   1474c:	defffc04 	addi	sp,sp,-16
   14750:	df000315 	stw	fp,12(sp)
   14754:	df000304 	addi	fp,sp,12
   14758:	e13ffd15 	stw	r4,-12(fp)
   1475c:	e17ffe15 	stw	r5,-8(fp)
   14760:	e1bfff05 	stb	r6,-4(fp)
   14764:	e0fffd17 	ldw	r3,-12(fp)
   14768:	e0bffe17 	ldw	r2,-8(fp)
   1476c:	1885883a 	add	r2,r3,r2
   14770:	e0ffff03 	ldbu	r3,-4(fp)
   14774:	10c00025 	stbio	r3,0(r2)
   14778:	e037883a 	mov	sp,fp
   1477c:	df000017 	ldw	fp,0(sp)
   14780:	dec00104 	addi	sp,sp,4
   14784:	f800283a 	ret

00014788 <alt_write_flash_command_16bit_device_8bit_mode>:
   14788:	defffc04 	addi	sp,sp,-16
   1478c:	df000315 	stw	fp,12(sp)
   14790:	df000304 	addi	fp,sp,12
   14794:	e13ffd15 	stw	r4,-12(fp)
   14798:	e17ffe15 	stw	r5,-8(fp)
   1479c:	e1bfff05 	stb	r6,-4(fp)
   147a0:	e0bffe17 	ldw	r2,-8(fp)
   147a4:	1080004c 	andi	r2,r2,1
   147a8:	10803fcc 	andi	r2,r2,255
   147ac:	1005003a 	cmpeq	r2,r2,zero
   147b0:	1000081e 	bne	r2,zero,147d4 <alt_write_flash_command_16bit_device_8bit_mode+0x4c>
   147b4:	e0bffe17 	ldw	r2,-8(fp)
   147b8:	1085883a 	add	r2,r2,r2
   147bc:	1007883a 	mov	r3,r2
   147c0:	e0bffd17 	ldw	r2,-12(fp)
   147c4:	1885883a 	add	r2,r3,r2
   147c8:	e0ffff03 	ldbu	r3,-4(fp)
   147cc:	10c00025 	stbio	r3,0(r2)
   147d0:	00000806 	br	147f4 <alt_write_flash_command_16bit_device_8bit_mode+0x6c>
   147d4:	e0bffe17 	ldw	r2,-8(fp)
   147d8:	1085883a 	add	r2,r2,r2
   147dc:	1007883a 	mov	r3,r2
   147e0:	e0bffd17 	ldw	r2,-12(fp)
   147e4:	1885883a 	add	r2,r3,r2
   147e8:	10800044 	addi	r2,r2,1
   147ec:	e0ffff03 	ldbu	r3,-4(fp)
   147f0:	10c00025 	stbio	r3,0(r2)
   147f4:	e037883a 	mov	sp,fp
   147f8:	df000017 	ldw	fp,0(sp)
   147fc:	dec00104 	addi	sp,sp,4
   14800:	f800283a 	ret

00014804 <alt_write_flash_command_32bit_device_8bit_mode>:
   14804:	defffc04 	addi	sp,sp,-16
   14808:	df000315 	stw	fp,12(sp)
   1480c:	df000304 	addi	fp,sp,12
   14810:	e13ffd15 	stw	r4,-12(fp)
   14814:	e17ffe15 	stw	r5,-8(fp)
   14818:	e1bfff05 	stb	r6,-4(fp)
   1481c:	e0bffe17 	ldw	r2,-8(fp)
   14820:	1085883a 	add	r2,r2,r2
   14824:	1085883a 	add	r2,r2,r2
   14828:	1007883a 	mov	r3,r2
   1482c:	e0bffd17 	ldw	r2,-12(fp)
   14830:	1885883a 	add	r2,r3,r2
   14834:	e0ffff03 	ldbu	r3,-4(fp)
   14838:	10c00025 	stbio	r3,0(r2)
   1483c:	e037883a 	mov	sp,fp
   14840:	df000017 	ldw	fp,0(sp)
   14844:	dec00104 	addi	sp,sp,4
   14848:	f800283a 	ret

0001484c <alt_write_flash_command_16bit_device_16bit_mode>:
   1484c:	defffc04 	addi	sp,sp,-16
   14850:	df000315 	stw	fp,12(sp)
   14854:	df000304 	addi	fp,sp,12
   14858:	e13ffd15 	stw	r4,-12(fp)
   1485c:	e17ffe15 	stw	r5,-8(fp)
   14860:	e1bfff05 	stb	r6,-4(fp)
   14864:	e0bffe17 	ldw	r2,-8(fp)
   14868:	1085883a 	add	r2,r2,r2
   1486c:	1007883a 	mov	r3,r2
   14870:	e0bffd17 	ldw	r2,-12(fp)
   14874:	1885883a 	add	r2,r3,r2
   14878:	e0ffff03 	ldbu	r3,-4(fp)
   1487c:	10c0002d 	sthio	r3,0(r2)
   14880:	e037883a 	mov	sp,fp
   14884:	df000017 	ldw	fp,0(sp)
   14888:	dec00104 	addi	sp,sp,4
   1488c:	f800283a 	ret

00014890 <alt_write_flash_command_32bit_device_16bit_mode>:
   14890:	defffc04 	addi	sp,sp,-16
   14894:	df000315 	stw	fp,12(sp)
   14898:	df000304 	addi	fp,sp,12
   1489c:	e13ffd15 	stw	r4,-12(fp)
   148a0:	e17ffe15 	stw	r5,-8(fp)
   148a4:	e1bfff05 	stb	r6,-4(fp)
   148a8:	e0bffe17 	ldw	r2,-8(fp)
   148ac:	1085883a 	add	r2,r2,r2
   148b0:	1085883a 	add	r2,r2,r2
   148b4:	1007883a 	mov	r3,r2
   148b8:	e0bffd17 	ldw	r2,-12(fp)
   148bc:	1885883a 	add	r2,r3,r2
   148c0:	e0ffff03 	ldbu	r3,-4(fp)
   148c4:	10c0002d 	sthio	r3,0(r2)
   148c8:	e037883a 	mov	sp,fp
   148cc:	df000017 	ldw	fp,0(sp)
   148d0:	dec00104 	addi	sp,sp,4
   148d4:	f800283a 	ret

000148d8 <alt_write_flash_command_32bit_device_32bit_mode>:
   148d8:	defffc04 	addi	sp,sp,-16
   148dc:	df000315 	stw	fp,12(sp)
   148e0:	df000304 	addi	fp,sp,12
   148e4:	e13ffd15 	stw	r4,-12(fp)
   148e8:	e17ffe15 	stw	r5,-8(fp)
   148ec:	e1bfff05 	stb	r6,-4(fp)
   148f0:	e0bffe17 	ldw	r2,-8(fp)
   148f4:	1085883a 	add	r2,r2,r2
   148f8:	1085883a 	add	r2,r2,r2
   148fc:	1007883a 	mov	r3,r2
   14900:	e0bffd17 	ldw	r2,-12(fp)
   14904:	1885883a 	add	r2,r3,r2
   14908:	e0ffff03 	ldbu	r3,-4(fp)
   1490c:	10c00035 	stwio	r3,0(r2)
   14910:	e037883a 	mov	sp,fp
   14914:	df000017 	ldw	fp,0(sp)
   14918:	dec00104 	addi	sp,sp,4
   1491c:	f800283a 	ret

00014920 <alt_write_native_8bit>:
   14920:	defffd04 	addi	sp,sp,-12
   14924:	df000215 	stw	fp,8(sp)
   14928:	df000204 	addi	fp,sp,8
   1492c:	e13ffe15 	stw	r4,-8(fp)
   14930:	e17fff15 	stw	r5,-4(fp)
   14934:	e0bfff17 	ldw	r2,-4(fp)
   14938:	10c03fcc 	andi	r3,r2,255
   1493c:	e0bffe17 	ldw	r2,-8(fp)
   14940:	10c00025 	stbio	r3,0(r2)
   14944:	e037883a 	mov	sp,fp
   14948:	df000017 	ldw	fp,0(sp)
   1494c:	dec00104 	addi	sp,sp,4
   14950:	f800283a 	ret

00014954 <alt_write_native_16bit>:
   14954:	defffd04 	addi	sp,sp,-12
   14958:	df000215 	stw	fp,8(sp)
   1495c:	df000204 	addi	fp,sp,8
   14960:	e13ffe15 	stw	r4,-8(fp)
   14964:	e17fff15 	stw	r5,-4(fp)
   14968:	e0bfff17 	ldw	r2,-4(fp)
   1496c:	10ffffcc 	andi	r3,r2,65535
   14970:	e0bffe17 	ldw	r2,-8(fp)
   14974:	10c0002d 	sthio	r3,0(r2)
   14978:	e037883a 	mov	sp,fp
   1497c:	df000017 	ldw	fp,0(sp)
   14980:	dec00104 	addi	sp,sp,4
   14984:	f800283a 	ret

00014988 <alt_write_native_32bit>:
   14988:	defffd04 	addi	sp,sp,-12
   1498c:	df000215 	stw	fp,8(sp)
   14990:	df000204 	addi	fp,sp,8
   14994:	e13ffe15 	stw	r4,-8(fp)
   14998:	e17fff15 	stw	r5,-4(fp)
   1499c:	e0ffff17 	ldw	r3,-4(fp)
   149a0:	e0bffe17 	ldw	r2,-8(fp)
   149a4:	10c00035 	stwio	r3,0(r2)
   149a8:	e037883a 	mov	sp,fp
   149ac:	df000017 	ldw	fp,0(sp)
   149b0:	dec00104 	addi	sp,sp,4
   149b4:	f800283a 	ret

000149b8 <alt_set_flash_width_func>:
   149b8:	defffb04 	addi	sp,sp,-20
   149bc:	df000415 	stw	fp,16(sp)
   149c0:	df000404 	addi	fp,sp,16
   149c4:	e13ffd15 	stw	r4,-12(fp)
   149c8:	e03ffc15 	stw	zero,-16(fp)
   149cc:	e0bffd17 	ldw	r2,-12(fp)
   149d0:	10802e17 	ldw	r2,184(r2)
   149d4:	e0bfff15 	stw	r2,-4(fp)
   149d8:	e0ffff17 	ldw	r3,-4(fp)
   149dc:	188000a0 	cmpeqi	r2,r3,2
   149e0:	1000261e 	bne	r2,zero,14a7c <alt_set_flash_width_func+0xc4>
   149e4:	e0ffff17 	ldw	r3,-4(fp)
   149e8:	18800120 	cmpeqi	r2,r3,4
   149ec:	1000391e 	bne	r2,zero,14ad4 <alt_set_flash_width_func+0x11c>
   149f0:	e0ffff17 	ldw	r3,-4(fp)
   149f4:	18800060 	cmpeqi	r2,r3,1
   149f8:	1000011e 	bne	r2,zero,14a00 <alt_set_flash_width_func+0x48>
   149fc:	00003e06 	br	14af8 <alt_set_flash_width_func+0x140>
   14a00:	e0fffd17 	ldw	r3,-12(fp)
   14a04:	00800074 	movhi	r2,1
   14a08:	10924804 	addi	r2,r2,18720
   14a0c:	18803515 	stw	r2,212(r3)
   14a10:	e0bffd17 	ldw	r2,-12(fp)
   14a14:	10802f17 	ldw	r2,188(r2)
   14a18:	10800058 	cmpnei	r2,r2,1
   14a1c:	1000051e 	bne	r2,zero,14a34 <alt_set_flash_width_func+0x7c>
   14a20:	e0fffd17 	ldw	r3,-12(fp)
   14a24:	00800074 	movhi	r2,1
   14a28:	1091d304 	addi	r2,r2,18252
   14a2c:	18803315 	stw	r2,204(r3)
   14a30:	00003306 	br	14b00 <alt_set_flash_width_func+0x148>
   14a34:	e0bffd17 	ldw	r2,-12(fp)
   14a38:	10802f17 	ldw	r2,188(r2)
   14a3c:	10800098 	cmpnei	r2,r2,2
   14a40:	1000051e 	bne	r2,zero,14a58 <alt_set_flash_width_func+0xa0>
   14a44:	e0fffd17 	ldw	r3,-12(fp)
   14a48:	00800074 	movhi	r2,1
   14a4c:	1091e204 	addi	r2,r2,18312
   14a50:	18803315 	stw	r2,204(r3)
   14a54:	00002a06 	br	14b00 <alt_set_flash_width_func+0x148>
   14a58:	e0bffd17 	ldw	r2,-12(fp)
   14a5c:	10802f17 	ldw	r2,188(r2)
   14a60:	10800118 	cmpnei	r2,r2,4
   14a64:	1000261e 	bne	r2,zero,14b00 <alt_set_flash_width_func+0x148>
   14a68:	e0fffd17 	ldw	r3,-12(fp)
   14a6c:	00800074 	movhi	r2,1
   14a70:	10920104 	addi	r2,r2,18436
   14a74:	18803315 	stw	r2,204(r3)
   14a78:	00002106 	br	14b00 <alt_set_flash_width_func+0x148>
   14a7c:	e0fffd17 	ldw	r3,-12(fp)
   14a80:	00800074 	movhi	r2,1
   14a84:	10925504 	addi	r2,r2,18772
   14a88:	18803515 	stw	r2,212(r3)
   14a8c:	e0bffd17 	ldw	r2,-12(fp)
   14a90:	10802f17 	ldw	r2,188(r2)
   14a94:	10800098 	cmpnei	r2,r2,2
   14a98:	1000051e 	bne	r2,zero,14ab0 <alt_set_flash_width_func+0xf8>
   14a9c:	e0fffd17 	ldw	r3,-12(fp)
   14aa0:	00800074 	movhi	r2,1
   14aa4:	10921304 	addi	r2,r2,18508
   14aa8:	18803315 	stw	r2,204(r3)
   14aac:	00001406 	br	14b00 <alt_set_flash_width_func+0x148>
   14ab0:	e0bffd17 	ldw	r2,-12(fp)
   14ab4:	10802f17 	ldw	r2,188(r2)
   14ab8:	10800118 	cmpnei	r2,r2,4
   14abc:	1000101e 	bne	r2,zero,14b00 <alt_set_flash_width_func+0x148>
   14ac0:	e0fffd17 	ldw	r3,-12(fp)
   14ac4:	00800074 	movhi	r2,1
   14ac8:	10922404 	addi	r2,r2,18576
   14acc:	18803315 	stw	r2,204(r3)
   14ad0:	00000b06 	br	14b00 <alt_set_flash_width_func+0x148>
   14ad4:	e0fffd17 	ldw	r3,-12(fp)
   14ad8:	00800074 	movhi	r2,1
   14adc:	10926204 	addi	r2,r2,18824
   14ae0:	18803515 	stw	r2,212(r3)
   14ae4:	e0fffd17 	ldw	r3,-12(fp)
   14ae8:	00800074 	movhi	r2,1
   14aec:	10923604 	addi	r2,r2,18648
   14af0:	18803315 	stw	r2,204(r3)
   14af4:	00000206 	br	14b00 <alt_set_flash_width_func+0x148>
   14af8:	00bffcc4 	movi	r2,-13
   14afc:	e0bffc15 	stw	r2,-16(fp)
   14b00:	e0bffc17 	ldw	r2,-16(fp)
   14b04:	1004c03a 	cmpne	r2,r2,zero
   14b08:	10001e1e 	bne	r2,zero,14b84 <alt_set_flash_width_func+0x1cc>
   14b0c:	e0bffd17 	ldw	r2,-12(fp)
   14b10:	10802f17 	ldw	r2,188(r2)
   14b14:	e0bffe15 	stw	r2,-8(fp)
   14b18:	e0fffe17 	ldw	r3,-8(fp)
   14b1c:	188000a0 	cmpeqi	r2,r3,2
   14b20:	10000c1e 	bne	r2,zero,14b54 <alt_set_flash_width_func+0x19c>
   14b24:	e0fffe17 	ldw	r3,-8(fp)
   14b28:	18800120 	cmpeqi	r2,r3,4
   14b2c:	10000e1e 	bne	r2,zero,14b68 <alt_set_flash_width_func+0x1b0>
   14b30:	e0fffe17 	ldw	r3,-8(fp)
   14b34:	18800060 	cmpeqi	r2,r3,1
   14b38:	1000011e 	bne	r2,zero,14b40 <alt_set_flash_width_func+0x188>
   14b3c:	00000f06 	br	14b7c <alt_set_flash_width_func+0x1c4>
   14b40:	e0fffd17 	ldw	r3,-12(fp)
   14b44:	00800074 	movhi	r2,1
   14b48:	1091a004 	addi	r2,r2,18048
   14b4c:	18803415 	stw	r2,208(r3)
   14b50:	00000c06 	br	14b84 <alt_set_flash_width_func+0x1cc>
   14b54:	e0fffd17 	ldw	r3,-12(fp)
   14b58:	00800074 	movhi	r2,1
   14b5c:	1091b004 	addi	r2,r2,18112
   14b60:	18803415 	stw	r2,208(r3)
   14b64:	00000706 	br	14b84 <alt_set_flash_width_func+0x1cc>
   14b68:	e0fffd17 	ldw	r3,-12(fp)
   14b6c:	00800074 	movhi	r2,1
   14b70:	1091c104 	addi	r2,r2,18180
   14b74:	18803415 	stw	r2,208(r3)
   14b78:	00000206 	br	14b84 <alt_set_flash_width_func+0x1cc>
   14b7c:	00bffcc4 	movi	r2,-13
   14b80:	e0bffc15 	stw	r2,-16(fp)
   14b84:	e0bffc17 	ldw	r2,-16(fp)
   14b88:	e037883a 	mov	sp,fp
   14b8c:	df000017 	ldw	fp,0(sp)
   14b90:	dec00104 	addi	sp,sp,4
   14b94:	f800283a 	ret

00014b98 <alt_set_flash_algorithm_func>:
   14b98:	defffc04 	addi	sp,sp,-16
   14b9c:	df000315 	stw	fp,12(sp)
   14ba0:	df000304 	addi	fp,sp,12
   14ba4:	e13ffe15 	stw	r4,-8(fp)
   14ba8:	e03ffd15 	stw	zero,-12(fp)
   14bac:	e0bffe17 	ldw	r2,-8(fp)
   14bb0:	10802d17 	ldw	r2,180(r2)
   14bb4:	e0bfff15 	stw	r2,-4(fp)
   14bb8:	e0ffff17 	ldw	r3,-4(fp)
   14bbc:	188000a0 	cmpeqi	r2,r3,2
   14bc0:	1000071e 	bne	r2,zero,14be0 <alt_set_flash_algorithm_func+0x48>
   14bc4:	e0ffff17 	ldw	r3,-4(fp)
   14bc8:	188000e0 	cmpeqi	r2,r3,3
   14bcc:	10000d1e 	bne	r2,zero,14c04 <alt_set_flash_algorithm_func+0x6c>
   14bd0:	e0ffff17 	ldw	r3,-4(fp)
   14bd4:	18800060 	cmpeqi	r2,r3,1
   14bd8:	10000a1e 	bne	r2,zero,14c04 <alt_set_flash_algorithm_func+0x6c>
   14bdc:	00001206 	br	14c28 <alt_set_flash_algorithm_func+0x90>
   14be0:	e0fffe17 	ldw	r3,-8(fp)
   14be4:	008000b4 	movhi	r2,2
   14be8:	10aaa204 	addi	r2,r2,-21880
   14bec:	18800815 	stw	r2,32(r3)
   14bf0:	e0fffe17 	ldw	r3,-8(fp)
   14bf4:	008000b4 	movhi	r2,2
   14bf8:	10aa8804 	addi	r2,r2,-21984
   14bfc:	18800915 	stw	r2,36(r3)
   14c00:	00000b06 	br	14c30 <alt_set_flash_algorithm_func+0x98>
   14c04:	e0fffe17 	ldw	r3,-8(fp)
   14c08:	008000b4 	movhi	r2,2
   14c0c:	10abc104 	addi	r2,r2,-20732
   14c10:	18800815 	stw	r2,32(r3)
   14c14:	e0fffe17 	ldw	r3,-8(fp)
   14c18:	008000b4 	movhi	r2,2
   14c1c:	10aba004 	addi	r2,r2,-20864
   14c20:	18800915 	stw	r2,36(r3)
   14c24:	00000206 	br	14c30 <alt_set_flash_algorithm_func+0x98>
   14c28:	00bffec4 	movi	r2,-5
   14c2c:	e0bffd15 	stw	r2,-12(fp)
   14c30:	e0bffd17 	ldw	r2,-12(fp)
   14c34:	e037883a 	mov	sp,fp
   14c38:	df000017 	ldw	fp,0(sp)
   14c3c:	dec00104 	addi	sp,sp,4
   14c40:	f800283a 	ret

00014c44 <alt_read_16bit_query_entry>:
   14c44:	defffb04 	addi	sp,sp,-20
   14c48:	dfc00415 	stw	ra,16(sp)
   14c4c:	df000315 	stw	fp,12(sp)
   14c50:	df000304 	addi	fp,sp,12
   14c54:	e13ffe15 	stw	r4,-8(fp)
   14c58:	e17fff15 	stw	r5,-4(fp)
   14c5c:	e0bffe17 	ldw	r2,-8(fp)
   14c60:	10803417 	ldw	r2,208(r2)
   14c64:	e13ffe17 	ldw	r4,-8(fp)
   14c68:	e17fff17 	ldw	r5,-4(fp)
   14c6c:	103ee83a 	callr	r2
   14c70:	10803fcc 	andi	r2,r2,255
   14c74:	e0bffd0d 	sth	r2,-12(fp)
   14c78:	e0bffe17 	ldw	r2,-8(fp)
   14c7c:	10c03417 	ldw	r3,208(r2)
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	11400044 	addi	r5,r2,1
   14c88:	e13ffe17 	ldw	r4,-8(fp)
   14c8c:	183ee83a 	callr	r3
   14c90:	10803fcc 	andi	r2,r2,255
   14c94:	1004923a 	slli	r2,r2,8
   14c98:	1007883a 	mov	r3,r2
   14c9c:	e0bffd0b 	ldhu	r2,-12(fp)
   14ca0:	1884b03a 	or	r2,r3,r2
   14ca4:	e0bffd0d 	sth	r2,-12(fp)
   14ca8:	e0bffd0b 	ldhu	r2,-12(fp)
   14cac:	e037883a 	mov	sp,fp
   14cb0:	dfc00117 	ldw	ra,4(sp)
   14cb4:	df000017 	ldw	fp,0(sp)
   14cb8:	dec00204 	addi	sp,sp,8
   14cbc:	f800283a 	ret

00014cc0 <alt_read_cfi_table>:
   14cc0:	defff104 	addi	sp,sp,-60
   14cc4:	dfc00e15 	stw	ra,56(sp)
   14cc8:	df000d15 	stw	fp,52(sp)
   14ccc:	dc000c15 	stw	r16,48(sp)
   14cd0:	df000c04 	addi	fp,sp,48
   14cd4:	e13ffe15 	stw	r4,-8(fp)
   14cd8:	e03ffa15 	stw	zero,-24(fp)
   14cdc:	e03ff915 	stw	zero,-28(fp)
   14ce0:	e03ff515 	stw	zero,-44(fp)
   14ce4:	e13ffe17 	ldw	r4,-8(fp)
   14ce8:	0015a4c0 	call	15a4c <alt_check_primary_table>
   14cec:	e0bffa15 	stw	r2,-24(fp)
   14cf0:	e0bffa17 	ldw	r2,-24(fp)
   14cf4:	1004c03a 	cmpne	r2,r2,zero
   14cf8:	1001621e 	bne	r2,zero,15284 <alt_read_cfi_table+0x5c4>
   14cfc:	e0bffe17 	ldw	r2,-8(fp)
   14d00:	10803417 	ldw	r2,208(r2)
   14d04:	e13ffe17 	ldw	r4,-8(fp)
   14d08:	014004c4 	movi	r5,19
   14d0c:	103ee83a 	callr	r2
   14d10:	10c03fcc 	andi	r3,r2,255
   14d14:	e0bffe17 	ldw	r2,-8(fp)
   14d18:	10c02d15 	stw	r3,180(r2)
   14d1c:	e0bffe17 	ldw	r2,-8(fp)
   14d20:	10803417 	ldw	r2,208(r2)
   14d24:	e13ffe17 	ldw	r4,-8(fp)
   14d28:	014007c4 	movi	r5,31
   14d2c:	103ee83a 	callr	r2
   14d30:	10803fcc 	andi	r2,r2,255
   14d34:	e0bff715 	stw	r2,-36(fp)
   14d38:	e0bffe17 	ldw	r2,-8(fp)
   14d3c:	10803417 	ldw	r2,208(r2)
   14d40:	e13ffe17 	ldw	r4,-8(fp)
   14d44:	014008c4 	movi	r5,35
   14d48:	103ee83a 	callr	r2
   14d4c:	10803fcc 	andi	r2,r2,255
   14d50:	e0bff615 	stw	r2,-40(fp)
   14d54:	e0bff717 	ldw	r2,-36(fp)
   14d58:	1005003a 	cmpeq	r2,r2,zero
   14d5c:	1000031e 	bne	r2,zero,14d6c <alt_read_cfi_table+0xac>
   14d60:	e0bff617 	ldw	r2,-40(fp)
   14d64:	1004c03a 	cmpne	r2,r2,zero
   14d68:	1000041e 	bne	r2,zero,14d7c <alt_read_cfi_table+0xbc>
   14d6c:	e0fffe17 	ldw	r3,-8(fp)
   14d70:	0080fa04 	movi	r2,1000
   14d74:	18803015 	stw	r2,192(r3)
   14d78:	00000706 	br	14d98 <alt_read_cfi_table+0xd8>
   14d7c:	00c00044 	movi	r3,1
   14d80:	e0bff717 	ldw	r2,-36(fp)
   14d84:	1886983a 	sll	r3,r3,r2
   14d88:	e0bff617 	ldw	r2,-40(fp)
   14d8c:	1886983a 	sll	r3,r3,r2
   14d90:	e0bffe17 	ldw	r2,-8(fp)
   14d94:	10c03015 	stw	r3,192(r2)
   14d98:	e0bffe17 	ldw	r2,-8(fp)
   14d9c:	10803417 	ldw	r2,208(r2)
   14da0:	e13ffe17 	ldw	r4,-8(fp)
   14da4:	01400844 	movi	r5,33
   14da8:	103ee83a 	callr	r2
   14dac:	10803fcc 	andi	r2,r2,255
   14db0:	e0bff715 	stw	r2,-36(fp)
   14db4:	e0bffe17 	ldw	r2,-8(fp)
   14db8:	10803417 	ldw	r2,208(r2)
   14dbc:	e13ffe17 	ldw	r4,-8(fp)
   14dc0:	01400944 	movi	r5,37
   14dc4:	103ee83a 	callr	r2
   14dc8:	10803fcc 	andi	r2,r2,255
   14dcc:	e0bff615 	stw	r2,-40(fp)
   14dd0:	e0bff717 	ldw	r2,-36(fp)
   14dd4:	1005003a 	cmpeq	r2,r2,zero
   14dd8:	1000031e 	bne	r2,zero,14de8 <alt_read_cfi_table+0x128>
   14ddc:	e0bff617 	ldw	r2,-40(fp)
   14de0:	1004c03a 	cmpne	r2,r2,zero
   14de4:	1000051e 	bne	r2,zero,14dfc <alt_read_cfi_table+0x13c>
   14de8:	e0fffe17 	ldw	r3,-8(fp)
   14dec:	00804c74 	movhi	r2,305
   14df0:	108b4004 	addi	r2,r2,11520
   14df4:	18803115 	stw	r2,196(r3)
   14df8:	00000806 	br	14e1c <alt_read_cfi_table+0x15c>
   14dfc:	00c00044 	movi	r3,1
   14e00:	e0bff717 	ldw	r2,-36(fp)
   14e04:	1886983a 	sll	r3,r3,r2
   14e08:	e0bff617 	ldw	r2,-40(fp)
   14e0c:	1884983a 	sll	r2,r3,r2
   14e10:	10c0fa24 	muli	r3,r2,1000
   14e14:	e0bffe17 	ldw	r2,-8(fp)
   14e18:	10c03115 	stw	r3,196(r2)
   14e1c:	e0bffe17 	ldw	r2,-8(fp)
   14e20:	10803417 	ldw	r2,208(r2)
   14e24:	e13ffe17 	ldw	r4,-8(fp)
   14e28:	014009c4 	movi	r5,39
   14e2c:	103ee83a 	callr	r2
   14e30:	10c03fcc 	andi	r3,r2,255
   14e34:	00800044 	movi	r2,1
   14e38:	10c4983a 	sll	r2,r2,r3
   14e3c:	e0bffb15 	stw	r2,-20(fp)
   14e40:	e0bffe17 	ldw	r2,-8(fp)
   14e44:	10803417 	ldw	r2,208(r2)
   14e48:	e13ffe17 	ldw	r4,-8(fp)
   14e4c:	01400b04 	movi	r5,44
   14e50:	103ee83a 	callr	r2
   14e54:	10c03fcc 	andi	r3,r2,255
   14e58:	e0bffe17 	ldw	r2,-8(fp)
   14e5c:	10c00c15 	stw	r3,48(r2)
   14e60:	e0bffe17 	ldw	r2,-8(fp)
   14e64:	10800c17 	ldw	r2,48(r2)
   14e68:	10800250 	cmplti	r2,r2,9
   14e6c:	1000031e 	bne	r2,zero,14e7c <alt_read_cfi_table+0x1bc>
   14e70:	00bffd04 	movi	r2,-12
   14e74:	e0bffa15 	stw	r2,-24(fp)
   14e78:	00005e06 	br	14ff4 <alt_read_cfi_table+0x334>
   14e7c:	e03ffd15 	stw	zero,-12(fp)
   14e80:	00005306 	br	14fd0 <alt_read_cfi_table+0x310>
   14e84:	e43ffd17 	ldw	r16,-12(fp)
   14e88:	e0bffd17 	ldw	r2,-12(fp)
   14e8c:	1085883a 	add	r2,r2,r2
   14e90:	1085883a 	add	r2,r2,r2
   14e94:	11400b44 	addi	r5,r2,45
   14e98:	e13ffe17 	ldw	r4,-8(fp)
   14e9c:	0014c440 	call	14c44 <alt_read_16bit_query_entry>
   14ea0:	113fffcc 	andi	r4,r2,65535
   14ea4:	e0fffe17 	ldw	r3,-8(fp)
   14ea8:	8004913a 	slli	r2,r16,4
   14eac:	10c5883a 	add	r2,r2,r3
   14eb0:	10800f04 	addi	r2,r2,60
   14eb4:	11000015 	stw	r4,0(r2)
   14eb8:	e17ffd17 	ldw	r5,-12(fp)
   14ebc:	e0bffd17 	ldw	r2,-12(fp)
   14ec0:	e0fffe17 	ldw	r3,-8(fp)
   14ec4:	1004913a 	slli	r2,r2,4
   14ec8:	10c5883a 	add	r2,r2,r3
   14ecc:	10800f04 	addi	r2,r2,60
   14ed0:	10800017 	ldw	r2,0(r2)
   14ed4:	11000044 	addi	r4,r2,1
   14ed8:	e0fffe17 	ldw	r3,-8(fp)
   14edc:	2804913a 	slli	r2,r5,4
   14ee0:	10c5883a 	add	r2,r2,r3
   14ee4:	10800f04 	addi	r2,r2,60
   14ee8:	11000015 	stw	r4,0(r2)
   14eec:	e43ffd17 	ldw	r16,-12(fp)
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	1085883a 	add	r2,r2,r2
   14ef8:	1085883a 	add	r2,r2,r2
   14efc:	11400bc4 	addi	r5,r2,47
   14f00:	e13ffe17 	ldw	r4,-8(fp)
   14f04:	0014c440 	call	14c44 <alt_read_16bit_query_entry>
   14f08:	113fffcc 	andi	r4,r2,65535
   14f0c:	e0fffe17 	ldw	r3,-8(fp)
   14f10:	8004913a 	slli	r2,r16,4
   14f14:	10c5883a 	add	r2,r2,r3
   14f18:	10801004 	addi	r2,r2,64
   14f1c:	11000015 	stw	r4,0(r2)
   14f20:	e17ffd17 	ldw	r5,-12(fp)
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	e0fffe17 	ldw	r3,-8(fp)
   14f2c:	1004913a 	slli	r2,r2,4
   14f30:	10c5883a 	add	r2,r2,r3
   14f34:	10801004 	addi	r2,r2,64
   14f38:	10800017 	ldw	r2,0(r2)
   14f3c:	1008923a 	slli	r4,r2,8
   14f40:	e0fffe17 	ldw	r3,-8(fp)
   14f44:	2804913a 	slli	r2,r5,4
   14f48:	10c5883a 	add	r2,r2,r3
   14f4c:	10801004 	addi	r2,r2,64
   14f50:	11000015 	stw	r4,0(r2)
   14f54:	e17ffd17 	ldw	r5,-12(fp)
   14f58:	e0bffd17 	ldw	r2,-12(fp)
   14f5c:	e0fffe17 	ldw	r3,-8(fp)
   14f60:	1004913a 	slli	r2,r2,4
   14f64:	10c5883a 	add	r2,r2,r3
   14f68:	10800f04 	addi	r2,r2,60
   14f6c:	11000017 	ldw	r4,0(r2)
   14f70:	e0bffd17 	ldw	r2,-12(fp)
   14f74:	e0fffe17 	ldw	r3,-8(fp)
   14f78:	1004913a 	slli	r2,r2,4
   14f7c:	10c5883a 	add	r2,r2,r3
   14f80:	10801004 	addi	r2,r2,64
   14f84:	10800017 	ldw	r2,0(r2)
   14f88:	2089383a 	mul	r4,r4,r2
   14f8c:	e0fffe17 	ldw	r3,-8(fp)
   14f90:	2804913a 	slli	r2,r5,4
   14f94:	10c5883a 	add	r2,r2,r3
   14f98:	10800e04 	addi	r2,r2,56
   14f9c:	11000015 	stw	r4,0(r2)
   14fa0:	e0bffd17 	ldw	r2,-12(fp)
   14fa4:	e0fffe17 	ldw	r3,-8(fp)
   14fa8:	1004913a 	slli	r2,r2,4
   14fac:	10c5883a 	add	r2,r2,r3
   14fb0:	10800e04 	addi	r2,r2,56
   14fb4:	10c00017 	ldw	r3,0(r2)
   14fb8:	e0bff917 	ldw	r2,-28(fp)
   14fbc:	10c5883a 	add	r2,r2,r3
   14fc0:	e0bff915 	stw	r2,-28(fp)
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	10800044 	addi	r2,r2,1
   14fcc:	e0bffd15 	stw	r2,-12(fp)
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
   14fd4:	10c00c17 	ldw	r3,48(r2)
   14fd8:	e0bffd17 	ldw	r2,-12(fp)
   14fdc:	10ffa916 	blt	r2,r3,14e84 <alt_read_cfi_table+0x1c4>
   14fe0:	e0fff917 	ldw	r3,-28(fp)
   14fe4:	e0bffb17 	ldw	r2,-20(fp)
   14fe8:	18800226 	beq	r3,r2,14ff4 <alt_read_cfi_table+0x334>
   14fec:	00bffb44 	movi	r2,-19
   14ff0:	e0bffa15 	stw	r2,-24(fp)
   14ff4:	e0bffe17 	ldw	r2,-8(fp)
   14ff8:	10c03417 	ldw	r3,208(r2)
   14ffc:	e0bffe17 	ldw	r2,-8(fp)
   15000:	10803217 	ldw	r2,200(r2)
   15004:	114003c4 	addi	r5,r2,15
   15008:	e13ffe17 	ldw	r4,-8(fp)
   1500c:	183ee83a 	callr	r3
   15010:	e0bff405 	stb	r2,-48(fp)
   15014:	e0bffe17 	ldw	r2,-8(fp)
   15018:	10802d17 	ldw	r2,180(r2)
   1501c:	10800098 	cmpnei	r2,r2,2
   15020:	1000601e 	bne	r2,zero,151a4 <alt_read_cfi_table+0x4e4>
   15024:	e0bff403 	ldbu	r2,-48(fp)
   15028:	108000d8 	cmpnei	r2,r2,3
   1502c:	10005d1e 	bne	r2,zero,151a4 <alt_read_cfi_table+0x4e4>
   15030:	e0bffe17 	ldw	r2,-8(fp)
   15034:	10800c17 	ldw	r2,48(r2)
   15038:	10bfffc4 	addi	r2,r2,-1
   1503c:	e0bffd15 	stw	r2,-12(fp)
   15040:	e03ffc15 	stw	zero,-16(fp)
   15044:	00005406 	br	15198 <alt_read_cfi_table+0x4d8>
   15048:	e0bffd17 	ldw	r2,-12(fp)
   1504c:	e0fffe17 	ldw	r3,-8(fp)
   15050:	1004913a 	slli	r2,r2,4
   15054:	10c5883a 	add	r2,r2,r3
   15058:	10800e04 	addi	r2,r2,56
   1505c:	10800017 	ldw	r2,0(r2)
   15060:	e0bff815 	stw	r2,-32(fp)
   15064:	e17ffd17 	ldw	r5,-12(fp)
   15068:	e0bffc17 	ldw	r2,-16(fp)
   1506c:	e0fffe17 	ldw	r3,-8(fp)
   15070:	1004913a 	slli	r2,r2,4
   15074:	10c5883a 	add	r2,r2,r3
   15078:	10800e04 	addi	r2,r2,56
   1507c:	11000017 	ldw	r4,0(r2)
   15080:	e0fffe17 	ldw	r3,-8(fp)
   15084:	2804913a 	slli	r2,r5,4
   15088:	10c5883a 	add	r2,r2,r3
   1508c:	10800e04 	addi	r2,r2,56
   15090:	11000015 	stw	r4,0(r2)
   15094:	e0bffc17 	ldw	r2,-16(fp)
   15098:	e0fffe17 	ldw	r3,-8(fp)
   1509c:	1004913a 	slli	r2,r2,4
   150a0:	10c5883a 	add	r2,r2,r3
   150a4:	10c00e04 	addi	r3,r2,56
   150a8:	e0bff817 	ldw	r2,-32(fp)
   150ac:	18800015 	stw	r2,0(r3)
   150b0:	e0bffd17 	ldw	r2,-12(fp)
   150b4:	e0fffe17 	ldw	r3,-8(fp)
   150b8:	1004913a 	slli	r2,r2,4
   150bc:	10c5883a 	add	r2,r2,r3
   150c0:	10801004 	addi	r2,r2,64
   150c4:	10800017 	ldw	r2,0(r2)
   150c8:	e0bff815 	stw	r2,-32(fp)
   150cc:	e17ffd17 	ldw	r5,-12(fp)
   150d0:	e0bffc17 	ldw	r2,-16(fp)
   150d4:	e0fffe17 	ldw	r3,-8(fp)
   150d8:	1004913a 	slli	r2,r2,4
   150dc:	10c5883a 	add	r2,r2,r3
   150e0:	10801004 	addi	r2,r2,64
   150e4:	11000017 	ldw	r4,0(r2)
   150e8:	e0fffe17 	ldw	r3,-8(fp)
   150ec:	2804913a 	slli	r2,r5,4
   150f0:	10c5883a 	add	r2,r2,r3
   150f4:	10801004 	addi	r2,r2,64
   150f8:	11000015 	stw	r4,0(r2)
   150fc:	e0bffc17 	ldw	r2,-16(fp)
   15100:	e0fffe17 	ldw	r3,-8(fp)
   15104:	1004913a 	slli	r2,r2,4
   15108:	10c5883a 	add	r2,r2,r3
   1510c:	10c01004 	addi	r3,r2,64
   15110:	e0bff817 	ldw	r2,-32(fp)
   15114:	18800015 	stw	r2,0(r3)
   15118:	e0bffd17 	ldw	r2,-12(fp)
   1511c:	e0fffe17 	ldw	r3,-8(fp)
   15120:	1004913a 	slli	r2,r2,4
   15124:	10c5883a 	add	r2,r2,r3
   15128:	10800f04 	addi	r2,r2,60
   1512c:	10800017 	ldw	r2,0(r2)
   15130:	e0bff815 	stw	r2,-32(fp)
   15134:	e17ffd17 	ldw	r5,-12(fp)
   15138:	e0bffc17 	ldw	r2,-16(fp)
   1513c:	e0fffe17 	ldw	r3,-8(fp)
   15140:	1004913a 	slli	r2,r2,4
   15144:	10c5883a 	add	r2,r2,r3
   15148:	10800f04 	addi	r2,r2,60
   1514c:	11000017 	ldw	r4,0(r2)
   15150:	e0fffe17 	ldw	r3,-8(fp)
   15154:	2804913a 	slli	r2,r5,4
   15158:	10c5883a 	add	r2,r2,r3
   1515c:	10800f04 	addi	r2,r2,60
   15160:	11000015 	stw	r4,0(r2)
   15164:	e0bffc17 	ldw	r2,-16(fp)
   15168:	e0fffe17 	ldw	r3,-8(fp)
   1516c:	1004913a 	slli	r2,r2,4
   15170:	10c5883a 	add	r2,r2,r3
   15174:	10c00f04 	addi	r3,r2,60
   15178:	e0bff817 	ldw	r2,-32(fp)
   1517c:	18800015 	stw	r2,0(r3)
   15180:	e0bffd17 	ldw	r2,-12(fp)
   15184:	10bfffc4 	addi	r2,r2,-1
   15188:	e0bffd15 	stw	r2,-12(fp)
   1518c:	e0bffc17 	ldw	r2,-16(fp)
   15190:	10800044 	addi	r2,r2,1
   15194:	e0bffc15 	stw	r2,-16(fp)
   15198:	e0fffc17 	ldw	r3,-16(fp)
   1519c:	e0bffd17 	ldw	r2,-12(fp)
   151a0:	10ffa90e 	bge	r2,r3,15048 <alt_read_cfi_table+0x388>
   151a4:	e03ffd15 	stw	zero,-12(fp)
   151a8:	00001306 	br	151f8 <alt_read_cfi_table+0x538>
   151ac:	e0bffd17 	ldw	r2,-12(fp)
   151b0:	e0fffe17 	ldw	r3,-8(fp)
   151b4:	1004913a 	slli	r2,r2,4
   151b8:	10c5883a 	add	r2,r2,r3
   151bc:	10c00d04 	addi	r3,r2,52
   151c0:	e0bff517 	ldw	r2,-44(fp)
   151c4:	18800015 	stw	r2,0(r3)
   151c8:	e0bffd17 	ldw	r2,-12(fp)
   151cc:	e0fffe17 	ldw	r3,-8(fp)
   151d0:	1004913a 	slli	r2,r2,4
   151d4:	10c5883a 	add	r2,r2,r3
   151d8:	10800e04 	addi	r2,r2,56
   151dc:	10c00017 	ldw	r3,0(r2)
   151e0:	e0bff517 	ldw	r2,-44(fp)
   151e4:	10c5883a 	add	r2,r2,r3
   151e8:	e0bff515 	stw	r2,-44(fp)
   151ec:	e0bffd17 	ldw	r2,-12(fp)
   151f0:	10800044 	addi	r2,r2,1
   151f4:	e0bffd15 	stw	r2,-12(fp)
   151f8:	e0bffe17 	ldw	r2,-8(fp)
   151fc:	10c00c17 	ldw	r3,48(r2)
   15200:	e0bffd17 	ldw	r2,-12(fp)
   15204:	10ffe916 	blt	r2,r3,151ac <alt_read_cfi_table+0x4ec>
   15208:	e0bffe17 	ldw	r2,-8(fp)
   1520c:	10802d17 	ldw	r2,180(r2)
   15210:	e0bfff15 	stw	r2,-4(fp)
   15214:	e0ffff17 	ldw	r3,-4(fp)
   15218:	188000a0 	cmpeqi	r2,r3,2
   1521c:	1000071e 	bne	r2,zero,1523c <alt_read_cfi_table+0x57c>
   15220:	e0ffff17 	ldw	r3,-4(fp)
   15224:	188000e0 	cmpeqi	r2,r3,3
   15228:	10000c1e 	bne	r2,zero,1525c <alt_read_cfi_table+0x59c>
   1522c:	e0ffff17 	ldw	r3,-4(fp)
   15230:	18800060 	cmpeqi	r2,r3,1
   15234:	1000091e 	bne	r2,zero,1525c <alt_read_cfi_table+0x59c>
   15238:	00001006 	br	1527c <alt_read_cfi_table+0x5bc>
   1523c:	e0bffe17 	ldw	r2,-8(fp)
   15240:	10c03317 	ldw	r3,204(r2)
   15244:	e0bffe17 	ldw	r2,-8(fp)
   15248:	11000a17 	ldw	r4,40(r2)
   1524c:	01401544 	movi	r5,85
   15250:	01803c04 	movi	r6,240
   15254:	183ee83a 	callr	r3
   15258:	00000a06 	br	15284 <alt_read_cfi_table+0x5c4>
   1525c:	e0bffe17 	ldw	r2,-8(fp)
   15260:	10c03317 	ldw	r3,204(r2)
   15264:	e0bffe17 	ldw	r2,-8(fp)
   15268:	11000a17 	ldw	r4,40(r2)
   1526c:	01401544 	movi	r5,85
   15270:	01803fc4 	movi	r6,255
   15274:	183ee83a 	callr	r3
   15278:	00000206 	br	15284 <alt_read_cfi_table+0x5c4>
   1527c:	00bffec4 	movi	r2,-5
   15280:	e0bffa15 	stw	r2,-24(fp)
   15284:	e0bffa17 	ldw	r2,-24(fp)
   15288:	e037883a 	mov	sp,fp
   1528c:	dfc00217 	ldw	ra,8(sp)
   15290:	df000117 	ldw	fp,4(sp)
   15294:	dc000017 	ldw	r16,0(sp)
   15298:	dec00304 	addi	sp,sp,12
   1529c:	f800283a 	ret

000152a0 <alt_read_cfi_width>:
   152a0:	defff704 	addi	sp,sp,-36
   152a4:	dfc00815 	stw	ra,32(sp)
   152a8:	df000715 	stw	fp,28(sp)
   152ac:	df000704 	addi	fp,sp,28
   152b0:	e13fff15 	stw	r4,-4(fp)
   152b4:	e03ff915 	stw	zero,-28(fp)
   152b8:	e0bfff17 	ldw	r2,-4(fp)
   152bc:	11000a17 	ldw	r4,40(r2)
   152c0:	01401544 	movi	r5,85
   152c4:	01802604 	movi	r6,152
   152c8:	001474c0 	call	1474c <alt_write_flash_command_8bit_device_8bit_mode>
   152cc:	e03ffb15 	stw	zero,-20(fp)
   152d0:	00000f06 	br	15310 <alt_read_cfi_width+0x70>
   152d4:	e13ffb17 	ldw	r4,-20(fp)
   152d8:	e0bfff17 	ldw	r2,-4(fp)
   152dc:	10800a17 	ldw	r2,40(r2)
   152e0:	1007883a 	mov	r3,r2
   152e4:	e0bffb17 	ldw	r2,-20(fp)
   152e8:	1885883a 	add	r2,r3,r2
   152ec:	10800404 	addi	r2,r2,16
   152f0:	10800023 	ldbuio	r2,0(r2)
   152f4:	1007883a 	mov	r3,r2
   152f8:	e0bffc04 	addi	r2,fp,-16
   152fc:	1105883a 	add	r2,r2,r4
   15300:	10c00005 	stb	r3,0(r2)
   15304:	e0bffb17 	ldw	r2,-20(fp)
   15308:	10800044 	addi	r2,r2,1
   1530c:	e0bffb15 	stw	r2,-20(fp)
   15310:	e0bffb17 	ldw	r2,-20(fp)
   15314:	108000d0 	cmplti	r2,r2,3
   15318:	103fee1e 	bne	r2,zero,152d4 <alt_read_cfi_width+0x34>
   1531c:	e0bffc03 	ldbu	r2,-16(fp)
   15320:	10803fcc 	andi	r2,r2,255
   15324:	10801458 	cmpnei	r2,r2,81
   15328:	10001d1e 	bne	r2,zero,153a0 <alt_read_cfi_width+0x100>
   1532c:	e0bffc43 	ldbu	r2,-15(fp)
   15330:	10803fcc 	andi	r2,r2,255
   15334:	10801498 	cmpnei	r2,r2,82
   15338:	1000191e 	bne	r2,zero,153a0 <alt_read_cfi_width+0x100>
   1533c:	e0bffc83 	ldbu	r2,-14(fp)
   15340:	10803fcc 	andi	r2,r2,255
   15344:	10801658 	cmpnei	r2,r2,89
   15348:	1000151e 	bne	r2,zero,153a0 <alt_read_cfi_width+0x100>
   1534c:	e0ffff17 	ldw	r3,-4(fp)
   15350:	00800044 	movi	r2,1
   15354:	18802e15 	stw	r2,184(r3)
   15358:	e0ffff17 	ldw	r3,-4(fp)
   1535c:	00800044 	movi	r2,1
   15360:	18802f15 	stw	r2,188(r3)
   15364:	e0bfff17 	ldw	r2,-4(fp)
   15368:	10800a17 	ldw	r2,40(r2)
   1536c:	10800a04 	addi	r2,r2,40
   15370:	1080002b 	ldhuio	r2,0(r2)
   15374:	e0bffa0d 	sth	r2,-24(fp)
   15378:	e0bffa0b 	ldhu	r2,-24(fp)
   1537c:	10800044 	addi	r2,r2,1
   15380:	e0bffa0d 	sth	r2,-24(fp)
   15384:	e0bffa0b 	ldhu	r2,-24(fp)
   15388:	1080004c 	andi	r2,r2,1
   1538c:	1004c03a 	cmpne	r2,r2,zero
   15390:	1001a81e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15394:	00bffb44 	movi	r2,-19
   15398:	e0bff915 	stw	r2,-28(fp)
   1539c:	0001a506 	br	15a34 <alt_read_cfi_width+0x794>
   153a0:	e0bfff17 	ldw	r2,-4(fp)
   153a4:	11000a17 	ldw	r4,40(r2)
   153a8:	01401544 	movi	r5,85
   153ac:	01802604 	movi	r6,152
   153b0:	00147880 	call	14788 <alt_write_flash_command_16bit_device_8bit_mode>
   153b4:	e03ffb15 	stw	zero,-20(fp)
   153b8:	00000f06 	br	153f8 <alt_read_cfi_width+0x158>
   153bc:	e13ffb17 	ldw	r4,-20(fp)
   153c0:	e0bfff17 	ldw	r2,-4(fp)
   153c4:	10800a17 	ldw	r2,40(r2)
   153c8:	1007883a 	mov	r3,r2
   153cc:	e0bffb17 	ldw	r2,-20(fp)
   153d0:	1885883a 	add	r2,r3,r2
   153d4:	10800804 	addi	r2,r2,32
   153d8:	10800023 	ldbuio	r2,0(r2)
   153dc:	1007883a 	mov	r3,r2
   153e0:	e0bffc04 	addi	r2,fp,-16
   153e4:	1105883a 	add	r2,r2,r4
   153e8:	10c00005 	stb	r3,0(r2)
   153ec:	e0bffb17 	ldw	r2,-20(fp)
   153f0:	10800044 	addi	r2,r2,1
   153f4:	e0bffb15 	stw	r2,-20(fp)
   153f8:	e0bffb17 	ldw	r2,-20(fp)
   153fc:	10800190 	cmplti	r2,r2,6
   15400:	103fee1e 	bne	r2,zero,153bc <alt_read_cfi_width+0x11c>
   15404:	e0bffc03 	ldbu	r2,-16(fp)
   15408:	10803fcc 	andi	r2,r2,255
   1540c:	10801458 	cmpnei	r2,r2,81
   15410:	1000291e 	bne	r2,zero,154b8 <alt_read_cfi_width+0x218>
   15414:	e0bffc43 	ldbu	r2,-15(fp)
   15418:	10803fcc 	andi	r2,r2,255
   1541c:	10801458 	cmpnei	r2,r2,81
   15420:	1000251e 	bne	r2,zero,154b8 <alt_read_cfi_width+0x218>
   15424:	e0bffc83 	ldbu	r2,-14(fp)
   15428:	10803fcc 	andi	r2,r2,255
   1542c:	10801498 	cmpnei	r2,r2,82
   15430:	1000211e 	bne	r2,zero,154b8 <alt_read_cfi_width+0x218>
   15434:	e0bffcc3 	ldbu	r2,-13(fp)
   15438:	10803fcc 	andi	r2,r2,255
   1543c:	10801498 	cmpnei	r2,r2,82
   15440:	10001d1e 	bne	r2,zero,154b8 <alt_read_cfi_width+0x218>
   15444:	e0bffd03 	ldbu	r2,-12(fp)
   15448:	10803fcc 	andi	r2,r2,255
   1544c:	10801658 	cmpnei	r2,r2,89
   15450:	1000191e 	bne	r2,zero,154b8 <alt_read_cfi_width+0x218>
   15454:	e0bffd43 	ldbu	r2,-11(fp)
   15458:	10803fcc 	andi	r2,r2,255
   1545c:	10801658 	cmpnei	r2,r2,89
   15460:	1000151e 	bne	r2,zero,154b8 <alt_read_cfi_width+0x218>
   15464:	e0ffff17 	ldw	r3,-4(fp)
   15468:	00800044 	movi	r2,1
   1546c:	18802e15 	stw	r2,184(r3)
   15470:	e0ffff17 	ldw	r3,-4(fp)
   15474:	00800084 	movi	r2,2
   15478:	18802f15 	stw	r2,188(r3)
   1547c:	e0bfff17 	ldw	r2,-4(fp)
   15480:	10800a17 	ldw	r2,40(r2)
   15484:	10801404 	addi	r2,r2,80
   15488:	1080002b 	ldhuio	r2,0(r2)
   1548c:	e0bffa0d 	sth	r2,-24(fp)
   15490:	e0bffa0b 	ldhu	r2,-24(fp)
   15494:	10800044 	addi	r2,r2,1
   15498:	e0bffa0d 	sth	r2,-24(fp)
   1549c:	e0bffa0b 	ldhu	r2,-24(fp)
   154a0:	1080004c 	andi	r2,r2,1
   154a4:	1004c03a 	cmpne	r2,r2,zero
   154a8:	1001621e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   154ac:	00bffb44 	movi	r2,-19
   154b0:	e0bff915 	stw	r2,-28(fp)
   154b4:	00015f06 	br	15a34 <alt_read_cfi_width+0x794>
   154b8:	e0bfff17 	ldw	r2,-4(fp)
   154bc:	11000a17 	ldw	r4,40(r2)
   154c0:	01401544 	movi	r5,85
   154c4:	01802604 	movi	r6,152
   154c8:	001484c0 	call	1484c <alt_write_flash_command_16bit_device_16bit_mode>
   154cc:	e03ffb15 	stw	zero,-20(fp)
   154d0:	00000f06 	br	15510 <alt_read_cfi_width+0x270>
   154d4:	e13ffb17 	ldw	r4,-20(fp)
   154d8:	e0bfff17 	ldw	r2,-4(fp)
   154dc:	10800a17 	ldw	r2,40(r2)
   154e0:	1007883a 	mov	r3,r2
   154e4:	e0bffb17 	ldw	r2,-20(fp)
   154e8:	1885883a 	add	r2,r3,r2
   154ec:	10800804 	addi	r2,r2,32
   154f0:	10800023 	ldbuio	r2,0(r2)
   154f4:	1007883a 	mov	r3,r2
   154f8:	e0bffc04 	addi	r2,fp,-16
   154fc:	1105883a 	add	r2,r2,r4
   15500:	10c00005 	stb	r3,0(r2)
   15504:	e0bffb17 	ldw	r2,-20(fp)
   15508:	10800044 	addi	r2,r2,1
   1550c:	e0bffb15 	stw	r2,-20(fp)
   15510:	e0bffb17 	ldw	r2,-20(fp)
   15514:	10800190 	cmplti	r2,r2,6
   15518:	103fee1e 	bne	r2,zero,154d4 <alt_read_cfi_width+0x234>
   1551c:	e0bffc03 	ldbu	r2,-16(fp)
   15520:	10803fcc 	andi	r2,r2,255
   15524:	10801458 	cmpnei	r2,r2,81
   15528:	1000291e 	bne	r2,zero,155d0 <alt_read_cfi_width+0x330>
   1552c:	e0bffc43 	ldbu	r2,-15(fp)
   15530:	10803fcc 	andi	r2,r2,255
   15534:	1004c03a 	cmpne	r2,r2,zero
   15538:	1000251e 	bne	r2,zero,155d0 <alt_read_cfi_width+0x330>
   1553c:	e0bffc83 	ldbu	r2,-14(fp)
   15540:	10803fcc 	andi	r2,r2,255
   15544:	10801498 	cmpnei	r2,r2,82
   15548:	1000211e 	bne	r2,zero,155d0 <alt_read_cfi_width+0x330>
   1554c:	e0bffcc3 	ldbu	r2,-13(fp)
   15550:	10803fcc 	andi	r2,r2,255
   15554:	1004c03a 	cmpne	r2,r2,zero
   15558:	10001d1e 	bne	r2,zero,155d0 <alt_read_cfi_width+0x330>
   1555c:	e0bffd03 	ldbu	r2,-12(fp)
   15560:	10803fcc 	andi	r2,r2,255
   15564:	10801658 	cmpnei	r2,r2,89
   15568:	1000191e 	bne	r2,zero,155d0 <alt_read_cfi_width+0x330>
   1556c:	e0bffd43 	ldbu	r2,-11(fp)
   15570:	10803fcc 	andi	r2,r2,255
   15574:	1004c03a 	cmpne	r2,r2,zero
   15578:	1000151e 	bne	r2,zero,155d0 <alt_read_cfi_width+0x330>
   1557c:	e0ffff17 	ldw	r3,-4(fp)
   15580:	00800084 	movi	r2,2
   15584:	18802e15 	stw	r2,184(r3)
   15588:	e0ffff17 	ldw	r3,-4(fp)
   1558c:	00800084 	movi	r2,2
   15590:	18802f15 	stw	r2,188(r3)
   15594:	e0bfff17 	ldw	r2,-4(fp)
   15598:	10800a17 	ldw	r2,40(r2)
   1559c:	10801404 	addi	r2,r2,80
   155a0:	1080002b 	ldhuio	r2,0(r2)
   155a4:	e0bffa0d 	sth	r2,-24(fp)
   155a8:	e0bffa0b 	ldhu	r2,-24(fp)
   155ac:	10800044 	addi	r2,r2,1
   155b0:	e0bffa0d 	sth	r2,-24(fp)
   155b4:	e0bffa0b 	ldhu	r2,-24(fp)
   155b8:	1080008c 	andi	r2,r2,2
   155bc:	1004c03a 	cmpne	r2,r2,zero
   155c0:	10011c1e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   155c4:	00bffb44 	movi	r2,-19
   155c8:	e0bff915 	stw	r2,-28(fp)
   155cc:	00011906 	br	15a34 <alt_read_cfi_width+0x794>
   155d0:	e0bfff17 	ldw	r2,-4(fp)
   155d4:	11000a17 	ldw	r4,40(r2)
   155d8:	01401544 	movi	r5,85
   155dc:	01802604 	movi	r6,152
   155e0:	00148d80 	call	148d8 <alt_write_flash_command_32bit_device_32bit_mode>
   155e4:	e03ffb15 	stw	zero,-20(fp)
   155e8:	00000f06 	br	15628 <alt_read_cfi_width+0x388>
   155ec:	e13ffb17 	ldw	r4,-20(fp)
   155f0:	e0bfff17 	ldw	r2,-4(fp)
   155f4:	10800a17 	ldw	r2,40(r2)
   155f8:	1007883a 	mov	r3,r2
   155fc:	e0bffb17 	ldw	r2,-20(fp)
   15600:	1885883a 	add	r2,r3,r2
   15604:	10801004 	addi	r2,r2,64
   15608:	10800023 	ldbuio	r2,0(r2)
   1560c:	1007883a 	mov	r3,r2
   15610:	e0bffc04 	addi	r2,fp,-16
   15614:	1105883a 	add	r2,r2,r4
   15618:	10c00005 	stb	r3,0(r2)
   1561c:	e0bffb17 	ldw	r2,-20(fp)
   15620:	10800044 	addi	r2,r2,1
   15624:	e0bffb15 	stw	r2,-20(fp)
   15628:	e0bffb17 	ldw	r2,-20(fp)
   1562c:	10800310 	cmplti	r2,r2,12
   15630:	103fee1e 	bne	r2,zero,155ec <alt_read_cfi_width+0x34c>
   15634:	e0bffc03 	ldbu	r2,-16(fp)
   15638:	10803fcc 	andi	r2,r2,255
   1563c:	10801458 	cmpnei	r2,r2,81
   15640:	1000411e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   15644:	e0bffc43 	ldbu	r2,-15(fp)
   15648:	10803fcc 	andi	r2,r2,255
   1564c:	1004c03a 	cmpne	r2,r2,zero
   15650:	10003d1e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   15654:	e0bffc83 	ldbu	r2,-14(fp)
   15658:	10803fcc 	andi	r2,r2,255
   1565c:	1004c03a 	cmpne	r2,r2,zero
   15660:	1000391e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   15664:	e0bffcc3 	ldbu	r2,-13(fp)
   15668:	10803fcc 	andi	r2,r2,255
   1566c:	1004c03a 	cmpne	r2,r2,zero
   15670:	1000351e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   15674:	e0bffd03 	ldbu	r2,-12(fp)
   15678:	10803fcc 	andi	r2,r2,255
   1567c:	10801498 	cmpnei	r2,r2,82
   15680:	1000311e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   15684:	e0bffd43 	ldbu	r2,-11(fp)
   15688:	10803fcc 	andi	r2,r2,255
   1568c:	1004c03a 	cmpne	r2,r2,zero
   15690:	10002d1e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   15694:	e0bffd83 	ldbu	r2,-10(fp)
   15698:	10803fcc 	andi	r2,r2,255
   1569c:	1004c03a 	cmpne	r2,r2,zero
   156a0:	1000291e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   156a4:	e0bffdc3 	ldbu	r2,-9(fp)
   156a8:	10803fcc 	andi	r2,r2,255
   156ac:	1004c03a 	cmpne	r2,r2,zero
   156b0:	1000251e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   156b4:	e0bffe03 	ldbu	r2,-8(fp)
   156b8:	10803fcc 	andi	r2,r2,255
   156bc:	10801658 	cmpnei	r2,r2,89
   156c0:	1000211e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   156c4:	e0bffe43 	ldbu	r2,-7(fp)
   156c8:	10803fcc 	andi	r2,r2,255
   156cc:	1004c03a 	cmpne	r2,r2,zero
   156d0:	10001d1e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   156d4:	e0bffe83 	ldbu	r2,-6(fp)
   156d8:	10803fcc 	andi	r2,r2,255
   156dc:	1004c03a 	cmpne	r2,r2,zero
   156e0:	1000191e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   156e4:	e0bffec3 	ldbu	r2,-5(fp)
   156e8:	10803fcc 	andi	r2,r2,255
   156ec:	1004c03a 	cmpne	r2,r2,zero
   156f0:	1000151e 	bne	r2,zero,15748 <alt_read_cfi_width+0x4a8>
   156f4:	e0ffff17 	ldw	r3,-4(fp)
   156f8:	00800104 	movi	r2,4
   156fc:	18802e15 	stw	r2,184(r3)
   15700:	e0ffff17 	ldw	r3,-4(fp)
   15704:	00800104 	movi	r2,4
   15708:	18802f15 	stw	r2,188(r3)
   1570c:	e0bfff17 	ldw	r2,-4(fp)
   15710:	10800a17 	ldw	r2,40(r2)
   15714:	10802804 	addi	r2,r2,160
   15718:	10800037 	ldwio	r2,0(r2)
   1571c:	e0bffa0d 	sth	r2,-24(fp)
   15720:	e0bffa0b 	ldhu	r2,-24(fp)
   15724:	10800044 	addi	r2,r2,1
   15728:	e0bffa0d 	sth	r2,-24(fp)
   1572c:	e0bffa0b 	ldhu	r2,-24(fp)
   15730:	1080010c 	andi	r2,r2,4
   15734:	1004c03a 	cmpne	r2,r2,zero
   15738:	1000be1e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   1573c:	00bffb44 	movi	r2,-19
   15740:	e0bff915 	stw	r2,-28(fp)
   15744:	0000bb06 	br	15a34 <alt_read_cfi_width+0x794>
   15748:	e0bfff17 	ldw	r2,-4(fp)
   1574c:	11000a17 	ldw	r4,40(r2)
   15750:	01401544 	movi	r5,85
   15754:	01802604 	movi	r6,152
   15758:	00148900 	call	14890 <alt_write_flash_command_32bit_device_16bit_mode>
   1575c:	e03ffb15 	stw	zero,-20(fp)
   15760:	00000f06 	br	157a0 <alt_read_cfi_width+0x500>
   15764:	e13ffb17 	ldw	r4,-20(fp)
   15768:	e0bfff17 	ldw	r2,-4(fp)
   1576c:	10800a17 	ldw	r2,40(r2)
   15770:	1007883a 	mov	r3,r2
   15774:	e0bffb17 	ldw	r2,-20(fp)
   15778:	1885883a 	add	r2,r3,r2
   1577c:	10801004 	addi	r2,r2,64
   15780:	10800023 	ldbuio	r2,0(r2)
   15784:	1007883a 	mov	r3,r2
   15788:	e0bffc04 	addi	r2,fp,-16
   1578c:	1105883a 	add	r2,r2,r4
   15790:	10c00005 	stb	r3,0(r2)
   15794:	e0bffb17 	ldw	r2,-20(fp)
   15798:	10800044 	addi	r2,r2,1
   1579c:	e0bffb15 	stw	r2,-20(fp)
   157a0:	e0bffb17 	ldw	r2,-20(fp)
   157a4:	10800310 	cmplti	r2,r2,12
   157a8:	103fee1e 	bne	r2,zero,15764 <alt_read_cfi_width+0x4c4>
   157ac:	e0bffc03 	ldbu	r2,-16(fp)
   157b0:	10803fcc 	andi	r2,r2,255
   157b4:	10801458 	cmpnei	r2,r2,81
   157b8:	1000411e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   157bc:	e0bffc43 	ldbu	r2,-15(fp)
   157c0:	10803fcc 	andi	r2,r2,255
   157c4:	1004c03a 	cmpne	r2,r2,zero
   157c8:	10003d1e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   157cc:	e0bffc83 	ldbu	r2,-14(fp)
   157d0:	10803fcc 	andi	r2,r2,255
   157d4:	10801458 	cmpnei	r2,r2,81
   157d8:	1000391e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   157dc:	e0bffcc3 	ldbu	r2,-13(fp)
   157e0:	10803fcc 	andi	r2,r2,255
   157e4:	1004c03a 	cmpne	r2,r2,zero
   157e8:	1000351e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   157ec:	e0bffd03 	ldbu	r2,-12(fp)
   157f0:	10803fcc 	andi	r2,r2,255
   157f4:	10801498 	cmpnei	r2,r2,82
   157f8:	1000311e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   157fc:	e0bffd43 	ldbu	r2,-11(fp)
   15800:	10803fcc 	andi	r2,r2,255
   15804:	1004c03a 	cmpne	r2,r2,zero
   15808:	10002d1e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1580c:	e0bffd83 	ldbu	r2,-10(fp)
   15810:	10803fcc 	andi	r2,r2,255
   15814:	10801498 	cmpnei	r2,r2,82
   15818:	1000291e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1581c:	e0bffdc3 	ldbu	r2,-9(fp)
   15820:	10803fcc 	andi	r2,r2,255
   15824:	1004c03a 	cmpne	r2,r2,zero
   15828:	1000251e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1582c:	e0bffe03 	ldbu	r2,-8(fp)
   15830:	10803fcc 	andi	r2,r2,255
   15834:	10801658 	cmpnei	r2,r2,89
   15838:	1000211e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1583c:	e0bffe43 	ldbu	r2,-7(fp)
   15840:	10803fcc 	andi	r2,r2,255
   15844:	1004c03a 	cmpne	r2,r2,zero
   15848:	10001d1e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1584c:	e0bffe83 	ldbu	r2,-6(fp)
   15850:	10803fcc 	andi	r2,r2,255
   15854:	10801658 	cmpnei	r2,r2,89
   15858:	1000191e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1585c:	e0bffec3 	ldbu	r2,-5(fp)
   15860:	10803fcc 	andi	r2,r2,255
   15864:	1004c03a 	cmpne	r2,r2,zero
   15868:	1000151e 	bne	r2,zero,158c0 <alt_read_cfi_width+0x620>
   1586c:	e0ffff17 	ldw	r3,-4(fp)
   15870:	00800084 	movi	r2,2
   15874:	18802e15 	stw	r2,184(r3)
   15878:	e0ffff17 	ldw	r3,-4(fp)
   1587c:	00800104 	movi	r2,4
   15880:	18802f15 	stw	r2,188(r3)
   15884:	e0bfff17 	ldw	r2,-4(fp)
   15888:	10800a17 	ldw	r2,40(r2)
   1588c:	10802804 	addi	r2,r2,160
   15890:	10800037 	ldwio	r2,0(r2)
   15894:	e0bffa0d 	sth	r2,-24(fp)
   15898:	e0bffa0b 	ldhu	r2,-24(fp)
   1589c:	10800044 	addi	r2,r2,1
   158a0:	e0bffa0d 	sth	r2,-24(fp)
   158a4:	e0bffa0b 	ldhu	r2,-24(fp)
   158a8:	1080010c 	andi	r2,r2,4
   158ac:	1004c03a 	cmpne	r2,r2,zero
   158b0:	1000601e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   158b4:	00bffb44 	movi	r2,-19
   158b8:	e0bff915 	stw	r2,-28(fp)
   158bc:	00005d06 	br	15a34 <alt_read_cfi_width+0x794>
   158c0:	e0bfff17 	ldw	r2,-4(fp)
   158c4:	11000a17 	ldw	r4,40(r2)
   158c8:	01401544 	movi	r5,85
   158cc:	01802604 	movi	r6,152
   158d0:	00148040 	call	14804 <alt_write_flash_command_32bit_device_8bit_mode>
   158d4:	e03ffb15 	stw	zero,-20(fp)
   158d8:	00000f06 	br	15918 <alt_read_cfi_width+0x678>
   158dc:	e13ffb17 	ldw	r4,-20(fp)
   158e0:	e0bfff17 	ldw	r2,-4(fp)
   158e4:	10800a17 	ldw	r2,40(r2)
   158e8:	1007883a 	mov	r3,r2
   158ec:	e0bffb17 	ldw	r2,-20(fp)
   158f0:	1885883a 	add	r2,r3,r2
   158f4:	10801004 	addi	r2,r2,64
   158f8:	10800023 	ldbuio	r2,0(r2)
   158fc:	1007883a 	mov	r3,r2
   15900:	e0bffc04 	addi	r2,fp,-16
   15904:	1105883a 	add	r2,r2,r4
   15908:	10c00005 	stb	r3,0(r2)
   1590c:	e0bffb17 	ldw	r2,-20(fp)
   15910:	10800044 	addi	r2,r2,1
   15914:	e0bffb15 	stw	r2,-20(fp)
   15918:	e0bffb17 	ldw	r2,-20(fp)
   1591c:	10800310 	cmplti	r2,r2,12
   15920:	103fee1e 	bne	r2,zero,158dc <alt_read_cfi_width+0x63c>
   15924:	e0bffc03 	ldbu	r2,-16(fp)
   15928:	10803fcc 	andi	r2,r2,255
   1592c:	10801458 	cmpnei	r2,r2,81
   15930:	1000401e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15934:	e0bffc43 	ldbu	r2,-15(fp)
   15938:	10803fcc 	andi	r2,r2,255
   1593c:	10801458 	cmpnei	r2,r2,81
   15940:	10003c1e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15944:	e0bffc83 	ldbu	r2,-14(fp)
   15948:	10803fcc 	andi	r2,r2,255
   1594c:	10801458 	cmpnei	r2,r2,81
   15950:	1000381e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15954:	e0bffcc3 	ldbu	r2,-13(fp)
   15958:	10803fcc 	andi	r2,r2,255
   1595c:	10801458 	cmpnei	r2,r2,81
   15960:	1000341e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15964:	e0bffd03 	ldbu	r2,-12(fp)
   15968:	10803fcc 	andi	r2,r2,255
   1596c:	10801498 	cmpnei	r2,r2,82
   15970:	1000301e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15974:	e0bffd43 	ldbu	r2,-11(fp)
   15978:	10803fcc 	andi	r2,r2,255
   1597c:	10801498 	cmpnei	r2,r2,82
   15980:	10002c1e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15984:	e0bffd83 	ldbu	r2,-10(fp)
   15988:	10803fcc 	andi	r2,r2,255
   1598c:	10801498 	cmpnei	r2,r2,82
   15990:	1000281e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15994:	e0bffdc3 	ldbu	r2,-9(fp)
   15998:	10803fcc 	andi	r2,r2,255
   1599c:	10801498 	cmpnei	r2,r2,82
   159a0:	1000241e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   159a4:	e0bffe03 	ldbu	r2,-8(fp)
   159a8:	10803fcc 	andi	r2,r2,255
   159ac:	10801658 	cmpnei	r2,r2,89
   159b0:	1000201e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   159b4:	e0bffe43 	ldbu	r2,-7(fp)
   159b8:	10803fcc 	andi	r2,r2,255
   159bc:	10801658 	cmpnei	r2,r2,89
   159c0:	10001c1e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   159c4:	e0bffe83 	ldbu	r2,-6(fp)
   159c8:	10803fcc 	andi	r2,r2,255
   159cc:	10801658 	cmpnei	r2,r2,89
   159d0:	1000181e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   159d4:	e0bffec3 	ldbu	r2,-5(fp)
   159d8:	10803fcc 	andi	r2,r2,255
   159dc:	10801658 	cmpnei	r2,r2,89
   159e0:	1000141e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   159e4:	e0ffff17 	ldw	r3,-4(fp)
   159e8:	00800044 	movi	r2,1
   159ec:	18802e15 	stw	r2,184(r3)
   159f0:	e0ffff17 	ldw	r3,-4(fp)
   159f4:	00800104 	movi	r2,4
   159f8:	18802f15 	stw	r2,188(r3)
   159fc:	e0bfff17 	ldw	r2,-4(fp)
   15a00:	10800a17 	ldw	r2,40(r2)
   15a04:	10802804 	addi	r2,r2,160
   15a08:	10800037 	ldwio	r2,0(r2)
   15a0c:	e0bffa0d 	sth	r2,-24(fp)
   15a10:	e0bffa0b 	ldhu	r2,-24(fp)
   15a14:	10800044 	addi	r2,r2,1
   15a18:	e0bffa0d 	sth	r2,-24(fp)
   15a1c:	e0bffa0b 	ldhu	r2,-24(fp)
   15a20:	1080010c 	andi	r2,r2,4
   15a24:	1004c03a 	cmpne	r2,r2,zero
   15a28:	1000021e 	bne	r2,zero,15a34 <alt_read_cfi_width+0x794>
   15a2c:	00bffb44 	movi	r2,-19
   15a30:	e0bff915 	stw	r2,-28(fp)
   15a34:	e0bff917 	ldw	r2,-28(fp)
   15a38:	e037883a 	mov	sp,fp
   15a3c:	dfc00117 	ldw	ra,4(sp)
   15a40:	df000017 	ldw	fp,0(sp)
   15a44:	dec00204 	addi	sp,sp,8
   15a48:	f800283a 	ret

00015a4c <alt_check_primary_table>:
   15a4c:	defff904 	addi	sp,sp,-28
   15a50:	dfc00615 	stw	ra,24(sp)
   15a54:	df000515 	stw	fp,20(sp)
   15a58:	dc000415 	stw	r16,16(sp)
   15a5c:	df000404 	addi	fp,sp,16
   15a60:	e13fff15 	stw	r4,-4(fp)
   15a64:	e03ffc15 	stw	zero,-16(fp)
   15a68:	e13fff17 	ldw	r4,-4(fp)
   15a6c:	01400544 	movi	r5,21
   15a70:	0014c440 	call	14c44 <alt_read_16bit_query_entry>
   15a74:	10ffffcc 	andi	r3,r2,65535
   15a78:	e0bfff17 	ldw	r2,-4(fp)
   15a7c:	10c03215 	stw	r3,200(r2)
   15a80:	e03ffd15 	stw	zero,-12(fp)
   15a84:	00001006 	br	15ac8 <alt_check_primary_table+0x7c>
   15a88:	e43ffd17 	ldw	r16,-12(fp)
   15a8c:	e0bfff17 	ldw	r2,-4(fp)
   15a90:	11803417 	ldw	r6,208(r2)
   15a94:	e0bfff17 	ldw	r2,-4(fp)
   15a98:	10c03217 	ldw	r3,200(r2)
   15a9c:	e0bffd17 	ldw	r2,-12(fp)
   15aa0:	188b883a 	add	r5,r3,r2
   15aa4:	e13fff17 	ldw	r4,-4(fp)
   15aa8:	303ee83a 	callr	r6
   15aac:	1007883a 	mov	r3,r2
   15ab0:	e0bffe04 	addi	r2,fp,-8
   15ab4:	1405883a 	add	r2,r2,r16
   15ab8:	10c00005 	stb	r3,0(r2)
   15abc:	e0bffd17 	ldw	r2,-12(fp)
   15ac0:	10800044 	addi	r2,r2,1
   15ac4:	e0bffd15 	stw	r2,-12(fp)
   15ac8:	e0bffd17 	ldw	r2,-12(fp)
   15acc:	108000d0 	cmplti	r2,r2,3
   15ad0:	103fed1e 	bne	r2,zero,15a88 <alt_check_primary_table+0x3c>
   15ad4:	e0bffe03 	ldbu	r2,-8(fp)
   15ad8:	10803fcc 	andi	r2,r2,255
   15adc:	10801418 	cmpnei	r2,r2,80
   15ae0:	1000081e 	bne	r2,zero,15b04 <alt_check_primary_table+0xb8>
   15ae4:	e0bffe43 	ldbu	r2,-7(fp)
   15ae8:	10803fcc 	andi	r2,r2,255
   15aec:	10801498 	cmpnei	r2,r2,82
   15af0:	1000041e 	bne	r2,zero,15b04 <alt_check_primary_table+0xb8>
   15af4:	e0bffe83 	ldbu	r2,-6(fp)
   15af8:	10803fcc 	andi	r2,r2,255
   15afc:	10801260 	cmpeqi	r2,r2,73
   15b00:	1000021e 	bne	r2,zero,15b0c <alt_check_primary_table+0xc0>
   15b04:	00bffb44 	movi	r2,-19
   15b08:	e0bffc15 	stw	r2,-16(fp)
   15b0c:	e0bffc17 	ldw	r2,-16(fp)
   15b10:	e037883a 	mov	sp,fp
   15b14:	dfc00217 	ldw	ra,8(sp)
   15b18:	df000117 	ldw	fp,4(sp)
   15b1c:	dc000017 	ldw	r16,0(sp)
   15b20:	dec00304 	addi	sp,sp,12
   15b24:	f800283a 	ret

00015b28 <altera_avalon_jtag_uart_read_fd>:
   15b28:	defffa04 	addi	sp,sp,-24
   15b2c:	dfc00515 	stw	ra,20(sp)
   15b30:	df000415 	stw	fp,16(sp)
   15b34:	df000404 	addi	fp,sp,16
   15b38:	e13ffd15 	stw	r4,-12(fp)
   15b3c:	e17ffe15 	stw	r5,-8(fp)
   15b40:	e1bfff15 	stw	r6,-4(fp)
   15b44:	e0bffd17 	ldw	r2,-12(fp)
   15b48:	10800017 	ldw	r2,0(r2)
   15b4c:	e0bffc15 	stw	r2,-16(fp)
   15b50:	e0bffc17 	ldw	r2,-16(fp)
   15b54:	11000a04 	addi	r4,r2,40
   15b58:	e0bffd17 	ldw	r2,-12(fp)
   15b5c:	11c00217 	ldw	r7,8(r2)
   15b60:	e17ffe17 	ldw	r5,-8(fp)
   15b64:	e1bfff17 	ldw	r6,-4(fp)
   15b68:	001616c0 	call	1616c <altera_avalon_jtag_uart_read>
   15b6c:	e037883a 	mov	sp,fp
   15b70:	dfc00117 	ldw	ra,4(sp)
   15b74:	df000017 	ldw	fp,0(sp)
   15b78:	dec00204 	addi	sp,sp,8
   15b7c:	f800283a 	ret

00015b80 <altera_avalon_jtag_uart_write_fd>:
   15b80:	defffa04 	addi	sp,sp,-24
   15b84:	dfc00515 	stw	ra,20(sp)
   15b88:	df000415 	stw	fp,16(sp)
   15b8c:	df000404 	addi	fp,sp,16
   15b90:	e13ffd15 	stw	r4,-12(fp)
   15b94:	e17ffe15 	stw	r5,-8(fp)
   15b98:	e1bfff15 	stw	r6,-4(fp)
   15b9c:	e0bffd17 	ldw	r2,-12(fp)
   15ba0:	10800017 	ldw	r2,0(r2)
   15ba4:	e0bffc15 	stw	r2,-16(fp)
   15ba8:	e0bffc17 	ldw	r2,-16(fp)
   15bac:	11000a04 	addi	r4,r2,40
   15bb0:	e0bffd17 	ldw	r2,-12(fp)
   15bb4:	11c00217 	ldw	r7,8(r2)
   15bb8:	e17ffe17 	ldw	r5,-8(fp)
   15bbc:	e1bfff17 	ldw	r6,-4(fp)
   15bc0:	00163900 	call	16390 <altera_avalon_jtag_uart_write>
   15bc4:	e037883a 	mov	sp,fp
   15bc8:	dfc00117 	ldw	ra,4(sp)
   15bcc:	df000017 	ldw	fp,0(sp)
   15bd0:	dec00204 	addi	sp,sp,8
   15bd4:	f800283a 	ret

00015bd8 <altera_avalon_jtag_uart_close_fd>:
   15bd8:	defffc04 	addi	sp,sp,-16
   15bdc:	dfc00315 	stw	ra,12(sp)
   15be0:	df000215 	stw	fp,8(sp)
   15be4:	df000204 	addi	fp,sp,8
   15be8:	e13fff15 	stw	r4,-4(fp)
   15bec:	e0bfff17 	ldw	r2,-4(fp)
   15bf0:	10800017 	ldw	r2,0(r2)
   15bf4:	e0bffe15 	stw	r2,-8(fp)
   15bf8:	e0bffe17 	ldw	r2,-8(fp)
   15bfc:	11000a04 	addi	r4,r2,40
   15c00:	e0bfff17 	ldw	r2,-4(fp)
   15c04:	11400217 	ldw	r5,8(r2)
   15c08:	00160040 	call	16004 <altera_avalon_jtag_uart_close>
   15c0c:	e037883a 	mov	sp,fp
   15c10:	dfc00117 	ldw	ra,4(sp)
   15c14:	df000017 	ldw	fp,0(sp)
   15c18:	dec00204 	addi	sp,sp,8
   15c1c:	f800283a 	ret

00015c20 <altera_avalon_jtag_uart_ioctl_fd>:
   15c20:	defffa04 	addi	sp,sp,-24
   15c24:	dfc00515 	stw	ra,20(sp)
   15c28:	df000415 	stw	fp,16(sp)
   15c2c:	df000404 	addi	fp,sp,16
   15c30:	e13ffd15 	stw	r4,-12(fp)
   15c34:	e17ffe15 	stw	r5,-8(fp)
   15c38:	e1bfff15 	stw	r6,-4(fp)
   15c3c:	e0bffd17 	ldw	r2,-12(fp)
   15c40:	10800017 	ldw	r2,0(r2)
   15c44:	e0bffc15 	stw	r2,-16(fp)
   15c48:	e0bffc17 	ldw	r2,-16(fp)
   15c4c:	11000a04 	addi	r4,r2,40
   15c50:	e17ffe17 	ldw	r5,-8(fp)
   15c54:	e1bfff17 	ldw	r6,-4(fp)
   15c58:	00160780 	call	16078 <altera_avalon_jtag_uart_ioctl>
   15c5c:	e037883a 	mov	sp,fp
   15c60:	dfc00117 	ldw	ra,4(sp)
   15c64:	df000017 	ldw	fp,0(sp)
   15c68:	dec00204 	addi	sp,sp,8
   15c6c:	f800283a 	ret

00015c70 <altera_avalon_jtag_uart_init>:
   15c70:	defffb04 	addi	sp,sp,-20
   15c74:	dfc00415 	stw	ra,16(sp)
   15c78:	df000315 	stw	fp,12(sp)
   15c7c:	df000304 	addi	fp,sp,12
   15c80:	e13ffd15 	stw	r4,-12(fp)
   15c84:	e17ffe15 	stw	r5,-8(fp)
   15c88:	e1bfff15 	stw	r6,-4(fp)
   15c8c:	e0fffd17 	ldw	r3,-12(fp)
   15c90:	00800044 	movi	r2,1
   15c94:	18800815 	stw	r2,32(r3)
   15c98:	e0bffd17 	ldw	r2,-12(fp)
   15c9c:	10800017 	ldw	r2,0(r2)
   15ca0:	11000104 	addi	r4,r2,4
   15ca4:	e0bffd17 	ldw	r2,-12(fp)
   15ca8:	10800817 	ldw	r2,32(r2)
   15cac:	1007883a 	mov	r3,r2
   15cb0:	2005883a 	mov	r2,r4
   15cb4:	10c00035 	stwio	r3,0(r2)
   15cb8:	e13fff17 	ldw	r4,-4(fp)
   15cbc:	e17ffd17 	ldw	r5,-12(fp)
   15cc0:	01800074 	movhi	r6,1
   15cc4:	31974a04 	addi	r6,r6,23848
   15cc8:	00019140 	call	1914 <alt_irq_register>
   15ccc:	e0bffd17 	ldw	r2,-12(fp)
   15cd0:	10000915 	stw	zero,36(r2)
   15cd4:	e0bffd17 	ldw	r2,-12(fp)
   15cd8:	11000204 	addi	r4,r2,8
   15cdc:	00820034 	movhi	r2,2048
   15ce0:	108a6904 	addi	r2,r2,10660
   15ce4:	10800017 	ldw	r2,0(r2)
   15ce8:	100b883a 	mov	r5,r2
   15cec:	01800074 	movhi	r6,1
   15cf0:	3197d504 	addi	r6,r6,24404
   15cf4:	e1fffd17 	ldw	r7,-12(fp)
   15cf8:	0019f200 	call	19f20 <alt_alarm_start>
   15cfc:	1004403a 	cmpge	r2,r2,zero
   15d00:	1000041e 	bne	r2,zero,15d14 <altera_avalon_jtag_uart_init+0xa4>
   15d04:	e0fffd17 	ldw	r3,-12(fp)
   15d08:	00a00034 	movhi	r2,32768
   15d0c:	10bfffc4 	addi	r2,r2,-1
   15d10:	18800115 	stw	r2,4(r3)
   15d14:	e037883a 	mov	sp,fp
   15d18:	dfc00117 	ldw	ra,4(sp)
   15d1c:	df000017 	ldw	fp,0(sp)
   15d20:	dec00204 	addi	sp,sp,8
   15d24:	f800283a 	ret

00015d28 <altera_avalon_jtag_uart_irq>:
   15d28:	defff704 	addi	sp,sp,-36
   15d2c:	df000815 	stw	fp,32(sp)
   15d30:	df000804 	addi	fp,sp,32
   15d34:	e13ffe15 	stw	r4,-8(fp)
   15d38:	e17fff15 	stw	r5,-4(fp)
   15d3c:	e0bffe17 	ldw	r2,-8(fp)
   15d40:	e0bffd15 	stw	r2,-12(fp)
   15d44:	e0bffd17 	ldw	r2,-12(fp)
   15d48:	10800017 	ldw	r2,0(r2)
   15d4c:	e0bffc15 	stw	r2,-16(fp)
   15d50:	00000006 	br	15d54 <altera_avalon_jtag_uart_irq+0x2c>
   15d54:	e0bffc17 	ldw	r2,-16(fp)
   15d58:	10800104 	addi	r2,r2,4
   15d5c:	10800037 	ldwio	r2,0(r2)
   15d60:	e0bffb15 	stw	r2,-20(fp)
   15d64:	e0bffb17 	ldw	r2,-20(fp)
   15d68:	1080c00c 	andi	r2,r2,768
   15d6c:	1005003a 	cmpeq	r2,r2,zero
   15d70:	1000741e 	bne	r2,zero,15f44 <altera_avalon_jtag_uart_irq+0x21c>
   15d74:	e0bffb17 	ldw	r2,-20(fp)
   15d78:	1080400c 	andi	r2,r2,256
   15d7c:	1005003a 	cmpeq	r2,r2,zero
   15d80:	1000351e 	bne	r2,zero,15e58 <altera_avalon_jtag_uart_irq+0x130>
   15d84:	00800074 	movhi	r2,1
   15d88:	e0bffa15 	stw	r2,-24(fp)
   15d8c:	e0bffd17 	ldw	r2,-12(fp)
   15d90:	10800a17 	ldw	r2,40(r2)
   15d94:	10800044 	addi	r2,r2,1
   15d98:	1081ffcc 	andi	r2,r2,2047
   15d9c:	e0bff915 	stw	r2,-28(fp)
   15da0:	e0bffd17 	ldw	r2,-12(fp)
   15da4:	10c00b17 	ldw	r3,44(r2)
   15da8:	e0bff917 	ldw	r2,-28(fp)
   15dac:	18801626 	beq	r3,r2,15e08 <altera_avalon_jtag_uart_irq+0xe0>
   15db0:	e0bffc17 	ldw	r2,-16(fp)
   15db4:	10800037 	ldwio	r2,0(r2)
   15db8:	e0bffa15 	stw	r2,-24(fp)
   15dbc:	e0bffa17 	ldw	r2,-24(fp)
   15dc0:	10a0000c 	andi	r2,r2,32768
   15dc4:	1005003a 	cmpeq	r2,r2,zero
   15dc8:	10000f1e 	bne	r2,zero,15e08 <altera_avalon_jtag_uart_irq+0xe0>
   15dcc:	e0bffd17 	ldw	r2,-12(fp)
   15dd0:	10c00a17 	ldw	r3,40(r2)
   15dd4:	e0bffa17 	ldw	r2,-24(fp)
   15dd8:	1009883a 	mov	r4,r2
   15ddc:	e0bffd17 	ldw	r2,-12(fp)
   15de0:	1885883a 	add	r2,r3,r2
   15de4:	10800e04 	addi	r2,r2,56
   15de8:	11000005 	stb	r4,0(r2)
   15dec:	e0bffd17 	ldw	r2,-12(fp)
   15df0:	10800a17 	ldw	r2,40(r2)
   15df4:	10800044 	addi	r2,r2,1
   15df8:	10c1ffcc 	andi	r3,r2,2047
   15dfc:	e0bffd17 	ldw	r2,-12(fp)
   15e00:	10c00a15 	stw	r3,40(r2)
   15e04:	003fe106 	br	15d8c <altera_avalon_jtag_uart_irq+0x64>
   15e08:	e0bffa17 	ldw	r2,-24(fp)
   15e0c:	10bfffec 	andhi	r2,r2,65535
   15e10:	1005003a 	cmpeq	r2,r2,zero
   15e14:	1000101e 	bne	r2,zero,15e58 <altera_avalon_jtag_uart_irq+0x130>
   15e18:	e0bffd17 	ldw	r2,-12(fp)
   15e1c:	10c00817 	ldw	r3,32(r2)
   15e20:	00bfff84 	movi	r2,-2
   15e24:	1886703a 	and	r3,r3,r2
   15e28:	e0bffd17 	ldw	r2,-12(fp)
   15e2c:	10c00815 	stw	r3,32(r2)
   15e30:	e0bffc17 	ldw	r2,-16(fp)
   15e34:	11000104 	addi	r4,r2,4
   15e38:	e0bffd17 	ldw	r2,-12(fp)
   15e3c:	10800817 	ldw	r2,32(r2)
   15e40:	1007883a 	mov	r3,r2
   15e44:	2005883a 	mov	r2,r4
   15e48:	10c00035 	stwio	r3,0(r2)
   15e4c:	e0bffc17 	ldw	r2,-16(fp)
   15e50:	10800104 	addi	r2,r2,4
   15e54:	10800037 	ldwio	r2,0(r2)
   15e58:	e0bffb17 	ldw	r2,-20(fp)
   15e5c:	1080800c 	andi	r2,r2,512
   15e60:	1005003a 	cmpeq	r2,r2,zero
   15e64:	103fbb1e 	bne	r2,zero,15d54 <altera_avalon_jtag_uart_irq+0x2c>
   15e68:	e0bffb17 	ldw	r2,-20(fp)
   15e6c:	10bfffec 	andhi	r2,r2,65535
   15e70:	1004d43a 	srli	r2,r2,16
   15e74:	e0bff815 	stw	r2,-32(fp)
   15e78:	00001506 	br	15ed0 <altera_avalon_jtag_uart_irq+0x1a8>
   15e7c:	e13ffc17 	ldw	r4,-16(fp)
   15e80:	e0bffd17 	ldw	r2,-12(fp)
   15e84:	10c00d17 	ldw	r3,52(r2)
   15e88:	e0bffd17 	ldw	r2,-12(fp)
   15e8c:	1885883a 	add	r2,r3,r2
   15e90:	10820e04 	addi	r2,r2,2104
   15e94:	10800003 	ldbu	r2,0(r2)
   15e98:	10c03fcc 	andi	r3,r2,255
   15e9c:	18c0201c 	xori	r3,r3,128
   15ea0:	18ffe004 	addi	r3,r3,-128
   15ea4:	2005883a 	mov	r2,r4
   15ea8:	10c00035 	stwio	r3,0(r2)
   15eac:	e0bffd17 	ldw	r2,-12(fp)
   15eb0:	10800d17 	ldw	r2,52(r2)
   15eb4:	10800044 	addi	r2,r2,1
   15eb8:	10c1ffcc 	andi	r3,r2,2047
   15ebc:	e0bffd17 	ldw	r2,-12(fp)
   15ec0:	10c00d15 	stw	r3,52(r2)
   15ec4:	e0bff817 	ldw	r2,-32(fp)
   15ec8:	10bfffc4 	addi	r2,r2,-1
   15ecc:	e0bff815 	stw	r2,-32(fp)
   15ed0:	e0bff817 	ldw	r2,-32(fp)
   15ed4:	1005003a 	cmpeq	r2,r2,zero
   15ed8:	1000051e 	bne	r2,zero,15ef0 <altera_avalon_jtag_uart_irq+0x1c8>
   15edc:	e0bffd17 	ldw	r2,-12(fp)
   15ee0:	10c00d17 	ldw	r3,52(r2)
   15ee4:	e0bffd17 	ldw	r2,-12(fp)
   15ee8:	10800c17 	ldw	r2,48(r2)
   15eec:	18bfe31e 	bne	r3,r2,15e7c <altera_avalon_jtag_uart_irq+0x154>
   15ef0:	e0bff817 	ldw	r2,-32(fp)
   15ef4:	1005003a 	cmpeq	r2,r2,zero
   15ef8:	103f961e 	bne	r2,zero,15d54 <altera_avalon_jtag_uart_irq+0x2c>
   15efc:	e0bffd17 	ldw	r2,-12(fp)
   15f00:	10c00817 	ldw	r3,32(r2)
   15f04:	00bfff44 	movi	r2,-3
   15f08:	1886703a 	and	r3,r3,r2
   15f0c:	e0bffd17 	ldw	r2,-12(fp)
   15f10:	10c00815 	stw	r3,32(r2)
   15f14:	e0bffd17 	ldw	r2,-12(fp)
   15f18:	10800017 	ldw	r2,0(r2)
   15f1c:	11000104 	addi	r4,r2,4
   15f20:	e0bffd17 	ldw	r2,-12(fp)
   15f24:	10800817 	ldw	r2,32(r2)
   15f28:	1007883a 	mov	r3,r2
   15f2c:	2005883a 	mov	r2,r4
   15f30:	10c00035 	stwio	r3,0(r2)
   15f34:	e0bffc17 	ldw	r2,-16(fp)
   15f38:	10800104 	addi	r2,r2,4
   15f3c:	10800037 	ldwio	r2,0(r2)
   15f40:	003f8406 	br	15d54 <altera_avalon_jtag_uart_irq+0x2c>
   15f44:	e037883a 	mov	sp,fp
   15f48:	df000017 	ldw	fp,0(sp)
   15f4c:	dec00104 	addi	sp,sp,4
   15f50:	f800283a 	ret

00015f54 <altera_avalon_jtag_uart_timeout>:
   15f54:	defffc04 	addi	sp,sp,-16
   15f58:	df000315 	stw	fp,12(sp)
   15f5c:	df000304 	addi	fp,sp,12
   15f60:	e13fff15 	stw	r4,-4(fp)
   15f64:	e0bfff17 	ldw	r2,-4(fp)
   15f68:	e0bffe15 	stw	r2,-8(fp)
   15f6c:	e0bffe17 	ldw	r2,-8(fp)
   15f70:	10800017 	ldw	r2,0(r2)
   15f74:	10800104 	addi	r2,r2,4
   15f78:	10800037 	ldwio	r2,0(r2)
   15f7c:	e0bffd15 	stw	r2,-12(fp)
   15f80:	e0bffd17 	ldw	r2,-12(fp)
   15f84:	1081000c 	andi	r2,r2,1024
   15f88:	1005003a 	cmpeq	r2,r2,zero
   15f8c:	10000c1e 	bne	r2,zero,15fc0 <altera_avalon_jtag_uart_timeout+0x6c>
   15f90:	e0bffe17 	ldw	r2,-8(fp)
   15f94:	10800017 	ldw	r2,0(r2)
   15f98:	11000104 	addi	r4,r2,4
   15f9c:	e0bffe17 	ldw	r2,-8(fp)
   15fa0:	10800817 	ldw	r2,32(r2)
   15fa4:	10810014 	ori	r2,r2,1024
   15fa8:	1007883a 	mov	r3,r2
   15fac:	2005883a 	mov	r2,r4
   15fb0:	10c00035 	stwio	r3,0(r2)
   15fb4:	e0bffe17 	ldw	r2,-8(fp)
   15fb8:	10000915 	stw	zero,36(r2)
   15fbc:	00000a06 	br	15fe8 <altera_avalon_jtag_uart_timeout+0x94>
   15fc0:	e0bffe17 	ldw	r2,-8(fp)
   15fc4:	10c00917 	ldw	r3,36(r2)
   15fc8:	00a00034 	movhi	r2,32768
   15fcc:	10bfff04 	addi	r2,r2,-4
   15fd0:	10c00536 	bltu	r2,r3,15fe8 <altera_avalon_jtag_uart_timeout+0x94>
   15fd4:	e0bffe17 	ldw	r2,-8(fp)
   15fd8:	10800917 	ldw	r2,36(r2)
   15fdc:	10c00044 	addi	r3,r2,1
   15fe0:	e0bffe17 	ldw	r2,-8(fp)
   15fe4:	10c00915 	stw	r3,36(r2)
   15fe8:	00820034 	movhi	r2,2048
   15fec:	108a6904 	addi	r2,r2,10660
   15ff0:	10800017 	ldw	r2,0(r2)
   15ff4:	e037883a 	mov	sp,fp
   15ff8:	df000017 	ldw	fp,0(sp)
   15ffc:	dec00104 	addi	sp,sp,4
   16000:	f800283a 	ret

00016004 <altera_avalon_jtag_uart_close>:
   16004:	defffc04 	addi	sp,sp,-16
   16008:	df000315 	stw	fp,12(sp)
   1600c:	df000304 	addi	fp,sp,12
   16010:	e13ffd15 	stw	r4,-12(fp)
   16014:	e17ffe15 	stw	r5,-8(fp)
   16018:	00000706 	br	16038 <altera_avalon_jtag_uart_close+0x34>
   1601c:	e0bffe17 	ldw	r2,-8(fp)
   16020:	1090000c 	andi	r2,r2,16384
   16024:	1005003a 	cmpeq	r2,r2,zero
   16028:	1000031e 	bne	r2,zero,16038 <altera_avalon_jtag_uart_close+0x34>
   1602c:	00bffd44 	movi	r2,-11
   16030:	e0bfff15 	stw	r2,-4(fp)
   16034:	00000b06 	br	16064 <altera_avalon_jtag_uart_close+0x60>
   16038:	e0bffd17 	ldw	r2,-12(fp)
   1603c:	10c00d17 	ldw	r3,52(r2)
   16040:	e0bffd17 	ldw	r2,-12(fp)
   16044:	10800c17 	ldw	r2,48(r2)
   16048:	18800526 	beq	r3,r2,16060 <altera_avalon_jtag_uart_close+0x5c>
   1604c:	e0bffd17 	ldw	r2,-12(fp)
   16050:	10c00917 	ldw	r3,36(r2)
   16054:	e0bffd17 	ldw	r2,-12(fp)
   16058:	10800117 	ldw	r2,4(r2)
   1605c:	18bfef36 	bltu	r3,r2,1601c <altera_avalon_jtag_uart_close+0x18>
   16060:	e03fff15 	stw	zero,-4(fp)
   16064:	e0bfff17 	ldw	r2,-4(fp)
   16068:	e037883a 	mov	sp,fp
   1606c:	df000017 	ldw	fp,0(sp)
   16070:	dec00104 	addi	sp,sp,4
   16074:	f800283a 	ret

00016078 <altera_avalon_jtag_uart_ioctl>:
   16078:	defff804 	addi	sp,sp,-32
   1607c:	df000715 	stw	fp,28(sp)
   16080:	df000704 	addi	fp,sp,28
   16084:	e13ffb15 	stw	r4,-20(fp)
   16088:	e17ffc15 	stw	r5,-16(fp)
   1608c:	e1bffd15 	stw	r6,-12(fp)
   16090:	00bff9c4 	movi	r2,-25
   16094:	e0bffa15 	stw	r2,-24(fp)
   16098:	e0bffc17 	ldw	r2,-16(fp)
   1609c:	e0bfff15 	stw	r2,-4(fp)
   160a0:	e0ffff17 	ldw	r3,-4(fp)
   160a4:	189a8060 	cmpeqi	r2,r3,27137
   160a8:	1000041e 	bne	r2,zero,160bc <altera_avalon_jtag_uart_ioctl+0x44>
   160ac:	e0ffff17 	ldw	r3,-4(fp)
   160b0:	189a80a0 	cmpeqi	r2,r3,27138
   160b4:	10001b1e 	bne	r2,zero,16124 <altera_avalon_jtag_uart_ioctl+0xac>
   160b8:	00002706 	br	16158 <altera_avalon_jtag_uart_ioctl+0xe0>
   160bc:	e0bffb17 	ldw	r2,-20(fp)
   160c0:	10c00117 	ldw	r3,4(r2)
   160c4:	00a00034 	movhi	r2,32768
   160c8:	10bfffc4 	addi	r2,r2,-1
   160cc:	18802226 	beq	r3,r2,16158 <altera_avalon_jtag_uart_ioctl+0xe0>
   160d0:	e0bffd17 	ldw	r2,-12(fp)
   160d4:	10800017 	ldw	r2,0(r2)
   160d8:	e0bff915 	stw	r2,-28(fp)
   160dc:	e0bff917 	ldw	r2,-28(fp)
   160e0:	10800090 	cmplti	r2,r2,2
   160e4:	1000071e 	bne	r2,zero,16104 <altera_avalon_jtag_uart_ioctl+0x8c>
   160e8:	e0fff917 	ldw	r3,-28(fp)
   160ec:	00a00034 	movhi	r2,32768
   160f0:	10bfffc4 	addi	r2,r2,-1
   160f4:	18800326 	beq	r3,r2,16104 <altera_avalon_jtag_uart_ioctl+0x8c>
   160f8:	e0bff917 	ldw	r2,-28(fp)
   160fc:	e0bffe15 	stw	r2,-8(fp)
   16100:	00000306 	br	16110 <altera_avalon_jtag_uart_ioctl+0x98>
   16104:	00e00034 	movhi	r3,32768
   16108:	18ffff84 	addi	r3,r3,-2
   1610c:	e0fffe15 	stw	r3,-8(fp)
   16110:	e0bffb17 	ldw	r2,-20(fp)
   16114:	e0fffe17 	ldw	r3,-8(fp)
   16118:	10c00115 	stw	r3,4(r2)
   1611c:	e03ffa15 	stw	zero,-24(fp)
   16120:	00000d06 	br	16158 <altera_avalon_jtag_uart_ioctl+0xe0>
   16124:	e0bffb17 	ldw	r2,-20(fp)
   16128:	10c00117 	ldw	r3,4(r2)
   1612c:	00a00034 	movhi	r2,32768
   16130:	10bfffc4 	addi	r2,r2,-1
   16134:	18800826 	beq	r3,r2,16158 <altera_avalon_jtag_uart_ioctl+0xe0>
   16138:	e13ffd17 	ldw	r4,-12(fp)
   1613c:	e0bffb17 	ldw	r2,-20(fp)
   16140:	10c00917 	ldw	r3,36(r2)
   16144:	e0bffb17 	ldw	r2,-20(fp)
   16148:	10800117 	ldw	r2,4(r2)
   1614c:	1885803a 	cmpltu	r2,r3,r2
   16150:	20800015 	stw	r2,0(r4)
   16154:	e03ffa15 	stw	zero,-24(fp)
   16158:	e0bffa17 	ldw	r2,-24(fp)
   1615c:	e037883a 	mov	sp,fp
   16160:	df000017 	ldw	fp,0(sp)
   16164:	dec00104 	addi	sp,sp,4
   16168:	f800283a 	ret

0001616c <altera_avalon_jtag_uart_read>:
   1616c:	defff204 	addi	sp,sp,-56
   16170:	dfc00d15 	stw	ra,52(sp)
   16174:	df000c15 	stw	fp,48(sp)
   16178:	df000c04 	addi	fp,sp,48
   1617c:	e13ffb15 	stw	r4,-20(fp)
   16180:	e17ffc15 	stw	r5,-16(fp)
   16184:	e1bffd15 	stw	r6,-12(fp)
   16188:	e1fffe15 	stw	r7,-8(fp)
   1618c:	e0bffc17 	ldw	r2,-16(fp)
   16190:	e0bffa15 	stw	r2,-24(fp)
   16194:	00004806 	br	162b8 <altera_avalon_jtag_uart_read+0x14c>
   16198:	e0bffb17 	ldw	r2,-20(fp)
   1619c:	10800a17 	ldw	r2,40(r2)
   161a0:	e0bff715 	stw	r2,-36(fp)
   161a4:	e0bffb17 	ldw	r2,-20(fp)
   161a8:	10800b17 	ldw	r2,44(r2)
   161ac:	e0bff615 	stw	r2,-40(fp)
   161b0:	e0fff717 	ldw	r3,-36(fp)
   161b4:	e0bff617 	ldw	r2,-40(fp)
   161b8:	18800536 	bltu	r3,r2,161d0 <altera_avalon_jtag_uart_read+0x64>
   161bc:	e0bff717 	ldw	r2,-36(fp)
   161c0:	e0fff617 	ldw	r3,-40(fp)
   161c4:	10c5c83a 	sub	r2,r2,r3
   161c8:	e0bff815 	stw	r2,-32(fp)
   161cc:	00000406 	br	161e0 <altera_avalon_jtag_uart_read+0x74>
   161d0:	00820004 	movi	r2,2048
   161d4:	e0fff617 	ldw	r3,-40(fp)
   161d8:	10c5c83a 	sub	r2,r2,r3
   161dc:	e0bff815 	stw	r2,-32(fp)
   161e0:	e0bff817 	ldw	r2,-32(fp)
   161e4:	1005003a 	cmpeq	r2,r2,zero
   161e8:	10001f1e 	bne	r2,zero,16268 <altera_avalon_jtag_uart_read+0xfc>
   161ec:	e0fffd17 	ldw	r3,-12(fp)
   161f0:	e0bff817 	ldw	r2,-32(fp)
   161f4:	1880022e 	bgeu	r3,r2,16200 <altera_avalon_jtag_uart_read+0x94>
   161f8:	e0bffd17 	ldw	r2,-12(fp)
   161fc:	e0bff815 	stw	r2,-32(fp)
   16200:	e0bffb17 	ldw	r2,-20(fp)
   16204:	10c00e04 	addi	r3,r2,56
   16208:	e0bff617 	ldw	r2,-40(fp)
   1620c:	1887883a 	add	r3,r3,r2
   16210:	e0bffa17 	ldw	r2,-24(fp)
   16214:	1009883a 	mov	r4,r2
   16218:	180b883a 	mov	r5,r3
   1621c:	e1bff817 	ldw	r6,-32(fp)
   16220:	00080740 	call	8074 <memcpy>
   16224:	e0fff817 	ldw	r3,-32(fp)
   16228:	e0bffa17 	ldw	r2,-24(fp)
   1622c:	10c5883a 	add	r2,r2,r3
   16230:	e0bffa15 	stw	r2,-24(fp)
   16234:	e0fffd17 	ldw	r3,-12(fp)
   16238:	e0bff817 	ldw	r2,-32(fp)
   1623c:	1885c83a 	sub	r2,r3,r2
   16240:	e0bffd15 	stw	r2,-12(fp)
   16244:	e0fff617 	ldw	r3,-40(fp)
   16248:	e0bff817 	ldw	r2,-32(fp)
   1624c:	1885883a 	add	r2,r3,r2
   16250:	10c1ffcc 	andi	r3,r2,2047
   16254:	e0bffb17 	ldw	r2,-20(fp)
   16258:	10c00b15 	stw	r3,44(r2)
   1625c:	e0bffd17 	ldw	r2,-12(fp)
   16260:	10800048 	cmpgei	r2,r2,1
   16264:	103fcc1e 	bne	r2,zero,16198 <altera_avalon_jtag_uart_read+0x2c>
   16268:	e0fffa17 	ldw	r3,-24(fp)
   1626c:	e0bffc17 	ldw	r2,-16(fp)
   16270:	1880141e 	bne	r3,r2,162c4 <altera_avalon_jtag_uart_read+0x158>
   16274:	e0bffe17 	ldw	r2,-8(fp)
   16278:	1090000c 	andi	r2,r2,16384
   1627c:	1004c03a 	cmpne	r2,r2,zero
   16280:	1000101e 	bne	r2,zero,162c4 <altera_avalon_jtag_uart_read+0x158>
   16284:	e0bffb17 	ldw	r2,-20(fp)
   16288:	10c00a17 	ldw	r3,40(r2)
   1628c:	e0bff717 	ldw	r2,-36(fp)
   16290:	1880051e 	bne	r3,r2,162a8 <altera_avalon_jtag_uart_read+0x13c>
   16294:	e0bffb17 	ldw	r2,-20(fp)
   16298:	10c00917 	ldw	r3,36(r2)
   1629c:	e0bffb17 	ldw	r2,-20(fp)
   162a0:	10800117 	ldw	r2,4(r2)
   162a4:	18bff736 	bltu	r3,r2,16284 <altera_avalon_jtag_uart_read+0x118>
   162a8:	e0bffb17 	ldw	r2,-20(fp)
   162ac:	10c00a17 	ldw	r3,40(r2)
   162b0:	e0bff717 	ldw	r2,-36(fp)
   162b4:	18800326 	beq	r3,r2,162c4 <altera_avalon_jtag_uart_read+0x158>
   162b8:	e0bffd17 	ldw	r2,-12(fp)
   162bc:	10800048 	cmpgei	r2,r2,1
   162c0:	103fb51e 	bne	r2,zero,16198 <altera_avalon_jtag_uart_read+0x2c>
   162c4:	e0fffa17 	ldw	r3,-24(fp)
   162c8:	e0bffc17 	ldw	r2,-16(fp)
   162cc:	18801926 	beq	r3,r2,16334 <altera_avalon_jtag_uart_read+0x1c8>
   162d0:	0005303a 	rdctl	r2,status
   162d4:	e0bff515 	stw	r2,-44(fp)
   162d8:	e0fff517 	ldw	r3,-44(fp)
   162dc:	00bfff84 	movi	r2,-2
   162e0:	1884703a 	and	r2,r3,r2
   162e4:	1001703a 	wrctl	status,r2
   162e8:	e0bff517 	ldw	r2,-44(fp)
   162ec:	e0bff915 	stw	r2,-28(fp)
   162f0:	e0bffb17 	ldw	r2,-20(fp)
   162f4:	10800817 	ldw	r2,32(r2)
   162f8:	10c00054 	ori	r3,r2,1
   162fc:	e0bffb17 	ldw	r2,-20(fp)
   16300:	10c00815 	stw	r3,32(r2)
   16304:	e0bffb17 	ldw	r2,-20(fp)
   16308:	10800017 	ldw	r2,0(r2)
   1630c:	11000104 	addi	r4,r2,4
   16310:	e0bffb17 	ldw	r2,-20(fp)
   16314:	10800817 	ldw	r2,32(r2)
   16318:	1007883a 	mov	r3,r2
   1631c:	2005883a 	mov	r2,r4
   16320:	10c00035 	stwio	r3,0(r2)
   16324:	e0bff917 	ldw	r2,-28(fp)
   16328:	e0bff415 	stw	r2,-48(fp)
   1632c:	e0bff417 	ldw	r2,-48(fp)
   16330:	1001703a 	wrctl	status,r2
   16334:	e0fffa17 	ldw	r3,-24(fp)
   16338:	e0bffc17 	ldw	r2,-16(fp)
   1633c:	18800526 	beq	r3,r2,16354 <altera_avalon_jtag_uart_read+0x1e8>
   16340:	e0fffa17 	ldw	r3,-24(fp)
   16344:	e0bffc17 	ldw	r2,-16(fp)
   16348:	1887c83a 	sub	r3,r3,r2
   1634c:	e0ffff15 	stw	r3,-4(fp)
   16350:	00000906 	br	16378 <altera_avalon_jtag_uart_read+0x20c>
   16354:	e0bffe17 	ldw	r2,-8(fp)
   16358:	1090000c 	andi	r2,r2,16384
   1635c:	1005003a 	cmpeq	r2,r2,zero
   16360:	1000031e 	bne	r2,zero,16370 <altera_avalon_jtag_uart_read+0x204>
   16364:	00bffd44 	movi	r2,-11
   16368:	e0bfff15 	stw	r2,-4(fp)
   1636c:	00000206 	br	16378 <altera_avalon_jtag_uart_read+0x20c>
   16370:	00bffec4 	movi	r2,-5
   16374:	e0bfff15 	stw	r2,-4(fp)
   16378:	e0bfff17 	ldw	r2,-4(fp)
   1637c:	e037883a 	mov	sp,fp
   16380:	dfc00117 	ldw	ra,4(sp)
   16384:	df000017 	ldw	fp,0(sp)
   16388:	dec00204 	addi	sp,sp,8
   1638c:	f800283a 	ret

00016390 <altera_avalon_jtag_uart_write>:
   16390:	defff204 	addi	sp,sp,-56
   16394:	dfc00d15 	stw	ra,52(sp)
   16398:	df000c15 	stw	fp,48(sp)
   1639c:	df000c04 	addi	fp,sp,48
   163a0:	e13ffb15 	stw	r4,-20(fp)
   163a4:	e17ffc15 	stw	r5,-16(fp)
   163a8:	e1bffd15 	stw	r6,-12(fp)
   163ac:	e1fffe15 	stw	r7,-8(fp)
   163b0:	e03ff915 	stw	zero,-28(fp)
   163b4:	e0bffc17 	ldw	r2,-16(fp)
   163b8:	e0bff615 	stw	r2,-40(fp)
   163bc:	00003a06 	br	164a8 <altera_avalon_jtag_uart_write+0x118>
   163c0:	e0bffb17 	ldw	r2,-20(fp)
   163c4:	10800c17 	ldw	r2,48(r2)
   163c8:	e0bffa15 	stw	r2,-24(fp)
   163cc:	e0bffb17 	ldw	r2,-20(fp)
   163d0:	10800d17 	ldw	r2,52(r2)
   163d4:	e0bff915 	stw	r2,-28(fp)
   163d8:	e0fffa17 	ldw	r3,-24(fp)
   163dc:	e0bff917 	ldw	r2,-28(fp)
   163e0:	1880062e 	bgeu	r3,r2,163fc <altera_avalon_jtag_uart_write+0x6c>
   163e4:	e0fff917 	ldw	r3,-28(fp)
   163e8:	e0bffa17 	ldw	r2,-24(fp)
   163ec:	1885c83a 	sub	r2,r3,r2
   163f0:	10bfffc4 	addi	r2,r2,-1
   163f4:	e0bff815 	stw	r2,-32(fp)
   163f8:	00000c06 	br	1642c <altera_avalon_jtag_uart_write+0x9c>
   163fc:	e0bff917 	ldw	r2,-28(fp)
   16400:	1005003a 	cmpeq	r2,r2,zero
   16404:	1000051e 	bne	r2,zero,1641c <altera_avalon_jtag_uart_write+0x8c>
   16408:	00820004 	movi	r2,2048
   1640c:	e0fffa17 	ldw	r3,-24(fp)
   16410:	10c5c83a 	sub	r2,r2,r3
   16414:	e0bff815 	stw	r2,-32(fp)
   16418:	00000406 	br	1642c <altera_avalon_jtag_uart_write+0x9c>
   1641c:	0081ffc4 	movi	r2,2047
   16420:	e0fffa17 	ldw	r3,-24(fp)
   16424:	10c5c83a 	sub	r2,r2,r3
   16428:	e0bff815 	stw	r2,-32(fp)
   1642c:	e0bff817 	ldw	r2,-32(fp)
   16430:	1005003a 	cmpeq	r2,r2,zero
   16434:	10001f1e 	bne	r2,zero,164b4 <altera_avalon_jtag_uart_write+0x124>
   16438:	e0fffd17 	ldw	r3,-12(fp)
   1643c:	e0bff817 	ldw	r2,-32(fp)
   16440:	1880022e 	bgeu	r3,r2,1644c <altera_avalon_jtag_uart_write+0xbc>
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	e0bff815 	stw	r2,-32(fp)
   1644c:	e0bffb17 	ldw	r2,-20(fp)
   16450:	10c20e04 	addi	r3,r2,2104
   16454:	e0bffa17 	ldw	r2,-24(fp)
   16458:	1885883a 	add	r2,r3,r2
   1645c:	e0fffc17 	ldw	r3,-16(fp)
   16460:	1009883a 	mov	r4,r2
   16464:	180b883a 	mov	r5,r3
   16468:	e1bff817 	ldw	r6,-32(fp)
   1646c:	00080740 	call	8074 <memcpy>
   16470:	e0fff817 	ldw	r3,-32(fp)
   16474:	e0bffc17 	ldw	r2,-16(fp)
   16478:	10c5883a 	add	r2,r2,r3
   1647c:	e0bffc15 	stw	r2,-16(fp)
   16480:	e0fffd17 	ldw	r3,-12(fp)
   16484:	e0bff817 	ldw	r2,-32(fp)
   16488:	1885c83a 	sub	r2,r3,r2
   1648c:	e0bffd15 	stw	r2,-12(fp)
   16490:	e0fffa17 	ldw	r3,-24(fp)
   16494:	e0bff817 	ldw	r2,-32(fp)
   16498:	1885883a 	add	r2,r3,r2
   1649c:	10c1ffcc 	andi	r3,r2,2047
   164a0:	e0bffb17 	ldw	r2,-20(fp)
   164a4:	10c00c15 	stw	r3,48(r2)
   164a8:	e0bffd17 	ldw	r2,-12(fp)
   164ac:	10800048 	cmpgei	r2,r2,1
   164b0:	103fc31e 	bne	r2,zero,163c0 <altera_avalon_jtag_uart_write+0x30>
   164b4:	0005303a 	rdctl	r2,status
   164b8:	e0bff515 	stw	r2,-44(fp)
   164bc:	e0fff517 	ldw	r3,-44(fp)
   164c0:	00bfff84 	movi	r2,-2
   164c4:	1884703a 	and	r2,r3,r2
   164c8:	1001703a 	wrctl	status,r2
   164cc:	e0bff517 	ldw	r2,-44(fp)
   164d0:	e0bff715 	stw	r2,-36(fp)
   164d4:	e0bffb17 	ldw	r2,-20(fp)
   164d8:	10800817 	ldw	r2,32(r2)
   164dc:	10c00094 	ori	r3,r2,2
   164e0:	e0bffb17 	ldw	r2,-20(fp)
   164e4:	10c00815 	stw	r3,32(r2)
   164e8:	e0bffb17 	ldw	r2,-20(fp)
   164ec:	10800017 	ldw	r2,0(r2)
   164f0:	11000104 	addi	r4,r2,4
   164f4:	e0bffb17 	ldw	r2,-20(fp)
   164f8:	10800817 	ldw	r2,32(r2)
   164fc:	1007883a 	mov	r3,r2
   16500:	2005883a 	mov	r2,r4
   16504:	10c00035 	stwio	r3,0(r2)
   16508:	e0bff717 	ldw	r2,-36(fp)
   1650c:	e0bff415 	stw	r2,-48(fp)
   16510:	e0bff417 	ldw	r2,-48(fp)
   16514:	1001703a 	wrctl	status,r2
   16518:	e0bffd17 	ldw	r2,-12(fp)
   1651c:	10800050 	cmplti	r2,r2,1
   16520:	1000111e 	bne	r2,zero,16568 <altera_avalon_jtag_uart_write+0x1d8>
   16524:	e0bffe17 	ldw	r2,-8(fp)
   16528:	1090000c 	andi	r2,r2,16384
   1652c:	1004c03a 	cmpne	r2,r2,zero
   16530:	1000101e 	bne	r2,zero,16574 <altera_avalon_jtag_uart_write+0x1e4>
   16534:	e0bffb17 	ldw	r2,-20(fp)
   16538:	10c00d17 	ldw	r3,52(r2)
   1653c:	e0bff917 	ldw	r2,-28(fp)
   16540:	1880051e 	bne	r3,r2,16558 <altera_avalon_jtag_uart_write+0x1c8>
   16544:	e0bffb17 	ldw	r2,-20(fp)
   16548:	10c00917 	ldw	r3,36(r2)
   1654c:	e0bffb17 	ldw	r2,-20(fp)
   16550:	10800117 	ldw	r2,4(r2)
   16554:	18bff736 	bltu	r3,r2,16534 <altera_avalon_jtag_uart_write+0x1a4>
   16558:	e0bffb17 	ldw	r2,-20(fp)
   1655c:	10c00d17 	ldw	r3,52(r2)
   16560:	e0bff917 	ldw	r2,-28(fp)
   16564:	18800326 	beq	r3,r2,16574 <altera_avalon_jtag_uart_write+0x1e4>
   16568:	e0bffd17 	ldw	r2,-12(fp)
   1656c:	10800048 	cmpgei	r2,r2,1
   16570:	103fcd1e 	bne	r2,zero,164a8 <altera_avalon_jtag_uart_write+0x118>
   16574:	e0fffc17 	ldw	r3,-16(fp)
   16578:	e0bff617 	ldw	r2,-40(fp)
   1657c:	18800526 	beq	r3,r2,16594 <altera_avalon_jtag_uart_write+0x204>
   16580:	e0fffc17 	ldw	r3,-16(fp)
   16584:	e0bff617 	ldw	r2,-40(fp)
   16588:	1887c83a 	sub	r3,r3,r2
   1658c:	e0ffff15 	stw	r3,-4(fp)
   16590:	00000906 	br	165b8 <altera_avalon_jtag_uart_write+0x228>
   16594:	e0bffe17 	ldw	r2,-8(fp)
   16598:	1090000c 	andi	r2,r2,16384
   1659c:	1005003a 	cmpeq	r2,r2,zero
   165a0:	1000031e 	bne	r2,zero,165b0 <altera_avalon_jtag_uart_write+0x220>
   165a4:	00bffd44 	movi	r2,-11
   165a8:	e0bfff15 	stw	r2,-4(fp)
   165ac:	00000206 	br	165b8 <altera_avalon_jtag_uart_write+0x228>
   165b0:	00bffec4 	movi	r2,-5
   165b4:	e0bfff15 	stw	r2,-4(fp)
   165b8:	e0bfff17 	ldw	r2,-4(fp)
   165bc:	e037883a 	mov	sp,fp
   165c0:	dfc00117 	ldw	ra,4(sp)
   165c4:	df000017 	ldw	fp,0(sp)
   165c8:	dec00204 	addi	sp,sp,8
   165cc:	f800283a 	ret

000165d0 <lcd_write_command>:
   165d0:	defffa04 	addi	sp,sp,-24
   165d4:	dfc00515 	stw	ra,20(sp)
   165d8:	df000415 	stw	fp,16(sp)
   165dc:	df000404 	addi	fp,sp,16
   165e0:	e13ffe15 	stw	r4,-8(fp)
   165e4:	e17fff05 	stb	r5,-4(fp)
   165e8:	e0bffe17 	ldw	r2,-8(fp)
   165ec:	10800017 	ldw	r2,0(r2)
   165f0:	e0bffd15 	stw	r2,-12(fp)
   165f4:	008003f4 	movhi	r2,15
   165f8:	10909004 	addi	r2,r2,16960
   165fc:	e0bffc15 	stw	r2,-16(fp)
   16600:	e0bffe17 	ldw	r2,-8(fp)
   16604:	10800803 	ldbu	r2,32(r2)
   16608:	10803fcc 	andi	r2,r2,255
   1660c:	1080201c 	xori	r2,r2,128
   16610:	10bfe004 	addi	r2,r2,-128
   16614:	1004c03a 	cmpne	r2,r2,zero
   16618:	1000161e 	bne	r2,zero,16674 <lcd_write_command+0xa4>
   1661c:	00000a06 	br	16648 <lcd_write_command+0x78>
   16620:	e0bffc17 	ldw	r2,-16(fp)
   16624:	10bfffc4 	addi	r2,r2,-1
   16628:	e0bffc15 	stw	r2,-16(fp)
   1662c:	e0bffc17 	ldw	r2,-16(fp)
   16630:	1004c03a 	cmpne	r2,r2,zero
   16634:	1000041e 	bne	r2,zero,16648 <lcd_write_command+0x78>
   16638:	e0fffe17 	ldw	r3,-8(fp)
   1663c:	00800044 	movi	r2,1
   16640:	18800805 	stb	r2,32(r3)
   16644:	00000b06 	br	16674 <lcd_write_command+0xa4>
   16648:	e0bffd17 	ldw	r2,-12(fp)
   1664c:	10800104 	addi	r2,r2,4
   16650:	10800037 	ldwio	r2,0(r2)
   16654:	1080200c 	andi	r2,r2,128
   16658:	1004c03a 	cmpne	r2,r2,zero
   1665c:	103ff01e 	bne	r2,zero,16620 <lcd_write_command+0x50>
   16660:	01001904 	movi	r4,100
   16664:	001a9d00 	call	1a9d0 <usleep>
   16668:	e0bffd17 	ldw	r2,-12(fp)
   1666c:	e0ffff03 	ldbu	r3,-4(fp)
   16670:	10c00035 	stwio	r3,0(r2)
   16674:	e037883a 	mov	sp,fp
   16678:	dfc00117 	ldw	ra,4(sp)
   1667c:	df000017 	ldw	fp,0(sp)
   16680:	dec00204 	addi	sp,sp,8
   16684:	f800283a 	ret

00016688 <lcd_write_data>:
   16688:	defffa04 	addi	sp,sp,-24
   1668c:	dfc00515 	stw	ra,20(sp)
   16690:	df000415 	stw	fp,16(sp)
   16694:	df000404 	addi	fp,sp,16
   16698:	e13ffe15 	stw	r4,-8(fp)
   1669c:	e17fff05 	stb	r5,-4(fp)
   166a0:	e0bffe17 	ldw	r2,-8(fp)
   166a4:	10800017 	ldw	r2,0(r2)
   166a8:	e0bffd15 	stw	r2,-12(fp)
   166ac:	008003f4 	movhi	r2,15
   166b0:	10909004 	addi	r2,r2,16960
   166b4:	e0bffc15 	stw	r2,-16(fp)
   166b8:	e0bffe17 	ldw	r2,-8(fp)
   166bc:	10800803 	ldbu	r2,32(r2)
   166c0:	10803fcc 	andi	r2,r2,255
   166c4:	1080201c 	xori	r2,r2,128
   166c8:	10bfe004 	addi	r2,r2,-128
   166cc:	1004c03a 	cmpne	r2,r2,zero
   166d0:	10001d1e 	bne	r2,zero,16748 <lcd_write_data+0xc0>
   166d4:	00000a06 	br	16700 <lcd_write_data+0x78>
   166d8:	e0bffc17 	ldw	r2,-16(fp)
   166dc:	10bfffc4 	addi	r2,r2,-1
   166e0:	e0bffc15 	stw	r2,-16(fp)
   166e4:	e0bffc17 	ldw	r2,-16(fp)
   166e8:	1004c03a 	cmpne	r2,r2,zero
   166ec:	1000041e 	bne	r2,zero,16700 <lcd_write_data+0x78>
   166f0:	e0fffe17 	ldw	r3,-8(fp)
   166f4:	00800044 	movi	r2,1
   166f8:	18800805 	stb	r2,32(r3)
   166fc:	00001206 	br	16748 <lcd_write_data+0xc0>
   16700:	e0bffd17 	ldw	r2,-12(fp)
   16704:	10800104 	addi	r2,r2,4
   16708:	10800037 	ldwio	r2,0(r2)
   1670c:	1080200c 	andi	r2,r2,128
   16710:	1004c03a 	cmpne	r2,r2,zero
   16714:	103ff01e 	bne	r2,zero,166d8 <lcd_write_data+0x50>
   16718:	01001904 	movi	r4,100
   1671c:	001a9d00 	call	1a9d0 <usleep>
   16720:	e0bffd17 	ldw	r2,-12(fp)
   16724:	10800204 	addi	r2,r2,8
   16728:	e0ffff03 	ldbu	r3,-4(fp)
   1672c:	10c00035 	stwio	r3,0(r2)
   16730:	e0bffe17 	ldw	r2,-8(fp)
   16734:	108008c3 	ldbu	r2,35(r2)
   16738:	10800044 	addi	r2,r2,1
   1673c:	1007883a 	mov	r3,r2
   16740:	e0bffe17 	ldw	r2,-8(fp)
   16744:	10c008c5 	stb	r3,35(r2)
   16748:	e037883a 	mov	sp,fp
   1674c:	dfc00117 	ldw	ra,4(sp)
   16750:	df000017 	ldw	fp,0(sp)
   16754:	dec00204 	addi	sp,sp,8
   16758:	f800283a 	ret

0001675c <lcd_clear_screen>:
   1675c:	defffc04 	addi	sp,sp,-16
   16760:	dfc00315 	stw	ra,12(sp)
   16764:	df000215 	stw	fp,8(sp)
   16768:	df000204 	addi	fp,sp,8
   1676c:	e13fff15 	stw	r4,-4(fp)
   16770:	e13fff17 	ldw	r4,-4(fp)
   16774:	01400044 	movi	r5,1
   16778:	00165d00 	call	165d0 <lcd_write_command>
   1677c:	e0bfff17 	ldw	r2,-4(fp)
   16780:	10000845 	stb	zero,33(r2)
   16784:	e0bfff17 	ldw	r2,-4(fp)
   16788:	10000885 	stb	zero,34(r2)
   1678c:	e0bfff17 	ldw	r2,-4(fp)
   16790:	100008c5 	stb	zero,35(r2)
   16794:	e03ffe15 	stw	zero,-8(fp)
   16798:	00001906 	br	16800 <lcd_clear_screen+0xa4>
   1679c:	e0bffe17 	ldw	r2,-8(fp)
   167a0:	10801924 	muli	r2,r2,100
   167a4:	10c01004 	addi	r3,r2,64
   167a8:	e0bfff17 	ldw	r2,-4(fp)
   167ac:	1889883a 	add	r4,r3,r2
   167b0:	01400804 	movi	r5,32
   167b4:	01801444 	movi	r6,81
   167b8:	00081140 	call	8114 <memset>
   167bc:	e0bffe17 	ldw	r2,-8(fp)
   167c0:	10801924 	muli	r2,r2,100
   167c4:	10c00c04 	addi	r3,r2,48
   167c8:	e0bfff17 	ldw	r2,-4(fp)
   167cc:	1889883a 	add	r4,r3,r2
   167d0:	01400804 	movi	r5,32
   167d4:	01800404 	movi	r6,16
   167d8:	00081140 	call	8114 <memset>
   167dc:	e0bffe17 	ldw	r2,-8(fp)
   167e0:	e0ffff17 	ldw	r3,-4(fp)
   167e4:	10801924 	muli	r2,r2,100
   167e8:	10c5883a 	add	r2,r2,r3
   167ec:	10802404 	addi	r2,r2,144
   167f0:	10000045 	stb	zero,1(r2)
   167f4:	e0bffe17 	ldw	r2,-8(fp)
   167f8:	10800044 	addi	r2,r2,1
   167fc:	e0bffe15 	stw	r2,-8(fp)
   16800:	e0bffe17 	ldw	r2,-8(fp)
   16804:	10800090 	cmplti	r2,r2,2
   16808:	103fe41e 	bne	r2,zero,1679c <lcd_clear_screen+0x40>
   1680c:	e037883a 	mov	sp,fp
   16810:	dfc00117 	ldw	ra,4(sp)
   16814:	df000017 	ldw	fp,0(sp)
   16818:	dec00204 	addi	sp,sp,8
   1681c:	f800283a 	ret

00016820 <lcd_repaint_screen>:
   16820:	defff704 	addi	sp,sp,-36
   16824:	dfc00815 	stw	ra,32(sp)
   16828:	df000715 	stw	fp,28(sp)
   1682c:	df000704 	addi	fp,sp,28
   16830:	e13fff15 	stw	r4,-4(fp)
   16834:	e0bfff17 	ldw	r2,-4(fp)
   16838:	10800943 	ldbu	r2,37(r2)
   1683c:	10803fcc 	andi	r2,r2,255
   16840:	1080201c 	xori	r2,r2,128
   16844:	10bfe004 	addi	r2,r2,-128
   16848:	e0bffc15 	stw	r2,-16(fp)
   1684c:	e03ffe15 	stw	zero,-8(fp)
   16850:	00006606 	br	169ec <lcd_repaint_screen+0x1cc>
   16854:	e0bffe17 	ldw	r2,-8(fp)
   16858:	e0ffff17 	ldw	r3,-4(fp)
   1685c:	10801924 	muli	r2,r2,100
   16860:	10c5883a 	add	r2,r2,r3
   16864:	10802404 	addi	r2,r2,144
   16868:	10800043 	ldbu	r2,1(r2)
   1686c:	10803fcc 	andi	r2,r2,255
   16870:	1080201c 	xori	r2,r2,128
   16874:	10bfe004 	addi	r2,r2,-128
   16878:	e0bffb15 	stw	r2,-20(fp)
   1687c:	e0bffe17 	ldw	r2,-8(fp)
   16880:	e0ffff17 	ldw	r3,-4(fp)
   16884:	10801924 	muli	r2,r2,100
   16888:	10c5883a 	add	r2,r2,r3
   1688c:	10802404 	addi	r2,r2,144
   16890:	10800083 	ldbu	r2,2(r2)
   16894:	10c03fcc 	andi	r3,r2,255
   16898:	e0bffc17 	ldw	r2,-16(fp)
   1689c:	1885383a 	mul	r2,r3,r2
   168a0:	1005d23a 	srai	r2,r2,8
   168a4:	e0bffa15 	stw	r2,-24(fp)
   168a8:	e0fffa17 	ldw	r3,-24(fp)
   168ac:	e0bffb17 	ldw	r2,-20(fp)
   168b0:	18800116 	blt	r3,r2,168b8 <lcd_repaint_screen+0x98>
   168b4:	e03ffa15 	stw	zero,-24(fp)
   168b8:	e03ffd15 	stw	zero,-12(fp)
   168bc:	00004506 	br	169d4 <lcd_repaint_screen+0x1b4>
   168c0:	e17ffe17 	ldw	r5,-8(fp)
   168c4:	e0fffd17 	ldw	r3,-12(fp)
   168c8:	e0bffa17 	ldw	r2,-24(fp)
   168cc:	1889883a 	add	r4,r3,r2
   168d0:	e0bffb17 	ldw	r2,-20(fp)
   168d4:	2087283a 	div	r3,r4,r2
   168d8:	e0bffb17 	ldw	r2,-20(fp)
   168dc:	1885383a 	mul	r2,r3,r2
   168e0:	2089c83a 	sub	r4,r4,r2
   168e4:	e0ffff17 	ldw	r3,-4(fp)
   168e8:	28801924 	muli	r2,r5,100
   168ec:	10c5883a 	add	r2,r2,r3
   168f0:	1105883a 	add	r2,r2,r4
   168f4:	10801004 	addi	r2,r2,64
   168f8:	10800003 	ldbu	r2,0(r2)
   168fc:	e0bff945 	stb	r2,-27(fp)
   16900:	e0bffe17 	ldw	r2,-8(fp)
   16904:	e13ffd17 	ldw	r4,-12(fp)
   16908:	e0ffff17 	ldw	r3,-4(fp)
   1690c:	10801924 	muli	r2,r2,100
   16910:	10c5883a 	add	r2,r2,r3
   16914:	1105883a 	add	r2,r2,r4
   16918:	10800c04 	addi	r2,r2,48
   1691c:	10800003 	ldbu	r2,0(r2)
   16920:	10c03fcc 	andi	r3,r2,255
   16924:	18c0201c 	xori	r3,r3,128
   16928:	18ffe004 	addi	r3,r3,-128
   1692c:	e0bff947 	ldb	r2,-27(fp)
   16930:	18802526 	beq	r3,r2,169c8 <lcd_repaint_screen+0x1a8>
   16934:	e0fffe17 	ldw	r3,-8(fp)
   16938:	d0a01a04 	addi	r2,gp,-32664
   1693c:	1885883a 	add	r2,r3,r2
   16940:	10800003 	ldbu	r2,0(r2)
   16944:	1007883a 	mov	r3,r2
   16948:	e0bffd17 	ldw	r2,-12(fp)
   1694c:	1885883a 	add	r2,r3,r2
   16950:	e0bff905 	stb	r2,-28(fp)
   16954:	e0fff903 	ldbu	r3,-28(fp)
   16958:	e0bfff17 	ldw	r2,-4(fp)
   1695c:	108008c3 	ldbu	r2,35(r2)
   16960:	10803fcc 	andi	r2,r2,255
   16964:	1080201c 	xori	r2,r2,128
   16968:	10bfe004 	addi	r2,r2,-128
   1696c:	18800926 	beq	r3,r2,16994 <lcd_repaint_screen+0x174>
   16970:	e0fff903 	ldbu	r3,-28(fp)
   16974:	00bfe004 	movi	r2,-128
   16978:	1884b03a 	or	r2,r3,r2
   1697c:	11403fcc 	andi	r5,r2,255
   16980:	e13fff17 	ldw	r4,-4(fp)
   16984:	00165d00 	call	165d0 <lcd_write_command>
   16988:	e0fff903 	ldbu	r3,-28(fp)
   1698c:	e0bfff17 	ldw	r2,-4(fp)
   16990:	10c008c5 	stb	r3,35(r2)
   16994:	e0bff943 	ldbu	r2,-27(fp)
   16998:	11403fcc 	andi	r5,r2,255
   1699c:	e13fff17 	ldw	r4,-4(fp)
   169a0:	00166880 	call	16688 <lcd_write_data>
   169a4:	e0bffe17 	ldw	r2,-8(fp)
   169a8:	e13ffd17 	ldw	r4,-12(fp)
   169ac:	e0ffff17 	ldw	r3,-4(fp)
   169b0:	10801924 	muli	r2,r2,100
   169b4:	10c5883a 	add	r2,r2,r3
   169b8:	1105883a 	add	r2,r2,r4
   169bc:	10c00c04 	addi	r3,r2,48
   169c0:	e0bff943 	ldbu	r2,-27(fp)
   169c4:	18800005 	stb	r2,0(r3)
   169c8:	e0bffd17 	ldw	r2,-12(fp)
   169cc:	10800044 	addi	r2,r2,1
   169d0:	e0bffd15 	stw	r2,-12(fp)
   169d4:	e0bffd17 	ldw	r2,-12(fp)
   169d8:	10800410 	cmplti	r2,r2,16
   169dc:	103fb81e 	bne	r2,zero,168c0 <lcd_repaint_screen+0xa0>
   169e0:	e0bffe17 	ldw	r2,-8(fp)
   169e4:	10800044 	addi	r2,r2,1
   169e8:	e0bffe15 	stw	r2,-8(fp)
   169ec:	e0bffe17 	ldw	r2,-8(fp)
   169f0:	10800090 	cmplti	r2,r2,2
   169f4:	103f971e 	bne	r2,zero,16854 <lcd_repaint_screen+0x34>
   169f8:	e037883a 	mov	sp,fp
   169fc:	dfc00117 	ldw	ra,4(sp)
   16a00:	df000017 	ldw	fp,0(sp)
   16a04:	dec00204 	addi	sp,sp,8
   16a08:	f800283a 	ret

00016a0c <lcd_scroll_up>:
   16a0c:	defffc04 	addi	sp,sp,-16
   16a10:	dfc00315 	stw	ra,12(sp)
   16a14:	df000215 	stw	fp,8(sp)
   16a18:	df000204 	addi	fp,sp,8
   16a1c:	e13fff15 	stw	r4,-4(fp)
   16a20:	e03ffe15 	stw	zero,-8(fp)
   16a24:	00001d06 	br	16a9c <lcd_scroll_up+0x90>
   16a28:	e0bffe17 	ldw	r2,-8(fp)
   16a2c:	10800048 	cmpgei	r2,r2,1
   16a30:	10000f1e 	bne	r2,zero,16a70 <lcd_scroll_up+0x64>
   16a34:	e0bffe17 	ldw	r2,-8(fp)
   16a38:	10801924 	muli	r2,r2,100
   16a3c:	10c01004 	addi	r3,r2,64
   16a40:	e0bfff17 	ldw	r2,-4(fp)
   16a44:	1889883a 	add	r4,r3,r2
   16a48:	e0bffe17 	ldw	r2,-8(fp)
   16a4c:	10800044 	addi	r2,r2,1
   16a50:	10801924 	muli	r2,r2,100
   16a54:	10c01004 	addi	r3,r2,64
   16a58:	e0bfff17 	ldw	r2,-4(fp)
   16a5c:	1885883a 	add	r2,r3,r2
   16a60:	100b883a 	mov	r5,r2
   16a64:	01801404 	movi	r6,80
   16a68:	00080740 	call	8074 <memcpy>
   16a6c:	00000806 	br	16a90 <lcd_scroll_up+0x84>
   16a70:	e0bffe17 	ldw	r2,-8(fp)
   16a74:	10801924 	muli	r2,r2,100
   16a78:	10c01004 	addi	r3,r2,64
   16a7c:	e0bfff17 	ldw	r2,-4(fp)
   16a80:	1889883a 	add	r4,r3,r2
   16a84:	01400804 	movi	r5,32
   16a88:	01801404 	movi	r6,80
   16a8c:	00081140 	call	8114 <memset>
   16a90:	e0bffe17 	ldw	r2,-8(fp)
   16a94:	10800044 	addi	r2,r2,1
   16a98:	e0bffe15 	stw	r2,-8(fp)
   16a9c:	e0bffe17 	ldw	r2,-8(fp)
   16aa0:	10800090 	cmplti	r2,r2,2
   16aa4:	103fe01e 	bne	r2,zero,16a28 <lcd_scroll_up+0x1c>
   16aa8:	e0bfff17 	ldw	r2,-4(fp)
   16aac:	10800883 	ldbu	r2,34(r2)
   16ab0:	10bfffc4 	addi	r2,r2,-1
   16ab4:	1007883a 	mov	r3,r2
   16ab8:	e0bfff17 	ldw	r2,-4(fp)
   16abc:	10c00885 	stb	r3,34(r2)
   16ac0:	e037883a 	mov	sp,fp
   16ac4:	dfc00117 	ldw	ra,4(sp)
   16ac8:	df000017 	ldw	fp,0(sp)
   16acc:	dec00204 	addi	sp,sp,8
   16ad0:	f800283a 	ret

00016ad4 <lcd_handle_escape>:
   16ad4:	defff804 	addi	sp,sp,-32
   16ad8:	dfc00715 	stw	ra,28(sp)
   16adc:	df000615 	stw	fp,24(sp)
   16ae0:	df000604 	addi	fp,sp,24
   16ae4:	e13ffd15 	stw	r4,-12(fp)
   16ae8:	e17ffe05 	stb	r5,-8(fp)
   16aec:	e03ffc15 	stw	zero,-16(fp)
   16af0:	e03ffb15 	stw	zero,-20(fp)
   16af4:	e0bffd17 	ldw	r2,-12(fp)
   16af8:	10800a03 	ldbu	r2,40(r2)
   16afc:	10803fcc 	andi	r2,r2,255
   16b00:	1080201c 	xori	r2,r2,128
   16b04:	10bfe004 	addi	r2,r2,-128
   16b08:	108016d8 	cmpnei	r2,r2,91
   16b0c:	1000491e 	bne	r2,zero,16c34 <lcd_handle_escape+0x160>
   16b10:	e0bffd17 	ldw	r2,-12(fp)
   16b14:	10800a04 	addi	r2,r2,40
   16b18:	10800044 	addi	r2,r2,1
   16b1c:	e0bffa15 	stw	r2,-24(fp)
   16b20:	00000d06 	br	16b58 <lcd_handle_escape+0x84>
   16b24:	e0bffc17 	ldw	r2,-16(fp)
   16b28:	10c002a4 	muli	r3,r2,10
   16b2c:	e0bffa17 	ldw	r2,-24(fp)
   16b30:	10800003 	ldbu	r2,0(r2)
   16b34:	10803fcc 	andi	r2,r2,255
   16b38:	1080201c 	xori	r2,r2,128
   16b3c:	10bfe004 	addi	r2,r2,-128
   16b40:	1885883a 	add	r2,r3,r2
   16b44:	10bff404 	addi	r2,r2,-48
   16b48:	e0bffc15 	stw	r2,-16(fp)
   16b4c:	e0bffa17 	ldw	r2,-24(fp)
   16b50:	10800044 	addi	r2,r2,1
   16b54:	e0bffa15 	stw	r2,-24(fp)
   16b58:	e0bffa17 	ldw	r2,-24(fp)
   16b5c:	10800003 	ldbu	r2,0(r2)
   16b60:	10803fcc 	andi	r2,r2,255
   16b64:	1080201c 	xori	r2,r2,128
   16b68:	10bfe004 	addi	r2,r2,-128
   16b6c:	1007883a 	mov	r3,r2
   16b70:	00820034 	movhi	r2,2048
   16b74:	108a3204 	addi	r2,r2,10440
   16b78:	10800017 	ldw	r2,0(r2)
   16b7c:	1885883a 	add	r2,r3,r2
   16b80:	10800003 	ldbu	r2,0(r2)
   16b84:	10803fcc 	andi	r2,r2,255
   16b88:	1080010c 	andi	r2,r2,4
   16b8c:	1004c03a 	cmpne	r2,r2,zero
   16b90:	103fe41e 	bne	r2,zero,16b24 <lcd_handle_escape+0x50>
   16b94:	e0bffa17 	ldw	r2,-24(fp)
   16b98:	10800003 	ldbu	r2,0(r2)
   16b9c:	10803fcc 	andi	r2,r2,255
   16ba0:	1080201c 	xori	r2,r2,128
   16ba4:	10bfe004 	addi	r2,r2,-128
   16ba8:	10800ed8 	cmpnei	r2,r2,59
   16bac:	1000231e 	bne	r2,zero,16c3c <lcd_handle_escape+0x168>
   16bb0:	e0bffa17 	ldw	r2,-24(fp)
   16bb4:	10800044 	addi	r2,r2,1
   16bb8:	e0bffa15 	stw	r2,-24(fp)
   16bbc:	00000d06 	br	16bf4 <lcd_handle_escape+0x120>
   16bc0:	e0bffb17 	ldw	r2,-20(fp)
   16bc4:	10c002a4 	muli	r3,r2,10
   16bc8:	e0bffa17 	ldw	r2,-24(fp)
   16bcc:	10800003 	ldbu	r2,0(r2)
   16bd0:	10803fcc 	andi	r2,r2,255
   16bd4:	1080201c 	xori	r2,r2,128
   16bd8:	10bfe004 	addi	r2,r2,-128
   16bdc:	1885883a 	add	r2,r3,r2
   16be0:	10bff404 	addi	r2,r2,-48
   16be4:	e0bffb15 	stw	r2,-20(fp)
   16be8:	e0bffa17 	ldw	r2,-24(fp)
   16bec:	10800044 	addi	r2,r2,1
   16bf0:	e0bffa15 	stw	r2,-24(fp)
   16bf4:	e0bffa17 	ldw	r2,-24(fp)
   16bf8:	10800003 	ldbu	r2,0(r2)
   16bfc:	10803fcc 	andi	r2,r2,255
   16c00:	1080201c 	xori	r2,r2,128
   16c04:	10bfe004 	addi	r2,r2,-128
   16c08:	1007883a 	mov	r3,r2
   16c0c:	00820034 	movhi	r2,2048
   16c10:	108a3204 	addi	r2,r2,10440
   16c14:	10800017 	ldw	r2,0(r2)
   16c18:	1885883a 	add	r2,r3,r2
   16c1c:	10800003 	ldbu	r2,0(r2)
   16c20:	10803fcc 	andi	r2,r2,255
   16c24:	1080010c 	andi	r2,r2,4
   16c28:	1004c03a 	cmpne	r2,r2,zero
   16c2c:	103fe41e 	bne	r2,zero,16bc0 <lcd_handle_escape+0xec>
   16c30:	00000206 	br	16c3c <lcd_handle_escape+0x168>
   16c34:	00bfffc4 	movi	r2,-1
   16c38:	e0bffc15 	stw	r2,-16(fp)
   16c3c:	e0bffe07 	ldb	r2,-8(fp)
   16c40:	e0bfff15 	stw	r2,-4(fp)
   16c44:	e0ffff17 	ldw	r3,-4(fp)
   16c48:	188012a0 	cmpeqi	r2,r3,74
   16c4c:	10002f1e 	bne	r2,zero,16d0c <lcd_handle_escape+0x238>
   16c50:	e0ffff17 	ldw	r3,-4(fp)
   16c54:	188012c8 	cmpgei	r2,r3,75
   16c58:	1000041e 	bne	r2,zero,16c6c <lcd_handle_escape+0x198>
   16c5c:	e0ffff17 	ldw	r3,-4(fp)
   16c60:	18801220 	cmpeqi	r2,r3,72
   16c64:	1000081e 	bne	r2,zero,16c88 <lcd_handle_escape+0x1b4>
   16c68:	00004906 	br	16d90 <lcd_handle_escape+0x2bc>
   16c6c:	e0ffff17 	ldw	r3,-4(fp)
   16c70:	188012e0 	cmpeqi	r2,r3,75
   16c74:	10002b1e 	bne	r2,zero,16d24 <lcd_handle_escape+0x250>
   16c78:	e0ffff17 	ldw	r3,-4(fp)
   16c7c:	188019a0 	cmpeqi	r2,r3,102
   16c80:	1000011e 	bne	r2,zero,16c88 <lcd_handle_escape+0x1b4>
   16c84:	00004206 	br	16d90 <lcd_handle_escape+0x2bc>
   16c88:	e0bffb17 	ldw	r2,-20(fp)
   16c8c:	10800050 	cmplti	r2,r2,1
   16c90:	1000051e 	bne	r2,zero,16ca8 <lcd_handle_escape+0x1d4>
   16c94:	e0bffb17 	ldw	r2,-20(fp)
   16c98:	10bfffc4 	addi	r2,r2,-1
   16c9c:	1007883a 	mov	r3,r2
   16ca0:	e0bffd17 	ldw	r2,-12(fp)
   16ca4:	10c00845 	stb	r3,33(r2)
   16ca8:	e0bffc17 	ldw	r2,-16(fp)
   16cac:	10800050 	cmplti	r2,r2,1
   16cb0:	1000371e 	bne	r2,zero,16d90 <lcd_handle_escape+0x2bc>
   16cb4:	e0bffc17 	ldw	r2,-16(fp)
   16cb8:	10bfffc4 	addi	r2,r2,-1
   16cbc:	1007883a 	mov	r3,r2
   16cc0:	e0bffd17 	ldw	r2,-12(fp)
   16cc4:	10c00885 	stb	r3,34(r2)
   16cc8:	e0bffd17 	ldw	r2,-12(fp)
   16ccc:	10800883 	ldbu	r2,34(r2)
   16cd0:	10803fcc 	andi	r2,r2,255
   16cd4:	10800170 	cmpltui	r2,r2,5
   16cd8:	1000061e 	bne	r2,zero,16cf4 <lcd_handle_escape+0x220>
   16cdc:	e0fffd17 	ldw	r3,-12(fp)
   16ce0:	00800104 	movi	r2,4
   16ce4:	18800885 	stb	r2,34(r3)
   16ce8:	00000206 	br	16cf4 <lcd_handle_escape+0x220>
   16cec:	e13ffd17 	ldw	r4,-12(fp)
   16cf0:	0016a0c0 	call	16a0c <lcd_scroll_up>
   16cf4:	e0bffd17 	ldw	r2,-12(fp)
   16cf8:	10800883 	ldbu	r2,34(r2)
   16cfc:	10803fcc 	andi	r2,r2,255
   16d00:	108000e8 	cmpgeui	r2,r2,3
   16d04:	103ff91e 	bne	r2,zero,16cec <lcd_handle_escape+0x218>
   16d08:	00002106 	br	16d90 <lcd_handle_escape+0x2bc>
   16d0c:	e0bffc17 	ldw	r2,-16(fp)
   16d10:	10800098 	cmpnei	r2,r2,2
   16d14:	10001e1e 	bne	r2,zero,16d90 <lcd_handle_escape+0x2bc>
   16d18:	e13ffd17 	ldw	r4,-12(fp)
   16d1c:	001675c0 	call	1675c <lcd_clear_screen>
   16d20:	00001b06 	br	16d90 <lcd_handle_escape+0x2bc>
   16d24:	e0bffc17 	ldw	r2,-16(fp)
   16d28:	10800048 	cmpgei	r2,r2,1
   16d2c:	1000181e 	bne	r2,zero,16d90 <lcd_handle_escape+0x2bc>
   16d30:	e0bffd17 	ldw	r2,-12(fp)
   16d34:	10800843 	ldbu	r2,33(r2)
   16d38:	10803fcc 	andi	r2,r2,255
   16d3c:	10801428 	cmpgeui	r2,r2,80
   16d40:	1000131e 	bne	r2,zero,16d90 <lcd_handle_escape+0x2bc>
   16d44:	e0bffd17 	ldw	r2,-12(fp)
   16d48:	10800883 	ldbu	r2,34(r2)
   16d4c:	10803fcc 	andi	r2,r2,255
   16d50:	10801924 	muli	r2,r2,100
   16d54:	10c01004 	addi	r3,r2,64
   16d58:	e0bffd17 	ldw	r2,-12(fp)
   16d5c:	1887883a 	add	r3,r3,r2
   16d60:	e0bffd17 	ldw	r2,-12(fp)
   16d64:	10800843 	ldbu	r2,33(r2)
   16d68:	10803fcc 	andi	r2,r2,255
   16d6c:	1889883a 	add	r4,r3,r2
   16d70:	e0bffd17 	ldw	r2,-12(fp)
   16d74:	10800843 	ldbu	r2,33(r2)
   16d78:	10c03fcc 	andi	r3,r2,255
   16d7c:	00801404 	movi	r2,80
   16d80:	10c5c83a 	sub	r2,r2,r3
   16d84:	100d883a 	mov	r6,r2
   16d88:	01400804 	movi	r5,32
   16d8c:	00081140 	call	8114 <memset>
   16d90:	e037883a 	mov	sp,fp
   16d94:	dfc00117 	ldw	ra,4(sp)
   16d98:	df000017 	ldw	fp,0(sp)
   16d9c:	dec00204 	addi	sp,sp,8
   16da0:	f800283a 	ret

00016da4 <altera_avalon_lcd_16207_write>:
   16da4:	defff304 	addi	sp,sp,-52
   16da8:	dfc00c15 	stw	ra,48(sp)
   16dac:	df000b15 	stw	fp,44(sp)
   16db0:	df000b04 	addi	fp,sp,44
   16db4:	e13ffc15 	stw	r4,-16(fp)
   16db8:	e17ffd15 	stw	r5,-12(fp)
   16dbc:	e1bffe15 	stw	r6,-8(fp)
   16dc0:	e1ffff15 	stw	r7,-4(fp)
   16dc4:	e0bffe17 	ldw	r2,-8(fp)
   16dc8:	1007883a 	mov	r3,r2
   16dcc:	e0bffd17 	ldw	r2,-12(fp)
   16dd0:	10c5883a 	add	r2,r2,r3
   16dd4:	e0bffb15 	stw	r2,-20(fp)
   16dd8:	e0fffc17 	ldw	r3,-16(fp)
   16ddc:	00800044 	movi	r2,1
   16de0:	188009c5 	stb	r2,39(r3)
   16de4:	0000a206 	br	17070 <altera_avalon_lcd_16207_write+0x2cc>
   16de8:	e0bffd17 	ldw	r2,-12(fp)
   16dec:	10800003 	ldbu	r2,0(r2)
   16df0:	e0bff805 	stb	r2,-32(fp)
   16df4:	e0bffc17 	ldw	r2,-16(fp)
   16df8:	10800903 	ldbu	r2,36(r2)
   16dfc:	10803fcc 	andi	r2,r2,255
   16e00:	1080201c 	xori	r2,r2,128
   16e04:	10bfe004 	addi	r2,r2,-128
   16e08:	1004803a 	cmplt	r2,r2,zero
   16e0c:	10003b1e 	bne	r2,zero,16efc <altera_avalon_lcd_16207_write+0x158>
   16e10:	e0bffc17 	ldw	r2,-16(fp)
   16e14:	10800903 	ldbu	r2,36(r2)
   16e18:	10803fcc 	andi	r2,r2,255
   16e1c:	1080201c 	xori	r2,r2,128
   16e20:	10bfe004 	addi	r2,r2,-128
   16e24:	e0bff715 	stw	r2,-36(fp)
   16e28:	e0bff717 	ldw	r2,-36(fp)
   16e2c:	1004c03a 	cmpne	r2,r2,zero
   16e30:	1000031e 	bne	r2,zero,16e40 <altera_avalon_lcd_16207_write+0x9c>
   16e34:	e0bff807 	ldb	r2,-32(fp)
   16e38:	108016d8 	cmpnei	r2,r2,91
   16e3c:	1000111e 	bne	r2,zero,16e84 <altera_avalon_lcd_16207_write+0xe0>
   16e40:	e0bff717 	ldw	r2,-36(fp)
   16e44:	1005003a 	cmpeq	r2,r2,zero
   16e48:	10001a1e 	bne	r2,zero,16eb4 <altera_avalon_lcd_16207_write+0x110>
   16e4c:	e0bff807 	ldb	r2,-32(fp)
   16e50:	1007883a 	mov	r3,r2
   16e54:	00820034 	movhi	r2,2048
   16e58:	108a3204 	addi	r2,r2,10440
   16e5c:	10800017 	ldw	r2,0(r2)
   16e60:	1885883a 	add	r2,r3,r2
   16e64:	10800003 	ldbu	r2,0(r2)
   16e68:	10803fcc 	andi	r2,r2,255
   16e6c:	1080010c 	andi	r2,r2,4
   16e70:	1004c03a 	cmpne	r2,r2,zero
   16e74:	10000f1e 	bne	r2,zero,16eb4 <altera_avalon_lcd_16207_write+0x110>
   16e78:	e0bff807 	ldb	r2,-32(fp)
   16e7c:	10800ee0 	cmpeqi	r2,r2,59
   16e80:	10000c1e 	bne	r2,zero,16eb4 <altera_avalon_lcd_16207_write+0x110>
   16e84:	e0fff717 	ldw	r3,-36(fp)
   16e88:	e0bffc17 	ldw	r2,-16(fp)
   16e8c:	1885883a 	add	r2,r3,r2
   16e90:	10800a04 	addi	r2,r2,40
   16e94:	10000005 	stb	zero,0(r2)
   16e98:	e17ff807 	ldb	r5,-32(fp)
   16e9c:	e13ffc17 	ldw	r4,-16(fp)
   16ea0:	0016ad40 	call	16ad4 <lcd_handle_escape>
   16ea4:	e0fffc17 	ldw	r3,-16(fp)
   16ea8:	00bfffc4 	movi	r2,-1
   16eac:	18800905 	stb	r2,36(r3)
   16eb0:	00006c06 	br	17064 <altera_avalon_lcd_16207_write+0x2c0>
   16eb4:	e0bffc17 	ldw	r2,-16(fp)
   16eb8:	10800903 	ldbu	r2,36(r2)
   16ebc:	10803fcc 	andi	r2,r2,255
   16ec0:	108001e8 	cmpgeui	r2,r2,7
   16ec4:	1000671e 	bne	r2,zero,17064 <altera_avalon_lcd_16207_write+0x2c0>
   16ec8:	e0fff717 	ldw	r3,-36(fp)
   16ecc:	e0bffc17 	ldw	r2,-16(fp)
   16ed0:	1885883a 	add	r2,r3,r2
   16ed4:	10c00a04 	addi	r3,r2,40
   16ed8:	e0bff803 	ldbu	r2,-32(fp)
   16edc:	18800005 	stb	r2,0(r3)
   16ee0:	e0bffc17 	ldw	r2,-16(fp)
   16ee4:	10800903 	ldbu	r2,36(r2)
   16ee8:	10800044 	addi	r2,r2,1
   16eec:	1007883a 	mov	r3,r2
   16ef0:	e0bffc17 	ldw	r2,-16(fp)
   16ef4:	10c00905 	stb	r3,36(r2)
   16ef8:	00005a06 	br	17064 <altera_avalon_lcd_16207_write+0x2c0>
   16efc:	e0bff807 	ldb	r2,-32(fp)
   16f00:	108006d8 	cmpnei	r2,r2,27
   16f04:	1000031e 	bne	r2,zero,16f14 <altera_avalon_lcd_16207_write+0x170>
   16f08:	e0bffc17 	ldw	r2,-16(fp)
   16f0c:	10000905 	stb	zero,36(r2)
   16f10:	00005406 	br	17064 <altera_avalon_lcd_16207_write+0x2c0>
   16f14:	e0bff807 	ldb	r2,-32(fp)
   16f18:	10800358 	cmpnei	r2,r2,13
   16f1c:	1000031e 	bne	r2,zero,16f2c <altera_avalon_lcd_16207_write+0x188>
   16f20:	e0bffc17 	ldw	r2,-16(fp)
   16f24:	10000845 	stb	zero,33(r2)
   16f28:	00004e06 	br	17064 <altera_avalon_lcd_16207_write+0x2c0>
   16f2c:	e0bff807 	ldb	r2,-32(fp)
   16f30:	10800298 	cmpnei	r2,r2,10
   16f34:	1000101e 	bne	r2,zero,16f78 <altera_avalon_lcd_16207_write+0x1d4>
   16f38:	e0bffc17 	ldw	r2,-16(fp)
   16f3c:	10000845 	stb	zero,33(r2)
   16f40:	e0bffc17 	ldw	r2,-16(fp)
   16f44:	10800883 	ldbu	r2,34(r2)
   16f48:	10800044 	addi	r2,r2,1
   16f4c:	1007883a 	mov	r3,r2
   16f50:	e0bffc17 	ldw	r2,-16(fp)
   16f54:	10c00885 	stb	r3,34(r2)
   16f58:	e0bffc17 	ldw	r2,-16(fp)
   16f5c:	10800883 	ldbu	r2,34(r2)
   16f60:	10803fcc 	andi	r2,r2,255
   16f64:	108000f0 	cmpltui	r2,r2,3
   16f68:	10003e1e 	bne	r2,zero,17064 <altera_avalon_lcd_16207_write+0x2c0>
   16f6c:	e13ffc17 	ldw	r4,-16(fp)
   16f70:	0016a0c0 	call	16a0c <lcd_scroll_up>
   16f74:	00003b06 	br	17064 <altera_avalon_lcd_16207_write+0x2c0>
   16f78:	e0bff807 	ldb	r2,-32(fp)
   16f7c:	10800218 	cmpnei	r2,r2,8
   16f80:	10000c1e 	bne	r2,zero,16fb4 <altera_avalon_lcd_16207_write+0x210>
   16f84:	e0bffc17 	ldw	r2,-16(fp)
   16f88:	10800843 	ldbu	r2,33(r2)
   16f8c:	10803fcc 	andi	r2,r2,255
   16f90:	1005003a 	cmpeq	r2,r2,zero
   16f94:	1000331e 	bne	r2,zero,17064 <altera_avalon_lcd_16207_write+0x2c0>
   16f98:	e0bffc17 	ldw	r2,-16(fp)
   16f9c:	10800843 	ldbu	r2,33(r2)
   16fa0:	10bfffc4 	addi	r2,r2,-1
   16fa4:	1007883a 	mov	r3,r2
   16fa8:	e0bffc17 	ldw	r2,-16(fp)
   16fac:	10c00845 	stb	r3,33(r2)
   16fb0:	00002c06 	br	17064 <altera_avalon_lcd_16207_write+0x2c0>
   16fb4:	e0bff807 	ldb	r2,-32(fp)
   16fb8:	1007883a 	mov	r3,r2
   16fbc:	00820034 	movhi	r2,2048
   16fc0:	108a3204 	addi	r2,r2,10440
   16fc4:	10800017 	ldw	r2,0(r2)
   16fc8:	1885883a 	add	r2,r3,r2
   16fcc:	10800003 	ldbu	r2,0(r2)
   16fd0:	10803fcc 	andi	r2,r2,255
   16fd4:	1080201c 	xori	r2,r2,128
   16fd8:	10bfe004 	addi	r2,r2,-128
   16fdc:	108025cc 	andi	r2,r2,151
   16fe0:	1005003a 	cmpeq	r2,r2,zero
   16fe4:	10001f1e 	bne	r2,zero,17064 <altera_avalon_lcd_16207_write+0x2c0>
   16fe8:	e0bffc17 	ldw	r2,-16(fp)
   16fec:	10800883 	ldbu	r2,34(r2)
   16ff0:	10803fcc 	andi	r2,r2,255
   16ff4:	108000b0 	cmpltui	r2,r2,2
   16ff8:	1000021e 	bne	r2,zero,17004 <altera_avalon_lcd_16207_write+0x260>
   16ffc:	e13ffc17 	ldw	r4,-16(fp)
   17000:	0016a0c0 	call	16a0c <lcd_scroll_up>
   17004:	e0bffc17 	ldw	r2,-16(fp)
   17008:	10800843 	ldbu	r2,33(r2)
   1700c:	10803fcc 	andi	r2,r2,255
   17010:	10801428 	cmpgeui	r2,r2,80
   17014:	10000d1e 	bne	r2,zero,1704c <altera_avalon_lcd_16207_write+0x2a8>
   17018:	e0bffc17 	ldw	r2,-16(fp)
   1701c:	10800883 	ldbu	r2,34(r2)
   17020:	11003fcc 	andi	r4,r2,255
   17024:	e0bffc17 	ldw	r2,-16(fp)
   17028:	10800843 	ldbu	r2,33(r2)
   1702c:	11403fcc 	andi	r5,r2,255
   17030:	e0fffc17 	ldw	r3,-16(fp)
   17034:	20801924 	muli	r2,r4,100
   17038:	10c5883a 	add	r2,r2,r3
   1703c:	1145883a 	add	r2,r2,r5
   17040:	10c01004 	addi	r3,r2,64
   17044:	e0bff803 	ldbu	r2,-32(fp)
   17048:	18800005 	stb	r2,0(r3)
   1704c:	e0bffc17 	ldw	r2,-16(fp)
   17050:	10800843 	ldbu	r2,33(r2)
   17054:	10800044 	addi	r2,r2,1
   17058:	1007883a 	mov	r3,r2
   1705c:	e0bffc17 	ldw	r2,-16(fp)
   17060:	10c00845 	stb	r3,33(r2)
   17064:	e0bffd17 	ldw	r2,-12(fp)
   17068:	10800044 	addi	r2,r2,1
   1706c:	e0bffd15 	stw	r2,-12(fp)
   17070:	e0fffd17 	ldw	r3,-12(fp)
   17074:	e0bffb17 	ldw	r2,-20(fp)
   17078:	18bf5b36 	bltu	r3,r2,16de8 <altera_avalon_lcd_16207_write+0x44>
   1707c:	00800404 	movi	r2,16
   17080:	e0bff915 	stw	r2,-28(fp)
   17084:	e03ffa15 	stw	zero,-24(fp)
   17088:	00003606 	br	17164 <altera_avalon_lcd_16207_write+0x3c0>
   1708c:	00801404 	movi	r2,80
   17090:	e0bff615 	stw	r2,-40(fp)
   17094:	00001106 	br	170dc <altera_avalon_lcd_16207_write+0x338>
   17098:	e13ffa17 	ldw	r4,-24(fp)
   1709c:	e0bff617 	ldw	r2,-40(fp)
   170a0:	117fffc4 	addi	r5,r2,-1
   170a4:	e0fffc17 	ldw	r3,-16(fp)
   170a8:	20801924 	muli	r2,r4,100
   170ac:	10c5883a 	add	r2,r2,r3
   170b0:	1145883a 	add	r2,r2,r5
   170b4:	10801004 	addi	r2,r2,64
   170b8:	10800003 	ldbu	r2,0(r2)
   170bc:	10803fcc 	andi	r2,r2,255
   170c0:	1080201c 	xori	r2,r2,128
   170c4:	10bfe004 	addi	r2,r2,-128
   170c8:	10800818 	cmpnei	r2,r2,32
   170cc:	1000061e 	bne	r2,zero,170e8 <altera_avalon_lcd_16207_write+0x344>
   170d0:	e0bff617 	ldw	r2,-40(fp)
   170d4:	10bfffc4 	addi	r2,r2,-1
   170d8:	e0bff615 	stw	r2,-40(fp)
   170dc:	e0bff617 	ldw	r2,-40(fp)
   170e0:	10800048 	cmpgei	r2,r2,1
   170e4:	103fec1e 	bne	r2,zero,17098 <altera_avalon_lcd_16207_write+0x2f4>
   170e8:	e0bff617 	ldw	r2,-40(fp)
   170ec:	10800448 	cmpgei	r2,r2,17
   170f0:	1000031e 	bne	r2,zero,17100 <altera_avalon_lcd_16207_write+0x35c>
   170f4:	00800404 	movi	r2,16
   170f8:	e0bff615 	stw	r2,-40(fp)
   170fc:	00000306 	br	1710c <altera_avalon_lcd_16207_write+0x368>
   17100:	e0bff617 	ldw	r2,-40(fp)
   17104:	10800044 	addi	r2,r2,1
   17108:	e0bff615 	stw	r2,-40(fp)
   1710c:	e13ffa17 	ldw	r4,-24(fp)
   17110:	e0bff617 	ldw	r2,-40(fp)
   17114:	100b883a 	mov	r5,r2
   17118:	e0fffc17 	ldw	r3,-16(fp)
   1711c:	20801924 	muli	r2,r4,100
   17120:	10c5883a 	add	r2,r2,r3
   17124:	10802404 	addi	r2,r2,144
   17128:	11400045 	stb	r5,1(r2)
   1712c:	e0fff917 	ldw	r3,-28(fp)
   17130:	e0bff617 	ldw	r2,-40(fp)
   17134:	1880020e 	bge	r3,r2,17140 <altera_avalon_lcd_16207_write+0x39c>
   17138:	e0bff617 	ldw	r2,-40(fp)
   1713c:	e0bff915 	stw	r2,-28(fp)
   17140:	e0bffa17 	ldw	r2,-24(fp)
   17144:	e0fffc17 	ldw	r3,-16(fp)
   17148:	10801924 	muli	r2,r2,100
   1714c:	10c5883a 	add	r2,r2,r3
   17150:	10802404 	addi	r2,r2,144
   17154:	10000085 	stb	zero,2(r2)
   17158:	e0bffa17 	ldw	r2,-24(fp)
   1715c:	10800044 	addi	r2,r2,1
   17160:	e0bffa15 	stw	r2,-24(fp)
   17164:	e0bffa17 	ldw	r2,-24(fp)
   17168:	10800090 	cmplti	r2,r2,2
   1716c:	103fc71e 	bne	r2,zero,1708c <altera_avalon_lcd_16207_write+0x2e8>
   17170:	e0bff917 	ldw	r2,-28(fp)
   17174:	10800448 	cmpgei	r2,r2,17
   17178:	1000031e 	bne	r2,zero,17188 <altera_avalon_lcd_16207_write+0x3e4>
   1717c:	e0bffc17 	ldw	r2,-16(fp)
   17180:	10000985 	stb	zero,38(r2)
   17184:	00002d06 	br	1723c <altera_avalon_lcd_16207_write+0x498>
   17188:	e0bff917 	ldw	r2,-28(fp)
   1718c:	1085883a 	add	r2,r2,r2
   17190:	e0bff915 	stw	r2,-28(fp)
   17194:	e0bff917 	ldw	r2,-28(fp)
   17198:	1007883a 	mov	r3,r2
   1719c:	e0bffc17 	ldw	r2,-16(fp)
   171a0:	10c00985 	stb	r3,38(r2)
   171a4:	e03ffa15 	stw	zero,-24(fp)
   171a8:	00002106 	br	17230 <altera_avalon_lcd_16207_write+0x48c>
   171ac:	e0bffa17 	ldw	r2,-24(fp)
   171b0:	e0fffc17 	ldw	r3,-16(fp)
   171b4:	10801924 	muli	r2,r2,100
   171b8:	10c5883a 	add	r2,r2,r3
   171bc:	10802404 	addi	r2,r2,144
   171c0:	10800043 	ldbu	r2,1(r2)
   171c4:	10803fcc 	andi	r2,r2,255
   171c8:	1080201c 	xori	r2,r2,128
   171cc:	10bfe004 	addi	r2,r2,-128
   171d0:	10800450 	cmplti	r2,r2,17
   171d4:	1000131e 	bne	r2,zero,17224 <altera_avalon_lcd_16207_write+0x480>
   171d8:	e17ffa17 	ldw	r5,-24(fp)
   171dc:	e0bffa17 	ldw	r2,-24(fp)
   171e0:	e0fffc17 	ldw	r3,-16(fp)
   171e4:	10801924 	muli	r2,r2,100
   171e8:	10c5883a 	add	r2,r2,r3
   171ec:	10802404 	addi	r2,r2,144
   171f0:	10800043 	ldbu	r2,1(r2)
   171f4:	10803fcc 	andi	r2,r2,255
   171f8:	1080201c 	xori	r2,r2,128
   171fc:	10bfe004 	addi	r2,r2,-128
   17200:	1006923a 	slli	r3,r2,8
   17204:	e0bff917 	ldw	r2,-28(fp)
   17208:	1885283a 	div	r2,r3,r2
   1720c:	1009883a 	mov	r4,r2
   17210:	e0fffc17 	ldw	r3,-16(fp)
   17214:	28801924 	muli	r2,r5,100
   17218:	10c5883a 	add	r2,r2,r3
   1721c:	10802404 	addi	r2,r2,144
   17220:	11000085 	stb	r4,2(r2)
   17224:	e0bffa17 	ldw	r2,-24(fp)
   17228:	10800044 	addi	r2,r2,1
   1722c:	e0bffa15 	stw	r2,-24(fp)
   17230:	e0bffa17 	ldw	r2,-24(fp)
   17234:	10800090 	cmplti	r2,r2,2
   17238:	103fdc1e 	bne	r2,zero,171ac <altera_avalon_lcd_16207_write+0x408>
   1723c:	e0bffc17 	ldw	r2,-16(fp)
   17240:	10800943 	ldbu	r2,37(r2)
   17244:	10803fcc 	andi	r2,r2,255
   17248:	1080201c 	xori	r2,r2,128
   1724c:	10bfe004 	addi	r2,r2,-128
   17250:	e0bff515 	stw	r2,-44(fp)
   17254:	e13ffc17 	ldw	r4,-16(fp)
   17258:	00168200 	call	16820 <lcd_repaint_screen>
   1725c:	e0bffc17 	ldw	r2,-16(fp)
   17260:	100009c5 	stb	zero,39(r2)
   17264:	e0bffc17 	ldw	r2,-16(fp)
   17268:	10800943 	ldbu	r2,37(r2)
   1726c:	10c03fcc 	andi	r3,r2,255
   17270:	18c0201c 	xori	r3,r3,128
   17274:	18ffe004 	addi	r3,r3,-128
   17278:	e0bff517 	ldw	r2,-44(fp)
   1727c:	18800426 	beq	r3,r2,17290 <altera_avalon_lcd_16207_write+0x4ec>
   17280:	e0fffc17 	ldw	r3,-16(fp)
   17284:	00800044 	movi	r2,1
   17288:	188009c5 	stb	r2,39(r3)
   1728c:	003feb06 	br	1723c <altera_avalon_lcd_16207_write+0x498>
   17290:	e0bffe17 	ldw	r2,-8(fp)
   17294:	e037883a 	mov	sp,fp
   17298:	dfc00117 	ldw	ra,4(sp)
   1729c:	df000017 	ldw	fp,0(sp)
   172a0:	dec00204 	addi	sp,sp,8
   172a4:	f800283a 	ret

000172a8 <alt_lcd_16207_timeout>:
   172a8:	defffc04 	addi	sp,sp,-16
   172ac:	dfc00315 	stw	ra,12(sp)
   172b0:	df000215 	stw	fp,8(sp)
   172b4:	df000204 	addi	fp,sp,8
   172b8:	e13fff15 	stw	r4,-4(fp)
   172bc:	e0bfff17 	ldw	r2,-4(fp)
   172c0:	e0bffe15 	stw	r2,-8(fp)
   172c4:	e0bffe17 	ldw	r2,-8(fp)
   172c8:	10800943 	ldbu	r2,37(r2)
   172cc:	10803fcc 	andi	r2,r2,255
   172d0:	1080201c 	xori	r2,r2,128
   172d4:	10bfe004 	addi	r2,r2,-128
   172d8:	10c00044 	addi	r3,r2,1
   172dc:	e0bffe17 	ldw	r2,-8(fp)
   172e0:	10800983 	ldbu	r2,38(r2)
   172e4:	10803fcc 	andi	r2,r2,255
   172e8:	1080201c 	xori	r2,r2,128
   172ec:	10bfe004 	addi	r2,r2,-128
   172f0:	18800316 	blt	r3,r2,17300 <alt_lcd_16207_timeout+0x58>
   172f4:	e0bffe17 	ldw	r2,-8(fp)
   172f8:	10000945 	stb	zero,37(r2)
   172fc:	00000606 	br	17318 <alt_lcd_16207_timeout+0x70>
   17300:	e0bffe17 	ldw	r2,-8(fp)
   17304:	10800943 	ldbu	r2,37(r2)
   17308:	10800044 	addi	r2,r2,1
   1730c:	1007883a 	mov	r3,r2
   17310:	e0bffe17 	ldw	r2,-8(fp)
   17314:	10c00945 	stb	r3,37(r2)
   17318:	e0bffe17 	ldw	r2,-8(fp)
   1731c:	10800983 	ldbu	r2,38(r2)
   17320:	10803fcc 	andi	r2,r2,255
   17324:	1080201c 	xori	r2,r2,128
   17328:	10bfe004 	addi	r2,r2,-128
   1732c:	10800050 	cmplti	r2,r2,1
   17330:	1000091e 	bne	r2,zero,17358 <alt_lcd_16207_timeout+0xb0>
   17334:	e0bffe17 	ldw	r2,-8(fp)
   17338:	108009c3 	ldbu	r2,39(r2)
   1733c:	10803fcc 	andi	r2,r2,255
   17340:	1080201c 	xori	r2,r2,128
   17344:	10bfe004 	addi	r2,r2,-128
   17348:	1004c03a 	cmpne	r2,r2,zero
   1734c:	1000021e 	bne	r2,zero,17358 <alt_lcd_16207_timeout+0xb0>
   17350:	e13ffe17 	ldw	r4,-8(fp)
   17354:	00168200 	call	16820 <lcd_repaint_screen>
   17358:	e0bffe17 	ldw	r2,-8(fp)
   1735c:	10800717 	ldw	r2,28(r2)
   17360:	e037883a 	mov	sp,fp
   17364:	dfc00117 	ldw	ra,4(sp)
   17368:	df000017 	ldw	fp,0(sp)
   1736c:	dec00204 	addi	sp,sp,8
   17370:	f800283a 	ret

00017374 <altera_avalon_lcd_16207_init>:
   17374:	defffc04 	addi	sp,sp,-16
   17378:	dfc00315 	stw	ra,12(sp)
   1737c:	df000215 	stw	fp,8(sp)
   17380:	df000204 	addi	fp,sp,8
   17384:	e13fff15 	stw	r4,-4(fp)
   17388:	e0bfff17 	ldw	r2,-4(fp)
   1738c:	10800017 	ldw	r2,0(r2)
   17390:	e0bffe15 	stw	r2,-8(fp)
   17394:	e0bfff17 	ldw	r2,-4(fp)
   17398:	10000805 	stb	zero,32(r2)
   1739c:	010ea604 	movi	r4,15000
   173a0:	001a9d00 	call	1a9d0 <usleep>
   173a4:	e0bffe17 	ldw	r2,-8(fp)
   173a8:	1007883a 	mov	r3,r2
   173ac:	00800c04 	movi	r2,48
   173b0:	18800035 	stwio	r2,0(r3)
   173b4:	01040104 	movi	r4,4100
   173b8:	001a9d00 	call	1a9d0 <usleep>
   173bc:	e0bffe17 	ldw	r2,-8(fp)
   173c0:	1007883a 	mov	r3,r2
   173c4:	00800c04 	movi	r2,48
   173c8:	18800035 	stwio	r2,0(r3)
   173cc:	0100fa04 	movi	r4,1000
   173d0:	001a9d00 	call	1a9d0 <usleep>
   173d4:	e0bffe17 	ldw	r2,-8(fp)
   173d8:	1007883a 	mov	r3,r2
   173dc:	00800c04 	movi	r2,48
   173e0:	18800035 	stwio	r2,0(r3)
   173e4:	e13fff17 	ldw	r4,-4(fp)
   173e8:	01400e04 	movi	r5,56
   173ec:	00165d00 	call	165d0 <lcd_write_command>
   173f0:	e13fff17 	ldw	r4,-4(fp)
   173f4:	01400204 	movi	r5,8
   173f8:	00165d00 	call	165d0 <lcd_write_command>
   173fc:	e13fff17 	ldw	r4,-4(fp)
   17400:	001675c0 	call	1675c <lcd_clear_screen>
   17404:	e13fff17 	ldw	r4,-4(fp)
   17408:	01400184 	movi	r5,6
   1740c:	00165d00 	call	165d0 <lcd_write_command>
   17410:	e13fff17 	ldw	r4,-4(fp)
   17414:	01400304 	movi	r5,12
   17418:	00165d00 	call	165d0 <lcd_write_command>
   1741c:	e0ffff17 	ldw	r3,-4(fp)
   17420:	00bfffc4 	movi	r2,-1
   17424:	18800905 	stb	r2,36(r3)
   17428:	e0bfff17 	ldw	r2,-4(fp)
   1742c:	11000a04 	addi	r4,r2,40
   17430:	000b883a 	mov	r5,zero
   17434:	01800204 	movi	r6,8
   17438:	00081140 	call	8114 <memset>
   1743c:	e0bfff17 	ldw	r2,-4(fp)
   17440:	10000945 	stb	zero,37(r2)
   17444:	e0bfff17 	ldw	r2,-4(fp)
   17448:	10000985 	stb	zero,38(r2)
   1744c:	e0bfff17 	ldw	r2,-4(fp)
   17450:	100009c5 	stb	zero,39(r2)
   17454:	00820034 	movhi	r2,2048
   17458:	108a6904 	addi	r2,r2,10660
   1745c:	10800017 	ldw	r2,0(r2)
   17460:	1007883a 	mov	r3,r2
   17464:	00800284 	movi	r2,10
   17468:	1885203a 	divu	r2,r3,r2
   1746c:	1007883a 	mov	r3,r2
   17470:	e0bfff17 	ldw	r2,-4(fp)
   17474:	10c00715 	stw	r3,28(r2)
   17478:	e0bfff17 	ldw	r2,-4(fp)
   1747c:	11000104 	addi	r4,r2,4
   17480:	e0bfff17 	ldw	r2,-4(fp)
   17484:	10800717 	ldw	r2,28(r2)
   17488:	100b883a 	mov	r5,r2
   1748c:	01800074 	movhi	r6,1
   17490:	319caa04 	addi	r6,r6,29352
   17494:	e1ffff17 	ldw	r7,-4(fp)
   17498:	0019f200 	call	19f20 <alt_alarm_start>
   1749c:	e037883a 	mov	sp,fp
   174a0:	dfc00117 	ldw	ra,4(sp)
   174a4:	df000017 	ldw	fp,0(sp)
   174a8:	dec00204 	addi	sp,sp,8
   174ac:	f800283a 	ret

000174b0 <altera_avalon_lcd_16207_write_fd>:
   174b0:	defffa04 	addi	sp,sp,-24
   174b4:	dfc00515 	stw	ra,20(sp)
   174b8:	df000415 	stw	fp,16(sp)
   174bc:	df000404 	addi	fp,sp,16
   174c0:	e13ffd15 	stw	r4,-12(fp)
   174c4:	e17ffe15 	stw	r5,-8(fp)
   174c8:	e1bfff15 	stw	r6,-4(fp)
   174cc:	e0bffd17 	ldw	r2,-12(fp)
   174d0:	10800017 	ldw	r2,0(r2)
   174d4:	e0bffc15 	stw	r2,-16(fp)
   174d8:	e0bffc17 	ldw	r2,-16(fp)
   174dc:	11000a04 	addi	r4,r2,40
   174e0:	e0bffd17 	ldw	r2,-12(fp)
   174e4:	11c00217 	ldw	r7,8(r2)
   174e8:	e17ffe17 	ldw	r5,-8(fp)
   174ec:	e1bfff17 	ldw	r6,-4(fp)
   174f0:	0016da40 	call	16da4 <altera_avalon_lcd_16207_write>
   174f4:	e037883a 	mov	sp,fp
   174f8:	dfc00117 	ldw	ra,4(sp)
   174fc:	df000017 	ldw	fp,0(sp)
   17500:	dec00204 	addi	sp,sp,8
   17504:	f800283a 	ret

00017508 <alt_avalon_timer_sc_irq>:
   17508:	defff904 	addi	sp,sp,-28
   1750c:	dfc00615 	stw	ra,24(sp)
   17510:	df000515 	stw	fp,20(sp)
   17514:	df000504 	addi	fp,sp,20
   17518:	e13ffe15 	stw	r4,-8(fp)
   1751c:	e17fff15 	stw	r5,-4(fp)
   17520:	e0bffe17 	ldw	r2,-8(fp)
   17524:	10000035 	stwio	zero,0(r2)
   17528:	e0bffe17 	ldw	r2,-8(fp)
   1752c:	10800104 	addi	r2,r2,4
   17530:	10800037 	ldwio	r2,0(r2)
   17534:	0005303a 	rdctl	r2,status
   17538:	e0bffc15 	stw	r2,-16(fp)
   1753c:	e0fffc17 	ldw	r3,-16(fp)
   17540:	00bfff84 	movi	r2,-2
   17544:	1884703a 	and	r2,r3,r2
   17548:	1001703a 	wrctl	status,r2
   1754c:	e0bffc17 	ldw	r2,-16(fp)
   17550:	e0bffd15 	stw	r2,-12(fp)
   17554:	001a8c40 	call	1a8c4 <alt_tick>
   17558:	e0bffd17 	ldw	r2,-12(fp)
   1755c:	e0bffb15 	stw	r2,-20(fp)
   17560:	e0bffb17 	ldw	r2,-20(fp)
   17564:	1001703a 	wrctl	status,r2
   17568:	e037883a 	mov	sp,fp
   1756c:	dfc00117 	ldw	ra,4(sp)
   17570:	df000017 	ldw	fp,0(sp)
   17574:	dec00204 	addi	sp,sp,8
   17578:	f800283a 	ret

0001757c <alt_avalon_timer_sc_init>:
   1757c:	defff904 	addi	sp,sp,-28
   17580:	dfc00615 	stw	ra,24(sp)
   17584:	df000515 	stw	fp,20(sp)
   17588:	df000504 	addi	fp,sp,20
   1758c:	e13ffc15 	stw	r4,-16(fp)
   17590:	e17ffd15 	stw	r5,-12(fp)
   17594:	e1bffe15 	stw	r6,-8(fp)
   17598:	e1ffff15 	stw	r7,-4(fp)
   1759c:	e0bfff17 	ldw	r2,-4(fp)
   175a0:	e0bffb15 	stw	r2,-20(fp)
   175a4:	00820034 	movhi	r2,2048
   175a8:	108a6904 	addi	r2,r2,10660
   175ac:	10800017 	ldw	r2,0(r2)
   175b0:	1004c03a 	cmpne	r2,r2,zero
   175b4:	1000041e 	bne	r2,zero,175c8 <alt_avalon_timer_sc_init+0x4c>
   175b8:	00c20034 	movhi	r3,2048
   175bc:	18ca6904 	addi	r3,r3,10660
   175c0:	e0bffb17 	ldw	r2,-20(fp)
   175c4:	18800015 	stw	r2,0(r3)
   175c8:	e0bffc17 	ldw	r2,-16(fp)
   175cc:	10800104 	addi	r2,r2,4
   175d0:	1007883a 	mov	r3,r2
   175d4:	008001c4 	movi	r2,7
   175d8:	18800035 	stwio	r2,0(r3)
   175dc:	e13ffe17 	ldw	r4,-8(fp)
   175e0:	e17ffc17 	ldw	r5,-16(fp)
   175e4:	01800074 	movhi	r6,1
   175e8:	319d4204 	addi	r6,r6,29960
   175ec:	00019140 	call	1914 <alt_irq_register>
   175f0:	e037883a 	mov	sp,fp
   175f4:	dfc00117 	ldw	ra,4(sp)
   175f8:	df000017 	ldw	fp,0(sp)
   175fc:	dec00204 	addi	sp,sp,8
   17600:	f800283a 	ret

00017604 <altera_avalon_uart_read_fd>:
   17604:	defffa04 	addi	sp,sp,-24
   17608:	dfc00515 	stw	ra,20(sp)
   1760c:	df000415 	stw	fp,16(sp)
   17610:	df000404 	addi	fp,sp,16
   17614:	e13ffd15 	stw	r4,-12(fp)
   17618:	e17ffe15 	stw	r5,-8(fp)
   1761c:	e1bfff15 	stw	r6,-4(fp)
   17620:	e0bffd17 	ldw	r2,-12(fp)
   17624:	10800017 	ldw	r2,0(r2)
   17628:	e0bffc15 	stw	r2,-16(fp)
   1762c:	e0bffc17 	ldw	r2,-16(fp)
   17630:	11000a04 	addi	r4,r2,40
   17634:	e0bffd17 	ldw	r2,-12(fp)
   17638:	11c00217 	ldw	r7,8(r2)
   1763c:	e17ffe17 	ldw	r5,-8(fp)
   17640:	e1bfff17 	ldw	r6,-4(fp)
   17644:	0017af80 	call	17af8 <altera_avalon_uart_read>
   17648:	e037883a 	mov	sp,fp
   1764c:	dfc00117 	ldw	ra,4(sp)
   17650:	df000017 	ldw	fp,0(sp)
   17654:	dec00204 	addi	sp,sp,8
   17658:	f800283a 	ret

0001765c <altera_avalon_uart_write_fd>:
   1765c:	defffa04 	addi	sp,sp,-24
   17660:	dfc00515 	stw	ra,20(sp)
   17664:	df000415 	stw	fp,16(sp)
   17668:	df000404 	addi	fp,sp,16
   1766c:	e13ffd15 	stw	r4,-12(fp)
   17670:	e17ffe15 	stw	r5,-8(fp)
   17674:	e1bfff15 	stw	r6,-4(fp)
   17678:	e0bffd17 	ldw	r2,-12(fp)
   1767c:	10800017 	ldw	r2,0(r2)
   17680:	e0bffc15 	stw	r2,-16(fp)
   17684:	e0bffc17 	ldw	r2,-16(fp)
   17688:	11000a04 	addi	r4,r2,40
   1768c:	e0bffd17 	ldw	r2,-12(fp)
   17690:	11c00217 	ldw	r7,8(r2)
   17694:	e17ffe17 	ldw	r5,-8(fp)
   17698:	e1bfff17 	ldw	r6,-4(fp)
   1769c:	0017d880 	call	17d88 <altera_avalon_uart_write>
   176a0:	e037883a 	mov	sp,fp
   176a4:	dfc00117 	ldw	ra,4(sp)
   176a8:	df000017 	ldw	fp,0(sp)
   176ac:	dec00204 	addi	sp,sp,8
   176b0:	f800283a 	ret

000176b4 <altera_avalon_uart_close_fd>:
   176b4:	defffc04 	addi	sp,sp,-16
   176b8:	dfc00315 	stw	ra,12(sp)
   176bc:	df000215 	stw	fp,8(sp)
   176c0:	df000204 	addi	fp,sp,8
   176c4:	e13fff15 	stw	r4,-4(fp)
   176c8:	e0bfff17 	ldw	r2,-4(fp)
   176cc:	10800017 	ldw	r2,0(r2)
   176d0:	e0bffe15 	stw	r2,-8(fp)
   176d4:	e0bffe17 	ldw	r2,-8(fp)
   176d8:	11000a04 	addi	r4,r2,40
   176dc:	e0bfff17 	ldw	r2,-4(fp)
   176e0:	11400217 	ldw	r5,8(r2)
   176e4:	0017a980 	call	17a98 <altera_avalon_uart_close>
   176e8:	e037883a 	mov	sp,fp
   176ec:	dfc00117 	ldw	ra,4(sp)
   176f0:	df000017 	ldw	fp,0(sp)
   176f4:	dec00204 	addi	sp,sp,8
   176f8:	f800283a 	ret

000176fc <altera_avalon_uart_init>:
   176fc:	defff804 	addi	sp,sp,-32
   17700:	dfc00715 	stw	ra,28(sp)
   17704:	df000615 	stw	fp,24(sp)
   17708:	df000604 	addi	fp,sp,24
   1770c:	e13ffc15 	stw	r4,-16(fp)
   17710:	e17ffd15 	stw	r5,-12(fp)
   17714:	e1bffe15 	stw	r6,-8(fp)
   17718:	e0bffc17 	ldw	r2,-16(fp)
   1771c:	10800017 	ldw	r2,0(r2)
   17720:	e0bffb15 	stw	r2,-20(fp)
   17724:	0005883a 	mov	r2,zero
   17728:	1004c03a 	cmpne	r2,r2,zero
   1772c:	1000061e 	bne	r2,zero,17748 <altera_avalon_uart_init+0x4c>
   17730:	0005883a 	mov	r2,zero
   17734:	1004c03a 	cmpne	r2,r2,zero
   17738:	1000031e 	bne	r2,zero,17748 <altera_avalon_uart_init+0x4c>
   1773c:	0005883a 	mov	r2,zero
   17740:	1005003a 	cmpeq	r2,r2,zero
   17744:	1000031e 	bne	r2,zero,17754 <altera_avalon_uart_init+0x58>
   17748:	00800044 	movi	r2,1
   1774c:	e0bfff15 	stw	r2,-4(fp)
   17750:	00000106 	br	17758 <altera_avalon_uart_init+0x5c>
   17754:	e03fff15 	stw	zero,-4(fp)
   17758:	e0bfff17 	ldw	r2,-4(fp)
   1775c:	e0bffa15 	stw	r2,-24(fp)
   17760:	e0bffa17 	ldw	r2,-24(fp)
   17764:	1004c03a 	cmpne	r2,r2,zero
   17768:	10000f1e 	bne	r2,zero,177a8 <altera_avalon_uart_init+0xac>
   1776c:	e0fffc17 	ldw	r3,-16(fp)
   17770:	00832004 	movi	r2,3200
   17774:	18800115 	stw	r2,4(r3)
   17778:	e0bffb17 	ldw	r2,-20(fp)
   1777c:	11000304 	addi	r4,r2,12
   17780:	e0bffc17 	ldw	r2,-16(fp)
   17784:	10800117 	ldw	r2,4(r2)
   17788:	1007883a 	mov	r3,r2
   1778c:	2005883a 	mov	r2,r4
   17790:	10c00035 	stwio	r3,0(r2)
   17794:	e13ffe17 	ldw	r4,-8(fp)
   17798:	e17ffc17 	ldw	r5,-16(fp)
   1779c:	01800074 	movhi	r6,1
   177a0:	319def04 	addi	r6,r6,30652
   177a4:	00019140 	call	1914 <alt_irq_register>
   177a8:	e037883a 	mov	sp,fp
   177ac:	dfc00117 	ldw	ra,4(sp)
   177b0:	df000017 	ldw	fp,0(sp)
   177b4:	dec00204 	addi	sp,sp,8
   177b8:	f800283a 	ret

000177bc <altera_avalon_uart_irq>:
   177bc:	defff904 	addi	sp,sp,-28
   177c0:	dfc00615 	stw	ra,24(sp)
   177c4:	df000515 	stw	fp,20(sp)
   177c8:	df000504 	addi	fp,sp,20
   177cc:	e13ffe15 	stw	r4,-8(fp)
   177d0:	e17fff15 	stw	r5,-4(fp)
   177d4:	e0bffe17 	ldw	r2,-8(fp)
   177d8:	e0bffc15 	stw	r2,-16(fp)
   177dc:	e0bffc17 	ldw	r2,-16(fp)
   177e0:	10800017 	ldw	r2,0(r2)
   177e4:	e0bffb15 	stw	r2,-20(fp)
   177e8:	e0bffb17 	ldw	r2,-20(fp)
   177ec:	10800204 	addi	r2,r2,8
   177f0:	10800037 	ldwio	r2,0(r2)
   177f4:	e0bffd15 	stw	r2,-12(fp)
   177f8:	e0bffb17 	ldw	r2,-20(fp)
   177fc:	10800204 	addi	r2,r2,8
   17800:	10000035 	stwio	zero,0(r2)
   17804:	e0bffb17 	ldw	r2,-20(fp)
   17808:	10800204 	addi	r2,r2,8
   1780c:	10800037 	ldwio	r2,0(r2)
   17810:	e0bffd17 	ldw	r2,-12(fp)
   17814:	1080200c 	andi	r2,r2,128
   17818:	1005003a 	cmpeq	r2,r2,zero
   1781c:	1000031e 	bne	r2,zero,1782c <altera_avalon_uart_irq+0x70>
   17820:	e13ffc17 	ldw	r4,-16(fp)
   17824:	e17ffd17 	ldw	r5,-12(fp)
   17828:	001785c0 	call	1785c <altera_avalon_uart_rxirq>
   1782c:	e0bffd17 	ldw	r2,-12(fp)
   17830:	1081100c 	andi	r2,r2,1088
   17834:	1005003a 	cmpeq	r2,r2,zero
   17838:	1000031e 	bne	r2,zero,17848 <altera_avalon_uart_irq+0x8c>
   1783c:	e13ffc17 	ldw	r4,-16(fp)
   17840:	e17ffd17 	ldw	r5,-12(fp)
   17844:	001793c0 	call	1793c <altera_avalon_uart_txirq>
   17848:	e037883a 	mov	sp,fp
   1784c:	dfc00117 	ldw	ra,4(sp)
   17850:	df000017 	ldw	fp,0(sp)
   17854:	dec00204 	addi	sp,sp,8
   17858:	f800283a 	ret

0001785c <altera_avalon_uart_rxirq>:
   1785c:	defffc04 	addi	sp,sp,-16
   17860:	df000315 	stw	fp,12(sp)
   17864:	df000304 	addi	fp,sp,12
   17868:	e13ffe15 	stw	r4,-8(fp)
   1786c:	e17fff15 	stw	r5,-4(fp)
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	108000cc 	andi	r2,r2,3
   17878:	1004c03a 	cmpne	r2,r2,zero
   1787c:	10002b1e 	bne	r2,zero,1792c <altera_avalon_uart_rxirq+0xd0>
   17880:	e0bffe17 	ldw	r2,-8(fp)
   17884:	10800317 	ldw	r2,12(r2)
   17888:	e0bffe17 	ldw	r2,-8(fp)
   1788c:	10800317 	ldw	r2,12(r2)
   17890:	10800044 	addi	r2,r2,1
   17894:	10800fcc 	andi	r2,r2,63
   17898:	e0bffd15 	stw	r2,-12(fp)
   1789c:	e0bffe17 	ldw	r2,-8(fp)
   178a0:	11000317 	ldw	r4,12(r2)
   178a4:	e0bffe17 	ldw	r2,-8(fp)
   178a8:	10800017 	ldw	r2,0(r2)
   178ac:	10800037 	ldwio	r2,0(r2)
   178b0:	1007883a 	mov	r3,r2
   178b4:	e0bffe17 	ldw	r2,-8(fp)
   178b8:	2085883a 	add	r2,r4,r2
   178bc:	10800704 	addi	r2,r2,28
   178c0:	10c00005 	stb	r3,0(r2)
   178c4:	e0fffe17 	ldw	r3,-8(fp)
   178c8:	e0bffd17 	ldw	r2,-12(fp)
   178cc:	18800315 	stw	r2,12(r3)
   178d0:	e0bffe17 	ldw	r2,-8(fp)
   178d4:	10800317 	ldw	r2,12(r2)
   178d8:	10800044 	addi	r2,r2,1
   178dc:	10800fcc 	andi	r2,r2,63
   178e0:	e0bffd15 	stw	r2,-12(fp)
   178e4:	e0bffe17 	ldw	r2,-8(fp)
   178e8:	10c00217 	ldw	r3,8(r2)
   178ec:	e0bffd17 	ldw	r2,-12(fp)
   178f0:	18800e1e 	bne	r3,r2,1792c <altera_avalon_uart_rxirq+0xd0>
   178f4:	e0bffe17 	ldw	r2,-8(fp)
   178f8:	10c00117 	ldw	r3,4(r2)
   178fc:	00bfdfc4 	movi	r2,-129
   17900:	1886703a 	and	r3,r3,r2
   17904:	e0bffe17 	ldw	r2,-8(fp)
   17908:	10c00115 	stw	r3,4(r2)
   1790c:	e0bffe17 	ldw	r2,-8(fp)
   17910:	10800017 	ldw	r2,0(r2)
   17914:	11000304 	addi	r4,r2,12
   17918:	e0bffe17 	ldw	r2,-8(fp)
   1791c:	10800117 	ldw	r2,4(r2)
   17920:	1007883a 	mov	r3,r2
   17924:	2005883a 	mov	r2,r4
   17928:	10c00035 	stwio	r3,0(r2)
   1792c:	e037883a 	mov	sp,fp
   17930:	df000017 	ldw	fp,0(sp)
   17934:	dec00104 	addi	sp,sp,4
   17938:	f800283a 	ret

0001793c <altera_avalon_uart_txirq>:
   1793c:	defffd04 	addi	sp,sp,-12
   17940:	df000215 	stw	fp,8(sp)
   17944:	df000204 	addi	fp,sp,8
   17948:	e13ffe15 	stw	r4,-8(fp)
   1794c:	e17fff15 	stw	r5,-4(fp)
   17950:	e0bffe17 	ldw	r2,-8(fp)
   17954:	10c00417 	ldw	r3,16(r2)
   17958:	e0bffe17 	ldw	r2,-8(fp)
   1795c:	10800517 	ldw	r2,20(r2)
   17960:	18803626 	beq	r3,r2,17a3c <altera_avalon_uart_txirq+0x100>
   17964:	e0bffe17 	ldw	r2,-8(fp)
   17968:	10800617 	ldw	r2,24(r2)
   1796c:	1080008c 	andi	r2,r2,2
   17970:	1005003a 	cmpeq	r2,r2,zero
   17974:	1000041e 	bne	r2,zero,17988 <altera_avalon_uart_txirq+0x4c>
   17978:	e0bfff17 	ldw	r2,-4(fp)
   1797c:	1082000c 	andi	r2,r2,2048
   17980:	1005003a 	cmpeq	r2,r2,zero
   17984:	10001e1e 	bne	r2,zero,17a00 <altera_avalon_uart_txirq+0xc4>
   17988:	e0bffe17 	ldw	r2,-8(fp)
   1798c:	10800417 	ldw	r2,16(r2)
   17990:	e0bffe17 	ldw	r2,-8(fp)
   17994:	10800017 	ldw	r2,0(r2)
   17998:	11000104 	addi	r4,r2,4
   1799c:	e0bffe17 	ldw	r2,-8(fp)
   179a0:	10c00417 	ldw	r3,16(r2)
   179a4:	e0bffe17 	ldw	r2,-8(fp)
   179a8:	1885883a 	add	r2,r3,r2
   179ac:	10801704 	addi	r2,r2,92
   179b0:	10800003 	ldbu	r2,0(r2)
   179b4:	10c03fcc 	andi	r3,r2,255
   179b8:	2005883a 	mov	r2,r4
   179bc:	10c00035 	stwio	r3,0(r2)
   179c0:	e0bffe17 	ldw	r2,-8(fp)
   179c4:	10800417 	ldw	r2,16(r2)
   179c8:	10c00044 	addi	r3,r2,1
   179cc:	e0bffe17 	ldw	r2,-8(fp)
   179d0:	10c00415 	stw	r3,16(r2)
   179d4:	e0bffe17 	ldw	r2,-8(fp)
   179d8:	10800417 	ldw	r2,16(r2)
   179dc:	10c00fcc 	andi	r3,r2,63
   179e0:	e0bffe17 	ldw	r2,-8(fp)
   179e4:	10c00415 	stw	r3,16(r2)
   179e8:	e0bffe17 	ldw	r2,-8(fp)
   179ec:	10800117 	ldw	r2,4(r2)
   179f0:	10c01014 	ori	r3,r2,64
   179f4:	e0bffe17 	ldw	r2,-8(fp)
   179f8:	10c00115 	stw	r3,4(r2)
   179fc:	00000f06 	br	17a3c <altera_avalon_uart_txirq+0x100>
   17a00:	e0bffe17 	ldw	r2,-8(fp)
   17a04:	10800017 	ldw	r2,0(r2)
   17a08:	10800204 	addi	r2,r2,8
   17a0c:	10800037 	ldwio	r2,0(r2)
   17a10:	e0bfff15 	stw	r2,-4(fp)
   17a14:	e0bfff17 	ldw	r2,-4(fp)
   17a18:	1082000c 	andi	r2,r2,2048
   17a1c:	1004c03a 	cmpne	r2,r2,zero
   17a20:	1000061e 	bne	r2,zero,17a3c <altera_avalon_uart_txirq+0x100>
   17a24:	e0bffe17 	ldw	r2,-8(fp)
   17a28:	10c00117 	ldw	r3,4(r2)
   17a2c:	00bfefc4 	movi	r2,-65
   17a30:	1886703a 	and	r3,r3,r2
   17a34:	e0bffe17 	ldw	r2,-8(fp)
   17a38:	10c00115 	stw	r3,4(r2)
   17a3c:	e0bffe17 	ldw	r2,-8(fp)
   17a40:	10c00417 	ldw	r3,16(r2)
   17a44:	e0bffe17 	ldw	r2,-8(fp)
   17a48:	10800517 	ldw	r2,20(r2)
   17a4c:	1880061e 	bne	r3,r2,17a68 <altera_avalon_uart_txirq+0x12c>
   17a50:	e0bffe17 	ldw	r2,-8(fp)
   17a54:	10c00117 	ldw	r3,4(r2)
   17a58:	00beefc4 	movi	r2,-1089
   17a5c:	1886703a 	and	r3,r3,r2
   17a60:	e0bffe17 	ldw	r2,-8(fp)
   17a64:	10c00115 	stw	r3,4(r2)
   17a68:	e0bffe17 	ldw	r2,-8(fp)
   17a6c:	10800017 	ldw	r2,0(r2)
   17a70:	11000304 	addi	r4,r2,12
   17a74:	e0bffe17 	ldw	r2,-8(fp)
   17a78:	10800117 	ldw	r2,4(r2)
   17a7c:	1007883a 	mov	r3,r2
   17a80:	2005883a 	mov	r2,r4
   17a84:	10c00035 	stwio	r3,0(r2)
   17a88:	e037883a 	mov	sp,fp
   17a8c:	df000017 	ldw	fp,0(sp)
   17a90:	dec00104 	addi	sp,sp,4
   17a94:	f800283a 	ret

00017a98 <altera_avalon_uart_close>:
   17a98:	defffc04 	addi	sp,sp,-16
   17a9c:	df000315 	stw	fp,12(sp)
   17aa0:	df000304 	addi	fp,sp,12
   17aa4:	e13ffd15 	stw	r4,-12(fp)
   17aa8:	e17ffe15 	stw	r5,-8(fp)
   17aac:	00000706 	br	17acc <altera_avalon_uart_close+0x34>
   17ab0:	e0bffe17 	ldw	r2,-8(fp)
   17ab4:	1090000c 	andi	r2,r2,16384
   17ab8:	1005003a 	cmpeq	r2,r2,zero
   17abc:	1000031e 	bne	r2,zero,17acc <altera_avalon_uart_close+0x34>
   17ac0:	00bffd44 	movi	r2,-11
   17ac4:	e0bfff15 	stw	r2,-4(fp)
   17ac8:	00000606 	br	17ae4 <altera_avalon_uart_close+0x4c>
   17acc:	e0bffd17 	ldw	r2,-12(fp)
   17ad0:	10c00417 	ldw	r3,16(r2)
   17ad4:	e0bffd17 	ldw	r2,-12(fp)
   17ad8:	10800517 	ldw	r2,20(r2)
   17adc:	18bff41e 	bne	r3,r2,17ab0 <altera_avalon_uart_close+0x18>
   17ae0:	e03fff15 	stw	zero,-4(fp)
   17ae4:	e0bfff17 	ldw	r2,-4(fp)
   17ae8:	e037883a 	mov	sp,fp
   17aec:	df000017 	ldw	fp,0(sp)
   17af0:	dec00104 	addi	sp,sp,4
   17af4:	f800283a 	ret

00017af8 <altera_avalon_uart_read>:
   17af8:	defff004 	addi	sp,sp,-64
   17afc:	dfc00f15 	stw	ra,60(sp)
   17b00:	df000e15 	stw	fp,56(sp)
   17b04:	df000e04 	addi	fp,sp,56
   17b08:	e13ffb15 	stw	r4,-20(fp)
   17b0c:	e17ffc15 	stw	r5,-16(fp)
   17b10:	e1bffd15 	stw	r6,-12(fp)
   17b14:	e1fffe15 	stw	r7,-8(fp)
   17b18:	e03ff705 	stb	zero,-36(fp)
   17b1c:	e03ff615 	stw	zero,-40(fp)
   17b20:	e0bffe17 	ldw	r2,-8(fp)
   17b24:	1090000c 	andi	r2,r2,16384
   17b28:	1005003a 	cmpeq	r2,r2,zero
   17b2c:	e0bff915 	stw	r2,-28(fp)
   17b30:	e0bffb17 	ldw	r2,-20(fp)
   17b34:	10800217 	ldw	r2,8(r2)
   17b38:	10800044 	addi	r2,r2,1
   17b3c:	10800fcc 	andi	r2,r2,63
   17b40:	e0bff815 	stw	r2,-32(fp)
   17b44:	00001906 	br	17bac <altera_avalon_uart_read+0xb4>
   17b48:	e0bff617 	ldw	r2,-40(fp)
   17b4c:	10800044 	addi	r2,r2,1
   17b50:	e0bff615 	stw	r2,-40(fp)
   17b54:	e0bffb17 	ldw	r2,-20(fp)
   17b58:	10c00217 	ldw	r3,8(r2)
   17b5c:	e0bffb17 	ldw	r2,-20(fp)
   17b60:	1885883a 	add	r2,r3,r2
   17b64:	10800704 	addi	r2,r2,28
   17b68:	10800003 	ldbu	r2,0(r2)
   17b6c:	1007883a 	mov	r3,r2
   17b70:	e0bffc17 	ldw	r2,-16(fp)
   17b74:	10c00005 	stb	r3,0(r2)
   17b78:	e0bffc17 	ldw	r2,-16(fp)
   17b7c:	10800044 	addi	r2,r2,1
   17b80:	e0bffc15 	stw	r2,-16(fp)
   17b84:	e0bffb17 	ldw	r2,-20(fp)
   17b88:	10800217 	ldw	r2,8(r2)
   17b8c:	10c00044 	addi	r3,r2,1
   17b90:	e0bffb17 	ldw	r2,-20(fp)
   17b94:	10c00215 	stw	r3,8(r2)
   17b98:	e0bffb17 	ldw	r2,-20(fp)
   17b9c:	10800217 	ldw	r2,8(r2)
   17ba0:	10c00fcc 	andi	r3,r2,63
   17ba4:	e0bffb17 	ldw	r2,-20(fp)
   17ba8:	10c00215 	stw	r3,8(r2)
   17bac:	e0fff617 	ldw	r3,-40(fp)
   17bb0:	e0bffd17 	ldw	r2,-12(fp)
   17bb4:	1880050e 	bge	r3,r2,17bcc <altera_avalon_uart_read+0xd4>
   17bb8:	e0bffb17 	ldw	r2,-20(fp)
   17bbc:	10c00217 	ldw	r3,8(r2)
   17bc0:	e0bffb17 	ldw	r2,-20(fp)
   17bc4:	10800317 	ldw	r2,12(r2)
   17bc8:	18bfdf1e 	bne	r3,r2,17b48 <altera_avalon_uart_read+0x50>
   17bcc:	e0bff617 	ldw	r2,-40(fp)
   17bd0:	1004c03a 	cmpne	r2,r2,zero
   17bd4:	1000271e 	bne	r2,zero,17c74 <altera_avalon_uart_read+0x17c>
   17bd8:	e0bffb17 	ldw	r2,-20(fp)
   17bdc:	10c00217 	ldw	r3,8(r2)
   17be0:	e0bffb17 	ldw	r2,-20(fp)
   17be4:	10800317 	ldw	r2,12(r2)
   17be8:	1880221e 	bne	r3,r2,17c74 <altera_avalon_uart_read+0x17c>
   17bec:	e0bff917 	ldw	r2,-28(fp)
   17bf0:	1004c03a 	cmpne	r2,r2,zero
   17bf4:	1000061e 	bne	r2,zero,17c10 <altera_avalon_uart_read+0x118>
   17bf8:	0017d280 	call	17d28 <alt_get_errno>
   17bfc:	00c002c4 	movi	r3,11
   17c00:	10c00015 	stw	r3,0(r2)
   17c04:	00800044 	movi	r2,1
   17c08:	e0bff705 	stb	r2,-36(fp)
   17c0c:	00001f06 	br	17c8c <altera_avalon_uart_read+0x194>
   17c10:	0005303a 	rdctl	r2,status
   17c14:	e0bff515 	stw	r2,-44(fp)
   17c18:	e0fff517 	ldw	r3,-44(fp)
   17c1c:	00bfff84 	movi	r2,-2
   17c20:	1884703a 	and	r2,r3,r2
   17c24:	1001703a 	wrctl	status,r2
   17c28:	e0bff517 	ldw	r2,-44(fp)
   17c2c:	e0bffa15 	stw	r2,-24(fp)
   17c30:	e0bffb17 	ldw	r2,-20(fp)
   17c34:	10800117 	ldw	r2,4(r2)
   17c38:	10c02014 	ori	r3,r2,128
   17c3c:	e0bffb17 	ldw	r2,-20(fp)
   17c40:	10c00115 	stw	r3,4(r2)
   17c44:	e0bffb17 	ldw	r2,-20(fp)
   17c48:	10800017 	ldw	r2,0(r2)
   17c4c:	11000304 	addi	r4,r2,12
   17c50:	e0bffb17 	ldw	r2,-20(fp)
   17c54:	10800117 	ldw	r2,4(r2)
   17c58:	1007883a 	mov	r3,r2
   17c5c:	2005883a 	mov	r2,r4
   17c60:	10c00035 	stwio	r3,0(r2)
   17c64:	e0bffa17 	ldw	r2,-24(fp)
   17c68:	e0bff415 	stw	r2,-48(fp)
   17c6c:	e0bff417 	ldw	r2,-48(fp)
   17c70:	1001703a 	wrctl	status,r2
   17c74:	e0bff617 	ldw	r2,-40(fp)
   17c78:	1004c03a 	cmpne	r2,r2,zero
   17c7c:	1000031e 	bne	r2,zero,17c8c <altera_avalon_uart_read+0x194>
   17c80:	e0bffd17 	ldw	r2,-12(fp)
   17c84:	1004c03a 	cmpne	r2,r2,zero
   17c88:	103fc81e 	bne	r2,zero,17bac <altera_avalon_uart_read+0xb4>
   17c8c:	0005303a 	rdctl	r2,status
   17c90:	e0bff315 	stw	r2,-52(fp)
   17c94:	e0fff317 	ldw	r3,-52(fp)
   17c98:	00bfff84 	movi	r2,-2
   17c9c:	1884703a 	and	r2,r3,r2
   17ca0:	1001703a 	wrctl	status,r2
   17ca4:	e0bff317 	ldw	r2,-52(fp)
   17ca8:	e0bffa15 	stw	r2,-24(fp)
   17cac:	e0bffb17 	ldw	r2,-20(fp)
   17cb0:	10800117 	ldw	r2,4(r2)
   17cb4:	10c02014 	ori	r3,r2,128
   17cb8:	e0bffb17 	ldw	r2,-20(fp)
   17cbc:	10c00115 	stw	r3,4(r2)
   17cc0:	e0bffb17 	ldw	r2,-20(fp)
   17cc4:	10800017 	ldw	r2,0(r2)
   17cc8:	11000304 	addi	r4,r2,12
   17ccc:	e0bffb17 	ldw	r2,-20(fp)
   17cd0:	10800117 	ldw	r2,4(r2)
   17cd4:	1007883a 	mov	r3,r2
   17cd8:	2005883a 	mov	r2,r4
   17cdc:	10c00035 	stwio	r3,0(r2)
   17ce0:	e0bffa17 	ldw	r2,-24(fp)
   17ce4:	e0bff215 	stw	r2,-56(fp)
   17ce8:	e0bff217 	ldw	r2,-56(fp)
   17cec:	1001703a 	wrctl	status,r2
   17cf0:	e0bff703 	ldbu	r2,-36(fp)
   17cf4:	1005003a 	cmpeq	r2,r2,zero
   17cf8:	1000031e 	bne	r2,zero,17d08 <altera_avalon_uart_read+0x210>
   17cfc:	00bffd04 	movi	r2,-12
   17d00:	e0bfff15 	stw	r2,-4(fp)
   17d04:	00000206 	br	17d10 <altera_avalon_uart_read+0x218>
   17d08:	e0bff617 	ldw	r2,-40(fp)
   17d0c:	e0bfff15 	stw	r2,-4(fp)
   17d10:	e0bfff17 	ldw	r2,-4(fp)
   17d14:	e037883a 	mov	sp,fp
   17d18:	dfc00117 	ldw	ra,4(sp)
   17d1c:	df000017 	ldw	fp,0(sp)
   17d20:	dec00204 	addi	sp,sp,8
   17d24:	f800283a 	ret

00017d28 <alt_get_errno>:
   17d28:	defffd04 	addi	sp,sp,-12
   17d2c:	dfc00215 	stw	ra,8(sp)
   17d30:	df000115 	stw	fp,4(sp)
   17d34:	df000104 	addi	fp,sp,4
   17d38:	00820034 	movhi	r2,2048
   17d3c:	108a2a04 	addi	r2,r2,10408
   17d40:	10800017 	ldw	r2,0(r2)
   17d44:	1005003a 	cmpeq	r2,r2,zero
   17d48:	1000061e 	bne	r2,zero,17d64 <alt_get_errno+0x3c>
   17d4c:	00820034 	movhi	r2,2048
   17d50:	108a2a04 	addi	r2,r2,10408
   17d54:	10800017 	ldw	r2,0(r2)
   17d58:	103ee83a 	callr	r2
   17d5c:	e0bfff15 	stw	r2,-4(fp)
   17d60:	00000306 	br	17d70 <alt_get_errno+0x48>
   17d64:	00820034 	movhi	r2,2048
   17d68:	108a6404 	addi	r2,r2,10640
   17d6c:	e0bfff15 	stw	r2,-4(fp)
   17d70:	e0bfff17 	ldw	r2,-4(fp)
   17d74:	e037883a 	mov	sp,fp
   17d78:	dfc00117 	ldw	ra,4(sp)
   17d7c:	df000017 	ldw	fp,0(sp)
   17d80:	dec00204 	addi	sp,sp,8
   17d84:	f800283a 	ret

00017d88 <altera_avalon_uart_write>:
   17d88:	defff204 	addi	sp,sp,-56
   17d8c:	dfc00d15 	stw	ra,52(sp)
   17d90:	df000c15 	stw	fp,48(sp)
   17d94:	df000c04 	addi	fp,sp,48
   17d98:	e13ffc15 	stw	r4,-16(fp)
   17d9c:	e17ffd15 	stw	r5,-12(fp)
   17da0:	e1bffe15 	stw	r6,-8(fp)
   17da4:	e1ffff15 	stw	r7,-4(fp)
   17da8:	e0bffe17 	ldw	r2,-8(fp)
   17dac:	e0bff815 	stw	r2,-32(fp)
   17db0:	e0bfff17 	ldw	r2,-4(fp)
   17db4:	1090000c 	andi	r2,r2,16384
   17db8:	e0bffa15 	stw	r2,-24(fp)
   17dbc:	00004006 	br	17ec0 <altera_avalon_uart_write+0x138>
   17dc0:	e0bffc17 	ldw	r2,-16(fp)
   17dc4:	10800517 	ldw	r2,20(r2)
   17dc8:	10800044 	addi	r2,r2,1
   17dcc:	10800fcc 	andi	r2,r2,63
   17dd0:	e0bff915 	stw	r2,-28(fp)
   17dd4:	e0bffc17 	ldw	r2,-16(fp)
   17dd8:	10c00417 	ldw	r3,16(r2)
   17ddc:	e0bff917 	ldw	r2,-28(fp)
   17de0:	1880251e 	bne	r3,r2,17e78 <altera_avalon_uart_write+0xf0>
   17de4:	e0bffa17 	ldw	r2,-24(fp)
   17de8:	1005003a 	cmpeq	r2,r2,zero
   17dec:	1000051e 	bne	r2,zero,17e04 <altera_avalon_uart_write+0x7c>
   17df0:	0017f500 	call	17f50 <alt_get_errno>
   17df4:	1007883a 	mov	r3,r2
   17df8:	008002c4 	movi	r2,11
   17dfc:	18800015 	stw	r2,0(r3)
   17e00:	00003206 	br	17ecc <altera_avalon_uart_write+0x144>
   17e04:	0005303a 	rdctl	r2,status
   17e08:	e0bff715 	stw	r2,-36(fp)
   17e0c:	e0fff717 	ldw	r3,-36(fp)
   17e10:	00bfff84 	movi	r2,-2
   17e14:	1884703a 	and	r2,r3,r2
   17e18:	1001703a 	wrctl	status,r2
   17e1c:	e0bff717 	ldw	r2,-36(fp)
   17e20:	e0bffb15 	stw	r2,-20(fp)
   17e24:	e0bffc17 	ldw	r2,-16(fp)
   17e28:	10800117 	ldw	r2,4(r2)
   17e2c:	10c11014 	ori	r3,r2,1088
   17e30:	e0bffc17 	ldw	r2,-16(fp)
   17e34:	10c00115 	stw	r3,4(r2)
   17e38:	e0bffc17 	ldw	r2,-16(fp)
   17e3c:	10800017 	ldw	r2,0(r2)
   17e40:	11000304 	addi	r4,r2,12
   17e44:	e0bffc17 	ldw	r2,-16(fp)
   17e48:	10800117 	ldw	r2,4(r2)
   17e4c:	1007883a 	mov	r3,r2
   17e50:	2005883a 	mov	r2,r4
   17e54:	10c00035 	stwio	r3,0(r2)
   17e58:	e0bffb17 	ldw	r2,-20(fp)
   17e5c:	e0bff615 	stw	r2,-40(fp)
   17e60:	e0bff617 	ldw	r2,-40(fp)
   17e64:	1001703a 	wrctl	status,r2
   17e68:	e0bffc17 	ldw	r2,-16(fp)
   17e6c:	10c00417 	ldw	r3,16(r2)
   17e70:	e0bff917 	ldw	r2,-28(fp)
   17e74:	18bffc26 	beq	r3,r2,17e68 <altera_avalon_uart_write+0xe0>
   17e78:	e0bff817 	ldw	r2,-32(fp)
   17e7c:	10bfffc4 	addi	r2,r2,-1
   17e80:	e0bff815 	stw	r2,-32(fp)
   17e84:	e0bffc17 	ldw	r2,-16(fp)
   17e88:	10c00517 	ldw	r3,20(r2)
   17e8c:	e0bffd17 	ldw	r2,-12(fp)
   17e90:	10800003 	ldbu	r2,0(r2)
   17e94:	1009883a 	mov	r4,r2
   17e98:	e0bffc17 	ldw	r2,-16(fp)
   17e9c:	1885883a 	add	r2,r3,r2
   17ea0:	10801704 	addi	r2,r2,92
   17ea4:	11000005 	stb	r4,0(r2)
   17ea8:	e0bffd17 	ldw	r2,-12(fp)
   17eac:	10800044 	addi	r2,r2,1
   17eb0:	e0bffd15 	stw	r2,-12(fp)
   17eb4:	e0fffc17 	ldw	r3,-16(fp)
   17eb8:	e0bff917 	ldw	r2,-28(fp)
   17ebc:	18800515 	stw	r2,20(r3)
   17ec0:	e0bff817 	ldw	r2,-32(fp)
   17ec4:	1004c03a 	cmpne	r2,r2,zero
   17ec8:	103fbd1e 	bne	r2,zero,17dc0 <altera_avalon_uart_write+0x38>
   17ecc:	0005303a 	rdctl	r2,status
   17ed0:	e0bff515 	stw	r2,-44(fp)
   17ed4:	e0fff517 	ldw	r3,-44(fp)
   17ed8:	00bfff84 	movi	r2,-2
   17edc:	1884703a 	and	r2,r3,r2
   17ee0:	1001703a 	wrctl	status,r2
   17ee4:	e0bff517 	ldw	r2,-44(fp)
   17ee8:	e0bffb15 	stw	r2,-20(fp)
   17eec:	e0bffc17 	ldw	r2,-16(fp)
   17ef0:	10800117 	ldw	r2,4(r2)
   17ef4:	10c11014 	ori	r3,r2,1088
   17ef8:	e0bffc17 	ldw	r2,-16(fp)
   17efc:	10c00115 	stw	r3,4(r2)
   17f00:	e0bffc17 	ldw	r2,-16(fp)
   17f04:	10800017 	ldw	r2,0(r2)
   17f08:	11000304 	addi	r4,r2,12
   17f0c:	e0bffc17 	ldw	r2,-16(fp)
   17f10:	10800117 	ldw	r2,4(r2)
   17f14:	1007883a 	mov	r3,r2
   17f18:	2005883a 	mov	r2,r4
   17f1c:	10c00035 	stwio	r3,0(r2)
   17f20:	e0bffb17 	ldw	r2,-20(fp)
   17f24:	e0bff415 	stw	r2,-48(fp)
   17f28:	e0bff417 	ldw	r2,-48(fp)
   17f2c:	1001703a 	wrctl	status,r2
   17f30:	e0fffe17 	ldw	r3,-8(fp)
   17f34:	e0bff817 	ldw	r2,-32(fp)
   17f38:	1885c83a 	sub	r2,r3,r2
   17f3c:	e037883a 	mov	sp,fp
   17f40:	dfc00117 	ldw	ra,4(sp)
   17f44:	df000017 	ldw	fp,0(sp)
   17f48:	dec00204 	addi	sp,sp,8
   17f4c:	f800283a 	ret

00017f50 <alt_get_errno>:
   17f50:	defffd04 	addi	sp,sp,-12
   17f54:	dfc00215 	stw	ra,8(sp)
   17f58:	df000115 	stw	fp,4(sp)
   17f5c:	df000104 	addi	fp,sp,4
   17f60:	00820034 	movhi	r2,2048
   17f64:	108a2a04 	addi	r2,r2,10408
   17f68:	10800017 	ldw	r2,0(r2)
   17f6c:	1005003a 	cmpeq	r2,r2,zero
   17f70:	1000061e 	bne	r2,zero,17f8c <alt_get_errno+0x3c>
   17f74:	00820034 	movhi	r2,2048
   17f78:	108a2a04 	addi	r2,r2,10408
   17f7c:	10800017 	ldw	r2,0(r2)
   17f80:	103ee83a 	callr	r2
   17f84:	e0bfff15 	stw	r2,-4(fp)
   17f88:	00000306 	br	17f98 <alt_get_errno+0x48>
   17f8c:	00820034 	movhi	r2,2048
   17f90:	108a6404 	addi	r2,r2,10640
   17f94:	e0bfff15 	stw	r2,-4(fp)
   17f98:	e0bfff17 	ldw	r2,-4(fp)
   17f9c:	e037883a 	mov	sp,fp
   17fa0:	dfc00117 	ldw	ra,4(sp)
   17fa4:	df000017 	ldw	fp,0(sp)
   17fa8:	dec00204 	addi	sp,sp,8
   17fac:	f800283a 	ret

00017fb0 <read_RI_bit>:
   17fb0:	defffd04 	addi	sp,sp,-12
   17fb4:	df000215 	stw	fp,8(sp)
   17fb8:	df000204 	addi	fp,sp,8
   17fbc:	e13fff15 	stw	r4,-4(fp)
   17fc0:	e0bfff17 	ldw	r2,-4(fp)
   17fc4:	1080400c 	andi	r2,r2,256
   17fc8:	1004d23a 	srli	r2,r2,8
   17fcc:	e0bffe05 	stb	r2,-8(fp)
   17fd0:	e0bffe03 	ldbu	r2,-8(fp)
   17fd4:	e037883a 	mov	sp,fp
   17fd8:	df000017 	ldw	fp,0(sp)
   17fdc:	dec00104 	addi	sp,sp,4
   17fe0:	f800283a 	ret

00017fe4 <read_RE_bit>:
   17fe4:	defffd04 	addi	sp,sp,-12
   17fe8:	df000215 	stw	fp,8(sp)
   17fec:	df000204 	addi	fp,sp,8
   17ff0:	e13fff15 	stw	r4,-4(fp)
   17ff4:	e0bfff17 	ldw	r2,-4(fp)
   17ff8:	1080004c 	andi	r2,r2,1
   17ffc:	e0bffe05 	stb	r2,-8(fp)
   18000:	e0bffe03 	ldbu	r2,-8(fp)
   18004:	e037883a 	mov	sp,fp
   18008:	df000017 	ldw	fp,0(sp)
   1800c:	dec00104 	addi	sp,sp,4
   18010:	f800283a 	ret

00018014 <read_CE_bit>:
   18014:	defffd04 	addi	sp,sp,-12
   18018:	df000215 	stw	fp,8(sp)
   1801c:	df000204 	addi	fp,sp,8
   18020:	e13fff15 	stw	r4,-4(fp)
   18024:	e0bfff17 	ldw	r2,-4(fp)
   18028:	1081000c 	andi	r2,r2,1024
   1802c:	1004d2ba 	srli	r2,r2,10
   18030:	e0bffe05 	stb	r2,-8(fp)
   18034:	e0bffe03 	ldbu	r2,-8(fp)
   18038:	e037883a 	mov	sp,fp
   1803c:	df000017 	ldw	fp,0(sp)
   18040:	dec00104 	addi	sp,sp,4
   18044:	f800283a 	ret

00018048 <read_num_bytes_available>:
   18048:	defffd04 	addi	sp,sp,-12
   1804c:	df000215 	stw	fp,8(sp)
   18050:	df000204 	addi	fp,sp,8
   18054:	e13fff15 	stw	r4,-4(fp)
   18058:	e0bfff17 	ldw	r2,-4(fp)
   1805c:	10bfffec 	andhi	r2,r2,65535
   18060:	1004d43a 	srli	r2,r2,16
   18064:	e0bffe0d 	sth	r2,-8(fp)
   18068:	e0bffe0b 	ldhu	r2,-8(fp)
   1806c:	e037883a 	mov	sp,fp
   18070:	df000017 	ldw	fp,0(sp)
   18074:	dec00104 	addi	sp,sp,4
   18078:	f800283a 	ret

0001807c <read_data_valid>:
   1807c:	defffd04 	addi	sp,sp,-12
   18080:	df000215 	stw	fp,8(sp)
   18084:	df000204 	addi	fp,sp,8
   18088:	e13fff15 	stw	r4,-4(fp)
   1808c:	e0bfff17 	ldw	r2,-4(fp)
   18090:	10a0000c 	andi	r2,r2,32768
   18094:	1004d3fa 	srli	r2,r2,15
   18098:	e0bffe05 	stb	r2,-8(fp)
   1809c:	e0bffe03 	ldbu	r2,-8(fp)
   180a0:	e037883a 	mov	sp,fp
   180a4:	df000017 	ldw	fp,0(sp)
   180a8:	dec00104 	addi	sp,sp,4
   180ac:	f800283a 	ret

000180b0 <read_data_byte>:
   180b0:	defffd04 	addi	sp,sp,-12
   180b4:	df000215 	stw	fp,8(sp)
   180b8:	df000204 	addi	fp,sp,8
   180bc:	e13fff15 	stw	r4,-4(fp)
   180c0:	e0bfff17 	ldw	r2,-4(fp)
   180c4:	e0bffe05 	stb	r2,-8(fp)
   180c8:	e0bffe03 	ldbu	r2,-8(fp)
   180cc:	e037883a 	mov	sp,fp
   180d0:	df000017 	ldw	fp,0(sp)
   180d4:	dec00104 	addi	sp,sp,4
   180d8:	f800283a 	ret

000180dc <alt_up_ps2_init>:
   180dc:	defffb04 	addi	sp,sp,-20
   180e0:	dfc00415 	stw	ra,16(sp)
   180e4:	df000315 	stw	fp,12(sp)
   180e8:	df000304 	addi	fp,sp,12
   180ec:	e13fff15 	stw	r4,-4(fp)
   180f0:	e13fff17 	ldw	r4,-4(fp)
   180f4:	01403fc4 	movi	r5,255
   180f8:	001833c0 	call	1833c <alt_up_ps2_write_data_byte_with_ack>
   180fc:	e0bffd15 	stw	r2,-12(fp)
   18100:	e0bffd17 	ldw	r2,-12(fp)
   18104:	1004c03a 	cmpne	r2,r2,zero
   18108:	1000221e 	bne	r2,zero,18194 <alt_up_ps2_init+0xb8>
   1810c:	e17ffe04 	addi	r5,fp,-8
   18110:	e13fff17 	ldw	r4,-4(fp)
   18114:	00183a80 	call	183a8 <alt_up_ps2_read_data_byte_timeout>
   18118:	e0bffd15 	stw	r2,-12(fp)
   1811c:	e0bffd17 	ldw	r2,-12(fp)
   18120:	1004c03a 	cmpne	r2,r2,zero
   18124:	10001b1e 	bne	r2,zero,18194 <alt_up_ps2_init+0xb8>
   18128:	e0bffe03 	ldbu	r2,-8(fp)
   1812c:	10803fcc 	andi	r2,r2,255
   18130:	10802a98 	cmpnei	r2,r2,170
   18134:	1000171e 	bne	r2,zero,18194 <alt_up_ps2_init+0xb8>
   18138:	e17ffe04 	addi	r5,fp,-8
   1813c:	e13fff17 	ldw	r4,-4(fp)
   18140:	00183a80 	call	183a8 <alt_up_ps2_read_data_byte_timeout>
   18144:	e0bffd15 	stw	r2,-12(fp)
   18148:	e0bffd17 	ldw	r2,-12(fp)
   1814c:	10bfe318 	cmpnei	r2,r2,-116
   18150:	1000041e 	bne	r2,zero,18164 <alt_up_ps2_init+0x88>
   18154:	e0ffff17 	ldw	r3,-4(fp)
   18158:	00800044 	movi	r2,1
   1815c:	18800d15 	stw	r2,52(r3)
   18160:	00000c06 	br	18194 <alt_up_ps2_init+0xb8>
   18164:	e0bffd17 	ldw	r2,-12(fp)
   18168:	1004c03a 	cmpne	r2,r2,zero
   1816c:	1000091e 	bne	r2,zero,18194 <alt_up_ps2_init+0xb8>
   18170:	e0bffe03 	ldbu	r2,-8(fp)
   18174:	10803fcc 	andi	r2,r2,255
   18178:	1004c03a 	cmpne	r2,r2,zero
   1817c:	1000051e 	bne	r2,zero,18194 <alt_up_ps2_init+0xb8>
   18180:	e0bfff17 	ldw	r2,-4(fp)
   18184:	10000d15 	stw	zero,52(r2)
   18188:	e13fff17 	ldw	r4,-4(fp)
   1818c:	01403d04 	movi	r5,244
   18190:	00182540 	call	18254 <alt_up_ps2_write_data_byte>
   18194:	e037883a 	mov	sp,fp
   18198:	dfc00117 	ldw	ra,4(sp)
   1819c:	df000017 	ldw	fp,0(sp)
   181a0:	dec00204 	addi	sp,sp,8
   181a4:	f800283a 	ret

000181a8 <alt_up_ps2_enable_read_interrupt>:
   181a8:	defffd04 	addi	sp,sp,-12
   181ac:	df000215 	stw	fp,8(sp)
   181b0:	df000204 	addi	fp,sp,8
   181b4:	e13fff15 	stw	r4,-4(fp)
   181b8:	e0bfff17 	ldw	r2,-4(fp)
   181bc:	10800a17 	ldw	r2,40(r2)
   181c0:	10800104 	addi	r2,r2,4
   181c4:	10800037 	ldwio	r2,0(r2)
   181c8:	e0bffe15 	stw	r2,-8(fp)
   181cc:	e0bffe17 	ldw	r2,-8(fp)
   181d0:	10800054 	ori	r2,r2,1
   181d4:	e0bffe15 	stw	r2,-8(fp)
   181d8:	e0bfff17 	ldw	r2,-4(fp)
   181dc:	10800a17 	ldw	r2,40(r2)
   181e0:	10800104 	addi	r2,r2,4
   181e4:	e0fffe17 	ldw	r3,-8(fp)
   181e8:	10c00035 	stwio	r3,0(r2)
   181ec:	e037883a 	mov	sp,fp
   181f0:	df000017 	ldw	fp,0(sp)
   181f4:	dec00104 	addi	sp,sp,4
   181f8:	f800283a 	ret

000181fc <alt_up_ps2_disable_read_interrupt>:
   181fc:	defffd04 	addi	sp,sp,-12
   18200:	df000215 	stw	fp,8(sp)
   18204:	df000204 	addi	fp,sp,8
   18208:	e13fff15 	stw	r4,-4(fp)
   1820c:	e0bfff17 	ldw	r2,-4(fp)
   18210:	10800a17 	ldw	r2,40(r2)
   18214:	10800104 	addi	r2,r2,4
   18218:	10800037 	ldwio	r2,0(r2)
   1821c:	e0bffe15 	stw	r2,-8(fp)
   18220:	e0fffe17 	ldw	r3,-8(fp)
   18224:	00bfff84 	movi	r2,-2
   18228:	1884703a 	and	r2,r3,r2
   1822c:	e0bffe15 	stw	r2,-8(fp)
   18230:	e0bfff17 	ldw	r2,-4(fp)
   18234:	10800a17 	ldw	r2,40(r2)
   18238:	10800104 	addi	r2,r2,4
   1823c:	e0fffe17 	ldw	r3,-8(fp)
   18240:	10c00035 	stwio	r3,0(r2)
   18244:	e037883a 	mov	sp,fp
   18248:	df000017 	ldw	fp,0(sp)
   1824c:	dec00104 	addi	sp,sp,4
   18250:	f800283a 	ret

00018254 <alt_up_ps2_write_data_byte>:
   18254:	defffa04 	addi	sp,sp,-24
   18258:	dfc00515 	stw	ra,20(sp)
   1825c:	df000415 	stw	fp,16(sp)
   18260:	df000404 	addi	fp,sp,16
   18264:	e13ffd15 	stw	r4,-12(fp)
   18268:	e17ffe05 	stb	r5,-8(fp)
   1826c:	e0bffd17 	ldw	r2,-12(fp)
   18270:	10800a17 	ldw	r2,40(r2)
   18274:	e0fffe03 	ldbu	r3,-8(fp)
   18278:	10c00025 	stbio	r3,0(r2)
   1827c:	e0bffd17 	ldw	r2,-12(fp)
   18280:	10800a17 	ldw	r2,40(r2)
   18284:	10800104 	addi	r2,r2,4
   18288:	10800037 	ldwio	r2,0(r2)
   1828c:	e0bffc15 	stw	r2,-16(fp)
   18290:	e13ffc17 	ldw	r4,-16(fp)
   18294:	00180140 	call	18014 <read_CE_bit>
   18298:	10803fcc 	andi	r2,r2,255
   1829c:	1005003a 	cmpeq	r2,r2,zero
   182a0:	1000031e 	bne	r2,zero,182b0 <alt_up_ps2_write_data_byte+0x5c>
   182a4:	00bffec4 	movi	r2,-5
   182a8:	e0bfff15 	stw	r2,-4(fp)
   182ac:	00000106 	br	182b4 <alt_up_ps2_write_data_byte+0x60>
   182b0:	e03fff15 	stw	zero,-4(fp)
   182b4:	e0bfff17 	ldw	r2,-4(fp)
   182b8:	e037883a 	mov	sp,fp
   182bc:	dfc00117 	ldw	ra,4(sp)
   182c0:	df000017 	ldw	fp,0(sp)
   182c4:	dec00204 	addi	sp,sp,8
   182c8:	f800283a 	ret

000182cc <alt_up_ps2_wait_for_ack>:
   182cc:	defffb04 	addi	sp,sp,-20
   182d0:	dfc00415 	stw	ra,16(sp)
   182d4:	df000315 	stw	fp,12(sp)
   182d8:	df000304 	addi	fp,sp,12
   182dc:	e13ffe15 	stw	r4,-8(fp)
   182e0:	e03ffd45 	stb	zero,-11(fp)
   182e4:	e03ffd05 	stb	zero,-12(fp)
   182e8:	e17ffd44 	addi	r5,fp,-11
   182ec:	e13ffe17 	ldw	r4,-8(fp)
   182f0:	00183a80 	call	183a8 <alt_up_ps2_read_data_byte_timeout>
   182f4:	e0bffd05 	stb	r2,-12(fp)
   182f8:	e0bffd03 	ldbu	r2,-12(fp)
   182fc:	1004c03a 	cmpne	r2,r2,zero
   18300:	1000061e 	bne	r2,zero,1831c <alt_up_ps2_wait_for_ack+0x50>
   18304:	e0bffd43 	ldbu	r2,-11(fp)
   18308:	10803fcc 	andi	r2,r2,255
   1830c:	10803e98 	cmpnei	r2,r2,250
   18310:	103ff51e 	bne	r2,zero,182e8 <alt_up_ps2_wait_for_ack+0x1c>
   18314:	e03fff15 	stw	zero,-4(fp)
   18318:	00000206 	br	18324 <alt_up_ps2_wait_for_ack+0x58>
   1831c:	e0bffd03 	ldbu	r2,-12(fp)
   18320:	e0bfff15 	stw	r2,-4(fp)
   18324:	e0bfff17 	ldw	r2,-4(fp)
   18328:	e037883a 	mov	sp,fp
   1832c:	dfc00117 	ldw	ra,4(sp)
   18330:	df000017 	ldw	fp,0(sp)
   18334:	dec00204 	addi	sp,sp,8
   18338:	f800283a 	ret

0001833c <alt_up_ps2_write_data_byte_with_ack>:
   1833c:	defff904 	addi	sp,sp,-28
   18340:	dfc00615 	stw	ra,24(sp)
   18344:	df000515 	stw	fp,20(sp)
   18348:	df000504 	addi	fp,sp,20
   1834c:	e13ffd15 	stw	r4,-12(fp)
   18350:	e17ffe05 	stb	r5,-8(fp)
   18354:	e17ffe03 	ldbu	r5,-8(fp)
   18358:	e13ffd17 	ldw	r4,-12(fp)
   1835c:	00182540 	call	18254 <alt_up_ps2_write_data_byte>
   18360:	e0bffc15 	stw	r2,-16(fp)
   18364:	e0bffc17 	ldw	r2,-16(fp)
   18368:	1005003a 	cmpeq	r2,r2,zero
   1836c:	1000031e 	bne	r2,zero,1837c <alt_up_ps2_write_data_byte_with_ack+0x40>
   18370:	e0bffc17 	ldw	r2,-16(fp)
   18374:	e0bfff15 	stw	r2,-4(fp)
   18378:	00000506 	br	18390 <alt_up_ps2_write_data_byte_with_ack+0x54>
   1837c:	e13ffd17 	ldw	r4,-12(fp)
   18380:	00182cc0 	call	182cc <alt_up_ps2_wait_for_ack>
   18384:	e0bffb15 	stw	r2,-20(fp)
   18388:	e0bffb17 	ldw	r2,-20(fp)
   1838c:	e0bfff15 	stw	r2,-4(fp)
   18390:	e0bfff17 	ldw	r2,-4(fp)
   18394:	e037883a 	mov	sp,fp
   18398:	dfc00117 	ldw	ra,4(sp)
   1839c:	df000017 	ldw	fp,0(sp)
   183a0:	dec00204 	addi	sp,sp,8
   183a4:	f800283a 	ret

000183a8 <alt_up_ps2_read_data_byte_timeout>:
   183a8:	defff904 	addi	sp,sp,-28
   183ac:	dfc00615 	stw	ra,24(sp)
   183b0:	df000515 	stw	fp,20(sp)
   183b4:	df000504 	addi	fp,sp,20
   183b8:	e13ffd15 	stw	r4,-12(fp)
   183bc:	e17ffe15 	stw	r5,-8(fp)
   183c0:	e03ffc15 	stw	zero,-16(fp)
   183c4:	e03ffb15 	stw	zero,-20(fp)
   183c8:	00000006 	br	183cc <alt_up_ps2_read_data_byte_timeout+0x24>
   183cc:	e0bffb17 	ldw	r2,-20(fp)
   183d0:	10800044 	addi	r2,r2,1
   183d4:	e0bffb15 	stw	r2,-20(fp)
   183d8:	e0bffd17 	ldw	r2,-12(fp)
   183dc:	10800a17 	ldw	r2,40(r2)
   183e0:	10800037 	ldwio	r2,0(r2)
   183e4:	e0bffc15 	stw	r2,-16(fp)
   183e8:	e13ffc17 	ldw	r4,-16(fp)
   183ec:	001807c0 	call	1807c <read_data_valid>
   183f0:	10803fcc 	andi	r2,r2,255
   183f4:	1005003a 	cmpeq	r2,r2,zero
   183f8:	1000071e 	bne	r2,zero,18418 <alt_up_ps2_read_data_byte_timeout+0x70>
   183fc:	e13ffc17 	ldw	r4,-16(fp)
   18400:	00180b00 	call	180b0 <read_data_byte>
   18404:	1007883a 	mov	r3,r2
   18408:	e0bffe17 	ldw	r2,-8(fp)
   1840c:	10c00005 	stb	r3,0(r2)
   18410:	e03fff15 	stw	zero,-4(fp)
   18414:	00000a06 	br	18440 <alt_up_ps2_read_data_byte_timeout+0x98>
   18418:	e0bffd17 	ldw	r2,-12(fp)
   1841c:	10800c17 	ldw	r2,48(r2)
   18420:	1005003a 	cmpeq	r2,r2,zero
   18424:	103fe91e 	bne	r2,zero,183cc <alt_up_ps2_read_data_byte_timeout+0x24>
   18428:	e0bffd17 	ldw	r2,-12(fp)
   1842c:	10c00c17 	ldw	r3,48(r2)
   18430:	e0bffb17 	ldw	r2,-20(fp)
   18434:	18bfe52e 	bgeu	r3,r2,183cc <alt_up_ps2_read_data_byte_timeout+0x24>
   18438:	00bfe304 	movi	r2,-116
   1843c:	e0bfff15 	stw	r2,-4(fp)
   18440:	e0bfff17 	ldw	r2,-4(fp)
   18444:	e037883a 	mov	sp,fp
   18448:	dfc00117 	ldw	ra,4(sp)
   1844c:	df000017 	ldw	fp,0(sp)
   18450:	dec00204 	addi	sp,sp,8
   18454:	f800283a 	ret

00018458 <alt_up_ps2_read_data_byte>:
   18458:	defffa04 	addi	sp,sp,-24
   1845c:	dfc00515 	stw	ra,20(sp)
   18460:	df000415 	stw	fp,16(sp)
   18464:	df000404 	addi	fp,sp,16
   18468:	e13ffd15 	stw	r4,-12(fp)
   1846c:	e17ffe15 	stw	r5,-8(fp)
   18470:	e03ffc15 	stw	zero,-16(fp)
   18474:	e0bffd17 	ldw	r2,-12(fp)
   18478:	10800a17 	ldw	r2,40(r2)
   1847c:	10800037 	ldwio	r2,0(r2)
   18480:	e0bffc15 	stw	r2,-16(fp)
   18484:	e13ffc17 	ldw	r4,-16(fp)
   18488:	001807c0 	call	1807c <read_data_valid>
   1848c:	10803fcc 	andi	r2,r2,255
   18490:	1005003a 	cmpeq	r2,r2,zero
   18494:	1000071e 	bne	r2,zero,184b4 <alt_up_ps2_read_data_byte+0x5c>
   18498:	e13ffc17 	ldw	r4,-16(fp)
   1849c:	00180b00 	call	180b0 <read_data_byte>
   184a0:	1007883a 	mov	r3,r2
   184a4:	e0bffe17 	ldw	r2,-8(fp)
   184a8:	10c00005 	stb	r3,0(r2)
   184ac:	e03fff15 	stw	zero,-4(fp)
   184b0:	00000206 	br	184bc <alt_up_ps2_read_data_byte+0x64>
   184b4:	00bfffc4 	movi	r2,-1
   184b8:	e0bfff15 	stw	r2,-4(fp)
   184bc:	e0bfff17 	ldw	r2,-4(fp)
   184c0:	e037883a 	mov	sp,fp
   184c4:	dfc00117 	ldw	ra,4(sp)
   184c8:	df000017 	ldw	fp,0(sp)
   184cc:	dec00204 	addi	sp,sp,8
   184d0:	f800283a 	ret

000184d4 <alt_up_ps2_clear_fifo>:
   184d4:	defffb04 	addi	sp,sp,-20
   184d8:	dfc00415 	stw	ra,16(sp)
   184dc:	df000315 	stw	fp,12(sp)
   184e0:	df000304 	addi	fp,sp,12
   184e4:	e13fff15 	stw	r4,-4(fp)
   184e8:	e03ffe0d 	sth	zero,-8(fp)
   184ec:	e03ffd15 	stw	zero,-12(fp)
   184f0:	e0bfff17 	ldw	r2,-4(fp)
   184f4:	10800a17 	ldw	r2,40(r2)
   184f8:	10800037 	ldwio	r2,0(r2)
   184fc:	e0bffd15 	stw	r2,-12(fp)
   18500:	e13ffd17 	ldw	r4,-12(fp)
   18504:	00180480 	call	18048 <read_num_bytes_available>
   18508:	e0bffe0d 	sth	r2,-8(fp)
   1850c:	e0bffe0b 	ldhu	r2,-8(fp)
   18510:	1004c03a 	cmpne	r2,r2,zero
   18514:	103ff61e 	bne	r2,zero,184f0 <alt_up_ps2_clear_fifo+0x1c>
   18518:	e037883a 	mov	sp,fp
   1851c:	dfc00117 	ldw	ra,4(sp)
   18520:	df000017 	ldw	fp,0(sp)
   18524:	dec00204 	addi	sp,sp,8
   18528:	f800283a 	ret

0001852c <alt_up_ps2_read_fd>:
   1852c:	defff704 	addi	sp,sp,-36
   18530:	dfc00815 	stw	ra,32(sp)
   18534:	df000715 	stw	fp,28(sp)
   18538:	df000704 	addi	fp,sp,28
   1853c:	e13ffc15 	stw	r4,-16(fp)
   18540:	e17ffd15 	stw	r5,-12(fp)
   18544:	e1bffe15 	stw	r6,-8(fp)
   18548:	e0bffc17 	ldw	r2,-16(fp)
   1854c:	10800017 	ldw	r2,0(r2)
   18550:	e0bffb15 	stw	r2,-20(fp)
   18554:	e03ffa15 	stw	zero,-24(fp)
   18558:	e03ff915 	stw	zero,-28(fp)
   1855c:	e0fff917 	ldw	r3,-28(fp)
   18560:	e0bffe17 	ldw	r2,-8(fp)
   18564:	18bffd16 	blt	r3,r2,1855c <alt_up_ps2_read_fd+0x30>
   18568:	e17ffd17 	ldw	r5,-12(fp)
   1856c:	e0bffd17 	ldw	r2,-12(fp)
   18570:	10800044 	addi	r2,r2,1
   18574:	e0bffd15 	stw	r2,-12(fp)
   18578:	e13ffb17 	ldw	r4,-20(fp)
   1857c:	00183a80 	call	183a8 <alt_up_ps2_read_data_byte_timeout>
   18580:	e0bffa15 	stw	r2,-24(fp)
   18584:	e0bffa17 	ldw	r2,-24(fp)
   18588:	1005003a 	cmpeq	r2,r2,zero
   1858c:	1000031e 	bne	r2,zero,1859c <alt_up_ps2_read_fd+0x70>
   18590:	e0bff917 	ldw	r2,-28(fp)
   18594:	e0bfff15 	stw	r2,-4(fp)
   18598:	00000506 	br	185b0 <alt_up_ps2_read_fd+0x84>
   1859c:	e0bff917 	ldw	r2,-28(fp)
   185a0:	10800044 	addi	r2,r2,1
   185a4:	e0bff915 	stw	r2,-28(fp)
   185a8:	e0bff917 	ldw	r2,-28(fp)
   185ac:	e0bfff15 	stw	r2,-4(fp)
   185b0:	e0bfff17 	ldw	r2,-4(fp)
   185b4:	e037883a 	mov	sp,fp
   185b8:	dfc00117 	ldw	ra,4(sp)
   185bc:	df000017 	ldw	fp,0(sp)
   185c0:	dec00204 	addi	sp,sp,8
   185c4:	f800283a 	ret

000185c8 <alt_up_ps2_write_fd>:
   185c8:	defff704 	addi	sp,sp,-36
   185cc:	dfc00815 	stw	ra,32(sp)
   185d0:	df000715 	stw	fp,28(sp)
   185d4:	df000704 	addi	fp,sp,28
   185d8:	e13ffc15 	stw	r4,-16(fp)
   185dc:	e17ffd15 	stw	r5,-12(fp)
   185e0:	e1bffe15 	stw	r6,-8(fp)
   185e4:	e0bffc17 	ldw	r2,-16(fp)
   185e8:	10800017 	ldw	r2,0(r2)
   185ec:	e0bffb15 	stw	r2,-20(fp)
   185f0:	e03ffa15 	stw	zero,-24(fp)
   185f4:	e03ff915 	stw	zero,-28(fp)
   185f8:	00001206 	br	18644 <alt_up_ps2_write_fd+0x7c>
   185fc:	e0bffd17 	ldw	r2,-12(fp)
   18600:	10800003 	ldbu	r2,0(r2)
   18604:	11403fcc 	andi	r5,r2,255
   18608:	e0bffd17 	ldw	r2,-12(fp)
   1860c:	10800044 	addi	r2,r2,1
   18610:	e0bffd15 	stw	r2,-12(fp)
   18614:	e13ffb17 	ldw	r4,-20(fp)
   18618:	00182540 	call	18254 <alt_up_ps2_write_data_byte>
   1861c:	e0bffa15 	stw	r2,-24(fp)
   18620:	e0bffa17 	ldw	r2,-24(fp)
   18624:	1005003a 	cmpeq	r2,r2,zero
   18628:	1000031e 	bne	r2,zero,18638 <alt_up_ps2_write_fd+0x70>
   1862c:	e0bff917 	ldw	r2,-28(fp)
   18630:	e0bfff15 	stw	r2,-4(fp)
   18634:	00000806 	br	18658 <alt_up_ps2_write_fd+0x90>
   18638:	e0bff917 	ldw	r2,-28(fp)
   1863c:	10800044 	addi	r2,r2,1
   18640:	e0bff915 	stw	r2,-28(fp)
   18644:	e0fff917 	ldw	r3,-28(fp)
   18648:	e0bffe17 	ldw	r2,-8(fp)
   1864c:	18bfeb16 	blt	r3,r2,185fc <alt_up_ps2_write_fd+0x34>
   18650:	e0bff917 	ldw	r2,-28(fp)
   18654:	e0bfff15 	stw	r2,-4(fp)
   18658:	e0bfff17 	ldw	r2,-4(fp)
   1865c:	e037883a 	mov	sp,fp
   18660:	dfc00117 	ldw	ra,4(sp)
   18664:	df000017 	ldw	fp,0(sp)
   18668:	dec00204 	addi	sp,sp,8
   1866c:	f800283a 	ret

00018670 <alt_up_ps2_open_dev>:
   18670:	defffc04 	addi	sp,sp,-16
   18674:	dfc00315 	stw	ra,12(sp)
   18678:	df000215 	stw	fp,8(sp)
   1867c:	df000204 	addi	fp,sp,8
   18680:	e13fff15 	stw	r4,-4(fp)
   18684:	e13fff17 	ldw	r4,-4(fp)
   18688:	01420034 	movhi	r5,2048
   1868c:	294a2704 	addi	r5,r5,10396
   18690:	001a2c80 	call	1a2c8 <alt_find_dev>
   18694:	e0bffe15 	stw	r2,-8(fp)
   18698:	e0bffe17 	ldw	r2,-8(fp)
   1869c:	e037883a 	mov	sp,fp
   186a0:	dfc00117 	ldw	ra,4(sp)
   186a4:	df000017 	ldw	fp,0(sp)
   186a8:	dec00204 	addi	sp,sp,8
   186ac:	f800283a 	ret

000186b0 <alt_up_char_buffer_init>:
   186b0:	defffc04 	addi	sp,sp,-16
   186b4:	dfc00315 	stw	ra,12(sp)
   186b8:	df000215 	stw	fp,8(sp)
   186bc:	df000204 	addi	fp,sp,8
   186c0:	e13fff15 	stw	r4,-4(fp)
   186c4:	e0bfff17 	ldw	r2,-4(fp)
   186c8:	10800217 	ldw	r2,8(r2)
   186cc:	e0bffe15 	stw	r2,-8(fp)
   186d0:	00000c06 	br	18704 <alt_up_char_buffer_init+0x54>
   186d4:	e13ffe17 	ldw	r4,-8(fp)
   186d8:	01420034 	movhi	r5,2048
   186dc:	2941f004 	addi	r5,r5,1984
   186e0:	00113c00 	call	113c0 <strcmp>
   186e4:	1004c03a 	cmpne	r2,r2,zero
   186e8:	1000031e 	bne	r2,zero,186f8 <alt_up_char_buffer_init+0x48>
   186ec:	e0bffe17 	ldw	r2,-8(fp)
   186f0:	10000005 	stb	zero,0(r2)
   186f4:	00000a06 	br	18720 <alt_up_char_buffer_init+0x70>
   186f8:	e0bffe17 	ldw	r2,-8(fp)
   186fc:	10800044 	addi	r2,r2,1
   18700:	e0bffe15 	stw	r2,-8(fp)
   18704:	e0bffe17 	ldw	r2,-8(fp)
   18708:	10800003 	ldbu	r2,0(r2)
   1870c:	10803fcc 	andi	r2,r2,255
   18710:	1080201c 	xori	r2,r2,128
   18714:	10bfe004 	addi	r2,r2,-128
   18718:	1004c03a 	cmpne	r2,r2,zero
   1871c:	103fed1e 	bne	r2,zero,186d4 <alt_up_char_buffer_init+0x24>
   18720:	e037883a 	mov	sp,fp
   18724:	dfc00117 	ldw	ra,4(sp)
   18728:	df000017 	ldw	fp,0(sp)
   1872c:	dec00204 	addi	sp,sp,8
   18730:	f800283a 	ret

00018734 <alt_up_char_buffer_open_dev>:
   18734:	defffc04 	addi	sp,sp,-16
   18738:	dfc00315 	stw	ra,12(sp)
   1873c:	df000215 	stw	fp,8(sp)
   18740:	df000204 	addi	fp,sp,8
   18744:	e13fff15 	stw	r4,-4(fp)
   18748:	e13fff17 	ldw	r4,-4(fp)
   1874c:	01420034 	movhi	r5,2048
   18750:	294a2704 	addi	r5,r5,10396
   18754:	001a2c80 	call	1a2c8 <alt_find_dev>
   18758:	e0bffe15 	stw	r2,-8(fp)
   1875c:	e0bffe17 	ldw	r2,-8(fp)
   18760:	e037883a 	mov	sp,fp
   18764:	dfc00117 	ldw	ra,4(sp)
   18768:	df000017 	ldw	fp,0(sp)
   1876c:	dec00204 	addi	sp,sp,8
   18770:	f800283a 	ret

00018774 <alt_up_char_buffer_draw>:
   18774:	defff904 	addi	sp,sp,-28
   18778:	df000615 	stw	fp,24(sp)
   1877c:	df000604 	addi	fp,sp,24
   18780:	e13ffb15 	stw	r4,-20(fp)
   18784:	e1bffd15 	stw	r6,-12(fp)
   18788:	e1fffe15 	stw	r7,-8(fp)
   1878c:	e17ffc05 	stb	r5,-16(fp)
   18790:	e0bffb17 	ldw	r2,-20(fp)
   18794:	10c00c17 	ldw	r3,48(r2)
   18798:	e0bffd17 	ldw	r2,-12(fp)
   1879c:	10c0042e 	bgeu	r2,r3,187b0 <alt_up_char_buffer_draw+0x3c>
   187a0:	e0bffb17 	ldw	r2,-20(fp)
   187a4:	10c00d17 	ldw	r3,52(r2)
   187a8:	e0bffe17 	ldw	r2,-8(fp)
   187ac:	10c00336 	bltu	r2,r3,187bc <alt_up_char_buffer_draw+0x48>
   187b0:	00bfffc4 	movi	r2,-1
   187b4:	e0bfff15 	stw	r2,-4(fp)
   187b8:	00001d06 	br	18830 <alt_up_char_buffer_draw+0xbc>
   187bc:	e03ffa15 	stw	zero,-24(fp)
   187c0:	e0bffb17 	ldw	r2,-20(fp)
   187c4:	10c00f17 	ldw	r3,60(r2)
   187c8:	e0bffd17 	ldw	r2,-12(fp)
   187cc:	1886703a 	and	r3,r3,r2
   187d0:	e0bffb17 	ldw	r2,-20(fp)
   187d4:	10800e17 	ldw	r2,56(r2)
   187d8:	1886983a 	sll	r3,r3,r2
   187dc:	e0bffa17 	ldw	r2,-24(fp)
   187e0:	10c4b03a 	or	r2,r2,r3
   187e4:	e0bffa15 	stw	r2,-24(fp)
   187e8:	e0bffb17 	ldw	r2,-20(fp)
   187ec:	10c01117 	ldw	r3,68(r2)
   187f0:	e0bffe17 	ldw	r2,-8(fp)
   187f4:	1886703a 	and	r3,r3,r2
   187f8:	e0bffb17 	ldw	r2,-20(fp)
   187fc:	10801017 	ldw	r2,64(r2)
   18800:	1886983a 	sll	r3,r3,r2
   18804:	e0bffa17 	ldw	r2,-24(fp)
   18808:	10c4b03a 	or	r2,r2,r3
   1880c:	e0bffa15 	stw	r2,-24(fp)
   18810:	e0bffb17 	ldw	r2,-20(fp)
   18814:	10800b17 	ldw	r2,44(r2)
   18818:	1007883a 	mov	r3,r2
   1881c:	e0bffa17 	ldw	r2,-24(fp)
   18820:	1885883a 	add	r2,r3,r2
   18824:	e0fffc03 	ldbu	r3,-16(fp)
   18828:	10c00025 	stbio	r3,0(r2)
   1882c:	e03fff15 	stw	zero,-4(fp)
   18830:	e0bfff17 	ldw	r2,-4(fp)
   18834:	e037883a 	mov	sp,fp
   18838:	df000017 	ldw	fp,0(sp)
   1883c:	dec00104 	addi	sp,sp,4
   18840:	f800283a 	ret

00018844 <alt_up_char_buffer_string>:
   18844:	defff904 	addi	sp,sp,-28
   18848:	df000615 	stw	fp,24(sp)
   1884c:	df000604 	addi	fp,sp,24
   18850:	e13ffb15 	stw	r4,-20(fp)
   18854:	e17ffc15 	stw	r5,-16(fp)
   18858:	e1bffd15 	stw	r6,-12(fp)
   1885c:	e1fffe15 	stw	r7,-8(fp)
   18860:	e0bffb17 	ldw	r2,-20(fp)
   18864:	10c00c17 	ldw	r3,48(r2)
   18868:	e0bffd17 	ldw	r2,-12(fp)
   1886c:	10c0042e 	bgeu	r2,r3,18880 <alt_up_char_buffer_string+0x3c>
   18870:	e0bffb17 	ldw	r2,-20(fp)
   18874:	10c00d17 	ldw	r3,52(r2)
   18878:	e0bffe17 	ldw	r2,-8(fp)
   1887c:	10c00336 	bltu	r2,r3,1888c <alt_up_char_buffer_string+0x48>
   18880:	00bfffc4 	movi	r2,-1
   18884:	e0bfff15 	stw	r2,-4(fp)
   18888:	00002e06 	br	18944 <alt_up_char_buffer_string+0x100>
   1888c:	e03ffa15 	stw	zero,-24(fp)
   18890:	e0bffb17 	ldw	r2,-20(fp)
   18894:	10801017 	ldw	r2,64(r2)
   18898:	1007883a 	mov	r3,r2
   1889c:	e0bffe17 	ldw	r2,-8(fp)
   188a0:	10c6983a 	sll	r3,r2,r3
   188a4:	e0bffd17 	ldw	r2,-12(fp)
   188a8:	1885883a 	add	r2,r3,r2
   188ac:	e0bffa15 	stw	r2,-24(fp)
   188b0:	00001c06 	br	18924 <alt_up_char_buffer_string+0xe0>
   188b4:	e0bffb17 	ldw	r2,-20(fp)
   188b8:	10800b17 	ldw	r2,44(r2)
   188bc:	1007883a 	mov	r3,r2
   188c0:	e0bffa17 	ldw	r2,-24(fp)
   188c4:	1889883a 	add	r4,r3,r2
   188c8:	e0bffc17 	ldw	r2,-16(fp)
   188cc:	10800003 	ldbu	r2,0(r2)
   188d0:	10c03fcc 	andi	r3,r2,255
   188d4:	18c0201c 	xori	r3,r3,128
   188d8:	18ffe004 	addi	r3,r3,-128
   188dc:	2005883a 	mov	r2,r4
   188e0:	10c00025 	stbio	r3,0(r2)
   188e4:	e0bffc17 	ldw	r2,-16(fp)
   188e8:	10800044 	addi	r2,r2,1
   188ec:	e0bffc15 	stw	r2,-16(fp)
   188f0:	e0bffd17 	ldw	r2,-12(fp)
   188f4:	10800044 	addi	r2,r2,1
   188f8:	e0bffd15 	stw	r2,-12(fp)
   188fc:	e0bffb17 	ldw	r2,-20(fp)
   18900:	10c00c17 	ldw	r3,48(r2)
   18904:	e0bffd17 	ldw	r2,-12(fp)
   18908:	10c00336 	bltu	r2,r3,18918 <alt_up_char_buffer_string+0xd4>
   1890c:	00bfffc4 	movi	r2,-1
   18910:	e0bfff15 	stw	r2,-4(fp)
   18914:	00000b06 	br	18944 <alt_up_char_buffer_string+0x100>
   18918:	e0bffa17 	ldw	r2,-24(fp)
   1891c:	10800044 	addi	r2,r2,1
   18920:	e0bffa15 	stw	r2,-24(fp)
   18924:	e0bffc17 	ldw	r2,-16(fp)
   18928:	10800003 	ldbu	r2,0(r2)
   1892c:	10803fcc 	andi	r2,r2,255
   18930:	1080201c 	xori	r2,r2,128
   18934:	10bfe004 	addi	r2,r2,-128
   18938:	1004c03a 	cmpne	r2,r2,zero
   1893c:	103fdd1e 	bne	r2,zero,188b4 <alt_up_char_buffer_string+0x70>
   18940:	e03fff15 	stw	zero,-4(fp)
   18944:	e0bfff17 	ldw	r2,-4(fp)
   18948:	e037883a 	mov	sp,fp
   1894c:	df000017 	ldw	fp,0(sp)
   18950:	dec00104 	addi	sp,sp,4
   18954:	f800283a 	ret

00018958 <alt_up_char_buffer_clear>:
   18958:	defffe04 	addi	sp,sp,-8
   1895c:	df000115 	stw	fp,4(sp)
   18960:	df000104 	addi	fp,sp,4
   18964:	e13fff15 	stw	r4,-4(fp)
   18968:	e0bfff17 	ldw	r2,-4(fp)
   1896c:	10800a17 	ldw	r2,40(r2)
   18970:	10800084 	addi	r2,r2,2
   18974:	1007883a 	mov	r3,r2
   18978:	00800044 	movi	r2,1
   1897c:	18800025 	stbio	r2,0(r3)
   18980:	e0bfff17 	ldw	r2,-4(fp)
   18984:	10800a17 	ldw	r2,40(r2)
   18988:	10800084 	addi	r2,r2,2
   1898c:	10800023 	ldbuio	r2,0(r2)
   18990:	1080004c 	andi	r2,r2,1
   18994:	10803fcc 	andi	r2,r2,255
   18998:	1004c03a 	cmpne	r2,r2,zero
   1899c:	103ff81e 	bne	r2,zero,18980 <alt_up_char_buffer_clear+0x28>
   189a0:	0005883a 	mov	r2,zero
   189a4:	e037883a 	mov	sp,fp
   189a8:	df000017 	ldw	fp,0(sp)
   189ac:	dec00104 	addi	sp,sp,4
   189b0:	f800283a 	ret

000189b4 <alt_up_pixel_buffer_dma_open_dev>:
   189b4:	defffc04 	addi	sp,sp,-16
   189b8:	dfc00315 	stw	ra,12(sp)
   189bc:	df000215 	stw	fp,8(sp)
   189c0:	df000204 	addi	fp,sp,8
   189c4:	e13fff15 	stw	r4,-4(fp)
   189c8:	e13fff17 	ldw	r4,-4(fp)
   189cc:	01420034 	movhi	r5,2048
   189d0:	294a2704 	addi	r5,r5,10396
   189d4:	001a2c80 	call	1a2c8 <alt_find_dev>
   189d8:	e0bffe15 	stw	r2,-8(fp)
   189dc:	e0bffe17 	ldw	r2,-8(fp)
   189e0:	e037883a 	mov	sp,fp
   189e4:	dfc00117 	ldw	ra,4(sp)
   189e8:	df000017 	ldw	fp,0(sp)
   189ec:	dec00204 	addi	sp,sp,8
   189f0:	f800283a 	ret

000189f4 <alt_up_pixel_buffer_dma_draw>:
   189f4:	defff904 	addi	sp,sp,-28
   189f8:	df000615 	stw	fp,24(sp)
   189fc:	df000604 	addi	fp,sp,24
   18a00:	e13ffb15 	stw	r4,-20(fp)
   18a04:	e17ffc15 	stw	r5,-16(fp)
   18a08:	e1bffd15 	stw	r6,-12(fp)
   18a0c:	e1fffe15 	stw	r7,-8(fp)
   18a10:	e0bffb17 	ldw	r2,-20(fp)
   18a14:	10c00f17 	ldw	r3,60(r2)
   18a18:	e0bffd17 	ldw	r2,-12(fp)
   18a1c:	10c0042e 	bgeu	r2,r3,18a30 <alt_up_pixel_buffer_dma_draw+0x3c>
   18a20:	e0bffb17 	ldw	r2,-20(fp)
   18a24:	10c01017 	ldw	r3,64(r2)
   18a28:	e0bffe17 	ldw	r2,-8(fp)
   18a2c:	10c00336 	bltu	r2,r3,18a3c <alt_up_pixel_buffer_dma_draw+0x48>
   18a30:	00bfffc4 	movi	r2,-1
   18a34:	e0bfff15 	stw	r2,-4(fp)
   18a38:	00005106 	br	18b80 <alt_up_pixel_buffer_dma_draw+0x18c>
   18a3c:	e03ffa15 	stw	zero,-24(fp)
   18a40:	e0bffb17 	ldw	r2,-20(fp)
   18a44:	10800d17 	ldw	r2,52(r2)
   18a48:	1004c03a 	cmpne	r2,r2,zero
   18a4c:	1000151e 	bne	r2,zero,18aa4 <alt_up_pixel_buffer_dma_draw+0xb0>
   18a50:	e0bffb17 	ldw	r2,-20(fp)
   18a54:	10c01217 	ldw	r3,72(r2)
   18a58:	e0bffd17 	ldw	r2,-12(fp)
   18a5c:	1886703a 	and	r3,r3,r2
   18a60:	e0bffb17 	ldw	r2,-20(fp)
   18a64:	10801117 	ldw	r2,68(r2)
   18a68:	1886983a 	sll	r3,r3,r2
   18a6c:	e0bffa17 	ldw	r2,-24(fp)
   18a70:	10c4b03a 	or	r2,r2,r3
   18a74:	e0bffa15 	stw	r2,-24(fp)
   18a78:	e0bffb17 	ldw	r2,-20(fp)
   18a7c:	10c01417 	ldw	r3,80(r2)
   18a80:	e0bffe17 	ldw	r2,-8(fp)
   18a84:	1886703a 	and	r3,r3,r2
   18a88:	e0bffb17 	ldw	r2,-20(fp)
   18a8c:	10801317 	ldw	r2,76(r2)
   18a90:	1886983a 	sll	r3,r3,r2
   18a94:	e0bffa17 	ldw	r2,-24(fp)
   18a98:	10c4b03a 	or	r2,r2,r3
   18a9c:	e0bffa15 	stw	r2,-24(fp)
   18aa0:	00001706 	br	18b00 <alt_up_pixel_buffer_dma_draw+0x10c>
   18aa4:	e0bffb17 	ldw	r2,-20(fp)
   18aa8:	10c01217 	ldw	r3,72(r2)
   18aac:	e0bffd17 	ldw	r2,-12(fp)
   18ab0:	1886703a 	and	r3,r3,r2
   18ab4:	e0bffb17 	ldw	r2,-20(fp)
   18ab8:	10801117 	ldw	r2,68(r2)
   18abc:	1886983a 	sll	r3,r3,r2
   18ac0:	e0bffa17 	ldw	r2,-24(fp)
   18ac4:	10c5883a 	add	r2,r2,r3
   18ac8:	e0bffa15 	stw	r2,-24(fp)
   18acc:	e0bffb17 	ldw	r2,-20(fp)
   18ad0:	10c01417 	ldw	r3,80(r2)
   18ad4:	e0bffe17 	ldw	r2,-8(fp)
   18ad8:	1886703a 	and	r3,r3,r2
   18adc:	e0bffb17 	ldw	r2,-20(fp)
   18ae0:	10800f17 	ldw	r2,60(r2)
   18ae4:	1887383a 	mul	r3,r3,r2
   18ae8:	e0bffb17 	ldw	r2,-20(fp)
   18aec:	10801117 	ldw	r2,68(r2)
   18af0:	1886983a 	sll	r3,r3,r2
   18af4:	e0bffa17 	ldw	r2,-24(fp)
   18af8:	10c5883a 	add	r2,r2,r3
   18afc:	e0bffa15 	stw	r2,-24(fp)
   18b00:	e0bffb17 	ldw	r2,-20(fp)
   18b04:	10800e17 	ldw	r2,56(r2)
   18b08:	10800058 	cmpnei	r2,r2,1
   18b0c:	1000081e 	bne	r2,zero,18b30 <alt_up_pixel_buffer_dma_draw+0x13c>
   18b10:	e0bffb17 	ldw	r2,-20(fp)
   18b14:	10800c17 	ldw	r2,48(r2)
   18b18:	1007883a 	mov	r3,r2
   18b1c:	e0bffa17 	ldw	r2,-24(fp)
   18b20:	1885883a 	add	r2,r3,r2
   18b24:	e0fffc17 	ldw	r3,-16(fp)
   18b28:	10c00025 	stbio	r3,0(r2)
   18b2c:	00001306 	br	18b7c <alt_up_pixel_buffer_dma_draw+0x188>
   18b30:	e0bffb17 	ldw	r2,-20(fp)
   18b34:	10800e17 	ldw	r2,56(r2)
   18b38:	10800098 	cmpnei	r2,r2,2
   18b3c:	1000081e 	bne	r2,zero,18b60 <alt_up_pixel_buffer_dma_draw+0x16c>
   18b40:	e0bffb17 	ldw	r2,-20(fp)
   18b44:	10800c17 	ldw	r2,48(r2)
   18b48:	1007883a 	mov	r3,r2
   18b4c:	e0bffa17 	ldw	r2,-24(fp)
   18b50:	1885883a 	add	r2,r3,r2
   18b54:	e0fffc17 	ldw	r3,-16(fp)
   18b58:	10c0002d 	sthio	r3,0(r2)
   18b5c:	00000706 	br	18b7c <alt_up_pixel_buffer_dma_draw+0x188>
   18b60:	e0bffb17 	ldw	r2,-20(fp)
   18b64:	10800c17 	ldw	r2,48(r2)
   18b68:	1007883a 	mov	r3,r2
   18b6c:	e0bffa17 	ldw	r2,-24(fp)
   18b70:	1885883a 	add	r2,r3,r2
   18b74:	e0fffc17 	ldw	r3,-16(fp)
   18b78:	10c00035 	stwio	r3,0(r2)
   18b7c:	e03fff15 	stw	zero,-4(fp)
   18b80:	e0bfff17 	ldw	r2,-4(fp)
   18b84:	e037883a 	mov	sp,fp
   18b88:	df000017 	ldw	fp,0(sp)
   18b8c:	dec00104 	addi	sp,sp,4
   18b90:	f800283a 	ret

00018b94 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
   18b94:	defffd04 	addi	sp,sp,-12
   18b98:	df000215 	stw	fp,8(sp)
   18b9c:	df000204 	addi	fp,sp,8
   18ba0:	e13ffe15 	stw	r4,-8(fp)
   18ba4:	e17fff15 	stw	r5,-4(fp)
   18ba8:	e0bffe17 	ldw	r2,-8(fp)
   18bac:	10800a17 	ldw	r2,40(r2)
   18bb0:	10800104 	addi	r2,r2,4
   18bb4:	e0ffff17 	ldw	r3,-4(fp)
   18bb8:	10c00035 	stwio	r3,0(r2)
   18bbc:	e0bffe17 	ldw	r2,-8(fp)
   18bc0:	10800a17 	ldw	r2,40(r2)
   18bc4:	10800104 	addi	r2,r2,4
   18bc8:	10800037 	ldwio	r2,0(r2)
   18bcc:	1007883a 	mov	r3,r2
   18bd0:	e0bffe17 	ldw	r2,-8(fp)
   18bd4:	10c00c15 	stw	r3,48(r2)
   18bd8:	0005883a 	mov	r2,zero
   18bdc:	e037883a 	mov	sp,fp
   18be0:	df000017 	ldw	fp,0(sp)
   18be4:	dec00104 	addi	sp,sp,4
   18be8:	f800283a 	ret

00018bec <alt_up_pixel_buffer_dma_swap_buffers>:
   18bec:	defffe04 	addi	sp,sp,-8
   18bf0:	df000115 	stw	fp,4(sp)
   18bf4:	df000104 	addi	fp,sp,4
   18bf8:	e13fff15 	stw	r4,-4(fp)
   18bfc:	e0bfff17 	ldw	r2,-4(fp)
   18c00:	11000c17 	ldw	r4,48(r2)
   18c04:	e0bfff17 	ldw	r2,-4(fp)
   18c08:	10800a17 	ldw	r2,40(r2)
   18c0c:	1007883a 	mov	r3,r2
   18c10:	00800044 	movi	r2,1
   18c14:	18800035 	stwio	r2,0(r3)
   18c18:	e0bfff17 	ldw	r2,-4(fp)
   18c1c:	10c00b17 	ldw	r3,44(r2)
   18c20:	e0bfff17 	ldw	r2,-4(fp)
   18c24:	10c00c15 	stw	r3,48(r2)
   18c28:	e0bfff17 	ldw	r2,-4(fp)
   18c2c:	11000b15 	stw	r4,44(r2)
   18c30:	0005883a 	mov	r2,zero
   18c34:	e037883a 	mov	sp,fp
   18c38:	df000017 	ldw	fp,0(sp)
   18c3c:	dec00104 	addi	sp,sp,4
   18c40:	f800283a 	ret

00018c44 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
   18c44:	defffe04 	addi	sp,sp,-8
   18c48:	df000115 	stw	fp,4(sp)
   18c4c:	df000104 	addi	fp,sp,4
   18c50:	e13fff15 	stw	r4,-4(fp)
   18c54:	e0bfff17 	ldw	r2,-4(fp)
   18c58:	10800a17 	ldw	r2,40(r2)
   18c5c:	10800304 	addi	r2,r2,12
   18c60:	10800037 	ldwio	r2,0(r2)
   18c64:	1080004c 	andi	r2,r2,1
   18c68:	e037883a 	mov	sp,fp
   18c6c:	df000017 	ldw	fp,0(sp)
   18c70:	dec00104 	addi	sp,sp,4
   18c74:	f800283a 	ret

00018c78 <alt_up_pixel_buffer_dma_clear_screen>:
   18c78:	defff604 	addi	sp,sp,-40
   18c7c:	df000915 	stw	fp,36(sp)
   18c80:	df000904 	addi	fp,sp,36
   18c84:	e13ff715 	stw	r4,-36(fp)
   18c88:	e17ff815 	stw	r5,-32(fp)
   18c8c:	e0bff817 	ldw	r2,-32(fp)
   18c90:	10800058 	cmpnei	r2,r2,1
   18c94:	1000041e 	bne	r2,zero,18ca8 <alt_up_pixel_buffer_dma_clear_screen+0x30>
   18c98:	e0bff717 	ldw	r2,-36(fp)
   18c9c:	10800c17 	ldw	r2,48(r2)
   18ca0:	e0bfff15 	stw	r2,-4(fp)
   18ca4:	00000306 	br	18cb4 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
   18ca8:	e0bff717 	ldw	r2,-36(fp)
   18cac:	10800b17 	ldw	r2,44(r2)
   18cb0:	e0bfff15 	stw	r2,-4(fp)
   18cb4:	e0bff717 	ldw	r2,-36(fp)
   18cb8:	10800f17 	ldw	r2,60(r2)
   18cbc:	e0bffe15 	stw	r2,-8(fp)
   18cc0:	e0bff717 	ldw	r2,-36(fp)
   18cc4:	10800e17 	ldw	r2,56(r2)
   18cc8:	10800098 	cmpnei	r2,r2,2
   18ccc:	1000051e 	bne	r2,zero,18ce4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
   18cd0:	e0fffe17 	ldw	r3,-8(fp)
   18cd4:	e0fffe17 	ldw	r3,-8(fp)
   18cd8:	18c5883a 	add	r2,r3,r3
   18cdc:	e0bffe15 	stw	r2,-8(fp)
   18ce0:	00000506 	br	18cf8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
   18ce4:	e13ffe17 	ldw	r4,-8(fp)
   18ce8:	e13ffe17 	ldw	r4,-8(fp)
   18cec:	2105883a 	add	r2,r4,r4
   18cf0:	1085883a 	add	r2,r2,r2
   18cf4:	e0bffe15 	stw	r2,-8(fp)
   18cf8:	e0bff717 	ldw	r2,-36(fp)
   18cfc:	10801017 	ldw	r2,64(r2)
   18d00:	e0bffd15 	stw	r2,-12(fp)
   18d04:	e0bff717 	ldw	r2,-36(fp)
   18d08:	10800d17 	ldw	r2,52(r2)
   18d0c:	1004c03a 	cmpne	r2,r2,zero
   18d10:	10001e1e 	bne	r2,zero,18d8c <alt_up_pixel_buffer_dma_clear_screen+0x114>
   18d14:	e0bff717 	ldw	r2,-36(fp)
   18d18:	10801317 	ldw	r2,76(r2)
   18d1c:	e0bffa15 	stw	r2,-24(fp)
   18d20:	e03ffb15 	stw	zero,-20(fp)
   18d24:	00001506 	br	18d7c <alt_up_pixel_buffer_dma_clear_screen+0x104>
   18d28:	e03ffc15 	stw	zero,-16(fp)
   18d2c:	00000706 	br	18d4c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
   18d30:	e0ffff17 	ldw	r3,-4(fp)
   18d34:	e0bffc17 	ldw	r2,-16(fp)
   18d38:	1885883a 	add	r2,r3,r2
   18d3c:	10000035 	stwio	zero,0(r2)
   18d40:	e0bffc17 	ldw	r2,-16(fp)
   18d44:	10800104 	addi	r2,r2,4
   18d48:	e0bffc15 	stw	r2,-16(fp)
   18d4c:	e0fffc17 	ldw	r3,-16(fp)
   18d50:	e13ffe17 	ldw	r4,-8(fp)
   18d54:	193ff636 	bltu	r3,r4,18d30 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
   18d58:	e0fffa17 	ldw	r3,-24(fp)
   18d5c:	00800044 	movi	r2,1
   18d60:	10c4983a 	sll	r2,r2,r3
   18d64:	e0ffff17 	ldw	r3,-4(fp)
   18d68:	1887883a 	add	r3,r3,r2
   18d6c:	e0ffff15 	stw	r3,-4(fp)
   18d70:	e13ffb17 	ldw	r4,-20(fp)
   18d74:	21000044 	addi	r4,r4,1
   18d78:	e13ffb15 	stw	r4,-20(fp)
   18d7c:	e0bffb17 	ldw	r2,-20(fp)
   18d80:	e0fffd17 	ldw	r3,-12(fp)
   18d84:	10ffe836 	bltu	r2,r3,18d28 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   18d88:	00001006 	br	18dcc <alt_up_pixel_buffer_dma_clear_screen+0x154>
   18d8c:	e13ffd17 	ldw	r4,-12(fp)
   18d90:	e0bffe17 	ldw	r2,-8(fp)
   18d94:	2089383a 	mul	r4,r4,r2
   18d98:	e13ffd15 	stw	r4,-12(fp)
   18d9c:	e03ff915 	stw	zero,-28(fp)
   18da0:	00000706 	br	18dc0 <alt_up_pixel_buffer_dma_clear_screen+0x148>
   18da4:	e0ffff17 	ldw	r3,-4(fp)
   18da8:	e0bff917 	ldw	r2,-28(fp)
   18dac:	1885883a 	add	r2,r3,r2
   18db0:	10000035 	stwio	zero,0(r2)
   18db4:	e0fff917 	ldw	r3,-28(fp)
   18db8:	18c00104 	addi	r3,r3,4
   18dbc:	e0fff915 	stw	r3,-28(fp)
   18dc0:	e0bff917 	ldw	r2,-28(fp)
   18dc4:	e13ffd17 	ldw	r4,-12(fp)
   18dc8:	113ff636 	bltu	r2,r4,18da4 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
   18dcc:	e037883a 	mov	sp,fp
   18dd0:	df000017 	ldw	fp,0(sp)
   18dd4:	dec00104 	addi	sp,sp,4
   18dd8:	f800283a 	ret

00018ddc <alt_up_pixel_buffer_dma_draw_box>:
   18ddc:	deffed04 	addi	sp,sp,-76
   18de0:	df001215 	stw	fp,72(sp)
   18de4:	df001204 	addi	fp,sp,72
   18de8:	e13fee15 	stw	r4,-72(fp)
   18dec:	e17fef15 	stw	r5,-68(fp)
   18df0:	e1bff015 	stw	r6,-64(fp)
   18df4:	e1fff115 	stw	r7,-60(fp)
   18df8:	e0bfee17 	ldw	r2,-72(fp)
   18dfc:	10800f17 	ldw	r2,60(r2)
   18e00:	e0bffe15 	stw	r2,-8(fp)
   18e04:	e0bfee17 	ldw	r2,-72(fp)
   18e08:	10801017 	ldw	r2,64(r2)
   18e0c:	e0bffd15 	stw	r2,-12(fp)
   18e10:	e0bfef17 	ldw	r2,-68(fp)
   18e14:	e0bffb15 	stw	r2,-20(fp)
   18e18:	e0fff117 	ldw	r3,-60(fp)
   18e1c:	e0fffa15 	stw	r3,-24(fp)
   18e20:	e13ff017 	ldw	r4,-64(fp)
   18e24:	e13ff915 	stw	r4,-28(fp)
   18e28:	e0800117 	ldw	r2,4(fp)
   18e2c:	e0bff815 	stw	r2,-32(fp)
   18e30:	e0c00217 	ldw	r3,8(fp)
   18e34:	e0fff715 	stw	r3,-36(fp)
   18e38:	e13ffa17 	ldw	r4,-24(fp)
   18e3c:	e0bffb17 	ldw	r2,-20(fp)
   18e40:	2080062e 	bgeu	r4,r2,18e5c <alt_up_pixel_buffer_dma_draw_box+0x80>
   18e44:	e0fffb17 	ldw	r3,-20(fp)
   18e48:	e0fffc15 	stw	r3,-16(fp)
   18e4c:	e13ffa17 	ldw	r4,-24(fp)
   18e50:	e13ffb15 	stw	r4,-20(fp)
   18e54:	e0bffc17 	ldw	r2,-16(fp)
   18e58:	e0bffa15 	stw	r2,-24(fp)
   18e5c:	e0fff817 	ldw	r3,-32(fp)
   18e60:	e13ff917 	ldw	r4,-28(fp)
   18e64:	1900062e 	bgeu	r3,r4,18e80 <alt_up_pixel_buffer_dma_draw_box+0xa4>
   18e68:	e0bff917 	ldw	r2,-28(fp)
   18e6c:	e0bffc15 	stw	r2,-16(fp)
   18e70:	e0fff817 	ldw	r3,-32(fp)
   18e74:	e0fff915 	stw	r3,-28(fp)
   18e78:	e13ffc17 	ldw	r4,-16(fp)
   18e7c:	e13ff815 	stw	r4,-32(fp)
   18e80:	e0bffb17 	ldw	r2,-20(fp)
   18e84:	e0fffe17 	ldw	r3,-8(fp)
   18e88:	10c10d2e 	bgeu	r2,r3,192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   18e8c:	e13ff917 	ldw	r4,-28(fp)
   18e90:	e0bffd17 	ldw	r2,-12(fp)
   18e94:	20800136 	bltu	r4,r2,18e9c <alt_up_pixel_buffer_dma_draw_box+0xc0>
   18e98:	00010906 	br	192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   18e9c:	e0fffa17 	ldw	r3,-24(fp)
   18ea0:	e13ffe17 	ldw	r4,-8(fp)
   18ea4:	19000336 	bltu	r3,r4,18eb4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
   18ea8:	e0bffe17 	ldw	r2,-8(fp)
   18eac:	10bfffc4 	addi	r2,r2,-1
   18eb0:	e0bffa15 	stw	r2,-24(fp)
   18eb4:	e0fff817 	ldw	r3,-32(fp)
   18eb8:	e13ffd17 	ldw	r4,-12(fp)
   18ebc:	19000336 	bltu	r3,r4,18ecc <alt_up_pixel_buffer_dma_draw_box+0xf0>
   18ec0:	e0bffd17 	ldw	r2,-12(fp)
   18ec4:	10bfffc4 	addi	r2,r2,-1
   18ec8:	e0bff815 	stw	r2,-32(fp)
   18ecc:	e0800317 	ldw	r2,12(fp)
   18ed0:	10800058 	cmpnei	r2,r2,1
   18ed4:	1000041e 	bne	r2,zero,18ee8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
   18ed8:	e0bfee17 	ldw	r2,-72(fp)
   18edc:	10800c17 	ldw	r2,48(r2)
   18ee0:	e0bfff15 	stw	r2,-4(fp)
   18ee4:	00000306 	br	18ef4 <alt_up_pixel_buffer_dma_draw_box+0x118>
   18ee8:	e0bfee17 	ldw	r2,-72(fp)
   18eec:	10800b17 	ldw	r2,44(r2)
   18ef0:	e0bfff15 	stw	r2,-4(fp)
   18ef4:	e0bfee17 	ldw	r2,-72(fp)
   18ef8:	10800d17 	ldw	r2,52(r2)
   18efc:	1004c03a 	cmpne	r2,r2,zero
   18f00:	1000721e 	bne	r2,zero,190cc <alt_up_pixel_buffer_dma_draw_box+0x2f0>
   18f04:	e0bfee17 	ldw	r2,-72(fp)
   18f08:	10801317 	ldw	r2,76(r2)
   18f0c:	e0bff415 	stw	r2,-48(fp)
   18f10:	e0bff417 	ldw	r2,-48(fp)
   18f14:	e0fff917 	ldw	r3,-28(fp)
   18f18:	1884983a 	sll	r2,r3,r2
   18f1c:	e13fff17 	ldw	r4,-4(fp)
   18f20:	2089883a 	add	r4,r4,r2
   18f24:	e13fff15 	stw	r4,-4(fp)
   18f28:	e0bfee17 	ldw	r2,-72(fp)
   18f2c:	10800e17 	ldw	r2,56(r2)
   18f30:	10800058 	cmpnei	r2,r2,1
   18f34:	10001e1e 	bne	r2,zero,18fb0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
   18f38:	e0bff917 	ldw	r2,-28(fp)
   18f3c:	e0bff515 	stw	r2,-44(fp)
   18f40:	00001706 	br	18fa0 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
   18f44:	e0fffb17 	ldw	r3,-20(fp)
   18f48:	e0fff615 	stw	r3,-40(fp)
   18f4c:	00000806 	br	18f70 <alt_up_pixel_buffer_dma_draw_box+0x194>
   18f50:	e0ffff17 	ldw	r3,-4(fp)
   18f54:	e0bff617 	ldw	r2,-40(fp)
   18f58:	1885883a 	add	r2,r3,r2
   18f5c:	e0fff717 	ldw	r3,-36(fp)
   18f60:	10c00025 	stbio	r3,0(r2)
   18f64:	e13ff617 	ldw	r4,-40(fp)
   18f68:	21000044 	addi	r4,r4,1
   18f6c:	e13ff615 	stw	r4,-40(fp)
   18f70:	e0bffa17 	ldw	r2,-24(fp)
   18f74:	e0fff617 	ldw	r3,-40(fp)
   18f78:	10fff52e 	bgeu	r2,r3,18f50 <alt_up_pixel_buffer_dma_draw_box+0x174>
   18f7c:	e0fff417 	ldw	r3,-48(fp)
   18f80:	00800044 	movi	r2,1
   18f84:	10c4983a 	sll	r2,r2,r3
   18f88:	e13fff17 	ldw	r4,-4(fp)
   18f8c:	2089883a 	add	r4,r4,r2
   18f90:	e13fff15 	stw	r4,-4(fp)
   18f94:	e0bff517 	ldw	r2,-44(fp)
   18f98:	10800044 	addi	r2,r2,1
   18f9c:	e0bff515 	stw	r2,-44(fp)
   18fa0:	e0fff817 	ldw	r3,-32(fp)
   18fa4:	e13ff517 	ldw	r4,-44(fp)
   18fa8:	193fe62e 	bgeu	r3,r4,18f44 <alt_up_pixel_buffer_dma_draw_box+0x168>
   18fac:	0000c406 	br	192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   18fb0:	e0bfee17 	ldw	r2,-72(fp)
   18fb4:	10800e17 	ldw	r2,56(r2)
   18fb8:	10800098 	cmpnei	r2,r2,2
   18fbc:	1000211e 	bne	r2,zero,19044 <alt_up_pixel_buffer_dma_draw_box+0x268>
   18fc0:	e0bff917 	ldw	r2,-28(fp)
   18fc4:	e0bff515 	stw	r2,-44(fp)
   18fc8:	00001a06 	br	19034 <alt_up_pixel_buffer_dma_draw_box+0x258>
   18fcc:	e0fffb17 	ldw	r3,-20(fp)
   18fd0:	e0fff615 	stw	r3,-40(fp)
   18fd4:	00000b06 	br	19004 <alt_up_pixel_buffer_dma_draw_box+0x228>
   18fd8:	e13ff617 	ldw	r4,-40(fp)
   18fdc:	e13ff617 	ldw	r4,-40(fp)
   18fe0:	2105883a 	add	r2,r4,r4
   18fe4:	1007883a 	mov	r3,r2
   18fe8:	e0bfff17 	ldw	r2,-4(fp)
   18fec:	1885883a 	add	r2,r3,r2
   18ff0:	e0fff717 	ldw	r3,-36(fp)
   18ff4:	10c0002d 	sthio	r3,0(r2)
   18ff8:	e0bff617 	ldw	r2,-40(fp)
   18ffc:	10800044 	addi	r2,r2,1
   19000:	e0bff615 	stw	r2,-40(fp)
   19004:	e0fffa17 	ldw	r3,-24(fp)
   19008:	e13ff617 	ldw	r4,-40(fp)
   1900c:	193ff22e 	bgeu	r3,r4,18fd8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
   19010:	e0fff417 	ldw	r3,-48(fp)
   19014:	00800044 	movi	r2,1
   19018:	10c4983a 	sll	r2,r2,r3
   1901c:	e0ffff17 	ldw	r3,-4(fp)
   19020:	1887883a 	add	r3,r3,r2
   19024:	e0ffff15 	stw	r3,-4(fp)
   19028:	e13ff517 	ldw	r4,-44(fp)
   1902c:	21000044 	addi	r4,r4,1
   19030:	e13ff515 	stw	r4,-44(fp)
   19034:	e0bff817 	ldw	r2,-32(fp)
   19038:	e0fff517 	ldw	r3,-44(fp)
   1903c:	10ffe32e 	bgeu	r2,r3,18fcc <alt_up_pixel_buffer_dma_draw_box+0x1f0>
   19040:	00009f06 	br	192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   19044:	e13ff917 	ldw	r4,-28(fp)
   19048:	e13ff515 	stw	r4,-44(fp)
   1904c:	00001b06 	br	190bc <alt_up_pixel_buffer_dma_draw_box+0x2e0>
   19050:	e0bffb17 	ldw	r2,-20(fp)
   19054:	e0bff615 	stw	r2,-40(fp)
   19058:	00000c06 	br	1908c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
   1905c:	e0fff617 	ldw	r3,-40(fp)
   19060:	e0fff617 	ldw	r3,-40(fp)
   19064:	18c5883a 	add	r2,r3,r3
   19068:	1085883a 	add	r2,r2,r2
   1906c:	1007883a 	mov	r3,r2
   19070:	e0bfff17 	ldw	r2,-4(fp)
   19074:	1885883a 	add	r2,r3,r2
   19078:	e0fff717 	ldw	r3,-36(fp)
   1907c:	10c00035 	stwio	r3,0(r2)
   19080:	e13ff617 	ldw	r4,-40(fp)
   19084:	21000044 	addi	r4,r4,1
   19088:	e13ff615 	stw	r4,-40(fp)
   1908c:	e0bffa17 	ldw	r2,-24(fp)
   19090:	e0fff617 	ldw	r3,-40(fp)
   19094:	10fff12e 	bgeu	r2,r3,1905c <alt_up_pixel_buffer_dma_draw_box+0x280>
   19098:	e0fff417 	ldw	r3,-48(fp)
   1909c:	00800044 	movi	r2,1
   190a0:	10c4983a 	sll	r2,r2,r3
   190a4:	e13fff17 	ldw	r4,-4(fp)
   190a8:	2089883a 	add	r4,r4,r2
   190ac:	e13fff15 	stw	r4,-4(fp)
   190b0:	e0bff517 	ldw	r2,-44(fp)
   190b4:	10800044 	addi	r2,r2,1
   190b8:	e0bff515 	stw	r2,-44(fp)
   190bc:	e0fff817 	ldw	r3,-32(fp)
   190c0:	e13ff517 	ldw	r4,-44(fp)
   190c4:	193fe22e 	bgeu	r3,r4,19050 <alt_up_pixel_buffer_dma_draw_box+0x274>
   190c8:	00007d06 	br	192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   190cc:	e0bfee17 	ldw	r2,-72(fp)
   190d0:	10800e17 	ldw	r2,56(r2)
   190d4:	10800058 	cmpnei	r2,r2,1
   190d8:	1000221e 	bne	r2,zero,19164 <alt_up_pixel_buffer_dma_draw_box+0x388>
   190dc:	e0fff917 	ldw	r3,-28(fp)
   190e0:	e13ffe17 	ldw	r4,-8(fp)
   190e4:	1905383a 	mul	r2,r3,r4
   190e8:	e0ffff17 	ldw	r3,-4(fp)
   190ec:	1887883a 	add	r3,r3,r2
   190f0:	e0ffff15 	stw	r3,-4(fp)
   190f4:	e13ff917 	ldw	r4,-28(fp)
   190f8:	e13ff215 	stw	r4,-56(fp)
   190fc:	00001506 	br	19154 <alt_up_pixel_buffer_dma_draw_box+0x378>
   19100:	e0bffb17 	ldw	r2,-20(fp)
   19104:	e0bff315 	stw	r2,-52(fp)
   19108:	00000806 	br	1912c <alt_up_pixel_buffer_dma_draw_box+0x350>
   1910c:	e0ffff17 	ldw	r3,-4(fp)
   19110:	e0bff317 	ldw	r2,-52(fp)
   19114:	1885883a 	add	r2,r3,r2
   19118:	e0fff717 	ldw	r3,-36(fp)
   1911c:	10c00025 	stbio	r3,0(r2)
   19120:	e0fff317 	ldw	r3,-52(fp)
   19124:	18c00044 	addi	r3,r3,1
   19128:	e0fff315 	stw	r3,-52(fp)
   1912c:	e13ffa17 	ldw	r4,-24(fp)
   19130:	e0bff317 	ldw	r2,-52(fp)
   19134:	20bff52e 	bgeu	r4,r2,1910c <alt_up_pixel_buffer_dma_draw_box+0x330>
   19138:	e0ffff17 	ldw	r3,-4(fp)
   1913c:	e13ffe17 	ldw	r4,-8(fp)
   19140:	1907883a 	add	r3,r3,r4
   19144:	e0ffff15 	stw	r3,-4(fp)
   19148:	e0bff217 	ldw	r2,-56(fp)
   1914c:	10800044 	addi	r2,r2,1
   19150:	e0bff215 	stw	r2,-56(fp)
   19154:	e0fff817 	ldw	r3,-32(fp)
   19158:	e13ff217 	ldw	r4,-56(fp)
   1915c:	193fe82e 	bgeu	r3,r4,19100 <alt_up_pixel_buffer_dma_draw_box+0x324>
   19160:	00005706 	br	192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   19164:	e0bfee17 	ldw	r2,-72(fp)
   19168:	10800e17 	ldw	r2,56(r2)
   1916c:	10800098 	cmpnei	r2,r2,2
   19170:	1000291e 	bne	r2,zero,19218 <alt_up_pixel_buffer_dma_draw_box+0x43c>
   19174:	e0fffe17 	ldw	r3,-8(fp)
   19178:	e0fffe17 	ldw	r3,-8(fp)
   1917c:	18c5883a 	add	r2,r3,r3
   19180:	e0bffe15 	stw	r2,-8(fp)
   19184:	e13ff917 	ldw	r4,-28(fp)
   19188:	e0fffe17 	ldw	r3,-8(fp)
   1918c:	20c5383a 	mul	r2,r4,r3
   19190:	e13fff17 	ldw	r4,-4(fp)
   19194:	2089883a 	add	r4,r4,r2
   19198:	e13fff15 	stw	r4,-4(fp)
   1919c:	e0bff917 	ldw	r2,-28(fp)
   191a0:	e0bff215 	stw	r2,-56(fp)
   191a4:	00001806 	br	19208 <alt_up_pixel_buffer_dma_draw_box+0x42c>
   191a8:	e0fffb17 	ldw	r3,-20(fp)
   191ac:	e0fff315 	stw	r3,-52(fp)
   191b0:	00000b06 	br	191e0 <alt_up_pixel_buffer_dma_draw_box+0x404>
   191b4:	e13ff317 	ldw	r4,-52(fp)
   191b8:	e13ff317 	ldw	r4,-52(fp)
   191bc:	2105883a 	add	r2,r4,r4
   191c0:	1007883a 	mov	r3,r2
   191c4:	e0bfff17 	ldw	r2,-4(fp)
   191c8:	1885883a 	add	r2,r3,r2
   191cc:	e0fff717 	ldw	r3,-36(fp)
   191d0:	10c0002d 	sthio	r3,0(r2)
   191d4:	e0bff317 	ldw	r2,-52(fp)
   191d8:	10800044 	addi	r2,r2,1
   191dc:	e0bff315 	stw	r2,-52(fp)
   191e0:	e0fffa17 	ldw	r3,-24(fp)
   191e4:	e13ff317 	ldw	r4,-52(fp)
   191e8:	193ff22e 	bgeu	r3,r4,191b4 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
   191ec:	e0bfff17 	ldw	r2,-4(fp)
   191f0:	e0fffe17 	ldw	r3,-8(fp)
   191f4:	10c5883a 	add	r2,r2,r3
   191f8:	e0bfff15 	stw	r2,-4(fp)
   191fc:	e13ff217 	ldw	r4,-56(fp)
   19200:	21000044 	addi	r4,r4,1
   19204:	e13ff215 	stw	r4,-56(fp)
   19208:	e0bff817 	ldw	r2,-32(fp)
   1920c:	e0fff217 	ldw	r3,-56(fp)
   19210:	10ffe52e 	bgeu	r2,r3,191a8 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   19214:	00002a06 	br	192c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   19218:	e13ffe17 	ldw	r4,-8(fp)
   1921c:	e13ffe17 	ldw	r4,-8(fp)
   19220:	2105883a 	add	r2,r4,r4
   19224:	1085883a 	add	r2,r2,r2
   19228:	e0bffe15 	stw	r2,-8(fp)
   1922c:	e0fff917 	ldw	r3,-28(fp)
   19230:	e13ffe17 	ldw	r4,-8(fp)
   19234:	1905383a 	mul	r2,r3,r4
   19238:	e0ffff17 	ldw	r3,-4(fp)
   1923c:	1887883a 	add	r3,r3,r2
   19240:	e0ffff15 	stw	r3,-4(fp)
   19244:	e13ff917 	ldw	r4,-28(fp)
   19248:	e13ff215 	stw	r4,-56(fp)
   1924c:	00001906 	br	192b4 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
   19250:	e0bffb17 	ldw	r2,-20(fp)
   19254:	e0bff315 	stw	r2,-52(fp)
   19258:	00000c06 	br	1928c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
   1925c:	e0fff317 	ldw	r3,-52(fp)
   19260:	e0fff317 	ldw	r3,-52(fp)
   19264:	18c5883a 	add	r2,r3,r3
   19268:	1085883a 	add	r2,r2,r2
   1926c:	1007883a 	mov	r3,r2
   19270:	e0bfff17 	ldw	r2,-4(fp)
   19274:	1885883a 	add	r2,r3,r2
   19278:	e0fff717 	ldw	r3,-36(fp)
   1927c:	10c00035 	stwio	r3,0(r2)
   19280:	e13ff317 	ldw	r4,-52(fp)
   19284:	21000044 	addi	r4,r4,1
   19288:	e13ff315 	stw	r4,-52(fp)
   1928c:	e0bffa17 	ldw	r2,-24(fp)
   19290:	e0fff317 	ldw	r3,-52(fp)
   19294:	10fff12e 	bgeu	r2,r3,1925c <alt_up_pixel_buffer_dma_draw_box+0x480>
   19298:	e13fff17 	ldw	r4,-4(fp)
   1929c:	e0bffe17 	ldw	r2,-8(fp)
   192a0:	2089883a 	add	r4,r4,r2
   192a4:	e13fff15 	stw	r4,-4(fp)
   192a8:	e0fff217 	ldw	r3,-56(fp)
   192ac:	18c00044 	addi	r3,r3,1
   192b0:	e0fff215 	stw	r3,-56(fp)
   192b4:	e13ff817 	ldw	r4,-32(fp)
   192b8:	e0bff217 	ldw	r2,-56(fp)
   192bc:	20bfe42e 	bgeu	r4,r2,19250 <alt_up_pixel_buffer_dma_draw_box+0x474>
   192c0:	e037883a 	mov	sp,fp
   192c4:	df000017 	ldw	fp,0(sp)
   192c8:	dec00104 	addi	sp,sp,4
   192cc:	f800283a 	ret

000192d0 <alt_up_pixel_buffer_dma_draw_hline>:
   192d0:	defff204 	addi	sp,sp,-56
   192d4:	df000d15 	stw	fp,52(sp)
   192d8:	df000d04 	addi	fp,sp,52
   192dc:	e13ff315 	stw	r4,-52(fp)
   192e0:	e17ff415 	stw	r5,-48(fp)
   192e4:	e1bff515 	stw	r6,-44(fp)
   192e8:	e1fff615 	stw	r7,-40(fp)
   192ec:	e0bff317 	ldw	r2,-52(fp)
   192f0:	10800f17 	ldw	r2,60(r2)
   192f4:	e0bffe15 	stw	r2,-8(fp)
   192f8:	e0bff317 	ldw	r2,-52(fp)
   192fc:	10801017 	ldw	r2,64(r2)
   19300:	e0bffd15 	stw	r2,-12(fp)
   19304:	e0bff417 	ldw	r2,-48(fp)
   19308:	e0bffc15 	stw	r2,-16(fp)
   1930c:	e0fff517 	ldw	r3,-44(fp)
   19310:	e0fffb15 	stw	r3,-20(fp)
   19314:	e13ff617 	ldw	r4,-40(fp)
   19318:	e13ffa15 	stw	r4,-24(fp)
   1931c:	e0800117 	ldw	r2,4(fp)
   19320:	e0bff915 	stw	r2,-28(fp)
   19324:	e0fffb17 	ldw	r3,-20(fp)
   19328:	e13ffc17 	ldw	r4,-16(fp)
   1932c:	1900042e 	bgeu	r3,r4,19340 <alt_up_pixel_buffer_dma_draw_hline+0x70>
   19330:	e0bffc17 	ldw	r2,-16(fp)
   19334:	e0fffb17 	ldw	r3,-20(fp)
   19338:	e0fffc15 	stw	r3,-16(fp)
   1933c:	e0bffb15 	stw	r2,-20(fp)
   19340:	e13ffc17 	ldw	r4,-16(fp)
   19344:	e0bffe17 	ldw	r2,-8(fp)
   19348:	2080b12e 	bgeu	r4,r2,19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   1934c:	e0fffa17 	ldw	r3,-24(fp)
   19350:	e13ffd17 	ldw	r4,-12(fp)
   19354:	19000136 	bltu	r3,r4,1935c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
   19358:	0000ad06 	br	19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   1935c:	e0bffb17 	ldw	r2,-20(fp)
   19360:	e0fffe17 	ldw	r3,-8(fp)
   19364:	10c00336 	bltu	r2,r3,19374 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
   19368:	e13ffe17 	ldw	r4,-8(fp)
   1936c:	213fffc4 	addi	r4,r4,-1
   19370:	e13ffb15 	stw	r4,-20(fp)
   19374:	e0800217 	ldw	r2,8(fp)
   19378:	10800058 	cmpnei	r2,r2,1
   1937c:	1000041e 	bne	r2,zero,19390 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
   19380:	e0bff317 	ldw	r2,-52(fp)
   19384:	10800c17 	ldw	r2,48(r2)
   19388:	e0bfff15 	stw	r2,-4(fp)
   1938c:	00000306 	br	1939c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
   19390:	e0bff317 	ldw	r2,-52(fp)
   19394:	10800b17 	ldw	r2,44(r2)
   19398:	e0bfff15 	stw	r2,-4(fp)
   1939c:	e0bff317 	ldw	r2,-52(fp)
   193a0:	10800d17 	ldw	r2,52(r2)
   193a4:	1004c03a 	cmpne	r2,r2,zero
   193a8:	1000431e 	bne	r2,zero,194b8 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
   193ac:	e0bff317 	ldw	r2,-52(fp)
   193b0:	10801317 	ldw	r2,76(r2)
   193b4:	e0fffa17 	ldw	r3,-24(fp)
   193b8:	1884983a 	sll	r2,r3,r2
   193bc:	e13fff17 	ldw	r4,-4(fp)
   193c0:	2089883a 	add	r4,r4,r2
   193c4:	e13fff15 	stw	r4,-4(fp)
   193c8:	e0bff317 	ldw	r2,-52(fp)
   193cc:	10800e17 	ldw	r2,56(r2)
   193d0:	10800058 	cmpnei	r2,r2,1
   193d4:	10000f1e 	bne	r2,zero,19414 <alt_up_pixel_buffer_dma_draw_hline+0x144>
   193d8:	e0bffc17 	ldw	r2,-16(fp)
   193dc:	e0bff815 	stw	r2,-32(fp)
   193e0:	00000806 	br	19404 <alt_up_pixel_buffer_dma_draw_hline+0x134>
   193e4:	e0ffff17 	ldw	r3,-4(fp)
   193e8:	e0bff817 	ldw	r2,-32(fp)
   193ec:	1885883a 	add	r2,r3,r2
   193f0:	e0fff917 	ldw	r3,-28(fp)
   193f4:	10c00025 	stbio	r3,0(r2)
   193f8:	e0fff817 	ldw	r3,-32(fp)
   193fc:	18c00044 	addi	r3,r3,1
   19400:	e0fff815 	stw	r3,-32(fp)
   19404:	e13ffb17 	ldw	r4,-20(fp)
   19408:	e0bff817 	ldw	r2,-32(fp)
   1940c:	20bff52e 	bgeu	r4,r2,193e4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
   19410:	00007f06 	br	19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   19414:	e0bff317 	ldw	r2,-52(fp)
   19418:	10800e17 	ldw	r2,56(r2)
   1941c:	10800098 	cmpnei	r2,r2,2
   19420:	1000121e 	bne	r2,zero,1946c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
   19424:	e0fffc17 	ldw	r3,-16(fp)
   19428:	e0fff815 	stw	r3,-32(fp)
   1942c:	00000b06 	br	1945c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
   19430:	e13ff817 	ldw	r4,-32(fp)
   19434:	e13ff817 	ldw	r4,-32(fp)
   19438:	2105883a 	add	r2,r4,r4
   1943c:	1007883a 	mov	r3,r2
   19440:	e0bfff17 	ldw	r2,-4(fp)
   19444:	1885883a 	add	r2,r3,r2
   19448:	e0fff917 	ldw	r3,-28(fp)
   1944c:	10c0002d 	sthio	r3,0(r2)
   19450:	e0bff817 	ldw	r2,-32(fp)
   19454:	10800044 	addi	r2,r2,1
   19458:	e0bff815 	stw	r2,-32(fp)
   1945c:	e0fffb17 	ldw	r3,-20(fp)
   19460:	e13ff817 	ldw	r4,-32(fp)
   19464:	193ff22e 	bgeu	r3,r4,19430 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   19468:	00006906 	br	19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   1946c:	e0bffc17 	ldw	r2,-16(fp)
   19470:	e0bff815 	stw	r2,-32(fp)
   19474:	00000c06 	br	194a8 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
   19478:	e0fff817 	ldw	r3,-32(fp)
   1947c:	e0fff817 	ldw	r3,-32(fp)
   19480:	18c5883a 	add	r2,r3,r3
   19484:	1085883a 	add	r2,r2,r2
   19488:	1007883a 	mov	r3,r2
   1948c:	e0bfff17 	ldw	r2,-4(fp)
   19490:	1885883a 	add	r2,r3,r2
   19494:	e0fff917 	ldw	r3,-28(fp)
   19498:	10c00035 	stwio	r3,0(r2)
   1949c:	e13ff817 	ldw	r4,-32(fp)
   194a0:	21000044 	addi	r4,r4,1
   194a4:	e13ff815 	stw	r4,-32(fp)
   194a8:	e0bffb17 	ldw	r2,-20(fp)
   194ac:	e0fff817 	ldw	r3,-32(fp)
   194b0:	10fff12e 	bgeu	r2,r3,19478 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   194b4:	00005606 	br	19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   194b8:	e0bff317 	ldw	r2,-52(fp)
   194bc:	10800e17 	ldw	r2,56(r2)
   194c0:	10800058 	cmpnei	r2,r2,1
   194c4:	1000151e 	bne	r2,zero,1951c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
   194c8:	e13ffa17 	ldw	r4,-24(fp)
   194cc:	e0fffe17 	ldw	r3,-8(fp)
   194d0:	20c5383a 	mul	r2,r4,r3
   194d4:	e13fff17 	ldw	r4,-4(fp)
   194d8:	2089883a 	add	r4,r4,r2
   194dc:	e13fff15 	stw	r4,-4(fp)
   194e0:	e0bffc17 	ldw	r2,-16(fp)
   194e4:	e0bff715 	stw	r2,-36(fp)
   194e8:	00000806 	br	1950c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
   194ec:	e0ffff17 	ldw	r3,-4(fp)
   194f0:	e0bff717 	ldw	r2,-36(fp)
   194f4:	1885883a 	add	r2,r3,r2
   194f8:	e0fff917 	ldw	r3,-28(fp)
   194fc:	10c00025 	stbio	r3,0(r2)
   19500:	e0fff717 	ldw	r3,-36(fp)
   19504:	18c00044 	addi	r3,r3,1
   19508:	e0fff715 	stw	r3,-36(fp)
   1950c:	e13ffb17 	ldw	r4,-20(fp)
   19510:	e0bff717 	ldw	r2,-36(fp)
   19514:	20bff52e 	bgeu	r4,r2,194ec <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   19518:	00003d06 	br	19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   1951c:	e0bff317 	ldw	r2,-52(fp)
   19520:	10800e17 	ldw	r2,56(r2)
   19524:	10800098 	cmpnei	r2,r2,2
   19528:	10001c1e 	bne	r2,zero,1959c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
   1952c:	e0fffe17 	ldw	r3,-8(fp)
   19530:	e0fffe17 	ldw	r3,-8(fp)
   19534:	18c5883a 	add	r2,r3,r3
   19538:	e0bffe15 	stw	r2,-8(fp)
   1953c:	e13ffa17 	ldw	r4,-24(fp)
   19540:	e0fffe17 	ldw	r3,-8(fp)
   19544:	20c5383a 	mul	r2,r4,r3
   19548:	e13fff17 	ldw	r4,-4(fp)
   1954c:	2089883a 	add	r4,r4,r2
   19550:	e13fff15 	stw	r4,-4(fp)
   19554:	e0bffc17 	ldw	r2,-16(fp)
   19558:	e0bff715 	stw	r2,-36(fp)
   1955c:	00000b06 	br	1958c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
   19560:	e0fff717 	ldw	r3,-36(fp)
   19564:	e0fff717 	ldw	r3,-36(fp)
   19568:	18c5883a 	add	r2,r3,r3
   1956c:	1007883a 	mov	r3,r2
   19570:	e0bfff17 	ldw	r2,-4(fp)
   19574:	1885883a 	add	r2,r3,r2
   19578:	e0fff917 	ldw	r3,-28(fp)
   1957c:	10c0002d 	sthio	r3,0(r2)
   19580:	e13ff717 	ldw	r4,-36(fp)
   19584:	21000044 	addi	r4,r4,1
   19588:	e13ff715 	stw	r4,-36(fp)
   1958c:	e0bffb17 	ldw	r2,-20(fp)
   19590:	e0fff717 	ldw	r3,-36(fp)
   19594:	10fff22e 	bgeu	r2,r3,19560 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   19598:	00001d06 	br	19610 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   1959c:	e13ffe17 	ldw	r4,-8(fp)
   195a0:	e13ffe17 	ldw	r4,-8(fp)
   195a4:	2105883a 	add	r2,r4,r4
   195a8:	1085883a 	add	r2,r2,r2
   195ac:	e0bffe15 	stw	r2,-8(fp)
   195b0:	e0fffa17 	ldw	r3,-24(fp)
   195b4:	e13ffe17 	ldw	r4,-8(fp)
   195b8:	1905383a 	mul	r2,r3,r4
   195bc:	e0ffff17 	ldw	r3,-4(fp)
   195c0:	1887883a 	add	r3,r3,r2
   195c4:	e0ffff15 	stw	r3,-4(fp)
   195c8:	e13ffc17 	ldw	r4,-16(fp)
   195cc:	e13ff715 	stw	r4,-36(fp)
   195d0:	00000c06 	br	19604 <alt_up_pixel_buffer_dma_draw_hline+0x334>
   195d4:	e0fff717 	ldw	r3,-36(fp)
   195d8:	e0fff717 	ldw	r3,-36(fp)
   195dc:	18c5883a 	add	r2,r3,r3
   195e0:	1085883a 	add	r2,r2,r2
   195e4:	1007883a 	mov	r3,r2
   195e8:	e0bfff17 	ldw	r2,-4(fp)
   195ec:	1885883a 	add	r2,r3,r2
   195f0:	e0fff917 	ldw	r3,-28(fp)
   195f4:	10c00035 	stwio	r3,0(r2)
   195f8:	e13ff717 	ldw	r4,-36(fp)
   195fc:	21000044 	addi	r4,r4,1
   19600:	e13ff715 	stw	r4,-36(fp)
   19604:	e0bffb17 	ldw	r2,-20(fp)
   19608:	e0fff717 	ldw	r3,-36(fp)
   1960c:	10fff12e 	bgeu	r2,r3,195d4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
   19610:	e037883a 	mov	sp,fp
   19614:	df000017 	ldw	fp,0(sp)
   19618:	dec00104 	addi	sp,sp,4
   1961c:	f800283a 	ret

00019620 <alt_up_pixel_buffer_dma_draw_vline>:
   19620:	defff104 	addi	sp,sp,-60
   19624:	df000e15 	stw	fp,56(sp)
   19628:	df000e04 	addi	fp,sp,56
   1962c:	e13ff215 	stw	r4,-56(fp)
   19630:	e17ff315 	stw	r5,-52(fp)
   19634:	e1bff415 	stw	r6,-48(fp)
   19638:	e1fff515 	stw	r7,-44(fp)
   1963c:	e0bff217 	ldw	r2,-56(fp)
   19640:	10800f17 	ldw	r2,60(r2)
   19644:	e0bffe15 	stw	r2,-8(fp)
   19648:	e0bff217 	ldw	r2,-56(fp)
   1964c:	10801017 	ldw	r2,64(r2)
   19650:	e0bffd15 	stw	r2,-12(fp)
   19654:	e0bff317 	ldw	r2,-52(fp)
   19658:	e0bffc15 	stw	r2,-16(fp)
   1965c:	e0fff417 	ldw	r3,-48(fp)
   19660:	e0fffb15 	stw	r3,-20(fp)
   19664:	e13ff517 	ldw	r4,-44(fp)
   19668:	e13ffa15 	stw	r4,-24(fp)
   1966c:	e0800117 	ldw	r2,4(fp)
   19670:	e0bff915 	stw	r2,-28(fp)
   19674:	e0fffa17 	ldw	r3,-24(fp)
   19678:	e13ffb17 	ldw	r4,-20(fp)
   1967c:	1900042e 	bgeu	r3,r4,19690 <alt_up_pixel_buffer_dma_draw_vline+0x70>
   19680:	e0bffb17 	ldw	r2,-20(fp)
   19684:	e0fffa17 	ldw	r3,-24(fp)
   19688:	e0fffb15 	stw	r3,-20(fp)
   1968c:	e0bffa15 	stw	r2,-24(fp)
   19690:	e13ffc17 	ldw	r4,-16(fp)
   19694:	e0bffe17 	ldw	r2,-8(fp)
   19698:	2080d12e 	bgeu	r4,r2,199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1969c:	e0fffb17 	ldw	r3,-20(fp)
   196a0:	e13ffd17 	ldw	r4,-12(fp)
   196a4:	19000136 	bltu	r3,r4,196ac <alt_up_pixel_buffer_dma_draw_vline+0x8c>
   196a8:	0000cd06 	br	199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   196ac:	e0bffa17 	ldw	r2,-24(fp)
   196b0:	e0fffd17 	ldw	r3,-12(fp)
   196b4:	10c00336 	bltu	r2,r3,196c4 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
   196b8:	e13ffd17 	ldw	r4,-12(fp)
   196bc:	213fffc4 	addi	r4,r4,-1
   196c0:	e13ffa15 	stw	r4,-24(fp)
   196c4:	e0800217 	ldw	r2,8(fp)
   196c8:	10800058 	cmpnei	r2,r2,1
   196cc:	1000041e 	bne	r2,zero,196e0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
   196d0:	e0bff217 	ldw	r2,-56(fp)
   196d4:	10800c17 	ldw	r2,48(r2)
   196d8:	e0bfff15 	stw	r2,-4(fp)
   196dc:	00000306 	br	196ec <alt_up_pixel_buffer_dma_draw_vline+0xcc>
   196e0:	e0bff217 	ldw	r2,-56(fp)
   196e4:	10800b17 	ldw	r2,44(r2)
   196e8:	e0bfff15 	stw	r2,-4(fp)
   196ec:	e0bff217 	ldw	r2,-56(fp)
   196f0:	10800d17 	ldw	r2,52(r2)
   196f4:	1004c03a 	cmpne	r2,r2,zero
   196f8:	1000571e 	bne	r2,zero,19858 <alt_up_pixel_buffer_dma_draw_vline+0x238>
   196fc:	e0bff217 	ldw	r2,-56(fp)
   19700:	10801317 	ldw	r2,76(r2)
   19704:	e0bff715 	stw	r2,-36(fp)
   19708:	e0bff717 	ldw	r2,-36(fp)
   1970c:	e0fffb17 	ldw	r3,-20(fp)
   19710:	1884983a 	sll	r2,r3,r2
   19714:	e13fff17 	ldw	r4,-4(fp)
   19718:	2089883a 	add	r4,r4,r2
   1971c:	e13fff15 	stw	r4,-4(fp)
   19720:	e0bff217 	ldw	r2,-56(fp)
   19724:	10800e17 	ldw	r2,56(r2)
   19728:	10800058 	cmpnei	r2,r2,1
   1972c:	1000151e 	bne	r2,zero,19784 <alt_up_pixel_buffer_dma_draw_vline+0x164>
   19730:	e0bffb17 	ldw	r2,-20(fp)
   19734:	e0bff815 	stw	r2,-32(fp)
   19738:	00000e06 	br	19774 <alt_up_pixel_buffer_dma_draw_vline+0x154>
   1973c:	e0ffff17 	ldw	r3,-4(fp)
   19740:	e0bffc17 	ldw	r2,-16(fp)
   19744:	1885883a 	add	r2,r3,r2
   19748:	e0fff917 	ldw	r3,-28(fp)
   1974c:	10c00025 	stbio	r3,0(r2)
   19750:	e0fff717 	ldw	r3,-36(fp)
   19754:	00800044 	movi	r2,1
   19758:	10c4983a 	sll	r2,r2,r3
   1975c:	e0ffff17 	ldw	r3,-4(fp)
   19760:	1887883a 	add	r3,r3,r2
   19764:	e0ffff15 	stw	r3,-4(fp)
   19768:	e13ff817 	ldw	r4,-32(fp)
   1976c:	21000044 	addi	r4,r4,1
   19770:	e13ff815 	stw	r4,-32(fp)
   19774:	e0bffa17 	ldw	r2,-24(fp)
   19778:	e0fff817 	ldw	r3,-32(fp)
   1977c:	10ffef2e 	bgeu	r2,r3,1973c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   19780:	00009706 	br	199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   19784:	e0bff217 	ldw	r2,-56(fp)
   19788:	10800e17 	ldw	r2,56(r2)
   1978c:	10800098 	cmpnei	r2,r2,2
   19790:	1000181e 	bne	r2,zero,197f4 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
   19794:	e13ffb17 	ldw	r4,-20(fp)
   19798:	e13ff815 	stw	r4,-32(fp)
   1979c:	00001106 	br	197e4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
   197a0:	e0fffc17 	ldw	r3,-16(fp)
   197a4:	e0fffc17 	ldw	r3,-16(fp)
   197a8:	18c5883a 	add	r2,r3,r3
   197ac:	1007883a 	mov	r3,r2
   197b0:	e0bfff17 	ldw	r2,-4(fp)
   197b4:	1885883a 	add	r2,r3,r2
   197b8:	e0fff917 	ldw	r3,-28(fp)
   197bc:	10c0002d 	sthio	r3,0(r2)
   197c0:	e0fff717 	ldw	r3,-36(fp)
   197c4:	00800044 	movi	r2,1
   197c8:	10c4983a 	sll	r2,r2,r3
   197cc:	e13fff17 	ldw	r4,-4(fp)
   197d0:	2089883a 	add	r4,r4,r2
   197d4:	e13fff15 	stw	r4,-4(fp)
   197d8:	e0bff817 	ldw	r2,-32(fp)
   197dc:	10800044 	addi	r2,r2,1
   197e0:	e0bff815 	stw	r2,-32(fp)
   197e4:	e0fffa17 	ldw	r3,-24(fp)
   197e8:	e13ff817 	ldw	r4,-32(fp)
   197ec:	193fec2e 	bgeu	r3,r4,197a0 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   197f0:	00007b06 	br	199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   197f4:	e0bffb17 	ldw	r2,-20(fp)
   197f8:	e0bff815 	stw	r2,-32(fp)
   197fc:	00001206 	br	19848 <alt_up_pixel_buffer_dma_draw_vline+0x228>
   19800:	e0fffc17 	ldw	r3,-16(fp)
   19804:	e0fffc17 	ldw	r3,-16(fp)
   19808:	18c5883a 	add	r2,r3,r3
   1980c:	1085883a 	add	r2,r2,r2
   19810:	1007883a 	mov	r3,r2
   19814:	e0bfff17 	ldw	r2,-4(fp)
   19818:	1885883a 	add	r2,r3,r2
   1981c:	e0fff917 	ldw	r3,-28(fp)
   19820:	10c00035 	stwio	r3,0(r2)
   19824:	e0fff717 	ldw	r3,-36(fp)
   19828:	00800044 	movi	r2,1
   1982c:	10c4983a 	sll	r2,r2,r3
   19830:	e13fff17 	ldw	r4,-4(fp)
   19834:	2089883a 	add	r4,r4,r2
   19838:	e13fff15 	stw	r4,-4(fp)
   1983c:	e0bff817 	ldw	r2,-32(fp)
   19840:	10800044 	addi	r2,r2,1
   19844:	e0bff815 	stw	r2,-32(fp)
   19848:	e0fffa17 	ldw	r3,-24(fp)
   1984c:	e13ff817 	ldw	r4,-32(fp)
   19850:	193feb2e 	bgeu	r3,r4,19800 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   19854:	00006206 	br	199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   19858:	e0bff217 	ldw	r2,-56(fp)
   1985c:	10800e17 	ldw	r2,56(r2)
   19860:	10800058 	cmpnei	r2,r2,1
   19864:	1000191e 	bne	r2,zero,198cc <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
   19868:	e0fffb17 	ldw	r3,-20(fp)
   1986c:	e13ffe17 	ldw	r4,-8(fp)
   19870:	1905383a 	mul	r2,r3,r4
   19874:	e0ffff17 	ldw	r3,-4(fp)
   19878:	1887883a 	add	r3,r3,r2
   1987c:	e0ffff15 	stw	r3,-4(fp)
   19880:	e13ffb17 	ldw	r4,-20(fp)
   19884:	e13ff615 	stw	r4,-40(fp)
   19888:	00000c06 	br	198bc <alt_up_pixel_buffer_dma_draw_vline+0x29c>
   1988c:	e0ffff17 	ldw	r3,-4(fp)
   19890:	e0bffc17 	ldw	r2,-16(fp)
   19894:	1885883a 	add	r2,r3,r2
   19898:	e0fff917 	ldw	r3,-28(fp)
   1989c:	10c00025 	stbio	r3,0(r2)
   198a0:	e0bfff17 	ldw	r2,-4(fp)
   198a4:	e0fffe17 	ldw	r3,-8(fp)
   198a8:	10c5883a 	add	r2,r2,r3
   198ac:	e0bfff15 	stw	r2,-4(fp)
   198b0:	e13ff617 	ldw	r4,-40(fp)
   198b4:	21000044 	addi	r4,r4,1
   198b8:	e13ff615 	stw	r4,-40(fp)
   198bc:	e0bffa17 	ldw	r2,-24(fp)
   198c0:	e0fff617 	ldw	r3,-40(fp)
   198c4:	10fff12e 	bgeu	r2,r3,1988c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   198c8:	00004506 	br	199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   198cc:	e0bff217 	ldw	r2,-56(fp)
   198d0:	10800e17 	ldw	r2,56(r2)
   198d4:	10800098 	cmpnei	r2,r2,2
   198d8:	1000201e 	bne	r2,zero,1995c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
   198dc:	e13ffe17 	ldw	r4,-8(fp)
   198e0:	e13ffe17 	ldw	r4,-8(fp)
   198e4:	2105883a 	add	r2,r4,r4
   198e8:	e0bffe15 	stw	r2,-8(fp)
   198ec:	e0fffb17 	ldw	r3,-20(fp)
   198f0:	e13ffe17 	ldw	r4,-8(fp)
   198f4:	1905383a 	mul	r2,r3,r4
   198f8:	e0ffff17 	ldw	r3,-4(fp)
   198fc:	1887883a 	add	r3,r3,r2
   19900:	e0ffff15 	stw	r3,-4(fp)
   19904:	e13ffb17 	ldw	r4,-20(fp)
   19908:	e13ff615 	stw	r4,-40(fp)
   1990c:	00000f06 	br	1994c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
   19910:	e0fffc17 	ldw	r3,-16(fp)
   19914:	e0fffc17 	ldw	r3,-16(fp)
   19918:	18c5883a 	add	r2,r3,r3
   1991c:	1007883a 	mov	r3,r2
   19920:	e0bfff17 	ldw	r2,-4(fp)
   19924:	1885883a 	add	r2,r3,r2
   19928:	e0fff917 	ldw	r3,-28(fp)
   1992c:	10c0002d 	sthio	r3,0(r2)
   19930:	e13fff17 	ldw	r4,-4(fp)
   19934:	e0bffe17 	ldw	r2,-8(fp)
   19938:	2089883a 	add	r4,r4,r2
   1993c:	e13fff15 	stw	r4,-4(fp)
   19940:	e0fff617 	ldw	r3,-40(fp)
   19944:	18c00044 	addi	r3,r3,1
   19948:	e0fff615 	stw	r3,-40(fp)
   1994c:	e13ffa17 	ldw	r4,-24(fp)
   19950:	e0bff617 	ldw	r2,-40(fp)
   19954:	20bfee2e 	bgeu	r4,r2,19910 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   19958:	00002106 	br	199e0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1995c:	e0fffe17 	ldw	r3,-8(fp)
   19960:	e0fffe17 	ldw	r3,-8(fp)
   19964:	18c5883a 	add	r2,r3,r3
   19968:	1085883a 	add	r2,r2,r2
   1996c:	e0bffe15 	stw	r2,-8(fp)
   19970:	e13ffb17 	ldw	r4,-20(fp)
   19974:	e0fffe17 	ldw	r3,-8(fp)
   19978:	20c5383a 	mul	r2,r4,r3
   1997c:	e13fff17 	ldw	r4,-4(fp)
   19980:	2089883a 	add	r4,r4,r2
   19984:	e13fff15 	stw	r4,-4(fp)
   19988:	e0bffb17 	ldw	r2,-20(fp)
   1998c:	e0bff615 	stw	r2,-40(fp)
   19990:	00001006 	br	199d4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
   19994:	e0fffc17 	ldw	r3,-16(fp)
   19998:	e0fffc17 	ldw	r3,-16(fp)
   1999c:	18c5883a 	add	r2,r3,r3
   199a0:	1085883a 	add	r2,r2,r2
   199a4:	1007883a 	mov	r3,r2
   199a8:	e0bfff17 	ldw	r2,-4(fp)
   199ac:	1885883a 	add	r2,r3,r2
   199b0:	e0fff917 	ldw	r3,-28(fp)
   199b4:	10c00035 	stwio	r3,0(r2)
   199b8:	e13fff17 	ldw	r4,-4(fp)
   199bc:	e0bffe17 	ldw	r2,-8(fp)
   199c0:	2089883a 	add	r4,r4,r2
   199c4:	e13fff15 	stw	r4,-4(fp)
   199c8:	e0fff617 	ldw	r3,-40(fp)
   199cc:	18c00044 	addi	r3,r3,1
   199d0:	e0fff615 	stw	r3,-40(fp)
   199d4:	e13ffa17 	ldw	r4,-24(fp)
   199d8:	e0bff617 	ldw	r2,-40(fp)
   199dc:	20bfed2e 	bgeu	r4,r2,19994 <alt_up_pixel_buffer_dma_draw_vline+0x374>
   199e0:	e037883a 	mov	sp,fp
   199e4:	df000017 	ldw	fp,0(sp)
   199e8:	dec00104 	addi	sp,sp,4
   199ec:	f800283a 	ret

000199f0 <alt_up_pixel_buffer_dma_draw_rectangle>:
   199f0:	defff804 	addi	sp,sp,-32
   199f4:	dfc00715 	stw	ra,28(sp)
   199f8:	df000615 	stw	fp,24(sp)
   199fc:	df000604 	addi	fp,sp,24
   19a00:	e13ffc15 	stw	r4,-16(fp)
   19a04:	e17ffd15 	stw	r5,-12(fp)
   19a08:	e1bffe15 	stw	r6,-8(fp)
   19a0c:	e1ffff15 	stw	r7,-4(fp)
   19a10:	e0800317 	ldw	r2,12(fp)
   19a14:	d8800015 	stw	r2,0(sp)
   19a18:	e0800417 	ldw	r2,16(fp)
   19a1c:	d8800115 	stw	r2,4(sp)
   19a20:	e13ffc17 	ldw	r4,-16(fp)
   19a24:	e17ffd17 	ldw	r5,-12(fp)
   19a28:	e1bfff17 	ldw	r6,-4(fp)
   19a2c:	e1fffe17 	ldw	r7,-8(fp)
   19a30:	00192d00 	call	192d0 <alt_up_pixel_buffer_dma_draw_hline>
   19a34:	e0800317 	ldw	r2,12(fp)
   19a38:	d8800015 	stw	r2,0(sp)
   19a3c:	e0800417 	ldw	r2,16(fp)
   19a40:	d8800115 	stw	r2,4(sp)
   19a44:	e13ffc17 	ldw	r4,-16(fp)
   19a48:	e17ffd17 	ldw	r5,-12(fp)
   19a4c:	e1bfff17 	ldw	r6,-4(fp)
   19a50:	e1c00217 	ldw	r7,8(fp)
   19a54:	00192d00 	call	192d0 <alt_up_pixel_buffer_dma_draw_hline>
   19a58:	e0800317 	ldw	r2,12(fp)
   19a5c:	d8800015 	stw	r2,0(sp)
   19a60:	e0800417 	ldw	r2,16(fp)
   19a64:	d8800115 	stw	r2,4(sp)
   19a68:	e13ffc17 	ldw	r4,-16(fp)
   19a6c:	e17ffd17 	ldw	r5,-12(fp)
   19a70:	e1bffe17 	ldw	r6,-8(fp)
   19a74:	e1c00217 	ldw	r7,8(fp)
   19a78:	00196200 	call	19620 <alt_up_pixel_buffer_dma_draw_vline>
   19a7c:	e0800317 	ldw	r2,12(fp)
   19a80:	d8800015 	stw	r2,0(sp)
   19a84:	e0800417 	ldw	r2,16(fp)
   19a88:	d8800115 	stw	r2,4(sp)
   19a8c:	e13ffc17 	ldw	r4,-16(fp)
   19a90:	e17fff17 	ldw	r5,-4(fp)
   19a94:	e1bffe17 	ldw	r6,-8(fp)
   19a98:	e1c00217 	ldw	r7,8(fp)
   19a9c:	00196200 	call	19620 <alt_up_pixel_buffer_dma_draw_vline>
   19aa0:	e037883a 	mov	sp,fp
   19aa4:	dfc00117 	ldw	ra,4(sp)
   19aa8:	df000017 	ldw	fp,0(sp)
   19aac:	dec00204 	addi	sp,sp,8
   19ab0:	f800283a 	ret

00019ab4 <helper_plot_pixel>:
   19ab4:	defffb04 	addi	sp,sp,-20
   19ab8:	df000415 	stw	fp,16(sp)
   19abc:	df000404 	addi	fp,sp,16
   19ac0:	e13ffc15 	stw	r4,-16(fp)
   19ac4:	e17ffd15 	stw	r5,-12(fp)
   19ac8:	e1bffe15 	stw	r6,-8(fp)
   19acc:	e1ffff15 	stw	r7,-4(fp)
   19ad0:	e0c00217 	ldw	r3,8(fp)
   19ad4:	1804c03a 	cmpne	r2,r3,zero
   19ad8:	10000b1e 	bne	r2,zero,19b08 <helper_plot_pixel+0x54>
   19adc:	e13ffd17 	ldw	r4,-12(fp)
   19ae0:	e0ffff17 	ldw	r3,-4(fp)
   19ae4:	20c5383a 	mul	r2,r4,r3
   19ae8:	e13ffe17 	ldw	r4,-8(fp)
   19aec:	1105883a 	add	r2,r2,r4
   19af0:	1007883a 	mov	r3,r2
   19af4:	e0bffc17 	ldw	r2,-16(fp)
   19af8:	1885883a 	add	r2,r3,r2
   19afc:	e0c00117 	ldw	r3,4(fp)
   19b00:	10c00025 	stbio	r3,0(r2)
   19b04:	00001b06 	br	19b74 <helper_plot_pixel+0xc0>
   19b08:	e1000217 	ldw	r4,8(fp)
   19b0c:	20800058 	cmpnei	r2,r4,1
   19b10:	10000c1e 	bne	r2,zero,19b44 <helper_plot_pixel+0x90>
   19b14:	e0fffd17 	ldw	r3,-12(fp)
   19b18:	e13fff17 	ldw	r4,-4(fp)
   19b1c:	1905383a 	mul	r2,r3,r4
   19b20:	e0fffe17 	ldw	r3,-8(fp)
   19b24:	10c5883a 	add	r2,r2,r3
   19b28:	1085883a 	add	r2,r2,r2
   19b2c:	1007883a 	mov	r3,r2
   19b30:	e0bffc17 	ldw	r2,-16(fp)
   19b34:	1885883a 	add	r2,r3,r2
   19b38:	e1000117 	ldw	r4,4(fp)
   19b3c:	1100002d 	sthio	r4,0(r2)
   19b40:	00000c06 	br	19b74 <helper_plot_pixel+0xc0>
   19b44:	e0fffd17 	ldw	r3,-12(fp)
   19b48:	e13fff17 	ldw	r4,-4(fp)
   19b4c:	1905383a 	mul	r2,r3,r4
   19b50:	e0fffe17 	ldw	r3,-8(fp)
   19b54:	10c5883a 	add	r2,r2,r3
   19b58:	1085883a 	add	r2,r2,r2
   19b5c:	1085883a 	add	r2,r2,r2
   19b60:	1007883a 	mov	r3,r2
   19b64:	e0bffc17 	ldw	r2,-16(fp)
   19b68:	1885883a 	add	r2,r3,r2
   19b6c:	e1000117 	ldw	r4,4(fp)
   19b70:	11000035 	stwio	r4,0(r2)
   19b74:	e037883a 	mov	sp,fp
   19b78:	df000017 	ldw	fp,0(sp)
   19b7c:	dec00104 	addi	sp,sp,4
   19b80:	f800283a 	ret

00019b84 <alt_up_pixel_buffer_dma_draw_line>:
   19b84:	deffe404 	addi	sp,sp,-112
   19b88:	dfc01b15 	stw	ra,108(sp)
   19b8c:	df001a15 	stw	fp,104(sp)
   19b90:	df001a04 	addi	fp,sp,104
   19b94:	e13fe815 	stw	r4,-96(fp)
   19b98:	e17fe915 	stw	r5,-92(fp)
   19b9c:	e1bfea15 	stw	r6,-88(fp)
   19ba0:	e1ffeb15 	stw	r7,-84(fp)
   19ba4:	e0bfe917 	ldw	r2,-92(fp)
   19ba8:	e0bffa15 	stw	r2,-24(fp)
   19bac:	e0ffea17 	ldw	r3,-88(fp)
   19bb0:	e0fff915 	stw	r3,-28(fp)
   19bb4:	e13feb17 	ldw	r4,-84(fp)
   19bb8:	e13ff815 	stw	r4,-32(fp)
   19bbc:	e0800217 	ldw	r2,8(fp)
   19bc0:	e0bff715 	stw	r2,-36(fp)
   19bc4:	e0fff717 	ldw	r3,-36(fp)
   19bc8:	e13ff917 	ldw	r4,-28(fp)
   19bcc:	1905c83a 	sub	r2,r3,r4
   19bd0:	e0bfff15 	stw	r2,-4(fp)
   19bd4:	e0ffff17 	ldw	r3,-4(fp)
   19bd8:	1804403a 	cmpge	r2,r3,zero
   19bdc:	1000031e 	bne	r2,zero,19bec <alt_up_pixel_buffer_dma_draw_line+0x68>
   19be0:	e13fff17 	ldw	r4,-4(fp)
   19be4:	0109c83a 	sub	r4,zero,r4
   19be8:	e13fff15 	stw	r4,-4(fp)
   19bec:	e0fff817 	ldw	r3,-32(fp)
   19bf0:	e13ffa17 	ldw	r4,-24(fp)
   19bf4:	1905c83a 	sub	r2,r3,r4
   19bf8:	e0bffe15 	stw	r2,-8(fp)
   19bfc:	e0fffe17 	ldw	r3,-8(fp)
   19c00:	1804403a 	cmpge	r2,r3,zero
   19c04:	1000031e 	bne	r2,zero,19c14 <alt_up_pixel_buffer_dma_draw_line+0x90>
   19c08:	e13ffe17 	ldw	r4,-8(fp)
   19c0c:	0109c83a 	sub	r4,zero,r4
   19c10:	e13ffe15 	stw	r4,-8(fp)
   19c14:	e0fffe17 	ldw	r3,-8(fp)
   19c18:	e13fff17 	ldw	r4,-4(fp)
   19c1c:	1904803a 	cmplt	r2,r3,r4
   19c20:	e0bff605 	stb	r2,-40(fp)
   19c24:	e0bfe817 	ldw	r2,-96(fp)
   19c28:	10800e17 	ldw	r2,56(r2)
   19c2c:	10800060 	cmpeqi	r2,r2,1
   19c30:	10000c1e 	bne	r2,zero,19c64 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   19c34:	e0bfe817 	ldw	r2,-96(fp)
   19c38:	10800e17 	ldw	r2,56(r2)
   19c3c:	10800098 	cmpnei	r2,r2,2
   19c40:	1000031e 	bne	r2,zero,19c50 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   19c44:	00800044 	movi	r2,1
   19c48:	e0bffc15 	stw	r2,-16(fp)
   19c4c:	00000206 	br	19c58 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   19c50:	00c00084 	movi	r3,2
   19c54:	e0fffc15 	stw	r3,-16(fp)
   19c58:	e13ffc17 	ldw	r4,-16(fp)
   19c5c:	e13ffd15 	stw	r4,-12(fp)
   19c60:	00000106 	br	19c68 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   19c64:	e03ffd15 	stw	zero,-12(fp)
   19c68:	e0bffd17 	ldw	r2,-12(fp)
   19c6c:	e0bfef15 	stw	r2,-68(fp)
   19c70:	e0c00317 	ldw	r3,12(fp)
   19c74:	e0ffee15 	stw	r3,-72(fp)
   19c78:	e0bfe817 	ldw	r2,-96(fp)
   19c7c:	10800d17 	ldw	r2,52(r2)
   19c80:	1004c03a 	cmpne	r2,r2,zero
   19c84:	1000091e 	bne	r2,zero,19cac <alt_up_pixel_buffer_dma_draw_line+0x128>
   19c88:	e0bfe817 	ldw	r2,-96(fp)
   19c8c:	10c01317 	ldw	r3,76(r2)
   19c90:	e0bfef17 	ldw	r2,-68(fp)
   19c94:	1885c83a 	sub	r2,r3,r2
   19c98:	1007883a 	mov	r3,r2
   19c9c:	00800044 	movi	r2,1
   19ca0:	10c4983a 	sll	r2,r2,r3
   19ca4:	e0bffb15 	stw	r2,-20(fp)
   19ca8:	00000306 	br	19cb8 <alt_up_pixel_buffer_dma_draw_line+0x134>
   19cac:	e0bfe817 	ldw	r2,-96(fp)
   19cb0:	10800f17 	ldw	r2,60(r2)
   19cb4:	e0bffb15 	stw	r2,-20(fp)
   19cb8:	e13ffb17 	ldw	r4,-20(fp)
   19cbc:	e13fec15 	stw	r4,-80(fp)
   19cc0:	e0800417 	ldw	r2,16(fp)
   19cc4:	10800058 	cmpnei	r2,r2,1
   19cc8:	1000041e 	bne	r2,zero,19cdc <alt_up_pixel_buffer_dma_draw_line+0x158>
   19ccc:	e0bfe817 	ldw	r2,-96(fp)
   19cd0:	10800c17 	ldw	r2,48(r2)
   19cd4:	e0bfed15 	stw	r2,-76(fp)
   19cd8:	00000306 	br	19ce8 <alt_up_pixel_buffer_dma_draw_line+0x164>
   19cdc:	e0bfe817 	ldw	r2,-96(fp)
   19ce0:	10800b17 	ldw	r2,44(r2)
   19ce4:	e0bfed15 	stw	r2,-76(fp)
   19ce8:	e0fff603 	ldbu	r3,-40(fp)
   19cec:	18803fcc 	andi	r2,r3,255
   19cf0:	1080201c 	xori	r2,r2,128
   19cf4:	10bfe004 	addi	r2,r2,-128
   19cf8:	10800050 	cmplti	r2,r2,1
   19cfc:	10000c1e 	bne	r2,zero,19d30 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
   19d00:	e13ffa17 	ldw	r4,-24(fp)
   19d04:	e13ff315 	stw	r4,-52(fp)
   19d08:	e0bff917 	ldw	r2,-28(fp)
   19d0c:	e0bffa15 	stw	r2,-24(fp)
   19d10:	e0fff317 	ldw	r3,-52(fp)
   19d14:	e0fff915 	stw	r3,-28(fp)
   19d18:	e13ff817 	ldw	r4,-32(fp)
   19d1c:	e13ff315 	stw	r4,-52(fp)
   19d20:	e0bff717 	ldw	r2,-36(fp)
   19d24:	e0bff815 	stw	r2,-32(fp)
   19d28:	e0fff317 	ldw	r3,-52(fp)
   19d2c:	e0fff715 	stw	r3,-36(fp)
   19d30:	e13ff817 	ldw	r4,-32(fp)
   19d34:	e0bffa17 	ldw	r2,-24(fp)
   19d38:	20800c0e 	bge	r4,r2,19d6c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
   19d3c:	e0fffa17 	ldw	r3,-24(fp)
   19d40:	e0fff315 	stw	r3,-52(fp)
   19d44:	e13ff817 	ldw	r4,-32(fp)
   19d48:	e13ffa15 	stw	r4,-24(fp)
   19d4c:	e0bff317 	ldw	r2,-52(fp)
   19d50:	e0bff815 	stw	r2,-32(fp)
   19d54:	e0fff917 	ldw	r3,-28(fp)
   19d58:	e0fff315 	stw	r3,-52(fp)
   19d5c:	e13ff717 	ldw	r4,-36(fp)
   19d60:	e13ff915 	stw	r4,-28(fp)
   19d64:	e0bff317 	ldw	r2,-52(fp)
   19d68:	e0bff715 	stw	r2,-36(fp)
   19d6c:	e0fff817 	ldw	r3,-32(fp)
   19d70:	e13ffa17 	ldw	r4,-24(fp)
   19d74:	1907c83a 	sub	r3,r3,r4
   19d78:	e0fff515 	stw	r3,-44(fp)
   19d7c:	e0fff717 	ldw	r3,-36(fp)
   19d80:	e13ff917 	ldw	r4,-28(fp)
   19d84:	1905c83a 	sub	r2,r3,r4
   19d88:	e0bff415 	stw	r2,-48(fp)
   19d8c:	e0fff417 	ldw	r3,-48(fp)
   19d90:	1804403a 	cmpge	r2,r3,zero
   19d94:	1000031e 	bne	r2,zero,19da4 <alt_up_pixel_buffer_dma_draw_line+0x220>
   19d98:	e13ff417 	ldw	r4,-48(fp)
   19d9c:	0109c83a 	sub	r4,zero,r4
   19da0:	e13ff415 	stw	r4,-48(fp)
   19da4:	e0fff517 	ldw	r3,-44(fp)
   19da8:	1804d7fa 	srli	r2,r3,31
   19dac:	e13ff517 	ldw	r4,-44(fp)
   19db0:	1105883a 	add	r2,r2,r4
   19db4:	1005d07a 	srai	r2,r2,1
   19db8:	0085c83a 	sub	r2,zero,r2
   19dbc:	e0bff315 	stw	r2,-52(fp)
   19dc0:	e0bff917 	ldw	r2,-28(fp)
   19dc4:	e0bff015 	stw	r2,-64(fp)
   19dc8:	e0fff917 	ldw	r3,-28(fp)
   19dcc:	e13ff717 	ldw	r4,-36(fp)
   19dd0:	1900030e 	bge	r3,r4,19de0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
   19dd4:	00800044 	movi	r2,1
   19dd8:	e0bff215 	stw	r2,-56(fp)
   19ddc:	00000206 	br	19de8 <alt_up_pixel_buffer_dma_draw_line+0x264>
   19de0:	00ffffc4 	movi	r3,-1
   19de4:	e0fff215 	stw	r3,-56(fp)
   19de8:	e13ff603 	ldbu	r4,-40(fp)
   19dec:	20803fcc 	andi	r2,r4,255
   19df0:	1080201c 	xori	r2,r2,128
   19df4:	10bfe004 	addi	r2,r2,-128
   19df8:	10800058 	cmpnei	r2,r2,1
   19dfc:	1000221e 	bne	r2,zero,19e88 <alt_up_pixel_buffer_dma_draw_line+0x304>
   19e00:	e0bffa17 	ldw	r2,-24(fp)
   19e04:	e0bff115 	stw	r2,-60(fp)
   19e08:	00001b06 	br	19e78 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
   19e0c:	e0ffee17 	ldw	r3,-72(fp)
   19e10:	d8c00015 	stw	r3,0(sp)
   19e14:	e13fef17 	ldw	r4,-68(fp)
   19e18:	d9000115 	stw	r4,4(sp)
   19e1c:	e13fed17 	ldw	r4,-76(fp)
   19e20:	e17fec17 	ldw	r5,-80(fp)
   19e24:	e1bff017 	ldw	r6,-64(fp)
   19e28:	e1fff117 	ldw	r7,-60(fp)
   19e2c:	0019ab40 	call	19ab4 <helper_plot_pixel>
   19e30:	e0bff317 	ldw	r2,-52(fp)
   19e34:	e0fff417 	ldw	r3,-48(fp)
   19e38:	10c5883a 	add	r2,r2,r3
   19e3c:	e0bff315 	stw	r2,-52(fp)
   19e40:	e13ff317 	ldw	r4,-52(fp)
   19e44:	20800050 	cmplti	r2,r4,1
   19e48:	1000081e 	bne	r2,zero,19e6c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
   19e4c:	e0bff017 	ldw	r2,-64(fp)
   19e50:	e0fff217 	ldw	r3,-56(fp)
   19e54:	10c5883a 	add	r2,r2,r3
   19e58:	e0bff015 	stw	r2,-64(fp)
   19e5c:	e13ff317 	ldw	r4,-52(fp)
   19e60:	e0bff517 	ldw	r2,-44(fp)
   19e64:	2089c83a 	sub	r4,r4,r2
   19e68:	e13ff315 	stw	r4,-52(fp)
   19e6c:	e0fff117 	ldw	r3,-60(fp)
   19e70:	18c00044 	addi	r3,r3,1
   19e74:	e0fff115 	stw	r3,-60(fp)
   19e78:	e13ff817 	ldw	r4,-32(fp)
   19e7c:	e0bff117 	ldw	r2,-60(fp)
   19e80:	20bfe20e 	bge	r4,r2,19e0c <alt_up_pixel_buffer_dma_draw_line+0x288>
   19e84:	00002106 	br	19f0c <alt_up_pixel_buffer_dma_draw_line+0x388>
   19e88:	e0fffa17 	ldw	r3,-24(fp)
   19e8c:	e0fff115 	stw	r3,-60(fp)
   19e90:	00001b06 	br	19f00 <alt_up_pixel_buffer_dma_draw_line+0x37c>
   19e94:	e13fee17 	ldw	r4,-72(fp)
   19e98:	d9000015 	stw	r4,0(sp)
   19e9c:	e0bfef17 	ldw	r2,-68(fp)
   19ea0:	d8800115 	stw	r2,4(sp)
   19ea4:	e13fed17 	ldw	r4,-76(fp)
   19ea8:	e17fec17 	ldw	r5,-80(fp)
   19eac:	e1bff117 	ldw	r6,-60(fp)
   19eb0:	e1fff017 	ldw	r7,-64(fp)
   19eb4:	0019ab40 	call	19ab4 <helper_plot_pixel>
   19eb8:	e0fff317 	ldw	r3,-52(fp)
   19ebc:	e13ff417 	ldw	r4,-48(fp)
   19ec0:	1907883a 	add	r3,r3,r4
   19ec4:	e0fff315 	stw	r3,-52(fp)
   19ec8:	e0fff317 	ldw	r3,-52(fp)
   19ecc:	18800050 	cmplti	r2,r3,1
   19ed0:	1000081e 	bne	r2,zero,19ef4 <alt_up_pixel_buffer_dma_draw_line+0x370>
   19ed4:	e13ff017 	ldw	r4,-64(fp)
   19ed8:	e0bff217 	ldw	r2,-56(fp)
   19edc:	2089883a 	add	r4,r4,r2
   19ee0:	e13ff015 	stw	r4,-64(fp)
   19ee4:	e0fff317 	ldw	r3,-52(fp)
   19ee8:	e13ff517 	ldw	r4,-44(fp)
   19eec:	1907c83a 	sub	r3,r3,r4
   19ef0:	e0fff315 	stw	r3,-52(fp)
   19ef4:	e0bff117 	ldw	r2,-60(fp)
   19ef8:	10800044 	addi	r2,r2,1
   19efc:	e0bff115 	stw	r2,-60(fp)
   19f00:	e0fff817 	ldw	r3,-32(fp)
   19f04:	e13ff117 	ldw	r4,-60(fp)
   19f08:	193fe20e 	bge	r3,r4,19e94 <alt_up_pixel_buffer_dma_draw_line+0x310>
   19f0c:	e037883a 	mov	sp,fp
   19f10:	dfc00117 	ldw	ra,4(sp)
   19f14:	df000017 	ldw	fp,0(sp)
   19f18:	dec00204 	addi	sp,sp,8
   19f1c:	f800283a 	ret

00019f20 <alt_alarm_start>:
   19f20:	defff404 	addi	sp,sp,-48
   19f24:	df000b15 	stw	fp,44(sp)
   19f28:	df000b04 	addi	fp,sp,44
   19f2c:	e13ffb15 	stw	r4,-20(fp)
   19f30:	e17ffc15 	stw	r5,-16(fp)
   19f34:	e1bffd15 	stw	r6,-12(fp)
   19f38:	e1fffe15 	stw	r7,-8(fp)
   19f3c:	e03ff915 	stw	zero,-28(fp)
   19f40:	00820034 	movhi	r2,2048
   19f44:	108a6904 	addi	r2,r2,10660
   19f48:	10800017 	ldw	r2,0(r2)
   19f4c:	1005003a 	cmpeq	r2,r2,zero
   19f50:	1000411e 	bne	r2,zero,1a058 <alt_alarm_start+0x138>
   19f54:	e0bffb17 	ldw	r2,-20(fp)
   19f58:	1005003a 	cmpeq	r2,r2,zero
   19f5c:	10003b1e 	bne	r2,zero,1a04c <alt_alarm_start+0x12c>
   19f60:	e0fffb17 	ldw	r3,-20(fp)
   19f64:	e0bffd17 	ldw	r2,-12(fp)
   19f68:	18800315 	stw	r2,12(r3)
   19f6c:	e0fffb17 	ldw	r3,-20(fp)
   19f70:	e0bffe17 	ldw	r2,-8(fp)
   19f74:	18800515 	stw	r2,20(r3)
   19f78:	0005303a 	rdctl	r2,status
   19f7c:	e0bff815 	stw	r2,-32(fp)
   19f80:	e0fff817 	ldw	r3,-32(fp)
   19f84:	00bfff84 	movi	r2,-2
   19f88:	1884703a 	and	r2,r3,r2
   19f8c:	1001703a 	wrctl	status,r2
   19f90:	e0bff817 	ldw	r2,-32(fp)
   19f94:	e0bffa15 	stw	r2,-24(fp)
   19f98:	00820034 	movhi	r2,2048
   19f9c:	108a6a04 	addi	r2,r2,10664
   19fa0:	10800017 	ldw	r2,0(r2)
   19fa4:	e0bff915 	stw	r2,-28(fp)
   19fa8:	e0fffc17 	ldw	r3,-16(fp)
   19fac:	e0bff917 	ldw	r2,-28(fp)
   19fb0:	1885883a 	add	r2,r3,r2
   19fb4:	10c00044 	addi	r3,r2,1
   19fb8:	e0bffb17 	ldw	r2,-20(fp)
   19fbc:	10c00215 	stw	r3,8(r2)
   19fc0:	e0bffb17 	ldw	r2,-20(fp)
   19fc4:	10c00217 	ldw	r3,8(r2)
   19fc8:	e0bff917 	ldw	r2,-28(fp)
   19fcc:	1880042e 	bgeu	r3,r2,19fe0 <alt_alarm_start+0xc0>
   19fd0:	e0fffb17 	ldw	r3,-20(fp)
   19fd4:	00800044 	movi	r2,1
   19fd8:	18800405 	stb	r2,16(r3)
   19fdc:	00000206 	br	19fe8 <alt_alarm_start+0xc8>
   19fe0:	e0bffb17 	ldw	r2,-20(fp)
   19fe4:	10000405 	stb	zero,16(r2)
   19fe8:	e0fffb17 	ldw	r3,-20(fp)
   19fec:	00820034 	movhi	r2,2048
   19ff0:	108a3004 	addi	r2,r2,10432
   19ff4:	e0bff615 	stw	r2,-40(fp)
   19ff8:	e0fff715 	stw	r3,-36(fp)
   19ffc:	e0fff717 	ldw	r3,-36(fp)
   1a000:	e0bff617 	ldw	r2,-40(fp)
   1a004:	18800115 	stw	r2,4(r3)
   1a008:	e0bff617 	ldw	r2,-40(fp)
   1a00c:	10c00017 	ldw	r3,0(r2)
   1a010:	e0bff717 	ldw	r2,-36(fp)
   1a014:	10c00015 	stw	r3,0(r2)
   1a018:	e0bff617 	ldw	r2,-40(fp)
   1a01c:	10c00017 	ldw	r3,0(r2)
   1a020:	e0bff717 	ldw	r2,-36(fp)
   1a024:	18800115 	stw	r2,4(r3)
   1a028:	e0fff617 	ldw	r3,-40(fp)
   1a02c:	e0bff717 	ldw	r2,-36(fp)
   1a030:	18800015 	stw	r2,0(r3)
   1a034:	e0bffa17 	ldw	r2,-24(fp)
   1a038:	e0bff515 	stw	r2,-44(fp)
   1a03c:	e0bff517 	ldw	r2,-44(fp)
   1a040:	1001703a 	wrctl	status,r2
   1a044:	e03fff15 	stw	zero,-4(fp)
   1a048:	00000506 	br	1a060 <alt_alarm_start+0x140>
   1a04c:	00bffa84 	movi	r2,-22
   1a050:	e0bfff15 	stw	r2,-4(fp)
   1a054:	00000206 	br	1a060 <alt_alarm_start+0x140>
   1a058:	00bfde84 	movi	r2,-134
   1a05c:	e0bfff15 	stw	r2,-4(fp)
   1a060:	e0bfff17 	ldw	r2,-4(fp)
   1a064:	e037883a 	mov	sp,fp
   1a068:	df000017 	ldw	fp,0(sp)
   1a06c:	dec00104 	addi	sp,sp,4
   1a070:	f800283a 	ret

0001a074 <alt_dcache_flush>:
   1a074:	defffb04 	addi	sp,sp,-20
   1a078:	df000415 	stw	fp,16(sp)
   1a07c:	df000404 	addi	fp,sp,16
   1a080:	e13ffe15 	stw	r4,-8(fp)
   1a084:	e17fff15 	stw	r5,-4(fp)
   1a088:	e0fffe17 	ldw	r3,-8(fp)
   1a08c:	e0bfff17 	ldw	r2,-4(fp)
   1a090:	1885883a 	add	r2,r3,r2
   1a094:	e0bffc15 	stw	r2,-16(fp)
   1a098:	e0bffe17 	ldw	r2,-8(fp)
   1a09c:	e0bffd15 	stw	r2,-12(fp)
   1a0a0:	00000506 	br	1a0b8 <alt_dcache_flush+0x44>
   1a0a4:	e0bffd17 	ldw	r2,-12(fp)
   1a0a8:	1000001b 	flushda	0(r2)
   1a0ac:	e0bffd17 	ldw	r2,-12(fp)
   1a0b0:	10800804 	addi	r2,r2,32
   1a0b4:	e0bffd15 	stw	r2,-12(fp)
   1a0b8:	e0fffd17 	ldw	r3,-12(fp)
   1a0bc:	e0bffc17 	ldw	r2,-16(fp)
   1a0c0:	18bff836 	bltu	r3,r2,1a0a4 <alt_dcache_flush+0x30>
   1a0c4:	e0bffe17 	ldw	r2,-8(fp)
   1a0c8:	108007cc 	andi	r2,r2,31
   1a0cc:	1005003a 	cmpeq	r2,r2,zero
   1a0d0:	1000021e 	bne	r2,zero,1a0dc <alt_dcache_flush+0x68>
   1a0d4:	e0bffd17 	ldw	r2,-12(fp)
   1a0d8:	1000001b 	flushda	0(r2)
   1a0dc:	e037883a 	mov	sp,fp
   1a0e0:	df000017 	ldw	fp,0(sp)
   1a0e4:	dec00104 	addi	sp,sp,4
   1a0e8:	f800283a 	ret

0001a0ec <alt_dev_llist_insert>:
   1a0ec:	defff904 	addi	sp,sp,-28
   1a0f0:	dfc00615 	stw	ra,24(sp)
   1a0f4:	df000515 	stw	fp,20(sp)
   1a0f8:	df000504 	addi	fp,sp,20
   1a0fc:	e13ffd15 	stw	r4,-12(fp)
   1a100:	e17ffe15 	stw	r5,-8(fp)
   1a104:	e0bffd17 	ldw	r2,-12(fp)
   1a108:	1005003a 	cmpeq	r2,r2,zero
   1a10c:	1000041e 	bne	r2,zero,1a120 <alt_dev_llist_insert+0x34>
   1a110:	e0bffd17 	ldw	r2,-12(fp)
   1a114:	10800217 	ldw	r2,8(r2)
   1a118:	1004c03a 	cmpne	r2,r2,zero
   1a11c:	1000071e 	bne	r2,zero,1a13c <alt_dev_llist_insert+0x50>
   1a120:	001a1a00 	call	1a1a0 <alt_get_errno>
   1a124:	1007883a 	mov	r3,r2
   1a128:	00800584 	movi	r2,22
   1a12c:	18800015 	stw	r2,0(r3)
   1a130:	00bffa84 	movi	r2,-22
   1a134:	e0bfff15 	stw	r2,-4(fp)
   1a138:	00001306 	br	1a188 <alt_dev_llist_insert+0x9c>
   1a13c:	e0fffd17 	ldw	r3,-12(fp)
   1a140:	e0bffe17 	ldw	r2,-8(fp)
   1a144:	e0bffb15 	stw	r2,-20(fp)
   1a148:	e0fffc15 	stw	r3,-16(fp)
   1a14c:	e0fffc17 	ldw	r3,-16(fp)
   1a150:	e0bffb17 	ldw	r2,-20(fp)
   1a154:	18800115 	stw	r2,4(r3)
   1a158:	e0bffb17 	ldw	r2,-20(fp)
   1a15c:	10c00017 	ldw	r3,0(r2)
   1a160:	e0bffc17 	ldw	r2,-16(fp)
   1a164:	10c00015 	stw	r3,0(r2)
   1a168:	e0bffb17 	ldw	r2,-20(fp)
   1a16c:	10c00017 	ldw	r3,0(r2)
   1a170:	e0bffc17 	ldw	r2,-16(fp)
   1a174:	18800115 	stw	r2,4(r3)
   1a178:	e0fffb17 	ldw	r3,-20(fp)
   1a17c:	e0bffc17 	ldw	r2,-16(fp)
   1a180:	18800015 	stw	r2,0(r3)
   1a184:	e03fff15 	stw	zero,-4(fp)
   1a188:	e0bfff17 	ldw	r2,-4(fp)
   1a18c:	e037883a 	mov	sp,fp
   1a190:	dfc00117 	ldw	ra,4(sp)
   1a194:	df000017 	ldw	fp,0(sp)
   1a198:	dec00204 	addi	sp,sp,8
   1a19c:	f800283a 	ret

0001a1a0 <alt_get_errno>:
   1a1a0:	defffd04 	addi	sp,sp,-12
   1a1a4:	dfc00215 	stw	ra,8(sp)
   1a1a8:	df000115 	stw	fp,4(sp)
   1a1ac:	df000104 	addi	fp,sp,4
   1a1b0:	00820034 	movhi	r2,2048
   1a1b4:	108a2a04 	addi	r2,r2,10408
   1a1b8:	10800017 	ldw	r2,0(r2)
   1a1bc:	1005003a 	cmpeq	r2,r2,zero
   1a1c0:	1000061e 	bne	r2,zero,1a1dc <alt_get_errno+0x3c>
   1a1c4:	00820034 	movhi	r2,2048
   1a1c8:	108a2a04 	addi	r2,r2,10408
   1a1cc:	10800017 	ldw	r2,0(r2)
   1a1d0:	103ee83a 	callr	r2
   1a1d4:	e0bfff15 	stw	r2,-4(fp)
   1a1d8:	00000306 	br	1a1e8 <alt_get_errno+0x48>
   1a1dc:	00820034 	movhi	r2,2048
   1a1e0:	108a6404 	addi	r2,r2,10640
   1a1e4:	e0bfff15 	stw	r2,-4(fp)
   1a1e8:	e0bfff17 	ldw	r2,-4(fp)
   1a1ec:	e037883a 	mov	sp,fp
   1a1f0:	dfc00117 	ldw	ra,4(sp)
   1a1f4:	df000017 	ldw	fp,0(sp)
   1a1f8:	dec00204 	addi	sp,sp,8
   1a1fc:	f800283a 	ret

0001a200 <_do_ctors>:
   1a200:	defffd04 	addi	sp,sp,-12
   1a204:	dfc00215 	stw	ra,8(sp)
   1a208:	df000115 	stw	fp,4(sp)
   1a20c:	df000104 	addi	fp,sp,4
   1a210:	00bfff04 	movi	r2,-4
   1a214:	00c000b4 	movhi	r3,2
   1a218:	18ee5f04 	addi	r3,r3,-18052
   1a21c:	1885883a 	add	r2,r3,r2
   1a220:	e0bfff15 	stw	r2,-4(fp)
   1a224:	00000606 	br	1a240 <_do_ctors+0x40>
   1a228:	e0bfff17 	ldw	r2,-4(fp)
   1a22c:	10800017 	ldw	r2,0(r2)
   1a230:	103ee83a 	callr	r2
   1a234:	e0bfff17 	ldw	r2,-4(fp)
   1a238:	10bfff04 	addi	r2,r2,-4
   1a23c:	e0bfff15 	stw	r2,-4(fp)
   1a240:	e0ffff17 	ldw	r3,-4(fp)
   1a244:	008000b4 	movhi	r2,2
   1a248:	10ae5e04 	addi	r2,r2,-18056
   1a24c:	18bff62e 	bgeu	r3,r2,1a228 <_do_ctors+0x28>
   1a250:	e037883a 	mov	sp,fp
   1a254:	dfc00117 	ldw	ra,4(sp)
   1a258:	df000017 	ldw	fp,0(sp)
   1a25c:	dec00204 	addi	sp,sp,8
   1a260:	f800283a 	ret

0001a264 <_do_dtors>:
   1a264:	defffd04 	addi	sp,sp,-12
   1a268:	dfc00215 	stw	ra,8(sp)
   1a26c:	df000115 	stw	fp,4(sp)
   1a270:	df000104 	addi	fp,sp,4
   1a274:	00bfff04 	movi	r2,-4
   1a278:	00c000b4 	movhi	r3,2
   1a27c:	18ee5f04 	addi	r3,r3,-18052
   1a280:	1885883a 	add	r2,r3,r2
   1a284:	e0bfff15 	stw	r2,-4(fp)
   1a288:	00000606 	br	1a2a4 <_do_dtors+0x40>
   1a28c:	e0bfff17 	ldw	r2,-4(fp)
   1a290:	10800017 	ldw	r2,0(r2)
   1a294:	103ee83a 	callr	r2
   1a298:	e0bfff17 	ldw	r2,-4(fp)
   1a29c:	10bfff04 	addi	r2,r2,-4
   1a2a0:	e0bfff15 	stw	r2,-4(fp)
   1a2a4:	e0ffff17 	ldw	r3,-4(fp)
   1a2a8:	008000b4 	movhi	r2,2
   1a2ac:	10ae5f04 	addi	r2,r2,-18052
   1a2b0:	18bff62e 	bgeu	r3,r2,1a28c <_do_dtors+0x28>
   1a2b4:	e037883a 	mov	sp,fp
   1a2b8:	dfc00117 	ldw	ra,4(sp)
   1a2bc:	df000017 	ldw	fp,0(sp)
   1a2c0:	dec00204 	addi	sp,sp,8
   1a2c4:	f800283a 	ret

0001a2c8 <alt_find_dev>:
   1a2c8:	defff904 	addi	sp,sp,-28
   1a2cc:	dfc00615 	stw	ra,24(sp)
   1a2d0:	df000515 	stw	fp,20(sp)
   1a2d4:	df000504 	addi	fp,sp,20
   1a2d8:	e13ffd15 	stw	r4,-12(fp)
   1a2dc:	e17ffe15 	stw	r5,-8(fp)
   1a2e0:	e0bffe17 	ldw	r2,-8(fp)
   1a2e4:	10800017 	ldw	r2,0(r2)
   1a2e8:	e0bffc15 	stw	r2,-16(fp)
   1a2ec:	e13ffd17 	ldw	r4,-12(fp)
   1a2f0:	00083d00 	call	83d0 <strlen>
   1a2f4:	10800044 	addi	r2,r2,1
   1a2f8:	e0bffb15 	stw	r2,-20(fp)
   1a2fc:	00000d06 	br	1a334 <alt_find_dev+0x6c>
   1a300:	e0bffc17 	ldw	r2,-16(fp)
   1a304:	11000217 	ldw	r4,8(r2)
   1a308:	e1bffb17 	ldw	r6,-20(fp)
   1a30c:	e17ffd17 	ldw	r5,-12(fp)
   1a310:	00080000 	call	8000 <memcmp>
   1a314:	1004c03a 	cmpne	r2,r2,zero
   1a318:	1000031e 	bne	r2,zero,1a328 <alt_find_dev+0x60>
   1a31c:	e0bffc17 	ldw	r2,-16(fp)
   1a320:	e0bfff15 	stw	r2,-4(fp)
   1a324:	00000706 	br	1a344 <alt_find_dev+0x7c>
   1a328:	e0bffc17 	ldw	r2,-16(fp)
   1a32c:	10800017 	ldw	r2,0(r2)
   1a330:	e0bffc15 	stw	r2,-16(fp)
   1a334:	e0fffe17 	ldw	r3,-8(fp)
   1a338:	e0bffc17 	ldw	r2,-16(fp)
   1a33c:	10fff01e 	bne	r2,r3,1a300 <alt_find_dev+0x38>
   1a340:	e03fff15 	stw	zero,-4(fp)
   1a344:	e0bfff17 	ldw	r2,-4(fp)
   1a348:	e037883a 	mov	sp,fp
   1a34c:	dfc00117 	ldw	ra,4(sp)
   1a350:	df000017 	ldw	fp,0(sp)
   1a354:	dec00204 	addi	sp,sp,8
   1a358:	f800283a 	ret

0001a35c <alt_flash_open_dev>:
   1a35c:	defffb04 	addi	sp,sp,-20
   1a360:	dfc00415 	stw	ra,16(sp)
   1a364:	df000315 	stw	fp,12(sp)
   1a368:	df000304 	addi	fp,sp,12
   1a36c:	e13ffe15 	stw	r4,-8(fp)
   1a370:	e13ffe17 	ldw	r4,-8(fp)
   1a374:	d1601b04 	addi	r5,gp,-32660
   1a378:	001a2c80 	call	1a2c8 <alt_find_dev>
   1a37c:	e0bffd15 	stw	r2,-12(fp)
   1a380:	e0bffd17 	ldw	r2,-12(fp)
   1a384:	1005003a 	cmpeq	r2,r2,zero
   1a388:	10000b1e 	bne	r2,zero,1a3b8 <alt_flash_open_dev+0x5c>
   1a38c:	e0bffd17 	ldw	r2,-12(fp)
   1a390:	10800317 	ldw	r2,12(r2)
   1a394:	1005003a 	cmpeq	r2,r2,zero
   1a398:	1000071e 	bne	r2,zero,1a3b8 <alt_flash_open_dev+0x5c>
   1a39c:	e0bffd17 	ldw	r2,-12(fp)
   1a3a0:	10800317 	ldw	r2,12(r2)
   1a3a4:	e13ffd17 	ldw	r4,-12(fp)
   1a3a8:	e17ffe17 	ldw	r5,-8(fp)
   1a3ac:	103ee83a 	callr	r2
   1a3b0:	e0bfff15 	stw	r2,-4(fp)
   1a3b4:	00000206 	br	1a3c0 <alt_flash_open_dev+0x64>
   1a3b8:	e0bffd17 	ldw	r2,-12(fp)
   1a3bc:	e0bfff15 	stw	r2,-4(fp)
   1a3c0:	e0bfff17 	ldw	r2,-4(fp)
   1a3c4:	e037883a 	mov	sp,fp
   1a3c8:	dfc00117 	ldw	ra,4(sp)
   1a3cc:	df000017 	ldw	fp,0(sp)
   1a3d0:	dec00204 	addi	sp,sp,8
   1a3d4:	f800283a 	ret

0001a3d8 <alt_flash_close_dev>:
   1a3d8:	defffd04 	addi	sp,sp,-12
   1a3dc:	dfc00215 	stw	ra,8(sp)
   1a3e0:	df000115 	stw	fp,4(sp)
   1a3e4:	df000104 	addi	fp,sp,4
   1a3e8:	e13fff15 	stw	r4,-4(fp)
   1a3ec:	e0bfff17 	ldw	r2,-4(fp)
   1a3f0:	1005003a 	cmpeq	r2,r2,zero
   1a3f4:	1000081e 	bne	r2,zero,1a418 <alt_flash_close_dev+0x40>
   1a3f8:	e0bfff17 	ldw	r2,-4(fp)
   1a3fc:	10800417 	ldw	r2,16(r2)
   1a400:	1005003a 	cmpeq	r2,r2,zero
   1a404:	1000041e 	bne	r2,zero,1a418 <alt_flash_close_dev+0x40>
   1a408:	e0bfff17 	ldw	r2,-4(fp)
   1a40c:	10800417 	ldw	r2,16(r2)
   1a410:	e13fff17 	ldw	r4,-4(fp)
   1a414:	103ee83a 	callr	r2
   1a418:	e037883a 	mov	sp,fp
   1a41c:	dfc00117 	ldw	ra,4(sp)
   1a420:	df000017 	ldw	fp,0(sp)
   1a424:	dec00204 	addi	sp,sp,8
   1a428:	f800283a 	ret

0001a42c <alt_open_fd>:
   1a42c:	defff904 	addi	sp,sp,-28
   1a430:	dfc00615 	stw	ra,24(sp)
   1a434:	df000515 	stw	fp,20(sp)
   1a438:	df000504 	addi	fp,sp,20
   1a43c:	e13ffc15 	stw	r4,-16(fp)
   1a440:	e17ffd15 	stw	r5,-12(fp)
   1a444:	e1bffe15 	stw	r6,-8(fp)
   1a448:	e1ffff15 	stw	r7,-4(fp)
   1a44c:	e13ffd17 	ldw	r4,-12(fp)
   1a450:	e17ffe17 	ldw	r5,-8(fp)
   1a454:	e1bfff17 	ldw	r6,-4(fp)
   1a458:	001a6440 	call	1a644 <open>
   1a45c:	e0bffb15 	stw	r2,-20(fp)
   1a460:	e0bffb17 	ldw	r2,-20(fp)
   1a464:	1004803a 	cmplt	r2,r2,zero
   1a468:	10001c1e 	bne	r2,zero,1a4dc <alt_open_fd+0xb0>
   1a46c:	e0bffb17 	ldw	r2,-20(fp)
   1a470:	00c20034 	movhi	r3,2048
   1a474:	18c4b704 	addi	r3,r3,4828
   1a478:	10800324 	muli	r2,r2,12
   1a47c:	10c5883a 	add	r2,r2,r3
   1a480:	10c00017 	ldw	r3,0(r2)
   1a484:	e0bffc17 	ldw	r2,-16(fp)
   1a488:	10c00015 	stw	r3,0(r2)
   1a48c:	e0bffb17 	ldw	r2,-20(fp)
   1a490:	00c20034 	movhi	r3,2048
   1a494:	18c4b704 	addi	r3,r3,4828
   1a498:	10800324 	muli	r2,r2,12
   1a49c:	10c5883a 	add	r2,r2,r3
   1a4a0:	10800104 	addi	r2,r2,4
   1a4a4:	10c00017 	ldw	r3,0(r2)
   1a4a8:	e0bffc17 	ldw	r2,-16(fp)
   1a4ac:	10c00115 	stw	r3,4(r2)
   1a4b0:	e0bffb17 	ldw	r2,-20(fp)
   1a4b4:	00c20034 	movhi	r3,2048
   1a4b8:	18c4b704 	addi	r3,r3,4828
   1a4bc:	10800324 	muli	r2,r2,12
   1a4c0:	10c5883a 	add	r2,r2,r3
   1a4c4:	10800204 	addi	r2,r2,8
   1a4c8:	10c00017 	ldw	r3,0(r2)
   1a4cc:	e0bffc17 	ldw	r2,-16(fp)
   1a4d0:	10c00215 	stw	r3,8(r2)
   1a4d4:	e13ffb17 	ldw	r4,-20(fp)
   1a4d8:	00137340 	call	13734 <alt_release_fd>
   1a4dc:	e037883a 	mov	sp,fp
   1a4e0:	dfc00117 	ldw	ra,4(sp)
   1a4e4:	df000017 	ldw	fp,0(sp)
   1a4e8:	dec00204 	addi	sp,sp,8
   1a4ec:	f800283a 	ret

0001a4f0 <alt_io_redirect>:
   1a4f0:	defffb04 	addi	sp,sp,-20
   1a4f4:	dfc00415 	stw	ra,16(sp)
   1a4f8:	df000315 	stw	fp,12(sp)
   1a4fc:	df000304 	addi	fp,sp,12
   1a500:	e13ffd15 	stw	r4,-12(fp)
   1a504:	e17ffe15 	stw	r5,-8(fp)
   1a508:	e1bfff15 	stw	r6,-4(fp)
   1a50c:	01020034 	movhi	r4,2048
   1a510:	2104ba04 	addi	r4,r4,4840
   1a514:	e17ffd17 	ldw	r5,-12(fp)
   1a518:	01800044 	movi	r6,1
   1a51c:	01c07fc4 	movi	r7,511
   1a520:	001a42c0 	call	1a42c <alt_open_fd>
   1a524:	01020034 	movhi	r4,2048
   1a528:	2104b704 	addi	r4,r4,4828
   1a52c:	e17ffe17 	ldw	r5,-8(fp)
   1a530:	000d883a 	mov	r6,zero
   1a534:	01c07fc4 	movi	r7,511
   1a538:	001a42c0 	call	1a42c <alt_open_fd>
   1a53c:	01020034 	movhi	r4,2048
   1a540:	2104bd04 	addi	r4,r4,4852
   1a544:	e17fff17 	ldw	r5,-4(fp)
   1a548:	01800044 	movi	r6,1
   1a54c:	01c07fc4 	movi	r7,511
   1a550:	001a42c0 	call	1a42c <alt_open_fd>
   1a554:	e037883a 	mov	sp,fp
   1a558:	dfc00117 	ldw	ra,4(sp)
   1a55c:	df000017 	ldw	fp,0(sp)
   1a560:	dec00204 	addi	sp,sp,8
   1a564:	f800283a 	ret

0001a568 <alt_file_locked>:
   1a568:	defffc04 	addi	sp,sp,-16
   1a56c:	df000315 	stw	fp,12(sp)
   1a570:	df000304 	addi	fp,sp,12
   1a574:	e13ffe15 	stw	r4,-8(fp)
   1a578:	e0bffe17 	ldw	r2,-8(fp)
   1a57c:	10800217 	ldw	r2,8(r2)
   1a580:	10d00034 	orhi	r3,r2,16384
   1a584:	e0bffe17 	ldw	r2,-8(fp)
   1a588:	10c00215 	stw	r3,8(r2)
   1a58c:	e03ffd15 	stw	zero,-12(fp)
   1a590:	00002006 	br	1a614 <alt_file_locked+0xac>
   1a594:	e0bffd17 	ldw	r2,-12(fp)
   1a598:	00c20034 	movhi	r3,2048
   1a59c:	18c4b704 	addi	r3,r3,4828
   1a5a0:	10800324 	muli	r2,r2,12
   1a5a4:	10c5883a 	add	r2,r2,r3
   1a5a8:	10c00017 	ldw	r3,0(r2)
   1a5ac:	e0bffe17 	ldw	r2,-8(fp)
   1a5b0:	10800017 	ldw	r2,0(r2)
   1a5b4:	1880141e 	bne	r3,r2,1a608 <alt_file_locked+0xa0>
   1a5b8:	e0bffd17 	ldw	r2,-12(fp)
   1a5bc:	00c20034 	movhi	r3,2048
   1a5c0:	18c4b704 	addi	r3,r3,4828
   1a5c4:	10800324 	muli	r2,r2,12
   1a5c8:	10c5883a 	add	r2,r2,r3
   1a5cc:	10800204 	addi	r2,r2,8
   1a5d0:	10800017 	ldw	r2,0(r2)
   1a5d4:	1004403a 	cmpge	r2,r2,zero
   1a5d8:	10000b1e 	bne	r2,zero,1a608 <alt_file_locked+0xa0>
   1a5dc:	e0bffd17 	ldw	r2,-12(fp)
   1a5e0:	10800324 	muli	r2,r2,12
   1a5e4:	1007883a 	mov	r3,r2
   1a5e8:	00820034 	movhi	r2,2048
   1a5ec:	1084b704 	addi	r2,r2,4828
   1a5f0:	1887883a 	add	r3,r3,r2
   1a5f4:	e0bffe17 	ldw	r2,-8(fp)
   1a5f8:	18800326 	beq	r3,r2,1a608 <alt_file_locked+0xa0>
   1a5fc:	00bffcc4 	movi	r2,-13
   1a600:	e0bfff15 	stw	r2,-4(fp)
   1a604:	00000a06 	br	1a630 <alt_file_locked+0xc8>
   1a608:	e0bffd17 	ldw	r2,-12(fp)
   1a60c:	10800044 	addi	r2,r2,1
   1a610:	e0bffd15 	stw	r2,-12(fp)
   1a614:	00820034 	movhi	r2,2048
   1a618:	108a2904 	addi	r2,r2,10404
   1a61c:	10800017 	ldw	r2,0(r2)
   1a620:	1007883a 	mov	r3,r2
   1a624:	e0bffd17 	ldw	r2,-12(fp)
   1a628:	18bfda2e 	bgeu	r3,r2,1a594 <alt_file_locked+0x2c>
   1a62c:	e03fff15 	stw	zero,-4(fp)
   1a630:	e0bfff17 	ldw	r2,-4(fp)
   1a634:	e037883a 	mov	sp,fp
   1a638:	df000017 	ldw	fp,0(sp)
   1a63c:	dec00104 	addi	sp,sp,4
   1a640:	f800283a 	ret

0001a644 <open>:
   1a644:	defff404 	addi	sp,sp,-48
   1a648:	dfc00b15 	stw	ra,44(sp)
   1a64c:	df000a15 	stw	fp,40(sp)
   1a650:	df000a04 	addi	fp,sp,40
   1a654:	e13ffb15 	stw	r4,-20(fp)
   1a658:	e17ffc15 	stw	r5,-16(fp)
   1a65c:	e1bffd15 	stw	r6,-12(fp)
   1a660:	00bfffc4 	movi	r2,-1
   1a664:	e0bff815 	stw	r2,-32(fp)
   1a668:	00bffb44 	movi	r2,-19
   1a66c:	e0bff715 	stw	r2,-36(fp)
   1a670:	e03ff615 	stw	zero,-40(fp)
   1a674:	e13ffb17 	ldw	r4,-20(fp)
   1a678:	01420034 	movhi	r5,2048
   1a67c:	294a2704 	addi	r5,r5,10396
   1a680:	001a2c80 	call	1a2c8 <alt_find_dev>
   1a684:	e0bffa15 	stw	r2,-24(fp)
   1a688:	e0bffa17 	ldw	r2,-24(fp)
   1a68c:	1004c03a 	cmpne	r2,r2,zero
   1a690:	1000051e 	bne	r2,zero,1a6a8 <open+0x64>
   1a694:	e13ffb17 	ldw	r4,-20(fp)
   1a698:	001b40c0 	call	1b40c <alt_find_file>
   1a69c:	e0bffa15 	stw	r2,-24(fp)
   1a6a0:	00800044 	movi	r2,1
   1a6a4:	e0bff615 	stw	r2,-40(fp)
   1a6a8:	e0bffa17 	ldw	r2,-24(fp)
   1a6ac:	1005003a 	cmpeq	r2,r2,zero
   1a6b0:	1000301e 	bne	r2,zero,1a774 <open+0x130>
   1a6b4:	e13ffa17 	ldw	r4,-24(fp)
   1a6b8:	001b52c0 	call	1b52c <alt_get_fd>
   1a6bc:	e0bff815 	stw	r2,-32(fp)
   1a6c0:	e0bff817 	ldw	r2,-32(fp)
   1a6c4:	1004403a 	cmpge	r2,r2,zero
   1a6c8:	1000031e 	bne	r2,zero,1a6d8 <open+0x94>
   1a6cc:	e0bff817 	ldw	r2,-32(fp)
   1a6d0:	e0bff715 	stw	r2,-36(fp)
   1a6d4:	00002906 	br	1a77c <open+0x138>
   1a6d8:	e0bff817 	ldw	r2,-32(fp)
   1a6dc:	10800324 	muli	r2,r2,12
   1a6e0:	1007883a 	mov	r3,r2
   1a6e4:	00820034 	movhi	r2,2048
   1a6e8:	1084b704 	addi	r2,r2,4828
   1a6ec:	1885883a 	add	r2,r3,r2
   1a6f0:	e0bff915 	stw	r2,-28(fp)
   1a6f4:	e0fffc17 	ldw	r3,-16(fp)
   1a6f8:	00900034 	movhi	r2,16384
   1a6fc:	10bfffc4 	addi	r2,r2,-1
   1a700:	1886703a 	and	r3,r3,r2
   1a704:	e0bff917 	ldw	r2,-28(fp)
   1a708:	10c00215 	stw	r3,8(r2)
   1a70c:	e0bff617 	ldw	r2,-40(fp)
   1a710:	1004c03a 	cmpne	r2,r2,zero
   1a714:	1000061e 	bne	r2,zero,1a730 <open+0xec>
   1a718:	e13ff917 	ldw	r4,-28(fp)
   1a71c:	001a5680 	call	1a568 <alt_file_locked>
   1a720:	e0bff715 	stw	r2,-36(fp)
   1a724:	e0bff717 	ldw	r2,-36(fp)
   1a728:	1004803a 	cmplt	r2,r2,zero
   1a72c:	1000131e 	bne	r2,zero,1a77c <open+0x138>
   1a730:	e0bffa17 	ldw	r2,-24(fp)
   1a734:	10800317 	ldw	r2,12(r2)
   1a738:	1005003a 	cmpeq	r2,r2,zero
   1a73c:	1000091e 	bne	r2,zero,1a764 <open+0x120>
   1a740:	e0bffa17 	ldw	r2,-24(fp)
   1a744:	10800317 	ldw	r2,12(r2)
   1a748:	e13ff917 	ldw	r4,-28(fp)
   1a74c:	e17ffb17 	ldw	r5,-20(fp)
   1a750:	e1bffc17 	ldw	r6,-16(fp)
   1a754:	e1fffd17 	ldw	r7,-12(fp)
   1a758:	103ee83a 	callr	r2
   1a75c:	e0bfff15 	stw	r2,-4(fp)
   1a760:	00000106 	br	1a768 <open+0x124>
   1a764:	e03fff15 	stw	zero,-4(fp)
   1a768:	e0bfff17 	ldw	r2,-4(fp)
   1a76c:	e0bff715 	stw	r2,-36(fp)
   1a770:	00000206 	br	1a77c <open+0x138>
   1a774:	00bffb44 	movi	r2,-19
   1a778:	e0bff715 	stw	r2,-36(fp)
   1a77c:	e0bff717 	ldw	r2,-36(fp)
   1a780:	1004403a 	cmpge	r2,r2,zero
   1a784:	1000091e 	bne	r2,zero,1a7ac <open+0x168>
   1a788:	e13ff817 	ldw	r4,-32(fp)
   1a78c:	00137340 	call	13734 <alt_release_fd>
   1a790:	001a7cc0 	call	1a7cc <alt_get_errno>
   1a794:	e0fff717 	ldw	r3,-36(fp)
   1a798:	00c7c83a 	sub	r3,zero,r3
   1a79c:	10c00015 	stw	r3,0(r2)
   1a7a0:	00bfffc4 	movi	r2,-1
   1a7a4:	e0bffe15 	stw	r2,-8(fp)
   1a7a8:	00000206 	br	1a7b4 <open+0x170>
   1a7ac:	e0bff817 	ldw	r2,-32(fp)
   1a7b0:	e0bffe15 	stw	r2,-8(fp)
   1a7b4:	e0bffe17 	ldw	r2,-8(fp)
   1a7b8:	e037883a 	mov	sp,fp
   1a7bc:	dfc00117 	ldw	ra,4(sp)
   1a7c0:	df000017 	ldw	fp,0(sp)
   1a7c4:	dec00204 	addi	sp,sp,8
   1a7c8:	f800283a 	ret

0001a7cc <alt_get_errno>:
   1a7cc:	defffd04 	addi	sp,sp,-12
   1a7d0:	dfc00215 	stw	ra,8(sp)
   1a7d4:	df000115 	stw	fp,4(sp)
   1a7d8:	df000104 	addi	fp,sp,4
   1a7dc:	00820034 	movhi	r2,2048
   1a7e0:	108a2a04 	addi	r2,r2,10408
   1a7e4:	10800017 	ldw	r2,0(r2)
   1a7e8:	1005003a 	cmpeq	r2,r2,zero
   1a7ec:	1000061e 	bne	r2,zero,1a808 <alt_get_errno+0x3c>
   1a7f0:	00820034 	movhi	r2,2048
   1a7f4:	108a2a04 	addi	r2,r2,10408
   1a7f8:	10800017 	ldw	r2,0(r2)
   1a7fc:	103ee83a 	callr	r2
   1a800:	e0bfff15 	stw	r2,-4(fp)
   1a804:	00000306 	br	1a814 <alt_get_errno+0x48>
   1a808:	00820034 	movhi	r2,2048
   1a80c:	108a6404 	addi	r2,r2,10640
   1a810:	e0bfff15 	stw	r2,-4(fp)
   1a814:	e0bfff17 	ldw	r2,-4(fp)
   1a818:	e037883a 	mov	sp,fp
   1a81c:	dfc00117 	ldw	ra,4(sp)
   1a820:	df000017 	ldw	fp,0(sp)
   1a824:	dec00204 	addi	sp,sp,8
   1a828:	f800283a 	ret

0001a82c <alt_alarm_stop>:
   1a82c:	defffa04 	addi	sp,sp,-24
   1a830:	df000515 	stw	fp,20(sp)
   1a834:	df000504 	addi	fp,sp,20
   1a838:	e13fff15 	stw	r4,-4(fp)
   1a83c:	0005303a 	rdctl	r2,status
   1a840:	e0bffd15 	stw	r2,-12(fp)
   1a844:	e0fffd17 	ldw	r3,-12(fp)
   1a848:	00bfff84 	movi	r2,-2
   1a84c:	1884703a 	and	r2,r3,r2
   1a850:	1001703a 	wrctl	status,r2
   1a854:	e0bffd17 	ldw	r2,-12(fp)
   1a858:	e0bffe15 	stw	r2,-8(fp)
   1a85c:	e0bfff17 	ldw	r2,-4(fp)
   1a860:	e0bffc15 	stw	r2,-16(fp)
   1a864:	e0bffc17 	ldw	r2,-16(fp)
   1a868:	10c00017 	ldw	r3,0(r2)
   1a86c:	e0bffc17 	ldw	r2,-16(fp)
   1a870:	10800117 	ldw	r2,4(r2)
   1a874:	18800115 	stw	r2,4(r3)
   1a878:	e0bffc17 	ldw	r2,-16(fp)
   1a87c:	10c00117 	ldw	r3,4(r2)
   1a880:	e0bffc17 	ldw	r2,-16(fp)
   1a884:	10800017 	ldw	r2,0(r2)
   1a888:	18800015 	stw	r2,0(r3)
   1a88c:	e0fffc17 	ldw	r3,-16(fp)
   1a890:	e0bffc17 	ldw	r2,-16(fp)
   1a894:	18800115 	stw	r2,4(r3)
   1a898:	e0fffc17 	ldw	r3,-16(fp)
   1a89c:	e0bffc17 	ldw	r2,-16(fp)
   1a8a0:	18800015 	stw	r2,0(r3)
   1a8a4:	e0bffe17 	ldw	r2,-8(fp)
   1a8a8:	e0bffb15 	stw	r2,-20(fp)
   1a8ac:	e0bffb17 	ldw	r2,-20(fp)
   1a8b0:	1001703a 	wrctl	status,r2
   1a8b4:	e037883a 	mov	sp,fp
   1a8b8:	df000017 	ldw	fp,0(sp)
   1a8bc:	dec00104 	addi	sp,sp,4
   1a8c0:	f800283a 	ret

0001a8c4 <alt_tick>:
   1a8c4:	defffb04 	addi	sp,sp,-20
   1a8c8:	dfc00415 	stw	ra,16(sp)
   1a8cc:	df000315 	stw	fp,12(sp)
   1a8d0:	df000304 	addi	fp,sp,12
   1a8d4:	d0a01d17 	ldw	r2,-32652(gp)
   1a8d8:	e0bffe15 	stw	r2,-8(fp)
   1a8dc:	d0a05717 	ldw	r2,-32420(gp)
   1a8e0:	10800044 	addi	r2,r2,1
   1a8e4:	d0a05715 	stw	r2,-32420(gp)
   1a8e8:	00003106 	br	1a9b0 <alt_tick+0xec>
   1a8ec:	e0bffe17 	ldw	r2,-8(fp)
   1a8f0:	10800017 	ldw	r2,0(r2)
   1a8f4:	e0bfff15 	stw	r2,-4(fp)
   1a8f8:	e0bffe17 	ldw	r2,-8(fp)
   1a8fc:	10800403 	ldbu	r2,16(r2)
   1a900:	10803fcc 	andi	r2,r2,255
   1a904:	1005003a 	cmpeq	r2,r2,zero
   1a908:	1000051e 	bne	r2,zero,1a920 <alt_tick+0x5c>
   1a90c:	d0a05717 	ldw	r2,-32420(gp)
   1a910:	1004c03a 	cmpne	r2,r2,zero
   1a914:	1000021e 	bne	r2,zero,1a920 <alt_tick+0x5c>
   1a918:	e0bffe17 	ldw	r2,-8(fp)
   1a91c:	10000405 	stb	zero,16(r2)
   1a920:	e0bffe17 	ldw	r2,-8(fp)
   1a924:	10c00217 	ldw	r3,8(r2)
   1a928:	d0a05717 	ldw	r2,-32420(gp)
   1a92c:	10c01e36 	bltu	r2,r3,1a9a8 <alt_tick+0xe4>
   1a930:	e0bffe17 	ldw	r2,-8(fp)
   1a934:	10800403 	ldbu	r2,16(r2)
   1a938:	10803fcc 	andi	r2,r2,255
   1a93c:	1004c03a 	cmpne	r2,r2,zero
   1a940:	1000191e 	bne	r2,zero,1a9a8 <alt_tick+0xe4>
   1a944:	e0bffe17 	ldw	r2,-8(fp)
   1a948:	10c00317 	ldw	r3,12(r2)
   1a94c:	e0bffe17 	ldw	r2,-8(fp)
   1a950:	11000517 	ldw	r4,20(r2)
   1a954:	183ee83a 	callr	r3
   1a958:	e0bffd15 	stw	r2,-12(fp)
   1a95c:	e0bffd17 	ldw	r2,-12(fp)
   1a960:	1004c03a 	cmpne	r2,r2,zero
   1a964:	1000031e 	bne	r2,zero,1a974 <alt_tick+0xb0>
   1a968:	e13ffe17 	ldw	r4,-8(fp)
   1a96c:	001a82c0 	call	1a82c <alt_alarm_stop>
   1a970:	00000d06 	br	1a9a8 <alt_tick+0xe4>
   1a974:	e0bffe17 	ldw	r2,-8(fp)
   1a978:	10c00217 	ldw	r3,8(r2)
   1a97c:	e0bffd17 	ldw	r2,-12(fp)
   1a980:	1887883a 	add	r3,r3,r2
   1a984:	e0bffe17 	ldw	r2,-8(fp)
   1a988:	10c00215 	stw	r3,8(r2)
   1a98c:	e0bffe17 	ldw	r2,-8(fp)
   1a990:	10c00217 	ldw	r3,8(r2)
   1a994:	d0a05717 	ldw	r2,-32420(gp)
   1a998:	1880032e 	bgeu	r3,r2,1a9a8 <alt_tick+0xe4>
   1a99c:	e0fffe17 	ldw	r3,-8(fp)
   1a9a0:	00800044 	movi	r2,1
   1a9a4:	18800405 	stb	r2,16(r3)
   1a9a8:	e0bfff17 	ldw	r2,-4(fp)
   1a9ac:	e0bffe15 	stw	r2,-8(fp)
   1a9b0:	d0e01d04 	addi	r3,gp,-32652
   1a9b4:	e0bffe17 	ldw	r2,-8(fp)
   1a9b8:	10ffcc1e 	bne	r2,r3,1a8ec <alt_tick+0x28>
   1a9bc:	e037883a 	mov	sp,fp
   1a9c0:	dfc00117 	ldw	ra,4(sp)
   1a9c4:	df000017 	ldw	fp,0(sp)
   1a9c8:	dec00204 	addi	sp,sp,8
   1a9cc:	f800283a 	ret

0001a9d0 <usleep>:
   1a9d0:	defffd04 	addi	sp,sp,-12
   1a9d4:	dfc00215 	stw	ra,8(sp)
   1a9d8:	df000115 	stw	fp,4(sp)
   1a9dc:	df000104 	addi	fp,sp,4
   1a9e0:	e13fff15 	stw	r4,-4(fp)
   1a9e4:	e13fff17 	ldw	r4,-4(fp)
   1a9e8:	001b2e00 	call	1b2e0 <alt_busy_sleep>
   1a9ec:	e037883a 	mov	sp,fp
   1a9f0:	dfc00117 	ldw	ra,4(sp)
   1a9f4:	df000017 	ldw	fp,0(sp)
   1a9f8:	dec00204 	addi	sp,sp,8
   1a9fc:	f800283a 	ret

0001aa00 <altera_nios2_qsys_irq_init>:
   1aa00:	deffff04 	addi	sp,sp,-4
   1aa04:	df000015 	stw	fp,0(sp)
   1aa08:	d839883a 	mov	fp,sp
   1aa0c:	000170fa 	wrctl	ienable,zero
   1aa10:	e037883a 	mov	sp,fp
   1aa14:	df000017 	ldw	fp,0(sp)
   1aa18:	dec00104 	addi	sp,sp,4
   1aa1c:	f800283a 	ret

0001aa20 <alt_program_amd>:
   1aa20:	defff704 	addi	sp,sp,-36
   1aa24:	dfc00815 	stw	ra,32(sp)
   1aa28:	df000715 	stw	fp,28(sp)
   1aa2c:	df000704 	addi	fp,sp,28
   1aa30:	e13ffc15 	stw	r4,-16(fp)
   1aa34:	e17ffd15 	stw	r5,-12(fp)
   1aa38:	e1bffe15 	stw	r6,-8(fp)
   1aa3c:	e1ffff15 	stw	r7,-4(fp)
   1aa40:	e03ffb15 	stw	zero,-20(fp)
   1aa44:	e0bffc17 	ldw	r2,-16(fp)
   1aa48:	e0bffa15 	stw	r2,-24(fp)
   1aa4c:	e1bfff17 	ldw	r6,-4(fp)
   1aa50:	008000b4 	movhi	r2,2
   1aa54:	10ab7104 	addi	r2,r2,-21052
   1aa58:	d8800015 	stw	r2,0(sp)
   1aa5c:	e13ffa17 	ldw	r4,-24(fp)
   1aa60:	e17ffe17 	ldw	r5,-8(fp)
   1aa64:	e1c00217 	ldw	r7,8(fp)
   1aa68:	00143980 	call	14398 <alt_flash_program_block>
   1aa6c:	e0bffb15 	stw	r2,-20(fp)
   1aa70:	e0bffb17 	ldw	r2,-20(fp)
   1aa74:	e037883a 	mov	sp,fp
   1aa78:	dfc00117 	ldw	ra,4(sp)
   1aa7c:	df000017 	ldw	fp,0(sp)
   1aa80:	dec00204 	addi	sp,sp,8
   1aa84:	f800283a 	ret

0001aa88 <alt_erase_block_amd>:
   1aa88:	defff804 	addi	sp,sp,-32
   1aa8c:	dfc00715 	stw	ra,28(sp)
   1aa90:	df000615 	stw	fp,24(sp)
   1aa94:	df000604 	addi	fp,sp,24
   1aa98:	e13ffe15 	stw	r4,-8(fp)
   1aa9c:	e17fff15 	stw	r5,-4(fp)
   1aaa0:	e03ffc15 	stw	zero,-16(fp)
   1aaa4:	e0bffe17 	ldw	r2,-8(fp)
   1aaa8:	e0bffa15 	stw	r2,-24(fp)
   1aaac:	e0bffa17 	ldw	r2,-24(fp)
   1aab0:	10c03317 	ldw	r3,204(r2)
   1aab4:	e0bffa17 	ldw	r2,-24(fp)
   1aab8:	11000a17 	ldw	r4,40(r2)
   1aabc:	01415544 	movi	r5,1365
   1aac0:	01802a84 	movi	r6,170
   1aac4:	183ee83a 	callr	r3
   1aac8:	e0bffa17 	ldw	r2,-24(fp)
   1aacc:	10c03317 	ldw	r3,204(r2)
   1aad0:	e0bffa17 	ldw	r2,-24(fp)
   1aad4:	11000a17 	ldw	r4,40(r2)
   1aad8:	0140aa84 	movi	r5,682
   1aadc:	01801544 	movi	r6,85
   1aae0:	183ee83a 	callr	r3
   1aae4:	e0bffa17 	ldw	r2,-24(fp)
   1aae8:	10c03317 	ldw	r3,204(r2)
   1aaec:	e0bffa17 	ldw	r2,-24(fp)
   1aaf0:	11000a17 	ldw	r4,40(r2)
   1aaf4:	01415544 	movi	r5,1365
   1aaf8:	01802004 	movi	r6,128
   1aafc:	183ee83a 	callr	r3
   1ab00:	e0bffa17 	ldw	r2,-24(fp)
   1ab04:	10c03317 	ldw	r3,204(r2)
   1ab08:	e0bffa17 	ldw	r2,-24(fp)
   1ab0c:	11000a17 	ldw	r4,40(r2)
   1ab10:	01415544 	movi	r5,1365
   1ab14:	01802a84 	movi	r6,170
   1ab18:	183ee83a 	callr	r3
   1ab1c:	e0bffa17 	ldw	r2,-24(fp)
   1ab20:	10c03317 	ldw	r3,204(r2)
   1ab24:	e0bffa17 	ldw	r2,-24(fp)
   1ab28:	11000a17 	ldw	r4,40(r2)
   1ab2c:	0140aa84 	movi	r5,682
   1ab30:	01801544 	movi	r6,85
   1ab34:	183ee83a 	callr	r3
   1ab38:	e0bffa17 	ldw	r2,-24(fp)
   1ab3c:	11803517 	ldw	r6,212(r2)
   1ab40:	e0bffa17 	ldw	r2,-24(fp)
   1ab44:	10800a17 	ldw	r2,40(r2)
   1ab48:	1007883a 	mov	r3,r2
   1ab4c:	e0bfff17 	ldw	r2,-4(fp)
   1ab50:	1889883a 	add	r4,r3,r2
   1ab54:	01400c04 	movi	r5,48
   1ab58:	303ee83a 	callr	r6
   1ab5c:	0109c404 	movi	r4,10000
   1ab60:	001a9d00 	call	1a9d0 <usleep>
   1ab64:	00800c84 	movi	r2,50
   1ab68:	e0bffb15 	stw	r2,-20(fp)
   1ab6c:	e0bffa17 	ldw	r2,-24(fp)
   1ab70:	10800a17 	ldw	r2,40(r2)
   1ab74:	1007883a 	mov	r3,r2
   1ab78:	e0bfff17 	ldw	r2,-4(fp)
   1ab7c:	1885883a 	add	r2,r3,r2
   1ab80:	10800023 	ldbuio	r2,0(r2)
   1ab84:	e0bffd05 	stb	r2,-12(fp)
   1ab88:	0100fa04 	movi	r4,1000
   1ab8c:	001a9d00 	call	1a9d0 <usleep>
   1ab90:	e0bffb17 	ldw	r2,-20(fp)
   1ab94:	10bfffc4 	addi	r2,r2,-1
   1ab98:	e0bffb15 	stw	r2,-20(fp)
   1ab9c:	e0bffd03 	ldbu	r2,-12(fp)
   1aba0:	10803fcc 	andi	r2,r2,255
   1aba4:	1080020c 	andi	r2,r2,8
   1aba8:	1004c03a 	cmpne	r2,r2,zero
   1abac:	1000031e 	bne	r2,zero,1abbc <alt_erase_block_amd+0x134>
   1abb0:	e0bffb17 	ldw	r2,-20(fp)
   1abb4:	10800048 	cmpgei	r2,r2,1
   1abb8:	103fec1e 	bne	r2,zero,1ab6c <alt_erase_block_amd+0xe4>
   1abbc:	e0bffa17 	ldw	r2,-24(fp)
   1abc0:	10803117 	ldw	r2,196(r2)
   1abc4:	e0bffb15 	stw	r2,-20(fp)
   1abc8:	00001706 	br	1ac28 <alt_erase_block_amd+0x1a0>
   1abcc:	e0bffa17 	ldw	r2,-24(fp)
   1abd0:	10800a17 	ldw	r2,40(r2)
   1abd4:	1007883a 	mov	r3,r2
   1abd8:	e0bfff17 	ldw	r2,-4(fp)
   1abdc:	1885883a 	add	r2,r3,r2
   1abe0:	10800023 	ldbuio	r2,0(r2)
   1abe4:	e0bffd05 	stb	r2,-12(fp)
   1abe8:	e0bffd03 	ldbu	r2,-12(fp)
   1abec:	10803fcc 	andi	r2,r2,255
   1abf0:	1080201c 	xori	r2,r2,128
   1abf4:	10bfe004 	addi	r2,r2,-128
   1abf8:	1004803a 	cmplt	r2,r2,zero
   1abfc:	10000d1e 	bne	r2,zero,1ac34 <alt_erase_block_amd+0x1ac>
   1ac00:	e0bffd03 	ldbu	r2,-12(fp)
   1ac04:	10803fcc 	andi	r2,r2,255
   1ac08:	1080080c 	andi	r2,r2,32
   1ac0c:	1004c03a 	cmpne	r2,r2,zero
   1ac10:	1000081e 	bne	r2,zero,1ac34 <alt_erase_block_amd+0x1ac>
   1ac14:	0100fa04 	movi	r4,1000
   1ac18:	001a9d00 	call	1a9d0 <usleep>
   1ac1c:	e0bffb17 	ldw	r2,-20(fp)
   1ac20:	10bf0604 	addi	r2,r2,-1000
   1ac24:	e0bffb15 	stw	r2,-20(fp)
   1ac28:	e0bffb17 	ldw	r2,-20(fp)
   1ac2c:	10800048 	cmpgei	r2,r2,1
   1ac30:	103fe61e 	bne	r2,zero,1abcc <alt_erase_block_amd+0x144>
   1ac34:	e0bffb17 	ldw	r2,-20(fp)
   1ac38:	10800048 	cmpgei	r2,r2,1
   1ac3c:	1000031e 	bne	r2,zero,1ac4c <alt_erase_block_amd+0x1c4>
   1ac40:	00bfe304 	movi	r2,-116
   1ac44:	e0bffc15 	stw	r2,-16(fp)
   1ac48:	00000f06 	br	1ac88 <alt_erase_block_amd+0x200>
   1ac4c:	e0bffa17 	ldw	r2,-24(fp)
   1ac50:	10800a17 	ldw	r2,40(r2)
   1ac54:	1007883a 	mov	r3,r2
   1ac58:	e0bfff17 	ldw	r2,-4(fp)
   1ac5c:	1885883a 	add	r2,r3,r2
   1ac60:	10800023 	ldbuio	r2,0(r2)
   1ac64:	e0bffd05 	stb	r2,-12(fp)
   1ac68:	e0bffd03 	ldbu	r2,-12(fp)
   1ac6c:	10803fcc 	andi	r2,r2,255
   1ac70:	1080201c 	xori	r2,r2,128
   1ac74:	10bfe004 	addi	r2,r2,-128
   1ac78:	1004803a 	cmplt	r2,r2,zero
   1ac7c:	1000021e 	bne	r2,zero,1ac88 <alt_erase_block_amd+0x200>
   1ac80:	00bffec4 	movi	r2,-5
   1ac84:	e0bffc15 	stw	r2,-16(fp)
   1ac88:	e0bffc17 	ldw	r2,-16(fp)
   1ac8c:	e037883a 	mov	sp,fp
   1ac90:	dfc00117 	ldw	ra,4(sp)
   1ac94:	df000017 	ldw	fp,0(sp)
   1ac98:	dec00204 	addi	sp,sp,8
   1ac9c:	f800283a 	ret

0001aca0 <alt_wait_for_command_to_complete_amd>:
   1aca0:	defff804 	addi	sp,sp,-32
   1aca4:	dfc00715 	stw	ra,28(sp)
   1aca8:	df000615 	stw	fp,24(sp)
   1acac:	df000604 	addi	fp,sp,24
   1acb0:	e13ffd15 	stw	r4,-12(fp)
   1acb4:	e17ffe15 	stw	r5,-8(fp)
   1acb8:	e1bfff05 	stb	r6,-4(fp)
   1acbc:	e0bffd17 	ldw	r2,-12(fp)
   1acc0:	10803017 	ldw	r2,192(r2)
   1acc4:	10801924 	muli	r2,r2,100
   1acc8:	e0bffb15 	stw	r2,-20(fp)
   1accc:	e03ffa15 	stw	zero,-24(fp)
   1acd0:	e0bffd17 	ldw	r2,-12(fp)
   1acd4:	10800a17 	ldw	r2,40(r2)
   1acd8:	1007883a 	mov	r3,r2
   1acdc:	e0bffe17 	ldw	r2,-8(fp)
   1ace0:	1885883a 	add	r2,r3,r2
   1ace4:	10800023 	ldbuio	r2,0(r2)
   1ace8:	e0bffc05 	stb	r2,-16(fp)
   1acec:	00001706 	br	1ad4c <alt_wait_for_command_to_complete_amd+0xac>
   1acf0:	e0bffc03 	ldbu	r2,-16(fp)
   1acf4:	10803fcc 	andi	r2,r2,255
   1acf8:	10c0200c 	andi	r3,r2,128
   1acfc:	e0bfff03 	ldbu	r2,-4(fp)
   1ad00:	1080200c 	andi	r2,r2,128
   1ad04:	18801426 	beq	r3,r2,1ad58 <alt_wait_for_command_to_complete_amd+0xb8>
   1ad08:	e0bffc03 	ldbu	r2,-16(fp)
   1ad0c:	10803fcc 	andi	r2,r2,255
   1ad10:	1080080c 	andi	r2,r2,32
   1ad14:	1004c03a 	cmpne	r2,r2,zero
   1ad18:	10000f1e 	bne	r2,zero,1ad58 <alt_wait_for_command_to_complete_amd+0xb8>
   1ad1c:	01000044 	movi	r4,1
   1ad20:	001a9d00 	call	1a9d0 <usleep>
   1ad24:	e0bffb17 	ldw	r2,-20(fp)
   1ad28:	10bfffc4 	addi	r2,r2,-1
   1ad2c:	e0bffb15 	stw	r2,-20(fp)
   1ad30:	e0bffd17 	ldw	r2,-12(fp)
   1ad34:	10800a17 	ldw	r2,40(r2)
   1ad38:	1007883a 	mov	r3,r2
   1ad3c:	e0bffe17 	ldw	r2,-8(fp)
   1ad40:	1885883a 	add	r2,r3,r2
   1ad44:	10800023 	ldbuio	r2,0(r2)
   1ad48:	e0bffc05 	stb	r2,-16(fp)
   1ad4c:	e0bffb17 	ldw	r2,-20(fp)
   1ad50:	10800048 	cmpgei	r2,r2,1
   1ad54:	103fe61e 	bne	r2,zero,1acf0 <alt_wait_for_command_to_complete_amd+0x50>
   1ad58:	e0bffb17 	ldw	r2,-20(fp)
   1ad5c:	1004c03a 	cmpne	r2,r2,zero
   1ad60:	1000031e 	bne	r2,zero,1ad70 <alt_wait_for_command_to_complete_amd+0xd0>
   1ad64:	00bfe304 	movi	r2,-116
   1ad68:	e0bffa15 	stw	r2,-24(fp)
   1ad6c:	00000f06 	br	1adac <alt_wait_for_command_to_complete_amd+0x10c>
   1ad70:	e0bffd17 	ldw	r2,-12(fp)
   1ad74:	10800a17 	ldw	r2,40(r2)
   1ad78:	1007883a 	mov	r3,r2
   1ad7c:	e0bffe17 	ldw	r2,-8(fp)
   1ad80:	1885883a 	add	r2,r3,r2
   1ad84:	10800023 	ldbuio	r2,0(r2)
   1ad88:	e0bffc05 	stb	r2,-16(fp)
   1ad8c:	e0bffc03 	ldbu	r2,-16(fp)
   1ad90:	10803fcc 	andi	r2,r2,255
   1ad94:	10c0200c 	andi	r3,r2,128
   1ad98:	e0bfff03 	ldbu	r2,-4(fp)
   1ad9c:	1080200c 	andi	r2,r2,128
   1ada0:	18800226 	beq	r3,r2,1adac <alt_wait_for_command_to_complete_amd+0x10c>
   1ada4:	00bffec4 	movi	r2,-5
   1ada8:	e0bffa15 	stw	r2,-24(fp)
   1adac:	e0bffa17 	ldw	r2,-24(fp)
   1adb0:	e037883a 	mov	sp,fp
   1adb4:	dfc00117 	ldw	ra,4(sp)
   1adb8:	df000017 	ldw	fp,0(sp)
   1adbc:	dec00204 	addi	sp,sp,8
   1adc0:	f800283a 	ret

0001adc4 <alt_write_word_amd>:
   1adc4:	defff904 	addi	sp,sp,-28
   1adc8:	dfc00615 	stw	ra,24(sp)
   1adcc:	df000515 	stw	fp,20(sp)
   1add0:	df000504 	addi	fp,sp,20
   1add4:	e13ffd15 	stw	r4,-12(fp)
   1add8:	e17ffe15 	stw	r5,-8(fp)
   1addc:	e1bfff15 	stw	r6,-4(fp)
   1ade0:	e03ffc15 	stw	zero,-16(fp)
   1ade4:	e0bffd17 	ldw	r2,-12(fp)
   1ade8:	10c03317 	ldw	r3,204(r2)
   1adec:	e0bffd17 	ldw	r2,-12(fp)
   1adf0:	11000a17 	ldw	r4,40(r2)
   1adf4:	01415544 	movi	r5,1365
   1adf8:	01802a84 	movi	r6,170
   1adfc:	183ee83a 	callr	r3
   1ae00:	e0bffd17 	ldw	r2,-12(fp)
   1ae04:	10c03317 	ldw	r3,204(r2)
   1ae08:	e0bffd17 	ldw	r2,-12(fp)
   1ae0c:	11000a17 	ldw	r4,40(r2)
   1ae10:	0140aa84 	movi	r5,682
   1ae14:	01801544 	movi	r6,85
   1ae18:	183ee83a 	callr	r3
   1ae1c:	e0bffd17 	ldw	r2,-12(fp)
   1ae20:	10c03317 	ldw	r3,204(r2)
   1ae24:	e0bffd17 	ldw	r2,-12(fp)
   1ae28:	11000a17 	ldw	r4,40(r2)
   1ae2c:	01415544 	movi	r5,1365
   1ae30:	01802804 	movi	r6,160
   1ae34:	183ee83a 	callr	r3
   1ae38:	e0bfff17 	ldw	r2,-4(fp)
   1ae3c:	10800003 	ldbu	r2,0(r2)
   1ae40:	e0bffb05 	stb	r2,-20(fp)
   1ae44:	e13ffd17 	ldw	r4,-12(fp)
   1ae48:	e17ffe17 	ldw	r5,-8(fp)
   1ae4c:	e1bfff17 	ldw	r6,-4(fp)
   1ae50:	00142340 	call	14234 <alt_write_value_to_flash>
   1ae54:	e1bffb03 	ldbu	r6,-20(fp)
   1ae58:	e13ffd17 	ldw	r4,-12(fp)
   1ae5c:	e17ffe17 	ldw	r5,-8(fp)
   1ae60:	001aca00 	call	1aca0 <alt_wait_for_command_to_complete_amd>
   1ae64:	e0bffc15 	stw	r2,-16(fp)
   1ae68:	e0bffc17 	ldw	r2,-16(fp)
   1ae6c:	e037883a 	mov	sp,fp
   1ae70:	dfc00117 	ldw	ra,4(sp)
   1ae74:	df000017 	ldw	fp,0(sp)
   1ae78:	dec00204 	addi	sp,sp,8
   1ae7c:	f800283a 	ret

0001ae80 <alt_program_intel>:
   1ae80:	defff704 	addi	sp,sp,-36
   1ae84:	dfc00815 	stw	ra,32(sp)
   1ae88:	df000715 	stw	fp,28(sp)
   1ae8c:	df000704 	addi	fp,sp,28
   1ae90:	e13ffc15 	stw	r4,-16(fp)
   1ae94:	e17ffd15 	stw	r5,-12(fp)
   1ae98:	e1bffe15 	stw	r6,-8(fp)
   1ae9c:	e1ffff15 	stw	r7,-4(fp)
   1aea0:	e03ffb15 	stw	zero,-20(fp)
   1aea4:	e0bffc17 	ldw	r2,-16(fp)
   1aea8:	e0bffa15 	stw	r2,-24(fp)
   1aeac:	e13ffa17 	ldw	r4,-24(fp)
   1aeb0:	e17ffd17 	ldw	r5,-12(fp)
   1aeb4:	001b0780 	call	1b078 <alt_unlock_block_intel>
   1aeb8:	e0bffb15 	stw	r2,-20(fp)
   1aebc:	e0bffb17 	ldw	r2,-20(fp)
   1aec0:	1004c03a 	cmpne	r2,r2,zero
   1aec4:	1000091e 	bne	r2,zero,1aeec <alt_program_intel+0x6c>
   1aec8:	e1bfff17 	ldw	r6,-4(fp)
   1aecc:	008000b4 	movhi	r2,2
   1aed0:	10ac8104 	addi	r2,r2,-19964
   1aed4:	d8800015 	stw	r2,0(sp)
   1aed8:	e13ffa17 	ldw	r4,-24(fp)
   1aedc:	e17ffe17 	ldw	r5,-8(fp)
   1aee0:	e1c00217 	ldw	r7,8(fp)
   1aee4:	00143980 	call	14398 <alt_flash_program_block>
   1aee8:	e0bffb15 	stw	r2,-20(fp)
   1aeec:	e0bffb17 	ldw	r2,-20(fp)
   1aef0:	e037883a 	mov	sp,fp
   1aef4:	dfc00117 	ldw	ra,4(sp)
   1aef8:	df000017 	ldw	fp,0(sp)
   1aefc:	dec00204 	addi	sp,sp,8
   1af00:	f800283a 	ret

0001af04 <alt_erase_block_intel>:
   1af04:	defff804 	addi	sp,sp,-32
   1af08:	dfc00715 	stw	ra,28(sp)
   1af0c:	df000615 	stw	fp,24(sp)
   1af10:	df000604 	addi	fp,sp,24
   1af14:	e13ffe15 	stw	r4,-8(fp)
   1af18:	e17fff15 	stw	r5,-4(fp)
   1af1c:	e03ffc15 	stw	zero,-16(fp)
   1af20:	e0bffe17 	ldw	r2,-8(fp)
   1af24:	e0bffb15 	stw	r2,-20(fp)
   1af28:	e0bffb17 	ldw	r2,-20(fp)
   1af2c:	10803117 	ldw	r2,196(r2)
   1af30:	e0bffa15 	stw	r2,-24(fp)
   1af34:	e13ffb17 	ldw	r4,-20(fp)
   1af38:	e17fff17 	ldw	r5,-4(fp)
   1af3c:	001b0780 	call	1b078 <alt_unlock_block_intel>
   1af40:	e0bffc15 	stw	r2,-16(fp)
   1af44:	e0bffc17 	ldw	r2,-16(fp)
   1af48:	1004c03a 	cmpne	r2,r2,zero
   1af4c:	1000441e 	bne	r2,zero,1b060 <alt_erase_block_intel+0x15c>
   1af50:	e0bffb17 	ldw	r2,-20(fp)
   1af54:	11803517 	ldw	r6,212(r2)
   1af58:	e0bffb17 	ldw	r2,-20(fp)
   1af5c:	10800a17 	ldw	r2,40(r2)
   1af60:	1007883a 	mov	r3,r2
   1af64:	e0bfff17 	ldw	r2,-4(fp)
   1af68:	1889883a 	add	r4,r3,r2
   1af6c:	01400804 	movi	r5,32
   1af70:	303ee83a 	callr	r6
   1af74:	e0bffb17 	ldw	r2,-20(fp)
   1af78:	11803517 	ldw	r6,212(r2)
   1af7c:	e0bffb17 	ldw	r2,-20(fp)
   1af80:	10800a17 	ldw	r2,40(r2)
   1af84:	1007883a 	mov	r3,r2
   1af88:	e0bfff17 	ldw	r2,-4(fp)
   1af8c:	1889883a 	add	r4,r3,r2
   1af90:	01403404 	movi	r5,208
   1af94:	303ee83a 	callr	r6
   1af98:	e0bffb17 	ldw	r2,-20(fp)
   1af9c:	10800a17 	ldw	r2,40(r2)
   1afa0:	1007883a 	mov	r3,r2
   1afa4:	e0bfff17 	ldw	r2,-4(fp)
   1afa8:	1885883a 	add	r2,r3,r2
   1afac:	10800023 	ldbuio	r2,0(r2)
   1afb0:	e0bffd05 	stb	r2,-12(fp)
   1afb4:	e0bffd03 	ldbu	r2,-12(fp)
   1afb8:	10803fcc 	andi	r2,r2,255
   1afbc:	1080201c 	xori	r2,r2,128
   1afc0:	10bfe004 	addi	r2,r2,-128
   1afc4:	1004803a 	cmplt	r2,r2,zero
   1afc8:	1000081e 	bne	r2,zero,1afec <alt_erase_block_intel+0xe8>
   1afcc:	0100fa04 	movi	r4,1000
   1afd0:	001a9d00 	call	1a9d0 <usleep>
   1afd4:	e0bffa17 	ldw	r2,-24(fp)
   1afd8:	10bf0604 	addi	r2,r2,-1000
   1afdc:	e0bffa15 	stw	r2,-24(fp)
   1afe0:	e0bffa17 	ldw	r2,-24(fp)
   1afe4:	10800048 	cmpgei	r2,r2,1
   1afe8:	103feb1e 	bne	r2,zero,1af98 <alt_erase_block_intel+0x94>
   1afec:	e0bffa17 	ldw	r2,-24(fp)
   1aff0:	10800048 	cmpgei	r2,r2,1
   1aff4:	1000031e 	bne	r2,zero,1b004 <alt_erase_block_intel+0x100>
   1aff8:	00bfe304 	movi	r2,-116
   1affc:	e0bffc15 	stw	r2,-16(fp)
   1b000:	00000e06 	br	1b03c <alt_erase_block_intel+0x138>
   1b004:	e0bffd03 	ldbu	r2,-12(fp)
   1b008:	10803fcc 	andi	r2,r2,255
   1b00c:	10801fcc 	andi	r2,r2,127
   1b010:	1005003a 	cmpeq	r2,r2,zero
   1b014:	1000091e 	bne	r2,zero,1b03c <alt_erase_block_intel+0x138>
   1b018:	00bffec4 	movi	r2,-5
   1b01c:	e0bffc15 	stw	r2,-16(fp)
   1b020:	e0bffb17 	ldw	r2,-20(fp)
   1b024:	10800a17 	ldw	r2,40(r2)
   1b028:	1007883a 	mov	r3,r2
   1b02c:	e0bfff17 	ldw	r2,-4(fp)
   1b030:	1885883a 	add	r2,r3,r2
   1b034:	10800023 	ldbuio	r2,0(r2)
   1b038:	e0bffd05 	stb	r2,-12(fp)
   1b03c:	e0bffb17 	ldw	r2,-20(fp)
   1b040:	11803517 	ldw	r6,212(r2)
   1b044:	e0bffb17 	ldw	r2,-20(fp)
   1b048:	10800a17 	ldw	r2,40(r2)
   1b04c:	1007883a 	mov	r3,r2
   1b050:	e0bfff17 	ldw	r2,-4(fp)
   1b054:	1889883a 	add	r4,r3,r2
   1b058:	01403fc4 	movi	r5,255
   1b05c:	303ee83a 	callr	r6
   1b060:	e0bffc17 	ldw	r2,-16(fp)
   1b064:	e037883a 	mov	sp,fp
   1b068:	dfc00117 	ldw	ra,4(sp)
   1b06c:	df000017 	ldw	fp,0(sp)
   1b070:	dec00204 	addi	sp,sp,8
   1b074:	f800283a 	ret

0001b078 <alt_unlock_block_intel>:
   1b078:	defff904 	addi	sp,sp,-28
   1b07c:	dfc00615 	stw	ra,24(sp)
   1b080:	df000515 	stw	fp,20(sp)
   1b084:	df000504 	addi	fp,sp,20
   1b088:	e13ffe15 	stw	r4,-8(fp)
   1b08c:	e17fff15 	stw	r5,-4(fp)
   1b090:	e03ffc15 	stw	zero,-16(fp)
   1b094:	e0bffe17 	ldw	r2,-8(fp)
   1b098:	10803017 	ldw	r2,192(r2)
   1b09c:	10801924 	muli	r2,r2,100
   1b0a0:	e0bffb15 	stw	r2,-20(fp)
   1b0a4:	e0bffe17 	ldw	r2,-8(fp)
   1b0a8:	11803517 	ldw	r6,212(r2)
   1b0ac:	e0bffe17 	ldw	r2,-8(fp)
   1b0b0:	10800a17 	ldw	r2,40(r2)
   1b0b4:	1007883a 	mov	r3,r2
   1b0b8:	e0bfff17 	ldw	r2,-4(fp)
   1b0bc:	1889883a 	add	r4,r3,r2
   1b0c0:	01402404 	movi	r5,144
   1b0c4:	303ee83a 	callr	r6
   1b0c8:	e0bffe17 	ldw	r2,-8(fp)
   1b0cc:	10800a17 	ldw	r2,40(r2)
   1b0d0:	1007883a 	mov	r3,r2
   1b0d4:	e0bfff17 	ldw	r2,-4(fp)
   1b0d8:	1885883a 	add	r2,r3,r2
   1b0dc:	10800104 	addi	r2,r2,4
   1b0e0:	10800023 	ldbuio	r2,0(r2)
   1b0e4:	e0bffd45 	stb	r2,-11(fp)
   1b0e8:	e0bffd43 	ldbu	r2,-11(fp)
   1b0ec:	1080004c 	andi	r2,r2,1
   1b0f0:	10803fcc 	andi	r2,r2,255
   1b0f4:	1005003a 	cmpeq	r2,r2,zero
   1b0f8:	1000331e 	bne	r2,zero,1b1c8 <alt_unlock_block_intel+0x150>
   1b0fc:	e0bffe17 	ldw	r2,-8(fp)
   1b100:	11803517 	ldw	r6,212(r2)
   1b104:	e0bffe17 	ldw	r2,-8(fp)
   1b108:	10800a17 	ldw	r2,40(r2)
   1b10c:	1007883a 	mov	r3,r2
   1b110:	e0bfff17 	ldw	r2,-4(fp)
   1b114:	1889883a 	add	r4,r3,r2
   1b118:	01401804 	movi	r5,96
   1b11c:	303ee83a 	callr	r6
   1b120:	e0bffe17 	ldw	r2,-8(fp)
   1b124:	11803517 	ldw	r6,212(r2)
   1b128:	e0bffe17 	ldw	r2,-8(fp)
   1b12c:	10800a17 	ldw	r2,40(r2)
   1b130:	1007883a 	mov	r3,r2
   1b134:	e0bfff17 	ldw	r2,-4(fp)
   1b138:	1889883a 	add	r4,r3,r2
   1b13c:	01403404 	movi	r5,208
   1b140:	303ee83a 	callr	r6
   1b144:	e0bffe17 	ldw	r2,-8(fp)
   1b148:	10800a17 	ldw	r2,40(r2)
   1b14c:	1007883a 	mov	r3,r2
   1b150:	e0bfff17 	ldw	r2,-4(fp)
   1b154:	1885883a 	add	r2,r3,r2
   1b158:	10800023 	ldbuio	r2,0(r2)
   1b15c:	e0bffd05 	stb	r2,-12(fp)
   1b160:	e0bffd03 	ldbu	r2,-12(fp)
   1b164:	10803fcc 	andi	r2,r2,255
   1b168:	1080201c 	xori	r2,r2,128
   1b16c:	10bfe004 	addi	r2,r2,-128
   1b170:	1004803a 	cmplt	r2,r2,zero
   1b174:	1000081e 	bne	r2,zero,1b198 <alt_unlock_block_intel+0x120>
   1b178:	e0bffb17 	ldw	r2,-20(fp)
   1b17c:	10bfffc4 	addi	r2,r2,-1
   1b180:	e0bffb15 	stw	r2,-20(fp)
   1b184:	01000044 	movi	r4,1
   1b188:	001a9d00 	call	1a9d0 <usleep>
   1b18c:	e0bffb17 	ldw	r2,-20(fp)
   1b190:	10800048 	cmpgei	r2,r2,1
   1b194:	103feb1e 	bne	r2,zero,1b144 <alt_unlock_block_intel+0xcc>
   1b198:	e0bffb17 	ldw	r2,-20(fp)
   1b19c:	1004c03a 	cmpne	r2,r2,zero
   1b1a0:	1000031e 	bne	r2,zero,1b1b0 <alt_unlock_block_intel+0x138>
   1b1a4:	00bfe304 	movi	r2,-116
   1b1a8:	e0bffc15 	stw	r2,-16(fp)
   1b1ac:	00000606 	br	1b1c8 <alt_unlock_block_intel+0x150>
   1b1b0:	e0bffd03 	ldbu	r2,-12(fp)
   1b1b4:	10801fcc 	andi	r2,r2,127
   1b1b8:	1005003a 	cmpeq	r2,r2,zero
   1b1bc:	1000021e 	bne	r2,zero,1b1c8 <alt_unlock_block_intel+0x150>
   1b1c0:	00bffec4 	movi	r2,-5
   1b1c4:	e0bffc15 	stw	r2,-16(fp)
   1b1c8:	e0bffe17 	ldw	r2,-8(fp)
   1b1cc:	11803517 	ldw	r6,212(r2)
   1b1d0:	e0bffe17 	ldw	r2,-8(fp)
   1b1d4:	10800a17 	ldw	r2,40(r2)
   1b1d8:	1007883a 	mov	r3,r2
   1b1dc:	e0bfff17 	ldw	r2,-4(fp)
   1b1e0:	1889883a 	add	r4,r3,r2
   1b1e4:	01403fc4 	movi	r5,255
   1b1e8:	303ee83a 	callr	r6
   1b1ec:	e0bffc17 	ldw	r2,-16(fp)
   1b1f0:	e037883a 	mov	sp,fp
   1b1f4:	dfc00117 	ldw	ra,4(sp)
   1b1f8:	df000017 	ldw	fp,0(sp)
   1b1fc:	dec00204 	addi	sp,sp,8
   1b200:	f800283a 	ret

0001b204 <alt_write_word_intel>:
   1b204:	defff904 	addi	sp,sp,-28
   1b208:	dfc00615 	stw	ra,24(sp)
   1b20c:	df000515 	stw	fp,20(sp)
   1b210:	df000504 	addi	fp,sp,20
   1b214:	e13ffd15 	stw	r4,-12(fp)
   1b218:	e17ffe15 	stw	r5,-8(fp)
   1b21c:	e1bfff15 	stw	r6,-4(fp)
   1b220:	e03ffc15 	stw	zero,-16(fp)
   1b224:	e0bffd17 	ldw	r2,-12(fp)
   1b228:	11803517 	ldw	r6,212(r2)
   1b22c:	e0bffd17 	ldw	r2,-12(fp)
   1b230:	10800a17 	ldw	r2,40(r2)
   1b234:	1007883a 	mov	r3,r2
   1b238:	e0bffe17 	ldw	r2,-8(fp)
   1b23c:	1889883a 	add	r4,r3,r2
   1b240:	01401004 	movi	r5,64
   1b244:	303ee83a 	callr	r6
   1b248:	e13ffd17 	ldw	r4,-12(fp)
   1b24c:	e17ffe17 	ldw	r5,-8(fp)
   1b250:	e1bfff17 	ldw	r6,-4(fp)
   1b254:	00142340 	call	14234 <alt_write_value_to_flash>
   1b258:	e0bffd17 	ldw	r2,-12(fp)
   1b25c:	10800a17 	ldw	r2,40(r2)
   1b260:	1007883a 	mov	r3,r2
   1b264:	e0bffe17 	ldw	r2,-8(fp)
   1b268:	1885883a 	add	r2,r3,r2
   1b26c:	10800023 	ldbuio	r2,0(r2)
   1b270:	e0bffb05 	stb	r2,-20(fp)
   1b274:	e0bffb03 	ldbu	r2,-20(fp)
   1b278:	10803fcc 	andi	r2,r2,255
   1b27c:	1080201c 	xori	r2,r2,128
   1b280:	10bfe004 	addi	r2,r2,-128
   1b284:	1004403a 	cmpge	r2,r2,zero
   1b288:	103ff31e 	bne	r2,zero,1b258 <alt_write_word_intel+0x54>
   1b28c:	e0bffb03 	ldbu	r2,-20(fp)
   1b290:	10801fcc 	andi	r2,r2,127
   1b294:	1005003a 	cmpeq	r2,r2,zero
   1b298:	1000021e 	bne	r2,zero,1b2a4 <alt_write_word_intel+0xa0>
   1b29c:	00bffec4 	movi	r2,-5
   1b2a0:	e0bffc15 	stw	r2,-16(fp)
   1b2a4:	e0bffd17 	ldw	r2,-12(fp)
   1b2a8:	11803517 	ldw	r6,212(r2)
   1b2ac:	e0bffd17 	ldw	r2,-12(fp)
   1b2b0:	10800a17 	ldw	r2,40(r2)
   1b2b4:	1007883a 	mov	r3,r2
   1b2b8:	e0bffe17 	ldw	r2,-8(fp)
   1b2bc:	1889883a 	add	r4,r3,r2
   1b2c0:	01403fc4 	movi	r5,255
   1b2c4:	303ee83a 	callr	r6
   1b2c8:	e0bffc17 	ldw	r2,-16(fp)
   1b2cc:	e037883a 	mov	sp,fp
   1b2d0:	dfc00117 	ldw	ra,4(sp)
   1b2d4:	df000017 	ldw	fp,0(sp)
   1b2d8:	dec00204 	addi	sp,sp,8
   1b2dc:	f800283a 	ret

0001b2e0 <alt_busy_sleep>:
   1b2e0:	defffb04 	addi	sp,sp,-20
   1b2e4:	df000415 	stw	fp,16(sp)
   1b2e8:	df000404 	addi	fp,sp,16
   1b2ec:	e13fff15 	stw	r4,-4(fp)
   1b2f0:	008000c4 	movi	r2,3
   1b2f4:	e0bffc15 	stw	r2,-16(fp)
   1b2f8:	e0fffc17 	ldw	r3,-16(fp)
   1b2fc:	008003f4 	movhi	r2,15
   1b300:	10909004 	addi	r2,r2,16960
   1b304:	1887383a 	mul	r3,r3,r2
   1b308:	00817db4 	movhi	r2,1526
   1b30c:	10b84004 	addi	r2,r2,-7936
   1b310:	10c7203a 	divu	r3,r2,r3
   1b314:	00a00034 	movhi	r2,32768
   1b318:	10bfffc4 	addi	r2,r2,-1
   1b31c:	10c7203a 	divu	r3,r2,r3
   1b320:	e0bfff17 	ldw	r2,-4(fp)
   1b324:	10c5203a 	divu	r2,r2,r3
   1b328:	e0bffd15 	stw	r2,-12(fp)
   1b32c:	e0bffd17 	ldw	r2,-12(fp)
   1b330:	1005003a 	cmpeq	r2,r2,zero
   1b334:	1000251e 	bne	r2,zero,1b3cc <alt_busy_sleep+0xec>
   1b338:	e03ffe15 	stw	zero,-8(fp)
   1b33c:	00001406 	br	1b390 <alt_busy_sleep+0xb0>
   1b340:	00a00034 	movhi	r2,32768
   1b344:	10bfffc4 	addi	r2,r2,-1
   1b348:	10bfffc4 	addi	r2,r2,-1
   1b34c:	103ffe1e 	bne	r2,zero,1b348 <alt_busy_sleep+0x68>
   1b350:	e0fffc17 	ldw	r3,-16(fp)
   1b354:	008003f4 	movhi	r2,15
   1b358:	10909004 	addi	r2,r2,16960
   1b35c:	1887383a 	mul	r3,r3,r2
   1b360:	00817db4 	movhi	r2,1526
   1b364:	10b84004 	addi	r2,r2,-7936
   1b368:	10c7203a 	divu	r3,r2,r3
   1b36c:	00a00034 	movhi	r2,32768
   1b370:	10bfffc4 	addi	r2,r2,-1
   1b374:	10c7203a 	divu	r3,r2,r3
   1b378:	e0bfff17 	ldw	r2,-4(fp)
   1b37c:	10c5c83a 	sub	r2,r2,r3
   1b380:	e0bfff15 	stw	r2,-4(fp)
   1b384:	e0bffe17 	ldw	r2,-8(fp)
   1b388:	10800044 	addi	r2,r2,1
   1b38c:	e0bffe15 	stw	r2,-8(fp)
   1b390:	e0fffe17 	ldw	r3,-8(fp)
   1b394:	e0bffd17 	ldw	r2,-12(fp)
   1b398:	18bfe916 	blt	r3,r2,1b340 <alt_busy_sleep+0x60>
   1b39c:	e0fffc17 	ldw	r3,-16(fp)
   1b3a0:	008003f4 	movhi	r2,15
   1b3a4:	10909004 	addi	r2,r2,16960
   1b3a8:	1887383a 	mul	r3,r3,r2
   1b3ac:	00817db4 	movhi	r2,1526
   1b3b0:	10b84004 	addi	r2,r2,-7936
   1b3b4:	10c7203a 	divu	r3,r2,r3
   1b3b8:	e0bfff17 	ldw	r2,-4(fp)
   1b3bc:	1885383a 	mul	r2,r3,r2
   1b3c0:	10bfffc4 	addi	r2,r2,-1
   1b3c4:	103ffe1e 	bne	r2,zero,1b3c0 <alt_busy_sleep+0xe0>
   1b3c8:	00000b06 	br	1b3f8 <alt_busy_sleep+0x118>
   1b3cc:	e0fffc17 	ldw	r3,-16(fp)
   1b3d0:	008003f4 	movhi	r2,15
   1b3d4:	10909004 	addi	r2,r2,16960
   1b3d8:	1887383a 	mul	r3,r3,r2
   1b3dc:	00817db4 	movhi	r2,1526
   1b3e0:	10b84004 	addi	r2,r2,-7936
   1b3e4:	10c7203a 	divu	r3,r2,r3
   1b3e8:	e0bfff17 	ldw	r2,-4(fp)
   1b3ec:	1885383a 	mul	r2,r3,r2
   1b3f0:	10bfffc4 	addi	r2,r2,-1
   1b3f4:	00bffe16 	blt	zero,r2,1b3f0 <alt_busy_sleep+0x110>
   1b3f8:	0005883a 	mov	r2,zero
   1b3fc:	e037883a 	mov	sp,fp
   1b400:	df000017 	ldw	fp,0(sp)
   1b404:	dec00104 	addi	sp,sp,4
   1b408:	f800283a 	ret

0001b40c <alt_find_file>:
   1b40c:	defffa04 	addi	sp,sp,-24
   1b410:	dfc00515 	stw	ra,20(sp)
   1b414:	df000415 	stw	fp,16(sp)
   1b418:	df000404 	addi	fp,sp,16
   1b41c:	e13ffe15 	stw	r4,-8(fp)
   1b420:	00820034 	movhi	r2,2048
   1b424:	108a2504 	addi	r2,r2,10388
   1b428:	10800017 	ldw	r2,0(r2)
   1b42c:	e0bffd15 	stw	r2,-12(fp)
   1b430:	00003306 	br	1b500 <alt_find_file+0xf4>
   1b434:	e0bffd17 	ldw	r2,-12(fp)
   1b438:	11000217 	ldw	r4,8(r2)
   1b43c:	00083d00 	call	83d0 <strlen>
   1b440:	e0bffc15 	stw	r2,-16(fp)
   1b444:	e0bffd17 	ldw	r2,-12(fp)
   1b448:	10c00217 	ldw	r3,8(r2)
   1b44c:	e0bffc17 	ldw	r2,-16(fp)
   1b450:	1885883a 	add	r2,r3,r2
   1b454:	10bfffc4 	addi	r2,r2,-1
   1b458:	10800003 	ldbu	r2,0(r2)
   1b45c:	10803fcc 	andi	r2,r2,255
   1b460:	1080201c 	xori	r2,r2,128
   1b464:	10bfe004 	addi	r2,r2,-128
   1b468:	10800bd8 	cmpnei	r2,r2,47
   1b46c:	1000031e 	bne	r2,zero,1b47c <alt_find_file+0x70>
   1b470:	e0bffc17 	ldw	r2,-16(fp)
   1b474:	10bfffc4 	addi	r2,r2,-1
   1b478:	e0bffc15 	stw	r2,-16(fp)
   1b47c:	e0bffc17 	ldw	r2,-16(fp)
   1b480:	1007883a 	mov	r3,r2
   1b484:	e0bffe17 	ldw	r2,-8(fp)
   1b488:	1885883a 	add	r2,r3,r2
   1b48c:	10800003 	ldbu	r2,0(r2)
   1b490:	10803fcc 	andi	r2,r2,255
   1b494:	1080201c 	xori	r2,r2,128
   1b498:	10bfe004 	addi	r2,r2,-128
   1b49c:	10800be0 	cmpeqi	r2,r2,47
   1b4a0:	10000a1e 	bne	r2,zero,1b4cc <alt_find_file+0xc0>
   1b4a4:	e0bffc17 	ldw	r2,-16(fp)
   1b4a8:	1007883a 	mov	r3,r2
   1b4ac:	e0bffe17 	ldw	r2,-8(fp)
   1b4b0:	1885883a 	add	r2,r3,r2
   1b4b4:	10800003 	ldbu	r2,0(r2)
   1b4b8:	10803fcc 	andi	r2,r2,255
   1b4bc:	1080201c 	xori	r2,r2,128
   1b4c0:	10bfe004 	addi	r2,r2,-128
   1b4c4:	1004c03a 	cmpne	r2,r2,zero
   1b4c8:	10000a1e 	bne	r2,zero,1b4f4 <alt_find_file+0xe8>
   1b4cc:	e0bffd17 	ldw	r2,-12(fp)
   1b4d0:	11000217 	ldw	r4,8(r2)
   1b4d4:	e1bffc17 	ldw	r6,-16(fp)
   1b4d8:	e17ffe17 	ldw	r5,-8(fp)
   1b4dc:	00080000 	call	8000 <memcmp>
   1b4e0:	1004c03a 	cmpne	r2,r2,zero
   1b4e4:	1000031e 	bne	r2,zero,1b4f4 <alt_find_file+0xe8>
   1b4e8:	e0bffd17 	ldw	r2,-12(fp)
   1b4ec:	e0bfff15 	stw	r2,-4(fp)
   1b4f0:	00000806 	br	1b514 <alt_find_file+0x108>
   1b4f4:	e0bffd17 	ldw	r2,-12(fp)
   1b4f8:	10800017 	ldw	r2,0(r2)
   1b4fc:	e0bffd15 	stw	r2,-12(fp)
   1b500:	00c20034 	movhi	r3,2048
   1b504:	18ca2504 	addi	r3,r3,10388
   1b508:	e0bffd17 	ldw	r2,-12(fp)
   1b50c:	10ffc91e 	bne	r2,r3,1b434 <alt_find_file+0x28>
   1b510:	e03fff15 	stw	zero,-4(fp)
   1b514:	e0bfff17 	ldw	r2,-4(fp)
   1b518:	e037883a 	mov	sp,fp
   1b51c:	dfc00117 	ldw	ra,4(sp)
   1b520:	df000017 	ldw	fp,0(sp)
   1b524:	dec00204 	addi	sp,sp,8
   1b528:	f800283a 	ret

0001b52c <alt_get_fd>:
   1b52c:	defffc04 	addi	sp,sp,-16
   1b530:	df000315 	stw	fp,12(sp)
   1b534:	df000304 	addi	fp,sp,12
   1b538:	e13fff15 	stw	r4,-4(fp)
   1b53c:	00bffa04 	movi	r2,-24
   1b540:	e0bffd15 	stw	r2,-12(fp)
   1b544:	e03ffe15 	stw	zero,-8(fp)
   1b548:	00001e06 	br	1b5c4 <alt_get_fd+0x98>
   1b54c:	e0bffe17 	ldw	r2,-8(fp)
   1b550:	00c20034 	movhi	r3,2048
   1b554:	18c4b704 	addi	r3,r3,4828
   1b558:	10800324 	muli	r2,r2,12
   1b55c:	10c5883a 	add	r2,r2,r3
   1b560:	10800017 	ldw	r2,0(r2)
   1b564:	1004c03a 	cmpne	r2,r2,zero
   1b568:	1000131e 	bne	r2,zero,1b5b8 <alt_get_fd+0x8c>
   1b56c:	e0bffe17 	ldw	r2,-8(fp)
   1b570:	00c20034 	movhi	r3,2048
   1b574:	18c4b704 	addi	r3,r3,4828
   1b578:	10800324 	muli	r2,r2,12
   1b57c:	10c7883a 	add	r3,r2,r3
   1b580:	e0bfff17 	ldw	r2,-4(fp)
   1b584:	18800015 	stw	r2,0(r3)
   1b588:	00820034 	movhi	r2,2048
   1b58c:	108a2904 	addi	r2,r2,10404
   1b590:	10c00017 	ldw	r3,0(r2)
   1b594:	e0bffe17 	ldw	r2,-8(fp)
   1b598:	1880040e 	bge	r3,r2,1b5ac <alt_get_fd+0x80>
   1b59c:	00c20034 	movhi	r3,2048
   1b5a0:	18ca2904 	addi	r3,r3,10404
   1b5a4:	e0bffe17 	ldw	r2,-8(fp)
   1b5a8:	18800015 	stw	r2,0(r3)
   1b5ac:	e0bffe17 	ldw	r2,-8(fp)
   1b5b0:	e0bffd15 	stw	r2,-12(fp)
   1b5b4:	00000606 	br	1b5d0 <alt_get_fd+0xa4>
   1b5b8:	e0bffe17 	ldw	r2,-8(fp)
   1b5bc:	10800044 	addi	r2,r2,1
   1b5c0:	e0bffe15 	stw	r2,-8(fp)
   1b5c4:	e0bffe17 	ldw	r2,-8(fp)
   1b5c8:	10800810 	cmplti	r2,r2,32
   1b5cc:	103fdf1e 	bne	r2,zero,1b54c <alt_get_fd+0x20>
   1b5d0:	e0bffd17 	ldw	r2,-12(fp)
   1b5d4:	e037883a 	mov	sp,fp
   1b5d8:	df000017 	ldw	fp,0(sp)
   1b5dc:	dec00104 	addi	sp,sp,4
   1b5e0:	f800283a 	ret

0001b5e4 <atexit>:
   1b5e4:	200b883a 	mov	r5,r4
   1b5e8:	000d883a 	mov	r6,zero
   1b5ec:	0009883a 	mov	r4,zero
   1b5f0:	000f883a 	mov	r7,zero
   1b5f4:	001b6301 	jmpi	1b630 <__register_exitproc>

0001b5f8 <exit>:
   1b5f8:	defffe04 	addi	sp,sp,-8
   1b5fc:	000b883a 	mov	r5,zero
   1b600:	dc000015 	stw	r16,0(sp)
   1b604:	dfc00115 	stw	ra,4(sp)
   1b608:	2021883a 	mov	r16,r4
   1b60c:	001b7680 	call	1b768 <__call_exitprocs>
   1b610:	00820034 	movhi	r2,2048
   1b614:	108a2004 	addi	r2,r2,10368
   1b618:	11000017 	ldw	r4,0(r2)
   1b61c:	20800f17 	ldw	r2,60(r4)
   1b620:	10000126 	beq	r2,zero,1b628 <exit+0x30>
   1b624:	103ee83a 	callr	r2
   1b628:	8009883a 	mov	r4,r16
   1b62c:	001b9580 	call	1b958 <_exit>

0001b630 <__register_exitproc>:
   1b630:	defffa04 	addi	sp,sp,-24
   1b634:	00820034 	movhi	r2,2048
   1b638:	108a2004 	addi	r2,r2,10368
   1b63c:	dc000015 	stw	r16,0(sp)
   1b640:	14000017 	ldw	r16,0(r2)
   1b644:	dd000415 	stw	r20,16(sp)
   1b648:	2829883a 	mov	r20,r5
   1b64c:	81405217 	ldw	r5,328(r16)
   1b650:	dcc00315 	stw	r19,12(sp)
   1b654:	dc800215 	stw	r18,8(sp)
   1b658:	dc400115 	stw	r17,4(sp)
   1b65c:	dfc00515 	stw	ra,20(sp)
   1b660:	2023883a 	mov	r17,r4
   1b664:	3027883a 	mov	r19,r6
   1b668:	3825883a 	mov	r18,r7
   1b66c:	28002526 	beq	r5,zero,1b704 <__register_exitproc+0xd4>
   1b670:	29000117 	ldw	r4,4(r5)
   1b674:	008007c4 	movi	r2,31
   1b678:	11002716 	blt	r2,r4,1b718 <__register_exitproc+0xe8>
   1b67c:	8800101e 	bne	r17,zero,1b6c0 <__register_exitproc+0x90>
   1b680:	2105883a 	add	r2,r4,r4
   1b684:	1085883a 	add	r2,r2,r2
   1b688:	20c00044 	addi	r3,r4,1
   1b68c:	1145883a 	add	r2,r2,r5
   1b690:	0009883a 	mov	r4,zero
   1b694:	15000215 	stw	r20,8(r2)
   1b698:	28c00115 	stw	r3,4(r5)
   1b69c:	2005883a 	mov	r2,r4
   1b6a0:	dfc00517 	ldw	ra,20(sp)
   1b6a4:	dd000417 	ldw	r20,16(sp)
   1b6a8:	dcc00317 	ldw	r19,12(sp)
   1b6ac:	dc800217 	ldw	r18,8(sp)
   1b6b0:	dc400117 	ldw	r17,4(sp)
   1b6b4:	dc000017 	ldw	r16,0(sp)
   1b6b8:	dec00604 	addi	sp,sp,24
   1b6bc:	f800283a 	ret
   1b6c0:	29802204 	addi	r6,r5,136
   1b6c4:	00800044 	movi	r2,1
   1b6c8:	110e983a 	sll	r7,r2,r4
   1b6cc:	30c04017 	ldw	r3,256(r6)
   1b6d0:	2105883a 	add	r2,r4,r4
   1b6d4:	1085883a 	add	r2,r2,r2
   1b6d8:	1185883a 	add	r2,r2,r6
   1b6dc:	19c6b03a 	or	r3,r3,r7
   1b6e0:	14802015 	stw	r18,128(r2)
   1b6e4:	14c00015 	stw	r19,0(r2)
   1b6e8:	00800084 	movi	r2,2
   1b6ec:	30c04015 	stw	r3,256(r6)
   1b6f0:	88bfe31e 	bne	r17,r2,1b680 <__register_exitproc+0x50>
   1b6f4:	30804117 	ldw	r2,260(r6)
   1b6f8:	11c4b03a 	or	r2,r2,r7
   1b6fc:	30804115 	stw	r2,260(r6)
   1b700:	003fdf06 	br	1b680 <__register_exitproc+0x50>
   1b704:	00820234 	movhi	r2,2056
   1b708:	10811404 	addi	r2,r2,1104
   1b70c:	100b883a 	mov	r5,r2
   1b710:	80805215 	stw	r2,328(r16)
   1b714:	003fd606 	br	1b670 <__register_exitproc+0x40>
   1b718:	00800034 	movhi	r2,0
   1b71c:	10800004 	addi	r2,r2,0
   1b720:	1000021e 	bne	r2,zero,1b72c <__register_exitproc+0xfc>
   1b724:	013fffc4 	movi	r4,-1
   1b728:	003fdc06 	br	1b69c <__register_exitproc+0x6c>
   1b72c:	01006404 	movi	r4,400
   1b730:	103ee83a 	callr	r2
   1b734:	1007883a 	mov	r3,r2
   1b738:	103ffa26 	beq	r2,zero,1b724 <__register_exitproc+0xf4>
   1b73c:	80805217 	ldw	r2,328(r16)
   1b740:	180b883a 	mov	r5,r3
   1b744:	18000115 	stw	zero,4(r3)
   1b748:	18800015 	stw	r2,0(r3)
   1b74c:	80c05215 	stw	r3,328(r16)
   1b750:	18006215 	stw	zero,392(r3)
   1b754:	18006315 	stw	zero,396(r3)
   1b758:	0009883a 	mov	r4,zero
   1b75c:	883fc826 	beq	r17,zero,1b680 <__register_exitproc+0x50>
   1b760:	003fd706 	br	1b6c0 <__register_exitproc+0x90>

0001b764 <register_fini>:
   1b764:	f800283a 	ret

0001b768 <__call_exitprocs>:
   1b768:	00820034 	movhi	r2,2048
   1b76c:	108a2004 	addi	r2,r2,10368
   1b770:	10800017 	ldw	r2,0(r2)
   1b774:	defff304 	addi	sp,sp,-52
   1b778:	df000b15 	stw	fp,44(sp)
   1b77c:	d8800115 	stw	r2,4(sp)
   1b780:	00800034 	movhi	r2,0
   1b784:	10800004 	addi	r2,r2,0
   1b788:	1005003a 	cmpeq	r2,r2,zero
   1b78c:	d8800215 	stw	r2,8(sp)
   1b790:	d8800117 	ldw	r2,4(sp)
   1b794:	dd400815 	stw	r21,32(sp)
   1b798:	dd000715 	stw	r20,28(sp)
   1b79c:	10805204 	addi	r2,r2,328
   1b7a0:	dfc00c15 	stw	ra,48(sp)
   1b7a4:	ddc00a15 	stw	r23,40(sp)
   1b7a8:	dd800915 	stw	r22,36(sp)
   1b7ac:	dcc00615 	stw	r19,24(sp)
   1b7b0:	dc800515 	stw	r18,20(sp)
   1b7b4:	dc400415 	stw	r17,16(sp)
   1b7b8:	dc000315 	stw	r16,12(sp)
   1b7bc:	282b883a 	mov	r21,r5
   1b7c0:	2039883a 	mov	fp,r4
   1b7c4:	d8800015 	stw	r2,0(sp)
   1b7c8:	2829003a 	cmpeq	r20,r5,zero
   1b7cc:	d8800117 	ldw	r2,4(sp)
   1b7d0:	14405217 	ldw	r17,328(r2)
   1b7d4:	88001026 	beq	r17,zero,1b818 <__call_exitprocs+0xb0>
   1b7d8:	ddc00017 	ldw	r23,0(sp)
   1b7dc:	88800117 	ldw	r2,4(r17)
   1b7e0:	8c802204 	addi	r18,r17,136
   1b7e4:	143fffc4 	addi	r16,r2,-1
   1b7e8:	80000916 	blt	r16,zero,1b810 <__call_exitprocs+0xa8>
   1b7ec:	05bfffc4 	movi	r22,-1
   1b7f0:	a000151e 	bne	r20,zero,1b848 <__call_exitprocs+0xe0>
   1b7f4:	8409883a 	add	r4,r16,r16
   1b7f8:	2105883a 	add	r2,r4,r4
   1b7fc:	1485883a 	add	r2,r2,r18
   1b800:	10c02017 	ldw	r3,128(r2)
   1b804:	a8c01126 	beq	r21,r3,1b84c <__call_exitprocs+0xe4>
   1b808:	843fffc4 	addi	r16,r16,-1
   1b80c:	85bff81e 	bne	r16,r22,1b7f0 <__call_exitprocs+0x88>
   1b810:	d8800217 	ldw	r2,8(sp)
   1b814:	10003126 	beq	r2,zero,1b8dc <__call_exitprocs+0x174>
   1b818:	dfc00c17 	ldw	ra,48(sp)
   1b81c:	df000b17 	ldw	fp,44(sp)
   1b820:	ddc00a17 	ldw	r23,40(sp)
   1b824:	dd800917 	ldw	r22,36(sp)
   1b828:	dd400817 	ldw	r21,32(sp)
   1b82c:	dd000717 	ldw	r20,28(sp)
   1b830:	dcc00617 	ldw	r19,24(sp)
   1b834:	dc800517 	ldw	r18,20(sp)
   1b838:	dc400417 	ldw	r17,16(sp)
   1b83c:	dc000317 	ldw	r16,12(sp)
   1b840:	dec00d04 	addi	sp,sp,52
   1b844:	f800283a 	ret
   1b848:	8409883a 	add	r4,r16,r16
   1b84c:	88c00117 	ldw	r3,4(r17)
   1b850:	2105883a 	add	r2,r4,r4
   1b854:	1445883a 	add	r2,r2,r17
   1b858:	18ffffc4 	addi	r3,r3,-1
   1b85c:	11800217 	ldw	r6,8(r2)
   1b860:	1c001526 	beq	r3,r16,1b8b8 <__call_exitprocs+0x150>
   1b864:	10000215 	stw	zero,8(r2)
   1b868:	303fe726 	beq	r6,zero,1b808 <__call_exitprocs+0xa0>
   1b86c:	00c00044 	movi	r3,1
   1b870:	1c06983a 	sll	r3,r3,r16
   1b874:	90804017 	ldw	r2,256(r18)
   1b878:	8cc00117 	ldw	r19,4(r17)
   1b87c:	1884703a 	and	r2,r3,r2
   1b880:	10001426 	beq	r2,zero,1b8d4 <__call_exitprocs+0x16c>
   1b884:	90804117 	ldw	r2,260(r18)
   1b888:	1884703a 	and	r2,r3,r2
   1b88c:	10000c1e 	bne	r2,zero,1b8c0 <__call_exitprocs+0x158>
   1b890:	2105883a 	add	r2,r4,r4
   1b894:	1485883a 	add	r2,r2,r18
   1b898:	11400017 	ldw	r5,0(r2)
   1b89c:	e009883a 	mov	r4,fp
   1b8a0:	303ee83a 	callr	r6
   1b8a4:	88800117 	ldw	r2,4(r17)
   1b8a8:	98bfc81e 	bne	r19,r2,1b7cc <__call_exitprocs+0x64>
   1b8ac:	b8800017 	ldw	r2,0(r23)
   1b8b0:	147fd526 	beq	r2,r17,1b808 <__call_exitprocs+0xa0>
   1b8b4:	003fc506 	br	1b7cc <__call_exitprocs+0x64>
   1b8b8:	8c000115 	stw	r16,4(r17)
   1b8bc:	003fea06 	br	1b868 <__call_exitprocs+0x100>
   1b8c0:	2105883a 	add	r2,r4,r4
   1b8c4:	1485883a 	add	r2,r2,r18
   1b8c8:	11000017 	ldw	r4,0(r2)
   1b8cc:	303ee83a 	callr	r6
   1b8d0:	003ff406 	br	1b8a4 <__call_exitprocs+0x13c>
   1b8d4:	303ee83a 	callr	r6
   1b8d8:	003ff206 	br	1b8a4 <__call_exitprocs+0x13c>
   1b8dc:	88800117 	ldw	r2,4(r17)
   1b8e0:	1000081e 	bne	r2,zero,1b904 <__call_exitprocs+0x19c>
   1b8e4:	89000017 	ldw	r4,0(r17)
   1b8e8:	20000726 	beq	r4,zero,1b908 <__call_exitprocs+0x1a0>
   1b8ec:	b9000015 	stw	r4,0(r23)
   1b8f0:	8809883a 	mov	r4,r17
   1b8f4:	00000000 	call	0 <__alt_mem_onchip_memory>
   1b8f8:	bc400017 	ldw	r17,0(r23)
   1b8fc:	883fb71e 	bne	r17,zero,1b7dc <__call_exitprocs+0x74>
   1b900:	003fc506 	br	1b818 <__call_exitprocs+0xb0>
   1b904:	89000017 	ldw	r4,0(r17)
   1b908:	882f883a 	mov	r23,r17
   1b90c:	2023883a 	mov	r17,r4
   1b910:	883fb21e 	bne	r17,zero,1b7dc <__call_exitprocs+0x74>
   1b914:	003fc006 	br	1b818 <__call_exitprocs+0xb0>

0001b918 <alt_sim_halt>:
   1b918:	defffd04 	addi	sp,sp,-12
   1b91c:	df000215 	stw	fp,8(sp)
   1b920:	df000204 	addi	fp,sp,8
   1b924:	e13fff15 	stw	r4,-4(fp)
   1b928:	e0bfff17 	ldw	r2,-4(fp)
   1b92c:	e0bffe15 	stw	r2,-8(fp)
   1b930:	e0bffe17 	ldw	r2,-8(fp)
   1b934:	1005003a 	cmpeq	r2,r2,zero
   1b938:	1000021e 	bne	r2,zero,1b944 <alt_sim_halt+0x2c>
   1b93c:	002af070 	cmpltui	zero,zero,43969
   1b940:	00000106 	br	1b948 <alt_sim_halt+0x30>
   1b944:	002af0b0 	cmpltui	zero,zero,43970
   1b948:	e037883a 	mov	sp,fp
   1b94c:	df000017 	ldw	fp,0(sp)
   1b950:	dec00104 	addi	sp,sp,4
   1b954:	f800283a 	ret

0001b958 <_exit>:
   1b958:	defffd04 	addi	sp,sp,-12
   1b95c:	dfc00215 	stw	ra,8(sp)
   1b960:	df000115 	stw	fp,4(sp)
   1b964:	df000104 	addi	fp,sp,4
   1b968:	e13fff15 	stw	r4,-4(fp)
   1b96c:	e13fff17 	ldw	r4,-4(fp)
   1b970:	001b9180 	call	1b918 <alt_sim_halt>
   1b974:	003fff06 	br	1b974 <_exit+0x1c>
   1b978:	0001b764 	muli	zero,zero,1757
