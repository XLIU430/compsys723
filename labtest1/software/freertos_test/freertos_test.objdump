
freertos_test.elf:     file format elf32-littlenios2
freertos_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001bbfc memsz 0x0001bbfc flags r-x
    LOAD off    0x0001d000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x0001d000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x0000293c memsz 0x0008066c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01000000  01000000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b9d4  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ad0  08000000  08000000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e6c  08000ad0  08000ad0  0001dad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007ddcb  0800293c  0800293c  0001f93c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  0001f93c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010e8  00000000  00000000  0001f988  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002b75  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003695d  00000000  00000000  000235e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b237  00000000  00000000  00059f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001f698  00000000  00000000  00065179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000034c4  00000000  00000000  00084814  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003015  00000000  00000000  00087cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011bc8  00000000  00000000  0008aced  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0009c8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a08  00000000  00000000  0009c908  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a345c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a345f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a3464  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a3465  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a3466  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a346a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a346e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000a3472  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000a347b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000a3484  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000a348d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000a3492  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000ad0 l    d  .rwdata	00000000 .rwdata
0800293c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000028c l       .text	00000000 alt_after_alt_main
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 croutine.c
08002940 l     O .bss	00000004 uxTopCoRoutineReadyPriority
08002944 l     O .bss	00000004 xCoRoutineTickCount
08002948 l     O .bss	00000004 xLastTickCount
0800294c l     O .bss	00000004 xPassedTicks
00000780 l     F .text	0000009c prvInitialiseCoRoutineLists
08002a38 l     O .bss	00000028 pxReadyCoRoutineLists
08002954 l     O .bss	00000004 pxOverflowDelayedCoRoutineList
08002950 l     O .bss	00000004 pxDelayedCoRoutineList
00000470 l     F .text	000000d4 prvCheckPendingReadyList
08002a88 l     O .bss	00000014 xPendingReadyCoRoutineList
00000544 l     F .text	00000150 prvCheckDelayedList
08002a60 l     O .bss	00000014 xDelayedCoRoutineList1
08002a74 l     O .bss	00000014 xDelayedCoRoutineList2
00000000 l    df *ABS*	00000000 event_groups.c
00000f44 l     F .text	00000078 prvTestWaitCondition
00000000 l    df *ABS*	00000000 heap.c
080028bc l     O .rwdata	00000002 heapSTRUCT_SIZE
080028c0 l     O .rwdata	00000004 xTotalHeapSize
08002958 l     O .bss	00000004 pxEnd
080028c4 l     O .rwdata	00000004 xFreeBytesRemaining
0000120c l     F .text	000000c0 prvHeapInit
0800295c l     O .bss	00000008 xStart
000012cc l     F .text	00000138 prvInsertBlockIntoFreeList
08002a9c l     O .bss	0007d000 xHeap
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
000016cc l     F .text	00000028 prvReadGp
00001830 l     F .text	00000098 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 queue.c
0000270c l     F .text	00000194 prvCopyDataToQueue
00002ac4 l     F .text	00000058 prvIsQueueFull
0000293c l     F .text	000000f0 prvUnlockQueue
000028a0 l     F .text	0000009c prvCopyDataFromQueue
00002a2c l     F .text	00000054 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
08002968 l     O .bss	00000004 uxTasksDeleted
0800296c l     O .bss	00000004 uxCurrentNumberOfTasks
08002970 l     O .bss	00000004 xTickCount
08002974 l     O .bss	00000004 uxTopReadyPriority
08002978 l     O .bss	00000004 xSchedulerRunning
0800297c l     O .bss	00000004 uxPendedTicks
08002980 l     O .bss	00000004 xYieldPending
08002984 l     O .bss	00000004 xNumOfOverflows
08002988 l     O .bss	00000004 uxTaskNumber
080028c8 l     O .rwdata	00000004 xNextTaskUnblockTime
0800298c l     O .bss	00000004 uxSchedulerSuspended
00003c10 l     F .text	000000d8 prvAllocateTCBAndStack
00003910 l     F .text	0000013c prvInitialiseTCBVariables
00003a4c l     F .text	000000a8 prvInitialiseTaskLists
0807fa9c l     O .bss	000000f0 pxReadyTasksLists
0807fbc8 l     O .bss	00000014 xTasksWaitingTermination
00003dfc l     F .text	00000070 prvResetNextTaskUnblockTime
00003b98 l     F .text	00000078 prvAddCurrentTaskToDelayedList
000038f4 l     F .text	0000001c prvIdleTask
0807fbb4 l     O .bss	00000014 xPendingReadyList
08002990 l     O .bss	00000004 pxDelayedTaskList
08002994 l     O .bss	00000004 pxOverflowDelayedTaskList
08000039 l     O .rodata	00000014 ucExpectedStackBytes.2768
00003af4 l     F .text	000000a4 prvCheckTasksWaitingTermination
0807fb8c l     O .bss	00000014 xDelayedTaskList1
0807fba0 l     O .bss	00000014 xDelayedTaskList2
00003dc0 l     F .text	0000003c prvDeleteTCB
00003ce8 l     F .text	00000068 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
08002998 l     O .bss	00000004 xTimerQueue
00005044 l     F .text	0000007c prvCheckForValidListAndQueue
00004b50 l     F .text	00000034 prvTimerTask
00004aa4 l     F .text	000000ac prvProcessExpiredTimer
080029a0 l     O .bss	00000004 pxCurrentTimerList
00004ce8 l     F .text	000000cc prvInsertTimerInActiveList
00004c24 l     F .text	00000060 prvGetNextExpireTime
00004b84 l     F .text	000000a0 prvProcessTimerOrBlockTask
00004db4 l     F .text	0000018c prvProcessReceivedCommands
00004c84 l     F .text	00000064 prvSampleTimeNow
0800299c l     O .bss	00000004 xLastTime.2546
00004f40 l     F .text	00000104 prvSwitchTimerLists
080029a4 l     O .bss	00000004 pxOverflowTimerList
0807fbdc l     O .bss	00000014 xActiveTimerList1
0807fbf0 l     O .bss	00000014 xActiveTimerList2
00000000 l    df *ABS*	00000000 FreeRTOS_freq_plot.c
080029c4 l     O .bss	00000004 Q_freq_data
00000000 l    df *ABS*	00000000 dp-bit.c
00006dec l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strtod.c
00008794 l     F .text	00000048 match
08000afc l     O .rwdata	00000014 fpi.1950
08000528 l     O .rodata	00000028 tinytens
08000ae8 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 vfprintf.c
00009e00 l     F .text	00000058 __sprint_r
080005be l     O .rodata	00000010 blanks.3452
080005ae l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000be64 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000d860 l     F .text	00000058 std
0000d96c l     F .text	00000008 __fp_lock
0000d974 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e57c l     F .text	00000024 htinit
0000e608 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000ee70 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 impure.c
08000b10 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
080028f8 l     O .rwdata	00000004 charset
08000610 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08000758 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00012e34 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00013378 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000133d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000134d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000135f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00013748 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013974 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08002920 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013c10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080014cc l     O .rwdata	000000d8 flash_controller
080015a4 l     O .rwdata	00001060 jtag_uart
08002604 l     O .rwdata	00000120 character_lcd
08002724 l     O .rwdata	000000c4 uart
080027e8 l     O .rwdata	00000038 ps2
08002820 l     O .rwdata	00000048 video_character_buffer_with_dma
08002868 l     O .rwdata	00000054 video_pixel_buffer_dma
00014010 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
000140e4 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00014ee4 l     F .text	0000007c alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015fc8 l     F .text	0000022c altera_avalon_jtag_uart_irq
000161f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
08002924 l     O .rwdata	00000004 colstart
00016870 l     F .text	000000b8 lcd_write_command
00016928 l     F .text	000000d4 lcd_write_data
000169fc l     F .text	000000c4 lcd_clear_screen
00016ac0 l     F .text	000001ec lcd_repaint_screen
00016cac l     F .text	000000c8 lcd_scroll_up
00016d74 l     F .text	000002d0 lcd_handle_escape
00017548 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000177a8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00017a5c l     F .text	000000a0 altera_avalon_uart_irq
00017afc l     F .text	000000e0 altera_avalon_uart_rxirq
00017bdc l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00017fc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000181f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a440 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a6cc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0001a808 l     F .text	000000dc alt_file_locked
0001aa6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0001b064 l     F .text	000000bc alt_write_word_amd
0001af40 l     F .text	00000124 alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0001b318 l     F .text	0000018c alt_unlock_block_intel
0001b4a4 l     F .text	000000dc alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0800094d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001ba04 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001bbb8 l     F .text	00000040 alt_sim_halt
000084c4 g     F .text	0000001c putchar
0001006c g     F .text	00000094 _mprec_log10
00010158 g     F .text	00000088 __any_on
00011b9c g     F .text	00000070 _isatty_r
08000730 g     O .rodata	00000028 __mprec_tinytens
000137a8 g     F .text	0000006c alt_main
000198c0 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
000084e8 g     F .text	000000a0 _puts_r
000149a4 g     F .text	00000048 alt_read_query_entry_32bit
0001849c g     F .text	00000058 alt_up_ps2_disable_read_interrupt
080803dc g     O .bss	00000100 alt_irq
00011c0c g     F .text	00000078 _lseek_r
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
00003548 g     F .text	00000074 vTaskPlaceOnUnorderedEventList
000011d0 g     F .text	00000020 xPortGetFreeHeapSize
0001411c g     F .text	000002c0 alt_flash_cfi_write
00000c9c g     F .text	0000003c xEventGroupGetBitsFromISR
00012a94 g     F .text	00000088 __eqdf2
0808066c g       *ABS*	00000000 __alt_heap_start
000048fc g     F .text	000000b0 xTimerCreate
0000844c g     F .text	00000044 printf
0807fc2c g     O .bss	0000000a oddStr
0001151c g     F .text	00000068 __sseek
0000d8c8 g     F .text	000000a4 __sinit
0001171c g     F .text	00000130 __swbuf_r
00018ae4 g     F .text	00000114 alt_up_char_buffer_string
000182b4 g     F .text	00000034 read_CE_bit
00002b64 g     F .text	00000094 vQueueWaitForMessageRestricted
0000f128 g     F .text	00000084 _setlocale_r
0000d9c8 g     F .text	00000068 __sfmoreglue
00013834 g     F .text	00000020 __malloc_unlock
00018648 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
000087dc g     F .text	000014e4 _strtod_r
0807fc36 g     O .bss	0000001e testStr
00018a14 g     F .text	000000d0 alt_up_char_buffer_draw
000008f0 g     F .text	00000184 xEventGroupSync
080028dc g     O .rwdata	00000008 ROCThresh
0000fb80 g     F .text	000000e0 memmove
0000081c g     F .text	00000080 xCoRoutineRemoveFromEventList
080028e4 g     O .rwdata	00000008 previousFreq
00004114 g     F .text	00000054 vTaskEnterCritical
0000d9b8 g     F .text	00000010 _cleanup
000020c0 g     F .text	000000e8 xQueueGenericSendFromISR
000101e0 g     F .text	000000bc _Balloc
080029c8 g     O .bss	00000004 timer
0000693c g     F .text	00000118 switchPollingTask
00018c94 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000790c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00014b30 g     F .text	00000048 alt_write_flash_command_32bit_device_16bit_mode
00018c54 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	00000000 __reset
00001d78 g     F .text	00000094 xQueueGiveMutexRecursive
08002964 g     O .bss	00000004 pxCurrentTCB
00011b28 g     F .text	00000074 _fstat_r
080029bc g     O .bss	00000001 loadManage
00014638 g     F .text	000002e8 alt_flash_program_block
08002a1c g     O .bss	00000004 errno
000130f0 g     F .text	0000002c __make_fp
08002a28 g     O .bss	00000004 alt_argv
00004434 g     F .text	00000188 xTaskNotify
0800a8bc g       *ABS*	00000000 _gp
0001ac70 g     F .text	00000030 usleep
00018e34 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00000a74 g     F .text	000001c0 xEventGroupWaitBits
080029cc g     O .bss	00000004 sw_result
0800134c g     O .rwdata	00000180 alt_fd_list
08000adc g     O .rwdata	0000000a ROCStr
000017dc g     F .text	00000038 xPortStartScheduler
000084e0 g     F .text	00000008 _putchar_r
080029d0 g     O .bss	00000004 checkIfFieldRequired
00002fac g     F .text	00000044 vTaskEndScheduler
0001a568 g     F .text	00000094 alt_find_dev
00008314 g     F .text	000000a0 memcpy
000034e8 g     F .text	00000060 vTaskPlaceOnEventList
0000eebc g     F .text	00000248 __hexnan
00002bf8 g     F .text	000001c8 xTaskGenericCreate
00018bf8 g     F .text	0000005c alt_up_char_buffer_clear
0000d9ac g     F .text	0000000c _cleanup_r
00007aa4 g     F .text	000000f8 __floatsidf
0001a790 g     F .text	00000078 alt_io_redirect
00012ba4 g     F .text	00000088 __ltdf2
00002590 g     F .text	00000080 xQueuePeekFromISR
0001bc1c g       *ABS*	00000000 __DTOR_END__
00008588 g     F .text	00000014 puts
00001150 g     F .text	00000080 vPortFree
0807fc54 g     O .bss	00000320 freq
00000290 g     F .text	00000140 xCoRoutineCreate
0000ffbc g     F .text	000000b0 __ratio
01000000 g       *ABS*	00000000 __alt_mem_flash_controller
00018ee4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0001640c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008490 g     F .text	00000034 _printf_r
00012f70 g     F .text	00000008 __udivsi3
00013538 g     F .text	000000c0 isatty
00006628 g     F .text	00000074 loadCtlTask
08000640 g     O .rodata	000000c8 __mprec_tens
00003d50 g     F .text	00000070 uxTaskGetStackHighWaterMark
00019570 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0000f104 g     F .text	00000008 __locale_charset
00011cfc g     F .text	000000a4 __fixunsdfsi
0000149c g     F .text	00000088 vListInsertEnd
08002a10 g     O .bss	00000004 __malloc_top_pad
0807ff74 g     O .bss	00000048 sw_result_bin
0000089c g     F .text	00000054 xEventGroupCreate
080028f4 g     O .rwdata	00000004 __mb_cur_max
0000f10c g     F .text	0000000c _localeconv_r
000108d8 g     F .text	0000003c __i2b
0000df60 g     F .text	0000049c __sfvwrite_r
000114a4 g     F .text	00000070 _sbrk_r
0001b120 g     F .text	00000084 alt_program_intel
00019d54 g     F .text	000000d0 helper_plot_pixel
00006a54 g     F .text	000000a0 freq_relay
00000ed4 g     F .text	00000038 vEventGroupSetBitsCallback
0000669c g     F .text	00000158 shedLoads
00011c84 g     F .text	00000078 _read_r
00001474 g     F .text	00000028 vListInitialiseItem
0001a314 g     F .text	00000078 alt_dcache_flush
08000f10 g     O .rwdata	0000000c __lc_ctype
08002914 g     O .rwdata	00000004 alt_max_fd
00014920 g     F .text	00000040 alt_read_query_entry_8bit
000018c8 g     F .text	0000004c vPortSysTickHandler
000080a0 g     F .text	00000138 __unpack_d
00011a04 g     F .text	00000110 _fclose_r
000182e8 g     F .text	00000034 read_num_bytes_available
00006b8c g     F .text	00000044 push_button_irq
0001b1a4 g     F .text	00000174 alt_erase_block_intel
0000d82c g     F .text	00000034 fflush
08002a14 g     O .bss	00000004 __malloc_max_sbrked_mem
00001914 g     F .text	000001b0 alt_irq_register
000067f4 g     F .text	00000148 binaryToDecimal
00018250 g     F .text	00000034 read_RI_bit
080028cc g     O .rwdata	00000008 temp
0000727c g     F .text	00000074 __adddf3
0001292c g     F .text	00000078 __nesf2
0000fe9c g     F .text	00000120 __b2d
00018f18 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0001237c g     F .text	000005b0 __umoddi3
00013658 g     F .text	000000f0 lseek
080029d4 g     O .bss	00000004 stableTaskHandle
080028f0 g     O .rwdata	00000004 _global_impure_ptr
00000cd8 g     F .text	0000018c xEventGroupSetBits
00010e40 g     F .text	000005f4 _realloc_r
0808066c g       *ABS*	00000000 __bss_end
0001907c g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0001ab64 g     F .text	0000010c alt_tick
080802dc g     O .bss	00000100 __hexdig
00011da0 g     F .text	000005dc __udivdi3
08000708 g     O .rodata	00000028 __mprec_bigtens
00010b34 g     F .text	00000120 __s2b
00012ca0 g     F .text	00000194 __floatunsidf
0000fdbc g     F .text	00000060 __mcmp
00000fbc g     F .text	00000194 pvPortMalloc
0001799c g     F .text	000000c0 altera_avalon_uart_init
00018350 g     F .text	0000002c read_data_byte
08002938 g     O .rwdata	00000004 __ctype_ptr
0000d994 g     F .text	00000018 __fp_lock_all
000026d4 g     F .text	00000038 vQueueDelete
00001814 g     F .text	0000001c vPortEndScheduler
00001404 g     F .text	00000070 vListInitialise
0001aacc g     F .text	00000098 alt_alarm_stop
080029d8 g     O .bss	00000004 switchPollingTaskHandle
00018284 g     F .text	00000030 read_RE_bit
08002a20 g     O .bss	00000004 alt_irq_active
080029dc g     O .bss	00000001 previousbyte
0000017c g     F .exceptions	000000cc alt_irq_handler
08001324 g     O .rwdata	00000028 alt_dev_null
00003168 g     F .text	00000028 xTaskGetTickCount
00001f10 g     F .text	000001b0 xQueueGenericSend
00012f80 g     F .text	000000c8 __unpack_f
00014e38 g     F .text	000000ac alt_set_flash_algorithm_func
000184f4 g     F .text	00000078 alt_up_ps2_write_data_byte
0000fc88 g     F .text	00000070 __hi0bits
00019c90 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00007b9c g     F .text	000000d8 __fixdfsi
00004018 g     F .text	000000fc xTaskPriorityDisinherit
000149ec g     F .text	0000003c alt_write_flash_command_8bit_device_8bit_mode
00009de4 g     F .text	0000001c strtod
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0800290c g     O .rwdata	00000008 alt_dev_list
00013af0 g     F .text	00000120 write
00010d58 g     F .text	000000e8 _putc_r
000129a4 g     F .text	00000078 __gtsf2
00019e24 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0000361c g     F .text	000000e8 xTaskRemoveFromEventList
00013404 g     F .text	000000d4 fstat
00000c34 g     F .text	00000068 xEventGroupClearBits
00007a1c g     F .text	00000088 __ledf2
00005dcc g     F .text	000003e4 keyboard_control_task
00015cec g     F .text	000000dc alt_check_primary_table
00010a14 g     F .text	00000120 __pow5mult
000061b0 g     F .text	00000478 stabilityMonitorTask
08002a04 g     O .bss	00000004 __nlocale_changed
00012f78 g     F .text	00000008 __umodsi3
0001446c g     F .text	00000068 alt_flash_cfi_read
00014bc0 g     F .text	00000034 alt_write_native_8bit
00005cc8 g     F .text	00000104 print_status_task
0808066c g       *ABS*	00000000 end
08000ad0 g     O .rwdata	0000000a freqStr
00018868 g     F .text	000000a8 alt_up_ps2_write_fd
0001311c g     F .text	00000160 __pack_f
00014a28 g     F .text	0000007c alt_write_flash_command_16bit_device_8bit_mode
00017044 g     F .text	00000504 altera_avalon_lcd_16207_write
00002dc0 g     F .text	000000d8 vTaskDelete
00018950 g     F .text	00000084 alt_up_char_buffer_init
00018028 g     F .text	000001c8 altera_avalon_uart_write
00014f60 g     F .text	000005e0 alt_read_cfi_table
00015f10 g     F .text	000000b8 altera_avalon_jtag_uart_init
080029be g     O .bss	00000001 unstableRemain
00004214 g     F .text	0000003c pvTaskIncrementMutexHeldCount
0001bc18 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080029a8 g     O .bss	00000004 push_button
0001781c g     F .text	00000088 alt_avalon_timer_sc_init
000178fc g     F .text	00000058 altera_avalon_uart_write_fd
00007d0c g     F .text	00000080 __clzsi2
00017954 g     F .text	00000048 altera_avalon_uart_close_fd
00016630 g     F .text	00000240 altera_avalon_jtag_uart_write
00014048 g     F .text	0000009c alt_flash_cfi_init
0000d8b8 g     F .text	00000004 __sfp_lock_acquire
0000fa9c g     F .text	000000e4 memchr
00009e58 g     F .text	00001eac ___vfprintf_internal_r
00008610 g     F .text	00000060 _sprintf_r
0000380c g     F .text	000000c4 xTaskCheckForTimeOut
00000694 g     F .text	000000ec vCoRoutineSchedule
0000dc4c g     F .text	00000314 _free_r
0800293c g     O .bss	00000004 pxCurrentCoRoutine
0001ba08 g     F .text	000001b0 __call_exitprocs
08002a08 g     O .bss	00000004 __mlocale_changed
00004250 g     F .text	000000d8 ulTaskNotifyTake
08002900 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	00000048 _start
08002a30 g     O .bss	00000004 _alt_tick_rate
00002ff0 g     F .text	00000028 vTaskSuspendAll
00003190 g     F .text	0000002c xTaskGetTickCountFromISR
000105a4 g     F .text	0000014c __lshift
08002a34 g     O .bss	00000004 _alt_nticks
00013854 g     F .text	00000120 read
00013ca4 g     F .text	0000036c alt_sys_init
000015f8 g     F .text	00000098 uxListRemove
080029e0 g     O .bss	00000004 Timer_Reset
0001b8d0 g     F .text	00000134 __register_exitproc
00018774 g     F .text	00000058 alt_up_ps2_clear_fifo
00014960 g     F .text	00000044 alt_read_query_entry_16bit
000106f0 g     F .text	000001e8 __multiply
000162a4 g     F .text	00000074 altera_avalon_jtag_uart_close
00003ee8 g     F .text	00000130 vTaskPriorityInherit
0807fc04 g     O .bss	00000028 __malloc_current_mallinfo
00014c58 g     F .text	000001e0 alt_set_flash_width_func
0001029c g     F .text	0000017c __d2b
000033b8 g     F .text	00000130 vTaskSwitchContext
000045bc g     F .text	000001c0 xTaskNotifyFromISR
00015dc8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001b7cc g     F .text	000000b8 alt_get_fd
000035bc g     F .text	00000060 vTaskPlaceOnEventListRestricted
0001b580 g     F .text	0000012c alt_busy_sleep
000081d8 g     F .text	000000c8 __fpcmp_parts_d
00011994 g     F .text	00000070 _close_r
00004328 g     F .text	0000010c xTaskNotifyWait
0001ad28 g     F .text	00000218 alt_erase_block_amd
000082a0 g     F .text	00000074 memcmp
00015e78 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0808066c g       *ABS*	00000000 __alt_stack_base
00015ec0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
080029e4 g     O .bss	00000004 PRVGADraw
000049ac g     F .text	000000c8 xTimerGenericCommand
080029b8 g     O .bss	00000004 numOfShed
0000bd28 g     F .text	0000013c __swsetup_r
00015540 g     F .text	000007ac alt_read_cfi_width
00001690 g     F .text	0000003c vApplicationStackOverflowHook
000076b4 g     F .text	00000258 __divdf3
0000da30 g     F .text	000000f0 __sfp
000086e4 g     F .text	000000b0 strncat
00010100 g     F .text	00000058 __copybits
000031bc g     F .text	00000020 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
080029e8 g     O .bss	00000001 byte
08000f1c g     O .rwdata	00000408 __malloc_av_
0000d8c4 g     F .text	00000004 __sinit_lock_release
000072f0 g     F .text	000003c4 __muldf3
00011600 g     F .text	00000060 __sread
0001b6ac g     F .text	00000120 alt_find_file
0001a38c g     F .text	000000b4 alt_dev_llist_insert
00013814 g     F .text	00000020 __malloc_lock
00013a34 g     F .text	000000bc sbrk
00001e0c g     F .text	000000a8 xQueueTakeMutexRecursive
0000d630 g     F .text	000001fc _fflush_r
00000e64 g     F .text	00000070 vEventGroupDelete
000118e0 g     F .text	000000b4 _calloc_r
08002928 g     O .rwdata	00000008 alt_flash_dev_list
00014aec g     F .text	00000044 alt_write_flash_command_16bit_device_16bit_mode
0800293c g       *ABS*	00000000 __bss_start
000083b4 g     F .text	00000098 memset
00006bd0 g     F .text	0000021c main
08002a2c g     O .bss	00000004 alt_envp
08002a18 g     O .bss	00000004 __malloc_max_total_mem
00018e8c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
000189d4 g     F .text	00000040 alt_up_char_buffer_open_dev
00015e20 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0001184c g     F .text	0000001c __swbuf
00012a1c g     F .text	00000078 __ltsf2
00001524 g     F .text	000000d4 vListInsert
00017614 g     F .text	0000013c altera_avalon_lcd_16207_init
00011514 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
00011b14 g     F .text	00000014 fclose
0000488c g     F .text	00000070 xTimerCreateTimerTask
000186f8 g     F .text	0000007c alt_up_ps2_read_data_byte
00012c2c g     F .text	00000074 __truncdfsf2
080804dc g     O .bss	00000190 _atexit0
0000c07c g     F .text	000015b4 _dtoa_r
0000f35c g     F .text	00000740 _malloc_r
00004a74 g     F .text	00000030 pcTimerGetTimerName
08002918 g     O .rwdata	00000004 alt_errno
00014b78 g     F .text	00000048 alt_write_flash_command_32bit_device_32bit_mode
0000e4c4 g     F .text	000000b8 _fwalk
000024ac g     F .text	000000e4 xQueueReceiveFromISR
000144d4 g     F .text	00000164 alt_write_value_to_flash
00003e6c g     F .text	00000028 xTaskGetCurrentTaskHandle
00018910 g     F .text	00000040 alt_up_ps2_open_dev
00014bf4 g     F .text	00000034 alt_write_native_16bit
00010c54 g     F .text	00000104 putc
00012eb0 g     F .text	00000060 __divsi3
08000400 g     O .rodata	00000014 __thenan_df
00001bd8 g     F .text	000000dc xQueueGenericCreate
0000db20 g     F .text	0000012c _malloc_trim_r
00018448 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0001bc1c g       *ABS*	00000000 __CTOR_END__
00011660 g     F .text	000000bc strcmp
00001eb4 g     F .text	0000005c xQueueCreateCountingSemaphore
0001bc1c g       *ABS*	00000000 __DTOR_LIST__
080029ec g     O .bss	00000004 keyboardTaskHandle
00012b1c g     F .text	00000088 __nedf2
00013c70 g     F .text	00000034 alt_irq_init
00003704 g     F .text	000000d0 xTaskRemoveFromUnorderedEventList
000139d4 g     F .text	00000060 alt_release_fd
00003018 g     F .text	00000150 xTaskResumeAll
00002650 g     F .text	00000054 uxQueueSpacesAvailable
0001831c g     F .text	00000034 read_data_valid
0000859c g     F .text	00000074 sprintf
08000414 g     O .rodata	00000100 __clz_tab
00002f10 g     F .text	0000009c vTaskStartScheduler
08002a0c g     O .bss	00000004 _PathLocale
0807ffbc g     O .bss	00000320 dfreq
00009cc0 g     F .text	00000124 strtof
000185dc g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0001b884 g     F .text	00000014 atexit
00011868 g     F .text	00000078 _write_r
0000f1ac g     F .text	0000001c setlocale
00002b1c g     F .text	00000048 xQueueIsQueueFullFromISR
080029c0 g     O .bss	00000004 timerCount
0000510c g     F .text	00000030 pvTimerGetTimerID
080029f0 g     O .bss	00000008 currentROC
000003d0 g     F .text	000000a0 vCoRoutineAddToDelayedList
080028ec g     O .rwdata	00000004 _impure_ptr
08002a24 g     O .bss	00000004 alt_argc
0001a504 g     F .text	00000064 _do_dtors
0000fe1c g     F .text	00000080 __ulp
00011434 g     F .text	00000040 __isinfd
0000d97c g     F .text	00000018 __fp_unlock_all
080029ac g     O .bss	00000001 keyboardMode
000038d0 g     F .text	00000024 vTaskMissedYield
00017750 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
08002904 g     O .rwdata	00000008 alt_fs_list
080029f8 g     O .bss	00000004 timer1
00014aa4 g     F .text	00000048 alt_write_flash_command_32bit_device_8bit_mode
00002610 g     F .text	00000040 uxQueueMessagesWaiting
00002280 g     F .text	0000022c xQueueGenericReceive
0000513c g     F .text	00000b8c PRVGADraw_Task
000031dc g     F .text	000001dc xTaskIncrementTick
0000f118 g     F .text	00000010 localeconv
0000e5a0 g     F .text	00000068 __hexdig_init
00001ac4 g     F .text	00000114 xQueueGenericReset
0800293c g       *ABS*	00000000 _edata
000178a4 g     F .text	00000058 altera_avalon_uart_read_fd
0808066c g       *ABS*	00000000 _end
0001a5fc g     F .text	0000007c alt_flash_open_dev
080029b0 g     O .bss	00000008 timer1Count
00006b44 g     F .text	00000048 vTimerCallback
00016318 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08000058 g     O .rodata	0000002c numbers
000011f0 g     F .text	0000001c vPortInitialiseBlocks
080029fc g     O .bss	00000004 loadCtlTaskHandle
000050c0 g     F .text	0000004c xTimerIsTimerActive
00011584 g     F .text	0000007c __swrite
080028fc g     O .rwdata	00000004 __malloc_trim_threshold
0001aca0 g     F .text	00000020 altera_nios2_qsys_irq_init
0001b898 g     F .text	00000038 exit
0000e3fc g     F .text	000000c8 _fwalk_reent
0001837c g     F .text	000000cc alt_up_ps2_init
00010418 g     F .text	0000018c __mdiff
0001a678 g     F .text	00000054 alt_flash_close_dev
00012f10 g     F .text	00000060 __modsi3
00002e98 g     F .text	00000078 vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0000d8bc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
00003e94 g     F .text	00000054 xTaskGetSchedulerState
0800084c g     O .rodata	00000101 _ctype_
00017d38 g     F .text	00000060 altera_avalon_uart_close
00013048 g     F .text	000000a8 __fpcmp_parts_f
0001bbf8 g     F .text	00000020 _exit
00011474 g     F .text	00000030 __isnand
0001a1c0 g     F .text	00000154 alt_alarm_start
00007c74 g     F .text	00000098 __muldi3
0000f1c8 g     F .text	00000194 __smakebuf_r
00014c28 g     F .text	00000030 alt_write_native_32bit
0001856c g     F .text	00000070 alt_up_ps2_wait_for_ack
00004168 g     F .text	00000068 vTaskExitCritical
00008670 g     F .text	00000074 strlen
000016f4 g     F .text	000000e8 pxPortInitialiseStack
0001a8e4 g     F .text	00000188 open
00006af4 g     F .text	00000050 ps2_isr
00007994 g     F .text	00000088 __gedf2
0000e6b8 g     F .text	000007b8 __gethex
000143dc g     F .text	00000090 alt_flash_cfi_get_info
080029bd g     O .bss	00000001 mantainMode
080028d4 g     O .rwdata	00000008 freqThresh
000037d4 g     F .text	00000038 vTaskSetTimeOutState
0800291c g     O .rwdata	00000004 alt_priority_mask
08002a00 g     O .bss	00000004 current_sw_size
0000bd04 g     F .text	00000024 __vfprintf_internal
00017d98 g     F .text	00000230 altera_avalon_uart_read
000026a4 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00002a80 g     F .text	00000044 xQueueIsQueueEmptyFromISR
000187cc g     F .text	0000009c alt_up_ps2_read_fd
000071fc g     F .text	00000080 __subdf3
0000fcf8 g     F .text	000000c4 __lo0bits
08002930 g     O .rwdata	00000008 alt_alarm_list
0001a4a0 g     F .text	00000064 _do_ctors
000041d0 g     F .text	00000044 uxTaskResetEventItemValue
00001cb4 g     F .text	000000c4 xQueueCreateMutex
0001327c g     F .text	000000fc close
0001acc0 g     F .text	00000068 alt_program_amd
0000477c g     F .text	00000110 vTaskNotifyGiveFromISR
00007d8c g     F .text	00000314 __pack_d
00000f0c g     F .text	00000038 vEventGroupClearBitsCallback
000021a8 g     F .text	000000d8 xQueueGiveFromISR
00000000  w      *UND*	00000000 free
0000d8c0 g     F .text	00000004 __sinit_lock_acquire
00010914 g     F .text	00000100 __multadd
0000fc60 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
  20:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
  24:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
  28:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
  2c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
  30:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
  34:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
  38:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
  3c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
  40:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
  44:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
  48:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
  4c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
  68:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
  6c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
  70:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
  74:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
  78:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
  7c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
  80:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
  84:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
  88:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
  8c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
  90:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
  94:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06020034 	movhi	et,2048

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
  a0:	c60a5904 	addi	et,et,10596
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
  a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
  ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
  b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
  b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06020034 	movhi	et,2048

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
  c8:	c60a5904 	addi	et,et,10596
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
  cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
  d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
  d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
  dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
  e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
  e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
  ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
  f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
  f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
  f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
  fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 10c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 11c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 15c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 164:	003da03a 	break	0
  	br		restore_context			# its something else
 168:	003fda06 	br	d4 <restore_context>

0000016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 16c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 174:	00033b80 	call	33b8 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 178:	003fd206 	br	c4 <restore_sp_from_pxCurrentTCB>

0000017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 17c:	defff904 	addi	sp,sp,-28
 180:	dfc00615 	stw	ra,24(sp)
 184:	df000515 	stw	fp,20(sp)
 188:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 18c:	0005313a 	rdctl	r2,ipending
 190:	e0bffc15 	stw	r2,-16(fp)

  return active;
 194:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 198:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 19c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1a0:	00800044 	movi	r2,1
 1a4:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1a8:	e0ffff17 	ldw	r3,-4(fp)
 1ac:	e0bffe17 	ldw	r2,-8(fp)
 1b0:	1884703a 	and	r2,r3,r2
 1b4:	1005003a 	cmpeq	r2,r2,zero
 1b8:	1000171e 	bne	r2,zero,218 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1bc:	e0bffd17 	ldw	r2,-12(fp)
 1c0:	00c20234 	movhi	r3,2056
 1c4:	18c0f704 	addi	r3,r3,988
 1c8:	100490fa 	slli	r2,r2,3
 1cc:	10c5883a 	add	r2,r2,r3
 1d0:	11800017 	ldw	r6,0(r2)
 1d4:	e0bffd17 	ldw	r2,-12(fp)
 1d8:	00c20234 	movhi	r3,2056
 1dc:	18c0f704 	addi	r3,r3,988
 1e0:	100490fa 	slli	r2,r2,3
 1e4:	10c5883a 	add	r2,r2,r3
 1e8:	10800104 	addi	r2,r2,4
 1ec:	11000017 	ldw	r4,0(r2)
 1f0:	e17ffd17 	ldw	r5,-12(fp)
 1f4:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1f8:	0005313a 	rdctl	r2,ipending
 1fc:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 204:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 208:	e0bfff17 	ldw	r2,-4(fp)
 20c:	1004c03a 	cmpne	r2,r2,zero
 210:	103fe21e 	bne	r2,zero,19c <alt_irq_handler+0x20>
 214:	00000706 	br	234 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 218:	e0bffe17 	ldw	r2,-8(fp)
 21c:	1085883a 	add	r2,r2,r2
 220:	e0bffe15 	stw	r2,-8(fp)
      i++;
 224:	e0bffd17 	ldw	r2,-12(fp)
 228:	10800044 	addi	r2,r2,1
 22c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 230:	003fdd06 	br	1a8 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     260:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
     264:	d6aa2f14 	ori	gp,gp,43196
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
     26c:	108a4f14 	ori	r2,r2,10556

    movhi r3, %hi(__bss_end)
     270:	00c20234 	movhi	r3,2056
    ori r3, r3, %lo(__bss_end)
     274:	18c19b14 	ori	r3,r3,1644

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00137a80 	call	137a8 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     290:	defff904 	addi	sp,sp,-28
     294:	dfc00615 	stw	ra,24(sp)
     298:	df000515 	stw	fp,20(sp)
     29c:	df000504 	addi	fp,sp,20
     2a0:	e13ffd15 	stw	r4,-12(fp)
     2a4:	e17ffe15 	stw	r5,-8(fp)
     2a8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2ac:	01000e04 	movi	r4,56
     2b0:	0000fbc0 	call	fbc <pvPortMalloc>
     2b4:	e0bffb15 	stw	r2,-20(fp)
	if( pxCoRoutine )
     2b8:	e0bffb17 	ldw	r2,-20(fp)
     2bc:	1005003a 	cmpeq	r2,r2,zero
     2c0:	10003b1e 	bne	r2,zero,3b0 <xCoRoutineCreate+0x120>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2c4:	d0a02017 	ldw	r2,-32640(gp)
     2c8:	1004c03a 	cmpne	r2,r2,zero
     2cc:	1000031e 	bne	r2,zero,2dc <xCoRoutineCreate+0x4c>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2d0:	e0bffb17 	ldw	r2,-20(fp)
     2d4:	d0a02015 	stw	r2,-32640(gp)
			prvInitialiseCoRoutineLists();
     2d8:	00007800 	call	780 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	108000b0 	cmpltui	r2,r2,2
     2e4:	1000021e 	bne	r2,zero,2f0 <xCoRoutineCreate+0x60>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2e8:	00800044 	movi	r2,1
     2ec:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2f0:	e0bffb17 	ldw	r2,-20(fp)
     2f4:	10000d0d 	sth	zero,52(r2)
		pxCoRoutine->uxPriority = uxPriority;
     2f8:	e0fffb17 	ldw	r3,-20(fp)
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	18800b15 	stw	r2,44(r3)
		pxCoRoutine->uxIndex = uxIndex;
     304:	e0fffb17 	ldw	r3,-20(fp)
     308:	e0bfff17 	ldw	r2,-4(fp)
     30c:	18800c15 	stw	r2,48(r3)
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     310:	e0fffb17 	ldw	r3,-20(fp)
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     31c:	e0bffb17 	ldw	r2,-20(fp)
     320:	11000104 	addi	r4,r2,4
     324:	00014740 	call	1474 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	11000604 	addi	r4,r2,24
     330:	00014740 	call	1474 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     334:	e0fffb17 	ldw	r3,-20(fp)
     338:	e0bffb17 	ldw	r2,-20(fp)
     33c:	18800415 	stw	r2,16(r3)
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     340:	e0fffb17 	ldw	r3,-20(fp)
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	18800915 	stw	r2,36(r3)

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     34c:	00c00084 	movi	r3,2
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	1887c83a 	sub	r3,r3,r2
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10c00615 	stw	r3,24(r2)

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     360:	e0bffb17 	ldw	r2,-20(fp)
     364:	10c00b17 	ldw	r3,44(r2)
     368:	d0a02117 	ldw	r2,-32636(gp)
     36c:	10c0032e 	bgeu	r2,r3,37c <xCoRoutineCreate+0xec>
     370:	e0bffb17 	ldw	r2,-20(fp)
     374:	10800b17 	ldw	r2,44(r2)
     378:	d0a02115 	stw	r2,-32636(gp)
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	10800b17 	ldw	r2,44(r2)
     384:	10800524 	muli	r2,r2,20
     388:	1007883a 	mov	r3,r2
     38c:	00820034 	movhi	r2,2048
     390:	108a8e04 	addi	r2,r2,10808
     394:	1889883a 	add	r4,r3,r2
     398:	e0bffb17 	ldw	r2,-20(fp)
     39c:	11400104 	addi	r5,r2,4
     3a0:	000149c0 	call	149c <vListInsertEnd>

		xReturn = pdPASS;
     3a4:	00800044 	movi	r2,1
     3a8:	e0bffc15 	stw	r2,-16(fp)
     3ac:	00000206 	br	3b8 <xCoRoutineCreate+0x128>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     3b0:	00bfffc4 	movi	r2,-1
     3b4:	e0bffc15 	stw	r2,-16(fp)
	}

	return xReturn;
     3b8:	e0bffc17 	ldw	r2,-16(fp)
}
     3bc:	e037883a 	mov	sp,fp
     3c0:	dfc00117 	ldw	ra,4(sp)
     3c4:	df000017 	ldw	fp,0(sp)
     3c8:	dec00204 	addi	sp,sp,8
     3cc:	f800283a 	ret

000003d0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     3d0:	defffb04 	addi	sp,sp,-20
     3d4:	dfc00415 	stw	ra,16(sp)
     3d8:	df000315 	stw	fp,12(sp)
     3dc:	df000304 	addi	fp,sp,12
     3e0:	e13ffe15 	stw	r4,-8(fp)
     3e4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3e8:	d0e02217 	ldw	r3,-32632(gp)
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	e0bffd15 	stw	r2,-12(fp)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3f8:	d0a02017 	ldw	r2,-32640(gp)
     3fc:	11000104 	addi	r4,r2,4
     400:	00015f80 	call	15f8 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     404:	d0e02017 	ldw	r3,-32640(gp)
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xCoRoutineTickCount )
     410:	d0e02217 	ldw	r3,-32632(gp)
     414:	e0bffd17 	ldw	r2,-12(fp)
     418:	10c0052e 	bgeu	r2,r3,430 <vCoRoutineAddToDelayedList+0x60>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     41c:	d1202617 	ldw	r4,-32616(gp)
     420:	d0a02017 	ldw	r2,-32640(gp)
     424:	11400104 	addi	r5,r2,4
     428:	00015240 	call	1524 <vListInsert>
     42c:	00000406 	br	440 <vCoRoutineAddToDelayedList+0x70>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     430:	d1202517 	ldw	r4,-32620(gp)
     434:	d0a02017 	ldw	r2,-32640(gp)
     438:	11400104 	addi	r5,r2,4
     43c:	00015240 	call	1524 <vListInsert>
	}

	if( pxEventList )
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	1005003a 	cmpeq	r2,r2,zero
     448:	1000041e 	bne	r2,zero,45c <vCoRoutineAddToDelayedList+0x8c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     44c:	d0a02017 	ldw	r2,-32640(gp)
     450:	11400604 	addi	r5,r2,24
     454:	e13fff17 	ldw	r4,-4(fp)
     458:	00015240 	call	1524 <vListInsert>
	}
}
     45c:	e037883a 	mov	sp,fp
     460:	dfc00117 	ldw	ra,4(sp)
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00204 	addi	sp,sp,8
     46c:	f800283a 	ret

00000470 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     470:	defffb04 	addi	sp,sp,-20
     474:	dfc00415 	stw	ra,16(sp)
     478:	df000315 	stw	fp,12(sp)
     47c:	df000304 	addi	fp,sp,12
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     480:	00002606 	br	51c <prvCheckPendingReadyList+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     484:	0005303a 	rdctl	r2,status
     488:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	00bfff84 	movi	r2,-2
     494:	1884703a 	and	r2,r3,r2
     498:	1001703a 	wrctl	status,r2
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     49c:	00820034 	movhi	r2,2048
     4a0:	108aa204 	addi	r2,r2,10888
     4a4:	10800317 	ldw	r2,12(r2)
     4a8:	10800317 	ldw	r2,12(r2)
     4ac:	e0bfff15 	stw	r2,-4(fp)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	11000604 	addi	r4,r2,24
     4b8:	00015f80 	call	15f8 <uxListRemove>
     4bc:	00800044 	movi	r2,1
     4c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     4c4:	e0bffd17 	ldw	r2,-12(fp)
     4c8:	1001703a 	wrctl	status,r2
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     4cc:	e0bfff17 	ldw	r2,-4(fp)
     4d0:	11000104 	addi	r4,r2,4
     4d4:	00015f80 	call	15f8 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	10c00b17 	ldw	r3,44(r2)
     4e0:	d0a02117 	ldw	r2,-32636(gp)
     4e4:	10c0032e 	bgeu	r2,r3,4f4 <prvCheckPendingReadyList+0x84>
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800b17 	ldw	r2,44(r2)
     4f0:	d0a02115 	stw	r2,-32636(gp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10800b17 	ldw	r2,44(r2)
     4fc:	10800524 	muli	r2,r2,20
     500:	1007883a 	mov	r3,r2
     504:	00820034 	movhi	r2,2048
     508:	108a8e04 	addi	r2,r2,10808
     50c:	1889883a 	add	r4,r3,r2
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	11400104 	addi	r5,r2,4
     518:	000149c0 	call	149c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     51c:	00820034 	movhi	r2,2048
     520:	108aa204 	addi	r2,r2,10888
     524:	10800017 	ldw	r2,0(r2)
     528:	1004c03a 	cmpne	r2,r2,zero
     52c:	103fd51e 	bne	r2,zero,484 <prvCheckPendingReadyList+0x14>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     544:	defffa04 	addi	sp,sp,-24
     548:	dfc00515 	stw	ra,20(sp)
     54c:	df000415 	stw	fp,16(sp)
     550:	df000404 	addi	fp,sp,16
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     554:	00031680 	call	3168 <xTaskGetTickCount>
     558:	d0e02317 	ldw	r3,-32628(gp)
     55c:	10c5c83a 	sub	r2,r2,r3
     560:	d0a02415 	stw	r2,-32624(gp)
	while( xPassedTicks )
     564:	00004106 	br	66c <prvCheckDelayedList+0x128>
	{
		xCoRoutineTickCount++;
     568:	d0a02217 	ldw	r2,-32632(gp)
     56c:	10800044 	addi	r2,r2,1
     570:	d0a02215 	stw	r2,-32632(gp)
		xPassedTicks--;
     574:	d0a02417 	ldw	r2,-32624(gp)
     578:	10bfffc4 	addi	r2,r2,-1
     57c:	d0a02415 	stw	r2,-32624(gp)

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     580:	d0a02217 	ldw	r2,-32632(gp)
     584:	1004c03a 	cmpne	r2,r2,zero
     588:	1000341e 	bne	r2,zero,65c <prvCheckDelayedList+0x118>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     58c:	d0a02517 	ldw	r2,-32620(gp)
     590:	e0bffe15 	stw	r2,-8(fp)
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     594:	d0a02617 	ldw	r2,-32616(gp)
     598:	d0a02515 	stw	r2,-32620(gp)
			pxOverflowDelayedCoRoutineList = pxTemp;
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	d0a02615 	stw	r2,-32616(gp)
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5a4:	00002d06 	br	65c <prvCheckDelayedList+0x118>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     5a8:	d0a02517 	ldw	r2,-32620(gp)
     5ac:	10800317 	ldw	r2,12(r2)
     5b0:	10800317 	ldw	r2,12(r2)
     5b4:	e0bfff15 	stw	r2,-4(fp)

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     5b8:	e0bfff17 	ldw	r2,-4(fp)
     5bc:	10c00117 	ldw	r3,4(r2)
     5c0:	d0a02217 	ldw	r2,-32632(gp)
     5c4:	10c02936 	bltu	r2,r3,66c <prvCheckDelayedList+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     5c8:	0005303a 	rdctl	r2,status
     5cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     5d0:	e0fffd17 	ldw	r3,-12(fp)
     5d4:	00bfff84 	movi	r2,-2
     5d8:	1884703a 	and	r2,r3,r2
     5dc:	1001703a 	wrctl	status,r2
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	11000104 	addi	r4,r2,4
     5e8:	00015f80 	call	15f8 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	10800a17 	ldw	r2,40(r2)
     5f4:	1005003a 	cmpeq	r2,r2,zero
     5f8:	1000031e 	bne	r2,zero,608 <prvCheckDelayedList+0xc4>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     5fc:	e0bfff17 	ldw	r2,-4(fp)
     600:	11000604 	addi	r4,r2,24
     604:	00015f80 	call	15f8 <uxListRemove>
     608:	00800044 	movi	r2,1
     60c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	1001703a 	wrctl	status,r2
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10c00b17 	ldw	r3,44(r2)
     620:	d0a02117 	ldw	r2,-32636(gp)
     624:	10c0032e 	bgeu	r2,r3,634 <prvCheckDelayedList+0xf0>
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	10800b17 	ldw	r2,44(r2)
     630:	d0a02115 	stw	r2,-32636(gp)
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800b17 	ldw	r2,44(r2)
     63c:	10800524 	muli	r2,r2,20
     640:	1007883a 	mov	r3,r2
     644:	00820034 	movhi	r2,2048
     648:	108a8e04 	addi	r2,r2,10808
     64c:	1889883a 	add	r4,r3,r2
     650:	e0bfff17 	ldw	r2,-4(fp)
     654:	11400104 	addi	r5,r2,4
     658:	000149c0 	call	149c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     65c:	d0a02517 	ldw	r2,-32620(gp)
     660:	10800017 	ldw	r2,0(r2)
     664:	1004c03a 	cmpne	r2,r2,zero
     668:	103fcf1e 	bne	r2,zero,5a8 <prvCheckDelayedList+0x64>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     66c:	d0a02417 	ldw	r2,-32624(gp)
     670:	1004c03a 	cmpne	r2,r2,zero
     674:	103fbc1e 	bne	r2,zero,568 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     678:	d0a02217 	ldw	r2,-32632(gp)
     67c:	d0a02315 	stw	r2,-32628(gp)
}
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     694:	defffd04 	addi	sp,sp,-12
     698:	dfc00215 	stw	ra,8(sp)
     69c:	df000115 	stw	fp,4(sp)
     6a0:	df000104 	addi	fp,sp,4
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     6a4:	00004700 	call	470 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     6a8:	00005440 	call	544 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6ac:	00000606 	br	6c8 <vCoRoutineSchedule+0x34>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     6b0:	d0a02117 	ldw	r2,-32636(gp)
     6b4:	1005003a 	cmpeq	r2,r2,zero
     6b8:	10002c1e 	bne	r2,zero,76c <vCoRoutineSchedule+0xd8>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     6bc:	d0a02117 	ldw	r2,-32636(gp)
     6c0:	10bfffc4 	addi	r2,r2,-1
     6c4:	d0a02115 	stw	r2,-32636(gp)

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6c8:	d0a02117 	ldw	r2,-32636(gp)
     6cc:	10800524 	muli	r2,r2,20
     6d0:	1007883a 	mov	r3,r2
     6d4:	00820034 	movhi	r2,2048
     6d8:	108a8e04 	addi	r2,r2,10808
     6dc:	1885883a 	add	r2,r3,r2
     6e0:	10800017 	ldw	r2,0(r2)
     6e4:	1005003a 	cmpeq	r2,r2,zero
     6e8:	103ff11e 	bne	r2,zero,6b0 <vCoRoutineSchedule+0x1c>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     6ec:	d0a02117 	ldw	r2,-32636(gp)
     6f0:	10800524 	muli	r2,r2,20
     6f4:	1007883a 	mov	r3,r2
     6f8:	00820034 	movhi	r2,2048
     6fc:	108a8e04 	addi	r2,r2,10808
     700:	1885883a 	add	r2,r3,r2
     704:	e0bfff15 	stw	r2,-4(fp)
     708:	e0bfff17 	ldw	r2,-4(fp)
     70c:	10800117 	ldw	r2,4(r2)
     710:	10c00117 	ldw	r3,4(r2)
     714:	e0bfff17 	ldw	r2,-4(fp)
     718:	10c00115 	stw	r3,4(r2)
     71c:	e0bfff17 	ldw	r2,-4(fp)
     720:	10c00117 	ldw	r3,4(r2)
     724:	e0bfff17 	ldw	r2,-4(fp)
     728:	10800204 	addi	r2,r2,8
     72c:	1880051e 	bne	r3,r2,744 <vCoRoutineSchedule+0xb0>
     730:	e0bfff17 	ldw	r2,-4(fp)
     734:	10800117 	ldw	r2,4(r2)
     738:	10c00117 	ldw	r3,4(r2)
     73c:	e0bfff17 	ldw	r2,-4(fp)
     740:	10c00115 	stw	r3,4(r2)
     744:	e0bfff17 	ldw	r2,-4(fp)
     748:	10800117 	ldw	r2,4(r2)
     74c:	10800317 	ldw	r2,12(r2)
     750:	d0a02015 	stw	r2,-32640(gp)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     754:	d0a02017 	ldw	r2,-32640(gp)
     758:	10c00017 	ldw	r3,0(r2)
     75c:	d1202017 	ldw	r4,-32640(gp)
     760:	d0a02017 	ldw	r2,-32640(gp)
     764:	11400c17 	ldw	r5,48(r2)
     768:	183ee83a 	callr	r3

	return;
}
     76c:	e037883a 	mov	sp,fp
     770:	dfc00117 	ldw	ra,4(sp)
     774:	df000017 	ldw	fp,0(sp)
     778:	dec00204 	addi	sp,sp,8
     77c:	f800283a 	ret

00000780 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     790:	e03fff15 	stw	zero,-4(fp)
     794:	00000a06 	br	7c0 <prvInitialiseCoRoutineLists+0x40>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     798:	e0bfff17 	ldw	r2,-4(fp)
     79c:	10800524 	muli	r2,r2,20
     7a0:	1007883a 	mov	r3,r2
     7a4:	00820034 	movhi	r2,2048
     7a8:	108a8e04 	addi	r2,r2,10808
     7ac:	1889883a 	add	r4,r3,r2
     7b0:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7b4:	e0bfff17 	ldw	r2,-4(fp)
     7b8:	10800044 	addi	r2,r2,1
     7bc:	e0bfff15 	stw	r2,-4(fp)
     7c0:	e0bfff17 	ldw	r2,-4(fp)
     7c4:	108000b0 	cmpltui	r2,r2,2
     7c8:	103ff31e 	bne	r2,zero,798 <prvInitialiseCoRoutineLists+0x18>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     7cc:	01020034 	movhi	r4,2048
     7d0:	210a9804 	addi	r4,r4,10848
     7d4:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     7d8:	01020034 	movhi	r4,2048
     7dc:	210a9d04 	addi	r4,r4,10868
     7e0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     7e4:	01020034 	movhi	r4,2048
     7e8:	210aa204 	addi	r4,r4,10888
     7ec:	00014040 	call	1404 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     7f0:	00820034 	movhi	r2,2048
     7f4:	108a9804 	addi	r2,r2,10848
     7f8:	d0a02515 	stw	r2,-32620(gp)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     7fc:	00820034 	movhi	r2,2048
     800:	108a9d04 	addi	r2,r2,10868
     804:	d0a02615 	stw	r2,-32616(gp)
}
     808:	e037883a 	mov	sp,fp
     80c:	dfc00117 	ldw	ra,4(sp)
     810:	df000017 	ldw	fp,0(sp)
     814:	dec00204 	addi	sp,sp,8
     818:	f800283a 	ret

0000081c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     81c:	defffb04 	addi	sp,sp,-20
     820:	dfc00415 	stw	ra,16(sp)
     824:	df000315 	stw	fp,12(sp)
     828:	df000304 	addi	fp,sp,12
     82c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10800317 	ldw	r2,12(r2)
     838:	10800317 	ldw	r2,12(r2)
     83c:	e0bffe15 	stw	r2,-8(fp)
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	11000604 	addi	r4,r2,24
     848:	00015f80 	call	15f8 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	11400604 	addi	r5,r2,24
     854:	01020034 	movhi	r4,2048
     858:	210aa204 	addi	r4,r4,10888
     85c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     860:	e0bffe17 	ldw	r2,-8(fp)
     864:	10c00b17 	ldw	r3,44(r2)
     868:	d0a02017 	ldw	r2,-32640(gp)
     86c:	10800b17 	ldw	r2,44(r2)
     870:	18800336 	bltu	r3,r2,880 <xCoRoutineRemoveFromEventList+0x64>
	{
		xReturn = pdTRUE;
     874:	00800044 	movi	r2,1
     878:	e0bffd15 	stw	r2,-12(fp)
     87c:	00000106 	br	884 <xCoRoutineRemoveFromEventList+0x68>
	}
	else
	{
		xReturn = pdFALSE;
     880:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
     884:	e0bffd17 	ldw	r2,-12(fp)
}
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     89c:	defffd04 	addi	sp,sp,-12
     8a0:	dfc00215 	stw	ra,8(sp)
     8a4:	df000115 	stw	fp,4(sp)
     8a8:	df000104 	addi	fp,sp,4
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     8ac:	01000604 	movi	r4,24
     8b0:	0000fbc0 	call	fbc <pvPortMalloc>
     8b4:	e0bfff15 	stw	r2,-4(fp)
	if( pxEventBits != NULL )
     8b8:	e0bfff17 	ldw	r2,-4(fp)
     8bc:	1005003a 	cmpeq	r2,r2,zero
     8c0:	1000051e 	bne	r2,zero,8d8 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
     8c4:	e0bfff17 	ldw	r2,-4(fp)
     8c8:	10000015 	stw	zero,0(r2)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     8cc:	e0bfff17 	ldw	r2,-4(fp)
     8d0:	11000104 	addi	r4,r2,4
     8d4:	00014040 	call	1404 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
     8d8:	e0bfff17 	ldw	r2,-4(fp)
}
     8dc:	e037883a 	mov	sp,fp
     8e0:	dfc00117 	ldw	ra,4(sp)
     8e4:	df000017 	ldw	fp,0(sp)
     8e8:	dec00204 	addi	sp,sp,8
     8ec:	f800283a 	ret

000008f0 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     8f0:	defff504 	addi	sp,sp,-44
     8f4:	dfc00a15 	stw	ra,40(sp)
     8f8:	df000915 	stw	fp,36(sp)
     8fc:	df000904 	addi	fp,sp,36
     900:	e13ffc15 	stw	r4,-16(fp)
     904:	e17ffd15 	stw	r5,-12(fp)
     908:	e1bffe15 	stw	r6,-8(fp)
     90c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	e0bff915 	stw	r2,-28(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     918:	e03ff715 	stw	zero,-36(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     91c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     920:	e0bff917 	ldw	r2,-28(fp)
     924:	10800017 	ldw	r2,0(r2)
     928:	e0bffb15 	stw	r2,-20(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     92c:	e13ffc17 	ldw	r4,-16(fp)
     930:	e17ffd17 	ldw	r5,-12(fp)
     934:	0000cd80 	call	cd8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     938:	e0fffb17 	ldw	r3,-20(fp)
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	1886b03a 	or	r3,r3,r2
     944:	e0bffe17 	ldw	r2,-8(fp)
     948:	1886703a 	and	r3,r3,r2
     94c:	e0bffe17 	ldw	r2,-8(fp)
     950:	18800d1e 	bne	r3,r2,988 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     954:	e0fffb17 	ldw	r3,-20(fp)
     958:	e0bffd17 	ldw	r2,-12(fp)
     95c:	1884b03a 	or	r2,r3,r2
     960:	e0bffa15 	stw	r2,-24(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     964:	e0bff917 	ldw	r2,-28(fp)
     968:	10c00017 	ldw	r3,0(r2)
     96c:	e0bffe17 	ldw	r2,-8(fp)
     970:	0084303a 	nor	r2,zero,r2
     974:	1886703a 	and	r3,r3,r2
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
     980:	e03fff15 	stw	zero,-4(fp)
     984:	00000e06 	br	9c0 <xEventGroupSync+0xd0>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     988:	e0bfff17 	ldw	r2,-4(fp)
     98c:	1005003a 	cmpeq	r2,r2,zero
     990:	1000081e 	bne	r2,zero,9b4 <xEventGroupSync+0xc4>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     994:	e0bff917 	ldw	r2,-28(fp)
     998:	11000104 	addi	r4,r2,4
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	11414034 	orhi	r5,r2,1280
     9a4:	e1bfff17 	ldw	r6,-4(fp)
     9a8:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     9ac:	e03ffa15 	stw	zero,-24(fp)
     9b0:	00000306 	br	9c0 <xEventGroupSync+0xd0>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     9b4:	e0bff917 	ldw	r2,-28(fp)
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	e0bffa15 	stw	r2,-24(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     9c0:	00030180 	call	3018 <xTaskResumeAll>
     9c4:	e0bff815 	stw	r2,-32(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	1005003a 	cmpeq	r2,r2,zero
     9d0:	1000221e 	bne	r2,zero,a5c <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
     9d4:	e0bff817 	ldw	r2,-32(fp)
     9d8:	1004c03a 	cmpne	r2,r2,zero
     9dc:	1000011e 	bne	r2,zero,9e4 <xEventGroupSync+0xf4>
		{
			portYIELD_WITHIN_API();
     9e0:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     9e4:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     9e8:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     9ec:	e0bffa17 	ldw	r2,-24(fp)
     9f0:	1080802c 	andhi	r2,r2,512
     9f4:	1004c03a 	cmpne	r2,r2,zero
     9f8:	1000131e 	bne	r2,zero,a48 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     9fc:	00041140 	call	4114 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
     a00:	e0bff917 	ldw	r2,-28(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	e0bffa15 	stw	r2,-24(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a0c:	e0fffa17 	ldw	r3,-24(fp)
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	1886703a 	and	r3,r3,r2
     a18:	e0bffe17 	ldw	r2,-8(fp)
     a1c:	1880071e 	bne	r3,r2,a3c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10c00017 	ldw	r3,0(r2)
     a28:	e0bffe17 	ldw	r2,-8(fp)
     a2c:	0084303a 	nor	r2,zero,r2
     a30:	1886703a 	and	r3,r3,r2
     a34:	e0bff917 	ldw	r2,-28(fp)
     a38:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a3c:	00041680 	call	4168 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
     a40:	00800044 	movi	r2,1
     a44:	e0bff715 	stw	r2,-36(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a48:	e0bffa17 	ldw	r2,-24(fp)
     a4c:	00c04034 	movhi	r3,256
     a50:	18ffffc4 	addi	r3,r3,-1
     a54:	10c4703a 	and	r2,r2,r3
     a58:	e0bffa15 	stw	r2,-24(fp)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a5c:	e0bffa17 	ldw	r2,-24(fp)
}
     a60:	e037883a 	mov	sp,fp
     a64:	dfc00117 	ldw	ra,4(sp)
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00204 	addi	sp,sp,8
     a70:	f800283a 	ret

00000a74 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     a74:	defff304 	addi	sp,sp,-52
     a78:	dfc00c15 	stw	ra,48(sp)
     a7c:	df000b15 	stw	fp,44(sp)
     a80:	df000b04 	addi	fp,sp,44
     a84:	e13ffc15 	stw	r4,-16(fp)
     a88:	e17ffd15 	stw	r5,-12(fp)
     a8c:	e1bffe15 	stw	r6,-8(fp)
     a90:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	e0bffb15 	stw	r2,-20(fp)
EventBits_t uxReturn, uxControlBits = 0;
     a9c:	e03ff915 	stw	zero,-28(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     aa0:	e03ff615 	stw	zero,-40(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     aa4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     aa8:	e0bffb17 	ldw	r2,-20(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	e0bff515 	stw	r2,-44(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     ab4:	e13ff517 	ldw	r4,-44(fp)
     ab8:	e17ffd17 	ldw	r5,-12(fp)
     abc:	e1bfff17 	ldw	r6,-4(fp)
     ac0:	0000f440 	call	f44 <prvTestWaitCondition>
     ac4:	e0bff815 	stw	r2,-32(fp)

		if( xWaitConditionMet != pdFALSE )
     ac8:	e0bff817 	ldw	r2,-32(fp)
     acc:	1005003a 	cmpeq	r2,r2,zero
     ad0:	10000e1e 	bne	r2,zero,b0c <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     ad4:	e0bff517 	ldw	r2,-44(fp)
     ad8:	e0bffa15 	stw	r2,-24(fp)
			xTicksToWait = ( TickType_t ) 0;
     adc:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	1005003a 	cmpeq	r2,r2,zero
     ae8:	1000221e 	bne	r2,zero,b74 <xEventGroupWaitBits+0x100>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     aec:	e0bffb17 	ldw	r2,-20(fp)
     af0:	10c00017 	ldw	r3,0(r2)
     af4:	e0bffd17 	ldw	r2,-12(fp)
     af8:	0084303a 	nor	r2,zero,r2
     afc:	1886703a 	and	r3,r3,r2
     b00:	e0bffb17 	ldw	r2,-20(fp)
     b04:	10c00015 	stw	r3,0(r2)
     b08:	00001a06 	br	b74 <xEventGroupWaitBits+0x100>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     b0c:	e0800217 	ldw	r2,8(fp)
     b10:	1004c03a 	cmpne	r2,r2,zero
     b14:	1000031e 	bne	r2,zero,b24 <xEventGroupWaitBits+0xb0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     b18:	e0bff517 	ldw	r2,-44(fp)
     b1c:	e0bffa15 	stw	r2,-24(fp)
     b20:	00001406 	br	b74 <xEventGroupWaitBits+0x100>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     b24:	e0bffe17 	ldw	r2,-8(fp)
     b28:	1005003a 	cmpeq	r2,r2,zero
     b2c:	1000031e 	bne	r2,zero,b3c <xEventGroupWaitBits+0xc8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     b30:	e0bff917 	ldw	r2,-28(fp)
     b34:	10804034 	orhi	r2,r2,256
     b38:	e0bff915 	stw	r2,-28(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     b3c:	e0bfff17 	ldw	r2,-4(fp)
     b40:	1005003a 	cmpeq	r2,r2,zero
     b44:	1000031e 	bne	r2,zero,b54 <xEventGroupWaitBits+0xe0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     b48:	e0bff917 	ldw	r2,-28(fp)
     b4c:	10810034 	orhi	r2,r2,1024
     b50:	e0bff915 	stw	r2,-28(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     b54:	e0bffb17 	ldw	r2,-20(fp)
     b58:	11000104 	addi	r4,r2,4
     b5c:	e0fffd17 	ldw	r3,-12(fp)
     b60:	e0bff917 	ldw	r2,-28(fp)
     b64:	188ab03a 	or	r5,r3,r2
     b68:	e1800217 	ldw	r6,8(fp)
     b6c:	00035480 	call	3548 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     b70:	e03ffa15 	stw	zero,-24(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     b74:	00030180 	call	3018 <xTaskResumeAll>
     b78:	e0bff715 	stw	r2,-36(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     b7c:	e0800217 	ldw	r2,8(fp)
     b80:	1005003a 	cmpeq	r2,r2,zero
     b84:	1000251e 	bne	r2,zero,c1c <xEventGroupWaitBits+0x1a8>
	{
		if( xAlreadyYielded == pdFALSE )
     b88:	e0bff717 	ldw	r2,-36(fp)
     b8c:	1004c03a 	cmpne	r2,r2,zero
     b90:	1000011e 	bne	r2,zero,b98 <xEventGroupWaitBits+0x124>
		{
			portYIELD_WITHIN_API();
     b94:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     b98:	00041d00 	call	41d0 <uxTaskResetEventItemValue>
     b9c:	e0bffa15 	stw	r2,-24(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     ba0:	e0bffa17 	ldw	r2,-24(fp)
     ba4:	1080802c 	andhi	r2,r2,512
     ba8:	1004c03a 	cmpne	r2,r2,zero
     bac:	1000161e 	bne	r2,zero,c08 <xEventGroupWaitBits+0x194>
		{
			taskENTER_CRITICAL();
     bb0:	00041140 	call	4114 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	10800017 	ldw	r2,0(r2)
     bbc:	e0bffa15 	stw	r2,-24(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     bc0:	e13ffa17 	ldw	r4,-24(fp)
     bc4:	e17ffd17 	ldw	r5,-12(fp)
     bc8:	e1bfff17 	ldw	r6,-4(fp)
     bcc:	0000f440 	call	f44 <prvTestWaitCondition>
     bd0:	1005003a 	cmpeq	r2,r2,zero
     bd4:	10000a1e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
				{
					if( xClearOnExit != pdFALSE )
     bd8:	e0bffe17 	ldw	r2,-8(fp)
     bdc:	1005003a 	cmpeq	r2,r2,zero
     be0:	1000071e 	bne	r2,zero,c00 <xEventGroupWaitBits+0x18c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     be4:	e0bffb17 	ldw	r2,-20(fp)
     be8:	10c00017 	ldw	r3,0(r2)
     bec:	e0bffd17 	ldw	r2,-12(fp)
     bf0:	0084303a 	nor	r2,zero,r2
     bf4:	1886703a 	and	r3,r3,r2
     bf8:	e0bffb17 	ldw	r2,-20(fp)
     bfc:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     c00:	00041680 	call	4168 <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     c04:	e03ff615 	stw	zero,-40(fp)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     c08:	e0bffa17 	ldw	r2,-24(fp)
     c0c:	00c04034 	movhi	r3,256
     c10:	18ffffc4 	addi	r3,r3,-1
     c14:	10c4703a 	and	r2,r2,r3
     c18:	e0bffa15 	stw	r2,-24(fp)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     c1c:	e0bffa17 	ldw	r2,-24(fp)
}
     c20:	e037883a 	mov	sp,fp
     c24:	dfc00117 	ldw	ra,4(sp)
     c28:	df000017 	ldw	fp,0(sp)
     c2c:	dec00204 	addi	sp,sp,8
     c30:	f800283a 	ret

00000c34 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     c34:	defffa04 	addi	sp,sp,-24
     c38:	dfc00515 	stw	ra,20(sp)
     c3c:	df000415 	stw	fp,16(sp)
     c40:	df000404 	addi	fp,sp,16
     c44:	e13ffe15 	stw	r4,-8(fp)
     c48:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     c4c:	e0bffe17 	ldw	r2,-8(fp)
     c50:	e0bffd15 	stw	r2,-12(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     c54:	00041140 	call	4114 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     c58:	e0bffd17 	ldw	r2,-12(fp)
     c5c:	10800017 	ldw	r2,0(r2)
     c60:	e0bffc15 	stw	r2,-16(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	10c00017 	ldw	r3,0(r2)
     c6c:	e0bfff17 	ldw	r2,-4(fp)
     c70:	0084303a 	nor	r2,zero,r2
     c74:	1886703a 	and	r3,r3,r2
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
     c80:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
     c84:	e0bffc17 	ldw	r2,-16(fp)
}
     c88:	e037883a 	mov	sp,fp
     c8c:	dfc00117 	ldw	ra,4(sp)
     c90:	df000017 	ldw	fp,0(sp)
     c94:	dec00204 	addi	sp,sp,8
     c98:	f800283a 	ret

00000c9c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     c9c:	defffb04 	addi	sp,sp,-20
     ca0:	df000415 	stw	fp,16(sp)
     ca4:	df000404 	addi	fp,sp,16
     ca8:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	e0bffd15 	stw	r2,-12(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     cb4:	e03ffe15 	stw	zero,-8(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10800017 	ldw	r2,0(r2)
     cc0:	e0bffc15 	stw	r2,-16(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     cc4:	e0bffc17 	ldw	r2,-16(fp)
}
     cc8:	e037883a 	mov	sp,fp
     ccc:	df000017 	ldw	fp,0(sp)
     cd0:	dec00104 	addi	sp,sp,4
     cd4:	f800283a 	ret

00000cd8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cd8:	defff304 	addi	sp,sp,-52
     cdc:	dfc00c15 	stw	ra,48(sp)
     ce0:	df000b15 	stw	fp,44(sp)
     ce4:	df000b04 	addi	fp,sp,44
     ce8:	e13ffe15 	stw	r4,-8(fp)
     cec:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     cf0:	e03ff915 	stw	zero,-28(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cf4:	e0bffe17 	ldw	r2,-8(fp)
     cf8:	e0bff615 	stw	r2,-40(fp)
BaseType_t xMatchFound = pdFALSE;
     cfc:	e03ff515 	stw	zero,-44(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     d00:	e0bff617 	ldw	r2,-40(fp)
     d04:	10800104 	addi	r2,r2,4
     d08:	e0bffa15 	stw	r2,-24(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	10800204 	addi	r2,r2,8
     d14:	e0bffb15 	stw	r2,-20(fp)
	vTaskSuspendAll();
     d18:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     d1c:	e0bffa17 	ldw	r2,-24(fp)
     d20:	10800317 	ldw	r2,12(r2)
     d24:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     d28:	e0bff617 	ldw	r2,-40(fp)
     d2c:	10c00017 	ldw	r3,0(r2)
     d30:	e0bfff17 	ldw	r2,-4(fp)
     d34:	1886b03a 	or	r3,r3,r2
     d38:	e0bff617 	ldw	r2,-40(fp)
     d3c:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     d40:	00003606 	br	e1c <xEventGroupSetBits+0x144>
		{
			pxNext = listGET_NEXT( pxListItem );
     d44:	e0bffd17 	ldw	r2,-12(fp)
     d48:	10800117 	ldw	r2,4(r2)
     d4c:	e0bffc15 	stw	r2,-16(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800017 	ldw	r2,0(r2)
     d58:	e0bff815 	stw	r2,-32(fp)
			xMatchFound = pdFALSE;
     d5c:	e03ff515 	stw	zero,-44(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     d60:	e0bff817 	ldw	r2,-32(fp)
     d64:	10bfc02c 	andhi	r2,r2,65280
     d68:	e0bff715 	stw	r2,-36(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d6c:	e0fff817 	ldw	r3,-32(fp)
     d70:	00804034 	movhi	r2,256
     d74:	10bfffc4 	addi	r2,r2,-1
     d78:	1884703a 	and	r2,r3,r2
     d7c:	e0bff815 	stw	r2,-32(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d80:	e0bff717 	ldw	r2,-36(fp)
     d84:	1081002c 	andhi	r2,r2,1024
     d88:	1004c03a 	cmpne	r2,r2,zero
     d8c:	1000091e 	bne	r2,zero,db4 <xEventGroupSetBits+0xdc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     d90:	e0bff617 	ldw	r2,-40(fp)
     d94:	10c00017 	ldw	r3,0(r2)
     d98:	e0bff817 	ldw	r2,-32(fp)
     d9c:	1884703a 	and	r2,r3,r2
     da0:	1005003a 	cmpeq	r2,r2,zero
     da4:	10000b1e 	bne	r2,zero,dd4 <xEventGroupSetBits+0xfc>
				{
					xMatchFound = pdTRUE;
     da8:	00800044 	movi	r2,1
     dac:	e0bff515 	stw	r2,-44(fp)
     db0:	00000806 	br	dd4 <xEventGroupSetBits+0xfc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     db4:	e0bff617 	ldw	r2,-40(fp)
     db8:	10c00017 	ldw	r3,0(r2)
     dbc:	e0bff817 	ldw	r2,-32(fp)
     dc0:	1886703a 	and	r3,r3,r2
     dc4:	e0bff817 	ldw	r2,-32(fp)
     dc8:	1880021e 	bne	r3,r2,dd4 <xEventGroupSetBits+0xfc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     dcc:	00800044 	movi	r2,1
     dd0:	e0bff515 	stw	r2,-44(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     dd4:	e0bff517 	ldw	r2,-44(fp)
     dd8:	1005003a 	cmpeq	r2,r2,zero
     ddc:	10000d1e 	bne	r2,zero,e14 <xEventGroupSetBits+0x13c>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     de0:	e0bff717 	ldw	r2,-36(fp)
     de4:	1080402c 	andhi	r2,r2,256
     de8:	1005003a 	cmpeq	r2,r2,zero
     dec:	1000041e 	bne	r2,zero,e00 <xEventGroupSetBits+0x128>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     df0:	e0bff917 	ldw	r2,-28(fp)
     df4:	e0fff817 	ldw	r3,-32(fp)
     df8:	10c4b03a 	or	r2,r2,r3
     dfc:	e0bff915 	stw	r2,-28(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e00:	e0bff617 	ldw	r2,-40(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	11408034 	orhi	r5,r2,512
     e0c:	e13ffd17 	ldw	r4,-12(fp)
     e10:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     e14:	e0bffc17 	ldw	r2,-16(fp)
     e18:	e0bffd15 	stw	r2,-12(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     e1c:	e0fffd17 	ldw	r3,-12(fp)
     e20:	e0bffb17 	ldw	r2,-20(fp)
     e24:	18bfc71e 	bne	r3,r2,d44 <xEventGroupSetBits+0x6c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     e28:	e0bff617 	ldw	r2,-40(fp)
     e2c:	10c00017 	ldw	r3,0(r2)
     e30:	e0bff917 	ldw	r2,-28(fp)
     e34:	0084303a 	nor	r2,zero,r2
     e38:	1886703a 	and	r3,r3,r2
     e3c:	e0bff617 	ldw	r2,-40(fp)
     e40:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
     e44:	00030180 	call	3018 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     e48:	e0bff617 	ldw	r2,-40(fp)
     e4c:	10800017 	ldw	r2,0(r2)
}
     e50:	e037883a 	mov	sp,fp
     e54:	dfc00117 	ldw	ra,4(sp)
     e58:	df000017 	ldw	fp,0(sp)
     e5c:	dec00204 	addi	sp,sp,8
     e60:	f800283a 	ret

00000e64 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     e64:	defffb04 	addi	sp,sp,-20
     e68:	dfc00415 	stw	ra,16(sp)
     e6c:	df000315 	stw	fp,12(sp)
     e70:	df000304 	addi	fp,sp,12
     e74:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     e78:	e0bfff17 	ldw	r2,-4(fp)
     e7c:	e0bffe15 	stw	r2,-8(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	10800104 	addi	r2,r2,4
     e88:	e0bffd15 	stw	r2,-12(fp)

	vTaskSuspendAll();
     e8c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     e90:	00000406 	br	ea4 <vEventGroupDelete+0x40>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     e94:	e0bffd17 	ldw	r2,-12(fp)
     e98:	11000317 	ldw	r4,12(r2)
     e9c:	01408034 	movhi	r5,512
     ea0:	00037040 	call	3704 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	1004c03a 	cmpne	r2,r2,zero
     eb0:	103ff81e 	bne	r2,zero,e94 <vEventGroupDelete+0x30>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
     eb4:	e13ffe17 	ldw	r4,-8(fp)
     eb8:	00011500 	call	1150 <vPortFree>
	}
	( void ) xTaskResumeAll();
     ebc:	00030180 	call	3018 <xTaskResumeAll>
}
     ec0:	e037883a 	mov	sp,fp
     ec4:	dfc00117 	ldw	ra,4(sp)
     ec8:	df000017 	ldw	fp,0(sp)
     ecc:	dec00204 	addi	sp,sp,8
     ed0:	f800283a 	ret

00000ed4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     ed4:	defffc04 	addi	sp,sp,-16
     ed8:	dfc00315 	stw	ra,12(sp)
     edc:	df000215 	stw	fp,8(sp)
     ee0:	df000204 	addi	fp,sp,8
     ee4:	e13ffe15 	stw	r4,-8(fp)
     ee8:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     eec:	e13ffe17 	ldw	r4,-8(fp)
     ef0:	e17fff17 	ldw	r5,-4(fp)
     ef4:	0000cd80 	call	cd8 <xEventGroupSetBits>
}
     ef8:	e037883a 	mov	sp,fp
     efc:	dfc00117 	ldw	ra,4(sp)
     f00:	df000017 	ldw	fp,0(sp)
     f04:	dec00204 	addi	sp,sp,8
     f08:	f800283a 	ret

00000f0c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     f0c:	defffc04 	addi	sp,sp,-16
     f10:	dfc00315 	stw	ra,12(sp)
     f14:	df000215 	stw	fp,8(sp)
     f18:	df000204 	addi	fp,sp,8
     f1c:	e13ffe15 	stw	r4,-8(fp)
     f20:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     f24:	e13ffe17 	ldw	r4,-8(fp)
     f28:	e17fff17 	ldw	r5,-4(fp)
     f2c:	0000c340 	call	c34 <xEventGroupClearBits>
}
     f30:	e037883a 	mov	sp,fp
     f34:	dfc00117 	ldw	ra,4(sp)
     f38:	df000017 	ldw	fp,0(sp)
     f3c:	dec00204 	addi	sp,sp,8
     f40:	f800283a 	ret

00000f44 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     f44:	defffb04 	addi	sp,sp,-20
     f48:	df000415 	stw	fp,16(sp)
     f4c:	df000404 	addi	fp,sp,16
     f50:	e13ffd15 	stw	r4,-12(fp)
     f54:	e17ffe15 	stw	r5,-8(fp)
     f58:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
     f5c:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
     f60:	e0bfff17 	ldw	r2,-4(fp)
     f64:	1004c03a 	cmpne	r2,r2,zero
     f68:	1000081e 	bne	r2,zero,f8c <prvTestWaitCondition+0x48>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f6c:	e0fffd17 	ldw	r3,-12(fp)
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	1884703a 	and	r2,r3,r2
     f78:	1005003a 	cmpeq	r2,r2,zero
     f7c:	10000a1e 	bne	r2,zero,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     f80:	00800044 	movi	r2,1
     f84:	e0bffc15 	stw	r2,-16(fp)
     f88:	00000706 	br	fa8 <prvTestWaitCondition+0x64>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     f8c:	e0fffd17 	ldw	r3,-12(fp)
     f90:	e0bffe17 	ldw	r2,-8(fp)
     f94:	1886703a 	and	r3,r3,r2
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	1880021e 	bne	r3,r2,fa8 <prvTestWaitCondition+0x64>
		{
			xWaitConditionMet = pdTRUE;
     fa0:	00800044 	movi	r2,1
     fa4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     fa8:	e0bffc17 	ldw	r2,-16(fp)
}
     fac:	e037883a 	mov	sp,fp
     fb0:	df000017 	ldw	fp,0(sp)
     fb4:	dec00104 	addi	sp,sp,4
     fb8:	f800283a 	ret

00000fbc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fbc:	defff904 	addi	sp,sp,-28
     fc0:	dfc00615 	stw	ra,24(sp)
     fc4:	df000515 	stw	fp,20(sp)
     fc8:	df000504 	addi	fp,sp,20
     fcc:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     fd0:	e03ffb15 	stw	zero,-20(fp)

        vTaskSuspendAll();
     fd4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
        {
                /* If this is the first call to malloc then the heap will require
                initialisation to setup the list of free blocks. */
                if( pxEnd == NULL )
     fd8:	d0a02717 	ldw	r2,-32612(gp)
     fdc:	1004c03a 	cmpne	r2,r2,zero
     fe0:	1000011e 	bne	r2,zero,fe8 <pvPortMalloc+0x2c>
                {
                        prvHeapInit();
     fe4:	000120c0 	call	120c <prvHeapInit>
                }

                /* The wanted size is increased so it can contain a xBlockLink
                structure in addition to the requested amount of bytes. */
                if( xWantedSize > 0 )
     fe8:	e0bfff17 	ldw	r2,-4(fp)
     fec:	1005003a 	cmpeq	r2,r2,zero
     ff0:	10000e1e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                {
                        xWantedSize += heapSTRUCT_SIZE;
     ff4:	d0a0000b 	ldhu	r2,-32768(gp)
     ff8:	10ffffcc 	andi	r3,r2,65535
     ffc:	e0bfff17 	ldw	r2,-4(fp)
    1000:	10c5883a 	add	r2,r2,r3
    1004:	e0bfff15 	stw	r2,-4(fp)

                        /* Ensure that blocks are always aligned to the required number of
                        bytes. */
                        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1008:	e0bfff17 	ldw	r2,-4(fp)
    100c:	108000cc 	andi	r2,r2,3
    1010:	1005003a 	cmpeq	r2,r2,zero
    1014:	1000051e 	bne	r2,zero,102c <pvPortMalloc+0x70>
                        {
                                /* Byte alignment required. */
                                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1018:	e0ffff17 	ldw	r3,-4(fp)
    101c:	00bfff04 	movi	r2,-4
    1020:	1884703a 	and	r2,r3,r2
    1024:	10800104 	addi	r2,r2,4
    1028:	e0bfff15 	stw	r2,-4(fp)
                        }
                }

                if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
    102c:	e0bfff17 	ldw	r2,-4(fp)
    1030:	1005003a 	cmpeq	r2,r2,zero
    1034:	10003f1e 	bne	r2,zero,1134 <pvPortMalloc+0x178>
    1038:	d0e00117 	ldw	r3,-32764(gp)
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	10c03c2e 	bgeu	r2,r3,1134 <pvPortMalloc+0x178>
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
    1044:	d0a02804 	addi	r2,gp,-32608
    1048:	e0bffd15 	stw	r2,-12(fp)
                        pxBlock = xStart.pxNextFreeBlock;
    104c:	d0a02817 	ldw	r2,-32608(gp)
    1050:	e0bffe15 	stw	r2,-8(fp)
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1054:	00000506 	br	106c <pvPortMalloc+0xb0>
                        {
                                pxPreviousBlock = pxBlock;
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	e0bffd15 	stw	r2,-12(fp)
                                pxBlock = pxBlock->pxNextFreeBlock;
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10800017 	ldw	r2,0(r2)
    1068:	e0bffe15 	stw	r2,-8(fp)
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
                        pxBlock = xStart.pxNextFreeBlock;
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10c00117 	ldw	r3,4(r2)
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	1880042e 	bgeu	r3,r2,108c <pvPortMalloc+0xd0>
    107c:	e0bffe17 	ldw	r2,-8(fp)
    1080:	10800017 	ldw	r2,0(r2)
    1084:	1004c03a 	cmpne	r2,r2,zero
    1088:	103ff31e 	bne	r2,zero,1058 <pvPortMalloc+0x9c>
                                pxBlock = pxBlock->pxNextFreeBlock;
                        }

                        /* If the end marker was reached then a block of adequate size was
                        not found. */
                        if( pxBlock != pxEnd )
    108c:	d0e02717 	ldw	r3,-32612(gp)
    1090:	e0bffe17 	ldw	r2,-8(fp)
    1094:	10c02726 	beq	r2,r3,1134 <pvPortMalloc+0x178>
                        {
                                /* Return the memory space - jumping over the xBlockLink structure
                                at its start. */
                                pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1098:	e0bffd17 	ldw	r2,-12(fp)
    109c:	10800017 	ldw	r2,0(r2)
    10a0:	1007883a 	mov	r3,r2
    10a4:	d0a0000b 	ldhu	r2,-32768(gp)
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	1885883a 	add	r2,r3,r2
    10b0:	e0bffb15 	stw	r2,-20(fp)

                                /* This block is being returned for use so must be taken out of
                                the     list of free blocks. */
                                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10b4:	e0bffe17 	ldw	r2,-8(fp)
    10b8:	10c00017 	ldw	r3,0(r2)
    10bc:	e0bffd17 	ldw	r2,-12(fp)
    10c0:	10c00015 	stw	r3,0(r2)

                                /* If the block is larger than required it can be split into two. */
                                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10c4:	e0bffe17 	ldw	r2,-8(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1887c83a 	sub	r3,r3,r2
    10d4:	d0a0000b 	ldhu	r2,-32768(gp)
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c00f2e 	bgeu	r2,r3,1120 <pvPortMalloc+0x164>
                                {
                                        /* This block is to be split into two.  Create a new block
                                        following the number of bytes requested. The void cast is
                                        used to prevent byte alignment warnings from the compiler. */
                                        pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e4:	e0fffe17 	ldw	r3,-8(fp)
    10e8:	e0bfff17 	ldw	r2,-4(fp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	e0bffc15 	stw	r2,-16(fp)

                                        /* Calculate the sizes of two blocks split from the single
                                        block. */
                                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10f4:	e0bffe17 	ldw	r2,-8(fp)
    10f8:	10c00117 	ldw	r3,4(r2)
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1887c83a 	sub	r3,r3,r2
    1104:	e0bffc17 	ldw	r2,-16(fp)
    1108:	10c00115 	stw	r3,4(r2)
                                        pxBlock->xBlockSize = xWantedSize;
    110c:	e0fffe17 	ldw	r3,-8(fp)
    1110:	e0bfff17 	ldw	r2,-4(fp)
    1114:	18800115 	stw	r2,4(r3)

                                        /* Insert the new block into the list of free blocks. */
                                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1118:	e13ffc17 	ldw	r4,-16(fp)
    111c:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                                }

                                xFreeBytesRemaining -= pxBlock->xBlockSize;
    1120:	d0e00217 	ldw	r3,-32760(gp)
    1124:	e0bffe17 	ldw	r2,-8(fp)
    1128:	10800117 	ldw	r2,4(r2)
    112c:	1885c83a 	sub	r2,r3,r2
    1130:	d0a00215 	stw	r2,-32760(gp)
                        }
                }
        }
        xTaskResumeAll();
    1134:	00030180 	call	3018 <xTaskResumeAll>
                        vApplicationMallocFailedHook();
                }
        }
        #endif

        return pvReturn;
    1138:	e0bffb17 	ldw	r2,-20(fp)
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1150:	defffb04 	addi	sp,sp,-20
    1154:	dfc00415 	stw	ra,16(sp)
    1158:	df000315 	stw	fp,12(sp)
    115c:	df000304 	addi	fp,sp,12
    1160:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	e0bffe15 	stw	r2,-8(fp)
xBlockLink *pxLink;

        if( pv != NULL )
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	1005003a 	cmpeq	r2,r2,zero
    1174:	1000111e 	bne	r2,zero,11bc <vPortFree+0x6c>
        {
                /* The memory being freed will have an xBlockLink structure immediately
                before it. */
                puc -= heapSTRUCT_SIZE;
    1178:	d0a0000b 	ldhu	r2,-32768(gp)
    117c:	10bfffcc 	andi	r2,r2,65535
    1180:	1007883a 	mov	r3,r2
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10c5c83a 	sub	r2,r2,r3
    118c:	e0bffe15 	stw	r2,-8(fp)

                /* This casting is to keep the compiler from issuing warnings. */
                pxLink = ( void * ) puc;
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	e0bffd15 	stw	r2,-12(fp)

                vTaskSuspendAll();
    1198:	0002ff00 	call	2ff0 <vTaskSuspendAll>
                {
                        /* Add this block to the list of free blocks. */
                        xFreeBytesRemaining += pxLink->xBlockSize;
    119c:	e0bffd17 	ldw	r2,-12(fp)
    11a0:	10c00117 	ldw	r3,4(r2)
    11a4:	d0a00217 	ldw	r2,-32760(gp)
    11a8:	1885883a 	add	r2,r3,r2
    11ac:	d0a00215 	stw	r2,-32760(gp)
                        prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    11b0:	e13ffd17 	ldw	r4,-12(fp)
    11b4:	00012cc0 	call	12cc <prvInsertBlockIntoFreeList>
                }
                xTaskResumeAll();
    11b8:	00030180 	call	3018 <xTaskResumeAll>
        }
}
    11bc:	e037883a 	mov	sp,fp
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
    11cc:	f800283a 	ret

000011d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	df000015 	stw	fp,0(sp)
    11d8:	d839883a 	mov	fp,sp
        return xFreeBytesRemaining;
    11dc:	d0a00217 	ldw	r2,-32760(gp)
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	df000017 	ldw	fp,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	df000015 	stw	fp,0(sp)
    11f8:	d839883a 	mov	fp,sp
        /* This just exists to keep the linker quiet. */
}
    11fc:	e037883a 	mov	sp,fp
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00104 	addi	sp,sp,4
    1208:	f800283a 	ret

0000120c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    120c:	defffd04 	addi	sp,sp,-12
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
        /* Ensure the start of the heap is aligned. */
        configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

        /* xStart is used to hold a pointer to the first item in the list of free
        blocks.  The void cast is used to prevent compiler warnings. */
        xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
    1218:	00820034 	movhi	r2,2048
    121c:	108aa704 	addi	r2,r2,10908
    1220:	d0a02815 	stw	r2,-32608(gp)
        xStart.xBlockSize = ( size_t ) 0;
    1224:	00820034 	movhi	r2,2048
    1228:	108a5804 	addi	r2,r2,10592
    122c:	10000015 	stw	zero,0(r2)

        /* pxEnd is used to mark the end of the list of free blocks and is inserted
        at the end of the heap space. */
        pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
    1230:	d0a00117 	ldw	r2,-32764(gp)
    1234:	1007883a 	mov	r3,r2
    1238:	00820034 	movhi	r2,2048
    123c:	108aa704 	addi	r2,r2,10908
    1240:	1885883a 	add	r2,r3,r2
    1244:	e0bffe15 	stw	r2,-8(fp)
        pucHeapEnd -= heapSTRUCT_SIZE;
    1248:	d0a0000b 	ldhu	r2,-32768(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	1007883a 	mov	r3,r2
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	10c5c83a 	sub	r2,r2,r3
    125c:	e0bffe15 	stw	r2,-8(fp)
        pxEnd = ( void * ) pucHeapEnd;
    1260:	e0bffe17 	ldw	r2,-8(fp)
    1264:	d0a02715 	stw	r2,-32612(gp)
        configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
        pxEnd->xBlockSize = 0;
    1268:	d0a02717 	ldw	r2,-32612(gp)
    126c:	10000115 	stw	zero,4(r2)
        pxEnd->pxNextFreeBlock = NULL;
    1270:	d0a02717 	ldw	r2,-32612(gp)
    1274:	10000015 	stw	zero,0(r2)

        /* To start with there is a single free block that is sized to take up the
        entire heap space, minus the space taken by pxEnd. */
        pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
    1278:	00820034 	movhi	r2,2048
    127c:	108aa704 	addi	r2,r2,10908
    1280:	e0bfff15 	stw	r2,-4(fp)
        pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
    1284:	d0e00117 	ldw	r3,-32764(gp)
    1288:	d0a0000b 	ldhu	r2,-32768(gp)
    128c:	10bfffcc 	andi	r2,r2,65535
    1290:	1887c83a 	sub	r3,r3,r2
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10c00115 	stw	r3,4(r2)
        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129c:	d0e02717 	ldw	r3,-32612(gp)
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00015 	stw	r3,0(r2)

        /* The heap now contains pxEnd. */
        xFreeBytesRemaining -= heapSTRUCT_SIZE;
    12a8:	d0e00217 	ldw	r3,-32760(gp)
    12ac:	d0a0000b 	ldhu	r2,-32768(gp)
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	d0a00215 	stw	r2,-32760(gp)
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	df000017 	ldw	fp,0(sp)
    12c4:	dec00104 	addi	sp,sp,4
    12c8:	f800283a 	ret

000012cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
    12cc:	defffc04 	addi	sp,sp,-16
    12d0:	df000315 	stw	fp,12(sp)
    12d4:	df000304 	addi	fp,sp,12
    12d8:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxIterator;
unsigned char *puc;

        /* Iterate through the list until a block is found that has a higher address
        than the block being inserted. */
        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12dc:	d0a02804 	addi	r2,gp,-32608
    12e0:	e0bffe15 	stw	r2,-8(fp)
    12e4:	00000306 	br	12f4 <prvInsertBlockIntoFreeList+0x28>
    12e8:	e0bffe17 	ldw	r2,-8(fp)
    12ec:	10800017 	ldw	r2,0(r2)
    12f0:	e0bffe15 	stw	r2,-8(fp)
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10c00017 	ldw	r3,0(r2)
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	18bff936 	bltu	r3,r2,12e8 <prvInsertBlockIntoFreeList+0x1c>
                /* Nothing to do here, just iterate to the right position. */
        }

        /* Do the block being inserted, and the block it is being inserted after
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxIterator;
    1304:	e0bffe17 	ldw	r2,-8(fp)
    1308:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	10800117 	ldw	r2,4(r2)
    1314:	1007883a 	mov	r3,r2
    1318:	e0bffd17 	ldw	r2,-12(fp)
    131c:	1887883a 	add	r3,r3,r2
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	1880091e 	bne	r3,r2,134c <prvInsertBlockIntoFreeList+0x80>
        {
                pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1328:	e0bffe17 	ldw	r2,-8(fp)
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800117 	ldw	r2,4(r2)
    1338:	1887883a 	add	r3,r3,r2
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	10c00115 	stw	r3,4(r2)
                pxBlockToInsert = pxIterator;
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Do the block being inserted, and the block it is being inserted before
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxBlockToInsert;
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	e0bffd15 	stw	r2,-12(fp)
        if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10800117 	ldw	r2,4(r2)
    135c:	1007883a 	mov	r3,r2
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	1887883a 	add	r3,r3,r2
    1368:	e0bffe17 	ldw	r2,-8(fp)
    136c:	10800017 	ldw	r2,0(r2)
    1370:	1880161e 	bne	r3,r2,13cc <prvInsertBlockIntoFreeList+0x100>
        {
                if( pxIterator->pxNextFreeBlock != pxEnd )
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	10c00017 	ldw	r3,0(r2)
    137c:	d0a02717 	ldw	r2,-32612(gp)
    1380:	18800e26 	beq	r3,r2,13bc <prvInsertBlockIntoFreeList+0xf0>
                {
                        /* Form one big block from the two blocks. */
                        pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c00117 	ldw	r3,4(r2)
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	10800017 	ldw	r2,0(r2)
    1394:	10800117 	ldw	r2,4(r2)
    1398:	1887883a 	add	r3,r3,r2
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	10c00115 	stw	r3,4(r2)
                        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10800017 	ldw	r2,0(r2)
    13ac:	10c00017 	ldw	r3,0(r2)
    13b0:	e0bfff17 	ldw	r2,-4(fp)
    13b4:	10c00015 	stw	r3,0(r2)
    13b8:	00000806 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
                else
                {
                        pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13bc:	d0e02717 	ldw	r3,-32612(gp)
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10c00015 	stw	r3,0(r2)
    13c8:	00000406 	br	13dc <prvInsertBlockIntoFreeList+0x110>
                }
        }
        else
        {
                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	10c00017 	ldw	r3,0(r2)
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10c00015 	stw	r3,0(r2)

        /* If the block being inserted plugged a gab, so was merged with the block
        before and the block after, then it's pxNextFreeBlock pointer will have
        already been set, and should not be set here as that would make it point
        to itself. */
        if( pxIterator != pxBlockToInsert )
    13dc:	e0fffe17 	ldw	r3,-8(fp)
    13e0:	e0bfff17 	ldw	r2,-4(fp)
    13e4:	18800326 	beq	r3,r2,13f4 <prvInsertBlockIntoFreeList+0x128>
        {
                pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e8:	e0fffe17 	ldw	r3,-8(fp)
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	18800015 	stw	r2,0(r3)
        }
}
    13f4:	e037883a 	mov	sp,fp
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00104 	addi	sp,sp,4
    1400:	f800283a 	ret

00001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1404:	defffe04 	addi	sp,sp,-8
    1408:	df000115 	stw	fp,4(sp)
    140c:	df000104 	addi	fp,sp,4
    1410:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	10800204 	addi	r2,r2,8
    141c:	1007883a 	mov	r3,r2
    1420:	e0bfff17 	ldw	r2,-4(fp)
    1424:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1428:	e0ffff17 	ldw	r3,-4(fp)
    142c:	00bfffc4 	movi	r2,-1
    1430:	18800215 	stw	r2,8(r3)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800204 	addi	r2,r2,8
    143c:	1007883a 	mov	r3,r2
    1440:	e0bfff17 	ldw	r2,-4(fp)
    1444:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10800204 	addi	r2,r2,8
    1450:	1007883a 	mov	r3,r2
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    145c:	e0bfff17 	ldw	r2,-4(fp)
    1460:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1464:	e037883a 	mov	sp,fp
    1468:	df000017 	ldw	fp,0(sp)
    146c:	dec00104 	addi	sp,sp,4
    1470:	f800283a 	ret

00001474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1474:	defffe04 	addi	sp,sp,-8
    1478:	df000115 	stw	fp,4(sp)
    147c:	df000104 	addi	fp,sp,4
    1480:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1484:	e0bfff17 	ldw	r2,-4(fp)
    1488:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    148c:	e037883a 	mov	sp,fp
    1490:	df000017 	ldw	fp,0(sp)
    1494:	dec00104 	addi	sp,sp,4
    1498:	f800283a 	ret

0000149c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    149c:	defffc04 	addi	sp,sp,-16
    14a0:	df000315 	stw	fp,12(sp)
    14a4:	df000304 	addi	fp,sp,12
    14a8:	e13ffe15 	stw	r4,-8(fp)
    14ac:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	10800117 	ldw	r2,4(r2)
    14b8:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14bc:	e0ffff17 	ldw	r3,-4(fp)
    14c0:	e0bffd17 	ldw	r2,-12(fp)
    14c4:	18800115 	stw	r2,4(r3)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c8:	e0bffd17 	ldw	r2,-12(fp)
    14cc:	10c00217 	ldw	r3,8(r2)
    14d0:	e0bfff17 	ldw	r2,-4(fp)
    14d4:	10c00215 	stw	r3,8(r2)
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	10c00217 	ldw	r3,8(r2)
    14e0:	e0bfff17 	ldw	r2,-4(fp)
    14e4:	18800115 	stw	r2,4(r3)
	pxIndex->pxPrevious = pxNewListItem;
    14e8:	e0fffd17 	ldw	r3,-12(fp)
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	18800215 	stw	r2,8(r3)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14f4:	e0ffff17 	ldw	r3,-4(fp)
    14f8:	e0bffe17 	ldw	r2,-8(fp)
    14fc:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	10800017 	ldw	r2,0(r2)
    1508:	10c00044 	addi	r3,r2,1
    150c:	e0bffe17 	ldw	r2,-8(fp)
    1510:	10c00015 	stw	r3,0(r2)
}
    1514:	e037883a 	mov	sp,fp
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	defffb04 	addi	sp,sp,-20
    1528:	df000415 	stw	fp,16(sp)
    152c:	df000404 	addi	fp,sp,16
    1530:	e13ffe15 	stw	r4,-8(fp)
    1534:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	e0bffc15 	stw	r2,-16(fp)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1544:	e0bffc17 	ldw	r2,-16(fp)
    1548:	10bfffd8 	cmpnei	r2,r2,-1
    154c:	1000041e 	bne	r2,zero,1560 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800417 	ldw	r2,16(r2)
    1558:	e0bffd15 	stw	r2,-12(fp)
    155c:	00000c06 	br	1590 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10800204 	addi	r2,r2,8
    1568:	e0bffd15 	stw	r2,-12(fp)
    156c:	00000306 	br	157c <vListInsert+0x58>
    1570:	e0bffd17 	ldw	r2,-12(fp)
    1574:	10800117 	ldw	r2,4(r2)
    1578:	e0bffd15 	stw	r2,-12(fp)
    157c:	e0bffd17 	ldw	r2,-12(fp)
    1580:	10800117 	ldw	r2,4(r2)
    1584:	10c00017 	ldw	r3,0(r2)
    1588:	e0bffc17 	ldw	r2,-16(fp)
    158c:	10fff82e 	bgeu	r2,r3,1570 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1590:	e0bffd17 	ldw	r2,-12(fp)
    1594:	10c00117 	ldw	r3,4(r2)
    1598:	e0bfff17 	ldw	r2,-4(fp)
    159c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c00117 	ldw	r3,4(r2)
    15a8:	e0bfff17 	ldw	r2,-4(fp)
    15ac:	18800215 	stw	r2,8(r3)
	pxNewListItem->pxPrevious = pxIterator;
    15b0:	e0ffff17 	ldw	r3,-4(fp)
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	18800215 	stw	r2,8(r3)
	pxIterator->pxNext = pxNewListItem;
    15bc:	e0fffd17 	ldw	r3,-12(fp)
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	18800115 	stw	r2,4(r3)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15c8:	e0ffff17 	ldw	r3,-4(fp)
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	18800415 	stw	r2,16(r3)

	( pxList->uxNumberOfItems )++;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	10c00044 	addi	r3,r2,1
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00015 	stw	r3,0(r2)
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	df000017 	ldw	fp,0(sp)
    15f0:	dec00104 	addi	sp,sp,4
    15f4:	f800283a 	ret

000015f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15f8:	defffd04 	addi	sp,sp,-12
    15fc:	df000215 	stw	fp,8(sp)
    1600:	df000204 	addi	fp,sp,8
    1604:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	10800417 	ldw	r2,16(r2)
    1610:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1614:	e0bfff17 	ldw	r2,-4(fp)
    1618:	10c00117 	ldw	r3,4(r2)
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	10800217 	ldw	r2,8(r2)
    1624:	18800215 	stw	r2,8(r3)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1628:	e0bfff17 	ldw	r2,-4(fp)
    162c:	10c00217 	ldw	r3,8(r2)
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	10800117 	ldw	r2,4(r2)
    1638:	18800115 	stw	r2,4(r3)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	10c00117 	ldw	r3,4(r2)
    1644:	e0bfff17 	ldw	r2,-4(fp)
    1648:	1880041e 	bne	r3,r2,165c <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    164c:	e0bfff17 	ldw	r2,-4(fp)
    1650:	10c00217 	ldw	r3,8(r2)
    1654:	e0bffe17 	ldw	r2,-8(fp)
    1658:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    165c:	e0bfff17 	ldw	r2,-4(fp)
    1660:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	10800017 	ldw	r2,0(r2)
    166c:	10ffffc4 	addi	r3,r2,-1
    1670:	e0bffe17 	ldw	r2,-8(fp)
    1674:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10800017 	ldw	r2,0(r2)
}
    1680:	e037883a 	mov	sp,fp
    1684:	df000017 	ldw	fp,0(sp)
    1688:	dec00104 	addi	sp,sp,4
    168c:	f800283a 	ret

00001690 <vApplicationStackOverflowHook>:
#define configTICK_RATE_HZ 1000
#define configCPU_CLOCK_HZ TIMER1MS_FREQ
#define SYS_CLK_IRQ TIMER1MS_IRQ
//stack overflow hook
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName )
{
    1690:	defffc04 	addi	sp,sp,-16
    1694:	dfc00315 	stw	ra,12(sp)
    1698:	df000215 	stw	fp,8(sp)
    169c:	df000204 	addi	fp,sp,8
    16a0:	e13ffe15 	stw	r4,-8(fp)
    16a4:	e17fff15 	stw	r5,-4(fp)
	printf("[free_rtos] Application stack overflow at task: %s\n", pcTaskName);
    16a8:	01020034 	movhi	r4,2048
    16ac:	21000004 	addi	r4,r4,0
    16b0:	e17fff17 	ldw	r5,-4(fp)
    16b4:	000844c0 	call	844c <printf>
}
    16b8:	e037883a 	mov	sp,fp
    16bc:	dfc00117 	ldw	ra,4(sp)
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00204 	addi	sp,sp,8
    16c8:	f800283a 	ret

000016cc <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
    16cc:	defffe04 	addi	sp,sp,-8
    16d0:	df000115 	stw	fp,4(sp)
    16d4:	df000104 	addi	fp,sp,4
    16d8:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	16800015 	stw	gp,0(r2)
}
    16e4:	e037883a 	mov	sp,fp
    16e8:	df000017 	ldw	fp,0(sp)
    16ec:	dec00104 	addi	sp,sp,4
    16f0:	f800283a 	ret

000016f4 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
    16f4:	defff904 	addi	sp,sp,-28
    16f8:	dfc00615 	stw	ra,24(sp)
    16fc:	df000515 	stw	fp,20(sp)
    1700:	df000504 	addi	fp,sp,20
    1704:	e13ffd15 	stw	r4,-12(fp)
    1708:	e17ffe15 	stw	r5,-8(fp)
    170c:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
    1710:	e0bffd17 	ldw	r2,-12(fp)
    1714:	10bfff04 	addi	r2,r2,-4
    1718:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
    171c:	e13ffc04 	addi	r4,fp,-16
    1720:	00016cc0 	call	16cc <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    1724:	e0fffd17 	ldw	r3,-12(fp)
    1728:	00b7abb4 	movhi	r2,57006
    172c:	10afbbc4 	addi	r2,r2,-16657
    1730:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
    1734:	e0bffd17 	ldw	r2,-12(fp)
    1738:	10bfff04 	addi	r2,r2,-4
    173c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
    1740:	e0bffb17 	ldw	r2,-20(fp)
    1744:	1007883a 	mov	r3,r2
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1750:	e0bffd17 	ldw	r2,-12(fp)
    1754:	10bfff04 	addi	r2,r2,-4
    1758:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
    175c:	e0fffc17 	ldw	r3,-16(fp)
    1760:	e0bffd17 	ldw	r2,-12(fp)
    1764:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
    1768:	e0bffd17 	ldw	r2,-12(fp)
    176c:	10bff704 	addi	r2,r2,-36
    1770:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
    1774:	e0bffe17 	ldw	r2,-8(fp)
    1778:	1007883a 	mov	r3,r2
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	10bfff04 	addi	r2,r2,-4
    178c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
    1790:	e0fffd17 	ldw	r3,-12(fp)
    1794:	00800044 	movi	r2,1
    1798:	18800015 	stw	r2,0(r3)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
    179c:	e0bffd17 	ldw	r2,-12(fp)
    17a0:	10bff404 	addi	r2,r2,-48
    17a4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	1007883a 	mov	r3,r2
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
    17b8:	e0bffd17 	ldw	r2,-12(fp)
    17bc:	10bffb04 	addi	r2,r2,-20
    17c0:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
    17c4:	e0bffd17 	ldw	r2,-12(fp)
}
    17c8:	e037883a 	mov	sp,fp
    17cc:	dfc00117 	ldw	ra,4(sp)
    17d0:	df000017 	ldw	fp,0(sp)
    17d4:	dec00204 	addi	sp,sp,8
    17d8:	f800283a 	ret

000017dc <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
    17dc:	defffe04 	addi	sp,sp,-8
    17e0:	dfc00115 	stw	ra,4(sp)
    17e4:	df000015 	stw	fp,0(sp)
    17e8:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    17ec:	00018300 	call	1830 <prvSetupTimerInterrupt>
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
    17f0:	00800034 	movhi	r2,0
    17f4:	10803104 	addi	r2,r2,196
    17f8:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
    17fc:	0005883a 	mov	r2,zero
}
    1800:	e037883a 	mov	sp,fp
    1804:	dfc00117 	ldw	ra,4(sp)
    1808:	df000017 	ldw	fp,0(sp)
    180c:	dec00204 	addi	sp,sp,8
    1810:	f800283a 	ret

00001814 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1814:	deffff04 	addi	sp,sp,-4
    1818:	df000015 	stw	fp,0(sp)
    181c:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
    1820:	e037883a 	mov	sp,fp
    1824:	df000017 	ldw	fp,0(sp)
    1828:	dec00104 	addi	sp,sp,4
    182c:	f800283a 	ret

00001830 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1830:	defffe04 	addi	sp,sp,-8
    1834:	dfc00115 	stw	ra,4(sp)
    1838:	df000015 	stw	fp,0(sp)
    183c:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
    1840:	0009883a 	mov	r4,zero
    1844:	000b883a 	mov	r5,zero
    1848:	01800034 	movhi	r6,0
    184c:	31863204 	addi	r6,r6,6344
    1850:	00019140 	call	1914 <alt_irq_register>
    1854:	10bffa98 	cmpnei	r2,r2,-22
    1858:	1000021e 	bne	r2,zero,1864 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
    185c:	003da03a 	break	0
    1860:	00001006 	br	18a4 <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
    1864:	00c00134 	movhi	r3,4
    1868:	18cc1104 	addi	r3,r3,12356
    186c:	00800204 	movi	r2,8
    1870:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
    1874:	00c00134 	movhi	r3,4
    1878:	18cc1204 	addi	r3,r3,12360
    187c:	00a1a814 	movui	r2,34464
    1880:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
    1884:	00c00134 	movhi	r3,4
    1888:	18cc1304 	addi	r3,r3,12364
    188c:	00800044 	movi	r2,1
    1890:	18800035 	stwio	r2,0(r3)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
    1894:	00c00134 	movhi	r3,4
    1898:	18cc1104 	addi	r3,r3,12356
    189c:	008001c4 	movi	r2,7
    18a0:	18800035 	stwio	r2,0(r3)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18a4:	00c00134 	movhi	r3,4
    18a8:	18cc1004 	addi	r3,r3,12352
    18ac:	00bfff84 	movi	r2,-2
    18b0:	18800035 	stwio	r2,0(r3)
}
    18b4:	e037883a 	mov	sp,fp
    18b8:	dfc00117 	ldw	ra,4(sp)
    18bc:	df000017 	ldw	fp,0(sp)
    18c0:	dec00204 	addi	sp,sp,8
    18c4:	f800283a 	ret

000018c8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
    18c8:	defffc04 	addi	sp,sp,-16
    18cc:	dfc00315 	stw	ra,12(sp)
    18d0:	df000215 	stw	fp,8(sp)
    18d4:	df000204 	addi	fp,sp,8
    18d8:	e13ffe15 	stw	r4,-8(fp)
    18dc:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
    18e0:	00031dc0 	call	31dc <xTaskIncrementTick>
    18e4:	1005003a 	cmpeq	r2,r2,zero
    18e8:	1000011e 	bne	r2,zero,18f0 <vPortSysTickHandler+0x28>
	{
        vTaskSwitchContext();
    18ec:	00033b80 	call	33b8 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18f0:	00c00134 	movhi	r3,4
    18f4:	18cc1004 	addi	r3,r3,12352
    18f8:	00bfff84 	movi	r2,-2
    18fc:	18800035 	stwio	r2,0(r3)
}
    1900:	e037883a 	mov	sp,fp
    1904:	dfc00117 	ldw	ra,4(sp)
    1908:	df000017 	ldw	fp,0(sp)
    190c:	dec00204 	addi	sp,sp,8
    1910:	f800283a 	ret

00001914 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
    1914:	defff004 	addi	sp,sp,-64
    1918:	df000f15 	stw	fp,60(sp)
    191c:	df000f04 	addi	fp,sp,60
    1920:	e13ffc15 	stw	r4,-16(fp)
    1924:	e17ffd15 	stw	r5,-12(fp)
    1928:	e1bffe15 	stw	r6,-8(fp)
	int rc = -EINVAL;  
    192c:	00bffa84 	movi	r2,-22
    1930:	e0bffb15 	stw	r2,-20(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
    1934:	e0bffc17 	ldw	r2,-16(fp)
    1938:	10800828 	cmpgeui	r2,r2,32
    193c:	10005c1e 	bne	r2,zero,1ab0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1940:	0005303a 	rdctl	r2,status
    1944:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1948:	e0fff917 	ldw	r3,-28(fp)
    194c:	00bfff84 	movi	r2,-2
    1950:	1884703a 	and	r2,r3,r2
    1954:	1001703a 	wrctl	status,r2
  
  return context;
    1958:	e0bff917 	ldw	r2,-28(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all ();
    195c:	e0bffa15 	stw	r2,-24(fp)
	
		alt_irq[id].handler = handler;
    1960:	e0bffc17 	ldw	r2,-16(fp)
    1964:	00c20234 	movhi	r3,2056
    1968:	18c0f704 	addi	r3,r3,988
    196c:	100490fa 	slli	r2,r2,3
    1970:	10c7883a 	add	r3,r2,r3
    1974:	e0bffe17 	ldw	r2,-8(fp)
    1978:	18800015 	stw	r2,0(r3)
		alt_irq[id].context = context;
    197c:	e0bffc17 	ldw	r2,-16(fp)
    1980:	00c20234 	movhi	r3,2056
    1984:	18c0f704 	addi	r3,r3,988
    1988:	100490fa 	slli	r2,r2,3
    198c:	10c5883a 	add	r2,r2,r3
    1990:	10c00104 	addi	r3,r2,4
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	18800015 	stw	r2,0(r3)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    199c:	e0bffe17 	ldw	r2,-8(fp)
    19a0:	1005003a 	cmpeq	r2,r2,zero
    19a4:	1000201e 	bne	r2,zero,1a28 <alt_irq_register+0x114>
    19a8:	e0bffc17 	ldw	r2,-16(fp)
    19ac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19b0:	0005303a 	rdctl	r2,status
    19b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19b8:	e0fff617 	ldw	r3,-40(fp)
    19bc:	00bfff84 	movi	r2,-2
    19c0:	1884703a 	and	r2,r3,r2
    19c4:	1001703a 	wrctl	status,r2
  
  return context;
    19c8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    19cc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    19d0:	e0fff717 	ldw	r3,-36(fp)
    19d4:	00800044 	movi	r2,1
    19d8:	10c4983a 	sll	r2,r2,r3
    19dc:	1007883a 	mov	r3,r2
    19e0:	00820034 	movhi	r2,2048
    19e4:	108a8804 	addi	r2,r2,10784
    19e8:	10800017 	ldw	r2,0(r2)
    19ec:	1886b03a 	or	r3,r3,r2
    19f0:	00820034 	movhi	r2,2048
    19f4:	108a8804 	addi	r2,r2,10784
    19f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19fc:	00820034 	movhi	r2,2048
    1a00:	108a8804 	addi	r2,r2,10784
    1a04:	10800017 	ldw	r2,0(r2)
    1a08:	100170fa 	wrctl	ienable,r2
    1a0c:	e0bff817 	ldw	r2,-32(fp)
    1a10:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a14:	e0bff517 	ldw	r2,-44(fp)
    1a18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a1c:	0005883a 	mov	r2,zero
    1a20:	e0bfff15 	stw	r2,-4(fp)
    1a24:	00002006 	br	1aa8 <alt_irq_register+0x194>
    1a28:	e0bffc17 	ldw	r2,-16(fp)
    1a2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a30:	0005303a 	rdctl	r2,status
    1a34:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a38:	e0fff217 	ldw	r3,-56(fp)
    1a3c:	00bfff84 	movi	r2,-2
    1a40:	1884703a 	and	r2,r3,r2
    1a44:	1001703a 	wrctl	status,r2
  
  return context;
    1a48:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a4c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    1a50:	e0fff317 	ldw	r3,-52(fp)
    1a54:	00800044 	movi	r2,1
    1a58:	10c4983a 	sll	r2,r2,r3
    1a5c:	0084303a 	nor	r2,zero,r2
    1a60:	1007883a 	mov	r3,r2
    1a64:	00820034 	movhi	r2,2048
    1a68:	108a8804 	addi	r2,r2,10784
    1a6c:	10800017 	ldw	r2,0(r2)
    1a70:	1886703a 	and	r3,r3,r2
    1a74:	00820034 	movhi	r2,2048
    1a78:	108a8804 	addi	r2,r2,10784
    1a7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a80:	00820034 	movhi	r2,2048
    1a84:	108a8804 	addi	r2,r2,10784
    1a88:	10800017 	ldw	r2,0(r2)
    1a8c:	100170fa 	wrctl	ienable,r2
    1a90:	e0bff417 	ldw	r2,-48(fp)
    1a94:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a98:	e0bff117 	ldw	r2,-60(fp)
    1a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1aa0:	0005883a 	mov	r2,zero
    1aa4:	e0bfff15 	stw	r2,-4(fp)
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	e0bffb15 	stw	r2,-20(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
    1ab0:	e0bffb17 	ldw	r2,-20(fp)
}
    1ab4:	e037883a 	mov	sp,fp
    1ab8:	df000017 	ldw	fp,0(sp)
    1abc:	dec00104 	addi	sp,sp,4
    1ac0:	f800283a 	ret

00001ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1ac4:	defffb04 	addi	sp,sp,-20
    1ac8:	dfc00415 	stw	ra,16(sp)
    1acc:	df000315 	stw	fp,12(sp)
    1ad0:	df000304 	addi	fp,sp,12
    1ad4:	e13ffe15 	stw	r4,-8(fp)
    1ad8:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1adc:	e0bffe17 	ldw	r2,-8(fp)
    1ae0:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1ae4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ae8:	e0bffd17 	ldw	r2,-12(fp)
    1aec:	11000017 	ldw	r4,0(r2)
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10c00f17 	ldw	r3,60(r2)
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	10801017 	ldw	r2,64(r2)
    1b00:	1885383a 	mul	r2,r3,r2
    1b04:	2087883a 	add	r3,r4,r2
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10c00115 	stw	r3,4(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1b18:	e0bffd17 	ldw	r2,-12(fp)
    1b1c:	10c00017 	ldw	r3,0(r2)
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	10c00215 	stw	r3,8(r2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1b28:	e0bffd17 	ldw	r2,-12(fp)
    1b2c:	11000017 	ldw	r4,0(r2)
    1b30:	e0bffd17 	ldw	r2,-12(fp)
    1b34:	10800f17 	ldw	r2,60(r2)
    1b38:	10ffffc4 	addi	r3,r2,-1
    1b3c:	e0bffd17 	ldw	r2,-12(fp)
    1b40:	10801017 	ldw	r2,64(r2)
    1b44:	1885383a 	mul	r2,r3,r2
    1b48:	2087883a 	add	r3,r4,r2
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10c00315 	stw	r3,12(r2)
		pxQueue->xRxLock = queueUNLOCKED;
    1b54:	e0fffd17 	ldw	r3,-12(fp)
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	18801115 	stw	r2,68(r3)
		pxQueue->xTxLock = queueUNLOCKED;
    1b60:	e0fffd17 	ldw	r3,-12(fp)
    1b64:	00bfffc4 	movi	r2,-1
    1b68:	18801215 	stw	r2,72(r3)

		if( xNewQueue == pdFALSE )
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
    1b70:	1004c03a 	cmpne	r2,r2,zero
    1b74:	10000b1e 	bne	r2,zero,1ba4 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	10800417 	ldw	r2,16(r2)
    1b80:	1005003a 	cmpeq	r2,r2,zero
    1b84:	10000d1e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1b88:	e0bffd17 	ldw	r2,-12(fp)
    1b8c:	11000404 	addi	r4,r2,16
    1b90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1b94:	10800058 	cmpnei	r2,r2,1
    1b98:	1000081e 	bne	r2,zero,1bbc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1b9c:	003b683a 	trap	0
    1ba0:	00000606 	br	1bbc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1ba4:	e0bffd17 	ldw	r2,-12(fp)
    1ba8:	11000404 	addi	r4,r2,16
    1bac:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	11000904 	addi	r4,r2,36
    1bb8:	00014040 	call	1404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1bbc:	00041680 	call	4168 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1bc0:	00800044 	movi	r2,1
}
    1bc4:	e037883a 	mov	sp,fp
    1bc8:	dfc00117 	ldw	ra,4(sp)
    1bcc:	df000017 	ldw	fp,0(sp)
    1bd0:	dec00204 	addi	sp,sp,8
    1bd4:	f800283a 	ret

00001bd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1bd8:	defff704 	addi	sp,sp,-36
    1bdc:	dfc00815 	stw	ra,32(sp)
    1be0:	df000715 	stw	fp,28(sp)
    1be4:	df000704 	addi	fp,sp,28
    1be8:	e13ffd15 	stw	r4,-12(fp)
    1bec:	e17ffe15 	stw	r5,-8(fp)
    1bf0:	e1bfff05 	stb	r6,-4(fp)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    1bf4:	e03ffa15 	stw	zero,-24(fp)
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    1bf8:	e0bffe17 	ldw	r2,-8(fp)
    1bfc:	1004c03a 	cmpne	r2,r2,zero
    1c00:	1000021e 	bne	r2,zero,1c0c <xQueueGenericCreate+0x34>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
    1c04:	e03ffb15 	stw	zero,-20(fp)
    1c08:	00000506 	br	1c20 <xQueueGenericCreate+0x48>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c0c:	e0fffd17 	ldw	r3,-12(fp)
    1c10:	e0bffe17 	ldw	r2,-8(fp)
    1c14:	1885383a 	mul	r2,r3,r2
    1c18:	10800044 	addi	r2,r2,1
    1c1c:	e0bffb15 	stw	r2,-20(fp)
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1c20:	e0bffb17 	ldw	r2,-20(fp)
    1c24:	11001304 	addi	r4,r2,76
    1c28:	0000fbc0 	call	fbc <pvPortMalloc>
    1c2c:	e0bff915 	stw	r2,-28(fp)

	if( pcAllocatedBuffer != NULL )
    1c30:	e0bff917 	ldw	r2,-28(fp)
    1c34:	1005003a 	cmpeq	r2,r2,zero
    1c38:	1000181e 	bne	r2,zero,1c9c <xQueueGenericCreate+0xc4>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
    1c3c:	e0bff917 	ldw	r2,-28(fp)
    1c40:	e0bffc15 	stw	r2,-16(fp)

		if( uxItemSize == ( UBaseType_t ) 0 )
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	1004c03a 	cmpne	r2,r2,zero
    1c4c:	1000041e 	bne	r2,zero,1c60 <xQueueGenericCreate+0x88>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1c50:	e0fffc17 	ldw	r3,-16(fp)
    1c54:	e0bffc17 	ldw	r2,-16(fp)
    1c58:	10c00015 	stw	r3,0(r2)
    1c5c:	00000406 	br	1c70 <xQueueGenericCreate+0x98>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
    1c60:	e0bff917 	ldw	r2,-28(fp)
    1c64:	10c01304 	addi	r3,r2,76
    1c68:	e0bffc17 	ldw	r2,-16(fp)
    1c6c:	10c00015 	stw	r3,0(r2)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    1c70:	e0fffc17 	ldw	r3,-16(fp)
    1c74:	e0bffd17 	ldw	r2,-12(fp)
    1c78:	18800f15 	stw	r2,60(r3)
		pxNewQueue->uxItemSize = uxItemSize;
    1c7c:	e0fffc17 	ldw	r3,-16(fp)
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	18801015 	stw	r2,64(r3)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1c88:	e13ffc17 	ldw	r4,-16(fp)
    1c8c:	01400044 	movi	r5,1
    1c90:	0001ac40 	call	1ac4 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    1c94:	e0bffc17 	ldw	r2,-16(fp)
    1c98:	e0bffa15 	stw	r2,-24(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    1c9c:	e0bffa17 	ldw	r2,-24(fp)
}
    1ca0:	e037883a 	mov	sp,fp
    1ca4:	dfc00117 	ldw	ra,4(sp)
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00204 	addi	sp,sp,8
    1cb0:	f800283a 	ret

00001cb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1cb4:	defffc04 	addi	sp,sp,-16
    1cb8:	dfc00315 	stw	ra,12(sp)
    1cbc:	df000215 	stw	fp,8(sp)
    1cc0:	df000204 	addi	fp,sp,8
    1cc4:	e13fff05 	stb	r4,-4(fp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1cc8:	01001304 	movi	r4,76
    1ccc:	0000fbc0 	call	fbc <pvPortMalloc>
    1cd0:	e0bffe15 	stw	r2,-8(fp)
		if( pxNewQueue != NULL )
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	1005003a 	cmpeq	r2,r2,zero
    1cdc:	1000201e 	bne	r2,zero,1d60 <xQueueCreateMutex+0xac>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1cf0:	e0bffe17 	ldw	r2,-8(fp)
    1cf4:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1d08:	e0fffe17 	ldw	r3,-8(fp)
    1d0c:	00800044 	movi	r2,1
    1d10:	18800f15 	stw	r2,60(r3)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
    1d1c:	e0fffe17 	ldw	r3,-8(fp)
    1d20:	00bfffc4 	movi	r2,-1
    1d24:	18801115 	stw	r2,68(r3)
			pxNewQueue->xTxLock = queueUNLOCKED;
    1d28:	e0fffe17 	ldw	r3,-8(fp)
    1d2c:	00bfffc4 	movi	r2,-1
    1d30:	18801215 	stw	r2,72(r3)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d34:	e0bffe17 	ldw	r2,-8(fp)
    1d38:	11000404 	addi	r4,r2,16
    1d3c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d40:	e0bffe17 	ldw	r2,-8(fp)
    1d44:	11000904 	addi	r4,r2,36
    1d48:	00014040 	call	1404 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1d4c:	e13ffe17 	ldw	r4,-8(fp)
    1d50:	000b883a 	mov	r5,zero
    1d54:	000d883a 	mov	r6,zero
    1d58:	000f883a 	mov	r7,zero
    1d5c:	0001f100 	call	1f10 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1d60:	e0bffe17 	ldw	r2,-8(fp)
	}
    1d64:	e037883a 	mov	sp,fp
    1d68:	dfc00117 	ldw	ra,4(sp)
    1d6c:	df000017 	ldw	fp,0(sp)
    1d70:	dec00204 	addi	sp,sp,8
    1d74:	f800283a 	ret

00001d78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    1d78:	defffa04 	addi	sp,sp,-24
    1d7c:	dfc00515 	stw	ra,20(sp)
    1d80:	df000415 	stw	fp,16(sp)
    1d84:	dc000315 	stw	r16,12(sp)
    1d88:	df000304 	addi	fp,sp,12
    1d8c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1d90:	e0bfff17 	ldw	r2,-4(fp)
    1d94:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	14000117 	ldw	r16,4(r2)
    1da0:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1da4:	8080111e 	bne	r16,r2,1dec <xQueueGiveMutexRecursive+0x74>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    1da8:	e0bffd17 	ldw	r2,-12(fp)
    1dac:	10800317 	ldw	r2,12(r2)
    1db0:	10ffffc4 	addi	r3,r2,-1
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	10800317 	ldw	r2,12(r2)
    1dc4:	1004c03a 	cmpne	r2,r2,zero
    1dc8:	1000051e 	bne	r2,zero,1de0 <xQueueGiveMutexRecursive+0x68>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1dcc:	e13ffd17 	ldw	r4,-12(fp)
    1dd0:	000b883a 	mov	r5,zero
    1dd4:	000d883a 	mov	r6,zero
    1dd8:	000f883a 	mov	r7,zero
    1ddc:	0001f100 	call	1f10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    1de0:	00800044 	movi	r2,1
    1de4:	e0bffe15 	stw	r2,-8(fp)
    1de8:	00000106 	br	1df0 <xQueueGiveMutexRecursive+0x78>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    1dec:	e03ffe15 	stw	zero,-8(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1df0:	e0bffe17 	ldw	r2,-8(fp)
	}
    1df4:	e037883a 	mov	sp,fp
    1df8:	dfc00217 	ldw	ra,8(sp)
    1dfc:	df000117 	ldw	fp,4(sp)
    1e00:	dc000017 	ldw	r16,0(sp)
    1e04:	dec00304 	addi	sp,sp,12
    1e08:	f800283a 	ret

00001e0c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1e0c:	defff904 	addi	sp,sp,-28
    1e10:	dfc00615 	stw	ra,24(sp)
    1e14:	df000515 	stw	fp,20(sp)
    1e18:	dc000415 	stw	r16,16(sp)
    1e1c:	df000404 	addi	fp,sp,16
    1e20:	e13ffe15 	stw	r4,-8(fp)
    1e24:	e17fff15 	stw	r5,-4(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1e30:	e0bffc17 	ldw	r2,-16(fp)
    1e34:	14000117 	ldw	r16,4(r2)
    1e38:	0003e6c0 	call	3e6c <xTaskGetCurrentTaskHandle>
    1e3c:	8080081e 	bne	r16,r2,1e60 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    1e40:	e0bffc17 	ldw	r2,-16(fp)
    1e44:	10800317 	ldw	r2,12(r2)
    1e48:	10c00044 	addi	r3,r2,1
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
    1e54:	00800044 	movi	r2,1
    1e58:	e0bffd15 	stw	r2,-12(fp)
    1e5c:	00000e06 	br	1e98 <xQueueTakeMutexRecursive+0x8c>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    1e60:	e13ffc17 	ldw	r4,-16(fp)
    1e64:	000b883a 	mov	r5,zero
    1e68:	e1bfff17 	ldw	r6,-4(fp)
    1e6c:	000f883a 	mov	r7,zero
    1e70:	00022800 	call	2280 <xQueueGenericReceive>
    1e74:	e0bffd15 	stw	r2,-12(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	10800058 	cmpnei	r2,r2,1
    1e80:	1000051e 	bne	r2,zero,1e98 <xQueueTakeMutexRecursive+0x8c>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    1e84:	e0bffc17 	ldw	r2,-16(fp)
    1e88:	10800317 	ldw	r2,12(r2)
    1e8c:	10c00044 	addi	r3,r2,1
    1e90:	e0bffc17 	ldw	r2,-16(fp)
    1e94:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1e98:	e0bffd17 	ldw	r2,-12(fp)
	}
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	dfc00217 	ldw	ra,8(sp)
    1ea4:	df000117 	ldw	fp,4(sp)
    1ea8:	dc000017 	ldw	r16,0(sp)
    1eac:	dec00304 	addi	sp,sp,12
    1eb0:	f800283a 	ret

00001eb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    1eb4:	defffb04 	addi	sp,sp,-20
    1eb8:	dfc00415 	stw	ra,16(sp)
    1ebc:	df000315 	stw	fp,12(sp)
    1ec0:	df000304 	addi	fp,sp,12
    1ec4:	e13ffe15 	stw	r4,-8(fp)
    1ec8:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    1ecc:	e13ffe17 	ldw	r4,-8(fp)
    1ed0:	000b883a 	mov	r5,zero
    1ed4:	01800084 	movi	r6,2
    1ed8:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    1edc:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	1005003a 	cmpeq	r2,r2,zero
    1ee8:	1000031e 	bne	r2,zero,1ef8 <xQueueCreateCountingSemaphore+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    1eec:	e0fffd17 	ldw	r3,-12(fp)
    1ef0:	e0bfff17 	ldw	r2,-4(fp)
    1ef4:	18800e15 	stw	r2,56(r3)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
	}
    1efc:	e037883a 	mov	sp,fp
    1f00:	dfc00117 	ldw	ra,4(sp)
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00204 	addi	sp,sp,8
    1f0c:	f800283a 	ret

00001f10 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1f10:	defff404 	addi	sp,sp,-48
    1f14:	dfc00b15 	stw	ra,44(sp)
    1f18:	df000a15 	stw	fp,40(sp)
    1f1c:	df000a04 	addi	fp,sp,40
    1f20:	e13ffb15 	stw	r4,-20(fp)
    1f24:	e17ffc15 	stw	r5,-16(fp)
    1f28:	e1bffd15 	stw	r6,-12(fp)
    1f2c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1f30:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f34:	e0bffb17 	ldw	r2,-20(fp)
    1f38:	e0bff615 	stw	r2,-40(fp)
    1f3c:	00000006 	br	1f40 <xQueueGenericSend+0x30>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f40:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f44:	e0bff617 	ldw	r2,-40(fp)
    1f48:	10c00e17 	ldw	r3,56(r2)
    1f4c:	e0bff617 	ldw	r2,-40(fp)
    1f50:	10800f17 	ldw	r2,60(r2)
    1f54:	18800336 	bltu	r3,r2,1f64 <xQueueGenericSend+0x54>
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	10800098 	cmpnei	r2,r2,2
    1f60:	1000181e 	bne	r2,zero,1fc4 <xQueueGenericSend+0xb4>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f64:	e13ff617 	ldw	r4,-40(fp)
    1f68:	e17ffc17 	ldw	r5,-16(fp)
    1f6c:	e1bffe17 	ldw	r6,-8(fp)
    1f70:	000270c0 	call	270c <prvCopyDataToQueue>
    1f74:	e0bff715 	stw	r2,-36(fp)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f78:	e0bff617 	ldw	r2,-40(fp)
    1f7c:	10800917 	ldw	r2,36(r2)
    1f80:	1005003a 	cmpeq	r2,r2,zero
    1f84:	1000071e 	bne	r2,zero,1fa4 <xQueueGenericSend+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f88:	e0bff617 	ldw	r2,-40(fp)
    1f8c:	11000904 	addi	r4,r2,36
    1f90:	000361c0 	call	361c <xTaskRemoveFromEventList>
    1f94:	10800058 	cmpnei	r2,r2,1
    1f98:	1000061e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f9c:	003b683a 	trap	0
    1fa0:	00000406 	br	1fb4 <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1fa4:	e0bff717 	ldw	r2,-36(fp)
    1fa8:	1005003a 	cmpeq	r2,r2,zero
    1fac:	1000011e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xa4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1fb0:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1fb4:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    1fb8:	00800044 	movi	r2,1
    1fbc:	e0bfff15 	stw	r2,-4(fp)
    1fc0:	00003906 	br	20a8 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	1004c03a 	cmpne	r2,r2,zero
    1fcc:	1000031e 	bne	r2,zero,1fdc <xQueueGenericSend+0xcc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1fd0:	00041680 	call	4168 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1fd4:	e03fff15 	stw	zero,-4(fp)
    1fd8:	00003306 	br	20a8 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
    1fdc:	e0bff817 	ldw	r2,-32(fp)
    1fe0:	1004c03a 	cmpne	r2,r2,zero
    1fe4:	1000041e 	bne	r2,zero,1ff8 <xQueueGenericSend+0xe8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1fe8:	e13ff904 	addi	r4,fp,-28
    1fec:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ff0:	00800044 	movi	r2,1
    1ff4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ff8:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ffc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2000:	00041140 	call	4114 <vTaskEnterCritical>
    2004:	e0bff617 	ldw	r2,-40(fp)
    2008:	10801117 	ldw	r2,68(r2)
    200c:	10bfffd8 	cmpnei	r2,r2,-1
    2010:	1000021e 	bne	r2,zero,201c <xQueueGenericSend+0x10c>
    2014:	e0bff617 	ldw	r2,-40(fp)
    2018:	10001115 	stw	zero,68(r2)
    201c:	e0bff617 	ldw	r2,-40(fp)
    2020:	10801217 	ldw	r2,72(r2)
    2024:	10bfffd8 	cmpnei	r2,r2,-1
    2028:	1000021e 	bne	r2,zero,2034 <xQueueGenericSend+0x124>
    202c:	e0bff617 	ldw	r2,-40(fp)
    2030:	10001215 	stw	zero,72(r2)
    2034:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2038:	e13ff904 	addi	r4,fp,-28
    203c:	e17ffd04 	addi	r5,fp,-12
    2040:	000380c0 	call	380c <xTaskCheckForTimeOut>
    2044:	1004c03a 	cmpne	r2,r2,zero
    2048:	1000131e 	bne	r2,zero,2098 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    204c:	e13ff617 	ldw	r4,-40(fp)
    2050:	0002ac40 	call	2ac4 <prvIsQueueFull>
    2054:	1005003a 	cmpeq	r2,r2,zero
    2058:	10000b1e 	bne	r2,zero,2088 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    205c:	e0bff617 	ldw	r2,-40(fp)
    2060:	11000404 	addi	r4,r2,16
    2064:	e17ffd17 	ldw	r5,-12(fp)
    2068:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    206c:	e13ff617 	ldw	r4,-40(fp)
    2070:	000293c0 	call	293c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2074:	00030180 	call	3018 <xTaskResumeAll>
    2078:	1004c03a 	cmpne	r2,r2,zero
    207c:	103fb01e 	bne	r2,zero,1f40 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
    2080:	003b683a 	trap	0
    2084:	003fae06 	br	1f40 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2088:	e13ff617 	ldw	r4,-40(fp)
    208c:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2090:	00030180 	call	3018 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2094:	003faa06 	br	1f40 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2098:	e13ff617 	ldw	r4,-40(fp)
    209c:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    20a0:	00030180 	call	3018 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    20a4:	e03fff15 	stw	zero,-4(fp)
    20a8:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    20ac:	e037883a 	mov	sp,fp
    20b0:	dfc00117 	ldw	ra,4(sp)
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00204 	addi	sp,sp,8
    20bc:	f800283a 	ret

000020c0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    20c0:	defff704 	addi	sp,sp,-36
    20c4:	dfc00815 	stw	ra,32(sp)
    20c8:	df000715 	stw	fp,28(sp)
    20cc:	df000704 	addi	fp,sp,28
    20d0:	e13ffc15 	stw	r4,-16(fp)
    20d4:	e17ffd15 	stw	r5,-12(fp)
    20d8:	e1bffe15 	stw	r6,-8(fp)
    20dc:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    20e0:	e0bffc17 	ldw	r2,-16(fp)
    20e4:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20e8:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20ec:	e0bff917 	ldw	r2,-28(fp)
    20f0:	10c00e17 	ldw	r3,56(r2)
    20f4:	e0bff917 	ldw	r2,-28(fp)
    20f8:	10800f17 	ldw	r2,60(r2)
    20fc:	18800336 	bltu	r3,r2,210c <xQueueGenericSendFromISR+0x4c>
    2100:	e0bfff17 	ldw	r2,-4(fp)
    2104:	10800098 	cmpnei	r2,r2,2
    2108:	1000201e 	bne	r2,zero,218c <xQueueGenericSendFromISR+0xcc>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    210c:	e13ff917 	ldw	r4,-28(fp)
    2110:	e17ffd17 	ldw	r5,-12(fp)
    2114:	e1bfff17 	ldw	r6,-4(fp)
    2118:	000270c0 	call	270c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    211c:	e0bff917 	ldw	r2,-28(fp)
    2120:	10801217 	ldw	r2,72(r2)
    2124:	10bfffd8 	cmpnei	r2,r2,-1
    2128:	1000101e 	bne	r2,zero,216c <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    212c:	e0bff917 	ldw	r2,-28(fp)
    2130:	10800917 	ldw	r2,36(r2)
    2134:	1005003a 	cmpeq	r2,r2,zero
    2138:	1000111e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    213c:	e0bff917 	ldw	r2,-28(fp)
    2140:	11000904 	addi	r4,r2,36
    2144:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2148:	1005003a 	cmpeq	r2,r2,zero
    214c:	10000c1e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2150:	e0bffe17 	ldw	r2,-8(fp)
    2154:	1005003a 	cmpeq	r2,r2,zero
    2158:	1000091e 	bne	r2,zero,2180 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    215c:	e0fffe17 	ldw	r3,-8(fp)
    2160:	00800044 	movi	r2,1
    2164:	18800015 	stw	r2,0(r3)
    2168:	00000506 	br	2180 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    216c:	e0bff917 	ldw	r2,-28(fp)
    2170:	10801217 	ldw	r2,72(r2)
    2174:	10c00044 	addi	r3,r2,1
    2178:	e0bff917 	ldw	r2,-28(fp)
    217c:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2180:	00800044 	movi	r2,1
    2184:	e0bffb15 	stw	r2,-20(fp)
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2188:	00000106 	br	2190 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    218c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2190:	e0bffb17 	ldw	r2,-20(fp)
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    21a8:	defff904 	addi	sp,sp,-28
    21ac:	dfc00615 	stw	ra,24(sp)
    21b0:	df000515 	stw	fp,20(sp)
    21b4:	df000504 	addi	fp,sp,20
    21b8:	e13ffe15 	stw	r4,-8(fp)
    21bc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    21c0:	e0bffe17 	ldw	r2,-8(fp)
    21c4:	e0bffb15 	stw	r2,-20(fp)
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21c8:	e03ffc15 	stw	zero,-16(fp)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    21cc:	e0bffb17 	ldw	r2,-20(fp)
    21d0:	10c00e17 	ldw	r3,56(r2)
    21d4:	e0bffb17 	ldw	r2,-20(fp)
    21d8:	10800f17 	ldw	r2,60(r2)
    21dc:	1880212e 	bgeu	r3,r2,2264 <xQueueGiveFromISR+0xbc>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
    21e0:	e0bffb17 	ldw	r2,-20(fp)
    21e4:	10800e17 	ldw	r2,56(r2)
    21e8:	10c00044 	addi	r3,r2,1
    21ec:	e0bffb17 	ldw	r2,-20(fp)
    21f0:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    21f4:	e0bffb17 	ldw	r2,-20(fp)
    21f8:	10801217 	ldw	r2,72(r2)
    21fc:	10bfffd8 	cmpnei	r2,r2,-1
    2200:	1000101e 	bne	r2,zero,2244 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2204:	e0bffb17 	ldw	r2,-20(fp)
    2208:	10800917 	ldw	r2,36(r2)
    220c:	1005003a 	cmpeq	r2,r2,zero
    2210:	1000111e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2214:	e0bffb17 	ldw	r2,-20(fp)
    2218:	11000904 	addi	r4,r2,36
    221c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2220:	1005003a 	cmpeq	r2,r2,zero
    2224:	10000c1e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2228:	e0bfff17 	ldw	r2,-4(fp)
    222c:	1005003a 	cmpeq	r2,r2,zero
    2230:	1000091e 	bne	r2,zero,2258 <xQueueGiveFromISR+0xb0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2234:	e0ffff17 	ldw	r3,-4(fp)
    2238:	00800044 	movi	r2,1
    223c:	18800015 	stw	r2,0(r3)
    2240:	00000506 	br	2258 <xQueueGiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2244:	e0bffb17 	ldw	r2,-20(fp)
    2248:	10801217 	ldw	r2,72(r2)
    224c:	10c00044 	addi	r3,r2,1
    2250:	e0bffb17 	ldw	r2,-20(fp)
    2254:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2258:	00800044 	movi	r2,1
    225c:	e0bffd15 	stw	r2,-12(fp)
    2260:	00000106 	br	2268 <xQueueGiveFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2264:	e03ffd15 	stw	zero,-12(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2268:	e0bffd17 	ldw	r2,-12(fp)
}
    226c:	e037883a 	mov	sp,fp
    2270:	dfc00117 	ldw	ra,4(sp)
    2274:	df000017 	ldw	fp,0(sp)
    2278:	dec00204 	addi	sp,sp,8
    227c:	f800283a 	ret

00002280 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2280:	defff404 	addi	sp,sp,-48
    2284:	dfc00b15 	stw	ra,44(sp)
    2288:	df000a15 	stw	fp,40(sp)
    228c:	df000a04 	addi	fp,sp,40
    2290:	e13ffb15 	stw	r4,-20(fp)
    2294:	e17ffc15 	stw	r5,-16(fp)
    2298:	e1bffd15 	stw	r6,-12(fp)
    229c:	e1fffe15 	stw	r7,-8(fp)
BaseType_t xEntryTimeSet = pdFALSE;
    22a0:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    22a4:	e0bffb17 	ldw	r2,-20(fp)
    22a8:	e0bff615 	stw	r2,-40(fp)
    22ac:	00000006 	br	22b0 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    22b0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    22b4:	e0bff617 	ldw	r2,-40(fp)
    22b8:	10800e17 	ldw	r2,56(r2)
    22bc:	1005003a 	cmpeq	r2,r2,zero
    22c0:	1000321e 	bne	r2,zero,238c <xQueueGenericReceive+0x10c>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    22c4:	e0bff617 	ldw	r2,-40(fp)
    22c8:	10800317 	ldw	r2,12(r2)
    22cc:	e0bff715 	stw	r2,-36(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    22d0:	e13ff617 	ldw	r4,-40(fp)
    22d4:	e17ffc17 	ldw	r5,-16(fp)
    22d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	1004c03a 	cmpne	r2,r2,zero
    22e4:	1000181e 	bne	r2,zero,2348 <xQueueGenericReceive+0xc8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    22e8:	e0bff617 	ldw	r2,-40(fp)
    22ec:	10800e17 	ldw	r2,56(r2)
    22f0:	10ffffc4 	addi	r3,r2,-1
    22f4:	e0bff617 	ldw	r2,-40(fp)
    22f8:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    22fc:	e0bff617 	ldw	r2,-40(fp)
    2300:	10800017 	ldw	r2,0(r2)
    2304:	1004c03a 	cmpne	r2,r2,zero
    2308:	1000041e 	bne	r2,zero,231c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    230c:	00042140 	call	4214 <pvTaskIncrementMutexHeldCount>
    2310:	1007883a 	mov	r3,r2
    2314:	e0bff617 	ldw	r2,-40(fp)
    2318:	10c00115 	stw	r3,4(r2)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    231c:	e0bff617 	ldw	r2,-40(fp)
    2320:	10800417 	ldw	r2,16(r2)
    2324:	1005003a 	cmpeq	r2,r2,zero
    2328:	1000141e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    232c:	e0bff617 	ldw	r2,-40(fp)
    2330:	11000404 	addi	r4,r2,16
    2334:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2338:	10800058 	cmpnei	r2,r2,1
    233c:	10000f1e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2340:	003b683a 	trap	0
    2344:	00000d06 	br	237c <xQueueGenericReceive+0xfc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2348:	e0fff617 	ldw	r3,-40(fp)
    234c:	e0bff717 	ldw	r2,-36(fp)
    2350:	18800315 	stw	r2,12(r3)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2354:	e0bff617 	ldw	r2,-40(fp)
    2358:	10800917 	ldw	r2,36(r2)
    235c:	1005003a 	cmpeq	r2,r2,zero
    2360:	1000061e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2364:	e0bff617 	ldw	r2,-40(fp)
    2368:	11000904 	addi	r4,r2,36
    236c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2370:	1005003a 	cmpeq	r2,r2,zero
    2374:	1000011e 	bne	r2,zero,237c <xQueueGenericReceive+0xfc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2378:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    237c:	00041680 	call	4168 <vTaskExitCritical>
				return pdPASS;
    2380:	00800044 	movi	r2,1
    2384:	e0bfff15 	stw	r2,-4(fp)
    2388:	00004206 	br	2494 <xQueueGenericReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    238c:	e0bffd17 	ldw	r2,-12(fp)
    2390:	1004c03a 	cmpne	r2,r2,zero
    2394:	1000031e 	bne	r2,zero,23a4 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2398:	00041680 	call	4168 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    239c:	e03fff15 	stw	zero,-4(fp)
    23a0:	00003c06 	br	2494 <xQueueGenericReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
    23a4:	e0bff817 	ldw	r2,-32(fp)
    23a8:	1004c03a 	cmpne	r2,r2,zero
    23ac:	1000041e 	bne	r2,zero,23c0 <xQueueGenericReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23b0:	e13ff904 	addi	r4,fp,-28
    23b4:	00037d40 	call	37d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    23b8:	00800044 	movi	r2,1
    23bc:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    23c0:	00041680 	call	4168 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    23c4:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    23c8:	00041140 	call	4114 <vTaskEnterCritical>
    23cc:	e0bff617 	ldw	r2,-40(fp)
    23d0:	10801117 	ldw	r2,68(r2)
    23d4:	10bfffd8 	cmpnei	r2,r2,-1
    23d8:	1000021e 	bne	r2,zero,23e4 <xQueueGenericReceive+0x164>
    23dc:	e0bff617 	ldw	r2,-40(fp)
    23e0:	10001115 	stw	zero,68(r2)
    23e4:	e0bff617 	ldw	r2,-40(fp)
    23e8:	10801217 	ldw	r2,72(r2)
    23ec:	10bfffd8 	cmpnei	r2,r2,-1
    23f0:	1000021e 	bne	r2,zero,23fc <xQueueGenericReceive+0x17c>
    23f4:	e0bff617 	ldw	r2,-40(fp)
    23f8:	10001215 	stw	zero,72(r2)
    23fc:	00041680 	call	4168 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2400:	e13ff904 	addi	r4,fp,-28
    2404:	e17ffd04 	addi	r5,fp,-12
    2408:	000380c0 	call	380c <xTaskCheckForTimeOut>
    240c:	1004c03a 	cmpne	r2,r2,zero
    2410:	10001c1e 	bne	r2,zero,2484 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2414:	e13ff617 	ldw	r4,-40(fp)
    2418:	0002a2c0 	call	2a2c <prvIsQueueEmpty>
    241c:	1005003a 	cmpeq	r2,r2,zero
    2420:	1000141e 	bne	r2,zero,2474 <xQueueGenericReceive+0x1f4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2424:	e0bff617 	ldw	r2,-40(fp)
    2428:	10800017 	ldw	r2,0(r2)
    242c:	1004c03a 	cmpne	r2,r2,zero
    2430:	1000051e 	bne	r2,zero,2448 <xQueueGenericReceive+0x1c8>
					{
						taskENTER_CRITICAL();
    2434:	00041140 	call	4114 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2438:	e0bff617 	ldw	r2,-40(fp)
    243c:	11000117 	ldw	r4,4(r2)
    2440:	0003ee80 	call	3ee8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2444:	00041680 	call	4168 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2448:	e0bff617 	ldw	r2,-40(fp)
    244c:	11000904 	addi	r4,r2,36
    2450:	e17ffd17 	ldw	r5,-12(fp)
    2454:	00034e80 	call	34e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2458:	e13ff617 	ldw	r4,-40(fp)
    245c:	000293c0 	call	293c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2460:	00030180 	call	3018 <xTaskResumeAll>
    2464:	1004c03a 	cmpne	r2,r2,zero
    2468:	103f911e 	bne	r2,zero,22b0 <xQueueGenericReceive+0x30>
				{
					portYIELD_WITHIN_API();
    246c:	003b683a 	trap	0
    2470:	003f8f06 	br	22b0 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2474:	e13ff617 	ldw	r4,-40(fp)
    2478:	000293c0 	call	293c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    247c:	00030180 	call	3018 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2480:	003f8b06 	br	22b0 <xQueueGenericReceive+0x30>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2484:	e13ff617 	ldw	r4,-40(fp)
    2488:	000293c0 	call	293c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    248c:	00030180 	call	3018 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2490:	e03fff15 	stw	zero,-4(fp)
    2494:	e0bfff17 	ldw	r2,-4(fp)
		}
	}
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    24ac:	defff804 	addi	sp,sp,-32
    24b0:	dfc00715 	stw	ra,28(sp)
    24b4:	df000615 	stw	fp,24(sp)
    24b8:	df000604 	addi	fp,sp,24
    24bc:	e13ffd15 	stw	r4,-12(fp)
    24c0:	e17ffe15 	stw	r5,-8(fp)
    24c4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24d0:	e03ffb15 	stw	zero,-20(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    24d4:	e0bffa17 	ldw	r2,-24(fp)
    24d8:	10800e17 	ldw	r2,56(r2)
    24dc:	1005003a 	cmpeq	r2,r2,zero
    24e0:	1000241e 	bne	r2,zero,2574 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24e4:	e13ffa17 	ldw	r4,-24(fp)
    24e8:	e17ffe17 	ldw	r5,-8(fp)
    24ec:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    24f0:	e0bffa17 	ldw	r2,-24(fp)
    24f4:	10800e17 	ldw	r2,56(r2)
    24f8:	10ffffc4 	addi	r3,r2,-1
    24fc:	e0bffa17 	ldw	r2,-24(fp)
    2500:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2504:	e0bffa17 	ldw	r2,-24(fp)
    2508:	10801117 	ldw	r2,68(r2)
    250c:	10bfffd8 	cmpnei	r2,r2,-1
    2510:	1000101e 	bne	r2,zero,2554 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2514:	e0bffa17 	ldw	r2,-24(fp)
    2518:	10800417 	ldw	r2,16(r2)
    251c:	1005003a 	cmpeq	r2,r2,zero
    2520:	1000111e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2524:	e0bffa17 	ldw	r2,-24(fp)
    2528:	11000404 	addi	r4,r2,16
    252c:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2530:	1005003a 	cmpeq	r2,r2,zero
    2534:	10000c1e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2538:	e0bfff17 	ldw	r2,-4(fp)
    253c:	1005003a 	cmpeq	r2,r2,zero
    2540:	1000091e 	bne	r2,zero,2568 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2544:	e0ffff17 	ldw	r3,-4(fp)
    2548:	00800044 	movi	r2,1
    254c:	18800015 	stw	r2,0(r3)
    2550:	00000506 	br	2568 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	10801117 	ldw	r2,68(r2)
    255c:	10c00044 	addi	r3,r2,1
    2560:	e0bffa17 	ldw	r2,-24(fp)
    2564:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
    2568:	00800044 	movi	r2,1
    256c:	e0bffc15 	stw	r2,-16(fp)
    2570:	00000106 	br	2578 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
    2574:	e03ffc15 	stw	zero,-16(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2578:	e0bffc17 	ldw	r2,-16(fp)
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2590:	defff804 	addi	sp,sp,-32
    2594:	dfc00715 	stw	ra,28(sp)
    2598:	df000615 	stw	fp,24(sp)
    259c:	df000604 	addi	fp,sp,24
    25a0:	e13ffe15 	stw	r4,-8(fp)
    25a4:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    25b0:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    25b4:	e0bffa17 	ldw	r2,-24(fp)
    25b8:	10800e17 	ldw	r2,56(r2)
    25bc:	1005003a 	cmpeq	r2,r2,zero
    25c0:	10000c1e 	bne	r2,zero,25f4 <xQueuePeekFromISR+0x64>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    25c4:	e0bffa17 	ldw	r2,-24(fp)
    25c8:	10800317 	ldw	r2,12(r2)
    25cc:	e0bffb15 	stw	r2,-20(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    25d0:	e13ffa17 	ldw	r4,-24(fp)
    25d4:	e17fff17 	ldw	r5,-4(fp)
    25d8:	00028a00 	call	28a0 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    25dc:	e0fffa17 	ldw	r3,-24(fp)
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	18800315 	stw	r2,12(r3)

			xReturn = pdPASS;
    25e8:	00800044 	movi	r2,1
    25ec:	e0bffd15 	stw	r2,-12(fp)
    25f0:	00000106 	br	25f8 <xQueuePeekFromISR+0x68>
		}
		else
		{
			xReturn = pdFAIL;
    25f4:	e03ffd15 	stw	zero,-12(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    25f8:	e0bffd17 	ldw	r2,-12(fp)
}
    25fc:	e037883a 	mov	sp,fp
    2600:	dfc00117 	ldw	ra,4(sp)
    2604:	df000017 	ldw	fp,0(sp)
    2608:	dec00204 	addi	sp,sp,8
    260c:	f800283a 	ret

00002610 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2610:	defffc04 	addi	sp,sp,-16
    2614:	dfc00315 	stw	ra,12(sp)
    2618:	df000215 	stw	fp,8(sp)
    261c:	df000204 	addi	fp,sp,8
    2620:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2624:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2628:	e0bfff17 	ldw	r2,-4(fp)
    262c:	10800e17 	ldw	r2,56(r2)
    2630:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2634:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    2638:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    263c:	e037883a 	mov	sp,fp
    2640:	dfc00117 	ldw	ra,4(sp)
    2644:	df000017 	ldw	fp,0(sp)
    2648:	dec00204 	addi	sp,sp,8
    264c:	f800283a 	ret

00002650 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2650:	defffb04 	addi	sp,sp,-20
    2654:	dfc00415 	stw	ra,16(sp)
    2658:	df000315 	stw	fp,12(sp)
    265c:	df000304 	addi	fp,sp,12
    2660:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2664:	e0bfff17 	ldw	r2,-4(fp)
    2668:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    266c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	10c00f17 	ldw	r3,60(r2)
    2678:	e0bffd17 	ldw	r2,-12(fp)
    267c:	10800e17 	ldw	r2,56(r2)
    2680:	1885c83a 	sub	r2,r3,r2
    2684:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2688:	00041680 	call	4168 <vTaskExitCritical>

	return uxReturn;
    268c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2690:	e037883a 	mov	sp,fp
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret

000026a4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    26a4:	defffd04 	addi	sp,sp,-12
    26a8:	df000215 	stw	fp,8(sp)
    26ac:	df000204 	addi	fp,sp,8
    26b0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    26b4:	e0bfff17 	ldw	r2,-4(fp)
    26b8:	10800e17 	ldw	r2,56(r2)
    26bc:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
    26c0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    26c4:	e037883a 	mov	sp,fp
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    26d4:	defffc04 	addi	sp,sp,-16
    26d8:	dfc00315 	stw	ra,12(sp)
    26dc:	df000215 	stw	fp,8(sp)
    26e0:	df000204 	addi	fp,sp,8
    26e4:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26e8:	e0bfff17 	ldw	r2,-4(fp)
    26ec:	e0bffe15 	stw	r2,-8(fp)
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    26f0:	e13ffe17 	ldw	r4,-8(fp)
    26f4:	00011500 	call	1150 <vPortFree>
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    270c:	defffa04 	addi	sp,sp,-24
    2710:	dfc00515 	stw	ra,20(sp)
    2714:	df000415 	stw	fp,16(sp)
    2718:	df000404 	addi	fp,sp,16
    271c:	e13ffd15 	stw	r4,-12(fp)
    2720:	e17ffe15 	stw	r5,-8(fp)
    2724:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
    2728:	e03ffc15 	stw	zero,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	10801017 	ldw	r2,64(r2)
    2734:	1004c03a 	cmpne	r2,r2,zero
    2738:	10000b1e 	bne	r2,zero,2768 <prvCopyDataToQueue+0x5c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    273c:	e0bffd17 	ldw	r2,-12(fp)
    2740:	10800017 	ldw	r2,0(r2)
    2744:	1004c03a 	cmpne	r2,r2,zero
    2748:	10004a1e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	11000117 	ldw	r4,4(r2)
    2754:	00040180 	call	4018 <xTaskPriorityDisinherit>
    2758:	e0bffc15 	stw	r2,-16(fp)
				pxQueue->pxMutexHolder = NULL;
    275c:	e0bffd17 	ldw	r2,-12(fp)
    2760:	10000115 	stw	zero,4(r2)
    2764:	00004306 	br	2874 <prvCopyDataToQueue+0x168>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2768:	e0bfff17 	ldw	r2,-4(fp)
    276c:	1004c03a 	cmpne	r2,r2,zero
    2770:	1000191e 	bne	r2,zero,27d8 <prvCopyDataToQueue+0xcc>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00217 	ldw	r3,8(r2)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	11801017 	ldw	r6,64(r2)
    2784:	e0bffe17 	ldw	r2,-8(fp)
    2788:	1809883a 	mov	r4,r3
    278c:	100b883a 	mov	r5,r2
    2790:	00083140 	call	8314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2794:	e0bffd17 	ldw	r2,-12(fp)
    2798:	10c00217 	ldw	r3,8(r2)
    279c:	e0bffd17 	ldw	r2,-12(fp)
    27a0:	10801017 	ldw	r2,64(r2)
    27a4:	1887883a 	add	r3,r3,r2
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10c00217 	ldw	r3,8(r2)
    27b8:	e0bffd17 	ldw	r2,-12(fp)
    27bc:	10800117 	ldw	r2,4(r2)
    27c0:	18802c36 	bltu	r3,r2,2874 <prvCopyDataToQueue+0x168>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    27c4:	e0bffd17 	ldw	r2,-12(fp)
    27c8:	10c00017 	ldw	r3,0(r2)
    27cc:	e0bffd17 	ldw	r2,-12(fp)
    27d0:	10c00215 	stw	r3,8(r2)
    27d4:	00002706 	br	2874 <prvCopyDataToQueue+0x168>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	10c00317 	ldw	r3,12(r2)
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	11801017 	ldw	r6,64(r2)
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1809883a 	mov	r4,r3
    27f0:	100b883a 	mov	r5,r2
    27f4:	00083140 	call	8314 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    27f8:	e0bffd17 	ldw	r2,-12(fp)
    27fc:	10c00317 	ldw	r3,12(r2)
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10801017 	ldw	r2,64(r2)
    2808:	1887c83a 	sub	r3,r3,r2
    280c:	e0bffd17 	ldw	r2,-12(fp)
    2810:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2814:	e0bffd17 	ldw	r2,-12(fp)
    2818:	10c00317 	ldw	r3,12(r2)
    281c:	e0bffd17 	ldw	r2,-12(fp)
    2820:	10800017 	ldw	r2,0(r2)
    2824:	1880072e 	bgeu	r3,r2,2844 <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	10c00117 	ldw	r3,4(r2)
    2830:	e0bffd17 	ldw	r2,-12(fp)
    2834:	10801017 	ldw	r2,64(r2)
    2838:	1887c83a 	sub	r3,r3,r2
    283c:	e0bffd17 	ldw	r2,-12(fp)
    2840:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	10800098 	cmpnei	r2,r2,2
    284c:	1000091e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	10800e17 	ldw	r2,56(r2)
    2858:	1005003a 	cmpeq	r2,r2,zero
    285c:	1000051e 	bne	r2,zero,2874 <prvCopyDataToQueue+0x168>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2860:	e0bffd17 	ldw	r2,-12(fp)
    2864:	10800e17 	ldw	r2,56(r2)
    2868:	10ffffc4 	addi	r3,r2,-1
    286c:	e0bffd17 	ldw	r2,-12(fp)
    2870:	10c00e15 	stw	r3,56(r2)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	10800e17 	ldw	r2,56(r2)
    287c:	10c00044 	addi	r3,r2,1
    2880:	e0bffd17 	ldw	r2,-12(fp)
    2884:	10c00e15 	stw	r3,56(r2)

	return xReturn;
    2888:	e0bffc17 	ldw	r2,-16(fp)
}
    288c:	e037883a 	mov	sp,fp
    2890:	dfc00117 	ldw	ra,4(sp)
    2894:	df000017 	ldw	fp,0(sp)
    2898:	dec00204 	addi	sp,sp,8
    289c:	f800283a 	ret

000028a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    28a0:	defffc04 	addi	sp,sp,-16
    28a4:	dfc00315 	stw	ra,12(sp)
    28a8:	df000215 	stw	fp,8(sp)
    28ac:	df000204 	addi	fp,sp,8
    28b0:	e13ffe15 	stw	r4,-8(fp)
    28b4:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    28b8:	e0bffe17 	ldw	r2,-8(fp)
    28bc:	10801017 	ldw	r2,64(r2)
    28c0:	1005003a 	cmpeq	r2,r2,zero
    28c4:	1000181e 	bne	r2,zero,2928 <prvCopyDataFromQueue+0x88>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    28c8:	e0bffe17 	ldw	r2,-8(fp)
    28cc:	10c00317 	ldw	r3,12(r2)
    28d0:	e0bffe17 	ldw	r2,-8(fp)
    28d4:	10801017 	ldw	r2,64(r2)
    28d8:	1887883a 	add	r3,r3,r2
    28dc:	e0bffe17 	ldw	r2,-8(fp)
    28e0:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	10c00317 	ldw	r3,12(r2)
    28ec:	e0bffe17 	ldw	r2,-8(fp)
    28f0:	10800117 	ldw	r2,4(r2)
    28f4:	18800436 	bltu	r3,r2,2908 <prvCopyDataFromQueue+0x68>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	10c00017 	ldw	r3,0(r2)
    2900:	e0bffe17 	ldw	r2,-8(fp)
    2904:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2908:	e0bffe17 	ldw	r2,-8(fp)
    290c:	10c00317 	ldw	r3,12(r2)
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	11801017 	ldw	r6,64(r2)
    2918:	e0bfff17 	ldw	r2,-4(fp)
    291c:	1009883a 	mov	r4,r2
    2920:	180b883a 	mov	r5,r3
    2924:	00083140 	call	8314 <memcpy>
	}
}
    2928:	e037883a 	mov	sp,fp
    292c:	dfc00117 	ldw	ra,4(sp)
    2930:	df000017 	ldw	fp,0(sp)
    2934:	dec00204 	addi	sp,sp,8
    2938:	f800283a 	ret

0000293c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    293c:	defffd04 	addi	sp,sp,-12
    2940:	dfc00215 	stw	ra,8(sp)
    2944:	df000115 	stw	fp,4(sp)
    2948:	df000104 	addi	fp,sp,4
    294c:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2950:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2954:	00000f06 	br	2994 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2958:	e0bfff17 	ldw	r2,-4(fp)
    295c:	10800917 	ldw	r2,36(r2)
    2960:	1005003a 	cmpeq	r2,r2,zero
    2964:	10000f1e 	bne	r2,zero,29a4 <prvUnlockQueue+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2968:	e0bfff17 	ldw	r2,-4(fp)
    296c:	11000904 	addi	r4,r2,36
    2970:	000361c0 	call	361c <xTaskRemoveFromEventList>
    2974:	1005003a 	cmpeq	r2,r2,zero
    2978:	1000011e 	bne	r2,zero,2980 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    297c:	00038d00 	call	38d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	10801217 	ldw	r2,72(r2)
    2988:	10ffffc4 	addi	r3,r2,-1
    298c:	e0bfff17 	ldw	r2,-4(fp)
    2990:	10c01215 	stw	r3,72(r2)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2994:	e0bfff17 	ldw	r2,-4(fp)
    2998:	10801217 	ldw	r2,72(r2)
    299c:	10800048 	cmpgei	r2,r2,1
    29a0:	103fed1e 	bne	r2,zero,2958 <prvUnlockQueue+0x1c>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    29a4:	e0ffff17 	ldw	r3,-4(fp)
    29a8:	00bfffc4 	movi	r2,-1
    29ac:	18801215 	stw	r2,72(r3)
	}
	taskEXIT_CRITICAL();
    29b0:	00041680 	call	4168 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    29b4:	00041140 	call	4114 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29b8:	00000f06 	br	29f8 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    29bc:	e0bfff17 	ldw	r2,-4(fp)
    29c0:	10800417 	ldw	r2,16(r2)
    29c4:	1005003a 	cmpeq	r2,r2,zero
    29c8:	10000f1e 	bne	r2,zero,2a08 <prvUnlockQueue+0xcc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	11000404 	addi	r4,r2,16
    29d4:	000361c0 	call	361c <xTaskRemoveFromEventList>
    29d8:	1005003a 	cmpeq	r2,r2,zero
    29dc:	1000011e 	bne	r2,zero,29e4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    29e0:	00038d00 	call	38d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	10801117 	ldw	r2,68(r2)
    29ec:	10ffffc4 	addi	r3,r2,-1
    29f0:	e0bfff17 	ldw	r2,-4(fp)
    29f4:	10c01115 	stw	r3,68(r2)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	10801117 	ldw	r2,68(r2)
    2a00:	10800048 	cmpgei	r2,r2,1
    2a04:	103fed1e 	bne	r2,zero,29bc <prvUnlockQueue+0x80>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2a08:	e0ffff17 	ldw	r3,-4(fp)
    2a0c:	00bfffc4 	movi	r2,-1
    2a10:	18801115 	stw	r2,68(r3)
	}
	taskEXIT_CRITICAL();
    2a14:	00041680 	call	4168 <vTaskExitCritical>
}
    2a18:	e037883a 	mov	sp,fp
    2a1c:	dfc00117 	ldw	ra,4(sp)
    2a20:	df000017 	ldw	fp,0(sp)
    2a24:	dec00204 	addi	sp,sp,8
    2a28:	f800283a 	ret

00002a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2a2c:	defffc04 	addi	sp,sp,-16
    2a30:	dfc00315 	stw	ra,12(sp)
    2a34:	df000215 	stw	fp,8(sp)
    2a38:	df000204 	addi	fp,sp,8
    2a3c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a40:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2a44:	e0bfff17 	ldw	r2,-4(fp)
    2a48:	10800e17 	ldw	r2,56(r2)
    2a4c:	1004c03a 	cmpne	r2,r2,zero
    2a50:	1000031e 	bne	r2,zero,2a60 <prvIsQueueEmpty+0x34>
		{
			xReturn = pdTRUE;
    2a54:	00800044 	movi	r2,1
    2a58:	e0bffe15 	stw	r2,-8(fp)
    2a5c:	00000106 	br	2a64 <prvIsQueueEmpty+0x38>
		}
		else
		{
			xReturn = pdFALSE;
    2a60:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2a64:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2a68:	e0bffe17 	ldw	r2,-8(fp)
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	dfc00117 	ldw	ra,4(sp)
    2a74:	df000017 	ldw	fp,0(sp)
    2a78:	dec00204 	addi	sp,sp,8
    2a7c:	f800283a 	ret

00002a80 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2a80:	defffd04 	addi	sp,sp,-12
    2a84:	df000215 	stw	fp,8(sp)
    2a88:	df000204 	addi	fp,sp,8
    2a8c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2a90:	e0bfff17 	ldw	r2,-4(fp)
    2a94:	10800e17 	ldw	r2,56(r2)
    2a98:	1004c03a 	cmpne	r2,r2,zero
    2a9c:	1000031e 	bne	r2,zero,2aac <xQueueIsQueueEmptyFromISR+0x2c>
	{
		xReturn = pdTRUE;
    2aa0:	00800044 	movi	r2,1
    2aa4:	e0bffe15 	stw	r2,-8(fp)
    2aa8:	00000106 	br	2ab0 <xQueueIsQueueEmptyFromISR+0x30>
	}
	else
	{
		xReturn = pdFALSE;
    2aac:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2ab0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ab4:	e037883a 	mov	sp,fp
    2ab8:	df000017 	ldw	fp,0(sp)
    2abc:	dec00104 	addi	sp,sp,4
    2ac0:	f800283a 	ret

00002ac4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2ac4:	defffc04 	addi	sp,sp,-16
    2ac8:	dfc00315 	stw	ra,12(sp)
    2acc:	df000215 	stw	fp,8(sp)
    2ad0:	df000204 	addi	fp,sp,8
    2ad4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ad8:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2adc:	e0bfff17 	ldw	r2,-4(fp)
    2ae0:	10c00e17 	ldw	r3,56(r2)
    2ae4:	e0bfff17 	ldw	r2,-4(fp)
    2ae8:	10800f17 	ldw	r2,60(r2)
    2aec:	1880031e 	bne	r3,r2,2afc <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
    2af0:	00800044 	movi	r2,1
    2af4:	e0bffe15 	stw	r2,-8(fp)
    2af8:	00000106 	br	2b00 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
    2afc:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2b00:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    2b04:	e0bffe17 	ldw	r2,-8(fp)
}
    2b08:	e037883a 	mov	sp,fp
    2b0c:	dfc00117 	ldw	ra,4(sp)
    2b10:	df000017 	ldw	fp,0(sp)
    2b14:	dec00204 	addi	sp,sp,8
    2b18:	f800283a 	ret

00002b1c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2b1c:	defffd04 	addi	sp,sp,-12
    2b20:	df000215 	stw	fp,8(sp)
    2b24:	df000204 	addi	fp,sp,8
    2b28:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2b2c:	e0bfff17 	ldw	r2,-4(fp)
    2b30:	10c00e17 	ldw	r3,56(r2)
    2b34:	e0bfff17 	ldw	r2,-4(fp)
    2b38:	10800f17 	ldw	r2,60(r2)
    2b3c:	1880031e 	bne	r3,r2,2b4c <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2b40:	00800044 	movi	r2,1
    2b44:	e0bffe15 	stw	r2,-8(fp)
    2b48:	00000106 	br	2b50 <xQueueIsQueueFullFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
    2b4c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2b50:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2b54:	e037883a 	mov	sp,fp
    2b58:	df000017 	ldw	fp,0(sp)
    2b5c:	dec00104 	addi	sp,sp,4
    2b60:	f800283a 	ret

00002b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2b64:	defffb04 	addi	sp,sp,-20
    2b68:	dfc00415 	stw	ra,16(sp)
    2b6c:	df000315 	stw	fp,12(sp)
    2b70:	df000304 	addi	fp,sp,12
    2b74:	e13ffe15 	stw	r4,-8(fp)
    2b78:	e17fff15 	stw	r5,-4(fp)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b7c:	e0bffe17 	ldw	r2,-8(fp)
    2b80:	e0bffd15 	stw	r2,-12(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2b84:	00041140 	call	4114 <vTaskEnterCritical>
    2b88:	e0bffd17 	ldw	r2,-12(fp)
    2b8c:	10801117 	ldw	r2,68(r2)
    2b90:	10bfffd8 	cmpnei	r2,r2,-1
    2b94:	1000021e 	bne	r2,zero,2ba0 <vQueueWaitForMessageRestricted+0x3c>
    2b98:	e0bffd17 	ldw	r2,-12(fp)
    2b9c:	10001115 	stw	zero,68(r2)
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10801217 	ldw	r2,72(r2)
    2ba8:	10bfffd8 	cmpnei	r2,r2,-1
    2bac:	1000021e 	bne	r2,zero,2bb8 <vQueueWaitForMessageRestricted+0x54>
    2bb0:	e0bffd17 	ldw	r2,-12(fp)
    2bb4:	10001215 	stw	zero,72(r2)
    2bb8:	00041680 	call	4168 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2bbc:	e0bffd17 	ldw	r2,-12(fp)
    2bc0:	10800e17 	ldw	r2,56(r2)
    2bc4:	1004c03a 	cmpne	r2,r2,zero
    2bc8:	1000041e 	bne	r2,zero,2bdc <vQueueWaitForMessageRestricted+0x78>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2bcc:	e0bffd17 	ldw	r2,-12(fp)
    2bd0:	11000904 	addi	r4,r2,36
    2bd4:	e17fff17 	ldw	r5,-4(fp)
    2bd8:	00035bc0 	call	35bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2bdc:	e13ffd17 	ldw	r4,-12(fp)
    2be0:	000293c0 	call	293c <prvUnlockQueue>
	}
    2be4:	e037883a 	mov	sp,fp
    2be8:	dfc00117 	ldw	ra,4(sp)
    2bec:	df000017 	ldw	fp,0(sp)
    2bf0:	dec00204 	addi	sp,sp,8
    2bf4:	f800283a 	ret

00002bf8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2bf8:	defff604 	addi	sp,sp,-40
    2bfc:	dfc00915 	stw	ra,36(sp)
    2c00:	df000815 	stw	fp,32(sp)
    2c04:	df000804 	addi	fp,sp,32
    2c08:	e13ffc15 	stw	r4,-16(fp)
    2c0c:	e17ffd15 	stw	r5,-12(fp)
    2c10:	e1ffff15 	stw	r7,-4(fp)
    2c14:	e1bffe0d 	sth	r6,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2c18:	e13ffe0b 	ldhu	r4,-8(fp)
    2c1c:	e1400417 	ldw	r5,16(fp)
    2c20:	0003c100 	call	3c10 <prvAllocateTCBAndStack>
    2c24:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
    2c28:	e0bffa17 	ldw	r2,-24(fp)
    2c2c:	1005003a 	cmpeq	r2,r2,zero
    2c30:	1000501e 	bne	r2,zero,2d74 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2c34:	e0bffa17 	ldw	r2,-24(fp)
    2c38:	10c00c17 	ldw	r3,48(r2)
    2c3c:	e0bffe0b 	ldhu	r2,-8(fp)
    2c40:	1085883a 	add	r2,r2,r2
    2c44:	1085883a 	add	r2,r2,r2
    2c48:	1885883a 	add	r2,r3,r2
    2c4c:	10bfff04 	addi	r2,r2,-4
    2c50:	e0bff915 	stw	r2,-28(fp)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2c54:	e0bff917 	ldw	r2,-28(fp)
    2c58:	1007883a 	mov	r3,r2
    2c5c:	00bfff04 	movi	r2,-4
    2c60:	1884703a 	and	r2,r3,r2
    2c64:	e0bff915 	stw	r2,-28(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2c68:	e0bffe0b 	ldhu	r2,-8(fp)
    2c6c:	d8800015 	stw	r2,0(sp)
    2c70:	e13ffa17 	ldw	r4,-24(fp)
    2c74:	e17ffd17 	ldw	r5,-12(fp)
    2c78:	e1800217 	ldw	r6,8(fp)
    2c7c:	e1c00517 	ldw	r7,20(fp)
    2c80:	00039100 	call	3910 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c84:	e13ff917 	ldw	r4,-28(fp)
    2c88:	e17ffc17 	ldw	r5,-16(fp)
    2c8c:	e1bfff17 	ldw	r6,-4(fp)
    2c90:	00016f40 	call	16f4 <pxPortInitialiseStack>
    2c94:	1007883a 	mov	r3,r2
    2c98:	e0bffa17 	ldw	r2,-24(fp)
    2c9c:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2ca0:	e0800317 	ldw	r2,12(fp)
    2ca4:	1005003a 	cmpeq	r2,r2,zero
    2ca8:	1000031e 	bne	r2,zero,2cb8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2cac:	e0c00317 	ldw	r3,12(fp)
    2cb0:	e0bffa17 	ldw	r2,-24(fp)
    2cb4:	18800015 	stw	r2,0(r3)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2cb8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    2cbc:	d0a02c17 	ldw	r2,-32592(gp)
    2cc0:	10800044 	addi	r2,r2,1
    2cc4:	d0a02c15 	stw	r2,-32592(gp)
			if( pxCurrentTCB == NULL )
    2cc8:	d0a02a17 	ldw	r2,-32600(gp)
    2ccc:	1004c03a 	cmpne	r2,r2,zero
    2cd0:	1000071e 	bne	r2,zero,2cf0 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2cd4:	e0bffa17 	ldw	r2,-24(fp)
    2cd8:	d0a02a15 	stw	r2,-32600(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2cdc:	d0a02c17 	ldw	r2,-32592(gp)
    2ce0:	10800058 	cmpnei	r2,r2,1
    2ce4:	10000b1e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2ce8:	0003a4c0 	call	3a4c <prvInitialiseTaskLists>
    2cec:	00000906 	br	2d14 <xTaskGenericCreate+0x11c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2cf0:	d0a02f17 	ldw	r2,-32580(gp)
    2cf4:	1004c03a 	cmpne	r2,r2,zero
    2cf8:	1000061e 	bne	r2,zero,2d14 <xTaskGenericCreate+0x11c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2cfc:	d0a02a17 	ldw	r2,-32600(gp)
    2d00:	10c00b17 	ldw	r3,44(r2)
    2d04:	e0800217 	ldw	r2,8(fp)
    2d08:	10c00236 	bltu	r2,r3,2d14 <xTaskGenericCreate+0x11c>
					{
						pxCurrentTCB = pxNewTCB;
    2d0c:	e0bffa17 	ldw	r2,-24(fp)
    2d10:	d0a02a15 	stw	r2,-32600(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2d14:	d0a03317 	ldw	r2,-32564(gp)
    2d18:	10800044 	addi	r2,r2,1
    2d1c:	d0a03315 	stw	r2,-32564(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2d20:	e0bffa17 	ldw	r2,-24(fp)
    2d24:	10c00b17 	ldw	r3,44(r2)
    2d28:	d0a02e17 	ldw	r2,-32584(gp)
    2d2c:	10c0032e 	bgeu	r2,r3,2d3c <xTaskGenericCreate+0x144>
    2d30:	e0bffa17 	ldw	r2,-24(fp)
    2d34:	10800b17 	ldw	r2,44(r2)
    2d38:	d0a02e15 	stw	r2,-32584(gp)
    2d3c:	e0bffa17 	ldw	r2,-24(fp)
    2d40:	10800b17 	ldw	r2,44(r2)
    2d44:	10800524 	muli	r2,r2,20
    2d48:	1007883a 	mov	r3,r2
    2d4c:	00820234 	movhi	r2,2056
    2d50:	10bea704 	addi	r2,r2,-1380
    2d54:	1889883a 	add	r4,r3,r2
    2d58:	e0bffa17 	ldw	r2,-24(fp)
    2d5c:	11400104 	addi	r5,r2,4
    2d60:	000149c0 	call	149c <vListInsertEnd>

			xReturn = pdPASS;
    2d64:	00800044 	movi	r2,1
    2d68:	e0bffb15 	stw	r2,-20(fp)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2d6c:	00041680 	call	4168 <vTaskExitCritical>
    2d70:	00000206 	br	2d7c <xTaskGenericCreate+0x184>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2d74:	00bfffc4 	movi	r2,-1
    2d78:	e0bffb15 	stw	r2,-20(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	10800058 	cmpnei	r2,r2,1
    2d84:	1000081e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
	{
		if( xSchedulerRunning != pdFALSE )
    2d88:	d0a02f17 	ldw	r2,-32580(gp)
    2d8c:	1005003a 	cmpeq	r2,r2,zero
    2d90:	1000051e 	bne	r2,zero,2da8 <xTaskGenericCreate+0x1b0>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2d94:	d0a02a17 	ldw	r2,-32600(gp)
    2d98:	10c00b17 	ldw	r3,44(r2)
    2d9c:	e0800217 	ldw	r2,8(fp)
    2da0:	1880012e 	bgeu	r3,r2,2da8 <xTaskGenericCreate+0x1b0>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2da4:	003b683a 	trap	0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2da8:	e0bffb17 	ldw	r2,-20(fp)
}
    2dac:	e037883a 	mov	sp,fp
    2db0:	dfc00117 	ldw	ra,4(sp)
    2db4:	df000017 	ldw	fp,0(sp)
    2db8:	dec00204 	addi	sp,sp,8
    2dbc:	f800283a 	ret

00002dc0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2dc0:	defffb04 	addi	sp,sp,-20
    2dc4:	dfc00415 	stw	ra,16(sp)
    2dc8:	df000315 	stw	fp,12(sp)
    2dcc:	df000304 	addi	fp,sp,12
    2dd0:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2dd4:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2dd8:	e0bffe17 	ldw	r2,-8(fp)
    2ddc:	1004c03a 	cmpne	r2,r2,zero
    2de0:	1000031e 	bne	r2,zero,2df0 <vTaskDelete+0x30>
    2de4:	d0a02a17 	ldw	r2,-32600(gp)
    2de8:	e0bfff15 	stw	r2,-4(fp)
    2dec:	00000206 	br	2df8 <vTaskDelete+0x38>
    2df0:	e0bffe17 	ldw	r2,-8(fp)
    2df4:	e0bfff15 	stw	r2,-4(fp)
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	e0bffd15 	stw	r2,-12(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	11000104 	addi	r4,r2,4
    2e08:	00015f80 	call	15f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2e0c:	e0bffd17 	ldw	r2,-12(fp)
    2e10:	10800a17 	ldw	r2,40(r2)
    2e14:	1005003a 	cmpeq	r2,r2,zero
    2e18:	1000031e 	bne	r2,zero,2e28 <vTaskDelete+0x68>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	11000604 	addi	r4,r2,24
    2e24:	00015f80 	call	15f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2e28:	e0bffd17 	ldw	r2,-12(fp)
    2e2c:	11400104 	addi	r5,r2,4
    2e30:	01020234 	movhi	r4,2056
    2e34:	213ef204 	addi	r4,r4,-1080
    2e38:	000149c0 	call	149c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2e3c:	d0a02b17 	ldw	r2,-32596(gp)
    2e40:	10800044 	addi	r2,r2,1
    2e44:	d0a02b15 	stw	r2,-32596(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2e48:	d0a03317 	ldw	r2,-32564(gp)
    2e4c:	10800044 	addi	r2,r2,1
    2e50:	d0a03315 	stw	r2,-32564(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2e54:	00041680 	call	4168 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2e58:	d0a02f17 	ldw	r2,-32580(gp)
    2e5c:	1005003a 	cmpeq	r2,r2,zero
    2e60:	1000081e 	bne	r2,zero,2e84 <vTaskDelete+0xc4>
		{
			if( pxTCB == pxCurrentTCB )
    2e64:	d0e02a17 	ldw	r3,-32600(gp)
    2e68:	e0bffd17 	ldw	r2,-12(fp)
    2e6c:	10c0021e 	bne	r2,r3,2e78 <vTaskDelete+0xb8>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    2e70:	003b683a 	trap	0
    2e74:	00000306 	br	2e84 <vTaskDelete+0xc4>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    2e78:	00041140 	call	4114 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2e7c:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    2e80:	00041680 	call	4168 <vTaskExitCritical>
			}
		}
	}
    2e84:	e037883a 	mov	sp,fp
    2e88:	dfc00117 	ldw	ra,4(sp)
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00204 	addi	sp,sp,8
    2e94:	f800283a 	ret

00002e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2e98:	defffb04 	addi	sp,sp,-20
    2e9c:	dfc00415 	stw	ra,16(sp)
    2ea0:	df000315 	stw	fp,12(sp)
    2ea4:	df000304 	addi	fp,sp,12
    2ea8:	e13fff15 	stw	r4,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2eac:	e03ffd15 	stw	zero,-12(fp)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2eb0:	e0bfff17 	ldw	r2,-4(fp)
    2eb4:	1005003a 	cmpeq	r2,r2,zero
    2eb8:	10000c1e 	bne	r2,zero,2eec <vTaskDelay+0x54>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2ebc:	0002ff00 	call	2ff0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2ec0:	d0e02d17 	ldw	r3,-32588(gp)
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	1885883a 	add	r2,r3,r2
    2ecc:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2ed0:	d0a02a17 	ldw	r2,-32600(gp)
    2ed4:	11000104 	addi	r4,r2,4
    2ed8:	00015f80 	call	15f8 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2edc:	e13ffe17 	ldw	r4,-8(fp)
    2ee0:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2ee4:	00030180 	call	3018 <xTaskResumeAll>
    2ee8:	e0bffd15 	stw	r2,-12(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2eec:	e0bffd17 	ldw	r2,-12(fp)
    2ef0:	1004c03a 	cmpne	r2,r2,zero
    2ef4:	1000011e 	bne	r2,zero,2efc <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
    2ef8:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2efc:	e037883a 	mov	sp,fp
    2f00:	dfc00117 	ldw	ra,4(sp)
    2f04:	df000017 	ldw	fp,0(sp)
    2f08:	dec00204 	addi	sp,sp,8
    2f0c:	f800283a 	ret

00002f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2f10:	defff804 	addi	sp,sp,-32
    2f14:	dfc00715 	stw	ra,28(sp)
    2f18:	df000615 	stw	fp,24(sp)
    2f1c:	df000604 	addi	fp,sp,24
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2f20:	d8000015 	stw	zero,0(sp)
    2f24:	d8000115 	stw	zero,4(sp)
    2f28:	d8000215 	stw	zero,8(sp)
    2f2c:	d8000315 	stw	zero,12(sp)
    2f30:	01000034 	movhi	r4,0
    2f34:	210e3d04 	addi	r4,r4,14580
    2f38:	01420034 	movhi	r5,2048
    2f3c:	29400d04 	addi	r5,r5,52
    2f40:	01900004 	movi	r6,16384
    2f44:	000f883a 	mov	r7,zero
    2f48:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    2f4c:	e0bfff15 	stw	r2,-4(fp)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2f50:	e0bfff17 	ldw	r2,-4(fp)
    2f54:	10800058 	cmpnei	r2,r2,1
    2f58:	1000021e 	bne	r2,zero,2f64 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
    2f5c:	000488c0 	call	488c <xTimerCreateTimerTask>
    2f60:	e0bfff15 	stw	r2,-4(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2f64:	e0bfff17 	ldw	r2,-4(fp)
    2f68:	10800058 	cmpnei	r2,r2,1
    2f6c:	10000a1e 	bne	r2,zero,2f98 <vTaskStartScheduler+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f70:	0005303a 	rdctl	r2,status
    2f74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f78:	e0fffe17 	ldw	r3,-8(fp)
    2f7c:	00bfff84 	movi	r2,-2
    2f80:	1884703a 	and	r2,r3,r2
    2f84:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2f88:	00800044 	movi	r2,1
    2f8c:	d0a02f15 	stw	r2,-32580(gp)
		xTickCount = ( TickType_t ) 0U;
    2f90:	d0202d15 	stw	zero,-32588(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f94:	00017dc0 	call	17dc <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    2f98:	e037883a 	mov	sp,fp
    2f9c:	dfc00117 	ldw	ra,4(sp)
    2fa0:	df000017 	ldw	fp,0(sp)
    2fa4:	dec00204 	addi	sp,sp,8
    2fa8:	f800283a 	ret

00002fac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2fac:	defffd04 	addi	sp,sp,-12
    2fb0:	dfc00215 	stw	ra,8(sp)
    2fb4:	df000115 	stw	fp,4(sp)
    2fb8:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2fbc:	0005303a 	rdctl	r2,status
    2fc0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fc4:	e0ffff17 	ldw	r3,-4(fp)
    2fc8:	00bfff84 	movi	r2,-2
    2fcc:	1884703a 	and	r2,r3,r2
    2fd0:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    2fd4:	d0202f15 	stw	zero,-32580(gp)
	vPortEndScheduler();
    2fd8:	00018140 	call	1814 <vPortEndScheduler>
}
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	dfc00117 	ldw	ra,4(sp)
    2fe4:	df000017 	ldw	fp,0(sp)
    2fe8:	dec00204 	addi	sp,sp,8
    2fec:	f800283a 	ret

00002ff0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2ff0:	deffff04 	addi	sp,sp,-4
    2ff4:	df000015 	stw	fp,0(sp)
    2ff8:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2ffc:	d0a03417 	ldw	r2,-32560(gp)
    3000:	10800044 	addi	r2,r2,1
    3004:	d0a03415 	stw	r2,-32560(gp)
}
    3008:	e037883a 	mov	sp,fp
    300c:	df000017 	ldw	fp,0(sp)
    3010:	dec00104 	addi	sp,sp,4
    3014:	f800283a 	ret

00003018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3018:	defffc04 	addi	sp,sp,-16
    301c:	dfc00315 	stw	ra,12(sp)
    3020:	df000215 	stw	fp,8(sp)
    3024:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3028:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    302c:	00041140 	call	4114 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    3030:	d0a03417 	ldw	r2,-32560(gp)
    3034:	10bfffc4 	addi	r2,r2,-1
    3038:	d0a03415 	stw	r2,-32560(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    303c:	d0a03417 	ldw	r2,-32560(gp)
    3040:	1004c03a 	cmpne	r2,r2,zero
    3044:	1000411e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3048:	d0a02c17 	ldw	r2,-32592(gp)
    304c:	1005003a 	cmpeq	r2,r2,zero
    3050:	10003e1e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3054:	00002306 	br	30e4 <xTaskResumeAll+0xcc>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3058:	00820234 	movhi	r2,2056
    305c:	10beed04 	addi	r2,r2,-1100
    3060:	10800317 	ldw	r2,12(r2)
    3064:	10800317 	ldw	r2,12(r2)
    3068:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    306c:	e0bfff17 	ldw	r2,-4(fp)
    3070:	11000604 	addi	r4,r2,24
    3074:	00015f80 	call	15f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3078:	e0bfff17 	ldw	r2,-4(fp)
    307c:	11000104 	addi	r4,r2,4
    3080:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3084:	e0bfff17 	ldw	r2,-4(fp)
    3088:	10c00b17 	ldw	r3,44(r2)
    308c:	d0a02e17 	ldw	r2,-32584(gp)
    3090:	10c0032e 	bgeu	r2,r3,30a0 <xTaskResumeAll+0x88>
    3094:	e0bfff17 	ldw	r2,-4(fp)
    3098:	10800b17 	ldw	r2,44(r2)
    309c:	d0a02e15 	stw	r2,-32584(gp)
    30a0:	e0bfff17 	ldw	r2,-4(fp)
    30a4:	10800b17 	ldw	r2,44(r2)
    30a8:	10800524 	muli	r2,r2,20
    30ac:	1007883a 	mov	r3,r2
    30b0:	00820234 	movhi	r2,2056
    30b4:	10bea704 	addi	r2,r2,-1380
    30b8:	1889883a 	add	r4,r3,r2
    30bc:	e0bfff17 	ldw	r2,-4(fp)
    30c0:	11400104 	addi	r5,r2,4
    30c4:	000149c0 	call	149c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	10c00b17 	ldw	r3,44(r2)
    30d0:	d0a02a17 	ldw	r2,-32600(gp)
    30d4:	10800b17 	ldw	r2,44(r2)
    30d8:	18800236 	bltu	r3,r2,30e4 <xTaskResumeAll+0xcc>
					{
						xYieldPending = pdTRUE;
    30dc:	00800044 	movi	r2,1
    30e0:	d0a03115 	stw	r2,-32572(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    30e4:	00820234 	movhi	r2,2056
    30e8:	10beed04 	addi	r2,r2,-1100
    30ec:	10800017 	ldw	r2,0(r2)
    30f0:	1004c03a 	cmpne	r2,r2,zero
    30f4:	103fd81e 	bne	r2,zero,3058 <xTaskResumeAll+0x40>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    30f8:	d0a03017 	ldw	r2,-32576(gp)
    30fc:	1005003a 	cmpeq	r2,r2,zero
    3100:	10000c1e 	bne	r2,zero,3134 <xTaskResumeAll+0x11c>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3104:	00000806 	br	3128 <xTaskResumeAll+0x110>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3108:	00031dc0 	call	31dc <xTaskIncrementTick>
    310c:	1005003a 	cmpeq	r2,r2,zero
    3110:	1000021e 	bne	r2,zero,311c <xTaskResumeAll+0x104>
						{
							xYieldPending = pdTRUE;
    3114:	00800044 	movi	r2,1
    3118:	d0a03115 	stw	r2,-32572(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    311c:	d0a03017 	ldw	r2,-32576(gp)
    3120:	10bfffc4 	addi	r2,r2,-1
    3124:	d0a03015 	stw	r2,-32576(gp)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3128:	d0a03017 	ldw	r2,-32576(gp)
    312c:	1004c03a 	cmpne	r2,r2,zero
    3130:	103ff51e 	bne	r2,zero,3108 <xTaskResumeAll+0xf0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3134:	d0a03117 	ldw	r2,-32572(gp)
    3138:	10800058 	cmpnei	r2,r2,1
    313c:	1000031e 	bne	r2,zero,314c <xTaskResumeAll+0x134>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3140:	00800044 	movi	r2,1
    3144:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3148:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    314c:	00041680 	call	4168 <vTaskExitCritical>

	return xAlreadyYielded;
    3150:	e0bffe17 	ldw	r2,-8(fp)
}
    3154:	e037883a 	mov	sp,fp
    3158:	dfc00117 	ldw	ra,4(sp)
    315c:	df000017 	ldw	fp,0(sp)
    3160:	dec00204 	addi	sp,sp,8
    3164:	f800283a 	ret

00003168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3168:	defffe04 	addi	sp,sp,-8
    316c:	df000115 	stw	fp,4(sp)
    3170:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    3174:	d0a02d17 	ldw	r2,-32588(gp)
    3178:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    317c:	e0bfff17 	ldw	r2,-4(fp)
}
    3180:	e037883a 	mov	sp,fp
    3184:	df000017 	ldw	fp,0(sp)
    3188:	dec00104 	addi	sp,sp,4
    318c:	f800283a 	ret

00003190 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3190:	defffd04 	addi	sp,sp,-12
    3194:	df000215 	stw	fp,8(sp)
    3198:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    319c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
    31a0:	d0a02d17 	ldw	r2,-32588(gp)
    31a4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31a8:	e0bfff17 	ldw	r2,-4(fp)
}
    31ac:	e037883a 	mov	sp,fp
    31b0:	df000017 	ldw	fp,0(sp)
    31b4:	dec00104 	addi	sp,sp,4
    31b8:	f800283a 	ret

000031bc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    31bc:	deffff04 	addi	sp,sp,-4
    31c0:	df000015 	stw	fp,0(sp)
    31c4:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    31c8:	d0a02c17 	ldw	r2,-32592(gp)
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00104 	addi	sp,sp,4
    31d8:	f800283a 	ret

000031dc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    31dc:	defff804 	addi	sp,sp,-32
    31e0:	dfc00715 	stw	ra,28(sp)
    31e4:	df000615 	stw	fp,24(sp)
    31e8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    31ec:	e03ffc15 	stw	zero,-16(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    31f0:	d0a03417 	ldw	r2,-32560(gp)
    31f4:	1004c03a 	cmpne	r2,r2,zero
    31f8:	1000611e 	bne	r2,zero,3380 <xTaskIncrementTick+0x1a4>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    31fc:	d0a02d17 	ldw	r2,-32588(gp)
    3200:	10800044 	addi	r2,r2,1
    3204:	d0a02d15 	stw	r2,-32588(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3208:	d0a02d17 	ldw	r2,-32588(gp)
    320c:	e0bffb15 	stw	r2,-20(fp)

			if( xConstTickCount == ( TickType_t ) 0U )
    3210:	e0bffb17 	ldw	r2,-20(fp)
    3214:	1004c03a 	cmpne	r2,r2,zero
    3218:	10000a1e 	bne	r2,zero,3244 <xTaskIncrementTick+0x68>
			{
				taskSWITCH_DELAYED_LISTS();
    321c:	d0a03517 	ldw	r2,-32556(gp)
    3220:	e0bffa15 	stw	r2,-24(fp)
    3224:	d0a03617 	ldw	r2,-32552(gp)
    3228:	d0a03515 	stw	r2,-32556(gp)
    322c:	e0bffa17 	ldw	r2,-24(fp)
    3230:	d0a03615 	stw	r2,-32552(gp)
    3234:	d0a03217 	ldw	r2,-32568(gp)
    3238:	10800044 	addi	r2,r2,1
    323c:	d0a03215 	stw	r2,-32568(gp)
    3240:	0003dfc0 	call	3dfc <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3244:	d0e00317 	ldw	r3,-32756(gp)
    3248:	e0bffb17 	ldw	r2,-20(fp)
    324c:	10c03f36 	bltu	r2,r3,334c <xTaskIncrementTick+0x170>
    3250:	00000006 	br	3254 <xTaskIncrementTick+0x78>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3254:	d0a03517 	ldw	r2,-32556(gp)
    3258:	10800017 	ldw	r2,0(r2)
    325c:	1004c03a 	cmpne	r2,r2,zero
    3260:	1000031e 	bne	r2,zero,3270 <xTaskIncrementTick+0x94>
    3264:	00800044 	movi	r2,1
    3268:	e0bfff05 	stb	r2,-4(fp)
    326c:	00000106 	br	3274 <xTaskIncrementTick+0x98>
    3270:	e03fff05 	stb	zero,-4(fp)
    3274:	e0bfff03 	ldbu	r2,-4(fp)
    3278:	1005003a 	cmpeq	r2,r2,zero
    327c:	1000031e 	bne	r2,zero,328c <xTaskIncrementTick+0xb0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3280:	00bfffc4 	movi	r2,-1
    3284:	d0a00315 	stw	r2,-32756(gp)
						break;
    3288:	00003006 	br	334c <xTaskIncrementTick+0x170>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    328c:	d0a03517 	ldw	r2,-32556(gp)
    3290:	10800317 	ldw	r2,12(r2)
    3294:	10800317 	ldw	r2,12(r2)
    3298:	e0bffe15 	stw	r2,-8(fp)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    329c:	e0bffe17 	ldw	r2,-8(fp)
    32a0:	10800117 	ldw	r2,4(r2)
    32a4:	e0bffd15 	stw	r2,-12(fp)

						if( xConstTickCount < xItemValue )
    32a8:	e0fffb17 	ldw	r3,-20(fp)
    32ac:	e0bffd17 	ldw	r2,-12(fp)
    32b0:	1880032e 	bgeu	r3,r2,32c0 <xTaskIncrementTick+0xe4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	d0a00315 	stw	r2,-32756(gp)
							break;
    32bc:	00002306 	br	334c <xTaskIncrementTick+0x170>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    32c0:	e0bffe17 	ldw	r2,-8(fp)
    32c4:	11000104 	addi	r4,r2,4
    32c8:	00015f80 	call	15f8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	10800a17 	ldw	r2,40(r2)
    32d4:	1005003a 	cmpeq	r2,r2,zero
    32d8:	1000031e 	bne	r2,zero,32e8 <xTaskIncrementTick+0x10c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	11000604 	addi	r4,r2,24
    32e4:	00015f80 	call	15f8 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    32e8:	e0bffe17 	ldw	r2,-8(fp)
    32ec:	10c00b17 	ldw	r3,44(r2)
    32f0:	d0a02e17 	ldw	r2,-32584(gp)
    32f4:	10c0032e 	bgeu	r2,r3,3304 <xTaskIncrementTick+0x128>
    32f8:	e0bffe17 	ldw	r2,-8(fp)
    32fc:	10800b17 	ldw	r2,44(r2)
    3300:	d0a02e15 	stw	r2,-32584(gp)
    3304:	e0bffe17 	ldw	r2,-8(fp)
    3308:	10800b17 	ldw	r2,44(r2)
    330c:	10800524 	muli	r2,r2,20
    3310:	1007883a 	mov	r3,r2
    3314:	00820234 	movhi	r2,2056
    3318:	10bea704 	addi	r2,r2,-1380
    331c:	1889883a 	add	r4,r3,r2
    3320:	e0bffe17 	ldw	r2,-8(fp)
    3324:	11400104 	addi	r5,r2,4
    3328:	000149c0 	call	149c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    332c:	e0bffe17 	ldw	r2,-8(fp)
    3330:	10c00b17 	ldw	r3,44(r2)
    3334:	d0a02a17 	ldw	r2,-32600(gp)
    3338:	10800b17 	ldw	r2,44(r2)
    333c:	18bfc536 	bltu	r3,r2,3254 <xTaskIncrementTick+0x78>
							{
								xSwitchRequired = pdTRUE;
    3340:	00800044 	movi	r2,1
    3344:	e0bffc15 	stw	r2,-16(fp)
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    3348:	003fc206 	br	3254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    334c:	d0a02a17 	ldw	r2,-32600(gp)
    3350:	10800b17 	ldw	r2,44(r2)
    3354:	10800524 	muli	r2,r2,20
    3358:	1007883a 	mov	r3,r2
    335c:	00820234 	movhi	r2,2056
    3360:	10bea704 	addi	r2,r2,-1380
    3364:	1885883a 	add	r2,r3,r2
    3368:	10800017 	ldw	r2,0(r2)
    336c:	108000b0 	cmpltui	r2,r2,2
    3370:	1000061e 	bne	r2,zero,338c <xTaskIncrementTick+0x1b0>
			{
				xSwitchRequired = pdTRUE;
    3374:	00800044 	movi	r2,1
    3378:	e0bffc15 	stw	r2,-16(fp)
    337c:	00000306 	br	338c <xTaskIncrementTick+0x1b0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3380:	d0a03017 	ldw	r2,-32576(gp)
    3384:	10800044 	addi	r2,r2,1
    3388:	d0a03015 	stw	r2,-32576(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    338c:	d0a03117 	ldw	r2,-32572(gp)
    3390:	1005003a 	cmpeq	r2,r2,zero
    3394:	1000021e 	bne	r2,zero,33a0 <xTaskIncrementTick+0x1c4>
		{
			xSwitchRequired = pdTRUE;
    3398:	00800044 	movi	r2,1
    339c:	e0bffc15 	stw	r2,-16(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    33a0:	e0bffc17 	ldw	r2,-16(fp)
}
    33a4:	e037883a 	mov	sp,fp
    33a8:	dfc00117 	ldw	ra,4(sp)
    33ac:	df000017 	ldw	fp,0(sp)
    33b0:	dec00204 	addi	sp,sp,8
    33b4:	f800283a 	ret

000033b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    33b8:	defffd04 	addi	sp,sp,-12
    33bc:	dfc00215 	stw	ra,8(sp)
    33c0:	df000115 	stw	fp,4(sp)
    33c4:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    33c8:	d0a03417 	ldw	r2,-32560(gp)
    33cc:	1005003a 	cmpeq	r2,r2,zero
    33d0:	1000031e 	bne	r2,zero,33e0 <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    33d4:	00800044 	movi	r2,1
    33d8:	d0a03115 	stw	r2,-32572(gp)
    33dc:	00003d06 	br	34d4 <vTaskSwitchContext+0x11c>
	}
	else
	{
		xYieldPending = pdFALSE;
    33e0:	d0203115 	stw	zero,-32572(gp)
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    33e4:	d0a02a17 	ldw	r2,-32600(gp)
    33e8:	10c00017 	ldw	r3,0(r2)
    33ec:	d0a02a17 	ldw	r2,-32600(gp)
    33f0:	10800c17 	ldw	r2,48(r2)
    33f4:	10c00436 	bltu	r2,r3,3408 <vTaskSwitchContext+0x50>
    33f8:	d1202a17 	ldw	r4,-32600(gp)
    33fc:	d0a02a17 	ldw	r2,-32600(gp)
    3400:	11400d04 	addi	r5,r2,52
    3404:	00016900 	call	1690 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    3408:	d0a02a17 	ldw	r2,-32600(gp)
    340c:	11000c17 	ldw	r4,48(r2)
    3410:	01420034 	movhi	r5,2048
    3414:	29400e44 	addi	r5,r5,57
    3418:	01800504 	movi	r6,20
    341c:	00082a00 	call	82a0 <memcmp>
    3420:	1005003a 	cmpeq	r2,r2,zero
    3424:	1000081e 	bne	r2,zero,3448 <vTaskSwitchContext+0x90>
    3428:	d1202a17 	ldw	r4,-32600(gp)
    342c:	d0a02a17 	ldw	r2,-32600(gp)
    3430:	11400d04 	addi	r5,r2,52
    3434:	00016900 	call	1690 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3438:	00000306 	br	3448 <vTaskSwitchContext+0x90>
    343c:	d0a02e17 	ldw	r2,-32584(gp)
    3440:	10bfffc4 	addi	r2,r2,-1
    3444:	d0a02e15 	stw	r2,-32584(gp)
    3448:	d0a02e17 	ldw	r2,-32584(gp)
    344c:	10800524 	muli	r2,r2,20
    3450:	1007883a 	mov	r3,r2
    3454:	00820234 	movhi	r2,2056
    3458:	10bea704 	addi	r2,r2,-1380
    345c:	1885883a 	add	r2,r3,r2
    3460:	10800017 	ldw	r2,0(r2)
    3464:	1005003a 	cmpeq	r2,r2,zero
    3468:	103ff41e 	bne	r2,zero,343c <vTaskSwitchContext+0x84>
    346c:	d0a02e17 	ldw	r2,-32584(gp)
    3470:	10800524 	muli	r2,r2,20
    3474:	1007883a 	mov	r3,r2
    3478:	00820234 	movhi	r2,2056
    347c:	10bea704 	addi	r2,r2,-1380
    3480:	1885883a 	add	r2,r3,r2
    3484:	e0bfff15 	stw	r2,-4(fp)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	10800117 	ldw	r2,4(r2)
    3490:	10c00117 	ldw	r3,4(r2)
    3494:	e0bfff17 	ldw	r2,-4(fp)
    3498:	10c00115 	stw	r3,4(r2)
    349c:	e0bfff17 	ldw	r2,-4(fp)
    34a0:	10c00117 	ldw	r3,4(r2)
    34a4:	e0bfff17 	ldw	r2,-4(fp)
    34a8:	10800204 	addi	r2,r2,8
    34ac:	1880051e 	bne	r3,r2,34c4 <vTaskSwitchContext+0x10c>
    34b0:	e0bfff17 	ldw	r2,-4(fp)
    34b4:	10800117 	ldw	r2,4(r2)
    34b8:	10c00117 	ldw	r3,4(r2)
    34bc:	e0bfff17 	ldw	r2,-4(fp)
    34c0:	10c00115 	stw	r3,4(r2)
    34c4:	e0bfff17 	ldw	r2,-4(fp)
    34c8:	10800117 	ldw	r2,4(r2)
    34cc:	10800317 	ldw	r2,12(r2)
    34d0:	d0a02a15 	stw	r2,-32600(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    34d4:	e037883a 	mov	sp,fp
    34d8:	dfc00117 	ldw	ra,4(sp)
    34dc:	df000017 	ldw	fp,0(sp)
    34e0:	dec00204 	addi	sp,sp,8
    34e4:	f800283a 	ret

000034e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    34e8:	defffb04 	addi	sp,sp,-20
    34ec:	dfc00415 	stw	ra,16(sp)
    34f0:	df000315 	stw	fp,12(sp)
    34f4:	df000304 	addi	fp,sp,12
    34f8:	e13ffe15 	stw	r4,-8(fp)
    34fc:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3500:	d0a02a17 	ldw	r2,-32600(gp)
    3504:	11400604 	addi	r5,r2,24
    3508:	e13ffe17 	ldw	r4,-8(fp)
    350c:	00015240 	call	1524 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3510:	d0a02a17 	ldw	r2,-32600(gp)
    3514:	11000104 	addi	r4,r2,4
    3518:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    351c:	d0e02d17 	ldw	r3,-32588(gp)
    3520:	e0bfff17 	ldw	r2,-4(fp)
    3524:	1885883a 	add	r2,r3,r2
    3528:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    352c:	e13ffd17 	ldw	r4,-12(fp)
    3530:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3534:	e037883a 	mov	sp,fp
    3538:	dfc00117 	ldw	ra,4(sp)
    353c:	df000017 	ldw	fp,0(sp)
    3540:	dec00204 	addi	sp,sp,8
    3544:	f800283a 	ret

00003548 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3548:	defffa04 	addi	sp,sp,-24
    354c:	dfc00515 	stw	ra,20(sp)
    3550:	df000415 	stw	fp,16(sp)
    3554:	df000404 	addi	fp,sp,16
    3558:	e13ffd15 	stw	r4,-12(fp)
    355c:	e17ffe15 	stw	r5,-8(fp)
    3560:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3564:	d0e02a17 	ldw	r3,-32600(gp)
    3568:	e0bffe17 	ldw	r2,-8(fp)
    356c:	10a00034 	orhi	r2,r2,32768
    3570:	18800615 	stw	r2,24(r3)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3574:	d0a02a17 	ldw	r2,-32600(gp)
    3578:	11400604 	addi	r5,r2,24
    357c:	e13ffd17 	ldw	r4,-12(fp)
    3580:	000149c0 	call	149c <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3584:	d0a02a17 	ldw	r2,-32600(gp)
    3588:	11000104 	addi	r4,r2,4
    358c:	00015f80 	call	15f8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3590:	d0e02d17 	ldw	r3,-32588(gp)
    3594:	e0bfff17 	ldw	r2,-4(fp)
    3598:	1885883a 	add	r2,r3,r2
    359c:	e0bffc15 	stw	r2,-16(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    35a0:	e13ffc17 	ldw	r4,-16(fp)
    35a4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35a8:	e037883a 	mov	sp,fp
    35ac:	dfc00117 	ldw	ra,4(sp)
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00204 	addi	sp,sp,8
    35b8:	f800283a 	ret

000035bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    35bc:	defffb04 	addi	sp,sp,-20
    35c0:	dfc00415 	stw	ra,16(sp)
    35c4:	df000315 	stw	fp,12(sp)
    35c8:	df000304 	addi	fp,sp,12
    35cc:	e13ffe15 	stw	r4,-8(fp)
    35d0:	e17fff15 	stw	r5,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    35d4:	d0a02a17 	ldw	r2,-32600(gp)
    35d8:	11400604 	addi	r5,r2,24
    35dc:	e13ffe17 	ldw	r4,-8(fp)
    35e0:	000149c0 	call	149c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    35e4:	d0a02a17 	ldw	r2,-32600(gp)
    35e8:	11000104 	addi	r4,r2,4
    35ec:	00015f80 	call	15f8 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    35f0:	d0e02d17 	ldw	r3,-32588(gp)
    35f4:	e0bfff17 	ldw	r2,-4(fp)
    35f8:	1885883a 	add	r2,r3,r2
    35fc:	e0bffd15 	stw	r2,-12(fp)

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3600:	e13ffd17 	ldw	r4,-12(fp)
    3604:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>
	}
    3608:	e037883a 	mov	sp,fp
    360c:	dfc00117 	ldw	ra,4(sp)
    3610:	df000017 	ldw	fp,0(sp)
    3614:	dec00204 	addi	sp,sp,8
    3618:	f800283a 	ret

0000361c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    361c:	defffb04 	addi	sp,sp,-20
    3620:	dfc00415 	stw	ra,16(sp)
    3624:	df000315 	stw	fp,12(sp)
    3628:	df000304 	addi	fp,sp,12
    362c:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3630:	e0bfff17 	ldw	r2,-4(fp)
    3634:	10800317 	ldw	r2,12(r2)
    3638:	10800317 	ldw	r2,12(r2)
    363c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3640:	e0bffe17 	ldw	r2,-8(fp)
    3644:	11000604 	addi	r4,r2,24
    3648:	00015f80 	call	15f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    364c:	d0a03417 	ldw	r2,-32560(gp)
    3650:	1004c03a 	cmpne	r2,r2,zero
    3654:	1000151e 	bne	r2,zero,36ac <xTaskRemoveFromEventList+0x90>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	11000104 	addi	r4,r2,4
    3660:	00015f80 	call	15f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3664:	e0bffe17 	ldw	r2,-8(fp)
    3668:	10c00b17 	ldw	r3,44(r2)
    366c:	d0a02e17 	ldw	r2,-32584(gp)
    3670:	10c0032e 	bgeu	r2,r3,3680 <xTaskRemoveFromEventList+0x64>
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800b17 	ldw	r2,44(r2)
    367c:	d0a02e15 	stw	r2,-32584(gp)
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800b17 	ldw	r2,44(r2)
    3688:	10800524 	muli	r2,r2,20
    368c:	1007883a 	mov	r3,r2
    3690:	00820234 	movhi	r2,2056
    3694:	10bea704 	addi	r2,r2,-1380
    3698:	1889883a 	add	r4,r3,r2
    369c:	e0bffe17 	ldw	r2,-8(fp)
    36a0:	11400104 	addi	r5,r2,4
    36a4:	000149c0 	call	149c <vListInsertEnd>
    36a8:	00000506 	br	36c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    36ac:	e0bffe17 	ldw	r2,-8(fp)
    36b0:	11400604 	addi	r5,r2,24
    36b4:	01020234 	movhi	r4,2056
    36b8:	213eed04 	addi	r4,r4,-1100
    36bc:	000149c0 	call	149c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    36c0:	e0bffe17 	ldw	r2,-8(fp)
    36c4:	10c00b17 	ldw	r3,44(r2)
    36c8:	d0a02a17 	ldw	r2,-32600(gp)
    36cc:	10800b17 	ldw	r2,44(r2)
    36d0:	10c0052e 	bgeu	r2,r3,36e8 <xTaskRemoveFromEventList+0xcc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    36d4:	00800044 	movi	r2,1
    36d8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    36dc:	00800044 	movi	r2,1
    36e0:	d0a03115 	stw	r2,-32572(gp)
    36e4:	00000106 	br	36ec <xTaskRemoveFromEventList+0xd0>
	}
	else
	{
		xReturn = pdFALSE;
    36e8:	e03ffd15 	stw	zero,-12(fp)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    36ec:	e0bffd17 	ldw	r2,-12(fp)
}
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3704:	defffa04 	addi	sp,sp,-24
    3708:	dfc00515 	stw	ra,20(sp)
    370c:	df000415 	stw	fp,16(sp)
    3710:	df000404 	addi	fp,sp,16
    3714:	e13ffe15 	stw	r4,-8(fp)
    3718:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    371c:	e0bfff17 	ldw	r2,-4(fp)
    3720:	10e00034 	orhi	r3,r2,32768
    3724:	e0bffe17 	ldw	r2,-8(fp)
    3728:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    372c:	e0bffe17 	ldw	r2,-8(fp)
    3730:	10800317 	ldw	r2,12(r2)
    3734:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3738:	e13ffe17 	ldw	r4,-8(fp)
    373c:	00015f80 	call	15f8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3740:	e0bffd17 	ldw	r2,-12(fp)
    3744:	11000104 	addi	r4,r2,4
    3748:	00015f80 	call	15f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    374c:	e0bffd17 	ldw	r2,-12(fp)
    3750:	10c00b17 	ldw	r3,44(r2)
    3754:	d0a02e17 	ldw	r2,-32584(gp)
    3758:	10c0032e 	bgeu	r2,r3,3768 <xTaskRemoveFromUnorderedEventList+0x64>
    375c:	e0bffd17 	ldw	r2,-12(fp)
    3760:	10800b17 	ldw	r2,44(r2)
    3764:	d0a02e15 	stw	r2,-32584(gp)
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	10800b17 	ldw	r2,44(r2)
    3770:	10800524 	muli	r2,r2,20
    3774:	1007883a 	mov	r3,r2
    3778:	00820234 	movhi	r2,2056
    377c:	10bea704 	addi	r2,r2,-1380
    3780:	1889883a 	add	r4,r3,r2
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	11400104 	addi	r5,r2,4
    378c:	000149c0 	call	149c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3790:	e0bffd17 	ldw	r2,-12(fp)
    3794:	10c00b17 	ldw	r3,44(r2)
    3798:	d0a02a17 	ldw	r2,-32600(gp)
    379c:	10800b17 	ldw	r2,44(r2)
    37a0:	10c0052e 	bgeu	r2,r3,37b8 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    37a4:	00800044 	movi	r2,1
    37a8:	e0bffc15 	stw	r2,-16(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    37ac:	00800044 	movi	r2,1
    37b0:	d0a03115 	stw	r2,-32572(gp)
    37b4:	00000106 	br	37bc <xTaskRemoveFromUnorderedEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    37b8:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
    37bc:	e0bffc17 	ldw	r2,-16(fp)
}
    37c0:	e037883a 	mov	sp,fp
    37c4:	dfc00117 	ldw	ra,4(sp)
    37c8:	df000017 	ldw	fp,0(sp)
    37cc:	dec00204 	addi	sp,sp,8
    37d0:	f800283a 	ret

000037d4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    37d4:	defffe04 	addi	sp,sp,-8
    37d8:	df000115 	stw	fp,4(sp)
    37dc:	df000104 	addi	fp,sp,4
    37e0:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    37e4:	d0e03217 	ldw	r3,-32568(gp)
    37e8:	e0bfff17 	ldw	r2,-4(fp)
    37ec:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
    37f0:	d0e02d17 	ldw	r3,-32588(gp)
    37f4:	e0bfff17 	ldw	r2,-4(fp)
    37f8:	10c00115 	stw	r3,4(r2)
}
    37fc:	e037883a 	mov	sp,fp
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00104 	addi	sp,sp,4
    3808:	f800283a 	ret

0000380c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    380c:	defffa04 	addi	sp,sp,-24
    3810:	dfc00515 	stw	ra,20(sp)
    3814:	df000415 	stw	fp,16(sp)
    3818:	df000404 	addi	fp,sp,16
    381c:	e13ffe15 	stw	r4,-8(fp)
    3820:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3824:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3828:	d0a02d17 	ldw	r2,-32588(gp)
    382c:	e0bffc15 	stw	r2,-16(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3830:	e0bffe17 	ldw	r2,-8(fp)
    3834:	10c00017 	ldw	r3,0(r2)
    3838:	d0a03217 	ldw	r2,-32568(gp)
    383c:	18800726 	beq	r3,r2,385c <xTaskCheckForTimeOut+0x50>
    3840:	e0bffe17 	ldw	r2,-8(fp)
    3844:	10c00117 	ldw	r3,4(r2)
    3848:	e0bffc17 	ldw	r2,-16(fp)
    384c:	10c00336 	bltu	r2,r3,385c <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3850:	00800044 	movi	r2,1
    3854:	e0bffd15 	stw	r2,-12(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3858:	00001606 	br	38b4 <xTaskCheckForTimeOut+0xa8>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    385c:	e0bffe17 	ldw	r2,-8(fp)
    3860:	10c00117 	ldw	r3,4(r2)
    3864:	e0bffc17 	ldw	r2,-16(fp)
    3868:	10c7c83a 	sub	r3,r2,r3
    386c:	e0bfff17 	ldw	r2,-4(fp)
    3870:	10800017 	ldw	r2,0(r2)
    3874:	18800d2e 	bgeu	r3,r2,38ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3878:	e0bfff17 	ldw	r2,-4(fp)
    387c:	11000017 	ldw	r4,0(r2)
    3880:	e0bffe17 	ldw	r2,-8(fp)
    3884:	10c00117 	ldw	r3,4(r2)
    3888:	e0bffc17 	ldw	r2,-16(fp)
    388c:	10c5c83a 	sub	r2,r2,r3
    3890:	2087c83a 	sub	r3,r4,r2
    3894:	e0bfff17 	ldw	r2,-4(fp)
    3898:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
    389c:	e13ffe17 	ldw	r4,-8(fp)
    38a0:	00037d40 	call	37d4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    38a4:	e03ffd15 	stw	zero,-12(fp)
    38a8:	00000206 	br	38b4 <xTaskCheckForTimeOut+0xa8>
		}
		else
		{
			xReturn = pdTRUE;
    38ac:	00800044 	movi	r2,1
    38b0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
    38b4:	00041680 	call	4168 <vTaskExitCritical>

	return xReturn;
    38b8:	e0bffd17 	ldw	r2,-12(fp)
}
    38bc:	e037883a 	mov	sp,fp
    38c0:	dfc00117 	ldw	ra,4(sp)
    38c4:	df000017 	ldw	fp,0(sp)
    38c8:	dec00204 	addi	sp,sp,8
    38cc:	f800283a 	ret

000038d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    38d0:	deffff04 	addi	sp,sp,-4
    38d4:	df000015 	stw	fp,0(sp)
    38d8:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
    38dc:	00800044 	movi	r2,1
    38e0:	d0a03115 	stw	r2,-32572(gp)
}
    38e4:	e037883a 	mov	sp,fp
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00104 	addi	sp,sp,4
    38f0:	f800283a 	ret

000038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    38f4:	defffd04 	addi	sp,sp,-12
    38f8:	dfc00215 	stw	ra,8(sp)
    38fc:	df000115 	stw	fp,4(sp)
    3900:	df000104 	addi	fp,sp,4
    3904:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3908:	0003af40 	call	3af4 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    390c:	003ffe06 	br	3908 <prvIdleTask+0x14>

00003910 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3910:	defff804 	addi	sp,sp,-32
    3914:	dfc00715 	stw	ra,28(sp)
    3918:	df000615 	stw	fp,24(sp)
    391c:	df000604 	addi	fp,sp,24
    3920:	e13ffb15 	stw	r4,-20(fp)
    3924:	e17ffc15 	stw	r5,-16(fp)
    3928:	e1bffd15 	stw	r6,-12(fp)
    392c:	e1fffe15 	stw	r7,-8(fp)
    3930:	e0800217 	ldw	r2,8(fp)
    3934:	e0bfff0d 	sth	r2,-4(fp)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3938:	e03ffa15 	stw	zero,-24(fp)
    393c:	00001506 	br	3994 <prvInitialiseTCBVariables+0x84>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3940:	e13ffa17 	ldw	r4,-24(fp)
    3944:	e0fffa17 	ldw	r3,-24(fp)
    3948:	e0bffc17 	ldw	r2,-16(fp)
    394c:	1885883a 	add	r2,r3,r2
    3950:	10c00003 	ldbu	r3,0(r2)
    3954:	e0bffb17 	ldw	r2,-20(fp)
    3958:	2085883a 	add	r2,r4,r2
    395c:	10800d04 	addi	r2,r2,52
    3960:	10c00005 	stb	r3,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3964:	e0fffa17 	ldw	r3,-24(fp)
    3968:	e0bffc17 	ldw	r2,-16(fp)
    396c:	1885883a 	add	r2,r3,r2
    3970:	10800003 	ldbu	r2,0(r2)
    3974:	10803fcc 	andi	r2,r2,255
    3978:	1080201c 	xori	r2,r2,128
    397c:	10bfe004 	addi	r2,r2,-128
    3980:	1005003a 	cmpeq	r2,r2,zero
    3984:	1000061e 	bne	r2,zero,39a0 <prvInitialiseTCBVariables+0x90>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3988:	e0bffa17 	ldw	r2,-24(fp)
    398c:	10800044 	addi	r2,r2,1
    3990:	e0bffa15 	stw	r2,-24(fp)
    3994:	e0bffa17 	ldw	r2,-24(fp)
    3998:	10800230 	cmpltui	r2,r2,8
    399c:	103fe81e 	bne	r2,zero,3940 <prvInitialiseTCBVariables+0x30>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    39a0:	e0bffb17 	ldw	r2,-20(fp)
    39a4:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    39a8:	e0bffd17 	ldw	r2,-12(fp)
    39ac:	10800330 	cmpltui	r2,r2,12
    39b0:	1000021e 	bne	r2,zero,39bc <prvInitialiseTCBVariables+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    39b4:	008002c4 	movi	r2,11
    39b8:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    39bc:	e0fffb17 	ldw	r3,-20(fp)
    39c0:	e0bffd17 	ldw	r2,-12(fp)
    39c4:	18800b15 	stw	r2,44(r3)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    39c8:	e0fffb17 	ldw	r3,-20(fp)
    39cc:	e0bffd17 	ldw	r2,-12(fp)
    39d0:	18801015 	stw	r2,64(r3)
		pxTCB->uxMutexesHeld = 0;
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	11000104 	addi	r4,r2,4
    39e4:	00014740 	call	1474 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    39e8:	e0bffb17 	ldw	r2,-20(fp)
    39ec:	11000604 	addi	r4,r2,24
    39f0:	00014740 	call	1474 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    39f4:	e0fffb17 	ldw	r3,-20(fp)
    39f8:	e0bffb17 	ldw	r2,-20(fp)
    39fc:	18800415 	stw	r2,16(r3)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a00:	00c00304 	movi	r3,12
    3a04:	e0bffd17 	ldw	r2,-12(fp)
    3a08:	1887c83a 	sub	r3,r3,r2
    3a0c:	e0bffb17 	ldw	r2,-20(fp)
    3a10:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3a14:	e0fffb17 	ldw	r3,-20(fp)
    3a18:	e0bffb17 	ldw	r2,-20(fp)
    3a1c:	18800915 	stw	r2,36(r3)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10000f15 	stw	zero,60(r2)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    3a28:	e0bffb17 	ldw	r2,-20(fp)
    3a2c:	10001215 	stw	zero,72(r2)
		pxTCB->eNotifyState = eNotWaitingNotification;
    3a30:	e0bffb17 	ldw	r2,-20(fp)
    3a34:	10001315 	stw	zero,76(r2)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    3a38:	e037883a 	mov	sp,fp
    3a3c:	dfc00117 	ldw	ra,4(sp)
    3a40:	df000017 	ldw	fp,0(sp)
    3a44:	dec00204 	addi	sp,sp,8
    3a48:	f800283a 	ret

00003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3a4c:	defffd04 	addi	sp,sp,-12
    3a50:	dfc00215 	stw	ra,8(sp)
    3a54:	df000115 	stw	fp,4(sp)
    3a58:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a5c:	e03fff15 	stw	zero,-4(fp)
    3a60:	00000a06 	br	3a8c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a64:	e0bfff17 	ldw	r2,-4(fp)
    3a68:	10800524 	muli	r2,r2,20
    3a6c:	1007883a 	mov	r3,r2
    3a70:	00820234 	movhi	r2,2056
    3a74:	10bea704 	addi	r2,r2,-1380
    3a78:	1889883a 	add	r4,r3,r2
    3a7c:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	10800044 	addi	r2,r2,1
    3a88:	e0bfff15 	stw	r2,-4(fp)
    3a8c:	e0bfff17 	ldw	r2,-4(fp)
    3a90:	10800330 	cmpltui	r2,r2,12
    3a94:	103ff31e 	bne	r2,zero,3a64 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3a98:	01020234 	movhi	r4,2056
    3a9c:	213ee304 	addi	r4,r4,-1140
    3aa0:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3aa4:	01020234 	movhi	r4,2056
    3aa8:	213ee804 	addi	r4,r4,-1120
    3aac:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3ab0:	01020234 	movhi	r4,2056
    3ab4:	213eed04 	addi	r4,r4,-1100
    3ab8:	00014040 	call	1404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3abc:	01020234 	movhi	r4,2056
    3ac0:	213ef204 	addi	r4,r4,-1080
    3ac4:	00014040 	call	1404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3ac8:	00820234 	movhi	r2,2056
    3acc:	10bee304 	addi	r2,r2,-1140
    3ad0:	d0a03515 	stw	r2,-32556(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ad4:	00820234 	movhi	r2,2056
    3ad8:	10bee804 	addi	r2,r2,-1120
    3adc:	d0a03615 	stw	r2,-32552(gp)
}
    3ae0:	e037883a 	mov	sp,fp
    3ae4:	dfc00117 	ldw	ra,4(sp)
    3ae8:	df000017 	ldw	fp,0(sp)
    3aec:	dec00204 	addi	sp,sp,8
    3af0:	f800283a 	ret

00003af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3af4:	defffc04 	addi	sp,sp,-16
    3af8:	dfc00315 	stw	ra,12(sp)
    3afc:	df000215 	stw	fp,8(sp)
    3b00:	df000204 	addi	fp,sp,8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b04:	00001c06 	br	3b78 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
    3b08:	0002ff00 	call	2ff0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3b0c:	00820234 	movhi	r2,2056
    3b10:	10bef204 	addi	r2,r2,-1080
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	1005003a 	cmpeq	r2,r2,zero
    3b1c:	e0bfff15 	stw	r2,-4(fp)
			}
			( void ) xTaskResumeAll();
    3b20:	00030180 	call	3018 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3b24:	e0bfff17 	ldw	r2,-4(fp)
    3b28:	1004c03a 	cmpne	r2,r2,zero
    3b2c:	1000121e 	bne	r2,zero,3b78 <prvCheckTasksWaitingTermination+0x84>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3b30:	00041140 	call	4114 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3b34:	00820234 	movhi	r2,2056
    3b38:	10bef204 	addi	r2,r2,-1080
    3b3c:	10800317 	ldw	r2,12(r2)
    3b40:	10800317 	ldw	r2,12(r2)
    3b44:	e0bffe15 	stw	r2,-8(fp)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3b48:	e0bffe17 	ldw	r2,-8(fp)
    3b4c:	11000104 	addi	r4,r2,4
    3b50:	00015f80 	call	15f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
    3b54:	d0a02c17 	ldw	r2,-32592(gp)
    3b58:	10bfffc4 	addi	r2,r2,-1
    3b5c:	d0a02c15 	stw	r2,-32592(gp)
					--uxTasksDeleted;
    3b60:	d0a02b17 	ldw	r2,-32596(gp)
    3b64:	10bfffc4 	addi	r2,r2,-1
    3b68:	d0a02b15 	stw	r2,-32596(gp)
				}
				taskEXIT_CRITICAL();
    3b6c:	00041680 	call	4168 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
    3b70:	e13ffe17 	ldw	r4,-8(fp)
    3b74:	0003dc00 	call	3dc0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b78:	d0a02b17 	ldw	r2,-32596(gp)
    3b7c:	1004c03a 	cmpne	r2,r2,zero
    3b80:	103fe11e 	bne	r2,zero,3b08 <prvCheckTasksWaitingTermination+0x14>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3b84:	e037883a 	mov	sp,fp
    3b88:	dfc00117 	ldw	ra,4(sp)
    3b8c:	df000017 	ldw	fp,0(sp)
    3b90:	dec00204 	addi	sp,sp,8
    3b94:	f800283a 	ret

00003b98 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3b98:	defffd04 	addi	sp,sp,-12
    3b9c:	dfc00215 	stw	ra,8(sp)
    3ba0:	df000115 	stw	fp,4(sp)
    3ba4:	df000104 	addi	fp,sp,4
    3ba8:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3bac:	d0e02a17 	ldw	r3,-32600(gp)
    3bb0:	e0bfff17 	ldw	r2,-4(fp)
    3bb4:	18800115 	stw	r2,4(r3)

	if( xTimeToWake < xTickCount )
    3bb8:	d0e02d17 	ldw	r3,-32588(gp)
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	10c0052e 	bgeu	r2,r3,3bd8 <prvAddCurrentTaskToDelayedList+0x40>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bc4:	d1203617 	ldw	r4,-32552(gp)
    3bc8:	d0a02a17 	ldw	r2,-32600(gp)
    3bcc:	11400104 	addi	r5,r2,4
    3bd0:	00015240 	call	1524 <vListInsert>
    3bd4:	00000906 	br	3bfc <prvAddCurrentTaskToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3bd8:	d1203517 	ldw	r4,-32556(gp)
    3bdc:	d0a02a17 	ldw	r2,-32600(gp)
    3be0:	11400104 	addi	r5,r2,4
    3be4:	00015240 	call	1524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3be8:	d0e00317 	ldw	r3,-32756(gp)
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	10c0022e 	bgeu	r2,r3,3bfc <prvAddCurrentTaskToDelayedList+0x64>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	d0a00315 	stw	r2,-32756(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3bfc:	e037883a 	mov	sp,fp
    3c00:	dfc00117 	ldw	ra,4(sp)
    3c04:	df000017 	ldw	fp,0(sp)
    3c08:	dec00204 	addi	sp,sp,8
    3c0c:	f800283a 	ret

00003c10 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    3c10:	defff904 	addi	sp,sp,-28
    3c14:	dfc00615 	stw	ra,24(sp)
    3c18:	df000515 	stw	fp,20(sp)
    3c1c:	df000504 	addi	fp,sp,20
    3c20:	e17ffe15 	stw	r5,-8(fp)
    3c24:	e13ffd0d 	sth	r4,-12(fp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c28:	e0bffe17 	ldw	r2,-8(fp)
    3c2c:	1004c03a 	cmpne	r2,r2,zero
    3c30:	1000071e 	bne	r2,zero,3c50 <prvAllocateTCBAndStack+0x40>
    3c34:	e0bffd0b 	ldhu	r2,-12(fp)
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	1085883a 	add	r2,r2,r2
    3c40:	1009883a 	mov	r4,r2
    3c44:	0000fbc0 	call	fbc <pvPortMalloc>
    3c48:	e0bfff15 	stw	r2,-4(fp)
    3c4c:	00000206 	br	3c58 <prvAllocateTCBAndStack+0x48>
    3c50:	e0bffe17 	ldw	r2,-8(fp)
    3c54:	e0bfff15 	stw	r2,-4(fp)
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	e0bffb15 	stw	r2,-20(fp)

		if( pxStack != NULL )
    3c60:	e0bffb17 	ldw	r2,-20(fp)
    3c64:	1005003a 	cmpeq	r2,r2,zero
    3c68:	10000d1e 	bne	r2,zero,3ca0 <prvAllocateTCBAndStack+0x90>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3c6c:	01001404 	movi	r4,80
    3c70:	0000fbc0 	call	fbc <pvPortMalloc>
    3c74:	e0bffc15 	stw	r2,-16(fp)

			if( pxNewTCB != NULL )
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	1005003a 	cmpeq	r2,r2,zero
    3c80:	1000041e 	bne	r2,zero,3c94 <prvAllocateTCBAndStack+0x84>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    3c84:	e0fffc17 	ldw	r3,-16(fp)
    3c88:	e0bffb17 	ldw	r2,-20(fp)
    3c8c:	18800c15 	stw	r2,48(r3)
    3c90:	00000406 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    3c94:	e13ffb17 	ldw	r4,-20(fp)
    3c98:	00011500 	call	1150 <vPortFree>
    3c9c:	00000106 	br	3ca4 <prvAllocateTCBAndStack+0x94>
			}
		}
		else
		{
			pxNewTCB = NULL;
    3ca0:	e03ffc15 	stw	zero,-16(fp)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
    3ca4:	e0bffc17 	ldw	r2,-16(fp)
    3ca8:	1005003a 	cmpeq	r2,r2,zero
    3cac:	1000081e 	bne	r2,zero,3cd0 <prvAllocateTCBAndStack+0xc0>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3cb0:	e0bffc17 	ldw	r2,-16(fp)
    3cb4:	11000c17 	ldw	r4,48(r2)
    3cb8:	e0bffd0b 	ldhu	r2,-12(fp)
    3cbc:	1085883a 	add	r2,r2,r2
    3cc0:	1085883a 	add	r2,r2,r2
    3cc4:	100d883a 	mov	r6,r2
    3cc8:	01402944 	movi	r5,165
    3ccc:	00083b40 	call	83b4 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    3cd0:	e0bffc17 	ldw	r2,-16(fp)
}
    3cd4:	e037883a 	mov	sp,fp
    3cd8:	dfc00117 	ldw	ra,4(sp)
    3cdc:	df000017 	ldw	fp,0(sp)
    3ce0:	dec00204 	addi	sp,sp,8
    3ce4:	f800283a 	ret

00003ce8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    3ce8:	defffd04 	addi	sp,sp,-12
    3cec:	df000215 	stw	fp,8(sp)
    3cf0:	df000204 	addi	fp,sp,8
    3cf4:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
    3cf8:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cfc:	00000606 	br	3d18 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
    3d00:	e0bfff17 	ldw	r2,-4(fp)
    3d04:	10800044 	addi	r2,r2,1
    3d08:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
    3d0c:	e0bffe17 	ldw	r2,-8(fp)
    3d10:	10800044 	addi	r2,r2,1
    3d14:	e0bffe15 	stw	r2,-8(fp)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3d18:	e0bfff17 	ldw	r2,-4(fp)
    3d1c:	10800003 	ldbu	r2,0(r2)
    3d20:	10803fcc 	andi	r2,r2,255
    3d24:	10802960 	cmpeqi	r2,r2,165
    3d28:	103ff51e 	bne	r2,zero,3d00 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3d2c:	e0bffe17 	ldw	r2,-8(fp)
    3d30:	1004d0ba 	srli	r2,r2,2
    3d34:	e0bffe15 	stw	r2,-8(fp)

		return ( uint16_t ) ulCount;
    3d38:	e0bffe17 	ldw	r2,-8(fp)
    3d3c:	10bfffcc 	andi	r2,r2,65535
	}
    3d40:	e037883a 	mov	sp,fp
    3d44:	df000017 	ldw	fp,0(sp)
    3d48:	dec00104 	addi	sp,sp,4
    3d4c:	f800283a 	ret

00003d50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    3d50:	defff904 	addi	sp,sp,-28
    3d54:	dfc00615 	stw	ra,24(sp)
    3d58:	df000515 	stw	fp,20(sp)
    3d5c:	df000504 	addi	fp,sp,20
    3d60:	e13ffe15 	stw	r4,-8(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d64:	e0bffe17 	ldw	r2,-8(fp)
    3d68:	1004c03a 	cmpne	r2,r2,zero
    3d6c:	1000031e 	bne	r2,zero,3d7c <uxTaskGetStackHighWaterMark+0x2c>
    3d70:	d0a02a17 	ldw	r2,-32600(gp)
    3d74:	e0bfff15 	stw	r2,-4(fp)
    3d78:	00000206 	br	3d84 <uxTaskGetStackHighWaterMark+0x34>
    3d7c:	e0bffe17 	ldw	r2,-8(fp)
    3d80:	e0bfff15 	stw	r2,-4(fp)
    3d84:	e0bfff17 	ldw	r2,-4(fp)
    3d88:	e0bffd15 	stw	r2,-12(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	10800c17 	ldw	r2,48(r2)
    3d94:	e0bffc15 	stw	r2,-16(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    3d98:	e13ffc17 	ldw	r4,-16(fp)
    3d9c:	0003ce80 	call	3ce8 <prvTaskCheckFreeStackSpace>
    3da0:	10bfffcc 	andi	r2,r2,65535
    3da4:	e0bffb15 	stw	r2,-20(fp)

		return uxReturn;
    3da8:	e0bffb17 	ldw	r2,-20(fp)
	}
    3dac:	e037883a 	mov	sp,fp
    3db0:	dfc00117 	ldw	ra,4(sp)
    3db4:	df000017 	ldw	fp,0(sp)
    3db8:	dec00204 	addi	sp,sp,8
    3dbc:	f800283a 	ret

00003dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3dc0:	defffd04 	addi	sp,sp,-12
    3dc4:	dfc00215 	stw	ra,8(sp)
    3dc8:	df000115 	stw	fp,4(sp)
    3dcc:	df000104 	addi	fp,sp,4
    3dd0:	e13fff15 	stw	r4,-4(fp)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    3dd4:	e0bfff17 	ldw	r2,-4(fp)
    3dd8:	11000c17 	ldw	r4,48(r2)
    3ddc:	00011500 	call	1150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    3de0:	e13fff17 	ldw	r4,-4(fp)
    3de4:	00011500 	call	1150 <vPortFree>
	}
    3de8:	e037883a 	mov	sp,fp
    3dec:	dfc00117 	ldw	ra,4(sp)
    3df0:	df000017 	ldw	fp,0(sp)
    3df4:	dec00204 	addi	sp,sp,8
    3df8:	f800283a 	ret

00003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3dfc:	defffd04 	addi	sp,sp,-12
    3e00:	df000215 	stw	fp,8(sp)
    3e04:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3e08:	d0a03517 	ldw	r2,-32556(gp)
    3e0c:	10800017 	ldw	r2,0(r2)
    3e10:	1004c03a 	cmpne	r2,r2,zero
    3e14:	1000031e 	bne	r2,zero,3e24 <prvResetNextTaskUnblockTime+0x28>
    3e18:	00800044 	movi	r2,1
    3e1c:	e0bfff05 	stb	r2,-4(fp)
    3e20:	00000106 	br	3e28 <prvResetNextTaskUnblockTime+0x2c>
    3e24:	e03fff05 	stb	zero,-4(fp)
    3e28:	e0bfff03 	ldbu	r2,-4(fp)
    3e2c:	1005003a 	cmpeq	r2,r2,zero
    3e30:	1000031e 	bne	r2,zero,3e40 <prvResetNextTaskUnblockTime+0x44>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3e34:	00bfffc4 	movi	r2,-1
    3e38:	d0a00315 	stw	r2,-32756(gp)
    3e3c:	00000706 	br	3e5c <prvResetNextTaskUnblockTime+0x60>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3e40:	d0a03517 	ldw	r2,-32556(gp)
    3e44:	10800317 	ldw	r2,12(r2)
    3e48:	10800317 	ldw	r2,12(r2)
    3e4c:	e0bffe15 	stw	r2,-8(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3e50:	e0bffe17 	ldw	r2,-8(fp)
    3e54:	10800117 	ldw	r2,4(r2)
    3e58:	d0a00315 	stw	r2,-32756(gp)
	}
}
    3e5c:	e037883a 	mov	sp,fp
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00104 	addi	sp,sp,4
    3e68:	f800283a 	ret

00003e6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3e6c:	defffe04 	addi	sp,sp,-8
    3e70:	df000115 	stw	fp,4(sp)
    3e74:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e78:	d0a02a17 	ldw	r2,-32600(gp)
    3e7c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
    3e80:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e84:	e037883a 	mov	sp,fp
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00104 	addi	sp,sp,4
    3e90:	f800283a 	ret

00003e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3e94:	defffe04 	addi	sp,sp,-8
    3e98:	df000115 	stw	fp,4(sp)
    3e9c:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3ea0:	d0a02f17 	ldw	r2,-32580(gp)
    3ea4:	1004c03a 	cmpne	r2,r2,zero
    3ea8:	1000031e 	bne	r2,zero,3eb8 <xTaskGetSchedulerState+0x24>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3eac:	00800044 	movi	r2,1
    3eb0:	e0bfff15 	stw	r2,-4(fp)
    3eb4:	00000706 	br	3ed4 <xTaskGetSchedulerState+0x40>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3eb8:	d0a03417 	ldw	r2,-32560(gp)
    3ebc:	1004c03a 	cmpne	r2,r2,zero
    3ec0:	1000031e 	bne	r2,zero,3ed0 <xTaskGetSchedulerState+0x3c>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3ec4:	00800084 	movi	r2,2
    3ec8:	e0bfff15 	stw	r2,-4(fp)
    3ecc:	00000106 	br	3ed4 <xTaskGetSchedulerState+0x40>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3ed0:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
	}
    3ed8:	e037883a 	mov	sp,fp
    3edc:	df000017 	ldw	fp,0(sp)
    3ee0:	dec00104 	addi	sp,sp,4
    3ee4:	f800283a 	ret

00003ee8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3ee8:	defffb04 	addi	sp,sp,-20
    3eec:	dfc00415 	stw	ra,16(sp)
    3ef0:	df000315 	stw	fp,12(sp)
    3ef4:	df000304 	addi	fp,sp,12
    3ef8:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3efc:	e0bffe17 	ldw	r2,-8(fp)
    3f00:	e0bffd15 	stw	r2,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3f04:	e0bffe17 	ldw	r2,-8(fp)
    3f08:	1005003a 	cmpeq	r2,r2,zero
    3f0c:	10003d1e 	bne	r2,zero,4004 <vTaskPriorityInherit+0x11c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	10c00b17 	ldw	r3,44(r2)
    3f18:	d0a02a17 	ldw	r2,-32600(gp)
    3f1c:	10800b17 	ldw	r2,44(r2)
    3f20:	1880382e 	bgeu	r3,r2,4004 <vTaskPriorityInherit+0x11c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3f24:	e0bffd17 	ldw	r2,-12(fp)
    3f28:	10800617 	ldw	r2,24(r2)
    3f2c:	1004803a 	cmplt	r2,r2,zero
    3f30:	1000061e 	bne	r2,zero,3f4c <vTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3f34:	d0a02a17 	ldw	r2,-32600(gp)
    3f38:	10c00b17 	ldw	r3,44(r2)
    3f3c:	00800304 	movi	r2,12
    3f40:	10c7c83a 	sub	r3,r2,r3
    3f44:	e0bffd17 	ldw	r2,-12(fp)
    3f48:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3f4c:	e0bffd17 	ldw	r2,-12(fp)
    3f50:	11000517 	ldw	r4,20(r2)
    3f54:	e0bffd17 	ldw	r2,-12(fp)
    3f58:	10800b17 	ldw	r2,44(r2)
    3f5c:	10800524 	muli	r2,r2,20
    3f60:	1007883a 	mov	r3,r2
    3f64:	00820234 	movhi	r2,2056
    3f68:	10bea704 	addi	r2,r2,-1380
    3f6c:	1885883a 	add	r2,r3,r2
    3f70:	2080031e 	bne	r4,r2,3f80 <vTaskPriorityInherit+0x98>
    3f74:	00800044 	movi	r2,1
    3f78:	e0bfff05 	stb	r2,-4(fp)
    3f7c:	00000106 	br	3f84 <vTaskPriorityInherit+0x9c>
    3f80:	e03fff05 	stb	zero,-4(fp)
    3f84:	e0bfff03 	ldbu	r2,-4(fp)
    3f88:	1005003a 	cmpeq	r2,r2,zero
    3f8c:	1000191e 	bne	r2,zero,3ff4 <vTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	11000104 	addi	r4,r2,4
    3f98:	00015f80 	call	15f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f9c:	d0a02a17 	ldw	r2,-32600(gp)
    3fa0:	10c00b17 	ldw	r3,44(r2)
    3fa4:	e0bffd17 	ldw	r2,-12(fp)
    3fa8:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxTCB );
    3fac:	e0bffd17 	ldw	r2,-12(fp)
    3fb0:	10c00b17 	ldw	r3,44(r2)
    3fb4:	d0a02e17 	ldw	r2,-32584(gp)
    3fb8:	10c0032e 	bgeu	r2,r3,3fc8 <vTaskPriorityInherit+0xe0>
    3fbc:	e0bffd17 	ldw	r2,-12(fp)
    3fc0:	10800b17 	ldw	r2,44(r2)
    3fc4:	d0a02e15 	stw	r2,-32584(gp)
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	10800b17 	ldw	r2,44(r2)
    3fd0:	10800524 	muli	r2,r2,20
    3fd4:	1007883a 	mov	r3,r2
    3fd8:	00820234 	movhi	r2,2056
    3fdc:	10bea704 	addi	r2,r2,-1380
    3fe0:	1889883a 	add	r4,r3,r2
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	11400104 	addi	r5,r2,4
    3fec:	000149c0 	call	149c <vListInsertEnd>
    3ff0:	00000406 	br	4004 <vTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3ff4:	d0a02a17 	ldw	r2,-32600(gp)
    3ff8:	10c00b17 	ldw	r3,44(r2)
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10c00b15 	stw	r3,44(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4004:	e037883a 	mov	sp,fp
    4008:	dfc00117 	ldw	ra,4(sp)
    400c:	df000017 	ldw	fp,0(sp)
    4010:	dec00204 	addi	sp,sp,8
    4014:	f800283a 	ret

00004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4018:	defffb04 	addi	sp,sp,-20
    401c:	dfc00415 	stw	ra,16(sp)
    4020:	df000315 	stw	fp,12(sp)
    4024:	df000304 	addi	fp,sp,12
    4028:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    402c:	e0bfff17 	ldw	r2,-4(fp)
    4030:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
    4034:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
    4038:	e0bfff17 	ldw	r2,-4(fp)
    403c:	1005003a 	cmpeq	r2,r2,zero
    4040:	10002e1e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4044:	e0bffe17 	ldw	r2,-8(fp)
    4048:	10801117 	ldw	r2,68(r2)
    404c:	10ffffc4 	addi	r3,r2,-1
    4050:	e0bffe17 	ldw	r2,-8(fp)
    4054:	10c01115 	stw	r3,68(r2)

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	10c00b17 	ldw	r3,44(r2)
    4060:	e0bffe17 	ldw	r2,-8(fp)
    4064:	10801017 	ldw	r2,64(r2)
    4068:	18802426 	beq	r3,r2,40fc <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    406c:	e0bffe17 	ldw	r2,-8(fp)
    4070:	10801117 	ldw	r2,68(r2)
    4074:	1004c03a 	cmpne	r2,r2,zero
    4078:	1000201e 	bne	r2,zero,40fc <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    407c:	e0bffe17 	ldw	r2,-8(fp)
    4080:	11000104 	addi	r4,r2,4
    4084:	00015f80 	call	15f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4088:	e0bffe17 	ldw	r2,-8(fp)
    408c:	10c01017 	ldw	r3,64(r2)
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4098:	e0bffe17 	ldw	r2,-8(fp)
    409c:	10c00b17 	ldw	r3,44(r2)
    40a0:	00800304 	movi	r2,12
    40a4:	10c7c83a 	sub	r3,r2,r3
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10c00b17 	ldw	r3,44(r2)
    40b8:	d0a02e17 	ldw	r2,-32584(gp)
    40bc:	10c0032e 	bgeu	r2,r3,40cc <xTaskPriorityDisinherit+0xb4>
    40c0:	e0bffe17 	ldw	r2,-8(fp)
    40c4:	10800b17 	ldw	r2,44(r2)
    40c8:	d0a02e15 	stw	r2,-32584(gp)
    40cc:	e0bffe17 	ldw	r2,-8(fp)
    40d0:	10800b17 	ldw	r2,44(r2)
    40d4:	10800524 	muli	r2,r2,20
    40d8:	1007883a 	mov	r3,r2
    40dc:	00820234 	movhi	r2,2056
    40e0:	10bea704 	addi	r2,r2,-1380
    40e4:	1889883a 	add	r4,r3,r2
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	11400104 	addi	r5,r2,4
    40f0:	000149c0 	call	149c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    40f4:	00800044 	movi	r2,1
    40f8:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    40fc:	e0bffd17 	ldw	r2,-12(fp)
	}
    4100:	e037883a 	mov	sp,fp
    4104:	dfc00117 	ldw	ra,4(sp)
    4108:	df000017 	ldw	fp,0(sp)
    410c:	dec00204 	addi	sp,sp,8
    4110:	f800283a 	ret

00004114 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    4114:	defffe04 	addi	sp,sp,-8
    4118:	df000115 	stw	fp,4(sp)
    411c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4120:	0005303a 	rdctl	r2,status
    4124:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4128:	e0ffff17 	ldw	r3,-4(fp)
    412c:	00bfff84 	movi	r2,-2
    4130:	1884703a 	and	r2,r3,r2
    4134:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    4138:	d0a02f17 	ldw	r2,-32580(gp)
    413c:	1005003a 	cmpeq	r2,r2,zero
    4140:	1000051e 	bne	r2,zero,4158 <vTaskEnterCritical+0x44>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    4144:	d0e02a17 	ldw	r3,-32600(gp)
    4148:	18800f17 	ldw	r2,60(r3)
    414c:	10800044 	addi	r2,r2,1
    4150:	18800f15 	stw	r2,60(r3)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    4154:	d0a02a17 	ldw	r2,-32600(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4158:	e037883a 	mov	sp,fp
    415c:	df000017 	ldw	fp,0(sp)
    4160:	dec00104 	addi	sp,sp,4
    4164:	f800283a 	ret

00004168 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    4168:	defffe04 	addi	sp,sp,-8
    416c:	df000115 	stw	fp,4(sp)
    4170:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
    4174:	d0a02f17 	ldw	r2,-32580(gp)
    4178:	1005003a 	cmpeq	r2,r2,zero
    417c:	1000101e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    4180:	d0a02a17 	ldw	r2,-32600(gp)
    4184:	10800f17 	ldw	r2,60(r2)
    4188:	1005003a 	cmpeq	r2,r2,zero
    418c:	10000c1e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    4190:	d0e02a17 	ldw	r3,-32600(gp)
    4194:	18800f17 	ldw	r2,60(r3)
    4198:	10bfffc4 	addi	r2,r2,-1
    419c:	18800f15 	stw	r2,60(r3)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    41a0:	d0a02a17 	ldw	r2,-32600(gp)
    41a4:	10800f17 	ldw	r2,60(r2)
    41a8:	1004c03a 	cmpne	r2,r2,zero
    41ac:	1000041e 	bne	r2,zero,41c0 <vTaskExitCritical+0x58>
    41b0:	00800044 	movi	r2,1
    41b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    41c0:	e037883a 	mov	sp,fp
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00104 	addi	sp,sp,4
    41cc:	f800283a 	ret

000041d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    41d0:	defffe04 	addi	sp,sp,-8
    41d4:	df000115 	stw	fp,4(sp)
    41d8:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    41dc:	d0a02a17 	ldw	r2,-32600(gp)
    41e0:	10800617 	ldw	r2,24(r2)
    41e4:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41e8:	d1202a17 	ldw	r4,-32600(gp)
    41ec:	d0a02a17 	ldw	r2,-32600(gp)
    41f0:	10c00b17 	ldw	r3,44(r2)
    41f4:	00800304 	movi	r2,12
    41f8:	10c5c83a 	sub	r2,r2,r3
    41fc:	20800615 	stw	r2,24(r4)

	return uxReturn;
    4200:	e0bfff17 	ldw	r2,-4(fp)
}
    4204:	e037883a 	mov	sp,fp
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00104 	addi	sp,sp,4
    4210:	f800283a 	ret

00004214 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4214:	deffff04 	addi	sp,sp,-4
    4218:	df000015 	stw	fp,0(sp)
    421c:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4220:	d0a02a17 	ldw	r2,-32600(gp)
    4224:	1005003a 	cmpeq	r2,r2,zero
    4228:	1000041e 	bne	r2,zero,423c <pvTaskIncrementMutexHeldCount+0x28>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    422c:	d0a02a17 	ldw	r2,-32600(gp)
    4230:	10c01117 	ldw	r3,68(r2)
    4234:	18c00044 	addi	r3,r3,1
    4238:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
    423c:	d0a02a17 	ldw	r2,-32600(gp)
	}
    4240:	e037883a 	mov	sp,fp
    4244:	df000017 	ldw	fp,0(sp)
    4248:	dec00104 	addi	sp,sp,4
    424c:	f800283a 	ret

00004250 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4250:	defffa04 	addi	sp,sp,-24
    4254:	dfc00515 	stw	ra,20(sp)
    4258:	df000415 	stw	fp,16(sp)
    425c:	df000404 	addi	fp,sp,16
    4260:	e13ffe15 	stw	r4,-8(fp)
    4264:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4268:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    426c:	d0a02a17 	ldw	r2,-32600(gp)
    4270:	10801217 	ldw	r2,72(r2)
    4274:	1004c03a 	cmpne	r2,r2,zero
    4278:	1000101e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    427c:	d0e02a17 	ldw	r3,-32600(gp)
    4280:	00800044 	movi	r2,1
    4284:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	1005003a 	cmpeq	r2,r2,zero
    4290:	10000a1e 	bne	r2,zero,42bc <ulTaskNotifyTake+0x6c>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4294:	d0a02a17 	ldw	r2,-32600(gp)
    4298:	11000104 	addi	r4,r2,4
    429c:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    42a0:	d0e02d17 	ldw	r3,-32588(gp)
    42a4:	e0bfff17 	ldw	r2,-4(fp)
    42a8:	1885883a 	add	r2,r3,r2
    42ac:	e0bffd15 	stw	r2,-12(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    42b0:	e13ffd17 	ldw	r4,-12(fp)
    42b4:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    42b8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    42bc:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    42c0:	00041140 	call	4114 <vTaskEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    42c4:	d0a02a17 	ldw	r2,-32600(gp)
    42c8:	10801217 	ldw	r2,72(r2)
    42cc:	e0bffc15 	stw	r2,-16(fp)

			if( ulReturn != 0UL )
    42d0:	e0bffc17 	ldw	r2,-16(fp)
    42d4:	1005003a 	cmpeq	r2,r2,zero
    42d8:	10000a1e 	bne	r2,zero,4304 <ulTaskNotifyTake+0xb4>
			{
				if( xClearCountOnExit != pdFALSE )
    42dc:	e0bffe17 	ldw	r2,-8(fp)
    42e0:	1005003a 	cmpeq	r2,r2,zero
    42e4:	1000031e 	bne	r2,zero,42f4 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    42e8:	d0a02a17 	ldw	r2,-32600(gp)
    42ec:	10001215 	stw	zero,72(r2)
    42f0:	00000406 	br	4304 <ulTaskNotifyTake+0xb4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    42f4:	d0a02a17 	ldw	r2,-32600(gp)
    42f8:	10c01217 	ldw	r3,72(r2)
    42fc:	18ffffc4 	addi	r3,r3,-1
    4300:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4304:	d0a02a17 	ldw	r2,-32600(gp)
    4308:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    430c:	00041680 	call	4168 <vTaskExitCritical>

		return ulReturn;
    4310:	e0bffc17 	ldw	r2,-16(fp)
	}
    4314:	e037883a 	mov	sp,fp
    4318:	dfc00117 	ldw	ra,4(sp)
    431c:	df000017 	ldw	fp,0(sp)
    4320:	dec00204 	addi	sp,sp,8
    4324:	f800283a 	ret

00004328 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4328:	defff804 	addi	sp,sp,-32
    432c:	dfc00715 	stw	ra,28(sp)
    4330:	df000615 	stw	fp,24(sp)
    4334:	df000604 	addi	fp,sp,24
    4338:	e13ffc15 	stw	r4,-16(fp)
    433c:	e17ffd15 	stw	r5,-12(fp)
    4340:	e1bffe15 	stw	r6,-8(fp)
    4344:	e1ffff15 	stw	r7,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4348:	00041140 	call	4114 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    434c:	d0a02a17 	ldw	r2,-32600(gp)
    4350:	10801317 	ldw	r2,76(r2)
    4354:	108000a0 	cmpeqi	r2,r2,2
    4358:	1000161e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    435c:	d0e02a17 	ldw	r3,-32600(gp)
    4360:	19001217 	ldw	r4,72(r3)
    4364:	e0bffc17 	ldw	r2,-16(fp)
    4368:	0084303a 	nor	r2,zero,r2
    436c:	2084703a 	and	r2,r4,r2
    4370:	18801215 	stw	r2,72(r3)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    4374:	d0e02a17 	ldw	r3,-32600(gp)
    4378:	00800044 	movi	r2,1
    437c:	18801315 	stw	r2,76(r3)

				if( xTicksToWait > ( TickType_t ) 0 )
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	1005003a 	cmpeq	r2,r2,zero
    4388:	10000a1e 	bne	r2,zero,43b4 <xTaskNotifyWait+0x8c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    438c:	d0a02a17 	ldw	r2,-32600(gp)
    4390:	11000104 	addi	r4,r2,4
    4394:	00015f80 	call	15f8 <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4398:	d0e02d17 	ldw	r3,-32588(gp)
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	1885883a 	add	r2,r3,r2
    43a4:	e0bffb15 	stw	r2,-20(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    43a8:	e13ffb17 	ldw	r4,-20(fp)
    43ac:	0003b980 	call	3b98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    43b0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    43b4:	00041680 	call	4168 <vTaskExitCritical>

		taskENTER_CRITICAL();
    43b8:	00041140 	call	4114 <vTaskEnterCritical>
		{
			if( pulNotificationValue != NULL )
    43bc:	e0bffe17 	ldw	r2,-8(fp)
    43c0:	1005003a 	cmpeq	r2,r2,zero
    43c4:	1000041e 	bne	r2,zero,43d8 <xTaskNotifyWait+0xb0>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    43c8:	d0a02a17 	ldw	r2,-32600(gp)
    43cc:	10c01217 	ldw	r3,72(r2)
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10c00015 	stw	r3,0(r2)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    43d8:	d0a02a17 	ldw	r2,-32600(gp)
    43dc:	10801317 	ldw	r2,76(r2)
    43e0:	10800058 	cmpnei	r2,r2,1
    43e4:	1000021e 	bne	r2,zero,43f0 <xTaskNotifyWait+0xc8>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    43e8:	e03ffa15 	stw	zero,-24(fp)
    43ec:	00000806 	br	4410 <xTaskNotifyWait+0xe8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    43f0:	d0e02a17 	ldw	r3,-32600(gp)
    43f4:	19001217 	ldw	r4,72(r3)
    43f8:	e0bffd17 	ldw	r2,-12(fp)
    43fc:	0084303a 	nor	r2,zero,r2
    4400:	2084703a 	and	r2,r4,r2
    4404:	18801215 	stw	r2,72(r3)
				xReturn = pdTRUE;
    4408:	00800044 	movi	r2,1
    440c:	e0bffa15 	stw	r2,-24(fp)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4410:	d0a02a17 	ldw	r2,-32600(gp)
    4414:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4418:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    441c:	e0bffa17 	ldw	r2,-24(fp)
	}
    4420:	e037883a 	mov	sp,fp
    4424:	dfc00117 	ldw	ra,4(sp)
    4428:	df000017 	ldw	fp,0(sp)
    442c:	dec00204 	addi	sp,sp,8
    4430:	f800283a 	ret

00004434 <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
    4434:	defff704 	addi	sp,sp,-36
    4438:	dfc00815 	stw	ra,32(sp)
    443c:	df000715 	stw	fp,28(sp)
    4440:	df000704 	addi	fp,sp,28
    4444:	e13ffc15 	stw	r4,-16(fp)
    4448:	e17ffd15 	stw	r5,-12(fp)
    444c:	e1bffe15 	stw	r6,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4450:	00800044 	movi	r2,1
    4454:	e0bff915 	stw	r2,-28(fp)

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4458:	e0bffc17 	ldw	r2,-16(fp)
    445c:	e0bffb15 	stw	r2,-20(fp)

		taskENTER_CRITICAL();
    4460:	00041140 	call	4114 <vTaskEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	10801317 	ldw	r2,76(r2)
    446c:	e0bffa15 	stw	r2,-24(fp)

			pxTCB->eNotifyState = eNotified;
    4470:	e0fffb17 	ldw	r3,-20(fp)
    4474:	00800084 	movi	r2,2
    4478:	18801315 	stw	r2,76(r3)

			switch( eAction )
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	e0bfff15 	stw	r2,-4(fp)
    4484:	e0ffff17 	ldw	r3,-4(fp)
    4488:	188000a0 	cmpeqi	r2,r3,2
    448c:	1000151e 	bne	r2,zero,44e4 <xTaskNotify+0xb0>
    4490:	e0ffff17 	ldw	r3,-4(fp)
    4494:	188000e8 	cmpgeui	r2,r3,3
    4498:	1000041e 	bne	r2,zero,44ac <xTaskNotify+0x78>
    449c:	e0ffff17 	ldw	r3,-4(fp)
    44a0:	18800060 	cmpeqi	r2,r3,1
    44a4:	1000081e 	bne	r2,zero,44c8 <xTaskNotify+0x94>
    44a8:	00002006 	br	452c <xTaskNotify+0xf8>
    44ac:	e0ffff17 	ldw	r3,-4(fp)
    44b0:	188000e0 	cmpeqi	r2,r3,3
    44b4:	1000111e 	bne	r2,zero,44fc <xTaskNotify+0xc8>
    44b8:	e0ffff17 	ldw	r3,-4(fp)
    44bc:	18800120 	cmpeqi	r2,r3,4
    44c0:	1000121e 	bne	r2,zero,450c <xTaskNotify+0xd8>
    44c4:	00001906 	br	452c <xTaskNotify+0xf8>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10c01217 	ldw	r3,72(r2)
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	1886b03a 	or	r3,r3,r2
    44d8:	e0bffb17 	ldw	r2,-20(fp)
    44dc:	10c01215 	stw	r3,72(r2)
					break;
    44e0:	00001206 	br	452c <xTaskNotify+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    44e4:	e0bffb17 	ldw	r2,-20(fp)
    44e8:	10801217 	ldw	r2,72(r2)
    44ec:	10c00044 	addi	r3,r2,1
    44f0:	e0bffb17 	ldw	r2,-20(fp)
    44f4:	10c01215 	stw	r3,72(r2)
					break;
    44f8:	00000c06 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    44fc:	e0fffb17 	ldw	r3,-20(fp)
    4500:	e0bffd17 	ldw	r2,-12(fp)
    4504:	18801215 	stw	r2,72(r3)
					break;
    4508:	00000806 	br	452c <xTaskNotify+0xf8>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    450c:	e0bffa17 	ldw	r2,-24(fp)
    4510:	108000a0 	cmpeqi	r2,r2,2
    4514:	1000041e 	bne	r2,zero,4528 <xTaskNotify+0xf4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4518:	e0fffb17 	ldw	r3,-20(fp)
    451c:	e0bffd17 	ldw	r2,-12(fp)
    4520:	18801215 	stw	r2,72(r3)
    4524:	00000106 	br	452c <xTaskNotify+0xf8>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4528:	e03ff915 	stw	zero,-28(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    452c:	e0bffa17 	ldw	r2,-24(fp)
    4530:	10800058 	cmpnei	r2,r2,1
    4534:	10001a1e 	bne	r2,zero,45a0 <xTaskNotify+0x16c>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4538:	e0bffb17 	ldw	r2,-20(fp)
    453c:	11000104 	addi	r4,r2,4
    4540:	00015f80 	call	15f8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4544:	e0bffb17 	ldw	r2,-20(fp)
    4548:	10c00b17 	ldw	r3,44(r2)
    454c:	d0a02e17 	ldw	r2,-32584(gp)
    4550:	10c0032e 	bgeu	r2,r3,4560 <xTaskNotify+0x12c>
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10800b17 	ldw	r2,44(r2)
    455c:	d0a02e15 	stw	r2,-32584(gp)
    4560:	e0bffb17 	ldw	r2,-20(fp)
    4564:	10800b17 	ldw	r2,44(r2)
    4568:	10800524 	muli	r2,r2,20
    456c:	1007883a 	mov	r3,r2
    4570:	00820234 	movhi	r2,2056
    4574:	10bea704 	addi	r2,r2,-1380
    4578:	1889883a 	add	r4,r3,r2
    457c:	e0bffb17 	ldw	r2,-20(fp)
    4580:	11400104 	addi	r5,r2,4
    4584:	000149c0 	call	149c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4588:	e0bffb17 	ldw	r2,-20(fp)
    458c:	10c00b17 	ldw	r3,44(r2)
    4590:	d0a02a17 	ldw	r2,-32600(gp)
    4594:	10800b17 	ldw	r2,44(r2)
    4598:	10c0012e 	bgeu	r2,r3,45a0 <xTaskNotify+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
    459c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    45a0:	00041680 	call	4168 <vTaskExitCritical>

		return xReturn;
    45a4:	e0bff917 	ldw	r2,-28(fp)
	}
    45a8:	e037883a 	mov	sp,fp
    45ac:	dfc00117 	ldw	ra,4(sp)
    45b0:	df000017 	ldw	fp,0(sp)
    45b4:	dec00204 	addi	sp,sp,8
    45b8:	f800283a 	ret

000045bc <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
    45bc:	defff504 	addi	sp,sp,-44
    45c0:	dfc00a15 	stw	ra,40(sp)
    45c4:	df000915 	stw	fp,36(sp)
    45c8:	df000904 	addi	fp,sp,36
    45cc:	e13ffb15 	stw	r4,-20(fp)
    45d0:	e17ffc15 	stw	r5,-16(fp)
    45d4:	e1bffd15 	stw	r6,-12(fp)
    45d8:	e1fffe15 	stw	r7,-8(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    45dc:	00800044 	movi	r2,1
    45e0:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    45e4:	e0bffb17 	ldw	r2,-20(fp)
    45e8:	e0bffa15 	stw	r2,-24(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45ec:	e03ff715 	stw	zero,-36(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    45f0:	e0bffa17 	ldw	r2,-24(fp)
    45f4:	10801317 	ldw	r2,76(r2)
    45f8:	e0bff915 	stw	r2,-28(fp)

			pxTCB->eNotifyState = eNotified;
    45fc:	e0fffa17 	ldw	r3,-24(fp)
    4600:	00800084 	movi	r2,2
    4604:	18801315 	stw	r2,76(r3)

			switch( eAction )
    4608:	e0bffd17 	ldw	r2,-12(fp)
    460c:	e0bfff15 	stw	r2,-4(fp)
    4610:	e0ffff17 	ldw	r3,-4(fp)
    4614:	188000a0 	cmpeqi	r2,r3,2
    4618:	1000151e 	bne	r2,zero,4670 <xTaskNotifyFromISR+0xb4>
    461c:	e0ffff17 	ldw	r3,-4(fp)
    4620:	188000e8 	cmpgeui	r2,r3,3
    4624:	1000041e 	bne	r2,zero,4638 <xTaskNotifyFromISR+0x7c>
    4628:	e0ffff17 	ldw	r3,-4(fp)
    462c:	18800060 	cmpeqi	r2,r3,1
    4630:	1000081e 	bne	r2,zero,4654 <xTaskNotifyFromISR+0x98>
    4634:	00002006 	br	46b8 <xTaskNotifyFromISR+0xfc>
    4638:	e0ffff17 	ldw	r3,-4(fp)
    463c:	188000e0 	cmpeqi	r2,r3,3
    4640:	1000111e 	bne	r2,zero,4688 <xTaskNotifyFromISR+0xcc>
    4644:	e0ffff17 	ldw	r3,-4(fp)
    4648:	18800120 	cmpeqi	r2,r3,4
    464c:	1000121e 	bne	r2,zero,4698 <xTaskNotifyFromISR+0xdc>
    4650:	00001906 	br	46b8 <xTaskNotifyFromISR+0xfc>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4654:	e0bffa17 	ldw	r2,-24(fp)
    4658:	10c01217 	ldw	r3,72(r2)
    465c:	e0bffc17 	ldw	r2,-16(fp)
    4660:	1886b03a 	or	r3,r3,r2
    4664:	e0bffa17 	ldw	r2,-24(fp)
    4668:	10c01215 	stw	r3,72(r2)
					break;
    466c:	00001206 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4670:	e0bffa17 	ldw	r2,-24(fp)
    4674:	10801217 	ldw	r2,72(r2)
    4678:	10c00044 	addi	r3,r2,1
    467c:	e0bffa17 	ldw	r2,-24(fp)
    4680:	10c01215 	stw	r3,72(r2)
					break;
    4684:	00000c06 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4688:	e0fffa17 	ldw	r3,-24(fp)
    468c:	e0bffc17 	ldw	r2,-16(fp)
    4690:	18801215 	stw	r2,72(r3)
					break;
    4694:	00000806 	br	46b8 <xTaskNotifyFromISR+0xfc>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	108000a0 	cmpeqi	r2,r2,2
    46a0:	1000041e 	bne	r2,zero,46b4 <xTaskNotifyFromISR+0xf8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    46a4:	e0fffa17 	ldw	r3,-24(fp)
    46a8:	e0bffc17 	ldw	r2,-16(fp)
    46ac:	18801215 	stw	r2,72(r3)
    46b0:	00000106 	br	46b8 <xTaskNotifyFromISR+0xfc>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    46b4:	e03ff815 	stw	zero,-32(fp)
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    46b8:	e0bff917 	ldw	r2,-28(fp)
    46bc:	10800058 	cmpnei	r2,r2,1
    46c0:	1000281e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    46c4:	d0a03417 	ldw	r2,-32560(gp)
    46c8:	1004c03a 	cmpne	r2,r2,zero
    46cc:	1000151e 	bne	r2,zero,4724 <xTaskNotifyFromISR+0x168>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    46d0:	e0bffa17 	ldw	r2,-24(fp)
    46d4:	11000104 	addi	r4,r2,4
    46d8:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    46dc:	e0bffa17 	ldw	r2,-24(fp)
    46e0:	10c00b17 	ldw	r3,44(r2)
    46e4:	d0a02e17 	ldw	r2,-32584(gp)
    46e8:	10c0032e 	bgeu	r2,r3,46f8 <xTaskNotifyFromISR+0x13c>
    46ec:	e0bffa17 	ldw	r2,-24(fp)
    46f0:	10800b17 	ldw	r2,44(r2)
    46f4:	d0a02e15 	stw	r2,-32584(gp)
    46f8:	e0bffa17 	ldw	r2,-24(fp)
    46fc:	10800b17 	ldw	r2,44(r2)
    4700:	10800524 	muli	r2,r2,20
    4704:	1007883a 	mov	r3,r2
    4708:	00820234 	movhi	r2,2056
    470c:	10bea704 	addi	r2,r2,-1380
    4710:	1889883a 	add	r4,r3,r2
    4714:	e0bffa17 	ldw	r2,-24(fp)
    4718:	11400104 	addi	r5,r2,4
    471c:	000149c0 	call	149c <vListInsertEnd>
    4720:	00000506 	br	4738 <xTaskNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4724:	e0bffa17 	ldw	r2,-24(fp)
    4728:	11400604 	addi	r5,r2,24
    472c:	01020234 	movhi	r4,2056
    4730:	213eed04 	addi	r4,r4,-1100
    4734:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4738:	e0bffa17 	ldw	r2,-24(fp)
    473c:	10c00b17 	ldw	r3,44(r2)
    4740:	d0a02a17 	ldw	r2,-32600(gp)
    4744:	10800b17 	ldw	r2,44(r2)
    4748:	10c0062e 	bgeu	r2,r3,4764 <xTaskNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    474c:	e0bffe17 	ldw	r2,-8(fp)
    4750:	1005003a 	cmpeq	r2,r2,zero
    4754:	1000031e 	bne	r2,zero,4764 <xTaskNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4758:	e0fffe17 	ldw	r3,-8(fp)
    475c:	00800044 	movi	r2,1
    4760:	18800015 	stw	r2,0(r3)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    4764:	e0bff817 	ldw	r2,-32(fp)
	}
    4768:	e037883a 	mov	sp,fp
    476c:	dfc00117 	ldw	ra,4(sp)
    4770:	df000017 	ldw	fp,0(sp)
    4774:	dec00204 	addi	sp,sp,8
    4778:	f800283a 	ret

0000477c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    477c:	defff904 	addi	sp,sp,-28
    4780:	dfc00615 	stw	ra,24(sp)
    4784:	df000515 	stw	fp,20(sp)
    4788:	df000504 	addi	fp,sp,20
    478c:	e13ffe15 	stw	r4,-8(fp)
    4790:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4794:	e0bffe17 	ldw	r2,-8(fp)
    4798:	e0bffd15 	stw	r2,-12(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    479c:	e03ffb15 	stw	zero,-20(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    47a0:	e0bffd17 	ldw	r2,-12(fp)
    47a4:	10801317 	ldw	r2,76(r2)
    47a8:	e0bffc15 	stw	r2,-16(fp)
			pxTCB->eNotifyState = eNotified;
    47ac:	e0fffd17 	ldw	r3,-12(fp)
    47b0:	00800084 	movi	r2,2
    47b4:	18801315 	stw	r2,76(r3)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    47b8:	e0bffd17 	ldw	r2,-12(fp)
    47bc:	10801217 	ldw	r2,72(r2)
    47c0:	10c00044 	addi	r3,r2,1
    47c4:	e0bffd17 	ldw	r2,-12(fp)
    47c8:	10c01215 	stw	r3,72(r2)

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10800058 	cmpnei	r2,r2,1
    47d4:	1000281e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47d8:	d0a03417 	ldw	r2,-32560(gp)
    47dc:	1004c03a 	cmpne	r2,r2,zero
    47e0:	1000151e 	bne	r2,zero,4838 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    47e4:	e0bffd17 	ldw	r2,-12(fp)
    47e8:	11000104 	addi	r4,r2,4
    47ec:	00015f80 	call	15f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    47f0:	e0bffd17 	ldw	r2,-12(fp)
    47f4:	10c00b17 	ldw	r3,44(r2)
    47f8:	d0a02e17 	ldw	r2,-32584(gp)
    47fc:	10c0032e 	bgeu	r2,r3,480c <vTaskNotifyGiveFromISR+0x90>
    4800:	e0bffd17 	ldw	r2,-12(fp)
    4804:	10800b17 	ldw	r2,44(r2)
    4808:	d0a02e15 	stw	r2,-32584(gp)
    480c:	e0bffd17 	ldw	r2,-12(fp)
    4810:	10800b17 	ldw	r2,44(r2)
    4814:	10800524 	muli	r2,r2,20
    4818:	1007883a 	mov	r3,r2
    481c:	00820234 	movhi	r2,2056
    4820:	10bea704 	addi	r2,r2,-1380
    4824:	1889883a 	add	r4,r3,r2
    4828:	e0bffd17 	ldw	r2,-12(fp)
    482c:	11400104 	addi	r5,r2,4
    4830:	000149c0 	call	149c <vListInsertEnd>
    4834:	00000506 	br	484c <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4838:	e0bffd17 	ldw	r2,-12(fp)
    483c:	11400604 	addi	r5,r2,24
    4840:	01020234 	movhi	r4,2056
    4844:	213eed04 	addi	r4,r4,-1100
    4848:	000149c0 	call	149c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10c00b17 	ldw	r3,44(r2)
    4854:	d0a02a17 	ldw	r2,-32600(gp)
    4858:	10800b17 	ldw	r2,44(r2)
    485c:	10c0062e 	bgeu	r2,r3,4878 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	1005003a 	cmpeq	r2,r2,zero
    4868:	1000031e 	bne	r2,zero,4878 <vTaskNotifyGiveFromISR+0xfc>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    486c:	e0ffff17 	ldw	r3,-4(fp)
    4870:	00800044 	movi	r2,1
    4874:	18800015 	stw	r2,0(r3)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4878:	e037883a 	mov	sp,fp
    487c:	dfc00117 	ldw	ra,4(sp)
    4880:	df000017 	ldw	fp,0(sp)
    4884:	dec00204 	addi	sp,sp,8
    4888:	f800283a 	ret

0000488c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    488c:	defff904 	addi	sp,sp,-28
    4890:	dfc00615 	stw	ra,24(sp)
    4894:	df000515 	stw	fp,20(sp)
    4898:	df000504 	addi	fp,sp,20
BaseType_t xReturn = pdFAIL;
    489c:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    48a0:	00050440 	call	5044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    48a4:	d0a03717 	ldw	r2,-32548(gp)
    48a8:	1005003a 	cmpeq	r2,r2,zero
    48ac:	10000d1e 	bne	r2,zero,48e4 <xTimerCreateTimerTask+0x58>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    48b0:	008000c4 	movi	r2,3
    48b4:	d8800015 	stw	r2,0(sp)
    48b8:	d8000115 	stw	zero,4(sp)
    48bc:	d8000215 	stw	zero,8(sp)
    48c0:	d8000315 	stw	zero,12(sp)
    48c4:	01000034 	movhi	r4,0
    48c8:	2112d404 	addi	r4,r4,19280
    48cc:	01420034 	movhi	r5,2048
    48d0:	29401404 	addi	r5,r5,80
    48d4:	01820004 	movi	r6,2048
    48d8:	000f883a 	mov	r7,zero
    48dc:	0002bf80 	call	2bf8 <xTaskGenericCreate>
    48e0:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    48e4:	e0bfff17 	ldw	r2,-4(fp)
}
    48e8:	e037883a 	mov	sp,fp
    48ec:	dfc00117 	ldw	ra,4(sp)
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00204 	addi	sp,sp,8
    48f8:	f800283a 	ret

000048fc <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    48fc:	defff904 	addi	sp,sp,-28
    4900:	dfc00615 	stw	ra,24(sp)
    4904:	df000515 	stw	fp,20(sp)
    4908:	df000504 	addi	fp,sp,20
    490c:	e13ffc15 	stw	r4,-16(fp)
    4910:	e17ffd15 	stw	r5,-12(fp)
    4914:	e1bffe15 	stw	r6,-8(fp)
    4918:	e1ffff15 	stw	r7,-4(fp)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1004c03a 	cmpne	r2,r2,zero
    4924:	1000021e 	bne	r2,zero,4930 <xTimerCreate+0x34>
	{
		pxNewTimer = NULL;
    4928:	e03ffb15 	stw	zero,-20(fp)
    492c:	00001906 	br	4994 <xTimerCreate+0x98>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4930:	01000a04 	movi	r4,40
    4934:	0000fbc0 	call	fbc <pvPortMalloc>
    4938:	e0bffb15 	stw	r2,-20(fp)
		if( pxNewTimer != NULL )
    493c:	e0bffb17 	ldw	r2,-20(fp)
    4940:	1005003a 	cmpeq	r2,r2,zero
    4944:	1000131e 	bne	r2,zero,4994 <xTimerCreate+0x98>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    4948:	00050440 	call	5044 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    494c:	e0fffb17 	ldw	r3,-20(fp)
    4950:	e0bffc17 	ldw	r2,-16(fp)
    4954:	18800015 	stw	r2,0(r3)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4958:	e0fffb17 	ldw	r3,-20(fp)
    495c:	e0bffd17 	ldw	r2,-12(fp)
    4960:	18800615 	stw	r2,24(r3)
			pxNewTimer->uxAutoReload = uxAutoReload;
    4964:	e0fffb17 	ldw	r3,-20(fp)
    4968:	e0bffe17 	ldw	r2,-8(fp)
    496c:	18800715 	stw	r2,28(r3)
			pxNewTimer->pvTimerID = pvTimerID;
    4970:	e0fffb17 	ldw	r3,-20(fp)
    4974:	e0bfff17 	ldw	r2,-4(fp)
    4978:	18800815 	stw	r2,32(r3)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    497c:	e0fffb17 	ldw	r3,-20(fp)
    4980:	e0800217 	ldw	r2,8(fp)
    4984:	18800915 	stw	r2,36(r3)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    4988:	e0bffb17 	ldw	r2,-20(fp)
    498c:	11000104 	addi	r4,r2,4
    4990:	00014740 	call	1474 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
    4994:	e0bffb17 	ldw	r2,-20(fp)
}
    4998:	e037883a 	mov	sp,fp
    499c:	dfc00117 	ldw	ra,4(sp)
    49a0:	df000017 	ldw	fp,0(sp)
    49a4:	dec00204 	addi	sp,sp,8
    49a8:	f800283a 	ret

000049ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    49ac:	defff604 	addi	sp,sp,-40
    49b0:	dfc00915 	stw	ra,36(sp)
    49b4:	df000815 	stw	fp,32(sp)
    49b8:	df000804 	addi	fp,sp,32
    49bc:	e13ffc15 	stw	r4,-16(fp)
    49c0:	e17ffd15 	stw	r5,-12(fp)
    49c4:	e1bffe15 	stw	r6,-8(fp)
    49c8:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
    49cc:	e03ff815 	stw	zero,-32(fp)
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    49d0:	d0a03717 	ldw	r2,-32548(gp)
    49d4:	1005003a 	cmpeq	r2,r2,zero
    49d8:	1000201e 	bne	r2,zero,4a5c <xTimerGenericCommand+0xb0>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    49dc:	e0bffd17 	ldw	r2,-12(fp)
    49e0:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    49e4:	e0bffe17 	ldw	r2,-8(fp)
    49e8:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    49ec:	e0bffc17 	ldw	r2,-16(fp)
    49f0:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	10800188 	cmpgei	r2,r2,6
    49fc:	1000111e 	bne	r2,zero,4a44 <xTimerGenericCommand+0x98>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a00:	0003e940 	call	3e94 <xTaskGetSchedulerState>
    4a04:	10800098 	cmpnei	r2,r2,2
    4a08:	1000071e 	bne	r2,zero,4a28 <xTimerGenericCommand+0x7c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4a0c:	d1203717 	ldw	r4,-32548(gp)
    4a10:	e17ff904 	addi	r5,fp,-28
    4a14:	e1800217 	ldw	r6,8(fp)
    4a18:	000f883a 	mov	r7,zero
    4a1c:	0001f100 	call	1f10 <xQueueGenericSend>
    4a20:	e0bff815 	stw	r2,-32(fp)
    4a24:	00000d06 	br	4a5c <xTimerGenericCommand+0xb0>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4a28:	d1203717 	ldw	r4,-32548(gp)
    4a2c:	e17ff904 	addi	r5,fp,-28
    4a30:	000d883a 	mov	r6,zero
    4a34:	000f883a 	mov	r7,zero
    4a38:	0001f100 	call	1f10 <xQueueGenericSend>
    4a3c:	e0bff815 	stw	r2,-32(fp)
    4a40:	00000606 	br	4a5c <xTimerGenericCommand+0xb0>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4a44:	d1203717 	ldw	r4,-32548(gp)
    4a48:	e17ff904 	addi	r5,fp,-28
    4a4c:	e1bfff17 	ldw	r6,-4(fp)
    4a50:	000f883a 	mov	r7,zero
    4a54:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
    4a58:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    4a5c:	e0bff817 	ldw	r2,-32(fp)
}
    4a60:	e037883a 	mov	sp,fp
    4a64:	dfc00117 	ldw	ra,4(sp)
    4a68:	df000017 	ldw	fp,0(sp)
    4a6c:	dec00204 	addi	sp,sp,8
    4a70:	f800283a 	ret

00004a74 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
    4a74:	defffd04 	addi	sp,sp,-12
    4a78:	df000215 	stw	fp,8(sp)
    4a7c:	df000204 	addi	fp,sp,8
    4a80:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    4a84:	e0bfff17 	ldw	r2,-4(fp)
    4a88:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pcTimerName;
    4a8c:	e0bffe17 	ldw	r2,-8(fp)
    4a90:	10800017 	ldw	r2,0(r2)
}
    4a94:	e037883a 	mov	sp,fp
    4a98:	df000017 	ldw	fp,0(sp)
    4a9c:	dec00104 	addi	sp,sp,4
    4aa0:	f800283a 	ret

00004aa4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    4aa4:	defff904 	addi	sp,sp,-28
    4aa8:	dfc00615 	stw	ra,24(sp)
    4aac:	df000515 	stw	fp,20(sp)
    4ab0:	df000504 	addi	fp,sp,20
    4ab4:	e13ffe15 	stw	r4,-8(fp)
    4ab8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4abc:	d0a03917 	ldw	r2,-32540(gp)
    4ac0:	10800317 	ldw	r2,12(r2)
    4ac4:	10800317 	ldw	r2,12(r2)
    4ac8:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4acc:	e0bffc17 	ldw	r2,-16(fp)
    4ad0:	11000104 	addi	r4,r2,4
    4ad4:	00015f80 	call	15f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4ad8:	e0bffc17 	ldw	r2,-16(fp)
    4adc:	10800717 	ldw	r2,28(r2)
    4ae0:	10800058 	cmpnei	r2,r2,1
    4ae4:	1000111e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    4ae8:	e0bffc17 	ldw	r2,-16(fp)
    4aec:	10c00617 	ldw	r3,24(r2)
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	188b883a 	add	r5,r3,r2
    4af8:	e13ffc17 	ldw	r4,-16(fp)
    4afc:	e1bfff17 	ldw	r6,-4(fp)
    4b00:	e1fffe17 	ldw	r7,-8(fp)
    4b04:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4b08:	10800058 	cmpnei	r2,r2,1
    4b0c:	1000071e 	bne	r2,zero,4b2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4b10:	d8000015 	stw	zero,0(sp)
    4b14:	e13ffc17 	ldw	r4,-16(fp)
    4b18:	000b883a 	mov	r5,zero
    4b1c:	e1bffe17 	ldw	r6,-8(fp)
    4b20:	000f883a 	mov	r7,zero
    4b24:	00049ac0 	call	49ac <xTimerGenericCommand>
    4b28:	e0bffd15 	stw	r2,-12(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4b2c:	e0bffc17 	ldw	r2,-16(fp)
    4b30:	10800917 	ldw	r2,36(r2)
    4b34:	e13ffc17 	ldw	r4,-16(fp)
    4b38:	103ee83a 	callr	r2
}
    4b3c:	e037883a 	mov	sp,fp
    4b40:	dfc00117 	ldw	ra,4(sp)
    4b44:	df000017 	ldw	fp,0(sp)
    4b48:	dec00204 	addi	sp,sp,8
    4b4c:	f800283a 	ret

00004b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4b50:	defffb04 	addi	sp,sp,-20
    4b54:	dfc00415 	stw	ra,16(sp)
    4b58:	df000315 	stw	fp,12(sp)
    4b5c:	df000304 	addi	fp,sp,12
    4b60:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    4b64:	e13ffe04 	addi	r4,fp,-8
    4b68:	0004c240 	call	4c24 <prvGetNextExpireTime>
    4b6c:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    4b70:	e17ffe17 	ldw	r5,-8(fp)
    4b74:	e13ffd17 	ldw	r4,-12(fp)
    4b78:	0004b840 	call	4b84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    4b7c:	0004db40 	call	4db4 <prvProcessReceivedCommands>
	}
    4b80:	003ff806 	br	4b64 <prvTimerTask+0x14>

00004b84 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    4b84:	defffa04 	addi	sp,sp,-24
    4b88:	dfc00515 	stw	ra,20(sp)
    4b8c:	df000415 	stw	fp,16(sp)
    4b90:	df000404 	addi	fp,sp,16
    4b94:	e13ffe15 	stw	r4,-8(fp)
    4b98:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4b9c:	0002ff00 	call	2ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4ba0:	e13ffd04 	addi	r4,fp,-12
    4ba4:	0004c840 	call	4c84 <prvSampleTimeNow>
    4ba8:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
    4bac:	e0bffd17 	ldw	r2,-12(fp)
    4bb0:	1004c03a 	cmpne	r2,r2,zero
    4bb4:	1000151e 	bne	r2,zero,4c0c <prvProcessTimerOrBlockTask+0x88>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4bb8:	e0bfff17 	ldw	r2,-4(fp)
    4bbc:	1004c03a 	cmpne	r2,r2,zero
    4bc0:	1000081e 	bne	r2,zero,4be4 <prvProcessTimerOrBlockTask+0x60>
    4bc4:	e0fffe17 	ldw	r3,-8(fp)
    4bc8:	e0bffc17 	ldw	r2,-16(fp)
    4bcc:	10c00536 	bltu	r2,r3,4be4 <prvProcessTimerOrBlockTask+0x60>
			{
				( void ) xTaskResumeAll();
    4bd0:	00030180 	call	3018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4bd4:	e13ffe17 	ldw	r4,-8(fp)
    4bd8:	e17ffc17 	ldw	r5,-16(fp)
    4bdc:	0004aa40 	call	4aa4 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4be0:	00000b06 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4be4:	d1203717 	ldw	r4,-32548(gp)
    4be8:	e0fffe17 	ldw	r3,-8(fp)
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	188bc83a 	sub	r5,r3,r2
    4bf4:	0002b640 	call	2b64 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    4bf8:	00030180 	call	3018 <xTaskResumeAll>
    4bfc:	1004c03a 	cmpne	r2,r2,zero
    4c00:	1000031e 	bne	r2,zero,4c10 <prvProcessTimerOrBlockTask+0x8c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    4c04:	003b683a 	trap	0
    4c08:	00000106 	br	4c10 <prvProcessTimerOrBlockTask+0x8c>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4c0c:	00030180 	call	3018 <xTaskResumeAll>
		}
	}
}
    4c10:	e037883a 	mov	sp,fp
    4c14:	dfc00117 	ldw	ra,4(sp)
    4c18:	df000017 	ldw	fp,0(sp)
    4c1c:	dec00204 	addi	sp,sp,8
    4c20:	f800283a 	ret

00004c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    4c24:	defffd04 	addi	sp,sp,-12
    4c28:	df000215 	stw	fp,8(sp)
    4c2c:	df000204 	addi	fp,sp,8
    4c30:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4c34:	d0a03917 	ldw	r2,-32540(gp)
    4c38:	10800017 	ldw	r2,0(r2)
    4c3c:	1007003a 	cmpeq	r3,r2,zero
    4c40:	e0bfff17 	ldw	r2,-4(fp)
    4c44:	10c00015 	stw	r3,0(r2)
	if( *pxListWasEmpty == pdFALSE )
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	10800017 	ldw	r2,0(r2)
    4c50:	1004c03a 	cmpne	r2,r2,zero
    4c54:	1000051e 	bne	r2,zero,4c6c <prvGetNextExpireTime+0x48>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4c58:	d0a03917 	ldw	r2,-32540(gp)
    4c5c:	10800317 	ldw	r2,12(r2)
    4c60:	10800017 	ldw	r2,0(r2)
    4c64:	e0bffe15 	stw	r2,-8(fp)
    4c68:	00000106 	br	4c70 <prvGetNextExpireTime+0x4c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4c6c:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
    4c70:	e0bffe17 	ldw	r2,-8(fp)
}
    4c74:	e037883a 	mov	sp,fp
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00104 	addi	sp,sp,4
    4c80:	f800283a 	ret

00004c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4c84:	defffc04 	addi	sp,sp,-16
    4c88:	dfc00315 	stw	ra,12(sp)
    4c8c:	df000215 	stw	fp,8(sp)
    4c90:	df000204 	addi	fp,sp,8
    4c94:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    4c98:	00031680 	call	3168 <xTaskGetTickCount>
    4c9c:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
    4ca0:	d0e03817 	ldw	r3,-32544(gp)
    4ca4:	e0bffe17 	ldw	r2,-8(fp)
    4ca8:	10c0052e 	bgeu	r2,r3,4cc0 <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
    4cac:	0004f400 	call	4f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    4cb0:	e0ffff17 	ldw	r3,-4(fp)
    4cb4:	00800044 	movi	r2,1
    4cb8:	18800015 	stw	r2,0(r3)
    4cbc:	00000206 	br	4cc8 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4cc0:	e0bfff17 	ldw	r2,-4(fp)
    4cc4:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
    4cc8:	e0bffe17 	ldw	r2,-8(fp)
    4ccc:	d0a03815 	stw	r2,-32544(gp)

	return xTimeNow;
    4cd0:	e0bffe17 	ldw	r2,-8(fp)
}
    4cd4:	e037883a 	mov	sp,fp
    4cd8:	dfc00117 	ldw	ra,4(sp)
    4cdc:	df000017 	ldw	fp,0(sp)
    4ce0:	dec00204 	addi	sp,sp,8
    4ce4:	f800283a 	ret

00004ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4ce8:	defff904 	addi	sp,sp,-28
    4cec:	dfc00615 	stw	ra,24(sp)
    4cf0:	df000515 	stw	fp,20(sp)
    4cf4:	df000504 	addi	fp,sp,20
    4cf8:	e13ffc15 	stw	r4,-16(fp)
    4cfc:	e17ffd15 	stw	r5,-12(fp)
    4d00:	e1bffe15 	stw	r6,-8(fp)
    4d04:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
    4d08:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4d0c:	e0fffc17 	ldw	r3,-16(fp)
    4d10:	e0bffd17 	ldw	r2,-12(fp)
    4d14:	18800115 	stw	r2,4(r3)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4d18:	e0fffc17 	ldw	r3,-16(fp)
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	18800415 	stw	r2,16(r3)

	if( xNextExpiryTime <= xTimeNow )
    4d24:	e0fffd17 	ldw	r3,-12(fp)
    4d28:	e0bffe17 	ldw	r2,-8(fp)
    4d2c:	10c00e36 	bltu	r2,r3,4d68 <prvInsertTimerInActiveList+0x80>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4d30:	e0fffe17 	ldw	r3,-8(fp)
    4d34:	e0bfff17 	ldw	r2,-4(fp)
    4d38:	1887c83a 	sub	r3,r3,r2
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	10800617 	ldw	r2,24(r2)
    4d44:	18800336 	bltu	r3,r2,4d54 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4d48:	00800044 	movi	r2,1
    4d4c:	e0bffb15 	stw	r2,-20(fp)
    4d50:	00001206 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4d54:	d1203a17 	ldw	r4,-32536(gp)
    4d58:	e0bffc17 	ldw	r2,-16(fp)
    4d5c:	11400104 	addi	r5,r2,4
    4d60:	00015240 	call	1524 <vListInsert>
    4d64:	00000d06 	br	4d9c <prvInsertTimerInActiveList+0xb4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d68:	e0fffe17 	ldw	r3,-8(fp)
    4d6c:	e0bfff17 	ldw	r2,-4(fp)
    4d70:	1880062e 	bgeu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
    4d74:	e0fffd17 	ldw	r3,-12(fp)
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	18800336 	bltu	r3,r2,4d8c <prvInsertTimerInActiveList+0xa4>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4d80:	00800044 	movi	r2,1
    4d84:	e0bffb15 	stw	r2,-20(fp)
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d88:	00000406 	br	4d9c <prvInsertTimerInActiveList+0xb4>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d8c:	d1203917 	ldw	r4,-32540(gp)
    4d90:	e0bffc17 	ldw	r2,-16(fp)
    4d94:	11400104 	addi	r5,r2,4
    4d98:	00015240 	call	1524 <vListInsert>
		}
	}

	return xProcessTimerNow;
    4d9c:	e0bffb17 	ldw	r2,-20(fp)
}
    4da0:	e037883a 	mov	sp,fp
    4da4:	dfc00117 	ldw	ra,4(sp)
    4da8:	df000017 	ldw	fp,0(sp)
    4dac:	dec00204 	addi	sp,sp,8
    4db0:	f800283a 	ret

00004db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    4db4:	defff504 	addi	sp,sp,-44
    4db8:	dfc00a15 	stw	ra,40(sp)
    4dbc:	df000915 	stw	fp,36(sp)
    4dc0:	df000904 	addi	fp,sp,36
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4dc4:	00005206 	br	4f10 <prvProcessReceivedCommands+0x15c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4dc8:	e0bffb17 	ldw	r2,-20(fp)
    4dcc:	1004803a 	cmplt	r2,r2,zero
    4dd0:	10004f1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4dd4:	e0bffd17 	ldw	r2,-12(fp)
    4dd8:	e0bffa15 	stw	r2,-24(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4ddc:	e0bffa17 	ldw	r2,-24(fp)
    4de0:	10800517 	ldw	r2,20(r2)
    4de4:	1005003a 	cmpeq	r2,r2,zero
    4de8:	1000031e 	bne	r2,zero,4df8 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4dec:	e0bffa17 	ldw	r2,-24(fp)
    4df0:	11000104 	addi	r4,r2,4
    4df4:	00015f80 	call	15f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4df8:	e13ffe04 	addi	r4,fp,-8
    4dfc:	0004c840 	call	4c84 <prvSampleTimeNow>
    4e00:	e0bff815 	stw	r2,-32(fp)

			switch( xMessage.xMessageID )
    4e04:	e0bffb17 	ldw	r2,-20(fp)
    4e08:	e0bfff15 	stw	r2,-4(fp)
    4e0c:	e0ffff17 	ldw	r3,-4(fp)
    4e10:	188002a8 	cmpgeui	r2,r3,10
    4e14:	10003e1e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
    4e18:	e13fff17 	ldw	r4,-4(fp)
    4e1c:	e13fff17 	ldw	r4,-4(fp)
    4e20:	2105883a 	add	r2,r4,r4
    4e24:	1087883a 	add	r3,r2,r2
    4e28:	00800034 	movhi	r2,0
    4e2c:	10938f04 	addi	r2,r2,20028
    4e30:	1885883a 	add	r2,r3,r2
    4e34:	10800017 	ldw	r2,0(r2)
    4e38:	1000683a 	jmp	r2
    4e3c:	00004e64 	muli	zero,zero,313
    4e40:	00004e64 	muli	zero,zero,313
    4e44:	00004e64 	muli	zero,zero,313
    4e48:	00004f10 	cmplti	zero,zero,316
    4e4c:	00004ed8 	cmpnei	zero,zero,315
    4e50:	00004f08 	cmpgei	zero,zero,316
    4e54:	00004e64 	muli	zero,zero,313
    4e58:	00004e64 	muli	zero,zero,313
    4e5c:	00004f10 	cmplti	zero,zero,316
    4e60:	00004ed8 	cmpnei	zero,zero,315
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4e64:	e0fffc17 	ldw	r3,-16(fp)
    4e68:	e0bffa17 	ldw	r2,-24(fp)
    4e6c:	10800617 	ldw	r2,24(r2)
    4e70:	188b883a 	add	r5,r3,r2
    4e74:	e1fffc17 	ldw	r7,-16(fp)
    4e78:	e13ffa17 	ldw	r4,-24(fp)
    4e7c:	e1bff817 	ldw	r6,-32(fp)
    4e80:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
    4e84:	10800058 	cmpnei	r2,r2,1
    4e88:	1000211e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e8c:	e0bffa17 	ldw	r2,-24(fp)
    4e90:	10800917 	ldw	r2,36(r2)
    4e94:	e13ffa17 	ldw	r4,-24(fp)
    4e98:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4e9c:	e0bffa17 	ldw	r2,-24(fp)
    4ea0:	10800717 	ldw	r2,28(r2)
    4ea4:	10800058 	cmpnei	r2,r2,1
    4ea8:	1000191e 	bne	r2,zero,4f10 <prvProcessReceivedCommands+0x15c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4eac:	e0fffc17 	ldw	r3,-16(fp)
    4eb0:	e0bffa17 	ldw	r2,-24(fp)
    4eb4:	10800617 	ldw	r2,24(r2)
    4eb8:	188d883a 	add	r6,r3,r2
    4ebc:	d8000015 	stw	zero,0(sp)
    4ec0:	e13ffa17 	ldw	r4,-24(fp)
    4ec4:	000b883a 	mov	r5,zero
    4ec8:	000f883a 	mov	r7,zero
    4ecc:	00049ac0 	call	49ac <xTimerGenericCommand>
    4ed0:	e0bff915 	stw	r2,-28(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    4ed4:	00000e06 	br	4f10 <prvProcessReceivedCommands+0x15c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4ed8:	e0fffc17 	ldw	r3,-16(fp)
    4edc:	e0bffa17 	ldw	r2,-24(fp)
    4ee0:	10c00615 	stw	r3,24(r2)
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4ee4:	e0bffa17 	ldw	r2,-24(fp)
    4ee8:	10c00617 	ldw	r3,24(r2)
    4eec:	e0bff817 	ldw	r2,-32(fp)
    4ef0:	188b883a 	add	r5,r3,r2
    4ef4:	e13ffa17 	ldw	r4,-24(fp)
    4ef8:	e1bff817 	ldw	r6,-32(fp)
    4efc:	e1fff817 	ldw	r7,-32(fp)
    4f00:	0004ce80 	call	4ce8 <prvInsertTimerInActiveList>
					break;
    4f04:	00000206 	br	4f10 <prvProcessReceivedCommands+0x15c>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4f08:	e13ffa17 	ldw	r4,-24(fp)
    4f0c:	00011500 	call	1150 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4f10:	d1203717 	ldw	r4,-32548(gp)
    4f14:	e17ffb04 	addi	r5,fp,-20
    4f18:	000d883a 	mov	r6,zero
    4f1c:	000f883a 	mov	r7,zero
    4f20:	00022800 	call	2280 <xQueueGenericReceive>
    4f24:	1004c03a 	cmpne	r2,r2,zero
    4f28:	103fa71e 	bne	r2,zero,4dc8 <prvProcessReceivedCommands+0x14>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    4f2c:	e037883a 	mov	sp,fp
    4f30:	dfc00117 	ldw	ra,4(sp)
    4f34:	df000017 	ldw	fp,0(sp)
    4f38:	dec00204 	addi	sp,sp,8
    4f3c:	f800283a 	ret

00004f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4f40:	defff804 	addi	sp,sp,-32
    4f44:	dfc00715 	stw	ra,28(sp)
    4f48:	df000615 	stw	fp,24(sp)
    4f4c:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4f50:	00002d06 	br	5008 <prvSwitchTimerLists+0xc8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f54:	d0a03917 	ldw	r2,-32540(gp)
    4f58:	10800317 	ldw	r2,12(r2)
    4f5c:	10800017 	ldw	r2,0(r2)
    4f60:	e0bfff15 	stw	r2,-4(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f64:	d0a03917 	ldw	r2,-32540(gp)
    4f68:	10800317 	ldw	r2,12(r2)
    4f6c:	10800317 	ldw	r2,12(r2)
    4f70:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4f74:	e0bffc17 	ldw	r2,-16(fp)
    4f78:	11000104 	addi	r4,r2,4
    4f7c:	00015f80 	call	15f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4f80:	e0bffc17 	ldw	r2,-16(fp)
    4f84:	10800917 	ldw	r2,36(r2)
    4f88:	e13ffc17 	ldw	r4,-16(fp)
    4f8c:	103ee83a 	callr	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	10800717 	ldw	r2,28(r2)
    4f98:	10800058 	cmpnei	r2,r2,1
    4f9c:	10001a1e 	bne	r2,zero,5008 <prvSwitchTimerLists+0xc8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4fa0:	e0bffc17 	ldw	r2,-16(fp)
    4fa4:	10c00617 	ldw	r3,24(r2)
    4fa8:	e0bfff17 	ldw	r2,-4(fp)
    4fac:	1885883a 	add	r2,r3,r2
    4fb0:	e0bffe15 	stw	r2,-8(fp)
			if( xReloadTime > xNextExpireTime )
    4fb4:	e0fffe17 	ldw	r3,-8(fp)
    4fb8:	e0bfff17 	ldw	r2,-4(fp)
    4fbc:	10c00b2e 	bgeu	r2,r3,4fec <prvSwitchTimerLists+0xac>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4fc0:	e0fffc17 	ldw	r3,-16(fp)
    4fc4:	e0bffe17 	ldw	r2,-8(fp)
    4fc8:	18800115 	stw	r2,4(r3)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4fcc:	e0fffc17 	ldw	r3,-16(fp)
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	18800415 	stw	r2,16(r3)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4fd8:	d1203917 	ldw	r4,-32540(gp)
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	11400104 	addi	r5,r2,4
    4fe4:	00015240 	call	1524 <vListInsert>
    4fe8:	00000706 	br	5008 <prvSwitchTimerLists+0xc8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fec:	d8000015 	stw	zero,0(sp)
    4ff0:	e13ffc17 	ldw	r4,-16(fp)
    4ff4:	000b883a 	mov	r5,zero
    4ff8:	e1bfff17 	ldw	r6,-4(fp)
    4ffc:	000f883a 	mov	r7,zero
    5000:	00049ac0 	call	49ac <xTimerGenericCommand>
    5004:	e0bffb15 	stw	r2,-20(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5008:	d0a03917 	ldw	r2,-32540(gp)
    500c:	10800017 	ldw	r2,0(r2)
    5010:	1004c03a 	cmpne	r2,r2,zero
    5014:	103fcf1e 	bne	r2,zero,4f54 <prvSwitchTimerLists+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    5018:	d0a03917 	ldw	r2,-32540(gp)
    501c:	e0bffd15 	stw	r2,-12(fp)
	pxCurrentTimerList = pxOverflowTimerList;
    5020:	d0a03a17 	ldw	r2,-32536(gp)
    5024:	d0a03915 	stw	r2,-32540(gp)
	pxOverflowTimerList = pxTemp;
    5028:	e0bffd17 	ldw	r2,-12(fp)
    502c:	d0a03a15 	stw	r2,-32536(gp)
}
    5030:	e037883a 	mov	sp,fp
    5034:	dfc00117 	ldw	ra,4(sp)
    5038:	df000017 	ldw	fp,0(sp)
    503c:	dec00204 	addi	sp,sp,8
    5040:	f800283a 	ret

00005044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5044:	defffe04 	addi	sp,sp,-8
    5048:	dfc00115 	stw	ra,4(sp)
    504c:	df000015 	stw	fp,0(sp)
    5050:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5054:	00041140 	call	4114 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
    5058:	d0a03717 	ldw	r2,-32548(gp)
    505c:	1004c03a 	cmpne	r2,r2,zero
    5060:	1000111e 	bne	r2,zero,50a8 <prvCheckForValidListAndQueue+0x64>
		{
			vListInitialise( &xActiveTimerList1 );
    5064:	01020234 	movhi	r4,2056
    5068:	213ef704 	addi	r4,r4,-1060
    506c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5070:	01020234 	movhi	r4,2056
    5074:	213efc04 	addi	r4,r4,-1040
    5078:	00014040 	call	1404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    507c:	00820234 	movhi	r2,2056
    5080:	10bef704 	addi	r2,r2,-1060
    5084:	d0a03915 	stw	r2,-32540(gp)
			pxOverflowTimerList = &xActiveTimerList2;
    5088:	00820234 	movhi	r2,2056
    508c:	10befc04 	addi	r2,r2,-1040
    5090:	d0a03a15 	stw	r2,-32536(gp)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5094:	01000284 	movi	r4,10
    5098:	01400304 	movi	r5,12
    509c:	000d883a 	mov	r6,zero
    50a0:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    50a4:	d0a03715 	stw	r2,-32548(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    50a8:	00041680 	call	4168 <vTaskExitCritical>
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	dfc00117 	ldw	ra,4(sp)
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00204 	addi	sp,sp,8
    50bc:	f800283a 	ret

000050c0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    50c0:	defffb04 	addi	sp,sp,-20
    50c4:	dfc00415 	stw	ra,16(sp)
    50c8:	df000315 	stw	fp,12(sp)
    50cc:	df000304 	addi	fp,sp,12
    50d0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    50d4:	e0bfff17 	ldw	r2,-4(fp)
    50d8:	e0bffd15 	stw	r2,-12(fp)

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    50dc:	00041140 	call	4114 <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    50e0:	e0bffd17 	ldw	r2,-12(fp)
    50e4:	10800517 	ldw	r2,20(r2)
    50e8:	1004c03a 	cmpne	r2,r2,zero
    50ec:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    50f0:	00041680 	call	4168 <vTaskExitCritical>

	return xTimerIsInActiveList;
    50f4:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
    50f8:	e037883a 	mov	sp,fp
    50fc:	dfc00117 	ldw	ra,4(sp)
    5100:	df000017 	ldw	fp,0(sp)
    5104:	dec00204 	addi	sp,sp,8
    5108:	f800283a 	ret

0000510c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    510c:	defffd04 	addi	sp,sp,-12
    5110:	df000215 	stw	fp,8(sp)
    5114:	df000204 	addi	fp,sp,8
    5118:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
    511c:	e0bfff17 	ldw	r2,-4(fp)
    5120:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pvTimerID;
    5124:	e0bffe17 	ldw	r2,-8(fp)
    5128:	10800817 	ldw	r2,32(r2)
}
    512c:	e037883a 	mov	sp,fp
    5130:	df000017 	ldw	fp,0(sp)
    5134:	dec00104 	addi	sp,sp,4
    5138:	f800283a 	ret

0000513c <PRVGADraw_Task>:
int timerCount = 0;


/****** VGA display ******/

void PRVGADraw_Task(void *pvParameters ){
    513c:	deffeb04 	addi	sp,sp,-84
    5140:	dfc01415 	stw	ra,80(sp)
    5144:	df001315 	stw	fp,76(sp)
    5148:	dc801215 	stw	r18,72(sp)
    514c:	dc401115 	stw	r17,68(sp)
    5150:	dc001015 	stw	r16,64(sp)
    5154:	df001004 	addi	fp,sp,64
    5158:	e13fff15 	stw	r4,-4(fp)


	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
    515c:	01020034 	movhi	r4,2048
    5160:	21002104 	addi	r4,r4,132
    5164:	0018c540 	call	18c54 <alt_up_pixel_buffer_dma_open_dev>
    5168:	e0bff615 	stw	r2,-40(fp)
	if(pixel_buf == NULL){
    516c:	e0bff617 	ldw	r2,-40(fp)
    5170:	1004c03a 	cmpne	r2,r2,zero
    5174:	1000031e 	bne	r2,zero,5184 <PRVGADraw_Task+0x48>
		printf("can't find pixel buffer device\n");
    5178:	01020034 	movhi	r4,2048
    517c:	21002804 	addi	r4,r4,160
    5180:	00085880 	call	8588 <puts>
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);
    5184:	e13ff617 	ldw	r4,-40(fp)
    5188:	000b883a 	mov	r5,zero
    518c:	0018f180 	call	18f18 <alt_up_pixel_buffer_dma_clear_screen>

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
    5190:	01020034 	movhi	r4,2048
    5194:	21003004 	addi	r4,r4,192
    5198:	00189d40 	call	189d4 <alt_up_char_buffer_open_dev>
    519c:	e0bff515 	stw	r2,-44(fp)
	if(char_buf == NULL){
    51a0:	e0bff517 	ldw	r2,-44(fp)
    51a4:	1004c03a 	cmpne	r2,r2,zero
    51a8:	1000031e 	bne	r2,zero,51b8 <PRVGADraw_Task+0x7c>
		printf("can't find char buffer device\n");
    51ac:	01020034 	movhi	r4,2048
    51b0:	21003a04 	addi	r4,r4,232
    51b4:	00085880 	call	8588 <puts>
	}
	alt_up_char_buffer_clear(char_buf);
    51b8:	e13ff517 	ldw	r4,-44(fp)
    51bc:	0018bf80 	call	18bf8 <alt_up_char_buffer_clear>



	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51c0:	00900034 	movhi	r2,16384
    51c4:	10bfffc4 	addi	r2,r2,-1
    51c8:	d8800015 	stw	r2,0(sp)
    51cc:	d8000115 	stw	zero,4(sp)
    51d0:	e13ff617 	ldw	r4,-40(fp)
    51d4:	01401904 	movi	r5,100
    51d8:	01809384 	movi	r6,590
    51dc:	01c03204 	movi	r7,200
    51e0:	00195700 	call	19570 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    51e4:	00900034 	movhi	r2,16384
    51e8:	10bfffc4 	addi	r2,r2,-1
    51ec:	d8800015 	stw	r2,0(sp)
    51f0:	d8000115 	stw	zero,4(sp)
    51f4:	e13ff617 	ldw	r4,-40(fp)
    51f8:	01401904 	movi	r5,100
    51fc:	01809384 	movi	r6,590
    5200:	01c04b04 	movi	r7,300
    5204:	00195700 	call	19570 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5208:	00900034 	movhi	r2,16384
    520c:	10bfffc4 	addi	r2,r2,-1
    5210:	d8800015 	stw	r2,0(sp)
    5214:	d8000115 	stw	zero,4(sp)
    5218:	e13ff617 	ldw	r4,-40(fp)
    521c:	01401904 	movi	r5,100
    5220:	01800c84 	movi	r6,50
    5224:	01c03204 	movi	r7,200
    5228:	00198c00 	call	198c0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    522c:	00900034 	movhi	r2,16384
    5230:	10bfffc4 	addi	r2,r2,-1
    5234:	d8800015 	stw	r2,0(sp)
    5238:	d8000115 	stw	zero,4(sp)
    523c:	e13ff617 	ldw	r4,-40(fp)
    5240:	01401904 	movi	r5,100
    5244:	01803704 	movi	r6,220
    5248:	01c04b04 	movi	r7,300
    524c:	00198c00 	call	198c0 <alt_up_pixel_buffer_dma_draw_vline>

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
    5250:	e13ff517 	ldw	r4,-44(fp)
    5254:	01420034 	movhi	r5,2048
    5258:	29404204 	addi	r5,r5,264
    525c:	01800104 	movi	r6,4
    5260:	01c00104 	movi	r7,4
    5264:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
    5268:	e13ff517 	ldw	r4,-44(fp)
    526c:	01420034 	movhi	r5,2048
    5270:	29404604 	addi	r5,r5,280
    5274:	01800284 	movi	r6,10
    5278:	01c001c4 	movi	r7,7
    527c:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
    5280:	e13ff517 	ldw	r4,-44(fp)
    5284:	01420034 	movhi	r5,2048
    5288:	29404704 	addi	r5,r5,284
    528c:	01800284 	movi	r6,10
    5290:	01c00304 	movi	r7,12
    5294:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
    5298:	e13ff517 	ldw	r4,-44(fp)
    529c:	01420034 	movhi	r5,2048
    52a0:	29404804 	addi	r5,r5,288
    52a4:	01800284 	movi	r6,10
    52a8:	01c00444 	movi	r7,17
    52ac:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "46", 10, 22);
    52b0:	e13ff517 	ldw	r4,-44(fp)
    52b4:	01420034 	movhi	r5,2048
    52b8:	29404904 	addi	r5,r5,292
    52bc:	01800284 	movi	r6,10
    52c0:	01c00584 	movi	r7,22
    52c4:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
    52c8:	e13ff517 	ldw	r4,-44(fp)
    52cc:	01420034 	movhi	r5,2048
    52d0:	29404a04 	addi	r5,r5,296
    52d4:	01800104 	movi	r6,4
    52d8:	01c00684 	movi	r7,26
    52dc:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
    52e0:	e13ff517 	ldw	r4,-44(fp)
    52e4:	01420034 	movhi	r5,2048
    52e8:	29404d04 	addi	r5,r5,308
    52ec:	01800284 	movi	r6,10
    52f0:	01c00704 	movi	r7,28
    52f4:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
    52f8:	e13ff517 	ldw	r4,-44(fp)
    52fc:	01420034 	movhi	r5,2048
    5300:	29404e04 	addi	r5,r5,312
    5304:	01800284 	movi	r6,10
    5308:	01c00784 	movi	r7,30
    530c:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
    5310:	e13ff517 	ldw	r4,-44(fp)
    5314:	01420034 	movhi	r5,2048
    5318:	29404f04 	addi	r5,r5,316
    531c:	01800284 	movi	r6,10
    5320:	01c00804 	movi	r7,32
    5324:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
    5328:	e13ff517 	ldw	r4,-44(fp)
    532c:	01420034 	movhi	r5,2048
    5330:	29405004 	addi	r5,r5,320
    5334:	01800244 	movi	r6,9
    5338:	01c00884 	movi	r7,34
    533c:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);
    5340:	e13ff517 	ldw	r4,-44(fp)
    5344:	01420034 	movhi	r5,2048
    5348:	29405104 	addi	r5,r5,324
    534c:	01800244 	movi	r6,9
    5350:	01c00904 	movi	r7,36
    5354:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "Frequency threshold:", 4, 46);
    5358:	e13ff517 	ldw	r4,-44(fp)
    535c:	01420034 	movhi	r5,2048
    5360:	29405204 	addi	r5,r5,328
    5364:	01800104 	movi	r6,4
    5368:	01c00b84 	movi	r7,46
    536c:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>


	alt_up_char_buffer_string(char_buf, "RoC threshold:", 4, 50);
    5370:	e13ff517 	ldw	r4,-44(fp)
    5374:	01420034 	movhi	r5,2048
    5378:	29405804 	addi	r5,r5,352
    537c:	01800104 	movi	r6,4
    5380:	01c00c84 	movi	r7,50
    5384:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>



	int i = 99, j = 0;
    5388:	008018c4 	movi	r2,99
    538c:	e0bff415 	stw	r2,-48(fp)
    5390:	e03ff315 	stw	zero,-52(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    5394:	00012006 	br	5818 <PRVGADraw_Task+0x6dc>
			xQueueReceive( Q_freq_data, freq+i, 0 );
    5398:	d1204217 	ldw	r4,-32504(gp)
    539c:	e0bff417 	ldw	r2,-48(fp)
    53a0:	100490fa 	slli	r2,r2,3
    53a4:	1007883a 	mov	r3,r2
    53a8:	00820234 	movhi	r2,2056
    53ac:	10bf1504 	addi	r2,r2,-940
    53b0:	188b883a 	add	r5,r3,r2
    53b4:	000d883a 	mov	r6,zero
    53b8:	000f883a 	mov	r7,zero
    53bc:	00022800 	call	2280 <xQueueGenericReceive>

			sprintf(freqStr, "%f", freqThresh);
    53c0:	d0a00617 	ldw	r2,-32744(gp)
    53c4:	01020034 	movhi	r4,2048
    53c8:	210a3604 	addi	r4,r4,10456
    53cc:	20c00017 	ldw	r3,0(r4)
    53d0:	01020034 	movhi	r4,2048
    53d4:	2102b404 	addi	r4,r4,2768
    53d8:	01420034 	movhi	r5,2048
    53dc:	29405c04 	addi	r5,r5,368
    53e0:	100d883a 	mov	r6,r2
    53e4:	180f883a 	mov	r7,r3
    53e8:	000859c0 	call	859c <sprintf>
			sprintf(ROCStr, "%f", ROCThresh);
    53ec:	d0a00817 	ldw	r2,-32736(gp)
    53f0:	01020034 	movhi	r4,2048
    53f4:	210a3804 	addi	r4,r4,10464
    53f8:	20c00017 	ldw	r3,0(r4)
    53fc:	01020034 	movhi	r4,2048
    5400:	2102b704 	addi	r4,r4,2780
    5404:	01420034 	movhi	r5,2048
    5408:	29405c04 	addi	r5,r5,368
    540c:	100d883a 	mov	r6,r2
    5410:	180f883a 	mov	r7,r3
    5414:	000859c0 	call	859c <sprintf>
			alt_up_char_buffer_string(char_buf, ROCStr, 30, 50);
    5418:	e13ff517 	ldw	r4,-44(fp)
    541c:	01420034 	movhi	r5,2048
    5420:	2942b704 	addi	r5,r5,2780
    5424:	01800784 	movi	r6,30
    5428:	01c00c84 	movi	r7,50
    542c:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
			alt_up_char_buffer_string(char_buf, freqStr, 30, 46);
    5430:	e13ff517 	ldw	r4,-44(fp)
    5434:	01420034 	movhi	r5,2048
    5438:	2942b404 	addi	r5,r5,2768
    543c:	01800784 	movi	r6,30
    5440:	01c00b84 	movi	r7,46
    5444:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
			if(mantainMode == true){
    5448:	d0a04043 	ldbu	r2,-32511(gp)
    544c:	10803fcc 	andi	r2,r2,255
    5450:	1005003a 	cmpeq	r2,r2,zero
    5454:	1000061e 	bne	r2,zero,5470 <PRVGADraw_Task+0x334>

				alt_up_char_buffer_string(char_buf, "Under Maintain Mode", 30, 55);
    5458:	e13ff517 	ldw	r4,-44(fp)
    545c:	01420034 	movhi	r5,2048
    5460:	29405d04 	addi	r5,r5,372
    5464:	01800784 	movi	r6,30
    5468:	01c00dc4 	movi	r7,55
    546c:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>

			}
			if(mantainMode == false){
    5470:	d0a04043 	ldbu	r2,-32511(gp)
    5474:	10803fcc 	andi	r2,r2,255
    5478:	1004c03a 	cmpne	r2,r2,zero
    547c:	1000061e 	bne	r2,zero,5498 <PRVGADraw_Task+0x35c>

				alt_up_char_buffer_string(char_buf, "Under Normal Mode", 30, 55);
    5480:	e13ff517 	ldw	r4,-44(fp)
    5484:	01420034 	movhi	r5,2048
    5488:	29406204 	addi	r5,r5,392
    548c:	01800784 	movi	r6,30
    5490:	01c00dc4 	movi	r7,55
    5494:	0018ae40 	call	18ae4 <alt_up_char_buffer_string>
			}


			//calculate frequency RoC

			if(i==0){
    5498:	e0bff417 	ldw	r2,-48(fp)
    549c:	1004c03a 	cmpne	r2,r2,zero
    54a0:	1000531e 	bne	r2,zero,55f0 <PRVGADraw_Task+0x4b4>
				dfreq[0] = (freq[0]-freq[99]) * 2.0 * freq[0] * freq[99] / (freq[0]+freq[99]);
    54a4:	00820234 	movhi	r2,2056
    54a8:	10bf1504 	addi	r2,r2,-940
    54ac:	11400017 	ldw	r5,0(r2)
    54b0:	11800117 	ldw	r6,4(r2)
    54b4:	01020234 	movhi	r4,2056
    54b8:	213f1504 	addi	r4,r4,-940
    54bc:	2080c617 	ldw	r2,792(r4)
    54c0:	20c0c717 	ldw	r3,796(r4)
    54c4:	2809883a 	mov	r4,r5
    54c8:	300b883a 	mov	r5,r6
    54cc:	100d883a 	mov	r6,r2
    54d0:	180f883a 	mov	r7,r3
    54d4:	00071fc0 	call	71fc <__subdf3>
    54d8:	1009883a 	mov	r4,r2
    54dc:	180b883a 	mov	r5,r3
    54e0:	2005883a 	mov	r2,r4
    54e4:	2807883a 	mov	r3,r5
    54e8:	1009883a 	mov	r4,r2
    54ec:	180b883a 	mov	r5,r3
    54f0:	100d883a 	mov	r6,r2
    54f4:	180f883a 	mov	r7,r3
    54f8:	000727c0 	call	727c <__adddf3>
    54fc:	1009883a 	mov	r4,r2
    5500:	180b883a 	mov	r5,r3
    5504:	200d883a 	mov	r6,r4
    5508:	280f883a 	mov	r7,r5
    550c:	01020234 	movhi	r4,2056
    5510:	213f1504 	addi	r4,r4,-940
    5514:	20800017 	ldw	r2,0(r4)
    5518:	20c00117 	ldw	r3,4(r4)
    551c:	3009883a 	mov	r4,r6
    5520:	380b883a 	mov	r5,r7
    5524:	100d883a 	mov	r6,r2
    5528:	180f883a 	mov	r7,r3
    552c:	00072f00 	call	72f0 <__muldf3>
    5530:	1009883a 	mov	r4,r2
    5534:	180b883a 	mov	r5,r3
    5538:	200d883a 	mov	r6,r4
    553c:	280f883a 	mov	r7,r5
    5540:	01020234 	movhi	r4,2056
    5544:	213f1504 	addi	r4,r4,-940
    5548:	2080c617 	ldw	r2,792(r4)
    554c:	20c0c717 	ldw	r3,796(r4)
    5550:	3009883a 	mov	r4,r6
    5554:	380b883a 	mov	r5,r7
    5558:	100d883a 	mov	r6,r2
    555c:	180f883a 	mov	r7,r3
    5560:	00072f00 	call	72f0 <__muldf3>
    5564:	1009883a 	mov	r4,r2
    5568:	180b883a 	mov	r5,r3
    556c:	2021883a 	mov	r16,r4
    5570:	2823883a 	mov	r17,r5
    5574:	00820234 	movhi	r2,2056
    5578:	10bf1504 	addi	r2,r2,-940
    557c:	11400017 	ldw	r5,0(r2)
    5580:	11800117 	ldw	r6,4(r2)
    5584:	01020234 	movhi	r4,2056
    5588:	213f1504 	addi	r4,r4,-940
    558c:	2080c617 	ldw	r2,792(r4)
    5590:	20c0c717 	ldw	r3,796(r4)
    5594:	2809883a 	mov	r4,r5
    5598:	300b883a 	mov	r5,r6
    559c:	100d883a 	mov	r6,r2
    55a0:	180f883a 	mov	r7,r3
    55a4:	000727c0 	call	727c <__adddf3>
    55a8:	1009883a 	mov	r4,r2
    55ac:	180b883a 	mov	r5,r3
    55b0:	2005883a 	mov	r2,r4
    55b4:	2807883a 	mov	r3,r5
    55b8:	8009883a 	mov	r4,r16
    55bc:	880b883a 	mov	r5,r17
    55c0:	100d883a 	mov	r6,r2
    55c4:	180f883a 	mov	r7,r3
    55c8:	00076b40 	call	76b4 <__divdf3>
    55cc:	1009883a 	mov	r4,r2
    55d0:	180b883a 	mov	r5,r3
    55d4:	2005883a 	mov	r2,r4
    55d8:	2807883a 	mov	r3,r5
    55dc:	01020234 	movhi	r4,2056
    55e0:	213fef04 	addi	r4,r4,-68
    55e4:	20800015 	stw	r2,0(r4)
    55e8:	20c00115 	stw	r3,4(r4)
    55ec:	00006a06 	br	5798 <PRVGADraw_Task+0x65c>
			}
			else{
				dfreq[i] = (freq[i]-freq[i-1]) * 2.0 * freq[i]* freq[i-1] / (freq[i]+freq[i-1]);
    55f0:	e4bff417 	ldw	r18,-48(fp)
    55f4:	e0bff417 	ldw	r2,-48(fp)
    55f8:	00c20234 	movhi	r3,2056
    55fc:	18ff1504 	addi	r3,r3,-940
    5600:	100490fa 	slli	r2,r2,3
    5604:	10c5883a 	add	r2,r2,r3
    5608:	11400017 	ldw	r5,0(r2)
    560c:	11800117 	ldw	r6,4(r2)
    5610:	e0bff417 	ldw	r2,-48(fp)
    5614:	10bfffc4 	addi	r2,r2,-1
    5618:	00c20234 	movhi	r3,2056
    561c:	18ff1504 	addi	r3,r3,-940
    5620:	100490fa 	slli	r2,r2,3
    5624:	10c9883a 	add	r4,r2,r3
    5628:	20800017 	ldw	r2,0(r4)
    562c:	20c00117 	ldw	r3,4(r4)
    5630:	2809883a 	mov	r4,r5
    5634:	300b883a 	mov	r5,r6
    5638:	100d883a 	mov	r6,r2
    563c:	180f883a 	mov	r7,r3
    5640:	00071fc0 	call	71fc <__subdf3>
    5644:	1009883a 	mov	r4,r2
    5648:	180b883a 	mov	r5,r3
    564c:	2005883a 	mov	r2,r4
    5650:	2807883a 	mov	r3,r5
    5654:	1009883a 	mov	r4,r2
    5658:	180b883a 	mov	r5,r3
    565c:	100d883a 	mov	r6,r2
    5660:	180f883a 	mov	r7,r3
    5664:	000727c0 	call	727c <__adddf3>
    5668:	1009883a 	mov	r4,r2
    566c:	180b883a 	mov	r5,r3
    5670:	200d883a 	mov	r6,r4
    5674:	280f883a 	mov	r7,r5
    5678:	e0bff417 	ldw	r2,-48(fp)
    567c:	00c20234 	movhi	r3,2056
    5680:	18ff1504 	addi	r3,r3,-940
    5684:	100490fa 	slli	r2,r2,3
    5688:	10c9883a 	add	r4,r2,r3
    568c:	20800017 	ldw	r2,0(r4)
    5690:	20c00117 	ldw	r3,4(r4)
    5694:	3009883a 	mov	r4,r6
    5698:	380b883a 	mov	r5,r7
    569c:	100d883a 	mov	r6,r2
    56a0:	180f883a 	mov	r7,r3
    56a4:	00072f00 	call	72f0 <__muldf3>
    56a8:	1009883a 	mov	r4,r2
    56ac:	180b883a 	mov	r5,r3
    56b0:	200d883a 	mov	r6,r4
    56b4:	280f883a 	mov	r7,r5
    56b8:	e0bff417 	ldw	r2,-48(fp)
    56bc:	10bfffc4 	addi	r2,r2,-1
    56c0:	00c20234 	movhi	r3,2056
    56c4:	18ff1504 	addi	r3,r3,-940
    56c8:	100490fa 	slli	r2,r2,3
    56cc:	10c9883a 	add	r4,r2,r3
    56d0:	20800017 	ldw	r2,0(r4)
    56d4:	20c00117 	ldw	r3,4(r4)
    56d8:	3009883a 	mov	r4,r6
    56dc:	380b883a 	mov	r5,r7
    56e0:	100d883a 	mov	r6,r2
    56e4:	180f883a 	mov	r7,r3
    56e8:	00072f00 	call	72f0 <__muldf3>
    56ec:	1009883a 	mov	r4,r2
    56f0:	180b883a 	mov	r5,r3
    56f4:	2021883a 	mov	r16,r4
    56f8:	2823883a 	mov	r17,r5
    56fc:	e0bff417 	ldw	r2,-48(fp)
    5700:	00c20234 	movhi	r3,2056
    5704:	18ff1504 	addi	r3,r3,-940
    5708:	100490fa 	slli	r2,r2,3
    570c:	10c5883a 	add	r2,r2,r3
    5710:	11400017 	ldw	r5,0(r2)
    5714:	11800117 	ldw	r6,4(r2)
    5718:	e0bff417 	ldw	r2,-48(fp)
    571c:	10bfffc4 	addi	r2,r2,-1
    5720:	00c20234 	movhi	r3,2056
    5724:	18ff1504 	addi	r3,r3,-940
    5728:	100490fa 	slli	r2,r2,3
    572c:	10c9883a 	add	r4,r2,r3
    5730:	20800017 	ldw	r2,0(r4)
    5734:	20c00117 	ldw	r3,4(r4)
    5738:	2809883a 	mov	r4,r5
    573c:	300b883a 	mov	r5,r6
    5740:	100d883a 	mov	r6,r2
    5744:	180f883a 	mov	r7,r3
    5748:	000727c0 	call	727c <__adddf3>
    574c:	1009883a 	mov	r4,r2
    5750:	180b883a 	mov	r5,r3
    5754:	2005883a 	mov	r2,r4
    5758:	2807883a 	mov	r3,r5
    575c:	8009883a 	mov	r4,r16
    5760:	880b883a 	mov	r5,r17
    5764:	100d883a 	mov	r6,r2
    5768:	180f883a 	mov	r7,r3
    576c:	00076b40 	call	76b4 <__divdf3>
    5770:	1009883a 	mov	r4,r2
    5774:	180b883a 	mov	r5,r3
    5778:	2005883a 	mov	r2,r4
    577c:	2807883a 	mov	r3,r5
    5780:	01420234 	movhi	r5,2056
    5784:	297fef04 	addi	r5,r5,-68
    5788:	900890fa 	slli	r4,r18,3
    578c:	2149883a 	add	r4,r4,r5
    5790:	20800015 	stw	r2,0(r4)
    5794:	20c00115 	stw	r3,4(r4)
			}

			if (dfreq[i] > 100.0){
    5798:	e0bff417 	ldw	r2,-48(fp)
    579c:	00c20234 	movhi	r3,2056
    57a0:	18ffef04 	addi	r3,r3,-68
    57a4:	100490fa 	slli	r2,r2,3
    57a8:	10c9883a 	add	r4,r2,r3
    57ac:	20800017 	ldw	r2,0(r4)
    57b0:	20c00117 	ldw	r3,4(r4)
    57b4:	1009883a 	mov	r4,r2
    57b8:	180b883a 	mov	r5,r3
    57bc:	000d883a 	mov	r6,zero
    57c0:	01d01674 	movhi	r7,16473
    57c4:	000790c0 	call	790c <__gtdf2>
    57c8:	10800048 	cmpgei	r2,r2,1
    57cc:	1000011e 	bne	r2,zero,57d4 <PRVGADraw_Task+0x698>
    57d0:	00000806 	br	57f4 <PRVGADraw_Task+0x6b8>
				dfreq[i] = 100.0;
    57d4:	e0bff417 	ldw	r2,-48(fp)
    57d8:	00c20234 	movhi	r3,2056
    57dc:	18ffef04 	addi	r3,r3,-68
    57e0:	100490fa 	slli	r2,r2,3
    57e4:	10c7883a 	add	r3,r2,r3
    57e8:	18000015 	stw	zero,0(r3)
    57ec:	00901674 	movhi	r2,16473
    57f0:	18800115 	stw	r2,4(r3)
			}


			i =	++i%100; //point to the next data (oldest) to be overwritten
    57f4:	e0bff417 	ldw	r2,-48(fp)
    57f8:	10800044 	addi	r2,r2,1
    57fc:	e0bff415 	stw	r2,-48(fp)
    5800:	e0fff417 	ldw	r3,-48(fp)
    5804:	00801904 	movi	r2,100
    5808:	1885283a 	div	r2,r3,r2
    580c:	10801924 	muli	r2,r2,100
    5810:	1885c83a 	sub	r2,r3,r2
    5814:	e0bff415 	stw	r2,-48(fp)
	Line line_freq, line_roc;

	while(1){

		//receive frequency data from queue
		while(uxQueueMessagesWaiting( Q_freq_data ) != 0){
    5818:	d1204217 	ldw	r4,-32504(gp)
    581c:	00026100 	call	2610 <uxQueueMessagesWaiting>
    5820:	1004c03a 	cmpne	r2,r2,zero
    5824:	103edc1e 	bne	r2,zero,5398 <PRVGADraw_Task+0x25c>
			i =	++i%100; //point to the next data (oldest) to be overwritten

		}

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
    5828:	008031c4 	movi	r2,199
    582c:	d8800015 	stw	r2,0(sp)
    5830:	d8000115 	stw	zero,4(sp)
    5834:	d8000215 	stw	zero,8(sp)
    5838:	e13ff617 	ldw	r4,-40(fp)
    583c:	01401944 	movi	r5,101
    5840:	000d883a 	mov	r6,zero
    5844:	01c09fc4 	movi	r7,639
    5848:	001907c0 	call	1907c <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);
    584c:	00804ac4 	movi	r2,299
    5850:	d8800015 	stw	r2,0(sp)
    5854:	d8000115 	stw	zero,4(sp)
    5858:	d8000215 	stw	zero,8(sp)
    585c:	e13ff617 	ldw	r4,-40(fp)
    5860:	01401944 	movi	r5,101
    5864:	01803244 	movi	r6,201
    5868:	01c09fc4 	movi	r7,639
    586c:	001907c0 	call	1907c <alt_up_pixel_buffer_dma_draw_box>

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5870:	e03ff315 	stw	zero,-52(fp)
    5874:	00010e06 	br	5cb0 <PRVGADraw_Task+0xb74>
			if (((int)(freq[(i+j)%100]) > MIN_FREQ) && ((int)(freq[(i+j+1)%100]) > MIN_FREQ)){
    5878:	e0fff417 	ldw	r3,-48(fp)
    587c:	e0bff317 	ldw	r2,-52(fp)
    5880:	1887883a 	add	r3,r3,r2
    5884:	00801904 	movi	r2,100
    5888:	1885283a 	div	r2,r3,r2
    588c:	10801924 	muli	r2,r2,100
    5890:	1885c83a 	sub	r2,r3,r2
    5894:	00c20234 	movhi	r3,2056
    5898:	18ff1504 	addi	r3,r3,-940
    589c:	100490fa 	slli	r2,r2,3
    58a0:	10c9883a 	add	r4,r2,r3
    58a4:	20800017 	ldw	r2,0(r4)
    58a8:	20c00117 	ldw	r3,4(r4)
    58ac:	1009883a 	mov	r4,r2
    58b0:	180b883a 	mov	r5,r3
    58b4:	0007b9c0 	call	7b9c <__fixdfsi>
    58b8:	1009883a 	mov	r4,r2
    58bc:	0007aa40 	call	7aa4 <__floatsidf>
    58c0:	100b883a 	mov	r5,r2
    58c4:	180d883a 	mov	r6,r3
    58c8:	2809883a 	mov	r4,r5
    58cc:	300b883a 	mov	r5,r6
    58d0:	000d883a 	mov	r6,zero
    58d4:	01d011f4 	movhi	r7,16455
    58d8:	39e00004 	addi	r7,r7,-32768
    58dc:	000790c0 	call	790c <__gtdf2>
    58e0:	10800048 	cmpgei	r2,r2,1
    58e4:	1000011e 	bne	r2,zero,58ec <PRVGADraw_Task+0x7b0>
    58e8:	0000ee06 	br	5ca4 <PRVGADraw_Task+0xb68>
    58ec:	e0fff417 	ldw	r3,-48(fp)
    58f0:	e0bff317 	ldw	r2,-52(fp)
    58f4:	1885883a 	add	r2,r3,r2
    58f8:	10c00044 	addi	r3,r2,1
    58fc:	00801904 	movi	r2,100
    5900:	1885283a 	div	r2,r3,r2
    5904:	10801924 	muli	r2,r2,100
    5908:	1885c83a 	sub	r2,r3,r2
    590c:	00c20234 	movhi	r3,2056
    5910:	18ff1504 	addi	r3,r3,-940
    5914:	100490fa 	slli	r2,r2,3
    5918:	10c9883a 	add	r4,r2,r3
    591c:	20800017 	ldw	r2,0(r4)
    5920:	20c00117 	ldw	r3,4(r4)
    5924:	1009883a 	mov	r4,r2
    5928:	180b883a 	mov	r5,r3
    592c:	0007b9c0 	call	7b9c <__fixdfsi>
    5930:	1009883a 	mov	r4,r2
    5934:	0007aa40 	call	7aa4 <__floatsidf>
    5938:	100b883a 	mov	r5,r2
    593c:	180d883a 	mov	r6,r3
    5940:	2809883a 	mov	r4,r5
    5944:	300b883a 	mov	r5,r6
    5948:	000d883a 	mov	r6,zero
    594c:	01d011f4 	movhi	r7,16455
    5950:	39e00004 	addi	r7,r7,-32768
    5954:	000790c0 	call	790c <__gtdf2>
    5958:	10800048 	cmpgei	r2,r2,1
    595c:	1000011e 	bne	r2,zero,5964 <PRVGADraw_Task+0x828>
    5960:	0000d006 	br	5ca4 <PRVGADraw_Task+0xb68>
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
    5964:	e0bff317 	ldw	r2,-52(fp)
    5968:	10800164 	muli	r2,r2,5
    596c:	10801944 	addi	r2,r2,101
    5970:	e0bff715 	stw	r2,-36(fp)
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j)%100] - MIN_FREQ));
    5974:	e0fff417 	ldw	r3,-48(fp)
    5978:	e0bff317 	ldw	r2,-52(fp)
    597c:	1887883a 	add	r3,r3,r2
    5980:	00801904 	movi	r2,100
    5984:	1885283a 	div	r2,r3,r2
    5988:	10801924 	muli	r2,r2,100
    598c:	1885c83a 	sub	r2,r3,r2
    5990:	00c20234 	movhi	r3,2056
    5994:	18ff1504 	addi	r3,r3,-940
    5998:	100490fa 	slli	r2,r2,3
    599c:	10c9883a 	add	r4,r2,r3
    59a0:	20800017 	ldw	r2,0(r4)
    59a4:	20c00117 	ldw	r3,4(r4)
    59a8:	1009883a 	mov	r4,r2
    59ac:	180b883a 	mov	r5,r3
    59b0:	000d883a 	mov	r6,zero
    59b4:	01d011f4 	movhi	r7,16455
    59b8:	39e00004 	addi	r7,r7,-32768
    59bc:	00071fc0 	call	71fc <__subdf3>
    59c0:	1009883a 	mov	r4,r2
    59c4:	180b883a 	mov	r5,r3
    59c8:	2005883a 	mov	r2,r4
    59cc:	2807883a 	mov	r3,r5
    59d0:	1009883a 	mov	r4,r2
    59d4:	180b883a 	mov	r5,r3
    59d8:	000d883a 	mov	r6,zero
    59dc:	01f00d34 	movhi	r7,49204
    59e0:	00072f00 	call	72f0 <__muldf3>
    59e4:	1009883a 	mov	r4,r2
    59e8:	180b883a 	mov	r5,r3
    59ec:	2005883a 	mov	r2,r4
    59f0:	2807883a 	mov	r3,r5
    59f4:	1009883a 	mov	r4,r2
    59f8:	180b883a 	mov	r5,r3
    59fc:	000d883a 	mov	r6,zero
    5a00:	01d01a74 	movhi	r7,16489
    5a04:	39f80004 	addi	r7,r7,-8192
    5a08:	000727c0 	call	727c <__adddf3>
    5a0c:	1009883a 	mov	r4,r2
    5a10:	180b883a 	mov	r5,r3
    5a14:	2005883a 	mov	r2,r4
    5a18:	2807883a 	mov	r3,r5
    5a1c:	1009883a 	mov	r4,r2
    5a20:	180b883a 	mov	r5,r3
    5a24:	0007b9c0 	call	7b9c <__fixdfsi>
    5a28:	e0bff815 	stw	r2,-32(fp)

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
    5a2c:	e0bff317 	ldw	r2,-52(fp)
    5a30:	10800164 	muli	r2,r2,5
    5a34:	10801a84 	addi	r2,r2,106
    5a38:	e0bff915 	stw	r2,-28(fp)
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(i+j+1)%100] - MIN_FREQ));
    5a3c:	e0fff417 	ldw	r3,-48(fp)
    5a40:	e0bff317 	ldw	r2,-52(fp)
    5a44:	1885883a 	add	r2,r3,r2
    5a48:	10c00044 	addi	r3,r2,1
    5a4c:	00801904 	movi	r2,100
    5a50:	1885283a 	div	r2,r3,r2
    5a54:	10801924 	muli	r2,r2,100
    5a58:	1885c83a 	sub	r2,r3,r2
    5a5c:	00c20234 	movhi	r3,2056
    5a60:	18ff1504 	addi	r3,r3,-940
    5a64:	100490fa 	slli	r2,r2,3
    5a68:	10c9883a 	add	r4,r2,r3
    5a6c:	20800017 	ldw	r2,0(r4)
    5a70:	20c00117 	ldw	r3,4(r4)
    5a74:	1009883a 	mov	r4,r2
    5a78:	180b883a 	mov	r5,r3
    5a7c:	000d883a 	mov	r6,zero
    5a80:	01d011f4 	movhi	r7,16455
    5a84:	39e00004 	addi	r7,r7,-32768
    5a88:	00071fc0 	call	71fc <__subdf3>
    5a8c:	1009883a 	mov	r4,r2
    5a90:	180b883a 	mov	r5,r3
    5a94:	2005883a 	mov	r2,r4
    5a98:	2807883a 	mov	r3,r5
    5a9c:	1009883a 	mov	r4,r2
    5aa0:	180b883a 	mov	r5,r3
    5aa4:	000d883a 	mov	r6,zero
    5aa8:	01f00d34 	movhi	r7,49204
    5aac:	00072f00 	call	72f0 <__muldf3>
    5ab0:	1009883a 	mov	r4,r2
    5ab4:	180b883a 	mov	r5,r3
    5ab8:	2005883a 	mov	r2,r4
    5abc:	2807883a 	mov	r3,r5
    5ac0:	1009883a 	mov	r4,r2
    5ac4:	180b883a 	mov	r5,r3
    5ac8:	000d883a 	mov	r6,zero
    5acc:	01d01a74 	movhi	r7,16489
    5ad0:	39f80004 	addi	r7,r7,-8192
    5ad4:	000727c0 	call	727c <__adddf3>
    5ad8:	1009883a 	mov	r4,r2
    5adc:	180b883a 	mov	r5,r3
    5ae0:	2005883a 	mov	r2,r4
    5ae4:	2807883a 	mov	r3,r5
    5ae8:	1009883a 	mov	r4,r2
    5aec:	180b883a 	mov	r5,r3
    5af0:	0007b9c0 	call	7b9c <__fixdfsi>
    5af4:	e0bffa15 	stw	r2,-24(fp)

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
    5af8:	e0bff317 	ldw	r2,-52(fp)
    5afc:	10800164 	muli	r2,r2,5
    5b00:	10801944 	addi	r2,r2,101
    5b04:	e0bffb15 	stw	r2,-20(fp)
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j)%100]);
    5b08:	e0fff417 	ldw	r3,-48(fp)
    5b0c:	e0bff317 	ldw	r2,-52(fp)
    5b10:	1887883a 	add	r3,r3,r2
    5b14:	00801904 	movi	r2,100
    5b18:	1885283a 	div	r2,r3,r2
    5b1c:	10801924 	muli	r2,r2,100
    5b20:	1885c83a 	sub	r2,r3,r2
    5b24:	00c20234 	movhi	r3,2056
    5b28:	18ffef04 	addi	r3,r3,-68
    5b2c:	100490fa 	slli	r2,r2,3
    5b30:	10c9883a 	add	r4,r2,r3
    5b34:	20800017 	ldw	r2,0(r4)
    5b38:	20c00117 	ldw	r3,4(r4)
    5b3c:	1009883a 	mov	r4,r2
    5b40:	180b883a 	mov	r5,r3
    5b44:	000d883a 	mov	r6,zero
    5b48:	01eff834 	movhi	r7,49120
    5b4c:	00072f00 	call	72f0 <__muldf3>
    5b50:	1009883a 	mov	r4,r2
    5b54:	180b883a 	mov	r5,r3
    5b58:	2005883a 	mov	r2,r4
    5b5c:	2807883a 	mov	r3,r5
    5b60:	1009883a 	mov	r4,r2
    5b64:	180b883a 	mov	r5,r3
    5b68:	000d883a 	mov	r6,zero
    5b6c:	01d01c34 	movhi	r7,16496
    5b70:	39cc0004 	addi	r7,r7,12288
    5b74:	000727c0 	call	727c <__adddf3>
    5b78:	1009883a 	mov	r4,r2
    5b7c:	180b883a 	mov	r5,r3
    5b80:	2005883a 	mov	r2,r4
    5b84:	2807883a 	mov	r3,r5
    5b88:	1009883a 	mov	r4,r2
    5b8c:	180b883a 	mov	r5,r3
    5b90:	0007b9c0 	call	7b9c <__fixdfsi>
    5b94:	e0bffc15 	stw	r2,-16(fp)

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
    5b98:	e0bff317 	ldw	r2,-52(fp)
    5b9c:	10800164 	muli	r2,r2,5
    5ba0:	10801a84 	addi	r2,r2,106
    5ba4:	e0bffd15 	stw	r2,-12(fp)
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(i+j+1)%100]);
    5ba8:	e0fff417 	ldw	r3,-48(fp)
    5bac:	e0bff317 	ldw	r2,-52(fp)
    5bb0:	1885883a 	add	r2,r3,r2
    5bb4:	10c00044 	addi	r3,r2,1
    5bb8:	00801904 	movi	r2,100
    5bbc:	1885283a 	div	r2,r3,r2
    5bc0:	10801924 	muli	r2,r2,100
    5bc4:	1885c83a 	sub	r2,r3,r2
    5bc8:	00c20234 	movhi	r3,2056
    5bcc:	18ffef04 	addi	r3,r3,-68
    5bd0:	100490fa 	slli	r2,r2,3
    5bd4:	10c9883a 	add	r4,r2,r3
    5bd8:	20800017 	ldw	r2,0(r4)
    5bdc:	20c00117 	ldw	r3,4(r4)
    5be0:	1009883a 	mov	r4,r2
    5be4:	180b883a 	mov	r5,r3
    5be8:	000d883a 	mov	r6,zero
    5bec:	01eff834 	movhi	r7,49120
    5bf0:	00072f00 	call	72f0 <__muldf3>
    5bf4:	1009883a 	mov	r4,r2
    5bf8:	180b883a 	mov	r5,r3
    5bfc:	2005883a 	mov	r2,r4
    5c00:	2807883a 	mov	r3,r5
    5c04:	1009883a 	mov	r4,r2
    5c08:	180b883a 	mov	r5,r3
    5c0c:	000d883a 	mov	r6,zero
    5c10:	01d01c34 	movhi	r7,16496
    5c14:	39cc0004 	addi	r7,r7,12288
    5c18:	000727c0 	call	727c <__adddf3>
    5c1c:	1009883a 	mov	r4,r2
    5c20:	180b883a 	mov	r5,r3
    5c24:	2005883a 	mov	r2,r4
    5c28:	2807883a 	mov	r3,r5
    5c2c:	1009883a 	mov	r4,r2
    5c30:	180b883a 	mov	r5,r3
    5c34:	0007b9c0 	call	7b9c <__fixdfsi>
    5c38:	e0bffe15 	stw	r2,-8(fp)

				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
    5c3c:	e0bff717 	ldw	r2,-36(fp)
    5c40:	100b883a 	mov	r5,r2
    5c44:	e0bff817 	ldw	r2,-32(fp)
    5c48:	100d883a 	mov	r6,r2
    5c4c:	e0bff917 	ldw	r2,-28(fp)
    5c50:	100f883a 	mov	r7,r2
    5c54:	e0bffa17 	ldw	r2,-24(fp)
    5c58:	d8800015 	stw	r2,0(sp)
    5c5c:	0080ffc4 	movi	r2,1023
    5c60:	d8800115 	stw	r2,4(sp)
    5c64:	d8000215 	stw	zero,8(sp)
    5c68:	e13ff617 	ldw	r4,-40(fp)
    5c6c:	0019e240 	call	19e24 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
    5c70:	e0bffb17 	ldw	r2,-20(fp)
    5c74:	100b883a 	mov	r5,r2
    5c78:	e0bffc17 	ldw	r2,-16(fp)
    5c7c:	100d883a 	mov	r6,r2
    5c80:	e0bffd17 	ldw	r2,-12(fp)
    5c84:	100f883a 	mov	r7,r2
    5c88:	e0bffe17 	ldw	r2,-8(fp)
    5c8c:	d8800015 	stw	r2,0(sp)
    5c90:	0080ffc4 	movi	r2,1023
    5c94:	d8800115 	stw	r2,4(sp)
    5c98:	d8000215 	stw	zero,8(sp)
    5c9c:	e13ff617 	ldw	r4,-40(fp)
    5ca0:	0019e240 	call	19e24 <alt_up_pixel_buffer_dma_draw_line>

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    5ca4:	e0bff317 	ldw	r2,-52(fp)
    5ca8:	10800044 	addi	r2,r2,1
    5cac:	e0bff315 	stw	r2,-52(fp)
    5cb0:	e0bff317 	ldw	r2,-52(fp)
    5cb4:	108018d0 	cmplti	r2,r2,99
    5cb8:	103eef1e 	bne	r2,zero,5878 <PRVGADraw_Task+0x73c>
				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}
		vTaskDelay(10);
    5cbc:	01000284 	movi	r4,10
    5cc0:	0002e980 	call	2e98 <vTaskDelay>

	}
    5cc4:	003ed406 	br	5818 <PRVGADraw_Task+0x6dc>

00005cc8 <print_status_task>:
}

// The following test prints out status information every 3 seconds.
void print_status_task(void *pvParameters)
{
    5cc8:	defffd04 	addi	sp,sp,-12
    5ccc:	dfc00215 	stw	ra,8(sp)
    5cd0:	df000115 	stw	fp,4(sp)
    5cd4:	df000104 	addi	fp,sp,4
    5cd8:	e13fff15 	stw	r4,-4(fp)
	while (1)
	{
		vTaskDelay(3000);
    5cdc:	0102ee04 	movi	r4,3000
    5ce0:	0002e980 	call	2e98 <vTaskDelay>
		printf("****************************************************************\n");
    5ce4:	01020034 	movhi	r4,2048
    5ce8:	21006704 	addi	r4,r4,412
    5cec:	00085880 	call	8588 <puts>
		printf("Hello From FreeRTOS Running on NIOS II.  Here is the status:\n");
    5cf0:	01020034 	movhi	r4,2048
    5cf4:	21007804 	addi	r4,r4,480
    5cf8:	00085880 	call	8588 <puts>
		printf("\n");
    5cfc:	01000284 	movi	r4,10
    5d00:	00084c40 	call	84c4 <putchar>
		printf("The current frequency is:         %lf\n", temp);
    5d04:	d0a00417 	ldw	r2,-32752(gp)
    5d08:	01020034 	movhi	r4,2048
    5d0c:	210a3404 	addi	r4,r4,10448
    5d10:	20c00017 	ldw	r3,0(r4)
    5d14:	01020034 	movhi	r4,2048
    5d18:	21008804 	addi	r4,r4,544
    5d1c:	100b883a 	mov	r5,r2
    5d20:	180d883a 	mov	r6,r3
    5d24:	000844c0 	call	844c <printf>
		printf("\n");
    5d28:	01000284 	movi	r4,10
    5d2c:	00084c40 	call	84c4 <putchar>
		printf("The frequency threshold is: %lf\n",freqThresh );
    5d30:	d0a00617 	ldw	r2,-32744(gp)
    5d34:	01020034 	movhi	r4,2048
    5d38:	210a3604 	addi	r4,r4,10456
    5d3c:	20c00017 	ldw	r3,0(r4)
    5d40:	01020034 	movhi	r4,2048
    5d44:	21009204 	addi	r4,r4,584
    5d48:	100b883a 	mov	r5,r2
    5d4c:	180d883a 	mov	r6,r3
    5d50:	000844c0 	call	844c <printf>
		printf("\n");
    5d54:	01000284 	movi	r4,10
    5d58:	00084c40 	call	84c4 <putchar>
		printf("The current ROC is : %lf\n", ROCThresh);
    5d5c:	d0a00817 	ldw	r2,-32736(gp)
    5d60:	01020034 	movhi	r4,2048
    5d64:	210a3804 	addi	r4,r4,10464
    5d68:	20c00017 	ldw	r3,0(r4)
    5d6c:	01020034 	movhi	r4,2048
    5d70:	21009b04 	addi	r4,r4,620
    5d74:	100b883a 	mov	r5,r2
    5d78:	180d883a 	mov	r6,r3
    5d7c:	000844c0 	call	844c <printf>
		printf("\n");
    5d80:	01000284 	movi	r4,10
    5d84:	00084c40 	call	84c4 <putchar>
		printf("The ROC threshold is: %lf\n", ROCThresh);
    5d88:	d0a00817 	ldw	r2,-32736(gp)
    5d8c:	01020034 	movhi	r4,2048
    5d90:	210a3804 	addi	r4,r4,10464
    5d94:	20c00017 	ldw	r3,0(r4)
    5d98:	01020034 	movhi	r4,2048
    5d9c:	2100a204 	addi	r4,r4,648
    5da0:	100b883a 	mov	r5,r2
    5da4:	180d883a 	mov	r6,r3
    5da8:	000844c0 	call	844c <printf>
		printf("\n");
    5dac:	01000284 	movi	r4,10
    5db0:	00084c40 	call	84c4 <putchar>
		printf("****************************************************************\n");
    5db4:	01020034 	movhi	r4,2048
    5db8:	21006704 	addi	r4,r4,412
    5dbc:	00085880 	call	8588 <puts>
		printf("\n");
    5dc0:	01000284 	movi	r4,10
    5dc4:	00084c40 	call	84c4 <putchar>
	}
    5dc8:	003fc406 	br	5cdc <print_status_task+0x14>

00005dcc <keyboard_control_task>:
}

void keyboard_control_task(void *pvParameters)
{	int notiValue;
    5dcc:	defff804 	addi	sp,sp,-32
    5dd0:	dfc00715 	stw	ra,28(sp)
    5dd4:	df000615 	stw	fp,24(sp)
    5dd8:	df000604 	addi	fp,sp,24
    5ddc:	e13fff15 	stw	r4,-4(fp)
	int i;
	int j = 0;
    5de0:	e03ffa15 	stw	zero,-24(fp)
	while (1)
	{	notiValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    5de4:	01000044 	movi	r4,1
    5de8:	017fffc4 	movi	r5,-1
    5dec:	00042500 	call	4250 <ulTaskNotifyTake>
    5df0:	e0bffc15 	stw	r2,-16(fp)
		//printf("Scan code: %x\n", byte);
	// press 'R' in the keyboard will enter change roc mode, click numbers on the keypad
	//and click 'ENTER' will save the change

	if((byte == 45)&&(keyboardMode ==0)){
    5df4:	d0a04b03 	ldbu	r2,-32468(gp)
    5df8:	10803fcc 	andi	r2,r2,255
    5dfc:	10800b58 	cmpnei	r2,r2,45
    5e00:	1000101e 	bne	r2,zero,5e44 <keyboard_control_task+0x78>
    5e04:	d0a03c03 	ldbu	r2,-32528(gp)
    5e08:	10803fcc 	andi	r2,r2,255
    5e0c:	1004c03a 	cmpne	r2,r2,zero
    5e10:	10000c1e 	bne	r2,zero,5e44 <keyboard_control_task+0x78>
		memset(testStr, 0, 30);
    5e14:	00820234 	movhi	r2,2056
    5e18:	10bf0d84 	addi	r2,r2,-970
    5e1c:	1009883a 	mov	r4,r2
    5e20:	01800784 	movi	r6,30
    5e24:	000b883a 	mov	r5,zero
    5e28:	00083b40 	call	83b4 <memset>
		j =0;
    5e2c:	e03ffa15 	stw	zero,-24(fp)
		printf("you are about to change ROC threshold\n");
    5e30:	01020034 	movhi	r4,2048
    5e34:	2100a904 	addi	r4,r4,676
    5e38:	00085880 	call	8588 <puts>
		keyboardMode =2;
    5e3c:	00800084 	movi	r2,2
    5e40:	d0a03c05 	stb	r2,-32528(gp)
	}
	if(keyboardMode ==2){
    5e44:	d0a03c03 	ldbu	r2,-32528(gp)
    5e48:	10803fcc 	andi	r2,r2,255
    5e4c:	10800098 	cmpnei	r2,r2,2
    5e50:	10005e1e 	bne	r2,zero,5fcc <keyboard_control_task+0x200>
		if(byte == 90){
    5e54:	d0a04b03 	ldbu	r2,-32468(gp)
    5e58:	10803fcc 	andi	r2,r2,255
    5e5c:	10801698 	cmpnei	r2,r2,90
    5e60:	10002f1e 	bne	r2,zero,5f20 <keyboard_control_task+0x154>
		for(i = 0; i <20; i++){
    5e64:	e03ffb15 	stw	zero,-20(fp)
    5e68:	00001406 	br	5ebc <keyboard_control_task+0xf0>
			if(i%2 == 0){
    5e6c:	e0bffb17 	ldw	r2,-20(fp)
    5e70:	1080004c 	andi	r2,r2,1
    5e74:	1004c03a 	cmpne	r2,r2,zero
    5e78:	10000d1e 	bne	r2,zero,5eb0 <keyboard_control_task+0xe4>
				oddStr[j++] = testStr[i];
    5e7c:	e13ffa17 	ldw	r4,-24(fp)
    5e80:	e0fffb17 	ldw	r3,-20(fp)
    5e84:	00820234 	movhi	r2,2056
    5e88:	10bf0d84 	addi	r2,r2,-970
    5e8c:	10c5883a 	add	r2,r2,r3
    5e90:	10c00003 	ldbu	r3,0(r2)
    5e94:	00820234 	movhi	r2,2056
    5e98:	10bf0b04 	addi	r2,r2,-980
    5e9c:	1105883a 	add	r2,r2,r4
    5ea0:	10c00005 	stb	r3,0(r2)
    5ea4:	e0bffa17 	ldw	r2,-24(fp)
    5ea8:	10800044 	addi	r2,r2,1
    5eac:	e0bffa15 	stw	r2,-24(fp)
		printf("you are about to change ROC threshold\n");
		keyboardMode =2;
	}
	if(keyboardMode ==2){
		if(byte == 90){
		for(i = 0; i <20; i++){
    5eb0:	e0bffb17 	ldw	r2,-20(fp)
    5eb4:	10800044 	addi	r2,r2,1
    5eb8:	e0bffb15 	stw	r2,-20(fp)
    5ebc:	e0bffb17 	ldw	r2,-20(fp)
    5ec0:	10800510 	cmplti	r2,r2,20
    5ec4:	103fe91e 	bne	r2,zero,5e6c <keyboard_control_task+0xa0>
			if(i%2 == 0){
				oddStr[j++] = testStr[i];
			}
		}
		ROCThresh = strtod(oddStr, &oddStr);
    5ec8:	01420234 	movhi	r5,2056
    5ecc:	297f0b04 	addi	r5,r5,-980
    5ed0:	01020234 	movhi	r4,2056
    5ed4:	213f0b04 	addi	r4,r4,-980
    5ed8:	0009de40 	call	9de4 <strtod>
    5edc:	1009883a 	mov	r4,r2
    5ee0:	180b883a 	mov	r5,r3
    5ee4:	d1200815 	stw	r4,-32736(gp)
    5ee8:	00820034 	movhi	r2,2048
    5eec:	108a3804 	addi	r2,r2,10464
    5ef0:	11400015 	stw	r5,0(r2)
		printf("double ROC Threshold: %lf\n", ROCThresh);
    5ef4:	d0a00817 	ldw	r2,-32736(gp)
    5ef8:	01020034 	movhi	r4,2048
    5efc:	210a3804 	addi	r4,r4,10464
    5f00:	20c00017 	ldw	r3,0(r4)
    5f04:	01020034 	movhi	r4,2048
    5f08:	2100b304 	addi	r4,r4,716
    5f0c:	100b883a 	mov	r5,r2
    5f10:	180d883a 	mov	r6,r3
    5f14:	000844c0 	call	844c <printf>
		keyboardMode =0;
    5f18:	d0203c05 	stb	zero,-32528(gp)
    5f1c:	00002b06 	br	5fcc <keyboard_control_task+0x200>
		}
		else{
					for(i = 0; i < 11; i ++){
    5f20:	e03ffb15 	stw	zero,-20(fp)
    5f24:	00002606 	br	5fc0 <keyboard_control_task+0x1f4>
						char keyPadNum[4];
						if(byte == numbers[i]){
    5f28:	d0a04b03 	ldbu	r2,-32468(gp)
    5f2c:	11003fcc 	andi	r4,r2,255
    5f30:	e0bffb17 	ldw	r2,-20(fp)
    5f34:	00c20034 	movhi	r3,2048
    5f38:	18c01604 	addi	r3,r3,88
    5f3c:	1085883a 	add	r2,r2,r2
    5f40:	1085883a 	add	r2,r2,r2
    5f44:	10c5883a 	add	r2,r2,r3
    5f48:	10800017 	ldw	r2,0(r2)
    5f4c:	2080191e 	bne	r4,r2,5fb4 <keyboard_control_task+0x1e8>
							if(i != 10){
    5f50:	e0bffb17 	ldw	r2,-20(fp)
    5f54:	108002a0 	cmpeqi	r2,r2,10
    5f58:	10000b1e 	bne	r2,zero,5f88 <keyboard_control_task+0x1bc>
							sprintf(keyPadNum, "%d", i);
    5f5c:	e13ffd04 	addi	r4,fp,-12
    5f60:	01420034 	movhi	r5,2048
    5f64:	2940ba04 	addi	r5,r5,744
    5f68:	e1bffb17 	ldw	r6,-20(fp)
    5f6c:	000859c0 	call	859c <sprintf>
							//printf("new freq Threshold: %s\n", keyPadNum);
							strncat(testStr, &keyPadNum[0], 1);
    5f70:	e17ffd04 	addi	r5,fp,-12
    5f74:	01020234 	movhi	r4,2056
    5f78:	213f0d84 	addi	r4,r4,-970
    5f7c:	01800044 	movi	r6,1
    5f80:	00086e40 	call	86e4 <strncat>
    5f84:	00000b06 	br	5fb4 <keyboard_control_task+0x1e8>
							//printf("new ROC Threshold: %s\n", testStr);

						}else{
							strncat(testStr, &".", 1);
    5f88:	01020234 	movhi	r4,2056
    5f8c:	213f0d84 	addi	r4,r4,-970
    5f90:	00086700 	call	8670 <strlen>
    5f94:	1007883a 	mov	r3,r2
    5f98:	00820234 	movhi	r2,2056
    5f9c:	10bf0d84 	addi	r2,r2,-970
    5fa0:	1885883a 	add	r2,r3,r2
    5fa4:	1007883a 	mov	r3,r2
    5fa8:	00800b84 	movi	r2,46
    5fac:	18800005 	stb	r2,0(r3)
    5fb0:	18000045 	stb	zero,1(r3)
		ROCThresh = strtod(oddStr, &oddStr);
		printf("double ROC Threshold: %lf\n", ROCThresh);
		keyboardMode =0;
		}
		else{
					for(i = 0; i < 11; i ++){
    5fb4:	e0bffb17 	ldw	r2,-20(fp)
    5fb8:	10800044 	addi	r2,r2,1
    5fbc:	e0bffb15 	stw	r2,-20(fp)
    5fc0:	e0bffb17 	ldw	r2,-20(fp)
    5fc4:	108002d0 	cmplti	r2,r2,11
    5fc8:	103fd71e 	bne	r2,zero,5f28 <keyboard_control_task+0x15c>
					}
				}

	}	// press 'F' will enter change frequency mode , click numbers on the keypad
		//and click 'ENTER' will save the change
		if((byte == 43)&&(keyboardMode ==0)){
    5fcc:	d0a04b03 	ldbu	r2,-32468(gp)
    5fd0:	10803fcc 	andi	r2,r2,255
    5fd4:	10800ad8 	cmpnei	r2,r2,43
    5fd8:	1000101e 	bne	r2,zero,601c <keyboard_control_task+0x250>
    5fdc:	d0a03c03 	ldbu	r2,-32528(gp)
    5fe0:	10803fcc 	andi	r2,r2,255
    5fe4:	1004c03a 	cmpne	r2,r2,zero
    5fe8:	10000c1e 	bne	r2,zero,601c <keyboard_control_task+0x250>
			memset(testStr, 0, 30);
    5fec:	00820234 	movhi	r2,2056
    5ff0:	10bf0d84 	addi	r2,r2,-970
    5ff4:	1009883a 	mov	r4,r2
    5ff8:	01800784 	movi	r6,30
    5ffc:	000b883a 	mov	r5,zero
    6000:	00083b40 	call	83b4 <memset>
			j =0;
    6004:	e03ffa15 	stw	zero,-24(fp)
			printf("you are about to change frequency threshold\n");
    6008:	01020034 	movhi	r4,2048
    600c:	2100bb04 	addi	r4,r4,748
    6010:	00085880 	call	8588 <puts>
			keyboardMode =1;
    6014:	00800044 	movi	r2,1
    6018:	d0a03c05 	stb	r2,-32528(gp)
		}
		if(keyboardMode ==1){
    601c:	d0a03c03 	ldbu	r2,-32528(gp)
    6020:	10803fcc 	andi	r2,r2,255
    6024:	10800058 	cmpnei	r2,r2,1
    6028:	10005e1e 	bne	r2,zero,61a4 <keyboard_control_task+0x3d8>
			if(byte == 90){
    602c:	d0a04b03 	ldbu	r2,-32468(gp)
    6030:	10803fcc 	andi	r2,r2,255
    6034:	10801698 	cmpnei	r2,r2,90
    6038:	10002f1e 	bne	r2,zero,60f8 <keyboard_control_task+0x32c>
			for(i = 0; i <20; i++){
    603c:	e03ffb15 	stw	zero,-20(fp)
    6040:	00001406 	br	6094 <keyboard_control_task+0x2c8>
				if(i%2 == 0){
    6044:	e0bffb17 	ldw	r2,-20(fp)
    6048:	1080004c 	andi	r2,r2,1
    604c:	1004c03a 	cmpne	r2,r2,zero
    6050:	10000d1e 	bne	r2,zero,6088 <keyboard_control_task+0x2bc>
					oddStr[j++] = testStr[i];
    6054:	e13ffa17 	ldw	r4,-24(fp)
    6058:	e0fffb17 	ldw	r3,-20(fp)
    605c:	00820234 	movhi	r2,2056
    6060:	10bf0d84 	addi	r2,r2,-970
    6064:	10c5883a 	add	r2,r2,r3
    6068:	10c00003 	ldbu	r3,0(r2)
    606c:	00820234 	movhi	r2,2056
    6070:	10bf0b04 	addi	r2,r2,-980
    6074:	1105883a 	add	r2,r2,r4
    6078:	10c00005 	stb	r3,0(r2)
    607c:	e0bffa17 	ldw	r2,-24(fp)
    6080:	10800044 	addi	r2,r2,1
    6084:	e0bffa15 	stw	r2,-24(fp)
			printf("you are about to change frequency threshold\n");
			keyboardMode =1;
		}
		if(keyboardMode ==1){
			if(byte == 90){
			for(i = 0; i <20; i++){
    6088:	e0bffb17 	ldw	r2,-20(fp)
    608c:	10800044 	addi	r2,r2,1
    6090:	e0bffb15 	stw	r2,-20(fp)
    6094:	e0bffb17 	ldw	r2,-20(fp)
    6098:	10800510 	cmplti	r2,r2,20
    609c:	103fe91e 	bne	r2,zero,6044 <keyboard_control_task+0x278>
				if(i%2 == 0){
					oddStr[j++] = testStr[i];
				}
			}
			freqThresh = strtod(oddStr, &oddStr);
    60a0:	01420234 	movhi	r5,2056
    60a4:	297f0b04 	addi	r5,r5,-980
    60a8:	01020234 	movhi	r4,2056
    60ac:	213f0b04 	addi	r4,r4,-980
    60b0:	0009de40 	call	9de4 <strtod>
    60b4:	1009883a 	mov	r4,r2
    60b8:	180b883a 	mov	r5,r3
    60bc:	d1200615 	stw	r4,-32744(gp)
    60c0:	00820034 	movhi	r2,2048
    60c4:	108a3604 	addi	r2,r2,10456
    60c8:	11400015 	stw	r5,0(r2)
			printf("double freq Threshold: %lf\n", freqThresh);
    60cc:	d0a00617 	ldw	r2,-32744(gp)
    60d0:	01020034 	movhi	r4,2048
    60d4:	210a3604 	addi	r4,r4,10456
    60d8:	20c00017 	ldw	r3,0(r4)
    60dc:	01020034 	movhi	r4,2048
    60e0:	2100c604 	addi	r4,r4,792
    60e4:	100b883a 	mov	r5,r2
    60e8:	180d883a 	mov	r6,r3
    60ec:	000844c0 	call	844c <printf>
			keyboardMode =0;
    60f0:	d0203c05 	stb	zero,-32528(gp)
    60f4:	00002b06 	br	61a4 <keyboard_control_task+0x3d8>
			}else{
			for(i = 0; i < 11; i ++){
    60f8:	e03ffb15 	stw	zero,-20(fp)
    60fc:	00002606 	br	6198 <keyboard_control_task+0x3cc>
				char keyPadNum[4];
				if(byte == numbers[i]){
    6100:	d0a04b03 	ldbu	r2,-32468(gp)
    6104:	11003fcc 	andi	r4,r2,255
    6108:	e0bffb17 	ldw	r2,-20(fp)
    610c:	00c20034 	movhi	r3,2048
    6110:	18c01604 	addi	r3,r3,88
    6114:	1085883a 	add	r2,r2,r2
    6118:	1085883a 	add	r2,r2,r2
    611c:	10c5883a 	add	r2,r2,r3
    6120:	10800017 	ldw	r2,0(r2)
    6124:	2080191e 	bne	r4,r2,618c <keyboard_control_task+0x3c0>
					if(i != 10){
    6128:	e0bffb17 	ldw	r2,-20(fp)
    612c:	108002a0 	cmpeqi	r2,r2,10
    6130:	10000b1e 	bne	r2,zero,6160 <keyboard_control_task+0x394>
					sprintf(keyPadNum, "%d", i);
    6134:	e13ffe04 	addi	r4,fp,-8
    6138:	01420034 	movhi	r5,2048
    613c:	2940ba04 	addi	r5,r5,744
    6140:	e1bffb17 	ldw	r6,-20(fp)
    6144:	000859c0 	call	859c <sprintf>
					//printf("new freq Threshold: %s\n", keyPadNum);
					strncat(testStr, &keyPadNum[0], 1);
    6148:	e17ffe04 	addi	r5,fp,-8
    614c:	01020234 	movhi	r4,2056
    6150:	213f0d84 	addi	r4,r4,-970
    6154:	01800044 	movi	r6,1
    6158:	00086e40 	call	86e4 <strncat>
    615c:	00000b06 	br	618c <keyboard_control_task+0x3c0>
					//printf("new freq Threshold: %s\n", testStr);

				}else{
					strncat(testStr, &".", 1);
    6160:	01020234 	movhi	r4,2056
    6164:	213f0d84 	addi	r4,r4,-970
    6168:	00086700 	call	8670 <strlen>
    616c:	1007883a 	mov	r3,r2
    6170:	00820234 	movhi	r2,2056
    6174:	10bf0d84 	addi	r2,r2,-970
    6178:	1885883a 	add	r2,r3,r2
    617c:	1007883a 	mov	r3,r2
    6180:	00800b84 	movi	r2,46
    6184:	18800005 	stb	r2,0(r3)
    6188:	18000045 	stb	zero,1(r3)
			}
			freqThresh = strtod(oddStr, &oddStr);
			printf("double freq Threshold: %lf\n", freqThresh);
			keyboardMode =0;
			}else{
			for(i = 0; i < 11; i ++){
    618c:	e0bffb17 	ldw	r2,-20(fp)
    6190:	10800044 	addi	r2,r2,1
    6194:	e0bffb15 	stw	r2,-20(fp)
    6198:	e0bffb17 	ldw	r2,-20(fp)
    619c:	108002d0 	cmplti	r2,r2,11
    61a0:	103fd71e 	bne	r2,zero,6100 <keyboard_control_task+0x334>
				}
			}
		}
		}

		previousbyte = byte;
    61a4:	d0a04b03 	ldbu	r2,-32468(gp)
    61a8:	d0a04805 	stb	r2,-32480(gp)
	}
    61ac:	003f0d06 	br	5de4 <keyboard_control_task+0x18>

000061b0 <stabilityMonitorTask>:
}

void stabilityMonitorTask(void *p){
    61b0:	defff904 	addi	sp,sp,-28
    61b4:	dfc00615 	stw	ra,24(sp)
    61b8:	df000515 	stw	fp,20(sp)
    61bc:	dc400415 	stw	r17,16(sp)
    61c0:	dc000315 	stw	r16,12(sp)
    61c4:	df000304 	addi	fp,sp,12
    61c8:	e13fff15 	stw	r4,-4(fp)
    61cc:	00000006 	br	61d0 <stabilityMonitorTask+0x20>
	int notiValue;
	while (1)
		{	notiValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    61d0:	01000044 	movi	r4,1
    61d4:	017fffc4 	movi	r5,-1
    61d8:	00042500 	call	4250 <ulTaskNotifyTake>
    61dc:	e0bffe15 	stw	r2,-8(fp)

			currentROC = (temp-previousFreq) * 2.0 *temp* previousFreq / (temp+previousFreq);
    61e0:	d1600417 	ldw	r5,-32752(gp)
    61e4:	00820034 	movhi	r2,2048
    61e8:	108a3404 	addi	r2,r2,10448
    61ec:	11800017 	ldw	r6,0(r2)
    61f0:	d0a00a17 	ldw	r2,-32728(gp)
    61f4:	01020034 	movhi	r4,2048
    61f8:	210a3a04 	addi	r4,r4,10472
    61fc:	20c00017 	ldw	r3,0(r4)
    6200:	2809883a 	mov	r4,r5
    6204:	300b883a 	mov	r5,r6
    6208:	100d883a 	mov	r6,r2
    620c:	180f883a 	mov	r7,r3
    6210:	00071fc0 	call	71fc <__subdf3>
    6214:	1009883a 	mov	r4,r2
    6218:	180b883a 	mov	r5,r3
    621c:	2005883a 	mov	r2,r4
    6220:	2807883a 	mov	r3,r5
    6224:	1009883a 	mov	r4,r2
    6228:	180b883a 	mov	r5,r3
    622c:	100d883a 	mov	r6,r2
    6230:	180f883a 	mov	r7,r3
    6234:	000727c0 	call	727c <__adddf3>
    6238:	1009883a 	mov	r4,r2
    623c:	180b883a 	mov	r5,r3
    6240:	200d883a 	mov	r6,r4
    6244:	280f883a 	mov	r7,r5
    6248:	d0a00417 	ldw	r2,-32752(gp)
    624c:	01020034 	movhi	r4,2048
    6250:	210a3404 	addi	r4,r4,10448
    6254:	20c00017 	ldw	r3,0(r4)
    6258:	3009883a 	mov	r4,r6
    625c:	380b883a 	mov	r5,r7
    6260:	100d883a 	mov	r6,r2
    6264:	180f883a 	mov	r7,r3
    6268:	00072f00 	call	72f0 <__muldf3>
    626c:	1009883a 	mov	r4,r2
    6270:	180b883a 	mov	r5,r3
    6274:	200d883a 	mov	r6,r4
    6278:	280f883a 	mov	r7,r5
    627c:	d0a00a17 	ldw	r2,-32728(gp)
    6280:	01020034 	movhi	r4,2048
    6284:	210a3a04 	addi	r4,r4,10472
    6288:	20c00017 	ldw	r3,0(r4)
    628c:	3009883a 	mov	r4,r6
    6290:	380b883a 	mov	r5,r7
    6294:	100d883a 	mov	r6,r2
    6298:	180f883a 	mov	r7,r3
    629c:	00072f00 	call	72f0 <__muldf3>
    62a0:	1009883a 	mov	r4,r2
    62a4:	180b883a 	mov	r5,r3
    62a8:	2021883a 	mov	r16,r4
    62ac:	2823883a 	mov	r17,r5
    62b0:	d1600417 	ldw	r5,-32752(gp)
    62b4:	00820034 	movhi	r2,2048
    62b8:	108a3404 	addi	r2,r2,10448
    62bc:	11800017 	ldw	r6,0(r2)
    62c0:	d0a00a17 	ldw	r2,-32728(gp)
    62c4:	01020034 	movhi	r4,2048
    62c8:	210a3a04 	addi	r4,r4,10472
    62cc:	20c00017 	ldw	r3,0(r4)
    62d0:	2809883a 	mov	r4,r5
    62d4:	300b883a 	mov	r5,r6
    62d8:	100d883a 	mov	r6,r2
    62dc:	180f883a 	mov	r7,r3
    62e0:	000727c0 	call	727c <__adddf3>
    62e4:	1009883a 	mov	r4,r2
    62e8:	180b883a 	mov	r5,r3
    62ec:	2005883a 	mov	r2,r4
    62f0:	2807883a 	mov	r3,r5
    62f4:	8009883a 	mov	r4,r16
    62f8:	880b883a 	mov	r5,r17
    62fc:	100d883a 	mov	r6,r2
    6300:	180f883a 	mov	r7,r3
    6304:	00076b40 	call	76b4 <__divdf3>
    6308:	1009883a 	mov	r4,r2
    630c:	180b883a 	mov	r5,r3
    6310:	2005883a 	mov	r2,r4
    6314:	2807883a 	mov	r3,r5
    6318:	d0a04d15 	stw	r2,-32460(gp)
    631c:	01020034 	movhi	r4,2048
    6320:	210a7d04 	addi	r4,r4,10740
    6324:	20c00015 	stw	r3,0(r4)
			currentROC = fabs(currentROC);
    6328:	d1204d17 	ldw	r4,-32460(gp)
    632c:	00820034 	movhi	r2,2048
    6330:	108a7d04 	addi	r2,r2,10740
    6334:	11400017 	ldw	r5,0(r2)
    6338:	01a00034 	movhi	r6,32768
    633c:	31bfffc4 	addi	r6,r6,-1
    6340:	2005883a 	mov	r2,r4
    6344:	2986703a 	and	r3,r5,r6
    6348:	d0a04d15 	stw	r2,-32460(gp)
    634c:	01020034 	movhi	r4,2048
    6350:	210a7d04 	addi	r4,r4,10740
    6354:	20c00015 	stw	r3,0(r4)
			//printf("real time frequency: %lf\n", temp);
			//printf("real time ROC: %lf\n", currentROC);
			previousFreq = temp;
    6358:	d0a00417 	ldw	r2,-32752(gp)
    635c:	01020034 	movhi	r4,2048
    6360:	210a3404 	addi	r4,r4,10448
    6364:	20c00017 	ldw	r3,0(r4)
    6368:	d0a00a15 	stw	r2,-32728(gp)
    636c:	01020034 	movhi	r4,2048
    6370:	210a3a04 	addi	r4,r4,10472
    6374:	20c00015 	stw	r3,0(r4)

			push_button = IORD_ALTERA_AVALON_PIO_DATA(PUSH_BUTTON_BASE);
    6378:	00800134 	movhi	r2,4
    637c:	108c3004 	addi	r2,r2,12480
    6380:	10800037 	ldwio	r2,0(r2)
    6384:	d0a03b15 	stw	r2,-32532(gp)
			IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, push_button);
    6388:	d0e03b17 	ldw	r3,-32532(gp)
    638c:	00800134 	movhi	r2,4
    6390:	108c2004 	addi	r2,r2,12416
    6394:	10c00035 	stwio	r3,0(r2)
			//printf("push_button_value : %d\n",push_button);
			if((push_button == 3)&&(mantainMode ==false)){
    6398:	d0a03b17 	ldw	r2,-32532(gp)
    639c:	108000d8 	cmpnei	r2,r2,3
    63a0:	1000061e 	bne	r2,zero,63bc <stabilityMonitorTask+0x20c>
    63a4:	d0a04043 	ldbu	r2,-32511(gp)
    63a8:	10803fcc 	andi	r2,r2,255
    63ac:	1004c03a 	cmpne	r2,r2,zero
    63b0:	1000021e 	bne	r2,zero,63bc <stabilityMonitorTask+0x20c>

				mantainMode = true;
    63b4:	00800044 	movi	r2,1
    63b8:	d0a04045 	stb	r2,-32511(gp)

			}if((push_button == 7)&&(mantainMode ==true)){
    63bc:	d0a03b17 	ldw	r2,-32532(gp)
    63c0:	108001d8 	cmpnei	r2,r2,7
    63c4:	1000051e 	bne	r2,zero,63dc <stabilityMonitorTask+0x22c>
    63c8:	d0a04043 	ldbu	r2,-32511(gp)
    63cc:	10803fcc 	andi	r2,r2,255
    63d0:	1005003a 	cmpeq	r2,r2,zero
    63d4:	1000011e 	bne	r2,zero,63dc <stabilityMonitorTask+0x22c>
				mantainMode = false;
    63d8:	d0204045 	stb	zero,-32511(gp)
			}



			if((loadManage ==false )&&(mantainMode == false)&&((temp <= freqThresh )||(currentROC >= ROCThresh))){
    63dc:	d0a04003 	ldbu	r2,-32512(gp)
    63e0:	10803fcc 	andi	r2,r2,255
    63e4:	1004c03a 	cmpne	r2,r2,zero
    63e8:	1000371e 	bne	r2,zero,64c8 <stabilityMonitorTask+0x318>
    63ec:	d0a04043 	ldbu	r2,-32511(gp)
    63f0:	10803fcc 	andi	r2,r2,255
    63f4:	1004c03a 	cmpne	r2,r2,zero
    63f8:	1000331e 	bne	r2,zero,64c8 <stabilityMonitorTask+0x318>
    63fc:	d1600417 	ldw	r5,-32752(gp)
    6400:	00820034 	movhi	r2,2048
    6404:	108a3404 	addi	r2,r2,10448
    6408:	11800017 	ldw	r6,0(r2)
    640c:	d0a00617 	ldw	r2,-32744(gp)
    6410:	01020034 	movhi	r4,2048
    6414:	210a3604 	addi	r4,r4,10456
    6418:	20c00017 	ldw	r3,0(r4)
    641c:	2809883a 	mov	r4,r5
    6420:	300b883a 	mov	r5,r6
    6424:	100d883a 	mov	r6,r2
    6428:	180f883a 	mov	r7,r3
    642c:	0007a1c0 	call	7a1c <__ledf2>
    6430:	10800050 	cmplti	r2,r2,1
    6434:	1000101e 	bne	r2,zero,6478 <stabilityMonitorTask+0x2c8>
    6438:	d1604d17 	ldw	r5,-32460(gp)
    643c:	00820034 	movhi	r2,2048
    6440:	108a7d04 	addi	r2,r2,10740
    6444:	11800017 	ldw	r6,0(r2)
    6448:	d0a00817 	ldw	r2,-32736(gp)
    644c:	01020034 	movhi	r4,2048
    6450:	210a3804 	addi	r4,r4,10464
    6454:	20c00017 	ldw	r3,0(r4)
    6458:	2809883a 	mov	r4,r5
    645c:	300b883a 	mov	r5,r6
    6460:	100d883a 	mov	r6,r2
    6464:	180f883a 	mov	r7,r3
    6468:	00079940 	call	7994 <__gedf2>
    646c:	1004403a 	cmpge	r2,r2,zero
    6470:	1000011e 	bne	r2,zero,6478 <stabilityMonitorTask+0x2c8>
    6474:	00001406 	br	64c8 <stabilityMonitorTask+0x318>
				loadManage = true;
    6478:	00800044 	movi	r2,1
    647c:	d0a04005 	stb	r2,-32512(gp)
				unstableRemain = false;
    6480:	d0204085 	stb	zero,-32510(gp)
				numOfShed = numOfShed+1;
    6484:	d0a03f17 	ldw	r2,-32516(gp)
    6488:	10800044 	addi	r2,r2,1
    648c:	d0a03f15 	stw	r2,-32516(gp)
				timerCount = 0;
    6490:	d0204115 	stw	zero,-32508(gp)
				xTimerReset(timer, 10 );
    6494:	d4204317 	ldw	r16,-32500(gp)
    6498:	00031680 	call	3168 <xTaskGetTickCount>
    649c:	100d883a 	mov	r6,r2
    64a0:	00800284 	movi	r2,10
    64a4:	d8800015 	stw	r2,0(sp)
    64a8:	8009883a 	mov	r4,r16
    64ac:	01400084 	movi	r5,2
    64b0:	000f883a 	mov	r7,zero
    64b4:	00049ac0 	call	49ac <xTimerGenericCommand>
				printf("unstable detected, %d load sheded \n",numOfShed);
    64b8:	d1603f17 	ldw	r5,-32516(gp)
    64bc:	01020034 	movhi	r4,2048
    64c0:	2100cd04 	addi	r4,r4,820
    64c4:	000844c0 	call	844c <printf>
			}
			if((loadManage ==true )&&((temp >= freqThresh )&&(currentROC <= ROCThresh))){
    64c8:	d0a04003 	ldbu	r2,-32512(gp)
    64cc:	10803fcc 	andi	r2,r2,255
    64d0:	1005003a 	cmpeq	r2,r2,zero
    64d4:	1000271e 	bne	r2,zero,6574 <stabilityMonitorTask+0x3c4>
    64d8:	d1600417 	ldw	r5,-32752(gp)
    64dc:	00820034 	movhi	r2,2048
    64e0:	108a3404 	addi	r2,r2,10448
    64e4:	11800017 	ldw	r6,0(r2)
    64e8:	d0a00617 	ldw	r2,-32744(gp)
    64ec:	01020034 	movhi	r4,2048
    64f0:	210a3604 	addi	r4,r4,10456
    64f4:	20c00017 	ldw	r3,0(r4)
    64f8:	2809883a 	mov	r4,r5
    64fc:	300b883a 	mov	r5,r6
    6500:	100d883a 	mov	r6,r2
    6504:	180f883a 	mov	r7,r3
    6508:	00079940 	call	7994 <__gedf2>
    650c:	1004403a 	cmpge	r2,r2,zero
    6510:	1000011e 	bne	r2,zero,6518 <stabilityMonitorTask+0x368>
    6514:	00001706 	br	6574 <stabilityMonitorTask+0x3c4>
    6518:	d1604d17 	ldw	r5,-32460(gp)
    651c:	00820034 	movhi	r2,2048
    6520:	108a7d04 	addi	r2,r2,10740
    6524:	11800017 	ldw	r6,0(r2)
    6528:	d0a00817 	ldw	r2,-32736(gp)
    652c:	01020034 	movhi	r4,2048
    6530:	210a3804 	addi	r4,r4,10464
    6534:	20c00017 	ldw	r3,0(r4)
    6538:	2809883a 	mov	r4,r5
    653c:	300b883a 	mov	r5,r6
    6540:	100d883a 	mov	r6,r2
    6544:	180f883a 	mov	r7,r3
    6548:	0007a1c0 	call	7a1c <__ledf2>
    654c:	10800050 	cmplti	r2,r2,1
    6550:	1000011e 	bne	r2,zero,6558 <stabilityMonitorTask+0x3a8>
    6554:	00000706 	br	6574 <stabilityMonitorTask+0x3c4>
				loadManage = false;
    6558:	d0204005 	stb	zero,-32512(gp)
				unstableRemain = false;
    655c:	d0204085 	stb	zero,-32510(gp)
				numOfShed = 0;
    6560:	d0203f15 	stw	zero,-32516(gp)
				timerCount = 0;
    6564:	d0204115 	stw	zero,-32508(gp)
				printf("back to normal\n");
    6568:	01020034 	movhi	r4,2048
    656c:	2100d604 	addi	r4,r4,856
    6570:	00085880 	call	8588 <puts>
			}

			if((loadManage ==true )&&(mantainMode == true)){
    6574:	d0a04003 	ldbu	r2,-32512(gp)
    6578:	10803fcc 	andi	r2,r2,255
    657c:	1005003a 	cmpeq	r2,r2,zero
    6580:	10000b1e 	bne	r2,zero,65b0 <stabilityMonitorTask+0x400>
    6584:	d0a04043 	ldbu	r2,-32511(gp)
    6588:	10803fcc 	andi	r2,r2,255
    658c:	1005003a 	cmpeq	r2,r2,zero
    6590:	1000071e 	bne	r2,zero,65b0 <stabilityMonitorTask+0x400>
				loadManage = false;
    6594:	d0204005 	stb	zero,-32512(gp)
				unstableRemain = false;
    6598:	d0204085 	stb	zero,-32510(gp)
				numOfShed = 0;
    659c:	d0203f15 	stw	zero,-32516(gp)
				timerCount = 0;
    65a0:	d0204115 	stw	zero,-32508(gp)
				printf("back to normal\n");
    65a4:	01020034 	movhi	r4,2048
    65a8:	2100d604 	addi	r4,r4,856
    65ac:	00085880 	call	8588 <puts>

			}

			if ((loadManage == true) &&(unstableRemain == true)&&(mantainMode == false)){
    65b0:	d0a04003 	ldbu	r2,-32512(gp)
    65b4:	10803fcc 	andi	r2,r2,255
    65b8:	1005003a 	cmpeq	r2,r2,zero
    65bc:	103f041e 	bne	r2,zero,61d0 <stabilityMonitorTask+0x20>
    65c0:	d0a04083 	ldbu	r2,-32510(gp)
    65c4:	10803fcc 	andi	r2,r2,255
    65c8:	1005003a 	cmpeq	r2,r2,zero
    65cc:	103f001e 	bne	r2,zero,61d0 <stabilityMonitorTask+0x20>
    65d0:	d0a04043 	ldbu	r2,-32511(gp)
    65d4:	10803fcc 	andi	r2,r2,255
    65d8:	1004c03a 	cmpne	r2,r2,zero
    65dc:	103efc1e 	bne	r2,zero,61d0 <stabilityMonitorTask+0x20>
				numOfShed = numOfShed+1;
    65e0:	d0a03f17 	ldw	r2,-32516(gp)
    65e4:	10800044 	addi	r2,r2,1
    65e8:	d0a03f15 	stw	r2,-32516(gp)
				unstableRemain = false;
    65ec:	d0204085 	stb	zero,-32510(gp)
				xTimerReset(timer, 10 );
    65f0:	d4204317 	ldw	r16,-32500(gp)
    65f4:	00031680 	call	3168 <xTaskGetTickCount>
    65f8:	100d883a 	mov	r6,r2
    65fc:	00800284 	movi	r2,10
    6600:	d8800015 	stw	r2,0(sp)
    6604:	8009883a 	mov	r4,r16
    6608:	01400084 	movi	r5,2
    660c:	000f883a 	mov	r7,zero
    6610:	00049ac0 	call	49ac <xTimerGenericCommand>
				printf("unstable remained, %d load sheded \n",numOfShed);
    6614:	d1603f17 	ldw	r5,-32516(gp)
    6618:	01020034 	movhi	r4,2048
    661c:	2100da04 	addi	r4,r4,872
    6620:	000844c0 	call	844c <printf>

			}


		}
    6624:	003eea06 	br	61d0 <stabilityMonitorTask+0x20>

00006628 <loadCtlTask>:
}


void loadCtlTask(void *p){
    6628:	defffb04 	addi	sp,sp,-20
    662c:	dfc00415 	stw	ra,16(sp)
    6630:	df000315 	stw	fp,12(sp)
    6634:	df000304 	addi	fp,sp,12
    6638:	e13fff15 	stw	r4,-4(fp)

	int load_output;

	while(1){
		if(loadManage ==true){
    663c:	d0a04003 	ldbu	r2,-32512(gp)
    6640:	10803fcc 	andi	r2,r2,255
    6644:	1005003a 	cmpeq	r2,r2,zero
    6648:	1000091e 	bne	r2,zero,6670 <loadCtlTask+0x48>
			int* output = shedLoads(numOfShed,sw_result_bin);
    664c:	d1203f17 	ldw	r4,-32516(gp)
    6650:	01420234 	movhi	r5,2056
    6654:	297fdd04 	addi	r5,r5,-140
    6658:	000669c0 	call	669c <shedLoads>
    665c:	e0bffd15 	stw	r2,-12(fp)
			load_output = binaryToDecimal(output);
    6660:	e13ffd17 	ldw	r4,-12(fp)
    6664:	00067f40 	call	67f4 <binaryToDecimal>
    6668:	e0bffe15 	stw	r2,-8(fp)
    666c:	00000406 	br	6680 <loadCtlTask+0x58>
		}else{

		load_output = binaryToDecimal(sw_result_bin);
    6670:	01020234 	movhi	r4,2056
    6674:	213fdd04 	addi	r4,r4,-140
    6678:	00067f40 	call	67f4 <binaryToDecimal>
    667c:	e0bffe15 	stw	r2,-8(fp)
		//printf(" %d ",  load_output);
		}
		//IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, buttonValue);
	    IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, load_output);    //light red LEDs according to switch positions
    6680:	00c00134 	movhi	r3,4
    6684:	18cc1804 	addi	r3,r3,12384
    6688:	e0bffe17 	ldw	r2,-8(fp)
    668c:	18800035 	stwio	r2,0(r3)
	    vTaskDelay(50);
    6690:	01000c84 	movi	r4,50
    6694:	0002e980 	call	2e98 <vTaskDelay>
	}
    6698:	003fe806 	br	663c <loadCtlTask+0x14>

0000669c <shedLoads>:

}

int* shedLoads(int numOfShed,int sw_result_bin[]){
    669c:	defff604 	addi	sp,sp,-40
    66a0:	df000915 	stw	fp,36(sp)
    66a4:	df000904 	addi	fp,sp,36
    66a8:	e13ffb15 	stw	r4,-20(fp)
    66ac:	e17ffc15 	stw	r5,-16(fp)
    66b0:	e6ffff15 	stw	sp,-4(fp)
    66b4:	d805883a 	mov	r2,sp
    66b8:	e0bffd15 	stw	r2,-12(fp)

	int len = current_sw_size;
    66bc:	d0a05117 	ldw	r2,-32444(gp)
    66c0:	e0bff915 	stw	r2,-28(fp)
	int loadAfterShed[len];
    66c4:	e0bff917 	ldw	r2,-28(fp)
    66c8:	1085883a 	add	r2,r2,r2
    66cc:	1085883a 	add	r2,r2,r2
    66d0:	108000c4 	addi	r2,r2,3
    66d4:	108000c4 	addi	r2,r2,3
    66d8:	1004d0ba 	srli	r2,r2,2
    66dc:	1085883a 	add	r2,r2,r2
    66e0:	1085883a 	add	r2,r2,r2
    66e4:	d8b7c83a 	sub	sp,sp,r2
    66e8:	e6fffe15 	stw	sp,-8(fp)
    66ec:	e0fffe17 	ldw	r3,-8(fp)
    66f0:	188000c4 	addi	r2,r3,3
    66f4:	1004d0ba 	srli	r2,r2,2
    66f8:	1085883a 	add	r2,r2,r2
    66fc:	1085883a 	add	r2,r2,r2
    6700:	e0bffe15 	stw	r2,-8(fp)
    6704:	e0bffe17 	ldw	r2,-8(fp)
    6708:	e0bffa15 	stw	r2,-24(fp)
	int m = 0;
    670c:	e03ff815 	stw	zero,-32(fp)
	int count = 0;
    6710:	e03ff715 	stw	zero,-36(fp)

	for (m = 0; m < len; m++) {
    6714:	e03ff815 	stw	zero,-32(fp)
    6718:	00001006 	br	675c <shedLoads+0xc0>
		loadAfterShed[m] = sw_result_bin[m];
    671c:	e17ff817 	ldw	r5,-32(fp)
    6720:	e0bff817 	ldw	r2,-32(fp)
    6724:	1085883a 	add	r2,r2,r2
    6728:	1085883a 	add	r2,r2,r2
    672c:	1007883a 	mov	r3,r2
    6730:	e0bffc17 	ldw	r2,-16(fp)
    6734:	1885883a 	add	r2,r3,r2
    6738:	11000017 	ldw	r4,0(r2)
    673c:	e0fffa17 	ldw	r3,-24(fp)
    6740:	2945883a 	add	r2,r5,r5
    6744:	1085883a 	add	r2,r2,r2
    6748:	10c5883a 	add	r2,r2,r3
    674c:	11000015 	stw	r4,0(r2)
	int len = current_sw_size;
	int loadAfterShed[len];
	int m = 0;
	int count = 0;

	for (m = 0; m < len; m++) {
    6750:	e0bff817 	ldw	r2,-32(fp)
    6754:	10800044 	addi	r2,r2,1
    6758:	e0bff815 	stw	r2,-32(fp)
    675c:	e0fff817 	ldw	r3,-32(fp)
    6760:	e0bff917 	ldw	r2,-28(fp)
    6764:	18bfed16 	blt	r3,r2,671c <shedLoads+0x80>
		loadAfterShed[m] = sw_result_bin[m];
	}

	for (m = 0; m< len ; m++) {
    6768:	e03ff815 	stw	zero,-32(fp)
    676c:	00001706 	br	67cc <shedLoads+0x130>
	        if((loadAfterShed[m] == 1)&&(count < numOfShed)){
    6770:	e0bff817 	ldw	r2,-32(fp)
    6774:	e0fffa17 	ldw	r3,-24(fp)
    6778:	1085883a 	add	r2,r2,r2
    677c:	1085883a 	add	r2,r2,r2
    6780:	10c5883a 	add	r2,r2,r3
    6784:	10800017 	ldw	r2,0(r2)
    6788:	10800058 	cmpnei	r2,r2,1
    678c:	10000c1e 	bne	r2,zero,67c0 <shedLoads+0x124>
    6790:	e0fff717 	ldw	r3,-36(fp)
    6794:	e0bffb17 	ldw	r2,-20(fp)
    6798:	1880090e 	bge	r3,r2,67c0 <shedLoads+0x124>
	        	loadAfterShed[m] = 0;
    679c:	e0bff817 	ldw	r2,-32(fp)
    67a0:	e0fffa17 	ldw	r3,-24(fp)
    67a4:	1085883a 	add	r2,r2,r2
    67a8:	1085883a 	add	r2,r2,r2
    67ac:	10c5883a 	add	r2,r2,r3
    67b0:	10000015 	stw	zero,0(r2)
	        	count ++;
    67b4:	e0bff717 	ldw	r2,-36(fp)
    67b8:	10800044 	addi	r2,r2,1
    67bc:	e0bff715 	stw	r2,-36(fp)

	for (m = 0; m < len; m++) {
		loadAfterShed[m] = sw_result_bin[m];
	}

	for (m = 0; m< len ; m++) {
    67c0:	e0bff817 	ldw	r2,-32(fp)
    67c4:	10800044 	addi	r2,r2,1
    67c8:	e0bff815 	stw	r2,-32(fp)
    67cc:	e0fff817 	ldw	r3,-32(fp)
    67d0:	e0bff917 	ldw	r2,-28(fp)
    67d4:	18bfe616 	blt	r3,r2,6770 <shedLoads+0xd4>
	        if((loadAfterShed[m] == 1)&&(count < numOfShed)){
	        	loadAfterShed[m] = 0;
	        	count ++;
	        }
	}
	return loadAfterShed;
    67d8:	e0bffa17 	ldw	r2,-24(fp)
    67dc:	e6fffd17 	ldw	sp,-12(fp)
}
    67e0:	e6ffff17 	ldw	sp,-4(fp)
    67e4:	e037883a 	mov	sp,fp
    67e8:	df000017 	ldw	fp,0(sp)
    67ec:	dec00104 	addi	sp,sp,4
    67f0:	f800283a 	ret

000067f4 <binaryToDecimal>:


int binaryToDecimal(int sw_result_bin[]){
    67f4:	defff604 	addi	sp,sp,-40
    67f8:	df000915 	stw	fp,36(sp)
    67fc:	df000904 	addi	fp,sp,36
    6800:	e13ffc15 	stw	r4,-16(fp)
    6804:	e6ffff15 	stw	sp,-4(fp)
    6808:	d805883a 	mov	r2,sp
    680c:	e0bffd15 	stw	r2,-12(fp)
	int m = 0;
    6810:	e03ffa15 	stw	zero,-24(fp)
	int dec_value = 0;
    6814:	e03ff915 	stw	zero,-28(fp)
	int base = 1;
    6818:	00800044 	movi	r2,1
    681c:	e0bff815 	stw	r2,-32(fp)
	int len = current_sw_size;
    6820:	d0a05117 	ldw	r2,-32444(gp)
    6824:	e0bff715 	stw	r2,-36(fp)
	int output[len];
    6828:	e0bff717 	ldw	r2,-36(fp)
    682c:	1085883a 	add	r2,r2,r2
    6830:	1085883a 	add	r2,r2,r2
    6834:	108000c4 	addi	r2,r2,3
    6838:	108000c4 	addi	r2,r2,3
    683c:	1004d0ba 	srli	r2,r2,2
    6840:	1085883a 	add	r2,r2,r2
    6844:	1085883a 	add	r2,r2,r2
    6848:	d8b7c83a 	sub	sp,sp,r2
    684c:	e6fffe15 	stw	sp,-8(fp)
    6850:	e0fffe17 	ldw	r3,-8(fp)
    6854:	188000c4 	addi	r2,r3,3
    6858:	1004d0ba 	srli	r2,r2,2
    685c:	1085883a 	add	r2,r2,r2
    6860:	1085883a 	add	r2,r2,r2
    6864:	e0bffe15 	stw	r2,-8(fp)
    6868:	e0bffe17 	ldw	r2,-8(fp)
    686c:	e0bffb15 	stw	r2,-20(fp)
	//printf(" %d ",  len);
	  for (m = 0; m < len; m++) {
    6870:	e03ffa15 	stw	zero,-24(fp)
    6874:	00001006 	br	68b8 <binaryToDecimal+0xc4>
		  output[m] = sw_result_bin[m];
    6878:	e17ffa17 	ldw	r5,-24(fp)
    687c:	e0bffa17 	ldw	r2,-24(fp)
    6880:	1085883a 	add	r2,r2,r2
    6884:	1085883a 	add	r2,r2,r2
    6888:	1007883a 	mov	r3,r2
    688c:	e0bffc17 	ldw	r2,-16(fp)
    6890:	1885883a 	add	r2,r3,r2
    6894:	11000017 	ldw	r4,0(r2)
    6898:	e0fffb17 	ldw	r3,-20(fp)
    689c:	2945883a 	add	r2,r5,r5
    68a0:	1085883a 	add	r2,r2,r2
    68a4:	10c5883a 	add	r2,r2,r3
    68a8:	11000015 	stw	r4,0(r2)
	int dec_value = 0;
	int base = 1;
	int len = current_sw_size;
	int output[len];
	//printf(" %d ",  len);
	  for (m = 0; m < len; m++) {
    68ac:	e0bffa17 	ldw	r2,-24(fp)
    68b0:	10800044 	addi	r2,r2,1
    68b4:	e0bffa15 	stw	r2,-24(fp)
    68b8:	e0fffa17 	ldw	r3,-24(fp)
    68bc:	e0bff717 	ldw	r2,-36(fp)
    68c0:	18bfed16 	blt	r3,r2,6878 <binaryToDecimal+0x84>
		  output[m] = sw_result_bin[m];
	    }

	for (m = 0; m < len; m++) {
    68c4:	e03ffa15 	stw	zero,-24(fp)
    68c8:	00001206 	br	6914 <binaryToDecimal+0x120>
	        if(output[m] == 1){
    68cc:	e0bffa17 	ldw	r2,-24(fp)
    68d0:	e0fffb17 	ldw	r3,-20(fp)
    68d4:	1085883a 	add	r2,r2,r2
    68d8:	1085883a 	add	r2,r2,r2
    68dc:	10c5883a 	add	r2,r2,r3
    68e0:	10800017 	ldw	r2,0(r2)
    68e4:	10800058 	cmpnei	r2,r2,1
    68e8:	1000041e 	bne	r2,zero,68fc <binaryToDecimal+0x108>
	            dec_value += base;
    68ec:	e0bff917 	ldw	r2,-28(fp)
    68f0:	e0fff817 	ldw	r3,-32(fp)
    68f4:	10c5883a 	add	r2,r2,r3
    68f8:	e0bff915 	stw	r2,-28(fp)
	        }
	        base = base * 2;
    68fc:	e0bff817 	ldw	r2,-32(fp)
    6900:	1085883a 	add	r2,r2,r2
    6904:	e0bff815 	stw	r2,-32(fp)
	//printf(" %d ",  len);
	  for (m = 0; m < len; m++) {
		  output[m] = sw_result_bin[m];
	    }

	for (m = 0; m < len; m++) {
    6908:	e0bffa17 	ldw	r2,-24(fp)
    690c:	10800044 	addi	r2,r2,1
    6910:	e0bffa15 	stw	r2,-24(fp)
    6914:	e0fffa17 	ldw	r3,-24(fp)
    6918:	e0bff717 	ldw	r2,-36(fp)
    691c:	18bfeb16 	blt	r3,r2,68cc <binaryToDecimal+0xd8>
	        if(output[m] == 1){
	            dec_value += base;
	        }
	        base = base * 2;
}
	return dec_value;
    6920:	e0bff917 	ldw	r2,-28(fp)
    6924:	e6fffd17 	ldw	sp,-12(fp)
}
    6928:	e6ffff17 	ldw	sp,-4(fp)
    692c:	e037883a 	mov	sp,fp
    6930:	df000017 	ldw	fp,0(sp)
    6934:	dec00104 	addi	sp,sp,4
    6938:	f800283a 	ret

0000693c <switchPollingTask>:

void switchPollingTask(void *p){
    693c:	defff904 	addi	sp,sp,-28
    6940:	dfc00615 	stw	ra,24(sp)
    6944:	df000515 	stw	fp,20(sp)
    6948:	df000504 	addi	fp,sp,20
    694c:	e13ffd15 	stw	r4,-12(fp)
	int k,l;
	while(1){
	if(loadManage == false){
    6950:	d0a04003 	ldbu	r2,-32512(gp)
    6954:	10803fcc 	andi	r2,r2,255
    6958:	1004c03a 	cmpne	r2,r2,zero
    695c:	10003a1e 	bne	r2,zero,6a48 <switchPollingTask+0x10c>
	sw_result=IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE); //read slide switches
    6960:	00800134 	movhi	r2,4
    6964:	108c2c04 	addi	r2,r2,12464
    6968:	10800037 	ldwio	r2,0(r2)
    696c:	d0a04415 	stw	r2,-32496(gp)
	for(k=0; sw_result>0; k++){
    6970:	e03ffc15 	stw	zero,-16(fp)
    6974:	00002506 	br	6a0c <switchPollingTask+0xd0>
		sw_result_bin[k] = sw_result%2;
    6978:	e0bffc17 	ldw	r2,-16(fp)
    697c:	e0bffe15 	stw	r2,-8(fp)
    6980:	d0a04417 	ldw	r2,-32496(gp)
    6984:	00e00034 	movhi	r3,32768
    6988:	18c00044 	addi	r3,r3,1
    698c:	10c4703a 	and	r2,r2,r3
    6990:	e0bfff15 	stw	r2,-4(fp)
    6994:	e0ffff17 	ldw	r3,-4(fp)
    6998:	1804403a 	cmpge	r2,r3,zero
    699c:	10000a1e 	bne	r2,zero,69c8 <switchPollingTask+0x8c>
    69a0:	e17fff17 	ldw	r5,-4(fp)
    69a4:	297fffc4 	addi	r5,r5,-1
    69a8:	e17fff15 	stw	r5,-4(fp)
    69ac:	00bfff84 	movi	r2,-2
    69b0:	e1bfff17 	ldw	r6,-4(fp)
    69b4:	308cb03a 	or	r6,r6,r2
    69b8:	e1bfff15 	stw	r6,-4(fp)
    69bc:	e0bfff17 	ldw	r2,-4(fp)
    69c0:	10800044 	addi	r2,r2,1
    69c4:	e0bfff15 	stw	r2,-4(fp)
    69c8:	e13fff17 	ldw	r4,-4(fp)
    69cc:	00c20234 	movhi	r3,2056
    69d0:	18ffdd04 	addi	r3,r3,-140
    69d4:	e17ffe17 	ldw	r5,-8(fp)
    69d8:	e17ffe17 	ldw	r5,-8(fp)
    69dc:	2945883a 	add	r2,r5,r5
    69e0:	1085883a 	add	r2,r2,r2
    69e4:	10c5883a 	add	r2,r2,r3
    69e8:	11000015 	stw	r4,0(r2)
		sw_result = sw_result /2;
    69ec:	d0e04417 	ldw	r3,-32496(gp)
    69f0:	1804d7fa 	srli	r2,r3,31
    69f4:	10c5883a 	add	r2,r2,r3
    69f8:	1005d07a 	srai	r2,r2,1
    69fc:	d0a04415 	stw	r2,-32496(gp)
void switchPollingTask(void *p){
	int k,l;
	while(1){
	if(loadManage == false){
	sw_result=IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE); //read slide switches
	for(k=0; sw_result>0; k++){
    6a00:	e0bffc17 	ldw	r2,-16(fp)
    6a04:	10800044 	addi	r2,r2,1
    6a08:	e0bffc15 	stw	r2,-16(fp)
    6a0c:	d0a04417 	ldw	r2,-32496(gp)
    6a10:	10800048 	cmpgei	r2,r2,1
    6a14:	103fd81e 	bne	r2,zero,6978 <switchPollingTask+0x3c>
		sw_result_bin[k] = sw_result%2;
		sw_result = sw_result /2;
	}
	current_sw_size =k;
    6a18:	e0bffc17 	ldw	r2,-16(fp)
    6a1c:	d0a05115 	stw	r2,-32444(gp)
	//printf("real time ROC:");
    for(l = k - 1; l >= 0; l--)  {
    6a20:	e0bffc17 	ldw	r2,-16(fp)
    6a24:	10bfffc4 	addi	r2,r2,-1
    6a28:	e0bffb15 	stw	r2,-20(fp)
    6a2c:	00000306 	br	6a3c <switchPollingTask+0x100>
    6a30:	e0bffb17 	ldw	r2,-20(fp)
    6a34:	10bfffc4 	addi	r2,r2,-1
    6a38:	e0bffb15 	stw	r2,-20(fp)
    6a3c:	e0bffb17 	ldw	r2,-20(fp)
    6a40:	1004403a 	cmpge	r2,r2,zero
    6a44:	103ffa1e 	bne	r2,zero,6a30 <switchPollingTask+0xf4>
        //printf(" %d ", sw_result_bin[l]);
    }
	}
    vTaskDelay(150);
    6a48:	01002584 	movi	r4,150
    6a4c:	0002e980 	call	2e98 <vTaskDelay>
	}
    6a50:	003fbf06 	br	6950 <switchPollingTask+0x14>

00006a54 <freq_relay>:
}


void freq_relay(){
    6a54:	defffd04 	addi	sp,sp,-12
    6a58:	dfc00215 	stw	ra,8(sp)
    6a5c:	df000115 	stw	fp,4(sp)
    6a60:	df000104 	addi	fp,sp,4
	#define SAMPLING_FREQ 16000.0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    6a64:	e03fff15 	stw	zero,-4(fp)
	temp = SAMPLING_FREQ/(double)IORD(FREQUENCY_ANALYSER_BASE, 0);
    6a68:	00800134 	movhi	r2,4
    6a6c:	108c4004 	addi	r2,r2,12544
    6a70:	11000037 	ldwio	r4,0(r2)
    6a74:	0007aa40 	call	7aa4 <__floatsidf>
    6a78:	100f883a 	mov	r7,r2
    6a7c:	1811883a 	mov	r8,r3
    6a80:	0009883a 	mov	r4,zero
    6a84:	015033f4 	movhi	r5,16591
    6a88:	29500004 	addi	r5,r5,16384
    6a8c:	380d883a 	mov	r6,r7
    6a90:	400f883a 	mov	r7,r8
    6a94:	00076b40 	call	76b4 <__divdf3>
    6a98:	1009883a 	mov	r4,r2
    6a9c:	180b883a 	mov	r5,r3
    6aa0:	2005883a 	mov	r2,r4
    6aa4:	2807883a 	mov	r3,r5
    6aa8:	d0a00415 	stw	r2,-32752(gp)
    6aac:	01020034 	movhi	r4,2048
    6ab0:	210a3404 	addi	r4,r4,10448
    6ab4:	20c00015 	stw	r3,0(r4)


	xQueueSendToBackFromISR( Q_freq_data, &temp, pdFALSE );
    6ab8:	d1204217 	ldw	r4,-32504(gp)
    6abc:	d1600404 	addi	r5,gp,-32752
    6ac0:	000d883a 	mov	r6,zero
    6ac4:	000f883a 	mov	r7,zero
    6ac8:	00020c00 	call	20c0 <xQueueGenericSendFromISR>
	xTaskNotifyFromISR(stableTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    6acc:	d1204617 	ldw	r4,-32488(gp)
    6ad0:	01400044 	movi	r5,1
    6ad4:	018000c4 	movi	r6,3
    6ad8:	e1ffff04 	addi	r7,fp,-4
    6adc:	00045bc0 	call	45bc <xTaskNotifyFromISR>
	return;
}
    6ae0:	e037883a 	mov	sp,fp
    6ae4:	dfc00117 	ldw	ra,4(sp)
    6ae8:	df000017 	ldw	fp,0(sp)
    6aec:	dec00204 	addi	sp,sp,8
    6af0:	f800283a 	ret

00006af4 <ps2_isr>:

void ps2_isr(void* ps2_device, alt_u32 id){
    6af4:	defffb04 	addi	sp,sp,-20
    6af8:	dfc00415 	stw	ra,16(sp)
    6afc:	df000315 	stw	fp,12(sp)
    6b00:	df000304 	addi	fp,sp,12
    6b04:	e13ffe15 	stw	r4,-8(fp)
    6b08:	e17fff15 	stw	r5,-4(fp)

	alt_up_ps2_read_data_byte_timeout(ps2_device, &byte);
    6b0c:	e13ffe17 	ldw	r4,-8(fp)
    6b10:	d1604b04 	addi	r5,gp,-32468
    6b14:	00186480 	call	18648 <alt_up_ps2_read_data_byte_timeout>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    6b18:	e03ffd15 	stw	zero,-12(fp)
	  // Send a notification to index 0 with value 1
	xTaskNotifyFromISR(keyboardTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    6b1c:	d1204c17 	ldw	r4,-32464(gp)
    6b20:	01400044 	movi	r5,1
    6b24:	018000c4 	movi	r6,3
    6b28:	e1fffd04 	addi	r7,fp,-12
    6b2c:	00045bc0 	call	45bc <xTaskNotifyFromISR>
}
    6b30:	e037883a 	mov	sp,fp
    6b34:	dfc00117 	ldw	ra,4(sp)
    6b38:	df000017 	ldw	fp,0(sp)
    6b3c:	dec00204 	addi	sp,sp,8
    6b40:	f800283a 	ret

00006b44 <vTimerCallback>:

void vTimerCallback(xTimerHandle t_timer){
    6b44:	defffe04 	addi	sp,sp,-8
    6b48:	df000115 	stw	fp,4(sp)
    6b4c:	df000104 	addi	fp,sp,4
    6b50:	e13fff15 	stw	r4,-4(fp)
	if((loadManage == true) &&(unstableRemain == false)){
    6b54:	d0a04003 	ldbu	r2,-32512(gp)
    6b58:	10803fcc 	andi	r2,r2,255
    6b5c:	1005003a 	cmpeq	r2,r2,zero
    6b60:	1000061e 	bne	r2,zero,6b7c <vTimerCallback+0x38>
    6b64:	d0a04083 	ldbu	r2,-32510(gp)
    6b68:	10803fcc 	andi	r2,r2,255
    6b6c:	1004c03a 	cmpne	r2,r2,zero
    6b70:	1000021e 	bne	r2,zero,6b7c <vTimerCallback+0x38>
		//printf("it reset\n");
		unstableRemain = true;
    6b74:	00800044 	movi	r2,1
    6b78:	d0a04085 	stb	r2,-32510(gp)
	}
	//timerCount++;
	//printf("current time is : %d\n",timerCount*5);
	//printf("unstable remained\n");
}
    6b7c:	e037883a 	mov	sp,fp
    6b80:	df000017 	ldw	fp,0(sp)
    6b84:	dec00104 	addi	sp,sp,4
    6b88:	f800283a 	ret

00006b8c <push_button_irq>:


void push_button_irq(){
    6b8c:	deffff04 	addi	sp,sp,-4
    6b90:	df000015 	stw	fp,0(sp)
    6b94:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE));
    6b98:	00800134 	movhi	r2,4
    6b9c:	108c3304 	addi	r2,r2,12492
    6ba0:	10c00037 	ldwio	r3,0(r2)
    6ba4:	00800134 	movhi	r2,4
    6ba8:	108c2004 	addi	r2,r2,12416
    6bac:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7); //write 1 to clear all detected falling edges
    6bb0:	00c00134 	movhi	r3,4
    6bb4:	18cc3304 	addi	r3,r3,12492
    6bb8:	008001c4 	movi	r2,7
    6bbc:	18800035 	stwio	r2,0(r3)
	return;
}
    6bc0:	e037883a 	mov	sp,fp
    6bc4:	df000017 	ldw	fp,0(sp)
    6bc8:	dec00104 	addi	sp,sp,4
    6bcc:	f800283a 	ret

00006bd0 <main>:

int main()
{
    6bd0:	defff804 	addi	sp,sp,-32
    6bd4:	dfc00715 	stw	ra,28(sp)
    6bd8:	df000615 	stw	fp,24(sp)
    6bdc:	dc000515 	stw	r16,20(sp)
    6be0:	df000504 	addi	fp,sp,20
	Q_freq_data = xQueueCreate(100,sizeof(double));
    6be4:	01001904 	movi	r4,100
    6be8:	01400204 	movi	r5,8
    6bec:	000d883a 	mov	r6,zero
    6bf0:	0001bd80 	call	1bd8 <xQueueGenericCreate>
    6bf4:	d0a04215 	stw	r2,-32504(gp)
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
    6bf8:	01020034 	movhi	r4,2048
    6bfc:	2100e304 	addi	r4,r4,908
    6c00:	00189100 	call	18910 <alt_up_ps2_open_dev>
    6c04:	e0bfff15 	stw	r2,-4(fp)

	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay);
    6c08:	010001c4 	movi	r4,7
    6c0c:	000b883a 	mov	r5,zero
    6c10:	01800034 	movhi	r6,0
    6c14:	319a9504 	addi	r6,r6,27220
    6c18:	00019140 	call	1914 <alt_irq_register>

	alt_up_ps2_enable_read_interrupt(ps2_device);
    6c1c:	e13fff17 	ldw	r4,-4(fp)
    6c20:	00184480 	call	18448 <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
    6c24:	01000084 	movi	r4,2
    6c28:	e17fff17 	ldw	r5,-4(fp)
    6c2c:	01800034 	movhi	r6,0
    6c30:	319abd04 	addi	r6,r6,27380
    6c34:	00019140 	call	1914 <alt_irq_register>

	timer = xTimerCreate("Timer Name", 500, pdTRUE, NULL, vTimerCallback);
    6c38:	00800034 	movhi	r2,0
    6c3c:	109ad104 	addi	r2,r2,27460
    6c40:	d8800015 	stw	r2,0(sp)
    6c44:	01020034 	movhi	r4,2048
    6c48:	2100e604 	addi	r4,r4,920
    6c4c:	01407d04 	movi	r5,500
    6c50:	01800044 	movi	r6,1
    6c54:	000f883a 	mov	r7,zero
    6c58:	00048fc0 	call	48fc <xTimerCreate>
    6c5c:	d0a04315 	stw	r2,-32500(gp)
	if (xTimerStart(timer, 0) != pdPASS){
    6c60:	d4204317 	ldw	r16,-32500(gp)
    6c64:	00031680 	call	3168 <xTaskGetTickCount>
    6c68:	100d883a 	mov	r6,r2
    6c6c:	d8000015 	stw	zero,0(sp)
    6c70:	8009883a 	mov	r4,r16
    6c74:	01400044 	movi	r5,1
    6c78:	000f883a 	mov	r7,zero
    6c7c:	00049ac0 	call	49ac <xTimerGenericCommand>
    6c80:	10800060 	cmpeqi	r2,r2,1
    6c84:	1000031e 	bne	r2,zero,6c94 <main+0xc4>
			printf("Cannot start timer");
    6c88:	01020034 	movhi	r4,2048
    6c8c:	2100e904 	addi	r4,r4,932
    6c90:	000844c0 	call	844c <printf>

	}

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTON_BASE, 0x7); //enable interrupt for all three push buttons (Keys 1-3 -> bits 0-2)
    6c94:	00c00134 	movhi	r3,4
    6c98:	18cc3204 	addi	r3,r3,12488
    6c9c:	008001c4 	movi	r2,7
    6ca0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7); //write 1 to edge capture to clear pending interrupts
    6ca4:	00c00134 	movhi	r3,4
    6ca8:	18cc3304 	addi	r3,r3,12492
    6cac:	008001c4 	movi	r2,7
    6cb0:	18800035 	stwio	r2,0(r3)
	alt_irq_register(PUSH_BUTTON_IRQ, 0, push_button_irq);  //register ISR for push button interrupt request
    6cb4:	01000044 	movi	r4,1
    6cb8:	000b883a 	mov	r5,zero
    6cbc:	01800034 	movhi	r6,0
    6cc0:	319ae304 	addi	r6,r6,27532
    6cc4:	00019140 	call	1914 <alt_irq_register>





	xTaskCreate( PRVGADraw_Task, "DrawTsk", configMINIMAL_STACK_SIZE, NULL, PRVGADraw_Task_P, &PRVGADraw );
    6cc8:	00800044 	movi	r2,1
    6ccc:	d8800015 	stw	r2,0(sp)
    6cd0:	d0a04a04 	addi	r2,gp,-32472
    6cd4:	d8800115 	stw	r2,4(sp)
    6cd8:	d8000215 	stw	zero,8(sp)
    6cdc:	d8000315 	stw	zero,12(sp)
    6ce0:	01000034 	movhi	r4,0
    6ce4:	21144f04 	addi	r4,r4,20796
    6ce8:	01420034 	movhi	r5,2048
    6cec:	2940ee04 	addi	r5,r5,952
    6cf0:	01900004 	movi	r6,16384
    6cf4:	000f883a 	mov	r7,zero
    6cf8:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	//xTaskCreate(print_status_task, "print_status_task", configMINIMAL_STACK_SIZE, NULL, PRINT_STATUS_TASK_PRIORITY, NULL);
	xTaskCreate(keyboard_control_task, "keyboardTsk", configMINIMAL_STACK_SIZE, NULL, KEYBOARD_TASK_PRIORITY, &keyboardTaskHandle);
    6cfc:	00800084 	movi	r2,2
    6d00:	d8800015 	stw	r2,0(sp)
    6d04:	d0a04c04 	addi	r2,gp,-32464
    6d08:	d8800115 	stw	r2,4(sp)
    6d0c:	d8000215 	stw	zero,8(sp)
    6d10:	d8000315 	stw	zero,12(sp)
    6d14:	01000034 	movhi	r4,0
    6d18:	21177304 	addi	r4,r4,24012
    6d1c:	01420034 	movhi	r5,2048
    6d20:	2940f004 	addi	r5,r5,960
    6d24:	01900004 	movi	r6,16384
    6d28:	000f883a 	mov	r7,zero
    6d2c:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	xTaskCreate(stabilityMonitorTask, "stableMonitorTsk", configMINIMAL_STACK_SIZE, NULL, STABLE_MONITOR_TASK_P, &stableTaskHandle);
    6d30:	00800144 	movi	r2,5
    6d34:	d8800015 	stw	r2,0(sp)
    6d38:	d0a04604 	addi	r2,gp,-32488
    6d3c:	d8800115 	stw	r2,4(sp)
    6d40:	d8000215 	stw	zero,8(sp)
    6d44:	d8000315 	stw	zero,12(sp)
    6d48:	01000034 	movhi	r4,0
    6d4c:	21186c04 	addi	r4,r4,25008
    6d50:	01420034 	movhi	r5,2048
    6d54:	2940f304 	addi	r5,r5,972
    6d58:	01900004 	movi	r6,16384
    6d5c:	000f883a 	mov	r7,zero
    6d60:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	xTaskCreate(loadCtlTask, "loadCtlTask", configMINIMAL_STACK_SIZE, NULL, LOAD_CONTROL_TASK_P, &loadCtlTaskHandle);
    6d64:	00800184 	movi	r2,6
    6d68:	d8800015 	stw	r2,0(sp)
    6d6c:	d0a05004 	addi	r2,gp,-32448
    6d70:	d8800115 	stw	r2,4(sp)
    6d74:	d8000215 	stw	zero,8(sp)
    6d78:	d8000315 	stw	zero,12(sp)
    6d7c:	01000034 	movhi	r4,0
    6d80:	21198a04 	addi	r4,r4,26152
    6d84:	01420034 	movhi	r5,2048
    6d88:	2940f804 	addi	r5,r5,992
    6d8c:	01900004 	movi	r6,16384
    6d90:	000f883a 	mov	r7,zero
    6d94:	0002bf80 	call	2bf8 <xTaskGenericCreate>
	xTaskCreate(switchPollingTask, "switchPollingTask", configMINIMAL_STACK_SIZE, NULL, LOAD_CONTROL_TASK_P, &switchPollingTaskHandle);
    6d98:	00800184 	movi	r2,6
    6d9c:	d8800015 	stw	r2,0(sp)
    6da0:	d0a04704 	addi	r2,gp,-32484
    6da4:	d8800115 	stw	r2,4(sp)
    6da8:	d8000215 	stw	zero,8(sp)
    6dac:	d8000315 	stw	zero,12(sp)
    6db0:	01000034 	movhi	r4,0
    6db4:	211a4f04 	addi	r4,r4,26940
    6db8:	01420034 	movhi	r5,2048
    6dbc:	2940fb04 	addi	r5,r5,1004
    6dc0:	01900004 	movi	r6,16384
    6dc4:	000f883a 	mov	r7,zero
    6dc8:	0002bf80 	call	2bf8 <xTaskGenericCreate>


	vTaskStartScheduler();
    6dcc:	0002f100 	call	2f10 <vTaskStartScheduler>

	while(1)

  return 0;
    6dd0:	0005883a 	mov	r2,zero
}
    6dd4:	e037883a 	mov	sp,fp
    6dd8:	dfc00217 	ldw	ra,8(sp)
    6ddc:	df000117 	ldw	fp,4(sp)
    6de0:	dc000017 	ldw	r16,0(sp)
    6de4:	dec00304 	addi	sp,sp,12
    6de8:	f800283a 	ret

00006dec <_fpadd_parts>:
    6dec:	defff804 	addi	sp,sp,-32
    6df0:	dcc00315 	stw	r19,12(sp)
    6df4:	2027883a 	mov	r19,r4
    6df8:	21000017 	ldw	r4,0(r4)
    6dfc:	00c00044 	movi	r3,1
    6e00:	dd400515 	stw	r21,20(sp)
    6e04:	dd000415 	stw	r20,16(sp)
    6e08:	ddc00715 	stw	r23,28(sp)
    6e0c:	dd800615 	stw	r22,24(sp)
    6e10:	dc800215 	stw	r18,8(sp)
    6e14:	dc400115 	stw	r17,4(sp)
    6e18:	dc000015 	stw	r16,0(sp)
    6e1c:	282b883a 	mov	r21,r5
    6e20:	3029883a 	mov	r20,r6
    6e24:	1900632e 	bgeu	r3,r4,6fb4 <_fpadd_parts+0x1c8>
    6e28:	28800017 	ldw	r2,0(r5)
    6e2c:	1880812e 	bgeu	r3,r2,7034 <_fpadd_parts+0x248>
    6e30:	00c00104 	movi	r3,4
    6e34:	20c0dc26 	beq	r4,r3,71a8 <_fpadd_parts+0x3bc>
    6e38:	10c07e26 	beq	r2,r3,7034 <_fpadd_parts+0x248>
    6e3c:	00c00084 	movi	r3,2
    6e40:	10c06726 	beq	r2,r3,6fe0 <_fpadd_parts+0x1f4>
    6e44:	20c07b26 	beq	r4,r3,7034 <_fpadd_parts+0x248>
    6e48:	9dc00217 	ldw	r23,8(r19)
    6e4c:	28c00217 	ldw	r3,8(r5)
    6e50:	9c400317 	ldw	r17,12(r19)
    6e54:	2bc00317 	ldw	r15,12(r5)
    6e58:	b8cdc83a 	sub	r6,r23,r3
    6e5c:	9c800417 	ldw	r18,16(r19)
    6e60:	2c000417 	ldw	r16,16(r5)
    6e64:	3009883a 	mov	r4,r6
    6e68:	30009716 	blt	r6,zero,70c8 <_fpadd_parts+0x2dc>
    6e6c:	00800fc4 	movi	r2,63
    6e70:	11806b16 	blt	r2,r6,7020 <_fpadd_parts+0x234>
    6e74:	0100a40e 	bge	zero,r4,7108 <_fpadd_parts+0x31c>
    6e78:	35bff804 	addi	r22,r6,-32
    6e7c:	b000bc16 	blt	r22,zero,7170 <_fpadd_parts+0x384>
    6e80:	8596d83a 	srl	r11,r16,r22
    6e84:	0019883a 	mov	r12,zero
    6e88:	0013883a 	mov	r9,zero
    6e8c:	01000044 	movi	r4,1
    6e90:	0015883a 	mov	r10,zero
    6e94:	b000be16 	blt	r22,zero,7190 <_fpadd_parts+0x3a4>
    6e98:	2590983a 	sll	r8,r4,r22
    6e9c:	000f883a 	mov	r7,zero
    6ea0:	00bfffc4 	movi	r2,-1
    6ea4:	3889883a 	add	r4,r7,r2
    6ea8:	408b883a 	add	r5,r8,r2
    6eac:	21cd803a 	cmpltu	r6,r4,r7
    6eb0:	314b883a 	add	r5,r6,r5
    6eb4:	7904703a 	and	r2,r15,r4
    6eb8:	8146703a 	and	r3,r16,r5
    6ebc:	10c4b03a 	or	r2,r2,r3
    6ec0:	10000226 	beq	r2,zero,6ecc <_fpadd_parts+0xe0>
    6ec4:	02400044 	movi	r9,1
    6ec8:	0015883a 	mov	r10,zero
    6ecc:	5a5eb03a 	or	r15,r11,r9
    6ed0:	62a0b03a 	or	r16,r12,r10
    6ed4:	99400117 	ldw	r5,4(r19)
    6ed8:	a8800117 	ldw	r2,4(r21)
    6edc:	28806e26 	beq	r5,r2,7098 <_fpadd_parts+0x2ac>
    6ee0:	28006626 	beq	r5,zero,707c <_fpadd_parts+0x290>
    6ee4:	7c45c83a 	sub	r2,r15,r17
    6ee8:	7889803a 	cmpltu	r4,r15,r2
    6eec:	8487c83a 	sub	r3,r16,r18
    6ef0:	1909c83a 	sub	r4,r3,r4
    6ef4:	100d883a 	mov	r6,r2
    6ef8:	200f883a 	mov	r7,r4
    6efc:	38007716 	blt	r7,zero,70dc <_fpadd_parts+0x2f0>
    6f00:	a5c00215 	stw	r23,8(r20)
    6f04:	a1c00415 	stw	r7,16(r20)
    6f08:	a0000115 	stw	zero,4(r20)
    6f0c:	a1800315 	stw	r6,12(r20)
    6f10:	a2000317 	ldw	r8,12(r20)
    6f14:	a2400417 	ldw	r9,16(r20)
    6f18:	00bfffc4 	movi	r2,-1
    6f1c:	408b883a 	add	r5,r8,r2
    6f20:	2a09803a 	cmpltu	r4,r5,r8
    6f24:	488d883a 	add	r6,r9,r2
    6f28:	01c40034 	movhi	r7,4096
    6f2c:	39ffffc4 	addi	r7,r7,-1
    6f30:	218d883a 	add	r6,r4,r6
    6f34:	39801736 	bltu	r7,r6,6f94 <_fpadd_parts+0x1a8>
    6f38:	31c06526 	beq	r6,r7,70d0 <_fpadd_parts+0x2e4>
    6f3c:	a3000217 	ldw	r12,8(r20)
    6f40:	4209883a 	add	r4,r8,r8
    6f44:	00bfffc4 	movi	r2,-1
    6f48:	220f803a 	cmpltu	r7,r4,r8
    6f4c:	4a4b883a 	add	r5,r9,r9
    6f50:	394f883a 	add	r7,r7,r5
    6f54:	2095883a 	add	r10,r4,r2
    6f58:	3897883a 	add	r11,r7,r2
    6f5c:	510d803a 	cmpltu	r6,r10,r4
    6f60:	6099883a 	add	r12,r12,r2
    6f64:	32d7883a 	add	r11,r6,r11
    6f68:	00840034 	movhi	r2,4096
    6f6c:	10bfffc4 	addi	r2,r2,-1
    6f70:	2011883a 	mov	r8,r4
    6f74:	3813883a 	mov	r9,r7
    6f78:	a1000315 	stw	r4,12(r20)
    6f7c:	a1c00415 	stw	r7,16(r20)
    6f80:	a3000215 	stw	r12,8(r20)
    6f84:	12c00336 	bltu	r2,r11,6f94 <_fpadd_parts+0x1a8>
    6f88:	58bfed1e 	bne	r11,r2,6f40 <_fpadd_parts+0x154>
    6f8c:	00bfff84 	movi	r2,-2
    6f90:	12bfeb2e 	bgeu	r2,r10,6f40 <_fpadd_parts+0x154>
    6f94:	a2800417 	ldw	r10,16(r20)
    6f98:	008000c4 	movi	r2,3
    6f9c:	00c80034 	movhi	r3,8192
    6fa0:	18ffffc4 	addi	r3,r3,-1
    6fa4:	a2400317 	ldw	r9,12(r20)
    6fa8:	a0800015 	stw	r2,0(r20)
    6fac:	1a802336 	bltu	r3,r10,703c <_fpadd_parts+0x250>
    6fb0:	a027883a 	mov	r19,r20
    6fb4:	9805883a 	mov	r2,r19
    6fb8:	ddc00717 	ldw	r23,28(sp)
    6fbc:	dd800617 	ldw	r22,24(sp)
    6fc0:	dd400517 	ldw	r21,20(sp)
    6fc4:	dd000417 	ldw	r20,16(sp)
    6fc8:	dcc00317 	ldw	r19,12(sp)
    6fcc:	dc800217 	ldw	r18,8(sp)
    6fd0:	dc400117 	ldw	r17,4(sp)
    6fd4:	dc000017 	ldw	r16,0(sp)
    6fd8:	dec00804 	addi	sp,sp,32
    6fdc:	f800283a 	ret
    6fe0:	20fff41e 	bne	r4,r3,6fb4 <_fpadd_parts+0x1c8>
    6fe4:	31000015 	stw	r4,0(r6)
    6fe8:	98800117 	ldw	r2,4(r19)
    6fec:	30800115 	stw	r2,4(r6)
    6ff0:	98c00217 	ldw	r3,8(r19)
    6ff4:	30c00215 	stw	r3,8(r6)
    6ff8:	98800317 	ldw	r2,12(r19)
    6ffc:	30800315 	stw	r2,12(r6)
    7000:	98c00417 	ldw	r3,16(r19)
    7004:	30c00415 	stw	r3,16(r6)
    7008:	98800117 	ldw	r2,4(r19)
    700c:	28c00117 	ldw	r3,4(r5)
    7010:	3027883a 	mov	r19,r6
    7014:	10c4703a 	and	r2,r2,r3
    7018:	30800115 	stw	r2,4(r6)
    701c:	003fe506 	br	6fb4 <_fpadd_parts+0x1c8>
    7020:	1dc02616 	blt	r3,r23,70bc <_fpadd_parts+0x2d0>
    7024:	0023883a 	mov	r17,zero
    7028:	182f883a 	mov	r23,r3
    702c:	0025883a 	mov	r18,zero
    7030:	003fa806 	br	6ed4 <_fpadd_parts+0xe8>
    7034:	a827883a 	mov	r19,r21
    7038:	003fde06 	br	6fb4 <_fpadd_parts+0x1c8>
    703c:	01800044 	movi	r6,1
    7040:	500497fa 	slli	r2,r10,31
    7044:	4808d07a 	srli	r4,r9,1
    7048:	518ad83a 	srl	r5,r10,r6
    704c:	a2000217 	ldw	r8,8(r20)
    7050:	1108b03a 	or	r4,r2,r4
    7054:	0007883a 	mov	r3,zero
    7058:	4984703a 	and	r2,r9,r6
    705c:	208cb03a 	or	r6,r4,r2
    7060:	28ceb03a 	or	r7,r5,r3
    7064:	42000044 	addi	r8,r8,1
    7068:	a027883a 	mov	r19,r20
    706c:	a1c00415 	stw	r7,16(r20)
    7070:	a2000215 	stw	r8,8(r20)
    7074:	a1800315 	stw	r6,12(r20)
    7078:	003fce06 	br	6fb4 <_fpadd_parts+0x1c8>
    707c:	8bc5c83a 	sub	r2,r17,r15
    7080:	8889803a 	cmpltu	r4,r17,r2
    7084:	9407c83a 	sub	r3,r18,r16
    7088:	1909c83a 	sub	r4,r3,r4
    708c:	100d883a 	mov	r6,r2
    7090:	200f883a 	mov	r7,r4
    7094:	003f9906 	br	6efc <_fpadd_parts+0x110>
    7098:	7c45883a 	add	r2,r15,r17
    709c:	13c9803a 	cmpltu	r4,r2,r15
    70a0:	8487883a 	add	r3,r16,r18
    70a4:	20c9883a 	add	r4,r4,r3
    70a8:	a1400115 	stw	r5,4(r20)
    70ac:	a5c00215 	stw	r23,8(r20)
    70b0:	a0800315 	stw	r2,12(r20)
    70b4:	a1000415 	stw	r4,16(r20)
    70b8:	003fb606 	br	6f94 <_fpadd_parts+0x1a8>
    70bc:	001f883a 	mov	r15,zero
    70c0:	0021883a 	mov	r16,zero
    70c4:	003f8306 	br	6ed4 <_fpadd_parts+0xe8>
    70c8:	018dc83a 	sub	r6,zero,r6
    70cc:	003f6706 	br	6e6c <_fpadd_parts+0x80>
    70d0:	00bfff84 	movi	r2,-2
    70d4:	117faf36 	bltu	r2,r5,6f94 <_fpadd_parts+0x1a8>
    70d8:	003f9806 	br	6f3c <_fpadd_parts+0x150>
    70dc:	0005883a 	mov	r2,zero
    70e0:	1189c83a 	sub	r4,r2,r6
    70e4:	1105803a 	cmpltu	r2,r2,r4
    70e8:	01cbc83a 	sub	r5,zero,r7
    70ec:	2885c83a 	sub	r2,r5,r2
    70f0:	01800044 	movi	r6,1
    70f4:	a1800115 	stw	r6,4(r20)
    70f8:	a5c00215 	stw	r23,8(r20)
    70fc:	a1000315 	stw	r4,12(r20)
    7100:	a0800415 	stw	r2,16(r20)
    7104:	003f8206 	br	6f10 <_fpadd_parts+0x124>
    7108:	203f7226 	beq	r4,zero,6ed4 <_fpadd_parts+0xe8>
    710c:	35bff804 	addi	r22,r6,-32
    7110:	b9af883a 	add	r23,r23,r6
    7114:	b0003116 	blt	r22,zero,71dc <_fpadd_parts+0x3f0>
    7118:	959ad83a 	srl	r13,r18,r22
    711c:	001d883a 	mov	r14,zero
    7120:	000f883a 	mov	r7,zero
    7124:	01000044 	movi	r4,1
    7128:	0011883a 	mov	r8,zero
    712c:	b0002516 	blt	r22,zero,71c4 <_fpadd_parts+0x3d8>
    7130:	2594983a 	sll	r10,r4,r22
    7134:	0013883a 	mov	r9,zero
    7138:	00bfffc4 	movi	r2,-1
    713c:	4889883a 	add	r4,r9,r2
    7140:	508b883a 	add	r5,r10,r2
    7144:	224d803a 	cmpltu	r6,r4,r9
    7148:	314b883a 	add	r5,r6,r5
    714c:	8904703a 	and	r2,r17,r4
    7150:	9146703a 	and	r3,r18,r5
    7154:	10c4b03a 	or	r2,r2,r3
    7158:	10000226 	beq	r2,zero,7164 <_fpadd_parts+0x378>
    715c:	01c00044 	movi	r7,1
    7160:	0011883a 	mov	r8,zero
    7164:	69e2b03a 	or	r17,r13,r7
    7168:	7224b03a 	or	r18,r14,r8
    716c:	003f5906 	br	6ed4 <_fpadd_parts+0xe8>
    7170:	8407883a 	add	r3,r16,r16
    7174:	008007c4 	movi	r2,31
    7178:	1185c83a 	sub	r2,r2,r6
    717c:	1886983a 	sll	r3,r3,r2
    7180:	7996d83a 	srl	r11,r15,r6
    7184:	8198d83a 	srl	r12,r16,r6
    7188:	1ad6b03a 	or	r11,r3,r11
    718c:	003f3e06 	br	6e88 <_fpadd_parts+0x9c>
    7190:	2006d07a 	srli	r3,r4,1
    7194:	008007c4 	movi	r2,31
    7198:	1185c83a 	sub	r2,r2,r6
    719c:	1890d83a 	srl	r8,r3,r2
    71a0:	218e983a 	sll	r7,r4,r6
    71a4:	003f3e06 	br	6ea0 <_fpadd_parts+0xb4>
    71a8:	113f821e 	bne	r2,r4,6fb4 <_fpadd_parts+0x1c8>
    71ac:	28c00117 	ldw	r3,4(r5)
    71b0:	98800117 	ldw	r2,4(r19)
    71b4:	10ff7f26 	beq	r2,r3,6fb4 <_fpadd_parts+0x1c8>
    71b8:	04c20034 	movhi	r19,2048
    71bc:	9cc10004 	addi	r19,r19,1024
    71c0:	003f7c06 	br	6fb4 <_fpadd_parts+0x1c8>
    71c4:	2006d07a 	srli	r3,r4,1
    71c8:	008007c4 	movi	r2,31
    71cc:	1185c83a 	sub	r2,r2,r6
    71d0:	1894d83a 	srl	r10,r3,r2
    71d4:	2192983a 	sll	r9,r4,r6
    71d8:	003fd706 	br	7138 <_fpadd_parts+0x34c>
    71dc:	9487883a 	add	r3,r18,r18
    71e0:	008007c4 	movi	r2,31
    71e4:	1185c83a 	sub	r2,r2,r6
    71e8:	1886983a 	sll	r3,r3,r2
    71ec:	899ad83a 	srl	r13,r17,r6
    71f0:	919cd83a 	srl	r14,r18,r6
    71f4:	1b5ab03a 	or	r13,r3,r13
    71f8:	003fc906 	br	7120 <_fpadd_parts+0x334>

000071fc <__subdf3>:
    71fc:	deffea04 	addi	sp,sp,-88
    7200:	dcc01415 	stw	r19,80(sp)
    7204:	dcc00404 	addi	r19,sp,16
    7208:	2011883a 	mov	r8,r4
    720c:	2813883a 	mov	r9,r5
    7210:	dc401315 	stw	r17,76(sp)
    7214:	d809883a 	mov	r4,sp
    7218:	980b883a 	mov	r5,r19
    721c:	dc400904 	addi	r17,sp,36
    7220:	dfc01515 	stw	ra,84(sp)
    7224:	da400115 	stw	r9,4(sp)
    7228:	d9c00315 	stw	r7,12(sp)
    722c:	da000015 	stw	r8,0(sp)
    7230:	d9800215 	stw	r6,8(sp)
    7234:	00080a00 	call	80a0 <__unpack_d>
    7238:	d9000204 	addi	r4,sp,8
    723c:	880b883a 	mov	r5,r17
    7240:	00080a00 	call	80a0 <__unpack_d>
    7244:	d8800a17 	ldw	r2,40(sp)
    7248:	880b883a 	mov	r5,r17
    724c:	9809883a 	mov	r4,r19
    7250:	d9800e04 	addi	r6,sp,56
    7254:	1080005c 	xori	r2,r2,1
    7258:	d8800a15 	stw	r2,40(sp)
    725c:	0006dec0 	call	6dec <_fpadd_parts>
    7260:	1009883a 	mov	r4,r2
    7264:	0007d8c0 	call	7d8c <__pack_d>
    7268:	dfc01517 	ldw	ra,84(sp)
    726c:	dcc01417 	ldw	r19,80(sp)
    7270:	dc401317 	ldw	r17,76(sp)
    7274:	dec01604 	addi	sp,sp,88
    7278:	f800283a 	ret

0000727c <__adddf3>:
    727c:	deffea04 	addi	sp,sp,-88
    7280:	dcc01415 	stw	r19,80(sp)
    7284:	dcc00404 	addi	r19,sp,16
    7288:	2011883a 	mov	r8,r4
    728c:	2813883a 	mov	r9,r5
    7290:	dc401315 	stw	r17,76(sp)
    7294:	d809883a 	mov	r4,sp
    7298:	980b883a 	mov	r5,r19
    729c:	dc400904 	addi	r17,sp,36
    72a0:	dfc01515 	stw	ra,84(sp)
    72a4:	da400115 	stw	r9,4(sp)
    72a8:	d9c00315 	stw	r7,12(sp)
    72ac:	da000015 	stw	r8,0(sp)
    72b0:	d9800215 	stw	r6,8(sp)
    72b4:	00080a00 	call	80a0 <__unpack_d>
    72b8:	d9000204 	addi	r4,sp,8
    72bc:	880b883a 	mov	r5,r17
    72c0:	00080a00 	call	80a0 <__unpack_d>
    72c4:	d9800e04 	addi	r6,sp,56
    72c8:	9809883a 	mov	r4,r19
    72cc:	880b883a 	mov	r5,r17
    72d0:	0006dec0 	call	6dec <_fpadd_parts>
    72d4:	1009883a 	mov	r4,r2
    72d8:	0007d8c0 	call	7d8c <__pack_d>
    72dc:	dfc01517 	ldw	ra,84(sp)
    72e0:	dcc01417 	ldw	r19,80(sp)
    72e4:	dc401317 	ldw	r17,76(sp)
    72e8:	dec01604 	addi	sp,sp,88
    72ec:	f800283a 	ret

000072f0 <__muldf3>:
    72f0:	deffe004 	addi	sp,sp,-128
    72f4:	dc401815 	stw	r17,96(sp)
    72f8:	dc400404 	addi	r17,sp,16
    72fc:	2011883a 	mov	r8,r4
    7300:	2813883a 	mov	r9,r5
    7304:	dc001715 	stw	r16,92(sp)
    7308:	d809883a 	mov	r4,sp
    730c:	880b883a 	mov	r5,r17
    7310:	dc000904 	addi	r16,sp,36
    7314:	dfc01f15 	stw	ra,124(sp)
    7318:	da400115 	stw	r9,4(sp)
    731c:	d9c00315 	stw	r7,12(sp)
    7320:	da000015 	stw	r8,0(sp)
    7324:	d9800215 	stw	r6,8(sp)
    7328:	ddc01e15 	stw	r23,120(sp)
    732c:	dd801d15 	stw	r22,116(sp)
    7330:	dd401c15 	stw	r21,112(sp)
    7334:	dd001b15 	stw	r20,108(sp)
    7338:	dcc01a15 	stw	r19,104(sp)
    733c:	dc801915 	stw	r18,100(sp)
    7340:	00080a00 	call	80a0 <__unpack_d>
    7344:	d9000204 	addi	r4,sp,8
    7348:	800b883a 	mov	r5,r16
    734c:	00080a00 	call	80a0 <__unpack_d>
    7350:	d9000417 	ldw	r4,16(sp)
    7354:	00800044 	movi	r2,1
    7358:	1100102e 	bgeu	r2,r4,739c <__muldf3+0xac>
    735c:	d8c00917 	ldw	r3,36(sp)
    7360:	10c0062e 	bgeu	r2,r3,737c <__muldf3+0x8c>
    7364:	00800104 	movi	r2,4
    7368:	20800a26 	beq	r4,r2,7394 <__muldf3+0xa4>
    736c:	1880cc26 	beq	r3,r2,76a0 <__muldf3+0x3b0>
    7370:	00800084 	movi	r2,2
    7374:	20800926 	beq	r4,r2,739c <__muldf3+0xac>
    7378:	1880191e 	bne	r3,r2,73e0 <__muldf3+0xf0>
    737c:	d8c00a17 	ldw	r3,40(sp)
    7380:	d8800517 	ldw	r2,20(sp)
    7384:	8009883a 	mov	r4,r16
    7388:	10c4c03a 	cmpne	r2,r2,r3
    738c:	d8800a15 	stw	r2,40(sp)
    7390:	00000706 	br	73b0 <__muldf3+0xc0>
    7394:	00800084 	movi	r2,2
    7398:	1880c326 	beq	r3,r2,76a8 <__muldf3+0x3b8>
    739c:	d8800517 	ldw	r2,20(sp)
    73a0:	d8c00a17 	ldw	r3,40(sp)
    73a4:	8809883a 	mov	r4,r17
    73a8:	10c4c03a 	cmpne	r2,r2,r3
    73ac:	d8800515 	stw	r2,20(sp)
    73b0:	0007d8c0 	call	7d8c <__pack_d>
    73b4:	dfc01f17 	ldw	ra,124(sp)
    73b8:	ddc01e17 	ldw	r23,120(sp)
    73bc:	dd801d17 	ldw	r22,116(sp)
    73c0:	dd401c17 	ldw	r21,112(sp)
    73c4:	dd001b17 	ldw	r20,108(sp)
    73c8:	dcc01a17 	ldw	r19,104(sp)
    73cc:	dc801917 	ldw	r18,100(sp)
    73d0:	dc401817 	ldw	r17,96(sp)
    73d4:	dc001717 	ldw	r16,92(sp)
    73d8:	dec02004 	addi	sp,sp,128
    73dc:	f800283a 	ret
    73e0:	dd800717 	ldw	r22,28(sp)
    73e4:	dc800c17 	ldw	r18,48(sp)
    73e8:	002b883a 	mov	r21,zero
    73ec:	0023883a 	mov	r17,zero
    73f0:	a80b883a 	mov	r5,r21
    73f4:	b00d883a 	mov	r6,r22
    73f8:	880f883a 	mov	r7,r17
    73fc:	ddc00817 	ldw	r23,32(sp)
    7400:	dcc00d17 	ldw	r19,52(sp)
    7404:	9009883a 	mov	r4,r18
    7408:	0007c740 	call	7c74 <__muldi3>
    740c:	001b883a 	mov	r13,zero
    7410:	680f883a 	mov	r7,r13
    7414:	b009883a 	mov	r4,r22
    7418:	000b883a 	mov	r5,zero
    741c:	980d883a 	mov	r6,r19
    7420:	b82d883a 	mov	r22,r23
    7424:	002f883a 	mov	r23,zero
    7428:	db401615 	stw	r13,88(sp)
    742c:	d8801315 	stw	r2,76(sp)
    7430:	d8c01415 	stw	r3,80(sp)
    7434:	dcc01515 	stw	r19,84(sp)
    7438:	0007c740 	call	7c74 <__muldi3>
    743c:	b00d883a 	mov	r6,r22
    7440:	000b883a 	mov	r5,zero
    7444:	9009883a 	mov	r4,r18
    7448:	b80f883a 	mov	r7,r23
    744c:	1021883a 	mov	r16,r2
    7450:	1823883a 	mov	r17,r3
    7454:	0007c740 	call	7c74 <__muldi3>
    7458:	8085883a 	add	r2,r16,r2
    745c:	140d803a 	cmpltu	r6,r2,r16
    7460:	88c7883a 	add	r3,r17,r3
    7464:	30cd883a 	add	r6,r6,r3
    7468:	1029883a 	mov	r20,r2
    746c:	302b883a 	mov	r21,r6
    7470:	da801317 	ldw	r10,76(sp)
    7474:	dac01417 	ldw	r11,80(sp)
    7478:	db001517 	ldw	r12,84(sp)
    747c:	db401617 	ldw	r13,88(sp)
    7480:	3440612e 	bgeu	r6,r17,7608 <__muldf3+0x318>
    7484:	0009883a 	mov	r4,zero
    7488:	5105883a 	add	r2,r10,r4
    748c:	128d803a 	cmpltu	r6,r2,r10
    7490:	5d07883a 	add	r3,r11,r20
    7494:	30cd883a 	add	r6,r6,r3
    7498:	0021883a 	mov	r16,zero
    749c:	04400044 	movi	r17,1
    74a0:	1025883a 	mov	r18,r2
    74a4:	3027883a 	mov	r19,r6
    74a8:	32c06236 	bltu	r6,r11,7634 <__muldf3+0x344>
    74ac:	59807a26 	beq	r11,r6,7698 <__muldf3+0x3a8>
    74b0:	680b883a 	mov	r5,r13
    74b4:	b80f883a 	mov	r7,r23
    74b8:	6009883a 	mov	r4,r12
    74bc:	b00d883a 	mov	r6,r22
    74c0:	0007c740 	call	7c74 <__muldi3>
    74c4:	1009883a 	mov	r4,r2
    74c8:	000f883a 	mov	r7,zero
    74cc:	1545883a 	add	r2,r2,r21
    74d0:	1111803a 	cmpltu	r8,r2,r4
    74d4:	19c7883a 	add	r3,r3,r7
    74d8:	40c7883a 	add	r3,r8,r3
    74dc:	88cb883a 	add	r5,r17,r3
    74e0:	d8c00617 	ldw	r3,24(sp)
    74e4:	8089883a 	add	r4,r16,r2
    74e8:	d8800b17 	ldw	r2,44(sp)
    74ec:	18c00104 	addi	r3,r3,4
    74f0:	240d803a 	cmpltu	r6,r4,r16
    74f4:	10c7883a 	add	r3,r2,r3
    74f8:	2013883a 	mov	r9,r4
    74fc:	d8800a17 	ldw	r2,40(sp)
    7500:	d9000517 	ldw	r4,20(sp)
    7504:	314d883a 	add	r6,r6,r5
    7508:	3015883a 	mov	r10,r6
    750c:	2088c03a 	cmpne	r4,r4,r2
    7510:	00880034 	movhi	r2,8192
    7514:	10bfffc4 	addi	r2,r2,-1
    7518:	d9000f15 	stw	r4,60(sp)
    751c:	d8c01015 	stw	r3,64(sp)
    7520:	1180162e 	bgeu	r2,r6,757c <__muldf3+0x28c>
    7524:	1811883a 	mov	r8,r3
    7528:	101f883a 	mov	r15,r2
    752c:	980497fa 	slli	r2,r19,31
    7530:	9016d07a 	srli	r11,r18,1
    7534:	500697fa 	slli	r3,r10,31
    7538:	480cd07a 	srli	r6,r9,1
    753c:	500ed07a 	srli	r7,r10,1
    7540:	12d6b03a 	or	r11,r2,r11
    7544:	00800044 	movi	r2,1
    7548:	198cb03a 	or	r6,r3,r6
    754c:	4888703a 	and	r4,r9,r2
    7550:	9818d07a 	srli	r12,r19,1
    7554:	001b883a 	mov	r13,zero
    7558:	03a00034 	movhi	r14,32768
    755c:	3013883a 	mov	r9,r6
    7560:	3815883a 	mov	r10,r7
    7564:	4091883a 	add	r8,r8,r2
    7568:	20000226 	beq	r4,zero,7574 <__muldf3+0x284>
    756c:	5b64b03a 	or	r18,r11,r13
    7570:	63a6b03a 	or	r19,r12,r14
    7574:	7abfed36 	bltu	r15,r10,752c <__muldf3+0x23c>
    7578:	da001015 	stw	r8,64(sp)
    757c:	00840034 	movhi	r2,4096
    7580:	10bfffc4 	addi	r2,r2,-1
    7584:	12801436 	bltu	r2,r10,75d8 <__muldf3+0x2e8>
    7588:	da001017 	ldw	r8,64(sp)
    758c:	101f883a 	mov	r15,r2
    7590:	4a45883a 	add	r2,r9,r9
    7594:	124d803a 	cmpltu	r6,r2,r9
    7598:	5287883a 	add	r3,r10,r10
    759c:	9497883a 	add	r11,r18,r18
    75a0:	5c8f803a 	cmpltu	r7,r11,r18
    75a4:	9cd9883a 	add	r12,r19,r19
    75a8:	01000044 	movi	r4,1
    75ac:	30cd883a 	add	r6,r6,r3
    75b0:	3b0f883a 	add	r7,r7,r12
    75b4:	423fffc4 	addi	r8,r8,-1
    75b8:	1013883a 	mov	r9,r2
    75bc:	3015883a 	mov	r10,r6
    75c0:	111ab03a 	or	r13,r2,r4
    75c4:	98003016 	blt	r19,zero,7688 <__muldf3+0x398>
    75c8:	5825883a 	mov	r18,r11
    75cc:	3827883a 	mov	r19,r7
    75d0:	7abfef2e 	bgeu	r15,r10,7590 <__muldf3+0x2a0>
    75d4:	da001015 	stw	r8,64(sp)
    75d8:	00803fc4 	movi	r2,255
    75dc:	488e703a 	and	r7,r9,r2
    75e0:	00802004 	movi	r2,128
    75e4:	0007883a 	mov	r3,zero
    75e8:	0011883a 	mov	r8,zero
    75ec:	38801826 	beq	r7,r2,7650 <__muldf3+0x360>
    75f0:	008000c4 	movi	r2,3
    75f4:	d9000e04 	addi	r4,sp,56
    75f8:	da801215 	stw	r10,72(sp)
    75fc:	d8800e15 	stw	r2,56(sp)
    7600:	da401115 	stw	r9,68(sp)
    7604:	003f6a06 	br	73b0 <__muldf3+0xc0>
    7608:	89802126 	beq	r17,r6,7690 <__muldf3+0x3a0>
    760c:	0009883a 	mov	r4,zero
    7610:	5105883a 	add	r2,r10,r4
    7614:	128d803a 	cmpltu	r6,r2,r10
    7618:	5d07883a 	add	r3,r11,r20
    761c:	30cd883a 	add	r6,r6,r3
    7620:	0021883a 	mov	r16,zero
    7624:	0023883a 	mov	r17,zero
    7628:	1025883a 	mov	r18,r2
    762c:	3027883a 	mov	r19,r6
    7630:	32ff9e2e 	bgeu	r6,r11,74ac <__muldf3+0x1bc>
    7634:	00800044 	movi	r2,1
    7638:	8089883a 	add	r4,r16,r2
    763c:	240d803a 	cmpltu	r6,r4,r16
    7640:	344d883a 	add	r6,r6,r17
    7644:	2021883a 	mov	r16,r4
    7648:	3023883a 	mov	r17,r6
    764c:	003f9806 	br	74b0 <__muldf3+0x1c0>
    7650:	403fe71e 	bne	r8,zero,75f0 <__muldf3+0x300>
    7654:	01004004 	movi	r4,256
    7658:	4904703a 	and	r2,r9,r4
    765c:	10c4b03a 	or	r2,r2,r3
    7660:	103fe31e 	bne	r2,zero,75f0 <__muldf3+0x300>
    7664:	94c4b03a 	or	r2,r18,r19
    7668:	103fe126 	beq	r2,zero,75f0 <__muldf3+0x300>
    766c:	49c5883a 	add	r2,r9,r7
    7670:	1251803a 	cmpltu	r8,r2,r9
    7674:	4291883a 	add	r8,r8,r10
    7678:	013fc004 	movi	r4,-256
    767c:	1112703a 	and	r9,r2,r4
    7680:	4015883a 	mov	r10,r8
    7684:	003fda06 	br	75f0 <__muldf3+0x300>
    7688:	6813883a 	mov	r9,r13
    768c:	003fce06 	br	75c8 <__muldf3+0x2d8>
    7690:	143f7c36 	bltu	r2,r16,7484 <__muldf3+0x194>
    7694:	003fdd06 	br	760c <__muldf3+0x31c>
    7698:	12bf852e 	bgeu	r2,r10,74b0 <__muldf3+0x1c0>
    769c:	003fe506 	br	7634 <__muldf3+0x344>
    76a0:	00800084 	movi	r2,2
    76a4:	20bf351e 	bne	r4,r2,737c <__muldf3+0x8c>
    76a8:	01020034 	movhi	r4,2048
    76ac:	21010004 	addi	r4,r4,1024
    76b0:	003f3f06 	br	73b0 <__muldf3+0xc0>

000076b4 <__divdf3>:
    76b4:	deffed04 	addi	sp,sp,-76
    76b8:	dcc01115 	stw	r19,68(sp)
    76bc:	dcc00404 	addi	r19,sp,16
    76c0:	2011883a 	mov	r8,r4
    76c4:	2813883a 	mov	r9,r5
    76c8:	dc000e15 	stw	r16,56(sp)
    76cc:	d809883a 	mov	r4,sp
    76d0:	980b883a 	mov	r5,r19
    76d4:	dc000904 	addi	r16,sp,36
    76d8:	dfc01215 	stw	ra,72(sp)
    76dc:	da400115 	stw	r9,4(sp)
    76e0:	d9c00315 	stw	r7,12(sp)
    76e4:	da000015 	stw	r8,0(sp)
    76e8:	d9800215 	stw	r6,8(sp)
    76ec:	dc801015 	stw	r18,64(sp)
    76f0:	dc400f15 	stw	r17,60(sp)
    76f4:	00080a00 	call	80a0 <__unpack_d>
    76f8:	d9000204 	addi	r4,sp,8
    76fc:	800b883a 	mov	r5,r16
    7700:	00080a00 	call	80a0 <__unpack_d>
    7704:	d9000417 	ldw	r4,16(sp)
    7708:	00800044 	movi	r2,1
    770c:	11000b2e 	bgeu	r2,r4,773c <__divdf3+0x88>
    7710:	d9400917 	ldw	r5,36(sp)
    7714:	1140762e 	bgeu	r2,r5,78f0 <__divdf3+0x23c>
    7718:	d8800517 	ldw	r2,20(sp)
    771c:	d8c00a17 	ldw	r3,40(sp)
    7720:	01800104 	movi	r6,4
    7724:	10c4f03a 	xor	r2,r2,r3
    7728:	d8800515 	stw	r2,20(sp)
    772c:	21800226 	beq	r4,r6,7738 <__divdf3+0x84>
    7730:	00800084 	movi	r2,2
    7734:	2080141e 	bne	r4,r2,7788 <__divdf3+0xd4>
    7738:	29000926 	beq	r5,r4,7760 <__divdf3+0xac>
    773c:	9809883a 	mov	r4,r19
    7740:	0007d8c0 	call	7d8c <__pack_d>
    7744:	dfc01217 	ldw	ra,72(sp)
    7748:	dcc01117 	ldw	r19,68(sp)
    774c:	dc801017 	ldw	r18,64(sp)
    7750:	dc400f17 	ldw	r17,60(sp)
    7754:	dc000e17 	ldw	r16,56(sp)
    7758:	dec01304 	addi	sp,sp,76
    775c:	f800283a 	ret
    7760:	01020034 	movhi	r4,2048
    7764:	21010004 	addi	r4,r4,1024
    7768:	0007d8c0 	call	7d8c <__pack_d>
    776c:	dfc01217 	ldw	ra,72(sp)
    7770:	dcc01117 	ldw	r19,68(sp)
    7774:	dc801017 	ldw	r18,64(sp)
    7778:	dc400f17 	ldw	r17,60(sp)
    777c:	dc000e17 	ldw	r16,56(sp)
    7780:	dec01304 	addi	sp,sp,76
    7784:	f800283a 	ret
    7788:	29805b26 	beq	r5,r6,78f8 <__divdf3+0x244>
    778c:	28802d26 	beq	r5,r2,7844 <__divdf3+0x190>
    7790:	d8c00617 	ldw	r3,24(sp)
    7794:	d8800b17 	ldw	r2,44(sp)
    7798:	d9c00817 	ldw	r7,32(sp)
    779c:	dc400d17 	ldw	r17,52(sp)
    77a0:	188bc83a 	sub	r5,r3,r2
    77a4:	d9800717 	ldw	r6,28(sp)
    77a8:	dc000c17 	ldw	r16,48(sp)
    77ac:	d9400615 	stw	r5,24(sp)
    77b0:	3c403836 	bltu	r7,r17,7894 <__divdf3+0x1e0>
    77b4:	89c03626 	beq	r17,r7,7890 <__divdf3+0x1dc>
    77b8:	0015883a 	mov	r10,zero
    77bc:	001d883a 	mov	r14,zero
    77c0:	02c40034 	movhi	r11,4096
    77c4:	001f883a 	mov	r15,zero
    77c8:	003f883a 	mov	ra,zero
    77cc:	04800f44 	movi	r18,61
    77d0:	00000f06 	br	7810 <__divdf3+0x15c>
    77d4:	601d883a 	mov	r14,r12
    77d8:	681f883a 	mov	r15,r13
    77dc:	400d883a 	mov	r6,r8
    77e0:	100f883a 	mov	r7,r2
    77e4:	3191883a 	add	r8,r6,r6
    77e8:	5808d07a 	srli	r4,r11,1
    77ec:	4185803a 	cmpltu	r2,r8,r6
    77f0:	39d3883a 	add	r9,r7,r7
    77f4:	28c6b03a 	or	r3,r5,r3
    77f8:	1245883a 	add	r2,r2,r9
    77fc:	1815883a 	mov	r10,r3
    7800:	2017883a 	mov	r11,r4
    7804:	400d883a 	mov	r6,r8
    7808:	100f883a 	mov	r7,r2
    780c:	fc801726 	beq	ra,r18,786c <__divdf3+0x1b8>
    7810:	580a97fa 	slli	r5,r11,31
    7814:	5006d07a 	srli	r3,r10,1
    7818:	ffc00044 	addi	ra,ra,1
    781c:	3c7ff136 	bltu	r7,r17,77e4 <__divdf3+0x130>
    7820:	3411c83a 	sub	r8,r6,r16
    7824:	3205803a 	cmpltu	r2,r6,r8
    7828:	3c53c83a 	sub	r9,r7,r17
    782c:	7298b03a 	or	r12,r14,r10
    7830:	7adab03a 	or	r13,r15,r11
    7834:	4885c83a 	sub	r2,r9,r2
    7838:	89ffe61e 	bne	r17,r7,77d4 <__divdf3+0x120>
    783c:	343fe936 	bltu	r6,r16,77e4 <__divdf3+0x130>
    7840:	003fe406 	br	77d4 <__divdf3+0x120>
    7844:	9809883a 	mov	r4,r19
    7848:	d9800415 	stw	r6,16(sp)
    784c:	0007d8c0 	call	7d8c <__pack_d>
    7850:	dfc01217 	ldw	ra,72(sp)
    7854:	dcc01117 	ldw	r19,68(sp)
    7858:	dc801017 	ldw	r18,64(sp)
    785c:	dc400f17 	ldw	r17,60(sp)
    7860:	dc000e17 	ldw	r16,56(sp)
    7864:	dec01304 	addi	sp,sp,76
    7868:	f800283a 	ret
    786c:	00803fc4 	movi	r2,255
    7870:	7090703a 	and	r8,r14,r2
    7874:	00802004 	movi	r2,128
    7878:	0007883a 	mov	r3,zero
    787c:	0013883a 	mov	r9,zero
    7880:	40800d26 	beq	r8,r2,78b8 <__divdf3+0x204>
    7884:	dbc00815 	stw	r15,32(sp)
    7888:	db800715 	stw	r14,28(sp)
    788c:	003fab06 	br	773c <__divdf3+0x88>
    7890:	343fc92e 	bgeu	r6,r16,77b8 <__divdf3+0x104>
    7894:	3185883a 	add	r2,r6,r6
    7898:	1189803a 	cmpltu	r4,r2,r6
    789c:	39c7883a 	add	r3,r7,r7
    78a0:	20c9883a 	add	r4,r4,r3
    78a4:	297fffc4 	addi	r5,r5,-1
    78a8:	100d883a 	mov	r6,r2
    78ac:	200f883a 	mov	r7,r4
    78b0:	d9400615 	stw	r5,24(sp)
    78b4:	003fc006 	br	77b8 <__divdf3+0x104>
    78b8:	483ff21e 	bne	r9,zero,7884 <__divdf3+0x1d0>
    78bc:	01004004 	movi	r4,256
    78c0:	7104703a 	and	r2,r14,r4
    78c4:	10c4b03a 	or	r2,r2,r3
    78c8:	103fee1e 	bne	r2,zero,7884 <__divdf3+0x1d0>
    78cc:	31c4b03a 	or	r2,r6,r7
    78d0:	103fec26 	beq	r2,zero,7884 <__divdf3+0x1d0>
    78d4:	7205883a 	add	r2,r14,r8
    78d8:	1391803a 	cmpltu	r8,r2,r14
    78dc:	43d1883a 	add	r8,r8,r15
    78e0:	013fc004 	movi	r4,-256
    78e4:	111c703a 	and	r14,r2,r4
    78e8:	401f883a 	mov	r15,r8
    78ec:	003fe506 	br	7884 <__divdf3+0x1d0>
    78f0:	8009883a 	mov	r4,r16
    78f4:	003f9206 	br	7740 <__divdf3+0x8c>
    78f8:	9809883a 	mov	r4,r19
    78fc:	d8000715 	stw	zero,28(sp)
    7900:	d8000815 	stw	zero,32(sp)
    7904:	d8000615 	stw	zero,24(sp)
    7908:	003f8d06 	br	7740 <__divdf3+0x8c>

0000790c <__gtdf2>:
    790c:	deffef04 	addi	sp,sp,-68
    7910:	dc400f15 	stw	r17,60(sp)
    7914:	dc400404 	addi	r17,sp,16
    7918:	2005883a 	mov	r2,r4
    791c:	2807883a 	mov	r3,r5
    7920:	dc000e15 	stw	r16,56(sp)
    7924:	d809883a 	mov	r4,sp
    7928:	880b883a 	mov	r5,r17
    792c:	dc000904 	addi	r16,sp,36
    7930:	d8c00115 	stw	r3,4(sp)
    7934:	d8800015 	stw	r2,0(sp)
    7938:	d9800215 	stw	r6,8(sp)
    793c:	dfc01015 	stw	ra,64(sp)
    7940:	d9c00315 	stw	r7,12(sp)
    7944:	00080a00 	call	80a0 <__unpack_d>
    7948:	d9000204 	addi	r4,sp,8
    794c:	800b883a 	mov	r5,r16
    7950:	00080a00 	call	80a0 <__unpack_d>
    7954:	d8800417 	ldw	r2,16(sp)
    7958:	00c00044 	movi	r3,1
    795c:	01bfffc4 	movi	r6,-1
    7960:	1880062e 	bgeu	r3,r2,797c <__gtdf2+0x70>
    7964:	d8800917 	ldw	r2,36(sp)
    7968:	8809883a 	mov	r4,r17
    796c:	800b883a 	mov	r5,r16
    7970:	1880022e 	bgeu	r3,r2,797c <__gtdf2+0x70>
    7974:	00081d80 	call	81d8 <__fpcmp_parts_d>
    7978:	100d883a 	mov	r6,r2
    797c:	3005883a 	mov	r2,r6
    7980:	dfc01017 	ldw	ra,64(sp)
    7984:	dc400f17 	ldw	r17,60(sp)
    7988:	dc000e17 	ldw	r16,56(sp)
    798c:	dec01104 	addi	sp,sp,68
    7990:	f800283a 	ret

00007994 <__gedf2>:
    7994:	deffef04 	addi	sp,sp,-68
    7998:	dc400f15 	stw	r17,60(sp)
    799c:	dc400404 	addi	r17,sp,16
    79a0:	2005883a 	mov	r2,r4
    79a4:	2807883a 	mov	r3,r5
    79a8:	dc000e15 	stw	r16,56(sp)
    79ac:	d809883a 	mov	r4,sp
    79b0:	880b883a 	mov	r5,r17
    79b4:	dc000904 	addi	r16,sp,36
    79b8:	d8c00115 	stw	r3,4(sp)
    79bc:	d8800015 	stw	r2,0(sp)
    79c0:	d9800215 	stw	r6,8(sp)
    79c4:	dfc01015 	stw	ra,64(sp)
    79c8:	d9c00315 	stw	r7,12(sp)
    79cc:	00080a00 	call	80a0 <__unpack_d>
    79d0:	d9000204 	addi	r4,sp,8
    79d4:	800b883a 	mov	r5,r16
    79d8:	00080a00 	call	80a0 <__unpack_d>
    79dc:	d8800417 	ldw	r2,16(sp)
    79e0:	00c00044 	movi	r3,1
    79e4:	01bfffc4 	movi	r6,-1
    79e8:	1880062e 	bgeu	r3,r2,7a04 <__gedf2+0x70>
    79ec:	d8800917 	ldw	r2,36(sp)
    79f0:	8809883a 	mov	r4,r17
    79f4:	800b883a 	mov	r5,r16
    79f8:	1880022e 	bgeu	r3,r2,7a04 <__gedf2+0x70>
    79fc:	00081d80 	call	81d8 <__fpcmp_parts_d>
    7a00:	100d883a 	mov	r6,r2
    7a04:	3005883a 	mov	r2,r6
    7a08:	dfc01017 	ldw	ra,64(sp)
    7a0c:	dc400f17 	ldw	r17,60(sp)
    7a10:	dc000e17 	ldw	r16,56(sp)
    7a14:	dec01104 	addi	sp,sp,68
    7a18:	f800283a 	ret

00007a1c <__ledf2>:
    7a1c:	deffef04 	addi	sp,sp,-68
    7a20:	dc400f15 	stw	r17,60(sp)
    7a24:	dc400404 	addi	r17,sp,16
    7a28:	2005883a 	mov	r2,r4
    7a2c:	2807883a 	mov	r3,r5
    7a30:	dc000e15 	stw	r16,56(sp)
    7a34:	d809883a 	mov	r4,sp
    7a38:	880b883a 	mov	r5,r17
    7a3c:	dc000904 	addi	r16,sp,36
    7a40:	d8c00115 	stw	r3,4(sp)
    7a44:	d8800015 	stw	r2,0(sp)
    7a48:	d9800215 	stw	r6,8(sp)
    7a4c:	dfc01015 	stw	ra,64(sp)
    7a50:	d9c00315 	stw	r7,12(sp)
    7a54:	00080a00 	call	80a0 <__unpack_d>
    7a58:	d9000204 	addi	r4,sp,8
    7a5c:	800b883a 	mov	r5,r16
    7a60:	00080a00 	call	80a0 <__unpack_d>
    7a64:	d8800417 	ldw	r2,16(sp)
    7a68:	00c00044 	movi	r3,1
    7a6c:	180d883a 	mov	r6,r3
    7a70:	1880062e 	bgeu	r3,r2,7a8c <__ledf2+0x70>
    7a74:	d8800917 	ldw	r2,36(sp)
    7a78:	8809883a 	mov	r4,r17
    7a7c:	800b883a 	mov	r5,r16
    7a80:	1880022e 	bgeu	r3,r2,7a8c <__ledf2+0x70>
    7a84:	00081d80 	call	81d8 <__fpcmp_parts_d>
    7a88:	100d883a 	mov	r6,r2
    7a8c:	3005883a 	mov	r2,r6
    7a90:	dfc01017 	ldw	ra,64(sp)
    7a94:	dc400f17 	ldw	r17,60(sp)
    7a98:	dc000e17 	ldw	r16,56(sp)
    7a9c:	dec01104 	addi	sp,sp,68
    7aa0:	f800283a 	ret

00007aa4 <__floatsidf>:
    7aa4:	2006d7fa 	srli	r3,r4,31
    7aa8:	defff604 	addi	sp,sp,-40
    7aac:	008000c4 	movi	r2,3
    7ab0:	dfc00915 	stw	ra,36(sp)
    7ab4:	dcc00815 	stw	r19,32(sp)
    7ab8:	dc800715 	stw	r18,28(sp)
    7abc:	dc400615 	stw	r17,24(sp)
    7ac0:	dc000515 	stw	r16,20(sp)
    7ac4:	d8800015 	stw	r2,0(sp)
    7ac8:	d8c00115 	stw	r3,4(sp)
    7acc:	20000f1e 	bne	r4,zero,7b0c <__floatsidf+0x68>
    7ad0:	00800084 	movi	r2,2
    7ad4:	d8800015 	stw	r2,0(sp)
    7ad8:	d809883a 	mov	r4,sp
    7adc:	0007d8c0 	call	7d8c <__pack_d>
    7ae0:	1009883a 	mov	r4,r2
    7ae4:	180b883a 	mov	r5,r3
    7ae8:	2005883a 	mov	r2,r4
    7aec:	2807883a 	mov	r3,r5
    7af0:	dfc00917 	ldw	ra,36(sp)
    7af4:	dcc00817 	ldw	r19,32(sp)
    7af8:	dc800717 	ldw	r18,28(sp)
    7afc:	dc400617 	ldw	r17,24(sp)
    7b00:	dc000517 	ldw	r16,20(sp)
    7b04:	dec00a04 	addi	sp,sp,40
    7b08:	f800283a 	ret
    7b0c:	00800f04 	movi	r2,60
    7b10:	1807003a 	cmpeq	r3,r3,zero
    7b14:	d8800215 	stw	r2,8(sp)
    7b18:	18001126 	beq	r3,zero,7b60 <__floatsidf+0xbc>
    7b1c:	0027883a 	mov	r19,zero
    7b20:	2025883a 	mov	r18,r4
    7b24:	d9000315 	stw	r4,12(sp)
    7b28:	dcc00415 	stw	r19,16(sp)
    7b2c:	0007d0c0 	call	7d0c <__clzsi2>
    7b30:	11000744 	addi	r4,r2,29
    7b34:	013fe80e 	bge	zero,r4,7ad8 <__floatsidf+0x34>
    7b38:	10bfff44 	addi	r2,r2,-3
    7b3c:	10000c16 	blt	r2,zero,7b70 <__floatsidf+0xcc>
    7b40:	90a2983a 	sll	r17,r18,r2
    7b44:	0021883a 	mov	r16,zero
    7b48:	d8800217 	ldw	r2,8(sp)
    7b4c:	dc400415 	stw	r17,16(sp)
    7b50:	dc000315 	stw	r16,12(sp)
    7b54:	1105c83a 	sub	r2,r2,r4
    7b58:	d8800215 	stw	r2,8(sp)
    7b5c:	003fde06 	br	7ad8 <__floatsidf+0x34>
    7b60:	00a00034 	movhi	r2,32768
    7b64:	20800a26 	beq	r4,r2,7b90 <__floatsidf+0xec>
    7b68:	0109c83a 	sub	r4,zero,r4
    7b6c:	003feb06 	br	7b1c <__floatsidf+0x78>
    7b70:	9006d07a 	srli	r3,r18,1
    7b74:	008007c4 	movi	r2,31
    7b78:	1105c83a 	sub	r2,r2,r4
    7b7c:	1886d83a 	srl	r3,r3,r2
    7b80:	9922983a 	sll	r17,r19,r4
    7b84:	9120983a 	sll	r16,r18,r4
    7b88:	1c62b03a 	or	r17,r3,r17
    7b8c:	003fee06 	br	7b48 <__floatsidf+0xa4>
    7b90:	0009883a 	mov	r4,zero
    7b94:	01707834 	movhi	r5,49632
    7b98:	003fd306 	br	7ae8 <__floatsidf+0x44>

00007b9c <__fixdfsi>:
    7b9c:	defff804 	addi	sp,sp,-32
    7ba0:	2005883a 	mov	r2,r4
    7ba4:	2807883a 	mov	r3,r5
    7ba8:	d809883a 	mov	r4,sp
    7bac:	d9400204 	addi	r5,sp,8
    7bb0:	d8c00115 	stw	r3,4(sp)
    7bb4:	d8800015 	stw	r2,0(sp)
    7bb8:	dfc00715 	stw	ra,28(sp)
    7bbc:	00080a00 	call	80a0 <__unpack_d>
    7bc0:	d8c00217 	ldw	r3,8(sp)
    7bc4:	00800084 	movi	r2,2
    7bc8:	1880051e 	bne	r3,r2,7be0 <__fixdfsi+0x44>
    7bcc:	0007883a 	mov	r3,zero
    7bd0:	1805883a 	mov	r2,r3
    7bd4:	dfc00717 	ldw	ra,28(sp)
    7bd8:	dec00804 	addi	sp,sp,32
    7bdc:	f800283a 	ret
    7be0:	00800044 	movi	r2,1
    7be4:	10fff92e 	bgeu	r2,r3,7bcc <__fixdfsi+0x30>
    7be8:	00800104 	movi	r2,4
    7bec:	18800426 	beq	r3,r2,7c00 <__fixdfsi+0x64>
    7bf0:	d8c00417 	ldw	r3,16(sp)
    7bf4:	183ff516 	blt	r3,zero,7bcc <__fixdfsi+0x30>
    7bf8:	00800784 	movi	r2,30
    7bfc:	10c0080e 	bge	r2,r3,7c20 <__fixdfsi+0x84>
    7c00:	d8800317 	ldw	r2,12(sp)
    7c04:	1000121e 	bne	r2,zero,7c50 <__fixdfsi+0xb4>
    7c08:	00e00034 	movhi	r3,32768
    7c0c:	18ffffc4 	addi	r3,r3,-1
    7c10:	1805883a 	mov	r2,r3
    7c14:	dfc00717 	ldw	ra,28(sp)
    7c18:	dec00804 	addi	sp,sp,32
    7c1c:	f800283a 	ret
    7c20:	00800f04 	movi	r2,60
    7c24:	10d1c83a 	sub	r8,r2,r3
    7c28:	40bff804 	addi	r2,r8,-32
    7c2c:	d9800517 	ldw	r6,20(sp)
    7c30:	d9c00617 	ldw	r7,24(sp)
    7c34:	10000816 	blt	r2,zero,7c58 <__fixdfsi+0xbc>
    7c38:	3888d83a 	srl	r4,r7,r2
    7c3c:	d8800317 	ldw	r2,12(sp)
    7c40:	2007883a 	mov	r3,r4
    7c44:	103fe226 	beq	r2,zero,7bd0 <__fixdfsi+0x34>
    7c48:	0107c83a 	sub	r3,zero,r4
    7c4c:	003fe006 	br	7bd0 <__fixdfsi+0x34>
    7c50:	00e00034 	movhi	r3,32768
    7c54:	003fde06 	br	7bd0 <__fixdfsi+0x34>
    7c58:	39c7883a 	add	r3,r7,r7
    7c5c:	008007c4 	movi	r2,31
    7c60:	1205c83a 	sub	r2,r2,r8
    7c64:	1886983a 	sll	r3,r3,r2
    7c68:	3208d83a 	srl	r4,r6,r8
    7c6c:	1908b03a 	or	r4,r3,r4
    7c70:	003ff206 	br	7c3c <__fixdfsi+0xa0>

00007c74 <__muldi3>:
    7c74:	2011883a 	mov	r8,r4
    7c78:	427fffcc 	andi	r9,r8,65535
    7c7c:	4018d43a 	srli	r12,r8,16
    7c80:	32bfffcc 	andi	r10,r6,65535
    7c84:	3016d43a 	srli	r11,r6,16
    7c88:	4a85383a 	mul	r2,r9,r10
    7c8c:	6295383a 	mul	r10,r12,r10
    7c90:	4ad3383a 	mul	r9,r9,r11
    7c94:	113fffcc 	andi	r4,r2,65535
    7c98:	1004d43a 	srli	r2,r2,16
    7c9c:	4a93883a 	add	r9,r9,r10
    7ca0:	3807883a 	mov	r3,r7
    7ca4:	1245883a 	add	r2,r2,r9
    7ca8:	280f883a 	mov	r7,r5
    7cac:	180b883a 	mov	r5,r3
    7cb0:	1006943a 	slli	r3,r2,16
    7cb4:	defffd04 	addi	sp,sp,-12
    7cb8:	dc800215 	stw	r18,8(sp)
    7cbc:	1907883a 	add	r3,r3,r4
    7cc0:	dc400115 	stw	r17,4(sp)
    7cc4:	dc000015 	stw	r16,0(sp)
    7cc8:	4165383a 	mul	r18,r8,r5
    7ccc:	31e3383a 	mul	r17,r6,r7
    7cd0:	1012d43a 	srli	r9,r2,16
    7cd4:	62d9383a 	mul	r12,r12,r11
    7cd8:	181f883a 	mov	r15,r3
    7cdc:	1280022e 	bgeu	r2,r10,7ce8 <__muldi3+0x74>
    7ce0:	00800074 	movhi	r2,1
    7ce4:	6099883a 	add	r12,r12,r2
    7ce8:	624d883a 	add	r6,r12,r9
    7cec:	9187883a 	add	r3,r18,r6
    7cf0:	88c7883a 	add	r3,r17,r3
    7cf4:	7805883a 	mov	r2,r15
    7cf8:	dc800217 	ldw	r18,8(sp)
    7cfc:	dc400117 	ldw	r17,4(sp)
    7d00:	dc000017 	ldw	r16,0(sp)
    7d04:	dec00304 	addi	sp,sp,12
    7d08:	f800283a 	ret

00007d0c <__clzsi2>:
    7d0c:	00bfffd4 	movui	r2,65535
    7d10:	11000e36 	bltu	r2,r4,7d4c <__clzsi2+0x40>
    7d14:	00803fc4 	movi	r2,255
    7d18:	01400204 	movi	r5,8
    7d1c:	0007883a 	mov	r3,zero
    7d20:	11001036 	bltu	r2,r4,7d64 <__clzsi2+0x58>
    7d24:	000b883a 	mov	r5,zero
    7d28:	20c6d83a 	srl	r3,r4,r3
    7d2c:	00820034 	movhi	r2,2048
    7d30:	10810504 	addi	r2,r2,1044
    7d34:	1887883a 	add	r3,r3,r2
    7d38:	18800003 	ldbu	r2,0(r3)
    7d3c:	00c00804 	movi	r3,32
    7d40:	2885883a 	add	r2,r5,r2
    7d44:	1885c83a 	sub	r2,r3,r2
    7d48:	f800283a 	ret
    7d4c:	01400404 	movi	r5,16
    7d50:	00804034 	movhi	r2,256
    7d54:	10bfffc4 	addi	r2,r2,-1
    7d58:	2807883a 	mov	r3,r5
    7d5c:	113ff22e 	bgeu	r2,r4,7d28 <__clzsi2+0x1c>
    7d60:	01400604 	movi	r5,24
    7d64:	2807883a 	mov	r3,r5
    7d68:	20c6d83a 	srl	r3,r4,r3
    7d6c:	00820034 	movhi	r2,2048
    7d70:	10810504 	addi	r2,r2,1044
    7d74:	1887883a 	add	r3,r3,r2
    7d78:	18800003 	ldbu	r2,0(r3)
    7d7c:	00c00804 	movi	r3,32
    7d80:	2885883a 	add	r2,r5,r2
    7d84:	1885c83a 	sub	r2,r3,r2
    7d88:	f800283a 	ret

00007d8c <__pack_d>:
    7d8c:	20c00017 	ldw	r3,0(r4)
    7d90:	defffd04 	addi	sp,sp,-12
    7d94:	dc000015 	stw	r16,0(sp)
    7d98:	dc800215 	stw	r18,8(sp)
    7d9c:	dc400115 	stw	r17,4(sp)
    7da0:	00800044 	movi	r2,1
    7da4:	22000317 	ldw	r8,12(r4)
    7da8:	001f883a 	mov	r15,zero
    7dac:	22400417 	ldw	r9,16(r4)
    7db0:	24000117 	ldw	r16,4(r4)
    7db4:	10c0552e 	bgeu	r2,r3,7f0c <__pack_d+0x180>
    7db8:	00800104 	movi	r2,4
    7dbc:	18804f26 	beq	r3,r2,7efc <__pack_d+0x170>
    7dc0:	00800084 	movi	r2,2
    7dc4:	18800226 	beq	r3,r2,7dd0 <__pack_d+0x44>
    7dc8:	4244b03a 	or	r2,r8,r9
    7dcc:	10001a1e 	bne	r2,zero,7e38 <__pack_d+0xac>
    7dd0:	000d883a 	mov	r6,zero
    7dd4:	000f883a 	mov	r7,zero
    7dd8:	0011883a 	mov	r8,zero
    7ddc:	00800434 	movhi	r2,16
    7de0:	10bfffc4 	addi	r2,r2,-1
    7de4:	301d883a 	mov	r14,r6
    7de8:	3884703a 	and	r2,r7,r2
    7dec:	400a953a 	slli	r5,r8,20
    7df0:	79bffc2c 	andhi	r6,r15,65520
    7df4:	308cb03a 	or	r6,r6,r2
    7df8:	00e00434 	movhi	r3,32784
    7dfc:	18ffffc4 	addi	r3,r3,-1
    7e00:	800497fa 	slli	r2,r16,31
    7e04:	30c6703a 	and	r3,r6,r3
    7e08:	1946b03a 	or	r3,r3,r5
    7e0c:	01600034 	movhi	r5,32768
    7e10:	297fffc4 	addi	r5,r5,-1
    7e14:	194a703a 	and	r5,r3,r5
    7e18:	288ab03a 	or	r5,r5,r2
    7e1c:	2807883a 	mov	r3,r5
    7e20:	7005883a 	mov	r2,r14
    7e24:	dc800217 	ldw	r18,8(sp)
    7e28:	dc400117 	ldw	r17,4(sp)
    7e2c:	dc000017 	ldw	r16,0(sp)
    7e30:	dec00304 	addi	sp,sp,12
    7e34:	f800283a 	ret
    7e38:	21000217 	ldw	r4,8(r4)
    7e3c:	00bf0084 	movi	r2,-1022
    7e40:	20803f16 	blt	r4,r2,7f40 <__pack_d+0x1b4>
    7e44:	0080ffc4 	movi	r2,1023
    7e48:	11002c16 	blt	r2,r4,7efc <__pack_d+0x170>
    7e4c:	00803fc4 	movi	r2,255
    7e50:	408c703a 	and	r6,r8,r2
    7e54:	00802004 	movi	r2,128
    7e58:	0007883a 	mov	r3,zero
    7e5c:	000f883a 	mov	r7,zero
    7e60:	2280ffc4 	addi	r10,r4,1023
    7e64:	30801e26 	beq	r6,r2,7ee0 <__pack_d+0x154>
    7e68:	00801fc4 	movi	r2,127
    7e6c:	4089883a 	add	r4,r8,r2
    7e70:	220d803a 	cmpltu	r6,r4,r8
    7e74:	324d883a 	add	r6,r6,r9
    7e78:	2011883a 	mov	r8,r4
    7e7c:	3013883a 	mov	r9,r6
    7e80:	00880034 	movhi	r2,8192
    7e84:	10bfffc4 	addi	r2,r2,-1
    7e88:	12400d36 	bltu	r2,r9,7ec0 <__pack_d+0x134>
    7e8c:	4804963a 	slli	r2,r9,24
    7e90:	400cd23a 	srli	r6,r8,8
    7e94:	480ed23a 	srli	r7,r9,8
    7e98:	013fffc4 	movi	r4,-1
    7e9c:	118cb03a 	or	r6,r2,r6
    7ea0:	01400434 	movhi	r5,16
    7ea4:	297fffc4 	addi	r5,r5,-1
    7ea8:	3104703a 	and	r2,r6,r4
    7eac:	3946703a 	and	r3,r7,r5
    7eb0:	5201ffcc 	andi	r8,r10,2047
    7eb4:	100d883a 	mov	r6,r2
    7eb8:	180f883a 	mov	r7,r3
    7ebc:	003fc706 	br	7ddc <__pack_d+0x50>
    7ec0:	480897fa 	slli	r4,r9,31
    7ec4:	4004d07a 	srli	r2,r8,1
    7ec8:	4806d07a 	srli	r3,r9,1
    7ecc:	52800044 	addi	r10,r10,1
    7ed0:	2084b03a 	or	r2,r4,r2
    7ed4:	1011883a 	mov	r8,r2
    7ed8:	1813883a 	mov	r9,r3
    7edc:	003feb06 	br	7e8c <__pack_d+0x100>
    7ee0:	383fe11e 	bne	r7,zero,7e68 <__pack_d+0xdc>
    7ee4:	01004004 	movi	r4,256
    7ee8:	4104703a 	and	r2,r8,r4
    7eec:	10c4b03a 	or	r2,r2,r3
    7ef0:	103fe326 	beq	r2,zero,7e80 <__pack_d+0xf4>
    7ef4:	3005883a 	mov	r2,r6
    7ef8:	003fdc06 	br	7e6c <__pack_d+0xe0>
    7efc:	000d883a 	mov	r6,zero
    7f00:	000f883a 	mov	r7,zero
    7f04:	0201ffc4 	movi	r8,2047
    7f08:	003fb406 	br	7ddc <__pack_d+0x50>
    7f0c:	0005883a 	mov	r2,zero
    7f10:	00c00234 	movhi	r3,8
    7f14:	408cb03a 	or	r6,r8,r2
    7f18:	48ceb03a 	or	r7,r9,r3
    7f1c:	013fffc4 	movi	r4,-1
    7f20:	01400434 	movhi	r5,16
    7f24:	297fffc4 	addi	r5,r5,-1
    7f28:	3104703a 	and	r2,r6,r4
    7f2c:	3946703a 	and	r3,r7,r5
    7f30:	100d883a 	mov	r6,r2
    7f34:	180f883a 	mov	r7,r3
    7f38:	0201ffc4 	movi	r8,2047
    7f3c:	003fa706 	br	7ddc <__pack_d+0x50>
    7f40:	1109c83a 	sub	r4,r2,r4
    7f44:	00800e04 	movi	r2,56
    7f48:	11004316 	blt	r2,r4,8058 <__pack_d+0x2cc>
    7f4c:	21fff804 	addi	r7,r4,-32
    7f50:	38004516 	blt	r7,zero,8068 <__pack_d+0x2dc>
    7f54:	49d8d83a 	srl	r12,r9,r7
    7f58:	001b883a 	mov	r13,zero
    7f5c:	0023883a 	mov	r17,zero
    7f60:	01400044 	movi	r5,1
    7f64:	0025883a 	mov	r18,zero
    7f68:	38004716 	blt	r7,zero,8088 <__pack_d+0x2fc>
    7f6c:	29d6983a 	sll	r11,r5,r7
    7f70:	0015883a 	mov	r10,zero
    7f74:	00bfffc4 	movi	r2,-1
    7f78:	5089883a 	add	r4,r10,r2
    7f7c:	588b883a 	add	r5,r11,r2
    7f80:	228d803a 	cmpltu	r6,r4,r10
    7f84:	314b883a 	add	r5,r6,r5
    7f88:	4104703a 	and	r2,r8,r4
    7f8c:	4946703a 	and	r3,r9,r5
    7f90:	10c4b03a 	or	r2,r2,r3
    7f94:	10000226 	beq	r2,zero,7fa0 <__pack_d+0x214>
    7f98:	04400044 	movi	r17,1
    7f9c:	0025883a 	mov	r18,zero
    7fa0:	00803fc4 	movi	r2,255
    7fa4:	644eb03a 	or	r7,r12,r17
    7fa8:	3892703a 	and	r9,r7,r2
    7fac:	00802004 	movi	r2,128
    7fb0:	6c90b03a 	or	r8,r13,r18
    7fb4:	0015883a 	mov	r10,zero
    7fb8:	48801626 	beq	r9,r2,8014 <__pack_d+0x288>
    7fbc:	01001fc4 	movi	r4,127
    7fc0:	3905883a 	add	r2,r7,r4
    7fc4:	11cd803a 	cmpltu	r6,r2,r7
    7fc8:	320d883a 	add	r6,r6,r8
    7fcc:	100f883a 	mov	r7,r2
    7fd0:	00840034 	movhi	r2,4096
    7fd4:	10bfffc4 	addi	r2,r2,-1
    7fd8:	3011883a 	mov	r8,r6
    7fdc:	0007883a 	mov	r3,zero
    7fe0:	11801b36 	bltu	r2,r6,8050 <__pack_d+0x2c4>
    7fe4:	4004963a 	slli	r2,r8,24
    7fe8:	3808d23a 	srli	r4,r7,8
    7fec:	400ad23a 	srli	r5,r8,8
    7ff0:	1813883a 	mov	r9,r3
    7ff4:	1108b03a 	or	r4,r2,r4
    7ff8:	00bfffc4 	movi	r2,-1
    7ffc:	00c00434 	movhi	r3,16
    8000:	18ffffc4 	addi	r3,r3,-1
    8004:	208c703a 	and	r6,r4,r2
    8008:	28ce703a 	and	r7,r5,r3
    800c:	4a01ffcc 	andi	r8,r9,2047
    8010:	003f7206 	br	7ddc <__pack_d+0x50>
    8014:	503fe91e 	bne	r10,zero,7fbc <__pack_d+0x230>
    8018:	01004004 	movi	r4,256
    801c:	3904703a 	and	r2,r7,r4
    8020:	0007883a 	mov	r3,zero
    8024:	10c4b03a 	or	r2,r2,r3
    8028:	10000626 	beq	r2,zero,8044 <__pack_d+0x2b8>
    802c:	3a45883a 	add	r2,r7,r9
    8030:	11cd803a 	cmpltu	r6,r2,r7
    8034:	320d883a 	add	r6,r6,r8
    8038:	100f883a 	mov	r7,r2
    803c:	3011883a 	mov	r8,r6
    8040:	0007883a 	mov	r3,zero
    8044:	00840034 	movhi	r2,4096
    8048:	10bfffc4 	addi	r2,r2,-1
    804c:	123fe52e 	bgeu	r2,r8,7fe4 <__pack_d+0x258>
    8050:	00c00044 	movi	r3,1
    8054:	003fe306 	br	7fe4 <__pack_d+0x258>
    8058:	0009883a 	mov	r4,zero
    805c:	0013883a 	mov	r9,zero
    8060:	000b883a 	mov	r5,zero
    8064:	003fe406 	br	7ff8 <__pack_d+0x26c>
    8068:	4a47883a 	add	r3,r9,r9
    806c:	008007c4 	movi	r2,31
    8070:	1105c83a 	sub	r2,r2,r4
    8074:	1886983a 	sll	r3,r3,r2
    8078:	4118d83a 	srl	r12,r8,r4
    807c:	491ad83a 	srl	r13,r9,r4
    8080:	1b18b03a 	or	r12,r3,r12
    8084:	003fb506 	br	7f5c <__pack_d+0x1d0>
    8088:	2806d07a 	srli	r3,r5,1
    808c:	008007c4 	movi	r2,31
    8090:	1105c83a 	sub	r2,r2,r4
    8094:	1896d83a 	srl	r11,r3,r2
    8098:	2914983a 	sll	r10,r5,r4
    809c:	003fb506 	br	7f74 <__pack_d+0x1e8>

000080a0 <__unpack_d>:
    80a0:	20c00117 	ldw	r3,4(r4)
    80a4:	22400017 	ldw	r9,0(r4)
    80a8:	00800434 	movhi	r2,16
    80ac:	10bfffc4 	addi	r2,r2,-1
    80b0:	1808d53a 	srli	r4,r3,20
    80b4:	180cd7fa 	srli	r6,r3,31
    80b8:	1894703a 	and	r10,r3,r2
    80bc:	2201ffcc 	andi	r8,r4,2047
    80c0:	281b883a 	mov	r13,r5
    80c4:	4817883a 	mov	r11,r9
    80c8:	29800115 	stw	r6,4(r5)
    80cc:	5019883a 	mov	r12,r10
    80d0:	40001e1e 	bne	r8,zero,814c <__unpack_d+0xac>
    80d4:	4a84b03a 	or	r2,r9,r10
    80d8:	10001926 	beq	r2,zero,8140 <__unpack_d+0xa0>
    80dc:	4804d63a 	srli	r2,r9,24
    80e0:	500c923a 	slli	r6,r10,8
    80e4:	013f0084 	movi	r4,-1022
    80e8:	00c40034 	movhi	r3,4096
    80ec:	18ffffc4 	addi	r3,r3,-1
    80f0:	118cb03a 	or	r6,r2,r6
    80f4:	008000c4 	movi	r2,3
    80f8:	480a923a 	slli	r5,r9,8
    80fc:	68800015 	stw	r2,0(r13)
    8100:	69000215 	stw	r4,8(r13)
    8104:	19800b36 	bltu	r3,r6,8134 <__unpack_d+0x94>
    8108:	200f883a 	mov	r7,r4
    810c:	1811883a 	mov	r8,r3
    8110:	2945883a 	add	r2,r5,r5
    8114:	1149803a 	cmpltu	r4,r2,r5
    8118:	3187883a 	add	r3,r6,r6
    811c:	20c9883a 	add	r4,r4,r3
    8120:	100b883a 	mov	r5,r2
    8124:	200d883a 	mov	r6,r4
    8128:	39ffffc4 	addi	r7,r7,-1
    812c:	413ff82e 	bgeu	r8,r4,8110 <__unpack_d+0x70>
    8130:	69c00215 	stw	r7,8(r13)
    8134:	69800415 	stw	r6,16(r13)
    8138:	69400315 	stw	r5,12(r13)
    813c:	f800283a 	ret
    8140:	00800084 	movi	r2,2
    8144:	28800015 	stw	r2,0(r5)
    8148:	f800283a 	ret
    814c:	0081ffc4 	movi	r2,2047
    8150:	40800f26 	beq	r8,r2,8190 <__unpack_d+0xf0>
    8154:	480cd63a 	srli	r6,r9,24
    8158:	5006923a 	slli	r3,r10,8
    815c:	4804923a 	slli	r2,r9,8
    8160:	0009883a 	mov	r4,zero
    8164:	30c6b03a 	or	r3,r6,r3
    8168:	01440034 	movhi	r5,4096
    816c:	110cb03a 	or	r6,r2,r4
    8170:	423f0044 	addi	r8,r8,-1023
    8174:	194eb03a 	or	r7,r3,r5
    8178:	008000c4 	movi	r2,3
    817c:	69c00415 	stw	r7,16(r13)
    8180:	6a000215 	stw	r8,8(r13)
    8184:	68800015 	stw	r2,0(r13)
    8188:	69800315 	stw	r6,12(r13)
    818c:	f800283a 	ret
    8190:	4a84b03a 	or	r2,r9,r10
    8194:	1000031e 	bne	r2,zero,81a4 <__unpack_d+0x104>
    8198:	00800104 	movi	r2,4
    819c:	28800015 	stw	r2,0(r5)
    81a0:	f800283a 	ret
    81a4:	0009883a 	mov	r4,zero
    81a8:	01400234 	movhi	r5,8
    81ac:	4904703a 	and	r2,r9,r4
    81b0:	5146703a 	and	r3,r10,r5
    81b4:	10c4b03a 	or	r2,r2,r3
    81b8:	10000526 	beq	r2,zero,81d0 <__unpack_d+0x130>
    81bc:	00800044 	movi	r2,1
    81c0:	68800015 	stw	r2,0(r13)
    81c4:	6b000415 	stw	r12,16(r13)
    81c8:	6ac00315 	stw	r11,12(r13)
    81cc:	f800283a 	ret
    81d0:	68000015 	stw	zero,0(r13)
    81d4:	003ffb06 	br	81c4 <__unpack_d+0x124>

000081d8 <__fpcmp_parts_d>:
    81d8:	21800017 	ldw	r6,0(r4)
    81dc:	00c00044 	movi	r3,1
    81e0:	19800a2e 	bgeu	r3,r6,820c <__fpcmp_parts_d+0x34>
    81e4:	28800017 	ldw	r2,0(r5)
    81e8:	1880082e 	bgeu	r3,r2,820c <__fpcmp_parts_d+0x34>
    81ec:	00c00104 	movi	r3,4
    81f0:	30c02626 	beq	r6,r3,828c <__fpcmp_parts_d+0xb4>
    81f4:	10c02226 	beq	r2,r3,8280 <__fpcmp_parts_d+0xa8>
    81f8:	00c00084 	movi	r3,2
    81fc:	30c00526 	beq	r6,r3,8214 <__fpcmp_parts_d+0x3c>
    8200:	10c0071e 	bne	r2,r3,8220 <__fpcmp_parts_d+0x48>
    8204:	20800117 	ldw	r2,4(r4)
    8208:	1000091e 	bne	r2,zero,8230 <__fpcmp_parts_d+0x58>
    820c:	00800044 	movi	r2,1
    8210:	f800283a 	ret
    8214:	10c01a1e 	bne	r2,r3,8280 <__fpcmp_parts_d+0xa8>
    8218:	0005883a 	mov	r2,zero
    821c:	f800283a 	ret
    8220:	22000117 	ldw	r8,4(r4)
    8224:	28800117 	ldw	r2,4(r5)
    8228:	40800326 	beq	r8,r2,8238 <__fpcmp_parts_d+0x60>
    822c:	403ff726 	beq	r8,zero,820c <__fpcmp_parts_d+0x34>
    8230:	00bfffc4 	movi	r2,-1
    8234:	f800283a 	ret
    8238:	20c00217 	ldw	r3,8(r4)
    823c:	28800217 	ldw	r2,8(r5)
    8240:	10fffa16 	blt	r2,r3,822c <__fpcmp_parts_d+0x54>
    8244:	18800916 	blt	r3,r2,826c <__fpcmp_parts_d+0x94>
    8248:	21c00417 	ldw	r7,16(r4)
    824c:	28c00417 	ldw	r3,16(r5)
    8250:	21800317 	ldw	r6,12(r4)
    8254:	28800317 	ldw	r2,12(r5)
    8258:	19fff436 	bltu	r3,r7,822c <__fpcmp_parts_d+0x54>
    825c:	38c00526 	beq	r7,r3,8274 <__fpcmp_parts_d+0x9c>
    8260:	38c00236 	bltu	r7,r3,826c <__fpcmp_parts_d+0x94>
    8264:	19ffec1e 	bne	r3,r7,8218 <__fpcmp_parts_d+0x40>
    8268:	30bfeb2e 	bgeu	r6,r2,8218 <__fpcmp_parts_d+0x40>
    826c:	403fe71e 	bne	r8,zero,820c <__fpcmp_parts_d+0x34>
    8270:	003fef06 	br	8230 <__fpcmp_parts_d+0x58>
    8274:	11bffa2e 	bgeu	r2,r6,8260 <__fpcmp_parts_d+0x88>
    8278:	403fe426 	beq	r8,zero,820c <__fpcmp_parts_d+0x34>
    827c:	003fec06 	br	8230 <__fpcmp_parts_d+0x58>
    8280:	28800117 	ldw	r2,4(r5)
    8284:	103fe11e 	bne	r2,zero,820c <__fpcmp_parts_d+0x34>
    8288:	003fe906 	br	8230 <__fpcmp_parts_d+0x58>
    828c:	11bfdd1e 	bne	r2,r6,8204 <__fpcmp_parts_d+0x2c>
    8290:	28c00117 	ldw	r3,4(r5)
    8294:	20800117 	ldw	r2,4(r4)
    8298:	1885c83a 	sub	r2,r3,r2
    829c:	f800283a 	ret

000082a0 <memcmp>:
    82a0:	00c000c4 	movi	r3,3
    82a4:	1980032e 	bgeu	r3,r6,82b4 <memcmp+0x14>
    82a8:	2144b03a 	or	r2,r4,r5
    82ac:	10c4703a 	and	r2,r2,r3
    82b0:	10000f26 	beq	r2,zero,82f0 <memcmp+0x50>
    82b4:	31ffffc4 	addi	r7,r6,-1
    82b8:	3000061e 	bne	r6,zero,82d4 <memcmp+0x34>
    82bc:	00000a06 	br	82e8 <memcmp+0x48>
    82c0:	39ffffc4 	addi	r7,r7,-1
    82c4:	00bfffc4 	movi	r2,-1
    82c8:	21000044 	addi	r4,r4,1
    82cc:	29400044 	addi	r5,r5,1
    82d0:	38800526 	beq	r7,r2,82e8 <memcmp+0x48>
    82d4:	20c00003 	ldbu	r3,0(r4)
    82d8:	28800003 	ldbu	r2,0(r5)
    82dc:	18bff826 	beq	r3,r2,82c0 <memcmp+0x20>
    82e0:	1885c83a 	sub	r2,r3,r2
    82e4:	f800283a 	ret
    82e8:	0005883a 	mov	r2,zero
    82ec:	f800283a 	ret
    82f0:	180f883a 	mov	r7,r3
    82f4:	20c00017 	ldw	r3,0(r4)
    82f8:	28800017 	ldw	r2,0(r5)
    82fc:	18bfed1e 	bne	r3,r2,82b4 <memcmp+0x14>
    8300:	31bfff04 	addi	r6,r6,-4
    8304:	21000104 	addi	r4,r4,4
    8308:	29400104 	addi	r5,r5,4
    830c:	39bff936 	bltu	r7,r6,82f4 <memcmp+0x54>
    8310:	003fe806 	br	82b4 <memcmp+0x14>

00008314 <memcpy>:
    8314:	01c003c4 	movi	r7,15
    8318:	2007883a 	mov	r3,r4
    831c:	3980032e 	bgeu	r7,r6,832c <memcpy+0x18>
    8320:	2904b03a 	or	r2,r5,r4
    8324:	108000cc 	andi	r2,r2,3
    8328:	10000926 	beq	r2,zero,8350 <memcpy+0x3c>
    832c:	30000626 	beq	r6,zero,8348 <memcpy+0x34>
    8330:	30cd883a 	add	r6,r6,r3
    8334:	28800003 	ldbu	r2,0(r5)
    8338:	29400044 	addi	r5,r5,1
    833c:	18800005 	stb	r2,0(r3)
    8340:	18c00044 	addi	r3,r3,1
    8344:	30fffb1e 	bne	r6,r3,8334 <memcpy+0x20>
    8348:	2005883a 	mov	r2,r4
    834c:	f800283a 	ret
    8350:	3811883a 	mov	r8,r7
    8354:	200f883a 	mov	r7,r4
    8358:	28c00017 	ldw	r3,0(r5)
    835c:	31bffc04 	addi	r6,r6,-16
    8360:	38c00015 	stw	r3,0(r7)
    8364:	28800117 	ldw	r2,4(r5)
    8368:	38800115 	stw	r2,4(r7)
    836c:	28c00217 	ldw	r3,8(r5)
    8370:	38c00215 	stw	r3,8(r7)
    8374:	28800317 	ldw	r2,12(r5)
    8378:	29400404 	addi	r5,r5,16
    837c:	38800315 	stw	r2,12(r7)
    8380:	39c00404 	addi	r7,r7,16
    8384:	41bff436 	bltu	r8,r6,8358 <memcpy+0x44>
    8388:	008000c4 	movi	r2,3
    838c:	1180072e 	bgeu	r2,r6,83ac <memcpy+0x98>
    8390:	1007883a 	mov	r3,r2
    8394:	28800017 	ldw	r2,0(r5)
    8398:	31bfff04 	addi	r6,r6,-4
    839c:	29400104 	addi	r5,r5,4
    83a0:	38800015 	stw	r2,0(r7)
    83a4:	39c00104 	addi	r7,r7,4
    83a8:	19bffa36 	bltu	r3,r6,8394 <memcpy+0x80>
    83ac:	3807883a 	mov	r3,r7
    83b0:	003fde06 	br	832c <memcpy+0x18>

000083b4 <memset>:
    83b4:	008000c4 	movi	r2,3
    83b8:	29403fcc 	andi	r5,r5,255
    83bc:	2007883a 	mov	r3,r4
    83c0:	1180022e 	bgeu	r2,r6,83cc <memset+0x18>
    83c4:	2084703a 	and	r2,r4,r2
    83c8:	10000826 	beq	r2,zero,83ec <memset+0x38>
    83cc:	30000526 	beq	r6,zero,83e4 <memset+0x30>
    83d0:	2805883a 	mov	r2,r5
    83d4:	30cd883a 	add	r6,r6,r3
    83d8:	18800005 	stb	r2,0(r3)
    83dc:	18c00044 	addi	r3,r3,1
    83e0:	19bffd1e 	bne	r3,r6,83d8 <memset+0x24>
    83e4:	2005883a 	mov	r2,r4
    83e8:	f800283a 	ret
    83ec:	2804923a 	slli	r2,r5,8
    83f0:	020003c4 	movi	r8,15
    83f4:	200f883a 	mov	r7,r4
    83f8:	2884b03a 	or	r2,r5,r2
    83fc:	1006943a 	slli	r3,r2,16
    8400:	10c6b03a 	or	r3,r2,r3
    8404:	41800a2e 	bgeu	r8,r6,8430 <memset+0x7c>
    8408:	4005883a 	mov	r2,r8
    840c:	31bffc04 	addi	r6,r6,-16
    8410:	38c00015 	stw	r3,0(r7)
    8414:	38c00115 	stw	r3,4(r7)
    8418:	38c00215 	stw	r3,8(r7)
    841c:	38c00315 	stw	r3,12(r7)
    8420:	39c00404 	addi	r7,r7,16
    8424:	11bff936 	bltu	r2,r6,840c <memset+0x58>
    8428:	008000c4 	movi	r2,3
    842c:	1180052e 	bgeu	r2,r6,8444 <memset+0x90>
    8430:	31bfff04 	addi	r6,r6,-4
    8434:	008000c4 	movi	r2,3
    8438:	38c00015 	stw	r3,0(r7)
    843c:	39c00104 	addi	r7,r7,4
    8440:	11bffb36 	bltu	r2,r6,8430 <memset+0x7c>
    8444:	3807883a 	mov	r3,r7
    8448:	003fe006 	br	83cc <memset+0x18>

0000844c <printf>:
    844c:	defffb04 	addi	sp,sp,-20
    8450:	dfc00115 	stw	ra,4(sp)
    8454:	d9400215 	stw	r5,8(sp)
    8458:	d9800315 	stw	r6,12(sp)
    845c:	d9c00415 	stw	r7,16(sp)
    8460:	00820034 	movhi	r2,2048
    8464:	108a3b04 	addi	r2,r2,10476
    8468:	10c00017 	ldw	r3,0(r2)
    846c:	200b883a 	mov	r5,r4
    8470:	d8800204 	addi	r2,sp,8
    8474:	19000217 	ldw	r4,8(r3)
    8478:	100d883a 	mov	r6,r2
    847c:	d8800015 	stw	r2,0(sp)
    8480:	000bd040 	call	bd04 <__vfprintf_internal>
    8484:	dfc00117 	ldw	ra,4(sp)
    8488:	dec00504 	addi	sp,sp,20
    848c:	f800283a 	ret

00008490 <_printf_r>:
    8490:	defffc04 	addi	sp,sp,-16
    8494:	dfc00115 	stw	ra,4(sp)
    8498:	d9800215 	stw	r6,8(sp)
    849c:	d9c00315 	stw	r7,12(sp)
    84a0:	280d883a 	mov	r6,r5
    84a4:	21400217 	ldw	r5,8(r4)
    84a8:	d8c00204 	addi	r3,sp,8
    84ac:	180f883a 	mov	r7,r3
    84b0:	d8c00015 	stw	r3,0(sp)
    84b4:	0009e580 	call	9e58 <___vfprintf_internal_r>
    84b8:	dfc00117 	ldw	ra,4(sp)
    84bc:	dec00404 	addi	sp,sp,16
    84c0:	f800283a 	ret

000084c4 <putchar>:
    84c4:	00820034 	movhi	r2,2048
    84c8:	108a3b04 	addi	r2,r2,10476
    84cc:	11800017 	ldw	r6,0(r2)
    84d0:	200b883a 	mov	r5,r4
    84d4:	3009883a 	mov	r4,r6
    84d8:	31800217 	ldw	r6,8(r6)
    84dc:	0010d581 	jmpi	10d58 <_putc_r>

000084e0 <_putchar_r>:
    84e0:	21800217 	ldw	r6,8(r4)
    84e4:	0010d581 	jmpi	10d58 <_putc_r>

000084e8 <_puts_r>:
    84e8:	defff604 	addi	sp,sp,-40
    84ec:	dc400715 	stw	r17,28(sp)
    84f0:	2023883a 	mov	r17,r4
    84f4:	2809883a 	mov	r4,r5
    84f8:	dfc00915 	stw	ra,36(sp)
    84fc:	dcc00815 	stw	r19,32(sp)
    8500:	2827883a 	mov	r19,r5
    8504:	00086700 	call	8670 <strlen>
    8508:	89400217 	ldw	r5,8(r17)
    850c:	00c20034 	movhi	r3,2048
    8510:	18c14504 	addi	r3,r3,1300
    8514:	01c00044 	movi	r7,1
    8518:	12000044 	addi	r8,r2,1
    851c:	d8c00515 	stw	r3,20(sp)
    8520:	d9c00615 	stw	r7,24(sp)
    8524:	d8c00304 	addi	r3,sp,12
    8528:	01c00084 	movi	r7,2
    852c:	8809883a 	mov	r4,r17
    8530:	d80d883a 	mov	r6,sp
    8534:	d8c00015 	stw	r3,0(sp)
    8538:	dcc00315 	stw	r19,12(sp)
    853c:	da000215 	stw	r8,8(sp)
    8540:	d9c00115 	stw	r7,4(sp)
    8544:	d8800415 	stw	r2,16(sp)
    8548:	000df600 	call	df60 <__sfvwrite_r>
    854c:	00ffffc4 	movi	r3,-1
    8550:	10000626 	beq	r2,zero,856c <_puts_r+0x84>
    8554:	1805883a 	mov	r2,r3
    8558:	dfc00917 	ldw	ra,36(sp)
    855c:	dcc00817 	ldw	r19,32(sp)
    8560:	dc400717 	ldw	r17,28(sp)
    8564:	dec00a04 	addi	sp,sp,40
    8568:	f800283a 	ret
    856c:	00c00284 	movi	r3,10
    8570:	1805883a 	mov	r2,r3
    8574:	dfc00917 	ldw	ra,36(sp)
    8578:	dcc00817 	ldw	r19,32(sp)
    857c:	dc400717 	ldw	r17,28(sp)
    8580:	dec00a04 	addi	sp,sp,40
    8584:	f800283a 	ret

00008588 <puts>:
    8588:	00820034 	movhi	r2,2048
    858c:	108a3b04 	addi	r2,r2,10476
    8590:	200b883a 	mov	r5,r4
    8594:	11000017 	ldw	r4,0(r2)
    8598:	00084e81 	jmpi	84e8 <_puts_r>

0000859c <sprintf>:
    859c:	deffe504 	addi	sp,sp,-108
    85a0:	2013883a 	mov	r9,r4
    85a4:	dfc01815 	stw	ra,96(sp)
    85a8:	d9801915 	stw	r6,100(sp)
    85ac:	d9c01a15 	stw	r7,104(sp)
    85b0:	d8801904 	addi	r2,sp,100
    85b4:	d8800015 	stw	r2,0(sp)
    85b8:	00820034 	movhi	r2,2048
    85bc:	108a3b04 	addi	r2,r2,10476
    85c0:	11000017 	ldw	r4,0(r2)
    85c4:	d9c00017 	ldw	r7,0(sp)
    85c8:	00808204 	movi	r2,520
    85cc:	00e00034 	movhi	r3,32768
    85d0:	18ffffc4 	addi	r3,r3,-1
    85d4:	280d883a 	mov	r6,r5
    85d8:	d880040d 	sth	r2,16(sp)
    85dc:	d9400104 	addi	r5,sp,4
    85e0:	00bfffc4 	movi	r2,-1
    85e4:	d8c00615 	stw	r3,24(sp)
    85e8:	d8c00315 	stw	r3,12(sp)
    85ec:	da400515 	stw	r9,20(sp)
    85f0:	d880048d 	sth	r2,18(sp)
    85f4:	da400115 	stw	r9,4(sp)
    85f8:	0009e580 	call	9e58 <___vfprintf_internal_r>
    85fc:	d8c00117 	ldw	r3,4(sp)
    8600:	18000005 	stb	zero,0(r3)
    8604:	dfc01817 	ldw	ra,96(sp)
    8608:	dec01b04 	addi	sp,sp,108
    860c:	f800283a 	ret

00008610 <_sprintf_r>:
    8610:	deffe604 	addi	sp,sp,-104
    8614:	2813883a 	mov	r9,r5
    8618:	dfc01815 	stw	ra,96(sp)
    861c:	d9c01915 	stw	r7,100(sp)
    8620:	d8801904 	addi	r2,sp,100
    8624:	d8800015 	stw	r2,0(sp)
    8628:	100f883a 	mov	r7,r2
    862c:	00808204 	movi	r2,520
    8630:	00e00034 	movhi	r3,32768
    8634:	18ffffc4 	addi	r3,r3,-1
    8638:	d880040d 	sth	r2,16(sp)
    863c:	d9400104 	addi	r5,sp,4
    8640:	00bfffc4 	movi	r2,-1
    8644:	d8c00615 	stw	r3,24(sp)
    8648:	d8c00315 	stw	r3,12(sp)
    864c:	da400515 	stw	r9,20(sp)
    8650:	d880048d 	sth	r2,18(sp)
    8654:	da400115 	stw	r9,4(sp)
    8658:	0009e580 	call	9e58 <___vfprintf_internal_r>
    865c:	d8c00117 	ldw	r3,4(sp)
    8660:	18000005 	stb	zero,0(r3)
    8664:	dfc01817 	ldw	ra,96(sp)
    8668:	dec01a04 	addi	sp,sp,104
    866c:	f800283a 	ret

00008670 <strlen>:
    8670:	208000cc 	andi	r2,r4,3
    8674:	2011883a 	mov	r8,r4
    8678:	1000161e 	bne	r2,zero,86d4 <strlen+0x64>
    867c:	20c00017 	ldw	r3,0(r4)
    8680:	017fbff4 	movhi	r5,65279
    8684:	297fbfc4 	addi	r5,r5,-257
    8688:	01e02074 	movhi	r7,32897
    868c:	39e02004 	addi	r7,r7,-32640
    8690:	1945883a 	add	r2,r3,r5
    8694:	11c4703a 	and	r2,r2,r7
    8698:	00c6303a 	nor	r3,zero,r3
    869c:	1886703a 	and	r3,r3,r2
    86a0:	18000c1e 	bne	r3,zero,86d4 <strlen+0x64>
    86a4:	280d883a 	mov	r6,r5
    86a8:	380b883a 	mov	r5,r7
    86ac:	21000104 	addi	r4,r4,4
    86b0:	20800017 	ldw	r2,0(r4)
    86b4:	1187883a 	add	r3,r2,r6
    86b8:	1946703a 	and	r3,r3,r5
    86bc:	0084303a 	nor	r2,zero,r2
    86c0:	10c4703a 	and	r2,r2,r3
    86c4:	103ff926 	beq	r2,zero,86ac <strlen+0x3c>
    86c8:	20800007 	ldb	r2,0(r4)
    86cc:	10000326 	beq	r2,zero,86dc <strlen+0x6c>
    86d0:	21000044 	addi	r4,r4,1
    86d4:	20800007 	ldb	r2,0(r4)
    86d8:	103ffd1e 	bne	r2,zero,86d0 <strlen+0x60>
    86dc:	2205c83a 	sub	r2,r4,r8
    86e0:	f800283a 	ret

000086e4 <strncat>:
    86e4:	208000cc 	andi	r2,r4,3
    86e8:	10001426 	beq	r2,zero,873c <strncat+0x58>
    86ec:	2007883a 	mov	r3,r4
    86f0:	00000106 	br	86f8 <strncat+0x14>
    86f4:	18c00044 	addi	r3,r3,1
    86f8:	18800007 	ldb	r2,0(r3)
    86fc:	103ffd1e 	bne	r2,zero,86f4 <strncat+0x10>
    8700:	31bfffc4 	addi	r6,r6,-1
    8704:	00bfffc4 	movi	r2,-1
    8708:	30800a26 	beq	r6,r2,8734 <strncat+0x50>
    870c:	28800003 	ldbu	r2,0(r5)
    8710:	29400044 	addi	r5,r5,1
    8714:	18800005 	stb	r2,0(r3)
    8718:	10000626 	beq	r2,zero,8734 <strncat+0x50>
    871c:	18c00044 	addi	r3,r3,1
    8720:	303ff71e 	bne	r6,zero,8700 <strncat+0x1c>
    8724:	31bfffc4 	addi	r6,r6,-1
    8728:	00bfffc4 	movi	r2,-1
    872c:	18000005 	stb	zero,0(r3)
    8730:	30bff61e 	bne	r6,r2,870c <strncat+0x28>
    8734:	2005883a 	mov	r2,r4
    8738:	f800283a 	ret
    873c:	20c00017 	ldw	r3,0(r4)
    8740:	023fbff4 	movhi	r8,65279
    8744:	423fbfc4 	addi	r8,r8,-257
    8748:	02a02074 	movhi	r10,32897
    874c:	52a02004 	addi	r10,r10,-32640
    8750:	1a05883a 	add	r2,r3,r8
    8754:	1284703a 	and	r2,r2,r10
    8758:	00c6303a 	nor	r3,zero,r3
    875c:	1886703a 	and	r3,r3,r2
    8760:	200f883a 	mov	r7,r4
    8764:	1800091e 	bne	r3,zero,878c <strncat+0xa8>
    8768:	4013883a 	mov	r9,r8
    876c:	5011883a 	mov	r8,r10
    8770:	39c00104 	addi	r7,r7,4
    8774:	38800017 	ldw	r2,0(r7)
    8778:	1247883a 	add	r3,r2,r9
    877c:	1a06703a 	and	r3,r3,r8
    8780:	0084303a 	nor	r2,zero,r2
    8784:	10c4703a 	and	r2,r2,r3
    8788:	103ff926 	beq	r2,zero,8770 <strncat+0x8c>
    878c:	3807883a 	mov	r3,r7
    8790:	003fd906 	br	86f8 <strncat+0x14>

00008794 <match>:
    8794:	21800017 	ldw	r6,0(r4)
    8798:	01c01004 	movi	r7,64
    879c:	02001684 	movi	r8,90
    87a0:	28800007 	ldb	r2,0(r5)
    87a4:	29400044 	addi	r5,r5,1
    87a8:	10000826 	beq	r2,zero,87cc <match+0x38>
    87ac:	31800044 	addi	r6,r6,1
    87b0:	30c00007 	ldb	r3,0(r6)
    87b4:	38c0020e 	bge	r7,r3,87c0 <match+0x2c>
    87b8:	40c00116 	blt	r8,r3,87c0 <match+0x2c>
    87bc:	18c00804 	addi	r3,r3,32
    87c0:	18bff726 	beq	r3,r2,87a0 <match+0xc>
    87c4:	0005883a 	mov	r2,zero
    87c8:	f800283a 	ret
    87cc:	30800044 	addi	r2,r6,1
    87d0:	20800015 	stw	r2,0(r4)
    87d4:	00800044 	movi	r2,1
    87d8:	f800283a 	ret

000087dc <_strtod_r>:
    87dc:	deffde04 	addi	sp,sp,-136
    87e0:	df002015 	stw	fp,128(sp)
    87e4:	dd401d15 	stw	r21,116(sp)
    87e8:	dc401915 	stw	r17,100(sp)
    87ec:	dfc02115 	stw	ra,132(sp)
    87f0:	ddc01f15 	stw	r23,124(sp)
    87f4:	dd801e15 	stw	r22,120(sp)
    87f8:	dd001c15 	stw	r20,112(sp)
    87fc:	dcc01b15 	stw	r19,108(sp)
    8800:	dc801a15 	stw	r18,104(sp)
    8804:	dc001815 	stw	r16,96(sp)
    8808:	2823883a 	mov	r17,r5
    880c:	202b883a 	mov	r21,r4
    8810:	d9801515 	stw	r6,84(sp)
    8814:	d8000915 	stw	zero,36(sp)
    8818:	d8000a15 	stw	zero,40(sp)
    881c:	d9400415 	stw	r5,16(sp)
    8820:	df000904 	addi	fp,sp,36
    8824:	da000417 	ldw	r8,16(sp)
    8828:	00800b44 	movi	r2,45
    882c:	40c00003 	ldbu	r3,0(r8)
    8830:	10c03536 	bltu	r2,r3,8908 <_strtod_r+0x12c>
    8834:	18c5883a 	add	r2,r3,r3
    8838:	1085883a 	add	r2,r2,r2
    883c:	00c00074 	movhi	r3,1
    8840:	18e21404 	addi	r3,r3,-30640
    8844:	10c5883a 	add	r2,r2,r3
    8848:	11000017 	ldw	r4,0(r2)
    884c:	2000683a 	jmp	r4
    8850:	00008a44 	movi	zero,553
    8854:	00008908 	cmpgei	zero,zero,548
    8858:	00008908 	cmpgei	zero,zero,548
    885c:	00008908 	cmpgei	zero,zero,548
    8860:	00008908 	cmpgei	zero,zero,548
    8864:	00008908 	cmpgei	zero,zero,548
    8868:	00008908 	cmpgei	zero,zero,548
    886c:	00008908 	cmpgei	zero,zero,548
    8870:	00008908 	cmpgei	zero,zero,548
    8874:	00008d5c 	xori	zero,zero,565
    8878:	00008d5c 	xori	zero,zero,565
    887c:	00008d5c 	xori	zero,zero,565
    8880:	00008d5c 	xori	zero,zero,565
    8884:	00008d5c 	xori	zero,zero,565
    8888:	00008908 	cmpgei	zero,zero,548
    888c:	00008908 	cmpgei	zero,zero,548
    8890:	00008908 	cmpgei	zero,zero,548
    8894:	00008908 	cmpgei	zero,zero,548
    8898:	00008908 	cmpgei	zero,zero,548
    889c:	00008908 	cmpgei	zero,zero,548
    88a0:	00008908 	cmpgei	zero,zero,548
    88a4:	00008908 	cmpgei	zero,zero,548
    88a8:	00008908 	cmpgei	zero,zero,548
    88ac:	00008908 	cmpgei	zero,zero,548
    88b0:	00008908 	cmpgei	zero,zero,548
    88b4:	00008908 	cmpgei	zero,zero,548
    88b8:	00008908 	cmpgei	zero,zero,548
    88bc:	00008908 	cmpgei	zero,zero,548
    88c0:	00008908 	cmpgei	zero,zero,548
    88c4:	00008908 	cmpgei	zero,zero,548
    88c8:	00008908 	cmpgei	zero,zero,548
    88cc:	00008908 	cmpgei	zero,zero,548
    88d0:	00008d5c 	xori	zero,zero,565
    88d4:	00008908 	cmpgei	zero,zero,548
    88d8:	00008908 	cmpgei	zero,zero,548
    88dc:	00008908 	cmpgei	zero,zero,548
    88e0:	00008908 	cmpgei	zero,zero,548
    88e4:	00008908 	cmpgei	zero,zero,548
    88e8:	00008908 	cmpgei	zero,zero,548
    88ec:	00008908 	cmpgei	zero,zero,548
    88f0:	00008908 	cmpgei	zero,zero,548
    88f4:	00008908 	cmpgei	zero,zero,548
    88f8:	00008908 	cmpgei	zero,zero,548
    88fc:	00008d3c 	xorhi	zero,zero,564
    8900:	00008908 	cmpgei	zero,zero,548
    8904:	00008d68 	cmpgeui	zero,zero,565
    8908:	d8001115 	stw	zero,68(sp)
    890c:	40c00007 	ldb	r3,0(r8)
    8910:	00800c04 	movi	r2,48
    8914:	1880d026 	beq	r3,r2,8c58 <_strtod_r+0x47c>
    8918:	001f883a 	mov	r15,zero
    891c:	41000007 	ldb	r4,0(r8)
    8920:	00c00bc4 	movi	r3,47
    8924:	402d883a 	mov	r22,r8
    8928:	1903470e 	bge	r3,r4,9648 <_strtod_r+0xe6c>
    892c:	00800e44 	movi	r2,57
    8930:	11034516 	blt	r2,r4,9648 <_strtod_r+0xe6c>
    8934:	180f883a 	mov	r7,r3
    8938:	1013883a 	mov	r9,r2
    893c:	4007883a 	mov	r3,r8
    8940:	000d883a 	mov	r6,zero
    8944:	0029883a 	mov	r20,zero
    8948:	0021883a 	mov	r16,zero
    894c:	01400204 	movi	r5,8
    8950:	028003c4 	movi	r10,15
    8954:	29803116 	blt	r5,r6,8a1c <_strtod_r+0x240>
    8958:	a08002a4 	muli	r2,r20,10
    895c:	1105883a 	add	r2,r2,r4
    8960:	153ff404 	addi	r20,r2,-48
    8964:	1a000044 	addi	r8,r3,1
    8968:	da000415 	stw	r8,16(sp)
    896c:	41000007 	ldb	r4,0(r8)
    8970:	31800044 	addi	r6,r6,1
    8974:	4007883a 	mov	r3,r8
    8978:	3900010e 	bge	r7,r4,8980 <_strtod_r+0x1a4>
    897c:	493ff50e 	bge	r9,r4,8954 <_strtod_r+0x178>
    8980:	00800b84 	movi	r2,46
    8984:	2080c126 	beq	r4,r2,8c8c <_strtod_r+0x4b0>
    8988:	3027883a 	mov	r19,r6
    898c:	0025883a 	mov	r18,zero
    8990:	0015883a 	mov	r10,zero
    8994:	000f883a 	mov	r7,zero
    8998:	00801944 	movi	r2,101
    899c:	20802426 	beq	r4,r2,8a30 <_strtod_r+0x254>
    89a0:	00801144 	movi	r2,69
    89a4:	20802226 	beq	r4,r2,8a30 <_strtod_r+0x254>
    89a8:	9816c03a 	cmpne	r11,r19,zero
    89ac:	000b883a 	mov	r5,zero
    89b0:	5800631e 	bne	r11,zero,8b40 <_strtod_r+0x364>
    89b4:	3800c126 	beq	r7,zero,8cbc <_strtod_r+0x4e0>
    89b8:	d8c01517 	ldw	r3,84(sp)
    89bc:	18000226 	beq	r3,zero,89c8 <_strtod_r+0x1ec>
    89c0:	d8800417 	ldw	r2,16(sp)
    89c4:	18800015 	stw	r2,0(r3)
    89c8:	d9001117 	ldw	r4,68(sp)
    89cc:	2005003a 	cmpeq	r2,r4,zero
    89d0:	10001f1e 	bne	r2,zero,8a50 <_strtod_r+0x274>
    89d4:	e0800017 	ldw	r2,0(fp)
    89d8:	e0c00117 	ldw	r3,4(fp)
    89dc:	1009883a 	mov	r4,r2
    89e0:	1960003c 	xorhi	r5,r3,32768
    89e4:	2005883a 	mov	r2,r4
    89e8:	2807883a 	mov	r3,r5
    89ec:	dfc02117 	ldw	ra,132(sp)
    89f0:	df002017 	ldw	fp,128(sp)
    89f4:	ddc01f17 	ldw	r23,124(sp)
    89f8:	dd801e17 	ldw	r22,120(sp)
    89fc:	dd401d17 	ldw	r21,116(sp)
    8a00:	dd001c17 	ldw	r20,112(sp)
    8a04:	dcc01b17 	ldw	r19,108(sp)
    8a08:	dc801a17 	ldw	r18,104(sp)
    8a0c:	dc401917 	ldw	r17,100(sp)
    8a10:	dc001817 	ldw	r16,96(sp)
    8a14:	dec02204 	addi	sp,sp,136
    8a18:	f800283a 	ret
    8a1c:	51bfd116 	blt	r10,r6,8964 <_strtod_r+0x188>
    8a20:	808002a4 	muli	r2,r16,10
    8a24:	1105883a 	add	r2,r2,r4
    8a28:	143ff404 	addi	r16,r2,-48
    8a2c:	003fcd06 	br	8964 <_strtod_r+0x188>
    8a30:	9816c03a 	cmpne	r11,r19,zero
    8a34:	5800091e 	bne	r11,zero,8a5c <_strtod_r+0x280>
    8a38:	3800081e 	bne	r7,zero,8a5c <_strtod_r+0x280>
    8a3c:	7805003a 	cmpeq	r2,r15,zero
    8a40:	10000626 	beq	r2,zero,8a5c <_strtod_r+0x280>
    8a44:	d8001115 	stw	zero,68(sp)
    8a48:	dc400415 	stw	r17,16(sp)
    8a4c:	003fda06 	br	89b8 <_strtod_r+0x1dc>
    8a50:	e1000017 	ldw	r4,0(fp)
    8a54:	e1400117 	ldw	r5,4(fp)
    8a58:	003fe206 	br	89e4 <_strtod_r+0x208>
    8a5c:	dc400417 	ldw	r17,16(sp)
    8a60:	00800ac4 	movi	r2,43
    8a64:	8a000044 	addi	r8,r17,1
    8a68:	da000415 	stw	r8,16(sp)
    8a6c:	88c00047 	ldb	r3,1(r17)
    8a70:	4009883a 	mov	r4,r8
    8a74:	1880bf26 	beq	r3,r2,8d74 <_strtod_r+0x598>
    8a78:	00800b44 	movi	r2,45
    8a7c:	18834526 	beq	r3,r2,9794 <_strtod_r+0xfb8>
    8a80:	1809883a 	mov	r4,r3
    8a84:	20fff404 	addi	r3,r4,-48
    8a88:	00800244 	movi	r2,9
    8a8c:	001d883a 	mov	r14,zero
    8a90:	10c0bf36 	bltu	r2,r3,8d90 <_strtod_r+0x5b4>
    8a94:	00800c04 	movi	r2,48
    8a98:	2080061e 	bne	r4,r2,8ab4 <_strtod_r+0x2d8>
    8a9c:	da000417 	ldw	r8,16(sp)
    8aa0:	2005883a 	mov	r2,r4
    8aa4:	42000044 	addi	r8,r8,1
    8aa8:	da000415 	stw	r8,16(sp)
    8aac:	41000007 	ldb	r4,0(r8)
    8ab0:	20bffc26 	beq	r4,r2,8aa4 <_strtod_r+0x2c8>
    8ab4:	20fff3c4 	addi	r3,r4,-49
    8ab8:	00800204 	movi	r2,8
    8abc:	10ffbb36 	bltu	r2,r3,89ac <_strtod_r+0x1d0>
    8ac0:	da000417 	ldw	r8,16(sp)
    8ac4:	227ff404 	addi	r9,r4,-48
    8ac8:	03000bc4 	movi	r12,47
    8acc:	4007883a 	mov	r3,r8
    8ad0:	42000044 	addi	r8,r8,1
    8ad4:	da000415 	stw	r8,16(sp)
    8ad8:	41000007 	ldb	r4,0(r8)
    8adc:	61000d0e 	bge	r12,r4,8b14 <_strtod_r+0x338>
    8ae0:	00800e44 	movi	r2,57
    8ae4:	11000b16 	blt	r2,r4,8b14 <_strtod_r+0x338>
    8ae8:	601b883a 	mov	r13,r12
    8aec:	1019883a 	mov	r12,r2
    8af0:	00000106 	br	8af8 <_strtod_r+0x31c>
    8af4:	61000716 	blt	r12,r4,8b14 <_strtod_r+0x338>
    8af8:	488002a4 	muli	r2,r9,10
    8afc:	42000044 	addi	r8,r8,1
    8b00:	da000415 	stw	r8,16(sp)
    8b04:	2085883a 	add	r2,r4,r2
    8b08:	41000007 	ldb	r4,0(r8)
    8b0c:	127ff404 	addi	r9,r2,-48
    8b10:	693ff816 	blt	r13,r4,8af4 <_strtod_r+0x318>
    8b14:	40c7c83a 	sub	r3,r8,r3
    8b18:	00800204 	movi	r2,8
    8b1c:	10c2e416 	blt	r2,r3,96b0 <_strtod_r+0xed4>
    8b20:	009387c4 	movi	r2,19999
    8b24:	480b883a 	mov	r5,r9
    8b28:	1240010e 	bge	r2,r9,8b30 <_strtod_r+0x354>
    8b2c:	100b883a 	mov	r5,r2
    8b30:	7005003a 	cmpeq	r2,r14,zero
    8b34:	103f9e1e 	bne	r2,zero,89b0 <_strtod_r+0x1d4>
    8b38:	014bc83a 	sub	r5,zero,r5
    8b3c:	583f9d26 	beq	r11,zero,89b4 <_strtod_r+0x1d8>
    8b40:	2a8bc83a 	sub	r5,r5,r10
    8b44:	d9400f15 	stw	r5,60(sp)
    8b48:	30007a1e 	bne	r6,zero,8d34 <_strtod_r+0x558>
    8b4c:	dcc01215 	stw	r19,72(sp)
    8b50:	00800404 	movi	r2,16
    8b54:	9825883a 	mov	r18,r19
    8b58:	14c0010e 	bge	r2,r19,8b60 <_strtod_r+0x384>
    8b5c:	1025883a 	mov	r18,r2
    8b60:	a009883a 	mov	r4,r20
    8b64:	0012ca00 	call	12ca0 <__floatunsidf>
    8b68:	100f883a 	mov	r7,r2
    8b6c:	e0800015 	stw	r2,0(fp)
    8b70:	00800244 	movi	r2,9
    8b74:	e0c00115 	stw	r3,4(fp)
    8b78:	1480160e 	bge	r2,r18,8bd4 <_strtod_r+0x3f8>
    8b7c:	900c90fa 	slli	r6,r18,3
    8b80:	01020034 	movhi	r4,2048
    8b84:	21019004 	addi	r4,r4,1600
    8b88:	180b883a 	mov	r5,r3
    8b8c:	310d883a 	add	r6,r6,r4
    8b90:	30ffef17 	ldw	r3,-68(r6)
    8b94:	30bfee17 	ldw	r2,-72(r6)
    8b98:	3809883a 	mov	r4,r7
    8b9c:	180f883a 	mov	r7,r3
    8ba0:	100d883a 	mov	r6,r2
    8ba4:	00072f00 	call	72f0 <__muldf3>
    8ba8:	8009883a 	mov	r4,r16
    8bac:	1823883a 	mov	r17,r3
    8bb0:	1021883a 	mov	r16,r2
    8bb4:	0012ca00 	call	12ca0 <__floatunsidf>
    8bb8:	880b883a 	mov	r5,r17
    8bbc:	180f883a 	mov	r7,r3
    8bc0:	8009883a 	mov	r4,r16
    8bc4:	100d883a 	mov	r6,r2
    8bc8:	000727c0 	call	727c <__adddf3>
    8bcc:	e0c00115 	stw	r3,4(fp)
    8bd0:	e0800015 	stw	r2,0(fp)
    8bd4:	010003c4 	movi	r4,15
    8bd8:	24c09816 	blt	r4,r19,8e3c <_strtod_r+0x660>
    8bdc:	d9800f17 	ldw	r6,60(sp)
    8be0:	303f7526 	beq	r6,zero,89b8 <_strtod_r+0x1dc>
    8be4:	0183be0e 	bge	zero,r6,9ae0 <_strtod_r+0x1304>
    8be8:	00800584 	movi	r2,22
    8bec:	1182b20e 	bge	r2,r6,96b8 <_strtod_r+0xedc>
    8bf0:	d8c00f17 	ldw	r3,60(sp)
    8bf4:	24e3c83a 	sub	r17,r4,r19
    8bf8:	88800584 	addi	r2,r17,22
    8bfc:	10c08f16 	blt	r2,r3,8e3c <_strtod_r+0x660>
    8c00:	880890fa 	slli	r4,r17,3
    8c04:	04020034 	movhi	r16,2048
    8c08:	84019004 	addi	r16,r16,1600
    8c0c:	e0800017 	ldw	r2,0(fp)
    8c10:	2409883a 	add	r4,r4,r16
    8c14:	22000017 	ldw	r8,0(r4)
    8c18:	22400117 	ldw	r9,4(r4)
    8c1c:	e0c00117 	ldw	r3,4(fp)
    8c20:	1009883a 	mov	r4,r2
    8c24:	480f883a 	mov	r7,r9
    8c28:	180b883a 	mov	r5,r3
    8c2c:	400d883a 	mov	r6,r8
    8c30:	00072f00 	call	72f0 <__muldf3>
    8c34:	d9000f17 	ldw	r4,60(sp)
    8c38:	180b883a 	mov	r5,r3
    8c3c:	2455c83a 	sub	r10,r4,r17
    8c40:	501490fa 	slli	r10,r10,3
    8c44:	1009883a 	mov	r4,r2
    8c48:	5415883a 	add	r10,r10,r16
    8c4c:	52000017 	ldw	r8,0(r10)
    8c50:	52400117 	ldw	r9,4(r10)
    8c54:	0002a206 	br	96e0 <_strtod_r+0xf04>
    8c58:	40c00047 	ldb	r3,1(r8)
    8c5c:	00801604 	movi	r2,88
    8c60:	18804e26 	beq	r3,r2,8d9c <_strtod_r+0x5c0>
    8c64:	00801e04 	movi	r2,120
    8c68:	18804c26 	beq	r3,r2,8d9c <_strtod_r+0x5c0>
    8c6c:	42000044 	addi	r8,r8,1
    8c70:	da000415 	stw	r8,16(sp)
    8c74:	40c00007 	ldb	r3,0(r8)
    8c78:	00800c04 	movi	r2,48
    8c7c:	18bffb26 	beq	r3,r2,8c6c <_strtod_r+0x490>
    8c80:	183f4d26 	beq	r3,zero,89b8 <_strtod_r+0x1dc>
    8c84:	03c00044 	movi	r15,1
    8c88:	003f2406 	br	891c <_strtod_r+0x140>
    8c8c:	42000044 	addi	r8,r8,1
    8c90:	da000415 	stw	r8,16(sp)
    8c94:	19000047 	ldb	r4,1(r3)
    8c98:	3000b726 	beq	r6,zero,8f78 <_strtod_r+0x79c>
    8c9c:	3027883a 	mov	r19,r6
    8ca0:	0015883a 	mov	r10,zero
    8ca4:	000f883a 	mov	r7,zero
    8ca8:	227ff404 	addi	r9,r4,-48
    8cac:	00800244 	movi	r2,9
    8cb0:	1242592e 	bgeu	r2,r9,9618 <_strtod_r+0xe3c>
    8cb4:	04800044 	movi	r18,1
    8cb8:	003f3706 	br	8998 <_strtod_r+0x1bc>
    8cbc:	7804c03a 	cmpne	r2,r15,zero
    8cc0:	103f3d1e 	bne	r2,zero,89b8 <_strtod_r+0x1dc>
    8cc4:	9004c03a 	cmpne	r2,r18,zero
    8cc8:	103f5e1e 	bne	r2,zero,8a44 <_strtod_r+0x268>
    8ccc:	00801384 	movi	r2,78
    8cd0:	2083a226 	beq	r4,r2,9b5c <_strtod_r+0x1380>
    8cd4:	11039d16 	blt	r2,r4,9b4c <_strtod_r+0x1370>
    8cd8:	00801244 	movi	r2,73
    8cdc:	20bf591e 	bne	r4,r2,8a44 <_strtod_r+0x268>
    8ce0:	dc000404 	addi	r16,sp,16
    8ce4:	8009883a 	mov	r4,r16
    8ce8:	01420034 	movhi	r5,2048
    8cec:	29414604 	addi	r5,r5,1304
    8cf0:	00087940 	call	8794 <match>
    8cf4:	103f5326 	beq	r2,zero,8a44 <_strtod_r+0x268>
    8cf8:	d8800417 	ldw	r2,16(sp)
    8cfc:	8009883a 	mov	r4,r16
    8d00:	01420034 	movhi	r5,2048
    8d04:	29414704 	addi	r5,r5,1308
    8d08:	123fffc4 	addi	r8,r2,-1
    8d0c:	da000415 	stw	r8,16(sp)
    8d10:	00087940 	call	8794 <match>
    8d14:	1000031e 	bne	r2,zero,8d24 <_strtod_r+0x548>
    8d18:	d8800417 	ldw	r2,16(sp)
    8d1c:	12000044 	addi	r8,r2,1
    8d20:	da000415 	stw	r8,16(sp)
    8d24:	019ffc34 	movhi	r6,32752
    8d28:	e1800115 	stw	r6,4(fp)
    8d2c:	e0000015 	stw	zero,0(fp)
    8d30:	003f2106 	br	89b8 <_strtod_r+0x1dc>
    8d34:	d9801215 	stw	r6,72(sp)
    8d38:	003f8506 	br	8b50 <_strtod_r+0x374>
    8d3c:	d8001115 	stw	zero,68(sp)
    8d40:	42000044 	addi	r8,r8,1
    8d44:	da000415 	stw	r8,16(sp)
    8d48:	40800007 	ldb	r2,0(r8)
    8d4c:	103eef1e 	bne	r2,zero,890c <_strtod_r+0x130>
    8d50:	d8001115 	stw	zero,68(sp)
    8d54:	dc400415 	stw	r17,16(sp)
    8d58:	003f1706 	br	89b8 <_strtod_r+0x1dc>
    8d5c:	42000044 	addi	r8,r8,1
    8d60:	da000415 	stw	r8,16(sp)
    8d64:	003eaf06 	br	8824 <_strtod_r+0x48>
    8d68:	00800044 	movi	r2,1
    8d6c:	d8801115 	stw	r2,68(sp)
    8d70:	003ff306 	br	8d40 <_strtod_r+0x564>
    8d74:	001d883a 	mov	r14,zero
    8d78:	42000044 	addi	r8,r8,1
    8d7c:	da000415 	stw	r8,16(sp)
    8d80:	21000047 	ldb	r4,1(r4)
    8d84:	00800244 	movi	r2,9
    8d88:	20fff404 	addi	r3,r4,-48
    8d8c:	10ff412e 	bgeu	r2,r3,8a94 <_strtod_r+0x2b8>
    8d90:	000b883a 	mov	r5,zero
    8d94:	dc400415 	stw	r17,16(sp)
    8d98:	003f0506 	br	89b0 <_strtod_r+0x1d4>
    8d9c:	d8c01117 	ldw	r3,68(sp)
    8da0:	04820034 	movhi	r18,2048
    8da4:	9482bf04 	addi	r18,r18,2812
    8da8:	d8800504 	addi	r2,sp,20
    8dac:	a809883a 	mov	r4,r21
    8db0:	d9400404 	addi	r5,sp,16
    8db4:	900d883a 	mov	r6,r18
    8db8:	d9c00604 	addi	r7,sp,24
    8dbc:	d8800015 	stw	r2,0(sp)
    8dc0:	d8c00115 	stw	r3,4(sp)
    8dc4:	000e6b80 	call	e6b8 <__gethex>
    8dc8:	140001cc 	andi	r16,r2,7
    8dcc:	1027883a 	mov	r19,r2
    8dd0:	803ef926 	beq	r16,zero,89b8 <_strtod_r+0x1dc>
    8dd4:	05000184 	movi	r20,6
    8dd8:	853f1a26 	beq	r16,r20,8a44 <_strtod_r+0x268>
    8ddc:	d9800517 	ldw	r6,20(sp)
    8de0:	30000626 	beq	r6,zero,8dfc <_strtod_r+0x620>
    8de4:	91400017 	ldw	r5,0(r18)
    8de8:	d9000d04 	addi	r4,sp,52
    8dec:	00101000 	call	10100 <__copybits>
    8df0:	d9400517 	ldw	r5,20(sp)
    8df4:	a809883a 	mov	r4,r21
    8df8:	000fc600 	call	fc60 <_Bfree>
    8dfc:	d9400617 	ldw	r5,24(sp)
    8e00:	a4024136 	bltu	r20,r16,9708 <_strtod_r+0xf2c>
    8e04:	8405883a 	add	r2,r16,r16
    8e08:	1085883a 	add	r2,r2,r2
    8e0c:	00c00074 	movhi	r3,1
    8e10:	18e38804 	addi	r3,r3,-29152
    8e14:	10c5883a 	add	r2,r2,r3
    8e18:	11000017 	ldw	r4,0(r2)
    8e1c:	2000683a 	jmp	r4
    8e20:	00009748 	cmpgei	zero,zero,605
    8e24:	00009754 	movui	zero,605
    8e28:	000096f8 	rdprs	zero,zero,603
    8e2c:	00009720 	cmpeqi	zero,zero,604
    8e30:	00009730 	cmpltui	zero,zero,604
    8e34:	00009754 	movui	zero,605
    8e38:	00009748 	cmpgei	zero,zero,605
    8e3c:	d8c00f17 	ldw	r3,60(sp)
    8e40:	9c85c83a 	sub	r2,r19,r18
    8e44:	18a1883a 	add	r16,r3,r2
    8e48:	0402d00e 	bge	zero,r16,998c <_strtod_r+0x11b0>
    8e4c:	814003cc 	andi	r5,r16,15
    8e50:	28000f26 	beq	r5,zero,8e90 <_strtod_r+0x6b4>
    8e54:	280a90fa 	slli	r5,r5,3
    8e58:	01020034 	movhi	r4,2048
    8e5c:	21019004 	addi	r4,r4,1600
    8e60:	e0800017 	ldw	r2,0(fp)
    8e64:	290b883a 	add	r5,r5,r4
    8e68:	2a000017 	ldw	r8,0(r5)
    8e6c:	e0c00117 	ldw	r3,4(fp)
    8e70:	2a400117 	ldw	r9,4(r5)
    8e74:	1009883a 	mov	r4,r2
    8e78:	180b883a 	mov	r5,r3
    8e7c:	480f883a 	mov	r7,r9
    8e80:	400d883a 	mov	r6,r8
    8e84:	00072f00 	call	72f0 <__muldf3>
    8e88:	e0c00115 	stw	r3,4(fp)
    8e8c:	e0800015 	stw	r2,0(fp)
    8e90:	00bffc04 	movi	r2,-16
    8e94:	808c703a 	and	r6,r16,r2
    8e98:	30005b26 	beq	r6,zero,9008 <_strtod_r+0x82c>
    8e9c:	00804d04 	movi	r2,308
    8ea0:	1181fd16 	blt	r2,r6,9698 <_strtod_r+0xebc>
    8ea4:	3021d13a 	srai	r16,r6,4
    8ea8:	00800044 	movi	r2,1
    8eac:	1403610e 	bge	r2,r16,9c34 <_strtod_r+0x1458>
    8eb0:	102f883a 	mov	r23,r2
    8eb4:	0025883a 	mov	r18,zero
    8eb8:	04420034 	movhi	r17,2048
    8ebc:	8c41c204 	addi	r17,r17,1800
    8ec0:	8080004c 	andi	r2,r16,1
    8ec4:	1005003a 	cmpeq	r2,r2,zero
    8ec8:	1000091e 	bne	r2,zero,8ef0 <_strtod_r+0x714>
    8ecc:	e0800017 	ldw	r2,0(fp)
    8ed0:	e0c00117 	ldw	r3,4(fp)
    8ed4:	89800017 	ldw	r6,0(r17)
    8ed8:	89c00117 	ldw	r7,4(r17)
    8edc:	180b883a 	mov	r5,r3
    8ee0:	1009883a 	mov	r4,r2
    8ee4:	00072f00 	call	72f0 <__muldf3>
    8ee8:	e0c00115 	stw	r3,4(fp)
    8eec:	e0800015 	stw	r2,0(fp)
    8ef0:	8021d07a 	srai	r16,r16,1
    8ef4:	94800044 	addi	r18,r18,1
    8ef8:	8c400204 	addi	r17,r17,8
    8efc:	bc3ff016 	blt	r23,r16,8ec0 <_strtod_r+0x6e4>
    8f00:	900e90fa 	slli	r7,r18,3
    8f04:	01820034 	movhi	r6,2048
    8f08:	3181c204 	addi	r6,r6,1800
    8f0c:	e2000117 	ldw	r8,4(fp)
    8f10:	398f883a 	add	r7,r7,r6
    8f14:	38800017 	ldw	r2,0(r7)
    8f18:	38c00117 	ldw	r3,4(r7)
    8f1c:	e1000017 	ldw	r4,0(fp)
    8f20:	01bf2c34 	movhi	r6,64688
    8f24:	418d883a 	add	r6,r8,r6
    8f28:	300b883a 	mov	r5,r6
    8f2c:	180f883a 	mov	r7,r3
    8f30:	100d883a 	mov	r6,r2
    8f34:	00072f00 	call	72f0 <__muldf3>
    8f38:	1009883a 	mov	r4,r2
    8f3c:	180b883a 	mov	r5,r3
    8f40:	199ffc2c 	andhi	r6,r3,32752
    8f44:	009f2834 	movhi	r2,31904
    8f48:	e1000015 	stw	r4,0(fp)
    8f4c:	e1400115 	stw	r5,4(fp)
    8f50:	1181d136 	bltu	r2,r6,9698 <_strtod_r+0xebc>
    8f54:	009f2434 	movhi	r2,31888
    8f58:	1183202e 	bgeu	r2,r6,9bdc <_strtod_r+0x1400>
    8f5c:	d8001415 	stw	zero,80(sp)
    8f60:	019ffc34 	movhi	r6,32752
    8f64:	31bfffc4 	addi	r6,r6,-1
    8f68:	01ffffc4 	movi	r7,-1
    8f6c:	e1800115 	stw	r6,4(fp)
    8f70:	e1c00015 	stw	r7,0(fp)
    8f74:	00002506 	br	900c <_strtod_r+0x830>
    8f78:	00800c04 	movi	r2,48
    8f7c:	2083151e 	bne	r4,r2,9bd4 <_strtod_r+0x13f8>
    8f80:	2005883a 	mov	r2,r4
    8f84:	000f883a 	mov	r7,zero
    8f88:	42000044 	addi	r8,r8,1
    8f8c:	da000415 	stw	r8,16(sp)
    8f90:	41000007 	ldb	r4,0(r8)
    8f94:	39c00044 	addi	r7,r7,1
    8f98:	20bffb26 	beq	r4,r2,8f88 <_strtod_r+0x7ac>
    8f9c:	20fff3c4 	addi	r3,r4,-49
    8fa0:	00800204 	movi	r2,8
    8fa4:	10c1b836 	bltu	r2,r3,9688 <_strtod_r+0xeac>
    8fa8:	dd800417 	ldw	r22,16(sp)
    8fac:	3815883a 	mov	r10,r7
    8fb0:	227ff404 	addi	r9,r4,-48
    8fb4:	b011883a 	mov	r8,r22
    8fb8:	0027883a 	mov	r19,zero
    8fbc:	01c00044 	movi	r7,1
    8fc0:	4801fe26 	beq	r9,zero,97bc <_strtod_r+0xfe0>
    8fc4:	00800044 	movi	r2,1
    8fc8:	51d5883a 	add	r10,r10,r7
    8fcc:	11c31f0e 	bge	r2,r7,9c4c <_strtod_r+0x1470>
    8fd0:	1009883a 	mov	r4,r2
    8fd4:	9807883a 	mov	r3,r19
    8fd8:	02c00204 	movi	r11,8
    8fdc:	03000404 	movi	r12,16
    8fe0:	00000306 	br	8ff0 <_strtod_r+0x814>
    8fe4:	a50002a4 	muli	r20,r20,10
    8fe8:	21000044 	addi	r4,r4,1
    8fec:	21c1eb26 	beq	r4,r7,979c <_strtod_r+0xfc0>
    8ff0:	18c00044 	addi	r3,r3,1
    8ff4:	18bfffc4 	addi	r2,r3,-1
    8ff8:	58bffa0e 	bge	r11,r2,8fe4 <_strtod_r+0x808>
    8ffc:	60fffa16 	blt	r12,r3,8fe8 <_strtod_r+0x80c>
    9000:	840002a4 	muli	r16,r16,10
    9004:	003ff806 	br	8fe8 <_strtod_r+0x80c>
    9008:	d8001415 	stw	zero,80(sp)
    900c:	d9801217 	ldw	r6,72(sp)
    9010:	a809883a 	mov	r4,r21
    9014:	b00b883a 	mov	r5,r22
    9018:	980f883a 	mov	r7,r19
    901c:	dd000015 	stw	r20,0(sp)
    9020:	0010b340 	call	10b34 <__s2b>
    9024:	d9800f17 	ldw	r6,60(sp)
    9028:	11000304 	addi	r4,r2,12
    902c:	d8801015 	stw	r2,64(sp)
    9030:	300c803a 	cmplt	r6,r6,zero
    9034:	d9001715 	stw	r4,92(sp)
    9038:	d9801615 	stw	r6,88(sp)
    903c:	d8801017 	ldw	r2,64(sp)
    9040:	a809883a 	mov	r4,r21
    9044:	11400117 	ldw	r5,4(r2)
    9048:	00101e00 	call	101e0 <_Balloc>
    904c:	d8c01017 	ldw	r3,64(sp)
    9050:	d9401717 	ldw	r5,92(sp)
    9054:	11000304 	addi	r4,r2,12
    9058:	19800417 	ldw	r6,16(r3)
    905c:	102f883a 	mov	r23,r2
    9060:	318d883a 	add	r6,r6,r6
    9064:	318d883a 	add	r6,r6,r6
    9068:	31800204 	addi	r6,r6,8
    906c:	00083140 	call	8314 <memcpy>
    9070:	e2000017 	ldw	r8,0(fp)
    9074:	e2400117 	ldw	r9,4(fp)
    9078:	d9800304 	addi	r6,sp,12
    907c:	400b883a 	mov	r5,r8
    9080:	a809883a 	mov	r4,r21
    9084:	d9c00204 	addi	r7,sp,8
    9088:	d9800015 	stw	r6,0(sp)
    908c:	480d883a 	mov	r6,r9
    9090:	001029c0 	call	1029c <__d2b>
    9094:	a809883a 	mov	r4,r21
    9098:	01400044 	movi	r5,1
    909c:	d8800515 	stw	r2,20(sp)
    90a0:	00108d80 	call	108d8 <__i2b>
    90a4:	102d883a 	mov	r22,r2
    90a8:	d8801617 	ldw	r2,88(sp)
    90ac:	1001051e 	bne	r2,zero,94c4 <_strtod_r+0xce8>
    90b0:	dd000f17 	ldw	r20,60(sp)
    90b4:	000f883a 	mov	r7,zero
    90b8:	0013883a 	mov	r9,zero
    90bc:	a011883a 	mov	r8,r20
    90c0:	d8800217 	ldw	r2,8(sp)
    90c4:	1000fd16 	blt	r2,zero,94bc <_strtod_r+0xce0>
    90c8:	388f883a 	add	r7,r7,r2
    90cc:	d9801417 	ldw	r6,80(sp)
    90d0:	d9400317 	ldw	r5,12(sp)
    90d4:	00ff0084 	movi	r3,-1022
    90d8:	1189c83a 	sub	r4,r2,r6
    90dc:	2145883a 	add	r2,r4,r5
    90e0:	10bfffc4 	addi	r2,r2,-1
    90e4:	10c09f0e 	bge	r2,r3,9364 <_strtod_r+0xb88>
    90e8:	21810cc4 	addi	r6,r4,1075
    90ec:	d8c01417 	ldw	r3,80(sp)
    90f0:	4185883a 	add	r2,r8,r6
    90f4:	39a1883a 	add	r16,r7,r6
    90f8:	18a5883a 	add	r18,r3,r2
    90fc:	3807883a 	mov	r3,r7
    9100:	81c0010e 	bge	r16,r7,9108 <_strtod_r+0x92c>
    9104:	8007883a 	mov	r3,r16
    9108:	9005883a 	mov	r2,r18
    910c:	1c80010e 	bge	r3,r18,9114 <_strtod_r+0x938>
    9110:	1805883a 	mov	r2,r3
    9114:	0080e70e 	bge	zero,r2,94b4 <_strtod_r+0xcd8>
    9118:	38a7c83a 	sub	r19,r7,r2
    911c:	80a1c83a 	sub	r16,r16,r2
    9120:	90a5c83a 	sub	r18,r18,r2
    9124:	02400e0e 	bge	zero,r9,9160 <_strtod_r+0x984>
    9128:	480d883a 	mov	r6,r9
    912c:	b00b883a 	mov	r5,r22
    9130:	a809883a 	mov	r4,r21
    9134:	0010a140 	call	10a14 <__pow5mult>
    9138:	d9800517 	ldw	r6,20(sp)
    913c:	a809883a 	mov	r4,r21
    9140:	100b883a 	mov	r5,r2
    9144:	102d883a 	mov	r22,r2
    9148:	00106f00 	call	106f0 <__multiply>
    914c:	d9400517 	ldw	r5,20(sp)
    9150:	1023883a 	mov	r17,r2
    9154:	a809883a 	mov	r4,r21
    9158:	000fc600 	call	fc60 <_Bfree>
    915c:	dc400515 	stw	r17,20(sp)
    9160:	0400050e 	bge	zero,r16,9178 <_strtod_r+0x99c>
    9164:	d9400517 	ldw	r5,20(sp)
    9168:	800d883a 	mov	r6,r16
    916c:	a809883a 	mov	r4,r21
    9170:	00105a40 	call	105a4 <__lshift>
    9174:	d8800515 	stw	r2,20(sp)
    9178:	a000741e 	bne	r20,zero,934c <_strtod_r+0xb70>
    917c:	0480050e 	bge	zero,r18,9194 <_strtod_r+0x9b8>
    9180:	b80b883a 	mov	r5,r23
    9184:	900d883a 	mov	r6,r18
    9188:	a809883a 	mov	r4,r21
    918c:	00105a40 	call	105a4 <__lshift>
    9190:	102f883a 	mov	r23,r2
    9194:	04c0050e 	bge	zero,r19,91ac <_strtod_r+0x9d0>
    9198:	b00b883a 	mov	r5,r22
    919c:	980d883a 	mov	r6,r19
    91a0:	a809883a 	mov	r4,r21
    91a4:	00105a40 	call	105a4 <__lshift>
    91a8:	102d883a 	mov	r22,r2
    91ac:	d9400517 	ldw	r5,20(sp)
    91b0:	a809883a 	mov	r4,r21
    91b4:	b80d883a 	mov	r6,r23
    91b8:	00104180 	call	10418 <__mdiff>
    91bc:	11000317 	ldw	r4,12(r2)
    91c0:	b00b883a 	mov	r5,r22
    91c4:	10000315 	stw	zero,12(r2)
    91c8:	d9001315 	stw	r4,76(sp)
    91cc:	1009883a 	mov	r4,r2
    91d0:	1029883a 	mov	r20,r2
    91d4:	000fdbc0 	call	fdbc <__mcmp>
    91d8:	10017c16 	blt	r2,zero,97cc <_strtod_r+0xff0>
    91dc:	1001af26 	beq	r2,zero,989c <_strtod_r+0x10c0>
    91e0:	a009883a 	mov	r4,r20
    91e4:	b00b883a 	mov	r5,r22
    91e8:	000ffbc0 	call	ffbc <__ratio>
    91ec:	0011883a 	mov	r8,zero
    91f0:	02500034 	movhi	r9,16384
    91f4:	480f883a 	mov	r7,r9
    91f8:	1009883a 	mov	r4,r2
    91fc:	180b883a 	mov	r5,r3
    9200:	400d883a 	mov	r6,r8
    9204:	1021883a 	mov	r16,r2
    9208:	1823883a 	mov	r17,r3
    920c:	0007a1c0 	call	7a1c <__ledf2>
    9210:	00805716 	blt	zero,r2,9370 <_strtod_r+0xb94>
    9214:	d9801317 	ldw	r6,76(sp)
    9218:	3025003a 	cmpeq	r18,r6,zero
    921c:	90008b1e 	bne	r18,zero,944c <_strtod_r+0xc70>
    9220:	008ffc34 	movhi	r2,16368
    9224:	0021883a 	mov	r16,zero
    9228:	1023883a 	mov	r17,r2
    922c:	d8000715 	stw	zero,28(sp)
    9230:	d8800815 	stw	r2,32(sp)
    9234:	e1c00117 	ldw	r7,4(fp)
    9238:	009ff834 	movhi	r2,32736
    923c:	3cdffc2c 	andhi	r19,r7,32752
    9240:	98805e26 	beq	r19,r2,93bc <_strtod_r+0xbe0>
    9244:	d8801417 	ldw	r2,80(sp)
    9248:	10001b26 	beq	r2,zero,92b8 <_strtod_r+0xadc>
    924c:	0081a834 	movhi	r2,1696
    9250:	14c01936 	bltu	r2,r19,92b8 <_strtod_r+0xadc>
    9254:	00bff034 	movhi	r2,65472
    9258:	00d07834 	movhi	r3,16864
    925c:	18ffffc4 	addi	r3,r3,-1
    9260:	180f883a 	mov	r7,r3
    9264:	8009883a 	mov	r4,r16
    9268:	880b883a 	mov	r5,r17
    926c:	100d883a 	mov	r6,r2
    9270:	0007a1c0 	call	7a1c <__ledf2>
    9274:	00800b16 	blt	zero,r2,92a4 <_strtod_r+0xac8>
    9278:	880b883a 	mov	r5,r17
    927c:	8009883a 	mov	r4,r16
    9280:	0011cfc0 	call	11cfc <__fixunsdfsi>
    9284:	1000df1e 	bne	r2,zero,9604 <_strtod_r+0xe28>
    9288:	0021883a 	mov	r16,zero
    928c:	044ffc34 	movhi	r17,16368
    9290:	9000d91e 	bne	r18,zero,95f8 <_strtod_r+0xe1c>
    9294:	8005883a 	mov	r2,r16
    9298:	8807883a 	mov	r3,r17
    929c:	d8c00815 	stw	r3,32(sp)
    92a0:	d8800715 	stw	r2,28(sp)
    92a4:	d8800817 	ldw	r2,32(sp)
    92a8:	00c1ac34 	movhi	r3,1712
    92ac:	14c5c83a 	sub	r2,r2,r19
    92b0:	10c5883a 	add	r2,r2,r3
    92b4:	d8800815 	stw	r2,32(sp)
    92b8:	e0800017 	ldw	r2,0(fp)
    92bc:	e0c00117 	ldw	r3,4(fp)
    92c0:	1009883a 	mov	r4,r2
    92c4:	180b883a 	mov	r5,r3
    92c8:	000fe1c0 	call	fe1c <__ulp>
    92cc:	d9800717 	ldw	r6,28(sp)
    92d0:	d9c00817 	ldw	r7,32(sp)
    92d4:	180b883a 	mov	r5,r3
    92d8:	1009883a 	mov	r4,r2
    92dc:	00072f00 	call	72f0 <__muldf3>
    92e0:	e2000017 	ldw	r8,0(fp)
    92e4:	e2400117 	ldw	r9,4(fp)
    92e8:	180b883a 	mov	r5,r3
    92ec:	1009883a 	mov	r4,r2
    92f0:	480f883a 	mov	r7,r9
    92f4:	400d883a 	mov	r6,r8
    92f8:	000727c0 	call	727c <__adddf3>
    92fc:	e0c00115 	stw	r3,4(fp)
    9300:	e0800015 	stw	r2,0(fp)
    9304:	d8c01417 	ldw	r3,80(sp)
    9308:	e4800117 	ldw	r18,4(fp)
    930c:	1800021e 	bne	r3,zero,9318 <_strtod_r+0xb3c>
    9310:	909ffc2c 	andhi	r2,r18,32752
    9314:	98807b26 	beq	r19,r2,9504 <_strtod_r+0xd28>
    9318:	d9400517 	ldw	r5,20(sp)
    931c:	a809883a 	mov	r4,r21
    9320:	000fc600 	call	fc60 <_Bfree>
    9324:	a809883a 	mov	r4,r21
    9328:	b80b883a 	mov	r5,r23
    932c:	000fc600 	call	fc60 <_Bfree>
    9330:	a809883a 	mov	r4,r21
    9334:	b00b883a 	mov	r5,r22
    9338:	000fc600 	call	fc60 <_Bfree>
    933c:	a809883a 	mov	r4,r21
    9340:	a00b883a 	mov	r5,r20
    9344:	000fc600 	call	fc60 <_Bfree>
    9348:	003f3c06 	br	903c <_strtod_r+0x860>
    934c:	b80b883a 	mov	r5,r23
    9350:	a00d883a 	mov	r6,r20
    9354:	a809883a 	mov	r4,r21
    9358:	0010a140 	call	10a14 <__pow5mult>
    935c:	102f883a 	mov	r23,r2
    9360:	003f8606 	br	917c <_strtod_r+0x9a0>
    9364:	00800d84 	movi	r2,54
    9368:	114dc83a 	sub	r6,r2,r5
    936c:	003f5f06 	br	90ec <_strtod_r+0x910>
    9370:	0005883a 	mov	r2,zero
    9374:	00cff834 	movhi	r3,16352
    9378:	880b883a 	mov	r5,r17
    937c:	8009883a 	mov	r4,r16
    9380:	100d883a 	mov	r6,r2
    9384:	180f883a 	mov	r7,r3
    9388:	00072f00 	call	72f0 <__muldf3>
    938c:	d9801317 	ldw	r6,76(sp)
    9390:	1021883a 	mov	r16,r2
    9394:	1823883a 	mov	r17,r3
    9398:	3025003a 	cmpeq	r18,r6,zero
    939c:	90000126 	beq	r18,zero,93a4 <_strtod_r+0xbc8>
    93a0:	18e0003c 	xorhi	r3,r3,32768
    93a4:	d8800715 	stw	r2,28(sp)
    93a8:	d8c00815 	stw	r3,32(sp)
    93ac:	e1c00117 	ldw	r7,4(fp)
    93b0:	009ff834 	movhi	r2,32736
    93b4:	3cdffc2c 	andhi	r19,r7,32752
    93b8:	98bfa21e 	bne	r19,r2,9244 <_strtod_r+0xa68>
    93bc:	e1000017 	ldw	r4,0(fp)
    93c0:	01bf2c34 	movhi	r6,64688
    93c4:	398d883a 	add	r6,r7,r6
    93c8:	d9000b15 	stw	r4,44(sp)
    93cc:	d9c00c15 	stw	r7,48(sp)
    93d0:	300b883a 	mov	r5,r6
    93d4:	e1800115 	stw	r6,4(fp)
    93d8:	000fe1c0 	call	fe1c <__ulp>
    93dc:	d9800717 	ldw	r6,28(sp)
    93e0:	d9c00817 	ldw	r7,32(sp)
    93e4:	180b883a 	mov	r5,r3
    93e8:	1009883a 	mov	r4,r2
    93ec:	00072f00 	call	72f0 <__muldf3>
    93f0:	e2000017 	ldw	r8,0(fp)
    93f4:	e2400117 	ldw	r9,4(fp)
    93f8:	180b883a 	mov	r5,r3
    93fc:	1009883a 	mov	r4,r2
    9400:	480f883a 	mov	r7,r9
    9404:	400d883a 	mov	r6,r8
    9408:	000727c0 	call	727c <__adddf3>
    940c:	1009883a 	mov	r4,r2
    9410:	180b883a 	mov	r5,r3
    9414:	009f2834 	movhi	r2,31904
    9418:	10bfffc4 	addi	r2,r2,-1
    941c:	18dffc2c 	andhi	r3,r3,32752
    9420:	e1000015 	stw	r4,0(fp)
    9424:	e1400115 	stw	r5,4(fp)
    9428:	10c06f2e 	bgeu	r2,r3,95e8 <_strtod_r+0xe0c>
    942c:	d8800c17 	ldw	r2,48(sp)
    9430:	011ffc34 	movhi	r4,32752
    9434:	213fffc4 	addi	r4,r4,-1
    9438:	11007a26 	beq	r2,r4,9624 <_strtod_r+0xe48>
    943c:	01ffffc4 	movi	r7,-1
    9440:	e1000115 	stw	r4,4(fp)
    9444:	e1c00015 	stw	r7,0(fp)
    9448:	003fb306 	br	9318 <_strtod_r+0xb3c>
    944c:	e0c00017 	ldw	r3,0(fp)
    9450:	1800221e 	bne	r3,zero,94dc <_strtod_r+0xd00>
    9454:	e0800117 	ldw	r2,4(fp)
    9458:	00c00434 	movhi	r3,16
    945c:	18ffffc4 	addi	r3,r3,-1
    9460:	10c4703a 	and	r2,r2,r3
    9464:	1000211e 	bne	r2,zero,94ec <_strtod_r+0xd10>
    9468:	0005883a 	mov	r2,zero
    946c:	00cffc34 	movhi	r3,16368
    9470:	180f883a 	mov	r7,r3
    9474:	8009883a 	mov	r4,r16
    9478:	880b883a 	mov	r5,r17
    947c:	100d883a 	mov	r6,r2
    9480:	0012ba40 	call	12ba4 <__ltdf2>
    9484:	10013c16 	blt	r2,zero,9978 <_strtod_r+0x119c>
    9488:	0005883a 	mov	r2,zero
    948c:	00cff834 	movhi	r3,16352
    9490:	880b883a 	mov	r5,r17
    9494:	8009883a 	mov	r4,r16
    9498:	180f883a 	mov	r7,r3
    949c:	100d883a 	mov	r6,r2
    94a0:	00072f00 	call	72f0 <__muldf3>
    94a4:	1823883a 	mov	r17,r3
    94a8:	1021883a 	mov	r16,r2
    94ac:	18e0003c 	xorhi	r3,r3,32768
    94b0:	003fbc06 	br	93a4 <_strtod_r+0xbc8>
    94b4:	3827883a 	mov	r19,r7
    94b8:	003f1a06 	br	9124 <_strtod_r+0x948>
    94bc:	4091c83a 	sub	r8,r8,r2
    94c0:	003f0206 	br	90cc <_strtod_r+0x8f0>
    94c4:	d8c00f17 	ldw	r3,60(sp)
    94c8:	0011883a 	mov	r8,zero
    94cc:	0029883a 	mov	r20,zero
    94d0:	00d3c83a 	sub	r9,zero,r3
    94d4:	480f883a 	mov	r7,r9
    94d8:	003ef906 	br	90c0 <_strtod_r+0x8e4>
    94dc:	00800044 	movi	r2,1
    94e0:	1880021e 	bne	r3,r2,94ec <_strtod_r+0xd10>
    94e4:	e0800117 	ldw	r2,4(fp)
    94e8:	1000a526 	beq	r2,zero,9780 <_strtod_r+0xfa4>
    94ec:	00affc34 	movhi	r2,49136
    94f0:	0021883a 	mov	r16,zero
    94f4:	044ffc34 	movhi	r17,16368
    94f8:	d8800815 	stw	r2,32(sp)
    94fc:	d8000715 	stw	zero,28(sp)
    9500:	003f4c06 	br	9234 <_strtod_r+0xa58>
    9504:	880b883a 	mov	r5,r17
    9508:	8009883a 	mov	r4,r16
    950c:	0007b9c0 	call	7b9c <__fixdfsi>
    9510:	1009883a 	mov	r4,r2
    9514:	0007aa40 	call	7aa4 <__floatsidf>
    9518:	880b883a 	mov	r5,r17
    951c:	8009883a 	mov	r4,r16
    9520:	100d883a 	mov	r6,r2
    9524:	180f883a 	mov	r7,r3
    9528:	00071fc0 	call	71fc <__subdf3>
    952c:	d9001317 	ldw	r4,76(sp)
    9530:	100b883a 	mov	r5,r2
    9534:	180d883a 	mov	r6,r3
    9538:	1021883a 	mov	r16,r2
    953c:	1823883a 	mov	r17,r3
    9540:	2000061e 	bne	r4,zero,955c <_strtod_r+0xd80>
    9544:	e0800017 	ldw	r2,0(fp)
    9548:	1000041e 	bne	r2,zero,955c <_strtod_r+0xd80>
    954c:	00c00434 	movhi	r3,16
    9550:	18ffffc4 	addi	r3,r3,-1
    9554:	90c4703a 	and	r2,r18,r3
    9558:	10004026 	beq	r2,zero,965c <_strtod_r+0xe80>
    955c:	00a52834 	movhi	r2,38048
    9560:	108d6544 	addi	r2,r2,13717
    9564:	00cff834 	movhi	r3,16352
    9568:	18ffffc4 	addi	r3,r3,-1
    956c:	180f883a 	mov	r7,r3
    9570:	8009883a 	mov	r4,r16
    9574:	880b883a 	mov	r5,r17
    9578:	100d883a 	mov	r6,r2
    957c:	0012ba40 	call	12ba4 <__ltdf2>
    9580:	10000916 	blt	r2,zero,95a8 <_strtod_r+0xdcc>
    9584:	008d6c34 	movhi	r2,13744
    9588:	10b94d44 	addi	r2,r2,-6859
    958c:	00cff834 	movhi	r3,16352
    9590:	880b883a 	mov	r5,r17
    9594:	180f883a 	mov	r7,r3
    9598:	8009883a 	mov	r4,r16
    959c:	100d883a 	mov	r6,r2
    95a0:	000790c0 	call	790c <__gtdf2>
    95a4:	00bf5c0e 	bge	zero,r2,9318 <_strtod_r+0xb3c>
    95a8:	d9400517 	ldw	r5,20(sp)
    95ac:	a809883a 	mov	r4,r21
    95b0:	000fc600 	call	fc60 <_Bfree>
    95b4:	a809883a 	mov	r4,r21
    95b8:	b80b883a 	mov	r5,r23
    95bc:	000fc600 	call	fc60 <_Bfree>
    95c0:	a809883a 	mov	r4,r21
    95c4:	b00b883a 	mov	r5,r22
    95c8:	000fc600 	call	fc60 <_Bfree>
    95cc:	d9401017 	ldw	r5,64(sp)
    95d0:	a809883a 	mov	r4,r21
    95d4:	000fc600 	call	fc60 <_Bfree>
    95d8:	a809883a 	mov	r4,r21
    95dc:	a00b883a 	mov	r5,r20
    95e0:	000fc600 	call	fc60 <_Bfree>
    95e4:	003cf406 	br	89b8 <_strtod_r+0x1dc>
    95e8:	0080d434 	movhi	r2,848
    95ec:	288d883a 	add	r6,r5,r2
    95f0:	e1800115 	stw	r6,4(fp)
    95f4:	003f4306 	br	9304 <_strtod_r+0xb28>
    95f8:	8005883a 	mov	r2,r16
    95fc:	88e0003c 	xorhi	r3,r17,32768
    9600:	003f2606 	br	929c <_strtod_r+0xac0>
    9604:	1009883a 	mov	r4,r2
    9608:	0012ca00 	call	12ca0 <__floatunsidf>
    960c:	1021883a 	mov	r16,r2
    9610:	1823883a 	mov	r17,r3
    9614:	003f1e06 	br	9290 <_strtod_r+0xab4>
    9618:	da000417 	ldw	r8,16(sp)
    961c:	39c00044 	addi	r7,r7,1
    9620:	003e6706 	br	8fc0 <_strtod_r+0x7e4>
    9624:	d8c00b17 	ldw	r3,44(sp)
    9628:	00bfffc4 	movi	r2,-1
    962c:	18bf831e 	bne	r3,r2,943c <_strtod_r+0xc60>
    9630:	00c00884 	movi	r3,34
    9634:	a8c00015 	stw	r3,0(r21)
    9638:	009ffc34 	movhi	r2,32752
    963c:	e0800115 	stw	r2,4(fp)
    9640:	e0000015 	stw	zero,0(fp)
    9644:	003fd806 	br	95a8 <_strtod_r+0xdcc>
    9648:	4007883a 	mov	r3,r8
    964c:	000d883a 	mov	r6,zero
    9650:	0029883a 	mov	r20,zero
    9654:	0021883a 	mov	r16,zero
    9658:	003cc906 	br	8980 <_strtod_r+0x1a4>
    965c:	00a52834 	movhi	r2,38048
    9660:	108d6544 	addi	r2,r2,13717
    9664:	00cff434 	movhi	r3,16336
    9668:	18ffffc4 	addi	r3,r3,-1
    966c:	2809883a 	mov	r4,r5
    9670:	180f883a 	mov	r7,r3
    9674:	300b883a 	mov	r5,r6
    9678:	100d883a 	mov	r6,r2
    967c:	0012ba40 	call	12ba4 <__ltdf2>
    9680:	103f250e 	bge	r2,zero,9318 <_strtod_r+0xb3c>
    9684:	003fc806 	br	95a8 <_strtod_r+0xdcc>
    9688:	0027883a 	mov	r19,zero
    968c:	04800044 	movi	r18,1
    9690:	0015883a 	mov	r10,zero
    9694:	003cc006 	br	8998 <_strtod_r+0x1bc>
    9698:	00800884 	movi	r2,34
    969c:	a8800015 	stw	r2,0(r21)
    96a0:	019ffc34 	movhi	r6,32752
    96a4:	e1800115 	stw	r6,4(fp)
    96a8:	e0000015 	stw	zero,0(fp)
    96ac:	003cc206 	br	89b8 <_strtod_r+0x1dc>
    96b0:	015387c4 	movi	r5,19999
    96b4:	003d1e06 	br	8b30 <_strtod_r+0x354>
    96b8:	300a90fa 	slli	r5,r6,3
    96bc:	e0800017 	ldw	r2,0(fp)
    96c0:	e0c00117 	ldw	r3,4(fp)
    96c4:	01020034 	movhi	r4,2048
    96c8:	21019004 	addi	r4,r4,1600
    96cc:	290b883a 	add	r5,r5,r4
    96d0:	2a000017 	ldw	r8,0(r5)
    96d4:	2a400117 	ldw	r9,4(r5)
    96d8:	1009883a 	mov	r4,r2
    96dc:	180b883a 	mov	r5,r3
    96e0:	480f883a 	mov	r7,r9
    96e4:	400d883a 	mov	r6,r8
    96e8:	00072f00 	call	72f0 <__muldf3>
    96ec:	e0c00115 	stw	r3,4(fp)
    96f0:	e0800015 	stw	r2,0(fp)
    96f4:	003cb006 	br	89b8 <_strtod_r+0x1dc>
    96f8:	d8800d17 	ldw	r2,52(sp)
    96fc:	e0800015 	stw	r2,0(fp)
    9700:	d8c00e17 	ldw	r3,56(sp)
    9704:	e0c00115 	stw	r3,4(fp)
    9708:	9880020c 	andi	r2,r19,8
    970c:	103caa26 	beq	r2,zero,89b8 <_strtod_r+0x1dc>
    9710:	e0800117 	ldw	r2,4(fp)
    9714:	10a00034 	orhi	r2,r2,32768
    9718:	e0800115 	stw	r2,4(fp)
    971c:	003ca606 	br	89b8 <_strtod_r+0x1dc>
    9720:	009ffc34 	movhi	r2,32752
    9724:	e0800115 	stw	r2,4(fp)
    9728:	e0000015 	stw	zero,0(fp)
    972c:	003ff606 	br	9708 <_strtod_r+0xf2c>
    9730:	00a00034 	movhi	r2,32768
    9734:	10bfffc4 	addi	r2,r2,-1
    9738:	00ffffc4 	movi	r3,-1
    973c:	e0800115 	stw	r2,4(fp)
    9740:	e0c00015 	stw	r3,0(fp)
    9744:	003ff006 	br	9708 <_strtod_r+0xf2c>
    9748:	e0000115 	stw	zero,4(fp)
    974c:	e0000015 	stw	zero,0(fp)
    9750:	003fed06 	br	9708 <_strtod_r+0xf2c>
    9754:	d8800e17 	ldw	r2,56(sp)
    9758:	29010cc4 	addi	r4,r5,1075
    975c:	00fffc34 	movhi	r3,65520
    9760:	18ffffc4 	addi	r3,r3,-1
    9764:	2008953a 	slli	r4,r4,20
    9768:	10c4703a 	and	r2,r2,r3
    976c:	d8c00d17 	ldw	r3,52(sp)
    9770:	1104b03a 	or	r2,r2,r4
    9774:	e0800115 	stw	r2,4(fp)
    9778:	e0c00015 	stw	r3,0(fp)
    977c:	003fe206 	br	9708 <_strtod_r+0xf2c>
    9780:	00800884 	movi	r2,34
    9784:	a8800015 	stw	r2,0(r21)
    9788:	e0000015 	stw	zero,0(fp)
    978c:	e0000115 	stw	zero,4(fp)
    9790:	003f8506 	br	95a8 <_strtod_r+0xdcc>
    9794:	03800044 	movi	r14,1
    9798:	003d7706 	br	8d78 <_strtod_r+0x59c>
    979c:	99c5883a 	add	r2,r19,r7
    97a0:	11ffffc4 	addi	r7,r2,-1
    97a4:	00800204 	movi	r2,8
    97a8:	3cc00044 	addi	r19,r7,1
    97ac:	11c0df16 	blt	r2,r7,9b2c <_strtod_r+0x1350>
    97b0:	a08002a4 	muli	r2,r20,10
    97b4:	000f883a 	mov	r7,zero
    97b8:	1269883a 	add	r20,r2,r9
    97bc:	42000044 	addi	r8,r8,1
    97c0:	da000415 	stw	r8,16(sp)
    97c4:	41000007 	ldb	r4,0(r8)
    97c8:	003d3706 	br	8ca8 <_strtod_r+0x4cc>
    97cc:	d9801317 	ldw	r6,76(sp)
    97d0:	3000511e 	bne	r6,zero,9918 <_strtod_r+0x113c>
    97d4:	e0800017 	ldw	r2,0(fp)
    97d8:	1000d81e 	bne	r2,zero,9b3c <_strtod_r+0x1360>
    97dc:	e0c00117 	ldw	r3,4(fp)
    97e0:	01000434 	movhi	r4,16
    97e4:	213fffc4 	addi	r4,r4,-1
    97e8:	1904703a 	and	r2,r3,r4
    97ec:	1000b01e 	bne	r2,zero,9ab0 <_strtod_r+0x12d4>
    97f0:	18dffc2c 	andhi	r3,r3,32752
    97f4:	0081ac34 	movhi	r2,1712
    97f8:	10c1102e 	bgeu	r2,r3,9c3c <_strtod_r+0x1460>
    97fc:	a0800517 	ldw	r2,20(r20)
    9800:	1000031e 	bne	r2,zero,9810 <_strtod_r+0x1034>
    9804:	a0c00417 	ldw	r3,16(r20)
    9808:	00800044 	movi	r2,1
    980c:	10c0420e 	bge	r2,r3,9918 <_strtod_r+0x113c>
    9810:	a00b883a 	mov	r5,r20
    9814:	a809883a 	mov	r4,r21
    9818:	01800044 	movi	r6,1
    981c:	00105a40 	call	105a4 <__lshift>
    9820:	1009883a 	mov	r4,r2
    9824:	b00b883a 	mov	r5,r22
    9828:	1029883a 	mov	r20,r2
    982c:	000fdbc0 	call	fdbc <__mcmp>
    9830:	0080c20e 	bge	zero,r2,9b3c <_strtod_r+0x1360>
    9834:	e1800117 	ldw	r6,4(fp)
    9838:	d9001417 	ldw	r4,80(sp)
    983c:	2013003a 	cmpeq	r9,r4,zero
    9840:	4800ef1e 	bne	r9,zero,9c00 <_strtod_r+0x1424>
    9844:	30dffc2c 	andhi	r3,r6,32752
    9848:	0081ac34 	movhi	r2,1712
    984c:	10c0ec36 	bltu	r2,r3,9c00 <_strtod_r+0x1424>
    9850:	0080dc34 	movhi	r2,880
    9854:	10ffca2e 	bgeu	r2,r3,9780 <_strtod_r+0xfa4>
    9858:	e0800017 	ldw	r2,0(fp)
    985c:	e0c00117 	ldw	r3,4(fp)
    9860:	020e5434 	movhi	r8,14672
    9864:	000d883a 	mov	r6,zero
    9868:	400f883a 	mov	r7,r8
    986c:	180b883a 	mov	r5,r3
    9870:	1009883a 	mov	r4,r2
    9874:	da000c15 	stw	r8,48(sp)
    9878:	d8000b15 	stw	zero,44(sp)
    987c:	00072f00 	call	72f0 <__muldf3>
    9880:	e0800015 	stw	r2,0(fp)
    9884:	e0c00115 	stw	r3,4(fp)
    9888:	183f471e 	bne	r3,zero,95a8 <_strtod_r+0xdcc>
    988c:	103f461e 	bne	r2,zero,95a8 <_strtod_r+0xdcc>
    9890:	00800884 	movi	r2,34
    9894:	a8800015 	stw	r2,0(r21)
    9898:	003f4306 	br	95a8 <_strtod_r+0xdcc>
    989c:	d8801317 	ldw	r2,76(sp)
    98a0:	1025003a 	cmpeq	r18,r2,zero
    98a4:	9000861e 	bne	r18,zero,9ac0 <_strtod_r+0x12e4>
    98a8:	e1400117 	ldw	r5,4(fp)
    98ac:	00c00434 	movhi	r3,16
    98b0:	18ffffc4 	addi	r3,r3,-1
    98b4:	28c4703a 	and	r2,r5,r3
    98b8:	10c01b26 	beq	r2,r3,9928 <_strtod_r+0x114c>
    98bc:	e1c00017 	ldw	r7,0(fp)
    98c0:	3880004c 	andi	r2,r7,1
    98c4:	1005003a 	cmpeq	r2,r2,zero
    98c8:	1000791e 	bne	r2,zero,9ab0 <_strtod_r+0x12d4>
    98cc:	9000b126 	beq	r18,zero,9b94 <_strtod_r+0x13b8>
    98d0:	e4400117 	ldw	r17,4(fp)
    98d4:	3809883a 	mov	r4,r7
    98d8:	3821883a 	mov	r16,r7
    98dc:	880b883a 	mov	r5,r17
    98e0:	000fe1c0 	call	fe1c <__ulp>
    98e4:	180f883a 	mov	r7,r3
    98e8:	880b883a 	mov	r5,r17
    98ec:	8009883a 	mov	r4,r16
    98f0:	100d883a 	mov	r6,r2
    98f4:	00071fc0 	call	71fc <__subdf3>
    98f8:	1009883a 	mov	r4,r2
    98fc:	000d883a 	mov	r6,zero
    9900:	000f883a 	mov	r7,zero
    9904:	180b883a 	mov	r5,r3
    9908:	e0800015 	stw	r2,0(fp)
    990c:	e0c00115 	stw	r3,4(fp)
    9910:	0012b1c0 	call	12b1c <__nedf2>
    9914:	103f9a26 	beq	r2,zero,9780 <_strtod_r+0xfa4>
    9918:	d9001417 	ldw	r4,80(sp)
    991c:	2013003a 	cmpeq	r9,r4,zero
    9920:	483f211e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9924:	003fcc06 	br	9858 <_strtod_r+0x107c>
    9928:	d9001417 	ldw	r4,80(sp)
    992c:	e1c00017 	ldw	r7,0(fp)
    9930:	2013003a 	cmpeq	r9,r4,zero
    9934:	4800bd1e 	bne	r9,zero,9c2c <_strtod_r+0x1450>
    9938:	28dffc2c 	andhi	r3,r5,32752
    993c:	0081a834 	movhi	r2,1696
    9940:	10c0ba36 	bltu	r2,r3,9c2c <_strtod_r+0x1450>
    9944:	1804d53a 	srli	r2,r3,20
    9948:	00c01ac4 	movi	r3,107
    994c:	013fffc4 	movi	r4,-1
    9950:	1887c83a 	sub	r3,r3,r2
    9954:	20c4983a 	sll	r2,r4,r3
    9958:	11ffd91e 	bne	r2,r7,98c0 <_strtod_r+0x10e4>
    995c:	28dffc2c 	andhi	r3,r5,32752
    9960:	00800434 	movhi	r2,16
    9964:	188d883a 	add	r6,r3,r2
    9968:	e1800115 	stw	r6,4(fp)
    996c:	e0000015 	stw	zero,0(fp)
    9970:	483f0d1e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9974:	003fb806 	br	9858 <_strtod_r+0x107c>
    9978:	0021883a 	mov	r16,zero
    997c:	0005883a 	mov	r2,zero
    9980:	044ff834 	movhi	r17,16352
    9984:	00eff834 	movhi	r3,49120
    9988:	003e8606 	br	93a4 <_strtod_r+0xbc8>
    998c:	803d9e26 	beq	r16,zero,9008 <_strtod_r+0x82c>
    9990:	0421c83a 	sub	r16,zero,r16
    9994:	814003cc 	andi	r5,r16,15
    9998:	28000f26 	beq	r5,zero,99d8 <_strtod_r+0x11fc>
    999c:	280a90fa 	slli	r5,r5,3
    99a0:	01020034 	movhi	r4,2048
    99a4:	21019004 	addi	r4,r4,1600
    99a8:	e0800017 	ldw	r2,0(fp)
    99ac:	290b883a 	add	r5,r5,r4
    99b0:	2a000017 	ldw	r8,0(r5)
    99b4:	e0c00117 	ldw	r3,4(fp)
    99b8:	2a400117 	ldw	r9,4(r5)
    99bc:	1009883a 	mov	r4,r2
    99c0:	180b883a 	mov	r5,r3
    99c4:	480f883a 	mov	r7,r9
    99c8:	400d883a 	mov	r6,r8
    99cc:	00076b40 	call	76b4 <__divdf3>
    99d0:	e0c00115 	stw	r3,4(fp)
    99d4:	e0800015 	stw	r2,0(fp)
    99d8:	8021d13a 	srai	r16,r16,4
    99dc:	803d8a26 	beq	r16,zero,9008 <_strtod_r+0x82c>
    99e0:	008007c4 	movi	r2,31
    99e4:	14002d16 	blt	r2,r16,9a9c <_strtod_r+0x12c0>
    99e8:	8080040c 	andi	r2,r16,16
    99ec:	10009926 	beq	r2,zero,9c54 <_strtod_r+0x1478>
    99f0:	00801a84 	movi	r2,106
    99f4:	d8801415 	stw	r2,80(sp)
    99f8:	0400110e 	bge	zero,r16,9a40 <_strtod_r+0x1264>
    99fc:	04420034 	movhi	r17,2048
    9a00:	8c414a04 	addi	r17,r17,1320
    9a04:	8080004c 	andi	r2,r16,1
    9a08:	1005003a 	cmpeq	r2,r2,zero
    9a0c:	1000091e 	bne	r2,zero,9a34 <_strtod_r+0x1258>
    9a10:	e0800017 	ldw	r2,0(fp)
    9a14:	e0c00117 	ldw	r3,4(fp)
    9a18:	89800017 	ldw	r6,0(r17)
    9a1c:	89c00117 	ldw	r7,4(r17)
    9a20:	180b883a 	mov	r5,r3
    9a24:	1009883a 	mov	r4,r2
    9a28:	00072f00 	call	72f0 <__muldf3>
    9a2c:	e0c00115 	stw	r3,4(fp)
    9a30:	e0800015 	stw	r2,0(fp)
    9a34:	8021d07a 	srai	r16,r16,1
    9a38:	8c400204 	addi	r17,r17,8
    9a3c:	043ff116 	blt	zero,r16,9a04 <_strtod_r+0x1228>
    9a40:	d8c01417 	ldw	r3,80(sp)
    9a44:	18000d26 	beq	r3,zero,9a7c <_strtod_r+0x12a0>
    9a48:	e1000117 	ldw	r4,4(fp)
    9a4c:	00c01ac4 	movi	r3,107
    9a50:	209ffc2c 	andhi	r2,r4,32752
    9a54:	1004d53a 	srli	r2,r2,20
    9a58:	1887c83a 	sub	r3,r3,r2
    9a5c:	00c0070e 	bge	zero,r3,9a7c <_strtod_r+0x12a0>
    9a60:	008007c4 	movi	r2,31
    9a64:	10c0900e 	bge	r2,r3,9ca8 <_strtod_r+0x14cc>
    9a68:	00800d04 	movi	r2,52
    9a6c:	e0000015 	stw	zero,0(fp)
    9a70:	10c0870e 	bge	r2,r3,9c90 <_strtod_r+0x14b4>
    9a74:	0180dc34 	movhi	r6,880
    9a78:	e1800115 	stw	r6,4(fp)
    9a7c:	e0800017 	ldw	r2,0(fp)
    9a80:	e0c00117 	ldw	r3,4(fp)
    9a84:	000d883a 	mov	r6,zero
    9a88:	000f883a 	mov	r7,zero
    9a8c:	180b883a 	mov	r5,r3
    9a90:	1009883a 	mov	r4,r2
    9a94:	0012b1c0 	call	12b1c <__nedf2>
    9a98:	103d5c1e 	bne	r2,zero,900c <_strtod_r+0x830>
    9a9c:	00800884 	movi	r2,34
    9aa0:	a8800015 	stw	r2,0(r21)
    9aa4:	e0000015 	stw	zero,0(fp)
    9aa8:	e0000115 	stw	zero,4(fp)
    9aac:	003bc206 	br	89b8 <_strtod_r+0x1dc>
    9ab0:	d8801417 	ldw	r2,80(sp)
    9ab4:	1013003a 	cmpeq	r9,r2,zero
    9ab8:	483ebb1e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9abc:	003f6606 	br	9858 <_strtod_r+0x107c>
    9ac0:	e1800117 	ldw	r6,4(fp)
    9ac4:	00c00434 	movhi	r3,16
    9ac8:	18ffffc4 	addi	r3,r3,-1
    9acc:	30c4703a 	and	r2,r6,r3
    9ad0:	103f7a1e 	bne	r2,zero,98bc <_strtod_r+0x10e0>
    9ad4:	e1c00017 	ldw	r7,0(fp)
    9ad8:	383f791e 	bne	r7,zero,98c0 <_strtod_r+0x10e4>
    9adc:	003f5606 	br	9838 <_strtod_r+0x105c>
    9ae0:	d9800f17 	ldw	r6,60(sp)
    9ae4:	00bffa84 	movi	r2,-22
    9ae8:	30bcd416 	blt	r6,r2,8e3c <_strtod_r+0x660>
    9aec:	317ffe24 	muli	r5,r6,-8
    9af0:	01020034 	movhi	r4,2048
    9af4:	21019004 	addi	r4,r4,1600
    9af8:	e0800017 	ldw	r2,0(fp)
    9afc:	290b883a 	add	r5,r5,r4
    9b00:	2a000017 	ldw	r8,0(r5)
    9b04:	e0c00117 	ldw	r3,4(fp)
    9b08:	2a400117 	ldw	r9,4(r5)
    9b0c:	1009883a 	mov	r4,r2
    9b10:	180b883a 	mov	r5,r3
    9b14:	480f883a 	mov	r7,r9
    9b18:	400d883a 	mov	r6,r8
    9b1c:	00076b40 	call	76b4 <__divdf3>
    9b20:	e0c00115 	stw	r3,4(fp)
    9b24:	e0800015 	stw	r2,0(fp)
    9b28:	003ba306 	br	89b8 <_strtod_r+0x1dc>
    9b2c:	00800404 	movi	r2,16
    9b30:	14c02f0e 	bge	r2,r19,9bf0 <_strtod_r+0x1414>
    9b34:	000f883a 	mov	r7,zero
    9b38:	003f2006 	br	97bc <_strtod_r+0xfe0>
    9b3c:	d9801417 	ldw	r6,80(sp)
    9b40:	3013003a 	cmpeq	r9,r6,zero
    9b44:	483e981e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9b48:	003f4306 	br	9858 <_strtod_r+0x107c>
    9b4c:	00801a44 	movi	r2,105
    9b50:	20bc6326 	beq	r4,r2,8ce0 <_strtod_r+0x504>
    9b54:	00801b84 	movi	r2,110
    9b58:	20bbba1e 	bne	r4,r2,8a44 <_strtod_r+0x268>
    9b5c:	dc000404 	addi	r16,sp,16
    9b60:	8009883a 	mov	r4,r16
    9b64:	01420034 	movhi	r5,2048
    9b68:	29414904 	addi	r5,r5,1316
    9b6c:	00087940 	call	8794 <match>
    9b70:	103bb426 	beq	r2,zero,8a44 <_strtod_r+0x268>
    9b74:	d8800417 	ldw	r2,16(sp)
    9b78:	00c00a04 	movi	r3,40
    9b7c:	11000007 	ldb	r4,0(r2)
    9b80:	20c03626 	beq	r4,r3,9c5c <_strtod_r+0x1480>
    9b84:	01bffe34 	movhi	r6,65528
    9b88:	e1800115 	stw	r6,4(fp)
    9b8c:	e0000015 	stw	zero,0(fp)
    9b90:	003b8906 	br	89b8 <_strtod_r+0x1dc>
    9b94:	e4400117 	ldw	r17,4(fp)
    9b98:	3809883a 	mov	r4,r7
    9b9c:	3821883a 	mov	r16,r7
    9ba0:	880b883a 	mov	r5,r17
    9ba4:	000fe1c0 	call	fe1c <__ulp>
    9ba8:	100d883a 	mov	r6,r2
    9bac:	880b883a 	mov	r5,r17
    9bb0:	180f883a 	mov	r7,r3
    9bb4:	8009883a 	mov	r4,r16
    9bb8:	000727c0 	call	727c <__adddf3>
    9bbc:	d9801417 	ldw	r6,80(sp)
    9bc0:	e0c00115 	stw	r3,4(fp)
    9bc4:	e0800015 	stw	r2,0(fp)
    9bc8:	3013003a 	cmpeq	r9,r6,zero
    9bcc:	483e761e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9bd0:	003f2106 	br	9858 <_strtod_r+0x107c>
    9bd4:	000f883a 	mov	r7,zero
    9bd8:	003cf006 	br	8f9c <_strtod_r+0x7c0>
    9bdc:	0080d434 	movhi	r2,848
    9be0:	188d883a 	add	r6,r3,r2
    9be4:	d8001415 	stw	zero,80(sp)
    9be8:	e1800115 	stw	r6,4(fp)
    9bec:	003d0706 	br	900c <_strtod_r+0x830>
    9bf0:	808002a4 	muli	r2,r16,10
    9bf4:	000f883a 	mov	r7,zero
    9bf8:	1261883a 	add	r16,r2,r9
    9bfc:	003eef06 	br	97bc <_strtod_r+0xfe0>
    9c00:	309ffc2c 	andhi	r2,r6,32752
    9c04:	00fffc34 	movhi	r3,65520
    9c08:	10c5883a 	add	r2,r2,r3
    9c0c:	00c00434 	movhi	r3,16
    9c10:	18ffffc4 	addi	r3,r3,-1
    9c14:	10ccb03a 	or	r6,r2,r3
    9c18:	01ffffc4 	movi	r7,-1
    9c1c:	e1800115 	stw	r6,4(fp)
    9c20:	e1c00015 	stw	r7,0(fp)
    9c24:	483e601e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9c28:	003f0b06 	br	9858 <_strtod_r+0x107c>
    9c2c:	00bfffc4 	movi	r2,-1
    9c30:	003f4906 	br	9958 <_strtod_r+0x117c>
    9c34:	0025883a 	mov	r18,zero
    9c38:	003cb106 	br	8f00 <_strtod_r+0x724>
    9c3c:	d8c01417 	ldw	r3,80(sp)
    9c40:	1813003a 	cmpeq	r9,r3,zero
    9c44:	483e581e 	bne	r9,zero,95a8 <_strtod_r+0xdcc>
    9c48:	003f0306 	br	9858 <_strtod_r+0x107c>
    9c4c:	980f883a 	mov	r7,r19
    9c50:	003ed406 	br	97a4 <_strtod_r+0xfc8>
    9c54:	d8001415 	stw	zero,80(sp)
    9c58:	003f6706 	br	99f8 <_strtod_r+0x121c>
    9c5c:	8009883a 	mov	r4,r16
    9c60:	01420034 	movhi	r5,2048
    9c64:	2942ba04 	addi	r5,r5,2792
    9c68:	d9800d04 	addi	r6,sp,52
    9c6c:	000eebc0 	call	eebc <__hexnan>
    9c70:	00c00144 	movi	r3,5
    9c74:	10ffc31e 	bne	r2,r3,9b84 <_strtod_r+0x13a8>
    9c78:	d8800e17 	ldw	r2,56(sp)
    9c7c:	d9c00d17 	ldw	r7,52(sp)
    9c80:	119ffc34 	orhi	r6,r2,32752
    9c84:	e1800115 	stw	r6,4(fp)
    9c88:	e1c00015 	stw	r7,0(fp)
    9c8c:	003b4a06 	br	89b8 <_strtod_r+0x1dc>
    9c90:	18fff804 	addi	r3,r3,-32
    9c94:	00bfffc4 	movi	r2,-1
    9c98:	10c4983a 	sll	r2,r2,r3
    9c9c:	208c703a 	and	r6,r4,r2
    9ca0:	e1800115 	stw	r6,4(fp)
    9ca4:	003f7506 	br	9a7c <_strtod_r+0x12a0>
    9ca8:	00bfffc4 	movi	r2,-1
    9cac:	10c4983a 	sll	r2,r2,r3
    9cb0:	e0c00017 	ldw	r3,0(fp)
    9cb4:	188e703a 	and	r7,r3,r2
    9cb8:	e1c00015 	stw	r7,0(fp)
    9cbc:	003f6f06 	br	9a7c <_strtod_r+0x12a0>

00009cc0 <strtof>:
    9cc0:	defffa04 	addi	sp,sp,-24
    9cc4:	dd000415 	stw	r20,16(sp)
    9cc8:	05020034 	movhi	r20,2048
    9ccc:	a50a3b04 	addi	r20,r20,10476
    9cd0:	2007883a 	mov	r3,r4
    9cd4:	a1000017 	ldw	r4,0(r20)
    9cd8:	280d883a 	mov	r6,r5
    9cdc:	180b883a 	mov	r5,r3
    9ce0:	dfc00515 	stw	ra,20(sp)
    9ce4:	dcc00315 	stw	r19,12(sp)
    9ce8:	dc800215 	stw	r18,8(sp)
    9cec:	dc400115 	stw	r17,4(sp)
    9cf0:	dc000015 	stw	r16,0(sp)
    9cf4:	00087dc0 	call	87dc <_strtod_r>
    9cf8:	180b883a 	mov	r5,r3
    9cfc:	1009883a 	mov	r4,r2
    9d00:	1823883a 	mov	r17,r3
    9d04:	1021883a 	mov	r16,r2
    9d08:	0012c2c0 	call	12c2c <__truncdfsf2>
    9d0c:	1009883a 	mov	r4,r2
    9d10:	000b883a 	mov	r5,zero
    9d14:	1025883a 	mov	r18,r2
    9d18:	1027883a 	mov	r19,r2
    9d1c:	001292c0 	call	1292c <__nesf2>
    9d20:	000d883a 	mov	r6,zero
    9d24:	000f883a 	mov	r7,zero
    9d28:	8009883a 	mov	r4,r16
    9d2c:	880b883a 	mov	r5,r17
    9d30:	10000e1e 	bne	r2,zero,9d6c <strtof+0xac>
    9d34:	0012b1c0 	call	12b1c <__nedf2>
    9d38:	10000c26 	beq	r2,zero,9d6c <strtof+0xac>
    9d3c:	a0c00017 	ldw	r3,0(r20)
    9d40:	00800884 	movi	r2,34
    9d44:	18800015 	stw	r2,0(r3)
    9d48:	9805883a 	mov	r2,r19
    9d4c:	dfc00517 	ldw	ra,20(sp)
    9d50:	dd000417 	ldw	r20,16(sp)
    9d54:	dcc00317 	ldw	r19,12(sp)
    9d58:	dc800217 	ldw	r18,8(sp)
    9d5c:	dc400117 	ldw	r17,4(sp)
    9d60:	dc000017 	ldw	r16,0(sp)
    9d64:	dec00604 	addi	sp,sp,24
    9d68:	f800283a 	ret
    9d6c:	9009883a 	mov	r4,r18
    9d70:	015fe034 	movhi	r5,32640
    9d74:	297fffc4 	addi	r5,r5,-1
    9d78:	00129a40 	call	129a4 <__gtsf2>
    9d7c:	00ffffc4 	movi	r3,-1
    9d80:	011ffc34 	movhi	r4,32752
    9d84:	213fffc4 	addi	r4,r4,-1
    9d88:	200f883a 	mov	r7,r4
    9d8c:	180d883a 	mov	r6,r3
    9d90:	8009883a 	mov	r4,r16
    9d94:	880b883a 	mov	r5,r17
    9d98:	00800f16 	blt	zero,r2,9dd8 <strtof+0x118>
    9d9c:	9009883a 	mov	r4,r18
    9da0:	017fe034 	movhi	r5,65408
    9da4:	297fffc4 	addi	r5,r5,-1
    9da8:	0012a1c0 	call	12a1c <__ltsf2>
    9dac:	023fffc4 	movi	r8,-1
    9db0:	027ffc34 	movhi	r9,65520
    9db4:	4a7fffc4 	addi	r9,r9,-1
    9db8:	880b883a 	mov	r5,r17
    9dbc:	480f883a 	mov	r7,r9
    9dc0:	8009883a 	mov	r4,r16
    9dc4:	400d883a 	mov	r6,r8
    9dc8:	103fdf0e 	bge	r2,zero,9d48 <strtof+0x88>
    9dcc:	0012ba40 	call	12ba4 <__ltdf2>
    9dd0:	103fda0e 	bge	r2,zero,9d3c <strtof+0x7c>
    9dd4:	003fdc06 	br	9d48 <strtof+0x88>
    9dd8:	000790c0 	call	790c <__gtdf2>
    9ddc:	00bfd70e 	bge	zero,r2,9d3c <strtof+0x7c>
    9de0:	003fee06 	br	9d9c <strtof+0xdc>

00009de4 <strtod>:
    9de4:	01820034 	movhi	r6,2048
    9de8:	318a3b04 	addi	r6,r6,10476
    9dec:	2007883a 	mov	r3,r4
    9df0:	31000017 	ldw	r4,0(r6)
    9df4:	280d883a 	mov	r6,r5
    9df8:	180b883a 	mov	r5,r3
    9dfc:	00087dc1 	jmpi	87dc <_strtod_r>

00009e00 <__sprint_r>:
    9e00:	30800217 	ldw	r2,8(r6)
    9e04:	defffe04 	addi	sp,sp,-8
    9e08:	dc000015 	stw	r16,0(sp)
    9e0c:	dfc00115 	stw	ra,4(sp)
    9e10:	3021883a 	mov	r16,r6
    9e14:	0007883a 	mov	r3,zero
    9e18:	1000061e 	bne	r2,zero,9e34 <__sprint_r+0x34>
    9e1c:	1805883a 	mov	r2,r3
    9e20:	30000115 	stw	zero,4(r6)
    9e24:	dfc00117 	ldw	ra,4(sp)
    9e28:	dc000017 	ldw	r16,0(sp)
    9e2c:	dec00204 	addi	sp,sp,8
    9e30:	f800283a 	ret
    9e34:	000df600 	call	df60 <__sfvwrite_r>
    9e38:	1007883a 	mov	r3,r2
    9e3c:	1805883a 	mov	r2,r3
    9e40:	80000115 	stw	zero,4(r16)
    9e44:	80000215 	stw	zero,8(r16)
    9e48:	dfc00117 	ldw	ra,4(sp)
    9e4c:	dc000017 	ldw	r16,0(sp)
    9e50:	dec00204 	addi	sp,sp,8
    9e54:	f800283a 	ret

00009e58 <___vfprintf_internal_r>:
    9e58:	defea404 	addi	sp,sp,-1392
    9e5c:	dd815815 	stw	r22,1376(sp)
    9e60:	dc015215 	stw	r16,1352(sp)
    9e64:	d9c15115 	stw	r7,1348(sp)
    9e68:	dfc15b15 	stw	ra,1388(sp)
    9e6c:	df015a15 	stw	fp,1384(sp)
    9e70:	ddc15915 	stw	r23,1380(sp)
    9e74:	dd415715 	stw	r21,1372(sp)
    9e78:	dd015615 	stw	r20,1368(sp)
    9e7c:	dcc15515 	stw	r19,1364(sp)
    9e80:	dc815415 	stw	r18,1360(sp)
    9e84:	dc415315 	stw	r17,1356(sp)
    9e88:	282d883a 	mov	r22,r5
    9e8c:	3021883a 	mov	r16,r6
    9e90:	d9014f15 	stw	r4,1340(sp)
    9e94:	000f10c0 	call	f10c <_localeconv_r>
    9e98:	10800017 	ldw	r2,0(r2)
    9e9c:	d9c15117 	ldw	r7,1348(sp)
    9ea0:	d8814915 	stw	r2,1316(sp)
    9ea4:	d8814f17 	ldw	r2,1340(sp)
    9ea8:	10000226 	beq	r2,zero,9eb4 <___vfprintf_internal_r+0x5c>
    9eac:	10800e17 	ldw	r2,56(r2)
    9eb0:	10020d26 	beq	r2,zero,a6e8 <___vfprintf_internal_r+0x890>
    9eb4:	b080030b 	ldhu	r2,12(r22)
    9eb8:	1080020c 	andi	r2,r2,8
    9ebc:	10020e26 	beq	r2,zero,a6f8 <___vfprintf_internal_r+0x8a0>
    9ec0:	b0800417 	ldw	r2,16(r22)
    9ec4:	10020c26 	beq	r2,zero,a6f8 <___vfprintf_internal_r+0x8a0>
    9ec8:	b200030b 	ldhu	r8,12(r22)
    9ecc:	00800284 	movi	r2,10
    9ed0:	40c0068c 	andi	r3,r8,26
    9ed4:	18802f1e 	bne	r3,r2,9f94 <___vfprintf_internal_r+0x13c>
    9ed8:	b080038f 	ldh	r2,14(r22)
    9edc:	10002d16 	blt	r2,zero,9f94 <___vfprintf_internal_r+0x13c>
    9ee0:	b240038b 	ldhu	r9,14(r22)
    9ee4:	b2800717 	ldw	r10,28(r22)
    9ee8:	b2c00917 	ldw	r11,36(r22)
    9eec:	d9014f17 	ldw	r4,1340(sp)
    9ef0:	dc402904 	addi	r17,sp,164
    9ef4:	d8804004 	addi	r2,sp,256
    9ef8:	00c10004 	movi	r3,1024
    9efc:	423fff4c 	andi	r8,r8,65533
    9f00:	800d883a 	mov	r6,r16
    9f04:	880b883a 	mov	r5,r17
    9f08:	da002c0d 	sth	r8,176(sp)
    9f0c:	da402c8d 	sth	r9,178(sp)
    9f10:	da803015 	stw	r10,192(sp)
    9f14:	dac03215 	stw	r11,200(sp)
    9f18:	d8802d15 	stw	r2,180(sp)
    9f1c:	d8c02e15 	stw	r3,184(sp)
    9f20:	d8802915 	stw	r2,164(sp)
    9f24:	d8c02b15 	stw	r3,172(sp)
    9f28:	d8002f15 	stw	zero,188(sp)
    9f2c:	0009e580 	call	9e58 <___vfprintf_internal_r>
    9f30:	d8814b15 	stw	r2,1324(sp)
    9f34:	10000416 	blt	r2,zero,9f48 <___vfprintf_internal_r+0xf0>
    9f38:	d9014f17 	ldw	r4,1340(sp)
    9f3c:	880b883a 	mov	r5,r17
    9f40:	000d6300 	call	d630 <_fflush_r>
    9f44:	1002321e 	bne	r2,zero,a810 <___vfprintf_internal_r+0x9b8>
    9f48:	d8802c0b 	ldhu	r2,176(sp)
    9f4c:	1080100c 	andi	r2,r2,64
    9f50:	10000326 	beq	r2,zero,9f60 <___vfprintf_internal_r+0x108>
    9f54:	b080030b 	ldhu	r2,12(r22)
    9f58:	10801014 	ori	r2,r2,64
    9f5c:	b080030d 	sth	r2,12(r22)
    9f60:	d8814b17 	ldw	r2,1324(sp)
    9f64:	dfc15b17 	ldw	ra,1388(sp)
    9f68:	df015a17 	ldw	fp,1384(sp)
    9f6c:	ddc15917 	ldw	r23,1380(sp)
    9f70:	dd815817 	ldw	r22,1376(sp)
    9f74:	dd415717 	ldw	r21,1372(sp)
    9f78:	dd015617 	ldw	r20,1368(sp)
    9f7c:	dcc15517 	ldw	r19,1364(sp)
    9f80:	dc815417 	ldw	r18,1360(sp)
    9f84:	dc415317 	ldw	r17,1356(sp)
    9f88:	dc015217 	ldw	r16,1352(sp)
    9f8c:	dec15c04 	addi	sp,sp,1392
    9f90:	f800283a 	ret
    9f94:	0005883a 	mov	r2,zero
    9f98:	0007883a 	mov	r3,zero
    9f9c:	dd401904 	addi	r21,sp,100
    9fa0:	d8814215 	stw	r2,1288(sp)
    9fa4:	802f883a 	mov	r23,r16
    9fa8:	d8c14315 	stw	r3,1292(sp)
    9fac:	d8014b15 	stw	zero,1324(sp)
    9fb0:	d8014815 	stw	zero,1312(sp)
    9fb4:	d8014415 	stw	zero,1296(sp)
    9fb8:	d8014715 	stw	zero,1308(sp)
    9fbc:	dd400c15 	stw	r21,48(sp)
    9fc0:	d8000e15 	stw	zero,56(sp)
    9fc4:	d8000d15 	stw	zero,52(sp)
    9fc8:	b8800007 	ldb	r2,0(r23)
    9fcc:	10001926 	beq	r2,zero,a034 <___vfprintf_internal_r+0x1dc>
    9fd0:	00c00944 	movi	r3,37
    9fd4:	10c01726 	beq	r2,r3,a034 <___vfprintf_internal_r+0x1dc>
    9fd8:	b821883a 	mov	r16,r23
    9fdc:	00000106 	br	9fe4 <___vfprintf_internal_r+0x18c>
    9fe0:	10c00326 	beq	r2,r3,9ff0 <___vfprintf_internal_r+0x198>
    9fe4:	84000044 	addi	r16,r16,1
    9fe8:	80800007 	ldb	r2,0(r16)
    9fec:	103ffc1e 	bne	r2,zero,9fe0 <___vfprintf_internal_r+0x188>
    9ff0:	85e7c83a 	sub	r19,r16,r23
    9ff4:	98000e26 	beq	r19,zero,a030 <___vfprintf_internal_r+0x1d8>
    9ff8:	dc800e17 	ldw	r18,56(sp)
    9ffc:	dc400d17 	ldw	r17,52(sp)
    a000:	008001c4 	movi	r2,7
    a004:	94e5883a 	add	r18,r18,r19
    a008:	8c400044 	addi	r17,r17,1
    a00c:	adc00015 	stw	r23,0(r21)
    a010:	dc800e15 	stw	r18,56(sp)
    a014:	acc00115 	stw	r19,4(r21)
    a018:	dc400d15 	stw	r17,52(sp)
    a01c:	14428b16 	blt	r2,r17,aa4c <___vfprintf_internal_r+0xbf4>
    a020:	ad400204 	addi	r21,r21,8
    a024:	d9014b17 	ldw	r4,1324(sp)
    a028:	24c9883a 	add	r4,r4,r19
    a02c:	d9014b15 	stw	r4,1324(sp)
    a030:	802f883a 	mov	r23,r16
    a034:	b8800007 	ldb	r2,0(r23)
    a038:	10013c26 	beq	r2,zero,a52c <___vfprintf_internal_r+0x6d4>
    a03c:	bdc00044 	addi	r23,r23,1
    a040:	d8000405 	stb	zero,16(sp)
    a044:	b8c00007 	ldb	r3,0(r23)
    a048:	04ffffc4 	movi	r19,-1
    a04c:	d8014c15 	stw	zero,1328(sp)
    a050:	d8014a15 	stw	zero,1320(sp)
    a054:	d8c14d15 	stw	r3,1332(sp)
    a058:	bdc00044 	addi	r23,r23,1
    a05c:	d9414d17 	ldw	r5,1332(sp)
    a060:	00801604 	movi	r2,88
    a064:	28fff804 	addi	r3,r5,-32
    a068:	10c06036 	bltu	r2,r3,a1ec <___vfprintf_internal_r+0x394>
    a06c:	18c5883a 	add	r2,r3,r3
    a070:	1085883a 	add	r2,r2,r2
    a074:	00c00074 	movhi	r3,1
    a078:	18e82204 	addi	r3,r3,-24440
    a07c:	10c5883a 	add	r2,r2,r3
    a080:	11000017 	ldw	r4,0(r2)
    a084:	2000683a 	jmp	r4
    a088:	0000affc 	xorhi	zero,zero,703
    a08c:	0000a1ec 	andhi	zero,zero,647
    a090:	0000a1ec 	andhi	zero,zero,647
    a094:	0000afe8 	cmpgeui	zero,zero,703
    a098:	0000a1ec 	andhi	zero,zero,647
    a09c:	0000a1ec 	andhi	zero,zero,647
    a0a0:	0000a1ec 	andhi	zero,zero,647
    a0a4:	0000a1ec 	andhi	zero,zero,647
    a0a8:	0000a1ec 	andhi	zero,zero,647
    a0ac:	0000a1ec 	andhi	zero,zero,647
    a0b0:	0000adc8 	cmpgei	zero,zero,695
    a0b4:	0000afd8 	cmpnei	zero,zero,703
    a0b8:	0000a1ec 	andhi	zero,zero,647
    a0bc:	0000ade0 	cmpeqi	zero,zero,695
    a0c0:	0000b074 	movhi	zero,705
    a0c4:	0000a1ec 	andhi	zero,zero,647
    a0c8:	0000b060 	cmpeqi	zero,zero,705
    a0cc:	0000b028 	cmpgeui	zero,zero,704
    a0d0:	0000b028 	cmpgeui	zero,zero,704
    a0d4:	0000b028 	cmpgeui	zero,zero,704
    a0d8:	0000b028 	cmpgeui	zero,zero,704
    a0dc:	0000b028 	cmpgeui	zero,zero,704
    a0e0:	0000b028 	cmpgeui	zero,zero,704
    a0e4:	0000b028 	cmpgeui	zero,zero,704
    a0e8:	0000b028 	cmpgeui	zero,zero,704
    a0ec:	0000b028 	cmpgeui	zero,zero,704
    a0f0:	0000a1ec 	andhi	zero,zero,647
    a0f4:	0000a1ec 	andhi	zero,zero,647
    a0f8:	0000a1ec 	andhi	zero,zero,647
    a0fc:	0000a1ec 	andhi	zero,zero,647
    a100:	0000a1ec 	andhi	zero,zero,647
    a104:	0000a1ec 	andhi	zero,zero,647
    a108:	0000a1ec 	andhi	zero,zero,647
    a10c:	0000a1ec 	andhi	zero,zero,647
    a110:	0000a1ec 	andhi	zero,zero,647
    a114:	0000a1ec 	andhi	zero,zero,647
    a118:	0000a844 	movi	zero,673
    a11c:	0000aeb0 	cmpltui	zero,zero,698
    a120:	0000a1ec 	andhi	zero,zero,647
    a124:	0000aeb0 	cmpltui	zero,zero,698
    a128:	0000a1ec 	andhi	zero,zero,647
    a12c:	0000a1ec 	andhi	zero,zero,647
    a130:	0000a1ec 	andhi	zero,zero,647
    a134:	0000a1ec 	andhi	zero,zero,647
    a138:	0000b014 	movui	zero,704
    a13c:	0000a1ec 	andhi	zero,zero,647
    a140:	0000a1ec 	andhi	zero,zero,647
    a144:	0000a8f8 	rdprs	zero,zero,675
    a148:	0000a1ec 	andhi	zero,zero,647
    a14c:	0000a1ec 	andhi	zero,zero,647
    a150:	0000a1ec 	andhi	zero,zero,647
    a154:	0000a1ec 	andhi	zero,zero,647
    a158:	0000a1ec 	andhi	zero,zero,647
    a15c:	0000a944 	movi	zero,677
    a160:	0000a1ec 	andhi	zero,zero,647
    a164:	0000a1ec 	andhi	zero,zero,647
    a168:	0000af64 	muli	zero,zero,701
    a16c:	0000a1ec 	andhi	zero,zero,647
    a170:	0000a1ec 	andhi	zero,zero,647
    a174:	0000a1ec 	andhi	zero,zero,647
    a178:	0000a1ec 	andhi	zero,zero,647
    a17c:	0000a1ec 	andhi	zero,zero,647
    a180:	0000a1ec 	andhi	zero,zero,647
    a184:	0000a1ec 	andhi	zero,zero,647
    a188:	0000a1ec 	andhi	zero,zero,647
    a18c:	0000a1ec 	andhi	zero,zero,647
    a190:	0000a1ec 	andhi	zero,zero,647
    a194:	0000af38 	rdprs	zero,zero,700
    a198:	0000a850 	cmplti	zero,zero,673
    a19c:	0000aeb0 	cmpltui	zero,zero,698
    a1a0:	0000aeb0 	cmpltui	zero,zero,698
    a1a4:	0000aeb0 	cmpltui	zero,zero,698
    a1a8:	0000ae9c 	xori	zero,zero,698
    a1ac:	0000a850 	cmplti	zero,zero,673
    a1b0:	0000a1ec 	andhi	zero,zero,647
    a1b4:	0000a1ec 	andhi	zero,zero,647
    a1b8:	0000ae24 	muli	zero,zero,696
    a1bc:	0000a1ec 	andhi	zero,zero,647
    a1c0:	0000adf4 	movhi	zero,695
    a1c4:	0000a904 	movi	zero,676
    a1c8:	0000ae54 	movui	zero,697
    a1cc:	0000ae40 	call	ae4 <xEventGroupWaitBits+0x70>
    a1d0:	0000a1ec 	andhi	zero,zero,647
    a1d4:	0000b0d0 	cmplti	zero,zero,707
    a1d8:	0000a1ec 	andhi	zero,zero,647
    a1dc:	0000a950 	cmplti	zero,zero,677
    a1e0:	0000a1ec 	andhi	zero,zero,647
    a1e4:	0000a1ec 	andhi	zero,zero,647
    a1e8:	0000afc8 	cmpgei	zero,zero,703
    a1ec:	d9014d17 	ldw	r4,1332(sp)
    a1f0:	2000ce26 	beq	r4,zero,a52c <___vfprintf_internal_r+0x6d4>
    a1f4:	01400044 	movi	r5,1
    a1f8:	d9800f04 	addi	r6,sp,60
    a1fc:	d9c14015 	stw	r7,1280(sp)
    a200:	d9414515 	stw	r5,1300(sp)
    a204:	d9814115 	stw	r6,1284(sp)
    a208:	280f883a 	mov	r7,r5
    a20c:	d9000f05 	stb	r4,60(sp)
    a210:	d8000405 	stb	zero,16(sp)
    a214:	d8014615 	stw	zero,1304(sp)
    a218:	d8c14c17 	ldw	r3,1328(sp)
    a21c:	1880008c 	andi	r2,r3,2
    a220:	1005003a 	cmpeq	r2,r2,zero
    a224:	d8815015 	stw	r2,1344(sp)
    a228:	1000031e 	bne	r2,zero,a238 <___vfprintf_internal_r+0x3e0>
    a22c:	d9014517 	ldw	r4,1300(sp)
    a230:	21000084 	addi	r4,r4,2
    a234:	d9014515 	stw	r4,1300(sp)
    a238:	d9414c17 	ldw	r5,1328(sp)
    a23c:	2940210c 	andi	r5,r5,132
    a240:	d9414e15 	stw	r5,1336(sp)
    a244:	28002d1e 	bne	r5,zero,a2fc <___vfprintf_internal_r+0x4a4>
    a248:	d9814a17 	ldw	r6,1320(sp)
    a24c:	d8814517 	ldw	r2,1300(sp)
    a250:	30a1c83a 	sub	r16,r6,r2
    a254:	0400290e 	bge	zero,r16,a2fc <___vfprintf_internal_r+0x4a4>
    a258:	00800404 	movi	r2,16
    a25c:	1404580e 	bge	r2,r16,b3c0 <___vfprintf_internal_r+0x1568>
    a260:	dc800e17 	ldw	r18,56(sp)
    a264:	dc400d17 	ldw	r17,52(sp)
    a268:	1027883a 	mov	r19,r2
    a26c:	07020034 	movhi	fp,2048
    a270:	e7016f84 	addi	fp,fp,1470
    a274:	050001c4 	movi	r20,7
    a278:	00000306 	br	a288 <___vfprintf_internal_r+0x430>
    a27c:	843ffc04 	addi	r16,r16,-16
    a280:	ad400204 	addi	r21,r21,8
    a284:	9c00130e 	bge	r19,r16,a2d4 <___vfprintf_internal_r+0x47c>
    a288:	94800404 	addi	r18,r18,16
    a28c:	8c400044 	addi	r17,r17,1
    a290:	af000015 	stw	fp,0(r21)
    a294:	acc00115 	stw	r19,4(r21)
    a298:	dc800e15 	stw	r18,56(sp)
    a29c:	dc400d15 	stw	r17,52(sp)
    a2a0:	a47ff60e 	bge	r20,r17,a27c <___vfprintf_internal_r+0x424>
    a2a4:	d9014f17 	ldw	r4,1340(sp)
    a2a8:	b00b883a 	mov	r5,r22
    a2ac:	d9800c04 	addi	r6,sp,48
    a2b0:	d9c15115 	stw	r7,1348(sp)
    a2b4:	0009e000 	call	9e00 <__sprint_r>
    a2b8:	d9c15117 	ldw	r7,1348(sp)
    a2bc:	10009e1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a2c0:	843ffc04 	addi	r16,r16,-16
    a2c4:	dc800e17 	ldw	r18,56(sp)
    a2c8:	dc400d17 	ldw	r17,52(sp)
    a2cc:	dd401904 	addi	r21,sp,100
    a2d0:	9c3fed16 	blt	r19,r16,a288 <___vfprintf_internal_r+0x430>
    a2d4:	9425883a 	add	r18,r18,r16
    a2d8:	8c400044 	addi	r17,r17,1
    a2dc:	008001c4 	movi	r2,7
    a2e0:	af000015 	stw	fp,0(r21)
    a2e4:	ac000115 	stw	r16,4(r21)
    a2e8:	dc800e15 	stw	r18,56(sp)
    a2ec:	dc400d15 	stw	r17,52(sp)
    a2f0:	1441f516 	blt	r2,r17,aac8 <___vfprintf_internal_r+0xc70>
    a2f4:	ad400204 	addi	r21,r21,8
    a2f8:	00000206 	br	a304 <___vfprintf_internal_r+0x4ac>
    a2fc:	dc800e17 	ldw	r18,56(sp)
    a300:	dc400d17 	ldw	r17,52(sp)
    a304:	d8800407 	ldb	r2,16(sp)
    a308:	10000b26 	beq	r2,zero,a338 <___vfprintf_internal_r+0x4e0>
    a30c:	00800044 	movi	r2,1
    a310:	94800044 	addi	r18,r18,1
    a314:	8c400044 	addi	r17,r17,1
    a318:	a8800115 	stw	r2,4(r21)
    a31c:	d8c00404 	addi	r3,sp,16
    a320:	008001c4 	movi	r2,7
    a324:	a8c00015 	stw	r3,0(r21)
    a328:	dc800e15 	stw	r18,56(sp)
    a32c:	dc400d15 	stw	r17,52(sp)
    a330:	1441da16 	blt	r2,r17,aa9c <___vfprintf_internal_r+0xc44>
    a334:	ad400204 	addi	r21,r21,8
    a338:	d9015017 	ldw	r4,1344(sp)
    a33c:	20000b1e 	bne	r4,zero,a36c <___vfprintf_internal_r+0x514>
    a340:	d8800444 	addi	r2,sp,17
    a344:	94800084 	addi	r18,r18,2
    a348:	8c400044 	addi	r17,r17,1
    a34c:	a8800015 	stw	r2,0(r21)
    a350:	00c00084 	movi	r3,2
    a354:	008001c4 	movi	r2,7
    a358:	a8c00115 	stw	r3,4(r21)
    a35c:	dc800e15 	stw	r18,56(sp)
    a360:	dc400d15 	stw	r17,52(sp)
    a364:	1441c216 	blt	r2,r17,aa70 <___vfprintf_internal_r+0xc18>
    a368:	ad400204 	addi	r21,r21,8
    a36c:	d9414e17 	ldw	r5,1336(sp)
    a370:	00802004 	movi	r2,128
    a374:	2880b126 	beq	r5,r2,a63c <___vfprintf_internal_r+0x7e4>
    a378:	d8c14617 	ldw	r3,1304(sp)
    a37c:	19e1c83a 	sub	r16,r3,r7
    a380:	0400260e 	bge	zero,r16,a41c <___vfprintf_internal_r+0x5c4>
    a384:	00800404 	movi	r2,16
    a388:	1403c90e 	bge	r2,r16,b2b0 <___vfprintf_internal_r+0x1458>
    a38c:	1027883a 	mov	r19,r2
    a390:	07020034 	movhi	fp,2048
    a394:	e7016b84 	addi	fp,fp,1454
    a398:	050001c4 	movi	r20,7
    a39c:	00000306 	br	a3ac <___vfprintf_internal_r+0x554>
    a3a0:	843ffc04 	addi	r16,r16,-16
    a3a4:	ad400204 	addi	r21,r21,8
    a3a8:	9c00130e 	bge	r19,r16,a3f8 <___vfprintf_internal_r+0x5a0>
    a3ac:	94800404 	addi	r18,r18,16
    a3b0:	8c400044 	addi	r17,r17,1
    a3b4:	af000015 	stw	fp,0(r21)
    a3b8:	acc00115 	stw	r19,4(r21)
    a3bc:	dc800e15 	stw	r18,56(sp)
    a3c0:	dc400d15 	stw	r17,52(sp)
    a3c4:	a47ff60e 	bge	r20,r17,a3a0 <___vfprintf_internal_r+0x548>
    a3c8:	d9014f17 	ldw	r4,1340(sp)
    a3cc:	b00b883a 	mov	r5,r22
    a3d0:	d9800c04 	addi	r6,sp,48
    a3d4:	d9c15115 	stw	r7,1348(sp)
    a3d8:	0009e000 	call	9e00 <__sprint_r>
    a3dc:	d9c15117 	ldw	r7,1348(sp)
    a3e0:	1000551e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a3e4:	843ffc04 	addi	r16,r16,-16
    a3e8:	dc800e17 	ldw	r18,56(sp)
    a3ec:	dc400d17 	ldw	r17,52(sp)
    a3f0:	dd401904 	addi	r21,sp,100
    a3f4:	9c3fed16 	blt	r19,r16,a3ac <___vfprintf_internal_r+0x554>
    a3f8:	9425883a 	add	r18,r18,r16
    a3fc:	8c400044 	addi	r17,r17,1
    a400:	008001c4 	movi	r2,7
    a404:	af000015 	stw	fp,0(r21)
    a408:	ac000115 	stw	r16,4(r21)
    a40c:	dc800e15 	stw	r18,56(sp)
    a410:	dc400d15 	stw	r17,52(sp)
    a414:	14418216 	blt	r2,r17,aa20 <___vfprintf_internal_r+0xbc8>
    a418:	ad400204 	addi	r21,r21,8
    a41c:	d9014c17 	ldw	r4,1328(sp)
    a420:	2080400c 	andi	r2,r4,256
    a424:	10004a1e 	bne	r2,zero,a550 <___vfprintf_internal_r+0x6f8>
    a428:	d9414117 	ldw	r5,1284(sp)
    a42c:	91e5883a 	add	r18,r18,r7
    a430:	8c400044 	addi	r17,r17,1
    a434:	008001c4 	movi	r2,7
    a438:	a9400015 	stw	r5,0(r21)
    a43c:	a9c00115 	stw	r7,4(r21)
    a440:	dc800e15 	stw	r18,56(sp)
    a444:	dc400d15 	stw	r17,52(sp)
    a448:	14416716 	blt	r2,r17,a9e8 <___vfprintf_internal_r+0xb90>
    a44c:	a8c00204 	addi	r3,r21,8
    a450:	d9814c17 	ldw	r6,1328(sp)
    a454:	3080010c 	andi	r2,r6,4
    a458:	10002826 	beq	r2,zero,a4fc <___vfprintf_internal_r+0x6a4>
    a45c:	d8814a17 	ldw	r2,1320(sp)
    a460:	d9014517 	ldw	r4,1300(sp)
    a464:	1121c83a 	sub	r16,r2,r4
    a468:	0400240e 	bge	zero,r16,a4fc <___vfprintf_internal_r+0x6a4>
    a46c:	00800404 	movi	r2,16
    a470:	14044f0e 	bge	r2,r16,b5b0 <___vfprintf_internal_r+0x1758>
    a474:	dc400d17 	ldw	r17,52(sp)
    a478:	1027883a 	mov	r19,r2
    a47c:	07020034 	movhi	fp,2048
    a480:	e7016f84 	addi	fp,fp,1470
    a484:	050001c4 	movi	r20,7
    a488:	00000306 	br	a498 <___vfprintf_internal_r+0x640>
    a48c:	843ffc04 	addi	r16,r16,-16
    a490:	18c00204 	addi	r3,r3,8
    a494:	9c00110e 	bge	r19,r16,a4dc <___vfprintf_internal_r+0x684>
    a498:	94800404 	addi	r18,r18,16
    a49c:	8c400044 	addi	r17,r17,1
    a4a0:	1f000015 	stw	fp,0(r3)
    a4a4:	1cc00115 	stw	r19,4(r3)
    a4a8:	dc800e15 	stw	r18,56(sp)
    a4ac:	dc400d15 	stw	r17,52(sp)
    a4b0:	a47ff60e 	bge	r20,r17,a48c <___vfprintf_internal_r+0x634>
    a4b4:	d9014f17 	ldw	r4,1340(sp)
    a4b8:	b00b883a 	mov	r5,r22
    a4bc:	d9800c04 	addi	r6,sp,48
    a4c0:	0009e000 	call	9e00 <__sprint_r>
    a4c4:	10001c1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a4c8:	843ffc04 	addi	r16,r16,-16
    a4cc:	dc800e17 	ldw	r18,56(sp)
    a4d0:	dc400d17 	ldw	r17,52(sp)
    a4d4:	d8c01904 	addi	r3,sp,100
    a4d8:	9c3fef16 	blt	r19,r16,a498 <___vfprintf_internal_r+0x640>
    a4dc:	9425883a 	add	r18,r18,r16
    a4e0:	8c400044 	addi	r17,r17,1
    a4e4:	008001c4 	movi	r2,7
    a4e8:	1f000015 	stw	fp,0(r3)
    a4ec:	1c000115 	stw	r16,4(r3)
    a4f0:	dc800e15 	stw	r18,56(sp)
    a4f4:	dc400d15 	stw	r17,52(sp)
    a4f8:	1440cb16 	blt	r2,r17,a828 <___vfprintf_internal_r+0x9d0>
    a4fc:	d8814a17 	ldw	r2,1320(sp)
    a500:	d9414517 	ldw	r5,1300(sp)
    a504:	1140010e 	bge	r2,r5,a50c <___vfprintf_internal_r+0x6b4>
    a508:	2805883a 	mov	r2,r5
    a50c:	d9814b17 	ldw	r6,1324(sp)
    a510:	308d883a 	add	r6,r6,r2
    a514:	d9814b15 	stw	r6,1324(sp)
    a518:	90013b1e 	bne	r18,zero,aa08 <___vfprintf_internal_r+0xbb0>
    a51c:	d9c14017 	ldw	r7,1280(sp)
    a520:	dd401904 	addi	r21,sp,100
    a524:	d8000d15 	stw	zero,52(sp)
    a528:	003ea706 	br	9fc8 <___vfprintf_internal_r+0x170>
    a52c:	d8800e17 	ldw	r2,56(sp)
    a530:	10053f1e 	bne	r2,zero,ba30 <___vfprintf_internal_r+0x1bd8>
    a534:	d8000d15 	stw	zero,52(sp)
    a538:	b080030b 	ldhu	r2,12(r22)
    a53c:	1080100c 	andi	r2,r2,64
    a540:	103e8726 	beq	r2,zero,9f60 <___vfprintf_internal_r+0x108>
    a544:	00bfffc4 	movi	r2,-1
    a548:	d8814b15 	stw	r2,1324(sp)
    a54c:	003e8406 	br	9f60 <___vfprintf_internal_r+0x108>
    a550:	d9814d17 	ldw	r6,1332(sp)
    a554:	00801944 	movi	r2,101
    a558:	11806e16 	blt	r2,r6,a714 <___vfprintf_internal_r+0x8bc>
    a55c:	d9414717 	ldw	r5,1308(sp)
    a560:	00c00044 	movi	r3,1
    a564:	1943430e 	bge	r3,r5,b274 <___vfprintf_internal_r+0x141c>
    a568:	d8814117 	ldw	r2,1284(sp)
    a56c:	94800044 	addi	r18,r18,1
    a570:	8c400044 	addi	r17,r17,1
    a574:	a8800015 	stw	r2,0(r21)
    a578:	008001c4 	movi	r2,7
    a57c:	a8c00115 	stw	r3,4(r21)
    a580:	dc800e15 	stw	r18,56(sp)
    a584:	dc400d15 	stw	r17,52(sp)
    a588:	1441ca16 	blt	r2,r17,acb4 <___vfprintf_internal_r+0xe5c>
    a58c:	a8c00204 	addi	r3,r21,8
    a590:	d9014917 	ldw	r4,1316(sp)
    a594:	00800044 	movi	r2,1
    a598:	94800044 	addi	r18,r18,1
    a59c:	8c400044 	addi	r17,r17,1
    a5a0:	18800115 	stw	r2,4(r3)
    a5a4:	008001c4 	movi	r2,7
    a5a8:	19000015 	stw	r4,0(r3)
    a5ac:	dc800e15 	stw	r18,56(sp)
    a5b0:	dc400d15 	stw	r17,52(sp)
    a5b4:	1441b616 	blt	r2,r17,ac90 <___vfprintf_internal_r+0xe38>
    a5b8:	1cc00204 	addi	r19,r3,8
    a5bc:	d9014217 	ldw	r4,1288(sp)
    a5c0:	d9414317 	ldw	r5,1292(sp)
    a5c4:	000d883a 	mov	r6,zero
    a5c8:	000f883a 	mov	r7,zero
    a5cc:	0012b1c0 	call	12b1c <__nedf2>
    a5d0:	10017426 	beq	r2,zero,aba4 <___vfprintf_internal_r+0xd4c>
    a5d4:	d9414717 	ldw	r5,1308(sp)
    a5d8:	d9814117 	ldw	r6,1284(sp)
    a5dc:	8c400044 	addi	r17,r17,1
    a5e0:	2c85883a 	add	r2,r5,r18
    a5e4:	14bfffc4 	addi	r18,r2,-1
    a5e8:	28bfffc4 	addi	r2,r5,-1
    a5ec:	30c00044 	addi	r3,r6,1
    a5f0:	98800115 	stw	r2,4(r19)
    a5f4:	008001c4 	movi	r2,7
    a5f8:	98c00015 	stw	r3,0(r19)
    a5fc:	dc800e15 	stw	r18,56(sp)
    a600:	dc400d15 	stw	r17,52(sp)
    a604:	14418e16 	blt	r2,r17,ac40 <___vfprintf_internal_r+0xde8>
    a608:	9cc00204 	addi	r19,r19,8
    a60c:	d9414817 	ldw	r5,1312(sp)
    a610:	d8800804 	addi	r2,sp,32
    a614:	8c400044 	addi	r17,r17,1
    a618:	9165883a 	add	r18,r18,r5
    a61c:	98800015 	stw	r2,0(r19)
    a620:	008001c4 	movi	r2,7
    a624:	99400115 	stw	r5,4(r19)
    a628:	dc800e15 	stw	r18,56(sp)
    a62c:	dc400d15 	stw	r17,52(sp)
    a630:	1440ed16 	blt	r2,r17,a9e8 <___vfprintf_internal_r+0xb90>
    a634:	98c00204 	addi	r3,r19,8
    a638:	003f8506 	br	a450 <___vfprintf_internal_r+0x5f8>
    a63c:	d9814a17 	ldw	r6,1320(sp)
    a640:	d8814517 	ldw	r2,1300(sp)
    a644:	30a1c83a 	sub	r16,r6,r2
    a648:	043f4b0e 	bge	zero,r16,a378 <___vfprintf_internal_r+0x520>
    a64c:	00800404 	movi	r2,16
    a650:	1404340e 	bge	r2,r16,b724 <___vfprintf_internal_r+0x18cc>
    a654:	1027883a 	mov	r19,r2
    a658:	07020034 	movhi	fp,2048
    a65c:	e7016b84 	addi	fp,fp,1454
    a660:	050001c4 	movi	r20,7
    a664:	00000306 	br	a674 <___vfprintf_internal_r+0x81c>
    a668:	843ffc04 	addi	r16,r16,-16
    a66c:	ad400204 	addi	r21,r21,8
    a670:	9c00130e 	bge	r19,r16,a6c0 <___vfprintf_internal_r+0x868>
    a674:	94800404 	addi	r18,r18,16
    a678:	8c400044 	addi	r17,r17,1
    a67c:	af000015 	stw	fp,0(r21)
    a680:	acc00115 	stw	r19,4(r21)
    a684:	dc800e15 	stw	r18,56(sp)
    a688:	dc400d15 	stw	r17,52(sp)
    a68c:	a47ff60e 	bge	r20,r17,a668 <___vfprintf_internal_r+0x810>
    a690:	d9014f17 	ldw	r4,1340(sp)
    a694:	b00b883a 	mov	r5,r22
    a698:	d9800c04 	addi	r6,sp,48
    a69c:	d9c15115 	stw	r7,1348(sp)
    a6a0:	0009e000 	call	9e00 <__sprint_r>
    a6a4:	d9c15117 	ldw	r7,1348(sp)
    a6a8:	103fa31e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a6ac:	843ffc04 	addi	r16,r16,-16
    a6b0:	dc800e17 	ldw	r18,56(sp)
    a6b4:	dc400d17 	ldw	r17,52(sp)
    a6b8:	dd401904 	addi	r21,sp,100
    a6bc:	9c3fed16 	blt	r19,r16,a674 <___vfprintf_internal_r+0x81c>
    a6c0:	9425883a 	add	r18,r18,r16
    a6c4:	8c400044 	addi	r17,r17,1
    a6c8:	008001c4 	movi	r2,7
    a6cc:	af000015 	stw	fp,0(r21)
    a6d0:	ac000115 	stw	r16,4(r21)
    a6d4:	dc800e15 	stw	r18,56(sp)
    a6d8:	dc400d15 	stw	r17,52(sp)
    a6dc:	14416116 	blt	r2,r17,ac64 <___vfprintf_internal_r+0xe0c>
    a6e0:	ad400204 	addi	r21,r21,8
    a6e4:	003f2406 	br	a378 <___vfprintf_internal_r+0x520>
    a6e8:	d9014f17 	ldw	r4,1340(sp)
    a6ec:	000d8c80 	call	d8c8 <__sinit>
    a6f0:	d9c15117 	ldw	r7,1348(sp)
    a6f4:	003def06 	br	9eb4 <___vfprintf_internal_r+0x5c>
    a6f8:	d9014f17 	ldw	r4,1340(sp)
    a6fc:	b00b883a 	mov	r5,r22
    a700:	d9c15115 	stw	r7,1348(sp)
    a704:	000bd280 	call	bd28 <__swsetup_r>
    a708:	d9c15117 	ldw	r7,1348(sp)
    a70c:	103dee26 	beq	r2,zero,9ec8 <___vfprintf_internal_r+0x70>
    a710:	003f8c06 	br	a544 <___vfprintf_internal_r+0x6ec>
    a714:	d9014217 	ldw	r4,1288(sp)
    a718:	d9414317 	ldw	r5,1292(sp)
    a71c:	000d883a 	mov	r6,zero
    a720:	000f883a 	mov	r7,zero
    a724:	0012a940 	call	12a94 <__eqdf2>
    a728:	1000f21e 	bne	r2,zero,aaf4 <___vfprintf_internal_r+0xc9c>
    a72c:	00820034 	movhi	r2,2048
    a730:	10816b04 	addi	r2,r2,1452
    a734:	94800044 	addi	r18,r18,1
    a738:	8c400044 	addi	r17,r17,1
    a73c:	a8800015 	stw	r2,0(r21)
    a740:	00c00044 	movi	r3,1
    a744:	008001c4 	movi	r2,7
    a748:	a8c00115 	stw	r3,4(r21)
    a74c:	dc800e15 	stw	r18,56(sp)
    a750:	dc400d15 	stw	r17,52(sp)
    a754:	1442fa16 	blt	r2,r17,b340 <___vfprintf_internal_r+0x14e8>
    a758:	a8c00204 	addi	r3,r21,8
    a75c:	d8800517 	ldw	r2,20(sp)
    a760:	d9014717 	ldw	r4,1308(sp)
    a764:	11015c0e 	bge	r2,r4,acd8 <___vfprintf_internal_r+0xe80>
    a768:	dc400d17 	ldw	r17,52(sp)
    a76c:	d9814917 	ldw	r6,1316(sp)
    a770:	00800044 	movi	r2,1
    a774:	94800044 	addi	r18,r18,1
    a778:	8c400044 	addi	r17,r17,1
    a77c:	18800115 	stw	r2,4(r3)
    a780:	008001c4 	movi	r2,7
    a784:	19800015 	stw	r6,0(r3)
    a788:	dc800e15 	stw	r18,56(sp)
    a78c:	dc400d15 	stw	r17,52(sp)
    a790:	14431016 	blt	r2,r17,b3d4 <___vfprintf_internal_r+0x157c>
    a794:	18c00204 	addi	r3,r3,8
    a798:	d8814717 	ldw	r2,1308(sp)
    a79c:	143fffc4 	addi	r16,r2,-1
    a7a0:	043f2b0e 	bge	zero,r16,a450 <___vfprintf_internal_r+0x5f8>
    a7a4:	00800404 	movi	r2,16
    a7a8:	1402a20e 	bge	r2,r16,b234 <___vfprintf_internal_r+0x13dc>
    a7ac:	dc400d17 	ldw	r17,52(sp)
    a7b0:	1027883a 	mov	r19,r2
    a7b4:	07020034 	movhi	fp,2048
    a7b8:	e7016b84 	addi	fp,fp,1454
    a7bc:	050001c4 	movi	r20,7
    a7c0:	00000306 	br	a7d0 <___vfprintf_internal_r+0x978>
    a7c4:	18c00204 	addi	r3,r3,8
    a7c8:	843ffc04 	addi	r16,r16,-16
    a7cc:	9c029c0e 	bge	r19,r16,b240 <___vfprintf_internal_r+0x13e8>
    a7d0:	94800404 	addi	r18,r18,16
    a7d4:	8c400044 	addi	r17,r17,1
    a7d8:	1f000015 	stw	fp,0(r3)
    a7dc:	1cc00115 	stw	r19,4(r3)
    a7e0:	dc800e15 	stw	r18,56(sp)
    a7e4:	dc400d15 	stw	r17,52(sp)
    a7e8:	a47ff60e 	bge	r20,r17,a7c4 <___vfprintf_internal_r+0x96c>
    a7ec:	d9014f17 	ldw	r4,1340(sp)
    a7f0:	b00b883a 	mov	r5,r22
    a7f4:	d9800c04 	addi	r6,sp,48
    a7f8:	0009e000 	call	9e00 <__sprint_r>
    a7fc:	103f4e1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a800:	dc800e17 	ldw	r18,56(sp)
    a804:	dc400d17 	ldw	r17,52(sp)
    a808:	d8c01904 	addi	r3,sp,100
    a80c:	003fee06 	br	a7c8 <___vfprintf_internal_r+0x970>
    a810:	d8802c0b 	ldhu	r2,176(sp)
    a814:	00ffffc4 	movi	r3,-1
    a818:	d8c14b15 	stw	r3,1324(sp)
    a81c:	1080100c 	andi	r2,r2,64
    a820:	103dcc1e 	bne	r2,zero,9f54 <___vfprintf_internal_r+0xfc>
    a824:	003dce06 	br	9f60 <___vfprintf_internal_r+0x108>
    a828:	d9014f17 	ldw	r4,1340(sp)
    a82c:	b00b883a 	mov	r5,r22
    a830:	d9800c04 	addi	r6,sp,48
    a834:	0009e000 	call	9e00 <__sprint_r>
    a838:	103f3f1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a83c:	dc800e17 	ldw	r18,56(sp)
    a840:	003f2e06 	br	a4fc <___vfprintf_internal_r+0x6a4>
    a844:	d9414c17 	ldw	r5,1328(sp)
    a848:	29400414 	ori	r5,r5,16
    a84c:	d9414c15 	stw	r5,1328(sp)
    a850:	d9814c17 	ldw	r6,1328(sp)
    a854:	3080080c 	andi	r2,r6,32
    a858:	10014f1e 	bne	r2,zero,ad98 <___vfprintf_internal_r+0xf40>
    a85c:	d8c14c17 	ldw	r3,1328(sp)
    a860:	1880040c 	andi	r2,r3,16
    a864:	1002ea1e 	bne	r2,zero,b410 <___vfprintf_internal_r+0x15b8>
    a868:	d9014c17 	ldw	r4,1328(sp)
    a86c:	2080100c 	andi	r2,r4,64
    a870:	1002e726 	beq	r2,zero,b410 <___vfprintf_internal_r+0x15b8>
    a874:	3880000f 	ldh	r2,0(r7)
    a878:	39c00104 	addi	r7,r7,4
    a87c:	d9c14015 	stw	r7,1280(sp)
    a880:	1023d7fa 	srai	r17,r2,31
    a884:	1021883a 	mov	r16,r2
    a888:	88037216 	blt	r17,zero,b654 <___vfprintf_internal_r+0x17fc>
    a88c:	01000044 	movi	r4,1
    a890:	98000416 	blt	r19,zero,a8a4 <___vfprintf_internal_r+0xa4c>
    a894:	d8c14c17 	ldw	r3,1328(sp)
    a898:	00bfdfc4 	movi	r2,-129
    a89c:	1886703a 	and	r3,r3,r2
    a8a0:	d8c14c15 	stw	r3,1328(sp)
    a8a4:	8444b03a 	or	r2,r16,r17
    a8a8:	1002261e 	bne	r2,zero,b144 <___vfprintf_internal_r+0x12ec>
    a8ac:	9802251e 	bne	r19,zero,b144 <___vfprintf_internal_r+0x12ec>
    a8b0:	20803fcc 	andi	r2,r4,255
    a8b4:	10029b26 	beq	r2,zero,b324 <___vfprintf_internal_r+0x14cc>
    a8b8:	d8c01904 	addi	r3,sp,100
    a8bc:	dd000f04 	addi	r20,sp,60
    a8c0:	d8c14115 	stw	r3,1284(sp)
    a8c4:	d8c14117 	ldw	r3,1284(sp)
    a8c8:	dcc14515 	stw	r19,1300(sp)
    a8cc:	a0c5c83a 	sub	r2,r20,r3
    a8d0:	11c00a04 	addi	r7,r2,40
    a8d4:	99c0010e 	bge	r19,r7,a8dc <___vfprintf_internal_r+0xa84>
    a8d8:	d9c14515 	stw	r7,1300(sp)
    a8dc:	dcc14615 	stw	r19,1304(sp)
    a8e0:	d8800407 	ldb	r2,16(sp)
    a8e4:	103e4c26 	beq	r2,zero,a218 <___vfprintf_internal_r+0x3c0>
    a8e8:	d8814517 	ldw	r2,1300(sp)
    a8ec:	10800044 	addi	r2,r2,1
    a8f0:	d8814515 	stw	r2,1300(sp)
    a8f4:	003e4806 	br	a218 <___vfprintf_internal_r+0x3c0>
    a8f8:	d9814c17 	ldw	r6,1328(sp)
    a8fc:	31800414 	ori	r6,r6,16
    a900:	d9814c15 	stw	r6,1328(sp)
    a904:	d8c14c17 	ldw	r3,1328(sp)
    a908:	1880080c 	andi	r2,r3,32
    a90c:	1001271e 	bne	r2,zero,adac <___vfprintf_internal_r+0xf54>
    a910:	d9414c17 	ldw	r5,1328(sp)
    a914:	2880040c 	andi	r2,r5,16
    a918:	1002b61e 	bne	r2,zero,b3f4 <___vfprintf_internal_r+0x159c>
    a91c:	d9814c17 	ldw	r6,1328(sp)
    a920:	3080100c 	andi	r2,r6,64
    a924:	1002b326 	beq	r2,zero,b3f4 <___vfprintf_internal_r+0x159c>
    a928:	3c00000b 	ldhu	r16,0(r7)
    a92c:	0009883a 	mov	r4,zero
    a930:	39c00104 	addi	r7,r7,4
    a934:	0023883a 	mov	r17,zero
    a938:	d9c14015 	stw	r7,1280(sp)
    a93c:	d8000405 	stb	zero,16(sp)
    a940:	003fd306 	br	a890 <___vfprintf_internal_r+0xa38>
    a944:	d9014c17 	ldw	r4,1328(sp)
    a948:	21000414 	ori	r4,r4,16
    a94c:	d9014c15 	stw	r4,1328(sp)
    a950:	d9414c17 	ldw	r5,1328(sp)
    a954:	2880080c 	andi	r2,r5,32
    a958:	1001081e 	bne	r2,zero,ad7c <___vfprintf_internal_r+0xf24>
    a95c:	d8c14c17 	ldw	r3,1328(sp)
    a960:	1880040c 	andi	r2,r3,16
    a964:	1002b01e 	bne	r2,zero,b428 <___vfprintf_internal_r+0x15d0>
    a968:	d9014c17 	ldw	r4,1328(sp)
    a96c:	2080100c 	andi	r2,r4,64
    a970:	1002ad26 	beq	r2,zero,b428 <___vfprintf_internal_r+0x15d0>
    a974:	3c00000b 	ldhu	r16,0(r7)
    a978:	01000044 	movi	r4,1
    a97c:	39c00104 	addi	r7,r7,4
    a980:	0023883a 	mov	r17,zero
    a984:	d9c14015 	stw	r7,1280(sp)
    a988:	d8000405 	stb	zero,16(sp)
    a98c:	003fc006 	br	a890 <___vfprintf_internal_r+0xa38>
    a990:	d9014f17 	ldw	r4,1340(sp)
    a994:	b00b883a 	mov	r5,r22
    a998:	d9800c04 	addi	r6,sp,48
    a99c:	0009e000 	call	9e00 <__sprint_r>
    a9a0:	103ee51e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a9a4:	dc800e17 	ldw	r18,56(sp)
    a9a8:	d8c01904 	addi	r3,sp,100
    a9ac:	d9814c17 	ldw	r6,1328(sp)
    a9b0:	3080004c 	andi	r2,r6,1
    a9b4:	1005003a 	cmpeq	r2,r2,zero
    a9b8:	103ea51e 	bne	r2,zero,a450 <___vfprintf_internal_r+0x5f8>
    a9bc:	00800044 	movi	r2,1
    a9c0:	dc400d17 	ldw	r17,52(sp)
    a9c4:	18800115 	stw	r2,4(r3)
    a9c8:	d8814917 	ldw	r2,1316(sp)
    a9cc:	94800044 	addi	r18,r18,1
    a9d0:	8c400044 	addi	r17,r17,1
    a9d4:	18800015 	stw	r2,0(r3)
    a9d8:	008001c4 	movi	r2,7
    a9dc:	dc800e15 	stw	r18,56(sp)
    a9e0:	dc400d15 	stw	r17,52(sp)
    a9e4:	14421e0e 	bge	r2,r17,b260 <___vfprintf_internal_r+0x1408>
    a9e8:	d9014f17 	ldw	r4,1340(sp)
    a9ec:	b00b883a 	mov	r5,r22
    a9f0:	d9800c04 	addi	r6,sp,48
    a9f4:	0009e000 	call	9e00 <__sprint_r>
    a9f8:	103ecf1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    a9fc:	dc800e17 	ldw	r18,56(sp)
    aa00:	d8c01904 	addi	r3,sp,100
    aa04:	003e9206 	br	a450 <___vfprintf_internal_r+0x5f8>
    aa08:	d9014f17 	ldw	r4,1340(sp)
    aa0c:	b00b883a 	mov	r5,r22
    aa10:	d9800c04 	addi	r6,sp,48
    aa14:	0009e000 	call	9e00 <__sprint_r>
    aa18:	103ec026 	beq	r2,zero,a51c <___vfprintf_internal_r+0x6c4>
    aa1c:	003ec606 	br	a538 <___vfprintf_internal_r+0x6e0>
    aa20:	d9014f17 	ldw	r4,1340(sp)
    aa24:	b00b883a 	mov	r5,r22
    aa28:	d9800c04 	addi	r6,sp,48
    aa2c:	d9c15115 	stw	r7,1348(sp)
    aa30:	0009e000 	call	9e00 <__sprint_r>
    aa34:	d9c15117 	ldw	r7,1348(sp)
    aa38:	103ebf1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    aa3c:	dc800e17 	ldw	r18,56(sp)
    aa40:	dc400d17 	ldw	r17,52(sp)
    aa44:	dd401904 	addi	r21,sp,100
    aa48:	003e7406 	br	a41c <___vfprintf_internal_r+0x5c4>
    aa4c:	d9014f17 	ldw	r4,1340(sp)
    aa50:	b00b883a 	mov	r5,r22
    aa54:	d9800c04 	addi	r6,sp,48
    aa58:	d9c15115 	stw	r7,1348(sp)
    aa5c:	0009e000 	call	9e00 <__sprint_r>
    aa60:	d9c15117 	ldw	r7,1348(sp)
    aa64:	103eb41e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    aa68:	dd401904 	addi	r21,sp,100
    aa6c:	003d6d06 	br	a024 <___vfprintf_internal_r+0x1cc>
    aa70:	d9014f17 	ldw	r4,1340(sp)
    aa74:	b00b883a 	mov	r5,r22
    aa78:	d9800c04 	addi	r6,sp,48
    aa7c:	d9c15115 	stw	r7,1348(sp)
    aa80:	0009e000 	call	9e00 <__sprint_r>
    aa84:	d9c15117 	ldw	r7,1348(sp)
    aa88:	103eab1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    aa8c:	dc800e17 	ldw	r18,56(sp)
    aa90:	dc400d17 	ldw	r17,52(sp)
    aa94:	dd401904 	addi	r21,sp,100
    aa98:	003e3406 	br	a36c <___vfprintf_internal_r+0x514>
    aa9c:	d9014f17 	ldw	r4,1340(sp)
    aaa0:	b00b883a 	mov	r5,r22
    aaa4:	d9800c04 	addi	r6,sp,48
    aaa8:	d9c15115 	stw	r7,1348(sp)
    aaac:	0009e000 	call	9e00 <__sprint_r>
    aab0:	d9c15117 	ldw	r7,1348(sp)
    aab4:	103ea01e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    aab8:	dc800e17 	ldw	r18,56(sp)
    aabc:	dc400d17 	ldw	r17,52(sp)
    aac0:	dd401904 	addi	r21,sp,100
    aac4:	003e1c06 	br	a338 <___vfprintf_internal_r+0x4e0>
    aac8:	d9014f17 	ldw	r4,1340(sp)
    aacc:	b00b883a 	mov	r5,r22
    aad0:	d9800c04 	addi	r6,sp,48
    aad4:	d9c15115 	stw	r7,1348(sp)
    aad8:	0009e000 	call	9e00 <__sprint_r>
    aadc:	d9c15117 	ldw	r7,1348(sp)
    aae0:	103e951e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    aae4:	dc800e17 	ldw	r18,56(sp)
    aae8:	dc400d17 	ldw	r17,52(sp)
    aaec:	dd401904 	addi	r21,sp,100
    aaf0:	003e0406 	br	a304 <___vfprintf_internal_r+0x4ac>
    aaf4:	d9000517 	ldw	r4,20(sp)
    aaf8:	0102520e 	bge	zero,r4,b444 <___vfprintf_internal_r+0x15ec>
    aafc:	d9814717 	ldw	r6,1308(sp)
    ab00:	21807a16 	blt	r4,r6,acec <___vfprintf_internal_r+0xe94>
    ab04:	d8814117 	ldw	r2,1284(sp)
    ab08:	91a5883a 	add	r18,r18,r6
    ab0c:	8c400044 	addi	r17,r17,1
    ab10:	a8800015 	stw	r2,0(r21)
    ab14:	008001c4 	movi	r2,7
    ab18:	a9800115 	stw	r6,4(r21)
    ab1c:	dc800e15 	stw	r18,56(sp)
    ab20:	dc400d15 	stw	r17,52(sp)
    ab24:	1442f616 	blt	r2,r17,b700 <___vfprintf_internal_r+0x18a8>
    ab28:	a8c00204 	addi	r3,r21,8
    ab2c:	d9414717 	ldw	r5,1308(sp)
    ab30:	2161c83a 	sub	r16,r4,r5
    ab34:	043f9d0e 	bge	zero,r16,a9ac <___vfprintf_internal_r+0xb54>
    ab38:	00800404 	movi	r2,16
    ab3c:	1402130e 	bge	r2,r16,b38c <___vfprintf_internal_r+0x1534>
    ab40:	dc400d17 	ldw	r17,52(sp)
    ab44:	1027883a 	mov	r19,r2
    ab48:	07020034 	movhi	fp,2048
    ab4c:	e7016b84 	addi	fp,fp,1454
    ab50:	050001c4 	movi	r20,7
    ab54:	00000306 	br	ab64 <___vfprintf_internal_r+0xd0c>
    ab58:	18c00204 	addi	r3,r3,8
    ab5c:	843ffc04 	addi	r16,r16,-16
    ab60:	9c020d0e 	bge	r19,r16,b398 <___vfprintf_internal_r+0x1540>
    ab64:	94800404 	addi	r18,r18,16
    ab68:	8c400044 	addi	r17,r17,1
    ab6c:	1f000015 	stw	fp,0(r3)
    ab70:	1cc00115 	stw	r19,4(r3)
    ab74:	dc800e15 	stw	r18,56(sp)
    ab78:	dc400d15 	stw	r17,52(sp)
    ab7c:	a47ff60e 	bge	r20,r17,ab58 <___vfprintf_internal_r+0xd00>
    ab80:	d9014f17 	ldw	r4,1340(sp)
    ab84:	b00b883a 	mov	r5,r22
    ab88:	d9800c04 	addi	r6,sp,48
    ab8c:	0009e000 	call	9e00 <__sprint_r>
    ab90:	103e691e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    ab94:	dc800e17 	ldw	r18,56(sp)
    ab98:	dc400d17 	ldw	r17,52(sp)
    ab9c:	d8c01904 	addi	r3,sp,100
    aba0:	003fee06 	br	ab5c <___vfprintf_internal_r+0xd04>
    aba4:	d8814717 	ldw	r2,1308(sp)
    aba8:	143fffc4 	addi	r16,r2,-1
    abac:	043e970e 	bge	zero,r16,a60c <___vfprintf_internal_r+0x7b4>
    abb0:	00800404 	movi	r2,16
    abb4:	1400180e 	bge	r2,r16,ac18 <___vfprintf_internal_r+0xdc0>
    abb8:	1029883a 	mov	r20,r2
    abbc:	07020034 	movhi	fp,2048
    abc0:	e7016b84 	addi	fp,fp,1454
    abc4:	054001c4 	movi	r21,7
    abc8:	00000306 	br	abd8 <___vfprintf_internal_r+0xd80>
    abcc:	9cc00204 	addi	r19,r19,8
    abd0:	843ffc04 	addi	r16,r16,-16
    abd4:	a400120e 	bge	r20,r16,ac20 <___vfprintf_internal_r+0xdc8>
    abd8:	94800404 	addi	r18,r18,16
    abdc:	8c400044 	addi	r17,r17,1
    abe0:	9f000015 	stw	fp,0(r19)
    abe4:	9d000115 	stw	r20,4(r19)
    abe8:	dc800e15 	stw	r18,56(sp)
    abec:	dc400d15 	stw	r17,52(sp)
    abf0:	ac7ff60e 	bge	r21,r17,abcc <___vfprintf_internal_r+0xd74>
    abf4:	d9014f17 	ldw	r4,1340(sp)
    abf8:	b00b883a 	mov	r5,r22
    abfc:	d9800c04 	addi	r6,sp,48
    ac00:	0009e000 	call	9e00 <__sprint_r>
    ac04:	103e4c1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    ac08:	dc800e17 	ldw	r18,56(sp)
    ac0c:	dc400d17 	ldw	r17,52(sp)
    ac10:	dcc01904 	addi	r19,sp,100
    ac14:	003fee06 	br	abd0 <___vfprintf_internal_r+0xd78>
    ac18:	07020034 	movhi	fp,2048
    ac1c:	e7016b84 	addi	fp,fp,1454
    ac20:	9425883a 	add	r18,r18,r16
    ac24:	8c400044 	addi	r17,r17,1
    ac28:	008001c4 	movi	r2,7
    ac2c:	9f000015 	stw	fp,0(r19)
    ac30:	9c000115 	stw	r16,4(r19)
    ac34:	dc800e15 	stw	r18,56(sp)
    ac38:	dc400d15 	stw	r17,52(sp)
    ac3c:	147e720e 	bge	r2,r17,a608 <___vfprintf_internal_r+0x7b0>
    ac40:	d9014f17 	ldw	r4,1340(sp)
    ac44:	b00b883a 	mov	r5,r22
    ac48:	d9800c04 	addi	r6,sp,48
    ac4c:	0009e000 	call	9e00 <__sprint_r>
    ac50:	103e391e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    ac54:	dc800e17 	ldw	r18,56(sp)
    ac58:	dc400d17 	ldw	r17,52(sp)
    ac5c:	dcc01904 	addi	r19,sp,100
    ac60:	003e6a06 	br	a60c <___vfprintf_internal_r+0x7b4>
    ac64:	d9014f17 	ldw	r4,1340(sp)
    ac68:	b00b883a 	mov	r5,r22
    ac6c:	d9800c04 	addi	r6,sp,48
    ac70:	d9c15115 	stw	r7,1348(sp)
    ac74:	0009e000 	call	9e00 <__sprint_r>
    ac78:	d9c15117 	ldw	r7,1348(sp)
    ac7c:	103e2e1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    ac80:	dc800e17 	ldw	r18,56(sp)
    ac84:	dc400d17 	ldw	r17,52(sp)
    ac88:	dd401904 	addi	r21,sp,100
    ac8c:	003dba06 	br	a378 <___vfprintf_internal_r+0x520>
    ac90:	d9014f17 	ldw	r4,1340(sp)
    ac94:	b00b883a 	mov	r5,r22
    ac98:	d9800c04 	addi	r6,sp,48
    ac9c:	0009e000 	call	9e00 <__sprint_r>
    aca0:	103e251e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    aca4:	dc800e17 	ldw	r18,56(sp)
    aca8:	dc400d17 	ldw	r17,52(sp)
    acac:	dcc01904 	addi	r19,sp,100
    acb0:	003e4206 	br	a5bc <___vfprintf_internal_r+0x764>
    acb4:	d9014f17 	ldw	r4,1340(sp)
    acb8:	b00b883a 	mov	r5,r22
    acbc:	d9800c04 	addi	r6,sp,48
    acc0:	0009e000 	call	9e00 <__sprint_r>
    acc4:	103e1c1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    acc8:	dc800e17 	ldw	r18,56(sp)
    accc:	dc400d17 	ldw	r17,52(sp)
    acd0:	d8c01904 	addi	r3,sp,100
    acd4:	003e2e06 	br	a590 <___vfprintf_internal_r+0x738>
    acd8:	d9414c17 	ldw	r5,1328(sp)
    acdc:	2880004c 	andi	r2,r5,1
    ace0:	1005003a 	cmpeq	r2,r2,zero
    ace4:	103dda1e 	bne	r2,zero,a450 <___vfprintf_internal_r+0x5f8>
    ace8:	003e9f06 	br	a768 <___vfprintf_internal_r+0x910>
    acec:	d8c14117 	ldw	r3,1284(sp)
    acf0:	9125883a 	add	r18,r18,r4
    acf4:	8c400044 	addi	r17,r17,1
    acf8:	008001c4 	movi	r2,7
    acfc:	a8c00015 	stw	r3,0(r21)
    ad00:	a9000115 	stw	r4,4(r21)
    ad04:	dc800e15 	stw	r18,56(sp)
    ad08:	dc400d15 	stw	r17,52(sp)
    ad0c:	14426616 	blt	r2,r17,b6a8 <___vfprintf_internal_r+0x1850>
    ad10:	a8c00204 	addi	r3,r21,8
    ad14:	d9414917 	ldw	r5,1316(sp)
    ad18:	00800044 	movi	r2,1
    ad1c:	94800044 	addi	r18,r18,1
    ad20:	8c400044 	addi	r17,r17,1
    ad24:	18800115 	stw	r2,4(r3)
    ad28:	008001c4 	movi	r2,7
    ad2c:	19400015 	stw	r5,0(r3)
    ad30:	dc800e15 	stw	r18,56(sp)
    ad34:	dc400d15 	stw	r17,52(sp)
    ad38:	2021883a 	mov	r16,r4
    ad3c:	14425016 	blt	r2,r17,b680 <___vfprintf_internal_r+0x1828>
    ad40:	19400204 	addi	r5,r3,8
    ad44:	d9814717 	ldw	r6,1308(sp)
    ad48:	8c400044 	addi	r17,r17,1
    ad4c:	dc400d15 	stw	r17,52(sp)
    ad50:	3107c83a 	sub	r3,r6,r4
    ad54:	d9014117 	ldw	r4,1284(sp)
    ad58:	90e5883a 	add	r18,r18,r3
    ad5c:	28c00115 	stw	r3,4(r5)
    ad60:	8105883a 	add	r2,r16,r4
    ad64:	28800015 	stw	r2,0(r5)
    ad68:	008001c4 	movi	r2,7
    ad6c:	dc800e15 	stw	r18,56(sp)
    ad70:	147f1d16 	blt	r2,r17,a9e8 <___vfprintf_internal_r+0xb90>
    ad74:	28c00204 	addi	r3,r5,8
    ad78:	003db506 	br	a450 <___vfprintf_internal_r+0x5f8>
    ad7c:	3c000017 	ldw	r16,0(r7)
    ad80:	3c400117 	ldw	r17,4(r7)
    ad84:	39800204 	addi	r6,r7,8
    ad88:	01000044 	movi	r4,1
    ad8c:	d9814015 	stw	r6,1280(sp)
    ad90:	d8000405 	stb	zero,16(sp)
    ad94:	003ebe06 	br	a890 <___vfprintf_internal_r+0xa38>
    ad98:	3c000017 	ldw	r16,0(r7)
    ad9c:	3c400117 	ldw	r17,4(r7)
    ada0:	38800204 	addi	r2,r7,8
    ada4:	d8814015 	stw	r2,1280(sp)
    ada8:	003eb706 	br	a888 <___vfprintf_internal_r+0xa30>
    adac:	3c000017 	ldw	r16,0(r7)
    adb0:	3c400117 	ldw	r17,4(r7)
    adb4:	39000204 	addi	r4,r7,8
    adb8:	d9014015 	stw	r4,1280(sp)
    adbc:	0009883a 	mov	r4,zero
    adc0:	d8000405 	stb	zero,16(sp)
    adc4:	003eb206 	br	a890 <___vfprintf_internal_r+0xa38>
    adc8:	38c00017 	ldw	r3,0(r7)
    adcc:	39c00104 	addi	r7,r7,4
    add0:	d8c14a15 	stw	r3,1320(sp)
    add4:	1800d10e 	bge	r3,zero,b11c <___vfprintf_internal_r+0x12c4>
    add8:	00c7c83a 	sub	r3,zero,r3
    addc:	d8c14a15 	stw	r3,1320(sp)
    ade0:	d9014c17 	ldw	r4,1328(sp)
    ade4:	b8c00007 	ldb	r3,0(r23)
    ade8:	21000114 	ori	r4,r4,4
    adec:	d9014c15 	stw	r4,1328(sp)
    adf0:	003c9806 	br	a054 <___vfprintf_internal_r+0x1fc>
    adf4:	d9814c17 	ldw	r6,1328(sp)
    adf8:	3080080c 	andi	r2,r6,32
    adfc:	1001f026 	beq	r2,zero,b5c0 <___vfprintf_internal_r+0x1768>
    ae00:	d9014b17 	ldw	r4,1324(sp)
    ae04:	38800017 	ldw	r2,0(r7)
    ae08:	39c00104 	addi	r7,r7,4
    ae0c:	d9c14015 	stw	r7,1280(sp)
    ae10:	2007d7fa 	srai	r3,r4,31
    ae14:	d9c14017 	ldw	r7,1280(sp)
    ae18:	11000015 	stw	r4,0(r2)
    ae1c:	10c00115 	stw	r3,4(r2)
    ae20:	003c6906 	br	9fc8 <___vfprintf_internal_r+0x170>
    ae24:	b8c00007 	ldb	r3,0(r23)
    ae28:	00801b04 	movi	r2,108
    ae2c:	18824f26 	beq	r3,r2,b76c <___vfprintf_internal_r+0x1914>
    ae30:	d9414c17 	ldw	r5,1328(sp)
    ae34:	29400414 	ori	r5,r5,16
    ae38:	d9414c15 	stw	r5,1328(sp)
    ae3c:	003c8506 	br	a054 <___vfprintf_internal_r+0x1fc>
    ae40:	d9814c17 	ldw	r6,1328(sp)
    ae44:	b8c00007 	ldb	r3,0(r23)
    ae48:	31800814 	ori	r6,r6,32
    ae4c:	d9814c15 	stw	r6,1328(sp)
    ae50:	003c8006 	br	a054 <___vfprintf_internal_r+0x1fc>
    ae54:	d8814c17 	ldw	r2,1328(sp)
    ae58:	3c000017 	ldw	r16,0(r7)
    ae5c:	00c01e04 	movi	r3,120
    ae60:	10800094 	ori	r2,r2,2
    ae64:	d8814c15 	stw	r2,1328(sp)
    ae68:	39c00104 	addi	r7,r7,4
    ae6c:	01420034 	movhi	r5,2048
    ae70:	29415404 	addi	r5,r5,1360
    ae74:	00800c04 	movi	r2,48
    ae78:	0023883a 	mov	r17,zero
    ae7c:	01000084 	movi	r4,2
    ae80:	d9c14015 	stw	r7,1280(sp)
    ae84:	d8c14d15 	stw	r3,1332(sp)
    ae88:	d9414415 	stw	r5,1296(sp)
    ae8c:	d8800445 	stb	r2,17(sp)
    ae90:	d8c00485 	stb	r3,18(sp)
    ae94:	d8000405 	stb	zero,16(sp)
    ae98:	003e7d06 	br	a890 <___vfprintf_internal_r+0xa38>
    ae9c:	d8814c17 	ldw	r2,1328(sp)
    aea0:	b8c00007 	ldb	r3,0(r23)
    aea4:	10801014 	ori	r2,r2,64
    aea8:	d8814c15 	stw	r2,1328(sp)
    aeac:	003c6906 	br	a054 <___vfprintf_internal_r+0x1fc>
    aeb0:	d9414c17 	ldw	r5,1328(sp)
    aeb4:	2880020c 	andi	r2,r5,8
    aeb8:	1001df26 	beq	r2,zero,b638 <___vfprintf_internal_r+0x17e0>
    aebc:	39800017 	ldw	r6,0(r7)
    aec0:	38800204 	addi	r2,r7,8
    aec4:	d8814015 	stw	r2,1280(sp)
    aec8:	d9814215 	stw	r6,1288(sp)
    aecc:	39c00117 	ldw	r7,4(r7)
    aed0:	d9c14315 	stw	r7,1292(sp)
    aed4:	d9014217 	ldw	r4,1288(sp)
    aed8:	d9414317 	ldw	r5,1292(sp)
    aedc:	00114340 	call	11434 <__isinfd>
    aee0:	10021726 	beq	r2,zero,b740 <___vfprintf_internal_r+0x18e8>
    aee4:	d9014217 	ldw	r4,1288(sp)
    aee8:	d9414317 	ldw	r5,1292(sp)
    aeec:	000d883a 	mov	r6,zero
    aef0:	000f883a 	mov	r7,zero
    aef4:	0012ba40 	call	12ba4 <__ltdf2>
    aef8:	1002ca16 	blt	r2,zero,ba24 <___vfprintf_internal_r+0x1bcc>
    aefc:	d9414d17 	ldw	r5,1332(sp)
    af00:	008011c4 	movi	r2,71
    af04:	11420a16 	blt	r2,r5,b730 <___vfprintf_internal_r+0x18d8>
    af08:	01820034 	movhi	r6,2048
    af0c:	31815904 	addi	r6,r6,1380
    af10:	d9814115 	stw	r6,1284(sp)
    af14:	d9014c17 	ldw	r4,1328(sp)
    af18:	00c000c4 	movi	r3,3
    af1c:	00bfdfc4 	movi	r2,-129
    af20:	2088703a 	and	r4,r4,r2
    af24:	180f883a 	mov	r7,r3
    af28:	d8c14515 	stw	r3,1300(sp)
    af2c:	d9014c15 	stw	r4,1328(sp)
    af30:	d8014615 	stw	zero,1304(sp)
    af34:	003e6a06 	br	a8e0 <___vfprintf_internal_r+0xa88>
    af38:	38800017 	ldw	r2,0(r7)
    af3c:	00c00044 	movi	r3,1
    af40:	39c00104 	addi	r7,r7,4
    af44:	d9c14015 	stw	r7,1280(sp)
    af48:	d9000f04 	addi	r4,sp,60
    af4c:	180f883a 	mov	r7,r3
    af50:	d8c14515 	stw	r3,1300(sp)
    af54:	d9014115 	stw	r4,1284(sp)
    af58:	d8800f05 	stb	r2,60(sp)
    af5c:	d8000405 	stb	zero,16(sp)
    af60:	003cac06 	br	a214 <___vfprintf_internal_r+0x3bc>
    af64:	01420034 	movhi	r5,2048
    af68:	29415f04 	addi	r5,r5,1404
    af6c:	d9414415 	stw	r5,1296(sp)
    af70:	d9814c17 	ldw	r6,1328(sp)
    af74:	3080080c 	andi	r2,r6,32
    af78:	1000f926 	beq	r2,zero,b360 <___vfprintf_internal_r+0x1508>
    af7c:	3c000017 	ldw	r16,0(r7)
    af80:	3c400117 	ldw	r17,4(r7)
    af84:	38800204 	addi	r2,r7,8
    af88:	d8814015 	stw	r2,1280(sp)
    af8c:	d9414c17 	ldw	r5,1328(sp)
    af90:	2880004c 	andi	r2,r5,1
    af94:	1005003a 	cmpeq	r2,r2,zero
    af98:	1000b31e 	bne	r2,zero,b268 <___vfprintf_internal_r+0x1410>
    af9c:	8444b03a 	or	r2,r16,r17
    afa0:	1000b126 	beq	r2,zero,b268 <___vfprintf_internal_r+0x1410>
    afa4:	d9814d17 	ldw	r6,1332(sp)
    afa8:	29400094 	ori	r5,r5,2
    afac:	00800c04 	movi	r2,48
    afb0:	01000084 	movi	r4,2
    afb4:	d9414c15 	stw	r5,1328(sp)
    afb8:	d8800445 	stb	r2,17(sp)
    afbc:	d9800485 	stb	r6,18(sp)
    afc0:	d8000405 	stb	zero,16(sp)
    afc4:	003e3206 	br	a890 <___vfprintf_internal_r+0xa38>
    afc8:	01820034 	movhi	r6,2048
    afcc:	31815404 	addi	r6,r6,1360
    afd0:	d9814415 	stw	r6,1296(sp)
    afd4:	003fe606 	br	af70 <___vfprintf_internal_r+0x1118>
    afd8:	00800ac4 	movi	r2,43
    afdc:	d8800405 	stb	r2,16(sp)
    afe0:	b8c00007 	ldb	r3,0(r23)
    afe4:	003c1b06 	br	a054 <___vfprintf_internal_r+0x1fc>
    afe8:	d8814c17 	ldw	r2,1328(sp)
    afec:	b8c00007 	ldb	r3,0(r23)
    aff0:	10800054 	ori	r2,r2,1
    aff4:	d8814c15 	stw	r2,1328(sp)
    aff8:	003c1606 	br	a054 <___vfprintf_internal_r+0x1fc>
    affc:	d8800407 	ldb	r2,16(sp)
    b000:	1000461e 	bne	r2,zero,b11c <___vfprintf_internal_r+0x12c4>
    b004:	00800804 	movi	r2,32
    b008:	d8800405 	stb	r2,16(sp)
    b00c:	b8c00007 	ldb	r3,0(r23)
    b010:	003c1006 	br	a054 <___vfprintf_internal_r+0x1fc>
    b014:	d9814c17 	ldw	r6,1328(sp)
    b018:	b8c00007 	ldb	r3,0(r23)
    b01c:	31800214 	ori	r6,r6,8
    b020:	d9814c15 	stw	r6,1328(sp)
    b024:	003c0b06 	br	a054 <___vfprintf_internal_r+0x1fc>
    b028:	0007883a 	mov	r3,zero
    b02c:	01000244 	movi	r4,9
    b030:	188002a4 	muli	r2,r3,10
    b034:	b8c00007 	ldb	r3,0(r23)
    b038:	d9814d17 	ldw	r6,1332(sp)
    b03c:	bdc00044 	addi	r23,r23,1
    b040:	d8c14d15 	stw	r3,1332(sp)
    b044:	d9414d17 	ldw	r5,1332(sp)
    b048:	3085883a 	add	r2,r6,r2
    b04c:	10fff404 	addi	r3,r2,-48
    b050:	28bff404 	addi	r2,r5,-48
    b054:	20bff62e 	bgeu	r4,r2,b030 <___vfprintf_internal_r+0x11d8>
    b058:	d8c14a15 	stw	r3,1320(sp)
    b05c:	003bff06 	br	a05c <___vfprintf_internal_r+0x204>
    b060:	d9414c17 	ldw	r5,1328(sp)
    b064:	b8c00007 	ldb	r3,0(r23)
    b068:	29402014 	ori	r5,r5,128
    b06c:	d9414c15 	stw	r5,1328(sp)
    b070:	003bf806 	br	a054 <___vfprintf_internal_r+0x1fc>
    b074:	b8c00007 	ldb	r3,0(r23)
    b078:	00800a84 	movi	r2,42
    b07c:	bdc00044 	addi	r23,r23,1
    b080:	18831526 	beq	r3,r2,bcd8 <___vfprintf_internal_r+0x1e80>
    b084:	d8c14d15 	stw	r3,1332(sp)
    b088:	18bff404 	addi	r2,r3,-48
    b08c:	00c00244 	movi	r3,9
    b090:	18827836 	bltu	r3,r2,ba74 <___vfprintf_internal_r+0x1c1c>
    b094:	000d883a 	mov	r6,zero
    b098:	308002a4 	muli	r2,r6,10
    b09c:	b9800007 	ldb	r6,0(r23)
    b0a0:	d9414d17 	ldw	r5,1332(sp)
    b0a4:	bdc00044 	addi	r23,r23,1
    b0a8:	d9814d15 	stw	r6,1332(sp)
    b0ac:	d9014d17 	ldw	r4,1332(sp)
    b0b0:	1145883a 	add	r2,r2,r5
    b0b4:	11bff404 	addi	r6,r2,-48
    b0b8:	20bff404 	addi	r2,r4,-48
    b0bc:	18bff62e 	bgeu	r3,r2,b098 <___vfprintf_internal_r+0x1240>
    b0c0:	3027883a 	mov	r19,r6
    b0c4:	303be50e 	bge	r6,zero,a05c <___vfprintf_internal_r+0x204>
    b0c8:	04ffffc4 	movi	r19,-1
    b0cc:	003be306 	br	a05c <___vfprintf_internal_r+0x204>
    b0d0:	d8000405 	stb	zero,16(sp)
    b0d4:	39800017 	ldw	r6,0(r7)
    b0d8:	39c00104 	addi	r7,r7,4
    b0dc:	d9c14015 	stw	r7,1280(sp)
    b0e0:	d9814115 	stw	r6,1284(sp)
    b0e4:	3001c926 	beq	r6,zero,b80c <___vfprintf_internal_r+0x19b4>
    b0e8:	98000e16 	blt	r19,zero,b124 <___vfprintf_internal_r+0x12cc>
    b0ec:	d9014117 	ldw	r4,1284(sp)
    b0f0:	000b883a 	mov	r5,zero
    b0f4:	980d883a 	mov	r6,r19
    b0f8:	000fa9c0 	call	fa9c <memchr>
    b0fc:	10025926 	beq	r2,zero,ba64 <___vfprintf_internal_r+0x1c0c>
    b100:	d8c14117 	ldw	r3,1284(sp)
    b104:	10cfc83a 	sub	r7,r2,r3
    b108:	99c19e16 	blt	r19,r7,b784 <___vfprintf_internal_r+0x192c>
    b10c:	d9c14515 	stw	r7,1300(sp)
    b110:	38000916 	blt	r7,zero,b138 <___vfprintf_internal_r+0x12e0>
    b114:	d8014615 	stw	zero,1304(sp)
    b118:	003df106 	br	a8e0 <___vfprintf_internal_r+0xa88>
    b11c:	b8c00007 	ldb	r3,0(r23)
    b120:	003bcc06 	br	a054 <___vfprintf_internal_r+0x1fc>
    b124:	d9014117 	ldw	r4,1284(sp)
    b128:	00086700 	call	8670 <strlen>
    b12c:	d8814515 	stw	r2,1300(sp)
    b130:	100f883a 	mov	r7,r2
    b134:	103ff70e 	bge	r2,zero,b114 <___vfprintf_internal_r+0x12bc>
    b138:	d8014515 	stw	zero,1300(sp)
    b13c:	d8014615 	stw	zero,1304(sp)
    b140:	003de706 	br	a8e0 <___vfprintf_internal_r+0xa88>
    b144:	20c03fcc 	andi	r3,r4,255
    b148:	00800044 	movi	r2,1
    b14c:	18802d26 	beq	r3,r2,b204 <___vfprintf_internal_r+0x13ac>
    b150:	18800e36 	bltu	r3,r2,b18c <___vfprintf_internal_r+0x1334>
    b154:	00800084 	movi	r2,2
    b158:	1880fa26 	beq	r3,r2,b544 <___vfprintf_internal_r+0x16ec>
    b15c:	01020034 	movhi	r4,2048
    b160:	21016404 	addi	r4,r4,1424
    b164:	00086700 	call	8670 <strlen>
    b168:	100f883a 	mov	r7,r2
    b16c:	dcc14515 	stw	r19,1300(sp)
    b170:	9880010e 	bge	r19,r2,b178 <___vfprintf_internal_r+0x1320>
    b174:	d8814515 	stw	r2,1300(sp)
    b178:	00820034 	movhi	r2,2048
    b17c:	10816404 	addi	r2,r2,1424
    b180:	dcc14615 	stw	r19,1304(sp)
    b184:	d8814115 	stw	r2,1284(sp)
    b188:	003dd506 	br	a8e0 <___vfprintf_internal_r+0xa88>
    b18c:	d9401904 	addi	r5,sp,100
    b190:	dd000f04 	addi	r20,sp,60
    b194:	d9414115 	stw	r5,1284(sp)
    b198:	880a977a 	slli	r5,r17,29
    b19c:	d9814117 	ldw	r6,1284(sp)
    b1a0:	8004d0fa 	srli	r2,r16,3
    b1a4:	8806d0fa 	srli	r3,r17,3
    b1a8:	810001cc 	andi	r4,r16,7
    b1ac:	2884b03a 	or	r2,r5,r2
    b1b0:	31bfffc4 	addi	r6,r6,-1
    b1b4:	21000c04 	addi	r4,r4,48
    b1b8:	d9814115 	stw	r6,1284(sp)
    b1bc:	10cab03a 	or	r5,r2,r3
    b1c0:	31000005 	stb	r4,0(r6)
    b1c4:	1021883a 	mov	r16,r2
    b1c8:	1823883a 	mov	r17,r3
    b1cc:	283ff21e 	bne	r5,zero,b198 <___vfprintf_internal_r+0x1340>
    b1d0:	d8c14c17 	ldw	r3,1328(sp)
    b1d4:	1880004c 	andi	r2,r3,1
    b1d8:	1005003a 	cmpeq	r2,r2,zero
    b1dc:	103db91e 	bne	r2,zero,a8c4 <___vfprintf_internal_r+0xa6c>
    b1e0:	20803fcc 	andi	r2,r4,255
    b1e4:	1080201c 	xori	r2,r2,128
    b1e8:	10bfe004 	addi	r2,r2,-128
    b1ec:	00c00c04 	movi	r3,48
    b1f0:	10fdb426 	beq	r2,r3,a8c4 <___vfprintf_internal_r+0xa6c>
    b1f4:	31bfffc4 	addi	r6,r6,-1
    b1f8:	d9814115 	stw	r6,1284(sp)
    b1fc:	30c00005 	stb	r3,0(r6)
    b200:	003db006 	br	a8c4 <___vfprintf_internal_r+0xa6c>
    b204:	88800068 	cmpgeui	r2,r17,1
    b208:	10002c1e 	bne	r2,zero,b2bc <___vfprintf_internal_r+0x1464>
    b20c:	8800021e 	bne	r17,zero,b218 <___vfprintf_internal_r+0x13c0>
    b210:	00800244 	movi	r2,9
    b214:	14002936 	bltu	r2,r16,b2bc <___vfprintf_internal_r+0x1464>
    b218:	d90018c4 	addi	r4,sp,99
    b21c:	dd000f04 	addi	r20,sp,60
    b220:	d9014115 	stw	r4,1284(sp)
    b224:	d9014117 	ldw	r4,1284(sp)
    b228:	80800c04 	addi	r2,r16,48
    b22c:	20800005 	stb	r2,0(r4)
    b230:	003da406 	br	a8c4 <___vfprintf_internal_r+0xa6c>
    b234:	dc400d17 	ldw	r17,52(sp)
    b238:	07020034 	movhi	fp,2048
    b23c:	e7016b84 	addi	fp,fp,1454
    b240:	9425883a 	add	r18,r18,r16
    b244:	8c400044 	addi	r17,r17,1
    b248:	008001c4 	movi	r2,7
    b24c:	1f000015 	stw	fp,0(r3)
    b250:	1c000115 	stw	r16,4(r3)
    b254:	dc800e15 	stw	r18,56(sp)
    b258:	dc400d15 	stw	r17,52(sp)
    b25c:	147de216 	blt	r2,r17,a9e8 <___vfprintf_internal_r+0xb90>
    b260:	18c00204 	addi	r3,r3,8
    b264:	003c7a06 	br	a450 <___vfprintf_internal_r+0x5f8>
    b268:	01000084 	movi	r4,2
    b26c:	d8000405 	stb	zero,16(sp)
    b270:	003d8706 	br	a890 <___vfprintf_internal_r+0xa38>
    b274:	d9814c17 	ldw	r6,1328(sp)
    b278:	30c4703a 	and	r2,r6,r3
    b27c:	1005003a 	cmpeq	r2,r2,zero
    b280:	103cb926 	beq	r2,zero,a568 <___vfprintf_internal_r+0x710>
    b284:	d9014117 	ldw	r4,1284(sp)
    b288:	94800044 	addi	r18,r18,1
    b28c:	8c400044 	addi	r17,r17,1
    b290:	008001c4 	movi	r2,7
    b294:	a9000015 	stw	r4,0(r21)
    b298:	a8c00115 	stw	r3,4(r21)
    b29c:	dc800e15 	stw	r18,56(sp)
    b2a0:	dc400d15 	stw	r17,52(sp)
    b2a4:	147e6616 	blt	r2,r17,ac40 <___vfprintf_internal_r+0xde8>
    b2a8:	acc00204 	addi	r19,r21,8
    b2ac:	003cd706 	br	a60c <___vfprintf_internal_r+0x7b4>
    b2b0:	07020034 	movhi	fp,2048
    b2b4:	e7016b84 	addi	fp,fp,1454
    b2b8:	003c4f06 	br	a3f8 <___vfprintf_internal_r+0x5a0>
    b2bc:	dd000f04 	addi	r20,sp,60
    b2c0:	dc801904 	addi	r18,sp,100
    b2c4:	8009883a 	mov	r4,r16
    b2c8:	880b883a 	mov	r5,r17
    b2cc:	01800284 	movi	r6,10
    b2d0:	000f883a 	mov	r7,zero
    b2d4:	001237c0 	call	1237c <__umoddi3>
    b2d8:	12000c04 	addi	r8,r2,48
    b2dc:	94bfffc4 	addi	r18,r18,-1
    b2e0:	8009883a 	mov	r4,r16
    b2e4:	880b883a 	mov	r5,r17
    b2e8:	01800284 	movi	r6,10
    b2ec:	000f883a 	mov	r7,zero
    b2f0:	92000005 	stb	r8,0(r18)
    b2f4:	0011da00 	call	11da0 <__udivdi3>
    b2f8:	1009883a 	mov	r4,r2
    b2fc:	1021883a 	mov	r16,r2
    b300:	18800068 	cmpgeui	r2,r3,1
    b304:	1823883a 	mov	r17,r3
    b308:	103fee1e 	bne	r2,zero,b2c4 <___vfprintf_internal_r+0x146c>
    b30c:	1800021e 	bne	r3,zero,b318 <___vfprintf_internal_r+0x14c0>
    b310:	00800244 	movi	r2,9
    b314:	113feb36 	bltu	r2,r4,b2c4 <___vfprintf_internal_r+0x146c>
    b318:	94bfffc4 	addi	r18,r18,-1
    b31c:	dc814115 	stw	r18,1284(sp)
    b320:	003fc006 	br	b224 <___vfprintf_internal_r+0x13cc>
    b324:	d9014c17 	ldw	r4,1328(sp)
    b328:	2080004c 	andi	r2,r4,1
    b32c:	10009a1e 	bne	r2,zero,b598 <___vfprintf_internal_r+0x1740>
    b330:	d9401904 	addi	r5,sp,100
    b334:	dd000f04 	addi	r20,sp,60
    b338:	d9414115 	stw	r5,1284(sp)
    b33c:	003d6106 	br	a8c4 <___vfprintf_internal_r+0xa6c>
    b340:	d9014f17 	ldw	r4,1340(sp)
    b344:	b00b883a 	mov	r5,r22
    b348:	d9800c04 	addi	r6,sp,48
    b34c:	0009e000 	call	9e00 <__sprint_r>
    b350:	103c791e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b354:	dc800e17 	ldw	r18,56(sp)
    b358:	d8c01904 	addi	r3,sp,100
    b35c:	003cff06 	br	a75c <___vfprintf_internal_r+0x904>
    b360:	d8c14c17 	ldw	r3,1328(sp)
    b364:	1880040c 	andi	r2,r3,16
    b368:	1000711e 	bne	r2,zero,b530 <___vfprintf_internal_r+0x16d8>
    b36c:	d9014c17 	ldw	r4,1328(sp)
    b370:	2080100c 	andi	r2,r4,64
    b374:	10006e26 	beq	r2,zero,b530 <___vfprintf_internal_r+0x16d8>
    b378:	3c00000b 	ldhu	r16,0(r7)
    b37c:	0023883a 	mov	r17,zero
    b380:	39c00104 	addi	r7,r7,4
    b384:	d9c14015 	stw	r7,1280(sp)
    b388:	003f0006 	br	af8c <___vfprintf_internal_r+0x1134>
    b38c:	dc400d17 	ldw	r17,52(sp)
    b390:	07020034 	movhi	fp,2048
    b394:	e7016b84 	addi	fp,fp,1454
    b398:	9425883a 	add	r18,r18,r16
    b39c:	8c400044 	addi	r17,r17,1
    b3a0:	008001c4 	movi	r2,7
    b3a4:	1f000015 	stw	fp,0(r3)
    b3a8:	1c000115 	stw	r16,4(r3)
    b3ac:	dc800e15 	stw	r18,56(sp)
    b3b0:	dc400d15 	stw	r17,52(sp)
    b3b4:	147d7616 	blt	r2,r17,a990 <___vfprintf_internal_r+0xb38>
    b3b8:	18c00204 	addi	r3,r3,8
    b3bc:	003d7b06 	br	a9ac <___vfprintf_internal_r+0xb54>
    b3c0:	dc800e17 	ldw	r18,56(sp)
    b3c4:	dc400d17 	ldw	r17,52(sp)
    b3c8:	07020034 	movhi	fp,2048
    b3cc:	e7016f84 	addi	fp,fp,1470
    b3d0:	003bc006 	br	a2d4 <___vfprintf_internal_r+0x47c>
    b3d4:	d9014f17 	ldw	r4,1340(sp)
    b3d8:	b00b883a 	mov	r5,r22
    b3dc:	d9800c04 	addi	r6,sp,48
    b3e0:	0009e000 	call	9e00 <__sprint_r>
    b3e4:	103c541e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b3e8:	dc800e17 	ldw	r18,56(sp)
    b3ec:	d8c01904 	addi	r3,sp,100
    b3f0:	003ce906 	br	a798 <___vfprintf_internal_r+0x940>
    b3f4:	3c000017 	ldw	r16,0(r7)
    b3f8:	0009883a 	mov	r4,zero
    b3fc:	39c00104 	addi	r7,r7,4
    b400:	0023883a 	mov	r17,zero
    b404:	d9c14015 	stw	r7,1280(sp)
    b408:	d8000405 	stb	zero,16(sp)
    b40c:	003d2006 	br	a890 <___vfprintf_internal_r+0xa38>
    b410:	38800017 	ldw	r2,0(r7)
    b414:	39c00104 	addi	r7,r7,4
    b418:	d9c14015 	stw	r7,1280(sp)
    b41c:	1023d7fa 	srai	r17,r2,31
    b420:	1021883a 	mov	r16,r2
    b424:	003d1806 	br	a888 <___vfprintf_internal_r+0xa30>
    b428:	3c000017 	ldw	r16,0(r7)
    b42c:	01000044 	movi	r4,1
    b430:	39c00104 	addi	r7,r7,4
    b434:	0023883a 	mov	r17,zero
    b438:	d9c14015 	stw	r7,1280(sp)
    b43c:	d8000405 	stb	zero,16(sp)
    b440:	003d1306 	br	a890 <___vfprintf_internal_r+0xa38>
    b444:	00820034 	movhi	r2,2048
    b448:	10816b04 	addi	r2,r2,1452
    b44c:	94800044 	addi	r18,r18,1
    b450:	8c400044 	addi	r17,r17,1
    b454:	a8800015 	stw	r2,0(r21)
    b458:	00c00044 	movi	r3,1
    b45c:	008001c4 	movi	r2,7
    b460:	a8c00115 	stw	r3,4(r21)
    b464:	dc800e15 	stw	r18,56(sp)
    b468:	dc400d15 	stw	r17,52(sp)
    b46c:	1440ca16 	blt	r2,r17,b798 <___vfprintf_internal_r+0x1940>
    b470:	a8c00204 	addi	r3,r21,8
    b474:	2000061e 	bne	r4,zero,b490 <___vfprintf_internal_r+0x1638>
    b478:	d9414717 	ldw	r5,1308(sp)
    b47c:	2800041e 	bne	r5,zero,b490 <___vfprintf_internal_r+0x1638>
    b480:	d9814c17 	ldw	r6,1328(sp)
    b484:	3080004c 	andi	r2,r6,1
    b488:	1005003a 	cmpeq	r2,r2,zero
    b48c:	103bf01e 	bne	r2,zero,a450 <___vfprintf_internal_r+0x5f8>
    b490:	00800044 	movi	r2,1
    b494:	dc400d17 	ldw	r17,52(sp)
    b498:	18800115 	stw	r2,4(r3)
    b49c:	d8814917 	ldw	r2,1316(sp)
    b4a0:	94800044 	addi	r18,r18,1
    b4a4:	8c400044 	addi	r17,r17,1
    b4a8:	18800015 	stw	r2,0(r3)
    b4ac:	008001c4 	movi	r2,7
    b4b0:	dc800e15 	stw	r18,56(sp)
    b4b4:	dc400d15 	stw	r17,52(sp)
    b4b8:	1440ca16 	blt	r2,r17,b7e4 <___vfprintf_internal_r+0x198c>
    b4bc:	18c00204 	addi	r3,r3,8
    b4c0:	0121c83a 	sub	r16,zero,r4
    b4c4:	0400500e 	bge	zero,r16,b608 <___vfprintf_internal_r+0x17b0>
    b4c8:	00800404 	movi	r2,16
    b4cc:	1400800e 	bge	r2,r16,b6d0 <___vfprintf_internal_r+0x1878>
    b4d0:	1027883a 	mov	r19,r2
    b4d4:	07020034 	movhi	fp,2048
    b4d8:	e7016b84 	addi	fp,fp,1454
    b4dc:	050001c4 	movi	r20,7
    b4e0:	00000306 	br	b4f0 <___vfprintf_internal_r+0x1698>
    b4e4:	18c00204 	addi	r3,r3,8
    b4e8:	843ffc04 	addi	r16,r16,-16
    b4ec:	9c007a0e 	bge	r19,r16,b6d8 <___vfprintf_internal_r+0x1880>
    b4f0:	94800404 	addi	r18,r18,16
    b4f4:	8c400044 	addi	r17,r17,1
    b4f8:	1f000015 	stw	fp,0(r3)
    b4fc:	1cc00115 	stw	r19,4(r3)
    b500:	dc800e15 	stw	r18,56(sp)
    b504:	dc400d15 	stw	r17,52(sp)
    b508:	a47ff60e 	bge	r20,r17,b4e4 <___vfprintf_internal_r+0x168c>
    b50c:	d9014f17 	ldw	r4,1340(sp)
    b510:	b00b883a 	mov	r5,r22
    b514:	d9800c04 	addi	r6,sp,48
    b518:	0009e000 	call	9e00 <__sprint_r>
    b51c:	103c061e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b520:	dc800e17 	ldw	r18,56(sp)
    b524:	dc400d17 	ldw	r17,52(sp)
    b528:	d8c01904 	addi	r3,sp,100
    b52c:	003fee06 	br	b4e8 <___vfprintf_internal_r+0x1690>
    b530:	3c000017 	ldw	r16,0(r7)
    b534:	0023883a 	mov	r17,zero
    b538:	39c00104 	addi	r7,r7,4
    b53c:	d9c14015 	stw	r7,1280(sp)
    b540:	003e9206 	br	af8c <___vfprintf_internal_r+0x1134>
    b544:	d9401904 	addi	r5,sp,100
    b548:	dd000f04 	addi	r20,sp,60
    b54c:	d9414115 	stw	r5,1284(sp)
    b550:	d9814417 	ldw	r6,1296(sp)
    b554:	880a973a 	slli	r5,r17,28
    b558:	8004d13a 	srli	r2,r16,4
    b55c:	810003cc 	andi	r4,r16,15
    b560:	3109883a 	add	r4,r6,r4
    b564:	2884b03a 	or	r2,r5,r2
    b568:	21400003 	ldbu	r5,0(r4)
    b56c:	d9014117 	ldw	r4,1284(sp)
    b570:	8806d13a 	srli	r3,r17,4
    b574:	1021883a 	mov	r16,r2
    b578:	213fffc4 	addi	r4,r4,-1
    b57c:	d9014115 	stw	r4,1284(sp)
    b580:	d9814117 	ldw	r6,1284(sp)
    b584:	10c8b03a 	or	r4,r2,r3
    b588:	1823883a 	mov	r17,r3
    b58c:	31400005 	stb	r5,0(r6)
    b590:	203fef1e 	bne	r4,zero,b550 <___vfprintf_internal_r+0x16f8>
    b594:	003ccb06 	br	a8c4 <___vfprintf_internal_r+0xa6c>
    b598:	00800c04 	movi	r2,48
    b59c:	d98018c4 	addi	r6,sp,99
    b5a0:	dd000f04 	addi	r20,sp,60
    b5a4:	d88018c5 	stb	r2,99(sp)
    b5a8:	d9814115 	stw	r6,1284(sp)
    b5ac:	003cc506 	br	a8c4 <___vfprintf_internal_r+0xa6c>
    b5b0:	dc400d17 	ldw	r17,52(sp)
    b5b4:	07020034 	movhi	fp,2048
    b5b8:	e7016f84 	addi	fp,fp,1470
    b5bc:	003bc706 	br	a4dc <___vfprintf_internal_r+0x684>
    b5c0:	d9414c17 	ldw	r5,1328(sp)
    b5c4:	2880040c 	andi	r2,r5,16
    b5c8:	10007c26 	beq	r2,zero,b7bc <___vfprintf_internal_r+0x1964>
    b5cc:	38800017 	ldw	r2,0(r7)
    b5d0:	39c00104 	addi	r7,r7,4
    b5d4:	d9c14015 	stw	r7,1280(sp)
    b5d8:	d9814b17 	ldw	r6,1324(sp)
    b5dc:	d9c14017 	ldw	r7,1280(sp)
    b5e0:	11800015 	stw	r6,0(r2)
    b5e4:	003a7806 	br	9fc8 <___vfprintf_internal_r+0x170>
    b5e8:	d9014f17 	ldw	r4,1340(sp)
    b5ec:	b00b883a 	mov	r5,r22
    b5f0:	d9800c04 	addi	r6,sp,48
    b5f4:	0009e000 	call	9e00 <__sprint_r>
    b5f8:	103bcf1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b5fc:	dc800e17 	ldw	r18,56(sp)
    b600:	dc400d17 	ldw	r17,52(sp)
    b604:	d8c01904 	addi	r3,sp,100
    b608:	d9014717 	ldw	r4,1308(sp)
    b60c:	d9414117 	ldw	r5,1284(sp)
    b610:	8c400044 	addi	r17,r17,1
    b614:	9125883a 	add	r18,r18,r4
    b618:	008001c4 	movi	r2,7
    b61c:	19400015 	stw	r5,0(r3)
    b620:	19000115 	stw	r4,4(r3)
    b624:	dc800e15 	stw	r18,56(sp)
    b628:	dc400d15 	stw	r17,52(sp)
    b62c:	147cee16 	blt	r2,r17,a9e8 <___vfprintf_internal_r+0xb90>
    b630:	18c00204 	addi	r3,r3,8
    b634:	003b8606 	br	a450 <___vfprintf_internal_r+0x5f8>
    b638:	38c00017 	ldw	r3,0(r7)
    b63c:	39000204 	addi	r4,r7,8
    b640:	d9014015 	stw	r4,1280(sp)
    b644:	d8c14215 	stw	r3,1288(sp)
    b648:	39c00117 	ldw	r7,4(r7)
    b64c:	d9c14315 	stw	r7,1292(sp)
    b650:	003e2006 	br	aed4 <___vfprintf_internal_r+0x107c>
    b654:	0005883a 	mov	r2,zero
    b658:	1409c83a 	sub	r4,r2,r16
    b65c:	1105803a 	cmpltu	r2,r2,r4
    b660:	044bc83a 	sub	r5,zero,r17
    b664:	2885c83a 	sub	r2,r5,r2
    b668:	2021883a 	mov	r16,r4
    b66c:	1023883a 	mov	r17,r2
    b670:	01000044 	movi	r4,1
    b674:	00800b44 	movi	r2,45
    b678:	d8800405 	stb	r2,16(sp)
    b67c:	003c8406 	br	a890 <___vfprintf_internal_r+0xa38>
    b680:	d9014f17 	ldw	r4,1340(sp)
    b684:	b00b883a 	mov	r5,r22
    b688:	d9800c04 	addi	r6,sp,48
    b68c:	0009e000 	call	9e00 <__sprint_r>
    b690:	103ba91e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b694:	dc800e17 	ldw	r18,56(sp)
    b698:	dc400d17 	ldw	r17,52(sp)
    b69c:	d9000517 	ldw	r4,20(sp)
    b6a0:	d9401904 	addi	r5,sp,100
    b6a4:	003da706 	br	ad44 <___vfprintf_internal_r+0xeec>
    b6a8:	d9014f17 	ldw	r4,1340(sp)
    b6ac:	b00b883a 	mov	r5,r22
    b6b0:	d9800c04 	addi	r6,sp,48
    b6b4:	0009e000 	call	9e00 <__sprint_r>
    b6b8:	103b9f1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b6bc:	dc800e17 	ldw	r18,56(sp)
    b6c0:	dc400d17 	ldw	r17,52(sp)
    b6c4:	d9000517 	ldw	r4,20(sp)
    b6c8:	d8c01904 	addi	r3,sp,100
    b6cc:	003d9106 	br	ad14 <___vfprintf_internal_r+0xebc>
    b6d0:	07020034 	movhi	fp,2048
    b6d4:	e7016b84 	addi	fp,fp,1454
    b6d8:	9425883a 	add	r18,r18,r16
    b6dc:	8c400044 	addi	r17,r17,1
    b6e0:	008001c4 	movi	r2,7
    b6e4:	1f000015 	stw	fp,0(r3)
    b6e8:	1c000115 	stw	r16,4(r3)
    b6ec:	dc800e15 	stw	r18,56(sp)
    b6f0:	dc400d15 	stw	r17,52(sp)
    b6f4:	147fbc16 	blt	r2,r17,b5e8 <___vfprintf_internal_r+0x1790>
    b6f8:	18c00204 	addi	r3,r3,8
    b6fc:	003fc206 	br	b608 <___vfprintf_internal_r+0x17b0>
    b700:	d9014f17 	ldw	r4,1340(sp)
    b704:	b00b883a 	mov	r5,r22
    b708:	d9800c04 	addi	r6,sp,48
    b70c:	0009e000 	call	9e00 <__sprint_r>
    b710:	103b891e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b714:	dc800e17 	ldw	r18,56(sp)
    b718:	d9000517 	ldw	r4,20(sp)
    b71c:	d8c01904 	addi	r3,sp,100
    b720:	003d0206 	br	ab2c <___vfprintf_internal_r+0xcd4>
    b724:	07020034 	movhi	fp,2048
    b728:	e7016b84 	addi	fp,fp,1454
    b72c:	003be406 	br	a6c0 <___vfprintf_internal_r+0x868>
    b730:	00820034 	movhi	r2,2048
    b734:	10815a04 	addi	r2,r2,1384
    b738:	d8814115 	stw	r2,1284(sp)
    b73c:	003df506 	br	af14 <___vfprintf_internal_r+0x10bc>
    b740:	d9014217 	ldw	r4,1288(sp)
    b744:	d9414317 	ldw	r5,1292(sp)
    b748:	00114740 	call	11474 <__isnand>
    b74c:	10003926 	beq	r2,zero,b834 <___vfprintf_internal_r+0x19dc>
    b750:	d9414d17 	ldw	r5,1332(sp)
    b754:	008011c4 	movi	r2,71
    b758:	1140ce16 	blt	r2,r5,ba94 <___vfprintf_internal_r+0x1c3c>
    b75c:	01820034 	movhi	r6,2048
    b760:	31815b04 	addi	r6,r6,1388
    b764:	d9814115 	stw	r6,1284(sp)
    b768:	003dea06 	br	af14 <___vfprintf_internal_r+0x10bc>
    b76c:	d9014c17 	ldw	r4,1328(sp)
    b770:	bdc00044 	addi	r23,r23,1
    b774:	b8c00007 	ldb	r3,0(r23)
    b778:	21000814 	ori	r4,r4,32
    b77c:	d9014c15 	stw	r4,1328(sp)
    b780:	003a3406 	br	a054 <___vfprintf_internal_r+0x1fc>
    b784:	dcc14515 	stw	r19,1300(sp)
    b788:	98011016 	blt	r19,zero,bbcc <___vfprintf_internal_r+0x1d74>
    b78c:	980f883a 	mov	r7,r19
    b790:	d8014615 	stw	zero,1304(sp)
    b794:	003c5206 	br	a8e0 <___vfprintf_internal_r+0xa88>
    b798:	d9014f17 	ldw	r4,1340(sp)
    b79c:	b00b883a 	mov	r5,r22
    b7a0:	d9800c04 	addi	r6,sp,48
    b7a4:	0009e000 	call	9e00 <__sprint_r>
    b7a8:	103b631e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b7ac:	dc800e17 	ldw	r18,56(sp)
    b7b0:	d9000517 	ldw	r4,20(sp)
    b7b4:	d8c01904 	addi	r3,sp,100
    b7b8:	003f2e06 	br	b474 <___vfprintf_internal_r+0x161c>
    b7bc:	d8c14c17 	ldw	r3,1328(sp)
    b7c0:	1880100c 	andi	r2,r3,64
    b7c4:	1000a026 	beq	r2,zero,ba48 <___vfprintf_internal_r+0x1bf0>
    b7c8:	38800017 	ldw	r2,0(r7)
    b7cc:	39c00104 	addi	r7,r7,4
    b7d0:	d9c14015 	stw	r7,1280(sp)
    b7d4:	d9014b17 	ldw	r4,1324(sp)
    b7d8:	d9c14017 	ldw	r7,1280(sp)
    b7dc:	1100000d 	sth	r4,0(r2)
    b7e0:	0039f906 	br	9fc8 <___vfprintf_internal_r+0x170>
    b7e4:	d9014f17 	ldw	r4,1340(sp)
    b7e8:	b00b883a 	mov	r5,r22
    b7ec:	d9800c04 	addi	r6,sp,48
    b7f0:	0009e000 	call	9e00 <__sprint_r>
    b7f4:	103b501e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    b7f8:	dc800e17 	ldw	r18,56(sp)
    b7fc:	dc400d17 	ldw	r17,52(sp)
    b800:	d9000517 	ldw	r4,20(sp)
    b804:	d8c01904 	addi	r3,sp,100
    b808:	003f2d06 	br	b4c0 <___vfprintf_internal_r+0x1668>
    b80c:	00800184 	movi	r2,6
    b810:	14c09a36 	bltu	r2,r19,ba7c <___vfprintf_internal_r+0x1c24>
    b814:	dcc14515 	stw	r19,1300(sp)
    b818:	9800010e 	bge	r19,zero,b820 <___vfprintf_internal_r+0x19c8>
    b81c:	d8014515 	stw	zero,1300(sp)
    b820:	00820034 	movhi	r2,2048
    b824:	10815d04 	addi	r2,r2,1396
    b828:	980f883a 	mov	r7,r19
    b82c:	d8814115 	stw	r2,1284(sp)
    b830:	003a7806 	br	a214 <___vfprintf_internal_r+0x3bc>
    b834:	00bfffc4 	movi	r2,-1
    b838:	9880e226 	beq	r19,r2,bbc4 <___vfprintf_internal_r+0x1d6c>
    b83c:	d9414d17 	ldw	r5,1332(sp)
    b840:	008019c4 	movi	r2,103
    b844:	2880dc26 	beq	r5,r2,bbb8 <___vfprintf_internal_r+0x1d60>
    b848:	008011c4 	movi	r2,71
    b84c:	2880da26 	beq	r5,r2,bbb8 <___vfprintf_internal_r+0x1d60>
    b850:	d9414c17 	ldw	r5,1328(sp)
    b854:	d9014317 	ldw	r4,1292(sp)
    b858:	d9814217 	ldw	r6,1288(sp)
    b85c:	29404014 	ori	r5,r5,256
    b860:	d9414c15 	stw	r5,1328(sp)
    b864:	2000cc16 	blt	r4,zero,bb98 <___vfprintf_internal_r+0x1d40>
    b868:	3021883a 	mov	r16,r6
    b86c:	2023883a 	mov	r17,r4
    b870:	0039883a 	mov	fp,zero
    b874:	d9414d17 	ldw	r5,1332(sp)
    b878:	00801984 	movi	r2,102
    b87c:	2880b726 	beq	r5,r2,bb5c <___vfprintf_internal_r+0x1d04>
    b880:	00801184 	movi	r2,70
    b884:	2880b526 	beq	r5,r2,bb5c <___vfprintf_internal_r+0x1d04>
    b888:	00801944 	movi	r2,101
    b88c:	2880c826 	beq	r5,r2,bbb0 <___vfprintf_internal_r+0x1d58>
    b890:	00801144 	movi	r2,69
    b894:	2880c626 	beq	r5,r2,bbb0 <___vfprintf_internal_r+0x1d58>
    b898:	9829883a 	mov	r20,r19
    b89c:	d9014f17 	ldw	r4,1340(sp)
    b8a0:	d8800504 	addi	r2,sp,20
    b8a4:	880d883a 	mov	r6,r17
    b8a8:	d8800115 	stw	r2,4(sp)
    b8ac:	d8c00604 	addi	r3,sp,24
    b8b0:	d8800704 	addi	r2,sp,28
    b8b4:	800b883a 	mov	r5,r16
    b8b8:	01c00084 	movi	r7,2
    b8bc:	d8c00215 	stw	r3,8(sp)
    b8c0:	d8800315 	stw	r2,12(sp)
    b8c4:	dd000015 	stw	r20,0(sp)
    b8c8:	000c07c0 	call	c07c <_dtoa_r>
    b8cc:	d9814d17 	ldw	r6,1332(sp)
    b8d0:	d8814115 	stw	r2,1284(sp)
    b8d4:	008019c4 	movi	r2,103
    b8d8:	30809526 	beq	r6,r2,bb30 <___vfprintf_internal_r+0x1cd8>
    b8dc:	d8c14d17 	ldw	r3,1332(sp)
    b8e0:	008011c4 	movi	r2,71
    b8e4:	18809226 	beq	r3,r2,bb30 <___vfprintf_internal_r+0x1cd8>
    b8e8:	d9414117 	ldw	r5,1284(sp)
    b8ec:	d9814d17 	ldw	r6,1332(sp)
    b8f0:	00801984 	movi	r2,102
    b8f4:	2d25883a 	add	r18,r5,r20
    b8f8:	30808626 	beq	r6,r2,bb14 <___vfprintf_internal_r+0x1cbc>
    b8fc:	00801184 	movi	r2,70
    b900:	30808426 	beq	r6,r2,bb14 <___vfprintf_internal_r+0x1cbc>
    b904:	000d883a 	mov	r6,zero
    b908:	000f883a 	mov	r7,zero
    b90c:	880b883a 	mov	r5,r17
    b910:	8009883a 	mov	r4,r16
    b914:	0012a940 	call	12a94 <__eqdf2>
    b918:	1000751e 	bne	r2,zero,baf0 <___vfprintf_internal_r+0x1c98>
    b91c:	9005883a 	mov	r2,r18
    b920:	dc800715 	stw	r18,28(sp)
    b924:	d9014117 	ldw	r4,1284(sp)
    b928:	d9414d17 	ldw	r5,1332(sp)
    b92c:	00c019c4 	movi	r3,103
    b930:	1125c83a 	sub	r18,r2,r4
    b934:	28c06826 	beq	r5,r3,bad8 <___vfprintf_internal_r+0x1c80>
    b938:	008011c4 	movi	r2,71
    b93c:	28806626 	beq	r5,r2,bad8 <___vfprintf_internal_r+0x1c80>
    b940:	d9000517 	ldw	r4,20(sp)
    b944:	d8c14d17 	ldw	r3,1332(sp)
    b948:	00801944 	movi	r2,101
    b94c:	10c05516 	blt	r2,r3,baa4 <___vfprintf_internal_r+0x1c4c>
    b950:	213fffc4 	addi	r4,r4,-1
    b954:	d9000515 	stw	r4,20(sp)
    b958:	d8c00805 	stb	r3,32(sp)
    b95c:	2021883a 	mov	r16,r4
    b960:	2000c116 	blt	r4,zero,bc68 <___vfprintf_internal_r+0x1e10>
    b964:	00800ac4 	movi	r2,43
    b968:	d8800845 	stb	r2,33(sp)
    b96c:	00800244 	movi	r2,9
    b970:	1400af0e 	bge	r2,r16,bc30 <___vfprintf_internal_r+0x1dd8>
    b974:	1027883a 	mov	r19,r2
    b978:	dc400b84 	addi	r17,sp,46
    b97c:	8009883a 	mov	r4,r16
    b980:	01400284 	movi	r5,10
    b984:	0012f100 	call	12f10 <__modsi3>
    b988:	10800c04 	addi	r2,r2,48
    b98c:	8c7fffc4 	addi	r17,r17,-1
    b990:	8009883a 	mov	r4,r16
    b994:	01400284 	movi	r5,10
    b998:	88800005 	stb	r2,0(r17)
    b99c:	0012eb00 	call	12eb0 <__divsi3>
    b9a0:	1021883a 	mov	r16,r2
    b9a4:	98bff516 	blt	r19,r2,b97c <___vfprintf_internal_r+0x1b24>
    b9a8:	10c00c04 	addi	r3,r2,48
    b9ac:	d88009c4 	addi	r2,sp,39
    b9b0:	108001c4 	addi	r2,r2,7
    b9b4:	897fffc4 	addi	r5,r17,-1
    b9b8:	88ffffc5 	stb	r3,-1(r17)
    b9bc:	2880a72e 	bgeu	r5,r2,bc5c <___vfprintf_internal_r+0x1e04>
    b9c0:	1009883a 	mov	r4,r2
    b9c4:	d9800804 	addi	r6,sp,32
    b9c8:	d8c00884 	addi	r3,sp,34
    b9cc:	28800003 	ldbu	r2,0(r5)
    b9d0:	29400044 	addi	r5,r5,1
    b9d4:	18800005 	stb	r2,0(r3)
    b9d8:	18c00044 	addi	r3,r3,1
    b9dc:	293ffb36 	bltu	r5,r4,b9cc <___vfprintf_internal_r+0x1b74>
    b9e0:	1987c83a 	sub	r3,r3,r6
    b9e4:	00800044 	movi	r2,1
    b9e8:	d8c14815 	stw	r3,1312(sp)
    b9ec:	90cf883a 	add	r7,r18,r3
    b9f0:	1480960e 	bge	r2,r18,bc4c <___vfprintf_internal_r+0x1df4>
    b9f4:	39c00044 	addi	r7,r7,1
    b9f8:	d9c14515 	stw	r7,1300(sp)
    b9fc:	38003416 	blt	r7,zero,bad0 <___vfprintf_internal_r+0x1c78>
    ba00:	e0803fcc 	andi	r2,fp,255
    ba04:	1080201c 	xori	r2,r2,128
    ba08:	10bfe004 	addi	r2,r2,-128
    ba0c:	10004e26 	beq	r2,zero,bb48 <___vfprintf_internal_r+0x1cf0>
    ba10:	00800b44 	movi	r2,45
    ba14:	dc814715 	stw	r18,1308(sp)
    ba18:	d8014615 	stw	zero,1304(sp)
    ba1c:	d8800405 	stb	r2,16(sp)
    ba20:	003bb106 	br	a8e8 <___vfprintf_internal_r+0xa90>
    ba24:	00800b44 	movi	r2,45
    ba28:	d8800405 	stb	r2,16(sp)
    ba2c:	003d3306 	br	aefc <___vfprintf_internal_r+0x10a4>
    ba30:	d9014f17 	ldw	r4,1340(sp)
    ba34:	b00b883a 	mov	r5,r22
    ba38:	d9800c04 	addi	r6,sp,48
    ba3c:	0009e000 	call	9e00 <__sprint_r>
    ba40:	103abd1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x6e0>
    ba44:	003abb06 	br	a534 <___vfprintf_internal_r+0x6dc>
    ba48:	38800017 	ldw	r2,0(r7)
    ba4c:	39c00104 	addi	r7,r7,4
    ba50:	d9c14015 	stw	r7,1280(sp)
    ba54:	d9414b17 	ldw	r5,1324(sp)
    ba58:	d9c14017 	ldw	r7,1280(sp)
    ba5c:	11400015 	stw	r5,0(r2)
    ba60:	00395906 	br	9fc8 <___vfprintf_internal_r+0x170>
    ba64:	980f883a 	mov	r7,r19
    ba68:	dcc14515 	stw	r19,1300(sp)
    ba6c:	d8014615 	stw	zero,1304(sp)
    ba70:	003b9b06 	br	a8e0 <___vfprintf_internal_r+0xa88>
    ba74:	0027883a 	mov	r19,zero
    ba78:	00397806 	br	a05c <___vfprintf_internal_r+0x204>
    ba7c:	00c20034 	movhi	r3,2048
    ba80:	18c15d04 	addi	r3,r3,1396
    ba84:	100f883a 	mov	r7,r2
    ba88:	d8814515 	stw	r2,1300(sp)
    ba8c:	d8c14115 	stw	r3,1284(sp)
    ba90:	0039e006 	br	a214 <___vfprintf_internal_r+0x3bc>
    ba94:	00820034 	movhi	r2,2048
    ba98:	10815c04 	addi	r2,r2,1392
    ba9c:	d8814115 	stw	r2,1284(sp)
    baa0:	003d1c06 	br	af14 <___vfprintf_internal_r+0x10bc>
    baa4:	d9414d17 	ldw	r5,1332(sp)
    baa8:	00801984 	movi	r2,102
    baac:	28804926 	beq	r5,r2,bbd4 <___vfprintf_internal_r+0x1d7c>
    bab0:	200f883a 	mov	r7,r4
    bab4:	24805716 	blt	r4,r18,bc14 <___vfprintf_internal_r+0x1dbc>
    bab8:	d9414c17 	ldw	r5,1328(sp)
    babc:	2880004c 	andi	r2,r5,1
    bac0:	10000126 	beq	r2,zero,bac8 <___vfprintf_internal_r+0x1c70>
    bac4:	21c00044 	addi	r7,r4,1
    bac8:	d9c14515 	stw	r7,1300(sp)
    bacc:	383fcc0e 	bge	r7,zero,ba00 <___vfprintf_internal_r+0x1ba8>
    bad0:	d8014515 	stw	zero,1300(sp)
    bad4:	003fca06 	br	ba00 <___vfprintf_internal_r+0x1ba8>
    bad8:	d9000517 	ldw	r4,20(sp)
    badc:	00bfff04 	movi	r2,-4
    bae0:	1100480e 	bge	r2,r4,bc04 <___vfprintf_internal_r+0x1dac>
    bae4:	99004716 	blt	r19,r4,bc04 <___vfprintf_internal_r+0x1dac>
    bae8:	d8c14d15 	stw	r3,1332(sp)
    baec:	003ff006 	br	bab0 <___vfprintf_internal_r+0x1c58>
    baf0:	d8800717 	ldw	r2,28(sp)
    baf4:	14bf8b2e 	bgeu	r2,r18,b924 <___vfprintf_internal_r+0x1acc>
    baf8:	9007883a 	mov	r3,r18
    bafc:	01000c04 	movi	r4,48
    bb00:	11000005 	stb	r4,0(r2)
    bb04:	10800044 	addi	r2,r2,1
    bb08:	d8800715 	stw	r2,28(sp)
    bb0c:	18bffc1e 	bne	r3,r2,bb00 <___vfprintf_internal_r+0x1ca8>
    bb10:	003f8406 	br	b924 <___vfprintf_internal_r+0x1acc>
    bb14:	d8814117 	ldw	r2,1284(sp)
    bb18:	10c00007 	ldb	r3,0(r2)
    bb1c:	00800c04 	movi	r2,48
    bb20:	18805b26 	beq	r3,r2,bc90 <___vfprintf_internal_r+0x1e38>
    bb24:	d9000517 	ldw	r4,20(sp)
    bb28:	9125883a 	add	r18,r18,r4
    bb2c:	003f7506 	br	b904 <___vfprintf_internal_r+0x1aac>
    bb30:	d9014c17 	ldw	r4,1328(sp)
    bb34:	2080004c 	andi	r2,r4,1
    bb38:	1005003a 	cmpeq	r2,r2,zero
    bb3c:	103f6a26 	beq	r2,zero,b8e8 <___vfprintf_internal_r+0x1a90>
    bb40:	d8800717 	ldw	r2,28(sp)
    bb44:	003f7706 	br	b924 <___vfprintf_internal_r+0x1acc>
    bb48:	d9c14515 	stw	r7,1300(sp)
    bb4c:	38004d16 	blt	r7,zero,bc84 <___vfprintf_internal_r+0x1e2c>
    bb50:	dc814715 	stw	r18,1308(sp)
    bb54:	d8014615 	stw	zero,1304(sp)
    bb58:	003b6106 	br	a8e0 <___vfprintf_internal_r+0xa88>
    bb5c:	d9014f17 	ldw	r4,1340(sp)
    bb60:	d8800504 	addi	r2,sp,20
    bb64:	d8800115 	stw	r2,4(sp)
    bb68:	d8c00604 	addi	r3,sp,24
    bb6c:	d8800704 	addi	r2,sp,28
    bb70:	800b883a 	mov	r5,r16
    bb74:	880d883a 	mov	r6,r17
    bb78:	01c000c4 	movi	r7,3
    bb7c:	d8c00215 	stw	r3,8(sp)
    bb80:	d8800315 	stw	r2,12(sp)
    bb84:	dcc00015 	stw	r19,0(sp)
    bb88:	9829883a 	mov	r20,r19
    bb8c:	000c07c0 	call	c07c <_dtoa_r>
    bb90:	d8814115 	stw	r2,1284(sp)
    bb94:	003f5106 	br	b8dc <___vfprintf_internal_r+0x1a84>
    bb98:	d8c14217 	ldw	r3,1288(sp)
    bb9c:	d9014317 	ldw	r4,1292(sp)
    bba0:	07000b44 	movi	fp,45
    bba4:	1821883a 	mov	r16,r3
    bba8:	2460003c 	xorhi	r17,r4,32768
    bbac:	003f3106 	br	b874 <___vfprintf_internal_r+0x1a1c>
    bbb0:	9d000044 	addi	r20,r19,1
    bbb4:	003f3906 	br	b89c <___vfprintf_internal_r+0x1a44>
    bbb8:	983f251e 	bne	r19,zero,b850 <___vfprintf_internal_r+0x19f8>
    bbbc:	04c00044 	movi	r19,1
    bbc0:	003f2306 	br	b850 <___vfprintf_internal_r+0x19f8>
    bbc4:	04c00184 	movi	r19,6
    bbc8:	003f2106 	br	b850 <___vfprintf_internal_r+0x19f8>
    bbcc:	d8014515 	stw	zero,1300(sp)
    bbd0:	003eee06 	br	b78c <___vfprintf_internal_r+0x1934>
    bbd4:	200f883a 	mov	r7,r4
    bbd8:	0100370e 	bge	zero,r4,bcb8 <___vfprintf_internal_r+0x1e60>
    bbdc:	9800031e 	bne	r19,zero,bbec <___vfprintf_internal_r+0x1d94>
    bbe0:	d9814c17 	ldw	r6,1328(sp)
    bbe4:	3080004c 	andi	r2,r6,1
    bbe8:	103fb726 	beq	r2,zero,bac8 <___vfprintf_internal_r+0x1c70>
    bbec:	20800044 	addi	r2,r4,1
    bbf0:	98a7883a 	add	r19,r19,r2
    bbf4:	dcc14515 	stw	r19,1300(sp)
    bbf8:	980f883a 	mov	r7,r19
    bbfc:	983f800e 	bge	r19,zero,ba00 <___vfprintf_internal_r+0x1ba8>
    bc00:	003fb306 	br	bad0 <___vfprintf_internal_r+0x1c78>
    bc04:	d9814d17 	ldw	r6,1332(sp)
    bc08:	31bfff84 	addi	r6,r6,-2
    bc0c:	d9814d15 	stw	r6,1332(sp)
    bc10:	003f4c06 	br	b944 <___vfprintf_internal_r+0x1aec>
    bc14:	0100180e 	bge	zero,r4,bc78 <___vfprintf_internal_r+0x1e20>
    bc18:	00800044 	movi	r2,1
    bc1c:	1485883a 	add	r2,r2,r18
    bc20:	d8814515 	stw	r2,1300(sp)
    bc24:	100f883a 	mov	r7,r2
    bc28:	103f750e 	bge	r2,zero,ba00 <___vfprintf_internal_r+0x1ba8>
    bc2c:	003fa806 	br	bad0 <___vfprintf_internal_r+0x1c78>
    bc30:	80c00c04 	addi	r3,r16,48
    bc34:	00800c04 	movi	r2,48
    bc38:	d8c008c5 	stb	r3,35(sp)
    bc3c:	d9800804 	addi	r6,sp,32
    bc40:	d8c00904 	addi	r3,sp,36
    bc44:	d8800885 	stb	r2,34(sp)
    bc48:	003f6506 	br	b9e0 <___vfprintf_internal_r+0x1b88>
    bc4c:	d9014c17 	ldw	r4,1328(sp)
    bc50:	2084703a 	and	r2,r4,r2
    bc54:	103f9c26 	beq	r2,zero,bac8 <___vfprintf_internal_r+0x1c70>
    bc58:	003f6606 	br	b9f4 <___vfprintf_internal_r+0x1b9c>
    bc5c:	d9800804 	addi	r6,sp,32
    bc60:	d8c00884 	addi	r3,sp,34
    bc64:	003f5e06 	br	b9e0 <___vfprintf_internal_r+0x1b88>
    bc68:	00800b44 	movi	r2,45
    bc6c:	0121c83a 	sub	r16,zero,r4
    bc70:	d8800845 	stb	r2,33(sp)
    bc74:	003f3d06 	br	b96c <___vfprintf_internal_r+0x1b14>
    bc78:	00800084 	movi	r2,2
    bc7c:	1105c83a 	sub	r2,r2,r4
    bc80:	003fe606 	br	bc1c <___vfprintf_internal_r+0x1dc4>
    bc84:	d8014515 	stw	zero,1300(sp)
    bc88:	dc814715 	stw	r18,1308(sp)
    bc8c:	003fb106 	br	bb54 <___vfprintf_internal_r+0x1cfc>
    bc90:	000d883a 	mov	r6,zero
    bc94:	000f883a 	mov	r7,zero
    bc98:	8009883a 	mov	r4,r16
    bc9c:	880b883a 	mov	r5,r17
    bca0:	0012b1c0 	call	12b1c <__nedf2>
    bca4:	103f9f26 	beq	r2,zero,bb24 <___vfprintf_internal_r+0x1ccc>
    bca8:	00800044 	movi	r2,1
    bcac:	1509c83a 	sub	r4,r2,r20
    bcb0:	d9000515 	stw	r4,20(sp)
    bcb4:	003f9b06 	br	bb24 <___vfprintf_internal_r+0x1ccc>
    bcb8:	98000d1e 	bne	r19,zero,bcf0 <___vfprintf_internal_r+0x1e98>
    bcbc:	d8c14c17 	ldw	r3,1328(sp)
    bcc0:	1880004c 	andi	r2,r3,1
    bcc4:	10000a1e 	bne	r2,zero,bcf0 <___vfprintf_internal_r+0x1e98>
    bcc8:	01000044 	movi	r4,1
    bccc:	200f883a 	mov	r7,r4
    bcd0:	d9014515 	stw	r4,1300(sp)
    bcd4:	003f4a06 	br	ba00 <___vfprintf_internal_r+0x1ba8>
    bcd8:	3cc00017 	ldw	r19,0(r7)
    bcdc:	39c00104 	addi	r7,r7,4
    bce0:	983d0e0e 	bge	r19,zero,b11c <___vfprintf_internal_r+0x12c4>
    bce4:	b8c00007 	ldb	r3,0(r23)
    bce8:	04ffffc4 	movi	r19,-1
    bcec:	0038d906 	br	a054 <___vfprintf_internal_r+0x1fc>
    bcf0:	9cc00084 	addi	r19,r19,2
    bcf4:	dcc14515 	stw	r19,1300(sp)
    bcf8:	980f883a 	mov	r7,r19
    bcfc:	983f400e 	bge	r19,zero,ba00 <___vfprintf_internal_r+0x1ba8>
    bd00:	003f7306 	br	bad0 <___vfprintf_internal_r+0x1c78>

0000bd04 <__vfprintf_internal>:
    bd04:	00820034 	movhi	r2,2048
    bd08:	108a3b04 	addi	r2,r2,10476
    bd0c:	2013883a 	mov	r9,r4
    bd10:	11000017 	ldw	r4,0(r2)
    bd14:	2805883a 	mov	r2,r5
    bd18:	300f883a 	mov	r7,r6
    bd1c:	480b883a 	mov	r5,r9
    bd20:	100d883a 	mov	r6,r2
    bd24:	0009e581 	jmpi	9e58 <___vfprintf_internal_r>

0000bd28 <__swsetup_r>:
    bd28:	00820034 	movhi	r2,2048
    bd2c:	108a3b04 	addi	r2,r2,10476
    bd30:	10c00017 	ldw	r3,0(r2)
    bd34:	defffd04 	addi	sp,sp,-12
    bd38:	dc400115 	stw	r17,4(sp)
    bd3c:	dc000015 	stw	r16,0(sp)
    bd40:	dfc00215 	stw	ra,8(sp)
    bd44:	2023883a 	mov	r17,r4
    bd48:	2821883a 	mov	r16,r5
    bd4c:	18000226 	beq	r3,zero,bd58 <__swsetup_r+0x30>
    bd50:	18800e17 	ldw	r2,56(r3)
    bd54:	10001f26 	beq	r2,zero,bdd4 <__swsetup_r+0xac>
    bd58:	8100030b 	ldhu	r4,12(r16)
    bd5c:	2080020c 	andi	r2,r4,8
    bd60:	10002826 	beq	r2,zero,be04 <__swsetup_r+0xdc>
    bd64:	81400417 	ldw	r5,16(r16)
    bd68:	28001d26 	beq	r5,zero,bde0 <__swsetup_r+0xb8>
    bd6c:	2080004c 	andi	r2,r4,1
    bd70:	1005003a 	cmpeq	r2,r2,zero
    bd74:	10000b26 	beq	r2,zero,bda4 <__swsetup_r+0x7c>
    bd78:	2080008c 	andi	r2,r4,2
    bd7c:	10001226 	beq	r2,zero,bdc8 <__swsetup_r+0xa0>
    bd80:	0005883a 	mov	r2,zero
    bd84:	80800215 	stw	r2,8(r16)
    bd88:	28000b26 	beq	r5,zero,bdb8 <__swsetup_r+0x90>
    bd8c:	0005883a 	mov	r2,zero
    bd90:	dfc00217 	ldw	ra,8(sp)
    bd94:	dc400117 	ldw	r17,4(sp)
    bd98:	dc000017 	ldw	r16,0(sp)
    bd9c:	dec00304 	addi	sp,sp,12
    bda0:	f800283a 	ret
    bda4:	80800517 	ldw	r2,20(r16)
    bda8:	80000215 	stw	zero,8(r16)
    bdac:	0085c83a 	sub	r2,zero,r2
    bdb0:	80800615 	stw	r2,24(r16)
    bdb4:	283ff51e 	bne	r5,zero,bd8c <__swsetup_r+0x64>
    bdb8:	2080200c 	andi	r2,r4,128
    bdbc:	103ff326 	beq	r2,zero,bd8c <__swsetup_r+0x64>
    bdc0:	00bfffc4 	movi	r2,-1
    bdc4:	003ff206 	br	bd90 <__swsetup_r+0x68>
    bdc8:	80800517 	ldw	r2,20(r16)
    bdcc:	80800215 	stw	r2,8(r16)
    bdd0:	003fed06 	br	bd88 <__swsetup_r+0x60>
    bdd4:	1809883a 	mov	r4,r3
    bdd8:	000d8c80 	call	d8c8 <__sinit>
    bddc:	003fde06 	br	bd58 <__swsetup_r+0x30>
    bde0:	20c0a00c 	andi	r3,r4,640
    bde4:	00808004 	movi	r2,512
    bde8:	18bfe026 	beq	r3,r2,bd6c <__swsetup_r+0x44>
    bdec:	8809883a 	mov	r4,r17
    bdf0:	800b883a 	mov	r5,r16
    bdf4:	000f1c80 	call	f1c8 <__smakebuf_r>
    bdf8:	8100030b 	ldhu	r4,12(r16)
    bdfc:	81400417 	ldw	r5,16(r16)
    be00:	003fda06 	br	bd6c <__swsetup_r+0x44>
    be04:	2080040c 	andi	r2,r4,16
    be08:	103fed26 	beq	r2,zero,bdc0 <__swsetup_r+0x98>
    be0c:	2080010c 	andi	r2,r4,4
    be10:	10001226 	beq	r2,zero,be5c <__swsetup_r+0x134>
    be14:	81400c17 	ldw	r5,48(r16)
    be18:	28000526 	beq	r5,zero,be30 <__swsetup_r+0x108>
    be1c:	80801004 	addi	r2,r16,64
    be20:	28800226 	beq	r5,r2,be2c <__swsetup_r+0x104>
    be24:	8809883a 	mov	r4,r17
    be28:	000dc4c0 	call	dc4c <_free_r>
    be2c:	80000c15 	stw	zero,48(r16)
    be30:	8080030b 	ldhu	r2,12(r16)
    be34:	81400417 	ldw	r5,16(r16)
    be38:	80000115 	stw	zero,4(r16)
    be3c:	10bff6cc 	andi	r2,r2,65499
    be40:	8080030d 	sth	r2,12(r16)
    be44:	81400015 	stw	r5,0(r16)
    be48:	8080030b 	ldhu	r2,12(r16)
    be4c:	10800214 	ori	r2,r2,8
    be50:	113fffcc 	andi	r4,r2,65535
    be54:	8080030d 	sth	r2,12(r16)
    be58:	003fc306 	br	bd68 <__swsetup_r+0x40>
    be5c:	81400417 	ldw	r5,16(r16)
    be60:	003ff906 	br	be48 <__swsetup_r+0x120>

0000be64 <quorem>:
    be64:	28c00417 	ldw	r3,16(r5)
    be68:	20800417 	ldw	r2,16(r4)
    be6c:	defff604 	addi	sp,sp,-40
    be70:	ddc00715 	stw	r23,28(sp)
    be74:	dd400515 	stw	r21,20(sp)
    be78:	dfc00915 	stw	ra,36(sp)
    be7c:	df000815 	stw	fp,32(sp)
    be80:	dd800615 	stw	r22,24(sp)
    be84:	dd000415 	stw	r20,16(sp)
    be88:	dcc00315 	stw	r19,12(sp)
    be8c:	dc800215 	stw	r18,8(sp)
    be90:	dc400115 	stw	r17,4(sp)
    be94:	dc000015 	stw	r16,0(sp)
    be98:	202f883a 	mov	r23,r4
    be9c:	282b883a 	mov	r21,r5
    bea0:	10c07416 	blt	r2,r3,c074 <quorem+0x210>
    bea4:	1c7fffc4 	addi	r17,r3,-1
    bea8:	8c45883a 	add	r2,r17,r17
    beac:	1085883a 	add	r2,r2,r2
    beb0:	2c000504 	addi	r16,r5,20
    beb4:	24c00504 	addi	r19,r4,20
    beb8:	14ed883a 	add	r22,r2,r19
    bebc:	80a5883a 	add	r18,r16,r2
    bec0:	b7000017 	ldw	fp,0(r22)
    bec4:	91400017 	ldw	r5,0(r18)
    bec8:	e009883a 	mov	r4,fp
    becc:	29400044 	addi	r5,r5,1
    bed0:	0012f700 	call	12f70 <__udivsi3>
    bed4:	1029883a 	mov	r20,r2
    bed8:	10003c1e 	bne	r2,zero,bfcc <quorem+0x168>
    bedc:	a80b883a 	mov	r5,r21
    bee0:	b809883a 	mov	r4,r23
    bee4:	000fdbc0 	call	fdbc <__mcmp>
    bee8:	10002b16 	blt	r2,zero,bf98 <quorem+0x134>
    beec:	a5000044 	addi	r20,r20,1
    bef0:	980f883a 	mov	r7,r19
    bef4:	0011883a 	mov	r8,zero
    bef8:	0009883a 	mov	r4,zero
    befc:	81400017 	ldw	r5,0(r16)
    bf00:	38c00017 	ldw	r3,0(r7)
    bf04:	84000104 	addi	r16,r16,4
    bf08:	28bfffcc 	andi	r2,r5,65535
    bf0c:	2085883a 	add	r2,r4,r2
    bf10:	11bfffcc 	andi	r6,r2,65535
    bf14:	193fffcc 	andi	r4,r3,65535
    bf18:	1004d43a 	srli	r2,r2,16
    bf1c:	280ad43a 	srli	r5,r5,16
    bf20:	2189c83a 	sub	r4,r4,r6
    bf24:	2209883a 	add	r4,r4,r8
    bf28:	1806d43a 	srli	r3,r3,16
    bf2c:	288b883a 	add	r5,r5,r2
    bf30:	200dd43a 	srai	r6,r4,16
    bf34:	28bfffcc 	andi	r2,r5,65535
    bf38:	1887c83a 	sub	r3,r3,r2
    bf3c:	1987883a 	add	r3,r3,r6
    bf40:	3900000d 	sth	r4,0(r7)
    bf44:	38c0008d 	sth	r3,2(r7)
    bf48:	2808d43a 	srli	r4,r5,16
    bf4c:	39c00104 	addi	r7,r7,4
    bf50:	1811d43a 	srai	r8,r3,16
    bf54:	943fe92e 	bgeu	r18,r16,befc <quorem+0x98>
    bf58:	8c45883a 	add	r2,r17,r17
    bf5c:	1085883a 	add	r2,r2,r2
    bf60:	9885883a 	add	r2,r19,r2
    bf64:	10c00017 	ldw	r3,0(r2)
    bf68:	18000b1e 	bne	r3,zero,bf98 <quorem+0x134>
    bf6c:	113fff04 	addi	r4,r2,-4
    bf70:	9900082e 	bgeu	r19,r4,bf94 <quorem+0x130>
    bf74:	10bfff17 	ldw	r2,-4(r2)
    bf78:	10000326 	beq	r2,zero,bf88 <quorem+0x124>
    bf7c:	00000506 	br	bf94 <quorem+0x130>
    bf80:	20800017 	ldw	r2,0(r4)
    bf84:	1000031e 	bne	r2,zero,bf94 <quorem+0x130>
    bf88:	213fff04 	addi	r4,r4,-4
    bf8c:	8c7fffc4 	addi	r17,r17,-1
    bf90:	993ffb36 	bltu	r19,r4,bf80 <quorem+0x11c>
    bf94:	bc400415 	stw	r17,16(r23)
    bf98:	a005883a 	mov	r2,r20
    bf9c:	dfc00917 	ldw	ra,36(sp)
    bfa0:	df000817 	ldw	fp,32(sp)
    bfa4:	ddc00717 	ldw	r23,28(sp)
    bfa8:	dd800617 	ldw	r22,24(sp)
    bfac:	dd400517 	ldw	r21,20(sp)
    bfb0:	dd000417 	ldw	r20,16(sp)
    bfb4:	dcc00317 	ldw	r19,12(sp)
    bfb8:	dc800217 	ldw	r18,8(sp)
    bfbc:	dc400117 	ldw	r17,4(sp)
    bfc0:	dc000017 	ldw	r16,0(sp)
    bfc4:	dec00a04 	addi	sp,sp,40
    bfc8:	f800283a 	ret
    bfcc:	980f883a 	mov	r7,r19
    bfd0:	8011883a 	mov	r8,r16
    bfd4:	0013883a 	mov	r9,zero
    bfd8:	000d883a 	mov	r6,zero
    bfdc:	40c00017 	ldw	r3,0(r8)
    bfe0:	39000017 	ldw	r4,0(r7)
    bfe4:	42000104 	addi	r8,r8,4
    bfe8:	18bfffcc 	andi	r2,r3,65535
    bfec:	a085383a 	mul	r2,r20,r2
    bff0:	1806d43a 	srli	r3,r3,16
    bff4:	217fffcc 	andi	r5,r4,65535
    bff8:	3085883a 	add	r2,r6,r2
    bffc:	11bfffcc 	andi	r6,r2,65535
    c000:	a0c7383a 	mul	r3,r20,r3
    c004:	1004d43a 	srli	r2,r2,16
    c008:	298bc83a 	sub	r5,r5,r6
    c00c:	2a4b883a 	add	r5,r5,r9
    c010:	2008d43a 	srli	r4,r4,16
    c014:	1887883a 	add	r3,r3,r2
    c018:	280dd43a 	srai	r6,r5,16
    c01c:	18bfffcc 	andi	r2,r3,65535
    c020:	2089c83a 	sub	r4,r4,r2
    c024:	2189883a 	add	r4,r4,r6
    c028:	3900008d 	sth	r4,2(r7)
    c02c:	3940000d 	sth	r5,0(r7)
    c030:	180cd43a 	srli	r6,r3,16
    c034:	39c00104 	addi	r7,r7,4
    c038:	2013d43a 	srai	r9,r4,16
    c03c:	923fe72e 	bgeu	r18,r8,bfdc <quorem+0x178>
    c040:	e03fa61e 	bne	fp,zero,bedc <quorem+0x78>
    c044:	b0ffff04 	addi	r3,r22,-4
    c048:	98c0082e 	bgeu	r19,r3,c06c <quorem+0x208>
    c04c:	b0bfff17 	ldw	r2,-4(r22)
    c050:	10000326 	beq	r2,zero,c060 <quorem+0x1fc>
    c054:	00000506 	br	c06c <quorem+0x208>
    c058:	18800017 	ldw	r2,0(r3)
    c05c:	1000031e 	bne	r2,zero,c06c <quorem+0x208>
    c060:	18ffff04 	addi	r3,r3,-4
    c064:	8c7fffc4 	addi	r17,r17,-1
    c068:	98fffb36 	bltu	r19,r3,c058 <quorem+0x1f4>
    c06c:	bc400415 	stw	r17,16(r23)
    c070:	003f9a06 	br	bedc <quorem+0x78>
    c074:	0005883a 	mov	r2,zero
    c078:	003fc806 	br	bf9c <quorem+0x138>

0000c07c <_dtoa_r>:
    c07c:	22001017 	ldw	r8,64(r4)
    c080:	deffda04 	addi	sp,sp,-152
    c084:	dd402115 	stw	r21,132(sp)
    c088:	dd002015 	stw	r20,128(sp)
    c08c:	dc801e15 	stw	r18,120(sp)
    c090:	dc401d15 	stw	r17,116(sp)
    c094:	dfc02515 	stw	ra,148(sp)
    c098:	df002415 	stw	fp,144(sp)
    c09c:	ddc02315 	stw	r23,140(sp)
    c0a0:	dd802215 	stw	r22,136(sp)
    c0a4:	dcc01f15 	stw	r19,124(sp)
    c0a8:	dc001c15 	stw	r16,112(sp)
    c0ac:	d9001615 	stw	r4,88(sp)
    c0b0:	3023883a 	mov	r17,r6
    c0b4:	2829883a 	mov	r20,r5
    c0b8:	d9c01715 	stw	r7,92(sp)
    c0bc:	dc802817 	ldw	r18,160(sp)
    c0c0:	302b883a 	mov	r21,r6
    c0c4:	40000a26 	beq	r8,zero,c0f0 <_dtoa_r+0x74>
    c0c8:	20801117 	ldw	r2,68(r4)
    c0cc:	400b883a 	mov	r5,r8
    c0d0:	40800115 	stw	r2,4(r8)
    c0d4:	20c01117 	ldw	r3,68(r4)
    c0d8:	00800044 	movi	r2,1
    c0dc:	10c4983a 	sll	r2,r2,r3
    c0e0:	40800215 	stw	r2,8(r8)
    c0e4:	000fc600 	call	fc60 <_Bfree>
    c0e8:	d8c01617 	ldw	r3,88(sp)
    c0ec:	18001015 	stw	zero,64(r3)
    c0f0:	8800a316 	blt	r17,zero,c380 <_dtoa_r+0x304>
    c0f4:	90000015 	stw	zero,0(r18)
    c0f8:	a8dffc2c 	andhi	r3,r21,32752
    c0fc:	009ffc34 	movhi	r2,32752
    c100:	18809126 	beq	r3,r2,c348 <_dtoa_r+0x2cc>
    c104:	000d883a 	mov	r6,zero
    c108:	000f883a 	mov	r7,zero
    c10c:	a009883a 	mov	r4,r20
    c110:	a80b883a 	mov	r5,r21
    c114:	dd001215 	stw	r20,72(sp)
    c118:	dd401315 	stw	r21,76(sp)
    c11c:	0012b1c0 	call	12b1c <__nedf2>
    c120:	1000171e 	bne	r2,zero,c180 <_dtoa_r+0x104>
    c124:	d9802717 	ldw	r6,156(sp)
    c128:	00800044 	movi	r2,1
    c12c:	30800015 	stw	r2,0(r6)
    c130:	d8802917 	ldw	r2,164(sp)
    c134:	10029b26 	beq	r2,zero,cba4 <_dtoa_r+0xb28>
    c138:	d9002917 	ldw	r4,164(sp)
    c13c:	00820034 	movhi	r2,2048
    c140:	10816b44 	addi	r2,r2,1453
    c144:	10ffffc4 	addi	r3,r2,-1
    c148:	20800015 	stw	r2,0(r4)
    c14c:	1805883a 	mov	r2,r3
    c150:	dfc02517 	ldw	ra,148(sp)
    c154:	df002417 	ldw	fp,144(sp)
    c158:	ddc02317 	ldw	r23,140(sp)
    c15c:	dd802217 	ldw	r22,136(sp)
    c160:	dd402117 	ldw	r21,132(sp)
    c164:	dd002017 	ldw	r20,128(sp)
    c168:	dcc01f17 	ldw	r19,124(sp)
    c16c:	dc801e17 	ldw	r18,120(sp)
    c170:	dc401d17 	ldw	r17,116(sp)
    c174:	dc001c17 	ldw	r16,112(sp)
    c178:	dec02604 	addi	sp,sp,152
    c17c:	f800283a 	ret
    c180:	d9001617 	ldw	r4,88(sp)
    c184:	d9401217 	ldw	r5,72(sp)
    c188:	d8800104 	addi	r2,sp,4
    c18c:	a80d883a 	mov	r6,r21
    c190:	d9c00204 	addi	r7,sp,8
    c194:	d8800015 	stw	r2,0(sp)
    c198:	001029c0 	call	1029c <__d2b>
    c19c:	d8800715 	stw	r2,28(sp)
    c1a0:	a804d53a 	srli	r2,r21,20
    c1a4:	1101ffcc 	andi	r4,r2,2047
    c1a8:	20008626 	beq	r4,zero,c3c4 <_dtoa_r+0x348>
    c1ac:	d8c01217 	ldw	r3,72(sp)
    c1b0:	00800434 	movhi	r2,16
    c1b4:	10bfffc4 	addi	r2,r2,-1
    c1b8:	ddc00117 	ldw	r23,4(sp)
    c1bc:	a884703a 	and	r2,r21,r2
    c1c0:	1811883a 	mov	r8,r3
    c1c4:	124ffc34 	orhi	r9,r2,16368
    c1c8:	25bf0044 	addi	r22,r4,-1023
    c1cc:	d8000815 	stw	zero,32(sp)
    c1d0:	0005883a 	mov	r2,zero
    c1d4:	00cffe34 	movhi	r3,16376
    c1d8:	480b883a 	mov	r5,r9
    c1dc:	4009883a 	mov	r4,r8
    c1e0:	180f883a 	mov	r7,r3
    c1e4:	100d883a 	mov	r6,r2
    c1e8:	00071fc0 	call	71fc <__subdf3>
    c1ec:	0218dbf4 	movhi	r8,25455
    c1f0:	4210d844 	addi	r8,r8,17249
    c1f4:	024ff4f4 	movhi	r9,16339
    c1f8:	4a61e9c4 	addi	r9,r9,-30809
    c1fc:	480f883a 	mov	r7,r9
    c200:	400d883a 	mov	r6,r8
    c204:	180b883a 	mov	r5,r3
    c208:	1009883a 	mov	r4,r2
    c20c:	00072f00 	call	72f0 <__muldf3>
    c210:	0222d874 	movhi	r8,35681
    c214:	42322cc4 	addi	r8,r8,-14157
    c218:	024ff1f4 	movhi	r9,16327
    c21c:	4a628a04 	addi	r9,r9,-30168
    c220:	480f883a 	mov	r7,r9
    c224:	400d883a 	mov	r6,r8
    c228:	180b883a 	mov	r5,r3
    c22c:	1009883a 	mov	r4,r2
    c230:	000727c0 	call	727c <__adddf3>
    c234:	b009883a 	mov	r4,r22
    c238:	1021883a 	mov	r16,r2
    c23c:	1823883a 	mov	r17,r3
    c240:	0007aa40 	call	7aa4 <__floatsidf>
    c244:	021427f4 	movhi	r8,20639
    c248:	421e7ec4 	addi	r8,r8,31227
    c24c:	024ff4f4 	movhi	r9,16339
    c250:	4a5104c4 	addi	r9,r9,17427
    c254:	480f883a 	mov	r7,r9
    c258:	400d883a 	mov	r6,r8
    c25c:	180b883a 	mov	r5,r3
    c260:	1009883a 	mov	r4,r2
    c264:	00072f00 	call	72f0 <__muldf3>
    c268:	180f883a 	mov	r7,r3
    c26c:	880b883a 	mov	r5,r17
    c270:	100d883a 	mov	r6,r2
    c274:	8009883a 	mov	r4,r16
    c278:	000727c0 	call	727c <__adddf3>
    c27c:	1009883a 	mov	r4,r2
    c280:	180b883a 	mov	r5,r3
    c284:	1021883a 	mov	r16,r2
    c288:	1823883a 	mov	r17,r3
    c28c:	0007b9c0 	call	7b9c <__fixdfsi>
    c290:	000d883a 	mov	r6,zero
    c294:	000f883a 	mov	r7,zero
    c298:	8009883a 	mov	r4,r16
    c29c:	880b883a 	mov	r5,r17
    c2a0:	d8800d15 	stw	r2,52(sp)
    c2a4:	0012ba40 	call	12ba4 <__ltdf2>
    c2a8:	10031716 	blt	r2,zero,cf08 <_dtoa_r+0xe8c>
    c2ac:	d8c00d17 	ldw	r3,52(sp)
    c2b0:	00800584 	movi	r2,22
    c2b4:	10c1482e 	bgeu	r2,r3,c7d8 <_dtoa_r+0x75c>
    c2b8:	01000044 	movi	r4,1
    c2bc:	d9000c15 	stw	r4,48(sp)
    c2c0:	bd85c83a 	sub	r2,r23,r22
    c2c4:	11bfffc4 	addi	r6,r2,-1
    c2c8:	30030b16 	blt	r6,zero,cef8 <_dtoa_r+0xe7c>
    c2cc:	d9800a15 	stw	r6,40(sp)
    c2d0:	d8001115 	stw	zero,68(sp)
    c2d4:	d8c00d17 	ldw	r3,52(sp)
    c2d8:	1802ff16 	blt	r3,zero,ced8 <_dtoa_r+0xe5c>
    c2dc:	d9000a17 	ldw	r4,40(sp)
    c2e0:	d8c00915 	stw	r3,36(sp)
    c2e4:	d8001015 	stw	zero,64(sp)
    c2e8:	20c9883a 	add	r4,r4,r3
    c2ec:	d9000a15 	stw	r4,40(sp)
    c2f0:	d9001717 	ldw	r4,92(sp)
    c2f4:	00800244 	movi	r2,9
    c2f8:	11004636 	bltu	r2,r4,c414 <_dtoa_r+0x398>
    c2fc:	00800144 	movi	r2,5
    c300:	11020416 	blt	r2,r4,cb14 <_dtoa_r+0xa98>
    c304:	04400044 	movi	r17,1
    c308:	d8c01717 	ldw	r3,92(sp)
    c30c:	00800144 	movi	r2,5
    c310:	10c1ed36 	bltu	r2,r3,cac8 <_dtoa_r+0xa4c>
    c314:	18c5883a 	add	r2,r3,r3
    c318:	1085883a 	add	r2,r2,r2
    c31c:	00c00074 	movhi	r3,1
    c320:	18f0cc04 	addi	r3,r3,-15568
    c324:	10c5883a 	add	r2,r2,r3
    c328:	11000017 	ldw	r4,0(r2)
    c32c:	2000683a 	jmp	r4
    c330:	0000c41c 	xori	zero,zero,784
    c334:	0000c41c 	xori	zero,zero,784
    c338:	0000ce1c 	xori	zero,zero,824
    c33c:	0000cdf4 	movhi	zero,823
    c340:	0000ce38 	rdprs	zero,zero,824
    c344:	0000ce44 	movi	zero,825
    c348:	d9002717 	ldw	r4,156(sp)
    c34c:	0089c3c4 	movi	r2,9999
    c350:	20800015 	stw	r2,0(r4)
    c354:	a0001026 	beq	r20,zero,c398 <_dtoa_r+0x31c>
    c358:	00c20034 	movhi	r3,2048
    c35c:	18c17704 	addi	r3,r3,1500
    c360:	d9802917 	ldw	r6,164(sp)
    c364:	303f7926 	beq	r6,zero,c14c <_dtoa_r+0xd0>
    c368:	188000c7 	ldb	r2,3(r3)
    c36c:	190000c4 	addi	r4,r3,3
    c370:	1000101e 	bne	r2,zero,c3b4 <_dtoa_r+0x338>
    c374:	d8802917 	ldw	r2,164(sp)
    c378:	11000015 	stw	r4,0(r2)
    c37c:	003f7306 	br	c14c <_dtoa_r+0xd0>
    c380:	00a00034 	movhi	r2,32768
    c384:	10bfffc4 	addi	r2,r2,-1
    c388:	00c00044 	movi	r3,1
    c38c:	88aa703a 	and	r21,r17,r2
    c390:	90c00015 	stw	r3,0(r18)
    c394:	003f5806 	br	c0f8 <_dtoa_r+0x7c>
    c398:	00800434 	movhi	r2,16
    c39c:	10bfffc4 	addi	r2,r2,-1
    c3a0:	a884703a 	and	r2,r21,r2
    c3a4:	103fec1e 	bne	r2,zero,c358 <_dtoa_r+0x2dc>
    c3a8:	00c20034 	movhi	r3,2048
    c3ac:	18c17404 	addi	r3,r3,1488
    c3b0:	003feb06 	br	c360 <_dtoa_r+0x2e4>
    c3b4:	d8802917 	ldw	r2,164(sp)
    c3b8:	19000204 	addi	r4,r3,8
    c3bc:	11000015 	stw	r4,0(r2)
    c3c0:	003f6206 	br	c14c <_dtoa_r+0xd0>
    c3c4:	ddc00117 	ldw	r23,4(sp)
    c3c8:	d8800217 	ldw	r2,8(sp)
    c3cc:	01000804 	movi	r4,32
    c3d0:	b8c10c84 	addi	r3,r23,1074
    c3d4:	18a3883a 	add	r17,r3,r2
    c3d8:	2441b80e 	bge	r4,r17,cabc <_dtoa_r+0xa40>
    c3dc:	00c01004 	movi	r3,64
    c3e0:	1c47c83a 	sub	r3,r3,r17
    c3e4:	88bff804 	addi	r2,r17,-32
    c3e8:	a8c6983a 	sll	r3,r21,r3
    c3ec:	a084d83a 	srl	r2,r20,r2
    c3f0:	1888b03a 	or	r4,r3,r2
    c3f4:	0012ca00 	call	12ca0 <__floatunsidf>
    c3f8:	1011883a 	mov	r8,r2
    c3fc:	00bf8434 	movhi	r2,65040
    c400:	01000044 	movi	r4,1
    c404:	10d3883a 	add	r9,r2,r3
    c408:	8dbef344 	addi	r22,r17,-1075
    c40c:	d9000815 	stw	r4,32(sp)
    c410:	003f6f06 	br	c1d0 <_dtoa_r+0x154>
    c414:	d8001715 	stw	zero,92(sp)
    c418:	04400044 	movi	r17,1
    c41c:	00bfffc4 	movi	r2,-1
    c420:	00c00044 	movi	r3,1
    c424:	d8800e15 	stw	r2,56(sp)
    c428:	d8002615 	stw	zero,152(sp)
    c42c:	d8800f15 	stw	r2,60(sp)
    c430:	d8c00b15 	stw	r3,44(sp)
    c434:	1021883a 	mov	r16,r2
    c438:	d8801617 	ldw	r2,88(sp)
    c43c:	10001115 	stw	zero,68(r2)
    c440:	d8801617 	ldw	r2,88(sp)
    c444:	11401117 	ldw	r5,68(r2)
    c448:	1009883a 	mov	r4,r2
    c44c:	00101e00 	call	101e0 <_Balloc>
    c450:	d8c01617 	ldw	r3,88(sp)
    c454:	d8800515 	stw	r2,20(sp)
    c458:	18801015 	stw	r2,64(r3)
    c45c:	00800384 	movi	r2,14
    c460:	14006836 	bltu	r2,r16,c604 <_dtoa_r+0x588>
    c464:	8805003a 	cmpeq	r2,r17,zero
    c468:	1000661e 	bne	r2,zero,c604 <_dtoa_r+0x588>
    c46c:	d9000d17 	ldw	r4,52(sp)
    c470:	0102300e 	bge	zero,r4,cd34 <_dtoa_r+0xcb8>
    c474:	208003cc 	andi	r2,r4,15
    c478:	100490fa 	slli	r2,r2,3
    c47c:	2025d13a 	srai	r18,r4,4
    c480:	00c20034 	movhi	r3,2048
    c484:	18c19004 	addi	r3,r3,1600
    c488:	10c5883a 	add	r2,r2,r3
    c48c:	90c0040c 	andi	r3,r18,16
    c490:	14000017 	ldw	r16,0(r2)
    c494:	14400117 	ldw	r17,4(r2)
    c498:	18036a1e 	bne	r3,zero,d244 <_dtoa_r+0x11c8>
    c49c:	05800084 	movi	r22,2
    c4a0:	90001026 	beq	r18,zero,c4e4 <_dtoa_r+0x468>
    c4a4:	04c20034 	movhi	r19,2048
    c4a8:	9cc1c204 	addi	r19,r19,1800
    c4ac:	9080004c 	andi	r2,r18,1
    c4b0:	1005003a 	cmpeq	r2,r2,zero
    c4b4:	1000081e 	bne	r2,zero,c4d8 <_dtoa_r+0x45c>
    c4b8:	99800017 	ldw	r6,0(r19)
    c4bc:	99c00117 	ldw	r7,4(r19)
    c4c0:	880b883a 	mov	r5,r17
    c4c4:	8009883a 	mov	r4,r16
    c4c8:	00072f00 	call	72f0 <__muldf3>
    c4cc:	1021883a 	mov	r16,r2
    c4d0:	b5800044 	addi	r22,r22,1
    c4d4:	1823883a 	mov	r17,r3
    c4d8:	9025d07a 	srai	r18,r18,1
    c4dc:	9cc00204 	addi	r19,r19,8
    c4e0:	903ff21e 	bne	r18,zero,c4ac <_dtoa_r+0x430>
    c4e4:	a80b883a 	mov	r5,r21
    c4e8:	a009883a 	mov	r4,r20
    c4ec:	880f883a 	mov	r7,r17
    c4f0:	800d883a 	mov	r6,r16
    c4f4:	00076b40 	call	76b4 <__divdf3>
    c4f8:	1029883a 	mov	r20,r2
    c4fc:	182b883a 	mov	r21,r3
    c500:	d8c00c17 	ldw	r3,48(sp)
    c504:	1805003a 	cmpeq	r2,r3,zero
    c508:	1000081e 	bne	r2,zero,c52c <_dtoa_r+0x4b0>
    c50c:	0005883a 	mov	r2,zero
    c510:	00cffc34 	movhi	r3,16368
    c514:	180f883a 	mov	r7,r3
    c518:	a009883a 	mov	r4,r20
    c51c:	a80b883a 	mov	r5,r21
    c520:	100d883a 	mov	r6,r2
    c524:	0012ba40 	call	12ba4 <__ltdf2>
    c528:	1003fe16 	blt	r2,zero,d524 <_dtoa_r+0x14a8>
    c52c:	b009883a 	mov	r4,r22
    c530:	0007aa40 	call	7aa4 <__floatsidf>
    c534:	180b883a 	mov	r5,r3
    c538:	1009883a 	mov	r4,r2
    c53c:	a00d883a 	mov	r6,r20
    c540:	a80f883a 	mov	r7,r21
    c544:	00072f00 	call	72f0 <__muldf3>
    c548:	0011883a 	mov	r8,zero
    c54c:	02500734 	movhi	r9,16412
    c550:	1009883a 	mov	r4,r2
    c554:	180b883a 	mov	r5,r3
    c558:	480f883a 	mov	r7,r9
    c55c:	400d883a 	mov	r6,r8
    c560:	000727c0 	call	727c <__adddf3>
    c564:	d9000f17 	ldw	r4,60(sp)
    c568:	102d883a 	mov	r22,r2
    c56c:	00bf3034 	movhi	r2,64704
    c570:	18b9883a 	add	fp,r3,r2
    c574:	e02f883a 	mov	r23,fp
    c578:	20028f1e 	bne	r4,zero,cfb8 <_dtoa_r+0xf3c>
    c57c:	0005883a 	mov	r2,zero
    c580:	00d00534 	movhi	r3,16404
    c584:	a009883a 	mov	r4,r20
    c588:	a80b883a 	mov	r5,r21
    c58c:	180f883a 	mov	r7,r3
    c590:	100d883a 	mov	r6,r2
    c594:	00071fc0 	call	71fc <__subdf3>
    c598:	1009883a 	mov	r4,r2
    c59c:	e00f883a 	mov	r7,fp
    c5a0:	180b883a 	mov	r5,r3
    c5a4:	b00d883a 	mov	r6,r22
    c5a8:	1025883a 	mov	r18,r2
    c5ac:	1827883a 	mov	r19,r3
    c5b0:	000790c0 	call	790c <__gtdf2>
    c5b4:	00834f16 	blt	zero,r2,d2f4 <_dtoa_r+0x1278>
    c5b8:	e0e0003c 	xorhi	r3,fp,32768
    c5bc:	9009883a 	mov	r4,r18
    c5c0:	980b883a 	mov	r5,r19
    c5c4:	180f883a 	mov	r7,r3
    c5c8:	b00d883a 	mov	r6,r22
    c5cc:	0012ba40 	call	12ba4 <__ltdf2>
    c5d0:	1000080e 	bge	r2,zero,c5f4 <_dtoa_r+0x578>
    c5d4:	0027883a 	mov	r19,zero
    c5d8:	0025883a 	mov	r18,zero
    c5dc:	d8802617 	ldw	r2,152(sp)
    c5e0:	df000517 	ldw	fp,20(sp)
    c5e4:	d8000615 	stw	zero,24(sp)
    c5e8:	0084303a 	nor	r2,zero,r2
    c5ec:	d8800d15 	stw	r2,52(sp)
    c5f0:	00019b06 	br	cc60 <_dtoa_r+0xbe4>
    c5f4:	d9801217 	ldw	r6,72(sp)
    c5f8:	d8801317 	ldw	r2,76(sp)
    c5fc:	3029883a 	mov	r20,r6
    c600:	102b883a 	mov	r21,r2
    c604:	d8c00217 	ldw	r3,8(sp)
    c608:	18008516 	blt	r3,zero,c820 <_dtoa_r+0x7a4>
    c60c:	d9000d17 	ldw	r4,52(sp)
    c610:	00800384 	movi	r2,14
    c614:	11008216 	blt	r2,r4,c820 <_dtoa_r+0x7a4>
    c618:	200490fa 	slli	r2,r4,3
    c61c:	d9802617 	ldw	r6,152(sp)
    c620:	00c20034 	movhi	r3,2048
    c624:	18c19004 	addi	r3,r3,1600
    c628:	10c5883a 	add	r2,r2,r3
    c62c:	14800017 	ldw	r18,0(r2)
    c630:	14c00117 	ldw	r19,4(r2)
    c634:	30031e16 	blt	r6,zero,d2b0 <_dtoa_r+0x1234>
    c638:	d9000517 	ldw	r4,20(sp)
    c63c:	d8c00f17 	ldw	r3,60(sp)
    c640:	a823883a 	mov	r17,r21
    c644:	a021883a 	mov	r16,r20
    c648:	192b883a 	add	r21,r3,r4
    c64c:	2039883a 	mov	fp,r4
    c650:	00000f06 	br	c690 <_dtoa_r+0x614>
    c654:	0005883a 	mov	r2,zero
    c658:	00d00934 	movhi	r3,16420
    c65c:	5009883a 	mov	r4,r10
    c660:	580b883a 	mov	r5,r11
    c664:	180f883a 	mov	r7,r3
    c668:	100d883a 	mov	r6,r2
    c66c:	00072f00 	call	72f0 <__muldf3>
    c670:	180b883a 	mov	r5,r3
    c674:	000d883a 	mov	r6,zero
    c678:	000f883a 	mov	r7,zero
    c67c:	1009883a 	mov	r4,r2
    c680:	1021883a 	mov	r16,r2
    c684:	1823883a 	mov	r17,r3
    c688:	0012b1c0 	call	12b1c <__nedf2>
    c68c:	10004526 	beq	r2,zero,c7a4 <_dtoa_r+0x728>
    c690:	900d883a 	mov	r6,r18
    c694:	980f883a 	mov	r7,r19
    c698:	8009883a 	mov	r4,r16
    c69c:	880b883a 	mov	r5,r17
    c6a0:	00076b40 	call	76b4 <__divdf3>
    c6a4:	180b883a 	mov	r5,r3
    c6a8:	1009883a 	mov	r4,r2
    c6ac:	0007b9c0 	call	7b9c <__fixdfsi>
    c6b0:	1009883a 	mov	r4,r2
    c6b4:	1029883a 	mov	r20,r2
    c6b8:	0007aa40 	call	7aa4 <__floatsidf>
    c6bc:	180f883a 	mov	r7,r3
    c6c0:	9009883a 	mov	r4,r18
    c6c4:	980b883a 	mov	r5,r19
    c6c8:	100d883a 	mov	r6,r2
    c6cc:	00072f00 	call	72f0 <__muldf3>
    c6d0:	180f883a 	mov	r7,r3
    c6d4:	880b883a 	mov	r5,r17
    c6d8:	8009883a 	mov	r4,r16
    c6dc:	100d883a 	mov	r6,r2
    c6e0:	00071fc0 	call	71fc <__subdf3>
    c6e4:	1015883a 	mov	r10,r2
    c6e8:	a0800c04 	addi	r2,r20,48
    c6ec:	e0800005 	stb	r2,0(fp)
    c6f0:	e7000044 	addi	fp,fp,1
    c6f4:	1817883a 	mov	r11,r3
    c6f8:	e57fd61e 	bne	fp,r21,c654 <_dtoa_r+0x5d8>
    c6fc:	500d883a 	mov	r6,r10
    c700:	180f883a 	mov	r7,r3
    c704:	5009883a 	mov	r4,r10
    c708:	180b883a 	mov	r5,r3
    c70c:	000727c0 	call	727c <__adddf3>
    c710:	100d883a 	mov	r6,r2
    c714:	9009883a 	mov	r4,r18
    c718:	980b883a 	mov	r5,r19
    c71c:	180f883a 	mov	r7,r3
    c720:	1021883a 	mov	r16,r2
    c724:	1823883a 	mov	r17,r3
    c728:	0012ba40 	call	12ba4 <__ltdf2>
    c72c:	10000816 	blt	r2,zero,c750 <_dtoa_r+0x6d4>
    c730:	980b883a 	mov	r5,r19
    c734:	800d883a 	mov	r6,r16
    c738:	880f883a 	mov	r7,r17
    c73c:	9009883a 	mov	r4,r18
    c740:	0012a940 	call	12a94 <__eqdf2>
    c744:	1000171e 	bne	r2,zero,c7a4 <_dtoa_r+0x728>
    c748:	a080004c 	andi	r2,r20,1
    c74c:	10001526 	beq	r2,zero,c7a4 <_dtoa_r+0x728>
    c750:	d8800d17 	ldw	r2,52(sp)
    c754:	d8800415 	stw	r2,16(sp)
    c758:	e009883a 	mov	r4,fp
    c75c:	213fffc4 	addi	r4,r4,-1
    c760:	20c00007 	ldb	r3,0(r4)
    c764:	00800e44 	movi	r2,57
    c768:	1880081e 	bne	r3,r2,c78c <_dtoa_r+0x710>
    c76c:	d8800517 	ldw	r2,20(sp)
    c770:	113ffa1e 	bne	r2,r4,c75c <_dtoa_r+0x6e0>
    c774:	d8c00417 	ldw	r3,16(sp)
    c778:	d9800517 	ldw	r6,20(sp)
    c77c:	00800c04 	movi	r2,48
    c780:	18c00044 	addi	r3,r3,1
    c784:	d8c00415 	stw	r3,16(sp)
    c788:	30800005 	stb	r2,0(r6)
    c78c:	20800003 	ldbu	r2,0(r4)
    c790:	d8c00417 	ldw	r3,16(sp)
    c794:	27000044 	addi	fp,r4,1
    c798:	10800044 	addi	r2,r2,1
    c79c:	d8c00d15 	stw	r3,52(sp)
    c7a0:	20800005 	stb	r2,0(r4)
    c7a4:	d9001617 	ldw	r4,88(sp)
    c7a8:	d9400717 	ldw	r5,28(sp)
    c7ac:	000fc600 	call	fc60 <_Bfree>
    c7b0:	e0000005 	stb	zero,0(fp)
    c7b4:	d9800d17 	ldw	r6,52(sp)
    c7b8:	d8c02717 	ldw	r3,156(sp)
    c7bc:	d9002917 	ldw	r4,164(sp)
    c7c0:	30800044 	addi	r2,r6,1
    c7c4:	18800015 	stw	r2,0(r3)
    c7c8:	20029c26 	beq	r4,zero,d23c <_dtoa_r+0x11c0>
    c7cc:	d8c00517 	ldw	r3,20(sp)
    c7d0:	27000015 	stw	fp,0(r4)
    c7d4:	003e5d06 	br	c14c <_dtoa_r+0xd0>
    c7d8:	d9800d17 	ldw	r6,52(sp)
    c7dc:	00c20034 	movhi	r3,2048
    c7e0:	18c19004 	addi	r3,r3,1600
    c7e4:	d9001217 	ldw	r4,72(sp)
    c7e8:	300490fa 	slli	r2,r6,3
    c7ec:	d9401317 	ldw	r5,76(sp)
    c7f0:	10c5883a 	add	r2,r2,r3
    c7f4:	12000017 	ldw	r8,0(r2)
    c7f8:	12400117 	ldw	r9,4(r2)
    c7fc:	400d883a 	mov	r6,r8
    c800:	480f883a 	mov	r7,r9
    c804:	0012ba40 	call	12ba4 <__ltdf2>
    c808:	1000030e 	bge	r2,zero,c818 <_dtoa_r+0x79c>
    c80c:	d8800d17 	ldw	r2,52(sp)
    c810:	10bfffc4 	addi	r2,r2,-1
    c814:	d8800d15 	stw	r2,52(sp)
    c818:	d8000c15 	stw	zero,48(sp)
    c81c:	003ea806 	br	c2c0 <_dtoa_r+0x244>
    c820:	d9000b17 	ldw	r4,44(sp)
    c824:	202cc03a 	cmpne	r22,r4,zero
    c828:	b000c71e 	bne	r22,zero,cb48 <_dtoa_r+0xacc>
    c82c:	dc001117 	ldw	r16,68(sp)
    c830:	dc801017 	ldw	r18,64(sp)
    c834:	0027883a 	mov	r19,zero
    c838:	04000b0e 	bge	zero,r16,c868 <_dtoa_r+0x7ec>
    c83c:	d8c00a17 	ldw	r3,40(sp)
    c840:	00c0090e 	bge	zero,r3,c868 <_dtoa_r+0x7ec>
    c844:	8005883a 	mov	r2,r16
    c848:	1c011316 	blt	r3,r16,cc98 <_dtoa_r+0xc1c>
    c84c:	d9000a17 	ldw	r4,40(sp)
    c850:	d9801117 	ldw	r6,68(sp)
    c854:	80a1c83a 	sub	r16,r16,r2
    c858:	2089c83a 	sub	r4,r4,r2
    c85c:	308dc83a 	sub	r6,r6,r2
    c860:	d9000a15 	stw	r4,40(sp)
    c864:	d9801115 	stw	r6,68(sp)
    c868:	d8801017 	ldw	r2,64(sp)
    c86c:	0080150e 	bge	zero,r2,c8c4 <_dtoa_r+0x848>
    c870:	d8c00b17 	ldw	r3,44(sp)
    c874:	1805003a 	cmpeq	r2,r3,zero
    c878:	1001c91e 	bne	r2,zero,cfa0 <_dtoa_r+0xf24>
    c87c:	04800e0e 	bge	zero,r18,c8b8 <_dtoa_r+0x83c>
    c880:	d9001617 	ldw	r4,88(sp)
    c884:	980b883a 	mov	r5,r19
    c888:	900d883a 	mov	r6,r18
    c88c:	0010a140 	call	10a14 <__pow5mult>
    c890:	d9001617 	ldw	r4,88(sp)
    c894:	d9800717 	ldw	r6,28(sp)
    c898:	100b883a 	mov	r5,r2
    c89c:	1027883a 	mov	r19,r2
    c8a0:	00106f00 	call	106f0 <__multiply>
    c8a4:	d9001617 	ldw	r4,88(sp)
    c8a8:	d9400717 	ldw	r5,28(sp)
    c8ac:	1023883a 	mov	r17,r2
    c8b0:	000fc600 	call	fc60 <_Bfree>
    c8b4:	dc400715 	stw	r17,28(sp)
    c8b8:	d9001017 	ldw	r4,64(sp)
    c8bc:	248dc83a 	sub	r6,r4,r18
    c8c0:	30010e1e 	bne	r6,zero,ccfc <_dtoa_r+0xc80>
    c8c4:	d9001617 	ldw	r4,88(sp)
    c8c8:	04400044 	movi	r17,1
    c8cc:	880b883a 	mov	r5,r17
    c8d0:	00108d80 	call	108d8 <__i2b>
    c8d4:	d9800917 	ldw	r6,36(sp)
    c8d8:	1025883a 	mov	r18,r2
    c8dc:	0180040e 	bge	zero,r6,c8f0 <_dtoa_r+0x874>
    c8e0:	d9001617 	ldw	r4,88(sp)
    c8e4:	100b883a 	mov	r5,r2
    c8e8:	0010a140 	call	10a14 <__pow5mult>
    c8ec:	1025883a 	mov	r18,r2
    c8f0:	d8801717 	ldw	r2,92(sp)
    c8f4:	8880f30e 	bge	r17,r2,ccc4 <_dtoa_r+0xc48>
    c8f8:	0023883a 	mov	r17,zero
    c8fc:	d9800917 	ldw	r6,36(sp)
    c900:	30019e1e 	bne	r6,zero,cf7c <_dtoa_r+0xf00>
    c904:	00c00044 	movi	r3,1
    c908:	d9000a17 	ldw	r4,40(sp)
    c90c:	20c5883a 	add	r2,r4,r3
    c910:	10c007cc 	andi	r3,r2,31
    c914:	1800841e 	bne	r3,zero,cb28 <_dtoa_r+0xaac>
    c918:	00800704 	movi	r2,28
    c91c:	d9000a17 	ldw	r4,40(sp)
    c920:	d9801117 	ldw	r6,68(sp)
    c924:	80a1883a 	add	r16,r16,r2
    c928:	2089883a 	add	r4,r4,r2
    c92c:	308d883a 	add	r6,r6,r2
    c930:	d9000a15 	stw	r4,40(sp)
    c934:	d9801115 	stw	r6,68(sp)
    c938:	d8801117 	ldw	r2,68(sp)
    c93c:	0080050e 	bge	zero,r2,c954 <_dtoa_r+0x8d8>
    c940:	d9400717 	ldw	r5,28(sp)
    c944:	d9001617 	ldw	r4,88(sp)
    c948:	100d883a 	mov	r6,r2
    c94c:	00105a40 	call	105a4 <__lshift>
    c950:	d8800715 	stw	r2,28(sp)
    c954:	d8c00a17 	ldw	r3,40(sp)
    c958:	00c0050e 	bge	zero,r3,c970 <_dtoa_r+0x8f4>
    c95c:	d9001617 	ldw	r4,88(sp)
    c960:	900b883a 	mov	r5,r18
    c964:	180d883a 	mov	r6,r3
    c968:	00105a40 	call	105a4 <__lshift>
    c96c:	1025883a 	mov	r18,r2
    c970:	d9000c17 	ldw	r4,48(sp)
    c974:	2005003a 	cmpeq	r2,r4,zero
    c978:	10016f26 	beq	r2,zero,cf38 <_dtoa_r+0xebc>
    c97c:	d9000f17 	ldw	r4,60(sp)
    c980:	0102170e 	bge	zero,r4,d1e0 <_dtoa_r+0x1164>
    c984:	d9800b17 	ldw	r6,44(sp)
    c988:	3005003a 	cmpeq	r2,r6,zero
    c98c:	1000881e 	bne	r2,zero,cbb0 <_dtoa_r+0xb34>
    c990:	0400050e 	bge	zero,r16,c9a8 <_dtoa_r+0x92c>
    c994:	d9001617 	ldw	r4,88(sp)
    c998:	980b883a 	mov	r5,r19
    c99c:	800d883a 	mov	r6,r16
    c9a0:	00105a40 	call	105a4 <__lshift>
    c9a4:	1027883a 	mov	r19,r2
    c9a8:	8804c03a 	cmpne	r2,r17,zero
    c9ac:	1002541e 	bne	r2,zero,d300 <_dtoa_r+0x1284>
    c9b0:	980b883a 	mov	r5,r19
    c9b4:	dd800517 	ldw	r22,20(sp)
    c9b8:	dcc00615 	stw	r19,24(sp)
    c9bc:	a700004c 	andi	fp,r20,1
    c9c0:	2827883a 	mov	r19,r5
    c9c4:	d9000717 	ldw	r4,28(sp)
    c9c8:	900b883a 	mov	r5,r18
    c9cc:	000be640 	call	be64 <quorem>
    c9d0:	d9000717 	ldw	r4,28(sp)
    c9d4:	d9400617 	ldw	r5,24(sp)
    c9d8:	1023883a 	mov	r17,r2
    c9dc:	8dc00c04 	addi	r23,r17,48
    c9e0:	000fdbc0 	call	fdbc <__mcmp>
    c9e4:	d9001617 	ldw	r4,88(sp)
    c9e8:	900b883a 	mov	r5,r18
    c9ec:	980d883a 	mov	r6,r19
    c9f0:	1029883a 	mov	r20,r2
    c9f4:	00104180 	call	10418 <__mdiff>
    c9f8:	102b883a 	mov	r21,r2
    c9fc:	10800317 	ldw	r2,12(r2)
    ca00:	1001281e 	bne	r2,zero,cea4 <_dtoa_r+0xe28>
    ca04:	d9000717 	ldw	r4,28(sp)
    ca08:	a80b883a 	mov	r5,r21
    ca0c:	000fdbc0 	call	fdbc <__mcmp>
    ca10:	d9001617 	ldw	r4,88(sp)
    ca14:	1021883a 	mov	r16,r2
    ca18:	a80b883a 	mov	r5,r21
    ca1c:	000fc600 	call	fc60 <_Bfree>
    ca20:	8000041e 	bne	r16,zero,ca34 <_dtoa_r+0x9b8>
    ca24:	d8801717 	ldw	r2,92(sp)
    ca28:	1000021e 	bne	r2,zero,ca34 <_dtoa_r+0x9b8>
    ca2c:	e004c03a 	cmpne	r2,fp,zero
    ca30:	10011726 	beq	r2,zero,ce90 <_dtoa_r+0xe14>
    ca34:	a0010616 	blt	r20,zero,ce50 <_dtoa_r+0xdd4>
    ca38:	a000041e 	bne	r20,zero,ca4c <_dtoa_r+0x9d0>
    ca3c:	d8c01717 	ldw	r3,92(sp)
    ca40:	1800021e 	bne	r3,zero,ca4c <_dtoa_r+0x9d0>
    ca44:	e004c03a 	cmpne	r2,fp,zero
    ca48:	10010126 	beq	r2,zero,ce50 <_dtoa_r+0xdd4>
    ca4c:	04023d16 	blt	zero,r16,d344 <_dtoa_r+0x12c8>
    ca50:	b5c00005 	stb	r23,0(r22)
    ca54:	d9800517 	ldw	r6,20(sp)
    ca58:	d9000f17 	ldw	r4,60(sp)
    ca5c:	b5800044 	addi	r22,r22,1
    ca60:	3105883a 	add	r2,r6,r4
    ca64:	b0806526 	beq	r22,r2,cbfc <_dtoa_r+0xb80>
    ca68:	d9400717 	ldw	r5,28(sp)
    ca6c:	d9001617 	ldw	r4,88(sp)
    ca70:	01800284 	movi	r6,10
    ca74:	000f883a 	mov	r7,zero
    ca78:	00109140 	call	10914 <__multadd>
    ca7c:	d8800715 	stw	r2,28(sp)
    ca80:	d8800617 	ldw	r2,24(sp)
    ca84:	14c10c26 	beq	r2,r19,ceb8 <_dtoa_r+0xe3c>
    ca88:	d9400617 	ldw	r5,24(sp)
    ca8c:	d9001617 	ldw	r4,88(sp)
    ca90:	01800284 	movi	r6,10
    ca94:	000f883a 	mov	r7,zero
    ca98:	00109140 	call	10914 <__multadd>
    ca9c:	d9001617 	ldw	r4,88(sp)
    caa0:	980b883a 	mov	r5,r19
    caa4:	01800284 	movi	r6,10
    caa8:	000f883a 	mov	r7,zero
    caac:	d8800615 	stw	r2,24(sp)
    cab0:	00109140 	call	10914 <__multadd>
    cab4:	1027883a 	mov	r19,r2
    cab8:	003fc206 	br	c9c4 <_dtoa_r+0x948>
    cabc:	2445c83a 	sub	r2,r4,r17
    cac0:	a088983a 	sll	r4,r20,r2
    cac4:	003e4b06 	br	c3f4 <_dtoa_r+0x378>
    cac8:	01bfffc4 	movi	r6,-1
    cacc:	00800044 	movi	r2,1
    cad0:	d9800e15 	stw	r6,56(sp)
    cad4:	d9800f15 	stw	r6,60(sp)
    cad8:	d8800b15 	stw	r2,44(sp)
    cadc:	d8c01617 	ldw	r3,88(sp)
    cae0:	008005c4 	movi	r2,23
    cae4:	18001115 	stw	zero,68(r3)
    cae8:	1580082e 	bgeu	r2,r22,cb0c <_dtoa_r+0xa90>
    caec:	00c00104 	movi	r3,4
    caf0:	0009883a 	mov	r4,zero
    caf4:	18c7883a 	add	r3,r3,r3
    caf8:	18800504 	addi	r2,r3,20
    cafc:	21000044 	addi	r4,r4,1
    cb00:	b0bffc2e 	bgeu	r22,r2,caf4 <_dtoa_r+0xa78>
    cb04:	d9801617 	ldw	r6,88(sp)
    cb08:	31001115 	stw	r4,68(r6)
    cb0c:	dc000f17 	ldw	r16,60(sp)
    cb10:	003e4b06 	br	c440 <_dtoa_r+0x3c4>
    cb14:	d9801717 	ldw	r6,92(sp)
    cb18:	0023883a 	mov	r17,zero
    cb1c:	31bfff04 	addi	r6,r6,-4
    cb20:	d9801715 	stw	r6,92(sp)
    cb24:	003df806 	br	c308 <_dtoa_r+0x28c>
    cb28:	00800804 	movi	r2,32
    cb2c:	10c9c83a 	sub	r4,r2,r3
    cb30:	00c00104 	movi	r3,4
    cb34:	19005a16 	blt	r3,r4,cca0 <_dtoa_r+0xc24>
    cb38:	008000c4 	movi	r2,3
    cb3c:	113f7e16 	blt	r2,r4,c938 <_dtoa_r+0x8bc>
    cb40:	20800704 	addi	r2,r4,28
    cb44:	003f7506 	br	c91c <_dtoa_r+0x8a0>
    cb48:	d9801717 	ldw	r6,92(sp)
    cb4c:	00800044 	movi	r2,1
    cb50:	1180a10e 	bge	r2,r6,cdd8 <_dtoa_r+0xd5c>
    cb54:	d9800f17 	ldw	r6,60(sp)
    cb58:	d8c01017 	ldw	r3,64(sp)
    cb5c:	30bfffc4 	addi	r2,r6,-1
    cb60:	1881c616 	blt	r3,r2,d27c <_dtoa_r+0x1200>
    cb64:	18a5c83a 	sub	r18,r3,r2
    cb68:	d8800f17 	ldw	r2,60(sp)
    cb6c:	10026216 	blt	r2,zero,d4f8 <_dtoa_r+0x147c>
    cb70:	dc001117 	ldw	r16,68(sp)
    cb74:	1007883a 	mov	r3,r2
    cb78:	d9800a17 	ldw	r6,40(sp)
    cb7c:	d8801117 	ldw	r2,68(sp)
    cb80:	d9001617 	ldw	r4,88(sp)
    cb84:	30cd883a 	add	r6,r6,r3
    cb88:	10c5883a 	add	r2,r2,r3
    cb8c:	01400044 	movi	r5,1
    cb90:	d9800a15 	stw	r6,40(sp)
    cb94:	d8801115 	stw	r2,68(sp)
    cb98:	00108d80 	call	108d8 <__i2b>
    cb9c:	1027883a 	mov	r19,r2
    cba0:	003f2506 	br	c838 <_dtoa_r+0x7bc>
    cba4:	00c20034 	movhi	r3,2048
    cba8:	18c16b04 	addi	r3,r3,1452
    cbac:	003d6706 	br	c14c <_dtoa_r+0xd0>
    cbb0:	dd800517 	ldw	r22,20(sp)
    cbb4:	04000044 	movi	r16,1
    cbb8:	00000706 	br	cbd8 <_dtoa_r+0xb5c>
    cbbc:	d9400717 	ldw	r5,28(sp)
    cbc0:	d9001617 	ldw	r4,88(sp)
    cbc4:	01800284 	movi	r6,10
    cbc8:	000f883a 	mov	r7,zero
    cbcc:	00109140 	call	10914 <__multadd>
    cbd0:	d8800715 	stw	r2,28(sp)
    cbd4:	84000044 	addi	r16,r16,1
    cbd8:	d9000717 	ldw	r4,28(sp)
    cbdc:	900b883a 	mov	r5,r18
    cbe0:	000be640 	call	be64 <quorem>
    cbe4:	15c00c04 	addi	r23,r2,48
    cbe8:	b5c00005 	stb	r23,0(r22)
    cbec:	d8c00f17 	ldw	r3,60(sp)
    cbf0:	b5800044 	addi	r22,r22,1
    cbf4:	80fff116 	blt	r16,r3,cbbc <_dtoa_r+0xb40>
    cbf8:	d8000615 	stw	zero,24(sp)
    cbfc:	d9400717 	ldw	r5,28(sp)
    cc00:	d9001617 	ldw	r4,88(sp)
    cc04:	01800044 	movi	r6,1
    cc08:	00105a40 	call	105a4 <__lshift>
    cc0c:	1009883a 	mov	r4,r2
    cc10:	900b883a 	mov	r5,r18
    cc14:	d8800715 	stw	r2,28(sp)
    cc18:	000fdbc0 	call	fdbc <__mcmp>
    cc1c:	00803c0e 	bge	zero,r2,cd10 <_dtoa_r+0xc94>
    cc20:	b009883a 	mov	r4,r22
    cc24:	213fffc4 	addi	r4,r4,-1
    cc28:	21400003 	ldbu	r5,0(r4)
    cc2c:	00800e44 	movi	r2,57
    cc30:	28c03fcc 	andi	r3,r5,255
    cc34:	18c0201c 	xori	r3,r3,128
    cc38:	18ffe004 	addi	r3,r3,-128
    cc3c:	1881981e 	bne	r3,r2,d2a0 <_dtoa_r+0x1224>
    cc40:	d9800517 	ldw	r6,20(sp)
    cc44:	21bff71e 	bne	r4,r6,cc24 <_dtoa_r+0xba8>
    cc48:	d8800d17 	ldw	r2,52(sp)
    cc4c:	37000044 	addi	fp,r6,1
    cc50:	10800044 	addi	r2,r2,1
    cc54:	d8800d15 	stw	r2,52(sp)
    cc58:	00800c44 	movi	r2,49
    cc5c:	30800005 	stb	r2,0(r6)
    cc60:	d9001617 	ldw	r4,88(sp)
    cc64:	900b883a 	mov	r5,r18
    cc68:	000fc600 	call	fc60 <_Bfree>
    cc6c:	983ecd26 	beq	r19,zero,c7a4 <_dtoa_r+0x728>
    cc70:	d8c00617 	ldw	r3,24(sp)
    cc74:	18000426 	beq	r3,zero,cc88 <_dtoa_r+0xc0c>
    cc78:	1cc00326 	beq	r3,r19,cc88 <_dtoa_r+0xc0c>
    cc7c:	d9001617 	ldw	r4,88(sp)
    cc80:	180b883a 	mov	r5,r3
    cc84:	000fc600 	call	fc60 <_Bfree>
    cc88:	d9001617 	ldw	r4,88(sp)
    cc8c:	980b883a 	mov	r5,r19
    cc90:	000fc600 	call	fc60 <_Bfree>
    cc94:	003ec306 	br	c7a4 <_dtoa_r+0x728>
    cc98:	1805883a 	mov	r2,r3
    cc9c:	003eeb06 	br	c84c <_dtoa_r+0x7d0>
    cca0:	d9800a17 	ldw	r6,40(sp)
    cca4:	d8c01117 	ldw	r3,68(sp)
    cca8:	20bfff04 	addi	r2,r4,-4
    ccac:	308d883a 	add	r6,r6,r2
    ccb0:	1887883a 	add	r3,r3,r2
    ccb4:	80a1883a 	add	r16,r16,r2
    ccb8:	d9800a15 	stw	r6,40(sp)
    ccbc:	d8c01115 	stw	r3,68(sp)
    ccc0:	003f1d06 	br	c938 <_dtoa_r+0x8bc>
    ccc4:	a03f0c1e 	bne	r20,zero,c8f8 <_dtoa_r+0x87c>
    ccc8:	00800434 	movhi	r2,16
    cccc:	10bfffc4 	addi	r2,r2,-1
    ccd0:	a884703a 	and	r2,r21,r2
    ccd4:	103f081e 	bne	r2,zero,c8f8 <_dtoa_r+0x87c>
    ccd8:	a89ffc2c 	andhi	r2,r21,32752
    ccdc:	103f0626 	beq	r2,zero,c8f8 <_dtoa_r+0x87c>
    cce0:	d8c01117 	ldw	r3,68(sp)
    cce4:	d9000a17 	ldw	r4,40(sp)
    cce8:	18c00044 	addi	r3,r3,1
    ccec:	21000044 	addi	r4,r4,1
    ccf0:	d8c01115 	stw	r3,68(sp)
    ccf4:	d9000a15 	stw	r4,40(sp)
    ccf8:	003f0006 	br	c8fc <_dtoa_r+0x880>
    ccfc:	d9400717 	ldw	r5,28(sp)
    cd00:	d9001617 	ldw	r4,88(sp)
    cd04:	0010a140 	call	10a14 <__pow5mult>
    cd08:	d8800715 	stw	r2,28(sp)
    cd0c:	003eed06 	br	c8c4 <_dtoa_r+0x848>
    cd10:	1000021e 	bne	r2,zero,cd1c <_dtoa_r+0xca0>
    cd14:	b880004c 	andi	r2,r23,1
    cd18:	103fc11e 	bne	r2,zero,cc20 <_dtoa_r+0xba4>
    cd1c:	b5bfffc4 	addi	r22,r22,-1
    cd20:	b0c00007 	ldb	r3,0(r22)
    cd24:	00800c04 	movi	r2,48
    cd28:	18bffc26 	beq	r3,r2,cd1c <_dtoa_r+0xca0>
    cd2c:	b7000044 	addi	fp,r22,1
    cd30:	003fcb06 	br	cc60 <_dtoa_r+0xbe4>
    cd34:	d9800d17 	ldw	r6,52(sp)
    cd38:	018fc83a 	sub	r7,zero,r6
    cd3c:	3801f726 	beq	r7,zero,d51c <_dtoa_r+0x14a0>
    cd40:	398003cc 	andi	r6,r7,15
    cd44:	300c90fa 	slli	r6,r6,3
    cd48:	01420034 	movhi	r5,2048
    cd4c:	29419004 	addi	r5,r5,1600
    cd50:	d9001217 	ldw	r4,72(sp)
    cd54:	314d883a 	add	r6,r6,r5
    cd58:	30c00117 	ldw	r3,4(r6)
    cd5c:	30800017 	ldw	r2,0(r6)
    cd60:	d9401317 	ldw	r5,76(sp)
    cd64:	3821d13a 	srai	r16,r7,4
    cd68:	100d883a 	mov	r6,r2
    cd6c:	180f883a 	mov	r7,r3
    cd70:	00072f00 	call	72f0 <__muldf3>
    cd74:	1011883a 	mov	r8,r2
    cd78:	1813883a 	mov	r9,r3
    cd7c:	1029883a 	mov	r20,r2
    cd80:	182b883a 	mov	r21,r3
    cd84:	8001e526 	beq	r16,zero,d51c <_dtoa_r+0x14a0>
    cd88:	05800084 	movi	r22,2
    cd8c:	04420034 	movhi	r17,2048
    cd90:	8c41c204 	addi	r17,r17,1800
    cd94:	8080004c 	andi	r2,r16,1
    cd98:	1005003a 	cmpeq	r2,r2,zero
    cd9c:	1000081e 	bne	r2,zero,cdc0 <_dtoa_r+0xd44>
    cda0:	89800017 	ldw	r6,0(r17)
    cda4:	89c00117 	ldw	r7,4(r17)
    cda8:	480b883a 	mov	r5,r9
    cdac:	4009883a 	mov	r4,r8
    cdb0:	00072f00 	call	72f0 <__muldf3>
    cdb4:	1011883a 	mov	r8,r2
    cdb8:	b5800044 	addi	r22,r22,1
    cdbc:	1813883a 	mov	r9,r3
    cdc0:	8021d07a 	srai	r16,r16,1
    cdc4:	8c400204 	addi	r17,r17,8
    cdc8:	803ff21e 	bne	r16,zero,cd94 <_dtoa_r+0xd18>
    cdcc:	4029883a 	mov	r20,r8
    cdd0:	482b883a 	mov	r21,r9
    cdd4:	003dca06 	br	c500 <_dtoa_r+0x484>
    cdd8:	d9000817 	ldw	r4,32(sp)
    cddc:	2005003a 	cmpeq	r2,r4,zero
    cde0:	1001f61e 	bne	r2,zero,d5bc <_dtoa_r+0x1540>
    cde4:	dc001117 	ldw	r16,68(sp)
    cde8:	dc801017 	ldw	r18,64(sp)
    cdec:	18c10cc4 	addi	r3,r3,1075
    cdf0:	003f6106 	br	cb78 <_dtoa_r+0xafc>
    cdf4:	d8000b15 	stw	zero,44(sp)
    cdf8:	d9802617 	ldw	r6,152(sp)
    cdfc:	d8c00d17 	ldw	r3,52(sp)
    ce00:	30800044 	addi	r2,r6,1
    ce04:	18ad883a 	add	r22,r3,r2
    ce08:	b13fffc4 	addi	r4,r22,-1
    ce0c:	d9000e15 	stw	r4,56(sp)
    ce10:	0581f60e 	bge	zero,r22,d5ec <_dtoa_r+0x1570>
    ce14:	dd800f15 	stw	r22,60(sp)
    ce18:	003f3006 	br	cadc <_dtoa_r+0xa60>
    ce1c:	d8000b15 	stw	zero,44(sp)
    ce20:	d9002617 	ldw	r4,152(sp)
    ce24:	0101eb0e 	bge	zero,r4,d5d4 <_dtoa_r+0x1558>
    ce28:	202d883a 	mov	r22,r4
    ce2c:	d9000e15 	stw	r4,56(sp)
    ce30:	d9000f15 	stw	r4,60(sp)
    ce34:	003f2906 	br	cadc <_dtoa_r+0xa60>
    ce38:	01800044 	movi	r6,1
    ce3c:	d9800b15 	stw	r6,44(sp)
    ce40:	003ff706 	br	ce20 <_dtoa_r+0xda4>
    ce44:	01000044 	movi	r4,1
    ce48:	d9000b15 	stw	r4,44(sp)
    ce4c:	003fea06 	br	cdf8 <_dtoa_r+0xd7c>
    ce50:	04000c0e 	bge	zero,r16,ce84 <_dtoa_r+0xe08>
    ce54:	d9400717 	ldw	r5,28(sp)
    ce58:	d9001617 	ldw	r4,88(sp)
    ce5c:	01800044 	movi	r6,1
    ce60:	00105a40 	call	105a4 <__lshift>
    ce64:	1009883a 	mov	r4,r2
    ce68:	900b883a 	mov	r5,r18
    ce6c:	d8800715 	stw	r2,28(sp)
    ce70:	000fdbc0 	call	fdbc <__mcmp>
    ce74:	0081e00e 	bge	zero,r2,d5f8 <_dtoa_r+0x157c>
    ce78:	bdc00044 	addi	r23,r23,1
    ce7c:	00800e84 	movi	r2,58
    ce80:	b881a226 	beq	r23,r2,d50c <_dtoa_r+0x1490>
    ce84:	b7000044 	addi	fp,r22,1
    ce88:	b5c00005 	stb	r23,0(r22)
    ce8c:	003f7406 	br	cc60 <_dtoa_r+0xbe4>
    ce90:	00800e44 	movi	r2,57
    ce94:	b8819d26 	beq	r23,r2,d50c <_dtoa_r+0x1490>
    ce98:	053ffa0e 	bge	zero,r20,ce84 <_dtoa_r+0xe08>
    ce9c:	8dc00c44 	addi	r23,r17,49
    cea0:	003ff806 	br	ce84 <_dtoa_r+0xe08>
    cea4:	d9001617 	ldw	r4,88(sp)
    cea8:	a80b883a 	mov	r5,r21
    ceac:	04000044 	movi	r16,1
    ceb0:	000fc600 	call	fc60 <_Bfree>
    ceb4:	003edf06 	br	ca34 <_dtoa_r+0x9b8>
    ceb8:	d9001617 	ldw	r4,88(sp)
    cebc:	980b883a 	mov	r5,r19
    cec0:	01800284 	movi	r6,10
    cec4:	000f883a 	mov	r7,zero
    cec8:	00109140 	call	10914 <__multadd>
    cecc:	1027883a 	mov	r19,r2
    ced0:	d8800615 	stw	r2,24(sp)
    ced4:	003ebb06 	br	c9c4 <_dtoa_r+0x948>
    ced8:	d9801117 	ldw	r6,68(sp)
    cedc:	d8800d17 	ldw	r2,52(sp)
    cee0:	d8000915 	stw	zero,36(sp)
    cee4:	308dc83a 	sub	r6,r6,r2
    cee8:	0087c83a 	sub	r3,zero,r2
    ceec:	d9801115 	stw	r6,68(sp)
    cef0:	d8c01015 	stw	r3,64(sp)
    cef4:	003cfe06 	br	c2f0 <_dtoa_r+0x274>
    cef8:	018dc83a 	sub	r6,zero,r6
    cefc:	d9801115 	stw	r6,68(sp)
    cf00:	d8000a15 	stw	zero,40(sp)
    cf04:	003cf306 	br	c2d4 <_dtoa_r+0x258>
    cf08:	d9000d17 	ldw	r4,52(sp)
    cf0c:	0007aa40 	call	7aa4 <__floatsidf>
    cf10:	880b883a 	mov	r5,r17
    cf14:	8009883a 	mov	r4,r16
    cf18:	180f883a 	mov	r7,r3
    cf1c:	100d883a 	mov	r6,r2
    cf20:	0012b1c0 	call	12b1c <__nedf2>
    cf24:	103ce126 	beq	r2,zero,c2ac <_dtoa_r+0x230>
    cf28:	d9800d17 	ldw	r6,52(sp)
    cf2c:	31bfffc4 	addi	r6,r6,-1
    cf30:	d9800d15 	stw	r6,52(sp)
    cf34:	003cdd06 	br	c2ac <_dtoa_r+0x230>
    cf38:	d9000717 	ldw	r4,28(sp)
    cf3c:	900b883a 	mov	r5,r18
    cf40:	000fdbc0 	call	fdbc <__mcmp>
    cf44:	103e8d0e 	bge	r2,zero,c97c <_dtoa_r+0x900>
    cf48:	d9400717 	ldw	r5,28(sp)
    cf4c:	d9001617 	ldw	r4,88(sp)
    cf50:	01800284 	movi	r6,10
    cf54:	000f883a 	mov	r7,zero
    cf58:	00109140 	call	10914 <__multadd>
    cf5c:	d9800d17 	ldw	r6,52(sp)
    cf60:	d8800715 	stw	r2,28(sp)
    cf64:	31bfffc4 	addi	r6,r6,-1
    cf68:	d9800d15 	stw	r6,52(sp)
    cf6c:	b001a71e 	bne	r22,zero,d60c <_dtoa_r+0x1590>
    cf70:	d8800e17 	ldw	r2,56(sp)
    cf74:	d8800f15 	stw	r2,60(sp)
    cf78:	003e8006 	br	c97c <_dtoa_r+0x900>
    cf7c:	90800417 	ldw	r2,16(r18)
    cf80:	1085883a 	add	r2,r2,r2
    cf84:	1085883a 	add	r2,r2,r2
    cf88:	1485883a 	add	r2,r2,r18
    cf8c:	11000417 	ldw	r4,16(r2)
    cf90:	000fc880 	call	fc88 <__hi0bits>
    cf94:	00c00804 	movi	r3,32
    cf98:	1887c83a 	sub	r3,r3,r2
    cf9c:	003e5a06 	br	c908 <_dtoa_r+0x88c>
    cfa0:	d9400717 	ldw	r5,28(sp)
    cfa4:	d9801017 	ldw	r6,64(sp)
    cfa8:	d9001617 	ldw	r4,88(sp)
    cfac:	0010a140 	call	10a14 <__pow5mult>
    cfb0:	d8800715 	stw	r2,28(sp)
    cfb4:	003e4306 	br	c8c4 <_dtoa_r+0x848>
    cfb8:	d9800f17 	ldw	r6,60(sp)
    cfbc:	d8800d17 	ldw	r2,52(sp)
    cfc0:	d9800315 	stw	r6,12(sp)
    cfc4:	d8800415 	stw	r2,16(sp)
    cfc8:	d8c00b17 	ldw	r3,44(sp)
    cfcc:	1805003a 	cmpeq	r2,r3,zero
    cfd0:	1000e21e 	bne	r2,zero,d35c <_dtoa_r+0x12e0>
    cfd4:	d9000317 	ldw	r4,12(sp)
    cfd8:	0005883a 	mov	r2,zero
    cfdc:	00cff834 	movhi	r3,16352
    cfe0:	200c90fa 	slli	r6,r4,3
    cfe4:	01020034 	movhi	r4,2048
    cfe8:	21019004 	addi	r4,r4,1600
    cfec:	180b883a 	mov	r5,r3
    cff0:	310d883a 	add	r6,r6,r4
    cff4:	327fff17 	ldw	r9,-4(r6)
    cff8:	323ffe17 	ldw	r8,-8(r6)
    cffc:	1009883a 	mov	r4,r2
    d000:	480f883a 	mov	r7,r9
    d004:	400d883a 	mov	r6,r8
    d008:	00076b40 	call	76b4 <__divdf3>
    d00c:	180b883a 	mov	r5,r3
    d010:	b00d883a 	mov	r6,r22
    d014:	b80f883a 	mov	r7,r23
    d018:	1009883a 	mov	r4,r2
    d01c:	00071fc0 	call	71fc <__subdf3>
    d020:	a80b883a 	mov	r5,r21
    d024:	a009883a 	mov	r4,r20
    d028:	d8c01915 	stw	r3,100(sp)
    d02c:	d8801815 	stw	r2,96(sp)
    d030:	0007b9c0 	call	7b9c <__fixdfsi>
    d034:	1009883a 	mov	r4,r2
    d038:	1027883a 	mov	r19,r2
    d03c:	0007aa40 	call	7aa4 <__floatsidf>
    d040:	a80b883a 	mov	r5,r21
    d044:	a009883a 	mov	r4,r20
    d048:	180f883a 	mov	r7,r3
    d04c:	100d883a 	mov	r6,r2
    d050:	00071fc0 	call	71fc <__subdf3>
    d054:	d9801817 	ldw	r6,96(sp)
    d058:	1823883a 	mov	r17,r3
    d05c:	d8801415 	stw	r2,80(sp)
    d060:	302d883a 	mov	r22,r6
    d064:	d9800517 	ldw	r6,20(sp)
    d068:	9cc00c04 	addi	r19,r19,48
    d06c:	dc401515 	stw	r17,84(sp)
    d070:	d8c01917 	ldw	r3,100(sp)
    d074:	34c00005 	stb	r19,0(r6)
    d078:	d8800517 	ldw	r2,20(sp)
    d07c:	d9401917 	ldw	r5,100(sp)
    d080:	d9801417 	ldw	r6,80(sp)
    d084:	b009883a 	mov	r4,r22
    d088:	880f883a 	mov	r7,r17
    d08c:	182f883a 	mov	r23,r3
    d090:	17000044 	addi	fp,r2,1
    d094:	000790c0 	call	790c <__gtdf2>
    d098:	00804e16 	blt	zero,r2,d1d4 <_dtoa_r+0x1158>
    d09c:	d9801417 	ldw	r6,80(sp)
    d0a0:	0005883a 	mov	r2,zero
    d0a4:	00cffc34 	movhi	r3,16368
    d0a8:	180b883a 	mov	r5,r3
    d0ac:	880f883a 	mov	r7,r17
    d0b0:	1009883a 	mov	r4,r2
    d0b4:	00071fc0 	call	71fc <__subdf3>
    d0b8:	d9401917 	ldw	r5,100(sp)
    d0bc:	180f883a 	mov	r7,r3
    d0c0:	b009883a 	mov	r4,r22
    d0c4:	100d883a 	mov	r6,r2
    d0c8:	000790c0 	call	790c <__gtdf2>
    d0cc:	00bda216 	blt	zero,r2,c758 <_dtoa_r+0x6dc>
    d0d0:	d8c00317 	ldw	r3,12(sp)
    d0d4:	00800044 	movi	r2,1
    d0d8:	10c01216 	blt	r2,r3,d124 <_dtoa_r+0x10a8>
    d0dc:	003d4506 	br	c5f4 <_dtoa_r+0x578>
    d0e0:	d9801417 	ldw	r6,80(sp)
    d0e4:	0005883a 	mov	r2,zero
    d0e8:	00cffc34 	movhi	r3,16368
    d0ec:	180b883a 	mov	r5,r3
    d0f0:	880f883a 	mov	r7,r17
    d0f4:	1009883a 	mov	r4,r2
    d0f8:	00071fc0 	call	71fc <__subdf3>
    d0fc:	d9c01b17 	ldw	r7,108(sp)
    d100:	180b883a 	mov	r5,r3
    d104:	1009883a 	mov	r4,r2
    d108:	b00d883a 	mov	r6,r22
    d10c:	0012ba40 	call	12ba4 <__ltdf2>
    d110:	103d9116 	blt	r2,zero,c758 <_dtoa_r+0x6dc>
    d114:	d9800517 	ldw	r6,20(sp)
    d118:	d9000317 	ldw	r4,12(sp)
    d11c:	3105883a 	add	r2,r6,r4
    d120:	e0bd3426 	beq	fp,r2,c5f4 <_dtoa_r+0x578>
    d124:	04500934 	movhi	r17,16420
    d128:	0021883a 	mov	r16,zero
    d12c:	b80b883a 	mov	r5,r23
    d130:	b009883a 	mov	r4,r22
    d134:	800d883a 	mov	r6,r16
    d138:	880f883a 	mov	r7,r17
    d13c:	00072f00 	call	72f0 <__muldf3>
    d140:	d9401517 	ldw	r5,84(sp)
    d144:	d9001417 	ldw	r4,80(sp)
    d148:	880f883a 	mov	r7,r17
    d14c:	000d883a 	mov	r6,zero
    d150:	d8801a15 	stw	r2,104(sp)
    d154:	d8c01b15 	stw	r3,108(sp)
    d158:	00072f00 	call	72f0 <__muldf3>
    d15c:	180b883a 	mov	r5,r3
    d160:	1009883a 	mov	r4,r2
    d164:	1823883a 	mov	r17,r3
    d168:	1021883a 	mov	r16,r2
    d16c:	0007b9c0 	call	7b9c <__fixdfsi>
    d170:	1009883a 	mov	r4,r2
    d174:	102b883a 	mov	r21,r2
    d178:	0007aa40 	call	7aa4 <__floatsidf>
    d17c:	880b883a 	mov	r5,r17
    d180:	8009883a 	mov	r4,r16
    d184:	180f883a 	mov	r7,r3
    d188:	100d883a 	mov	r6,r2
    d18c:	00071fc0 	call	71fc <__subdf3>
    d190:	1021883a 	mov	r16,r2
    d194:	d9001b17 	ldw	r4,108(sp)
    d198:	1823883a 	mov	r17,r3
    d19c:	dc001415 	stw	r16,80(sp)
    d1a0:	ad400c04 	addi	r21,r21,48
    d1a4:	dc401515 	stw	r17,84(sp)
    d1a8:	d8801a17 	ldw	r2,104(sp)
    d1ac:	e5400005 	stb	r21,0(fp)
    d1b0:	202f883a 	mov	r23,r4
    d1b4:	d9c01b17 	ldw	r7,108(sp)
    d1b8:	d9001417 	ldw	r4,80(sp)
    d1bc:	880b883a 	mov	r5,r17
    d1c0:	100d883a 	mov	r6,r2
    d1c4:	102d883a 	mov	r22,r2
    d1c8:	e7000044 	addi	fp,fp,1
    d1cc:	0012ba40 	call	12ba4 <__ltdf2>
    d1d0:	103fc30e 	bge	r2,zero,d0e0 <_dtoa_r+0x1064>
    d1d4:	d9000417 	ldw	r4,16(sp)
    d1d8:	d9000d15 	stw	r4,52(sp)
    d1dc:	003d7106 	br	c7a4 <_dtoa_r+0x728>
    d1e0:	d9801717 	ldw	r6,92(sp)
    d1e4:	00800084 	movi	r2,2
    d1e8:	11bde60e 	bge	r2,r6,c984 <_dtoa_r+0x908>
    d1ec:	203cfb1e 	bne	r4,zero,c5dc <_dtoa_r+0x560>
    d1f0:	d9001617 	ldw	r4,88(sp)
    d1f4:	900b883a 	mov	r5,r18
    d1f8:	01800144 	movi	r6,5
    d1fc:	000f883a 	mov	r7,zero
    d200:	00109140 	call	10914 <__multadd>
    d204:	d9000717 	ldw	r4,28(sp)
    d208:	100b883a 	mov	r5,r2
    d20c:	1025883a 	mov	r18,r2
    d210:	000fdbc0 	call	fdbc <__mcmp>
    d214:	00bcf10e 	bge	zero,r2,c5dc <_dtoa_r+0x560>
    d218:	d8c00d17 	ldw	r3,52(sp)
    d21c:	d9000517 	ldw	r4,20(sp)
    d220:	d8000615 	stw	zero,24(sp)
    d224:	18c00044 	addi	r3,r3,1
    d228:	d8c00d15 	stw	r3,52(sp)
    d22c:	00800c44 	movi	r2,49
    d230:	27000044 	addi	fp,r4,1
    d234:	20800005 	stb	r2,0(r4)
    d238:	003e8906 	br	cc60 <_dtoa_r+0xbe4>
    d23c:	d8c00517 	ldw	r3,20(sp)
    d240:	003bc206 	br	c14c <_dtoa_r+0xd0>
    d244:	01820034 	movhi	r6,2048
    d248:	3181c204 	addi	r6,r6,1800
    d24c:	30c00917 	ldw	r3,36(r6)
    d250:	30800817 	ldw	r2,32(r6)
    d254:	d9001217 	ldw	r4,72(sp)
    d258:	d9401317 	ldw	r5,76(sp)
    d25c:	180f883a 	mov	r7,r3
    d260:	100d883a 	mov	r6,r2
    d264:	00076b40 	call	76b4 <__divdf3>
    d268:	948003cc 	andi	r18,r18,15
    d26c:	058000c4 	movi	r22,3
    d270:	1029883a 	mov	r20,r2
    d274:	182b883a 	mov	r21,r3
    d278:	003c8906 	br	c4a0 <_dtoa_r+0x424>
    d27c:	d9001017 	ldw	r4,64(sp)
    d280:	d9800917 	ldw	r6,36(sp)
    d284:	0025883a 	mov	r18,zero
    d288:	1105c83a 	sub	r2,r2,r4
    d28c:	2089883a 	add	r4,r4,r2
    d290:	308d883a 	add	r6,r6,r2
    d294:	d9001015 	stw	r4,64(sp)
    d298:	d9800915 	stw	r6,36(sp)
    d29c:	003e3206 	br	cb68 <_dtoa_r+0xaec>
    d2a0:	28800044 	addi	r2,r5,1
    d2a4:	27000044 	addi	fp,r4,1
    d2a8:	20800005 	stb	r2,0(r4)
    d2ac:	003e6c06 	br	cc60 <_dtoa_r+0xbe4>
    d2b0:	d8800f17 	ldw	r2,60(sp)
    d2b4:	00bce016 	blt	zero,r2,c638 <_dtoa_r+0x5bc>
    d2b8:	d9800f17 	ldw	r6,60(sp)
    d2bc:	303cc51e 	bne	r6,zero,c5d4 <_dtoa_r+0x558>
    d2c0:	0005883a 	mov	r2,zero
    d2c4:	00d00534 	movhi	r3,16404
    d2c8:	980b883a 	mov	r5,r19
    d2cc:	180f883a 	mov	r7,r3
    d2d0:	9009883a 	mov	r4,r18
    d2d4:	100d883a 	mov	r6,r2
    d2d8:	00072f00 	call	72f0 <__muldf3>
    d2dc:	180b883a 	mov	r5,r3
    d2e0:	a80f883a 	mov	r7,r21
    d2e4:	1009883a 	mov	r4,r2
    d2e8:	a00d883a 	mov	r6,r20
    d2ec:	00079940 	call	7994 <__gedf2>
    d2f0:	103cb80e 	bge	r2,zero,c5d4 <_dtoa_r+0x558>
    d2f4:	0027883a 	mov	r19,zero
    d2f8:	0025883a 	mov	r18,zero
    d2fc:	003fc606 	br	d218 <_dtoa_r+0x119c>
    d300:	99400117 	ldw	r5,4(r19)
    d304:	d9001617 	ldw	r4,88(sp)
    d308:	00101e00 	call	101e0 <_Balloc>
    d30c:	99800417 	ldw	r6,16(r19)
    d310:	11000304 	addi	r4,r2,12
    d314:	99400304 	addi	r5,r19,12
    d318:	318d883a 	add	r6,r6,r6
    d31c:	318d883a 	add	r6,r6,r6
    d320:	31800204 	addi	r6,r6,8
    d324:	1023883a 	mov	r17,r2
    d328:	00083140 	call	8314 <memcpy>
    d32c:	d9001617 	ldw	r4,88(sp)
    d330:	880b883a 	mov	r5,r17
    d334:	01800044 	movi	r6,1
    d338:	00105a40 	call	105a4 <__lshift>
    d33c:	100b883a 	mov	r5,r2
    d340:	003d9c06 	br	c9b4 <_dtoa_r+0x938>
    d344:	00800e44 	movi	r2,57
    d348:	b8807026 	beq	r23,r2,d50c <_dtoa_r+0x1490>
    d34c:	b8800044 	addi	r2,r23,1
    d350:	b7000044 	addi	fp,r22,1
    d354:	b0800005 	stb	r2,0(r22)
    d358:	003e4106 	br	cc60 <_dtoa_r+0xbe4>
    d35c:	d8800317 	ldw	r2,12(sp)
    d360:	01820034 	movhi	r6,2048
    d364:	31819004 	addi	r6,r6,1600
    d368:	b009883a 	mov	r4,r22
    d36c:	100e90fa 	slli	r7,r2,3
    d370:	b80b883a 	mov	r5,r23
    d374:	398f883a 	add	r7,r7,r6
    d378:	38bffe17 	ldw	r2,-8(r7)
    d37c:	d9800517 	ldw	r6,20(sp)
    d380:	38ffff17 	ldw	r3,-4(r7)
    d384:	37000044 	addi	fp,r6,1
    d388:	180f883a 	mov	r7,r3
    d38c:	100d883a 	mov	r6,r2
    d390:	00072f00 	call	72f0 <__muldf3>
    d394:	a80b883a 	mov	r5,r21
    d398:	a009883a 	mov	r4,r20
    d39c:	182f883a 	mov	r23,r3
    d3a0:	102d883a 	mov	r22,r2
    d3a4:	0007b9c0 	call	7b9c <__fixdfsi>
    d3a8:	1009883a 	mov	r4,r2
    d3ac:	1027883a 	mov	r19,r2
    d3b0:	0007aa40 	call	7aa4 <__floatsidf>
    d3b4:	a80b883a 	mov	r5,r21
    d3b8:	a009883a 	mov	r4,r20
    d3bc:	180f883a 	mov	r7,r3
    d3c0:	100d883a 	mov	r6,r2
    d3c4:	00071fc0 	call	71fc <__subdf3>
    d3c8:	180b883a 	mov	r5,r3
    d3cc:	d8c00517 	ldw	r3,20(sp)
    d3d0:	9cc00c04 	addi	r19,r19,48
    d3d4:	1009883a 	mov	r4,r2
    d3d8:	1cc00005 	stb	r19,0(r3)
    d3dc:	2021883a 	mov	r16,r4
    d3e0:	d9000317 	ldw	r4,12(sp)
    d3e4:	00800044 	movi	r2,1
    d3e8:	2823883a 	mov	r17,r5
    d3ec:	20802226 	beq	r4,r2,d478 <_dtoa_r+0x13fc>
    d3f0:	1029883a 	mov	r20,r2
    d3f4:	0005883a 	mov	r2,zero
    d3f8:	00d00934 	movhi	r3,16420
    d3fc:	180f883a 	mov	r7,r3
    d400:	100d883a 	mov	r6,r2
    d404:	880b883a 	mov	r5,r17
    d408:	8009883a 	mov	r4,r16
    d40c:	00072f00 	call	72f0 <__muldf3>
    d410:	180b883a 	mov	r5,r3
    d414:	1009883a 	mov	r4,r2
    d418:	1823883a 	mov	r17,r3
    d41c:	1021883a 	mov	r16,r2
    d420:	0007b9c0 	call	7b9c <__fixdfsi>
    d424:	1009883a 	mov	r4,r2
    d428:	102b883a 	mov	r21,r2
    d42c:	0007aa40 	call	7aa4 <__floatsidf>
    d430:	880b883a 	mov	r5,r17
    d434:	8009883a 	mov	r4,r16
    d438:	180f883a 	mov	r7,r3
    d43c:	100d883a 	mov	r6,r2
    d440:	00071fc0 	call	71fc <__subdf3>
    d444:	180b883a 	mov	r5,r3
    d448:	d8c00517 	ldw	r3,20(sp)
    d44c:	1009883a 	mov	r4,r2
    d450:	ad400c04 	addi	r21,r21,48
    d454:	1d05883a 	add	r2,r3,r20
    d458:	15400005 	stb	r21,0(r2)
    d45c:	2021883a 	mov	r16,r4
    d460:	d9000317 	ldw	r4,12(sp)
    d464:	a5000044 	addi	r20,r20,1
    d468:	2823883a 	mov	r17,r5
    d46c:	a13fe11e 	bne	r20,r4,d3f4 <_dtoa_r+0x1378>
    d470:	e505883a 	add	r2,fp,r20
    d474:	173fffc4 	addi	fp,r2,-1
    d478:	0025883a 	mov	r18,zero
    d47c:	04cff834 	movhi	r19,16352
    d480:	b009883a 	mov	r4,r22
    d484:	b80b883a 	mov	r5,r23
    d488:	900d883a 	mov	r6,r18
    d48c:	980f883a 	mov	r7,r19
    d490:	000727c0 	call	727c <__adddf3>
    d494:	180b883a 	mov	r5,r3
    d498:	1009883a 	mov	r4,r2
    d49c:	800d883a 	mov	r6,r16
    d4a0:	880f883a 	mov	r7,r17
    d4a4:	0012ba40 	call	12ba4 <__ltdf2>
    d4a8:	103cab16 	blt	r2,zero,c758 <_dtoa_r+0x6dc>
    d4ac:	0009883a 	mov	r4,zero
    d4b0:	980b883a 	mov	r5,r19
    d4b4:	b80f883a 	mov	r7,r23
    d4b8:	b00d883a 	mov	r6,r22
    d4bc:	00071fc0 	call	71fc <__subdf3>
    d4c0:	180b883a 	mov	r5,r3
    d4c4:	880f883a 	mov	r7,r17
    d4c8:	1009883a 	mov	r4,r2
    d4cc:	800d883a 	mov	r6,r16
    d4d0:	000790c0 	call	790c <__gtdf2>
    d4d4:	00bc470e 	bge	zero,r2,c5f4 <_dtoa_r+0x578>
    d4d8:	00c00c04 	movi	r3,48
    d4dc:	e73fffc4 	addi	fp,fp,-1
    d4e0:	e0800007 	ldb	r2,0(fp)
    d4e4:	10fffd26 	beq	r2,r3,d4dc <_dtoa_r+0x1460>
    d4e8:	d9800417 	ldw	r6,16(sp)
    d4ec:	e7000044 	addi	fp,fp,1
    d4f0:	d9800d15 	stw	r6,52(sp)
    d4f4:	003cab06 	br	c7a4 <_dtoa_r+0x728>
    d4f8:	d8c00f17 	ldw	r3,60(sp)
    d4fc:	d9001117 	ldw	r4,68(sp)
    d500:	20e1c83a 	sub	r16,r4,r3
    d504:	0007883a 	mov	r3,zero
    d508:	003d9b06 	br	cb78 <_dtoa_r+0xafc>
    d50c:	00800e44 	movi	r2,57
    d510:	b0800005 	stb	r2,0(r22)
    d514:	b5800044 	addi	r22,r22,1
    d518:	003dc106 	br	cc20 <_dtoa_r+0xba4>
    d51c:	05800084 	movi	r22,2
    d520:	003bf706 	br	c500 <_dtoa_r+0x484>
    d524:	d9000f17 	ldw	r4,60(sp)
    d528:	013c000e 	bge	zero,r4,c52c <_dtoa_r+0x4b0>
    d52c:	d9800e17 	ldw	r6,56(sp)
    d530:	01bc300e 	bge	zero,r6,c5f4 <_dtoa_r+0x578>
    d534:	0005883a 	mov	r2,zero
    d538:	00d00934 	movhi	r3,16420
    d53c:	a80b883a 	mov	r5,r21
    d540:	180f883a 	mov	r7,r3
    d544:	a009883a 	mov	r4,r20
    d548:	100d883a 	mov	r6,r2
    d54c:	00072f00 	call	72f0 <__muldf3>
    d550:	b1000044 	addi	r4,r22,1
    d554:	1021883a 	mov	r16,r2
    d558:	1823883a 	mov	r17,r3
    d55c:	0007aa40 	call	7aa4 <__floatsidf>
    d560:	880b883a 	mov	r5,r17
    d564:	8009883a 	mov	r4,r16
    d568:	180f883a 	mov	r7,r3
    d56c:	100d883a 	mov	r6,r2
    d570:	00072f00 	call	72f0 <__muldf3>
    d574:	0011883a 	mov	r8,zero
    d578:	02500734 	movhi	r9,16412
    d57c:	180b883a 	mov	r5,r3
    d580:	480f883a 	mov	r7,r9
    d584:	1009883a 	mov	r4,r2
    d588:	400d883a 	mov	r6,r8
    d58c:	000727c0 	call	727c <__adddf3>
    d590:	102d883a 	mov	r22,r2
    d594:	00bf3034 	movhi	r2,64704
    d598:	10ef883a 	add	r23,r2,r3
    d59c:	d8800d17 	ldw	r2,52(sp)
    d5a0:	d8c00e17 	ldw	r3,56(sp)
    d5a4:	8029883a 	mov	r20,r16
    d5a8:	10bfffc4 	addi	r2,r2,-1
    d5ac:	882b883a 	mov	r21,r17
    d5b0:	d8800415 	stw	r2,16(sp)
    d5b4:	d8c00315 	stw	r3,12(sp)
    d5b8:	003e8306 	br	cfc8 <_dtoa_r+0xf4c>
    d5bc:	d8800117 	ldw	r2,4(sp)
    d5c0:	dc001117 	ldw	r16,68(sp)
    d5c4:	dc801017 	ldw	r18,64(sp)
    d5c8:	00c00d84 	movi	r3,54
    d5cc:	1887c83a 	sub	r3,r3,r2
    d5d0:	003d6906 	br	cb78 <_dtoa_r+0xafc>
    d5d4:	01800044 	movi	r6,1
    d5d8:	3021883a 	mov	r16,r6
    d5dc:	d9800f15 	stw	r6,60(sp)
    d5e0:	d9802615 	stw	r6,152(sp)
    d5e4:	d9800e15 	stw	r6,56(sp)
    d5e8:	003b9306 	br	c438 <_dtoa_r+0x3bc>
    d5ec:	b021883a 	mov	r16,r22
    d5f0:	dd800f15 	stw	r22,60(sp)
    d5f4:	003b9006 	br	c438 <_dtoa_r+0x3bc>
    d5f8:	103e221e 	bne	r2,zero,ce84 <_dtoa_r+0xe08>
    d5fc:	b880004c 	andi	r2,r23,1
    d600:	1005003a 	cmpeq	r2,r2,zero
    d604:	103e1f1e 	bne	r2,zero,ce84 <_dtoa_r+0xe08>
    d608:	003e1b06 	br	ce78 <_dtoa_r+0xdfc>
    d60c:	d9001617 	ldw	r4,88(sp)
    d610:	980b883a 	mov	r5,r19
    d614:	01800284 	movi	r6,10
    d618:	000f883a 	mov	r7,zero
    d61c:	00109140 	call	10914 <__multadd>
    d620:	d8c00e17 	ldw	r3,56(sp)
    d624:	1027883a 	mov	r19,r2
    d628:	d8c00f15 	stw	r3,60(sp)
    d62c:	003cd306 	br	c97c <_dtoa_r+0x900>

0000d630 <_fflush_r>:
    d630:	defffb04 	addi	sp,sp,-20
    d634:	dcc00315 	stw	r19,12(sp)
    d638:	dc800215 	stw	r18,8(sp)
    d63c:	dfc00415 	stw	ra,16(sp)
    d640:	dc400115 	stw	r17,4(sp)
    d644:	dc000015 	stw	r16,0(sp)
    d648:	2027883a 	mov	r19,r4
    d64c:	2825883a 	mov	r18,r5
    d650:	20000226 	beq	r4,zero,d65c <_fflush_r+0x2c>
    d654:	20800e17 	ldw	r2,56(r4)
    d658:	10005626 	beq	r2,zero,d7b4 <_fflush_r+0x184>
    d65c:	9100030b 	ldhu	r4,12(r18)
    d660:	20ffffcc 	andi	r3,r4,65535
    d664:	18e0001c 	xori	r3,r3,32768
    d668:	18e00004 	addi	r3,r3,-32768
    d66c:	1880020c 	andi	r2,r3,8
    d670:	1000261e 	bne	r2,zero,d70c <_fflush_r+0xdc>
    d674:	90c00117 	ldw	r3,4(r18)
    d678:	20820014 	ori	r2,r4,2048
    d67c:	9080030d 	sth	r2,12(r18)
    d680:	1009883a 	mov	r4,r2
    d684:	00c0400e 	bge	zero,r3,d788 <_fflush_r+0x158>
    d688:	92000a17 	ldw	r8,40(r18)
    d68c:	40004026 	beq	r8,zero,d790 <_fflush_r+0x160>
    d690:	2084000c 	andi	r2,r4,4096
    d694:	10005326 	beq	r2,zero,d7e4 <_fflush_r+0x1b4>
    d698:	94001417 	ldw	r16,80(r18)
    d69c:	9080030b 	ldhu	r2,12(r18)
    d6a0:	1080010c 	andi	r2,r2,4
    d6a4:	1000481e 	bne	r2,zero,d7c8 <_fflush_r+0x198>
    d6a8:	91400717 	ldw	r5,28(r18)
    d6ac:	9809883a 	mov	r4,r19
    d6b0:	800d883a 	mov	r6,r16
    d6b4:	000f883a 	mov	r7,zero
    d6b8:	403ee83a 	callr	r8
    d6bc:	8080261e 	bne	r16,r2,d758 <_fflush_r+0x128>
    d6c0:	9080030b 	ldhu	r2,12(r18)
    d6c4:	91000417 	ldw	r4,16(r18)
    d6c8:	90000115 	stw	zero,4(r18)
    d6cc:	10bdffcc 	andi	r2,r2,63487
    d6d0:	10ffffcc 	andi	r3,r2,65535
    d6d4:	18c4000c 	andi	r3,r3,4096
    d6d8:	9080030d 	sth	r2,12(r18)
    d6dc:	91000015 	stw	r4,0(r18)
    d6e0:	18002b26 	beq	r3,zero,d790 <_fflush_r+0x160>
    d6e4:	0007883a 	mov	r3,zero
    d6e8:	1805883a 	mov	r2,r3
    d6ec:	94001415 	stw	r16,80(r18)
    d6f0:	dfc00417 	ldw	ra,16(sp)
    d6f4:	dcc00317 	ldw	r19,12(sp)
    d6f8:	dc800217 	ldw	r18,8(sp)
    d6fc:	dc400117 	ldw	r17,4(sp)
    d700:	dc000017 	ldw	r16,0(sp)
    d704:	dec00504 	addi	sp,sp,20
    d708:	f800283a 	ret
    d70c:	94400417 	ldw	r17,16(r18)
    d710:	88001f26 	beq	r17,zero,d790 <_fflush_r+0x160>
    d714:	90800017 	ldw	r2,0(r18)
    d718:	18c000cc 	andi	r3,r3,3
    d71c:	94400015 	stw	r17,0(r18)
    d720:	1461c83a 	sub	r16,r2,r17
    d724:	18002526 	beq	r3,zero,d7bc <_fflush_r+0x18c>
    d728:	0005883a 	mov	r2,zero
    d72c:	90800215 	stw	r2,8(r18)
    d730:	0400170e 	bge	zero,r16,d790 <_fflush_r+0x160>
    d734:	90c00917 	ldw	r3,36(r18)
    d738:	91400717 	ldw	r5,28(r18)
    d73c:	880d883a 	mov	r6,r17
    d740:	800f883a 	mov	r7,r16
    d744:	9809883a 	mov	r4,r19
    d748:	183ee83a 	callr	r3
    d74c:	88a3883a 	add	r17,r17,r2
    d750:	80a1c83a 	sub	r16,r16,r2
    d754:	00bff616 	blt	zero,r2,d730 <_fflush_r+0x100>
    d758:	9080030b 	ldhu	r2,12(r18)
    d75c:	00ffffc4 	movi	r3,-1
    d760:	10801014 	ori	r2,r2,64
    d764:	9080030d 	sth	r2,12(r18)
    d768:	1805883a 	mov	r2,r3
    d76c:	dfc00417 	ldw	ra,16(sp)
    d770:	dcc00317 	ldw	r19,12(sp)
    d774:	dc800217 	ldw	r18,8(sp)
    d778:	dc400117 	ldw	r17,4(sp)
    d77c:	dc000017 	ldw	r16,0(sp)
    d780:	dec00504 	addi	sp,sp,20
    d784:	f800283a 	ret
    d788:	90800f17 	ldw	r2,60(r18)
    d78c:	00bfbe16 	blt	zero,r2,d688 <_fflush_r+0x58>
    d790:	0007883a 	mov	r3,zero
    d794:	1805883a 	mov	r2,r3
    d798:	dfc00417 	ldw	ra,16(sp)
    d79c:	dcc00317 	ldw	r19,12(sp)
    d7a0:	dc800217 	ldw	r18,8(sp)
    d7a4:	dc400117 	ldw	r17,4(sp)
    d7a8:	dc000017 	ldw	r16,0(sp)
    d7ac:	dec00504 	addi	sp,sp,20
    d7b0:	f800283a 	ret
    d7b4:	000d8c80 	call	d8c8 <__sinit>
    d7b8:	003fa806 	br	d65c <_fflush_r+0x2c>
    d7bc:	90800517 	ldw	r2,20(r18)
    d7c0:	90800215 	stw	r2,8(r18)
    d7c4:	003fda06 	br	d730 <_fflush_r+0x100>
    d7c8:	90800117 	ldw	r2,4(r18)
    d7cc:	90c00c17 	ldw	r3,48(r18)
    d7d0:	80a1c83a 	sub	r16,r16,r2
    d7d4:	183fb426 	beq	r3,zero,d6a8 <_fflush_r+0x78>
    d7d8:	90800f17 	ldw	r2,60(r18)
    d7dc:	80a1c83a 	sub	r16,r16,r2
    d7e0:	003fb106 	br	d6a8 <_fflush_r+0x78>
    d7e4:	91400717 	ldw	r5,28(r18)
    d7e8:	9809883a 	mov	r4,r19
    d7ec:	000d883a 	mov	r6,zero
    d7f0:	01c00044 	movi	r7,1
    d7f4:	403ee83a 	callr	r8
    d7f8:	1021883a 	mov	r16,r2
    d7fc:	00bfffc4 	movi	r2,-1
    d800:	80800226 	beq	r16,r2,d80c <_fflush_r+0x1dc>
    d804:	92000a17 	ldw	r8,40(r18)
    d808:	003fa406 	br	d69c <_fflush_r+0x6c>
    d80c:	98c00017 	ldw	r3,0(r19)
    d810:	00800744 	movi	r2,29
    d814:	18bfde26 	beq	r3,r2,d790 <_fflush_r+0x160>
    d818:	9080030b 	ldhu	r2,12(r18)
    d81c:	8007883a 	mov	r3,r16
    d820:	10801014 	ori	r2,r2,64
    d824:	9080030d 	sth	r2,12(r18)
    d828:	003fcf06 	br	d768 <_fflush_r+0x138>

0000d82c <fflush>:
    d82c:	01400074 	movhi	r5,1
    d830:	29758c04 	addi	r5,r5,-10704
    d834:	2007883a 	mov	r3,r4
    d838:	20000526 	beq	r4,zero,d850 <fflush+0x24>
    d83c:	00820034 	movhi	r2,2048
    d840:	108a3b04 	addi	r2,r2,10476
    d844:	11000017 	ldw	r4,0(r2)
    d848:	180b883a 	mov	r5,r3
    d84c:	000d6301 	jmpi	d630 <_fflush_r>
    d850:	00820034 	movhi	r2,2048
    d854:	108a3c04 	addi	r2,r2,10480
    d858:	11000017 	ldw	r4,0(r2)
    d85c:	000e3fc1 	jmpi	e3fc <_fwalk_reent>

0000d860 <std>:
    d860:	00800074 	movhi	r2,1
    d864:	10854504 	addi	r2,r2,5396
    d868:	20800b15 	stw	r2,44(r4)
    d86c:	00800074 	movhi	r2,1
    d870:	10858004 	addi	r2,r2,5632
    d874:	20800815 	stw	r2,32(r4)
    d878:	00c00074 	movhi	r3,1
    d87c:	18c56104 	addi	r3,r3,5508
    d880:	00800074 	movhi	r2,1
    d884:	10854704 	addi	r2,r2,5404
    d888:	2140030d 	sth	r5,12(r4)
    d88c:	2180038d 	sth	r6,14(r4)
    d890:	20c00915 	stw	r3,36(r4)
    d894:	20800a15 	stw	r2,40(r4)
    d898:	20000015 	stw	zero,0(r4)
    d89c:	20000115 	stw	zero,4(r4)
    d8a0:	20000215 	stw	zero,8(r4)
    d8a4:	20000415 	stw	zero,16(r4)
    d8a8:	20000515 	stw	zero,20(r4)
    d8ac:	20000615 	stw	zero,24(r4)
    d8b0:	21000715 	stw	r4,28(r4)
    d8b4:	f800283a 	ret

0000d8b8 <__sfp_lock_acquire>:
    d8b8:	f800283a 	ret

0000d8bc <__sfp_lock_release>:
    d8bc:	f800283a 	ret

0000d8c0 <__sinit_lock_acquire>:
    d8c0:	f800283a 	ret

0000d8c4 <__sinit_lock_release>:
    d8c4:	f800283a 	ret

0000d8c8 <__sinit>:
    d8c8:	20800e17 	ldw	r2,56(r4)
    d8cc:	defffd04 	addi	sp,sp,-12
    d8d0:	dc400115 	stw	r17,4(sp)
    d8d4:	dc000015 	stw	r16,0(sp)
    d8d8:	dfc00215 	stw	ra,8(sp)
    d8dc:	04400044 	movi	r17,1
    d8e0:	01400104 	movi	r5,4
    d8e4:	000d883a 	mov	r6,zero
    d8e8:	2021883a 	mov	r16,r4
    d8ec:	2200bb04 	addi	r8,r4,748
    d8f0:	200f883a 	mov	r7,r4
    d8f4:	10000526 	beq	r2,zero,d90c <__sinit+0x44>
    d8f8:	dfc00217 	ldw	ra,8(sp)
    d8fc:	dc400117 	ldw	r17,4(sp)
    d900:	dc000017 	ldw	r16,0(sp)
    d904:	dec00304 	addi	sp,sp,12
    d908:	f800283a 	ret
    d90c:	21000117 	ldw	r4,4(r4)
    d910:	00800074 	movhi	r2,1
    d914:	10b66b04 	addi	r2,r2,-9812
    d918:	00c000c4 	movi	r3,3
    d91c:	80800f15 	stw	r2,60(r16)
    d920:	80c0b915 	stw	r3,740(r16)
    d924:	8200ba15 	stw	r8,744(r16)
    d928:	84400e15 	stw	r17,56(r16)
    d92c:	8000b815 	stw	zero,736(r16)
    d930:	000d8600 	call	d860 <std>
    d934:	81000217 	ldw	r4,8(r16)
    d938:	880d883a 	mov	r6,r17
    d93c:	800f883a 	mov	r7,r16
    d940:	01400284 	movi	r5,10
    d944:	000d8600 	call	d860 <std>
    d948:	81000317 	ldw	r4,12(r16)
    d94c:	800f883a 	mov	r7,r16
    d950:	01400484 	movi	r5,18
    d954:	01800084 	movi	r6,2
    d958:	dfc00217 	ldw	ra,8(sp)
    d95c:	dc400117 	ldw	r17,4(sp)
    d960:	dc000017 	ldw	r16,0(sp)
    d964:	dec00304 	addi	sp,sp,12
    d968:	000d8601 	jmpi	d860 <std>

0000d96c <__fp_lock>:
    d96c:	0005883a 	mov	r2,zero
    d970:	f800283a 	ret

0000d974 <__fp_unlock>:
    d974:	0005883a 	mov	r2,zero
    d978:	f800283a 	ret

0000d97c <__fp_unlock_all>:
    d97c:	00820034 	movhi	r2,2048
    d980:	108a3b04 	addi	r2,r2,10476
    d984:	11000017 	ldw	r4,0(r2)
    d988:	01400074 	movhi	r5,1
    d98c:	29765d04 	addi	r5,r5,-9868
    d990:	000e4c41 	jmpi	e4c4 <_fwalk>

0000d994 <__fp_lock_all>:
    d994:	00820034 	movhi	r2,2048
    d998:	108a3b04 	addi	r2,r2,10476
    d99c:	11000017 	ldw	r4,0(r2)
    d9a0:	01400074 	movhi	r5,1
    d9a4:	29765b04 	addi	r5,r5,-9876
    d9a8:	000e4c41 	jmpi	e4c4 <_fwalk>

0000d9ac <_cleanup_r>:
    d9ac:	01400074 	movhi	r5,1
    d9b0:	2946c504 	addi	r5,r5,6932
    d9b4:	000e4c41 	jmpi	e4c4 <_fwalk>

0000d9b8 <_cleanup>:
    d9b8:	00820034 	movhi	r2,2048
    d9bc:	108a3c04 	addi	r2,r2,10480
    d9c0:	11000017 	ldw	r4,0(r2)
    d9c4:	000d9ac1 	jmpi	d9ac <_cleanup_r>

0000d9c8 <__sfmoreglue>:
    d9c8:	defffc04 	addi	sp,sp,-16
    d9cc:	dc400115 	stw	r17,4(sp)
    d9d0:	2c401724 	muli	r17,r5,92
    d9d4:	dc800215 	stw	r18,8(sp)
    d9d8:	2825883a 	mov	r18,r5
    d9dc:	89400304 	addi	r5,r17,12
    d9e0:	dc000015 	stw	r16,0(sp)
    d9e4:	dfc00315 	stw	ra,12(sp)
    d9e8:	000f35c0 	call	f35c <_malloc_r>
    d9ec:	0021883a 	mov	r16,zero
    d9f0:	880d883a 	mov	r6,r17
    d9f4:	000b883a 	mov	r5,zero
    d9f8:	10000626 	beq	r2,zero,da14 <__sfmoreglue+0x4c>
    d9fc:	11000304 	addi	r4,r2,12
    da00:	14800115 	stw	r18,4(r2)
    da04:	10000015 	stw	zero,0(r2)
    da08:	11000215 	stw	r4,8(r2)
    da0c:	1021883a 	mov	r16,r2
    da10:	00083b40 	call	83b4 <memset>
    da14:	8005883a 	mov	r2,r16
    da18:	dfc00317 	ldw	ra,12(sp)
    da1c:	dc800217 	ldw	r18,8(sp)
    da20:	dc400117 	ldw	r17,4(sp)
    da24:	dc000017 	ldw	r16,0(sp)
    da28:	dec00404 	addi	sp,sp,16
    da2c:	f800283a 	ret

0000da30 <__sfp>:
    da30:	defffd04 	addi	sp,sp,-12
    da34:	00820034 	movhi	r2,2048
    da38:	108a3c04 	addi	r2,r2,10480
    da3c:	dc000015 	stw	r16,0(sp)
    da40:	14000017 	ldw	r16,0(r2)
    da44:	dc400115 	stw	r17,4(sp)
    da48:	dfc00215 	stw	ra,8(sp)
    da4c:	80800e17 	ldw	r2,56(r16)
    da50:	2023883a 	mov	r17,r4
    da54:	10002626 	beq	r2,zero,daf0 <__sfp+0xc0>
    da58:	8400b804 	addi	r16,r16,736
    da5c:	80800117 	ldw	r2,4(r16)
    da60:	81000217 	ldw	r4,8(r16)
    da64:	10ffffc4 	addi	r3,r2,-1
    da68:	18000916 	blt	r3,zero,da90 <__sfp+0x60>
    da6c:	2080030f 	ldh	r2,12(r4)
    da70:	10000b26 	beq	r2,zero,daa0 <__sfp+0x70>
    da74:	017fffc4 	movi	r5,-1
    da78:	00000206 	br	da84 <__sfp+0x54>
    da7c:	2080030f 	ldh	r2,12(r4)
    da80:	10000726 	beq	r2,zero,daa0 <__sfp+0x70>
    da84:	18ffffc4 	addi	r3,r3,-1
    da88:	21001704 	addi	r4,r4,92
    da8c:	197ffb1e 	bne	r3,r5,da7c <__sfp+0x4c>
    da90:	80800017 	ldw	r2,0(r16)
    da94:	10001926 	beq	r2,zero,dafc <__sfp+0xcc>
    da98:	1021883a 	mov	r16,r2
    da9c:	003fef06 	br	da5c <__sfp+0x2c>
    daa0:	00bfffc4 	movi	r2,-1
    daa4:	00c00044 	movi	r3,1
    daa8:	2080038d 	sth	r2,14(r4)
    daac:	20c0030d 	sth	r3,12(r4)
    dab0:	20000015 	stw	zero,0(r4)
    dab4:	20000215 	stw	zero,8(r4)
    dab8:	20000115 	stw	zero,4(r4)
    dabc:	20000415 	stw	zero,16(r4)
    dac0:	20000515 	stw	zero,20(r4)
    dac4:	20000615 	stw	zero,24(r4)
    dac8:	20000c15 	stw	zero,48(r4)
    dacc:	20000d15 	stw	zero,52(r4)
    dad0:	20001115 	stw	zero,68(r4)
    dad4:	20001215 	stw	zero,72(r4)
    dad8:	2005883a 	mov	r2,r4
    dadc:	dfc00217 	ldw	ra,8(sp)
    dae0:	dc400117 	ldw	r17,4(sp)
    dae4:	dc000017 	ldw	r16,0(sp)
    dae8:	dec00304 	addi	sp,sp,12
    daec:	f800283a 	ret
    daf0:	8009883a 	mov	r4,r16
    daf4:	000d8c80 	call	d8c8 <__sinit>
    daf8:	003fd706 	br	da58 <__sfp+0x28>
    dafc:	8809883a 	mov	r4,r17
    db00:	01400104 	movi	r5,4
    db04:	000d9c80 	call	d9c8 <__sfmoreglue>
    db08:	80800015 	stw	r2,0(r16)
    db0c:	103fe21e 	bne	r2,zero,da98 <__sfp+0x68>
    db10:	00800304 	movi	r2,12
    db14:	0009883a 	mov	r4,zero
    db18:	88800015 	stw	r2,0(r17)
    db1c:	003fee06 	br	dad8 <__sfp+0xa8>

0000db20 <_malloc_trim_r>:
    db20:	defffb04 	addi	sp,sp,-20
    db24:	dcc00315 	stw	r19,12(sp)
    db28:	04c20034 	movhi	r19,2048
    db2c:	9cc3c704 	addi	r19,r19,3868
    db30:	dc800215 	stw	r18,8(sp)
    db34:	dc400115 	stw	r17,4(sp)
    db38:	dc000015 	stw	r16,0(sp)
    db3c:	2823883a 	mov	r17,r5
    db40:	2025883a 	mov	r18,r4
    db44:	dfc00415 	stw	ra,16(sp)
    db48:	00138140 	call	13814 <__malloc_lock>
    db4c:	98800217 	ldw	r2,8(r19)
    db50:	9009883a 	mov	r4,r18
    db54:	000b883a 	mov	r5,zero
    db58:	10c00117 	ldw	r3,4(r2)
    db5c:	00bfff04 	movi	r2,-4
    db60:	18a0703a 	and	r16,r3,r2
    db64:	8463c83a 	sub	r17,r16,r17
    db68:	8c43fbc4 	addi	r17,r17,4079
    db6c:	8822d33a 	srli	r17,r17,12
    db70:	0083ffc4 	movi	r2,4095
    db74:	8c7fffc4 	addi	r17,r17,-1
    db78:	8822933a 	slli	r17,r17,12
    db7c:	1440060e 	bge	r2,r17,db98 <_malloc_trim_r+0x78>
    db80:	00114a40 	call	114a4 <_sbrk_r>
    db84:	98c00217 	ldw	r3,8(r19)
    db88:	9009883a 	mov	r4,r18
    db8c:	044bc83a 	sub	r5,zero,r17
    db90:	80c7883a 	add	r3,r16,r3
    db94:	10c00926 	beq	r2,r3,dbbc <_malloc_trim_r+0x9c>
    db98:	00138340 	call	13834 <__malloc_unlock>
    db9c:	0005883a 	mov	r2,zero
    dba0:	dfc00417 	ldw	ra,16(sp)
    dba4:	dcc00317 	ldw	r19,12(sp)
    dba8:	dc800217 	ldw	r18,8(sp)
    dbac:	dc400117 	ldw	r17,4(sp)
    dbb0:	dc000017 	ldw	r16,0(sp)
    dbb4:	dec00504 	addi	sp,sp,20
    dbb8:	f800283a 	ret
    dbbc:	9009883a 	mov	r4,r18
    dbc0:	00114a40 	call	114a4 <_sbrk_r>
    dbc4:	844dc83a 	sub	r6,r16,r17
    dbc8:	00ffffc4 	movi	r3,-1
    dbcc:	9009883a 	mov	r4,r18
    dbd0:	000b883a 	mov	r5,zero
    dbd4:	01c20234 	movhi	r7,2056
    dbd8:	39ff0104 	addi	r7,r7,-1020
    dbdc:	31800054 	ori	r6,r6,1
    dbe0:	10c00926 	beq	r2,r3,dc08 <_malloc_trim_r+0xe8>
    dbe4:	38800017 	ldw	r2,0(r7)
    dbe8:	98c00217 	ldw	r3,8(r19)
    dbec:	9009883a 	mov	r4,r18
    dbf0:	1445c83a 	sub	r2,r2,r17
    dbf4:	38800015 	stw	r2,0(r7)
    dbf8:	19800115 	stw	r6,4(r3)
    dbfc:	00138340 	call	13834 <__malloc_unlock>
    dc00:	00800044 	movi	r2,1
    dc04:	003fe606 	br	dba0 <_malloc_trim_r+0x80>
    dc08:	00114a40 	call	114a4 <_sbrk_r>
    dc0c:	99800217 	ldw	r6,8(r19)
    dc10:	100f883a 	mov	r7,r2
    dc14:	9009883a 	mov	r4,r18
    dc18:	1187c83a 	sub	r3,r2,r6
    dc1c:	008003c4 	movi	r2,15
    dc20:	19400054 	ori	r5,r3,1
    dc24:	10ffdc0e 	bge	r2,r3,db98 <_malloc_trim_r+0x78>
    dc28:	00820034 	movhi	r2,2048
    dc2c:	108a4004 	addi	r2,r2,10496
    dc30:	10c00017 	ldw	r3,0(r2)
    dc34:	00820234 	movhi	r2,2056
    dc38:	10bf0104 	addi	r2,r2,-1020
    dc3c:	31400115 	stw	r5,4(r6)
    dc40:	38c7c83a 	sub	r3,r7,r3
    dc44:	10c00015 	stw	r3,0(r2)
    dc48:	003fd306 	br	db98 <_malloc_trim_r+0x78>

0000dc4c <_free_r>:
    dc4c:	defffd04 	addi	sp,sp,-12
    dc50:	dc400115 	stw	r17,4(sp)
    dc54:	dc000015 	stw	r16,0(sp)
    dc58:	dfc00215 	stw	ra,8(sp)
    dc5c:	2821883a 	mov	r16,r5
    dc60:	2023883a 	mov	r17,r4
    dc64:	28005a26 	beq	r5,zero,ddd0 <_free_r+0x184>
    dc68:	00138140 	call	13814 <__malloc_lock>
    dc6c:	823ffe04 	addi	r8,r16,-8
    dc70:	41400117 	ldw	r5,4(r8)
    dc74:	00bfff84 	movi	r2,-2
    dc78:	02820034 	movhi	r10,2048
    dc7c:	5283c704 	addi	r10,r10,3868
    dc80:	288e703a 	and	r7,r5,r2
    dc84:	41cd883a 	add	r6,r8,r7
    dc88:	30c00117 	ldw	r3,4(r6)
    dc8c:	51000217 	ldw	r4,8(r10)
    dc90:	00bfff04 	movi	r2,-4
    dc94:	1892703a 	and	r9,r3,r2
    dc98:	5017883a 	mov	r11,r10
    dc9c:	31006726 	beq	r6,r4,de3c <_free_r+0x1f0>
    dca0:	2880004c 	andi	r2,r5,1
    dca4:	1005003a 	cmpeq	r2,r2,zero
    dca8:	32400115 	stw	r9,4(r6)
    dcac:	10001a1e 	bne	r2,zero,dd18 <_free_r+0xcc>
    dcb0:	000b883a 	mov	r5,zero
    dcb4:	3247883a 	add	r3,r6,r9
    dcb8:	18800117 	ldw	r2,4(r3)
    dcbc:	1080004c 	andi	r2,r2,1
    dcc0:	1000231e 	bne	r2,zero,dd50 <_free_r+0x104>
    dcc4:	280ac03a 	cmpne	r5,r5,zero
    dcc8:	3a4f883a 	add	r7,r7,r9
    dccc:	2800451e 	bne	r5,zero,dde4 <_free_r+0x198>
    dcd0:	31000217 	ldw	r4,8(r6)
    dcd4:	00820034 	movhi	r2,2048
    dcd8:	1083c904 	addi	r2,r2,3876
    dcdc:	20807b26 	beq	r4,r2,decc <_free_r+0x280>
    dce0:	30800317 	ldw	r2,12(r6)
    dce4:	3a07883a 	add	r3,r7,r8
    dce8:	19c00015 	stw	r7,0(r3)
    dcec:	11000215 	stw	r4,8(r2)
    dcf0:	20800315 	stw	r2,12(r4)
    dcf4:	38800054 	ori	r2,r7,1
    dcf8:	40800115 	stw	r2,4(r8)
    dcfc:	28001a26 	beq	r5,zero,dd68 <_free_r+0x11c>
    dd00:	8809883a 	mov	r4,r17
    dd04:	dfc00217 	ldw	ra,8(sp)
    dd08:	dc400117 	ldw	r17,4(sp)
    dd0c:	dc000017 	ldw	r16,0(sp)
    dd10:	dec00304 	addi	sp,sp,12
    dd14:	00138341 	jmpi	13834 <__malloc_unlock>
    dd18:	80bffe17 	ldw	r2,-8(r16)
    dd1c:	50c00204 	addi	r3,r10,8
    dd20:	4091c83a 	sub	r8,r8,r2
    dd24:	41000217 	ldw	r4,8(r8)
    dd28:	388f883a 	add	r7,r7,r2
    dd2c:	20c06126 	beq	r4,r3,deb4 <_free_r+0x268>
    dd30:	40800317 	ldw	r2,12(r8)
    dd34:	3247883a 	add	r3,r6,r9
    dd38:	000b883a 	mov	r5,zero
    dd3c:	11000215 	stw	r4,8(r2)
    dd40:	20800315 	stw	r2,12(r4)
    dd44:	18800117 	ldw	r2,4(r3)
    dd48:	1080004c 	andi	r2,r2,1
    dd4c:	103fdd26 	beq	r2,zero,dcc4 <_free_r+0x78>
    dd50:	38800054 	ori	r2,r7,1
    dd54:	3a07883a 	add	r3,r7,r8
    dd58:	280ac03a 	cmpne	r5,r5,zero
    dd5c:	40800115 	stw	r2,4(r8)
    dd60:	19c00015 	stw	r7,0(r3)
    dd64:	283fe61e 	bne	r5,zero,dd00 <_free_r+0xb4>
    dd68:	00807fc4 	movi	r2,511
    dd6c:	11c01f2e 	bgeu	r2,r7,ddec <_free_r+0x1a0>
    dd70:	3806d27a 	srli	r3,r7,9
    dd74:	1800481e 	bne	r3,zero,de98 <_free_r+0x24c>
    dd78:	3804d0fa 	srli	r2,r7,3
    dd7c:	100690fa 	slli	r3,r2,3
    dd80:	1acd883a 	add	r6,r3,r11
    dd84:	31400217 	ldw	r5,8(r6)
    dd88:	31405926 	beq	r6,r5,def0 <_free_r+0x2a4>
    dd8c:	28800117 	ldw	r2,4(r5)
    dd90:	00ffff04 	movi	r3,-4
    dd94:	10c4703a 	and	r2,r2,r3
    dd98:	3880022e 	bgeu	r7,r2,dda4 <_free_r+0x158>
    dd9c:	29400217 	ldw	r5,8(r5)
    dda0:	317ffa1e 	bne	r6,r5,dd8c <_free_r+0x140>
    dda4:	29800317 	ldw	r6,12(r5)
    dda8:	41800315 	stw	r6,12(r8)
    ddac:	41400215 	stw	r5,8(r8)
    ddb0:	8809883a 	mov	r4,r17
    ddb4:	2a000315 	stw	r8,12(r5)
    ddb8:	32000215 	stw	r8,8(r6)
    ddbc:	dfc00217 	ldw	ra,8(sp)
    ddc0:	dc400117 	ldw	r17,4(sp)
    ddc4:	dc000017 	ldw	r16,0(sp)
    ddc8:	dec00304 	addi	sp,sp,12
    ddcc:	00138341 	jmpi	13834 <__malloc_unlock>
    ddd0:	dfc00217 	ldw	ra,8(sp)
    ddd4:	dc400117 	ldw	r17,4(sp)
    ddd8:	dc000017 	ldw	r16,0(sp)
    dddc:	dec00304 	addi	sp,sp,12
    dde0:	f800283a 	ret
    dde4:	31000217 	ldw	r4,8(r6)
    dde8:	003fbd06 	br	dce0 <_free_r+0x94>
    ddec:	3806d0fa 	srli	r3,r7,3
    ddf0:	00800044 	movi	r2,1
    ddf4:	51400117 	ldw	r5,4(r10)
    ddf8:	180890fa 	slli	r4,r3,3
    ddfc:	1807d0ba 	srai	r3,r3,2
    de00:	22c9883a 	add	r4,r4,r11
    de04:	21800217 	ldw	r6,8(r4)
    de08:	10c4983a 	sll	r2,r2,r3
    de0c:	41000315 	stw	r4,12(r8)
    de10:	41800215 	stw	r6,8(r8)
    de14:	288ab03a 	or	r5,r5,r2
    de18:	22000215 	stw	r8,8(r4)
    de1c:	8809883a 	mov	r4,r17
    de20:	51400115 	stw	r5,4(r10)
    de24:	32000315 	stw	r8,12(r6)
    de28:	dfc00217 	ldw	ra,8(sp)
    de2c:	dc400117 	ldw	r17,4(sp)
    de30:	dc000017 	ldw	r16,0(sp)
    de34:	dec00304 	addi	sp,sp,12
    de38:	00138341 	jmpi	13834 <__malloc_unlock>
    de3c:	2880004c 	andi	r2,r5,1
    de40:	3a4d883a 	add	r6,r7,r9
    de44:	1000071e 	bne	r2,zero,de64 <_free_r+0x218>
    de48:	80bffe17 	ldw	r2,-8(r16)
    de4c:	4091c83a 	sub	r8,r8,r2
    de50:	41000317 	ldw	r4,12(r8)
    de54:	40c00217 	ldw	r3,8(r8)
    de58:	308d883a 	add	r6,r6,r2
    de5c:	20c00215 	stw	r3,8(r4)
    de60:	19000315 	stw	r4,12(r3)
    de64:	00820034 	movhi	r2,2048
    de68:	108a3f04 	addi	r2,r2,10492
    de6c:	11000017 	ldw	r4,0(r2)
    de70:	30c00054 	ori	r3,r6,1
    de74:	52000215 	stw	r8,8(r10)
    de78:	40c00115 	stw	r3,4(r8)
    de7c:	313fa036 	bltu	r6,r4,dd00 <_free_r+0xb4>
    de80:	00820034 	movhi	r2,2048
    de84:	108a8404 	addi	r2,r2,10768
    de88:	11400017 	ldw	r5,0(r2)
    de8c:	8809883a 	mov	r4,r17
    de90:	000db200 	call	db20 <_malloc_trim_r>
    de94:	003f9a06 	br	dd00 <_free_r+0xb4>
    de98:	00800104 	movi	r2,4
    de9c:	10c0072e 	bgeu	r2,r3,debc <_free_r+0x270>
    dea0:	00800504 	movi	r2,20
    dea4:	10c01936 	bltu	r2,r3,df0c <_free_r+0x2c0>
    dea8:	188016c4 	addi	r2,r3,91
    deac:	100690fa 	slli	r3,r2,3
    deb0:	003fb306 	br	dd80 <_free_r+0x134>
    deb4:	01400044 	movi	r5,1
    deb8:	003f7e06 	br	dcb4 <_free_r+0x68>
    debc:	3804d1ba 	srli	r2,r7,6
    dec0:	10800e04 	addi	r2,r2,56
    dec4:	100690fa 	slli	r3,r2,3
    dec8:	003fad06 	br	dd80 <_free_r+0x134>
    decc:	22000315 	stw	r8,12(r4)
    ded0:	22000215 	stw	r8,8(r4)
    ded4:	3a05883a 	add	r2,r7,r8
    ded8:	38c00054 	ori	r3,r7,1
    dedc:	11c00015 	stw	r7,0(r2)
    dee0:	41000215 	stw	r4,8(r8)
    dee4:	40c00115 	stw	r3,4(r8)
    dee8:	41000315 	stw	r4,12(r8)
    deec:	003f8406 	br	dd00 <_free_r+0xb4>
    def0:	1005d0ba 	srai	r2,r2,2
    def4:	00c00044 	movi	r3,1
    def8:	51000117 	ldw	r4,4(r10)
    defc:	1886983a 	sll	r3,r3,r2
    df00:	20c8b03a 	or	r4,r4,r3
    df04:	51000115 	stw	r4,4(r10)
    df08:	003fa706 	br	dda8 <_free_r+0x15c>
    df0c:	00801504 	movi	r2,84
    df10:	10c00436 	bltu	r2,r3,df24 <_free_r+0x2d8>
    df14:	3804d33a 	srli	r2,r7,12
    df18:	10801b84 	addi	r2,r2,110
    df1c:	100690fa 	slli	r3,r2,3
    df20:	003f9706 	br	dd80 <_free_r+0x134>
    df24:	00805504 	movi	r2,340
    df28:	10c00436 	bltu	r2,r3,df3c <_free_r+0x2f0>
    df2c:	3804d3fa 	srli	r2,r7,15
    df30:	10801dc4 	addi	r2,r2,119
    df34:	100690fa 	slli	r3,r2,3
    df38:	003f9106 	br	dd80 <_free_r+0x134>
    df3c:	00815504 	movi	r2,1364
    df40:	10c0032e 	bgeu	r2,r3,df50 <_free_r+0x304>
    df44:	00801f84 	movi	r2,126
    df48:	00c0fc04 	movi	r3,1008
    df4c:	003f8c06 	br	dd80 <_free_r+0x134>
    df50:	3804d4ba 	srli	r2,r7,18
    df54:	10801f04 	addi	r2,r2,124
    df58:	100690fa 	slli	r3,r2,3
    df5c:	003f8806 	br	dd80 <_free_r+0x134>

0000df60 <__sfvwrite_r>:
    df60:	30800217 	ldw	r2,8(r6)
    df64:	defff504 	addi	sp,sp,-44
    df68:	df000915 	stw	fp,36(sp)
    df6c:	dd800715 	stw	r22,28(sp)
    df70:	dc800315 	stw	r18,12(sp)
    df74:	dfc00a15 	stw	ra,40(sp)
    df78:	ddc00815 	stw	r23,32(sp)
    df7c:	dd400615 	stw	r21,24(sp)
    df80:	dd000515 	stw	r20,20(sp)
    df84:	dcc00415 	stw	r19,16(sp)
    df88:	dc400215 	stw	r17,8(sp)
    df8c:	dc000115 	stw	r16,4(sp)
    df90:	302d883a 	mov	r22,r6
    df94:	2039883a 	mov	fp,r4
    df98:	2825883a 	mov	r18,r5
    df9c:	10001c26 	beq	r2,zero,e010 <__sfvwrite_r+0xb0>
    dfa0:	29c0030b 	ldhu	r7,12(r5)
    dfa4:	3880020c 	andi	r2,r7,8
    dfa8:	10002726 	beq	r2,zero,e048 <__sfvwrite_r+0xe8>
    dfac:	28800417 	ldw	r2,16(r5)
    dfb0:	10002526 	beq	r2,zero,e048 <__sfvwrite_r+0xe8>
    dfb4:	3880008c 	andi	r2,r7,2
    dfb8:	b5400017 	ldw	r21,0(r22)
    dfbc:	10002826 	beq	r2,zero,e060 <__sfvwrite_r+0x100>
    dfc0:	0021883a 	mov	r16,zero
    dfc4:	0023883a 	mov	r17,zero
    dfc8:	880d883a 	mov	r6,r17
    dfcc:	e009883a 	mov	r4,fp
    dfd0:	00810004 	movi	r2,1024
    dfd4:	80006e26 	beq	r16,zero,e190 <__sfvwrite_r+0x230>
    dfd8:	800f883a 	mov	r7,r16
    dfdc:	91400717 	ldw	r5,28(r18)
    dfe0:	1400012e 	bgeu	r2,r16,dfe8 <__sfvwrite_r+0x88>
    dfe4:	100f883a 	mov	r7,r2
    dfe8:	90c00917 	ldw	r3,36(r18)
    dfec:	183ee83a 	callr	r3
    dff0:	1007883a 	mov	r3,r2
    dff4:	80a1c83a 	sub	r16,r16,r2
    dff8:	88a3883a 	add	r17,r17,r2
    dffc:	00806d0e 	bge	zero,r2,e1b4 <__sfvwrite_r+0x254>
    e000:	b0800217 	ldw	r2,8(r22)
    e004:	10c5c83a 	sub	r2,r2,r3
    e008:	b0800215 	stw	r2,8(r22)
    e00c:	103fee1e 	bne	r2,zero,dfc8 <__sfvwrite_r+0x68>
    e010:	0009883a 	mov	r4,zero
    e014:	2005883a 	mov	r2,r4
    e018:	dfc00a17 	ldw	ra,40(sp)
    e01c:	df000917 	ldw	fp,36(sp)
    e020:	ddc00817 	ldw	r23,32(sp)
    e024:	dd800717 	ldw	r22,28(sp)
    e028:	dd400617 	ldw	r21,24(sp)
    e02c:	dd000517 	ldw	r20,20(sp)
    e030:	dcc00417 	ldw	r19,16(sp)
    e034:	dc800317 	ldw	r18,12(sp)
    e038:	dc400217 	ldw	r17,8(sp)
    e03c:	dc000117 	ldw	r16,4(sp)
    e040:	dec00b04 	addi	sp,sp,44
    e044:	f800283a 	ret
    e048:	000bd280 	call	bd28 <__swsetup_r>
    e04c:	1000e41e 	bne	r2,zero,e3e0 <__sfvwrite_r+0x480>
    e050:	91c0030b 	ldhu	r7,12(r18)
    e054:	b5400017 	ldw	r21,0(r22)
    e058:	3880008c 	andi	r2,r7,2
    e05c:	103fd81e 	bne	r2,zero,dfc0 <__sfvwrite_r+0x60>
    e060:	3880004c 	andi	r2,r7,1
    e064:	1005003a 	cmpeq	r2,r2,zero
    e068:	10005726 	beq	r2,zero,e1c8 <__sfvwrite_r+0x268>
    e06c:	0029883a 	mov	r20,zero
    e070:	002f883a 	mov	r23,zero
    e074:	a0004226 	beq	r20,zero,e180 <__sfvwrite_r+0x220>
    e078:	3880800c 	andi	r2,r7,512
    e07c:	94000217 	ldw	r16,8(r18)
    e080:	10008b26 	beq	r2,zero,e2b0 <__sfvwrite_r+0x350>
    e084:	800d883a 	mov	r6,r16
    e088:	a400a536 	bltu	r20,r16,e320 <__sfvwrite_r+0x3c0>
    e08c:	3881200c 	andi	r2,r7,1152
    e090:	10002726 	beq	r2,zero,e130 <__sfvwrite_r+0x1d0>
    e094:	90800517 	ldw	r2,20(r18)
    e098:	92000417 	ldw	r8,16(r18)
    e09c:	91400017 	ldw	r5,0(r18)
    e0a0:	1087883a 	add	r3,r2,r2
    e0a4:	1887883a 	add	r3,r3,r2
    e0a8:	1808d7fa 	srli	r4,r3,31
    e0ac:	2a21c83a 	sub	r16,r5,r8
    e0b0:	80800044 	addi	r2,r16,1
    e0b4:	20c9883a 	add	r4,r4,r3
    e0b8:	2027d07a 	srai	r19,r4,1
    e0bc:	a085883a 	add	r2,r20,r2
    e0c0:	980d883a 	mov	r6,r19
    e0c4:	9880022e 	bgeu	r19,r2,e0d0 <__sfvwrite_r+0x170>
    e0c8:	1027883a 	mov	r19,r2
    e0cc:	100d883a 	mov	r6,r2
    e0d0:	3881000c 	andi	r2,r7,1024
    e0d4:	1000b826 	beq	r2,zero,e3b8 <__sfvwrite_r+0x458>
    e0d8:	300b883a 	mov	r5,r6
    e0dc:	e009883a 	mov	r4,fp
    e0e0:	000f35c0 	call	f35c <_malloc_r>
    e0e4:	10003126 	beq	r2,zero,e1ac <__sfvwrite_r+0x24c>
    e0e8:	91400417 	ldw	r5,16(r18)
    e0ec:	1009883a 	mov	r4,r2
    e0f0:	800d883a 	mov	r6,r16
    e0f4:	1023883a 	mov	r17,r2
    e0f8:	00083140 	call	8314 <memcpy>
    e0fc:	90c0030b 	ldhu	r3,12(r18)
    e100:	00beffc4 	movi	r2,-1025
    e104:	1886703a 	and	r3,r3,r2
    e108:	18c02014 	ori	r3,r3,128
    e10c:	90c0030d 	sth	r3,12(r18)
    e110:	9c07c83a 	sub	r3,r19,r16
    e114:	8c05883a 	add	r2,r17,r16
    e118:	a00d883a 	mov	r6,r20
    e11c:	a021883a 	mov	r16,r20
    e120:	90800015 	stw	r2,0(r18)
    e124:	90c00215 	stw	r3,8(r18)
    e128:	94400415 	stw	r17,16(r18)
    e12c:	94c00515 	stw	r19,20(r18)
    e130:	91000017 	ldw	r4,0(r18)
    e134:	b80b883a 	mov	r5,r23
    e138:	a023883a 	mov	r17,r20
    e13c:	000fb800 	call	fb80 <memmove>
    e140:	90c00217 	ldw	r3,8(r18)
    e144:	90800017 	ldw	r2,0(r18)
    e148:	a027883a 	mov	r19,r20
    e14c:	1c07c83a 	sub	r3,r3,r16
    e150:	1405883a 	add	r2,r2,r16
    e154:	90c00215 	stw	r3,8(r18)
    e158:	a021883a 	mov	r16,r20
    e15c:	90800015 	stw	r2,0(r18)
    e160:	b0800217 	ldw	r2,8(r22)
    e164:	1405c83a 	sub	r2,r2,r16
    e168:	b0800215 	stw	r2,8(r22)
    e16c:	103fa826 	beq	r2,zero,e010 <__sfvwrite_r+0xb0>
    e170:	a469c83a 	sub	r20,r20,r17
    e174:	91c0030b 	ldhu	r7,12(r18)
    e178:	bcef883a 	add	r23,r23,r19
    e17c:	a03fbe1e 	bne	r20,zero,e078 <__sfvwrite_r+0x118>
    e180:	adc00017 	ldw	r23,0(r21)
    e184:	ad000117 	ldw	r20,4(r21)
    e188:	ad400204 	addi	r21,r21,8
    e18c:	003fb906 	br	e074 <__sfvwrite_r+0x114>
    e190:	ac400017 	ldw	r17,0(r21)
    e194:	ac000117 	ldw	r16,4(r21)
    e198:	ad400204 	addi	r21,r21,8
    e19c:	003f8a06 	br	dfc8 <__sfvwrite_r+0x68>
    e1a0:	91400417 	ldw	r5,16(r18)
    e1a4:	e009883a 	mov	r4,fp
    e1a8:	000dc4c0 	call	dc4c <_free_r>
    e1ac:	00800304 	movi	r2,12
    e1b0:	e0800015 	stw	r2,0(fp)
    e1b4:	9080030b 	ldhu	r2,12(r18)
    e1b8:	013fffc4 	movi	r4,-1
    e1bc:	10801014 	ori	r2,r2,64
    e1c0:	9080030d 	sth	r2,12(r18)
    e1c4:	003f9306 	br	e014 <__sfvwrite_r+0xb4>
    e1c8:	0027883a 	mov	r19,zero
    e1cc:	002f883a 	mov	r23,zero
    e1d0:	d8000015 	stw	zero,0(sp)
    e1d4:	0029883a 	mov	r20,zero
    e1d8:	98001e26 	beq	r19,zero,e254 <__sfvwrite_r+0x2f4>
    e1dc:	d8c00017 	ldw	r3,0(sp)
    e1e0:	1804c03a 	cmpne	r2,r3,zero
    e1e4:	10005e26 	beq	r2,zero,e360 <__sfvwrite_r+0x400>
    e1e8:	9821883a 	mov	r16,r19
    e1ec:	a4c0012e 	bgeu	r20,r19,e1f4 <__sfvwrite_r+0x294>
    e1f0:	a021883a 	mov	r16,r20
    e1f4:	91000017 	ldw	r4,0(r18)
    e1f8:	90800417 	ldw	r2,16(r18)
    e1fc:	91800217 	ldw	r6,8(r18)
    e200:	91c00517 	ldw	r7,20(r18)
    e204:	1100022e 	bgeu	r2,r4,e210 <__sfvwrite_r+0x2b0>
    e208:	31e3883a 	add	r17,r6,r7
    e20c:	8c001616 	blt	r17,r16,e268 <__sfvwrite_r+0x308>
    e210:	81c03816 	blt	r16,r7,e2f4 <__sfvwrite_r+0x394>
    e214:	90c00917 	ldw	r3,36(r18)
    e218:	91400717 	ldw	r5,28(r18)
    e21c:	e009883a 	mov	r4,fp
    e220:	b80d883a 	mov	r6,r23
    e224:	183ee83a 	callr	r3
    e228:	1023883a 	mov	r17,r2
    e22c:	00bfe10e 	bge	zero,r2,e1b4 <__sfvwrite_r+0x254>
    e230:	a469c83a 	sub	r20,r20,r17
    e234:	a0001826 	beq	r20,zero,e298 <__sfvwrite_r+0x338>
    e238:	b0800217 	ldw	r2,8(r22)
    e23c:	1445c83a 	sub	r2,r2,r17
    e240:	b0800215 	stw	r2,8(r22)
    e244:	103f7226 	beq	r2,zero,e010 <__sfvwrite_r+0xb0>
    e248:	9c67c83a 	sub	r19,r19,r17
    e24c:	bc6f883a 	add	r23,r23,r17
    e250:	983fe21e 	bne	r19,zero,e1dc <__sfvwrite_r+0x27c>
    e254:	adc00017 	ldw	r23,0(r21)
    e258:	acc00117 	ldw	r19,4(r21)
    e25c:	ad400204 	addi	r21,r21,8
    e260:	d8000015 	stw	zero,0(sp)
    e264:	003fdc06 	br	e1d8 <__sfvwrite_r+0x278>
    e268:	b80b883a 	mov	r5,r23
    e26c:	880d883a 	mov	r6,r17
    e270:	000fb800 	call	fb80 <memmove>
    e274:	90c00017 	ldw	r3,0(r18)
    e278:	e009883a 	mov	r4,fp
    e27c:	900b883a 	mov	r5,r18
    e280:	1c47883a 	add	r3,r3,r17
    e284:	90c00015 	stw	r3,0(r18)
    e288:	000d6300 	call	d630 <_fflush_r>
    e28c:	103fc91e 	bne	r2,zero,e1b4 <__sfvwrite_r+0x254>
    e290:	a469c83a 	sub	r20,r20,r17
    e294:	a03fe81e 	bne	r20,zero,e238 <__sfvwrite_r+0x2d8>
    e298:	e009883a 	mov	r4,fp
    e29c:	900b883a 	mov	r5,r18
    e2a0:	000d6300 	call	d630 <_fflush_r>
    e2a4:	103fc31e 	bne	r2,zero,e1b4 <__sfvwrite_r+0x254>
    e2a8:	d8000015 	stw	zero,0(sp)
    e2ac:	003fe206 	br	e238 <__sfvwrite_r+0x2d8>
    e2b0:	91000017 	ldw	r4,0(r18)
    e2b4:	90800417 	ldw	r2,16(r18)
    e2b8:	1100022e 	bgeu	r2,r4,e2c4 <__sfvwrite_r+0x364>
    e2bc:	8023883a 	mov	r17,r16
    e2c0:	85003136 	bltu	r16,r20,e388 <__sfvwrite_r+0x428>
    e2c4:	91c00517 	ldw	r7,20(r18)
    e2c8:	a1c01836 	bltu	r20,r7,e32c <__sfvwrite_r+0x3cc>
    e2cc:	90c00917 	ldw	r3,36(r18)
    e2d0:	91400717 	ldw	r5,28(r18)
    e2d4:	e009883a 	mov	r4,fp
    e2d8:	b80d883a 	mov	r6,r23
    e2dc:	183ee83a 	callr	r3
    e2e0:	1021883a 	mov	r16,r2
    e2e4:	00bfb30e 	bge	zero,r2,e1b4 <__sfvwrite_r+0x254>
    e2e8:	1023883a 	mov	r17,r2
    e2ec:	1027883a 	mov	r19,r2
    e2f0:	003f9b06 	br	e160 <__sfvwrite_r+0x200>
    e2f4:	b80b883a 	mov	r5,r23
    e2f8:	800d883a 	mov	r6,r16
    e2fc:	000fb800 	call	fb80 <memmove>
    e300:	90c00217 	ldw	r3,8(r18)
    e304:	90800017 	ldw	r2,0(r18)
    e308:	8023883a 	mov	r17,r16
    e30c:	1c07c83a 	sub	r3,r3,r16
    e310:	1405883a 	add	r2,r2,r16
    e314:	90c00215 	stw	r3,8(r18)
    e318:	90800015 	stw	r2,0(r18)
    e31c:	003fc406 	br	e230 <__sfvwrite_r+0x2d0>
    e320:	a00d883a 	mov	r6,r20
    e324:	a021883a 	mov	r16,r20
    e328:	003f8106 	br	e130 <__sfvwrite_r+0x1d0>
    e32c:	b80b883a 	mov	r5,r23
    e330:	a00d883a 	mov	r6,r20
    e334:	000fb800 	call	fb80 <memmove>
    e338:	90c00217 	ldw	r3,8(r18)
    e33c:	90800017 	ldw	r2,0(r18)
    e340:	a021883a 	mov	r16,r20
    e344:	1d07c83a 	sub	r3,r3,r20
    e348:	1505883a 	add	r2,r2,r20
    e34c:	a023883a 	mov	r17,r20
    e350:	a027883a 	mov	r19,r20
    e354:	90c00215 	stw	r3,8(r18)
    e358:	90800015 	stw	r2,0(r18)
    e35c:	003f8006 	br	e160 <__sfvwrite_r+0x200>
    e360:	b809883a 	mov	r4,r23
    e364:	01400284 	movi	r5,10
    e368:	980d883a 	mov	r6,r19
    e36c:	000fa9c0 	call	fa9c <memchr>
    e370:	10001726 	beq	r2,zero,e3d0 <__sfvwrite_r+0x470>
    e374:	15c5c83a 	sub	r2,r2,r23
    e378:	15000044 	addi	r20,r2,1
    e37c:	00800044 	movi	r2,1
    e380:	d8800015 	stw	r2,0(sp)
    e384:	003f9806 	br	e1e8 <__sfvwrite_r+0x288>
    e388:	b80b883a 	mov	r5,r23
    e38c:	800d883a 	mov	r6,r16
    e390:	000fb800 	call	fb80 <memmove>
    e394:	90c00017 	ldw	r3,0(r18)
    e398:	e009883a 	mov	r4,fp
    e39c:	900b883a 	mov	r5,r18
    e3a0:	1c07883a 	add	r3,r3,r16
    e3a4:	90c00015 	stw	r3,0(r18)
    e3a8:	8027883a 	mov	r19,r16
    e3ac:	000d6300 	call	d630 <_fflush_r>
    e3b0:	103f6b26 	beq	r2,zero,e160 <__sfvwrite_r+0x200>
    e3b4:	003f7f06 	br	e1b4 <__sfvwrite_r+0x254>
    e3b8:	400b883a 	mov	r5,r8
    e3bc:	e009883a 	mov	r4,fp
    e3c0:	0010e400 	call	10e40 <_realloc_r>
    e3c4:	103f7626 	beq	r2,zero,e1a0 <__sfvwrite_r+0x240>
    e3c8:	1023883a 	mov	r17,r2
    e3cc:	003f5006 	br	e110 <__sfvwrite_r+0x1b0>
    e3d0:	00c00044 	movi	r3,1
    e3d4:	9d000044 	addi	r20,r19,1
    e3d8:	d8c00015 	stw	r3,0(sp)
    e3dc:	003f8206 	br	e1e8 <__sfvwrite_r+0x288>
    e3e0:	9080030b 	ldhu	r2,12(r18)
    e3e4:	00c00244 	movi	r3,9
    e3e8:	013fffc4 	movi	r4,-1
    e3ec:	10801014 	ori	r2,r2,64
    e3f0:	9080030d 	sth	r2,12(r18)
    e3f4:	e0c00015 	stw	r3,0(fp)
    e3f8:	003f0606 	br	e014 <__sfvwrite_r+0xb4>

0000e3fc <_fwalk_reent>:
    e3fc:	defff704 	addi	sp,sp,-36
    e400:	dcc00315 	stw	r19,12(sp)
    e404:	24c0b804 	addi	r19,r4,736
    e408:	dd800615 	stw	r22,24(sp)
    e40c:	dd400515 	stw	r21,20(sp)
    e410:	dfc00815 	stw	ra,32(sp)
    e414:	ddc00715 	stw	r23,28(sp)
    e418:	dd000415 	stw	r20,16(sp)
    e41c:	dc800215 	stw	r18,8(sp)
    e420:	dc400115 	stw	r17,4(sp)
    e424:	dc000015 	stw	r16,0(sp)
    e428:	202b883a 	mov	r21,r4
    e42c:	282d883a 	mov	r22,r5
    e430:	000d8b80 	call	d8b8 <__sfp_lock_acquire>
    e434:	98002126 	beq	r19,zero,e4bc <_fwalk_reent+0xc0>
    e438:	002f883a 	mov	r23,zero
    e43c:	9c800117 	ldw	r18,4(r19)
    e440:	9c000217 	ldw	r16,8(r19)
    e444:	90bfffc4 	addi	r2,r18,-1
    e448:	10000d16 	blt	r2,zero,e480 <_fwalk_reent+0x84>
    e44c:	0023883a 	mov	r17,zero
    e450:	053fffc4 	movi	r20,-1
    e454:	8080030f 	ldh	r2,12(r16)
    e458:	8c400044 	addi	r17,r17,1
    e45c:	10000626 	beq	r2,zero,e478 <_fwalk_reent+0x7c>
    e460:	8080038f 	ldh	r2,14(r16)
    e464:	800b883a 	mov	r5,r16
    e468:	a809883a 	mov	r4,r21
    e46c:	15000226 	beq	r2,r20,e478 <_fwalk_reent+0x7c>
    e470:	b03ee83a 	callr	r22
    e474:	b8aeb03a 	or	r23,r23,r2
    e478:	84001704 	addi	r16,r16,92
    e47c:	947ff51e 	bne	r18,r17,e454 <_fwalk_reent+0x58>
    e480:	9cc00017 	ldw	r19,0(r19)
    e484:	983fed1e 	bne	r19,zero,e43c <_fwalk_reent+0x40>
    e488:	000d8bc0 	call	d8bc <__sfp_lock_release>
    e48c:	b805883a 	mov	r2,r23
    e490:	dfc00817 	ldw	ra,32(sp)
    e494:	ddc00717 	ldw	r23,28(sp)
    e498:	dd800617 	ldw	r22,24(sp)
    e49c:	dd400517 	ldw	r21,20(sp)
    e4a0:	dd000417 	ldw	r20,16(sp)
    e4a4:	dcc00317 	ldw	r19,12(sp)
    e4a8:	dc800217 	ldw	r18,8(sp)
    e4ac:	dc400117 	ldw	r17,4(sp)
    e4b0:	dc000017 	ldw	r16,0(sp)
    e4b4:	dec00904 	addi	sp,sp,36
    e4b8:	f800283a 	ret
    e4bc:	002f883a 	mov	r23,zero
    e4c0:	003ff106 	br	e488 <_fwalk_reent+0x8c>

0000e4c4 <_fwalk>:
    e4c4:	defff804 	addi	sp,sp,-32
    e4c8:	dcc00315 	stw	r19,12(sp)
    e4cc:	24c0b804 	addi	r19,r4,736
    e4d0:	dd400515 	stw	r21,20(sp)
    e4d4:	dfc00715 	stw	ra,28(sp)
    e4d8:	dd800615 	stw	r22,24(sp)
    e4dc:	dd000415 	stw	r20,16(sp)
    e4e0:	dc800215 	stw	r18,8(sp)
    e4e4:	dc400115 	stw	r17,4(sp)
    e4e8:	dc000015 	stw	r16,0(sp)
    e4ec:	282b883a 	mov	r21,r5
    e4f0:	000d8b80 	call	d8b8 <__sfp_lock_acquire>
    e4f4:	98001f26 	beq	r19,zero,e574 <_fwalk+0xb0>
    e4f8:	002d883a 	mov	r22,zero
    e4fc:	9c800117 	ldw	r18,4(r19)
    e500:	9c000217 	ldw	r16,8(r19)
    e504:	90bfffc4 	addi	r2,r18,-1
    e508:	10000c16 	blt	r2,zero,e53c <_fwalk+0x78>
    e50c:	0023883a 	mov	r17,zero
    e510:	053fffc4 	movi	r20,-1
    e514:	8080030f 	ldh	r2,12(r16)
    e518:	8c400044 	addi	r17,r17,1
    e51c:	10000526 	beq	r2,zero,e534 <_fwalk+0x70>
    e520:	8080038f 	ldh	r2,14(r16)
    e524:	8009883a 	mov	r4,r16
    e528:	15000226 	beq	r2,r20,e534 <_fwalk+0x70>
    e52c:	a83ee83a 	callr	r21
    e530:	b0acb03a 	or	r22,r22,r2
    e534:	84001704 	addi	r16,r16,92
    e538:	947ff61e 	bne	r18,r17,e514 <_fwalk+0x50>
    e53c:	9cc00017 	ldw	r19,0(r19)
    e540:	983fee1e 	bne	r19,zero,e4fc <_fwalk+0x38>
    e544:	000d8bc0 	call	d8bc <__sfp_lock_release>
    e548:	b005883a 	mov	r2,r22
    e54c:	dfc00717 	ldw	ra,28(sp)
    e550:	dd800617 	ldw	r22,24(sp)
    e554:	dd400517 	ldw	r21,20(sp)
    e558:	dd000417 	ldw	r20,16(sp)
    e55c:	dcc00317 	ldw	r19,12(sp)
    e560:	dc800217 	ldw	r18,8(sp)
    e564:	dc400117 	ldw	r17,4(sp)
    e568:	dc000017 	ldw	r16,0(sp)
    e56c:	dec00804 	addi	sp,sp,32
    e570:	f800283a 	ret
    e574:	002d883a 	mov	r22,zero
    e578:	003ff206 	br	e544 <_fwalk+0x80>

0000e57c <htinit>:
    e57c:	28800003 	ldbu	r2,0(r5)
    e580:	10000626 	beq	r2,zero,e59c <htinit+0x20>
    e584:	1105883a 	add	r2,r2,r4
    e588:	11800005 	stb	r6,0(r2)
    e58c:	28800043 	ldbu	r2,1(r5)
    e590:	31800044 	addi	r6,r6,1
    e594:	29400044 	addi	r5,r5,1
    e598:	103ffa1e 	bne	r2,zero,e584 <htinit+0x8>
    e59c:	f800283a 	ret

0000e5a0 <__hexdig_init>:
    e5a0:	defffd04 	addi	sp,sp,-12
    e5a4:	dc400015 	stw	r17,0(sp)
    e5a8:	04420234 	movhi	r17,2056
    e5ac:	8c40b704 	addi	r17,r17,732
    e5b0:	dcc00115 	stw	r19,4(sp)
    e5b4:	8809883a 	mov	r4,r17
    e5b8:	04c00684 	movi	r19,26
    e5bc:	01420034 	movhi	r5,2048
    e5c0:	29417804 	addi	r5,r5,1504
    e5c4:	01800404 	movi	r6,16
    e5c8:	dfc00215 	stw	ra,8(sp)
    e5cc:	000e57c0 	call	e57c <htinit>
    e5d0:	980d883a 	mov	r6,r19
    e5d4:	8809883a 	mov	r4,r17
    e5d8:	01420034 	movhi	r5,2048
    e5dc:	29417b04 	addi	r5,r5,1516
    e5e0:	000e57c0 	call	e57c <htinit>
    e5e4:	8809883a 	mov	r4,r17
    e5e8:	980d883a 	mov	r6,r19
    e5ec:	01420034 	movhi	r5,2048
    e5f0:	29417d04 	addi	r5,r5,1524
    e5f4:	dfc00217 	ldw	ra,8(sp)
    e5f8:	dcc00117 	ldw	r19,4(sp)
    e5fc:	dc400017 	ldw	r17,0(sp)
    e600:	dec00304 	addi	sp,sp,12
    e604:	000e57c1 	jmpi	e57c <htinit>

0000e608 <rshift>:
    e608:	2807d17a 	srai	r3,r5,5
    e60c:	20800417 	ldw	r2,16(r4)
    e610:	22400504 	addi	r9,r4,20
    e614:	480f883a 	mov	r7,r9
    e618:	1880190e 	bge	r3,r2,e680 <rshift+0x78>
    e61c:	1085883a 	add	r2,r2,r2
    e620:	18c7883a 	add	r3,r3,r3
    e624:	1085883a 	add	r2,r2,r2
    e628:	18c7883a 	add	r3,r3,r3
    e62c:	294007cc 	andi	r5,r5,31
    e630:	4891883a 	add	r8,r9,r2
    e634:	48cd883a 	add	r6,r9,r3
    e638:	28001726 	beq	r5,zero,e698 <rshift+0x90>
    e63c:	30c00017 	ldw	r3,0(r6)
    e640:	00800804 	movi	r2,32
    e644:	31800104 	addi	r6,r6,4
    e648:	1155c83a 	sub	r10,r2,r5
    e64c:	1946d83a 	srl	r3,r3,r5
    e650:	3200092e 	bgeu	r6,r8,e678 <rshift+0x70>
    e654:	30800017 	ldw	r2,0(r6)
    e658:	1284983a 	sll	r2,r2,r10
    e65c:	10c4b03a 	or	r2,r2,r3
    e660:	38800015 	stw	r2,0(r7)
    e664:	30c00017 	ldw	r3,0(r6)
    e668:	31800104 	addi	r6,r6,4
    e66c:	39c00104 	addi	r7,r7,4
    e670:	1946d83a 	srl	r3,r3,r5
    e674:	323ff736 	bltu	r6,r8,e654 <rshift+0x4c>
    e678:	38c00015 	stw	r3,0(r7)
    e67c:	18000c1e 	bne	r3,zero,e6b0 <rshift+0xa8>
    e680:	3a45c83a 	sub	r2,r7,r9
    e684:	1005d0ba 	srai	r2,r2,2
    e688:	20800415 	stw	r2,16(r4)
    e68c:	1000011e 	bne	r2,zero,e694 <rshift+0x8c>
    e690:	20000515 	stw	zero,20(r4)
    e694:	f800283a 	ret
    e698:	323ff92e 	bgeu	r6,r8,e680 <rshift+0x78>
    e69c:	30800017 	ldw	r2,0(r6)
    e6a0:	31800104 	addi	r6,r6,4
    e6a4:	38800015 	stw	r2,0(r7)
    e6a8:	39c00104 	addi	r7,r7,4
    e6ac:	003ffa06 	br	e698 <rshift+0x90>
    e6b0:	39c00104 	addi	r7,r7,4
    e6b4:	003ff206 	br	e680 <rshift+0x78>

0000e6b8 <__gethex>:
    e6b8:	defff304 	addi	sp,sp,-52
    e6bc:	dd400815 	stw	r21,32(sp)
    e6c0:	dd000715 	stw	r20,28(sp)
    e6c4:	dcc00615 	stw	r19,24(sp)
    e6c8:	dc400415 	stw	r17,16(sp)
    e6cc:	dfc00c15 	stw	ra,48(sp)
    e6d0:	df000b15 	stw	fp,44(sp)
    e6d4:	ddc00a15 	stw	r23,40(sp)
    e6d8:	dd800915 	stw	r22,36(sp)
    e6dc:	dc800515 	stw	r18,20(sp)
    e6e0:	dc000315 	stw	r16,12(sp)
    e6e4:	04420234 	movhi	r17,2056
    e6e8:	8c40b704 	addi	r17,r17,732
    e6ec:	88800c03 	ldbu	r2,48(r17)
    e6f0:	202b883a 	mov	r21,r4
    e6f4:	2827883a 	mov	r19,r5
    e6f8:	3029883a 	mov	r20,r6
    e6fc:	d9c00115 	stw	r7,4(sp)
    e700:	10006e26 	beq	r2,zero,e8bc <__gethex+0x204>
    e704:	99800017 	ldw	r6,0(r19)
    e708:	00800c04 	movi	r2,48
    e70c:	31000083 	ldbu	r4,2(r6)
    e710:	30c00084 	addi	r3,r6,2
    e714:	20806f1e 	bne	r4,r2,e8d4 <__gethex+0x21c>
    e718:	200b883a 	mov	r5,r4
    e71c:	3007883a 	mov	r3,r6
    e720:	188000c3 	ldbu	r2,3(r3)
    e724:	18c00044 	addi	r3,r3,1
    e728:	1009883a 	mov	r4,r2
    e72c:	117ffc26 	beq	r2,r5,e720 <__gethex+0x68>
    e730:	1997c83a 	sub	r11,r3,r6
    e734:	19400084 	addi	r5,r3,2
    e738:	2445883a 	add	r2,r4,r17
    e73c:	10c00003 	ldbu	r3,0(r2)
    e740:	18002d26 	beq	r3,zero,e7f8 <__gethex+0x140>
    e744:	29000003 	ldbu	r4,0(r5)
    e748:	2825883a 	mov	r18,r5
    e74c:	000d883a 	mov	r6,zero
    e750:	0013883a 	mov	r9,zero
    e754:	21003fcc 	andi	r4,r4,255
    e758:	2445883a 	add	r2,r4,r17
    e75c:	10c00003 	ldbu	r3,0(r2)
    e760:	18000526 	beq	r3,zero,e778 <__gethex+0xc0>
    e764:	29400044 	addi	r5,r5,1
    e768:	29000003 	ldbu	r4,0(r5)
    e76c:	2445883a 	add	r2,r4,r17
    e770:	10c00003 	ldbu	r3,0(r2)
    e774:	183ffb1e 	bne	r3,zero,e764 <__gethex+0xac>
    e778:	00800b84 	movi	r2,46
    e77c:	20805826 	beq	r4,r2,e8e0 <__gethex+0x228>
    e780:	30007a26 	beq	r6,zero,e96c <__gethex+0x2b4>
    e784:	2985c83a 	sub	r2,r5,r6
    e788:	1085883a 	add	r2,r2,r2
    e78c:	1085883a 	add	r2,r2,r2
    e790:	00adc83a 	sub	r22,zero,r2
    e794:	2821883a 	mov	r16,r5
    e798:	80c00003 	ldbu	r3,0(r16)
    e79c:	00801404 	movi	r2,80
    e7a0:	18801e26 	beq	r3,r2,e81c <__gethex+0x164>
    e7a4:	00801c04 	movi	r2,112
    e7a8:	18801c26 	beq	r3,r2,e81c <__gethex+0x164>
    e7ac:	800d883a 	mov	r6,r16
    e7b0:	4805003a 	cmpeq	r2,r9,zero
    e7b4:	99800015 	stw	r6,0(r19)
    e7b8:	1000861e 	bne	r2,zero,e9d4 <__gethex+0x31c>
    e7bc:	58003d26 	beq	r11,zero,e8b4 <__gethex+0x1fc>
    e7c0:	0025883a 	mov	r18,zero
    e7c4:	9005883a 	mov	r2,r18
    e7c8:	dfc00c17 	ldw	ra,48(sp)
    e7cc:	df000b17 	ldw	fp,44(sp)
    e7d0:	ddc00a17 	ldw	r23,40(sp)
    e7d4:	dd800917 	ldw	r22,36(sp)
    e7d8:	dd400817 	ldw	r21,32(sp)
    e7dc:	dd000717 	ldw	r20,28(sp)
    e7e0:	dcc00617 	ldw	r19,24(sp)
    e7e4:	dc800517 	ldw	r18,20(sp)
    e7e8:	dc400417 	ldw	r17,16(sp)
    e7ec:	dc000317 	ldw	r16,12(sp)
    e7f0:	dec00d04 	addi	sp,sp,52
    e7f4:	f800283a 	ret
    e7f8:	00800b84 	movi	r2,46
    e7fc:	20804a26 	beq	r4,r2,e928 <__gethex+0x270>
    e800:	2821883a 	mov	r16,r5
    e804:	80c00003 	ldbu	r3,0(r16)
    e808:	00801404 	movi	r2,80
    e80c:	2825883a 	mov	r18,r5
    e810:	02400044 	movi	r9,1
    e814:	002d883a 	mov	r22,zero
    e818:	18bfe21e 	bne	r3,r2,e7a4 <__gethex+0xec>
    e81c:	80c00043 	ldbu	r3,1(r16)
    e820:	00800ac4 	movi	r2,43
    e824:	81000044 	addi	r4,r16,1
    e828:	18804a26 	beq	r3,r2,e954 <__gethex+0x29c>
    e82c:	00800b44 	movi	r2,45
    e830:	18804c26 	beq	r3,r2,e964 <__gethex+0x2ac>
    e834:	0015883a 	mov	r10,zero
    e838:	1c45883a 	add	r2,r3,r17
    e83c:	10800003 	ldbu	r2,0(r2)
    e840:	103fda26 	beq	r2,zero,e7ac <__gethex+0xf4>
    e844:	02000644 	movi	r8,25
    e848:	40bfd816 	blt	r8,r2,e7ac <__gethex+0xf4>
    e84c:	20c00043 	ldbu	r3,1(r4)
    e850:	11fffc04 	addi	r7,r2,-16
    e854:	00820234 	movhi	r2,2056
    e858:	1080b704 	addi	r2,r2,732
    e85c:	1887883a 	add	r3,r3,r2
    e860:	18800003 	ldbu	r2,0(r3)
    e864:	21800044 	addi	r6,r4,1
    e868:	10000d26 	beq	r2,zero,e8a0 <__gethex+0x1e8>
    e86c:	100b883a 	mov	r5,r2
    e870:	4080020e 	bge	r8,r2,e87c <__gethex+0x1c4>
    e874:	00000a06 	br	e8a0 <__gethex+0x1e8>
    e878:	41000916 	blt	r8,r4,e8a0 <__gethex+0x1e8>
    e87c:	31800044 	addi	r6,r6,1
    e880:	30800003 	ldbu	r2,0(r6)
    e884:	38c002a4 	muli	r3,r7,10
    e888:	1445883a 	add	r2,r2,r17
    e88c:	11000003 	ldbu	r4,0(r2)
    e890:	1947883a 	add	r3,r3,r5
    e894:	19fffc04 	addi	r7,r3,-16
    e898:	200b883a 	mov	r5,r4
    e89c:	203ff61e 	bne	r4,zero,e878 <__gethex+0x1c0>
    e8a0:	5005003a 	cmpeq	r2,r10,zero
    e8a4:	1000011e 	bne	r2,zero,e8ac <__gethex+0x1f4>
    e8a8:	01cfc83a 	sub	r7,zero,r7
    e8ac:	b1ed883a 	add	r22,r22,r7
    e8b0:	003fbf06 	br	e7b0 <__gethex+0xf8>
    e8b4:	04800184 	movi	r18,6
    e8b8:	003fc206 	br	e7c4 <__gethex+0x10c>
    e8bc:	000e5a00 	call	e5a0 <__hexdig_init>
    e8c0:	99800017 	ldw	r6,0(r19)
    e8c4:	00800c04 	movi	r2,48
    e8c8:	31000083 	ldbu	r4,2(r6)
    e8cc:	30c00084 	addi	r3,r6,2
    e8d0:	20bf9126 	beq	r4,r2,e718 <__gethex+0x60>
    e8d4:	180b883a 	mov	r5,r3
    e8d8:	0017883a 	mov	r11,zero
    e8dc:	003f9606 	br	e738 <__gethex+0x80>
    e8e0:	303fa81e 	bne	r6,zero,e784 <__gethex+0xcc>
    e8e4:	29400044 	addi	r5,r5,1
    e8e8:	28800003 	ldbu	r2,0(r5)
    e8ec:	1445883a 	add	r2,r2,r17
    e8f0:	10c00003 	ldbu	r3,0(r2)
    e8f4:	1800ad26 	beq	r3,zero,ebac <__gethex+0x4f4>
    e8f8:	2809883a 	mov	r4,r5
    e8fc:	21000044 	addi	r4,r4,1
    e900:	20800003 	ldbu	r2,0(r4)
    e904:	1445883a 	add	r2,r2,r17
    e908:	10c00003 	ldbu	r3,0(r2)
    e90c:	183ffb1e 	bne	r3,zero,e8fc <__gethex+0x244>
    e910:	2145c83a 	sub	r2,r4,r5
    e914:	1085883a 	add	r2,r2,r2
    e918:	1085883a 	add	r2,r2,r2
    e91c:	00adc83a 	sub	r22,zero,r2
    e920:	200b883a 	mov	r5,r4
    e924:	003f9b06 	br	e794 <__gethex+0xdc>
    e928:	29000043 	ldbu	r4,1(r5)
    e92c:	00820234 	movhi	r2,2056
    e930:	1080b704 	addi	r2,r2,732
    e934:	2c000044 	addi	r16,r5,1
    e938:	2085883a 	add	r2,r4,r2
    e93c:	10c00003 	ldbu	r3,0(r2)
    e940:	18000d1e 	bne	r3,zero,e978 <__gethex+0x2c0>
    e944:	2825883a 	mov	r18,r5
    e948:	02400044 	movi	r9,1
    e94c:	002d883a 	mov	r22,zero
    e950:	003f9106 	br	e798 <__gethex+0xe0>
    e954:	0015883a 	mov	r10,zero
    e958:	21000044 	addi	r4,r4,1
    e95c:	20c00003 	ldbu	r3,0(r4)
    e960:	003fb506 	br	e838 <__gethex+0x180>
    e964:	02800044 	movi	r10,1
    e968:	003ffb06 	br	e958 <__gethex+0x2a0>
    e96c:	2821883a 	mov	r16,r5
    e970:	002d883a 	mov	r22,zero
    e974:	003f8806 	br	e798 <__gethex+0xe0>
    e978:	00800c04 	movi	r2,48
    e97c:	20800e1e 	bne	r4,r2,e9b8 <__gethex+0x300>
    e980:	2007883a 	mov	r3,r4
    e984:	800b883a 	mov	r5,r16
    e988:	29400044 	addi	r5,r5,1
    e98c:	29000003 	ldbu	r4,0(r5)
    e990:	20803fcc 	andi	r2,r4,255
    e994:	10fffc26 	beq	r2,r3,e988 <__gethex+0x2d0>
    e998:	1445883a 	add	r2,r2,r17
    e99c:	10c00003 	ldbu	r3,0(r2)
    e9a0:	1800071e 	bne	r3,zero,e9c0 <__gethex+0x308>
    e9a4:	02c00044 	movi	r11,1
    e9a8:	800d883a 	mov	r6,r16
    e9ac:	2825883a 	mov	r18,r5
    e9b0:	5813883a 	mov	r9,r11
    e9b4:	003f6706 	br	e754 <__gethex+0x9c>
    e9b8:	81000003 	ldbu	r4,0(r16)
    e9bc:	800b883a 	mov	r5,r16
    e9c0:	800d883a 	mov	r6,r16
    e9c4:	2825883a 	mov	r18,r5
    e9c8:	02c00044 	movi	r11,1
    e9cc:	0013883a 	mov	r9,zero
    e9d0:	003f6006 	br	e754 <__gethex+0x9c>
    e9d4:	8485c83a 	sub	r2,r16,r18
    e9d8:	10bfffc4 	addi	r2,r2,-1
    e9dc:	00c001c4 	movi	r3,7
    e9e0:	1880700e 	bge	r3,r2,eba4 <__gethex+0x4ec>
    e9e4:	000b883a 	mov	r5,zero
    e9e8:	1005d07a 	srai	r2,r2,1
    e9ec:	29400044 	addi	r5,r5,1
    e9f0:	18bffd16 	blt	r3,r2,e9e8 <__gethex+0x330>
    e9f4:	a809883a 	mov	r4,r21
    e9f8:	00101e00 	call	101e0 <_Balloc>
    e9fc:	1027883a 	mov	r19,r2
    ea00:	10800504 	addi	r2,r2,20
    ea04:	d8800215 	stw	r2,8(sp)
    ea08:	9400522e 	bgeu	r18,r16,eb54 <__gethex+0x49c>
    ea0c:	da000217 	ldw	r8,8(sp)
    ea10:	800b883a 	mov	r5,r16
    ea14:	000f883a 	mov	r7,zero
    ea18:	0009883a 	mov	r4,zero
    ea1c:	02400b84 	movi	r9,46
    ea20:	02800804 	movi	r10,32
    ea24:	297fffc4 	addi	r5,r5,-1
    ea28:	28c00003 	ldbu	r3,0(r5)
    ea2c:	1a400826 	beq	r3,r9,ea50 <__gethex+0x398>
    ea30:	380d883a 	mov	r6,r7
    ea34:	3a802726 	beq	r7,r10,ead4 <__gethex+0x41c>
    ea38:	39c00104 	addi	r7,r7,4
    ea3c:	1c47883a 	add	r3,r3,r17
    ea40:	18800003 	ldbu	r2,0(r3)
    ea44:	108003cc 	andi	r2,r2,15
    ea48:	1184983a 	sll	r2,r2,r6
    ea4c:	2088b03a 	or	r4,r4,r2
    ea50:	917ff436 	bltu	r18,r5,ea24 <__gethex+0x36c>
    ea54:	d8c00217 	ldw	r3,8(sp)
    ea58:	40800104 	addi	r2,r8,4
    ea5c:	41000015 	stw	r4,0(r8)
    ea60:	10c5c83a 	sub	r2,r2,r3
    ea64:	1021d0ba 	srai	r16,r2,2
    ea68:	9c000415 	stw	r16,16(r19)
    ea6c:	000fc880 	call	fc88 <__hi0bits>
    ea70:	8006917a 	slli	r3,r16,5
    ea74:	a5c00017 	ldw	r23,0(r20)
    ea78:	1885c83a 	sub	r2,r3,r2
    ea7c:	b8801c16 	blt	r23,r2,eaf0 <__gethex+0x438>
    ea80:	15c00a16 	blt	r2,r23,eaac <__gethex+0x3f4>
    ea84:	0039883a 	mov	fp,zero
    ea88:	a0800217 	ldw	r2,8(r20)
    ea8c:	1580340e 	bge	r2,r22,eb60 <__gethex+0x4a8>
    ea90:	a809883a 	mov	r4,r21
    ea94:	980b883a 	mov	r5,r19
    ea98:	000fc600 	call	fc60 <_Bfree>
    ea9c:	d8c00d17 	ldw	r3,52(sp)
    eaa0:	048028c4 	movi	r18,163
    eaa4:	18000015 	stw	zero,0(r3)
    eaa8:	003f4606 	br	e7c4 <__gethex+0x10c>
    eaac:	b8a1c83a 	sub	r16,r23,r2
    eab0:	980b883a 	mov	r5,r19
    eab4:	a809883a 	mov	r4,r21
    eab8:	800d883a 	mov	r6,r16
    eabc:	00105a40 	call	105a4 <__lshift>
    eac0:	1027883a 	mov	r19,r2
    eac4:	b42dc83a 	sub	r22,r22,r16
    eac8:	10800504 	addi	r2,r2,20
    eacc:	d8800215 	stw	r2,8(sp)
    ead0:	003fec06 	br	ea84 <__gethex+0x3cc>
    ead4:	41000015 	stw	r4,0(r8)
    ead8:	28c00003 	ldbu	r3,0(r5)
    eadc:	01c00104 	movi	r7,4
    eae0:	000d883a 	mov	r6,zero
    eae4:	41d1883a 	add	r8,r8,r7
    eae8:	0009883a 	mov	r4,zero
    eaec:	003fd306 	br	ea3c <__gethex+0x384>
    eaf0:	15e1c83a 	sub	r16,r2,r23
    eaf4:	9809883a 	mov	r4,r19
    eaf8:	800b883a 	mov	r5,r16
    eafc:	00101580 	call	10158 <__any_on>
    eb00:	1000061e 	bne	r2,zero,eb1c <__gethex+0x464>
    eb04:	0039883a 	mov	fp,zero
    eb08:	9809883a 	mov	r4,r19
    eb0c:	800b883a 	mov	r5,r16
    eb10:	000e6080 	call	e608 <rshift>
    eb14:	b42d883a 	add	r22,r22,r16
    eb18:	003fdb06 	br	ea88 <__gethex+0x3d0>
    eb1c:	817fffc4 	addi	r5,r16,-1
    eb20:	2805d17a 	srai	r2,r5,5
    eb24:	d8c00217 	ldw	r3,8(sp)
    eb28:	290007cc 	andi	r4,r5,31
    eb2c:	1085883a 	add	r2,r2,r2
    eb30:	1085883a 	add	r2,r2,r2
    eb34:	01800044 	movi	r6,1
    eb38:	10c5883a 	add	r2,r2,r3
    eb3c:	3108983a 	sll	r4,r6,r4
    eb40:	10c00017 	ldw	r3,0(r2)
    eb44:	20c8703a 	and	r4,r4,r3
    eb48:	20001a1e 	bne	r4,zero,ebb4 <__gethex+0x4fc>
    eb4c:	3039883a 	mov	fp,r6
    eb50:	003fed06 	br	eb08 <__gethex+0x450>
    eb54:	1011883a 	mov	r8,r2
    eb58:	0009883a 	mov	r4,zero
    eb5c:	003fbd06 	br	ea54 <__gethex+0x39c>
    eb60:	a1000117 	ldw	r4,4(r20)
    eb64:	b1001a16 	blt	r22,r4,ebd0 <__gethex+0x518>
    eb68:	04800044 	movi	r18,1
    eb6c:	e0000826 	beq	fp,zero,eb90 <__gethex+0x4d8>
    eb70:	a1000317 	ldw	r4,12(r20)
    eb74:	00800084 	movi	r2,2
    eb78:	20809426 	beq	r4,r2,edcc <__gethex+0x714>
    eb7c:	008000c4 	movi	r2,3
    eb80:	20805826 	beq	r4,r2,ece4 <__gethex+0x62c>
    eb84:	00800044 	movi	r2,1
    eb88:	20803f26 	beq	r4,r2,ec88 <__gethex+0x5d0>
    eb8c:	94800414 	ori	r18,r18,16
    eb90:	d8800d17 	ldw	r2,52(sp)
    eb94:	d8c00117 	ldw	r3,4(sp)
    eb98:	14c00015 	stw	r19,0(r2)
    eb9c:	1d800015 	stw	r22,0(r3)
    eba0:	003f0806 	br	e7c4 <__gethex+0x10c>
    eba4:	000b883a 	mov	r5,zero
    eba8:	003f9206 	br	e9f4 <__gethex+0x33c>
    ebac:	002d883a 	mov	r22,zero
    ebb0:	003ef806 	br	e794 <__gethex+0xdc>
    ebb4:	3140160e 	bge	r6,r5,ec10 <__gethex+0x558>
    ebb8:	9809883a 	mov	r4,r19
    ebbc:	817fff84 	addi	r5,r16,-2
    ebc0:	00101580 	call	10158 <__any_on>
    ebc4:	10001226 	beq	r2,zero,ec10 <__gethex+0x558>
    ebc8:	070000c4 	movi	fp,3
    ebcc:	003fce06 	br	eb08 <__gethex+0x450>
    ebd0:	25a3c83a 	sub	r17,r4,r22
    ebd4:	8dc01016 	blt	r17,r23,ec18 <__gethex+0x560>
    ebd8:	a0c00317 	ldw	r3,12(r20)
    ebdc:	00800084 	movi	r2,2
    ebe0:	18809326 	beq	r3,r2,ee30 <__gethex+0x778>
    ebe4:	008000c4 	movi	r2,3
    ebe8:	18808e26 	beq	r3,r2,ee24 <__gethex+0x76c>
    ebec:	00800044 	movi	r2,1
    ebf0:	18807b26 	beq	r3,r2,ede0 <__gethex+0x728>
    ebf4:	a809883a 	mov	r4,r21
    ebf8:	980b883a 	mov	r5,r19
    ebfc:	000fc600 	call	fc60 <_Bfree>
    ec00:	d8c00d17 	ldw	r3,52(sp)
    ec04:	04801404 	movi	r18,80
    ec08:	18000015 	stw	zero,0(r3)
    ec0c:	003eed06 	br	e7c4 <__gethex+0x10c>
    ec10:	07000084 	movi	fp,2
    ec14:	003fbc06 	br	eb08 <__gethex+0x450>
    ec18:	8c3fffc4 	addi	r16,r17,-1
    ec1c:	e0001426 	beq	fp,zero,ec70 <__gethex+0x5b8>
    ec20:	07000044 	movi	fp,1
    ec24:	8005d17a 	srai	r2,r16,5
    ec28:	d8c00217 	ldw	r3,8(sp)
    ec2c:	814007cc 	andi	r5,r16,31
    ec30:	1085883a 	add	r2,r2,r2
    ec34:	1085883a 	add	r2,r2,r2
    ec38:	10c5883a 	add	r2,r2,r3
    ec3c:	00c00044 	movi	r3,1
    ec40:	1946983a 	sll	r3,r3,r5
    ec44:	11000017 	ldw	r4,0(r2)
    ec48:	1906703a 	and	r3,r3,r4
    ec4c:	18000126 	beq	r3,zero,ec54 <__gethex+0x59c>
    ec50:	e7000094 	ori	fp,fp,2
    ec54:	880b883a 	mov	r5,r17
    ec58:	9809883a 	mov	r4,r19
    ec5c:	000e6080 	call	e608 <rshift>
    ec60:	a5800117 	ldw	r22,4(r20)
    ec64:	bc6fc83a 	sub	r23,r23,r17
    ec68:	04800084 	movi	r18,2
    ec6c:	003fbf06 	br	eb6c <__gethex+0x4b4>
    ec70:	043fec0e 	bge	zero,r16,ec24 <__gethex+0x56c>
    ec74:	9809883a 	mov	r4,r19
    ec78:	800b883a 	mov	r5,r16
    ec7c:	00101580 	call	10158 <__any_on>
    ec80:	1039883a 	mov	fp,r2
    ec84:	003fe706 	br	ec24 <__gethex+0x56c>
    ec88:	e080008c 	andi	r2,fp,2
    ec8c:	103fbf26 	beq	r2,zero,eb8c <__gethex+0x4d4>
    ec90:	d8c00217 	ldw	r3,8(sp)
    ec94:	18800017 	ldw	r2,0(r3)
    ec98:	e084b03a 	or	r2,fp,r2
    ec9c:	1104703a 	and	r2,r2,r4
    eca0:	103fba26 	beq	r2,zero,eb8c <__gethex+0x4d4>
    eca4:	9c000417 	ldw	r16,16(r19)
    eca8:	d8c00217 	ldw	r3,8(sp)
    ecac:	017fffc4 	movi	r5,-1
    ecb0:	8405883a 	add	r2,r16,r16
    ecb4:	10b9883a 	add	fp,r2,r2
    ecb8:	1f09883a 	add	r4,r3,fp
    ecbc:	dc000015 	stw	r16,0(sp)
    ecc0:	00000306 	br	ecd0 <__gethex+0x618>
    ecc4:	18000015 	stw	zero,0(r3)
    ecc8:	18c00104 	addi	r3,r3,4
    eccc:	1900082e 	bgeu	r3,r4,ecf0 <__gethex+0x638>
    ecd0:	18800017 	ldw	r2,0(r3)
    ecd4:	117ffb26 	beq	r2,r5,ecc4 <__gethex+0x60c>
    ecd8:	10800044 	addi	r2,r2,1
    ecdc:	18800015 	stw	r2,0(r3)
    ece0:	00001f06 	br	ed60 <__gethex+0x6a8>
    ece4:	d8800e17 	ldw	r2,56(sp)
    ece8:	103fa826 	beq	r2,zero,eb8c <__gethex+0x4d4>
    ecec:	003fed06 	br	eca4 <__gethex+0x5ec>
    ecf0:	98800217 	ldw	r2,8(r19)
    ecf4:	80801316 	blt	r16,r2,ed44 <__gethex+0x68c>
    ecf8:	99400117 	ldw	r5,4(r19)
    ecfc:	a809883a 	mov	r4,r21
    ed00:	29400044 	addi	r5,r5,1
    ed04:	00101e00 	call	101e0 <_Balloc>
    ed08:	99800417 	ldw	r6,16(r19)
    ed0c:	99400304 	addi	r5,r19,12
    ed10:	11000304 	addi	r4,r2,12
    ed14:	318d883a 	add	r6,r6,r6
    ed18:	318d883a 	add	r6,r6,r6
    ed1c:	31800204 	addi	r6,r6,8
    ed20:	1023883a 	mov	r17,r2
    ed24:	00083140 	call	8314 <memcpy>
    ed28:	980b883a 	mov	r5,r19
    ed2c:	a809883a 	mov	r4,r21
    ed30:	000fc600 	call	fc60 <_Bfree>
    ed34:	8c000417 	ldw	r16,16(r17)
    ed38:	88800504 	addi	r2,r17,20
    ed3c:	8827883a 	mov	r19,r17
    ed40:	d8800215 	stw	r2,8(sp)
    ed44:	8405883a 	add	r2,r16,r16
    ed48:	1085883a 	add	r2,r2,r2
    ed4c:	14c5883a 	add	r2,r2,r19
    ed50:	84000044 	addi	r16,r16,1
    ed54:	00c00044 	movi	r3,1
    ed58:	10c00515 	stw	r3,20(r2)
    ed5c:	9c000415 	stw	r16,16(r19)
    ed60:	00800084 	movi	r2,2
    ed64:	90801426 	beq	r18,r2,edb8 <__gethex+0x700>
    ed68:	d8800017 	ldw	r2,0(sp)
    ed6c:	14000b16 	blt	r2,r16,ed9c <__gethex+0x6e4>
    ed70:	bc0007cc 	andi	r16,r23,31
    ed74:	8000021e 	bne	r16,zero,ed80 <__gethex+0x6c8>
    ed78:	94800814 	ori	r18,r18,32
    ed7c:	003f8406 	br	eb90 <__gethex+0x4d8>
    ed80:	d8c00217 	ldw	r3,8(sp)
    ed84:	1f05883a 	add	r2,r3,fp
    ed88:	113fff17 	ldw	r4,-4(r2)
    ed8c:	000fc880 	call	fc88 <__hi0bits>
    ed90:	00c00804 	movi	r3,32
    ed94:	1c07c83a 	sub	r3,r3,r16
    ed98:	10fff70e 	bge	r2,r3,ed78 <__gethex+0x6c0>
    ed9c:	9809883a 	mov	r4,r19
    eda0:	01400044 	movi	r5,1
    eda4:	000e6080 	call	e608 <rshift>
    eda8:	a0800217 	ldw	r2,8(r20)
    edac:	b5800044 	addi	r22,r22,1
    edb0:	15bf3716 	blt	r2,r22,ea90 <__gethex+0x3d8>
    edb4:	003ff006 	br	ed78 <__gethex+0x6c0>
    edb8:	a0800017 	ldw	r2,0(r20)
    edbc:	10bfffc4 	addi	r2,r2,-1
    edc0:	b8801e26 	beq	r23,r2,ee3c <__gethex+0x784>
    edc4:	04800884 	movi	r18,34
    edc8:	003f7106 	br	eb90 <__gethex+0x4d8>
    edcc:	d8c00e17 	ldw	r3,56(sp)
    edd0:	00800044 	movi	r2,1
    edd4:	10c5c83a 	sub	r2,r2,r3
    edd8:	103f6c26 	beq	r2,zero,eb8c <__gethex+0x4d4>
    eddc:	003fb106 	br	eca4 <__gethex+0x5ec>
    ede0:	bc7f841e 	bne	r23,r17,ebf4 <__gethex+0x53c>
    ede4:	1dc0050e 	bge	r3,r23,edfc <__gethex+0x744>
    ede8:	b8cbc83a 	sub	r5,r23,r3
    edec:	9809883a 	mov	r4,r19
    edf0:	00101580 	call	10158 <__any_on>
    edf4:	103f7f26 	beq	r2,zero,ebf4 <__gethex+0x53c>
    edf8:	a1000117 	ldw	r4,4(r20)
    edfc:	d8800117 	ldw	r2,4(sp)
    ee00:	d8c00217 	ldw	r3,8(sp)
    ee04:	04000044 	movi	r16,1
    ee08:	11000015 	stw	r4,0(r2)
    ee0c:	d8800d17 	ldw	r2,52(sp)
    ee10:	04801884 	movi	r18,98
    ee14:	1c000015 	stw	r16,0(r3)
    ee18:	14c00015 	stw	r19,0(r2)
    ee1c:	9c000415 	stw	r16,16(r19)
    ee20:	003e6806 	br	e7c4 <__gethex+0x10c>
    ee24:	d8c00e17 	ldw	r3,56(sp)
    ee28:	183f7226 	beq	r3,zero,ebf4 <__gethex+0x53c>
    ee2c:	003ff306 	br	edfc <__gethex+0x744>
    ee30:	d8800e17 	ldw	r2,56(sp)
    ee34:	103ff126 	beq	r2,zero,edfc <__gethex+0x744>
    ee38:	003f6e06 	br	ebf4 <__gethex+0x53c>
    ee3c:	b805d17a 	srai	r2,r23,5
    ee40:	d8c00217 	ldw	r3,8(sp)
    ee44:	b94007cc 	andi	r5,r23,31
    ee48:	1085883a 	add	r2,r2,r2
    ee4c:	1085883a 	add	r2,r2,r2
    ee50:	10c5883a 	add	r2,r2,r3
    ee54:	00c00044 	movi	r3,1
    ee58:	1946983a 	sll	r3,r3,r5
    ee5c:	11000017 	ldw	r4,0(r2)
    ee60:	1906703a 	and	r3,r3,r4
    ee64:	183fd726 	beq	r3,zero,edc4 <__gethex+0x70c>
    ee68:	04800844 	movi	r18,33
    ee6c:	003f4806 	br	eb90 <__gethex+0x4d8>

0000ee70 <L_shift>:
    ee70:	00800204 	movi	r2,8
    ee74:	1185c83a 	sub	r2,r2,r6
    ee78:	1085883a 	add	r2,r2,r2
    ee7c:	21c00017 	ldw	r7,0(r4)
    ee80:	1093883a 	add	r9,r2,r2
    ee84:	00800804 	movi	r2,32
    ee88:	200d883a 	mov	r6,r4
    ee8c:	1251c83a 	sub	r8,r2,r9
    ee90:	31800104 	addi	r6,r6,4
    ee94:	3805883a 	mov	r2,r7
    ee98:	31c00017 	ldw	r7,0(r6)
    ee9c:	3a08983a 	sll	r4,r7,r8
    eea0:	3a46d83a 	srl	r3,r7,r9
    eea4:	1104b03a 	or	r2,r2,r4
    eea8:	180f883a 	mov	r7,r3
    eeac:	30bfff15 	stw	r2,-4(r6)
    eeb0:	30c00015 	stw	r3,0(r6)
    eeb4:	317ff636 	bltu	r6,r5,ee90 <L_shift+0x20>
    eeb8:	f800283a 	ret

0000eebc <__hexnan>:
    eebc:	defff404 	addi	sp,sp,-48
    eec0:	dd800815 	stw	r22,32(sp)
    eec4:	05820234 	movhi	r22,2056
    eec8:	b580b704 	addi	r22,r22,732
    eecc:	b0800c03 	ldbu	r2,48(r22)
    eed0:	dcc00515 	stw	r19,20(sp)
    eed4:	dc000215 	stw	r16,8(sp)
    eed8:	dfc00b15 	stw	ra,44(sp)
    eedc:	df000a15 	stw	fp,40(sp)
    eee0:	ddc00915 	stw	r23,36(sp)
    eee4:	dd400715 	stw	r21,28(sp)
    eee8:	dd000615 	stw	r20,24(sp)
    eeec:	dc800415 	stw	r18,16(sp)
    eef0:	dc400315 	stw	r17,12(sp)
    eef4:	d9000115 	stw	r4,4(sp)
    eef8:	2821883a 	mov	r16,r5
    eefc:	3027883a 	mov	r19,r6
    ef00:	10007426 	beq	r2,zero,f0d4 <__hexnan+0x218>
    ef04:	80c00017 	ldw	r3,0(r16)
    ef08:	1805d17a 	srai	r2,r3,5
    ef0c:	18c007cc 	andi	r3,r3,31
    ef10:	1839003a 	cmpeq	fp,r3,zero
    ef14:	1085883a 	add	r2,r2,r2
    ef18:	1085883a 	add	r2,r2,r2
    ef1c:	d8c00015 	stw	r3,0(sp)
    ef20:	14c5883a 	add	r2,r2,r19
    ef24:	e000011e 	bne	fp,zero,ef2c <__hexnan+0x70>
    ef28:	10800104 	addi	r2,r2,4
    ef2c:	d8c00117 	ldw	r3,4(sp)
    ef30:	153fff04 	addi	r20,r2,-4
    ef34:	a021883a 	mov	r16,r20
    ef38:	1c400017 	ldw	r17,0(r3)
    ef3c:	a02b883a 	mov	r21,r20
    ef40:	0025883a 	mov	r18,zero
    ef44:	002f883a 	mov	r23,zero
    ef48:	000d883a 	mov	r6,zero
    ef4c:	103fff15 	stw	zero,-4(r2)
    ef50:	8c400044 	addi	r17,r17,1
    ef54:	89000003 	ldbu	r4,0(r17)
    ef58:	20000e26 	beq	r4,zero,ef94 <__hexnan+0xd8>
    ef5c:	2585883a 	add	r2,r4,r22
    ef60:	10c00003 	ldbu	r3,0(r2)
    ef64:	18002e1e 	bne	r3,zero,f020 <__hexnan+0x164>
    ef68:	00800804 	movi	r2,32
    ef6c:	11005536 	bltu	r2,r4,f0c4 <__hexnan+0x208>
    ef70:	bcbff70e 	bge	r23,r18,ef50 <__hexnan+0x94>
    ef74:	8540022e 	bgeu	r16,r21,ef80 <__hexnan+0xc4>
    ef78:	008001c4 	movi	r2,7
    ef7c:	11803c0e 	bge	r2,r6,f070 <__hexnan+0x1b4>
    ef80:	9c003536 	bltu	r19,r16,f058 <__hexnan+0x19c>
    ef84:	8c400044 	addi	r17,r17,1
    ef88:	89000003 	ldbu	r4,0(r17)
    ef8c:	01800204 	movi	r6,8
    ef90:	203ff21e 	bne	r4,zero,ef5c <__hexnan+0xa0>
    ef94:	90004d26 	beq	r18,zero,f0cc <__hexnan+0x210>
    ef98:	85404336 	bltu	r16,r21,f0a8 <__hexnan+0x1ec>
    ef9c:	9c00382e 	bgeu	r19,r16,f080 <__hexnan+0x1c4>
    efa0:	9807883a 	mov	r3,r19
    efa4:	80800017 	ldw	r2,0(r16)
    efa8:	84000104 	addi	r16,r16,4
    efac:	18800015 	stw	r2,0(r3)
    efb0:	18c00104 	addi	r3,r3,4
    efb4:	a43ffb2e 	bgeu	r20,r16,efa4 <__hexnan+0xe8>
    efb8:	18000015 	stw	zero,0(r3)
    efbc:	18c00104 	addi	r3,r3,4
    efc0:	a0fffd2e 	bgeu	r20,r3,efb8 <__hexnan+0xfc>
    efc4:	a0800017 	ldw	r2,0(r20)
    efc8:	1000071e 	bne	r2,zero,efe8 <__hexnan+0x12c>
    efcc:	9d004326 	beq	r19,r20,f0dc <__hexnan+0x220>
    efd0:	a007883a 	mov	r3,r20
    efd4:	00000106 	br	efdc <__hexnan+0x120>
    efd8:	98c04026 	beq	r19,r3,f0dc <__hexnan+0x220>
    efdc:	18ffff04 	addi	r3,r3,-4
    efe0:	18800017 	ldw	r2,0(r3)
    efe4:	103ffc26 	beq	r2,zero,efd8 <__hexnan+0x11c>
    efe8:	00c00144 	movi	r3,5
    efec:	1805883a 	mov	r2,r3
    eff0:	dfc00b17 	ldw	ra,44(sp)
    eff4:	df000a17 	ldw	fp,40(sp)
    eff8:	ddc00917 	ldw	r23,36(sp)
    effc:	dd800817 	ldw	r22,32(sp)
    f000:	dd400717 	ldw	r21,28(sp)
    f004:	dd000617 	ldw	r20,24(sp)
    f008:	dcc00517 	ldw	r19,20(sp)
    f00c:	dc800417 	ldw	r18,16(sp)
    f010:	dc400317 	ldw	r17,12(sp)
    f014:	dc000217 	ldw	r16,8(sp)
    f018:	dec00c04 	addi	sp,sp,48
    f01c:	f800283a 	ret
    f020:	31800044 	addi	r6,r6,1
    f024:	00800204 	movi	r2,8
    f028:	94800044 	addi	r18,r18,1
    f02c:	1180040e 	bge	r2,r6,f040 <__hexnan+0x184>
    f030:	9c3fc72e 	bgeu	r19,r16,ef50 <__hexnan+0x94>
    f034:	843fff04 	addi	r16,r16,-4
    f038:	80000015 	stw	zero,0(r16)
    f03c:	01800044 	movi	r6,1
    f040:	80800017 	ldw	r2,0(r16)
    f044:	18c003cc 	andi	r3,r3,15
    f048:	1004913a 	slli	r2,r2,4
    f04c:	10c4b03a 	or	r2,r2,r3
    f050:	80800015 	stw	r2,0(r16)
    f054:	003fbe06 	br	ef50 <__hexnan+0x94>
    f058:	843fff04 	addi	r16,r16,-4
    f05c:	802b883a 	mov	r21,r16
    f060:	902f883a 	mov	r23,r18
    f064:	000d883a 	mov	r6,zero
    f068:	80000015 	stw	zero,0(r16)
    f06c:	003fb806 	br	ef50 <__hexnan+0x94>
    f070:	8009883a 	mov	r4,r16
    f074:	a80b883a 	mov	r5,r21
    f078:	000ee700 	call	ee70 <L_shift>
    f07c:	003fc006 	br	ef80 <__hexnan+0xc4>
    f080:	e03fd01e 	bne	fp,zero,efc4 <__hexnan+0x108>
    f084:	d8c00017 	ldw	r3,0(sp)
    f088:	00800804 	movi	r2,32
    f08c:	10c5c83a 	sub	r2,r2,r3
    f090:	00ffffc4 	movi	r3,-1
    f094:	1886d83a 	srl	r3,r3,r2
    f098:	a0800017 	ldw	r2,0(r20)
    f09c:	10c4703a 	and	r2,r2,r3
    f0a0:	a0800015 	stw	r2,0(r20)
    f0a4:	003fc806 	br	efc8 <__hexnan+0x10c>
    f0a8:	008001c4 	movi	r2,7
    f0ac:	11bfbb16 	blt	r2,r6,ef9c <__hexnan+0xe0>
    f0b0:	a80b883a 	mov	r5,r21
    f0b4:	8009883a 	mov	r4,r16
    f0b8:	000ee700 	call	ee70 <L_shift>
    f0bc:	9c3ff02e 	bgeu	r19,r16,f080 <__hexnan+0x1c4>
    f0c0:	003fb706 	br	efa0 <__hexnan+0xe4>
    f0c4:	00800a44 	movi	r2,41
    f0c8:	20800826 	beq	r4,r2,f0ec <__hexnan+0x230>
    f0cc:	00c00104 	movi	r3,4
    f0d0:	003fc606 	br	efec <__hexnan+0x130>
    f0d4:	000e5a00 	call	e5a0 <__hexdig_init>
    f0d8:	003f8a06 	br	ef04 <__hexnan+0x48>
    f0dc:	00800044 	movi	r2,1
    f0e0:	00c00144 	movi	r3,5
    f0e4:	98800015 	stw	r2,0(r19)
    f0e8:	003fc006 	br	efec <__hexnan+0x130>
    f0ec:	903ff726 	beq	r18,zero,f0cc <__hexnan+0x210>
    f0f0:	d8c00117 	ldw	r3,4(sp)
    f0f4:	88800044 	addi	r2,r17,1
    f0f8:	18800015 	stw	r2,0(r3)
    f0fc:	857fa72e 	bgeu	r16,r21,ef9c <__hexnan+0xe0>
    f100:	003fe906 	br	f0a8 <__hexnan+0x1ec>

0000f104 <__locale_charset>:
    f104:	d0a00f17 	ldw	r2,-32708(gp)
    f108:	f800283a 	ret

0000f10c <_localeconv_r>:
    f10c:	00820034 	movhi	r2,2048
    f110:	10818404 	addi	r2,r2,1552
    f114:	f800283a 	ret

0000f118 <localeconv>:
    f118:	00820034 	movhi	r2,2048
    f11c:	108a3b04 	addi	r2,r2,10476
    f120:	11000017 	ldw	r4,0(r2)
    f124:	000f10c1 	jmpi	f10c <_localeconv_r>

0000f128 <_setlocale_r>:
    f128:	defffc04 	addi	sp,sp,-16
    f12c:	00c20034 	movhi	r3,2048
    f130:	18c17f04 	addi	r3,r3,1532
    f134:	dc800215 	stw	r18,8(sp)
    f138:	dc400115 	stw	r17,4(sp)
    f13c:	dc000015 	stw	r16,0(sp)
    f140:	2023883a 	mov	r17,r4
    f144:	2825883a 	mov	r18,r5
    f148:	dfc00315 	stw	ra,12(sp)
    f14c:	3021883a 	mov	r16,r6
    f150:	3009883a 	mov	r4,r6
    f154:	180b883a 	mov	r5,r3
    f158:	30000926 	beq	r6,zero,f180 <_setlocale_r+0x58>
    f15c:	00116600 	call	11660 <strcmp>
    f160:	8009883a 	mov	r4,r16
    f164:	01420034 	movhi	r5,2048
    f168:	29416304 	addi	r5,r5,1420
    f16c:	10000b1e 	bne	r2,zero,f19c <_setlocale_r+0x74>
    f170:	8c000d15 	stw	r16,52(r17)
    f174:	8c800c15 	stw	r18,48(r17)
    f178:	00c20034 	movhi	r3,2048
    f17c:	18c17f04 	addi	r3,r3,1532
    f180:	1805883a 	mov	r2,r3
    f184:	dfc00317 	ldw	ra,12(sp)
    f188:	dc800217 	ldw	r18,8(sp)
    f18c:	dc400117 	ldw	r17,4(sp)
    f190:	dc000017 	ldw	r16,0(sp)
    f194:	dec00404 	addi	sp,sp,16
    f198:	f800283a 	ret
    f19c:	00116600 	call	11660 <strcmp>
    f1a0:	0007883a 	mov	r3,zero
    f1a4:	103ff226 	beq	r2,zero,f170 <_setlocale_r+0x48>
    f1a8:	003ff506 	br	f180 <_setlocale_r+0x58>

0000f1ac <setlocale>:
    f1ac:	01820034 	movhi	r6,2048
    f1b0:	318a3b04 	addi	r6,r6,10476
    f1b4:	2007883a 	mov	r3,r4
    f1b8:	31000017 	ldw	r4,0(r6)
    f1bc:	280d883a 	mov	r6,r5
    f1c0:	180b883a 	mov	r5,r3
    f1c4:	000f1281 	jmpi	f128 <_setlocale_r>

0000f1c8 <__smakebuf_r>:
    f1c8:	2880030b 	ldhu	r2,12(r5)
    f1cc:	deffed04 	addi	sp,sp,-76
    f1d0:	dc401015 	stw	r17,64(sp)
    f1d4:	1080008c 	andi	r2,r2,2
    f1d8:	dc000f15 	stw	r16,60(sp)
    f1dc:	dfc01215 	stw	ra,72(sp)
    f1e0:	dc801115 	stw	r18,68(sp)
    f1e4:	2821883a 	mov	r16,r5
    f1e8:	2023883a 	mov	r17,r4
    f1ec:	10000b26 	beq	r2,zero,f21c <__smakebuf_r+0x54>
    f1f0:	28c010c4 	addi	r3,r5,67
    f1f4:	00800044 	movi	r2,1
    f1f8:	28800515 	stw	r2,20(r5)
    f1fc:	28c00415 	stw	r3,16(r5)
    f200:	28c00015 	stw	r3,0(r5)
    f204:	dfc01217 	ldw	ra,72(sp)
    f208:	dc801117 	ldw	r18,68(sp)
    f20c:	dc401017 	ldw	r17,64(sp)
    f210:	dc000f17 	ldw	r16,60(sp)
    f214:	dec01304 	addi	sp,sp,76
    f218:	f800283a 	ret
    f21c:	2940038f 	ldh	r5,14(r5)
    f220:	28002116 	blt	r5,zero,f2a8 <__smakebuf_r+0xe0>
    f224:	d80d883a 	mov	r6,sp
    f228:	0011b280 	call	11b28 <_fstat_r>
    f22c:	10001e16 	blt	r2,zero,f2a8 <__smakebuf_r+0xe0>
    f230:	d8800117 	ldw	r2,4(sp)
    f234:	00e00014 	movui	r3,32768
    f238:	113c000c 	andi	r4,r2,61440
    f23c:	20c03126 	beq	r4,r3,f304 <__smakebuf_r+0x13c>
    f240:	8080030b 	ldhu	r2,12(r16)
    f244:	00c80004 	movi	r3,8192
    f248:	10820014 	ori	r2,r2,2048
    f24c:	8080030d 	sth	r2,12(r16)
    f250:	20c01e26 	beq	r4,r3,f2cc <__smakebuf_r+0x104>
    f254:	04810004 	movi	r18,1024
    f258:	8809883a 	mov	r4,r17
    f25c:	900b883a 	mov	r5,r18
    f260:	000f35c0 	call	f35c <_malloc_r>
    f264:	1009883a 	mov	r4,r2
    f268:	10003126 	beq	r2,zero,f330 <__smakebuf_r+0x168>
    f26c:	80c0030b 	ldhu	r3,12(r16)
    f270:	00800074 	movhi	r2,1
    f274:	10b66b04 	addi	r2,r2,-9812
    f278:	88800f15 	stw	r2,60(r17)
    f27c:	18c02014 	ori	r3,r3,128
    f280:	84800515 	stw	r18,20(r16)
    f284:	80c0030d 	sth	r3,12(r16)
    f288:	81000415 	stw	r4,16(r16)
    f28c:	81000015 	stw	r4,0(r16)
    f290:	dfc01217 	ldw	ra,72(sp)
    f294:	dc801117 	ldw	r18,68(sp)
    f298:	dc401017 	ldw	r17,64(sp)
    f29c:	dc000f17 	ldw	r16,60(sp)
    f2a0:	dec01304 	addi	sp,sp,76
    f2a4:	f800283a 	ret
    f2a8:	80c0030b 	ldhu	r3,12(r16)
    f2ac:	1880200c 	andi	r2,r3,128
    f2b0:	10000426 	beq	r2,zero,f2c4 <__smakebuf_r+0xfc>
    f2b4:	04801004 	movi	r18,64
    f2b8:	18820014 	ori	r2,r3,2048
    f2bc:	8080030d 	sth	r2,12(r16)
    f2c0:	003fe506 	br	f258 <__smakebuf_r+0x90>
    f2c4:	04810004 	movi	r18,1024
    f2c8:	003ffb06 	br	f2b8 <__smakebuf_r+0xf0>
    f2cc:	8140038f 	ldh	r5,14(r16)
    f2d0:	8809883a 	mov	r4,r17
    f2d4:	0011b9c0 	call	11b9c <_isatty_r>
    f2d8:	103fde26 	beq	r2,zero,f254 <__smakebuf_r+0x8c>
    f2dc:	8080030b 	ldhu	r2,12(r16)
    f2e0:	80c010c4 	addi	r3,r16,67
    f2e4:	04810004 	movi	r18,1024
    f2e8:	10800054 	ori	r2,r2,1
    f2ec:	8080030d 	sth	r2,12(r16)
    f2f0:	00800044 	movi	r2,1
    f2f4:	80c00415 	stw	r3,16(r16)
    f2f8:	80800515 	stw	r2,20(r16)
    f2fc:	80c00015 	stw	r3,0(r16)
    f300:	003fd506 	br	f258 <__smakebuf_r+0x90>
    f304:	80c00a17 	ldw	r3,40(r16)
    f308:	00800074 	movhi	r2,1
    f30c:	10854704 	addi	r2,r2,5404
    f310:	18bfcb1e 	bne	r3,r2,f240 <__smakebuf_r+0x78>
    f314:	8080030b 	ldhu	r2,12(r16)
    f318:	00c10004 	movi	r3,1024
    f31c:	1825883a 	mov	r18,r3
    f320:	10c4b03a 	or	r2,r2,r3
    f324:	8080030d 	sth	r2,12(r16)
    f328:	80c01315 	stw	r3,76(r16)
    f32c:	003fca06 	br	f258 <__smakebuf_r+0x90>
    f330:	8100030b 	ldhu	r4,12(r16)
    f334:	2080800c 	andi	r2,r4,512
    f338:	103fb21e 	bne	r2,zero,f204 <__smakebuf_r+0x3c>
    f33c:	80c010c4 	addi	r3,r16,67
    f340:	21000094 	ori	r4,r4,2
    f344:	00800044 	movi	r2,1
    f348:	80800515 	stw	r2,20(r16)
    f34c:	8100030d 	sth	r4,12(r16)
    f350:	80c00415 	stw	r3,16(r16)
    f354:	80c00015 	stw	r3,0(r16)
    f358:	003faa06 	br	f204 <__smakebuf_r+0x3c>

0000f35c <_malloc_r>:
    f35c:	defff604 	addi	sp,sp,-40
    f360:	28c002c4 	addi	r3,r5,11
    f364:	00800584 	movi	r2,22
    f368:	dc800215 	stw	r18,8(sp)
    f36c:	dfc00915 	stw	ra,36(sp)
    f370:	df000815 	stw	fp,32(sp)
    f374:	ddc00715 	stw	r23,28(sp)
    f378:	dd800615 	stw	r22,24(sp)
    f37c:	dd400515 	stw	r21,20(sp)
    f380:	dd000415 	stw	r20,16(sp)
    f384:	dcc00315 	stw	r19,12(sp)
    f388:	dc400115 	stw	r17,4(sp)
    f38c:	dc000015 	stw	r16,0(sp)
    f390:	2025883a 	mov	r18,r4
    f394:	10c01236 	bltu	r2,r3,f3e0 <_malloc_r+0x84>
    f398:	04400404 	movi	r17,16
    f39c:	8940142e 	bgeu	r17,r5,f3f0 <_malloc_r+0x94>
    f3a0:	00800304 	movi	r2,12
    f3a4:	0007883a 	mov	r3,zero
    f3a8:	90800015 	stw	r2,0(r18)
    f3ac:	1805883a 	mov	r2,r3
    f3b0:	dfc00917 	ldw	ra,36(sp)
    f3b4:	df000817 	ldw	fp,32(sp)
    f3b8:	ddc00717 	ldw	r23,28(sp)
    f3bc:	dd800617 	ldw	r22,24(sp)
    f3c0:	dd400517 	ldw	r21,20(sp)
    f3c4:	dd000417 	ldw	r20,16(sp)
    f3c8:	dcc00317 	ldw	r19,12(sp)
    f3cc:	dc800217 	ldw	r18,8(sp)
    f3d0:	dc400117 	ldw	r17,4(sp)
    f3d4:	dc000017 	ldw	r16,0(sp)
    f3d8:	dec00a04 	addi	sp,sp,40
    f3dc:	f800283a 	ret
    f3e0:	00bffe04 	movi	r2,-8
    f3e4:	18a2703a 	and	r17,r3,r2
    f3e8:	883fed16 	blt	r17,zero,f3a0 <_malloc_r+0x44>
    f3ec:	897fec36 	bltu	r17,r5,f3a0 <_malloc_r+0x44>
    f3f0:	9009883a 	mov	r4,r18
    f3f4:	00138140 	call	13814 <__malloc_lock>
    f3f8:	00807dc4 	movi	r2,503
    f3fc:	14402b2e 	bgeu	r2,r17,f4ac <_malloc_r+0x150>
    f400:	8806d27a 	srli	r3,r17,9
    f404:	18003f1e 	bne	r3,zero,f504 <_malloc_r+0x1a8>
    f408:	880cd0fa 	srli	r6,r17,3
    f40c:	300490fa 	slli	r2,r6,3
    f410:	02c20034 	movhi	r11,2048
    f414:	5ac3c704 	addi	r11,r11,3868
    f418:	12cb883a 	add	r5,r2,r11
    f41c:	2c000317 	ldw	r16,12(r5)
    f420:	580f883a 	mov	r7,r11
    f424:	2c00041e 	bne	r5,r16,f438 <_malloc_r+0xdc>
    f428:	00000a06 	br	f454 <_malloc_r+0xf8>
    f42c:	1800860e 	bge	r3,zero,f648 <_malloc_r+0x2ec>
    f430:	84000317 	ldw	r16,12(r16)
    f434:	2c000726 	beq	r5,r16,f454 <_malloc_r+0xf8>
    f438:	80800117 	ldw	r2,4(r16)
    f43c:	00ffff04 	movi	r3,-4
    f440:	10c8703a 	and	r4,r2,r3
    f444:	2447c83a 	sub	r3,r4,r17
    f448:	008003c4 	movi	r2,15
    f44c:	10fff70e 	bge	r2,r3,f42c <_malloc_r+0xd0>
    f450:	31bfffc4 	addi	r6,r6,-1
    f454:	32400044 	addi	r9,r6,1
    f458:	02820034 	movhi	r10,2048
    f45c:	5283c904 	addi	r10,r10,3876
    f460:	54000217 	ldw	r16,8(r10)
    f464:	8280a026 	beq	r16,r10,f6e8 <_malloc_r+0x38c>
    f468:	80800117 	ldw	r2,4(r16)
    f46c:	00ffff04 	movi	r3,-4
    f470:	10ca703a 	and	r5,r2,r3
    f474:	2c4dc83a 	sub	r6,r5,r17
    f478:	008003c4 	movi	r2,15
    f47c:	11808316 	blt	r2,r6,f68c <_malloc_r+0x330>
    f480:	52800315 	stw	r10,12(r10)
    f484:	52800215 	stw	r10,8(r10)
    f488:	30002916 	blt	r6,zero,f530 <_malloc_r+0x1d4>
    f48c:	8147883a 	add	r3,r16,r5
    f490:	18800117 	ldw	r2,4(r3)
    f494:	9009883a 	mov	r4,r18
    f498:	10800054 	ori	r2,r2,1
    f49c:	18800115 	stw	r2,4(r3)
    f4a0:	00138340 	call	13834 <__malloc_unlock>
    f4a4:	80c00204 	addi	r3,r16,8
    f4a8:	003fc006 	br	f3ac <_malloc_r+0x50>
    f4ac:	02c20034 	movhi	r11,2048
    f4b0:	5ac3c704 	addi	r11,r11,3868
    f4b4:	8ac5883a 	add	r2,r17,r11
    f4b8:	14000317 	ldw	r16,12(r2)
    f4bc:	580f883a 	mov	r7,r11
    f4c0:	8806d0fa 	srli	r3,r17,3
    f4c4:	14006c26 	beq	r2,r16,f678 <_malloc_r+0x31c>
    f4c8:	80c00117 	ldw	r3,4(r16)
    f4cc:	00bfff04 	movi	r2,-4
    f4d0:	81800317 	ldw	r6,12(r16)
    f4d4:	1886703a 	and	r3,r3,r2
    f4d8:	80c7883a 	add	r3,r16,r3
    f4dc:	18800117 	ldw	r2,4(r3)
    f4e0:	81400217 	ldw	r5,8(r16)
    f4e4:	9009883a 	mov	r4,r18
    f4e8:	10800054 	ori	r2,r2,1
    f4ec:	18800115 	stw	r2,4(r3)
    f4f0:	31400215 	stw	r5,8(r6)
    f4f4:	29800315 	stw	r6,12(r5)
    f4f8:	00138340 	call	13834 <__malloc_unlock>
    f4fc:	80c00204 	addi	r3,r16,8
    f500:	003faa06 	br	f3ac <_malloc_r+0x50>
    f504:	00800104 	movi	r2,4
    f508:	10c0052e 	bgeu	r2,r3,f520 <_malloc_r+0x1c4>
    f50c:	00800504 	movi	r2,20
    f510:	10c07836 	bltu	r2,r3,f6f4 <_malloc_r+0x398>
    f514:	198016c4 	addi	r6,r3,91
    f518:	300490fa 	slli	r2,r6,3
    f51c:	003fbc06 	br	f410 <_malloc_r+0xb4>
    f520:	8804d1ba 	srli	r2,r17,6
    f524:	11800e04 	addi	r6,r2,56
    f528:	300490fa 	slli	r2,r6,3
    f52c:	003fb806 	br	f410 <_malloc_r+0xb4>
    f530:	00807fc4 	movi	r2,511
    f534:	1140bb36 	bltu	r2,r5,f824 <_malloc_r+0x4c8>
    f538:	2806d0fa 	srli	r3,r5,3
    f53c:	573ffe04 	addi	fp,r10,-8
    f540:	00800044 	movi	r2,1
    f544:	180890fa 	slli	r4,r3,3
    f548:	1807d0ba 	srai	r3,r3,2
    f54c:	e1c00117 	ldw	r7,4(fp)
    f550:	5909883a 	add	r4,r11,r4
    f554:	21400217 	ldw	r5,8(r4)
    f558:	10c4983a 	sll	r2,r2,r3
    f55c:	81000315 	stw	r4,12(r16)
    f560:	81400215 	stw	r5,8(r16)
    f564:	388eb03a 	or	r7,r7,r2
    f568:	2c000315 	stw	r16,12(r5)
    f56c:	24000215 	stw	r16,8(r4)
    f570:	e1c00115 	stw	r7,4(fp)
    f574:	4807883a 	mov	r3,r9
    f578:	4800cd16 	blt	r9,zero,f8b0 <_malloc_r+0x554>
    f57c:	1807d0ba 	srai	r3,r3,2
    f580:	00800044 	movi	r2,1
    f584:	10c8983a 	sll	r4,r2,r3
    f588:	39004436 	bltu	r7,r4,f69c <_malloc_r+0x340>
    f58c:	21c4703a 	and	r2,r4,r7
    f590:	10000a1e 	bne	r2,zero,f5bc <_malloc_r+0x260>
    f594:	2109883a 	add	r4,r4,r4
    f598:	00bfff04 	movi	r2,-4
    f59c:	4884703a 	and	r2,r9,r2
    f5a0:	3906703a 	and	r3,r7,r4
    f5a4:	12400104 	addi	r9,r2,4
    f5a8:	1800041e 	bne	r3,zero,f5bc <_malloc_r+0x260>
    f5ac:	2109883a 	add	r4,r4,r4
    f5b0:	3904703a 	and	r2,r7,r4
    f5b4:	4a400104 	addi	r9,r9,4
    f5b8:	103ffc26 	beq	r2,zero,f5ac <_malloc_r+0x250>
    f5bc:	480490fa 	slli	r2,r9,3
    f5c0:	4819883a 	mov	r12,r9
    f5c4:	023fff04 	movi	r8,-4
    f5c8:	589b883a 	add	r13,r11,r2
    f5cc:	6807883a 	mov	r3,r13
    f5d0:	014003c4 	movi	r5,15
    f5d4:	1c000317 	ldw	r16,12(r3)
    f5d8:	1c00041e 	bne	r3,r16,f5ec <_malloc_r+0x290>
    f5dc:	0000a706 	br	f87c <_malloc_r+0x520>
    f5e0:	3000ab0e 	bge	r6,zero,f890 <_malloc_r+0x534>
    f5e4:	84000317 	ldw	r16,12(r16)
    f5e8:	1c00a426 	beq	r3,r16,f87c <_malloc_r+0x520>
    f5ec:	80800117 	ldw	r2,4(r16)
    f5f0:	1204703a 	and	r2,r2,r8
    f5f4:	144dc83a 	sub	r6,r2,r17
    f5f8:	29bff90e 	bge	r5,r6,f5e0 <_malloc_r+0x284>
    f5fc:	81000317 	ldw	r4,12(r16)
    f600:	80c00217 	ldw	r3,8(r16)
    f604:	89400054 	ori	r5,r17,1
    f608:	8445883a 	add	r2,r16,r17
    f60c:	20c00215 	stw	r3,8(r4)
    f610:	19000315 	stw	r4,12(r3)
    f614:	81400115 	stw	r5,4(r16)
    f618:	1187883a 	add	r3,r2,r6
    f61c:	31000054 	ori	r4,r6,1
    f620:	50800315 	stw	r2,12(r10)
    f624:	50800215 	stw	r2,8(r10)
    f628:	19800015 	stw	r6,0(r3)
    f62c:	11000115 	stw	r4,4(r2)
    f630:	12800215 	stw	r10,8(r2)
    f634:	12800315 	stw	r10,12(r2)
    f638:	9009883a 	mov	r4,r18
    f63c:	00138340 	call	13834 <__malloc_unlock>
    f640:	80c00204 	addi	r3,r16,8
    f644:	003f5906 	br	f3ac <_malloc_r+0x50>
    f648:	8109883a 	add	r4,r16,r4
    f64c:	20800117 	ldw	r2,4(r4)
    f650:	80c00217 	ldw	r3,8(r16)
    f654:	81400317 	ldw	r5,12(r16)
    f658:	10800054 	ori	r2,r2,1
    f65c:	20800115 	stw	r2,4(r4)
    f660:	28c00215 	stw	r3,8(r5)
    f664:	19400315 	stw	r5,12(r3)
    f668:	9009883a 	mov	r4,r18
    f66c:	00138340 	call	13834 <__malloc_unlock>
    f670:	80c00204 	addi	r3,r16,8
    f674:	003f4d06 	br	f3ac <_malloc_r+0x50>
    f678:	80800204 	addi	r2,r16,8
    f67c:	14000317 	ldw	r16,12(r2)
    f680:	143f911e 	bne	r2,r16,f4c8 <_malloc_r+0x16c>
    f684:	1a400084 	addi	r9,r3,2
    f688:	003f7306 	br	f458 <_malloc_r+0xfc>
    f68c:	88c00054 	ori	r3,r17,1
    f690:	8445883a 	add	r2,r16,r17
    f694:	80c00115 	stw	r3,4(r16)
    f698:	003fdf06 	br	f618 <_malloc_r+0x2bc>
    f69c:	e4000217 	ldw	r16,8(fp)
    f6a0:	00bfff04 	movi	r2,-4
    f6a4:	80c00117 	ldw	r3,4(r16)
    f6a8:	802d883a 	mov	r22,r16
    f6ac:	18aa703a 	and	r21,r3,r2
    f6b0:	ac401636 	bltu	r21,r17,f70c <_malloc_r+0x3b0>
    f6b4:	ac49c83a 	sub	r4,r21,r17
    f6b8:	008003c4 	movi	r2,15
    f6bc:	1100130e 	bge	r2,r4,f70c <_malloc_r+0x3b0>
    f6c0:	88800054 	ori	r2,r17,1
    f6c4:	8447883a 	add	r3,r16,r17
    f6c8:	80800115 	stw	r2,4(r16)
    f6cc:	20800054 	ori	r2,r4,1
    f6d0:	18800115 	stw	r2,4(r3)
    f6d4:	e0c00215 	stw	r3,8(fp)
    f6d8:	9009883a 	mov	r4,r18
    f6dc:	00138340 	call	13834 <__malloc_unlock>
    f6e0:	80c00204 	addi	r3,r16,8
    f6e4:	003f3106 	br	f3ac <_malloc_r+0x50>
    f6e8:	39c00117 	ldw	r7,4(r7)
    f6ec:	573ffe04 	addi	fp,r10,-8
    f6f0:	003fa006 	br	f574 <_malloc_r+0x218>
    f6f4:	00801504 	movi	r2,84
    f6f8:	10c06736 	bltu	r2,r3,f898 <_malloc_r+0x53c>
    f6fc:	8804d33a 	srli	r2,r17,12
    f700:	11801b84 	addi	r6,r2,110
    f704:	300490fa 	slli	r2,r6,3
    f708:	003f4106 	br	f410 <_malloc_r+0xb4>
    f70c:	d0a05517 	ldw	r2,-32428(gp)
    f710:	d0e01117 	ldw	r3,-32700(gp)
    f714:	053fffc4 	movi	r20,-1
    f718:	10800404 	addi	r2,r2,16
    f71c:	88a7883a 	add	r19,r17,r2
    f720:	1d000326 	beq	r3,r20,f730 <_malloc_r+0x3d4>
    f724:	98c3ffc4 	addi	r3,r19,4095
    f728:	00bc0004 	movi	r2,-4096
    f72c:	18a6703a 	and	r19,r3,r2
    f730:	9009883a 	mov	r4,r18
    f734:	980b883a 	mov	r5,r19
    f738:	00114a40 	call	114a4 <_sbrk_r>
    f73c:	1009883a 	mov	r4,r2
    f740:	15000426 	beq	r2,r20,f754 <_malloc_r+0x3f8>
    f744:	854b883a 	add	r5,r16,r21
    f748:	1029883a 	mov	r20,r2
    f74c:	11405a2e 	bgeu	r2,r5,f8b8 <_malloc_r+0x55c>
    f750:	87000c26 	beq	r16,fp,f784 <_malloc_r+0x428>
    f754:	e4000217 	ldw	r16,8(fp)
    f758:	80c00117 	ldw	r3,4(r16)
    f75c:	00bfff04 	movi	r2,-4
    f760:	1884703a 	and	r2,r3,r2
    f764:	14400336 	bltu	r2,r17,f774 <_malloc_r+0x418>
    f768:	1449c83a 	sub	r4,r2,r17
    f76c:	008003c4 	movi	r2,15
    f770:	113fd316 	blt	r2,r4,f6c0 <_malloc_r+0x364>
    f774:	9009883a 	mov	r4,r18
    f778:	00138340 	call	13834 <__malloc_unlock>
    f77c:	0007883a 	mov	r3,zero
    f780:	003f0a06 	br	f3ac <_malloc_r+0x50>
    f784:	05c20234 	movhi	r23,2056
    f788:	bdff0104 	addi	r23,r23,-1020
    f78c:	b8800017 	ldw	r2,0(r23)
    f790:	988d883a 	add	r6,r19,r2
    f794:	b9800015 	stw	r6,0(r23)
    f798:	d0e01117 	ldw	r3,-32700(gp)
    f79c:	00bfffc4 	movi	r2,-1
    f7a0:	18808e26 	beq	r3,r2,f9dc <_malloc_r+0x680>
    f7a4:	2145c83a 	sub	r2,r4,r5
    f7a8:	3085883a 	add	r2,r6,r2
    f7ac:	b8800015 	stw	r2,0(r23)
    f7b0:	20c001cc 	andi	r3,r4,7
    f7b4:	18005f1e 	bne	r3,zero,f934 <_malloc_r+0x5d8>
    f7b8:	000b883a 	mov	r5,zero
    f7bc:	a4c5883a 	add	r2,r20,r19
    f7c0:	1083ffcc 	andi	r2,r2,4095
    f7c4:	00c40004 	movi	r3,4096
    f7c8:	1887c83a 	sub	r3,r3,r2
    f7cc:	28e7883a 	add	r19,r5,r3
    f7d0:	9009883a 	mov	r4,r18
    f7d4:	980b883a 	mov	r5,r19
    f7d8:	00114a40 	call	114a4 <_sbrk_r>
    f7dc:	1007883a 	mov	r3,r2
    f7e0:	00bfffc4 	movi	r2,-1
    f7e4:	18807a26 	beq	r3,r2,f9d0 <_malloc_r+0x674>
    f7e8:	1d05c83a 	sub	r2,r3,r20
    f7ec:	9885883a 	add	r2,r19,r2
    f7f0:	10c00054 	ori	r3,r2,1
    f7f4:	b8800017 	ldw	r2,0(r23)
    f7f8:	a021883a 	mov	r16,r20
    f7fc:	a0c00115 	stw	r3,4(r20)
    f800:	9885883a 	add	r2,r19,r2
    f804:	b8800015 	stw	r2,0(r23)
    f808:	e5000215 	stw	r20,8(fp)
    f80c:	b7003626 	beq	r22,fp,f8e8 <_malloc_r+0x58c>
    f810:	018003c4 	movi	r6,15
    f814:	35404b36 	bltu	r6,r21,f944 <_malloc_r+0x5e8>
    f818:	00800044 	movi	r2,1
    f81c:	a0800115 	stw	r2,4(r20)
    f820:	003fcd06 	br	f758 <_malloc_r+0x3fc>
    f824:	2808d27a 	srli	r4,r5,9
    f828:	2000371e 	bne	r4,zero,f908 <_malloc_r+0x5ac>
    f82c:	2808d0fa 	srli	r4,r5,3
    f830:	200690fa 	slli	r3,r4,3
    f834:	1ad1883a 	add	r8,r3,r11
    f838:	41800217 	ldw	r6,8(r8)
    f83c:	41805b26 	beq	r8,r6,f9ac <_malloc_r+0x650>
    f840:	30800117 	ldw	r2,4(r6)
    f844:	00ffff04 	movi	r3,-4
    f848:	10c4703a 	and	r2,r2,r3
    f84c:	2880022e 	bgeu	r5,r2,f858 <_malloc_r+0x4fc>
    f850:	31800217 	ldw	r6,8(r6)
    f854:	41bffa1e 	bne	r8,r6,f840 <_malloc_r+0x4e4>
    f858:	32000317 	ldw	r8,12(r6)
    f85c:	39c00117 	ldw	r7,4(r7)
    f860:	82000315 	stw	r8,12(r16)
    f864:	81800215 	stw	r6,8(r16)
    f868:	07020034 	movhi	fp,2048
    f86c:	e703c704 	addi	fp,fp,3868
    f870:	34000315 	stw	r16,12(r6)
    f874:	44000215 	stw	r16,8(r8)
    f878:	003f3e06 	br	f574 <_malloc_r+0x218>
    f87c:	63000044 	addi	r12,r12,1
    f880:	608000cc 	andi	r2,r12,3
    f884:	10005d26 	beq	r2,zero,f9fc <_malloc_r+0x6a0>
    f888:	18c00204 	addi	r3,r3,8
    f88c:	003f5106 	br	f5d4 <_malloc_r+0x278>
    f890:	8089883a 	add	r4,r16,r2
    f894:	003f6d06 	br	f64c <_malloc_r+0x2f0>
    f898:	00805504 	movi	r2,340
    f89c:	10c02036 	bltu	r2,r3,f920 <_malloc_r+0x5c4>
    f8a0:	8804d3fa 	srli	r2,r17,15
    f8a4:	11801dc4 	addi	r6,r2,119
    f8a8:	300490fa 	slli	r2,r6,3
    f8ac:	003ed806 	br	f410 <_malloc_r+0xb4>
    f8b0:	48c000c4 	addi	r3,r9,3
    f8b4:	003f3106 	br	f57c <_malloc_r+0x220>
    f8b8:	05c20234 	movhi	r23,2056
    f8bc:	bdff0104 	addi	r23,r23,-1020
    f8c0:	b8800017 	ldw	r2,0(r23)
    f8c4:	988d883a 	add	r6,r19,r2
    f8c8:	b9800015 	stw	r6,0(r23)
    f8cc:	293fb21e 	bne	r5,r4,f798 <_malloc_r+0x43c>
    f8d0:	2083ffcc 	andi	r2,r4,4095
    f8d4:	103fb01e 	bne	r2,zero,f798 <_malloc_r+0x43c>
    f8d8:	e4000217 	ldw	r16,8(fp)
    f8dc:	9d45883a 	add	r2,r19,r21
    f8e0:	10800054 	ori	r2,r2,1
    f8e4:	80800115 	stw	r2,4(r16)
    f8e8:	b8c00017 	ldw	r3,0(r23)
    f8ec:	d0a05617 	ldw	r2,-32424(gp)
    f8f0:	10c0012e 	bgeu	r2,r3,f8f8 <_malloc_r+0x59c>
    f8f4:	d0e05615 	stw	r3,-32424(gp)
    f8f8:	d0a05717 	ldw	r2,-32420(gp)
    f8fc:	10ff962e 	bgeu	r2,r3,f758 <_malloc_r+0x3fc>
    f900:	d0e05715 	stw	r3,-32420(gp)
    f904:	003f9406 	br	f758 <_malloc_r+0x3fc>
    f908:	00800104 	movi	r2,4
    f90c:	11001e36 	bltu	r2,r4,f988 <_malloc_r+0x62c>
    f910:	2804d1ba 	srli	r2,r5,6
    f914:	11000e04 	addi	r4,r2,56
    f918:	200690fa 	slli	r3,r4,3
    f91c:	003fc506 	br	f834 <_malloc_r+0x4d8>
    f920:	00815504 	movi	r2,1364
    f924:	10c01d2e 	bgeu	r2,r3,f99c <_malloc_r+0x640>
    f928:	01801f84 	movi	r6,126
    f92c:	0080fc04 	movi	r2,1008
    f930:	003eb706 	br	f410 <_malloc_r+0xb4>
    f934:	00800204 	movi	r2,8
    f938:	10cbc83a 	sub	r5,r2,r3
    f93c:	2169883a 	add	r20,r4,r5
    f940:	003f9e06 	br	f7bc <_malloc_r+0x460>
    f944:	00bffe04 	movi	r2,-8
    f948:	a93ffd04 	addi	r4,r21,-12
    f94c:	2088703a 	and	r4,r4,r2
    f950:	b10b883a 	add	r5,r22,r4
    f954:	00c00144 	movi	r3,5
    f958:	28c00215 	stw	r3,8(r5)
    f95c:	28c00115 	stw	r3,4(r5)
    f960:	b0800117 	ldw	r2,4(r22)
    f964:	1080004c 	andi	r2,r2,1
    f968:	2084b03a 	or	r2,r4,r2
    f96c:	b0800115 	stw	r2,4(r22)
    f970:	313fdd2e 	bgeu	r6,r4,f8e8 <_malloc_r+0x58c>
    f974:	b1400204 	addi	r5,r22,8
    f978:	9009883a 	mov	r4,r18
    f97c:	000dc4c0 	call	dc4c <_free_r>
    f980:	e4000217 	ldw	r16,8(fp)
    f984:	003fd806 	br	f8e8 <_malloc_r+0x58c>
    f988:	00800504 	movi	r2,20
    f98c:	11001536 	bltu	r2,r4,f9e4 <_malloc_r+0x688>
    f990:	210016c4 	addi	r4,r4,91
    f994:	200690fa 	slli	r3,r4,3
    f998:	003fa606 	br	f834 <_malloc_r+0x4d8>
    f99c:	8804d4ba 	srli	r2,r17,18
    f9a0:	11801f04 	addi	r6,r2,124
    f9a4:	300490fa 	slli	r2,r6,3
    f9a8:	003e9906 	br	f410 <_malloc_r+0xb4>
    f9ac:	2009d0ba 	srai	r4,r4,2
    f9b0:	01420034 	movhi	r5,2048
    f9b4:	2943c704 	addi	r5,r5,3868
    f9b8:	00c00044 	movi	r3,1
    f9bc:	28800117 	ldw	r2,4(r5)
    f9c0:	1906983a 	sll	r3,r3,r4
    f9c4:	10c4b03a 	or	r2,r2,r3
    f9c8:	28800115 	stw	r2,4(r5)
    f9cc:	003fa306 	br	f85c <_malloc_r+0x500>
    f9d0:	0027883a 	mov	r19,zero
    f9d4:	00c00044 	movi	r3,1
    f9d8:	003f8606 	br	f7f4 <_malloc_r+0x498>
    f9dc:	d1201115 	stw	r4,-32700(gp)
    f9e0:	003f7306 	br	f7b0 <_malloc_r+0x454>
    f9e4:	00801504 	movi	r2,84
    f9e8:	11001936 	bltu	r2,r4,fa50 <_malloc_r+0x6f4>
    f9ec:	2804d33a 	srli	r2,r5,12
    f9f0:	11001b84 	addi	r4,r2,110
    f9f4:	200690fa 	slli	r3,r4,3
    f9f8:	003f8e06 	br	f834 <_malloc_r+0x4d8>
    f9fc:	480b883a 	mov	r5,r9
    fa00:	6807883a 	mov	r3,r13
    fa04:	288000cc 	andi	r2,r5,3
    fa08:	18fffe04 	addi	r3,r3,-8
    fa0c:	297fffc4 	addi	r5,r5,-1
    fa10:	10001526 	beq	r2,zero,fa68 <_malloc_r+0x70c>
    fa14:	18800217 	ldw	r2,8(r3)
    fa18:	10fffa26 	beq	r2,r3,fa04 <_malloc_r+0x6a8>
    fa1c:	2109883a 	add	r4,r4,r4
    fa20:	393f1e36 	bltu	r7,r4,f69c <_malloc_r+0x340>
    fa24:	203f1d26 	beq	r4,zero,f69c <_malloc_r+0x340>
    fa28:	21c4703a 	and	r2,r4,r7
    fa2c:	10000226 	beq	r2,zero,fa38 <_malloc_r+0x6dc>
    fa30:	6013883a 	mov	r9,r12
    fa34:	003ee106 	br	f5bc <_malloc_r+0x260>
    fa38:	2109883a 	add	r4,r4,r4
    fa3c:	3904703a 	and	r2,r7,r4
    fa40:	63000104 	addi	r12,r12,4
    fa44:	103ffc26 	beq	r2,zero,fa38 <_malloc_r+0x6dc>
    fa48:	6013883a 	mov	r9,r12
    fa4c:	003edb06 	br	f5bc <_malloc_r+0x260>
    fa50:	00805504 	movi	r2,340
    fa54:	11000836 	bltu	r2,r4,fa78 <_malloc_r+0x71c>
    fa58:	2804d3fa 	srli	r2,r5,15
    fa5c:	11001dc4 	addi	r4,r2,119
    fa60:	200690fa 	slli	r3,r4,3
    fa64:	003f7306 	br	f834 <_malloc_r+0x4d8>
    fa68:	0104303a 	nor	r2,zero,r4
    fa6c:	388e703a 	and	r7,r7,r2
    fa70:	e1c00115 	stw	r7,4(fp)
    fa74:	003fe906 	br	fa1c <_malloc_r+0x6c0>
    fa78:	00815504 	movi	r2,1364
    fa7c:	1100032e 	bgeu	r2,r4,fa8c <_malloc_r+0x730>
    fa80:	01001f84 	movi	r4,126
    fa84:	00c0fc04 	movi	r3,1008
    fa88:	003f6a06 	br	f834 <_malloc_r+0x4d8>
    fa8c:	2804d4ba 	srli	r2,r5,18
    fa90:	11001f04 	addi	r4,r2,124
    fa94:	200690fa 	slli	r3,r4,3
    fa98:	003f6606 	br	f834 <_malloc_r+0x4d8>

0000fa9c <memchr>:
    fa9c:	008000c4 	movi	r2,3
    faa0:	29403fcc 	andi	r5,r5,255
    faa4:	2007883a 	mov	r3,r4
    faa8:	1180022e 	bgeu	r2,r6,fab4 <memchr+0x18>
    faac:	2084703a 	and	r2,r4,r2
    fab0:	10000b26 	beq	r2,zero,fae0 <memchr+0x44>
    fab4:	313fffc4 	addi	r4,r6,-1
    fab8:	3000051e 	bne	r6,zero,fad0 <memchr+0x34>
    fabc:	00002c06 	br	fb70 <memchr+0xd4>
    fac0:	213fffc4 	addi	r4,r4,-1
    fac4:	00bfffc4 	movi	r2,-1
    fac8:	18c00044 	addi	r3,r3,1
    facc:	20802826 	beq	r4,r2,fb70 <memchr+0xd4>
    fad0:	18800003 	ldbu	r2,0(r3)
    fad4:	28bffa1e 	bne	r5,r2,fac0 <memchr+0x24>
    fad8:	1805883a 	mov	r2,r3
    fadc:	f800283a 	ret
    fae0:	0011883a 	mov	r8,zero
    fae4:	0007883a 	mov	r3,zero
    fae8:	01c00104 	movi	r7,4
    faec:	4004923a 	slli	r2,r8,8
    faf0:	18c00044 	addi	r3,r3,1
    faf4:	1151883a 	add	r8,r2,r5
    faf8:	19fffc1e 	bne	r3,r7,faec <memchr+0x50>
    fafc:	02bfbff4 	movhi	r10,65279
    fb00:	52bfbfc4 	addi	r10,r10,-257
    fb04:	02602074 	movhi	r9,32897
    fb08:	4a602004 	addi	r9,r9,-32640
    fb0c:	02c000c4 	movi	r11,3
    fb10:	20800017 	ldw	r2,0(r4)
    fb14:	31bfff04 	addi	r6,r6,-4
    fb18:	200f883a 	mov	r7,r4
    fb1c:	1204f03a 	xor	r2,r2,r8
    fb20:	1287883a 	add	r3,r2,r10
    fb24:	1a46703a 	and	r3,r3,r9
    fb28:	0084303a 	nor	r2,zero,r2
    fb2c:	10c4703a 	and	r2,r2,r3
    fb30:	10000b26 	beq	r2,zero,fb60 <memchr+0xc4>
    fb34:	20800003 	ldbu	r2,0(r4)
    fb38:	28800f26 	beq	r5,r2,fb78 <memchr+0xdc>
    fb3c:	20800043 	ldbu	r2,1(r4)
    fb40:	21c00044 	addi	r7,r4,1
    fb44:	28800c26 	beq	r5,r2,fb78 <memchr+0xdc>
    fb48:	20800083 	ldbu	r2,2(r4)
    fb4c:	21c00084 	addi	r7,r4,2
    fb50:	28800926 	beq	r5,r2,fb78 <memchr+0xdc>
    fb54:	208000c3 	ldbu	r2,3(r4)
    fb58:	21c000c4 	addi	r7,r4,3
    fb5c:	28800626 	beq	r5,r2,fb78 <memchr+0xdc>
    fb60:	21000104 	addi	r4,r4,4
    fb64:	59bfea36 	bltu	r11,r6,fb10 <memchr+0x74>
    fb68:	2007883a 	mov	r3,r4
    fb6c:	003fd106 	br	fab4 <memchr+0x18>
    fb70:	0005883a 	mov	r2,zero
    fb74:	f800283a 	ret
    fb78:	3805883a 	mov	r2,r7
    fb7c:	f800283a 	ret

0000fb80 <memmove>:
    fb80:	2807883a 	mov	r3,r5
    fb84:	2011883a 	mov	r8,r4
    fb88:	29000c2e 	bgeu	r5,r4,fbbc <memmove+0x3c>
    fb8c:	298f883a 	add	r7,r5,r6
    fb90:	21c00a2e 	bgeu	r4,r7,fbbc <memmove+0x3c>
    fb94:	30000726 	beq	r6,zero,fbb4 <memmove+0x34>
    fb98:	2187883a 	add	r3,r4,r6
    fb9c:	198dc83a 	sub	r6,r3,r6
    fba0:	39ffffc4 	addi	r7,r7,-1
    fba4:	38800003 	ldbu	r2,0(r7)
    fba8:	18ffffc4 	addi	r3,r3,-1
    fbac:	18800005 	stb	r2,0(r3)
    fbb0:	19bffb1e 	bne	r3,r6,fba0 <memmove+0x20>
    fbb4:	2005883a 	mov	r2,r4
    fbb8:	f800283a 	ret
    fbbc:	01c003c4 	movi	r7,15
    fbc0:	39800a36 	bltu	r7,r6,fbec <memmove+0x6c>
    fbc4:	303ffb26 	beq	r6,zero,fbb4 <memmove+0x34>
    fbc8:	400f883a 	mov	r7,r8
    fbcc:	320d883a 	add	r6,r6,r8
    fbd0:	28800003 	ldbu	r2,0(r5)
    fbd4:	29400044 	addi	r5,r5,1
    fbd8:	38800005 	stb	r2,0(r7)
    fbdc:	39c00044 	addi	r7,r7,1
    fbe0:	39bffb1e 	bne	r7,r6,fbd0 <memmove+0x50>
    fbe4:	2005883a 	mov	r2,r4
    fbe8:	f800283a 	ret
    fbec:	1904b03a 	or	r2,r3,r4
    fbf0:	108000cc 	andi	r2,r2,3
    fbf4:	103ff31e 	bne	r2,zero,fbc4 <memmove+0x44>
    fbf8:	3811883a 	mov	r8,r7
    fbfc:	180b883a 	mov	r5,r3
    fc00:	200f883a 	mov	r7,r4
    fc04:	28c00017 	ldw	r3,0(r5)
    fc08:	31bffc04 	addi	r6,r6,-16
    fc0c:	38c00015 	stw	r3,0(r7)
    fc10:	28800117 	ldw	r2,4(r5)
    fc14:	38800115 	stw	r2,4(r7)
    fc18:	28c00217 	ldw	r3,8(r5)
    fc1c:	38c00215 	stw	r3,8(r7)
    fc20:	28800317 	ldw	r2,12(r5)
    fc24:	29400404 	addi	r5,r5,16
    fc28:	38800315 	stw	r2,12(r7)
    fc2c:	39c00404 	addi	r7,r7,16
    fc30:	41bff436 	bltu	r8,r6,fc04 <memmove+0x84>
    fc34:	008000c4 	movi	r2,3
    fc38:	1180072e 	bgeu	r2,r6,fc58 <memmove+0xd8>
    fc3c:	1007883a 	mov	r3,r2
    fc40:	28800017 	ldw	r2,0(r5)
    fc44:	31bfff04 	addi	r6,r6,-4
    fc48:	29400104 	addi	r5,r5,4
    fc4c:	38800015 	stw	r2,0(r7)
    fc50:	39c00104 	addi	r7,r7,4
    fc54:	19bffa36 	bltu	r3,r6,fc40 <memmove+0xc0>
    fc58:	3811883a 	mov	r8,r7
    fc5c:	003fd906 	br	fbc4 <memmove+0x44>

0000fc60 <_Bfree>:
    fc60:	28000826 	beq	r5,zero,fc84 <_Bfree+0x24>
    fc64:	28800117 	ldw	r2,4(r5)
    fc68:	21001317 	ldw	r4,76(r4)
    fc6c:	1085883a 	add	r2,r2,r2
    fc70:	1085883a 	add	r2,r2,r2
    fc74:	1105883a 	add	r2,r2,r4
    fc78:	10c00017 	ldw	r3,0(r2)
    fc7c:	28c00015 	stw	r3,0(r5)
    fc80:	11400015 	stw	r5,0(r2)
    fc84:	f800283a 	ret

0000fc88 <__hi0bits>:
    fc88:	20bfffec 	andhi	r2,r4,65535
    fc8c:	10001426 	beq	r2,zero,fce0 <__hi0bits+0x58>
    fc90:	0007883a 	mov	r3,zero
    fc94:	20bfc02c 	andhi	r2,r4,65280
    fc98:	1000021e 	bne	r2,zero,fca4 <__hi0bits+0x1c>
    fc9c:	2008923a 	slli	r4,r4,8
    fca0:	18c00204 	addi	r3,r3,8
    fca4:	20bc002c 	andhi	r2,r4,61440
    fca8:	1000021e 	bne	r2,zero,fcb4 <__hi0bits+0x2c>
    fcac:	2008913a 	slli	r4,r4,4
    fcb0:	18c00104 	addi	r3,r3,4
    fcb4:	20b0002c 	andhi	r2,r4,49152
    fcb8:	1000031e 	bne	r2,zero,fcc8 <__hi0bits+0x40>
    fcbc:	2105883a 	add	r2,r4,r4
    fcc0:	18c00084 	addi	r3,r3,2
    fcc4:	1089883a 	add	r4,r2,r2
    fcc8:	20000316 	blt	r4,zero,fcd8 <__hi0bits+0x50>
    fccc:	2090002c 	andhi	r2,r4,16384
    fcd0:	10000626 	beq	r2,zero,fcec <__hi0bits+0x64>
    fcd4:	18c00044 	addi	r3,r3,1
    fcd8:	1805883a 	mov	r2,r3
    fcdc:	f800283a 	ret
    fce0:	2008943a 	slli	r4,r4,16
    fce4:	00c00404 	movi	r3,16
    fce8:	003fea06 	br	fc94 <__hi0bits+0xc>
    fcec:	00c00804 	movi	r3,32
    fcf0:	1805883a 	mov	r2,r3
    fcf4:	f800283a 	ret

0000fcf8 <__lo0bits>:
    fcf8:	20c00017 	ldw	r3,0(r4)
    fcfc:	188001cc 	andi	r2,r3,7
    fd00:	10000a26 	beq	r2,zero,fd2c <__lo0bits+0x34>
    fd04:	1880004c 	andi	r2,r3,1
    fd08:	1005003a 	cmpeq	r2,r2,zero
    fd0c:	10002126 	beq	r2,zero,fd94 <__lo0bits+0x9c>
    fd10:	1880008c 	andi	r2,r3,2
    fd14:	1000251e 	bne	r2,zero,fdac <__lo0bits+0xb4>
    fd18:	1804d0ba 	srli	r2,r3,2
    fd1c:	01400084 	movi	r5,2
    fd20:	20800015 	stw	r2,0(r4)
    fd24:	2805883a 	mov	r2,r5
    fd28:	f800283a 	ret
    fd2c:	18bfffcc 	andi	r2,r3,65535
    fd30:	10001526 	beq	r2,zero,fd88 <__lo0bits+0x90>
    fd34:	000b883a 	mov	r5,zero
    fd38:	18803fcc 	andi	r2,r3,255
    fd3c:	1000021e 	bne	r2,zero,fd48 <__lo0bits+0x50>
    fd40:	1806d23a 	srli	r3,r3,8
    fd44:	29400204 	addi	r5,r5,8
    fd48:	188003cc 	andi	r2,r3,15
    fd4c:	1000021e 	bne	r2,zero,fd58 <__lo0bits+0x60>
    fd50:	1806d13a 	srli	r3,r3,4
    fd54:	29400104 	addi	r5,r5,4
    fd58:	188000cc 	andi	r2,r3,3
    fd5c:	1000021e 	bne	r2,zero,fd68 <__lo0bits+0x70>
    fd60:	1806d0ba 	srli	r3,r3,2
    fd64:	29400084 	addi	r5,r5,2
    fd68:	1880004c 	andi	r2,r3,1
    fd6c:	1000031e 	bne	r2,zero,fd7c <__lo0bits+0x84>
    fd70:	1806d07a 	srli	r3,r3,1
    fd74:	18000a26 	beq	r3,zero,fda0 <__lo0bits+0xa8>
    fd78:	29400044 	addi	r5,r5,1
    fd7c:	2805883a 	mov	r2,r5
    fd80:	20c00015 	stw	r3,0(r4)
    fd84:	f800283a 	ret
    fd88:	1806d43a 	srli	r3,r3,16
    fd8c:	01400404 	movi	r5,16
    fd90:	003fe906 	br	fd38 <__lo0bits+0x40>
    fd94:	000b883a 	mov	r5,zero
    fd98:	2805883a 	mov	r2,r5
    fd9c:	f800283a 	ret
    fda0:	01400804 	movi	r5,32
    fda4:	2805883a 	mov	r2,r5
    fda8:	f800283a 	ret
    fdac:	1804d07a 	srli	r2,r3,1
    fdb0:	01400044 	movi	r5,1
    fdb4:	20800015 	stw	r2,0(r4)
    fdb8:	003fda06 	br	fd24 <__lo0bits+0x2c>

0000fdbc <__mcmp>:
    fdbc:	20800417 	ldw	r2,16(r4)
    fdc0:	28c00417 	ldw	r3,16(r5)
    fdc4:	10cfc83a 	sub	r7,r2,r3
    fdc8:	38000c1e 	bne	r7,zero,fdfc <__mcmp+0x40>
    fdcc:	18c5883a 	add	r2,r3,r3
    fdd0:	1085883a 	add	r2,r2,r2
    fdd4:	10c00504 	addi	r3,r2,20
    fdd8:	21000504 	addi	r4,r4,20
    fddc:	28cb883a 	add	r5,r5,r3
    fde0:	2085883a 	add	r2,r4,r2
    fde4:	10bfff04 	addi	r2,r2,-4
    fde8:	297fff04 	addi	r5,r5,-4
    fdec:	11800017 	ldw	r6,0(r2)
    fdf0:	28c00017 	ldw	r3,0(r5)
    fdf4:	30c0031e 	bne	r6,r3,fe04 <__mcmp+0x48>
    fdf8:	20bffa36 	bltu	r4,r2,fde4 <__mcmp+0x28>
    fdfc:	3805883a 	mov	r2,r7
    fe00:	f800283a 	ret
    fe04:	30c00336 	bltu	r6,r3,fe14 <__mcmp+0x58>
    fe08:	01c00044 	movi	r7,1
    fe0c:	3805883a 	mov	r2,r7
    fe10:	f800283a 	ret
    fe14:	01ffffc4 	movi	r7,-1
    fe18:	003ff806 	br	fdfc <__mcmp+0x40>

0000fe1c <__ulp>:
    fe1c:	295ffc2c 	andhi	r5,r5,32752
    fe20:	013f3034 	movhi	r4,64704
    fe24:	290b883a 	add	r5,r5,r4
    fe28:	0145c83a 	sub	r2,zero,r5
    fe2c:	1007d53a 	srai	r3,r2,20
    fe30:	000d883a 	mov	r6,zero
    fe34:	0140040e 	bge	zero,r5,fe48 <__ulp+0x2c>
    fe38:	280f883a 	mov	r7,r5
    fe3c:	3807883a 	mov	r3,r7
    fe40:	3005883a 	mov	r2,r6
    fe44:	f800283a 	ret
    fe48:	008004c4 	movi	r2,19
    fe4c:	193ffb04 	addi	r4,r3,-20
    fe50:	10c00c0e 	bge	r2,r3,fe84 <__ulp+0x68>
    fe54:	008007c4 	movi	r2,31
    fe58:	1107c83a 	sub	r3,r2,r4
    fe5c:	00800784 	movi	r2,30
    fe60:	01400044 	movi	r5,1
    fe64:	11000216 	blt	r2,r4,fe70 <__ulp+0x54>
    fe68:	00800044 	movi	r2,1
    fe6c:	10ca983a 	sll	r5,r2,r3
    fe70:	000f883a 	mov	r7,zero
    fe74:	280d883a 	mov	r6,r5
    fe78:	3807883a 	mov	r3,r7
    fe7c:	3005883a 	mov	r2,r6
    fe80:	f800283a 	ret
    fe84:	00800234 	movhi	r2,8
    fe88:	10cfd83a 	sra	r7,r2,r3
    fe8c:	000d883a 	mov	r6,zero
    fe90:	3005883a 	mov	r2,r6
    fe94:	3807883a 	mov	r3,r7
    fe98:	f800283a 	ret

0000fe9c <__b2d>:
    fe9c:	20800417 	ldw	r2,16(r4)
    fea0:	defff904 	addi	sp,sp,-28
    fea4:	dd000415 	stw	r20,16(sp)
    fea8:	1085883a 	add	r2,r2,r2
    feac:	25000504 	addi	r20,r4,20
    feb0:	1085883a 	add	r2,r2,r2
    feb4:	dc000015 	stw	r16,0(sp)
    feb8:	a0a1883a 	add	r16,r20,r2
    febc:	dd400515 	stw	r21,20(sp)
    fec0:	857fff17 	ldw	r21,-4(r16)
    fec4:	dc400115 	stw	r17,4(sp)
    fec8:	dfc00615 	stw	ra,24(sp)
    fecc:	a809883a 	mov	r4,r21
    fed0:	2823883a 	mov	r17,r5
    fed4:	dcc00315 	stw	r19,12(sp)
    fed8:	dc800215 	stw	r18,8(sp)
    fedc:	000fc880 	call	fc88 <__hi0bits>
    fee0:	100b883a 	mov	r5,r2
    fee4:	00800804 	movi	r2,32
    fee8:	1145c83a 	sub	r2,r2,r5
    feec:	88800015 	stw	r2,0(r17)
    fef0:	00800284 	movi	r2,10
    fef4:	80ffff04 	addi	r3,r16,-4
    fef8:	11401416 	blt	r2,r5,ff4c <__b2d+0xb0>
    fefc:	008002c4 	movi	r2,11
    ff00:	1149c83a 	sub	r4,r2,r5
    ff04:	a0c02736 	bltu	r20,r3,ffa4 <__b2d+0x108>
    ff08:	000d883a 	mov	r6,zero
    ff0c:	28800544 	addi	r2,r5,21
    ff10:	a906d83a 	srl	r3,r21,r4
    ff14:	a884983a 	sll	r2,r21,r2
    ff18:	1ccffc34 	orhi	r19,r3,16368
    ff1c:	11a4b03a 	or	r18,r2,r6
    ff20:	9005883a 	mov	r2,r18
    ff24:	9807883a 	mov	r3,r19
    ff28:	dfc00617 	ldw	ra,24(sp)
    ff2c:	dd400517 	ldw	r21,20(sp)
    ff30:	dd000417 	ldw	r20,16(sp)
    ff34:	dcc00317 	ldw	r19,12(sp)
    ff38:	dc800217 	ldw	r18,8(sp)
    ff3c:	dc400117 	ldw	r17,4(sp)
    ff40:	dc000017 	ldw	r16,0(sp)
    ff44:	dec00704 	addi	sp,sp,28
    ff48:	f800283a 	ret
    ff4c:	a0c00e36 	bltu	r20,r3,ff88 <__b2d+0xec>
    ff50:	293ffd44 	addi	r4,r5,-11
    ff54:	000d883a 	mov	r6,zero
    ff58:	20000f26 	beq	r4,zero,ff98 <__b2d+0xfc>
    ff5c:	00800804 	movi	r2,32
    ff60:	110bc83a 	sub	r5,r2,r4
    ff64:	a0c01236 	bltu	r20,r3,ffb0 <__b2d+0x114>
    ff68:	000f883a 	mov	r7,zero
    ff6c:	a904983a 	sll	r2,r21,r4
    ff70:	3146d83a 	srl	r3,r6,r5
    ff74:	3108983a 	sll	r4,r6,r4
    ff78:	108ffc34 	orhi	r2,r2,16368
    ff7c:	18a6b03a 	or	r19,r3,r2
    ff80:	3924b03a 	or	r18,r7,r4
    ff84:	003fe606 	br	ff20 <__b2d+0x84>
    ff88:	293ffd44 	addi	r4,r5,-11
    ff8c:	81bffe17 	ldw	r6,-8(r16)
    ff90:	80fffe04 	addi	r3,r16,-8
    ff94:	203ff11e 	bne	r4,zero,ff5c <__b2d+0xc0>
    ff98:	accffc34 	orhi	r19,r21,16368
    ff9c:	3025883a 	mov	r18,r6
    ffa0:	003fdf06 	br	ff20 <__b2d+0x84>
    ffa4:	18bfff17 	ldw	r2,-4(r3)
    ffa8:	110cd83a 	srl	r6,r2,r4
    ffac:	003fd706 	br	ff0c <__b2d+0x70>
    ffb0:	18bfff17 	ldw	r2,-4(r3)
    ffb4:	114ed83a 	srl	r7,r2,r5
    ffb8:	003fec06 	br	ff6c <__b2d+0xd0>

0000ffbc <__ratio>:
    ffbc:	defff904 	addi	sp,sp,-28
    ffc0:	dc400215 	stw	r17,8(sp)
    ffc4:	2823883a 	mov	r17,r5
    ffc8:	d80b883a 	mov	r5,sp
    ffcc:	dfc00615 	stw	ra,24(sp)
    ffd0:	dd000515 	stw	r20,20(sp)
    ffd4:	dcc00415 	stw	r19,16(sp)
    ffd8:	dc800315 	stw	r18,12(sp)
    ffdc:	2025883a 	mov	r18,r4
    ffe0:	000fe9c0 	call	fe9c <__b2d>
    ffe4:	8809883a 	mov	r4,r17
    ffe8:	d9400104 	addi	r5,sp,4
    ffec:	1027883a 	mov	r19,r2
    fff0:	1829883a 	mov	r20,r3
    fff4:	000fe9c0 	call	fe9c <__b2d>
    fff8:	89000417 	ldw	r4,16(r17)
    fffc:	91c00417 	ldw	r7,16(r18)
   10000:	d9800117 	ldw	r6,4(sp)
   10004:	180b883a 	mov	r5,r3
   10008:	390fc83a 	sub	r7,r7,r4
   1000c:	1009883a 	mov	r4,r2
   10010:	d8800017 	ldw	r2,0(sp)
   10014:	380e917a 	slli	r7,r7,5
   10018:	2011883a 	mov	r8,r4
   1001c:	1185c83a 	sub	r2,r2,r6
   10020:	11c5883a 	add	r2,r2,r7
   10024:	1006953a 	slli	r3,r2,20
   10028:	2813883a 	mov	r9,r5
   1002c:	00800d0e 	bge	zero,r2,10064 <__ratio+0xa8>
   10030:	1d29883a 	add	r20,r3,r20
   10034:	a00b883a 	mov	r5,r20
   10038:	480f883a 	mov	r7,r9
   1003c:	9809883a 	mov	r4,r19
   10040:	400d883a 	mov	r6,r8
   10044:	00076b40 	call	76b4 <__divdf3>
   10048:	dfc00617 	ldw	ra,24(sp)
   1004c:	dd000517 	ldw	r20,20(sp)
   10050:	dcc00417 	ldw	r19,16(sp)
   10054:	dc800317 	ldw	r18,12(sp)
   10058:	dc400217 	ldw	r17,8(sp)
   1005c:	dec00704 	addi	sp,sp,28
   10060:	f800283a 	ret
   10064:	28d3c83a 	sub	r9,r5,r3
   10068:	003ff206 	br	10034 <__ratio+0x78>

0001006c <_mprec_log10>:
   1006c:	defffe04 	addi	sp,sp,-8
   10070:	008005c4 	movi	r2,23
   10074:	dc000015 	stw	r16,0(sp)
   10078:	dfc00115 	stw	ra,4(sp)
   1007c:	2021883a 	mov	r16,r4
   10080:	11000c16 	blt	r2,r4,100b4 <_mprec_log10+0x48>
   10084:	200490fa 	slli	r2,r4,3
   10088:	00c20034 	movhi	r3,2048
   1008c:	18c19004 	addi	r3,r3,1600
   10090:	10c5883a 	add	r2,r2,r3
   10094:	12400117 	ldw	r9,4(r2)
   10098:	12000017 	ldw	r8,0(r2)
   1009c:	4807883a 	mov	r3,r9
   100a0:	4005883a 	mov	r2,r8
   100a4:	dfc00117 	ldw	ra,4(sp)
   100a8:	dc000017 	ldw	r16,0(sp)
   100ac:	dec00204 	addi	sp,sp,8
   100b0:	f800283a 	ret
   100b4:	0011883a 	mov	r8,zero
   100b8:	024ffc34 	movhi	r9,16368
   100bc:	0005883a 	mov	r2,zero
   100c0:	00d00934 	movhi	r3,16420
   100c4:	480b883a 	mov	r5,r9
   100c8:	4009883a 	mov	r4,r8
   100cc:	180f883a 	mov	r7,r3
   100d0:	100d883a 	mov	r6,r2
   100d4:	00072f00 	call	72f0 <__muldf3>
   100d8:	843fffc4 	addi	r16,r16,-1
   100dc:	1011883a 	mov	r8,r2
   100e0:	1813883a 	mov	r9,r3
   100e4:	803ff51e 	bne	r16,zero,100bc <_mprec_log10+0x50>
   100e8:	4005883a 	mov	r2,r8
   100ec:	4807883a 	mov	r3,r9
   100f0:	dfc00117 	ldw	ra,4(sp)
   100f4:	dc000017 	ldw	r16,0(sp)
   100f8:	dec00204 	addi	sp,sp,8
   100fc:	f800283a 	ret

00010100 <__copybits>:
   10100:	297fffc4 	addi	r5,r5,-1
   10104:	30800417 	ldw	r2,16(r6)
   10108:	280bd17a 	srai	r5,r5,5
   1010c:	31800504 	addi	r6,r6,20
   10110:	1085883a 	add	r2,r2,r2
   10114:	294b883a 	add	r5,r5,r5
   10118:	294b883a 	add	r5,r5,r5
   1011c:	1085883a 	add	r2,r2,r2
   10120:	290b883a 	add	r5,r5,r4
   10124:	3087883a 	add	r3,r6,r2
   10128:	29400104 	addi	r5,r5,4
   1012c:	30c0052e 	bgeu	r6,r3,10144 <__copybits+0x44>
   10130:	30800017 	ldw	r2,0(r6)
   10134:	31800104 	addi	r6,r6,4
   10138:	20800015 	stw	r2,0(r4)
   1013c:	21000104 	addi	r4,r4,4
   10140:	30fffb36 	bltu	r6,r3,10130 <__copybits+0x30>
   10144:	2140032e 	bgeu	r4,r5,10154 <__copybits+0x54>
   10148:	20000015 	stw	zero,0(r4)
   1014c:	21000104 	addi	r4,r4,4
   10150:	217ffd36 	bltu	r4,r5,10148 <__copybits+0x48>
   10154:	f800283a 	ret

00010158 <__any_on>:
   10158:	20800417 	ldw	r2,16(r4)
   1015c:	2807d17a 	srai	r3,r5,5
   10160:	21000504 	addi	r4,r4,20
   10164:	10c00d0e 	bge	r2,r3,1019c <__any_on+0x44>
   10168:	1085883a 	add	r2,r2,r2
   1016c:	1085883a 	add	r2,r2,r2
   10170:	208d883a 	add	r6,r4,r2
   10174:	2180182e 	bgeu	r4,r6,101d8 <__any_on+0x80>
   10178:	30bfff17 	ldw	r2,-4(r6)
   1017c:	30ffff04 	addi	r3,r6,-4
   10180:	1000041e 	bne	r2,zero,10194 <__any_on+0x3c>
   10184:	20c0142e 	bgeu	r4,r3,101d8 <__any_on+0x80>
   10188:	18ffff04 	addi	r3,r3,-4
   1018c:	18800017 	ldw	r2,0(r3)
   10190:	103ffc26 	beq	r2,zero,10184 <__any_on+0x2c>
   10194:	00800044 	movi	r2,1
   10198:	f800283a 	ret
   1019c:	18800a0e 	bge	r3,r2,101c8 <__any_on+0x70>
   101a0:	294007cc 	andi	r5,r5,31
   101a4:	28000826 	beq	r5,zero,101c8 <__any_on+0x70>
   101a8:	18c5883a 	add	r2,r3,r3
   101ac:	1085883a 	add	r2,r2,r2
   101b0:	208d883a 	add	r6,r4,r2
   101b4:	30c00017 	ldw	r3,0(r6)
   101b8:	1944d83a 	srl	r2,r3,r5
   101bc:	1144983a 	sll	r2,r2,r5
   101c0:	18bff41e 	bne	r3,r2,10194 <__any_on+0x3c>
   101c4:	003feb06 	br	10174 <__any_on+0x1c>
   101c8:	18c5883a 	add	r2,r3,r3
   101cc:	1085883a 	add	r2,r2,r2
   101d0:	208d883a 	add	r6,r4,r2
   101d4:	003fe706 	br	10174 <__any_on+0x1c>
   101d8:	0005883a 	mov	r2,zero
   101dc:	f800283a 	ret

000101e0 <_Balloc>:
   101e0:	20c01317 	ldw	r3,76(r4)
   101e4:	defffb04 	addi	sp,sp,-20
   101e8:	dcc00315 	stw	r19,12(sp)
   101ec:	dc800215 	stw	r18,8(sp)
   101f0:	dfc00415 	stw	ra,16(sp)
   101f4:	2825883a 	mov	r18,r5
   101f8:	dc400115 	stw	r17,4(sp)
   101fc:	dc000015 	stw	r16,0(sp)
   10200:	2027883a 	mov	r19,r4
   10204:	01800404 	movi	r6,16
   10208:	01400104 	movi	r5,4
   1020c:	18001726 	beq	r3,zero,1026c <_Balloc+0x8c>
   10210:	01400044 	movi	r5,1
   10214:	9485883a 	add	r2,r18,r18
   10218:	2ca2983a 	sll	r17,r5,r18
   1021c:	1085883a 	add	r2,r2,r2
   10220:	10c7883a 	add	r3,r2,r3
   10224:	1c000017 	ldw	r16,0(r3)
   10228:	8c4d883a 	add	r6,r17,r17
   1022c:	318d883a 	add	r6,r6,r6
   10230:	9809883a 	mov	r4,r19
   10234:	31800504 	addi	r6,r6,20
   10238:	80001226 	beq	r16,zero,10284 <_Balloc+0xa4>
   1023c:	80800017 	ldw	r2,0(r16)
   10240:	18800015 	stw	r2,0(r3)
   10244:	80000415 	stw	zero,16(r16)
   10248:	80000315 	stw	zero,12(r16)
   1024c:	8005883a 	mov	r2,r16
   10250:	dfc00417 	ldw	ra,16(sp)
   10254:	dcc00317 	ldw	r19,12(sp)
   10258:	dc800217 	ldw	r18,8(sp)
   1025c:	dc400117 	ldw	r17,4(sp)
   10260:	dc000017 	ldw	r16,0(sp)
   10264:	dec00504 	addi	sp,sp,20
   10268:	f800283a 	ret
   1026c:	00118e00 	call	118e0 <_calloc_r>
   10270:	1007883a 	mov	r3,r2
   10274:	0021883a 	mov	r16,zero
   10278:	98801315 	stw	r2,76(r19)
   1027c:	103fe41e 	bne	r2,zero,10210 <_Balloc+0x30>
   10280:	003ff206 	br	1024c <_Balloc+0x6c>
   10284:	00118e00 	call	118e0 <_calloc_r>
   10288:	103ff026 	beq	r2,zero,1024c <_Balloc+0x6c>
   1028c:	1021883a 	mov	r16,r2
   10290:	14800115 	stw	r18,4(r2)
   10294:	14400215 	stw	r17,8(r2)
   10298:	003fea06 	br	10244 <_Balloc+0x64>

0001029c <__d2b>:
   1029c:	defff504 	addi	sp,sp,-44
   102a0:	dcc00515 	stw	r19,20(sp)
   102a4:	04c00044 	movi	r19,1
   102a8:	dc000215 	stw	r16,8(sp)
   102ac:	2821883a 	mov	r16,r5
   102b0:	980b883a 	mov	r5,r19
   102b4:	ddc00915 	stw	r23,36(sp)
   102b8:	dd800815 	stw	r22,32(sp)
   102bc:	dd400715 	stw	r21,28(sp)
   102c0:	dd000615 	stw	r20,24(sp)
   102c4:	dc800415 	stw	r18,16(sp)
   102c8:	dc400315 	stw	r17,12(sp)
   102cc:	dfc00a15 	stw	ra,40(sp)
   102d0:	3023883a 	mov	r17,r6
   102d4:	382d883a 	mov	r22,r7
   102d8:	ddc00b17 	ldw	r23,44(sp)
   102dc:	00101e00 	call	101e0 <_Balloc>
   102e0:	1025883a 	mov	r18,r2
   102e4:	00a00034 	movhi	r2,32768
   102e8:	10bfffc4 	addi	r2,r2,-1
   102ec:	8888703a 	and	r4,r17,r2
   102f0:	202ad53a 	srli	r21,r4,20
   102f4:	00800434 	movhi	r2,16
   102f8:	10bfffc4 	addi	r2,r2,-1
   102fc:	8886703a 	and	r3,r17,r2
   10300:	a829003a 	cmpeq	r20,r21,zero
   10304:	800b883a 	mov	r5,r16
   10308:	d8c00115 	stw	r3,4(sp)
   1030c:	94000504 	addi	r16,r18,20
   10310:	a000021e 	bne	r20,zero,1031c <__d2b+0x80>
   10314:	18c00434 	orhi	r3,r3,16
   10318:	d8c00115 	stw	r3,4(sp)
   1031c:	28002726 	beq	r5,zero,103bc <__d2b+0x120>
   10320:	d809883a 	mov	r4,sp
   10324:	d9400015 	stw	r5,0(sp)
   10328:	000fcf80 	call	fcf8 <__lo0bits>
   1032c:	100d883a 	mov	r6,r2
   10330:	10003526 	beq	r2,zero,10408 <__d2b+0x16c>
   10334:	d8c00117 	ldw	r3,4(sp)
   10338:	00800804 	movi	r2,32
   1033c:	1185c83a 	sub	r2,r2,r6
   10340:	d9000017 	ldw	r4,0(sp)
   10344:	1886983a 	sll	r3,r3,r2
   10348:	1906b03a 	or	r3,r3,r4
   1034c:	90c00515 	stw	r3,20(r18)
   10350:	d8c00117 	ldw	r3,4(sp)
   10354:	1986d83a 	srl	r3,r3,r6
   10358:	d8c00115 	stw	r3,4(sp)
   1035c:	180b003a 	cmpeq	r5,r3,zero
   10360:	00800084 	movi	r2,2
   10364:	114bc83a 	sub	r5,r2,r5
   10368:	80c00115 	stw	r3,4(r16)
   1036c:	91400415 	stw	r5,16(r18)
   10370:	a0001a1e 	bne	r20,zero,103dc <__d2b+0x140>
   10374:	3545883a 	add	r2,r6,r21
   10378:	10bef344 	addi	r2,r2,-1075
   1037c:	00c00d44 	movi	r3,53
   10380:	b0800015 	stw	r2,0(r22)
   10384:	1987c83a 	sub	r3,r3,r6
   10388:	b8c00015 	stw	r3,0(r23)
   1038c:	9005883a 	mov	r2,r18
   10390:	dfc00a17 	ldw	ra,40(sp)
   10394:	ddc00917 	ldw	r23,36(sp)
   10398:	dd800817 	ldw	r22,32(sp)
   1039c:	dd400717 	ldw	r21,28(sp)
   103a0:	dd000617 	ldw	r20,24(sp)
   103a4:	dcc00517 	ldw	r19,20(sp)
   103a8:	dc800417 	ldw	r18,16(sp)
   103ac:	dc400317 	ldw	r17,12(sp)
   103b0:	dc000217 	ldw	r16,8(sp)
   103b4:	dec00b04 	addi	sp,sp,44
   103b8:	f800283a 	ret
   103bc:	d9000104 	addi	r4,sp,4
   103c0:	000fcf80 	call	fcf8 <__lo0bits>
   103c4:	11800804 	addi	r6,r2,32
   103c8:	d8800117 	ldw	r2,4(sp)
   103cc:	94c00415 	stw	r19,16(r18)
   103d0:	980b883a 	mov	r5,r19
   103d4:	90800515 	stw	r2,20(r18)
   103d8:	a03fe626 	beq	r20,zero,10374 <__d2b+0xd8>
   103dc:	2945883a 	add	r2,r5,r5
   103e0:	1085883a 	add	r2,r2,r2
   103e4:	1405883a 	add	r2,r2,r16
   103e8:	113fff17 	ldw	r4,-4(r2)
   103ec:	30fef384 	addi	r3,r6,-1074
   103f0:	2820917a 	slli	r16,r5,5
   103f4:	b0c00015 	stw	r3,0(r22)
   103f8:	000fc880 	call	fc88 <__hi0bits>
   103fc:	80a1c83a 	sub	r16,r16,r2
   10400:	bc000015 	stw	r16,0(r23)
   10404:	003fe106 	br	1038c <__d2b+0xf0>
   10408:	d8800017 	ldw	r2,0(sp)
   1040c:	90800515 	stw	r2,20(r18)
   10410:	d8c00117 	ldw	r3,4(sp)
   10414:	003fd106 	br	1035c <__d2b+0xc0>

00010418 <__mdiff>:
   10418:	defffb04 	addi	sp,sp,-20
   1041c:	dc000015 	stw	r16,0(sp)
   10420:	2821883a 	mov	r16,r5
   10424:	dc800215 	stw	r18,8(sp)
   10428:	300b883a 	mov	r5,r6
   1042c:	2025883a 	mov	r18,r4
   10430:	8009883a 	mov	r4,r16
   10434:	dc400115 	stw	r17,4(sp)
   10438:	dfc00415 	stw	ra,16(sp)
   1043c:	dcc00315 	stw	r19,12(sp)
   10440:	3023883a 	mov	r17,r6
   10444:	000fdbc0 	call	fdbc <__mcmp>
   10448:	10004226 	beq	r2,zero,10554 <__mdiff+0x13c>
   1044c:	10005016 	blt	r2,zero,10590 <__mdiff+0x178>
   10450:	0027883a 	mov	r19,zero
   10454:	81400117 	ldw	r5,4(r16)
   10458:	9009883a 	mov	r4,r18
   1045c:	00101e00 	call	101e0 <_Balloc>
   10460:	1019883a 	mov	r12,r2
   10464:	82800417 	ldw	r10,16(r16)
   10468:	88800417 	ldw	r2,16(r17)
   1046c:	81800504 	addi	r6,r16,20
   10470:	5287883a 	add	r3,r10,r10
   10474:	1085883a 	add	r2,r2,r2
   10478:	18c7883a 	add	r3,r3,r3
   1047c:	1085883a 	add	r2,r2,r2
   10480:	8a000504 	addi	r8,r17,20
   10484:	64c00315 	stw	r19,12(r12)
   10488:	30db883a 	add	r13,r6,r3
   1048c:	4097883a 	add	r11,r8,r2
   10490:	61c00504 	addi	r7,r12,20
   10494:	0013883a 	mov	r9,zero
   10498:	31000017 	ldw	r4,0(r6)
   1049c:	41400017 	ldw	r5,0(r8)
   104a0:	42000104 	addi	r8,r8,4
   104a4:	20bfffcc 	andi	r2,r4,65535
   104a8:	28ffffcc 	andi	r3,r5,65535
   104ac:	10c5c83a 	sub	r2,r2,r3
   104b0:	1245883a 	add	r2,r2,r9
   104b4:	2008d43a 	srli	r4,r4,16
   104b8:	280ad43a 	srli	r5,r5,16
   104bc:	1007d43a 	srai	r3,r2,16
   104c0:	3880000d 	sth	r2,0(r7)
   104c4:	2149c83a 	sub	r4,r4,r5
   104c8:	20c9883a 	add	r4,r4,r3
   104cc:	3900008d 	sth	r4,2(r7)
   104d0:	31800104 	addi	r6,r6,4
   104d4:	39c00104 	addi	r7,r7,4
   104d8:	2013d43a 	srai	r9,r4,16
   104dc:	42ffee36 	bltu	r8,r11,10498 <__mdiff+0x80>
   104e0:	33400c2e 	bgeu	r6,r13,10514 <__mdiff+0xfc>
   104e4:	30800017 	ldw	r2,0(r6)
   104e8:	31800104 	addi	r6,r6,4
   104ec:	10ffffcc 	andi	r3,r2,65535
   104f0:	1a47883a 	add	r3,r3,r9
   104f4:	1004d43a 	srli	r2,r2,16
   104f8:	1809d43a 	srai	r4,r3,16
   104fc:	38c0000d 	sth	r3,0(r7)
   10500:	1105883a 	add	r2,r2,r4
   10504:	3880008d 	sth	r2,2(r7)
   10508:	1013d43a 	srai	r9,r2,16
   1050c:	39c00104 	addi	r7,r7,4
   10510:	337ff436 	bltu	r6,r13,104e4 <__mdiff+0xcc>
   10514:	38bfff17 	ldw	r2,-4(r7)
   10518:	38ffff04 	addi	r3,r7,-4
   1051c:	1000041e 	bne	r2,zero,10530 <__mdiff+0x118>
   10520:	18ffff04 	addi	r3,r3,-4
   10524:	18800017 	ldw	r2,0(r3)
   10528:	52bfffc4 	addi	r10,r10,-1
   1052c:	103ffc26 	beq	r2,zero,10520 <__mdiff+0x108>
   10530:	6005883a 	mov	r2,r12
   10534:	62800415 	stw	r10,16(r12)
   10538:	dfc00417 	ldw	ra,16(sp)
   1053c:	dcc00317 	ldw	r19,12(sp)
   10540:	dc800217 	ldw	r18,8(sp)
   10544:	dc400117 	ldw	r17,4(sp)
   10548:	dc000017 	ldw	r16,0(sp)
   1054c:	dec00504 	addi	sp,sp,20
   10550:	f800283a 	ret
   10554:	9009883a 	mov	r4,r18
   10558:	000b883a 	mov	r5,zero
   1055c:	00101e00 	call	101e0 <_Balloc>
   10560:	1019883a 	mov	r12,r2
   10564:	00800044 	movi	r2,1
   10568:	60800415 	stw	r2,16(r12)
   1056c:	6005883a 	mov	r2,r12
   10570:	60000515 	stw	zero,20(r12)
   10574:	dfc00417 	ldw	ra,16(sp)
   10578:	dcc00317 	ldw	r19,12(sp)
   1057c:	dc800217 	ldw	r18,8(sp)
   10580:	dc400117 	ldw	r17,4(sp)
   10584:	dc000017 	ldw	r16,0(sp)
   10588:	dec00504 	addi	sp,sp,20
   1058c:	f800283a 	ret
   10590:	880d883a 	mov	r6,r17
   10594:	04c00044 	movi	r19,1
   10598:	8023883a 	mov	r17,r16
   1059c:	3021883a 	mov	r16,r6
   105a0:	003fac06 	br	10454 <__mdiff+0x3c>

000105a4 <__lshift>:
   105a4:	defff904 	addi	sp,sp,-28
   105a8:	28800417 	ldw	r2,16(r5)
   105ac:	dc000015 	stw	r16,0(sp)
   105b0:	3021d17a 	srai	r16,r6,5
   105b4:	28c00217 	ldw	r3,8(r5)
   105b8:	10800044 	addi	r2,r2,1
   105bc:	dc400115 	stw	r17,4(sp)
   105c0:	80a3883a 	add	r17,r16,r2
   105c4:	dd400515 	stw	r21,20(sp)
   105c8:	dd000415 	stw	r20,16(sp)
   105cc:	dc800215 	stw	r18,8(sp)
   105d0:	dfc00615 	stw	ra,24(sp)
   105d4:	2825883a 	mov	r18,r5
   105d8:	dcc00315 	stw	r19,12(sp)
   105dc:	3029883a 	mov	r20,r6
   105e0:	202b883a 	mov	r21,r4
   105e4:	29400117 	ldw	r5,4(r5)
   105e8:	1c40030e 	bge	r3,r17,105f8 <__lshift+0x54>
   105ec:	18c7883a 	add	r3,r3,r3
   105f0:	29400044 	addi	r5,r5,1
   105f4:	1c7ffd16 	blt	r3,r17,105ec <__lshift+0x48>
   105f8:	a809883a 	mov	r4,r21
   105fc:	00101e00 	call	101e0 <_Balloc>
   10600:	1027883a 	mov	r19,r2
   10604:	11400504 	addi	r5,r2,20
   10608:	0400090e 	bge	zero,r16,10630 <__lshift+0x8c>
   1060c:	2805883a 	mov	r2,r5
   10610:	0007883a 	mov	r3,zero
   10614:	18c00044 	addi	r3,r3,1
   10618:	10000015 	stw	zero,0(r2)
   1061c:	10800104 	addi	r2,r2,4
   10620:	80fffc1e 	bne	r16,r3,10614 <__lshift+0x70>
   10624:	8405883a 	add	r2,r16,r16
   10628:	1085883a 	add	r2,r2,r2
   1062c:	288b883a 	add	r5,r5,r2
   10630:	90800417 	ldw	r2,16(r18)
   10634:	91000504 	addi	r4,r18,20
   10638:	a18007cc 	andi	r6,r20,31
   1063c:	1085883a 	add	r2,r2,r2
   10640:	1085883a 	add	r2,r2,r2
   10644:	208f883a 	add	r7,r4,r2
   10648:	30001e26 	beq	r6,zero,106c4 <__lshift+0x120>
   1064c:	00800804 	movi	r2,32
   10650:	1191c83a 	sub	r8,r2,r6
   10654:	0007883a 	mov	r3,zero
   10658:	20800017 	ldw	r2,0(r4)
   1065c:	1184983a 	sll	r2,r2,r6
   10660:	1884b03a 	or	r2,r3,r2
   10664:	28800015 	stw	r2,0(r5)
   10668:	20c00017 	ldw	r3,0(r4)
   1066c:	21000104 	addi	r4,r4,4
   10670:	29400104 	addi	r5,r5,4
   10674:	1a06d83a 	srl	r3,r3,r8
   10678:	21fff736 	bltu	r4,r7,10658 <__lshift+0xb4>
   1067c:	28c00015 	stw	r3,0(r5)
   10680:	18000126 	beq	r3,zero,10688 <__lshift+0xe4>
   10684:	8c400044 	addi	r17,r17,1
   10688:	88bfffc4 	addi	r2,r17,-1
   1068c:	98800415 	stw	r2,16(r19)
   10690:	a809883a 	mov	r4,r21
   10694:	900b883a 	mov	r5,r18
   10698:	000fc600 	call	fc60 <_Bfree>
   1069c:	9805883a 	mov	r2,r19
   106a0:	dfc00617 	ldw	ra,24(sp)
   106a4:	dd400517 	ldw	r21,20(sp)
   106a8:	dd000417 	ldw	r20,16(sp)
   106ac:	dcc00317 	ldw	r19,12(sp)
   106b0:	dc800217 	ldw	r18,8(sp)
   106b4:	dc400117 	ldw	r17,4(sp)
   106b8:	dc000017 	ldw	r16,0(sp)
   106bc:	dec00704 	addi	sp,sp,28
   106c0:	f800283a 	ret
   106c4:	20800017 	ldw	r2,0(r4)
   106c8:	21000104 	addi	r4,r4,4
   106cc:	28800015 	stw	r2,0(r5)
   106d0:	29400104 	addi	r5,r5,4
   106d4:	21ffec2e 	bgeu	r4,r7,10688 <__lshift+0xe4>
   106d8:	20800017 	ldw	r2,0(r4)
   106dc:	21000104 	addi	r4,r4,4
   106e0:	28800015 	stw	r2,0(r5)
   106e4:	29400104 	addi	r5,r5,4
   106e8:	21fff636 	bltu	r4,r7,106c4 <__lshift+0x120>
   106ec:	003fe606 	br	10688 <__lshift+0xe4>

000106f0 <__multiply>:
   106f0:	defff904 	addi	sp,sp,-28
   106f4:	dcc00315 	stw	r19,12(sp)
   106f8:	dc800215 	stw	r18,8(sp)
   106fc:	2cc00417 	ldw	r19,16(r5)
   10700:	34800417 	ldw	r18,16(r6)
   10704:	dd000415 	stw	r20,16(sp)
   10708:	dc400115 	stw	r17,4(sp)
   1070c:	dfc00615 	stw	ra,24(sp)
   10710:	dd400515 	stw	r21,20(sp)
   10714:	dc000015 	stw	r16,0(sp)
   10718:	2823883a 	mov	r17,r5
   1071c:	3029883a 	mov	r20,r6
   10720:	9c80040e 	bge	r19,r18,10734 <__multiply+0x44>
   10724:	9027883a 	mov	r19,r18
   10728:	2c800417 	ldw	r18,16(r5)
   1072c:	2829883a 	mov	r20,r5
   10730:	3023883a 	mov	r17,r6
   10734:	88800217 	ldw	r2,8(r17)
   10738:	9ca1883a 	add	r16,r19,r18
   1073c:	89400117 	ldw	r5,4(r17)
   10740:	1400010e 	bge	r2,r16,10748 <__multiply+0x58>
   10744:	29400044 	addi	r5,r5,1
   10748:	00101e00 	call	101e0 <_Balloc>
   1074c:	102b883a 	mov	r21,r2
   10750:	8405883a 	add	r2,r16,r16
   10754:	1085883a 	add	r2,r2,r2
   10758:	a9000504 	addi	r4,r21,20
   1075c:	209d883a 	add	r14,r4,r2
   10760:	2380042e 	bgeu	r4,r14,10774 <__multiply+0x84>
   10764:	2005883a 	mov	r2,r4
   10768:	10000015 	stw	zero,0(r2)
   1076c:	10800104 	addi	r2,r2,4
   10770:	13bffd36 	bltu	r2,r14,10768 <__multiply+0x78>
   10774:	9485883a 	add	r2,r18,r18
   10778:	9cc7883a 	add	r3,r19,r19
   1077c:	a1800504 	addi	r6,r20,20
   10780:	1085883a 	add	r2,r2,r2
   10784:	8b400504 	addi	r13,r17,20
   10788:	18c7883a 	add	r3,r3,r3
   1078c:	309f883a 	add	r15,r6,r2
   10790:	68d7883a 	add	r11,r13,r3
   10794:	33c03b2e 	bgeu	r6,r15,10884 <__multiply+0x194>
   10798:	2019883a 	mov	r12,r4
   1079c:	30800017 	ldw	r2,0(r6)
   107a0:	127fffcc 	andi	r9,r2,65535
   107a4:	48001826 	beq	r9,zero,10808 <__multiply+0x118>
   107a8:	6811883a 	mov	r8,r13
   107ac:	600f883a 	mov	r7,r12
   107b0:	0015883a 	mov	r10,zero
   107b4:	40c00017 	ldw	r3,0(r8)
   107b8:	39400017 	ldw	r5,0(r7)
   107bc:	42000104 	addi	r8,r8,4
   107c0:	193fffcc 	andi	r4,r3,65535
   107c4:	4909383a 	mul	r4,r9,r4
   107c8:	1806d43a 	srli	r3,r3,16
   107cc:	28bfffcc 	andi	r2,r5,65535
   107d0:	5085883a 	add	r2,r10,r2
   107d4:	2089883a 	add	r4,r4,r2
   107d8:	48c7383a 	mul	r3,r9,r3
   107dc:	280ad43a 	srli	r5,r5,16
   107e0:	2004d43a 	srli	r2,r4,16
   107e4:	3900000d 	sth	r4,0(r7)
   107e8:	1947883a 	add	r3,r3,r5
   107ec:	10c5883a 	add	r2,r2,r3
   107f0:	3880008d 	sth	r2,2(r7)
   107f4:	1014d43a 	srli	r10,r2,16
   107f8:	39c00104 	addi	r7,r7,4
   107fc:	42ffed36 	bltu	r8,r11,107b4 <__multiply+0xc4>
   10800:	3a800015 	stw	r10,0(r7)
   10804:	30800017 	ldw	r2,0(r6)
   10808:	1012d43a 	srli	r9,r2,16
   1080c:	48001926 	beq	r9,zero,10874 <__multiply+0x184>
   10810:	60800017 	ldw	r2,0(r12)
   10814:	6811883a 	mov	r8,r13
   10818:	600f883a 	mov	r7,r12
   1081c:	0015883a 	mov	r10,zero
   10820:	100b883a 	mov	r5,r2
   10824:	41000017 	ldw	r4,0(r8)
   10828:	2806d43a 	srli	r3,r5,16
   1082c:	3880000d 	sth	r2,0(r7)
   10830:	20bfffcc 	andi	r2,r4,65535
   10834:	4885383a 	mul	r2,r9,r2
   10838:	50c7883a 	add	r3,r10,r3
   1083c:	2008d43a 	srli	r4,r4,16
   10840:	10c5883a 	add	r2,r2,r3
   10844:	3880008d 	sth	r2,2(r7)
   10848:	39c00104 	addi	r7,r7,4
   1084c:	39400017 	ldw	r5,0(r7)
   10850:	4909383a 	mul	r4,r9,r4
   10854:	1004d43a 	srli	r2,r2,16
   10858:	28ffffcc 	andi	r3,r5,65535
   1085c:	20c9883a 	add	r4,r4,r3
   10860:	1105883a 	add	r2,r2,r4
   10864:	42000104 	addi	r8,r8,4
   10868:	1014d43a 	srli	r10,r2,16
   1086c:	42ffed36 	bltu	r8,r11,10824 <__multiply+0x134>
   10870:	38800015 	stw	r2,0(r7)
   10874:	31800104 	addi	r6,r6,4
   10878:	33c0022e 	bgeu	r6,r15,10884 <__multiply+0x194>
   1087c:	63000104 	addi	r12,r12,4
   10880:	003fc606 	br	1079c <__multiply+0xac>
   10884:	0400090e 	bge	zero,r16,108ac <__multiply+0x1bc>
   10888:	70bfff17 	ldw	r2,-4(r14)
   1088c:	70ffff04 	addi	r3,r14,-4
   10890:	10000326 	beq	r2,zero,108a0 <__multiply+0x1b0>
   10894:	00000506 	br	108ac <__multiply+0x1bc>
   10898:	18800017 	ldw	r2,0(r3)
   1089c:	1000031e 	bne	r2,zero,108ac <__multiply+0x1bc>
   108a0:	843fffc4 	addi	r16,r16,-1
   108a4:	18ffff04 	addi	r3,r3,-4
   108a8:	803ffb1e 	bne	r16,zero,10898 <__multiply+0x1a8>
   108ac:	a805883a 	mov	r2,r21
   108b0:	ac000415 	stw	r16,16(r21)
   108b4:	dfc00617 	ldw	ra,24(sp)
   108b8:	dd400517 	ldw	r21,20(sp)
   108bc:	dd000417 	ldw	r20,16(sp)
   108c0:	dcc00317 	ldw	r19,12(sp)
   108c4:	dc800217 	ldw	r18,8(sp)
   108c8:	dc400117 	ldw	r17,4(sp)
   108cc:	dc000017 	ldw	r16,0(sp)
   108d0:	dec00704 	addi	sp,sp,28
   108d4:	f800283a 	ret

000108d8 <__i2b>:
   108d8:	defffd04 	addi	sp,sp,-12
   108dc:	dc000015 	stw	r16,0(sp)
   108e0:	04000044 	movi	r16,1
   108e4:	dc800115 	stw	r18,4(sp)
   108e8:	2825883a 	mov	r18,r5
   108ec:	800b883a 	mov	r5,r16
   108f0:	dfc00215 	stw	ra,8(sp)
   108f4:	00101e00 	call	101e0 <_Balloc>
   108f8:	14000415 	stw	r16,16(r2)
   108fc:	14800515 	stw	r18,20(r2)
   10900:	dfc00217 	ldw	ra,8(sp)
   10904:	dc800117 	ldw	r18,4(sp)
   10908:	dc000017 	ldw	r16,0(sp)
   1090c:	dec00304 	addi	sp,sp,12
   10910:	f800283a 	ret

00010914 <__multadd>:
   10914:	defffa04 	addi	sp,sp,-24
   10918:	dc800215 	stw	r18,8(sp)
   1091c:	2c800417 	ldw	r18,16(r5)
   10920:	dd000415 	stw	r20,16(sp)
   10924:	dcc00315 	stw	r19,12(sp)
   10928:	dc000015 	stw	r16,0(sp)
   1092c:	dfc00515 	stw	ra,20(sp)
   10930:	3821883a 	mov	r16,r7
   10934:	dc400115 	stw	r17,4(sp)
   10938:	2827883a 	mov	r19,r5
   1093c:	2029883a 	mov	r20,r4
   10940:	2a000504 	addi	r8,r5,20
   10944:	000f883a 	mov	r7,zero
   10948:	40800017 	ldw	r2,0(r8)
   1094c:	39c00044 	addi	r7,r7,1
   10950:	10ffffcc 	andi	r3,r2,65535
   10954:	1987383a 	mul	r3,r3,r6
   10958:	1004d43a 	srli	r2,r2,16
   1095c:	1c07883a 	add	r3,r3,r16
   10960:	180ad43a 	srli	r5,r3,16
   10964:	1185383a 	mul	r2,r2,r6
   10968:	18ffffcc 	andi	r3,r3,65535
   1096c:	1145883a 	add	r2,r2,r5
   10970:	1008943a 	slli	r4,r2,16
   10974:	1020d43a 	srli	r16,r2,16
   10978:	20c9883a 	add	r4,r4,r3
   1097c:	41000015 	stw	r4,0(r8)
   10980:	42000104 	addi	r8,r8,4
   10984:	3cbff016 	blt	r7,r18,10948 <__multadd+0x34>
   10988:	80000826 	beq	r16,zero,109ac <__multadd+0x98>
   1098c:	98800217 	ldw	r2,8(r19)
   10990:	90800f0e 	bge	r18,r2,109d0 <__multadd+0xbc>
   10994:	9485883a 	add	r2,r18,r18
   10998:	1085883a 	add	r2,r2,r2
   1099c:	14c5883a 	add	r2,r2,r19
   109a0:	90c00044 	addi	r3,r18,1
   109a4:	14000515 	stw	r16,20(r2)
   109a8:	98c00415 	stw	r3,16(r19)
   109ac:	9805883a 	mov	r2,r19
   109b0:	dfc00517 	ldw	ra,20(sp)
   109b4:	dd000417 	ldw	r20,16(sp)
   109b8:	dcc00317 	ldw	r19,12(sp)
   109bc:	dc800217 	ldw	r18,8(sp)
   109c0:	dc400117 	ldw	r17,4(sp)
   109c4:	dc000017 	ldw	r16,0(sp)
   109c8:	dec00604 	addi	sp,sp,24
   109cc:	f800283a 	ret
   109d0:	99400117 	ldw	r5,4(r19)
   109d4:	a009883a 	mov	r4,r20
   109d8:	29400044 	addi	r5,r5,1
   109dc:	00101e00 	call	101e0 <_Balloc>
   109e0:	99800417 	ldw	r6,16(r19)
   109e4:	99400304 	addi	r5,r19,12
   109e8:	11000304 	addi	r4,r2,12
   109ec:	318d883a 	add	r6,r6,r6
   109f0:	318d883a 	add	r6,r6,r6
   109f4:	31800204 	addi	r6,r6,8
   109f8:	1023883a 	mov	r17,r2
   109fc:	00083140 	call	8314 <memcpy>
   10a00:	980b883a 	mov	r5,r19
   10a04:	a009883a 	mov	r4,r20
   10a08:	000fc600 	call	fc60 <_Bfree>
   10a0c:	8827883a 	mov	r19,r17
   10a10:	003fe006 	br	10994 <__multadd+0x80>

00010a14 <__pow5mult>:
   10a14:	defffa04 	addi	sp,sp,-24
   10a18:	308000cc 	andi	r2,r6,3
   10a1c:	dd000415 	stw	r20,16(sp)
   10a20:	dcc00315 	stw	r19,12(sp)
   10a24:	dc000015 	stw	r16,0(sp)
   10a28:	dfc00515 	stw	ra,20(sp)
   10a2c:	dc800215 	stw	r18,8(sp)
   10a30:	dc400115 	stw	r17,4(sp)
   10a34:	3021883a 	mov	r16,r6
   10a38:	2027883a 	mov	r19,r4
   10a3c:	2829883a 	mov	r20,r5
   10a40:	10002b1e 	bne	r2,zero,10af0 <__pow5mult+0xdc>
   10a44:	8025d0ba 	srai	r18,r16,2
   10a48:	90001b26 	beq	r18,zero,10ab8 <__pow5mult+0xa4>
   10a4c:	9c001217 	ldw	r16,72(r19)
   10a50:	8000081e 	bne	r16,zero,10a74 <__pow5mult+0x60>
   10a54:	00003006 	br	10b18 <__pow5mult+0x104>
   10a58:	800b883a 	mov	r5,r16
   10a5c:	800d883a 	mov	r6,r16
   10a60:	9809883a 	mov	r4,r19
   10a64:	90001426 	beq	r18,zero,10ab8 <__pow5mult+0xa4>
   10a68:	80800017 	ldw	r2,0(r16)
   10a6c:	10001b26 	beq	r2,zero,10adc <__pow5mult+0xc8>
   10a70:	1021883a 	mov	r16,r2
   10a74:	9080004c 	andi	r2,r18,1
   10a78:	1005003a 	cmpeq	r2,r2,zero
   10a7c:	9025d07a 	srai	r18,r18,1
   10a80:	800d883a 	mov	r6,r16
   10a84:	9809883a 	mov	r4,r19
   10a88:	a00b883a 	mov	r5,r20
   10a8c:	103ff21e 	bne	r2,zero,10a58 <__pow5mult+0x44>
   10a90:	00106f00 	call	106f0 <__multiply>
   10a94:	a00b883a 	mov	r5,r20
   10a98:	9809883a 	mov	r4,r19
   10a9c:	1023883a 	mov	r17,r2
   10aa0:	000fc600 	call	fc60 <_Bfree>
   10aa4:	8829883a 	mov	r20,r17
   10aa8:	800b883a 	mov	r5,r16
   10aac:	800d883a 	mov	r6,r16
   10ab0:	9809883a 	mov	r4,r19
   10ab4:	903fec1e 	bne	r18,zero,10a68 <__pow5mult+0x54>
   10ab8:	a005883a 	mov	r2,r20
   10abc:	dfc00517 	ldw	ra,20(sp)
   10ac0:	dd000417 	ldw	r20,16(sp)
   10ac4:	dcc00317 	ldw	r19,12(sp)
   10ac8:	dc800217 	ldw	r18,8(sp)
   10acc:	dc400117 	ldw	r17,4(sp)
   10ad0:	dc000017 	ldw	r16,0(sp)
   10ad4:	dec00604 	addi	sp,sp,24
   10ad8:	f800283a 	ret
   10adc:	00106f00 	call	106f0 <__multiply>
   10ae0:	80800015 	stw	r2,0(r16)
   10ae4:	1021883a 	mov	r16,r2
   10ae8:	10000015 	stw	zero,0(r2)
   10aec:	003fe106 	br	10a74 <__pow5mult+0x60>
   10af0:	1085883a 	add	r2,r2,r2
   10af4:	00c20034 	movhi	r3,2048
   10af8:	18c1d604 	addi	r3,r3,1880
   10afc:	1085883a 	add	r2,r2,r2
   10b00:	10c5883a 	add	r2,r2,r3
   10b04:	11bfff17 	ldw	r6,-4(r2)
   10b08:	000f883a 	mov	r7,zero
   10b0c:	00109140 	call	10914 <__multadd>
   10b10:	1029883a 	mov	r20,r2
   10b14:	003fcb06 	br	10a44 <__pow5mult+0x30>
   10b18:	9809883a 	mov	r4,r19
   10b1c:	01409c44 	movi	r5,625
   10b20:	00108d80 	call	108d8 <__i2b>
   10b24:	98801215 	stw	r2,72(r19)
   10b28:	1021883a 	mov	r16,r2
   10b2c:	10000015 	stw	zero,0(r2)
   10b30:	003fd006 	br	10a74 <__pow5mult+0x60>

00010b34 <__s2b>:
   10b34:	defff904 	addi	sp,sp,-28
   10b38:	dcc00315 	stw	r19,12(sp)
   10b3c:	dc800215 	stw	r18,8(sp)
   10b40:	2827883a 	mov	r19,r5
   10b44:	2025883a 	mov	r18,r4
   10b48:	01400244 	movi	r5,9
   10b4c:	39000204 	addi	r4,r7,8
   10b50:	dd000415 	stw	r20,16(sp)
   10b54:	dc400115 	stw	r17,4(sp)
   10b58:	dfc00615 	stw	ra,24(sp)
   10b5c:	dd400515 	stw	r21,20(sp)
   10b60:	dc000015 	stw	r16,0(sp)
   10b64:	3829883a 	mov	r20,r7
   10b68:	3023883a 	mov	r17,r6
   10b6c:	0012eb00 	call	12eb0 <__divsi3>
   10b70:	00c00044 	movi	r3,1
   10b74:	1880350e 	bge	r3,r2,10c4c <__s2b+0x118>
   10b78:	000b883a 	mov	r5,zero
   10b7c:	18c7883a 	add	r3,r3,r3
   10b80:	29400044 	addi	r5,r5,1
   10b84:	18bffd16 	blt	r3,r2,10b7c <__s2b+0x48>
   10b88:	9009883a 	mov	r4,r18
   10b8c:	00101e00 	call	101e0 <_Balloc>
   10b90:	1011883a 	mov	r8,r2
   10b94:	d8800717 	ldw	r2,28(sp)
   10b98:	00c00044 	movi	r3,1
   10b9c:	01800244 	movi	r6,9
   10ba0:	40800515 	stw	r2,20(r8)
   10ba4:	40c00415 	stw	r3,16(r8)
   10ba8:	3440260e 	bge	r6,r17,10c44 <__s2b+0x110>
   10bac:	3021883a 	mov	r16,r6
   10bb0:	99ab883a 	add	r21,r19,r6
   10bb4:	9c05883a 	add	r2,r19,r16
   10bb8:	11c00007 	ldb	r7,0(r2)
   10bbc:	400b883a 	mov	r5,r8
   10bc0:	9009883a 	mov	r4,r18
   10bc4:	39fff404 	addi	r7,r7,-48
   10bc8:	01800284 	movi	r6,10
   10bcc:	00109140 	call	10914 <__multadd>
   10bd0:	84000044 	addi	r16,r16,1
   10bd4:	1011883a 	mov	r8,r2
   10bd8:	8c3ff61e 	bne	r17,r16,10bb4 <__s2b+0x80>
   10bdc:	ac45883a 	add	r2,r21,r17
   10be0:	117ffe04 	addi	r5,r2,-8
   10be4:	880d883a 	mov	r6,r17
   10be8:	35000c0e 	bge	r6,r20,10c1c <__s2b+0xe8>
   10bec:	a185c83a 	sub	r2,r20,r6
   10bf0:	2821883a 	mov	r16,r5
   10bf4:	28a3883a 	add	r17,r5,r2
   10bf8:	81c00007 	ldb	r7,0(r16)
   10bfc:	400b883a 	mov	r5,r8
   10c00:	9009883a 	mov	r4,r18
   10c04:	39fff404 	addi	r7,r7,-48
   10c08:	01800284 	movi	r6,10
   10c0c:	00109140 	call	10914 <__multadd>
   10c10:	84000044 	addi	r16,r16,1
   10c14:	1011883a 	mov	r8,r2
   10c18:	847ff71e 	bne	r16,r17,10bf8 <__s2b+0xc4>
   10c1c:	4005883a 	mov	r2,r8
   10c20:	dfc00617 	ldw	ra,24(sp)
   10c24:	dd400517 	ldw	r21,20(sp)
   10c28:	dd000417 	ldw	r20,16(sp)
   10c2c:	dcc00317 	ldw	r19,12(sp)
   10c30:	dc800217 	ldw	r18,8(sp)
   10c34:	dc400117 	ldw	r17,4(sp)
   10c38:	dc000017 	ldw	r16,0(sp)
   10c3c:	dec00704 	addi	sp,sp,28
   10c40:	f800283a 	ret
   10c44:	99400284 	addi	r5,r19,10
   10c48:	003fe706 	br	10be8 <__s2b+0xb4>
   10c4c:	000b883a 	mov	r5,zero
   10c50:	003fcd06 	br	10b88 <__s2b+0x54>

00010c54 <putc>:
   10c54:	defffc04 	addi	sp,sp,-16
   10c58:	dc800215 	stw	r18,8(sp)
   10c5c:	04820034 	movhi	r18,2048
   10c60:	948a3b04 	addi	r18,r18,10476
   10c64:	90c00017 	ldw	r3,0(r18)
   10c68:	dc400115 	stw	r17,4(sp)
   10c6c:	dc000015 	stw	r16,0(sp)
   10c70:	dfc00315 	stw	ra,12(sp)
   10c74:	2023883a 	mov	r17,r4
   10c78:	2821883a 	mov	r16,r5
   10c7c:	18000226 	beq	r3,zero,10c88 <putc+0x34>
   10c80:	18800e17 	ldw	r2,56(r3)
   10c84:	10001126 	beq	r2,zero,10ccc <putc+0x78>
   10c88:	80800217 	ldw	r2,8(r16)
   10c8c:	10ffffc4 	addi	r3,r2,-1
   10c90:	80c00215 	stw	r3,8(r16)
   10c94:	18001316 	blt	r3,zero,10ce4 <putc+0x90>
   10c98:	80800017 	ldw	r2,0(r16)
   10c9c:	14400005 	stb	r17,0(r2)
   10ca0:	80c00017 	ldw	r3,0(r16)
   10ca4:	18800044 	addi	r2,r3,1
   10ca8:	18c00003 	ldbu	r3,0(r3)
   10cac:	80800015 	stw	r2,0(r16)
   10cb0:	1805883a 	mov	r2,r3
   10cb4:	dfc00317 	ldw	ra,12(sp)
   10cb8:	dc800217 	ldw	r18,8(sp)
   10cbc:	dc400117 	ldw	r17,4(sp)
   10cc0:	dc000017 	ldw	r16,0(sp)
   10cc4:	dec00404 	addi	sp,sp,16
   10cc8:	f800283a 	ret
   10ccc:	1809883a 	mov	r4,r3
   10cd0:	000d8c80 	call	d8c8 <__sinit>
   10cd4:	80800217 	ldw	r2,8(r16)
   10cd8:	10ffffc4 	addi	r3,r2,-1
   10cdc:	80c00215 	stw	r3,8(r16)
   10ce0:	183fed0e 	bge	r3,zero,10c98 <putc+0x44>
   10ce4:	80800617 	ldw	r2,24(r16)
   10ce8:	18800f16 	blt	r3,r2,10d28 <putc+0xd4>
   10cec:	80800017 	ldw	r2,0(r16)
   10cf0:	14400005 	stb	r17,0(r2)
   10cf4:	81000017 	ldw	r4,0(r16)
   10cf8:	00800284 	movi	r2,10
   10cfc:	20c00003 	ldbu	r3,0(r4)
   10d00:	18801226 	beq	r3,r2,10d4c <putc+0xf8>
   10d04:	20800044 	addi	r2,r4,1
   10d08:	80800015 	stw	r2,0(r16)
   10d0c:	1805883a 	mov	r2,r3
   10d10:	dfc00317 	ldw	ra,12(sp)
   10d14:	dc800217 	ldw	r18,8(sp)
   10d18:	dc400117 	ldw	r17,4(sp)
   10d1c:	dc000017 	ldw	r16,0(sp)
   10d20:	dec00404 	addi	sp,sp,16
   10d24:	f800283a 	ret
   10d28:	91000017 	ldw	r4,0(r18)
   10d2c:	880b883a 	mov	r5,r17
   10d30:	800d883a 	mov	r6,r16
   10d34:	dfc00317 	ldw	ra,12(sp)
   10d38:	dc800217 	ldw	r18,8(sp)
   10d3c:	dc400117 	ldw	r17,4(sp)
   10d40:	dc000017 	ldw	r16,0(sp)
   10d44:	dec00404 	addi	sp,sp,16
   10d48:	001171c1 	jmpi	1171c <__swbuf_r>
   10d4c:	91000017 	ldw	r4,0(r18)
   10d50:	180b883a 	mov	r5,r3
   10d54:	003ff606 	br	10d30 <putc+0xdc>

00010d58 <_putc_r>:
   10d58:	defffc04 	addi	sp,sp,-16
   10d5c:	dc400215 	stw	r17,8(sp)
   10d60:	dc000115 	stw	r16,4(sp)
   10d64:	dfc00315 	stw	ra,12(sp)
   10d68:	2021883a 	mov	r16,r4
   10d6c:	2823883a 	mov	r17,r5
   10d70:	20000226 	beq	r4,zero,10d7c <_putc_r+0x24>
   10d74:	20800e17 	ldw	r2,56(r4)
   10d78:	10001026 	beq	r2,zero,10dbc <_putc_r+0x64>
   10d7c:	30800217 	ldw	r2,8(r6)
   10d80:	10ffffc4 	addi	r3,r2,-1
   10d84:	30c00215 	stw	r3,8(r6)
   10d88:	18001316 	blt	r3,zero,10dd8 <_putc_r+0x80>
   10d8c:	30800017 	ldw	r2,0(r6)
   10d90:	14400005 	stb	r17,0(r2)
   10d94:	30c00017 	ldw	r3,0(r6)
   10d98:	18800044 	addi	r2,r3,1
   10d9c:	18c00003 	ldbu	r3,0(r3)
   10da0:	30800015 	stw	r2,0(r6)
   10da4:	1805883a 	mov	r2,r3
   10da8:	dfc00317 	ldw	ra,12(sp)
   10dac:	dc400217 	ldw	r17,8(sp)
   10db0:	dc000117 	ldw	r16,4(sp)
   10db4:	dec00404 	addi	sp,sp,16
   10db8:	f800283a 	ret
   10dbc:	d9800015 	stw	r6,0(sp)
   10dc0:	000d8c80 	call	d8c8 <__sinit>
   10dc4:	d9800017 	ldw	r6,0(sp)
   10dc8:	30800217 	ldw	r2,8(r6)
   10dcc:	10ffffc4 	addi	r3,r2,-1
   10dd0:	30c00215 	stw	r3,8(r6)
   10dd4:	183fed0e 	bge	r3,zero,10d8c <_putc_r+0x34>
   10dd8:	30800617 	ldw	r2,24(r6)
   10ddc:	18800e16 	blt	r3,r2,10e18 <_putc_r+0xc0>
   10de0:	30800017 	ldw	r2,0(r6)
   10de4:	14400005 	stb	r17,0(r2)
   10de8:	31000017 	ldw	r4,0(r6)
   10dec:	00800284 	movi	r2,10
   10df0:	20c00003 	ldbu	r3,0(r4)
   10df4:	18800f26 	beq	r3,r2,10e34 <_putc_r+0xdc>
   10df8:	20800044 	addi	r2,r4,1
   10dfc:	30800015 	stw	r2,0(r6)
   10e00:	1805883a 	mov	r2,r3
   10e04:	dfc00317 	ldw	ra,12(sp)
   10e08:	dc400217 	ldw	r17,8(sp)
   10e0c:	dc000117 	ldw	r16,4(sp)
   10e10:	dec00404 	addi	sp,sp,16
   10e14:	f800283a 	ret
   10e18:	8009883a 	mov	r4,r16
   10e1c:	880b883a 	mov	r5,r17
   10e20:	dfc00317 	ldw	ra,12(sp)
   10e24:	dc400217 	ldw	r17,8(sp)
   10e28:	dc000117 	ldw	r16,4(sp)
   10e2c:	dec00404 	addi	sp,sp,16
   10e30:	001171c1 	jmpi	1171c <__swbuf_r>
   10e34:	8009883a 	mov	r4,r16
   10e38:	180b883a 	mov	r5,r3
   10e3c:	003ff806 	br	10e20 <_putc_r+0xc8>

00010e40 <_realloc_r>:
   10e40:	defff404 	addi	sp,sp,-48
   10e44:	dd800815 	stw	r22,32(sp)
   10e48:	dc800415 	stw	r18,16(sp)
   10e4c:	dc400315 	stw	r17,12(sp)
   10e50:	dfc00b15 	stw	ra,44(sp)
   10e54:	df000a15 	stw	fp,40(sp)
   10e58:	ddc00915 	stw	r23,36(sp)
   10e5c:	dd400715 	stw	r21,28(sp)
   10e60:	dd000615 	stw	r20,24(sp)
   10e64:	dcc00515 	stw	r19,20(sp)
   10e68:	dc000215 	stw	r16,8(sp)
   10e6c:	2825883a 	mov	r18,r5
   10e70:	3023883a 	mov	r17,r6
   10e74:	202d883a 	mov	r22,r4
   10e78:	2800c926 	beq	r5,zero,111a0 <_realloc_r+0x360>
   10e7c:	00138140 	call	13814 <__malloc_lock>
   10e80:	943ffe04 	addi	r16,r18,-8
   10e84:	88c002c4 	addi	r3,r17,11
   10e88:	00800584 	movi	r2,22
   10e8c:	82000117 	ldw	r8,4(r16)
   10e90:	10c01b2e 	bgeu	r2,r3,10f00 <_realloc_r+0xc0>
   10e94:	00bffe04 	movi	r2,-8
   10e98:	188e703a 	and	r7,r3,r2
   10e9c:	3839883a 	mov	fp,r7
   10ea0:	38001a16 	blt	r7,zero,10f0c <_realloc_r+0xcc>
   10ea4:	e4401936 	bltu	fp,r17,10f0c <_realloc_r+0xcc>
   10ea8:	013fff04 	movi	r4,-4
   10eac:	4126703a 	and	r19,r8,r4
   10eb0:	99c02616 	blt	r19,r7,10f4c <_realloc_r+0x10c>
   10eb4:	802b883a 	mov	r21,r16
   10eb8:	9829883a 	mov	r20,r19
   10ebc:	84000204 	addi	r16,r16,8
   10ec0:	a80f883a 	mov	r7,r21
   10ec4:	a70dc83a 	sub	r6,r20,fp
   10ec8:	008003c4 	movi	r2,15
   10ecc:	1180c136 	bltu	r2,r6,111d4 <_realloc_r+0x394>
   10ed0:	38800117 	ldw	r2,4(r7)
   10ed4:	a549883a 	add	r4,r20,r21
   10ed8:	1080004c 	andi	r2,r2,1
   10edc:	a084b03a 	or	r2,r20,r2
   10ee0:	38800115 	stw	r2,4(r7)
   10ee4:	20c00117 	ldw	r3,4(r4)
   10ee8:	18c00054 	ori	r3,r3,1
   10eec:	20c00115 	stw	r3,4(r4)
   10ef0:	b009883a 	mov	r4,r22
   10ef4:	00138340 	call	13834 <__malloc_unlock>
   10ef8:	8023883a 	mov	r17,r16
   10efc:	00000606 	br	10f18 <_realloc_r+0xd8>
   10f00:	01c00404 	movi	r7,16
   10f04:	3839883a 	mov	fp,r7
   10f08:	e47fe72e 	bgeu	fp,r17,10ea8 <_realloc_r+0x68>
   10f0c:	00800304 	movi	r2,12
   10f10:	0023883a 	mov	r17,zero
   10f14:	b0800015 	stw	r2,0(r22)
   10f18:	8805883a 	mov	r2,r17
   10f1c:	dfc00b17 	ldw	ra,44(sp)
   10f20:	df000a17 	ldw	fp,40(sp)
   10f24:	ddc00917 	ldw	r23,36(sp)
   10f28:	dd800817 	ldw	r22,32(sp)
   10f2c:	dd400717 	ldw	r21,28(sp)
   10f30:	dd000617 	ldw	r20,24(sp)
   10f34:	dcc00517 	ldw	r19,20(sp)
   10f38:	dc800417 	ldw	r18,16(sp)
   10f3c:	dc400317 	ldw	r17,12(sp)
   10f40:	dc000217 	ldw	r16,8(sp)
   10f44:	dec00c04 	addi	sp,sp,48
   10f48:	f800283a 	ret
   10f4c:	00820034 	movhi	r2,2048
   10f50:	1083c704 	addi	r2,r2,3868
   10f54:	12400217 	ldw	r9,8(r2)
   10f58:	84cd883a 	add	r6,r16,r19
   10f5c:	802b883a 	mov	r21,r16
   10f60:	3240b926 	beq	r6,r9,11248 <_realloc_r+0x408>
   10f64:	31400117 	ldw	r5,4(r6)
   10f68:	00bfff84 	movi	r2,-2
   10f6c:	2884703a 	and	r2,r5,r2
   10f70:	1185883a 	add	r2,r2,r6
   10f74:	10c00117 	ldw	r3,4(r2)
   10f78:	18c0004c 	andi	r3,r3,1
   10f7c:	1807003a 	cmpeq	r3,r3,zero
   10f80:	1800a326 	beq	r3,zero,11210 <_realloc_r+0x3d0>
   10f84:	2908703a 	and	r4,r5,r4
   10f88:	9929883a 	add	r20,r19,r4
   10f8c:	a1c0a30e 	bge	r20,r7,1121c <_realloc_r+0x3dc>
   10f90:	4080004c 	andi	r2,r8,1
   10f94:	1000551e 	bne	r2,zero,110ec <_realloc_r+0x2ac>
   10f98:	80800017 	ldw	r2,0(r16)
   10f9c:	80afc83a 	sub	r23,r16,r2
   10fa0:	b8c00117 	ldw	r3,4(r23)
   10fa4:	00bfff04 	movi	r2,-4
   10fa8:	1884703a 	and	r2,r3,r2
   10fac:	30002e26 	beq	r6,zero,11068 <_realloc_r+0x228>
   10fb0:	3240b926 	beq	r6,r9,11298 <_realloc_r+0x458>
   10fb4:	98a9883a 	add	r20,r19,r2
   10fb8:	2509883a 	add	r4,r4,r20
   10fbc:	d9000015 	stw	r4,0(sp)
   10fc0:	21c02a16 	blt	r4,r7,1106c <_realloc_r+0x22c>
   10fc4:	30800317 	ldw	r2,12(r6)
   10fc8:	30c00217 	ldw	r3,8(r6)
   10fcc:	01400904 	movi	r5,36
   10fd0:	99bfff04 	addi	r6,r19,-4
   10fd4:	18800315 	stw	r2,12(r3)
   10fd8:	10c00215 	stw	r3,8(r2)
   10fdc:	b9000317 	ldw	r4,12(r23)
   10fe0:	b8800217 	ldw	r2,8(r23)
   10fe4:	b82b883a 	mov	r21,r23
   10fe8:	bc000204 	addi	r16,r23,8
   10fec:	20800215 	stw	r2,8(r4)
   10ff0:	11000315 	stw	r4,12(r2)
   10ff4:	2980e436 	bltu	r5,r6,11388 <_realloc_r+0x548>
   10ff8:	008004c4 	movi	r2,19
   10ffc:	9009883a 	mov	r4,r18
   11000:	8011883a 	mov	r8,r16
   11004:	11800f2e 	bgeu	r2,r6,11044 <_realloc_r+0x204>
   11008:	90800017 	ldw	r2,0(r18)
   1100c:	ba000404 	addi	r8,r23,16
   11010:	91000204 	addi	r4,r18,8
   11014:	b8800215 	stw	r2,8(r23)
   11018:	90c00117 	ldw	r3,4(r18)
   1101c:	008006c4 	movi	r2,27
   11020:	b8c00315 	stw	r3,12(r23)
   11024:	1180072e 	bgeu	r2,r6,11044 <_realloc_r+0x204>
   11028:	90c00217 	ldw	r3,8(r18)
   1102c:	ba000604 	addi	r8,r23,24
   11030:	91000404 	addi	r4,r18,16
   11034:	b8c00415 	stw	r3,16(r23)
   11038:	90800317 	ldw	r2,12(r18)
   1103c:	b8800515 	stw	r2,20(r23)
   11040:	3140e726 	beq	r6,r5,113e0 <_realloc_r+0x5a0>
   11044:	20800017 	ldw	r2,0(r4)
   11048:	dd000017 	ldw	r20,0(sp)
   1104c:	b80f883a 	mov	r7,r23
   11050:	40800015 	stw	r2,0(r8)
   11054:	20c00117 	ldw	r3,4(r4)
   11058:	40c00115 	stw	r3,4(r8)
   1105c:	20800217 	ldw	r2,8(r4)
   11060:	40800215 	stw	r2,8(r8)
   11064:	003f9706 	br	10ec4 <_realloc_r+0x84>
   11068:	98a9883a 	add	r20,r19,r2
   1106c:	a1c01f16 	blt	r20,r7,110ec <_realloc_r+0x2ac>
   11070:	b8c00317 	ldw	r3,12(r23)
   11074:	b8800217 	ldw	r2,8(r23)
   11078:	99bfff04 	addi	r6,r19,-4
   1107c:	01400904 	movi	r5,36
   11080:	b82b883a 	mov	r21,r23
   11084:	18800215 	stw	r2,8(r3)
   11088:	10c00315 	stw	r3,12(r2)
   1108c:	bc000204 	addi	r16,r23,8
   11090:	2980c336 	bltu	r5,r6,113a0 <_realloc_r+0x560>
   11094:	008004c4 	movi	r2,19
   11098:	9009883a 	mov	r4,r18
   1109c:	8011883a 	mov	r8,r16
   110a0:	11800f2e 	bgeu	r2,r6,110e0 <_realloc_r+0x2a0>
   110a4:	90800017 	ldw	r2,0(r18)
   110a8:	ba000404 	addi	r8,r23,16
   110ac:	91000204 	addi	r4,r18,8
   110b0:	b8800215 	stw	r2,8(r23)
   110b4:	90c00117 	ldw	r3,4(r18)
   110b8:	008006c4 	movi	r2,27
   110bc:	b8c00315 	stw	r3,12(r23)
   110c0:	1180072e 	bgeu	r2,r6,110e0 <_realloc_r+0x2a0>
   110c4:	90c00217 	ldw	r3,8(r18)
   110c8:	ba000604 	addi	r8,r23,24
   110cc:	91000404 	addi	r4,r18,16
   110d0:	b8c00415 	stw	r3,16(r23)
   110d4:	90800317 	ldw	r2,12(r18)
   110d8:	b8800515 	stw	r2,20(r23)
   110dc:	3140c726 	beq	r6,r5,113fc <_realloc_r+0x5bc>
   110e0:	20800017 	ldw	r2,0(r4)
   110e4:	b80f883a 	mov	r7,r23
   110e8:	003fd906 	br	11050 <_realloc_r+0x210>
   110ec:	880b883a 	mov	r5,r17
   110f0:	b009883a 	mov	r4,r22
   110f4:	000f35c0 	call	f35c <_malloc_r>
   110f8:	1023883a 	mov	r17,r2
   110fc:	10002526 	beq	r2,zero,11194 <_realloc_r+0x354>
   11100:	80800117 	ldw	r2,4(r16)
   11104:	00ffff84 	movi	r3,-2
   11108:	893ffe04 	addi	r4,r17,-8
   1110c:	10c4703a 	and	r2,r2,r3
   11110:	8085883a 	add	r2,r16,r2
   11114:	20809526 	beq	r4,r2,1136c <_realloc_r+0x52c>
   11118:	99bfff04 	addi	r6,r19,-4
   1111c:	01c00904 	movi	r7,36
   11120:	39804536 	bltu	r7,r6,11238 <_realloc_r+0x3f8>
   11124:	008004c4 	movi	r2,19
   11128:	9009883a 	mov	r4,r18
   1112c:	880b883a 	mov	r5,r17
   11130:	11800f2e 	bgeu	r2,r6,11170 <_realloc_r+0x330>
   11134:	90800017 	ldw	r2,0(r18)
   11138:	89400204 	addi	r5,r17,8
   1113c:	91000204 	addi	r4,r18,8
   11140:	88800015 	stw	r2,0(r17)
   11144:	90c00117 	ldw	r3,4(r18)
   11148:	008006c4 	movi	r2,27
   1114c:	88c00115 	stw	r3,4(r17)
   11150:	1180072e 	bgeu	r2,r6,11170 <_realloc_r+0x330>
   11154:	90c00217 	ldw	r3,8(r18)
   11158:	89400404 	addi	r5,r17,16
   1115c:	91000404 	addi	r4,r18,16
   11160:	88c00215 	stw	r3,8(r17)
   11164:	90800317 	ldw	r2,12(r18)
   11168:	88800315 	stw	r2,12(r17)
   1116c:	31c09126 	beq	r6,r7,113b4 <_realloc_r+0x574>
   11170:	20800017 	ldw	r2,0(r4)
   11174:	28800015 	stw	r2,0(r5)
   11178:	20c00117 	ldw	r3,4(r4)
   1117c:	28c00115 	stw	r3,4(r5)
   11180:	20800217 	ldw	r2,8(r4)
   11184:	28800215 	stw	r2,8(r5)
   11188:	900b883a 	mov	r5,r18
   1118c:	b009883a 	mov	r4,r22
   11190:	000dc4c0 	call	dc4c <_free_r>
   11194:	b009883a 	mov	r4,r22
   11198:	00138340 	call	13834 <__malloc_unlock>
   1119c:	003f5e06 	br	10f18 <_realloc_r+0xd8>
   111a0:	300b883a 	mov	r5,r6
   111a4:	dfc00b17 	ldw	ra,44(sp)
   111a8:	df000a17 	ldw	fp,40(sp)
   111ac:	ddc00917 	ldw	r23,36(sp)
   111b0:	dd800817 	ldw	r22,32(sp)
   111b4:	dd400717 	ldw	r21,28(sp)
   111b8:	dd000617 	ldw	r20,24(sp)
   111bc:	dcc00517 	ldw	r19,20(sp)
   111c0:	dc800417 	ldw	r18,16(sp)
   111c4:	dc400317 	ldw	r17,12(sp)
   111c8:	dc000217 	ldw	r16,8(sp)
   111cc:	dec00c04 	addi	sp,sp,48
   111d0:	000f35c1 	jmpi	f35c <_malloc_r>
   111d4:	38800117 	ldw	r2,4(r7)
   111d8:	e54b883a 	add	r5,fp,r21
   111dc:	31000054 	ori	r4,r6,1
   111e0:	1080004c 	andi	r2,r2,1
   111e4:	1704b03a 	or	r2,r2,fp
   111e8:	38800115 	stw	r2,4(r7)
   111ec:	29000115 	stw	r4,4(r5)
   111f0:	2987883a 	add	r3,r5,r6
   111f4:	18800117 	ldw	r2,4(r3)
   111f8:	29400204 	addi	r5,r5,8
   111fc:	b009883a 	mov	r4,r22
   11200:	10800054 	ori	r2,r2,1
   11204:	18800115 	stw	r2,4(r3)
   11208:	000dc4c0 	call	dc4c <_free_r>
   1120c:	003f3806 	br	10ef0 <_realloc_r+0xb0>
   11210:	000d883a 	mov	r6,zero
   11214:	0009883a 	mov	r4,zero
   11218:	003f5d06 	br	10f90 <_realloc_r+0x150>
   1121c:	30c00217 	ldw	r3,8(r6)
   11220:	30800317 	ldw	r2,12(r6)
   11224:	800f883a 	mov	r7,r16
   11228:	84000204 	addi	r16,r16,8
   1122c:	10c00215 	stw	r3,8(r2)
   11230:	18800315 	stw	r2,12(r3)
   11234:	003f2306 	br	10ec4 <_realloc_r+0x84>
   11238:	8809883a 	mov	r4,r17
   1123c:	900b883a 	mov	r5,r18
   11240:	000fb800 	call	fb80 <memmove>
   11244:	003fd006 	br	11188 <_realloc_r+0x348>
   11248:	30800117 	ldw	r2,4(r6)
   1124c:	e0c00404 	addi	r3,fp,16
   11250:	1108703a 	and	r4,r2,r4
   11254:	9905883a 	add	r2,r19,r4
   11258:	10ff4d16 	blt	r2,r3,10f90 <_realloc_r+0x150>
   1125c:	1705c83a 	sub	r2,r2,fp
   11260:	870b883a 	add	r5,r16,fp
   11264:	10800054 	ori	r2,r2,1
   11268:	28800115 	stw	r2,4(r5)
   1126c:	80c00117 	ldw	r3,4(r16)
   11270:	00820034 	movhi	r2,2048
   11274:	1083c704 	addi	r2,r2,3868
   11278:	b009883a 	mov	r4,r22
   1127c:	18c0004c 	andi	r3,r3,1
   11280:	e0c6b03a 	or	r3,fp,r3
   11284:	11400215 	stw	r5,8(r2)
   11288:	80c00115 	stw	r3,4(r16)
   1128c:	00138340 	call	13834 <__malloc_unlock>
   11290:	84400204 	addi	r17,r16,8
   11294:	003f2006 	br	10f18 <_realloc_r+0xd8>
   11298:	98a9883a 	add	r20,r19,r2
   1129c:	2509883a 	add	r4,r4,r20
   112a0:	e0800404 	addi	r2,fp,16
   112a4:	d9000115 	stw	r4,4(sp)
   112a8:	20bf7016 	blt	r4,r2,1106c <_realloc_r+0x22c>
   112ac:	b8c00317 	ldw	r3,12(r23)
   112b0:	b8800217 	ldw	r2,8(r23)
   112b4:	99bfff04 	addi	r6,r19,-4
   112b8:	01400904 	movi	r5,36
   112bc:	18800215 	stw	r2,8(r3)
   112c0:	10c00315 	stw	r3,12(r2)
   112c4:	bc400204 	addi	r17,r23,8
   112c8:	29804136 	bltu	r5,r6,113d0 <_realloc_r+0x590>
   112cc:	008004c4 	movi	r2,19
   112d0:	9009883a 	mov	r4,r18
   112d4:	880f883a 	mov	r7,r17
   112d8:	11800f2e 	bgeu	r2,r6,11318 <_realloc_r+0x4d8>
   112dc:	90800017 	ldw	r2,0(r18)
   112e0:	b9c00404 	addi	r7,r23,16
   112e4:	91000204 	addi	r4,r18,8
   112e8:	b8800215 	stw	r2,8(r23)
   112ec:	90c00117 	ldw	r3,4(r18)
   112f0:	008006c4 	movi	r2,27
   112f4:	b8c00315 	stw	r3,12(r23)
   112f8:	1180072e 	bgeu	r2,r6,11318 <_realloc_r+0x4d8>
   112fc:	90c00217 	ldw	r3,8(r18)
   11300:	b9c00604 	addi	r7,r23,24
   11304:	91000404 	addi	r4,r18,16
   11308:	b8c00415 	stw	r3,16(r23)
   1130c:	90800317 	ldw	r2,12(r18)
   11310:	b8800515 	stw	r2,20(r23)
   11314:	31404026 	beq	r6,r5,11418 <_realloc_r+0x5d8>
   11318:	20800017 	ldw	r2,0(r4)
   1131c:	38800015 	stw	r2,0(r7)
   11320:	20c00117 	ldw	r3,4(r4)
   11324:	38c00115 	stw	r3,4(r7)
   11328:	20800217 	ldw	r2,8(r4)
   1132c:	38800215 	stw	r2,8(r7)
   11330:	d8c00117 	ldw	r3,4(sp)
   11334:	bf0b883a 	add	r5,r23,fp
   11338:	b009883a 	mov	r4,r22
   1133c:	1f05c83a 	sub	r2,r3,fp
   11340:	10800054 	ori	r2,r2,1
   11344:	28800115 	stw	r2,4(r5)
   11348:	b8c00117 	ldw	r3,4(r23)
   1134c:	00820034 	movhi	r2,2048
   11350:	1083c704 	addi	r2,r2,3868
   11354:	11400215 	stw	r5,8(r2)
   11358:	18c0004c 	andi	r3,r3,1
   1135c:	e0c6b03a 	or	r3,fp,r3
   11360:	b8c00115 	stw	r3,4(r23)
   11364:	00138340 	call	13834 <__malloc_unlock>
   11368:	003eeb06 	br	10f18 <_realloc_r+0xd8>
   1136c:	20800117 	ldw	r2,4(r4)
   11370:	00ffff04 	movi	r3,-4
   11374:	800f883a 	mov	r7,r16
   11378:	10c4703a 	and	r2,r2,r3
   1137c:	98a9883a 	add	r20,r19,r2
   11380:	84000204 	addi	r16,r16,8
   11384:	003ecf06 	br	10ec4 <_realloc_r+0x84>
   11388:	900b883a 	mov	r5,r18
   1138c:	8009883a 	mov	r4,r16
   11390:	000fb800 	call	fb80 <memmove>
   11394:	dd000017 	ldw	r20,0(sp)
   11398:	b80f883a 	mov	r7,r23
   1139c:	003ec906 	br	10ec4 <_realloc_r+0x84>
   113a0:	900b883a 	mov	r5,r18
   113a4:	8009883a 	mov	r4,r16
   113a8:	000fb800 	call	fb80 <memmove>
   113ac:	b80f883a 	mov	r7,r23
   113b0:	003ec406 	br	10ec4 <_realloc_r+0x84>
   113b4:	90c00417 	ldw	r3,16(r18)
   113b8:	89400604 	addi	r5,r17,24
   113bc:	91000604 	addi	r4,r18,24
   113c0:	88c00415 	stw	r3,16(r17)
   113c4:	90800517 	ldw	r2,20(r18)
   113c8:	88800515 	stw	r2,20(r17)
   113cc:	003f6806 	br	11170 <_realloc_r+0x330>
   113d0:	900b883a 	mov	r5,r18
   113d4:	8809883a 	mov	r4,r17
   113d8:	000fb800 	call	fb80 <memmove>
   113dc:	003fd406 	br	11330 <_realloc_r+0x4f0>
   113e0:	90c00417 	ldw	r3,16(r18)
   113e4:	91000604 	addi	r4,r18,24
   113e8:	ba000804 	addi	r8,r23,32
   113ec:	b8c00615 	stw	r3,24(r23)
   113f0:	90800517 	ldw	r2,20(r18)
   113f4:	b8800715 	stw	r2,28(r23)
   113f8:	003f1206 	br	11044 <_realloc_r+0x204>
   113fc:	90c00417 	ldw	r3,16(r18)
   11400:	91000604 	addi	r4,r18,24
   11404:	ba000804 	addi	r8,r23,32
   11408:	b8c00615 	stw	r3,24(r23)
   1140c:	90800517 	ldw	r2,20(r18)
   11410:	b8800715 	stw	r2,28(r23)
   11414:	003f3206 	br	110e0 <_realloc_r+0x2a0>
   11418:	90c00417 	ldw	r3,16(r18)
   1141c:	91000604 	addi	r4,r18,24
   11420:	b9c00804 	addi	r7,r23,32
   11424:	b8c00615 	stw	r3,24(r23)
   11428:	90800517 	ldw	r2,20(r18)
   1142c:	b8800715 	stw	r2,28(r23)
   11430:	003fb906 	br	11318 <_realloc_r+0x4d8>

00011434 <__isinfd>:
   11434:	200d883a 	mov	r6,r4
   11438:	0109c83a 	sub	r4,zero,r4
   1143c:	2188b03a 	or	r4,r4,r6
   11440:	2008d7fa 	srli	r4,r4,31
   11444:	00a00034 	movhi	r2,32768
   11448:	10bfffc4 	addi	r2,r2,-1
   1144c:	1144703a 	and	r2,r2,r5
   11450:	2088b03a 	or	r4,r4,r2
   11454:	009ffc34 	movhi	r2,32752
   11458:	1105c83a 	sub	r2,r2,r4
   1145c:	0087c83a 	sub	r3,zero,r2
   11460:	10c4b03a 	or	r2,r2,r3
   11464:	1004d7fa 	srli	r2,r2,31
   11468:	00c00044 	movi	r3,1
   1146c:	1885c83a 	sub	r2,r3,r2
   11470:	f800283a 	ret

00011474 <__isnand>:
   11474:	200d883a 	mov	r6,r4
   11478:	0109c83a 	sub	r4,zero,r4
   1147c:	2188b03a 	or	r4,r4,r6
   11480:	2008d7fa 	srli	r4,r4,31
   11484:	00a00034 	movhi	r2,32768
   11488:	10bfffc4 	addi	r2,r2,-1
   1148c:	1144703a 	and	r2,r2,r5
   11490:	2088b03a 	or	r4,r4,r2
   11494:	009ffc34 	movhi	r2,32752
   11498:	1105c83a 	sub	r2,r2,r4
   1149c:	1004d7fa 	srli	r2,r2,31
   114a0:	f800283a 	ret

000114a4 <_sbrk_r>:
   114a4:	defffd04 	addi	sp,sp,-12
   114a8:	dc000015 	stw	r16,0(sp)
   114ac:	04020034 	movhi	r16,2048
   114b0:	840a8704 	addi	r16,r16,10780
   114b4:	dc400115 	stw	r17,4(sp)
   114b8:	80000015 	stw	zero,0(r16)
   114bc:	2023883a 	mov	r17,r4
   114c0:	2809883a 	mov	r4,r5
   114c4:	dfc00215 	stw	ra,8(sp)
   114c8:	0013a340 	call	13a34 <sbrk>
   114cc:	1007883a 	mov	r3,r2
   114d0:	00bfffc4 	movi	r2,-1
   114d4:	18800626 	beq	r3,r2,114f0 <_sbrk_r+0x4c>
   114d8:	1805883a 	mov	r2,r3
   114dc:	dfc00217 	ldw	ra,8(sp)
   114e0:	dc400117 	ldw	r17,4(sp)
   114e4:	dc000017 	ldw	r16,0(sp)
   114e8:	dec00304 	addi	sp,sp,12
   114ec:	f800283a 	ret
   114f0:	80800017 	ldw	r2,0(r16)
   114f4:	103ff826 	beq	r2,zero,114d8 <_sbrk_r+0x34>
   114f8:	88800015 	stw	r2,0(r17)
   114fc:	1805883a 	mov	r2,r3
   11500:	dfc00217 	ldw	ra,8(sp)
   11504:	dc400117 	ldw	r17,4(sp)
   11508:	dc000017 	ldw	r16,0(sp)
   1150c:	dec00304 	addi	sp,sp,12
   11510:	f800283a 	ret

00011514 <__sclose>:
   11514:	2940038f 	ldh	r5,14(r5)
   11518:	00119941 	jmpi	11994 <_close_r>

0001151c <__sseek>:
   1151c:	defffe04 	addi	sp,sp,-8
   11520:	dc000015 	stw	r16,0(sp)
   11524:	2821883a 	mov	r16,r5
   11528:	2940038f 	ldh	r5,14(r5)
   1152c:	dfc00115 	stw	ra,4(sp)
   11530:	0011c0c0 	call	11c0c <_lseek_r>
   11534:	1007883a 	mov	r3,r2
   11538:	00bfffc4 	movi	r2,-1
   1153c:	18800926 	beq	r3,r2,11564 <__sseek+0x48>
   11540:	8080030b 	ldhu	r2,12(r16)
   11544:	80c01415 	stw	r3,80(r16)
   11548:	10840014 	ori	r2,r2,4096
   1154c:	8080030d 	sth	r2,12(r16)
   11550:	1805883a 	mov	r2,r3
   11554:	dfc00117 	ldw	ra,4(sp)
   11558:	dc000017 	ldw	r16,0(sp)
   1155c:	dec00204 	addi	sp,sp,8
   11560:	f800283a 	ret
   11564:	8080030b 	ldhu	r2,12(r16)
   11568:	10bbffcc 	andi	r2,r2,61439
   1156c:	8080030d 	sth	r2,12(r16)
   11570:	1805883a 	mov	r2,r3
   11574:	dfc00117 	ldw	ra,4(sp)
   11578:	dc000017 	ldw	r16,0(sp)
   1157c:	dec00204 	addi	sp,sp,8
   11580:	f800283a 	ret

00011584 <__swrite>:
   11584:	2880030b 	ldhu	r2,12(r5)
   11588:	defffb04 	addi	sp,sp,-20
   1158c:	dcc00315 	stw	r19,12(sp)
   11590:	1080400c 	andi	r2,r2,256
   11594:	dc800215 	stw	r18,8(sp)
   11598:	dc400115 	stw	r17,4(sp)
   1159c:	dc000015 	stw	r16,0(sp)
   115a0:	3027883a 	mov	r19,r6
   115a4:	3825883a 	mov	r18,r7
   115a8:	dfc00415 	stw	ra,16(sp)
   115ac:	2821883a 	mov	r16,r5
   115b0:	000d883a 	mov	r6,zero
   115b4:	01c00084 	movi	r7,2
   115b8:	2023883a 	mov	r17,r4
   115bc:	10000226 	beq	r2,zero,115c8 <__swrite+0x44>
   115c0:	2940038f 	ldh	r5,14(r5)
   115c4:	0011c0c0 	call	11c0c <_lseek_r>
   115c8:	8080030b 	ldhu	r2,12(r16)
   115cc:	8140038f 	ldh	r5,14(r16)
   115d0:	8809883a 	mov	r4,r17
   115d4:	10bbffcc 	andi	r2,r2,61439
   115d8:	980d883a 	mov	r6,r19
   115dc:	900f883a 	mov	r7,r18
   115e0:	8080030d 	sth	r2,12(r16)
   115e4:	dfc00417 	ldw	ra,16(sp)
   115e8:	dcc00317 	ldw	r19,12(sp)
   115ec:	dc800217 	ldw	r18,8(sp)
   115f0:	dc400117 	ldw	r17,4(sp)
   115f4:	dc000017 	ldw	r16,0(sp)
   115f8:	dec00504 	addi	sp,sp,20
   115fc:	00118681 	jmpi	11868 <_write_r>

00011600 <__sread>:
   11600:	defffe04 	addi	sp,sp,-8
   11604:	dc000015 	stw	r16,0(sp)
   11608:	2821883a 	mov	r16,r5
   1160c:	2940038f 	ldh	r5,14(r5)
   11610:	dfc00115 	stw	ra,4(sp)
   11614:	0011c840 	call	11c84 <_read_r>
   11618:	1007883a 	mov	r3,r2
   1161c:	10000816 	blt	r2,zero,11640 <__sread+0x40>
   11620:	80801417 	ldw	r2,80(r16)
   11624:	10c5883a 	add	r2,r2,r3
   11628:	80801415 	stw	r2,80(r16)
   1162c:	1805883a 	mov	r2,r3
   11630:	dfc00117 	ldw	ra,4(sp)
   11634:	dc000017 	ldw	r16,0(sp)
   11638:	dec00204 	addi	sp,sp,8
   1163c:	f800283a 	ret
   11640:	8080030b 	ldhu	r2,12(r16)
   11644:	10bbffcc 	andi	r2,r2,61439
   11648:	8080030d 	sth	r2,12(r16)
   1164c:	1805883a 	mov	r2,r3
   11650:	dfc00117 	ldw	ra,4(sp)
   11654:	dc000017 	ldw	r16,0(sp)
   11658:	dec00204 	addi	sp,sp,8
   1165c:	f800283a 	ret

00011660 <strcmp>:
   11660:	2144b03a 	or	r2,r4,r5
   11664:	108000cc 	andi	r2,r2,3
   11668:	10001d1e 	bne	r2,zero,116e0 <strcmp+0x80>
   1166c:	200f883a 	mov	r7,r4
   11670:	28800017 	ldw	r2,0(r5)
   11674:	21000017 	ldw	r4,0(r4)
   11678:	280d883a 	mov	r6,r5
   1167c:	2080161e 	bne	r4,r2,116d8 <strcmp+0x78>
   11680:	023fbff4 	movhi	r8,65279
   11684:	423fbfc4 	addi	r8,r8,-257
   11688:	2207883a 	add	r3,r4,r8
   1168c:	01602074 	movhi	r5,32897
   11690:	29602004 	addi	r5,r5,-32640
   11694:	1946703a 	and	r3,r3,r5
   11698:	0104303a 	nor	r2,zero,r4
   1169c:	10c4703a 	and	r2,r2,r3
   116a0:	10001c1e 	bne	r2,zero,11714 <strcmp+0xb4>
   116a4:	4013883a 	mov	r9,r8
   116a8:	2811883a 	mov	r8,r5
   116ac:	00000106 	br	116b4 <strcmp+0x54>
   116b0:	1800181e 	bne	r3,zero,11714 <strcmp+0xb4>
   116b4:	39c00104 	addi	r7,r7,4
   116b8:	39000017 	ldw	r4,0(r7)
   116bc:	31800104 	addi	r6,r6,4
   116c0:	31400017 	ldw	r5,0(r6)
   116c4:	2245883a 	add	r2,r4,r9
   116c8:	1204703a 	and	r2,r2,r8
   116cc:	0106303a 	nor	r3,zero,r4
   116d0:	1886703a 	and	r3,r3,r2
   116d4:	217ff626 	beq	r4,r5,116b0 <strcmp+0x50>
   116d8:	3809883a 	mov	r4,r7
   116dc:	300b883a 	mov	r5,r6
   116e0:	20c00007 	ldb	r3,0(r4)
   116e4:	1800051e 	bne	r3,zero,116fc <strcmp+0x9c>
   116e8:	00000606 	br	11704 <strcmp+0xa4>
   116ec:	21000044 	addi	r4,r4,1
   116f0:	20c00007 	ldb	r3,0(r4)
   116f4:	29400044 	addi	r5,r5,1
   116f8:	18000226 	beq	r3,zero,11704 <strcmp+0xa4>
   116fc:	28800007 	ldb	r2,0(r5)
   11700:	18bffa26 	beq	r3,r2,116ec <strcmp+0x8c>
   11704:	20c00003 	ldbu	r3,0(r4)
   11708:	28800003 	ldbu	r2,0(r5)
   1170c:	1885c83a 	sub	r2,r3,r2
   11710:	f800283a 	ret
   11714:	0005883a 	mov	r2,zero
   11718:	f800283a 	ret

0001171c <__swbuf_r>:
   1171c:	defffc04 	addi	sp,sp,-16
   11720:	dc400215 	stw	r17,8(sp)
   11724:	dc000115 	stw	r16,4(sp)
   11728:	dfc00315 	stw	ra,12(sp)
   1172c:	2023883a 	mov	r17,r4
   11730:	2821883a 	mov	r16,r5
   11734:	20000226 	beq	r4,zero,11740 <__swbuf_r+0x24>
   11738:	20800e17 	ldw	r2,56(r4)
   1173c:	10002f26 	beq	r2,zero,117fc <__swbuf_r+0xe0>
   11740:	3080030b 	ldhu	r2,12(r6)
   11744:	30c00617 	ldw	r3,24(r6)
   11748:	1080020c 	andi	r2,r2,8
   1174c:	30c00215 	stw	r3,8(r6)
   11750:	10002226 	beq	r2,zero,117dc <__swbuf_r+0xc0>
   11754:	30c00417 	ldw	r3,16(r6)
   11758:	18002026 	beq	r3,zero,117dc <__swbuf_r+0xc0>
   1175c:	31000017 	ldw	r4,0(r6)
   11760:	30800517 	ldw	r2,20(r6)
   11764:	20c7c83a 	sub	r3,r4,r3
   11768:	18802f0e 	bge	r3,r2,11828 <__swbuf_r+0x10c>
   1176c:	19400044 	addi	r5,r3,1
   11770:	30800217 	ldw	r2,8(r6)
   11774:	84003fcc 	andi	r16,r16,255
   11778:	20c00044 	addi	r3,r4,1
   1177c:	10bfffc4 	addi	r2,r2,-1
   11780:	30800215 	stw	r2,8(r6)
   11784:	24000005 	stb	r16,0(r4)
   11788:	30800517 	ldw	r2,20(r6)
   1178c:	30c00015 	stw	r3,0(r6)
   11790:	11400c26 	beq	r2,r5,117c4 <__swbuf_r+0xa8>
   11794:	3080030b 	ldhu	r2,12(r6)
   11798:	1080004c 	andi	r2,r2,1
   1179c:	1005003a 	cmpeq	r2,r2,zero
   117a0:	10000626 	beq	r2,zero,117bc <__swbuf_r+0xa0>
   117a4:	8005883a 	mov	r2,r16
   117a8:	dfc00317 	ldw	ra,12(sp)
   117ac:	dc400217 	ldw	r17,8(sp)
   117b0:	dc000117 	ldw	r16,4(sp)
   117b4:	dec00404 	addi	sp,sp,16
   117b8:	f800283a 	ret
   117bc:	00800284 	movi	r2,10
   117c0:	80bff81e 	bne	r16,r2,117a4 <__swbuf_r+0x88>
   117c4:	8809883a 	mov	r4,r17
   117c8:	300b883a 	mov	r5,r6
   117cc:	000d6300 	call	d630 <_fflush_r>
   117d0:	103ff426 	beq	r2,zero,117a4 <__swbuf_r+0x88>
   117d4:	043fffc4 	movi	r16,-1
   117d8:	003ff206 	br	117a4 <__swbuf_r+0x88>
   117dc:	300b883a 	mov	r5,r6
   117e0:	8809883a 	mov	r4,r17
   117e4:	d9800015 	stw	r6,0(sp)
   117e8:	000bd280 	call	bd28 <__swsetup_r>
   117ec:	d9800017 	ldw	r6,0(sp)
   117f0:	1000061e 	bne	r2,zero,1180c <__swbuf_r+0xf0>
   117f4:	30c00417 	ldw	r3,16(r6)
   117f8:	003fd806 	br	1175c <__swbuf_r+0x40>
   117fc:	d9800015 	stw	r6,0(sp)
   11800:	000d8c80 	call	d8c8 <__sinit>
   11804:	d9800017 	ldw	r6,0(sp)
   11808:	003fcd06 	br	11740 <__swbuf_r+0x24>
   1180c:	3080030b 	ldhu	r2,12(r6)
   11810:	00c00244 	movi	r3,9
   11814:	043fffc4 	movi	r16,-1
   11818:	10801014 	ori	r2,r2,64
   1181c:	3080030d 	sth	r2,12(r6)
   11820:	88c00015 	stw	r3,0(r17)
   11824:	003fdf06 	br	117a4 <__swbuf_r+0x88>
   11828:	300b883a 	mov	r5,r6
   1182c:	8809883a 	mov	r4,r17
   11830:	d9800015 	stw	r6,0(sp)
   11834:	000d6300 	call	d630 <_fflush_r>
   11838:	d9800017 	ldw	r6,0(sp)
   1183c:	103fe51e 	bne	r2,zero,117d4 <__swbuf_r+0xb8>
   11840:	31000017 	ldw	r4,0(r6)
   11844:	01400044 	movi	r5,1
   11848:	003fc906 	br	11770 <__swbuf_r+0x54>

0001184c <__swbuf>:
   1184c:	01820034 	movhi	r6,2048
   11850:	318a3b04 	addi	r6,r6,10476
   11854:	2007883a 	mov	r3,r4
   11858:	31000017 	ldw	r4,0(r6)
   1185c:	280d883a 	mov	r6,r5
   11860:	180b883a 	mov	r5,r3
   11864:	001171c1 	jmpi	1171c <__swbuf_r>

00011868 <_write_r>:
   11868:	defffd04 	addi	sp,sp,-12
   1186c:	dc000015 	stw	r16,0(sp)
   11870:	04020034 	movhi	r16,2048
   11874:	840a8704 	addi	r16,r16,10780
   11878:	dc400115 	stw	r17,4(sp)
   1187c:	80000015 	stw	zero,0(r16)
   11880:	2023883a 	mov	r17,r4
   11884:	2809883a 	mov	r4,r5
   11888:	300b883a 	mov	r5,r6
   1188c:	380d883a 	mov	r6,r7
   11890:	dfc00215 	stw	ra,8(sp)
   11894:	0013af00 	call	13af0 <write>
   11898:	1007883a 	mov	r3,r2
   1189c:	00bfffc4 	movi	r2,-1
   118a0:	18800626 	beq	r3,r2,118bc <_write_r+0x54>
   118a4:	1805883a 	mov	r2,r3
   118a8:	dfc00217 	ldw	ra,8(sp)
   118ac:	dc400117 	ldw	r17,4(sp)
   118b0:	dc000017 	ldw	r16,0(sp)
   118b4:	dec00304 	addi	sp,sp,12
   118b8:	f800283a 	ret
   118bc:	80800017 	ldw	r2,0(r16)
   118c0:	103ff826 	beq	r2,zero,118a4 <_write_r+0x3c>
   118c4:	88800015 	stw	r2,0(r17)
   118c8:	1805883a 	mov	r2,r3
   118cc:	dfc00217 	ldw	ra,8(sp)
   118d0:	dc400117 	ldw	r17,4(sp)
   118d4:	dc000017 	ldw	r16,0(sp)
   118d8:	dec00304 	addi	sp,sp,12
   118dc:	f800283a 	ret

000118e0 <_calloc_r>:
   118e0:	298b383a 	mul	r5,r5,r6
   118e4:	defffe04 	addi	sp,sp,-8
   118e8:	dc000015 	stw	r16,0(sp)
   118ec:	dfc00115 	stw	ra,4(sp)
   118f0:	000f35c0 	call	f35c <_malloc_r>
   118f4:	1021883a 	mov	r16,r2
   118f8:	01c00904 	movi	r7,36
   118fc:	10000d26 	beq	r2,zero,11934 <_calloc_r+0x54>
   11900:	10ffff17 	ldw	r3,-4(r2)
   11904:	1009883a 	mov	r4,r2
   11908:	00bfff04 	movi	r2,-4
   1190c:	1886703a 	and	r3,r3,r2
   11910:	1887883a 	add	r3,r3,r2
   11914:	180d883a 	mov	r6,r3
   11918:	000b883a 	mov	r5,zero
   1191c:	38c01736 	bltu	r7,r3,1197c <_calloc_r+0x9c>
   11920:	008004c4 	movi	r2,19
   11924:	10c00836 	bltu	r2,r3,11948 <_calloc_r+0x68>
   11928:	20000215 	stw	zero,8(r4)
   1192c:	20000015 	stw	zero,0(r4)
   11930:	20000115 	stw	zero,4(r4)
   11934:	8005883a 	mov	r2,r16
   11938:	dfc00117 	ldw	ra,4(sp)
   1193c:	dc000017 	ldw	r16,0(sp)
   11940:	dec00204 	addi	sp,sp,8
   11944:	f800283a 	ret
   11948:	008006c4 	movi	r2,27
   1194c:	80000015 	stw	zero,0(r16)
   11950:	80000115 	stw	zero,4(r16)
   11954:	81000204 	addi	r4,r16,8
   11958:	10fff32e 	bgeu	r2,r3,11928 <_calloc_r+0x48>
   1195c:	80000215 	stw	zero,8(r16)
   11960:	80000315 	stw	zero,12(r16)
   11964:	81000404 	addi	r4,r16,16
   11968:	19ffef1e 	bne	r3,r7,11928 <_calloc_r+0x48>
   1196c:	81000604 	addi	r4,r16,24
   11970:	80000415 	stw	zero,16(r16)
   11974:	80000515 	stw	zero,20(r16)
   11978:	003feb06 	br	11928 <_calloc_r+0x48>
   1197c:	00083b40 	call	83b4 <memset>
   11980:	8005883a 	mov	r2,r16
   11984:	dfc00117 	ldw	ra,4(sp)
   11988:	dc000017 	ldw	r16,0(sp)
   1198c:	dec00204 	addi	sp,sp,8
   11990:	f800283a 	ret

00011994 <_close_r>:
   11994:	defffd04 	addi	sp,sp,-12
   11998:	dc000015 	stw	r16,0(sp)
   1199c:	04020034 	movhi	r16,2048
   119a0:	840a8704 	addi	r16,r16,10780
   119a4:	dc400115 	stw	r17,4(sp)
   119a8:	80000015 	stw	zero,0(r16)
   119ac:	2023883a 	mov	r17,r4
   119b0:	2809883a 	mov	r4,r5
   119b4:	dfc00215 	stw	ra,8(sp)
   119b8:	001327c0 	call	1327c <close>
   119bc:	1007883a 	mov	r3,r2
   119c0:	00bfffc4 	movi	r2,-1
   119c4:	18800626 	beq	r3,r2,119e0 <_close_r+0x4c>
   119c8:	1805883a 	mov	r2,r3
   119cc:	dfc00217 	ldw	ra,8(sp)
   119d0:	dc400117 	ldw	r17,4(sp)
   119d4:	dc000017 	ldw	r16,0(sp)
   119d8:	dec00304 	addi	sp,sp,12
   119dc:	f800283a 	ret
   119e0:	80800017 	ldw	r2,0(r16)
   119e4:	103ff826 	beq	r2,zero,119c8 <_close_r+0x34>
   119e8:	88800015 	stw	r2,0(r17)
   119ec:	1805883a 	mov	r2,r3
   119f0:	dfc00217 	ldw	ra,8(sp)
   119f4:	dc400117 	ldw	r17,4(sp)
   119f8:	dc000017 	ldw	r16,0(sp)
   119fc:	dec00304 	addi	sp,sp,12
   11a00:	f800283a 	ret

00011a04 <_fclose_r>:
   11a04:	defffc04 	addi	sp,sp,-16
   11a08:	dc400115 	stw	r17,4(sp)
   11a0c:	dc000015 	stw	r16,0(sp)
   11a10:	dfc00315 	stw	ra,12(sp)
   11a14:	dc800215 	stw	r18,8(sp)
   11a18:	2821883a 	mov	r16,r5
   11a1c:	2023883a 	mov	r17,r4
   11a20:	28002926 	beq	r5,zero,11ac8 <_fclose_r+0xc4>
   11a24:	000d8b80 	call	d8b8 <__sfp_lock_acquire>
   11a28:	88000226 	beq	r17,zero,11a34 <_fclose_r+0x30>
   11a2c:	88800e17 	ldw	r2,56(r17)
   11a30:	10002d26 	beq	r2,zero,11ae8 <_fclose_r+0xe4>
   11a34:	8080030f 	ldh	r2,12(r16)
   11a38:	10002226 	beq	r2,zero,11ac4 <_fclose_r+0xc0>
   11a3c:	8809883a 	mov	r4,r17
   11a40:	800b883a 	mov	r5,r16
   11a44:	000d6300 	call	d630 <_fflush_r>
   11a48:	1025883a 	mov	r18,r2
   11a4c:	80800b17 	ldw	r2,44(r16)
   11a50:	10000426 	beq	r2,zero,11a64 <_fclose_r+0x60>
   11a54:	81400717 	ldw	r5,28(r16)
   11a58:	8809883a 	mov	r4,r17
   11a5c:	103ee83a 	callr	r2
   11a60:	10002a16 	blt	r2,zero,11b0c <_fclose_r+0x108>
   11a64:	8080030b 	ldhu	r2,12(r16)
   11a68:	1080200c 	andi	r2,r2,128
   11a6c:	1000231e 	bne	r2,zero,11afc <_fclose_r+0xf8>
   11a70:	81400c17 	ldw	r5,48(r16)
   11a74:	28000526 	beq	r5,zero,11a8c <_fclose_r+0x88>
   11a78:	80801004 	addi	r2,r16,64
   11a7c:	28800226 	beq	r5,r2,11a88 <_fclose_r+0x84>
   11a80:	8809883a 	mov	r4,r17
   11a84:	000dc4c0 	call	dc4c <_free_r>
   11a88:	80000c15 	stw	zero,48(r16)
   11a8c:	81401117 	ldw	r5,68(r16)
   11a90:	28000326 	beq	r5,zero,11aa0 <_fclose_r+0x9c>
   11a94:	8809883a 	mov	r4,r17
   11a98:	000dc4c0 	call	dc4c <_free_r>
   11a9c:	80001115 	stw	zero,68(r16)
   11aa0:	8000030d 	sth	zero,12(r16)
   11aa4:	000d8bc0 	call	d8bc <__sfp_lock_release>
   11aa8:	9005883a 	mov	r2,r18
   11aac:	dfc00317 	ldw	ra,12(sp)
   11ab0:	dc800217 	ldw	r18,8(sp)
   11ab4:	dc400117 	ldw	r17,4(sp)
   11ab8:	dc000017 	ldw	r16,0(sp)
   11abc:	dec00404 	addi	sp,sp,16
   11ac0:	f800283a 	ret
   11ac4:	000d8bc0 	call	d8bc <__sfp_lock_release>
   11ac8:	0025883a 	mov	r18,zero
   11acc:	9005883a 	mov	r2,r18
   11ad0:	dfc00317 	ldw	ra,12(sp)
   11ad4:	dc800217 	ldw	r18,8(sp)
   11ad8:	dc400117 	ldw	r17,4(sp)
   11adc:	dc000017 	ldw	r16,0(sp)
   11ae0:	dec00404 	addi	sp,sp,16
   11ae4:	f800283a 	ret
   11ae8:	8809883a 	mov	r4,r17
   11aec:	000d8c80 	call	d8c8 <__sinit>
   11af0:	8080030f 	ldh	r2,12(r16)
   11af4:	103fd11e 	bne	r2,zero,11a3c <_fclose_r+0x38>
   11af8:	003ff206 	br	11ac4 <_fclose_r+0xc0>
   11afc:	81400417 	ldw	r5,16(r16)
   11b00:	8809883a 	mov	r4,r17
   11b04:	000dc4c0 	call	dc4c <_free_r>
   11b08:	003fd906 	br	11a70 <_fclose_r+0x6c>
   11b0c:	04bfffc4 	movi	r18,-1
   11b10:	003fd406 	br	11a64 <_fclose_r+0x60>

00011b14 <fclose>:
   11b14:	00820034 	movhi	r2,2048
   11b18:	108a3b04 	addi	r2,r2,10476
   11b1c:	200b883a 	mov	r5,r4
   11b20:	11000017 	ldw	r4,0(r2)
   11b24:	0011a041 	jmpi	11a04 <_fclose_r>

00011b28 <_fstat_r>:
   11b28:	defffd04 	addi	sp,sp,-12
   11b2c:	dc000015 	stw	r16,0(sp)
   11b30:	04020034 	movhi	r16,2048
   11b34:	840a8704 	addi	r16,r16,10780
   11b38:	dc400115 	stw	r17,4(sp)
   11b3c:	80000015 	stw	zero,0(r16)
   11b40:	2023883a 	mov	r17,r4
   11b44:	2809883a 	mov	r4,r5
   11b48:	300b883a 	mov	r5,r6
   11b4c:	dfc00215 	stw	ra,8(sp)
   11b50:	00134040 	call	13404 <fstat>
   11b54:	1007883a 	mov	r3,r2
   11b58:	00bfffc4 	movi	r2,-1
   11b5c:	18800626 	beq	r3,r2,11b78 <_fstat_r+0x50>
   11b60:	1805883a 	mov	r2,r3
   11b64:	dfc00217 	ldw	ra,8(sp)
   11b68:	dc400117 	ldw	r17,4(sp)
   11b6c:	dc000017 	ldw	r16,0(sp)
   11b70:	dec00304 	addi	sp,sp,12
   11b74:	f800283a 	ret
   11b78:	80800017 	ldw	r2,0(r16)
   11b7c:	103ff826 	beq	r2,zero,11b60 <_fstat_r+0x38>
   11b80:	88800015 	stw	r2,0(r17)
   11b84:	1805883a 	mov	r2,r3
   11b88:	dfc00217 	ldw	ra,8(sp)
   11b8c:	dc400117 	ldw	r17,4(sp)
   11b90:	dc000017 	ldw	r16,0(sp)
   11b94:	dec00304 	addi	sp,sp,12
   11b98:	f800283a 	ret

00011b9c <_isatty_r>:
   11b9c:	defffd04 	addi	sp,sp,-12
   11ba0:	dc000015 	stw	r16,0(sp)
   11ba4:	04020034 	movhi	r16,2048
   11ba8:	840a8704 	addi	r16,r16,10780
   11bac:	dc400115 	stw	r17,4(sp)
   11bb0:	80000015 	stw	zero,0(r16)
   11bb4:	2023883a 	mov	r17,r4
   11bb8:	2809883a 	mov	r4,r5
   11bbc:	dfc00215 	stw	ra,8(sp)
   11bc0:	00135380 	call	13538 <isatty>
   11bc4:	1007883a 	mov	r3,r2
   11bc8:	00bfffc4 	movi	r2,-1
   11bcc:	18800626 	beq	r3,r2,11be8 <_isatty_r+0x4c>
   11bd0:	1805883a 	mov	r2,r3
   11bd4:	dfc00217 	ldw	ra,8(sp)
   11bd8:	dc400117 	ldw	r17,4(sp)
   11bdc:	dc000017 	ldw	r16,0(sp)
   11be0:	dec00304 	addi	sp,sp,12
   11be4:	f800283a 	ret
   11be8:	80800017 	ldw	r2,0(r16)
   11bec:	103ff826 	beq	r2,zero,11bd0 <_isatty_r+0x34>
   11bf0:	88800015 	stw	r2,0(r17)
   11bf4:	1805883a 	mov	r2,r3
   11bf8:	dfc00217 	ldw	ra,8(sp)
   11bfc:	dc400117 	ldw	r17,4(sp)
   11c00:	dc000017 	ldw	r16,0(sp)
   11c04:	dec00304 	addi	sp,sp,12
   11c08:	f800283a 	ret

00011c0c <_lseek_r>:
   11c0c:	defffd04 	addi	sp,sp,-12
   11c10:	dc000015 	stw	r16,0(sp)
   11c14:	04020034 	movhi	r16,2048
   11c18:	840a8704 	addi	r16,r16,10780
   11c1c:	dc400115 	stw	r17,4(sp)
   11c20:	80000015 	stw	zero,0(r16)
   11c24:	2023883a 	mov	r17,r4
   11c28:	2809883a 	mov	r4,r5
   11c2c:	300b883a 	mov	r5,r6
   11c30:	380d883a 	mov	r6,r7
   11c34:	dfc00215 	stw	ra,8(sp)
   11c38:	00136580 	call	13658 <lseek>
   11c3c:	1007883a 	mov	r3,r2
   11c40:	00bfffc4 	movi	r2,-1
   11c44:	18800626 	beq	r3,r2,11c60 <_lseek_r+0x54>
   11c48:	1805883a 	mov	r2,r3
   11c4c:	dfc00217 	ldw	ra,8(sp)
   11c50:	dc400117 	ldw	r17,4(sp)
   11c54:	dc000017 	ldw	r16,0(sp)
   11c58:	dec00304 	addi	sp,sp,12
   11c5c:	f800283a 	ret
   11c60:	80800017 	ldw	r2,0(r16)
   11c64:	103ff826 	beq	r2,zero,11c48 <_lseek_r+0x3c>
   11c68:	88800015 	stw	r2,0(r17)
   11c6c:	1805883a 	mov	r2,r3
   11c70:	dfc00217 	ldw	ra,8(sp)
   11c74:	dc400117 	ldw	r17,4(sp)
   11c78:	dc000017 	ldw	r16,0(sp)
   11c7c:	dec00304 	addi	sp,sp,12
   11c80:	f800283a 	ret

00011c84 <_read_r>:
   11c84:	defffd04 	addi	sp,sp,-12
   11c88:	dc000015 	stw	r16,0(sp)
   11c8c:	04020034 	movhi	r16,2048
   11c90:	840a8704 	addi	r16,r16,10780
   11c94:	dc400115 	stw	r17,4(sp)
   11c98:	80000015 	stw	zero,0(r16)
   11c9c:	2023883a 	mov	r17,r4
   11ca0:	2809883a 	mov	r4,r5
   11ca4:	300b883a 	mov	r5,r6
   11ca8:	380d883a 	mov	r6,r7
   11cac:	dfc00215 	stw	ra,8(sp)
   11cb0:	00138540 	call	13854 <read>
   11cb4:	1007883a 	mov	r3,r2
   11cb8:	00bfffc4 	movi	r2,-1
   11cbc:	18800626 	beq	r3,r2,11cd8 <_read_r+0x54>
   11cc0:	1805883a 	mov	r2,r3
   11cc4:	dfc00217 	ldw	ra,8(sp)
   11cc8:	dc400117 	ldw	r17,4(sp)
   11ccc:	dc000017 	ldw	r16,0(sp)
   11cd0:	dec00304 	addi	sp,sp,12
   11cd4:	f800283a 	ret
   11cd8:	80800017 	ldw	r2,0(r16)
   11cdc:	103ff826 	beq	r2,zero,11cc0 <_read_r+0x3c>
   11ce0:	88800015 	stw	r2,0(r17)
   11ce4:	1805883a 	mov	r2,r3
   11ce8:	dfc00217 	ldw	ra,8(sp)
   11cec:	dc400117 	ldw	r17,4(sp)
   11cf0:	dc000017 	ldw	r16,0(sp)
   11cf4:	dec00304 	addi	sp,sp,12
   11cf8:	f800283a 	ret

00011cfc <__fixunsdfsi>:
   11cfc:	defffb04 	addi	sp,sp,-20
   11d00:	dc400115 	stw	r17,4(sp)
   11d04:	dc000015 	stw	r16,0(sp)
   11d08:	04507834 	movhi	r17,16864
   11d0c:	0021883a 	mov	r16,zero
   11d10:	800d883a 	mov	r6,r16
   11d14:	880f883a 	mov	r7,r17
   11d18:	dcc00315 	stw	r19,12(sp)
   11d1c:	dc800215 	stw	r18,8(sp)
   11d20:	2827883a 	mov	r19,r5
   11d24:	2025883a 	mov	r18,r4
   11d28:	dfc00415 	stw	ra,16(sp)
   11d2c:	00079940 	call	7994 <__gedf2>
   11d30:	000d883a 	mov	r6,zero
   11d34:	880f883a 	mov	r7,r17
   11d38:	980b883a 	mov	r5,r19
   11d3c:	9009883a 	mov	r4,r18
   11d40:	10000d16 	blt	r2,zero,11d78 <__fixunsdfsi+0x7c>
   11d44:	00071fc0 	call	71fc <__subdf3>
   11d48:	180b883a 	mov	r5,r3
   11d4c:	1009883a 	mov	r4,r2
   11d50:	0007b9c0 	call	7b9c <__fixdfsi>
   11d54:	00e00034 	movhi	r3,32768
   11d58:	10c5883a 	add	r2,r2,r3
   11d5c:	dfc00417 	ldw	ra,16(sp)
   11d60:	dcc00317 	ldw	r19,12(sp)
   11d64:	dc800217 	ldw	r18,8(sp)
   11d68:	dc400117 	ldw	r17,4(sp)
   11d6c:	dc000017 	ldw	r16,0(sp)
   11d70:	dec00504 	addi	sp,sp,20
   11d74:	f800283a 	ret
   11d78:	980b883a 	mov	r5,r19
   11d7c:	9009883a 	mov	r4,r18
   11d80:	0007b9c0 	call	7b9c <__fixdfsi>
   11d84:	dfc00417 	ldw	ra,16(sp)
   11d88:	dcc00317 	ldw	r19,12(sp)
   11d8c:	dc800217 	ldw	r18,8(sp)
   11d90:	dc400117 	ldw	r17,4(sp)
   11d94:	dc000017 	ldw	r16,0(sp)
   11d98:	dec00504 	addi	sp,sp,20
   11d9c:	f800283a 	ret

00011da0 <__udivdi3>:
   11da0:	defff004 	addi	sp,sp,-64
   11da4:	2005883a 	mov	r2,r4
   11da8:	3011883a 	mov	r8,r6
   11dac:	df000e15 	stw	fp,56(sp)
   11db0:	dd000a15 	stw	r20,40(sp)
   11db4:	dc000615 	stw	r16,24(sp)
   11db8:	dfc00f15 	stw	ra,60(sp)
   11dbc:	ddc00d15 	stw	r23,52(sp)
   11dc0:	dd800c15 	stw	r22,48(sp)
   11dc4:	dd400b15 	stw	r21,44(sp)
   11dc8:	dcc00915 	stw	r19,36(sp)
   11dcc:	dc800815 	stw	r18,32(sp)
   11dd0:	dc400715 	stw	r17,28(sp)
   11dd4:	4021883a 	mov	r16,r8
   11dd8:	1039883a 	mov	fp,r2
   11ddc:	2829883a 	mov	r20,r5
   11de0:	38003b1e 	bne	r7,zero,11ed0 <__udivdi3+0x130>
   11de4:	2a005c36 	bltu	r5,r8,11f58 <__udivdi3+0x1b8>
   11de8:	4000a626 	beq	r8,zero,12084 <__udivdi3+0x2e4>
   11dec:	00bfffd4 	movui	r2,65535
   11df0:	14009e36 	bltu	r2,r16,1206c <__udivdi3+0x2cc>
   11df4:	00803fc4 	movi	r2,255
   11df8:	14013d36 	bltu	r2,r16,122f0 <__udivdi3+0x550>
   11dfc:	000b883a 	mov	r5,zero
   11e00:	0005883a 	mov	r2,zero
   11e04:	8084d83a 	srl	r2,r16,r2
   11e08:	01020034 	movhi	r4,2048
   11e0c:	21010504 	addi	r4,r4,1044
   11e10:	01800804 	movi	r6,32
   11e14:	1105883a 	add	r2,r2,r4
   11e18:	10c00003 	ldbu	r3,0(r2)
   11e1c:	28c7883a 	add	r3,r5,r3
   11e20:	30edc83a 	sub	r22,r6,r3
   11e24:	b000ee1e 	bne	r22,zero,121e0 <__udivdi3+0x440>
   11e28:	802ad43a 	srli	r21,r16,16
   11e2c:	00800044 	movi	r2,1
   11e30:	a423c83a 	sub	r17,r20,r16
   11e34:	85ffffcc 	andi	r23,r16,65535
   11e38:	d8800315 	stw	r2,12(sp)
   11e3c:	8809883a 	mov	r4,r17
   11e40:	a80b883a 	mov	r5,r21
   11e44:	0012f700 	call	12f70 <__udivsi3>
   11e48:	8809883a 	mov	r4,r17
   11e4c:	a80b883a 	mov	r5,r21
   11e50:	102d883a 	mov	r22,r2
   11e54:	0012f780 	call	12f78 <__umodsi3>
   11e58:	1004943a 	slli	r2,r2,16
   11e5c:	e006d43a 	srli	r3,fp,16
   11e60:	bda3383a 	mul	r17,r23,r22
   11e64:	10c4b03a 	or	r2,r2,r3
   11e68:	1440042e 	bgeu	r2,r17,11e7c <__udivdi3+0xdc>
   11e6c:	1405883a 	add	r2,r2,r16
   11e70:	b5bfffc4 	addi	r22,r22,-1
   11e74:	14000136 	bltu	r2,r16,11e7c <__udivdi3+0xdc>
   11e78:	14413d36 	bltu	r2,r17,12370 <__udivdi3+0x5d0>
   11e7c:	1463c83a 	sub	r17,r2,r17
   11e80:	8809883a 	mov	r4,r17
   11e84:	a80b883a 	mov	r5,r21
   11e88:	0012f700 	call	12f70 <__udivsi3>
   11e8c:	8809883a 	mov	r4,r17
   11e90:	a80b883a 	mov	r5,r21
   11e94:	1029883a 	mov	r20,r2
   11e98:	0012f780 	call	12f78 <__umodsi3>
   11e9c:	1004943a 	slli	r2,r2,16
   11ea0:	bd09383a 	mul	r4,r23,r20
   11ea4:	e0ffffcc 	andi	r3,fp,65535
   11ea8:	10c4b03a 	or	r2,r2,r3
   11eac:	1100042e 	bgeu	r2,r4,11ec0 <__udivdi3+0x120>
   11eb0:	8085883a 	add	r2,r16,r2
   11eb4:	a53fffc4 	addi	r20,r20,-1
   11eb8:	14000136 	bltu	r2,r16,11ec0 <__udivdi3+0x120>
   11ebc:	11012036 	bltu	r2,r4,12340 <__udivdi3+0x5a0>
   11ec0:	b004943a 	slli	r2,r22,16
   11ec4:	d9000317 	ldw	r4,12(sp)
   11ec8:	a084b03a 	or	r2,r20,r2
   11ecc:	00001506 	br	11f24 <__udivdi3+0x184>
   11ed0:	380d883a 	mov	r6,r7
   11ed4:	29c06236 	bltu	r5,r7,12060 <__udivdi3+0x2c0>
   11ed8:	00bfffd4 	movui	r2,65535
   11edc:	11c05a36 	bltu	r2,r7,12048 <__udivdi3+0x2a8>
   11ee0:	00803fc4 	movi	r2,255
   11ee4:	11c0fc36 	bltu	r2,r7,122d8 <__udivdi3+0x538>
   11ee8:	000b883a 	mov	r5,zero
   11eec:	0005883a 	mov	r2,zero
   11ef0:	3084d83a 	srl	r2,r6,r2
   11ef4:	01020034 	movhi	r4,2048
   11ef8:	21010504 	addi	r4,r4,1044
   11efc:	01c00804 	movi	r7,32
   11f00:	1105883a 	add	r2,r2,r4
   11f04:	10c00003 	ldbu	r3,0(r2)
   11f08:	28c7883a 	add	r3,r5,r3
   11f0c:	38efc83a 	sub	r23,r7,r3
   11f10:	b800691e 	bne	r23,zero,120b8 <__udivdi3+0x318>
   11f14:	35000136 	bltu	r6,r20,11f1c <__udivdi3+0x17c>
   11f18:	e4005136 	bltu	fp,r16,12060 <__udivdi3+0x2c0>
   11f1c:	00800044 	movi	r2,1
   11f20:	0009883a 	mov	r4,zero
   11f24:	2007883a 	mov	r3,r4
   11f28:	dfc00f17 	ldw	ra,60(sp)
   11f2c:	df000e17 	ldw	fp,56(sp)
   11f30:	ddc00d17 	ldw	r23,52(sp)
   11f34:	dd800c17 	ldw	r22,48(sp)
   11f38:	dd400b17 	ldw	r21,44(sp)
   11f3c:	dd000a17 	ldw	r20,40(sp)
   11f40:	dcc00917 	ldw	r19,36(sp)
   11f44:	dc800817 	ldw	r18,32(sp)
   11f48:	dc400717 	ldw	r17,28(sp)
   11f4c:	dc000617 	ldw	r16,24(sp)
   11f50:	dec01004 	addi	sp,sp,64
   11f54:	f800283a 	ret
   11f58:	00bfffd4 	movui	r2,65535
   11f5c:	12005036 	bltu	r2,r8,120a0 <__udivdi3+0x300>
   11f60:	00803fc4 	movi	r2,255
   11f64:	1200e836 	bltu	r2,r8,12308 <__udivdi3+0x568>
   11f68:	000b883a 	mov	r5,zero
   11f6c:	0005883a 	mov	r2,zero
   11f70:	8084d83a 	srl	r2,r16,r2
   11f74:	01020034 	movhi	r4,2048
   11f78:	21010504 	addi	r4,r4,1044
   11f7c:	01800804 	movi	r6,32
   11f80:	1105883a 	add	r2,r2,r4
   11f84:	10c00003 	ldbu	r3,0(r2)
   11f88:	28c7883a 	add	r3,r5,r3
   11f8c:	30cbc83a 	sub	r5,r6,r3
   11f90:	28000626 	beq	r5,zero,11fac <__udivdi3+0x20c>
   11f94:	3145c83a 	sub	r2,r6,r5
   11f98:	e084d83a 	srl	r2,fp,r2
   11f9c:	a146983a 	sll	r3,r20,r5
   11fa0:	e178983a 	sll	fp,fp,r5
   11fa4:	8160983a 	sll	r16,r16,r5
   11fa8:	18a8b03a 	or	r20,r3,r2
   11fac:	802ad43a 	srli	r21,r16,16
   11fb0:	a009883a 	mov	r4,r20
   11fb4:	85ffffcc 	andi	r23,r16,65535
   11fb8:	a80b883a 	mov	r5,r21
   11fbc:	0012f700 	call	12f70 <__udivsi3>
   11fc0:	a009883a 	mov	r4,r20
   11fc4:	a80b883a 	mov	r5,r21
   11fc8:	102d883a 	mov	r22,r2
   11fcc:	0012f780 	call	12f78 <__umodsi3>
   11fd0:	1004943a 	slli	r2,r2,16
   11fd4:	e006d43a 	srli	r3,fp,16
   11fd8:	bda3383a 	mul	r17,r23,r22
   11fdc:	10c4b03a 	or	r2,r2,r3
   11fe0:	1440042e 	bgeu	r2,r17,11ff4 <__udivdi3+0x254>
   11fe4:	1405883a 	add	r2,r2,r16
   11fe8:	b5bfffc4 	addi	r22,r22,-1
   11fec:	14000136 	bltu	r2,r16,11ff4 <__udivdi3+0x254>
   11ff0:	1440d536 	bltu	r2,r17,12348 <__udivdi3+0x5a8>
   11ff4:	1463c83a 	sub	r17,r2,r17
   11ff8:	8809883a 	mov	r4,r17
   11ffc:	a80b883a 	mov	r5,r21
   12000:	0012f700 	call	12f70 <__udivsi3>
   12004:	8809883a 	mov	r4,r17
   12008:	a80b883a 	mov	r5,r21
   1200c:	1029883a 	mov	r20,r2
   12010:	0012f780 	call	12f78 <__umodsi3>
   12014:	1004943a 	slli	r2,r2,16
   12018:	bd09383a 	mul	r4,r23,r20
   1201c:	e0ffffcc 	andi	r3,fp,65535
   12020:	10c4b03a 	or	r2,r2,r3
   12024:	1100042e 	bgeu	r2,r4,12038 <__udivdi3+0x298>
   12028:	8085883a 	add	r2,r16,r2
   1202c:	a53fffc4 	addi	r20,r20,-1
   12030:	14000136 	bltu	r2,r16,12038 <__udivdi3+0x298>
   12034:	1100c736 	bltu	r2,r4,12354 <__udivdi3+0x5b4>
   12038:	b004943a 	slli	r2,r22,16
   1203c:	0009883a 	mov	r4,zero
   12040:	a084b03a 	or	r2,r20,r2
   12044:	003fb706 	br	11f24 <__udivdi3+0x184>
   12048:	00804034 	movhi	r2,256
   1204c:	10bfffc4 	addi	r2,r2,-1
   12050:	11c0a436 	bltu	r2,r7,122e4 <__udivdi3+0x544>
   12054:	01400404 	movi	r5,16
   12058:	2805883a 	mov	r2,r5
   1205c:	003fa406 	br	11ef0 <__udivdi3+0x150>
   12060:	0005883a 	mov	r2,zero
   12064:	0009883a 	mov	r4,zero
   12068:	003fae06 	br	11f24 <__udivdi3+0x184>
   1206c:	00804034 	movhi	r2,256
   12070:	10bfffc4 	addi	r2,r2,-1
   12074:	1400a136 	bltu	r2,r16,122fc <__udivdi3+0x55c>
   12078:	01400404 	movi	r5,16
   1207c:	2805883a 	mov	r2,r5
   12080:	003f6006 	br	11e04 <__udivdi3+0x64>
   12084:	01000044 	movi	r4,1
   12088:	000b883a 	mov	r5,zero
   1208c:	0012f700 	call	12f70 <__udivsi3>
   12090:	1021883a 	mov	r16,r2
   12094:	00bfffd4 	movui	r2,65535
   12098:	143ff436 	bltu	r2,r16,1206c <__udivdi3+0x2cc>
   1209c:	003f5506 	br	11df4 <__udivdi3+0x54>
   120a0:	00804034 	movhi	r2,256
   120a4:	10bfffc4 	addi	r2,r2,-1
   120a8:	12009a36 	bltu	r2,r8,12314 <__udivdi3+0x574>
   120ac:	01400404 	movi	r5,16
   120b0:	2805883a 	mov	r2,r5
   120b4:	003fae06 	br	11f70 <__udivdi3+0x1d0>
   120b8:	3dc5c83a 	sub	r2,r7,r23
   120bc:	35c8983a 	sll	r4,r6,r23
   120c0:	8086d83a 	srl	r3,r16,r2
   120c4:	a0a2d83a 	srl	r17,r20,r2
   120c8:	e084d83a 	srl	r2,fp,r2
   120cc:	20eab03a 	or	r21,r4,r3
   120d0:	a82cd43a 	srli	r22,r21,16
   120d4:	a5c6983a 	sll	r3,r20,r23
   120d8:	8809883a 	mov	r4,r17
   120dc:	b00b883a 	mov	r5,r22
   120e0:	1886b03a 	or	r3,r3,r2
   120e4:	d8c00215 	stw	r3,8(sp)
   120e8:	0012f700 	call	12f70 <__udivsi3>
   120ec:	8809883a 	mov	r4,r17
   120f0:	b00b883a 	mov	r5,r22
   120f4:	1029883a 	mov	r20,r2
   120f8:	0012f780 	call	12f78 <__umodsi3>
   120fc:	a8ffffcc 	andi	r3,r21,65535
   12100:	d8c00515 	stw	r3,20(sp)
   12104:	d9000217 	ldw	r4,8(sp)
   12108:	d9400517 	ldw	r5,20(sp)
   1210c:	1004943a 	slli	r2,r2,16
   12110:	2006d43a 	srli	r3,r4,16
   12114:	85e0983a 	sll	r16,r16,r23
   12118:	2d23383a 	mul	r17,r5,r20
   1211c:	10c4b03a 	or	r2,r2,r3
   12120:	dc000015 	stw	r16,0(sp)
   12124:	1440032e 	bgeu	r2,r17,12134 <__udivdi3+0x394>
   12128:	1545883a 	add	r2,r2,r21
   1212c:	a53fffc4 	addi	r20,r20,-1
   12130:	15407f2e 	bgeu	r2,r21,12330 <__udivdi3+0x590>
   12134:	1463c83a 	sub	r17,r2,r17
   12138:	8809883a 	mov	r4,r17
   1213c:	b00b883a 	mov	r5,r22
   12140:	0012f700 	call	12f70 <__udivsi3>
   12144:	8809883a 	mov	r4,r17
   12148:	b00b883a 	mov	r5,r22
   1214c:	1021883a 	mov	r16,r2
   12150:	0012f780 	call	12f78 <__umodsi3>
   12154:	d8c00517 	ldw	r3,20(sp)
   12158:	d9000217 	ldw	r4,8(sp)
   1215c:	1004943a 	slli	r2,r2,16
   12160:	1c0f383a 	mul	r7,r3,r16
   12164:	20ffffcc 	andi	r3,r4,65535
   12168:	10e2b03a 	or	r17,r2,r3
   1216c:	89c0032e 	bgeu	r17,r7,1217c <__udivdi3+0x3dc>
   12170:	8d63883a 	add	r17,r17,r21
   12174:	843fffc4 	addi	r16,r16,-1
   12178:	8d40692e 	bgeu	r17,r21,12320 <__udivdi3+0x580>
   1217c:	a008943a 	slli	r4,r20,16
   12180:	d9400017 	ldw	r5,0(sp)
   12184:	89e3c83a 	sub	r17,r17,r7
   12188:	8110b03a 	or	r8,r16,r4
   1218c:	280cd43a 	srli	r6,r5,16
   12190:	28ffffcc 	andi	r3,r5,65535
   12194:	40bfffcc 	andi	r2,r8,65535
   12198:	400ad43a 	srli	r5,r8,16
   1219c:	10d3383a 	mul	r9,r2,r3
   121a0:	1185383a 	mul	r2,r2,r6
   121a4:	28c7383a 	mul	r3,r5,r3
   121a8:	4808d43a 	srli	r4,r9,16
   121ac:	298b383a 	mul	r5,r5,r6
   121b0:	10c5883a 	add	r2,r2,r3
   121b4:	2089883a 	add	r4,r4,r2
   121b8:	20c0022e 	bgeu	r4,r3,121c4 <__udivdi3+0x424>
   121bc:	00800074 	movhi	r2,1
   121c0:	288b883a 	add	r5,r5,r2
   121c4:	2004d43a 	srli	r2,r4,16
   121c8:	288b883a 	add	r5,r5,r2
   121cc:	89403f36 	bltu	r17,r5,122cc <__udivdi3+0x52c>
   121d0:	89403926 	beq	r17,r5,122b8 <__udivdi3+0x518>
   121d4:	4005883a 	mov	r2,r8
   121d8:	0009883a 	mov	r4,zero
   121dc:	003f5106 	br	11f24 <__udivdi3+0x184>
   121e0:	85a0983a 	sll	r16,r16,r22
   121e4:	3585c83a 	sub	r2,r6,r22
   121e8:	a0a2d83a 	srl	r17,r20,r2
   121ec:	802ad43a 	srli	r21,r16,16
   121f0:	e084d83a 	srl	r2,fp,r2
   121f4:	a586983a 	sll	r3,r20,r22
   121f8:	8809883a 	mov	r4,r17
   121fc:	a80b883a 	mov	r5,r21
   12200:	1886b03a 	or	r3,r3,r2
   12204:	d8c00115 	stw	r3,4(sp)
   12208:	0012f700 	call	12f70 <__udivsi3>
   1220c:	8809883a 	mov	r4,r17
   12210:	a80b883a 	mov	r5,r21
   12214:	d8800415 	stw	r2,16(sp)
   12218:	0012f780 	call	12f78 <__umodsi3>
   1221c:	d9000117 	ldw	r4,4(sp)
   12220:	d9400417 	ldw	r5,16(sp)
   12224:	1004943a 	slli	r2,r2,16
   12228:	85ffffcc 	andi	r23,r16,65535
   1222c:	2006d43a 	srli	r3,r4,16
   12230:	b963383a 	mul	r17,r23,r5
   12234:	10c4b03a 	or	r2,r2,r3
   12238:	1440042e 	bgeu	r2,r17,1224c <__udivdi3+0x4ac>
   1223c:	297fffc4 	addi	r5,r5,-1
   12240:	1405883a 	add	r2,r2,r16
   12244:	d9400415 	stw	r5,16(sp)
   12248:	1400442e 	bgeu	r2,r16,1235c <__udivdi3+0x5bc>
   1224c:	1463c83a 	sub	r17,r2,r17
   12250:	8809883a 	mov	r4,r17
   12254:	a80b883a 	mov	r5,r21
   12258:	0012f700 	call	12f70 <__udivsi3>
   1225c:	8809883a 	mov	r4,r17
   12260:	a80b883a 	mov	r5,r21
   12264:	1029883a 	mov	r20,r2
   12268:	0012f780 	call	12f78 <__umodsi3>
   1226c:	d9400117 	ldw	r5,4(sp)
   12270:	1004943a 	slli	r2,r2,16
   12274:	bd09383a 	mul	r4,r23,r20
   12278:	28ffffcc 	andi	r3,r5,65535
   1227c:	10c6b03a 	or	r3,r2,r3
   12280:	1900062e 	bgeu	r3,r4,1229c <__udivdi3+0x4fc>
   12284:	1c07883a 	add	r3,r3,r16
   12288:	a53fffc4 	addi	r20,r20,-1
   1228c:	1c000336 	bltu	r3,r16,1229c <__udivdi3+0x4fc>
   12290:	1900022e 	bgeu	r3,r4,1229c <__udivdi3+0x4fc>
   12294:	a53fffc4 	addi	r20,r20,-1
   12298:	1c07883a 	add	r3,r3,r16
   1229c:	d9400417 	ldw	r5,16(sp)
   122a0:	e5b8983a 	sll	fp,fp,r22
   122a4:	1923c83a 	sub	r17,r3,r4
   122a8:	2804943a 	slli	r2,r5,16
   122ac:	a0a8b03a 	or	r20,r20,r2
   122b0:	dd000315 	stw	r20,12(sp)
   122b4:	003ee106 	br	11e3c <__udivdi3+0x9c>
   122b8:	2004943a 	slli	r2,r4,16
   122bc:	e5c8983a 	sll	r4,fp,r23
   122c0:	48ffffcc 	andi	r3,r9,65535
   122c4:	10c5883a 	add	r2,r2,r3
   122c8:	20bfc22e 	bgeu	r4,r2,121d4 <__udivdi3+0x434>
   122cc:	40bfffc4 	addi	r2,r8,-1
   122d0:	0009883a 	mov	r4,zero
   122d4:	003f1306 	br	11f24 <__udivdi3+0x184>
   122d8:	01400204 	movi	r5,8
   122dc:	2805883a 	mov	r2,r5
   122e0:	003f0306 	br	11ef0 <__udivdi3+0x150>
   122e4:	01400604 	movi	r5,24
   122e8:	2805883a 	mov	r2,r5
   122ec:	003f0006 	br	11ef0 <__udivdi3+0x150>
   122f0:	01400204 	movi	r5,8
   122f4:	2805883a 	mov	r2,r5
   122f8:	003ec206 	br	11e04 <__udivdi3+0x64>
   122fc:	01400604 	movi	r5,24
   12300:	2805883a 	mov	r2,r5
   12304:	003ebf06 	br	11e04 <__udivdi3+0x64>
   12308:	01400204 	movi	r5,8
   1230c:	2805883a 	mov	r2,r5
   12310:	003f1706 	br	11f70 <__udivdi3+0x1d0>
   12314:	01400604 	movi	r5,24
   12318:	2805883a 	mov	r2,r5
   1231c:	003f1406 	br	11f70 <__udivdi3+0x1d0>
   12320:	89ff962e 	bgeu	r17,r7,1217c <__udivdi3+0x3dc>
   12324:	8d63883a 	add	r17,r17,r21
   12328:	843fffc4 	addi	r16,r16,-1
   1232c:	003f9306 	br	1217c <__udivdi3+0x3dc>
   12330:	147f802e 	bgeu	r2,r17,12134 <__udivdi3+0x394>
   12334:	a53fffc4 	addi	r20,r20,-1
   12338:	1545883a 	add	r2,r2,r21
   1233c:	003f7d06 	br	12134 <__udivdi3+0x394>
   12340:	a53fffc4 	addi	r20,r20,-1
   12344:	003ede06 	br	11ec0 <__udivdi3+0x120>
   12348:	b5bfffc4 	addi	r22,r22,-1
   1234c:	1405883a 	add	r2,r2,r16
   12350:	003f2806 	br	11ff4 <__udivdi3+0x254>
   12354:	a53fffc4 	addi	r20,r20,-1
   12358:	003f3706 	br	12038 <__udivdi3+0x298>
   1235c:	147fbb2e 	bgeu	r2,r17,1224c <__udivdi3+0x4ac>
   12360:	297fffc4 	addi	r5,r5,-1
   12364:	1405883a 	add	r2,r2,r16
   12368:	d9400415 	stw	r5,16(sp)
   1236c:	003fb706 	br	1224c <__udivdi3+0x4ac>
   12370:	b5bfffc4 	addi	r22,r22,-1
   12374:	1405883a 	add	r2,r2,r16
   12378:	003ec006 	br	11e7c <__udivdi3+0xdc>

0001237c <__umoddi3>:
   1237c:	defff104 	addi	sp,sp,-60
   12380:	dd800b15 	stw	r22,44(sp)
   12384:	dd000915 	stw	r20,36(sp)
   12388:	dc000515 	stw	r16,20(sp)
   1238c:	dfc00e15 	stw	ra,56(sp)
   12390:	df000d15 	stw	fp,52(sp)
   12394:	ddc00c15 	stw	r23,48(sp)
   12398:	dd400a15 	stw	r21,40(sp)
   1239c:	dcc00815 	stw	r19,32(sp)
   123a0:	dc800715 	stw	r18,28(sp)
   123a4:	dc400615 	stw	r17,24(sp)
   123a8:	3021883a 	mov	r16,r6
   123ac:	202d883a 	mov	r22,r4
   123b0:	2829883a 	mov	r20,r5
   123b4:	38002b1e 	bne	r7,zero,12464 <__umoddi3+0xe8>
   123b8:	29805036 	bltu	r5,r6,124fc <__umoddi3+0x180>
   123bc:	30008a26 	beq	r6,zero,125e8 <__umoddi3+0x26c>
   123c0:	00bfffd4 	movui	r2,65535
   123c4:	14008236 	bltu	r2,r16,125d0 <__umoddi3+0x254>
   123c8:	00803fc4 	movi	r2,255
   123cc:	14013636 	bltu	r2,r16,128a8 <__umoddi3+0x52c>
   123d0:	000b883a 	mov	r5,zero
   123d4:	0005883a 	mov	r2,zero
   123d8:	8084d83a 	srl	r2,r16,r2
   123dc:	01020034 	movhi	r4,2048
   123e0:	21010504 	addi	r4,r4,1044
   123e4:	01800804 	movi	r6,32
   123e8:	1105883a 	add	r2,r2,r4
   123ec:	10c00003 	ldbu	r3,0(r2)
   123f0:	28c7883a 	add	r3,r5,r3
   123f4:	30efc83a 	sub	r23,r6,r3
   123f8:	b800941e 	bne	r23,zero,1264c <__umoddi3+0x2d0>
   123fc:	802ad43a 	srli	r21,r16,16
   12400:	a423c83a 	sub	r17,r20,r16
   12404:	0039883a 	mov	fp,zero
   12408:	853fffcc 	andi	r20,r16,65535
   1240c:	8809883a 	mov	r4,r17
   12410:	a80b883a 	mov	r5,r21
   12414:	0012f700 	call	12f70 <__udivsi3>
   12418:	8809883a 	mov	r4,r17
   1241c:	a80b883a 	mov	r5,r21
   12420:	a0a3383a 	mul	r17,r20,r2
   12424:	0012f780 	call	12f78 <__umodsi3>
   12428:	1004943a 	slli	r2,r2,16
   1242c:	b006d43a 	srli	r3,r22,16
   12430:	10c4b03a 	or	r2,r2,r3
   12434:	1440032e 	bgeu	r2,r17,12444 <__umoddi3+0xc8>
   12438:	1405883a 	add	r2,r2,r16
   1243c:	14000136 	bltu	r2,r16,12444 <__umoddi3+0xc8>
   12440:	14413536 	bltu	r2,r17,12918 <__umoddi3+0x59c>
   12444:	1463c83a 	sub	r17,r2,r17
   12448:	8809883a 	mov	r4,r17
   1244c:	a80b883a 	mov	r5,r21
   12450:	0012f700 	call	12f70 <__udivsi3>
   12454:	8809883a 	mov	r4,r17
   12458:	a0a3383a 	mul	r17,r20,r2
   1245c:	a80b883a 	mov	r5,r21
   12460:	00004d06 	br	12598 <__umoddi3+0x21c>
   12464:	380d883a 	mov	r6,r7
   12468:	29c0102e 	bgeu	r5,r7,124ac <__umoddi3+0x130>
   1246c:	2011883a 	mov	r8,r4
   12470:	2813883a 	mov	r9,r5
   12474:	4005883a 	mov	r2,r8
   12478:	4807883a 	mov	r3,r9
   1247c:	dfc00e17 	ldw	ra,56(sp)
   12480:	df000d17 	ldw	fp,52(sp)
   12484:	ddc00c17 	ldw	r23,48(sp)
   12488:	dd800b17 	ldw	r22,44(sp)
   1248c:	dd400a17 	ldw	r21,40(sp)
   12490:	dd000917 	ldw	r20,36(sp)
   12494:	dcc00817 	ldw	r19,32(sp)
   12498:	dc800717 	ldw	r18,28(sp)
   1249c:	dc400617 	ldw	r17,24(sp)
   124a0:	dc000517 	ldw	r16,20(sp)
   124a4:	dec00f04 	addi	sp,sp,60
   124a8:	f800283a 	ret
   124ac:	00bfffd4 	movui	r2,65535
   124b0:	11c05a36 	bltu	r2,r7,1261c <__umoddi3+0x2a0>
   124b4:	00803fc4 	movi	r2,255
   124b8:	11c0fe36 	bltu	r2,r7,128b4 <__umoddi3+0x538>
   124bc:	000b883a 	mov	r5,zero
   124c0:	0005883a 	mov	r2,zero
   124c4:	3084d83a 	srl	r2,r6,r2
   124c8:	01020034 	movhi	r4,2048
   124cc:	21010504 	addi	r4,r4,1044
   124d0:	01c00804 	movi	r7,32
   124d4:	1105883a 	add	r2,r2,r4
   124d8:	10c00003 	ldbu	r3,0(r2)
   124dc:	28c7883a 	add	r3,r5,r3
   124e0:	38ebc83a 	sub	r21,r7,r3
   124e4:	a800851e 	bne	r21,zero,126fc <__umoddi3+0x380>
   124e8:	35005236 	bltu	r6,r20,12634 <__umoddi3+0x2b8>
   124ec:	b400512e 	bgeu	r22,r16,12634 <__umoddi3+0x2b8>
   124f0:	b011883a 	mov	r8,r22
   124f4:	a013883a 	mov	r9,r20
   124f8:	003fde06 	br	12474 <__umoddi3+0xf8>
   124fc:	00bfffd4 	movui	r2,65535
   12500:	11804036 	bltu	r2,r6,12604 <__umoddi3+0x288>
   12504:	00803fc4 	movi	r2,255
   12508:	1180ed36 	bltu	r2,r6,128c0 <__umoddi3+0x544>
   1250c:	000b883a 	mov	r5,zero
   12510:	0005883a 	mov	r2,zero
   12514:	8084d83a 	srl	r2,r16,r2
   12518:	01020034 	movhi	r4,2048
   1251c:	21010504 	addi	r4,r4,1044
   12520:	01800804 	movi	r6,32
   12524:	1105883a 	add	r2,r2,r4
   12528:	10c00003 	ldbu	r3,0(r2)
   1252c:	28c7883a 	add	r3,r5,r3
   12530:	30c7c83a 	sub	r3,r6,r3
   12534:	1800bf1e 	bne	r3,zero,12834 <__umoddi3+0x4b8>
   12538:	0039883a 	mov	fp,zero
   1253c:	802ad43a 	srli	r21,r16,16
   12540:	a009883a 	mov	r4,r20
   12544:	85ffffcc 	andi	r23,r16,65535
   12548:	a80b883a 	mov	r5,r21
   1254c:	0012f700 	call	12f70 <__udivsi3>
   12550:	a009883a 	mov	r4,r20
   12554:	a80b883a 	mov	r5,r21
   12558:	b8a3383a 	mul	r17,r23,r2
   1255c:	0012f780 	call	12f78 <__umodsi3>
   12560:	1004943a 	slli	r2,r2,16
   12564:	b006d43a 	srli	r3,r22,16
   12568:	10c4b03a 	or	r2,r2,r3
   1256c:	1440032e 	bgeu	r2,r17,1257c <__umoddi3+0x200>
   12570:	1405883a 	add	r2,r2,r16
   12574:	14000136 	bltu	r2,r16,1257c <__umoddi3+0x200>
   12578:	1440e536 	bltu	r2,r17,12910 <__umoddi3+0x594>
   1257c:	1463c83a 	sub	r17,r2,r17
   12580:	8809883a 	mov	r4,r17
   12584:	a80b883a 	mov	r5,r21
   12588:	0012f700 	call	12f70 <__udivsi3>
   1258c:	8809883a 	mov	r4,r17
   12590:	b8a3383a 	mul	r17,r23,r2
   12594:	a80b883a 	mov	r5,r21
   12598:	0012f780 	call	12f78 <__umodsi3>
   1259c:	1004943a 	slli	r2,r2,16
   125a0:	b0ffffcc 	andi	r3,r22,65535
   125a4:	10c4b03a 	or	r2,r2,r3
   125a8:	1440042e 	bgeu	r2,r17,125bc <__umoddi3+0x240>
   125ac:	1405883a 	add	r2,r2,r16
   125b0:	14000236 	bltu	r2,r16,125bc <__umoddi3+0x240>
   125b4:	1440012e 	bgeu	r2,r17,125bc <__umoddi3+0x240>
   125b8:	1405883a 	add	r2,r2,r16
   125bc:	1445c83a 	sub	r2,r2,r17
   125c0:	1724d83a 	srl	r18,r2,fp
   125c4:	0013883a 	mov	r9,zero
   125c8:	9011883a 	mov	r8,r18
   125cc:	003fa906 	br	12474 <__umoddi3+0xf8>
   125d0:	00804034 	movhi	r2,256
   125d4:	10bfffc4 	addi	r2,r2,-1
   125d8:	1400b036 	bltu	r2,r16,1289c <__umoddi3+0x520>
   125dc:	01400404 	movi	r5,16
   125e0:	2805883a 	mov	r2,r5
   125e4:	003f7c06 	br	123d8 <__umoddi3+0x5c>
   125e8:	01000044 	movi	r4,1
   125ec:	000b883a 	mov	r5,zero
   125f0:	0012f700 	call	12f70 <__udivsi3>
   125f4:	1021883a 	mov	r16,r2
   125f8:	00bfffd4 	movui	r2,65535
   125fc:	143ff436 	bltu	r2,r16,125d0 <__umoddi3+0x254>
   12600:	003f7106 	br	123c8 <__umoddi3+0x4c>
   12604:	00804034 	movhi	r2,256
   12608:	10bfffc4 	addi	r2,r2,-1
   1260c:	1180af36 	bltu	r2,r6,128cc <__umoddi3+0x550>
   12610:	01400404 	movi	r5,16
   12614:	2805883a 	mov	r2,r5
   12618:	003fbe06 	br	12514 <__umoddi3+0x198>
   1261c:	00804034 	movhi	r2,256
   12620:	10bfffc4 	addi	r2,r2,-1
   12624:	11c0ac36 	bltu	r2,r7,128d8 <__umoddi3+0x55c>
   12628:	01400404 	movi	r5,16
   1262c:	2805883a 	mov	r2,r5
   12630:	003fa406 	br	124c4 <__umoddi3+0x148>
   12634:	b409c83a 	sub	r4,r22,r16
   12638:	b105803a 	cmpltu	r2,r22,r4
   1263c:	a187c83a 	sub	r3,r20,r6
   12640:	18a9c83a 	sub	r20,r3,r2
   12644:	202d883a 	mov	r22,r4
   12648:	003fa906 	br	124f0 <__umoddi3+0x174>
   1264c:	85e0983a 	sll	r16,r16,r23
   12650:	35c5c83a 	sub	r2,r6,r23
   12654:	a0a2d83a 	srl	r17,r20,r2
   12658:	802ad43a 	srli	r21,r16,16
   1265c:	b084d83a 	srl	r2,r22,r2
   12660:	a5c6983a 	sll	r3,r20,r23
   12664:	8809883a 	mov	r4,r17
   12668:	a80b883a 	mov	r5,r21
   1266c:	1886b03a 	or	r3,r3,r2
   12670:	d8c00115 	stw	r3,4(sp)
   12674:	853fffcc 	andi	r20,r16,65535
   12678:	0012f700 	call	12f70 <__udivsi3>
   1267c:	8809883a 	mov	r4,r17
   12680:	a80b883a 	mov	r5,r21
   12684:	a0a3383a 	mul	r17,r20,r2
   12688:	0012f780 	call	12f78 <__umodsi3>
   1268c:	d9000117 	ldw	r4,4(sp)
   12690:	1004943a 	slli	r2,r2,16
   12694:	b839883a 	mov	fp,r23
   12698:	2006d43a 	srli	r3,r4,16
   1269c:	10c4b03a 	or	r2,r2,r3
   126a0:	1440022e 	bgeu	r2,r17,126ac <__umoddi3+0x330>
   126a4:	1405883a 	add	r2,r2,r16
   126a8:	1400962e 	bgeu	r2,r16,12904 <__umoddi3+0x588>
   126ac:	1463c83a 	sub	r17,r2,r17
   126b0:	8809883a 	mov	r4,r17
   126b4:	a80b883a 	mov	r5,r21
   126b8:	0012f700 	call	12f70 <__udivsi3>
   126bc:	8809883a 	mov	r4,r17
   126c0:	a80b883a 	mov	r5,r21
   126c4:	a0a3383a 	mul	r17,r20,r2
   126c8:	0012f780 	call	12f78 <__umodsi3>
   126cc:	d9400117 	ldw	r5,4(sp)
   126d0:	1004943a 	slli	r2,r2,16
   126d4:	28ffffcc 	andi	r3,r5,65535
   126d8:	10c4b03a 	or	r2,r2,r3
   126dc:	1440042e 	bgeu	r2,r17,126f0 <__umoddi3+0x374>
   126e0:	1405883a 	add	r2,r2,r16
   126e4:	14000236 	bltu	r2,r16,126f0 <__umoddi3+0x374>
   126e8:	1440012e 	bgeu	r2,r17,126f0 <__umoddi3+0x374>
   126ec:	1405883a 	add	r2,r2,r16
   126f0:	b5ec983a 	sll	r22,r22,r23
   126f4:	1463c83a 	sub	r17,r2,r17
   126f8:	003f4406 	br	1240c <__umoddi3+0x90>
   126fc:	3d4fc83a 	sub	r7,r7,r21
   12700:	3546983a 	sll	r3,r6,r21
   12704:	81c4d83a 	srl	r2,r16,r7
   12708:	a1e2d83a 	srl	r17,r20,r7
   1270c:	a54c983a 	sll	r6,r20,r21
   12710:	18aeb03a 	or	r23,r3,r2
   12714:	b828d43a 	srli	r20,r23,16
   12718:	b1c4d83a 	srl	r2,r22,r7
   1271c:	8809883a 	mov	r4,r17
   12720:	a00b883a 	mov	r5,r20
   12724:	308cb03a 	or	r6,r6,r2
   12728:	d9c00315 	stw	r7,12(sp)
   1272c:	d9800215 	stw	r6,8(sp)
   12730:	0012f700 	call	12f70 <__udivsi3>
   12734:	8809883a 	mov	r4,r17
   12738:	a00b883a 	mov	r5,r20
   1273c:	1039883a 	mov	fp,r2
   12740:	0012f780 	call	12f78 <__umodsi3>
   12744:	b8ffffcc 	andi	r3,r23,65535
   12748:	d8c00415 	stw	r3,16(sp)
   1274c:	d9000217 	ldw	r4,8(sp)
   12750:	d9400417 	ldw	r5,16(sp)
   12754:	1004943a 	slli	r2,r2,16
   12758:	2006d43a 	srli	r3,r4,16
   1275c:	8560983a 	sll	r16,r16,r21
   12760:	2f23383a 	mul	r17,r5,fp
   12764:	10c4b03a 	or	r2,r2,r3
   12768:	dc000015 	stw	r16,0(sp)
   1276c:	b56c983a 	sll	r22,r22,r21
   12770:	1440032e 	bgeu	r2,r17,12780 <__umoddi3+0x404>
   12774:	15c5883a 	add	r2,r2,r23
   12778:	e73fffc4 	addi	fp,fp,-1
   1277c:	15c05d2e 	bgeu	r2,r23,128f4 <__umoddi3+0x578>
   12780:	1463c83a 	sub	r17,r2,r17
   12784:	8809883a 	mov	r4,r17
   12788:	a00b883a 	mov	r5,r20
   1278c:	0012f700 	call	12f70 <__udivsi3>
   12790:	8809883a 	mov	r4,r17
   12794:	a00b883a 	mov	r5,r20
   12798:	1021883a 	mov	r16,r2
   1279c:	0012f780 	call	12f78 <__umodsi3>
   127a0:	d8c00417 	ldw	r3,16(sp)
   127a4:	d9000217 	ldw	r4,8(sp)
   127a8:	1004943a 	slli	r2,r2,16
   127ac:	1c23383a 	mul	r17,r3,r16
   127b0:	20ffffcc 	andi	r3,r4,65535
   127b4:	10ceb03a 	or	r7,r2,r3
   127b8:	3c40032e 	bgeu	r7,r17,127c8 <__umoddi3+0x44c>
   127bc:	3dcf883a 	add	r7,r7,r23
   127c0:	843fffc4 	addi	r16,r16,-1
   127c4:	3dc0472e 	bgeu	r7,r23,128e4 <__umoddi3+0x568>
   127c8:	e004943a 	slli	r2,fp,16
   127cc:	d9400017 	ldw	r5,0(sp)
   127d0:	3c4fc83a 	sub	r7,r7,r17
   127d4:	8084b03a 	or	r2,r16,r2
   127d8:	28ffffcc 	andi	r3,r5,65535
   127dc:	280cd43a 	srli	r6,r5,16
   127e0:	100ad43a 	srli	r5,r2,16
   127e4:	10bfffcc 	andi	r2,r2,65535
   127e8:	10d1383a 	mul	r8,r2,r3
   127ec:	28c7383a 	mul	r3,r5,r3
   127f0:	1185383a 	mul	r2,r2,r6
   127f4:	4008d43a 	srli	r4,r8,16
   127f8:	298b383a 	mul	r5,r5,r6
   127fc:	10c5883a 	add	r2,r2,r3
   12800:	2089883a 	add	r4,r4,r2
   12804:	20c0022e 	bgeu	r4,r3,12810 <__umoddi3+0x494>
   12808:	00800074 	movhi	r2,1
   1280c:	288b883a 	add	r5,r5,r2
   12810:	2004d43a 	srli	r2,r4,16
   12814:	2008943a 	slli	r4,r4,16
   12818:	40ffffcc 	andi	r3,r8,65535
   1281c:	288b883a 	add	r5,r5,r2
   12820:	20c9883a 	add	r4,r4,r3
   12824:	39400b36 	bltu	r7,r5,12854 <__umoddi3+0x4d8>
   12828:	39403d26 	beq	r7,r5,12920 <__umoddi3+0x5a4>
   1282c:	394bc83a 	sub	r5,r7,r5
   12830:	00000f06 	br	12870 <__umoddi3+0x4f4>
   12834:	30c5c83a 	sub	r2,r6,r3
   12838:	1839883a 	mov	fp,r3
   1283c:	b084d83a 	srl	r2,r22,r2
   12840:	a0c6983a 	sll	r3,r20,r3
   12844:	8720983a 	sll	r16,r16,fp
   12848:	b72c983a 	sll	r22,r22,fp
   1284c:	18a8b03a 	or	r20,r3,r2
   12850:	003f3a06 	br	1253c <__umoddi3+0x1c0>
   12854:	d8c00017 	ldw	r3,0(sp)
   12858:	20c5c83a 	sub	r2,r4,r3
   1285c:	2089803a 	cmpltu	r4,r4,r2
   12860:	2dc7c83a 	sub	r3,r5,r23
   12864:	1907c83a 	sub	r3,r3,r4
   12868:	38cbc83a 	sub	r5,r7,r3
   1286c:	1009883a 	mov	r4,r2
   12870:	b105c83a 	sub	r2,r22,r4
   12874:	b087803a 	cmpltu	r3,r22,r2
   12878:	28c7c83a 	sub	r3,r5,r3
   1287c:	d9400317 	ldw	r5,12(sp)
   12880:	1544d83a 	srl	r2,r2,r21
   12884:	1948983a 	sll	r4,r3,r5
   12888:	1d46d83a 	srl	r3,r3,r21
   1288c:	20a4b03a 	or	r18,r4,r2
   12890:	9011883a 	mov	r8,r18
   12894:	1813883a 	mov	r9,r3
   12898:	003ef606 	br	12474 <__umoddi3+0xf8>
   1289c:	01400604 	movi	r5,24
   128a0:	2805883a 	mov	r2,r5
   128a4:	003ecc06 	br	123d8 <__umoddi3+0x5c>
   128a8:	01400204 	movi	r5,8
   128ac:	2805883a 	mov	r2,r5
   128b0:	003ec906 	br	123d8 <__umoddi3+0x5c>
   128b4:	01400204 	movi	r5,8
   128b8:	2805883a 	mov	r2,r5
   128bc:	003f0106 	br	124c4 <__umoddi3+0x148>
   128c0:	01400204 	movi	r5,8
   128c4:	2805883a 	mov	r2,r5
   128c8:	003f1206 	br	12514 <__umoddi3+0x198>
   128cc:	01400604 	movi	r5,24
   128d0:	2805883a 	mov	r2,r5
   128d4:	003f0f06 	br	12514 <__umoddi3+0x198>
   128d8:	01400604 	movi	r5,24
   128dc:	2805883a 	mov	r2,r5
   128e0:	003ef806 	br	124c4 <__umoddi3+0x148>
   128e4:	3c7fb82e 	bgeu	r7,r17,127c8 <__umoddi3+0x44c>
   128e8:	843fffc4 	addi	r16,r16,-1
   128ec:	3dcf883a 	add	r7,r7,r23
   128f0:	003fb506 	br	127c8 <__umoddi3+0x44c>
   128f4:	147fa22e 	bgeu	r2,r17,12780 <__umoddi3+0x404>
   128f8:	e73fffc4 	addi	fp,fp,-1
   128fc:	15c5883a 	add	r2,r2,r23
   12900:	003f9f06 	br	12780 <__umoddi3+0x404>
   12904:	147f692e 	bgeu	r2,r17,126ac <__umoddi3+0x330>
   12908:	1405883a 	add	r2,r2,r16
   1290c:	003f6706 	br	126ac <__umoddi3+0x330>
   12910:	1405883a 	add	r2,r2,r16
   12914:	003f1906 	br	1257c <__umoddi3+0x200>
   12918:	1405883a 	add	r2,r2,r16
   1291c:	003ec906 	br	12444 <__umoddi3+0xc8>
   12920:	b13fcc36 	bltu	r22,r4,12854 <__umoddi3+0x4d8>
   12924:	000b883a 	mov	r5,zero
   12928:	003fd106 	br	12870 <__umoddi3+0x4f4>

0001292c <__nesf2>:
   1292c:	defff304 	addi	sp,sp,-52
   12930:	dc400b15 	stw	r17,44(sp)
   12934:	dc400204 	addi	r17,sp,8
   12938:	dc000a15 	stw	r16,40(sp)
   1293c:	d9000015 	stw	r4,0(sp)
   12940:	d9400115 	stw	r5,4(sp)
   12944:	d809883a 	mov	r4,sp
   12948:	880b883a 	mov	r5,r17
   1294c:	dc000604 	addi	r16,sp,24
   12950:	dfc00c15 	stw	ra,48(sp)
   12954:	0012f800 	call	12f80 <__unpack_f>
   12958:	d9000104 	addi	r4,sp,4
   1295c:	800b883a 	mov	r5,r16
   12960:	0012f800 	call	12f80 <__unpack_f>
   12964:	d8800217 	ldw	r2,8(sp)
   12968:	00c00044 	movi	r3,1
   1296c:	180d883a 	mov	r6,r3
   12970:	1880062e 	bgeu	r3,r2,1298c <__nesf2+0x60>
   12974:	d8800617 	ldw	r2,24(sp)
   12978:	8809883a 	mov	r4,r17
   1297c:	800b883a 	mov	r5,r16
   12980:	1880022e 	bgeu	r3,r2,1298c <__nesf2+0x60>
   12984:	00130480 	call	13048 <__fpcmp_parts_f>
   12988:	100d883a 	mov	r6,r2
   1298c:	3005883a 	mov	r2,r6
   12990:	dfc00c17 	ldw	ra,48(sp)
   12994:	dc400b17 	ldw	r17,44(sp)
   12998:	dc000a17 	ldw	r16,40(sp)
   1299c:	dec00d04 	addi	sp,sp,52
   129a0:	f800283a 	ret

000129a4 <__gtsf2>:
   129a4:	defff304 	addi	sp,sp,-52
   129a8:	dc400b15 	stw	r17,44(sp)
   129ac:	dc400204 	addi	r17,sp,8
   129b0:	dc000a15 	stw	r16,40(sp)
   129b4:	d9000015 	stw	r4,0(sp)
   129b8:	d9400115 	stw	r5,4(sp)
   129bc:	d809883a 	mov	r4,sp
   129c0:	880b883a 	mov	r5,r17
   129c4:	dc000604 	addi	r16,sp,24
   129c8:	dfc00c15 	stw	ra,48(sp)
   129cc:	0012f800 	call	12f80 <__unpack_f>
   129d0:	d9000104 	addi	r4,sp,4
   129d4:	800b883a 	mov	r5,r16
   129d8:	0012f800 	call	12f80 <__unpack_f>
   129dc:	d8800217 	ldw	r2,8(sp)
   129e0:	00c00044 	movi	r3,1
   129e4:	01bfffc4 	movi	r6,-1
   129e8:	1880062e 	bgeu	r3,r2,12a04 <__gtsf2+0x60>
   129ec:	d8800617 	ldw	r2,24(sp)
   129f0:	8809883a 	mov	r4,r17
   129f4:	800b883a 	mov	r5,r16
   129f8:	1880022e 	bgeu	r3,r2,12a04 <__gtsf2+0x60>
   129fc:	00130480 	call	13048 <__fpcmp_parts_f>
   12a00:	100d883a 	mov	r6,r2
   12a04:	3005883a 	mov	r2,r6
   12a08:	dfc00c17 	ldw	ra,48(sp)
   12a0c:	dc400b17 	ldw	r17,44(sp)
   12a10:	dc000a17 	ldw	r16,40(sp)
   12a14:	dec00d04 	addi	sp,sp,52
   12a18:	f800283a 	ret

00012a1c <__ltsf2>:
   12a1c:	defff304 	addi	sp,sp,-52
   12a20:	dc400b15 	stw	r17,44(sp)
   12a24:	dc400204 	addi	r17,sp,8
   12a28:	dc000a15 	stw	r16,40(sp)
   12a2c:	d9000015 	stw	r4,0(sp)
   12a30:	d9400115 	stw	r5,4(sp)
   12a34:	d809883a 	mov	r4,sp
   12a38:	880b883a 	mov	r5,r17
   12a3c:	dc000604 	addi	r16,sp,24
   12a40:	dfc00c15 	stw	ra,48(sp)
   12a44:	0012f800 	call	12f80 <__unpack_f>
   12a48:	d9000104 	addi	r4,sp,4
   12a4c:	800b883a 	mov	r5,r16
   12a50:	0012f800 	call	12f80 <__unpack_f>
   12a54:	d8800217 	ldw	r2,8(sp)
   12a58:	00c00044 	movi	r3,1
   12a5c:	180d883a 	mov	r6,r3
   12a60:	1880062e 	bgeu	r3,r2,12a7c <__ltsf2+0x60>
   12a64:	d8800617 	ldw	r2,24(sp)
   12a68:	8809883a 	mov	r4,r17
   12a6c:	800b883a 	mov	r5,r16
   12a70:	1880022e 	bgeu	r3,r2,12a7c <__ltsf2+0x60>
   12a74:	00130480 	call	13048 <__fpcmp_parts_f>
   12a78:	100d883a 	mov	r6,r2
   12a7c:	3005883a 	mov	r2,r6
   12a80:	dfc00c17 	ldw	ra,48(sp)
   12a84:	dc400b17 	ldw	r17,44(sp)
   12a88:	dc000a17 	ldw	r16,40(sp)
   12a8c:	dec00d04 	addi	sp,sp,52
   12a90:	f800283a 	ret

00012a94 <__eqdf2>:
   12a94:	deffef04 	addi	sp,sp,-68
   12a98:	dc400f15 	stw	r17,60(sp)
   12a9c:	dc400404 	addi	r17,sp,16
   12aa0:	2005883a 	mov	r2,r4
   12aa4:	2807883a 	mov	r3,r5
   12aa8:	dc000e15 	stw	r16,56(sp)
   12aac:	d809883a 	mov	r4,sp
   12ab0:	880b883a 	mov	r5,r17
   12ab4:	dc000904 	addi	r16,sp,36
   12ab8:	d8c00115 	stw	r3,4(sp)
   12abc:	d8800015 	stw	r2,0(sp)
   12ac0:	d9800215 	stw	r6,8(sp)
   12ac4:	dfc01015 	stw	ra,64(sp)
   12ac8:	d9c00315 	stw	r7,12(sp)
   12acc:	00080a00 	call	80a0 <__unpack_d>
   12ad0:	d9000204 	addi	r4,sp,8
   12ad4:	800b883a 	mov	r5,r16
   12ad8:	00080a00 	call	80a0 <__unpack_d>
   12adc:	d8800417 	ldw	r2,16(sp)
   12ae0:	00c00044 	movi	r3,1
   12ae4:	180d883a 	mov	r6,r3
   12ae8:	1880062e 	bgeu	r3,r2,12b04 <__eqdf2+0x70>
   12aec:	d8800917 	ldw	r2,36(sp)
   12af0:	8809883a 	mov	r4,r17
   12af4:	800b883a 	mov	r5,r16
   12af8:	1880022e 	bgeu	r3,r2,12b04 <__eqdf2+0x70>
   12afc:	00081d80 	call	81d8 <__fpcmp_parts_d>
   12b00:	100d883a 	mov	r6,r2
   12b04:	3005883a 	mov	r2,r6
   12b08:	dfc01017 	ldw	ra,64(sp)
   12b0c:	dc400f17 	ldw	r17,60(sp)
   12b10:	dc000e17 	ldw	r16,56(sp)
   12b14:	dec01104 	addi	sp,sp,68
   12b18:	f800283a 	ret

00012b1c <__nedf2>:
   12b1c:	deffef04 	addi	sp,sp,-68
   12b20:	dc400f15 	stw	r17,60(sp)
   12b24:	dc400404 	addi	r17,sp,16
   12b28:	2005883a 	mov	r2,r4
   12b2c:	2807883a 	mov	r3,r5
   12b30:	dc000e15 	stw	r16,56(sp)
   12b34:	d809883a 	mov	r4,sp
   12b38:	880b883a 	mov	r5,r17
   12b3c:	dc000904 	addi	r16,sp,36
   12b40:	d8c00115 	stw	r3,4(sp)
   12b44:	d8800015 	stw	r2,0(sp)
   12b48:	d9800215 	stw	r6,8(sp)
   12b4c:	dfc01015 	stw	ra,64(sp)
   12b50:	d9c00315 	stw	r7,12(sp)
   12b54:	00080a00 	call	80a0 <__unpack_d>
   12b58:	d9000204 	addi	r4,sp,8
   12b5c:	800b883a 	mov	r5,r16
   12b60:	00080a00 	call	80a0 <__unpack_d>
   12b64:	d8800417 	ldw	r2,16(sp)
   12b68:	00c00044 	movi	r3,1
   12b6c:	180d883a 	mov	r6,r3
   12b70:	1880062e 	bgeu	r3,r2,12b8c <__nedf2+0x70>
   12b74:	d8800917 	ldw	r2,36(sp)
   12b78:	8809883a 	mov	r4,r17
   12b7c:	800b883a 	mov	r5,r16
   12b80:	1880022e 	bgeu	r3,r2,12b8c <__nedf2+0x70>
   12b84:	00081d80 	call	81d8 <__fpcmp_parts_d>
   12b88:	100d883a 	mov	r6,r2
   12b8c:	3005883a 	mov	r2,r6
   12b90:	dfc01017 	ldw	ra,64(sp)
   12b94:	dc400f17 	ldw	r17,60(sp)
   12b98:	dc000e17 	ldw	r16,56(sp)
   12b9c:	dec01104 	addi	sp,sp,68
   12ba0:	f800283a 	ret

00012ba4 <__ltdf2>:
   12ba4:	deffef04 	addi	sp,sp,-68
   12ba8:	dc400f15 	stw	r17,60(sp)
   12bac:	dc400404 	addi	r17,sp,16
   12bb0:	2005883a 	mov	r2,r4
   12bb4:	2807883a 	mov	r3,r5
   12bb8:	dc000e15 	stw	r16,56(sp)
   12bbc:	d809883a 	mov	r4,sp
   12bc0:	880b883a 	mov	r5,r17
   12bc4:	dc000904 	addi	r16,sp,36
   12bc8:	d8c00115 	stw	r3,4(sp)
   12bcc:	d8800015 	stw	r2,0(sp)
   12bd0:	d9800215 	stw	r6,8(sp)
   12bd4:	dfc01015 	stw	ra,64(sp)
   12bd8:	d9c00315 	stw	r7,12(sp)
   12bdc:	00080a00 	call	80a0 <__unpack_d>
   12be0:	d9000204 	addi	r4,sp,8
   12be4:	800b883a 	mov	r5,r16
   12be8:	00080a00 	call	80a0 <__unpack_d>
   12bec:	d8800417 	ldw	r2,16(sp)
   12bf0:	00c00044 	movi	r3,1
   12bf4:	180d883a 	mov	r6,r3
   12bf8:	1880062e 	bgeu	r3,r2,12c14 <__ltdf2+0x70>
   12bfc:	d8800917 	ldw	r2,36(sp)
   12c00:	8809883a 	mov	r4,r17
   12c04:	800b883a 	mov	r5,r16
   12c08:	1880022e 	bgeu	r3,r2,12c14 <__ltdf2+0x70>
   12c0c:	00081d80 	call	81d8 <__fpcmp_parts_d>
   12c10:	100d883a 	mov	r6,r2
   12c14:	3005883a 	mov	r2,r6
   12c18:	dfc01017 	ldw	ra,64(sp)
   12c1c:	dc400f17 	ldw	r17,60(sp)
   12c20:	dc000e17 	ldw	r16,56(sp)
   12c24:	dec01104 	addi	sp,sp,68
   12c28:	f800283a 	ret

00012c2c <__truncdfsf2>:
   12c2c:	defff804 	addi	sp,sp,-32
   12c30:	2005883a 	mov	r2,r4
   12c34:	2807883a 	mov	r3,r5
   12c38:	d809883a 	mov	r4,sp
   12c3c:	d9400204 	addi	r5,sp,8
   12c40:	d8c00115 	stw	r3,4(sp)
   12c44:	d8800015 	stw	r2,0(sp)
   12c48:	dfc00715 	stw	ra,28(sp)
   12c4c:	00080a00 	call	80a0 <__unpack_d>
   12c50:	d9c00517 	ldw	r7,20(sp)
   12c54:	da000617 	ldw	r8,24(sp)
   12c58:	02d00034 	movhi	r11,16384
   12c5c:	5affffc4 	addi	r11,r11,-1
   12c60:	3812d7ba 	srli	r9,r7,30
   12c64:	401a90ba 	slli	r13,r8,2
   12c68:	3ac4703a 	and	r2,r7,r11
   12c6c:	0007883a 	mov	r3,zero
   12c70:	6a52b03a 	or	r9,r13,r9
   12c74:	10c4b03a 	or	r2,r2,r3
   12c78:	d9000217 	ldw	r4,8(sp)
   12c7c:	d9400317 	ldw	r5,12(sp)
   12c80:	d9800417 	ldw	r6,16(sp)
   12c84:	480f883a 	mov	r7,r9
   12c88:	10000126 	beq	r2,zero,12c90 <__truncdfsf2+0x64>
   12c8c:	49c00054 	ori	r7,r9,1
   12c90:	00130f00 	call	130f0 <__make_fp>
   12c94:	dfc00717 	ldw	ra,28(sp)
   12c98:	dec00804 	addi	sp,sp,32
   12c9c:	f800283a 	ret

00012ca0 <__floatunsidf>:
   12ca0:	defff204 	addi	sp,sp,-56
   12ca4:	dfc00d15 	stw	ra,52(sp)
   12ca8:	ddc00c15 	stw	r23,48(sp)
   12cac:	dd800b15 	stw	r22,44(sp)
   12cb0:	dd400a15 	stw	r21,40(sp)
   12cb4:	dd000915 	stw	r20,36(sp)
   12cb8:	dcc00815 	stw	r19,32(sp)
   12cbc:	dc800715 	stw	r18,28(sp)
   12cc0:	dc400615 	stw	r17,24(sp)
   12cc4:	dc000515 	stw	r16,20(sp)
   12cc8:	d8000115 	stw	zero,4(sp)
   12ccc:	20000f1e 	bne	r4,zero,12d0c <__floatunsidf+0x6c>
   12cd0:	00800084 	movi	r2,2
   12cd4:	d8800015 	stw	r2,0(sp)
   12cd8:	d809883a 	mov	r4,sp
   12cdc:	0007d8c0 	call	7d8c <__pack_d>
   12ce0:	dfc00d17 	ldw	ra,52(sp)
   12ce4:	ddc00c17 	ldw	r23,48(sp)
   12ce8:	dd800b17 	ldw	r22,44(sp)
   12cec:	dd400a17 	ldw	r21,40(sp)
   12cf0:	dd000917 	ldw	r20,36(sp)
   12cf4:	dcc00817 	ldw	r19,32(sp)
   12cf8:	dc800717 	ldw	r18,28(sp)
   12cfc:	dc400617 	ldw	r17,24(sp)
   12d00:	dc000517 	ldw	r16,20(sp)
   12d04:	dec00e04 	addi	sp,sp,56
   12d08:	f800283a 	ret
   12d0c:	008000c4 	movi	r2,3
   12d10:	00c00f04 	movi	r3,60
   12d14:	002f883a 	mov	r23,zero
   12d18:	202d883a 	mov	r22,r4
   12d1c:	d8800015 	stw	r2,0(sp)
   12d20:	d8c00215 	stw	r3,8(sp)
   12d24:	d9000315 	stw	r4,12(sp)
   12d28:	ddc00415 	stw	r23,16(sp)
   12d2c:	0007d0c0 	call	7d0c <__clzsi2>
   12d30:	12400744 	addi	r9,r2,29
   12d34:	48000b16 	blt	r9,zero,12d64 <__floatunsidf+0xc4>
   12d38:	483fe726 	beq	r9,zero,12cd8 <__floatunsidf+0x38>
   12d3c:	10bfff44 	addi	r2,r2,-3
   12d40:	10002e16 	blt	r2,zero,12dfc <__floatunsidf+0x15c>
   12d44:	b0a2983a 	sll	r17,r22,r2
   12d48:	0021883a 	mov	r16,zero
   12d4c:	d8800217 	ldw	r2,8(sp)
   12d50:	dc400415 	stw	r17,16(sp)
   12d54:	dc000315 	stw	r16,12(sp)
   12d58:	1245c83a 	sub	r2,r2,r9
   12d5c:	d8800215 	stw	r2,8(sp)
   12d60:	003fdd06 	br	12cd8 <__floatunsidf+0x38>
   12d64:	0255c83a 	sub	r10,zero,r9
   12d68:	51bff804 	addi	r6,r10,-32
   12d6c:	30001b16 	blt	r6,zero,12ddc <__floatunsidf+0x13c>
   12d70:	b9a8d83a 	srl	r20,r23,r6
   12d74:	002b883a 	mov	r21,zero
   12d78:	000f883a 	mov	r7,zero
   12d7c:	01000044 	movi	r4,1
   12d80:	0011883a 	mov	r8,zero
   12d84:	30002516 	blt	r6,zero,12e1c <__floatunsidf+0x17c>
   12d88:	21a6983a 	sll	r19,r4,r6
   12d8c:	0025883a 	mov	r18,zero
   12d90:	00bfffc4 	movi	r2,-1
   12d94:	9089883a 	add	r4,r18,r2
   12d98:	988b883a 	add	r5,r19,r2
   12d9c:	248d803a 	cmpltu	r6,r4,r18
   12da0:	314b883a 	add	r5,r6,r5
   12da4:	b104703a 	and	r2,r22,r4
   12da8:	b946703a 	and	r3,r23,r5
   12dac:	10c4b03a 	or	r2,r2,r3
   12db0:	10000226 	beq	r2,zero,12dbc <__floatunsidf+0x11c>
   12db4:	01c00044 	movi	r7,1
   12db8:	0011883a 	mov	r8,zero
   12dbc:	d9000217 	ldw	r4,8(sp)
   12dc0:	a1c4b03a 	or	r2,r20,r7
   12dc4:	aa06b03a 	or	r3,r21,r8
   12dc8:	2249c83a 	sub	r4,r4,r9
   12dcc:	d8c00415 	stw	r3,16(sp)
   12dd0:	d9000215 	stw	r4,8(sp)
   12dd4:	d8800315 	stw	r2,12(sp)
   12dd8:	003fbf06 	br	12cd8 <__floatunsidf+0x38>
   12ddc:	bdc7883a 	add	r3,r23,r23
   12de0:	008007c4 	movi	r2,31
   12de4:	1285c83a 	sub	r2,r2,r10
   12de8:	1886983a 	sll	r3,r3,r2
   12dec:	b2a8d83a 	srl	r20,r22,r10
   12df0:	baaad83a 	srl	r21,r23,r10
   12df4:	1d28b03a 	or	r20,r3,r20
   12df8:	003fdf06 	br	12d78 <__floatunsidf+0xd8>
   12dfc:	b006d07a 	srli	r3,r22,1
   12e00:	008007c4 	movi	r2,31
   12e04:	1245c83a 	sub	r2,r2,r9
   12e08:	1886d83a 	srl	r3,r3,r2
   12e0c:	ba62983a 	sll	r17,r23,r9
   12e10:	b260983a 	sll	r16,r22,r9
   12e14:	1c62b03a 	or	r17,r3,r17
   12e18:	003fcc06 	br	12d4c <__floatunsidf+0xac>
   12e1c:	2006d07a 	srli	r3,r4,1
   12e20:	008007c4 	movi	r2,31
   12e24:	1285c83a 	sub	r2,r2,r10
   12e28:	18a6d83a 	srl	r19,r3,r2
   12e2c:	22a4983a 	sll	r18,r4,r10
   12e30:	003fd706 	br	12d90 <__floatunsidf+0xf0>

00012e34 <udivmodsi4>:
   12e34:	29001b2e 	bgeu	r5,r4,12ea4 <udivmodsi4+0x70>
   12e38:	28001a16 	blt	r5,zero,12ea4 <udivmodsi4+0x70>
   12e3c:	00800044 	movi	r2,1
   12e40:	0007883a 	mov	r3,zero
   12e44:	01c007c4 	movi	r7,31
   12e48:	00000306 	br	12e58 <udivmodsi4+0x24>
   12e4c:	19c01326 	beq	r3,r7,12e9c <udivmodsi4+0x68>
   12e50:	18c00044 	addi	r3,r3,1
   12e54:	28000416 	blt	r5,zero,12e68 <udivmodsi4+0x34>
   12e58:	294b883a 	add	r5,r5,r5
   12e5c:	1085883a 	add	r2,r2,r2
   12e60:	293ffa36 	bltu	r5,r4,12e4c <udivmodsi4+0x18>
   12e64:	10000d26 	beq	r2,zero,12e9c <udivmodsi4+0x68>
   12e68:	0007883a 	mov	r3,zero
   12e6c:	21400236 	bltu	r4,r5,12e78 <udivmodsi4+0x44>
   12e70:	2149c83a 	sub	r4,r4,r5
   12e74:	1886b03a 	or	r3,r3,r2
   12e78:	1004d07a 	srli	r2,r2,1
   12e7c:	280ad07a 	srli	r5,r5,1
   12e80:	103ffa1e 	bne	r2,zero,12e6c <udivmodsi4+0x38>
   12e84:	30000226 	beq	r6,zero,12e90 <udivmodsi4+0x5c>
   12e88:	2005883a 	mov	r2,r4
   12e8c:	f800283a 	ret
   12e90:	1809883a 	mov	r4,r3
   12e94:	2005883a 	mov	r2,r4
   12e98:	f800283a 	ret
   12e9c:	0007883a 	mov	r3,zero
   12ea0:	003ff806 	br	12e84 <udivmodsi4+0x50>
   12ea4:	00800044 	movi	r2,1
   12ea8:	0007883a 	mov	r3,zero
   12eac:	003fef06 	br	12e6c <udivmodsi4+0x38>

00012eb0 <__divsi3>:
   12eb0:	defffe04 	addi	sp,sp,-8
   12eb4:	dc000015 	stw	r16,0(sp)
   12eb8:	dfc00115 	stw	ra,4(sp)
   12ebc:	0021883a 	mov	r16,zero
   12ec0:	20000c16 	blt	r4,zero,12ef4 <__divsi3+0x44>
   12ec4:	000d883a 	mov	r6,zero
   12ec8:	28000e16 	blt	r5,zero,12f04 <__divsi3+0x54>
   12ecc:	0012e340 	call	12e34 <udivmodsi4>
   12ed0:	1007883a 	mov	r3,r2
   12ed4:	8005003a 	cmpeq	r2,r16,zero
   12ed8:	1000011e 	bne	r2,zero,12ee0 <__divsi3+0x30>
   12edc:	00c7c83a 	sub	r3,zero,r3
   12ee0:	1805883a 	mov	r2,r3
   12ee4:	dfc00117 	ldw	ra,4(sp)
   12ee8:	dc000017 	ldw	r16,0(sp)
   12eec:	dec00204 	addi	sp,sp,8
   12ef0:	f800283a 	ret
   12ef4:	0109c83a 	sub	r4,zero,r4
   12ef8:	04000044 	movi	r16,1
   12efc:	000d883a 	mov	r6,zero
   12f00:	283ff20e 	bge	r5,zero,12ecc <__divsi3+0x1c>
   12f04:	014bc83a 	sub	r5,zero,r5
   12f08:	8021003a 	cmpeq	r16,r16,zero
   12f0c:	003fef06 	br	12ecc <__divsi3+0x1c>

00012f10 <__modsi3>:
   12f10:	deffff04 	addi	sp,sp,-4
   12f14:	dfc00015 	stw	ra,0(sp)
   12f18:	01800044 	movi	r6,1
   12f1c:	2807883a 	mov	r3,r5
   12f20:	20000416 	blt	r4,zero,12f34 <__modsi3+0x24>
   12f24:	28000c16 	blt	r5,zero,12f58 <__modsi3+0x48>
   12f28:	dfc00017 	ldw	ra,0(sp)
   12f2c:	dec00104 	addi	sp,sp,4
   12f30:	0012e341 	jmpi	12e34 <udivmodsi4>
   12f34:	0109c83a 	sub	r4,zero,r4
   12f38:	28000b16 	blt	r5,zero,12f68 <__modsi3+0x58>
   12f3c:	180b883a 	mov	r5,r3
   12f40:	01800044 	movi	r6,1
   12f44:	0012e340 	call	12e34 <udivmodsi4>
   12f48:	0085c83a 	sub	r2,zero,r2
   12f4c:	dfc00017 	ldw	ra,0(sp)
   12f50:	dec00104 	addi	sp,sp,4
   12f54:	f800283a 	ret
   12f58:	014bc83a 	sub	r5,zero,r5
   12f5c:	dfc00017 	ldw	ra,0(sp)
   12f60:	dec00104 	addi	sp,sp,4
   12f64:	0012e341 	jmpi	12e34 <udivmodsi4>
   12f68:	0147c83a 	sub	r3,zero,r5
   12f6c:	003ff306 	br	12f3c <__modsi3+0x2c>

00012f70 <__udivsi3>:
   12f70:	000d883a 	mov	r6,zero
   12f74:	0012e341 	jmpi	12e34 <udivmodsi4>

00012f78 <__umodsi3>:
   12f78:	01800044 	movi	r6,1
   12f7c:	0012e341 	jmpi	12e34 <udivmodsi4>

00012f80 <__unpack_f>:
   12f80:	21800017 	ldw	r6,0(r4)
   12f84:	00c02034 	movhi	r3,128
   12f88:	18ffffc4 	addi	r3,r3,-1
   12f8c:	3004d5fa 	srli	r2,r6,23
   12f90:	3008d7fa 	srli	r4,r6,31
   12f94:	30ce703a 	and	r7,r6,r3
   12f98:	10c03fcc 	andi	r3,r2,255
   12f9c:	29000115 	stw	r4,4(r5)
   12fa0:	1800131e 	bne	r3,zero,12ff0 <__unpack_f+0x70>
   12fa4:	38000f26 	beq	r7,zero,12fe4 <__unpack_f+0x64>
   12fa8:	380691fa 	slli	r3,r7,7
   12fac:	01bfe084 	movi	r6,-126
   12fb0:	008000c4 	movi	r2,3
   12fb4:	01100034 	movhi	r4,16384
   12fb8:	213fffc4 	addi	r4,r4,-1
   12fbc:	28800015 	stw	r2,0(r5)
   12fc0:	29800215 	stw	r6,8(r5)
   12fc4:	20c00536 	bltu	r4,r3,12fdc <__unpack_f+0x5c>
   12fc8:	3005883a 	mov	r2,r6
   12fcc:	18c7883a 	add	r3,r3,r3
   12fd0:	10bfffc4 	addi	r2,r2,-1
   12fd4:	20fffd2e 	bgeu	r4,r3,12fcc <__unpack_f+0x4c>
   12fd8:	28800215 	stw	r2,8(r5)
   12fdc:	28c00315 	stw	r3,12(r5)
   12fe0:	f800283a 	ret
   12fe4:	00800084 	movi	r2,2
   12fe8:	28800015 	stw	r2,0(r5)
   12fec:	f800283a 	ret
   12ff0:	00803fc4 	movi	r2,255
   12ff4:	18800826 	beq	r3,r2,13018 <__unpack_f+0x98>
   12ff8:	380491fa 	slli	r2,r7,7
   12ffc:	18ffe044 	addi	r3,r3,-127
   13000:	28c00215 	stw	r3,8(r5)
   13004:	10900034 	orhi	r2,r2,16384
   13008:	28800315 	stw	r2,12(r5)
   1300c:	008000c4 	movi	r2,3
   13010:	28800015 	stw	r2,0(r5)
   13014:	f800283a 	ret
   13018:	3800031e 	bne	r7,zero,13028 <__unpack_f+0xa8>
   1301c:	00800104 	movi	r2,4
   13020:	28800015 	stw	r2,0(r5)
   13024:	f800283a 	ret
   13028:	3080042c 	andhi	r2,r6,16
   1302c:	10000426 	beq	r2,zero,13040 <__unpack_f+0xc0>
   13030:	00800044 	movi	r2,1
   13034:	28800015 	stw	r2,0(r5)
   13038:	29c00315 	stw	r7,12(r5)
   1303c:	f800283a 	ret
   13040:	28000015 	stw	zero,0(r5)
   13044:	003ffc06 	br	13038 <__unpack_f+0xb8>

00013048 <__fpcmp_parts_f>:
   13048:	21800017 	ldw	r6,0(r4)
   1304c:	00c00044 	movi	r3,1
   13050:	19800a2e 	bgeu	r3,r6,1307c <__fpcmp_parts_f+0x34>
   13054:	28800017 	ldw	r2,0(r5)
   13058:	1880082e 	bgeu	r3,r2,1307c <__fpcmp_parts_f+0x34>
   1305c:	00c00104 	movi	r3,4
   13060:	30c01e26 	beq	r6,r3,130dc <__fpcmp_parts_f+0x94>
   13064:	10c01a26 	beq	r2,r3,130d0 <__fpcmp_parts_f+0x88>
   13068:	00c00084 	movi	r3,2
   1306c:	30c00526 	beq	r6,r3,13084 <__fpcmp_parts_f+0x3c>
   13070:	10c0071e 	bne	r2,r3,13090 <__fpcmp_parts_f+0x48>
   13074:	20800117 	ldw	r2,4(r4)
   13078:	1000091e 	bne	r2,zero,130a0 <__fpcmp_parts_f+0x58>
   1307c:	00800044 	movi	r2,1
   13080:	f800283a 	ret
   13084:	10c0121e 	bne	r2,r3,130d0 <__fpcmp_parts_f+0x88>
   13088:	0005883a 	mov	r2,zero
   1308c:	f800283a 	ret
   13090:	20c00117 	ldw	r3,4(r4)
   13094:	28800117 	ldw	r2,4(r5)
   13098:	18800326 	beq	r3,r2,130a8 <__fpcmp_parts_f+0x60>
   1309c:	183ff726 	beq	r3,zero,1307c <__fpcmp_parts_f+0x34>
   130a0:	00bfffc4 	movi	r2,-1
   130a4:	f800283a 	ret
   130a8:	21800217 	ldw	r6,8(r4)
   130ac:	28800217 	ldw	r2,8(r5)
   130b0:	11bffa16 	blt	r2,r6,1309c <__fpcmp_parts_f+0x54>
   130b4:	30800416 	blt	r6,r2,130c8 <__fpcmp_parts_f+0x80>
   130b8:	21000317 	ldw	r4,12(r4)
   130bc:	29400317 	ldw	r5,12(r5)
   130c0:	293ff636 	bltu	r5,r4,1309c <__fpcmp_parts_f+0x54>
   130c4:	217ff02e 	bgeu	r4,r5,13088 <__fpcmp_parts_f+0x40>
   130c8:	183fec1e 	bne	r3,zero,1307c <__fpcmp_parts_f+0x34>
   130cc:	003ff406 	br	130a0 <__fpcmp_parts_f+0x58>
   130d0:	28800117 	ldw	r2,4(r5)
   130d4:	103fe91e 	bne	r2,zero,1307c <__fpcmp_parts_f+0x34>
   130d8:	003ff106 	br	130a0 <__fpcmp_parts_f+0x58>
   130dc:	11bfe51e 	bne	r2,r6,13074 <__fpcmp_parts_f+0x2c>
   130e0:	28c00117 	ldw	r3,4(r5)
   130e4:	20800117 	ldw	r2,4(r4)
   130e8:	1885c83a 	sub	r2,r3,r2
   130ec:	f800283a 	ret

000130f0 <__make_fp>:
   130f0:	defffb04 	addi	sp,sp,-20
   130f4:	d9000015 	stw	r4,0(sp)
   130f8:	d809883a 	mov	r4,sp
   130fc:	dfc00415 	stw	ra,16(sp)
   13100:	d9400115 	stw	r5,4(sp)
   13104:	d9800215 	stw	r6,8(sp)
   13108:	d9c00315 	stw	r7,12(sp)
   1310c:	001311c0 	call	1311c <__pack_f>
   13110:	dfc00417 	ldw	ra,16(sp)
   13114:	dec00504 	addi	sp,sp,20
   13118:	f800283a 	ret

0001311c <__pack_f>:
   1311c:	20c00017 	ldw	r3,0(r4)
   13120:	01c00044 	movi	r7,1
   13124:	21800317 	ldw	r6,12(r4)
   13128:	21400117 	ldw	r5,4(r4)
   1312c:	38c02d2e 	bgeu	r7,r3,131e4 <__pack_f+0xc8>
   13130:	00800104 	movi	r2,4
   13134:	18802826 	beq	r3,r2,131d8 <__pack_f+0xbc>
   13138:	00800084 	movi	r2,2
   1313c:	18800126 	beq	r3,r2,13144 <__pack_f+0x28>
   13140:	3000101e 	bne	r6,zero,13184 <__pack_f+0x68>
   13144:	000d883a 	mov	r6,zero
   13148:	0007883a 	mov	r3,zero
   1314c:	19003fcc 	andi	r4,r3,255
   13150:	200895fa 	slli	r4,r4,23
   13154:	00c02034 	movhi	r3,128
   13158:	18ffffc4 	addi	r3,r3,-1
   1315c:	30c6703a 	and	r3,r6,r3
   13160:	10a0002c 	andhi	r2,r2,32768
   13164:	10c4b03a 	or	r2,r2,r3
   13168:	280a97fa 	slli	r5,r5,31
   1316c:	1104b03a 	or	r2,r2,r4
   13170:	00e00034 	movhi	r3,32768
   13174:	18ffffc4 	addi	r3,r3,-1
   13178:	10c4703a 	and	r2,r2,r3
   1317c:	1144b03a 	or	r2,r2,r5
   13180:	f800283a 	ret
   13184:	21000217 	ldw	r4,8(r4)
   13188:	00bfe084 	movi	r2,-126
   1318c:	20801b16 	blt	r4,r2,131fc <__pack_f+0xe0>
   13190:	00801fc4 	movi	r2,127
   13194:	11001016 	blt	r2,r4,131d8 <__pack_f+0xbc>
   13198:	308e703a 	and	r7,r6,r2
   1319c:	2087883a 	add	r3,r4,r2
   131a0:	00801004 	movi	r2,64
   131a4:	38800526 	beq	r7,r2,131bc <__pack_f+0xa0>
   131a8:	31800fc4 	addi	r6,r6,63
   131ac:	30000716 	blt	r6,zero,131cc <__pack_f+0xb0>
   131b0:	300490ba 	slli	r2,r6,2
   131b4:	100cd27a 	srli	r6,r2,9
   131b8:	003fe406 	br	1314c <__pack_f+0x30>
   131bc:	3080200c 	andi	r2,r6,128
   131c0:	103ffa26 	beq	r2,zero,131ac <__pack_f+0x90>
   131c4:	31cd883a 	add	r6,r6,r7
   131c8:	003ff806 	br	131ac <__pack_f+0x90>
   131cc:	300cd07a 	srli	r6,r6,1
   131d0:	18c00044 	addi	r3,r3,1
   131d4:	003ff606 	br	131b0 <__pack_f+0x94>
   131d8:	000d883a 	mov	r6,zero
   131dc:	00ffffc4 	movi	r3,-1
   131e0:	003fda06 	br	1314c <__pack_f+0x30>
   131e4:	31800434 	orhi	r6,r6,16
   131e8:	00802034 	movhi	r2,128
   131ec:	10bfffc4 	addi	r2,r2,-1
   131f0:	308c703a 	and	r6,r6,r2
   131f4:	00ffffc4 	movi	r3,-1
   131f8:	003fd406 	br	1314c <__pack_f+0x30>
   131fc:	1109c83a 	sub	r4,r2,r4
   13200:	00800644 	movi	r2,25
   13204:	11001216 	blt	r2,r4,13250 <__pack_f+0x134>
   13208:	3904983a 	sll	r2,r7,r4
   1320c:	3106d83a 	srl	r3,r6,r4
   13210:	10bfffc4 	addi	r2,r2,-1
   13214:	3084703a 	and	r2,r6,r2
   13218:	1004c03a 	cmpne	r2,r2,zero
   1321c:	1886b03a 	or	r3,r3,r2
   13220:	19001fcc 	andi	r4,r3,127
   13224:	00801004 	movi	r2,64
   13228:	20800c26 	beq	r4,r2,1325c <__pack_f+0x140>
   1322c:	18c00fc4 	addi	r3,r3,63
   13230:	00900034 	movhi	r2,16384
   13234:	10bfffc4 	addi	r2,r2,-1
   13238:	180cd1fa 	srli	r6,r3,7
   1323c:	10c7803a 	cmpltu	r3,r2,r3
   13240:	00802034 	movhi	r2,128
   13244:	10bfffc4 	addi	r2,r2,-1
   13248:	308c703a 	and	r6,r6,r2
   1324c:	003fbf06 	br	1314c <__pack_f+0x30>
   13250:	0007883a 	mov	r3,zero
   13254:	000d883a 	mov	r6,zero
   13258:	003ff906 	br	13240 <__pack_f+0x124>
   1325c:	1880200c 	andi	r2,r3,128
   13260:	10000126 	beq	r2,zero,13268 <__pack_f+0x14c>
   13264:	1907883a 	add	r3,r3,r4
   13268:	180cd1fa 	srli	r6,r3,7
   1326c:	00900034 	movhi	r2,16384
   13270:	10bfffc4 	addi	r2,r2,-1
   13274:	10c7803a 	cmpltu	r3,r2,r3
   13278:	003ff106 	br	13240 <__pack_f+0x124>

0001327c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1327c:	defff804 	addi	sp,sp,-32
   13280:	dfc00715 	stw	ra,28(sp)
   13284:	df000615 	stw	fp,24(sp)
   13288:	df000604 	addi	fp,sp,24
   1328c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13290:	e0bffc17 	ldw	r2,-16(fp)
   13294:	1004803a 	cmplt	r2,r2,zero
   13298:	1000081e 	bne	r2,zero,132bc <close+0x40>
   1329c:	e0bffc17 	ldw	r2,-16(fp)
   132a0:	10800324 	muli	r2,r2,12
   132a4:	1007883a 	mov	r3,r2
   132a8:	00820034 	movhi	r2,2048
   132ac:	1084d304 	addi	r2,r2,4940
   132b0:	1887883a 	add	r3,r3,r2
   132b4:	e0ffff15 	stw	r3,-4(fp)
   132b8:	00000106 	br	132c0 <close+0x44>
   132bc:	e03fff15 	stw	zero,-4(fp)
   132c0:	e0bfff17 	ldw	r2,-4(fp)
   132c4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   132c8:	e0bffb17 	ldw	r2,-20(fp)
   132cc:	1005003a 	cmpeq	r2,r2,zero
   132d0:	10001d1e 	bne	r2,zero,13348 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   132d4:	e0bffb17 	ldw	r2,-20(fp)
   132d8:	10800017 	ldw	r2,0(r2)
   132dc:	10800417 	ldw	r2,16(r2)
   132e0:	1005003a 	cmpeq	r2,r2,zero
   132e4:	1000071e 	bne	r2,zero,13304 <close+0x88>
   132e8:	e0bffb17 	ldw	r2,-20(fp)
   132ec:	10800017 	ldw	r2,0(r2)
   132f0:	10800417 	ldw	r2,16(r2)
   132f4:	e13ffb17 	ldw	r4,-20(fp)
   132f8:	103ee83a 	callr	r2
   132fc:	e0bffe15 	stw	r2,-8(fp)
   13300:	00000106 	br	13308 <close+0x8c>
   13304:	e03ffe15 	stw	zero,-8(fp)
   13308:	e0bffe17 	ldw	r2,-8(fp)
   1330c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13310:	e13ffc17 	ldw	r4,-16(fp)
   13314:	00139d40 	call	139d4 <alt_release_fd>
    if (rval < 0)
   13318:	e0bffa17 	ldw	r2,-24(fp)
   1331c:	1004403a 	cmpge	r2,r2,zero
   13320:	1000071e 	bne	r2,zero,13340 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   13324:	00133780 	call	13378 <alt_get_errno>
   13328:	e0fffa17 	ldw	r3,-24(fp)
   1332c:	00c7c83a 	sub	r3,zero,r3
   13330:	10c00015 	stw	r3,0(r2)
      return -1;
   13334:	00bfffc4 	movi	r2,-1
   13338:	e0bffd15 	stw	r2,-12(fp)
   1333c:	00000806 	br	13360 <close+0xe4>
    }
    return 0;
   13340:	e03ffd15 	stw	zero,-12(fp)
   13344:	00000606 	br	13360 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13348:	00133780 	call	13378 <alt_get_errno>
   1334c:	1007883a 	mov	r3,r2
   13350:	00801444 	movi	r2,81
   13354:	18800015 	stw	r2,0(r3)
    return -1;
   13358:	00bfffc4 	movi	r2,-1
   1335c:	e0bffd15 	stw	r2,-12(fp)
   13360:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   13364:	e037883a 	mov	sp,fp
   13368:	dfc00117 	ldw	ra,4(sp)
   1336c:	df000017 	ldw	fp,0(sp)
   13370:	dec00204 	addi	sp,sp,8
   13374:	f800283a 	ret

00013378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13378:	defffd04 	addi	sp,sp,-12
   1337c:	dfc00215 	stw	ra,8(sp)
   13380:	df000115 	stw	fp,4(sp)
   13384:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13388:	00820034 	movhi	r2,2048
   1338c:	108a4604 	addi	r2,r2,10520
   13390:	10800017 	ldw	r2,0(r2)
   13394:	1005003a 	cmpeq	r2,r2,zero
   13398:	1000061e 	bne	r2,zero,133b4 <alt_get_errno+0x3c>
   1339c:	00820034 	movhi	r2,2048
   133a0:	108a4604 	addi	r2,r2,10520
   133a4:	10800017 	ldw	r2,0(r2)
   133a8:	103ee83a 	callr	r2
   133ac:	e0bfff15 	stw	r2,-4(fp)
   133b0:	00000306 	br	133c0 <alt_get_errno+0x48>
   133b4:	00820034 	movhi	r2,2048
   133b8:	108a8704 	addi	r2,r2,10780
   133bc:	e0bfff15 	stw	r2,-4(fp)
   133c0:	e0bfff17 	ldw	r2,-4(fp)
}
   133c4:	e037883a 	mov	sp,fp
   133c8:	dfc00117 	ldw	ra,4(sp)
   133cc:	df000017 	ldw	fp,0(sp)
   133d0:	dec00204 	addi	sp,sp,8
   133d4:	f800283a 	ret

000133d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   133d8:	defffc04 	addi	sp,sp,-16
   133dc:	df000315 	stw	fp,12(sp)
   133e0:	df000304 	addi	fp,sp,12
   133e4:	e13ffd15 	stw	r4,-12(fp)
   133e8:	e17ffe15 	stw	r5,-8(fp)
   133ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   133f0:	e0bfff17 	ldw	r2,-4(fp)
}
   133f4:	e037883a 	mov	sp,fp
   133f8:	df000017 	ldw	fp,0(sp)
   133fc:	dec00104 	addi	sp,sp,4
   13400:	f800283a 	ret

00013404 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13404:	defff904 	addi	sp,sp,-28
   13408:	dfc00615 	stw	ra,24(sp)
   1340c:	df000515 	stw	fp,20(sp)
   13410:	df000504 	addi	fp,sp,20
   13414:	e13ffc15 	stw	r4,-16(fp)
   13418:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1341c:	e0bffc17 	ldw	r2,-16(fp)
   13420:	1004803a 	cmplt	r2,r2,zero
   13424:	1000081e 	bne	r2,zero,13448 <fstat+0x44>
   13428:	e0bffc17 	ldw	r2,-16(fp)
   1342c:	10800324 	muli	r2,r2,12
   13430:	1007883a 	mov	r3,r2
   13434:	00820034 	movhi	r2,2048
   13438:	1084d304 	addi	r2,r2,4940
   1343c:	1887883a 	add	r3,r3,r2
   13440:	e0ffff15 	stw	r3,-4(fp)
   13444:	00000106 	br	1344c <fstat+0x48>
   13448:	e03fff15 	stw	zero,-4(fp)
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13454:	e0bffb17 	ldw	r2,-20(fp)
   13458:	1005003a 	cmpeq	r2,r2,zero
   1345c:	1000121e 	bne	r2,zero,134a8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13460:	e0bffb17 	ldw	r2,-20(fp)
   13464:	10800017 	ldw	r2,0(r2)
   13468:	10800817 	ldw	r2,32(r2)
   1346c:	1005003a 	cmpeq	r2,r2,zero
   13470:	1000081e 	bne	r2,zero,13494 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   13474:	e0bffb17 	ldw	r2,-20(fp)
   13478:	10800017 	ldw	r2,0(r2)
   1347c:	10800817 	ldw	r2,32(r2)
   13480:	e13ffb17 	ldw	r4,-20(fp)
   13484:	e17ffd17 	ldw	r5,-12(fp)
   13488:	103ee83a 	callr	r2
   1348c:	e0bffe15 	stw	r2,-8(fp)
   13490:	00000b06 	br	134c0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13494:	e0fffd17 	ldw	r3,-12(fp)
   13498:	00880004 	movi	r2,8192
   1349c:	18800115 	stw	r2,4(r3)
      return 0;
   134a0:	e03ffe15 	stw	zero,-8(fp)
   134a4:	00000606 	br	134c0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   134a8:	00134d80 	call	134d8 <alt_get_errno>
   134ac:	1007883a 	mov	r3,r2
   134b0:	00801444 	movi	r2,81
   134b4:	18800015 	stw	r2,0(r3)
    return -1;
   134b8:	00bfffc4 	movi	r2,-1
   134bc:	e0bffe15 	stw	r2,-8(fp)
   134c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   134c4:	e037883a 	mov	sp,fp
   134c8:	dfc00117 	ldw	ra,4(sp)
   134cc:	df000017 	ldw	fp,0(sp)
   134d0:	dec00204 	addi	sp,sp,8
   134d4:	f800283a 	ret

000134d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   134d8:	defffd04 	addi	sp,sp,-12
   134dc:	dfc00215 	stw	ra,8(sp)
   134e0:	df000115 	stw	fp,4(sp)
   134e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   134e8:	00820034 	movhi	r2,2048
   134ec:	108a4604 	addi	r2,r2,10520
   134f0:	10800017 	ldw	r2,0(r2)
   134f4:	1005003a 	cmpeq	r2,r2,zero
   134f8:	1000061e 	bne	r2,zero,13514 <alt_get_errno+0x3c>
   134fc:	00820034 	movhi	r2,2048
   13500:	108a4604 	addi	r2,r2,10520
   13504:	10800017 	ldw	r2,0(r2)
   13508:	103ee83a 	callr	r2
   1350c:	e0bfff15 	stw	r2,-4(fp)
   13510:	00000306 	br	13520 <alt_get_errno+0x48>
   13514:	00820034 	movhi	r2,2048
   13518:	108a8704 	addi	r2,r2,10780
   1351c:	e0bfff15 	stw	r2,-4(fp)
   13520:	e0bfff17 	ldw	r2,-4(fp)
}
   13524:	e037883a 	mov	sp,fp
   13528:	dfc00117 	ldw	ra,4(sp)
   1352c:	df000017 	ldw	fp,0(sp)
   13530:	dec00204 	addi	sp,sp,8
   13534:	f800283a 	ret

00013538 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13538:	deffeb04 	addi	sp,sp,-84
   1353c:	dfc01415 	stw	ra,80(sp)
   13540:	df001315 	stw	fp,76(sp)
   13544:	df001304 	addi	fp,sp,76
   13548:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1354c:	e0bffd17 	ldw	r2,-12(fp)
   13550:	1004803a 	cmplt	r2,r2,zero
   13554:	1000081e 	bne	r2,zero,13578 <isatty+0x40>
   13558:	e0bffd17 	ldw	r2,-12(fp)
   1355c:	10800324 	muli	r2,r2,12
   13560:	1007883a 	mov	r3,r2
   13564:	00820034 	movhi	r2,2048
   13568:	1084d304 	addi	r2,r2,4940
   1356c:	1887883a 	add	r3,r3,r2
   13570:	e0ffff15 	stw	r3,-4(fp)
   13574:	00000106 	br	1357c <isatty+0x44>
   13578:	e03fff15 	stw	zero,-4(fp)
   1357c:	e0bfff17 	ldw	r2,-4(fp)
   13580:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   13584:	e0bfed17 	ldw	r2,-76(fp)
   13588:	1005003a 	cmpeq	r2,r2,zero
   1358c:	10000f1e 	bne	r2,zero,135cc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13590:	e0bfed17 	ldw	r2,-76(fp)
   13594:	10800017 	ldw	r2,0(r2)
   13598:	10800817 	ldw	r2,32(r2)
   1359c:	1004c03a 	cmpne	r2,r2,zero
   135a0:	1000031e 	bne	r2,zero,135b0 <isatty+0x78>
    {
      return 1;
   135a4:	00800044 	movi	r2,1
   135a8:	e0bffe15 	stw	r2,-8(fp)
   135ac:	00000c06 	br	135e0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   135b0:	e17fee04 	addi	r5,fp,-72
   135b4:	e13ffd17 	ldw	r4,-12(fp)
   135b8:	00134040 	call	13404 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   135bc:	e0bfef17 	ldw	r2,-68(fp)
   135c0:	10880020 	cmpeqi	r2,r2,8192
   135c4:	e0bffe15 	stw	r2,-8(fp)
   135c8:	00000506 	br	135e0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   135cc:	00135f80 	call	135f8 <alt_get_errno>
   135d0:	1007883a 	mov	r3,r2
   135d4:	00801444 	movi	r2,81
   135d8:	18800015 	stw	r2,0(r3)
    return 0;
   135dc:	e03ffe15 	stw	zero,-8(fp)
   135e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   135e4:	e037883a 	mov	sp,fp
   135e8:	dfc00117 	ldw	ra,4(sp)
   135ec:	df000017 	ldw	fp,0(sp)
   135f0:	dec00204 	addi	sp,sp,8
   135f4:	f800283a 	ret

000135f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135f8:	defffd04 	addi	sp,sp,-12
   135fc:	dfc00215 	stw	ra,8(sp)
   13600:	df000115 	stw	fp,4(sp)
   13604:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13608:	00820034 	movhi	r2,2048
   1360c:	108a4604 	addi	r2,r2,10520
   13610:	10800017 	ldw	r2,0(r2)
   13614:	1005003a 	cmpeq	r2,r2,zero
   13618:	1000061e 	bne	r2,zero,13634 <alt_get_errno+0x3c>
   1361c:	00820034 	movhi	r2,2048
   13620:	108a4604 	addi	r2,r2,10520
   13624:	10800017 	ldw	r2,0(r2)
   13628:	103ee83a 	callr	r2
   1362c:	e0bfff15 	stw	r2,-4(fp)
   13630:	00000306 	br	13640 <alt_get_errno+0x48>
   13634:	00820034 	movhi	r2,2048
   13638:	108a8704 	addi	r2,r2,10780
   1363c:	e0bfff15 	stw	r2,-4(fp)
   13640:	e0bfff17 	ldw	r2,-4(fp)
}
   13644:	e037883a 	mov	sp,fp
   13648:	dfc00117 	ldw	ra,4(sp)
   1364c:	df000017 	ldw	fp,0(sp)
   13650:	dec00204 	addi	sp,sp,8
   13654:	f800283a 	ret

00013658 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13658:	defff804 	addi	sp,sp,-32
   1365c:	dfc00715 	stw	ra,28(sp)
   13660:	df000615 	stw	fp,24(sp)
   13664:	df000604 	addi	fp,sp,24
   13668:	e13ffc15 	stw	r4,-16(fp)
   1366c:	e17ffd15 	stw	r5,-12(fp)
   13670:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13674:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13678:	e0bffc17 	ldw	r2,-16(fp)
   1367c:	1004803a 	cmplt	r2,r2,zero
   13680:	1000081e 	bne	r2,zero,136a4 <lseek+0x4c>
   13684:	e0bffc17 	ldw	r2,-16(fp)
   13688:	10800324 	muli	r2,r2,12
   1368c:	1007883a 	mov	r3,r2
   13690:	00820034 	movhi	r2,2048
   13694:	1084d304 	addi	r2,r2,4940
   13698:	1887883a 	add	r3,r3,r2
   1369c:	e0ffff15 	stw	r3,-4(fp)
   136a0:	00000106 	br	136a8 <lseek+0x50>
   136a4:	e03fff15 	stw	zero,-4(fp)
   136a8:	e0bfff17 	ldw	r2,-4(fp)
   136ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   136b0:	e0bffb17 	ldw	r2,-20(fp)
   136b4:	1005003a 	cmpeq	r2,r2,zero
   136b8:	1000111e 	bne	r2,zero,13700 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   136bc:	e0bffb17 	ldw	r2,-20(fp)
   136c0:	10800017 	ldw	r2,0(r2)
   136c4:	10800717 	ldw	r2,28(r2)
   136c8:	1005003a 	cmpeq	r2,r2,zero
   136cc:	1000091e 	bne	r2,zero,136f4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   136d0:	e0bffb17 	ldw	r2,-20(fp)
   136d4:	10800017 	ldw	r2,0(r2)
   136d8:	10800717 	ldw	r2,28(r2)
   136dc:	e13ffb17 	ldw	r4,-20(fp)
   136e0:	e17ffd17 	ldw	r5,-12(fp)
   136e4:	e1bffe17 	ldw	r6,-8(fp)
   136e8:	103ee83a 	callr	r2
   136ec:	e0bffa15 	stw	r2,-24(fp)
   136f0:	00000506 	br	13708 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   136f4:	00bfde84 	movi	r2,-134
   136f8:	e0bffa15 	stw	r2,-24(fp)
   136fc:	00000206 	br	13708 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13700:	00bfebc4 	movi	r2,-81
   13704:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   13708:	e0bffa17 	ldw	r2,-24(fp)
   1370c:	1004403a 	cmpge	r2,r2,zero
   13710:	1000071e 	bne	r2,zero,13730 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   13714:	00137480 	call	13748 <alt_get_errno>
   13718:	1007883a 	mov	r3,r2
   1371c:	e0bffa17 	ldw	r2,-24(fp)
   13720:	0085c83a 	sub	r2,zero,r2
   13724:	18800015 	stw	r2,0(r3)
    rc = -1;
   13728:	00bfffc4 	movi	r2,-1
   1372c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   13730:	e0bffa17 	ldw	r2,-24(fp)
}
   13734:	e037883a 	mov	sp,fp
   13738:	dfc00117 	ldw	ra,4(sp)
   1373c:	df000017 	ldw	fp,0(sp)
   13740:	dec00204 	addi	sp,sp,8
   13744:	f800283a 	ret

00013748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13748:	defffd04 	addi	sp,sp,-12
   1374c:	dfc00215 	stw	ra,8(sp)
   13750:	df000115 	stw	fp,4(sp)
   13754:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13758:	00820034 	movhi	r2,2048
   1375c:	108a4604 	addi	r2,r2,10520
   13760:	10800017 	ldw	r2,0(r2)
   13764:	1005003a 	cmpeq	r2,r2,zero
   13768:	1000061e 	bne	r2,zero,13784 <alt_get_errno+0x3c>
   1376c:	00820034 	movhi	r2,2048
   13770:	108a4604 	addi	r2,r2,10520
   13774:	10800017 	ldw	r2,0(r2)
   13778:	103ee83a 	callr	r2
   1377c:	e0bfff15 	stw	r2,-4(fp)
   13780:	00000306 	br	13790 <alt_get_errno+0x48>
   13784:	00820034 	movhi	r2,2048
   13788:	108a8704 	addi	r2,r2,10780
   1378c:	e0bfff15 	stw	r2,-4(fp)
   13790:	e0bfff17 	ldw	r2,-4(fp)
}
   13794:	e037883a 	mov	sp,fp
   13798:	dfc00117 	ldw	ra,4(sp)
   1379c:	df000017 	ldw	fp,0(sp)
   137a0:	dec00204 	addi	sp,sp,8
   137a4:	f800283a 	ret

000137a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   137a8:	defffd04 	addi	sp,sp,-12
   137ac:	dfc00215 	stw	ra,8(sp)
   137b0:	df000115 	stw	fp,4(sp)
   137b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   137b8:	0009883a 	mov	r4,zero
   137bc:	0013c700 	call	13c70 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   137c0:	0013ca40 	call	13ca4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   137c4:	01020034 	movhi	r4,2048
   137c8:	2101dc04 	addi	r4,r4,1904
   137cc:	01420034 	movhi	r5,2048
   137d0:	2941dc04 	addi	r5,r5,1904
   137d4:	01820034 	movhi	r6,2048
   137d8:	3181dc04 	addi	r6,r6,1904
   137dc:	001a7900 	call	1a790 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   137e0:	001a4a00 	call	1a4a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   137e4:	010000b4 	movhi	r4,2
   137e8:	21294104 	addi	r4,r4,-23292
   137ec:	001b8840 	call	1b884 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   137f0:	d1205a17 	ldw	r4,-32408(gp)
   137f4:	d1605b17 	ldw	r5,-32404(gp)
   137f8:	d1a05c17 	ldw	r6,-32400(gp)
   137fc:	0006bd00 	call	6bd0 <main>
   13800:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13804:	01000044 	movi	r4,1
   13808:	001327c0 	call	1327c <close>
  exit (result);
   1380c:	e13fff17 	ldw	r4,-4(fp)
   13810:	001b8980 	call	1b898 <exit>

00013814 <__malloc_lock>:
   13814:	defffe04 	addi	sp,sp,-8
   13818:	df000115 	stw	fp,4(sp)
   1381c:	df000104 	addi	fp,sp,4
   13820:	e13fff15 	stw	r4,-4(fp)
   13824:	e037883a 	mov	sp,fp
   13828:	df000017 	ldw	fp,0(sp)
   1382c:	dec00104 	addi	sp,sp,4
   13830:	f800283a 	ret

00013834 <__malloc_unlock>:
   13834:	defffe04 	addi	sp,sp,-8
   13838:	df000115 	stw	fp,4(sp)
   1383c:	df000104 	addi	fp,sp,4
   13840:	e13fff15 	stw	r4,-4(fp)
   13844:	e037883a 	mov	sp,fp
   13848:	df000017 	ldw	fp,0(sp)
   1384c:	dec00104 	addi	sp,sp,4
   13850:	f800283a 	ret

00013854 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13854:	defff704 	addi	sp,sp,-36
   13858:	dfc00815 	stw	ra,32(sp)
   1385c:	df000715 	stw	fp,28(sp)
   13860:	df000704 	addi	fp,sp,28
   13864:	e13ffb15 	stw	r4,-20(fp)
   13868:	e17ffc15 	stw	r5,-16(fp)
   1386c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13870:	e0bffb17 	ldw	r2,-20(fp)
   13874:	1004803a 	cmplt	r2,r2,zero
   13878:	1000081e 	bne	r2,zero,1389c <read+0x48>
   1387c:	e0bffb17 	ldw	r2,-20(fp)
   13880:	10800324 	muli	r2,r2,12
   13884:	1007883a 	mov	r3,r2
   13888:	00820034 	movhi	r2,2048
   1388c:	1084d304 	addi	r2,r2,4940
   13890:	1887883a 	add	r3,r3,r2
   13894:	e0ffff15 	stw	r3,-4(fp)
   13898:	00000106 	br	138a0 <read+0x4c>
   1389c:	e03fff15 	stw	zero,-4(fp)
   138a0:	e0bfff17 	ldw	r2,-4(fp)
   138a4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   138a8:	e0bffa17 	ldw	r2,-24(fp)
   138ac:	1005003a 	cmpeq	r2,r2,zero
   138b0:	1000241e 	bne	r2,zero,13944 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   138b4:	e0bffa17 	ldw	r2,-24(fp)
   138b8:	10800217 	ldw	r2,8(r2)
   138bc:	108000cc 	andi	r2,r2,3
   138c0:	10800060 	cmpeqi	r2,r2,1
   138c4:	10001a1e 	bne	r2,zero,13930 <read+0xdc>
   138c8:	e0bffa17 	ldw	r2,-24(fp)
   138cc:	10800017 	ldw	r2,0(r2)
   138d0:	10800517 	ldw	r2,20(r2)
   138d4:	1005003a 	cmpeq	r2,r2,zero
   138d8:	1000151e 	bne	r2,zero,13930 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   138dc:	e0bffa17 	ldw	r2,-24(fp)
   138e0:	10800017 	ldw	r2,0(r2)
   138e4:	10800517 	ldw	r2,20(r2)
   138e8:	e17ffc17 	ldw	r5,-16(fp)
   138ec:	e1bffd17 	ldw	r6,-12(fp)
   138f0:	e13ffa17 	ldw	r4,-24(fp)
   138f4:	103ee83a 	callr	r2
   138f8:	e0bff915 	stw	r2,-28(fp)
   138fc:	e0bff917 	ldw	r2,-28(fp)
   13900:	1004403a 	cmpge	r2,r2,zero
   13904:	1000071e 	bne	r2,zero,13924 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   13908:	00139740 	call	13974 <alt_get_errno>
   1390c:	e0fff917 	ldw	r3,-28(fp)
   13910:	00c7c83a 	sub	r3,zero,r3
   13914:	10c00015 	stw	r3,0(r2)
          return -1;
   13918:	00bfffc4 	movi	r2,-1
   1391c:	e0bffe15 	stw	r2,-8(fp)
   13920:	00000e06 	br	1395c <read+0x108>
        }
        return rval;
   13924:	e0bff917 	ldw	r2,-28(fp)
   13928:	e0bffe15 	stw	r2,-8(fp)
   1392c:	00000b06 	br	1395c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13930:	00139740 	call	13974 <alt_get_errno>
   13934:	1007883a 	mov	r3,r2
   13938:	00800344 	movi	r2,13
   1393c:	18800015 	stw	r2,0(r3)
   13940:	00000406 	br	13954 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13944:	00139740 	call	13974 <alt_get_errno>
   13948:	1007883a 	mov	r3,r2
   1394c:	00801444 	movi	r2,81
   13950:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13954:	00bfffc4 	movi	r2,-1
   13958:	e0bffe15 	stw	r2,-8(fp)
   1395c:	e0bffe17 	ldw	r2,-8(fp)
}
   13960:	e037883a 	mov	sp,fp
   13964:	dfc00117 	ldw	ra,4(sp)
   13968:	df000017 	ldw	fp,0(sp)
   1396c:	dec00204 	addi	sp,sp,8
   13970:	f800283a 	ret

00013974 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13974:	defffd04 	addi	sp,sp,-12
   13978:	dfc00215 	stw	ra,8(sp)
   1397c:	df000115 	stw	fp,4(sp)
   13980:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13984:	00820034 	movhi	r2,2048
   13988:	108a4604 	addi	r2,r2,10520
   1398c:	10800017 	ldw	r2,0(r2)
   13990:	1005003a 	cmpeq	r2,r2,zero
   13994:	1000061e 	bne	r2,zero,139b0 <alt_get_errno+0x3c>
   13998:	00820034 	movhi	r2,2048
   1399c:	108a4604 	addi	r2,r2,10520
   139a0:	10800017 	ldw	r2,0(r2)
   139a4:	103ee83a 	callr	r2
   139a8:	e0bfff15 	stw	r2,-4(fp)
   139ac:	00000306 	br	139bc <alt_get_errno+0x48>
   139b0:	00820034 	movhi	r2,2048
   139b4:	108a8704 	addi	r2,r2,10780
   139b8:	e0bfff15 	stw	r2,-4(fp)
   139bc:	e0bfff17 	ldw	r2,-4(fp)
}
   139c0:	e037883a 	mov	sp,fp
   139c4:	dfc00117 	ldw	ra,4(sp)
   139c8:	df000017 	ldw	fp,0(sp)
   139cc:	dec00204 	addi	sp,sp,8
   139d0:	f800283a 	ret

000139d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   139d4:	defffe04 	addi	sp,sp,-8
   139d8:	df000115 	stw	fp,4(sp)
   139dc:	df000104 	addi	fp,sp,4
   139e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   139e4:	e0bfff17 	ldw	r2,-4(fp)
   139e8:	108000d0 	cmplti	r2,r2,3
   139ec:	10000d1e 	bne	r2,zero,13a24 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   139f0:	e0bfff17 	ldw	r2,-4(fp)
   139f4:	00c20034 	movhi	r3,2048
   139f8:	18c4d304 	addi	r3,r3,4940
   139fc:	10800324 	muli	r2,r2,12
   13a00:	10c5883a 	add	r2,r2,r3
   13a04:	10800204 	addi	r2,r2,8
   13a08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13a0c:	e0bfff17 	ldw	r2,-4(fp)
   13a10:	00c20034 	movhi	r3,2048
   13a14:	18c4d304 	addi	r3,r3,4940
   13a18:	10800324 	muli	r2,r2,12
   13a1c:	10c5883a 	add	r2,r2,r3
   13a20:	10000015 	stw	zero,0(r2)
  }
}
   13a24:	e037883a 	mov	sp,fp
   13a28:	df000017 	ldw	fp,0(sp)
   13a2c:	dec00104 	addi	sp,sp,4
   13a30:	f800283a 	ret

00013a34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13a34:	defff804 	addi	sp,sp,-32
   13a38:	df000715 	stw	fp,28(sp)
   13a3c:	df000704 	addi	fp,sp,28
   13a40:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a44:	0005303a 	rdctl	r2,status
   13a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a4c:	e0fffb17 	ldw	r3,-20(fp)
   13a50:	00bfff84 	movi	r2,-2
   13a54:	1884703a 	and	r2,r3,r2
   13a58:	1001703a 	wrctl	status,r2
  
  return context;
   13a5c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13a60:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13a64:	d0a01917 	ldw	r2,-32668(gp)
   13a68:	10c000c4 	addi	r3,r2,3
   13a6c:	00bfff04 	movi	r2,-4
   13a70:	1884703a 	and	r2,r3,r2
   13a74:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13a78:	d0e01917 	ldw	r3,-32668(gp)
   13a7c:	e0bffe17 	ldw	r2,-8(fp)
   13a80:	1887883a 	add	r3,r3,r2
   13a84:	00840034 	movhi	r2,4096
   13a88:	10800004 	addi	r2,r2,0
   13a8c:	10c0072e 	bgeu	r2,r3,13aac <sbrk+0x78>
   13a90:	e0bffd17 	ldw	r2,-12(fp)
   13a94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a98:	e0bffa17 	ldw	r2,-24(fp)
   13a9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13aa0:	00bfffc4 	movi	r2,-1
   13aa4:	e0bfff15 	stw	r2,-4(fp)
   13aa8:	00000c06 	br	13adc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13aac:	d0a01917 	ldw	r2,-32668(gp)
   13ab0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   13ab4:	d0e01917 	ldw	r3,-32668(gp)
   13ab8:	e0bffe17 	ldw	r2,-8(fp)
   13abc:	1885883a 	add	r2,r3,r2
   13ac0:	d0a01915 	stw	r2,-32668(gp)
   13ac4:	e0bffd17 	ldw	r2,-12(fp)
   13ac8:	e0bff915 	stw	r2,-28(fp)
   13acc:	e0bff917 	ldw	r2,-28(fp)
   13ad0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13ad4:	e0bffc17 	ldw	r2,-16(fp)
   13ad8:	e0bfff15 	stw	r2,-4(fp)
   13adc:	e0bfff17 	ldw	r2,-4(fp)
} 
   13ae0:	e037883a 	mov	sp,fp
   13ae4:	df000017 	ldw	fp,0(sp)
   13ae8:	dec00104 	addi	sp,sp,4
   13aec:	f800283a 	ret

00013af0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13af0:	defff704 	addi	sp,sp,-36
   13af4:	dfc00815 	stw	ra,32(sp)
   13af8:	df000715 	stw	fp,28(sp)
   13afc:	df000704 	addi	fp,sp,28
   13b00:	e13ffb15 	stw	r4,-20(fp)
   13b04:	e17ffc15 	stw	r5,-16(fp)
   13b08:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13b0c:	e0bffb17 	ldw	r2,-20(fp)
   13b10:	1004803a 	cmplt	r2,r2,zero
   13b14:	1000081e 	bne	r2,zero,13b38 <write+0x48>
   13b18:	e0bffb17 	ldw	r2,-20(fp)
   13b1c:	10800324 	muli	r2,r2,12
   13b20:	1007883a 	mov	r3,r2
   13b24:	00820034 	movhi	r2,2048
   13b28:	1084d304 	addi	r2,r2,4940
   13b2c:	1887883a 	add	r3,r3,r2
   13b30:	e0ffff15 	stw	r3,-4(fp)
   13b34:	00000106 	br	13b3c <write+0x4c>
   13b38:	e03fff15 	stw	zero,-4(fp)
   13b3c:	e0bfff17 	ldw	r2,-4(fp)
   13b40:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   13b44:	e0bffa17 	ldw	r2,-24(fp)
   13b48:	1005003a 	cmpeq	r2,r2,zero
   13b4c:	1000241e 	bne	r2,zero,13be0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13b50:	e0bffa17 	ldw	r2,-24(fp)
   13b54:	10800217 	ldw	r2,8(r2)
   13b58:	108000cc 	andi	r2,r2,3
   13b5c:	1005003a 	cmpeq	r2,r2,zero
   13b60:	10001a1e 	bne	r2,zero,13bcc <write+0xdc>
   13b64:	e0bffa17 	ldw	r2,-24(fp)
   13b68:	10800017 	ldw	r2,0(r2)
   13b6c:	10800617 	ldw	r2,24(r2)
   13b70:	1005003a 	cmpeq	r2,r2,zero
   13b74:	1000151e 	bne	r2,zero,13bcc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13b78:	e0bffa17 	ldw	r2,-24(fp)
   13b7c:	10800017 	ldw	r2,0(r2)
   13b80:	10800617 	ldw	r2,24(r2)
   13b84:	e17ffc17 	ldw	r5,-16(fp)
   13b88:	e1bffd17 	ldw	r6,-12(fp)
   13b8c:	e13ffa17 	ldw	r4,-24(fp)
   13b90:	103ee83a 	callr	r2
   13b94:	e0bff915 	stw	r2,-28(fp)
   13b98:	e0bff917 	ldw	r2,-28(fp)
   13b9c:	1004403a 	cmpge	r2,r2,zero
   13ba0:	1000071e 	bne	r2,zero,13bc0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   13ba4:	0013c100 	call	13c10 <alt_get_errno>
   13ba8:	e0fff917 	ldw	r3,-28(fp)
   13bac:	00c7c83a 	sub	r3,zero,r3
   13bb0:	10c00015 	stw	r3,0(r2)
        return -1;
   13bb4:	00bfffc4 	movi	r2,-1
   13bb8:	e0bffe15 	stw	r2,-8(fp)
   13bbc:	00000e06 	br	13bf8 <write+0x108>
      }
      return rval;
   13bc0:	e0bff917 	ldw	r2,-28(fp)
   13bc4:	e0bffe15 	stw	r2,-8(fp)
   13bc8:	00000b06 	br	13bf8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13bcc:	0013c100 	call	13c10 <alt_get_errno>
   13bd0:	1007883a 	mov	r3,r2
   13bd4:	00800344 	movi	r2,13
   13bd8:	18800015 	stw	r2,0(r3)
   13bdc:	00000406 	br	13bf0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13be0:	0013c100 	call	13c10 <alt_get_errno>
   13be4:	1007883a 	mov	r3,r2
   13be8:	00801444 	movi	r2,81
   13bec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13bf0:	00bfffc4 	movi	r2,-1
   13bf4:	e0bffe15 	stw	r2,-8(fp)
   13bf8:	e0bffe17 	ldw	r2,-8(fp)
}
   13bfc:	e037883a 	mov	sp,fp
   13c00:	dfc00117 	ldw	ra,4(sp)
   13c04:	df000017 	ldw	fp,0(sp)
   13c08:	dec00204 	addi	sp,sp,8
   13c0c:	f800283a 	ret

00013c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c10:	defffd04 	addi	sp,sp,-12
   13c14:	dfc00215 	stw	ra,8(sp)
   13c18:	df000115 	stw	fp,4(sp)
   13c1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13c20:	00820034 	movhi	r2,2048
   13c24:	108a4604 	addi	r2,r2,10520
   13c28:	10800017 	ldw	r2,0(r2)
   13c2c:	1005003a 	cmpeq	r2,r2,zero
   13c30:	1000061e 	bne	r2,zero,13c4c <alt_get_errno+0x3c>
   13c34:	00820034 	movhi	r2,2048
   13c38:	108a4604 	addi	r2,r2,10520
   13c3c:	10800017 	ldw	r2,0(r2)
   13c40:	103ee83a 	callr	r2
   13c44:	e0bfff15 	stw	r2,-4(fp)
   13c48:	00000306 	br	13c58 <alt_get_errno+0x48>
   13c4c:	00820034 	movhi	r2,2048
   13c50:	108a8704 	addi	r2,r2,10780
   13c54:	e0bfff15 	stw	r2,-4(fp)
   13c58:	e0bfff17 	ldw	r2,-4(fp)
}
   13c5c:	e037883a 	mov	sp,fp
   13c60:	dfc00117 	ldw	ra,4(sp)
   13c64:	df000017 	ldw	fp,0(sp)
   13c68:	dec00204 	addi	sp,sp,8
   13c6c:	f800283a 	ret

00013c70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13c70:	defffd04 	addi	sp,sp,-12
   13c74:	dfc00215 	stw	ra,8(sp)
   13c78:	df000115 	stw	fp,4(sp)
   13c7c:	df000104 	addi	fp,sp,4
   13c80:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   13c84:	001aca00 	call	1aca0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13c88:	00800044 	movi	r2,1
   13c8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13c90:	e037883a 	mov	sp,fp
   13c94:	dfc00117 	ldw	ra,4(sp)
   13c98:	df000017 	ldw	fp,0(sp)
   13c9c:	dec00204 	addi	sp,sp,8
   13ca0:	f800283a 	ret

00013ca4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13ca4:	defffd04 	addi	sp,sp,-12
   13ca8:	dfc00215 	stw	ra,8(sp)
   13cac:	df000115 	stw	fp,4(sp)
   13cb0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER1MS, timer1ms);
   13cb4:	01000134 	movhi	r4,4
   13cb8:	210c1004 	addi	r4,r4,12352
   13cbc:	000b883a 	mov	r5,zero
   13cc0:	000d883a 	mov	r6,zero
   13cc4:	01c0fa04 	movi	r7,1000
   13cc8:	001781c0 	call	1781c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1US, timer1us);
    ALTERA_AVALON_CFI_FLASH_INIT ( FLASH_CONTROLLER, flash_controller);
   13ccc:	01020034 	movhi	r4,2048
   13cd0:	21053304 	addi	r4,r4,5324
   13cd4:	00140480 	call	14048 <alt_flash_cfi_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13cd8:	01020034 	movhi	r4,2048
   13cdc:	21057304 	addi	r4,r4,5580
   13ce0:	000b883a 	mov	r5,zero
   13ce4:	01800144 	movi	r6,5
   13ce8:	0015f100 	call	15f10 <altera_avalon_jtag_uart_init>
   13cec:	01020034 	movhi	r4,2048
   13cf0:	21056904 	addi	r4,r4,5540
   13cf4:	00140100 	call	14010 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( CHARACTER_LCD, character_lcd);
   13cf8:	01020034 	movhi	r4,2048
   13cfc:	21098b04 	addi	r4,r4,9772
   13d00:	00176140 	call	17614 <altera_avalon_lcd_16207_init>
   13d04:	01020034 	movhi	r4,2048
   13d08:	21098104 	addi	r4,r4,9732
   13d0c:	00140100 	call	14010 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
    ALTERA_AVALON_UART_INIT ( UART, uart);
   13d10:	01020034 	movhi	r4,2048
   13d14:	2109d304 	addi	r4,r4,10060
   13d18:	000b883a 	mov	r5,zero
   13d1c:	018000c4 	movi	r6,3
   13d20:	001799c0 	call	1799c <altera_avalon_uart_init>
   13d24:	01020034 	movhi	r4,2048
   13d28:	2109c904 	addi	r4,r4,10020
   13d2c:	00140100 	call	14010 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2, ps2);
   13d30:	01020034 	movhi	r4,2048
   13d34:	2109fa04 	addi	r4,r4,10216
   13d38:	001837c0 	call	1837c <alt_up_ps2_init>
   13d3c:	01020034 	movhi	r4,2048
   13d40:	2109fa04 	addi	r4,r4,10216
   13d44:	00140100 	call	14010 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA, video_character_buffer_with_dma);
   13d48:	00820034 	movhi	r2,2048
   13d4c:	108a0804 	addi	r2,r2,10272
   13d50:	10800a17 	ldw	r2,40(r2)
   13d54:	10800104 	addi	r2,r2,4
   13d58:	10800017 	ldw	r2,0(r2)
   13d5c:	10ffffcc 	andi	r3,r2,65535
   13d60:	00820034 	movhi	r2,2048
   13d64:	108a0804 	addi	r2,r2,10272
   13d68:	10c00c15 	stw	r3,48(r2)
   13d6c:	00820034 	movhi	r2,2048
   13d70:	108a0804 	addi	r2,r2,10272
   13d74:	10800a17 	ldw	r2,40(r2)
   13d78:	10800104 	addi	r2,r2,4
   13d7c:	10800017 	ldw	r2,0(r2)
   13d80:	1005d43a 	srai	r2,r2,16
   13d84:	10ffffcc 	andi	r3,r2,65535
   13d88:	00820034 	movhi	r2,2048
   13d8c:	108a0804 	addi	r2,r2,10272
   13d90:	10c00d15 	stw	r3,52(r2)
   13d94:	00820034 	movhi	r2,2048
   13d98:	108a0804 	addi	r2,r2,10272
   13d9c:	10800c17 	ldw	r2,48(r2)
   13da0:	10801068 	cmpgeui	r2,r2,65
   13da4:	1000081e 	bne	r2,zero,13dc8 <alt_sys_init+0x124>
   13da8:	00c20034 	movhi	r3,2048
   13dac:	18ca0804 	addi	r3,r3,10272
   13db0:	00800fc4 	movi	r2,63
   13db4:	18800f15 	stw	r2,60(r3)
   13db8:	00c20034 	movhi	r3,2048
   13dbc:	18ca0804 	addi	r3,r3,10272
   13dc0:	00800184 	movi	r2,6
   13dc4:	18801015 	stw	r2,64(r3)
   13dc8:	00820034 	movhi	r2,2048
   13dcc:	108a0804 	addi	r2,r2,10272
   13dd0:	10800d17 	ldw	r2,52(r2)
   13dd4:	10800868 	cmpgeui	r2,r2,33
   13dd8:	1000041e 	bne	r2,zero,13dec <alt_sys_init+0x148>
   13ddc:	00c20034 	movhi	r3,2048
   13de0:	18ca0804 	addi	r3,r3,10272
   13de4:	008007c4 	movi	r2,31
   13de8:	18801115 	stw	r2,68(r3)
   13dec:	01020034 	movhi	r4,2048
   13df0:	210a0804 	addi	r4,r4,10272
   13df4:	00189500 	call	18950 <alt_up_char_buffer_init>
   13df8:	01020034 	movhi	r4,2048
   13dfc:	210a0804 	addi	r4,r4,10272
   13e00:	00140100 	call	14010 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
   13e04:	00820034 	movhi	r2,2048
   13e08:	108a1a04 	addi	r2,r2,10344
   13e0c:	10800a17 	ldw	r2,40(r2)
   13e10:	10800017 	ldw	r2,0(r2)
   13e14:	1007883a 	mov	r3,r2
   13e18:	00820034 	movhi	r2,2048
   13e1c:	108a1a04 	addi	r2,r2,10344
   13e20:	10c00b15 	stw	r3,44(r2)
   13e24:	00820034 	movhi	r2,2048
   13e28:	108a1a04 	addi	r2,r2,10344
   13e2c:	10800a17 	ldw	r2,40(r2)
   13e30:	10800104 	addi	r2,r2,4
   13e34:	10800017 	ldw	r2,0(r2)
   13e38:	1007883a 	mov	r3,r2
   13e3c:	00820034 	movhi	r2,2048
   13e40:	108a1a04 	addi	r2,r2,10344
   13e44:	10c00c15 	stw	r3,48(r2)
   13e48:	00820034 	movhi	r2,2048
   13e4c:	108a1a04 	addi	r2,r2,10344
   13e50:	10800a17 	ldw	r2,40(r2)
   13e54:	10800204 	addi	r2,r2,8
   13e58:	10800017 	ldw	r2,0(r2)
   13e5c:	10ffffcc 	andi	r3,r2,65535
   13e60:	00820034 	movhi	r2,2048
   13e64:	108a1a04 	addi	r2,r2,10344
   13e68:	10c00f15 	stw	r3,60(r2)
   13e6c:	00820034 	movhi	r2,2048
   13e70:	108a1a04 	addi	r2,r2,10344
   13e74:	10800a17 	ldw	r2,40(r2)
   13e78:	10800204 	addi	r2,r2,8
   13e7c:	10800017 	ldw	r2,0(r2)
   13e80:	1005d43a 	srai	r2,r2,16
   13e84:	10ffffcc 	andi	r3,r2,65535
   13e88:	00820034 	movhi	r2,2048
   13e8c:	108a1a04 	addi	r2,r2,10344
   13e90:	10c01015 	stw	r3,64(r2)
   13e94:	00820034 	movhi	r2,2048
   13e98:	108a1a04 	addi	r2,r2,10344
   13e9c:	10800a17 	ldw	r2,40(r2)
   13ea0:	10800304 	addi	r2,r2,12
   13ea4:	10800017 	ldw	r2,0(r2)
   13ea8:	1005d07a 	srai	r2,r2,1
   13eac:	10c0004c 	andi	r3,r2,1
   13eb0:	00820034 	movhi	r2,2048
   13eb4:	108a1a04 	addi	r2,r2,10344
   13eb8:	10c00d15 	stw	r3,52(r2)
   13ebc:	00820034 	movhi	r2,2048
   13ec0:	108a1a04 	addi	r2,r2,10344
   13ec4:	10800a17 	ldw	r2,40(r2)
   13ec8:	10800304 	addi	r2,r2,12
   13ecc:	10800017 	ldw	r2,0(r2)
   13ed0:	1005d13a 	srai	r2,r2,4
   13ed4:	10c003cc 	andi	r3,r2,15
   13ed8:	00820034 	movhi	r2,2048
   13edc:	108a1a04 	addi	r2,r2,10344
   13ee0:	10c00e15 	stw	r3,56(r2)
   13ee4:	00820034 	movhi	r2,2048
   13ee8:	108a1a04 	addi	r2,r2,10344
   13eec:	10800a17 	ldw	r2,40(r2)
   13ef0:	10800304 	addi	r2,r2,12
   13ef4:	10800017 	ldw	r2,0(r2)
   13ef8:	1005d43a 	srai	r2,r2,16
   13efc:	1007883a 	mov	r3,r2
   13f00:	00bfffc4 	movi	r2,-1
   13f04:	1884703a 	and	r2,r3,r2
   13f08:	e0bfff45 	stb	r2,-3(fp)
   13f0c:	00820034 	movhi	r2,2048
   13f10:	108a1a04 	addi	r2,r2,10344
   13f14:	10800a17 	ldw	r2,40(r2)
   13f18:	10800304 	addi	r2,r2,12
   13f1c:	10800017 	ldw	r2,0(r2)
   13f20:	1005d63a 	srai	r2,r2,24
   13f24:	1007883a 	mov	r3,r2
   13f28:	00bfffc4 	movi	r2,-1
   13f2c:	1884703a 	and	r2,r3,r2
   13f30:	e0bfff05 	stb	r2,-4(fp)
   13f34:	00820034 	movhi	r2,2048
   13f38:	108a1a04 	addi	r2,r2,10344
   13f3c:	10800e17 	ldw	r2,56(r2)
   13f40:	10800058 	cmpnei	r2,r2,1
   13f44:	1000041e 	bne	r2,zero,13f58 <alt_sys_init+0x2b4>
   13f48:	00820034 	movhi	r2,2048
   13f4c:	108a1a04 	addi	r2,r2,10344
   13f50:	10001115 	stw	zero,68(r2)
   13f54:	00000e06 	br	13f90 <alt_sys_init+0x2ec>
   13f58:	00820034 	movhi	r2,2048
   13f5c:	108a1a04 	addi	r2,r2,10344
   13f60:	10800e17 	ldw	r2,56(r2)
   13f64:	10800098 	cmpnei	r2,r2,2
   13f68:	1000051e 	bne	r2,zero,13f80 <alt_sys_init+0x2dc>
   13f6c:	00c20034 	movhi	r3,2048
   13f70:	18ca1a04 	addi	r3,r3,10344
   13f74:	00800044 	movi	r2,1
   13f78:	18801115 	stw	r2,68(r3)
   13f7c:	00000406 	br	13f90 <alt_sys_init+0x2ec>
   13f80:	00c20034 	movhi	r3,2048
   13f84:	18ca1a04 	addi	r3,r3,10344
   13f88:	00800084 	movi	r2,2
   13f8c:	18801115 	stw	r2,68(r3)
   13f90:	e0ffff43 	ldbu	r3,-3(fp)
   13f94:	00800804 	movi	r2,32
   13f98:	10c7c83a 	sub	r3,r2,r3
   13f9c:	00bfffc4 	movi	r2,-1
   13fa0:	10c6d83a 	srl	r3,r2,r3
   13fa4:	00820034 	movhi	r2,2048
   13fa8:	108a1a04 	addi	r2,r2,10344
   13fac:	10c01215 	stw	r3,72(r2)
   13fb0:	e0ffff43 	ldbu	r3,-3(fp)
   13fb4:	00820034 	movhi	r2,2048
   13fb8:	108a1a04 	addi	r2,r2,10344
   13fbc:	10801117 	ldw	r2,68(r2)
   13fc0:	1887883a 	add	r3,r3,r2
   13fc4:	00820034 	movhi	r2,2048
   13fc8:	108a1a04 	addi	r2,r2,10344
   13fcc:	10c01315 	stw	r3,76(r2)
   13fd0:	e0ffff03 	ldbu	r3,-4(fp)
   13fd4:	00800804 	movi	r2,32
   13fd8:	10c7c83a 	sub	r3,r2,r3
   13fdc:	00bfffc4 	movi	r2,-1
   13fe0:	10c6d83a 	srl	r3,r2,r3
   13fe4:	00820034 	movhi	r2,2048
   13fe8:	108a1a04 	addi	r2,r2,10344
   13fec:	10c01415 	stw	r3,80(r2)
   13ff0:	01020034 	movhi	r4,2048
   13ff4:	210a1a04 	addi	r4,r4,10344
   13ff8:	00140100 	call	14010 <alt_dev_reg>
}
   13ffc:	e037883a 	mov	sp,fp
   14000:	dfc00117 	ldw	ra,4(sp)
   14004:	df000017 	ldw	fp,0(sp)
   14008:	dec00204 	addi	sp,sp,8
   1400c:	f800283a 	ret

00014010 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14010:	defffd04 	addi	sp,sp,-12
   14014:	dfc00215 	stw	ra,8(sp)
   14018:	df000115 	stw	fp,4(sp)
   1401c:	df000104 	addi	fp,sp,4
   14020:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14024:	e13fff17 	ldw	r4,-4(fp)
   14028:	01420034 	movhi	r5,2048
   1402c:	294a4304 	addi	r5,r5,10508
   14030:	001a38c0 	call	1a38c <alt_dev_llist_insert>
}
   14034:	e037883a 	mov	sp,fp
   14038:	dfc00117 	ldw	ra,4(sp)
   1403c:	df000017 	ldw	fp,0(sp)
   14040:	dec00204 	addi	sp,sp,8
   14044:	f800283a 	ret

00014048 <alt_flash_cfi_init>:
   14048:	defffc04 	addi	sp,sp,-16
   1404c:	dfc00315 	stw	ra,12(sp)
   14050:	df000215 	stw	fp,8(sp)
   14054:	df000204 	addi	fp,sp,8
   14058:	e13fff15 	stw	r4,-4(fp)
   1405c:	e03ffe15 	stw	zero,-8(fp)
   14060:	e13fff17 	ldw	r4,-4(fp)
   14064:	00155400 	call	15540 <alt_read_cfi_width>
   14068:	e0bffe15 	stw	r2,-8(fp)
   1406c:	e0bffe17 	ldw	r2,-8(fp)
   14070:	1004c03a 	cmpne	r2,r2,zero
   14074:	1000031e 	bne	r2,zero,14084 <alt_flash_cfi_init+0x3c>
   14078:	e13fff17 	ldw	r4,-4(fp)
   1407c:	0014c580 	call	14c58 <alt_set_flash_width_func>
   14080:	e0bffe15 	stw	r2,-8(fp)
   14084:	e0bffe17 	ldw	r2,-8(fp)
   14088:	1004c03a 	cmpne	r2,r2,zero
   1408c:	1000031e 	bne	r2,zero,1409c <alt_flash_cfi_init+0x54>
   14090:	e13fff17 	ldw	r4,-4(fp)
   14094:	0014f600 	call	14f60 <alt_read_cfi_table>
   14098:	e0bffe15 	stw	r2,-8(fp)
   1409c:	e0bffe17 	ldw	r2,-8(fp)
   140a0:	1004c03a 	cmpne	r2,r2,zero
   140a4:	1000031e 	bne	r2,zero,140b4 <alt_flash_cfi_init+0x6c>
   140a8:	e13fff17 	ldw	r4,-4(fp)
   140ac:	0014e380 	call	14e38 <alt_set_flash_algorithm_func>
   140b0:	e0bffe15 	stw	r2,-8(fp)
   140b4:	e0bffe17 	ldw	r2,-8(fp)
   140b8:	1004c03a 	cmpne	r2,r2,zero
   140bc:	1000031e 	bne	r2,zero,140cc <alt_flash_cfi_init+0x84>
   140c0:	e13fff17 	ldw	r4,-4(fp)
   140c4:	00140e40 	call	140e4 <alt_flash_device_register>
   140c8:	e0bffe15 	stw	r2,-8(fp)
   140cc:	e0bffe17 	ldw	r2,-8(fp)
   140d0:	e037883a 	mov	sp,fp
   140d4:	dfc00117 	ldw	ra,4(sp)
   140d8:	df000017 	ldw	fp,0(sp)
   140dc:	dec00204 	addi	sp,sp,8
   140e0:	f800283a 	ret

000140e4 <alt_flash_device_register>:
   140e4:	defffd04 	addi	sp,sp,-12
   140e8:	dfc00215 	stw	ra,8(sp)
   140ec:	df000115 	stw	fp,4(sp)
   140f0:	df000104 	addi	fp,sp,4
   140f4:	e13fff15 	stw	r4,-4(fp)
   140f8:	e13fff17 	ldw	r4,-4(fp)
   140fc:	01420034 	movhi	r5,2048
   14100:	294a4a04 	addi	r5,r5,10536
   14104:	001a38c0 	call	1a38c <alt_dev_llist_insert>
   14108:	e037883a 	mov	sp,fp
   1410c:	dfc00117 	ldw	ra,4(sp)
   14110:	df000017 	ldw	fp,0(sp)
   14114:	dec00204 	addi	sp,sp,8
   14118:	f800283a 	ret

0001411c <alt_flash_cfi_write>:
   1411c:	deffef04 	addi	sp,sp,-68
   14120:	dfc01015 	stw	ra,64(sp)
   14124:	df000f15 	stw	fp,60(sp)
   14128:	df000f04 	addi	fp,sp,60
   1412c:	e13ffa15 	stw	r4,-24(fp)
   14130:	e17ffb15 	stw	r5,-20(fp)
   14134:	e1bffc15 	stw	r6,-16(fp)
   14138:	e1fffd15 	stw	r7,-12(fp)
   1413c:	e03ff915 	stw	zero,-28(fp)
   14140:	e0bffd17 	ldw	r2,-12(fp)
   14144:	e0bff515 	stw	r2,-44(fp)
   14148:	e0bffb17 	ldw	r2,-20(fp)
   1414c:	e0bff315 	stw	r2,-52(fp)
   14150:	e0bffa17 	ldw	r2,-24(fp)
   14154:	e0bff215 	stw	r2,-56(fp)
   14158:	e03ff815 	stw	zero,-32(fp)
   1415c:	00008e06 	br	14398 <alt_flash_cfi_write+0x27c>
   14160:	e0bff817 	ldw	r2,-32(fp)
   14164:	e0fff217 	ldw	r3,-56(fp)
   14168:	1004913a 	slli	r2,r2,4
   1416c:	10c5883a 	add	r2,r2,r3
   14170:	10800d04 	addi	r2,r2,52
   14174:	10c00017 	ldw	r3,0(r2)
   14178:	e0bffb17 	ldw	r2,-20(fp)
   1417c:	10c08316 	blt	r2,r3,1438c <alt_flash_cfi_write+0x270>
   14180:	e0bff817 	ldw	r2,-32(fp)
   14184:	e0fff217 	ldw	r3,-56(fp)
   14188:	1004913a 	slli	r2,r2,4
   1418c:	10c5883a 	add	r2,r2,r3
   14190:	10800d04 	addi	r2,r2,52
   14194:	11000017 	ldw	r4,0(r2)
   14198:	e0bff817 	ldw	r2,-32(fp)
   1419c:	e0fff217 	ldw	r3,-56(fp)
   141a0:	1004913a 	slli	r2,r2,4
   141a4:	10c5883a 	add	r2,r2,r3
   141a8:	10800e04 	addi	r2,r2,56
   141ac:	10800017 	ldw	r2,0(r2)
   141b0:	2087883a 	add	r3,r4,r2
   141b4:	e0bffb17 	ldw	r2,-20(fp)
   141b8:	10c0740e 	bge	r2,r3,1438c <alt_flash_cfi_write+0x270>
   141bc:	e0bff817 	ldw	r2,-32(fp)
   141c0:	e0fff217 	ldw	r3,-56(fp)
   141c4:	1004913a 	slli	r2,r2,4
   141c8:	10c5883a 	add	r2,r2,r3
   141cc:	10800d04 	addi	r2,r2,52
   141d0:	10800017 	ldw	r2,0(r2)
   141d4:	e0bff415 	stw	r2,-48(fp)
   141d8:	e03ff715 	stw	zero,-36(fp)
   141dc:	00006306 	br	1436c <alt_flash_cfi_write+0x250>
   141e0:	e0fffb17 	ldw	r3,-20(fp)
   141e4:	e0bff417 	ldw	r2,-48(fp)
   141e8:	18805416 	blt	r3,r2,1433c <alt_flash_cfi_write+0x220>
   141ec:	e0bff817 	ldw	r2,-32(fp)
   141f0:	e0fff217 	ldw	r3,-56(fp)
   141f4:	1004913a 	slli	r2,r2,4
   141f8:	10c5883a 	add	r2,r2,r3
   141fc:	10801004 	addi	r2,r2,64
   14200:	10c00017 	ldw	r3,0(r2)
   14204:	e0bff417 	ldw	r2,-48(fp)
   14208:	1887883a 	add	r3,r3,r2
   1420c:	e0bffb17 	ldw	r2,-20(fp)
   14210:	10c04a0e 	bge	r2,r3,1433c <alt_flash_cfi_write+0x220>
   14214:	e0bff817 	ldw	r2,-32(fp)
   14218:	e0fff217 	ldw	r3,-56(fp)
   1421c:	1004913a 	slli	r2,r2,4
   14220:	10c5883a 	add	r2,r2,r3
   14224:	10801004 	addi	r2,r2,64
   14228:	10c00017 	ldw	r3,0(r2)
   1422c:	e0bff417 	ldw	r2,-48(fp)
   14230:	1887883a 	add	r3,r3,r2
   14234:	e0bffb17 	ldw	r2,-20(fp)
   14238:	1885c83a 	sub	r2,r3,r2
   1423c:	e0bff615 	stw	r2,-40(fp)
   14240:	e0bff617 	ldw	r2,-40(fp)
   14244:	e0bfff15 	stw	r2,-4(fp)
   14248:	e0fffd17 	ldw	r3,-12(fp)
   1424c:	e0fffe15 	stw	r3,-8(fp)
   14250:	e0bfff17 	ldw	r2,-4(fp)
   14254:	e0fffe17 	ldw	r3,-8(fp)
   14258:	10c0020e 	bge	r2,r3,14264 <alt_flash_cfi_write+0x148>
   1425c:	e0bfff17 	ldw	r2,-4(fp)
   14260:	e0bffe15 	stw	r2,-8(fp)
   14264:	e0fffe17 	ldw	r3,-8(fp)
   14268:	e0fff615 	stw	r3,-40(fp)
   1426c:	e0bff217 	ldw	r2,-56(fp)
   14270:	10800a17 	ldw	r2,40(r2)
   14274:	1007883a 	mov	r3,r2
   14278:	e0bffb17 	ldw	r2,-20(fp)
   1427c:	188b883a 	add	r5,r3,r2
   14280:	e1bff617 	ldw	r6,-40(fp)
   14284:	e13ffc17 	ldw	r4,-16(fp)
   14288:	00082a00 	call	82a0 <memcmp>
   1428c:	1005003a 	cmpeq	r2,r2,zero
   14290:	1000131e 	bne	r2,zero,142e0 <alt_flash_cfi_write+0x1c4>
   14294:	e0bff217 	ldw	r2,-56(fp)
   14298:	10800817 	ldw	r2,32(r2)
   1429c:	e13ff217 	ldw	r4,-56(fp)
   142a0:	e17ff417 	ldw	r5,-48(fp)
   142a4:	103ee83a 	callr	r2
   142a8:	e0bff915 	stw	r2,-28(fp)
   142ac:	e0bff917 	ldw	r2,-28(fp)
   142b0:	1004c03a 	cmpne	r2,r2,zero
   142b4:	10000a1e 	bne	r2,zero,142e0 <alt_flash_cfi_write+0x1c4>
   142b8:	e0bff217 	ldw	r2,-56(fp)
   142bc:	10c00917 	ldw	r3,36(r2)
   142c0:	e13ff217 	ldw	r4,-56(fp)
   142c4:	e0bff617 	ldw	r2,-40(fp)
   142c8:	d8800015 	stw	r2,0(sp)
   142cc:	e17ff417 	ldw	r5,-48(fp)
   142d0:	e1bffb17 	ldw	r6,-20(fp)
   142d4:	e1fffc17 	ldw	r7,-16(fp)
   142d8:	183ee83a 	callr	r3
   142dc:	e0bff915 	stw	r2,-28(fp)
   142e0:	e0fffd17 	ldw	r3,-12(fp)
   142e4:	e0bff617 	ldw	r2,-40(fp)
   142e8:	18802f26 	beq	r3,r2,143a8 <alt_flash_cfi_write+0x28c>
   142ec:	e0bff917 	ldw	r2,-28(fp)
   142f0:	1004c03a 	cmpne	r2,r2,zero
   142f4:	10002c1e 	bne	r2,zero,143a8 <alt_flash_cfi_write+0x28c>
   142f8:	e0fffd17 	ldw	r3,-12(fp)
   142fc:	e0bff617 	ldw	r2,-40(fp)
   14300:	1885c83a 	sub	r2,r3,r2
   14304:	e0bffd15 	stw	r2,-12(fp)
   14308:	e0bff817 	ldw	r2,-32(fp)
   1430c:	e0fff217 	ldw	r3,-56(fp)
   14310:	1004913a 	slli	r2,r2,4
   14314:	10c5883a 	add	r2,r2,r3
   14318:	10801004 	addi	r2,r2,64
   1431c:	10c00017 	ldw	r3,0(r2)
   14320:	e0bff417 	ldw	r2,-48(fp)
   14324:	1885883a 	add	r2,r3,r2
   14328:	e0bffb15 	stw	r2,-20(fp)
   1432c:	e0fffc17 	ldw	r3,-16(fp)
   14330:	e0bff617 	ldw	r2,-40(fp)
   14334:	1885883a 	add	r2,r3,r2
   14338:	e0bffc15 	stw	r2,-16(fp)
   1433c:	e0bff817 	ldw	r2,-32(fp)
   14340:	e0fff217 	ldw	r3,-56(fp)
   14344:	1004913a 	slli	r2,r2,4
   14348:	10c5883a 	add	r2,r2,r3
   1434c:	10801004 	addi	r2,r2,64
   14350:	10c00017 	ldw	r3,0(r2)
   14354:	e0bff417 	ldw	r2,-48(fp)
   14358:	10c5883a 	add	r2,r2,r3
   1435c:	e0bff415 	stw	r2,-48(fp)
   14360:	e0bff717 	ldw	r2,-36(fp)
   14364:	10800044 	addi	r2,r2,1
   14368:	e0bff715 	stw	r2,-36(fp)
   1436c:	e0bff817 	ldw	r2,-32(fp)
   14370:	e0fff217 	ldw	r3,-56(fp)
   14374:	1004913a 	slli	r2,r2,4
   14378:	10c5883a 	add	r2,r2,r3
   1437c:	10800f04 	addi	r2,r2,60
   14380:	10c00017 	ldw	r3,0(r2)
   14384:	e0bff717 	ldw	r2,-36(fp)
   14388:	10ff9516 	blt	r2,r3,141e0 <alt_flash_cfi_write+0xc4>
   1438c:	e0bff817 	ldw	r2,-32(fp)
   14390:	10800044 	addi	r2,r2,1
   14394:	e0bff815 	stw	r2,-32(fp)
   14398:	e0bff217 	ldw	r2,-56(fp)
   1439c:	10c00c17 	ldw	r3,48(r2)
   143a0:	e0bff817 	ldw	r2,-32(fp)
   143a4:	10ff6e16 	blt	r2,r3,14160 <alt_flash_cfi_write+0x44>
   143a8:	e0bff217 	ldw	r2,-56(fp)
   143ac:	10800a17 	ldw	r2,40(r2)
   143b0:	1007883a 	mov	r3,r2
   143b4:	e0bff317 	ldw	r2,-52(fp)
   143b8:	1889883a 	add	r4,r3,r2
   143bc:	e17ff517 	ldw	r5,-44(fp)
   143c0:	001a3140 	call	1a314 <alt_dcache_flush>
   143c4:	e0bff917 	ldw	r2,-28(fp)
   143c8:	e037883a 	mov	sp,fp
   143cc:	dfc00117 	ldw	ra,4(sp)
   143d0:	df000017 	ldw	fp,0(sp)
   143d4:	dec00204 	addi	sp,sp,8
   143d8:	f800283a 	ret

000143dc <alt_flash_cfi_get_info>:
   143dc:	defffa04 	addi	sp,sp,-24
   143e0:	df000515 	stw	fp,20(sp)
   143e4:	df000504 	addi	fp,sp,20
   143e8:	e13ffd15 	stw	r4,-12(fp)
   143ec:	e17ffe15 	stw	r5,-8(fp)
   143f0:	e1bfff15 	stw	r6,-4(fp)
   143f4:	e03ffc15 	stw	zero,-16(fp)
   143f8:	e0bffd17 	ldw	r2,-12(fp)
   143fc:	e0bffb15 	stw	r2,-20(fp)
   14400:	e0bffb17 	ldw	r2,-20(fp)
   14404:	10c00c17 	ldw	r3,48(r2)
   14408:	e0bfff17 	ldw	r2,-4(fp)
   1440c:	10c00015 	stw	r3,0(r2)
   14410:	e0bffb17 	ldw	r2,-20(fp)
   14414:	10800c17 	ldw	r2,48(r2)
   14418:	1004c03a 	cmpne	r2,r2,zero
   1441c:	1000031e 	bne	r2,zero,1442c <alt_flash_cfi_get_info+0x50>
   14420:	00bffec4 	movi	r2,-5
   14424:	e0bffc15 	stw	r2,-16(fp)
   14428:	00000b06 	br	14458 <alt_flash_cfi_get_info+0x7c>
   1442c:	e0bffb17 	ldw	r2,-20(fp)
   14430:	10800c17 	ldw	r2,48(r2)
   14434:	10800250 	cmplti	r2,r2,9
   14438:	1000031e 	bne	r2,zero,14448 <alt_flash_cfi_get_info+0x6c>
   1443c:	00bffd04 	movi	r2,-12
   14440:	e0bffc15 	stw	r2,-16(fp)
   14444:	00000406 	br	14458 <alt_flash_cfi_get_info+0x7c>
   14448:	e0bffb17 	ldw	r2,-20(fp)
   1444c:	10c00d04 	addi	r3,r2,52
   14450:	e0bffe17 	ldw	r2,-8(fp)
   14454:	10c00015 	stw	r3,0(r2)
   14458:	e0bffc17 	ldw	r2,-16(fp)
   1445c:	e037883a 	mov	sp,fp
   14460:	df000017 	ldw	fp,0(sp)
   14464:	dec00104 	addi	sp,sp,4
   14468:	f800283a 	ret

0001446c <alt_flash_cfi_read>:
   1446c:	defff904 	addi	sp,sp,-28
   14470:	dfc00615 	stw	ra,24(sp)
   14474:	df000515 	stw	fp,20(sp)
   14478:	df000504 	addi	fp,sp,20
   1447c:	e13ffc15 	stw	r4,-16(fp)
   14480:	e17ffd15 	stw	r5,-12(fp)
   14484:	e1bffe15 	stw	r6,-8(fp)
   14488:	e1ffff15 	stw	r7,-4(fp)
   1448c:	e0bffc17 	ldw	r2,-16(fp)
   14490:	e0bffb15 	stw	r2,-20(fp)
   14494:	e0bffb17 	ldw	r2,-20(fp)
   14498:	10800a17 	ldw	r2,40(r2)
   1449c:	1007883a 	mov	r3,r2
   144a0:	e0bffd17 	ldw	r2,-12(fp)
   144a4:	1887883a 	add	r3,r3,r2
   144a8:	e1bfff17 	ldw	r6,-4(fp)
   144ac:	e0bffe17 	ldw	r2,-8(fp)
   144b0:	1009883a 	mov	r4,r2
   144b4:	180b883a 	mov	r5,r3
   144b8:	00083140 	call	8314 <memcpy>
   144bc:	0005883a 	mov	r2,zero
   144c0:	e037883a 	mov	sp,fp
   144c4:	dfc00117 	ldw	ra,4(sp)
   144c8:	df000017 	ldw	fp,0(sp)
   144cc:	dec00204 	addi	sp,sp,8
   144d0:	f800283a 	ret

000144d4 <alt_write_value_to_flash>:
   144d4:	defffa04 	addi	sp,sp,-24
   144d8:	df000515 	stw	fp,20(sp)
   144dc:	df000504 	addi	fp,sp,20
   144e0:	e13ffd15 	stw	r4,-12(fp)
   144e4:	e17ffe15 	stw	r5,-8(fp)
   144e8:	e1bfff15 	stw	r6,-4(fp)
   144ec:	e0bffd17 	ldw	r2,-12(fp)
   144f0:	10802e17 	ldw	r2,184(r2)
   144f4:	10800058 	cmpnei	r2,r2,1
   144f8:	10000b1e 	bne	r2,zero,14528 <alt_write_value_to_flash+0x54>
   144fc:	e0bffd17 	ldw	r2,-12(fp)
   14500:	10800a17 	ldw	r2,40(r2)
   14504:	1007883a 	mov	r3,r2
   14508:	e0bffe17 	ldw	r2,-8(fp)
   1450c:	1889883a 	add	r4,r3,r2
   14510:	e0bfff17 	ldw	r2,-4(fp)
   14514:	10800003 	ldbu	r2,0(r2)
   14518:	10c03fcc 	andi	r3,r2,255
   1451c:	2005883a 	mov	r2,r4
   14520:	10c00025 	stbio	r3,0(r2)
   14524:	00004006 	br	14628 <alt_write_value_to_flash+0x154>
   14528:	e0bffd17 	ldw	r2,-12(fp)
   1452c:	10802e17 	ldw	r2,184(r2)
   14530:	10800098 	cmpnei	r2,r2,2
   14534:	1000151e 	bne	r2,zero,1458c <alt_write_value_to_flash+0xb8>
   14538:	e0bfff17 	ldw	r2,-4(fp)
   1453c:	10800003 	ldbu	r2,0(r2)
   14540:	10803fcc 	andi	r2,r2,255
   14544:	e0bffc0d 	sth	r2,-16(fp)
   14548:	e0bfff17 	ldw	r2,-4(fp)
   1454c:	10800044 	addi	r2,r2,1
   14550:	10800003 	ldbu	r2,0(r2)
   14554:	10803fcc 	andi	r2,r2,255
   14558:	1004923a 	slli	r2,r2,8
   1455c:	1007883a 	mov	r3,r2
   14560:	e0bffc0b 	ldhu	r2,-16(fp)
   14564:	1884b03a 	or	r2,r3,r2
   14568:	e0bffc0d 	sth	r2,-16(fp)
   1456c:	e0bffd17 	ldw	r2,-12(fp)
   14570:	10800a17 	ldw	r2,40(r2)
   14574:	1007883a 	mov	r3,r2
   14578:	e0bffe17 	ldw	r2,-8(fp)
   1457c:	1885883a 	add	r2,r3,r2
   14580:	e0fffc0b 	ldhu	r3,-16(fp)
   14584:	10c0002d 	sthio	r3,0(r2)
   14588:	00002706 	br	14628 <alt_write_value_to_flash+0x154>
   1458c:	e0bffd17 	ldw	r2,-12(fp)
   14590:	10802e17 	ldw	r2,184(r2)
   14594:	10800118 	cmpnei	r2,r2,4
   14598:	1000231e 	bne	r2,zero,14628 <alt_write_value_to_flash+0x154>
   1459c:	e0bfff17 	ldw	r2,-4(fp)
   145a0:	10800003 	ldbu	r2,0(r2)
   145a4:	10803fcc 	andi	r2,r2,255
   145a8:	e0bffb15 	stw	r2,-20(fp)
   145ac:	e0bfff17 	ldw	r2,-4(fp)
   145b0:	10800044 	addi	r2,r2,1
   145b4:	10800003 	ldbu	r2,0(r2)
   145b8:	10803fcc 	andi	r2,r2,255
   145bc:	1006923a 	slli	r3,r2,8
   145c0:	e0bffb17 	ldw	r2,-20(fp)
   145c4:	10c4b03a 	or	r2,r2,r3
   145c8:	e0bffb15 	stw	r2,-20(fp)
   145cc:	e0bfff17 	ldw	r2,-4(fp)
   145d0:	10800084 	addi	r2,r2,2
   145d4:	10800003 	ldbu	r2,0(r2)
   145d8:	10803fcc 	andi	r2,r2,255
   145dc:	1006943a 	slli	r3,r2,16
   145e0:	e0bffb17 	ldw	r2,-20(fp)
   145e4:	10c4b03a 	or	r2,r2,r3
   145e8:	e0bffb15 	stw	r2,-20(fp)
   145ec:	e0bfff17 	ldw	r2,-4(fp)
   145f0:	108000c4 	addi	r2,r2,3
   145f4:	10800003 	ldbu	r2,0(r2)
   145f8:	10803fcc 	andi	r2,r2,255
   145fc:	1006963a 	slli	r3,r2,24
   14600:	e0bffb17 	ldw	r2,-20(fp)
   14604:	10c4b03a 	or	r2,r2,r3
   14608:	e0bffb15 	stw	r2,-20(fp)
   1460c:	e0bffd17 	ldw	r2,-12(fp)
   14610:	10800a17 	ldw	r2,40(r2)
   14614:	1007883a 	mov	r3,r2
   14618:	e0bffe17 	ldw	r2,-8(fp)
   1461c:	1885883a 	add	r2,r3,r2
   14620:	e0fffb17 	ldw	r3,-20(fp)
   14624:	10c00035 	stwio	r3,0(r2)
   14628:	e037883a 	mov	sp,fp
   1462c:	df000017 	ldw	fp,0(sp)
   14630:	dec00104 	addi	sp,sp,4
   14634:	f800283a 	ret

00014638 <alt_flash_program_block>:
   14638:	defff304 	addi	sp,sp,-52
   1463c:	dfc00c15 	stw	ra,48(sp)
   14640:	df000b15 	stw	fp,44(sp)
   14644:	df000b04 	addi	fp,sp,44
   14648:	e13ffc15 	stw	r4,-16(fp)
   1464c:	e17ffd15 	stw	r5,-12(fp)
   14650:	e1bffe15 	stw	r6,-8(fp)
   14654:	e1ffff15 	stw	r7,-4(fp)
   14658:	e03ffa15 	stw	zero,-24(fp)
   1465c:	e0bffc17 	ldw	r2,-16(fp)
   14660:	10800a17 	ldw	r2,40(r2)
   14664:	1007883a 	mov	r3,r2
   14668:	e0bffd17 	ldw	r2,-12(fp)
   1466c:	1885883a 	add	r2,r3,r2
   14670:	1009883a 	mov	r4,r2
   14674:	e0bffc17 	ldw	r2,-16(fp)
   14678:	10c02e17 	ldw	r3,184(r2)
   1467c:	20c5283a 	div	r2,r4,r3
   14680:	10c5383a 	mul	r2,r2,r3
   14684:	2085c83a 	sub	r2,r4,r2
   14688:	e0bff915 	stw	r2,-28(fp)
   1468c:	e0bff917 	ldw	r2,-28(fp)
   14690:	1005003a 	cmpeq	r2,r2,zero
   14694:	10003a1e 	bne	r2,zero,14780 <alt_flash_program_block+0x148>
   14698:	e0bffc17 	ldw	r2,-16(fp)
   1469c:	10c02e17 	ldw	r3,184(r2)
   146a0:	e0bff917 	ldw	r2,-28(fp)
   146a4:	1885c83a 	sub	r2,r3,r2
   146a8:	e0bff815 	stw	r2,-32(fp)
   146ac:	e03ff615 	stw	zero,-40(fp)
   146b0:	00001206 	br	146fc <alt_flash_program_block+0xc4>
   146b4:	e17ff617 	ldw	r5,-40(fp)
   146b8:	e0bffc17 	ldw	r2,-16(fp)
   146bc:	10800a17 	ldw	r2,40(r2)
   146c0:	1009883a 	mov	r4,r2
   146c4:	e0fffd17 	ldw	r3,-12(fp)
   146c8:	e0bff917 	ldw	r2,-28(fp)
   146cc:	1887c83a 	sub	r3,r3,r2
   146d0:	e0bff617 	ldw	r2,-40(fp)
   146d4:	1885883a 	add	r2,r3,r2
   146d8:	2085883a 	add	r2,r4,r2
   146dc:	10800023 	ldbuio	r2,0(r2)
   146e0:	1007883a 	mov	r3,r2
   146e4:	e0bffb04 	addi	r2,fp,-20
   146e8:	1145883a 	add	r2,r2,r5
   146ec:	10c00005 	stb	r3,0(r2)
   146f0:	e0bff617 	ldw	r2,-40(fp)
   146f4:	10800044 	addi	r2,r2,1
   146f8:	e0bff615 	stw	r2,-40(fp)
   146fc:	e0fff617 	ldw	r3,-40(fp)
   14700:	e0bff917 	ldw	r2,-28(fp)
   14704:	18bfeb16 	blt	r3,r2,146b4 <alt_flash_program_block+0x7c>
   14708:	e03ff615 	stw	zero,-40(fp)
   1470c:	00000e06 	br	14748 <alt_flash_program_block+0x110>
   14710:	e0fff917 	ldw	r3,-28(fp)
   14714:	e0bff617 	ldw	r2,-40(fp)
   14718:	1889883a 	add	r4,r3,r2
   1471c:	e0bff617 	ldw	r2,-40(fp)
   14720:	1007883a 	mov	r3,r2
   14724:	e0bffe17 	ldw	r2,-8(fp)
   14728:	1885883a 	add	r2,r3,r2
   1472c:	10c00003 	ldbu	r3,0(r2)
   14730:	e0bffb04 	addi	r2,fp,-20
   14734:	1105883a 	add	r2,r2,r4
   14738:	10c00005 	stb	r3,0(r2)
   1473c:	e0bff617 	ldw	r2,-40(fp)
   14740:	10800044 	addi	r2,r2,1
   14744:	e0bff615 	stw	r2,-40(fp)
   14748:	e0fff617 	ldw	r3,-40(fp)
   1474c:	e0bff817 	ldw	r2,-32(fp)
   14750:	18bfef16 	blt	r3,r2,14710 <alt_flash_program_block+0xd8>
   14754:	e0fffd17 	ldw	r3,-12(fp)
   14758:	e0bff917 	ldw	r2,-28(fp)
   1475c:	188bc83a 	sub	r5,r3,r2
   14760:	e1bffb04 	addi	r6,fp,-20
   14764:	e0800217 	ldw	r2,8(fp)
   14768:	e13ffc17 	ldw	r4,-16(fp)
   1476c:	103ee83a 	callr	r2
   14770:	e0bffa15 	stw	r2,-24(fp)
   14774:	e0bff817 	ldw	r2,-32(fp)
   14778:	e0bff615 	stw	r2,-40(fp)
   1477c:	00000106 	br	14784 <alt_flash_program_block+0x14c>
   14780:	e03ff615 	stw	zero,-40(fp)
   14784:	e0fffd17 	ldw	r3,-12(fp)
   14788:	e0bfff17 	ldw	r2,-4(fp)
   1478c:	1889883a 	add	r4,r3,r2
   14790:	e0bffc17 	ldw	r2,-16(fp)
   14794:	10c02e17 	ldw	r3,184(r2)
   14798:	20c5283a 	div	r2,r4,r3
   1479c:	10c5383a 	mul	r2,r2,r3
   147a0:	2085c83a 	sub	r2,r4,r2
   147a4:	e0bff715 	stw	r2,-36(fp)
   147a8:	00001006 	br	147ec <alt_flash_program_block+0x1b4>
   147ac:	e0fffd17 	ldw	r3,-12(fp)
   147b0:	e0bff617 	ldw	r2,-40(fp)
   147b4:	188b883a 	add	r5,r3,r2
   147b8:	e0bff617 	ldw	r2,-40(fp)
   147bc:	1007883a 	mov	r3,r2
   147c0:	e0bffe17 	ldw	r2,-8(fp)
   147c4:	188d883a 	add	r6,r3,r2
   147c8:	e0800217 	ldw	r2,8(fp)
   147cc:	e13ffc17 	ldw	r4,-16(fp)
   147d0:	103ee83a 	callr	r2
   147d4:	e0bffa15 	stw	r2,-24(fp)
   147d8:	e0bffc17 	ldw	r2,-16(fp)
   147dc:	10c02e17 	ldw	r3,184(r2)
   147e0:	e0bff617 	ldw	r2,-40(fp)
   147e4:	10c5883a 	add	r2,r2,r3
   147e8:	e0bff615 	stw	r2,-40(fp)
   147ec:	e0bffa17 	ldw	r2,-24(fp)
   147f0:	1004c03a 	cmpne	r2,r2,zero
   147f4:	1000051e 	bne	r2,zero,1480c <alt_flash_program_block+0x1d4>
   147f8:	e0ffff17 	ldw	r3,-4(fp)
   147fc:	e0bff717 	ldw	r2,-36(fp)
   14800:	1887c83a 	sub	r3,r3,r2
   14804:	e0bff617 	ldw	r2,-40(fp)
   14808:	10ffe816 	blt	r2,r3,147ac <alt_flash_program_block+0x174>
   1480c:	e0bff717 	ldw	r2,-36(fp)
   14810:	1005003a 	cmpeq	r2,r2,zero
   14814:	10003c1e 	bne	r2,zero,14908 <alt_flash_program_block+0x2d0>
   14818:	e0bffa17 	ldw	r2,-24(fp)
   1481c:	1004c03a 	cmpne	r2,r2,zero
   14820:	1000391e 	bne	r2,zero,14908 <alt_flash_program_block+0x2d0>
   14824:	e0bffc17 	ldw	r2,-16(fp)
   14828:	10c02e17 	ldw	r3,184(r2)
   1482c:	e0bff717 	ldw	r2,-36(fp)
   14830:	1885c83a 	sub	r2,r3,r2
   14834:	e0bff915 	stw	r2,-28(fp)
   14838:	e03ff515 	stw	zero,-44(fp)
   1483c:	00000e06 	br	14878 <alt_flash_program_block+0x240>
   14840:	e13ff517 	ldw	r4,-44(fp)
   14844:	e0bff617 	ldw	r2,-40(fp)
   14848:	1007883a 	mov	r3,r2
   1484c:	e0bffe17 	ldw	r2,-8(fp)
   14850:	1887883a 	add	r3,r3,r2
   14854:	e0bff517 	ldw	r2,-44(fp)
   14858:	1885883a 	add	r2,r3,r2
   1485c:	10c00003 	ldbu	r3,0(r2)
   14860:	e0bffb04 	addi	r2,fp,-20
   14864:	1105883a 	add	r2,r2,r4
   14868:	10c00005 	stb	r3,0(r2)
   1486c:	e0bff517 	ldw	r2,-44(fp)
   14870:	10800044 	addi	r2,r2,1
   14874:	e0bff515 	stw	r2,-44(fp)
   14878:	e0fff517 	ldw	r3,-44(fp)
   1487c:	e0bff717 	ldw	r2,-36(fp)
   14880:	18bfef16 	blt	r3,r2,14840 <alt_flash_program_block+0x208>
   14884:	e03ff515 	stw	zero,-44(fp)
   14888:	00001406 	br	148dc <alt_flash_program_block+0x2a4>
   1488c:	e0fff717 	ldw	r3,-36(fp)
   14890:	e0bff517 	ldw	r2,-44(fp)
   14894:	188b883a 	add	r5,r3,r2
   14898:	e0bffc17 	ldw	r2,-16(fp)
   1489c:	10800a17 	ldw	r2,40(r2)
   148a0:	1009883a 	mov	r4,r2
   148a4:	e0fffd17 	ldw	r3,-12(fp)
   148a8:	e0bfff17 	ldw	r2,-4(fp)
   148ac:	1887883a 	add	r3,r3,r2
   148b0:	e0bff517 	ldw	r2,-44(fp)
   148b4:	1885883a 	add	r2,r3,r2
   148b8:	2085883a 	add	r2,r4,r2
   148bc:	10800023 	ldbuio	r2,0(r2)
   148c0:	1007883a 	mov	r3,r2
   148c4:	e0bffb04 	addi	r2,fp,-20
   148c8:	1145883a 	add	r2,r2,r5
   148cc:	10c00005 	stb	r3,0(r2)
   148d0:	e0bff517 	ldw	r2,-44(fp)
   148d4:	10800044 	addi	r2,r2,1
   148d8:	e0bff515 	stw	r2,-44(fp)
   148dc:	e0fff517 	ldw	r3,-44(fp)
   148e0:	e0bff917 	ldw	r2,-28(fp)
   148e4:	18bfe916 	blt	r3,r2,1488c <alt_flash_program_block+0x254>
   148e8:	e0fffd17 	ldw	r3,-12(fp)
   148ec:	e0bff617 	ldw	r2,-40(fp)
   148f0:	188b883a 	add	r5,r3,r2
   148f4:	e1bffb04 	addi	r6,fp,-20
   148f8:	e0800217 	ldw	r2,8(fp)
   148fc:	e13ffc17 	ldw	r4,-16(fp)
   14900:	103ee83a 	callr	r2
   14904:	e0bffa15 	stw	r2,-24(fp)
   14908:	e0bffa17 	ldw	r2,-24(fp)
   1490c:	e037883a 	mov	sp,fp
   14910:	dfc00117 	ldw	ra,4(sp)
   14914:	df000017 	ldw	fp,0(sp)
   14918:	dec00204 	addi	sp,sp,8
   1491c:	f800283a 	ret

00014920 <alt_read_query_entry_8bit>:
   14920:	defffd04 	addi	sp,sp,-12
   14924:	df000215 	stw	fp,8(sp)
   14928:	df000204 	addi	fp,sp,8
   1492c:	e13ffe15 	stw	r4,-8(fp)
   14930:	e17fff15 	stw	r5,-4(fp)
   14934:	e0bffe17 	ldw	r2,-8(fp)
   14938:	10800a17 	ldw	r2,40(r2)
   1493c:	1007883a 	mov	r3,r2
   14940:	e0bfff17 	ldw	r2,-4(fp)
   14944:	1885883a 	add	r2,r3,r2
   14948:	10800023 	ldbuio	r2,0(r2)
   1494c:	10803fcc 	andi	r2,r2,255
   14950:	e037883a 	mov	sp,fp
   14954:	df000017 	ldw	fp,0(sp)
   14958:	dec00104 	addi	sp,sp,4
   1495c:	f800283a 	ret

00014960 <alt_read_query_entry_16bit>:
   14960:	defffd04 	addi	sp,sp,-12
   14964:	df000215 	stw	fp,8(sp)
   14968:	df000204 	addi	fp,sp,8
   1496c:	e13ffe15 	stw	r4,-8(fp)
   14970:	e17fff15 	stw	r5,-4(fp)
   14974:	e0bffe17 	ldw	r2,-8(fp)
   14978:	10800a17 	ldw	r2,40(r2)
   1497c:	1007883a 	mov	r3,r2
   14980:	e0bfff17 	ldw	r2,-4(fp)
   14984:	1085883a 	add	r2,r2,r2
   14988:	1885883a 	add	r2,r3,r2
   1498c:	1080002b 	ldhuio	r2,0(r2)
   14990:	10803fcc 	andi	r2,r2,255
   14994:	e037883a 	mov	sp,fp
   14998:	df000017 	ldw	fp,0(sp)
   1499c:	dec00104 	addi	sp,sp,4
   149a0:	f800283a 	ret

000149a4 <alt_read_query_entry_32bit>:
   149a4:	defffd04 	addi	sp,sp,-12
   149a8:	df000215 	stw	fp,8(sp)
   149ac:	df000204 	addi	fp,sp,8
   149b0:	e13ffe15 	stw	r4,-8(fp)
   149b4:	e17fff15 	stw	r5,-4(fp)
   149b8:	e0bffe17 	ldw	r2,-8(fp)
   149bc:	10800a17 	ldw	r2,40(r2)
   149c0:	1007883a 	mov	r3,r2
   149c4:	e0bfff17 	ldw	r2,-4(fp)
   149c8:	1085883a 	add	r2,r2,r2
   149cc:	1085883a 	add	r2,r2,r2
   149d0:	1885883a 	add	r2,r3,r2
   149d4:	10800037 	ldwio	r2,0(r2)
   149d8:	10803fcc 	andi	r2,r2,255
   149dc:	e037883a 	mov	sp,fp
   149e0:	df000017 	ldw	fp,0(sp)
   149e4:	dec00104 	addi	sp,sp,4
   149e8:	f800283a 	ret

000149ec <alt_write_flash_command_8bit_device_8bit_mode>:
   149ec:	defffc04 	addi	sp,sp,-16
   149f0:	df000315 	stw	fp,12(sp)
   149f4:	df000304 	addi	fp,sp,12
   149f8:	e13ffd15 	stw	r4,-12(fp)
   149fc:	e17ffe15 	stw	r5,-8(fp)
   14a00:	e1bfff05 	stb	r6,-4(fp)
   14a04:	e0fffd17 	ldw	r3,-12(fp)
   14a08:	e0bffe17 	ldw	r2,-8(fp)
   14a0c:	1885883a 	add	r2,r3,r2
   14a10:	e0ffff03 	ldbu	r3,-4(fp)
   14a14:	10c00025 	stbio	r3,0(r2)
   14a18:	e037883a 	mov	sp,fp
   14a1c:	df000017 	ldw	fp,0(sp)
   14a20:	dec00104 	addi	sp,sp,4
   14a24:	f800283a 	ret

00014a28 <alt_write_flash_command_16bit_device_8bit_mode>:
   14a28:	defffc04 	addi	sp,sp,-16
   14a2c:	df000315 	stw	fp,12(sp)
   14a30:	df000304 	addi	fp,sp,12
   14a34:	e13ffd15 	stw	r4,-12(fp)
   14a38:	e17ffe15 	stw	r5,-8(fp)
   14a3c:	e1bfff05 	stb	r6,-4(fp)
   14a40:	e0bffe17 	ldw	r2,-8(fp)
   14a44:	1080004c 	andi	r2,r2,1
   14a48:	10803fcc 	andi	r2,r2,255
   14a4c:	1005003a 	cmpeq	r2,r2,zero
   14a50:	1000081e 	bne	r2,zero,14a74 <alt_write_flash_command_16bit_device_8bit_mode+0x4c>
   14a54:	e0bffe17 	ldw	r2,-8(fp)
   14a58:	1085883a 	add	r2,r2,r2
   14a5c:	1007883a 	mov	r3,r2
   14a60:	e0bffd17 	ldw	r2,-12(fp)
   14a64:	1885883a 	add	r2,r3,r2
   14a68:	e0ffff03 	ldbu	r3,-4(fp)
   14a6c:	10c00025 	stbio	r3,0(r2)
   14a70:	00000806 	br	14a94 <alt_write_flash_command_16bit_device_8bit_mode+0x6c>
   14a74:	e0bffe17 	ldw	r2,-8(fp)
   14a78:	1085883a 	add	r2,r2,r2
   14a7c:	1007883a 	mov	r3,r2
   14a80:	e0bffd17 	ldw	r2,-12(fp)
   14a84:	1885883a 	add	r2,r3,r2
   14a88:	10800044 	addi	r2,r2,1
   14a8c:	e0ffff03 	ldbu	r3,-4(fp)
   14a90:	10c00025 	stbio	r3,0(r2)
   14a94:	e037883a 	mov	sp,fp
   14a98:	df000017 	ldw	fp,0(sp)
   14a9c:	dec00104 	addi	sp,sp,4
   14aa0:	f800283a 	ret

00014aa4 <alt_write_flash_command_32bit_device_8bit_mode>:
   14aa4:	defffc04 	addi	sp,sp,-16
   14aa8:	df000315 	stw	fp,12(sp)
   14aac:	df000304 	addi	fp,sp,12
   14ab0:	e13ffd15 	stw	r4,-12(fp)
   14ab4:	e17ffe15 	stw	r5,-8(fp)
   14ab8:	e1bfff05 	stb	r6,-4(fp)
   14abc:	e0bffe17 	ldw	r2,-8(fp)
   14ac0:	1085883a 	add	r2,r2,r2
   14ac4:	1085883a 	add	r2,r2,r2
   14ac8:	1007883a 	mov	r3,r2
   14acc:	e0bffd17 	ldw	r2,-12(fp)
   14ad0:	1885883a 	add	r2,r3,r2
   14ad4:	e0ffff03 	ldbu	r3,-4(fp)
   14ad8:	10c00025 	stbio	r3,0(r2)
   14adc:	e037883a 	mov	sp,fp
   14ae0:	df000017 	ldw	fp,0(sp)
   14ae4:	dec00104 	addi	sp,sp,4
   14ae8:	f800283a 	ret

00014aec <alt_write_flash_command_16bit_device_16bit_mode>:
   14aec:	defffc04 	addi	sp,sp,-16
   14af0:	df000315 	stw	fp,12(sp)
   14af4:	df000304 	addi	fp,sp,12
   14af8:	e13ffd15 	stw	r4,-12(fp)
   14afc:	e17ffe15 	stw	r5,-8(fp)
   14b00:	e1bfff05 	stb	r6,-4(fp)
   14b04:	e0bffe17 	ldw	r2,-8(fp)
   14b08:	1085883a 	add	r2,r2,r2
   14b0c:	1007883a 	mov	r3,r2
   14b10:	e0bffd17 	ldw	r2,-12(fp)
   14b14:	1885883a 	add	r2,r3,r2
   14b18:	e0ffff03 	ldbu	r3,-4(fp)
   14b1c:	10c0002d 	sthio	r3,0(r2)
   14b20:	e037883a 	mov	sp,fp
   14b24:	df000017 	ldw	fp,0(sp)
   14b28:	dec00104 	addi	sp,sp,4
   14b2c:	f800283a 	ret

00014b30 <alt_write_flash_command_32bit_device_16bit_mode>:
   14b30:	defffc04 	addi	sp,sp,-16
   14b34:	df000315 	stw	fp,12(sp)
   14b38:	df000304 	addi	fp,sp,12
   14b3c:	e13ffd15 	stw	r4,-12(fp)
   14b40:	e17ffe15 	stw	r5,-8(fp)
   14b44:	e1bfff05 	stb	r6,-4(fp)
   14b48:	e0bffe17 	ldw	r2,-8(fp)
   14b4c:	1085883a 	add	r2,r2,r2
   14b50:	1085883a 	add	r2,r2,r2
   14b54:	1007883a 	mov	r3,r2
   14b58:	e0bffd17 	ldw	r2,-12(fp)
   14b5c:	1885883a 	add	r2,r3,r2
   14b60:	e0ffff03 	ldbu	r3,-4(fp)
   14b64:	10c0002d 	sthio	r3,0(r2)
   14b68:	e037883a 	mov	sp,fp
   14b6c:	df000017 	ldw	fp,0(sp)
   14b70:	dec00104 	addi	sp,sp,4
   14b74:	f800283a 	ret

00014b78 <alt_write_flash_command_32bit_device_32bit_mode>:
   14b78:	defffc04 	addi	sp,sp,-16
   14b7c:	df000315 	stw	fp,12(sp)
   14b80:	df000304 	addi	fp,sp,12
   14b84:	e13ffd15 	stw	r4,-12(fp)
   14b88:	e17ffe15 	stw	r5,-8(fp)
   14b8c:	e1bfff05 	stb	r6,-4(fp)
   14b90:	e0bffe17 	ldw	r2,-8(fp)
   14b94:	1085883a 	add	r2,r2,r2
   14b98:	1085883a 	add	r2,r2,r2
   14b9c:	1007883a 	mov	r3,r2
   14ba0:	e0bffd17 	ldw	r2,-12(fp)
   14ba4:	1885883a 	add	r2,r3,r2
   14ba8:	e0ffff03 	ldbu	r3,-4(fp)
   14bac:	10c00035 	stwio	r3,0(r2)
   14bb0:	e037883a 	mov	sp,fp
   14bb4:	df000017 	ldw	fp,0(sp)
   14bb8:	dec00104 	addi	sp,sp,4
   14bbc:	f800283a 	ret

00014bc0 <alt_write_native_8bit>:
   14bc0:	defffd04 	addi	sp,sp,-12
   14bc4:	df000215 	stw	fp,8(sp)
   14bc8:	df000204 	addi	fp,sp,8
   14bcc:	e13ffe15 	stw	r4,-8(fp)
   14bd0:	e17fff15 	stw	r5,-4(fp)
   14bd4:	e0bfff17 	ldw	r2,-4(fp)
   14bd8:	10c03fcc 	andi	r3,r2,255
   14bdc:	e0bffe17 	ldw	r2,-8(fp)
   14be0:	10c00025 	stbio	r3,0(r2)
   14be4:	e037883a 	mov	sp,fp
   14be8:	df000017 	ldw	fp,0(sp)
   14bec:	dec00104 	addi	sp,sp,4
   14bf0:	f800283a 	ret

00014bf4 <alt_write_native_16bit>:
   14bf4:	defffd04 	addi	sp,sp,-12
   14bf8:	df000215 	stw	fp,8(sp)
   14bfc:	df000204 	addi	fp,sp,8
   14c00:	e13ffe15 	stw	r4,-8(fp)
   14c04:	e17fff15 	stw	r5,-4(fp)
   14c08:	e0bfff17 	ldw	r2,-4(fp)
   14c0c:	10ffffcc 	andi	r3,r2,65535
   14c10:	e0bffe17 	ldw	r2,-8(fp)
   14c14:	10c0002d 	sthio	r3,0(r2)
   14c18:	e037883a 	mov	sp,fp
   14c1c:	df000017 	ldw	fp,0(sp)
   14c20:	dec00104 	addi	sp,sp,4
   14c24:	f800283a 	ret

00014c28 <alt_write_native_32bit>:
   14c28:	defffd04 	addi	sp,sp,-12
   14c2c:	df000215 	stw	fp,8(sp)
   14c30:	df000204 	addi	fp,sp,8
   14c34:	e13ffe15 	stw	r4,-8(fp)
   14c38:	e17fff15 	stw	r5,-4(fp)
   14c3c:	e0ffff17 	ldw	r3,-4(fp)
   14c40:	e0bffe17 	ldw	r2,-8(fp)
   14c44:	10c00035 	stwio	r3,0(r2)
   14c48:	e037883a 	mov	sp,fp
   14c4c:	df000017 	ldw	fp,0(sp)
   14c50:	dec00104 	addi	sp,sp,4
   14c54:	f800283a 	ret

00014c58 <alt_set_flash_width_func>:
   14c58:	defffb04 	addi	sp,sp,-20
   14c5c:	df000415 	stw	fp,16(sp)
   14c60:	df000404 	addi	fp,sp,16
   14c64:	e13ffd15 	stw	r4,-12(fp)
   14c68:	e03ffc15 	stw	zero,-16(fp)
   14c6c:	e0bffd17 	ldw	r2,-12(fp)
   14c70:	10802e17 	ldw	r2,184(r2)
   14c74:	e0bfff15 	stw	r2,-4(fp)
   14c78:	e0ffff17 	ldw	r3,-4(fp)
   14c7c:	188000a0 	cmpeqi	r2,r3,2
   14c80:	1000261e 	bne	r2,zero,14d1c <alt_set_flash_width_func+0xc4>
   14c84:	e0ffff17 	ldw	r3,-4(fp)
   14c88:	18800120 	cmpeqi	r2,r3,4
   14c8c:	1000391e 	bne	r2,zero,14d74 <alt_set_flash_width_func+0x11c>
   14c90:	e0ffff17 	ldw	r3,-4(fp)
   14c94:	18800060 	cmpeqi	r2,r3,1
   14c98:	1000011e 	bne	r2,zero,14ca0 <alt_set_flash_width_func+0x48>
   14c9c:	00003e06 	br	14d98 <alt_set_flash_width_func+0x140>
   14ca0:	e0fffd17 	ldw	r3,-12(fp)
   14ca4:	00800074 	movhi	r2,1
   14ca8:	1092f004 	addi	r2,r2,19392
   14cac:	18803515 	stw	r2,212(r3)
   14cb0:	e0bffd17 	ldw	r2,-12(fp)
   14cb4:	10802f17 	ldw	r2,188(r2)
   14cb8:	10800058 	cmpnei	r2,r2,1
   14cbc:	1000051e 	bne	r2,zero,14cd4 <alt_set_flash_width_func+0x7c>
   14cc0:	e0fffd17 	ldw	r3,-12(fp)
   14cc4:	00800074 	movhi	r2,1
   14cc8:	10927b04 	addi	r2,r2,18924
   14ccc:	18803315 	stw	r2,204(r3)
   14cd0:	00003306 	br	14da0 <alt_set_flash_width_func+0x148>
   14cd4:	e0bffd17 	ldw	r2,-12(fp)
   14cd8:	10802f17 	ldw	r2,188(r2)
   14cdc:	10800098 	cmpnei	r2,r2,2
   14ce0:	1000051e 	bne	r2,zero,14cf8 <alt_set_flash_width_func+0xa0>
   14ce4:	e0fffd17 	ldw	r3,-12(fp)
   14ce8:	00800074 	movhi	r2,1
   14cec:	10928a04 	addi	r2,r2,18984
   14cf0:	18803315 	stw	r2,204(r3)
   14cf4:	00002a06 	br	14da0 <alt_set_flash_width_func+0x148>
   14cf8:	e0bffd17 	ldw	r2,-12(fp)
   14cfc:	10802f17 	ldw	r2,188(r2)
   14d00:	10800118 	cmpnei	r2,r2,4
   14d04:	1000261e 	bne	r2,zero,14da0 <alt_set_flash_width_func+0x148>
   14d08:	e0fffd17 	ldw	r3,-12(fp)
   14d0c:	00800074 	movhi	r2,1
   14d10:	1092a904 	addi	r2,r2,19108
   14d14:	18803315 	stw	r2,204(r3)
   14d18:	00002106 	br	14da0 <alt_set_flash_width_func+0x148>
   14d1c:	e0fffd17 	ldw	r3,-12(fp)
   14d20:	00800074 	movhi	r2,1
   14d24:	1092fd04 	addi	r2,r2,19444
   14d28:	18803515 	stw	r2,212(r3)
   14d2c:	e0bffd17 	ldw	r2,-12(fp)
   14d30:	10802f17 	ldw	r2,188(r2)
   14d34:	10800098 	cmpnei	r2,r2,2
   14d38:	1000051e 	bne	r2,zero,14d50 <alt_set_flash_width_func+0xf8>
   14d3c:	e0fffd17 	ldw	r3,-12(fp)
   14d40:	00800074 	movhi	r2,1
   14d44:	1092bb04 	addi	r2,r2,19180
   14d48:	18803315 	stw	r2,204(r3)
   14d4c:	00001406 	br	14da0 <alt_set_flash_width_func+0x148>
   14d50:	e0bffd17 	ldw	r2,-12(fp)
   14d54:	10802f17 	ldw	r2,188(r2)
   14d58:	10800118 	cmpnei	r2,r2,4
   14d5c:	1000101e 	bne	r2,zero,14da0 <alt_set_flash_width_func+0x148>
   14d60:	e0fffd17 	ldw	r3,-12(fp)
   14d64:	00800074 	movhi	r2,1
   14d68:	1092cc04 	addi	r2,r2,19248
   14d6c:	18803315 	stw	r2,204(r3)
   14d70:	00000b06 	br	14da0 <alt_set_flash_width_func+0x148>
   14d74:	e0fffd17 	ldw	r3,-12(fp)
   14d78:	00800074 	movhi	r2,1
   14d7c:	10930a04 	addi	r2,r2,19496
   14d80:	18803515 	stw	r2,212(r3)
   14d84:	e0fffd17 	ldw	r3,-12(fp)
   14d88:	00800074 	movhi	r2,1
   14d8c:	1092de04 	addi	r2,r2,19320
   14d90:	18803315 	stw	r2,204(r3)
   14d94:	00000206 	br	14da0 <alt_set_flash_width_func+0x148>
   14d98:	00bffcc4 	movi	r2,-13
   14d9c:	e0bffc15 	stw	r2,-16(fp)
   14da0:	e0bffc17 	ldw	r2,-16(fp)
   14da4:	1004c03a 	cmpne	r2,r2,zero
   14da8:	10001e1e 	bne	r2,zero,14e24 <alt_set_flash_width_func+0x1cc>
   14dac:	e0bffd17 	ldw	r2,-12(fp)
   14db0:	10802f17 	ldw	r2,188(r2)
   14db4:	e0bffe15 	stw	r2,-8(fp)
   14db8:	e0fffe17 	ldw	r3,-8(fp)
   14dbc:	188000a0 	cmpeqi	r2,r3,2
   14dc0:	10000c1e 	bne	r2,zero,14df4 <alt_set_flash_width_func+0x19c>
   14dc4:	e0fffe17 	ldw	r3,-8(fp)
   14dc8:	18800120 	cmpeqi	r2,r3,4
   14dcc:	10000e1e 	bne	r2,zero,14e08 <alt_set_flash_width_func+0x1b0>
   14dd0:	e0fffe17 	ldw	r3,-8(fp)
   14dd4:	18800060 	cmpeqi	r2,r3,1
   14dd8:	1000011e 	bne	r2,zero,14de0 <alt_set_flash_width_func+0x188>
   14ddc:	00000f06 	br	14e1c <alt_set_flash_width_func+0x1c4>
   14de0:	e0fffd17 	ldw	r3,-12(fp)
   14de4:	00800074 	movhi	r2,1
   14de8:	10924804 	addi	r2,r2,18720
   14dec:	18803415 	stw	r2,208(r3)
   14df0:	00000c06 	br	14e24 <alt_set_flash_width_func+0x1cc>
   14df4:	e0fffd17 	ldw	r3,-12(fp)
   14df8:	00800074 	movhi	r2,1
   14dfc:	10925804 	addi	r2,r2,18784
   14e00:	18803415 	stw	r2,208(r3)
   14e04:	00000706 	br	14e24 <alt_set_flash_width_func+0x1cc>
   14e08:	e0fffd17 	ldw	r3,-12(fp)
   14e0c:	00800074 	movhi	r2,1
   14e10:	10926904 	addi	r2,r2,18852
   14e14:	18803415 	stw	r2,208(r3)
   14e18:	00000206 	br	14e24 <alt_set_flash_width_func+0x1cc>
   14e1c:	00bffcc4 	movi	r2,-13
   14e20:	e0bffc15 	stw	r2,-16(fp)
   14e24:	e0bffc17 	ldw	r2,-16(fp)
   14e28:	e037883a 	mov	sp,fp
   14e2c:	df000017 	ldw	fp,0(sp)
   14e30:	dec00104 	addi	sp,sp,4
   14e34:	f800283a 	ret

00014e38 <alt_set_flash_algorithm_func>:
   14e38:	defffc04 	addi	sp,sp,-16
   14e3c:	df000315 	stw	fp,12(sp)
   14e40:	df000304 	addi	fp,sp,12
   14e44:	e13ffe15 	stw	r4,-8(fp)
   14e48:	e03ffd15 	stw	zero,-12(fp)
   14e4c:	e0bffe17 	ldw	r2,-8(fp)
   14e50:	10802d17 	ldw	r2,180(r2)
   14e54:	e0bfff15 	stw	r2,-4(fp)
   14e58:	e0ffff17 	ldw	r3,-4(fp)
   14e5c:	188000a0 	cmpeqi	r2,r3,2
   14e60:	1000071e 	bne	r2,zero,14e80 <alt_set_flash_algorithm_func+0x48>
   14e64:	e0ffff17 	ldw	r3,-4(fp)
   14e68:	188000e0 	cmpeqi	r2,r3,3
   14e6c:	10000d1e 	bne	r2,zero,14ea4 <alt_set_flash_algorithm_func+0x6c>
   14e70:	e0ffff17 	ldw	r3,-4(fp)
   14e74:	18800060 	cmpeqi	r2,r3,1
   14e78:	10000a1e 	bne	r2,zero,14ea4 <alt_set_flash_algorithm_func+0x6c>
   14e7c:	00001206 	br	14ec8 <alt_set_flash_algorithm_func+0x90>
   14e80:	e0fffe17 	ldw	r3,-8(fp)
   14e84:	008000b4 	movhi	r2,2
   14e88:	10ab4a04 	addi	r2,r2,-21208
   14e8c:	18800815 	stw	r2,32(r3)
   14e90:	e0fffe17 	ldw	r3,-8(fp)
   14e94:	008000b4 	movhi	r2,2
   14e98:	10ab3004 	addi	r2,r2,-21312
   14e9c:	18800915 	stw	r2,36(r3)
   14ea0:	00000b06 	br	14ed0 <alt_set_flash_algorithm_func+0x98>
   14ea4:	e0fffe17 	ldw	r3,-8(fp)
   14ea8:	008000b4 	movhi	r2,2
   14eac:	10ac6904 	addi	r2,r2,-20060
   14eb0:	18800815 	stw	r2,32(r3)
   14eb4:	e0fffe17 	ldw	r3,-8(fp)
   14eb8:	008000b4 	movhi	r2,2
   14ebc:	10ac4804 	addi	r2,r2,-20192
   14ec0:	18800915 	stw	r2,36(r3)
   14ec4:	00000206 	br	14ed0 <alt_set_flash_algorithm_func+0x98>
   14ec8:	00bffec4 	movi	r2,-5
   14ecc:	e0bffd15 	stw	r2,-12(fp)
   14ed0:	e0bffd17 	ldw	r2,-12(fp)
   14ed4:	e037883a 	mov	sp,fp
   14ed8:	df000017 	ldw	fp,0(sp)
   14edc:	dec00104 	addi	sp,sp,4
   14ee0:	f800283a 	ret

00014ee4 <alt_read_16bit_query_entry>:
   14ee4:	defffb04 	addi	sp,sp,-20
   14ee8:	dfc00415 	stw	ra,16(sp)
   14eec:	df000315 	stw	fp,12(sp)
   14ef0:	df000304 	addi	fp,sp,12
   14ef4:	e13ffe15 	stw	r4,-8(fp)
   14ef8:	e17fff15 	stw	r5,-4(fp)
   14efc:	e0bffe17 	ldw	r2,-8(fp)
   14f00:	10803417 	ldw	r2,208(r2)
   14f04:	e13ffe17 	ldw	r4,-8(fp)
   14f08:	e17fff17 	ldw	r5,-4(fp)
   14f0c:	103ee83a 	callr	r2
   14f10:	10803fcc 	andi	r2,r2,255
   14f14:	e0bffd0d 	sth	r2,-12(fp)
   14f18:	e0bffe17 	ldw	r2,-8(fp)
   14f1c:	10c03417 	ldw	r3,208(r2)
   14f20:	e0bfff17 	ldw	r2,-4(fp)
   14f24:	11400044 	addi	r5,r2,1
   14f28:	e13ffe17 	ldw	r4,-8(fp)
   14f2c:	183ee83a 	callr	r3
   14f30:	10803fcc 	andi	r2,r2,255
   14f34:	1004923a 	slli	r2,r2,8
   14f38:	1007883a 	mov	r3,r2
   14f3c:	e0bffd0b 	ldhu	r2,-12(fp)
   14f40:	1884b03a 	or	r2,r3,r2
   14f44:	e0bffd0d 	sth	r2,-12(fp)
   14f48:	e0bffd0b 	ldhu	r2,-12(fp)
   14f4c:	e037883a 	mov	sp,fp
   14f50:	dfc00117 	ldw	ra,4(sp)
   14f54:	df000017 	ldw	fp,0(sp)
   14f58:	dec00204 	addi	sp,sp,8
   14f5c:	f800283a 	ret

00014f60 <alt_read_cfi_table>:
   14f60:	defff104 	addi	sp,sp,-60
   14f64:	dfc00e15 	stw	ra,56(sp)
   14f68:	df000d15 	stw	fp,52(sp)
   14f6c:	dc000c15 	stw	r16,48(sp)
   14f70:	df000c04 	addi	fp,sp,48
   14f74:	e13ffe15 	stw	r4,-8(fp)
   14f78:	e03ffa15 	stw	zero,-24(fp)
   14f7c:	e03ff915 	stw	zero,-28(fp)
   14f80:	e03ff515 	stw	zero,-44(fp)
   14f84:	e13ffe17 	ldw	r4,-8(fp)
   14f88:	0015cec0 	call	15cec <alt_check_primary_table>
   14f8c:	e0bffa15 	stw	r2,-24(fp)
   14f90:	e0bffa17 	ldw	r2,-24(fp)
   14f94:	1004c03a 	cmpne	r2,r2,zero
   14f98:	1001621e 	bne	r2,zero,15524 <alt_read_cfi_table+0x5c4>
   14f9c:	e0bffe17 	ldw	r2,-8(fp)
   14fa0:	10803417 	ldw	r2,208(r2)
   14fa4:	e13ffe17 	ldw	r4,-8(fp)
   14fa8:	014004c4 	movi	r5,19
   14fac:	103ee83a 	callr	r2
   14fb0:	10c03fcc 	andi	r3,r2,255
   14fb4:	e0bffe17 	ldw	r2,-8(fp)
   14fb8:	10c02d15 	stw	r3,180(r2)
   14fbc:	e0bffe17 	ldw	r2,-8(fp)
   14fc0:	10803417 	ldw	r2,208(r2)
   14fc4:	e13ffe17 	ldw	r4,-8(fp)
   14fc8:	014007c4 	movi	r5,31
   14fcc:	103ee83a 	callr	r2
   14fd0:	10803fcc 	andi	r2,r2,255
   14fd4:	e0bff715 	stw	r2,-36(fp)
   14fd8:	e0bffe17 	ldw	r2,-8(fp)
   14fdc:	10803417 	ldw	r2,208(r2)
   14fe0:	e13ffe17 	ldw	r4,-8(fp)
   14fe4:	014008c4 	movi	r5,35
   14fe8:	103ee83a 	callr	r2
   14fec:	10803fcc 	andi	r2,r2,255
   14ff0:	e0bff615 	stw	r2,-40(fp)
   14ff4:	e0bff717 	ldw	r2,-36(fp)
   14ff8:	1005003a 	cmpeq	r2,r2,zero
   14ffc:	1000031e 	bne	r2,zero,1500c <alt_read_cfi_table+0xac>
   15000:	e0bff617 	ldw	r2,-40(fp)
   15004:	1004c03a 	cmpne	r2,r2,zero
   15008:	1000041e 	bne	r2,zero,1501c <alt_read_cfi_table+0xbc>
   1500c:	e0fffe17 	ldw	r3,-8(fp)
   15010:	0080fa04 	movi	r2,1000
   15014:	18803015 	stw	r2,192(r3)
   15018:	00000706 	br	15038 <alt_read_cfi_table+0xd8>
   1501c:	00c00044 	movi	r3,1
   15020:	e0bff717 	ldw	r2,-36(fp)
   15024:	1886983a 	sll	r3,r3,r2
   15028:	e0bff617 	ldw	r2,-40(fp)
   1502c:	1886983a 	sll	r3,r3,r2
   15030:	e0bffe17 	ldw	r2,-8(fp)
   15034:	10c03015 	stw	r3,192(r2)
   15038:	e0bffe17 	ldw	r2,-8(fp)
   1503c:	10803417 	ldw	r2,208(r2)
   15040:	e13ffe17 	ldw	r4,-8(fp)
   15044:	01400844 	movi	r5,33
   15048:	103ee83a 	callr	r2
   1504c:	10803fcc 	andi	r2,r2,255
   15050:	e0bff715 	stw	r2,-36(fp)
   15054:	e0bffe17 	ldw	r2,-8(fp)
   15058:	10803417 	ldw	r2,208(r2)
   1505c:	e13ffe17 	ldw	r4,-8(fp)
   15060:	01400944 	movi	r5,37
   15064:	103ee83a 	callr	r2
   15068:	10803fcc 	andi	r2,r2,255
   1506c:	e0bff615 	stw	r2,-40(fp)
   15070:	e0bff717 	ldw	r2,-36(fp)
   15074:	1005003a 	cmpeq	r2,r2,zero
   15078:	1000031e 	bne	r2,zero,15088 <alt_read_cfi_table+0x128>
   1507c:	e0bff617 	ldw	r2,-40(fp)
   15080:	1004c03a 	cmpne	r2,r2,zero
   15084:	1000051e 	bne	r2,zero,1509c <alt_read_cfi_table+0x13c>
   15088:	e0fffe17 	ldw	r3,-8(fp)
   1508c:	00804c74 	movhi	r2,305
   15090:	108b4004 	addi	r2,r2,11520
   15094:	18803115 	stw	r2,196(r3)
   15098:	00000806 	br	150bc <alt_read_cfi_table+0x15c>
   1509c:	00c00044 	movi	r3,1
   150a0:	e0bff717 	ldw	r2,-36(fp)
   150a4:	1886983a 	sll	r3,r3,r2
   150a8:	e0bff617 	ldw	r2,-40(fp)
   150ac:	1884983a 	sll	r2,r3,r2
   150b0:	10c0fa24 	muli	r3,r2,1000
   150b4:	e0bffe17 	ldw	r2,-8(fp)
   150b8:	10c03115 	stw	r3,196(r2)
   150bc:	e0bffe17 	ldw	r2,-8(fp)
   150c0:	10803417 	ldw	r2,208(r2)
   150c4:	e13ffe17 	ldw	r4,-8(fp)
   150c8:	014009c4 	movi	r5,39
   150cc:	103ee83a 	callr	r2
   150d0:	10c03fcc 	andi	r3,r2,255
   150d4:	00800044 	movi	r2,1
   150d8:	10c4983a 	sll	r2,r2,r3
   150dc:	e0bffb15 	stw	r2,-20(fp)
   150e0:	e0bffe17 	ldw	r2,-8(fp)
   150e4:	10803417 	ldw	r2,208(r2)
   150e8:	e13ffe17 	ldw	r4,-8(fp)
   150ec:	01400b04 	movi	r5,44
   150f0:	103ee83a 	callr	r2
   150f4:	10c03fcc 	andi	r3,r2,255
   150f8:	e0bffe17 	ldw	r2,-8(fp)
   150fc:	10c00c15 	stw	r3,48(r2)
   15100:	e0bffe17 	ldw	r2,-8(fp)
   15104:	10800c17 	ldw	r2,48(r2)
   15108:	10800250 	cmplti	r2,r2,9
   1510c:	1000031e 	bne	r2,zero,1511c <alt_read_cfi_table+0x1bc>
   15110:	00bffd04 	movi	r2,-12
   15114:	e0bffa15 	stw	r2,-24(fp)
   15118:	00005e06 	br	15294 <alt_read_cfi_table+0x334>
   1511c:	e03ffd15 	stw	zero,-12(fp)
   15120:	00005306 	br	15270 <alt_read_cfi_table+0x310>
   15124:	e43ffd17 	ldw	r16,-12(fp)
   15128:	e0bffd17 	ldw	r2,-12(fp)
   1512c:	1085883a 	add	r2,r2,r2
   15130:	1085883a 	add	r2,r2,r2
   15134:	11400b44 	addi	r5,r2,45
   15138:	e13ffe17 	ldw	r4,-8(fp)
   1513c:	0014ee40 	call	14ee4 <alt_read_16bit_query_entry>
   15140:	113fffcc 	andi	r4,r2,65535
   15144:	e0fffe17 	ldw	r3,-8(fp)
   15148:	8004913a 	slli	r2,r16,4
   1514c:	10c5883a 	add	r2,r2,r3
   15150:	10800f04 	addi	r2,r2,60
   15154:	11000015 	stw	r4,0(r2)
   15158:	e17ffd17 	ldw	r5,-12(fp)
   1515c:	e0bffd17 	ldw	r2,-12(fp)
   15160:	e0fffe17 	ldw	r3,-8(fp)
   15164:	1004913a 	slli	r2,r2,4
   15168:	10c5883a 	add	r2,r2,r3
   1516c:	10800f04 	addi	r2,r2,60
   15170:	10800017 	ldw	r2,0(r2)
   15174:	11000044 	addi	r4,r2,1
   15178:	e0fffe17 	ldw	r3,-8(fp)
   1517c:	2804913a 	slli	r2,r5,4
   15180:	10c5883a 	add	r2,r2,r3
   15184:	10800f04 	addi	r2,r2,60
   15188:	11000015 	stw	r4,0(r2)
   1518c:	e43ffd17 	ldw	r16,-12(fp)
   15190:	e0bffd17 	ldw	r2,-12(fp)
   15194:	1085883a 	add	r2,r2,r2
   15198:	1085883a 	add	r2,r2,r2
   1519c:	11400bc4 	addi	r5,r2,47
   151a0:	e13ffe17 	ldw	r4,-8(fp)
   151a4:	0014ee40 	call	14ee4 <alt_read_16bit_query_entry>
   151a8:	113fffcc 	andi	r4,r2,65535
   151ac:	e0fffe17 	ldw	r3,-8(fp)
   151b0:	8004913a 	slli	r2,r16,4
   151b4:	10c5883a 	add	r2,r2,r3
   151b8:	10801004 	addi	r2,r2,64
   151bc:	11000015 	stw	r4,0(r2)
   151c0:	e17ffd17 	ldw	r5,-12(fp)
   151c4:	e0bffd17 	ldw	r2,-12(fp)
   151c8:	e0fffe17 	ldw	r3,-8(fp)
   151cc:	1004913a 	slli	r2,r2,4
   151d0:	10c5883a 	add	r2,r2,r3
   151d4:	10801004 	addi	r2,r2,64
   151d8:	10800017 	ldw	r2,0(r2)
   151dc:	1008923a 	slli	r4,r2,8
   151e0:	e0fffe17 	ldw	r3,-8(fp)
   151e4:	2804913a 	slli	r2,r5,4
   151e8:	10c5883a 	add	r2,r2,r3
   151ec:	10801004 	addi	r2,r2,64
   151f0:	11000015 	stw	r4,0(r2)
   151f4:	e17ffd17 	ldw	r5,-12(fp)
   151f8:	e0bffd17 	ldw	r2,-12(fp)
   151fc:	e0fffe17 	ldw	r3,-8(fp)
   15200:	1004913a 	slli	r2,r2,4
   15204:	10c5883a 	add	r2,r2,r3
   15208:	10800f04 	addi	r2,r2,60
   1520c:	11000017 	ldw	r4,0(r2)
   15210:	e0bffd17 	ldw	r2,-12(fp)
   15214:	e0fffe17 	ldw	r3,-8(fp)
   15218:	1004913a 	slli	r2,r2,4
   1521c:	10c5883a 	add	r2,r2,r3
   15220:	10801004 	addi	r2,r2,64
   15224:	10800017 	ldw	r2,0(r2)
   15228:	2089383a 	mul	r4,r4,r2
   1522c:	e0fffe17 	ldw	r3,-8(fp)
   15230:	2804913a 	slli	r2,r5,4
   15234:	10c5883a 	add	r2,r2,r3
   15238:	10800e04 	addi	r2,r2,56
   1523c:	11000015 	stw	r4,0(r2)
   15240:	e0bffd17 	ldw	r2,-12(fp)
   15244:	e0fffe17 	ldw	r3,-8(fp)
   15248:	1004913a 	slli	r2,r2,4
   1524c:	10c5883a 	add	r2,r2,r3
   15250:	10800e04 	addi	r2,r2,56
   15254:	10c00017 	ldw	r3,0(r2)
   15258:	e0bff917 	ldw	r2,-28(fp)
   1525c:	10c5883a 	add	r2,r2,r3
   15260:	e0bff915 	stw	r2,-28(fp)
   15264:	e0bffd17 	ldw	r2,-12(fp)
   15268:	10800044 	addi	r2,r2,1
   1526c:	e0bffd15 	stw	r2,-12(fp)
   15270:	e0bffe17 	ldw	r2,-8(fp)
   15274:	10c00c17 	ldw	r3,48(r2)
   15278:	e0bffd17 	ldw	r2,-12(fp)
   1527c:	10ffa916 	blt	r2,r3,15124 <alt_read_cfi_table+0x1c4>
   15280:	e0fff917 	ldw	r3,-28(fp)
   15284:	e0bffb17 	ldw	r2,-20(fp)
   15288:	18800226 	beq	r3,r2,15294 <alt_read_cfi_table+0x334>
   1528c:	00bffb44 	movi	r2,-19
   15290:	e0bffa15 	stw	r2,-24(fp)
   15294:	e0bffe17 	ldw	r2,-8(fp)
   15298:	10c03417 	ldw	r3,208(r2)
   1529c:	e0bffe17 	ldw	r2,-8(fp)
   152a0:	10803217 	ldw	r2,200(r2)
   152a4:	114003c4 	addi	r5,r2,15
   152a8:	e13ffe17 	ldw	r4,-8(fp)
   152ac:	183ee83a 	callr	r3
   152b0:	e0bff405 	stb	r2,-48(fp)
   152b4:	e0bffe17 	ldw	r2,-8(fp)
   152b8:	10802d17 	ldw	r2,180(r2)
   152bc:	10800098 	cmpnei	r2,r2,2
   152c0:	1000601e 	bne	r2,zero,15444 <alt_read_cfi_table+0x4e4>
   152c4:	e0bff403 	ldbu	r2,-48(fp)
   152c8:	108000d8 	cmpnei	r2,r2,3
   152cc:	10005d1e 	bne	r2,zero,15444 <alt_read_cfi_table+0x4e4>
   152d0:	e0bffe17 	ldw	r2,-8(fp)
   152d4:	10800c17 	ldw	r2,48(r2)
   152d8:	10bfffc4 	addi	r2,r2,-1
   152dc:	e0bffd15 	stw	r2,-12(fp)
   152e0:	e03ffc15 	stw	zero,-16(fp)
   152e4:	00005406 	br	15438 <alt_read_cfi_table+0x4d8>
   152e8:	e0bffd17 	ldw	r2,-12(fp)
   152ec:	e0fffe17 	ldw	r3,-8(fp)
   152f0:	1004913a 	slli	r2,r2,4
   152f4:	10c5883a 	add	r2,r2,r3
   152f8:	10800e04 	addi	r2,r2,56
   152fc:	10800017 	ldw	r2,0(r2)
   15300:	e0bff815 	stw	r2,-32(fp)
   15304:	e17ffd17 	ldw	r5,-12(fp)
   15308:	e0bffc17 	ldw	r2,-16(fp)
   1530c:	e0fffe17 	ldw	r3,-8(fp)
   15310:	1004913a 	slli	r2,r2,4
   15314:	10c5883a 	add	r2,r2,r3
   15318:	10800e04 	addi	r2,r2,56
   1531c:	11000017 	ldw	r4,0(r2)
   15320:	e0fffe17 	ldw	r3,-8(fp)
   15324:	2804913a 	slli	r2,r5,4
   15328:	10c5883a 	add	r2,r2,r3
   1532c:	10800e04 	addi	r2,r2,56
   15330:	11000015 	stw	r4,0(r2)
   15334:	e0bffc17 	ldw	r2,-16(fp)
   15338:	e0fffe17 	ldw	r3,-8(fp)
   1533c:	1004913a 	slli	r2,r2,4
   15340:	10c5883a 	add	r2,r2,r3
   15344:	10c00e04 	addi	r3,r2,56
   15348:	e0bff817 	ldw	r2,-32(fp)
   1534c:	18800015 	stw	r2,0(r3)
   15350:	e0bffd17 	ldw	r2,-12(fp)
   15354:	e0fffe17 	ldw	r3,-8(fp)
   15358:	1004913a 	slli	r2,r2,4
   1535c:	10c5883a 	add	r2,r2,r3
   15360:	10801004 	addi	r2,r2,64
   15364:	10800017 	ldw	r2,0(r2)
   15368:	e0bff815 	stw	r2,-32(fp)
   1536c:	e17ffd17 	ldw	r5,-12(fp)
   15370:	e0bffc17 	ldw	r2,-16(fp)
   15374:	e0fffe17 	ldw	r3,-8(fp)
   15378:	1004913a 	slli	r2,r2,4
   1537c:	10c5883a 	add	r2,r2,r3
   15380:	10801004 	addi	r2,r2,64
   15384:	11000017 	ldw	r4,0(r2)
   15388:	e0fffe17 	ldw	r3,-8(fp)
   1538c:	2804913a 	slli	r2,r5,4
   15390:	10c5883a 	add	r2,r2,r3
   15394:	10801004 	addi	r2,r2,64
   15398:	11000015 	stw	r4,0(r2)
   1539c:	e0bffc17 	ldw	r2,-16(fp)
   153a0:	e0fffe17 	ldw	r3,-8(fp)
   153a4:	1004913a 	slli	r2,r2,4
   153a8:	10c5883a 	add	r2,r2,r3
   153ac:	10c01004 	addi	r3,r2,64
   153b0:	e0bff817 	ldw	r2,-32(fp)
   153b4:	18800015 	stw	r2,0(r3)
   153b8:	e0bffd17 	ldw	r2,-12(fp)
   153bc:	e0fffe17 	ldw	r3,-8(fp)
   153c0:	1004913a 	slli	r2,r2,4
   153c4:	10c5883a 	add	r2,r2,r3
   153c8:	10800f04 	addi	r2,r2,60
   153cc:	10800017 	ldw	r2,0(r2)
   153d0:	e0bff815 	stw	r2,-32(fp)
   153d4:	e17ffd17 	ldw	r5,-12(fp)
   153d8:	e0bffc17 	ldw	r2,-16(fp)
   153dc:	e0fffe17 	ldw	r3,-8(fp)
   153e0:	1004913a 	slli	r2,r2,4
   153e4:	10c5883a 	add	r2,r2,r3
   153e8:	10800f04 	addi	r2,r2,60
   153ec:	11000017 	ldw	r4,0(r2)
   153f0:	e0fffe17 	ldw	r3,-8(fp)
   153f4:	2804913a 	slli	r2,r5,4
   153f8:	10c5883a 	add	r2,r2,r3
   153fc:	10800f04 	addi	r2,r2,60
   15400:	11000015 	stw	r4,0(r2)
   15404:	e0bffc17 	ldw	r2,-16(fp)
   15408:	e0fffe17 	ldw	r3,-8(fp)
   1540c:	1004913a 	slli	r2,r2,4
   15410:	10c5883a 	add	r2,r2,r3
   15414:	10c00f04 	addi	r3,r2,60
   15418:	e0bff817 	ldw	r2,-32(fp)
   1541c:	18800015 	stw	r2,0(r3)
   15420:	e0bffd17 	ldw	r2,-12(fp)
   15424:	10bfffc4 	addi	r2,r2,-1
   15428:	e0bffd15 	stw	r2,-12(fp)
   1542c:	e0bffc17 	ldw	r2,-16(fp)
   15430:	10800044 	addi	r2,r2,1
   15434:	e0bffc15 	stw	r2,-16(fp)
   15438:	e0fffc17 	ldw	r3,-16(fp)
   1543c:	e0bffd17 	ldw	r2,-12(fp)
   15440:	10ffa90e 	bge	r2,r3,152e8 <alt_read_cfi_table+0x388>
   15444:	e03ffd15 	stw	zero,-12(fp)
   15448:	00001306 	br	15498 <alt_read_cfi_table+0x538>
   1544c:	e0bffd17 	ldw	r2,-12(fp)
   15450:	e0fffe17 	ldw	r3,-8(fp)
   15454:	1004913a 	slli	r2,r2,4
   15458:	10c5883a 	add	r2,r2,r3
   1545c:	10c00d04 	addi	r3,r2,52
   15460:	e0bff517 	ldw	r2,-44(fp)
   15464:	18800015 	stw	r2,0(r3)
   15468:	e0bffd17 	ldw	r2,-12(fp)
   1546c:	e0fffe17 	ldw	r3,-8(fp)
   15470:	1004913a 	slli	r2,r2,4
   15474:	10c5883a 	add	r2,r2,r3
   15478:	10800e04 	addi	r2,r2,56
   1547c:	10c00017 	ldw	r3,0(r2)
   15480:	e0bff517 	ldw	r2,-44(fp)
   15484:	10c5883a 	add	r2,r2,r3
   15488:	e0bff515 	stw	r2,-44(fp)
   1548c:	e0bffd17 	ldw	r2,-12(fp)
   15490:	10800044 	addi	r2,r2,1
   15494:	e0bffd15 	stw	r2,-12(fp)
   15498:	e0bffe17 	ldw	r2,-8(fp)
   1549c:	10c00c17 	ldw	r3,48(r2)
   154a0:	e0bffd17 	ldw	r2,-12(fp)
   154a4:	10ffe916 	blt	r2,r3,1544c <alt_read_cfi_table+0x4ec>
   154a8:	e0bffe17 	ldw	r2,-8(fp)
   154ac:	10802d17 	ldw	r2,180(r2)
   154b0:	e0bfff15 	stw	r2,-4(fp)
   154b4:	e0ffff17 	ldw	r3,-4(fp)
   154b8:	188000a0 	cmpeqi	r2,r3,2
   154bc:	1000071e 	bne	r2,zero,154dc <alt_read_cfi_table+0x57c>
   154c0:	e0ffff17 	ldw	r3,-4(fp)
   154c4:	188000e0 	cmpeqi	r2,r3,3
   154c8:	10000c1e 	bne	r2,zero,154fc <alt_read_cfi_table+0x59c>
   154cc:	e0ffff17 	ldw	r3,-4(fp)
   154d0:	18800060 	cmpeqi	r2,r3,1
   154d4:	1000091e 	bne	r2,zero,154fc <alt_read_cfi_table+0x59c>
   154d8:	00001006 	br	1551c <alt_read_cfi_table+0x5bc>
   154dc:	e0bffe17 	ldw	r2,-8(fp)
   154e0:	10c03317 	ldw	r3,204(r2)
   154e4:	e0bffe17 	ldw	r2,-8(fp)
   154e8:	11000a17 	ldw	r4,40(r2)
   154ec:	01401544 	movi	r5,85
   154f0:	01803c04 	movi	r6,240
   154f4:	183ee83a 	callr	r3
   154f8:	00000a06 	br	15524 <alt_read_cfi_table+0x5c4>
   154fc:	e0bffe17 	ldw	r2,-8(fp)
   15500:	10c03317 	ldw	r3,204(r2)
   15504:	e0bffe17 	ldw	r2,-8(fp)
   15508:	11000a17 	ldw	r4,40(r2)
   1550c:	01401544 	movi	r5,85
   15510:	01803fc4 	movi	r6,255
   15514:	183ee83a 	callr	r3
   15518:	00000206 	br	15524 <alt_read_cfi_table+0x5c4>
   1551c:	00bffec4 	movi	r2,-5
   15520:	e0bffa15 	stw	r2,-24(fp)
   15524:	e0bffa17 	ldw	r2,-24(fp)
   15528:	e037883a 	mov	sp,fp
   1552c:	dfc00217 	ldw	ra,8(sp)
   15530:	df000117 	ldw	fp,4(sp)
   15534:	dc000017 	ldw	r16,0(sp)
   15538:	dec00304 	addi	sp,sp,12
   1553c:	f800283a 	ret

00015540 <alt_read_cfi_width>:
   15540:	defff704 	addi	sp,sp,-36
   15544:	dfc00815 	stw	ra,32(sp)
   15548:	df000715 	stw	fp,28(sp)
   1554c:	df000704 	addi	fp,sp,28
   15550:	e13fff15 	stw	r4,-4(fp)
   15554:	e03ff915 	stw	zero,-28(fp)
   15558:	e0bfff17 	ldw	r2,-4(fp)
   1555c:	11000a17 	ldw	r4,40(r2)
   15560:	01401544 	movi	r5,85
   15564:	01802604 	movi	r6,152
   15568:	00149ec0 	call	149ec <alt_write_flash_command_8bit_device_8bit_mode>
   1556c:	e03ffb15 	stw	zero,-20(fp)
   15570:	00000f06 	br	155b0 <alt_read_cfi_width+0x70>
   15574:	e13ffb17 	ldw	r4,-20(fp)
   15578:	e0bfff17 	ldw	r2,-4(fp)
   1557c:	10800a17 	ldw	r2,40(r2)
   15580:	1007883a 	mov	r3,r2
   15584:	e0bffb17 	ldw	r2,-20(fp)
   15588:	1885883a 	add	r2,r3,r2
   1558c:	10800404 	addi	r2,r2,16
   15590:	10800023 	ldbuio	r2,0(r2)
   15594:	1007883a 	mov	r3,r2
   15598:	e0bffc04 	addi	r2,fp,-16
   1559c:	1105883a 	add	r2,r2,r4
   155a0:	10c00005 	stb	r3,0(r2)
   155a4:	e0bffb17 	ldw	r2,-20(fp)
   155a8:	10800044 	addi	r2,r2,1
   155ac:	e0bffb15 	stw	r2,-20(fp)
   155b0:	e0bffb17 	ldw	r2,-20(fp)
   155b4:	108000d0 	cmplti	r2,r2,3
   155b8:	103fee1e 	bne	r2,zero,15574 <alt_read_cfi_width+0x34>
   155bc:	e0bffc03 	ldbu	r2,-16(fp)
   155c0:	10803fcc 	andi	r2,r2,255
   155c4:	10801458 	cmpnei	r2,r2,81
   155c8:	10001d1e 	bne	r2,zero,15640 <alt_read_cfi_width+0x100>
   155cc:	e0bffc43 	ldbu	r2,-15(fp)
   155d0:	10803fcc 	andi	r2,r2,255
   155d4:	10801498 	cmpnei	r2,r2,82
   155d8:	1000191e 	bne	r2,zero,15640 <alt_read_cfi_width+0x100>
   155dc:	e0bffc83 	ldbu	r2,-14(fp)
   155e0:	10803fcc 	andi	r2,r2,255
   155e4:	10801658 	cmpnei	r2,r2,89
   155e8:	1000151e 	bne	r2,zero,15640 <alt_read_cfi_width+0x100>
   155ec:	e0ffff17 	ldw	r3,-4(fp)
   155f0:	00800044 	movi	r2,1
   155f4:	18802e15 	stw	r2,184(r3)
   155f8:	e0ffff17 	ldw	r3,-4(fp)
   155fc:	00800044 	movi	r2,1
   15600:	18802f15 	stw	r2,188(r3)
   15604:	e0bfff17 	ldw	r2,-4(fp)
   15608:	10800a17 	ldw	r2,40(r2)
   1560c:	10800a04 	addi	r2,r2,40
   15610:	1080002b 	ldhuio	r2,0(r2)
   15614:	e0bffa0d 	sth	r2,-24(fp)
   15618:	e0bffa0b 	ldhu	r2,-24(fp)
   1561c:	10800044 	addi	r2,r2,1
   15620:	e0bffa0d 	sth	r2,-24(fp)
   15624:	e0bffa0b 	ldhu	r2,-24(fp)
   15628:	1080004c 	andi	r2,r2,1
   1562c:	1004c03a 	cmpne	r2,r2,zero
   15630:	1001a81e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15634:	00bffb44 	movi	r2,-19
   15638:	e0bff915 	stw	r2,-28(fp)
   1563c:	0001a506 	br	15cd4 <alt_read_cfi_width+0x794>
   15640:	e0bfff17 	ldw	r2,-4(fp)
   15644:	11000a17 	ldw	r4,40(r2)
   15648:	01401544 	movi	r5,85
   1564c:	01802604 	movi	r6,152
   15650:	0014a280 	call	14a28 <alt_write_flash_command_16bit_device_8bit_mode>
   15654:	e03ffb15 	stw	zero,-20(fp)
   15658:	00000f06 	br	15698 <alt_read_cfi_width+0x158>
   1565c:	e13ffb17 	ldw	r4,-20(fp)
   15660:	e0bfff17 	ldw	r2,-4(fp)
   15664:	10800a17 	ldw	r2,40(r2)
   15668:	1007883a 	mov	r3,r2
   1566c:	e0bffb17 	ldw	r2,-20(fp)
   15670:	1885883a 	add	r2,r3,r2
   15674:	10800804 	addi	r2,r2,32
   15678:	10800023 	ldbuio	r2,0(r2)
   1567c:	1007883a 	mov	r3,r2
   15680:	e0bffc04 	addi	r2,fp,-16
   15684:	1105883a 	add	r2,r2,r4
   15688:	10c00005 	stb	r3,0(r2)
   1568c:	e0bffb17 	ldw	r2,-20(fp)
   15690:	10800044 	addi	r2,r2,1
   15694:	e0bffb15 	stw	r2,-20(fp)
   15698:	e0bffb17 	ldw	r2,-20(fp)
   1569c:	10800190 	cmplti	r2,r2,6
   156a0:	103fee1e 	bne	r2,zero,1565c <alt_read_cfi_width+0x11c>
   156a4:	e0bffc03 	ldbu	r2,-16(fp)
   156a8:	10803fcc 	andi	r2,r2,255
   156ac:	10801458 	cmpnei	r2,r2,81
   156b0:	1000291e 	bne	r2,zero,15758 <alt_read_cfi_width+0x218>
   156b4:	e0bffc43 	ldbu	r2,-15(fp)
   156b8:	10803fcc 	andi	r2,r2,255
   156bc:	10801458 	cmpnei	r2,r2,81
   156c0:	1000251e 	bne	r2,zero,15758 <alt_read_cfi_width+0x218>
   156c4:	e0bffc83 	ldbu	r2,-14(fp)
   156c8:	10803fcc 	andi	r2,r2,255
   156cc:	10801498 	cmpnei	r2,r2,82
   156d0:	1000211e 	bne	r2,zero,15758 <alt_read_cfi_width+0x218>
   156d4:	e0bffcc3 	ldbu	r2,-13(fp)
   156d8:	10803fcc 	andi	r2,r2,255
   156dc:	10801498 	cmpnei	r2,r2,82
   156e0:	10001d1e 	bne	r2,zero,15758 <alt_read_cfi_width+0x218>
   156e4:	e0bffd03 	ldbu	r2,-12(fp)
   156e8:	10803fcc 	andi	r2,r2,255
   156ec:	10801658 	cmpnei	r2,r2,89
   156f0:	1000191e 	bne	r2,zero,15758 <alt_read_cfi_width+0x218>
   156f4:	e0bffd43 	ldbu	r2,-11(fp)
   156f8:	10803fcc 	andi	r2,r2,255
   156fc:	10801658 	cmpnei	r2,r2,89
   15700:	1000151e 	bne	r2,zero,15758 <alt_read_cfi_width+0x218>
   15704:	e0ffff17 	ldw	r3,-4(fp)
   15708:	00800044 	movi	r2,1
   1570c:	18802e15 	stw	r2,184(r3)
   15710:	e0ffff17 	ldw	r3,-4(fp)
   15714:	00800084 	movi	r2,2
   15718:	18802f15 	stw	r2,188(r3)
   1571c:	e0bfff17 	ldw	r2,-4(fp)
   15720:	10800a17 	ldw	r2,40(r2)
   15724:	10801404 	addi	r2,r2,80
   15728:	1080002b 	ldhuio	r2,0(r2)
   1572c:	e0bffa0d 	sth	r2,-24(fp)
   15730:	e0bffa0b 	ldhu	r2,-24(fp)
   15734:	10800044 	addi	r2,r2,1
   15738:	e0bffa0d 	sth	r2,-24(fp)
   1573c:	e0bffa0b 	ldhu	r2,-24(fp)
   15740:	1080004c 	andi	r2,r2,1
   15744:	1004c03a 	cmpne	r2,r2,zero
   15748:	1001621e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   1574c:	00bffb44 	movi	r2,-19
   15750:	e0bff915 	stw	r2,-28(fp)
   15754:	00015f06 	br	15cd4 <alt_read_cfi_width+0x794>
   15758:	e0bfff17 	ldw	r2,-4(fp)
   1575c:	11000a17 	ldw	r4,40(r2)
   15760:	01401544 	movi	r5,85
   15764:	01802604 	movi	r6,152
   15768:	0014aec0 	call	14aec <alt_write_flash_command_16bit_device_16bit_mode>
   1576c:	e03ffb15 	stw	zero,-20(fp)
   15770:	00000f06 	br	157b0 <alt_read_cfi_width+0x270>
   15774:	e13ffb17 	ldw	r4,-20(fp)
   15778:	e0bfff17 	ldw	r2,-4(fp)
   1577c:	10800a17 	ldw	r2,40(r2)
   15780:	1007883a 	mov	r3,r2
   15784:	e0bffb17 	ldw	r2,-20(fp)
   15788:	1885883a 	add	r2,r3,r2
   1578c:	10800804 	addi	r2,r2,32
   15790:	10800023 	ldbuio	r2,0(r2)
   15794:	1007883a 	mov	r3,r2
   15798:	e0bffc04 	addi	r2,fp,-16
   1579c:	1105883a 	add	r2,r2,r4
   157a0:	10c00005 	stb	r3,0(r2)
   157a4:	e0bffb17 	ldw	r2,-20(fp)
   157a8:	10800044 	addi	r2,r2,1
   157ac:	e0bffb15 	stw	r2,-20(fp)
   157b0:	e0bffb17 	ldw	r2,-20(fp)
   157b4:	10800190 	cmplti	r2,r2,6
   157b8:	103fee1e 	bne	r2,zero,15774 <alt_read_cfi_width+0x234>
   157bc:	e0bffc03 	ldbu	r2,-16(fp)
   157c0:	10803fcc 	andi	r2,r2,255
   157c4:	10801458 	cmpnei	r2,r2,81
   157c8:	1000291e 	bne	r2,zero,15870 <alt_read_cfi_width+0x330>
   157cc:	e0bffc43 	ldbu	r2,-15(fp)
   157d0:	10803fcc 	andi	r2,r2,255
   157d4:	1004c03a 	cmpne	r2,r2,zero
   157d8:	1000251e 	bne	r2,zero,15870 <alt_read_cfi_width+0x330>
   157dc:	e0bffc83 	ldbu	r2,-14(fp)
   157e0:	10803fcc 	andi	r2,r2,255
   157e4:	10801498 	cmpnei	r2,r2,82
   157e8:	1000211e 	bne	r2,zero,15870 <alt_read_cfi_width+0x330>
   157ec:	e0bffcc3 	ldbu	r2,-13(fp)
   157f0:	10803fcc 	andi	r2,r2,255
   157f4:	1004c03a 	cmpne	r2,r2,zero
   157f8:	10001d1e 	bne	r2,zero,15870 <alt_read_cfi_width+0x330>
   157fc:	e0bffd03 	ldbu	r2,-12(fp)
   15800:	10803fcc 	andi	r2,r2,255
   15804:	10801658 	cmpnei	r2,r2,89
   15808:	1000191e 	bne	r2,zero,15870 <alt_read_cfi_width+0x330>
   1580c:	e0bffd43 	ldbu	r2,-11(fp)
   15810:	10803fcc 	andi	r2,r2,255
   15814:	1004c03a 	cmpne	r2,r2,zero
   15818:	1000151e 	bne	r2,zero,15870 <alt_read_cfi_width+0x330>
   1581c:	e0ffff17 	ldw	r3,-4(fp)
   15820:	00800084 	movi	r2,2
   15824:	18802e15 	stw	r2,184(r3)
   15828:	e0ffff17 	ldw	r3,-4(fp)
   1582c:	00800084 	movi	r2,2
   15830:	18802f15 	stw	r2,188(r3)
   15834:	e0bfff17 	ldw	r2,-4(fp)
   15838:	10800a17 	ldw	r2,40(r2)
   1583c:	10801404 	addi	r2,r2,80
   15840:	1080002b 	ldhuio	r2,0(r2)
   15844:	e0bffa0d 	sth	r2,-24(fp)
   15848:	e0bffa0b 	ldhu	r2,-24(fp)
   1584c:	10800044 	addi	r2,r2,1
   15850:	e0bffa0d 	sth	r2,-24(fp)
   15854:	e0bffa0b 	ldhu	r2,-24(fp)
   15858:	1080008c 	andi	r2,r2,2
   1585c:	1004c03a 	cmpne	r2,r2,zero
   15860:	10011c1e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15864:	00bffb44 	movi	r2,-19
   15868:	e0bff915 	stw	r2,-28(fp)
   1586c:	00011906 	br	15cd4 <alt_read_cfi_width+0x794>
   15870:	e0bfff17 	ldw	r2,-4(fp)
   15874:	11000a17 	ldw	r4,40(r2)
   15878:	01401544 	movi	r5,85
   1587c:	01802604 	movi	r6,152
   15880:	0014b780 	call	14b78 <alt_write_flash_command_32bit_device_32bit_mode>
   15884:	e03ffb15 	stw	zero,-20(fp)
   15888:	00000f06 	br	158c8 <alt_read_cfi_width+0x388>
   1588c:	e13ffb17 	ldw	r4,-20(fp)
   15890:	e0bfff17 	ldw	r2,-4(fp)
   15894:	10800a17 	ldw	r2,40(r2)
   15898:	1007883a 	mov	r3,r2
   1589c:	e0bffb17 	ldw	r2,-20(fp)
   158a0:	1885883a 	add	r2,r3,r2
   158a4:	10801004 	addi	r2,r2,64
   158a8:	10800023 	ldbuio	r2,0(r2)
   158ac:	1007883a 	mov	r3,r2
   158b0:	e0bffc04 	addi	r2,fp,-16
   158b4:	1105883a 	add	r2,r2,r4
   158b8:	10c00005 	stb	r3,0(r2)
   158bc:	e0bffb17 	ldw	r2,-20(fp)
   158c0:	10800044 	addi	r2,r2,1
   158c4:	e0bffb15 	stw	r2,-20(fp)
   158c8:	e0bffb17 	ldw	r2,-20(fp)
   158cc:	10800310 	cmplti	r2,r2,12
   158d0:	103fee1e 	bne	r2,zero,1588c <alt_read_cfi_width+0x34c>
   158d4:	e0bffc03 	ldbu	r2,-16(fp)
   158d8:	10803fcc 	andi	r2,r2,255
   158dc:	10801458 	cmpnei	r2,r2,81
   158e0:	1000411e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   158e4:	e0bffc43 	ldbu	r2,-15(fp)
   158e8:	10803fcc 	andi	r2,r2,255
   158ec:	1004c03a 	cmpne	r2,r2,zero
   158f0:	10003d1e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   158f4:	e0bffc83 	ldbu	r2,-14(fp)
   158f8:	10803fcc 	andi	r2,r2,255
   158fc:	1004c03a 	cmpne	r2,r2,zero
   15900:	1000391e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15904:	e0bffcc3 	ldbu	r2,-13(fp)
   15908:	10803fcc 	andi	r2,r2,255
   1590c:	1004c03a 	cmpne	r2,r2,zero
   15910:	1000351e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15914:	e0bffd03 	ldbu	r2,-12(fp)
   15918:	10803fcc 	andi	r2,r2,255
   1591c:	10801498 	cmpnei	r2,r2,82
   15920:	1000311e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15924:	e0bffd43 	ldbu	r2,-11(fp)
   15928:	10803fcc 	andi	r2,r2,255
   1592c:	1004c03a 	cmpne	r2,r2,zero
   15930:	10002d1e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15934:	e0bffd83 	ldbu	r2,-10(fp)
   15938:	10803fcc 	andi	r2,r2,255
   1593c:	1004c03a 	cmpne	r2,r2,zero
   15940:	1000291e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15944:	e0bffdc3 	ldbu	r2,-9(fp)
   15948:	10803fcc 	andi	r2,r2,255
   1594c:	1004c03a 	cmpne	r2,r2,zero
   15950:	1000251e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15954:	e0bffe03 	ldbu	r2,-8(fp)
   15958:	10803fcc 	andi	r2,r2,255
   1595c:	10801658 	cmpnei	r2,r2,89
   15960:	1000211e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15964:	e0bffe43 	ldbu	r2,-7(fp)
   15968:	10803fcc 	andi	r2,r2,255
   1596c:	1004c03a 	cmpne	r2,r2,zero
   15970:	10001d1e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15974:	e0bffe83 	ldbu	r2,-6(fp)
   15978:	10803fcc 	andi	r2,r2,255
   1597c:	1004c03a 	cmpne	r2,r2,zero
   15980:	1000191e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15984:	e0bffec3 	ldbu	r2,-5(fp)
   15988:	10803fcc 	andi	r2,r2,255
   1598c:	1004c03a 	cmpne	r2,r2,zero
   15990:	1000151e 	bne	r2,zero,159e8 <alt_read_cfi_width+0x4a8>
   15994:	e0ffff17 	ldw	r3,-4(fp)
   15998:	00800104 	movi	r2,4
   1599c:	18802e15 	stw	r2,184(r3)
   159a0:	e0ffff17 	ldw	r3,-4(fp)
   159a4:	00800104 	movi	r2,4
   159a8:	18802f15 	stw	r2,188(r3)
   159ac:	e0bfff17 	ldw	r2,-4(fp)
   159b0:	10800a17 	ldw	r2,40(r2)
   159b4:	10802804 	addi	r2,r2,160
   159b8:	10800037 	ldwio	r2,0(r2)
   159bc:	e0bffa0d 	sth	r2,-24(fp)
   159c0:	e0bffa0b 	ldhu	r2,-24(fp)
   159c4:	10800044 	addi	r2,r2,1
   159c8:	e0bffa0d 	sth	r2,-24(fp)
   159cc:	e0bffa0b 	ldhu	r2,-24(fp)
   159d0:	1080010c 	andi	r2,r2,4
   159d4:	1004c03a 	cmpne	r2,r2,zero
   159d8:	1000be1e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   159dc:	00bffb44 	movi	r2,-19
   159e0:	e0bff915 	stw	r2,-28(fp)
   159e4:	0000bb06 	br	15cd4 <alt_read_cfi_width+0x794>
   159e8:	e0bfff17 	ldw	r2,-4(fp)
   159ec:	11000a17 	ldw	r4,40(r2)
   159f0:	01401544 	movi	r5,85
   159f4:	01802604 	movi	r6,152
   159f8:	0014b300 	call	14b30 <alt_write_flash_command_32bit_device_16bit_mode>
   159fc:	e03ffb15 	stw	zero,-20(fp)
   15a00:	00000f06 	br	15a40 <alt_read_cfi_width+0x500>
   15a04:	e13ffb17 	ldw	r4,-20(fp)
   15a08:	e0bfff17 	ldw	r2,-4(fp)
   15a0c:	10800a17 	ldw	r2,40(r2)
   15a10:	1007883a 	mov	r3,r2
   15a14:	e0bffb17 	ldw	r2,-20(fp)
   15a18:	1885883a 	add	r2,r3,r2
   15a1c:	10801004 	addi	r2,r2,64
   15a20:	10800023 	ldbuio	r2,0(r2)
   15a24:	1007883a 	mov	r3,r2
   15a28:	e0bffc04 	addi	r2,fp,-16
   15a2c:	1105883a 	add	r2,r2,r4
   15a30:	10c00005 	stb	r3,0(r2)
   15a34:	e0bffb17 	ldw	r2,-20(fp)
   15a38:	10800044 	addi	r2,r2,1
   15a3c:	e0bffb15 	stw	r2,-20(fp)
   15a40:	e0bffb17 	ldw	r2,-20(fp)
   15a44:	10800310 	cmplti	r2,r2,12
   15a48:	103fee1e 	bne	r2,zero,15a04 <alt_read_cfi_width+0x4c4>
   15a4c:	e0bffc03 	ldbu	r2,-16(fp)
   15a50:	10803fcc 	andi	r2,r2,255
   15a54:	10801458 	cmpnei	r2,r2,81
   15a58:	1000411e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15a5c:	e0bffc43 	ldbu	r2,-15(fp)
   15a60:	10803fcc 	andi	r2,r2,255
   15a64:	1004c03a 	cmpne	r2,r2,zero
   15a68:	10003d1e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15a6c:	e0bffc83 	ldbu	r2,-14(fp)
   15a70:	10803fcc 	andi	r2,r2,255
   15a74:	10801458 	cmpnei	r2,r2,81
   15a78:	1000391e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15a7c:	e0bffcc3 	ldbu	r2,-13(fp)
   15a80:	10803fcc 	andi	r2,r2,255
   15a84:	1004c03a 	cmpne	r2,r2,zero
   15a88:	1000351e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15a8c:	e0bffd03 	ldbu	r2,-12(fp)
   15a90:	10803fcc 	andi	r2,r2,255
   15a94:	10801498 	cmpnei	r2,r2,82
   15a98:	1000311e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15a9c:	e0bffd43 	ldbu	r2,-11(fp)
   15aa0:	10803fcc 	andi	r2,r2,255
   15aa4:	1004c03a 	cmpne	r2,r2,zero
   15aa8:	10002d1e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15aac:	e0bffd83 	ldbu	r2,-10(fp)
   15ab0:	10803fcc 	andi	r2,r2,255
   15ab4:	10801498 	cmpnei	r2,r2,82
   15ab8:	1000291e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15abc:	e0bffdc3 	ldbu	r2,-9(fp)
   15ac0:	10803fcc 	andi	r2,r2,255
   15ac4:	1004c03a 	cmpne	r2,r2,zero
   15ac8:	1000251e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15acc:	e0bffe03 	ldbu	r2,-8(fp)
   15ad0:	10803fcc 	andi	r2,r2,255
   15ad4:	10801658 	cmpnei	r2,r2,89
   15ad8:	1000211e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15adc:	e0bffe43 	ldbu	r2,-7(fp)
   15ae0:	10803fcc 	andi	r2,r2,255
   15ae4:	1004c03a 	cmpne	r2,r2,zero
   15ae8:	10001d1e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15aec:	e0bffe83 	ldbu	r2,-6(fp)
   15af0:	10803fcc 	andi	r2,r2,255
   15af4:	10801658 	cmpnei	r2,r2,89
   15af8:	1000191e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15afc:	e0bffec3 	ldbu	r2,-5(fp)
   15b00:	10803fcc 	andi	r2,r2,255
   15b04:	1004c03a 	cmpne	r2,r2,zero
   15b08:	1000151e 	bne	r2,zero,15b60 <alt_read_cfi_width+0x620>
   15b0c:	e0ffff17 	ldw	r3,-4(fp)
   15b10:	00800084 	movi	r2,2
   15b14:	18802e15 	stw	r2,184(r3)
   15b18:	e0ffff17 	ldw	r3,-4(fp)
   15b1c:	00800104 	movi	r2,4
   15b20:	18802f15 	stw	r2,188(r3)
   15b24:	e0bfff17 	ldw	r2,-4(fp)
   15b28:	10800a17 	ldw	r2,40(r2)
   15b2c:	10802804 	addi	r2,r2,160
   15b30:	10800037 	ldwio	r2,0(r2)
   15b34:	e0bffa0d 	sth	r2,-24(fp)
   15b38:	e0bffa0b 	ldhu	r2,-24(fp)
   15b3c:	10800044 	addi	r2,r2,1
   15b40:	e0bffa0d 	sth	r2,-24(fp)
   15b44:	e0bffa0b 	ldhu	r2,-24(fp)
   15b48:	1080010c 	andi	r2,r2,4
   15b4c:	1004c03a 	cmpne	r2,r2,zero
   15b50:	1000601e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15b54:	00bffb44 	movi	r2,-19
   15b58:	e0bff915 	stw	r2,-28(fp)
   15b5c:	00005d06 	br	15cd4 <alt_read_cfi_width+0x794>
   15b60:	e0bfff17 	ldw	r2,-4(fp)
   15b64:	11000a17 	ldw	r4,40(r2)
   15b68:	01401544 	movi	r5,85
   15b6c:	01802604 	movi	r6,152
   15b70:	0014aa40 	call	14aa4 <alt_write_flash_command_32bit_device_8bit_mode>
   15b74:	e03ffb15 	stw	zero,-20(fp)
   15b78:	00000f06 	br	15bb8 <alt_read_cfi_width+0x678>
   15b7c:	e13ffb17 	ldw	r4,-20(fp)
   15b80:	e0bfff17 	ldw	r2,-4(fp)
   15b84:	10800a17 	ldw	r2,40(r2)
   15b88:	1007883a 	mov	r3,r2
   15b8c:	e0bffb17 	ldw	r2,-20(fp)
   15b90:	1885883a 	add	r2,r3,r2
   15b94:	10801004 	addi	r2,r2,64
   15b98:	10800023 	ldbuio	r2,0(r2)
   15b9c:	1007883a 	mov	r3,r2
   15ba0:	e0bffc04 	addi	r2,fp,-16
   15ba4:	1105883a 	add	r2,r2,r4
   15ba8:	10c00005 	stb	r3,0(r2)
   15bac:	e0bffb17 	ldw	r2,-20(fp)
   15bb0:	10800044 	addi	r2,r2,1
   15bb4:	e0bffb15 	stw	r2,-20(fp)
   15bb8:	e0bffb17 	ldw	r2,-20(fp)
   15bbc:	10800310 	cmplti	r2,r2,12
   15bc0:	103fee1e 	bne	r2,zero,15b7c <alt_read_cfi_width+0x63c>
   15bc4:	e0bffc03 	ldbu	r2,-16(fp)
   15bc8:	10803fcc 	andi	r2,r2,255
   15bcc:	10801458 	cmpnei	r2,r2,81
   15bd0:	1000401e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15bd4:	e0bffc43 	ldbu	r2,-15(fp)
   15bd8:	10803fcc 	andi	r2,r2,255
   15bdc:	10801458 	cmpnei	r2,r2,81
   15be0:	10003c1e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15be4:	e0bffc83 	ldbu	r2,-14(fp)
   15be8:	10803fcc 	andi	r2,r2,255
   15bec:	10801458 	cmpnei	r2,r2,81
   15bf0:	1000381e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15bf4:	e0bffcc3 	ldbu	r2,-13(fp)
   15bf8:	10803fcc 	andi	r2,r2,255
   15bfc:	10801458 	cmpnei	r2,r2,81
   15c00:	1000341e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c04:	e0bffd03 	ldbu	r2,-12(fp)
   15c08:	10803fcc 	andi	r2,r2,255
   15c0c:	10801498 	cmpnei	r2,r2,82
   15c10:	1000301e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c14:	e0bffd43 	ldbu	r2,-11(fp)
   15c18:	10803fcc 	andi	r2,r2,255
   15c1c:	10801498 	cmpnei	r2,r2,82
   15c20:	10002c1e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c24:	e0bffd83 	ldbu	r2,-10(fp)
   15c28:	10803fcc 	andi	r2,r2,255
   15c2c:	10801498 	cmpnei	r2,r2,82
   15c30:	1000281e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c34:	e0bffdc3 	ldbu	r2,-9(fp)
   15c38:	10803fcc 	andi	r2,r2,255
   15c3c:	10801498 	cmpnei	r2,r2,82
   15c40:	1000241e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c44:	e0bffe03 	ldbu	r2,-8(fp)
   15c48:	10803fcc 	andi	r2,r2,255
   15c4c:	10801658 	cmpnei	r2,r2,89
   15c50:	1000201e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c54:	e0bffe43 	ldbu	r2,-7(fp)
   15c58:	10803fcc 	andi	r2,r2,255
   15c5c:	10801658 	cmpnei	r2,r2,89
   15c60:	10001c1e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c64:	e0bffe83 	ldbu	r2,-6(fp)
   15c68:	10803fcc 	andi	r2,r2,255
   15c6c:	10801658 	cmpnei	r2,r2,89
   15c70:	1000181e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c74:	e0bffec3 	ldbu	r2,-5(fp)
   15c78:	10803fcc 	andi	r2,r2,255
   15c7c:	10801658 	cmpnei	r2,r2,89
   15c80:	1000141e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15c84:	e0ffff17 	ldw	r3,-4(fp)
   15c88:	00800044 	movi	r2,1
   15c8c:	18802e15 	stw	r2,184(r3)
   15c90:	e0ffff17 	ldw	r3,-4(fp)
   15c94:	00800104 	movi	r2,4
   15c98:	18802f15 	stw	r2,188(r3)
   15c9c:	e0bfff17 	ldw	r2,-4(fp)
   15ca0:	10800a17 	ldw	r2,40(r2)
   15ca4:	10802804 	addi	r2,r2,160
   15ca8:	10800037 	ldwio	r2,0(r2)
   15cac:	e0bffa0d 	sth	r2,-24(fp)
   15cb0:	e0bffa0b 	ldhu	r2,-24(fp)
   15cb4:	10800044 	addi	r2,r2,1
   15cb8:	e0bffa0d 	sth	r2,-24(fp)
   15cbc:	e0bffa0b 	ldhu	r2,-24(fp)
   15cc0:	1080010c 	andi	r2,r2,4
   15cc4:	1004c03a 	cmpne	r2,r2,zero
   15cc8:	1000021e 	bne	r2,zero,15cd4 <alt_read_cfi_width+0x794>
   15ccc:	00bffb44 	movi	r2,-19
   15cd0:	e0bff915 	stw	r2,-28(fp)
   15cd4:	e0bff917 	ldw	r2,-28(fp)
   15cd8:	e037883a 	mov	sp,fp
   15cdc:	dfc00117 	ldw	ra,4(sp)
   15ce0:	df000017 	ldw	fp,0(sp)
   15ce4:	dec00204 	addi	sp,sp,8
   15ce8:	f800283a 	ret

00015cec <alt_check_primary_table>:
   15cec:	defff904 	addi	sp,sp,-28
   15cf0:	dfc00615 	stw	ra,24(sp)
   15cf4:	df000515 	stw	fp,20(sp)
   15cf8:	dc000415 	stw	r16,16(sp)
   15cfc:	df000404 	addi	fp,sp,16
   15d00:	e13fff15 	stw	r4,-4(fp)
   15d04:	e03ffc15 	stw	zero,-16(fp)
   15d08:	e13fff17 	ldw	r4,-4(fp)
   15d0c:	01400544 	movi	r5,21
   15d10:	0014ee40 	call	14ee4 <alt_read_16bit_query_entry>
   15d14:	10ffffcc 	andi	r3,r2,65535
   15d18:	e0bfff17 	ldw	r2,-4(fp)
   15d1c:	10c03215 	stw	r3,200(r2)
   15d20:	e03ffd15 	stw	zero,-12(fp)
   15d24:	00001006 	br	15d68 <alt_check_primary_table+0x7c>
   15d28:	e43ffd17 	ldw	r16,-12(fp)
   15d2c:	e0bfff17 	ldw	r2,-4(fp)
   15d30:	11803417 	ldw	r6,208(r2)
   15d34:	e0bfff17 	ldw	r2,-4(fp)
   15d38:	10c03217 	ldw	r3,200(r2)
   15d3c:	e0bffd17 	ldw	r2,-12(fp)
   15d40:	188b883a 	add	r5,r3,r2
   15d44:	e13fff17 	ldw	r4,-4(fp)
   15d48:	303ee83a 	callr	r6
   15d4c:	1007883a 	mov	r3,r2
   15d50:	e0bffe04 	addi	r2,fp,-8
   15d54:	1405883a 	add	r2,r2,r16
   15d58:	10c00005 	stb	r3,0(r2)
   15d5c:	e0bffd17 	ldw	r2,-12(fp)
   15d60:	10800044 	addi	r2,r2,1
   15d64:	e0bffd15 	stw	r2,-12(fp)
   15d68:	e0bffd17 	ldw	r2,-12(fp)
   15d6c:	108000d0 	cmplti	r2,r2,3
   15d70:	103fed1e 	bne	r2,zero,15d28 <alt_check_primary_table+0x3c>
   15d74:	e0bffe03 	ldbu	r2,-8(fp)
   15d78:	10803fcc 	andi	r2,r2,255
   15d7c:	10801418 	cmpnei	r2,r2,80
   15d80:	1000081e 	bne	r2,zero,15da4 <alt_check_primary_table+0xb8>
   15d84:	e0bffe43 	ldbu	r2,-7(fp)
   15d88:	10803fcc 	andi	r2,r2,255
   15d8c:	10801498 	cmpnei	r2,r2,82
   15d90:	1000041e 	bne	r2,zero,15da4 <alt_check_primary_table+0xb8>
   15d94:	e0bffe83 	ldbu	r2,-6(fp)
   15d98:	10803fcc 	andi	r2,r2,255
   15d9c:	10801260 	cmpeqi	r2,r2,73
   15da0:	1000021e 	bne	r2,zero,15dac <alt_check_primary_table+0xc0>
   15da4:	00bffb44 	movi	r2,-19
   15da8:	e0bffc15 	stw	r2,-16(fp)
   15dac:	e0bffc17 	ldw	r2,-16(fp)
   15db0:	e037883a 	mov	sp,fp
   15db4:	dfc00217 	ldw	ra,8(sp)
   15db8:	df000117 	ldw	fp,4(sp)
   15dbc:	dc000017 	ldw	r16,0(sp)
   15dc0:	dec00304 	addi	sp,sp,12
   15dc4:	f800283a 	ret

00015dc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15dc8:	defffa04 	addi	sp,sp,-24
   15dcc:	dfc00515 	stw	ra,20(sp)
   15dd0:	df000415 	stw	fp,16(sp)
   15dd4:	df000404 	addi	fp,sp,16
   15dd8:	e13ffd15 	stw	r4,-12(fp)
   15ddc:	e17ffe15 	stw	r5,-8(fp)
   15de0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15de4:	e0bffd17 	ldw	r2,-12(fp)
   15de8:	10800017 	ldw	r2,0(r2)
   15dec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15df0:	e0bffc17 	ldw	r2,-16(fp)
   15df4:	11000a04 	addi	r4,r2,40
   15df8:	e0bffd17 	ldw	r2,-12(fp)
   15dfc:	11c00217 	ldw	r7,8(r2)
   15e00:	e17ffe17 	ldw	r5,-8(fp)
   15e04:	e1bfff17 	ldw	r6,-4(fp)
   15e08:	001640c0 	call	1640c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15e0c:	e037883a 	mov	sp,fp
   15e10:	dfc00117 	ldw	ra,4(sp)
   15e14:	df000017 	ldw	fp,0(sp)
   15e18:	dec00204 	addi	sp,sp,8
   15e1c:	f800283a 	ret

00015e20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15e20:	defffa04 	addi	sp,sp,-24
   15e24:	dfc00515 	stw	ra,20(sp)
   15e28:	df000415 	stw	fp,16(sp)
   15e2c:	df000404 	addi	fp,sp,16
   15e30:	e13ffd15 	stw	r4,-12(fp)
   15e34:	e17ffe15 	stw	r5,-8(fp)
   15e38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15e3c:	e0bffd17 	ldw	r2,-12(fp)
   15e40:	10800017 	ldw	r2,0(r2)
   15e44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15e48:	e0bffc17 	ldw	r2,-16(fp)
   15e4c:	11000a04 	addi	r4,r2,40
   15e50:	e0bffd17 	ldw	r2,-12(fp)
   15e54:	11c00217 	ldw	r7,8(r2)
   15e58:	e17ffe17 	ldw	r5,-8(fp)
   15e5c:	e1bfff17 	ldw	r6,-4(fp)
   15e60:	00166300 	call	16630 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15e64:	e037883a 	mov	sp,fp
   15e68:	dfc00117 	ldw	ra,4(sp)
   15e6c:	df000017 	ldw	fp,0(sp)
   15e70:	dec00204 	addi	sp,sp,8
   15e74:	f800283a 	ret

00015e78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15e78:	defffc04 	addi	sp,sp,-16
   15e7c:	dfc00315 	stw	ra,12(sp)
   15e80:	df000215 	stw	fp,8(sp)
   15e84:	df000204 	addi	fp,sp,8
   15e88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15e8c:	e0bfff17 	ldw	r2,-4(fp)
   15e90:	10800017 	ldw	r2,0(r2)
   15e94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15e98:	e0bffe17 	ldw	r2,-8(fp)
   15e9c:	11000a04 	addi	r4,r2,40
   15ea0:	e0bfff17 	ldw	r2,-4(fp)
   15ea4:	11400217 	ldw	r5,8(r2)
   15ea8:	00162a40 	call	162a4 <altera_avalon_jtag_uart_close>
}
   15eac:	e037883a 	mov	sp,fp
   15eb0:	dfc00117 	ldw	ra,4(sp)
   15eb4:	df000017 	ldw	fp,0(sp)
   15eb8:	dec00204 	addi	sp,sp,8
   15ebc:	f800283a 	ret

00015ec0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15ec0:	defffa04 	addi	sp,sp,-24
   15ec4:	dfc00515 	stw	ra,20(sp)
   15ec8:	df000415 	stw	fp,16(sp)
   15ecc:	df000404 	addi	fp,sp,16
   15ed0:	e13ffd15 	stw	r4,-12(fp)
   15ed4:	e17ffe15 	stw	r5,-8(fp)
   15ed8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15edc:	e0bffd17 	ldw	r2,-12(fp)
   15ee0:	10800017 	ldw	r2,0(r2)
   15ee4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15ee8:	e0bffc17 	ldw	r2,-16(fp)
   15eec:	11000a04 	addi	r4,r2,40
   15ef0:	e17ffe17 	ldw	r5,-8(fp)
   15ef4:	e1bfff17 	ldw	r6,-4(fp)
   15ef8:	00163180 	call	16318 <altera_avalon_jtag_uart_ioctl>
}
   15efc:	e037883a 	mov	sp,fp
   15f00:	dfc00117 	ldw	ra,4(sp)
   15f04:	df000017 	ldw	fp,0(sp)
   15f08:	dec00204 	addi	sp,sp,8
   15f0c:	f800283a 	ret

00015f10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15f10:	defffb04 	addi	sp,sp,-20
   15f14:	dfc00415 	stw	ra,16(sp)
   15f18:	df000315 	stw	fp,12(sp)
   15f1c:	df000304 	addi	fp,sp,12
   15f20:	e13ffd15 	stw	r4,-12(fp)
   15f24:	e17ffe15 	stw	r5,-8(fp)
   15f28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15f2c:	e0fffd17 	ldw	r3,-12(fp)
   15f30:	00800044 	movi	r2,1
   15f34:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15f38:	e0bffd17 	ldw	r2,-12(fp)
   15f3c:	10800017 	ldw	r2,0(r2)
   15f40:	11000104 	addi	r4,r2,4
   15f44:	e0bffd17 	ldw	r2,-12(fp)
   15f48:	10800817 	ldw	r2,32(r2)
   15f4c:	1007883a 	mov	r3,r2
   15f50:	2005883a 	mov	r2,r4
   15f54:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15f58:	e13fff17 	ldw	r4,-4(fp)
   15f5c:	e17ffd17 	ldw	r5,-12(fp)
   15f60:	01800074 	movhi	r6,1
   15f64:	3197f204 	addi	r6,r6,24520
   15f68:	00019140 	call	1914 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15f6c:	e0bffd17 	ldw	r2,-12(fp)
   15f70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15f74:	e0bffd17 	ldw	r2,-12(fp)
   15f78:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15f7c:	00820034 	movhi	r2,2048
   15f80:	108a8c04 	addi	r2,r2,10800
   15f84:	10800017 	ldw	r2,0(r2)
   15f88:	100b883a 	mov	r5,r2
   15f8c:	01800074 	movhi	r6,1
   15f90:	31987d04 	addi	r6,r6,25076
   15f94:	e1fffd17 	ldw	r7,-12(fp)
   15f98:	001a1c00 	call	1a1c0 <alt_alarm_start>
   15f9c:	1004403a 	cmpge	r2,r2,zero
   15fa0:	1000041e 	bne	r2,zero,15fb4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15fa4:	e0fffd17 	ldw	r3,-12(fp)
   15fa8:	00a00034 	movhi	r2,32768
   15fac:	10bfffc4 	addi	r2,r2,-1
   15fb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15fb4:	e037883a 	mov	sp,fp
   15fb8:	dfc00117 	ldw	ra,4(sp)
   15fbc:	df000017 	ldw	fp,0(sp)
   15fc0:	dec00204 	addi	sp,sp,8
   15fc4:	f800283a 	ret

00015fc8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15fc8:	defff704 	addi	sp,sp,-36
   15fcc:	df000815 	stw	fp,32(sp)
   15fd0:	df000804 	addi	fp,sp,32
   15fd4:	e13ffe15 	stw	r4,-8(fp)
   15fd8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15fdc:	e0bffe17 	ldw	r2,-8(fp)
   15fe0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   15fe4:	e0bffd17 	ldw	r2,-12(fp)
   15fe8:	10800017 	ldw	r2,0(r2)
   15fec:	e0bffc15 	stw	r2,-16(fp)
   15ff0:	00000006 	br	15ff4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15ff4:	e0bffc17 	ldw	r2,-16(fp)
   15ff8:	10800104 	addi	r2,r2,4
   15ffc:	10800037 	ldwio	r2,0(r2)
   16000:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16004:	e0bffb17 	ldw	r2,-20(fp)
   16008:	1080c00c 	andi	r2,r2,768
   1600c:	1005003a 	cmpeq	r2,r2,zero
   16010:	1000741e 	bne	r2,zero,161e4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16014:	e0bffb17 	ldw	r2,-20(fp)
   16018:	1080400c 	andi	r2,r2,256
   1601c:	1005003a 	cmpeq	r2,r2,zero
   16020:	1000351e 	bne	r2,zero,160f8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16024:	00800074 	movhi	r2,1
   16028:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1602c:	e0bffd17 	ldw	r2,-12(fp)
   16030:	10800a17 	ldw	r2,40(r2)
   16034:	10800044 	addi	r2,r2,1
   16038:	1081ffcc 	andi	r2,r2,2047
   1603c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   16040:	e0bffd17 	ldw	r2,-12(fp)
   16044:	10c00b17 	ldw	r3,44(r2)
   16048:	e0bff917 	ldw	r2,-28(fp)
   1604c:	18801626 	beq	r3,r2,160a8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16050:	e0bffc17 	ldw	r2,-16(fp)
   16054:	10800037 	ldwio	r2,0(r2)
   16058:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1605c:	e0bffa17 	ldw	r2,-24(fp)
   16060:	10a0000c 	andi	r2,r2,32768
   16064:	1005003a 	cmpeq	r2,r2,zero
   16068:	10000f1e 	bne	r2,zero,160a8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1606c:	e0bffd17 	ldw	r2,-12(fp)
   16070:	10c00a17 	ldw	r3,40(r2)
   16074:	e0bffa17 	ldw	r2,-24(fp)
   16078:	1009883a 	mov	r4,r2
   1607c:	e0bffd17 	ldw	r2,-12(fp)
   16080:	1885883a 	add	r2,r3,r2
   16084:	10800e04 	addi	r2,r2,56
   16088:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1608c:	e0bffd17 	ldw	r2,-12(fp)
   16090:	10800a17 	ldw	r2,40(r2)
   16094:	10800044 	addi	r2,r2,1
   16098:	10c1ffcc 	andi	r3,r2,2047
   1609c:	e0bffd17 	ldw	r2,-12(fp)
   160a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   160a4:	003fe106 	br	1602c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   160a8:	e0bffa17 	ldw	r2,-24(fp)
   160ac:	10bfffec 	andhi	r2,r2,65535
   160b0:	1005003a 	cmpeq	r2,r2,zero
   160b4:	1000101e 	bne	r2,zero,160f8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   160b8:	e0bffd17 	ldw	r2,-12(fp)
   160bc:	10c00817 	ldw	r3,32(r2)
   160c0:	00bfff84 	movi	r2,-2
   160c4:	1886703a 	and	r3,r3,r2
   160c8:	e0bffd17 	ldw	r2,-12(fp)
   160cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   160d0:	e0bffc17 	ldw	r2,-16(fp)
   160d4:	11000104 	addi	r4,r2,4
   160d8:	e0bffd17 	ldw	r2,-12(fp)
   160dc:	10800817 	ldw	r2,32(r2)
   160e0:	1007883a 	mov	r3,r2
   160e4:	2005883a 	mov	r2,r4
   160e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   160ec:	e0bffc17 	ldw	r2,-16(fp)
   160f0:	10800104 	addi	r2,r2,4
   160f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   160f8:	e0bffb17 	ldw	r2,-20(fp)
   160fc:	1080800c 	andi	r2,r2,512
   16100:	1005003a 	cmpeq	r2,r2,zero
   16104:	103fbb1e 	bne	r2,zero,15ff4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16108:	e0bffb17 	ldw	r2,-20(fp)
   1610c:	10bfffec 	andhi	r2,r2,65535
   16110:	1004d43a 	srli	r2,r2,16
   16114:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16118:	00001506 	br	16170 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1611c:	e13ffc17 	ldw	r4,-16(fp)
   16120:	e0bffd17 	ldw	r2,-12(fp)
   16124:	10c00d17 	ldw	r3,52(r2)
   16128:	e0bffd17 	ldw	r2,-12(fp)
   1612c:	1885883a 	add	r2,r3,r2
   16130:	10820e04 	addi	r2,r2,2104
   16134:	10800003 	ldbu	r2,0(r2)
   16138:	10c03fcc 	andi	r3,r2,255
   1613c:	18c0201c 	xori	r3,r3,128
   16140:	18ffe004 	addi	r3,r3,-128
   16144:	2005883a 	mov	r2,r4
   16148:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1614c:	e0bffd17 	ldw	r2,-12(fp)
   16150:	10800d17 	ldw	r2,52(r2)
   16154:	10800044 	addi	r2,r2,1
   16158:	10c1ffcc 	andi	r3,r2,2047
   1615c:	e0bffd17 	ldw	r2,-12(fp)
   16160:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   16164:	e0bff817 	ldw	r2,-32(fp)
   16168:	10bfffc4 	addi	r2,r2,-1
   1616c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16170:	e0bff817 	ldw	r2,-32(fp)
   16174:	1005003a 	cmpeq	r2,r2,zero
   16178:	1000051e 	bne	r2,zero,16190 <altera_avalon_jtag_uart_irq+0x1c8>
   1617c:	e0bffd17 	ldw	r2,-12(fp)
   16180:	10c00d17 	ldw	r3,52(r2)
   16184:	e0bffd17 	ldw	r2,-12(fp)
   16188:	10800c17 	ldw	r2,48(r2)
   1618c:	18bfe31e 	bne	r3,r2,1611c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16190:	e0bff817 	ldw	r2,-32(fp)
   16194:	1005003a 	cmpeq	r2,r2,zero
   16198:	103f961e 	bne	r2,zero,15ff4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1619c:	e0bffd17 	ldw	r2,-12(fp)
   161a0:	10c00817 	ldw	r3,32(r2)
   161a4:	00bfff44 	movi	r2,-3
   161a8:	1886703a 	and	r3,r3,r2
   161ac:	e0bffd17 	ldw	r2,-12(fp)
   161b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   161b4:	e0bffd17 	ldw	r2,-12(fp)
   161b8:	10800017 	ldw	r2,0(r2)
   161bc:	11000104 	addi	r4,r2,4
   161c0:	e0bffd17 	ldw	r2,-12(fp)
   161c4:	10800817 	ldw	r2,32(r2)
   161c8:	1007883a 	mov	r3,r2
   161cc:	2005883a 	mov	r2,r4
   161d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   161d4:	e0bffc17 	ldw	r2,-16(fp)
   161d8:	10800104 	addi	r2,r2,4
   161dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   161e0:	003f8406 	br	15ff4 <altera_avalon_jtag_uart_irq+0x2c>
}
   161e4:	e037883a 	mov	sp,fp
   161e8:	df000017 	ldw	fp,0(sp)
   161ec:	dec00104 	addi	sp,sp,4
   161f0:	f800283a 	ret

000161f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   161f4:	defffc04 	addi	sp,sp,-16
   161f8:	df000315 	stw	fp,12(sp)
   161fc:	df000304 	addi	fp,sp,12
   16200:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16204:	e0bfff17 	ldw	r2,-4(fp)
   16208:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1620c:	e0bffe17 	ldw	r2,-8(fp)
   16210:	10800017 	ldw	r2,0(r2)
   16214:	10800104 	addi	r2,r2,4
   16218:	10800037 	ldwio	r2,0(r2)
   1621c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16220:	e0bffd17 	ldw	r2,-12(fp)
   16224:	1081000c 	andi	r2,r2,1024
   16228:	1005003a 	cmpeq	r2,r2,zero
   1622c:	10000c1e 	bne	r2,zero,16260 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   16230:	e0bffe17 	ldw	r2,-8(fp)
   16234:	10800017 	ldw	r2,0(r2)
   16238:	11000104 	addi	r4,r2,4
   1623c:	e0bffe17 	ldw	r2,-8(fp)
   16240:	10800817 	ldw	r2,32(r2)
   16244:	10810014 	ori	r2,r2,1024
   16248:	1007883a 	mov	r3,r2
   1624c:	2005883a 	mov	r2,r4
   16250:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   16254:	e0bffe17 	ldw	r2,-8(fp)
   16258:	10000915 	stw	zero,36(r2)
   1625c:	00000a06 	br	16288 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   16260:	e0bffe17 	ldw	r2,-8(fp)
   16264:	10c00917 	ldw	r3,36(r2)
   16268:	00a00034 	movhi	r2,32768
   1626c:	10bfff04 	addi	r2,r2,-4
   16270:	10c00536 	bltu	r2,r3,16288 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   16274:	e0bffe17 	ldw	r2,-8(fp)
   16278:	10800917 	ldw	r2,36(r2)
   1627c:	10c00044 	addi	r3,r2,1
   16280:	e0bffe17 	ldw	r2,-8(fp)
   16284:	10c00915 	stw	r3,36(r2)
   16288:	00820034 	movhi	r2,2048
   1628c:	108a8c04 	addi	r2,r2,10800
   16290:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   16294:	e037883a 	mov	sp,fp
   16298:	df000017 	ldw	fp,0(sp)
   1629c:	dec00104 	addi	sp,sp,4
   162a0:	f800283a 	ret

000162a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   162a4:	defffc04 	addi	sp,sp,-16
   162a8:	df000315 	stw	fp,12(sp)
   162ac:	df000304 	addi	fp,sp,12
   162b0:	e13ffd15 	stw	r4,-12(fp)
   162b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   162b8:	00000706 	br	162d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   162bc:	e0bffe17 	ldw	r2,-8(fp)
   162c0:	1090000c 	andi	r2,r2,16384
   162c4:	1005003a 	cmpeq	r2,r2,zero
   162c8:	1000031e 	bne	r2,zero,162d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   162cc:	00bffd44 	movi	r2,-11
   162d0:	e0bfff15 	stw	r2,-4(fp)
   162d4:	00000b06 	br	16304 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   162d8:	e0bffd17 	ldw	r2,-12(fp)
   162dc:	10c00d17 	ldw	r3,52(r2)
   162e0:	e0bffd17 	ldw	r2,-12(fp)
   162e4:	10800c17 	ldw	r2,48(r2)
   162e8:	18800526 	beq	r3,r2,16300 <altera_avalon_jtag_uart_close+0x5c>
   162ec:	e0bffd17 	ldw	r2,-12(fp)
   162f0:	10c00917 	ldw	r3,36(r2)
   162f4:	e0bffd17 	ldw	r2,-12(fp)
   162f8:	10800117 	ldw	r2,4(r2)
   162fc:	18bfef36 	bltu	r3,r2,162bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16300:	e03fff15 	stw	zero,-4(fp)
   16304:	e0bfff17 	ldw	r2,-4(fp)
}
   16308:	e037883a 	mov	sp,fp
   1630c:	df000017 	ldw	fp,0(sp)
   16310:	dec00104 	addi	sp,sp,4
   16314:	f800283a 	ret

00016318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16318:	defff804 	addi	sp,sp,-32
   1631c:	df000715 	stw	fp,28(sp)
   16320:	df000704 	addi	fp,sp,28
   16324:	e13ffb15 	stw	r4,-20(fp)
   16328:	e17ffc15 	stw	r5,-16(fp)
   1632c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   16330:	00bff9c4 	movi	r2,-25
   16334:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   16338:	e0bffc17 	ldw	r2,-16(fp)
   1633c:	e0bfff15 	stw	r2,-4(fp)
   16340:	e0ffff17 	ldw	r3,-4(fp)
   16344:	189a8060 	cmpeqi	r2,r3,27137
   16348:	1000041e 	bne	r2,zero,1635c <altera_avalon_jtag_uart_ioctl+0x44>
   1634c:	e0ffff17 	ldw	r3,-4(fp)
   16350:	189a80a0 	cmpeqi	r2,r3,27138
   16354:	10001b1e 	bne	r2,zero,163c4 <altera_avalon_jtag_uart_ioctl+0xac>
   16358:	00002706 	br	163f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1635c:	e0bffb17 	ldw	r2,-20(fp)
   16360:	10c00117 	ldw	r3,4(r2)
   16364:	00a00034 	movhi	r2,32768
   16368:	10bfffc4 	addi	r2,r2,-1
   1636c:	18802226 	beq	r3,r2,163f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   16370:	e0bffd17 	ldw	r2,-12(fp)
   16374:	10800017 	ldw	r2,0(r2)
   16378:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1637c:	e0bff917 	ldw	r2,-28(fp)
   16380:	10800090 	cmplti	r2,r2,2
   16384:	1000071e 	bne	r2,zero,163a4 <altera_avalon_jtag_uart_ioctl+0x8c>
   16388:	e0fff917 	ldw	r3,-28(fp)
   1638c:	00a00034 	movhi	r2,32768
   16390:	10bfffc4 	addi	r2,r2,-1
   16394:	18800326 	beq	r3,r2,163a4 <altera_avalon_jtag_uart_ioctl+0x8c>
   16398:	e0bff917 	ldw	r2,-28(fp)
   1639c:	e0bffe15 	stw	r2,-8(fp)
   163a0:	00000306 	br	163b0 <altera_avalon_jtag_uart_ioctl+0x98>
   163a4:	00e00034 	movhi	r3,32768
   163a8:	18ffff84 	addi	r3,r3,-2
   163ac:	e0fffe15 	stw	r3,-8(fp)
   163b0:	e0bffb17 	ldw	r2,-20(fp)
   163b4:	e0fffe17 	ldw	r3,-8(fp)
   163b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   163bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   163c0:	00000d06 	br	163f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   163c4:	e0bffb17 	ldw	r2,-20(fp)
   163c8:	10c00117 	ldw	r3,4(r2)
   163cc:	00a00034 	movhi	r2,32768
   163d0:	10bfffc4 	addi	r2,r2,-1
   163d4:	18800826 	beq	r3,r2,163f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   163d8:	e13ffd17 	ldw	r4,-12(fp)
   163dc:	e0bffb17 	ldw	r2,-20(fp)
   163e0:	10c00917 	ldw	r3,36(r2)
   163e4:	e0bffb17 	ldw	r2,-20(fp)
   163e8:	10800117 	ldw	r2,4(r2)
   163ec:	1885803a 	cmpltu	r2,r3,r2
   163f0:	20800015 	stw	r2,0(r4)
      rc = 0;
   163f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   163f8:	e0bffa17 	ldw	r2,-24(fp)
}
   163fc:	e037883a 	mov	sp,fp
   16400:	df000017 	ldw	fp,0(sp)
   16404:	dec00104 	addi	sp,sp,4
   16408:	f800283a 	ret

0001640c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1640c:	defff204 	addi	sp,sp,-56
   16410:	dfc00d15 	stw	ra,52(sp)
   16414:	df000c15 	stw	fp,48(sp)
   16418:	df000c04 	addi	fp,sp,48
   1641c:	e13ffb15 	stw	r4,-20(fp)
   16420:	e17ffc15 	stw	r5,-16(fp)
   16424:	e1bffd15 	stw	r6,-12(fp)
   16428:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1642c:	e0bffc17 	ldw	r2,-16(fp)
   16430:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16434:	00004806 	br	16558 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16438:	e0bffb17 	ldw	r2,-20(fp)
   1643c:	10800a17 	ldw	r2,40(r2)
   16440:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   16444:	e0bffb17 	ldw	r2,-20(fp)
   16448:	10800b17 	ldw	r2,44(r2)
   1644c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   16450:	e0fff717 	ldw	r3,-36(fp)
   16454:	e0bff617 	ldw	r2,-40(fp)
   16458:	18800536 	bltu	r3,r2,16470 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1645c:	e0bff717 	ldw	r2,-36(fp)
   16460:	e0fff617 	ldw	r3,-40(fp)
   16464:	10c5c83a 	sub	r2,r2,r3
   16468:	e0bff815 	stw	r2,-32(fp)
   1646c:	00000406 	br	16480 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16470:	00820004 	movi	r2,2048
   16474:	e0fff617 	ldw	r3,-40(fp)
   16478:	10c5c83a 	sub	r2,r2,r3
   1647c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   16480:	e0bff817 	ldw	r2,-32(fp)
   16484:	1005003a 	cmpeq	r2,r2,zero
   16488:	10001f1e 	bne	r2,zero,16508 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1648c:	e0fffd17 	ldw	r3,-12(fp)
   16490:	e0bff817 	ldw	r2,-32(fp)
   16494:	1880022e 	bgeu	r3,r2,164a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   16498:	e0bffd17 	ldw	r2,-12(fp)
   1649c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   164a0:	e0bffb17 	ldw	r2,-20(fp)
   164a4:	10c00e04 	addi	r3,r2,56
   164a8:	e0bff617 	ldw	r2,-40(fp)
   164ac:	1887883a 	add	r3,r3,r2
   164b0:	e0bffa17 	ldw	r2,-24(fp)
   164b4:	1009883a 	mov	r4,r2
   164b8:	180b883a 	mov	r5,r3
   164bc:	e1bff817 	ldw	r6,-32(fp)
   164c0:	00083140 	call	8314 <memcpy>
      ptr   += n;
   164c4:	e0fff817 	ldw	r3,-32(fp)
   164c8:	e0bffa17 	ldw	r2,-24(fp)
   164cc:	10c5883a 	add	r2,r2,r3
   164d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   164d4:	e0fffd17 	ldw	r3,-12(fp)
   164d8:	e0bff817 	ldw	r2,-32(fp)
   164dc:	1885c83a 	sub	r2,r3,r2
   164e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   164e4:	e0fff617 	ldw	r3,-40(fp)
   164e8:	e0bff817 	ldw	r2,-32(fp)
   164ec:	1885883a 	add	r2,r3,r2
   164f0:	10c1ffcc 	andi	r3,r2,2047
   164f4:	e0bffb17 	ldw	r2,-20(fp)
   164f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   164fc:	e0bffd17 	ldw	r2,-12(fp)
   16500:	10800048 	cmpgei	r2,r2,1
   16504:	103fcc1e 	bne	r2,zero,16438 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   16508:	e0fffa17 	ldw	r3,-24(fp)
   1650c:	e0bffc17 	ldw	r2,-16(fp)
   16510:	1880141e 	bne	r3,r2,16564 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16514:	e0bffe17 	ldw	r2,-8(fp)
   16518:	1090000c 	andi	r2,r2,16384
   1651c:	1004c03a 	cmpne	r2,r2,zero
   16520:	1000101e 	bne	r2,zero,16564 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16524:	e0bffb17 	ldw	r2,-20(fp)
   16528:	10c00a17 	ldw	r3,40(r2)
   1652c:	e0bff717 	ldw	r2,-36(fp)
   16530:	1880051e 	bne	r3,r2,16548 <altera_avalon_jtag_uart_read+0x13c>
   16534:	e0bffb17 	ldw	r2,-20(fp)
   16538:	10c00917 	ldw	r3,36(r2)
   1653c:	e0bffb17 	ldw	r2,-20(fp)
   16540:	10800117 	ldw	r2,4(r2)
   16544:	18bff736 	bltu	r3,r2,16524 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16548:	e0bffb17 	ldw	r2,-20(fp)
   1654c:	10c00a17 	ldw	r3,40(r2)
   16550:	e0bff717 	ldw	r2,-36(fp)
   16554:	18800326 	beq	r3,r2,16564 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16558:	e0bffd17 	ldw	r2,-12(fp)
   1655c:	10800048 	cmpgei	r2,r2,1
   16560:	103fb51e 	bne	r2,zero,16438 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   16564:	e0fffa17 	ldw	r3,-24(fp)
   16568:	e0bffc17 	ldw	r2,-16(fp)
   1656c:	18801926 	beq	r3,r2,165d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16570:	0005303a 	rdctl	r2,status
   16574:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16578:	e0fff517 	ldw	r3,-44(fp)
   1657c:	00bfff84 	movi	r2,-2
   16580:	1884703a 	and	r2,r3,r2
   16584:	1001703a 	wrctl	status,r2
  
  return context;
   16588:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1658c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16590:	e0bffb17 	ldw	r2,-20(fp)
   16594:	10800817 	ldw	r2,32(r2)
   16598:	10c00054 	ori	r3,r2,1
   1659c:	e0bffb17 	ldw	r2,-20(fp)
   165a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   165a4:	e0bffb17 	ldw	r2,-20(fp)
   165a8:	10800017 	ldw	r2,0(r2)
   165ac:	11000104 	addi	r4,r2,4
   165b0:	e0bffb17 	ldw	r2,-20(fp)
   165b4:	10800817 	ldw	r2,32(r2)
   165b8:	1007883a 	mov	r3,r2
   165bc:	2005883a 	mov	r2,r4
   165c0:	10c00035 	stwio	r3,0(r2)
   165c4:	e0bff917 	ldw	r2,-28(fp)
   165c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165cc:	e0bff417 	ldw	r2,-48(fp)
   165d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   165d4:	e0fffa17 	ldw	r3,-24(fp)
   165d8:	e0bffc17 	ldw	r2,-16(fp)
   165dc:	18800526 	beq	r3,r2,165f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   165e0:	e0fffa17 	ldw	r3,-24(fp)
   165e4:	e0bffc17 	ldw	r2,-16(fp)
   165e8:	1887c83a 	sub	r3,r3,r2
   165ec:	e0ffff15 	stw	r3,-4(fp)
   165f0:	00000906 	br	16618 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   165f4:	e0bffe17 	ldw	r2,-8(fp)
   165f8:	1090000c 	andi	r2,r2,16384
   165fc:	1005003a 	cmpeq	r2,r2,zero
   16600:	1000031e 	bne	r2,zero,16610 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   16604:	00bffd44 	movi	r2,-11
   16608:	e0bfff15 	stw	r2,-4(fp)
   1660c:	00000206 	br	16618 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   16610:	00bffec4 	movi	r2,-5
   16614:	e0bfff15 	stw	r2,-4(fp)
   16618:	e0bfff17 	ldw	r2,-4(fp)
}
   1661c:	e037883a 	mov	sp,fp
   16620:	dfc00117 	ldw	ra,4(sp)
   16624:	df000017 	ldw	fp,0(sp)
   16628:	dec00204 	addi	sp,sp,8
   1662c:	f800283a 	ret

00016630 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16630:	defff204 	addi	sp,sp,-56
   16634:	dfc00d15 	stw	ra,52(sp)
   16638:	df000c15 	stw	fp,48(sp)
   1663c:	df000c04 	addi	fp,sp,48
   16640:	e13ffb15 	stw	r4,-20(fp)
   16644:	e17ffc15 	stw	r5,-16(fp)
   16648:	e1bffd15 	stw	r6,-12(fp)
   1664c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16650:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16654:	e0bffc17 	ldw	r2,-16(fp)
   16658:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1665c:	00003a06 	br	16748 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16660:	e0bffb17 	ldw	r2,-20(fp)
   16664:	10800c17 	ldw	r2,48(r2)
   16668:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1666c:	e0bffb17 	ldw	r2,-20(fp)
   16670:	10800d17 	ldw	r2,52(r2)
   16674:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   16678:	e0fffa17 	ldw	r3,-24(fp)
   1667c:	e0bff917 	ldw	r2,-28(fp)
   16680:	1880062e 	bgeu	r3,r2,1669c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   16684:	e0fff917 	ldw	r3,-28(fp)
   16688:	e0bffa17 	ldw	r2,-24(fp)
   1668c:	1885c83a 	sub	r2,r3,r2
   16690:	10bfffc4 	addi	r2,r2,-1
   16694:	e0bff815 	stw	r2,-32(fp)
   16698:	00000c06 	br	166cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1669c:	e0bff917 	ldw	r2,-28(fp)
   166a0:	1005003a 	cmpeq	r2,r2,zero
   166a4:	1000051e 	bne	r2,zero,166bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   166a8:	00820004 	movi	r2,2048
   166ac:	e0fffa17 	ldw	r3,-24(fp)
   166b0:	10c5c83a 	sub	r2,r2,r3
   166b4:	e0bff815 	stw	r2,-32(fp)
   166b8:	00000406 	br	166cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   166bc:	0081ffc4 	movi	r2,2047
   166c0:	e0fffa17 	ldw	r3,-24(fp)
   166c4:	10c5c83a 	sub	r2,r2,r3
   166c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   166cc:	e0bff817 	ldw	r2,-32(fp)
   166d0:	1005003a 	cmpeq	r2,r2,zero
   166d4:	10001f1e 	bne	r2,zero,16754 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   166d8:	e0fffd17 	ldw	r3,-12(fp)
   166dc:	e0bff817 	ldw	r2,-32(fp)
   166e0:	1880022e 	bgeu	r3,r2,166ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   166e4:	e0bffd17 	ldw	r2,-12(fp)
   166e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   166ec:	e0bffb17 	ldw	r2,-20(fp)
   166f0:	10c20e04 	addi	r3,r2,2104
   166f4:	e0bffa17 	ldw	r2,-24(fp)
   166f8:	1885883a 	add	r2,r3,r2
   166fc:	e0fffc17 	ldw	r3,-16(fp)
   16700:	1009883a 	mov	r4,r2
   16704:	180b883a 	mov	r5,r3
   16708:	e1bff817 	ldw	r6,-32(fp)
   1670c:	00083140 	call	8314 <memcpy>
      ptr   += n;
   16710:	e0fff817 	ldw	r3,-32(fp)
   16714:	e0bffc17 	ldw	r2,-16(fp)
   16718:	10c5883a 	add	r2,r2,r3
   1671c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   16720:	e0fffd17 	ldw	r3,-12(fp)
   16724:	e0bff817 	ldw	r2,-32(fp)
   16728:	1885c83a 	sub	r2,r3,r2
   1672c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16730:	e0fffa17 	ldw	r3,-24(fp)
   16734:	e0bff817 	ldw	r2,-32(fp)
   16738:	1885883a 	add	r2,r3,r2
   1673c:	10c1ffcc 	andi	r3,r2,2047
   16740:	e0bffb17 	ldw	r2,-20(fp)
   16744:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16748:	e0bffd17 	ldw	r2,-12(fp)
   1674c:	10800048 	cmpgei	r2,r2,1
   16750:	103fc31e 	bne	r2,zero,16660 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16754:	0005303a 	rdctl	r2,status
   16758:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1675c:	e0fff517 	ldw	r3,-44(fp)
   16760:	00bfff84 	movi	r2,-2
   16764:	1884703a 	and	r2,r3,r2
   16768:	1001703a 	wrctl	status,r2
  
  return context;
   1676c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16770:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16774:	e0bffb17 	ldw	r2,-20(fp)
   16778:	10800817 	ldw	r2,32(r2)
   1677c:	10c00094 	ori	r3,r2,2
   16780:	e0bffb17 	ldw	r2,-20(fp)
   16784:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16788:	e0bffb17 	ldw	r2,-20(fp)
   1678c:	10800017 	ldw	r2,0(r2)
   16790:	11000104 	addi	r4,r2,4
   16794:	e0bffb17 	ldw	r2,-20(fp)
   16798:	10800817 	ldw	r2,32(r2)
   1679c:	1007883a 	mov	r3,r2
   167a0:	2005883a 	mov	r2,r4
   167a4:	10c00035 	stwio	r3,0(r2)
   167a8:	e0bff717 	ldw	r2,-36(fp)
   167ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167b0:	e0bff417 	ldw	r2,-48(fp)
   167b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   167b8:	e0bffd17 	ldw	r2,-12(fp)
   167bc:	10800050 	cmplti	r2,r2,1
   167c0:	1000111e 	bne	r2,zero,16808 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   167c4:	e0bffe17 	ldw	r2,-8(fp)
   167c8:	1090000c 	andi	r2,r2,16384
   167cc:	1004c03a 	cmpne	r2,r2,zero
   167d0:	1000101e 	bne	r2,zero,16814 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   167d4:	e0bffb17 	ldw	r2,-20(fp)
   167d8:	10c00d17 	ldw	r3,52(r2)
   167dc:	e0bff917 	ldw	r2,-28(fp)
   167e0:	1880051e 	bne	r3,r2,167f8 <altera_avalon_jtag_uart_write+0x1c8>
   167e4:	e0bffb17 	ldw	r2,-20(fp)
   167e8:	10c00917 	ldw	r3,36(r2)
   167ec:	e0bffb17 	ldw	r2,-20(fp)
   167f0:	10800117 	ldw	r2,4(r2)
   167f4:	18bff736 	bltu	r3,r2,167d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   167f8:	e0bffb17 	ldw	r2,-20(fp)
   167fc:	10c00d17 	ldw	r3,52(r2)
   16800:	e0bff917 	ldw	r2,-28(fp)
   16804:	18800326 	beq	r3,r2,16814 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   16808:	e0bffd17 	ldw	r2,-12(fp)
   1680c:	10800048 	cmpgei	r2,r2,1
   16810:	103fcd1e 	bne	r2,zero,16748 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   16814:	e0fffc17 	ldw	r3,-16(fp)
   16818:	e0bff617 	ldw	r2,-40(fp)
   1681c:	18800526 	beq	r3,r2,16834 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   16820:	e0fffc17 	ldw	r3,-16(fp)
   16824:	e0bff617 	ldw	r2,-40(fp)
   16828:	1887c83a 	sub	r3,r3,r2
   1682c:	e0ffff15 	stw	r3,-4(fp)
   16830:	00000906 	br	16858 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   16834:	e0bffe17 	ldw	r2,-8(fp)
   16838:	1090000c 	andi	r2,r2,16384
   1683c:	1005003a 	cmpeq	r2,r2,zero
   16840:	1000031e 	bne	r2,zero,16850 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   16844:	00bffd44 	movi	r2,-11
   16848:	e0bfff15 	stw	r2,-4(fp)
   1684c:	00000206 	br	16858 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16850:	00bffec4 	movi	r2,-5
   16854:	e0bfff15 	stw	r2,-4(fp)
   16858:	e0bfff17 	ldw	r2,-4(fp)
}
   1685c:	e037883a 	mov	sp,fp
   16860:	dfc00117 	ldw	ra,4(sp)
   16864:	df000017 	ldw	fp,0(sp)
   16868:	dec00204 	addi	sp,sp,8
   1686c:	f800283a 	ret

00016870 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   16870:	defffa04 	addi	sp,sp,-24
   16874:	dfc00515 	stw	ra,20(sp)
   16878:	df000415 	stw	fp,16(sp)
   1687c:	df000404 	addi	fp,sp,16
   16880:	e13ffe15 	stw	r4,-8(fp)
   16884:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   16888:	e0bffe17 	ldw	r2,-8(fp)
   1688c:	10800017 	ldw	r2,0(r2)
   16890:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   16894:	008003f4 	movhi	r2,15
   16898:	10909004 	addi	r2,r2,16960
   1689c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   168a0:	e0bffe17 	ldw	r2,-8(fp)
   168a4:	10800803 	ldbu	r2,32(r2)
   168a8:	10803fcc 	andi	r2,r2,255
   168ac:	1080201c 	xori	r2,r2,128
   168b0:	10bfe004 	addi	r2,r2,-128
   168b4:	1004c03a 	cmpne	r2,r2,zero
   168b8:	1000161e 	bne	r2,zero,16914 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   168bc:	00000a06 	br	168e8 <lcd_write_command+0x78>
    if (--i == 0)
   168c0:	e0bffc17 	ldw	r2,-16(fp)
   168c4:	10bfffc4 	addi	r2,r2,-1
   168c8:	e0bffc15 	stw	r2,-16(fp)
   168cc:	e0bffc17 	ldw	r2,-16(fp)
   168d0:	1004c03a 	cmpne	r2,r2,zero
   168d4:	1000041e 	bne	r2,zero,168e8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
   168d8:	e0fffe17 	ldw	r3,-8(fp)
   168dc:	00800044 	movi	r2,1
   168e0:	18800805 	stb	r2,32(r3)
      return;
   168e4:	00000b06 	br	16914 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   168e8:	e0bffd17 	ldw	r2,-12(fp)
   168ec:	10800104 	addi	r2,r2,4
   168f0:	10800037 	ldwio	r2,0(r2)
   168f4:	1080200c 	andi	r2,r2,128
   168f8:	1004c03a 	cmpne	r2,r2,zero
   168fc:	103ff01e 	bne	r2,zero,168c0 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   16900:	01001904 	movi	r4,100
   16904:	001ac700 	call	1ac70 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   16908:	e0bffd17 	ldw	r2,-12(fp)
   1690c:	e0ffff03 	ldbu	r3,-4(fp)
   16910:	10c00035 	stwio	r3,0(r2)
}
   16914:	e037883a 	mov	sp,fp
   16918:	dfc00117 	ldw	ra,4(sp)
   1691c:	df000017 	ldw	fp,0(sp)
   16920:	dec00204 	addi	sp,sp,8
   16924:	f800283a 	ret

00016928 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   16928:	defffa04 	addi	sp,sp,-24
   1692c:	dfc00515 	stw	ra,20(sp)
   16930:	df000415 	stw	fp,16(sp)
   16934:	df000404 	addi	fp,sp,16
   16938:	e13ffe15 	stw	r4,-8(fp)
   1693c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   16940:	e0bffe17 	ldw	r2,-8(fp)
   16944:	10800017 	ldw	r2,0(r2)
   16948:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1694c:	008003f4 	movhi	r2,15
   16950:	10909004 	addi	r2,r2,16960
   16954:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   16958:	e0bffe17 	ldw	r2,-8(fp)
   1695c:	10800803 	ldbu	r2,32(r2)
   16960:	10803fcc 	andi	r2,r2,255
   16964:	1080201c 	xori	r2,r2,128
   16968:	10bfe004 	addi	r2,r2,-128
   1696c:	1004c03a 	cmpne	r2,r2,zero
   16970:	10001d1e 	bne	r2,zero,169e8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   16974:	00000a06 	br	169a0 <lcd_write_data+0x78>
    if (--i == 0)
   16978:	e0bffc17 	ldw	r2,-16(fp)
   1697c:	10bfffc4 	addi	r2,r2,-1
   16980:	e0bffc15 	stw	r2,-16(fp)
   16984:	e0bffc17 	ldw	r2,-16(fp)
   16988:	1004c03a 	cmpne	r2,r2,zero
   1698c:	1000041e 	bne	r2,zero,169a0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
   16990:	e0fffe17 	ldw	r3,-8(fp)
   16994:	00800044 	movi	r2,1
   16998:	18800805 	stb	r2,32(r3)
      return;
   1699c:	00001206 	br	169e8 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   169a0:	e0bffd17 	ldw	r2,-12(fp)
   169a4:	10800104 	addi	r2,r2,4
   169a8:	10800037 	ldwio	r2,0(r2)
   169ac:	1080200c 	andi	r2,r2,128
   169b0:	1004c03a 	cmpne	r2,r2,zero
   169b4:	103ff01e 	bne	r2,zero,16978 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   169b8:	01001904 	movi	r4,100
   169bc:	001ac700 	call	1ac70 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   169c0:	e0bffd17 	ldw	r2,-12(fp)
   169c4:	10800204 	addi	r2,r2,8
   169c8:	e0ffff03 	ldbu	r3,-4(fp)
   169cc:	10c00035 	stwio	r3,0(r2)

  sp->address++;
   169d0:	e0bffe17 	ldw	r2,-8(fp)
   169d4:	108008c3 	ldbu	r2,35(r2)
   169d8:	10800044 	addi	r2,r2,1
   169dc:	1007883a 	mov	r3,r2
   169e0:	e0bffe17 	ldw	r2,-8(fp)
   169e4:	10c008c5 	stb	r3,35(r2)
}
   169e8:	e037883a 	mov	sp,fp
   169ec:	dfc00117 	ldw	ra,4(sp)
   169f0:	df000017 	ldw	fp,0(sp)
   169f4:	dec00204 	addi	sp,sp,8
   169f8:	f800283a 	ret

000169fc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   169fc:	defffc04 	addi	sp,sp,-16
   16a00:	dfc00315 	stw	ra,12(sp)
   16a04:	df000215 	stw	fp,8(sp)
   16a08:	df000204 	addi	fp,sp,8
   16a0c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   16a10:	e13fff17 	ldw	r4,-4(fp)
   16a14:	01400044 	movi	r5,1
   16a18:	00168700 	call	16870 <lcd_write_command>

  sp->x = 0;
   16a1c:	e0bfff17 	ldw	r2,-4(fp)
   16a20:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   16a24:	e0bfff17 	ldw	r2,-4(fp)
   16a28:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   16a2c:	e0bfff17 	ldw	r2,-4(fp)
   16a30:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   16a34:	e03ffe15 	stw	zero,-8(fp)
   16a38:	00001906 	br	16aa0 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   16a3c:	e0bffe17 	ldw	r2,-8(fp)
   16a40:	108018e4 	muli	r2,r2,99
   16a44:	10c01004 	addi	r3,r2,64
   16a48:	e0bfff17 	ldw	r2,-4(fp)
   16a4c:	1889883a 	add	r4,r3,r2
   16a50:	01400804 	movi	r5,32
   16a54:	01801444 	movi	r6,81
   16a58:	00083b40 	call	83b4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   16a5c:	e0bffe17 	ldw	r2,-8(fp)
   16a60:	108018e4 	muli	r2,r2,99
   16a64:	10c00c04 	addi	r3,r2,48
   16a68:	e0bfff17 	ldw	r2,-4(fp)
   16a6c:	1889883a 	add	r4,r3,r2
   16a70:	01400804 	movi	r5,32
   16a74:	01800404 	movi	r6,16
   16a78:	00083b40 	call	83b4 <memset>
    sp->line[y].width = 0;
   16a7c:	e0bffe17 	ldw	r2,-8(fp)
   16a80:	e0ffff17 	ldw	r3,-4(fp)
   16a84:	108018e4 	muli	r2,r2,99
   16a88:	10c5883a 	add	r2,r2,r3
   16a8c:	10802404 	addi	r2,r2,144
   16a90:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   16a94:	e0bffe17 	ldw	r2,-8(fp)
   16a98:	10800044 	addi	r2,r2,1
   16a9c:	e0bffe15 	stw	r2,-8(fp)
   16aa0:	e0bffe17 	ldw	r2,-8(fp)
   16aa4:	10800090 	cmplti	r2,r2,2
   16aa8:	103fe41e 	bne	r2,zero,16a3c <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   16aac:	e037883a 	mov	sp,fp
   16ab0:	dfc00117 	ldw	ra,4(sp)
   16ab4:	df000017 	ldw	fp,0(sp)
   16ab8:	dec00204 	addi	sp,sp,8
   16abc:	f800283a 	ret

00016ac0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   16ac0:	defff704 	addi	sp,sp,-36
   16ac4:	dfc00815 	stw	ra,32(sp)
   16ac8:	df000715 	stw	fp,28(sp)
   16acc:	df000704 	addi	fp,sp,28
   16ad0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   16ad4:	e0bfff17 	ldw	r2,-4(fp)
   16ad8:	10800943 	ldbu	r2,37(r2)
   16adc:	10803fcc 	andi	r2,r2,255
   16ae0:	1080201c 	xori	r2,r2,128
   16ae4:	10bfe004 	addi	r2,r2,-128
   16ae8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   16aec:	e03ffe15 	stw	zero,-8(fp)
   16af0:	00006606 	br	16c8c <lcd_repaint_screen+0x1cc>
  {
    int width  = sp->line[y].width;
   16af4:	e0bffe17 	ldw	r2,-8(fp)
   16af8:	e0ffff17 	ldw	r3,-4(fp)
   16afc:	108018e4 	muli	r2,r2,99
   16b00:	10c5883a 	add	r2,r2,r3
   16b04:	10802404 	addi	r2,r2,144
   16b08:	10800043 	ldbu	r2,1(r2)
   16b0c:	10803fcc 	andi	r2,r2,255
   16b10:	1080201c 	xori	r2,r2,128
   16b14:	10bfe004 	addi	r2,r2,-128
   16b18:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   16b1c:	e0bffe17 	ldw	r2,-8(fp)
   16b20:	e0ffff17 	ldw	r3,-4(fp)
   16b24:	108018e4 	muli	r2,r2,99
   16b28:	10c5883a 	add	r2,r2,r3
   16b2c:	10802404 	addi	r2,r2,144
   16b30:	10800083 	ldbu	r2,2(r2)
   16b34:	10c03fcc 	andi	r3,r2,255
   16b38:	e0bffc17 	ldw	r2,-16(fp)
   16b3c:	1885383a 	mul	r2,r3,r2
   16b40:	1005d23a 	srai	r2,r2,8
   16b44:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
   16b48:	e0fffa17 	ldw	r3,-24(fp)
   16b4c:	e0bffb17 	ldw	r2,-20(fp)
   16b50:	18800116 	blt	r3,r2,16b58 <lcd_repaint_screen+0x98>
      offset = 0;
   16b54:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   16b58:	e03ffd15 	stw	zero,-12(fp)
   16b5c:	00004506 	br	16c74 <lcd_repaint_screen+0x1b4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   16b60:	e17ffe17 	ldw	r5,-8(fp)
   16b64:	e0fffd17 	ldw	r3,-12(fp)
   16b68:	e0bffa17 	ldw	r2,-24(fp)
   16b6c:	1889883a 	add	r4,r3,r2
   16b70:	e0bffb17 	ldw	r2,-20(fp)
   16b74:	2087283a 	div	r3,r4,r2
   16b78:	e0bffb17 	ldw	r2,-20(fp)
   16b7c:	1885383a 	mul	r2,r3,r2
   16b80:	2089c83a 	sub	r4,r4,r2
   16b84:	e0ffff17 	ldw	r3,-4(fp)
   16b88:	288018e4 	muli	r2,r5,99
   16b8c:	10c5883a 	add	r2,r2,r3
   16b90:	1105883a 	add	r2,r2,r4
   16b94:	10801004 	addi	r2,r2,64
   16b98:	10800003 	ldbu	r2,0(r2)
   16b9c:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   16ba0:	e0bffe17 	ldw	r2,-8(fp)
   16ba4:	e13ffd17 	ldw	r4,-12(fp)
   16ba8:	e0ffff17 	ldw	r3,-4(fp)
   16bac:	108018e4 	muli	r2,r2,99
   16bb0:	10c5883a 	add	r2,r2,r3
   16bb4:	1105883a 	add	r2,r2,r4
   16bb8:	10800c04 	addi	r2,r2,48
   16bbc:	10800003 	ldbu	r2,0(r2)
   16bc0:	10c03fcc 	andi	r3,r2,255
   16bc4:	18c0201c 	xori	r3,r3,128
   16bc8:	18ffe004 	addi	r3,r3,-128
   16bcc:	e0bff947 	ldb	r2,-27(fp)
   16bd0:	18802526 	beq	r3,r2,16c68 <lcd_repaint_screen+0x1a8>
      {
        unsigned char address = x + colstart[y];
   16bd4:	e0fffe17 	ldw	r3,-8(fp)
   16bd8:	d0a01a04 	addi	r2,gp,-32664
   16bdc:	1885883a 	add	r2,r3,r2
   16be0:	10800003 	ldbu	r2,0(r2)
   16be4:	1007883a 	mov	r3,r2
   16be8:	e0bffd17 	ldw	r2,-12(fp)
   16bec:	1885883a 	add	r2,r3,r2
   16bf0:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
   16bf4:	e0fff903 	ldbu	r3,-28(fp)
   16bf8:	e0bfff17 	ldw	r2,-4(fp)
   16bfc:	108008c3 	ldbu	r2,35(r2)
   16c00:	10803fcc 	andi	r2,r2,255
   16c04:	1080201c 	xori	r2,r2,128
   16c08:	10bfe004 	addi	r2,r2,-128
   16c0c:	18800926 	beq	r3,r2,16c34 <lcd_repaint_screen+0x174>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   16c10:	e0fff903 	ldbu	r3,-28(fp)
   16c14:	00bfe004 	movi	r2,-128
   16c18:	1884b03a 	or	r2,r3,r2
   16c1c:	11403fcc 	andi	r5,r2,255
   16c20:	e13fff17 	ldw	r4,-4(fp)
   16c24:	00168700 	call	16870 <lcd_write_command>
          sp->address = address;
   16c28:	e0fff903 	ldbu	r3,-28(fp)
   16c2c:	e0bfff17 	ldw	r2,-4(fp)
   16c30:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   16c34:	e0bff943 	ldbu	r2,-27(fp)
   16c38:	11403fcc 	andi	r5,r2,255
   16c3c:	e13fff17 	ldw	r4,-4(fp)
   16c40:	00169280 	call	16928 <lcd_write_data>
        sp->line[y].visible[x] = c;
   16c44:	e0bffe17 	ldw	r2,-8(fp)
   16c48:	e13ffd17 	ldw	r4,-12(fp)
   16c4c:	e0ffff17 	ldw	r3,-4(fp)
   16c50:	108018e4 	muli	r2,r2,99
   16c54:	10c5883a 	add	r2,r2,r3
   16c58:	1105883a 	add	r2,r2,r4
   16c5c:	10c00c04 	addi	r3,r2,48
   16c60:	e0bff943 	ldbu	r2,-27(fp)
   16c64:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   16c68:	e0bffd17 	ldw	r2,-12(fp)
   16c6c:	10800044 	addi	r2,r2,1
   16c70:	e0bffd15 	stw	r2,-12(fp)
   16c74:	e0bffd17 	ldw	r2,-12(fp)
   16c78:	10800410 	cmplti	r2,r2,16
   16c7c:	103fb81e 	bne	r2,zero,16b60 <lcd_repaint_screen+0xa0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   16c80:	e0bffe17 	ldw	r2,-8(fp)
   16c84:	10800044 	addi	r2,r2,1
   16c88:	e0bffe15 	stw	r2,-8(fp)
   16c8c:	e0bffe17 	ldw	r2,-8(fp)
   16c90:	10800090 	cmplti	r2,r2,2
   16c94:	103f971e 	bne	r2,zero,16af4 <lcd_repaint_screen+0x34>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   16c98:	e037883a 	mov	sp,fp
   16c9c:	dfc00117 	ldw	ra,4(sp)
   16ca0:	df000017 	ldw	fp,0(sp)
   16ca4:	dec00204 	addi	sp,sp,8
   16ca8:	f800283a 	ret

00016cac <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   16cac:	defffc04 	addi	sp,sp,-16
   16cb0:	dfc00315 	stw	ra,12(sp)
   16cb4:	df000215 	stw	fp,8(sp)
   16cb8:	df000204 	addi	fp,sp,8
   16cbc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   16cc0:	e03ffe15 	stw	zero,-8(fp)
   16cc4:	00001d06 	br	16d3c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   16cc8:	e0bffe17 	ldw	r2,-8(fp)
   16ccc:	10800048 	cmpgei	r2,r2,1
   16cd0:	10000f1e 	bne	r2,zero,16d10 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   16cd4:	e0bffe17 	ldw	r2,-8(fp)
   16cd8:	108018e4 	muli	r2,r2,99
   16cdc:	10c01004 	addi	r3,r2,64
   16ce0:	e0bfff17 	ldw	r2,-4(fp)
   16ce4:	1889883a 	add	r4,r3,r2
   16ce8:	e0bffe17 	ldw	r2,-8(fp)
   16cec:	10800044 	addi	r2,r2,1
   16cf0:	108018e4 	muli	r2,r2,99
   16cf4:	10c01004 	addi	r3,r2,64
   16cf8:	e0bfff17 	ldw	r2,-4(fp)
   16cfc:	1885883a 	add	r2,r3,r2
   16d00:	100b883a 	mov	r5,r2
   16d04:	01801404 	movi	r6,80
   16d08:	00083140 	call	8314 <memcpy>
   16d0c:	00000806 	br	16d30 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   16d10:	e0bffe17 	ldw	r2,-8(fp)
   16d14:	108018e4 	muli	r2,r2,99
   16d18:	10c01004 	addi	r3,r2,64
   16d1c:	e0bfff17 	ldw	r2,-4(fp)
   16d20:	1889883a 	add	r4,r3,r2
   16d24:	01400804 	movi	r5,32
   16d28:	01801404 	movi	r6,80
   16d2c:	00083b40 	call	83b4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   16d30:	e0bffe17 	ldw	r2,-8(fp)
   16d34:	10800044 	addi	r2,r2,1
   16d38:	e0bffe15 	stw	r2,-8(fp)
   16d3c:	e0bffe17 	ldw	r2,-8(fp)
   16d40:	10800090 	cmplti	r2,r2,2
   16d44:	103fe01e 	bne	r2,zero,16cc8 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   16d48:	e0bfff17 	ldw	r2,-4(fp)
   16d4c:	10800883 	ldbu	r2,34(r2)
   16d50:	10bfffc4 	addi	r2,r2,-1
   16d54:	1007883a 	mov	r3,r2
   16d58:	e0bfff17 	ldw	r2,-4(fp)
   16d5c:	10c00885 	stb	r3,34(r2)
}
   16d60:	e037883a 	mov	sp,fp
   16d64:	dfc00117 	ldw	ra,4(sp)
   16d68:	df000017 	ldw	fp,0(sp)
   16d6c:	dec00204 	addi	sp,sp,8
   16d70:	f800283a 	ret

00016d74 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   16d74:	defff804 	addi	sp,sp,-32
   16d78:	dfc00715 	stw	ra,28(sp)
   16d7c:	df000615 	stw	fp,24(sp)
   16d80:	df000604 	addi	fp,sp,24
   16d84:	e13ffd15 	stw	r4,-12(fp)
   16d88:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
   16d8c:	e03ffc15 	stw	zero,-16(fp)
   16d90:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
   16d94:	e0bffd17 	ldw	r2,-12(fp)
   16d98:	10800a03 	ldbu	r2,40(r2)
   16d9c:	10803fcc 	andi	r2,r2,255
   16da0:	1080201c 	xori	r2,r2,128
   16da4:	10bfe004 	addi	r2,r2,-128
   16da8:	108016d8 	cmpnei	r2,r2,91
   16dac:	1000491e 	bne	r2,zero,16ed4 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
   16db0:	e0bffd17 	ldw	r2,-12(fp)
   16db4:	10800a04 	addi	r2,r2,40
   16db8:	10800044 	addi	r2,r2,1
   16dbc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
   16dc0:	00000d06 	br	16df8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   16dc4:	e0bffc17 	ldw	r2,-16(fp)
   16dc8:	10c002a4 	muli	r3,r2,10
   16dcc:	e0bffa17 	ldw	r2,-24(fp)
   16dd0:	10800003 	ldbu	r2,0(r2)
   16dd4:	10803fcc 	andi	r2,r2,255
   16dd8:	1080201c 	xori	r2,r2,128
   16ddc:	10bfe004 	addi	r2,r2,-128
   16de0:	1885883a 	add	r2,r3,r2
   16de4:	10bff404 	addi	r2,r2,-48
   16de8:	e0bffc15 	stw	r2,-16(fp)
   16dec:	e0bffa17 	ldw	r2,-24(fp)
   16df0:	10800044 	addi	r2,r2,1
   16df4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   16df8:	e0bffa17 	ldw	r2,-24(fp)
   16dfc:	10800003 	ldbu	r2,0(r2)
   16e00:	10803fcc 	andi	r2,r2,255
   16e04:	1080201c 	xori	r2,r2,128
   16e08:	10bfe004 	addi	r2,r2,-128
   16e0c:	1007883a 	mov	r3,r2
   16e10:	00820034 	movhi	r2,2048
   16e14:	108a4e04 	addi	r2,r2,10552
   16e18:	10800017 	ldw	r2,0(r2)
   16e1c:	1885883a 	add	r2,r3,r2
   16e20:	10800003 	ldbu	r2,0(r2)
   16e24:	10803fcc 	andi	r2,r2,255
   16e28:	1080010c 	andi	r2,r2,4
   16e2c:	1004c03a 	cmpne	r2,r2,zero
   16e30:	103fe41e 	bne	r2,zero,16dc4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   16e34:	e0bffa17 	ldw	r2,-24(fp)
   16e38:	10800003 	ldbu	r2,0(r2)
   16e3c:	10803fcc 	andi	r2,r2,255
   16e40:	1080201c 	xori	r2,r2,128
   16e44:	10bfe004 	addi	r2,r2,-128
   16e48:	10800ed8 	cmpnei	r2,r2,59
   16e4c:	1000231e 	bne	r2,zero,16edc <lcd_handle_escape+0x168>
    {
      ptr++;
   16e50:	e0bffa17 	ldw	r2,-24(fp)
   16e54:	10800044 	addi	r2,r2,1
   16e58:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
   16e5c:	00000d06 	br	16e94 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   16e60:	e0bffb17 	ldw	r2,-20(fp)
   16e64:	10c002a4 	muli	r3,r2,10
   16e68:	e0bffa17 	ldw	r2,-24(fp)
   16e6c:	10800003 	ldbu	r2,0(r2)
   16e70:	10803fcc 	andi	r2,r2,255
   16e74:	1080201c 	xori	r2,r2,128
   16e78:	10bfe004 	addi	r2,r2,-128
   16e7c:	1885883a 	add	r2,r3,r2
   16e80:	10bff404 	addi	r2,r2,-48
   16e84:	e0bffb15 	stw	r2,-20(fp)
   16e88:	e0bffa17 	ldw	r2,-24(fp)
   16e8c:	10800044 	addi	r2,r2,1
   16e90:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   16e94:	e0bffa17 	ldw	r2,-24(fp)
   16e98:	10800003 	ldbu	r2,0(r2)
   16e9c:	10803fcc 	andi	r2,r2,255
   16ea0:	1080201c 	xori	r2,r2,128
   16ea4:	10bfe004 	addi	r2,r2,-128
   16ea8:	1007883a 	mov	r3,r2
   16eac:	00820034 	movhi	r2,2048
   16eb0:	108a4e04 	addi	r2,r2,10552
   16eb4:	10800017 	ldw	r2,0(r2)
   16eb8:	1885883a 	add	r2,r3,r2
   16ebc:	10800003 	ldbu	r2,0(r2)
   16ec0:	10803fcc 	andi	r2,r2,255
   16ec4:	1080010c 	andi	r2,r2,4
   16ec8:	1004c03a 	cmpne	r2,r2,zero
   16ecc:	103fe41e 	bne	r2,zero,16e60 <lcd_handle_escape+0xec>
   16ed0:	00000206 	br	16edc <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   16ed4:	00bfffc4 	movi	r2,-1
   16ed8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
   16edc:	e0bffe07 	ldb	r2,-8(fp)
   16ee0:	e0bfff15 	stw	r2,-4(fp)
   16ee4:	e0ffff17 	ldw	r3,-4(fp)
   16ee8:	188012a0 	cmpeqi	r2,r3,74
   16eec:	10002f1e 	bne	r2,zero,16fac <lcd_handle_escape+0x238>
   16ef0:	e0ffff17 	ldw	r3,-4(fp)
   16ef4:	188012c8 	cmpgei	r2,r3,75
   16ef8:	1000041e 	bne	r2,zero,16f0c <lcd_handle_escape+0x198>
   16efc:	e0ffff17 	ldw	r3,-4(fp)
   16f00:	18801220 	cmpeqi	r2,r3,72
   16f04:	1000081e 	bne	r2,zero,16f28 <lcd_handle_escape+0x1b4>
   16f08:	00004906 	br	17030 <lcd_handle_escape+0x2bc>
   16f0c:	e0ffff17 	ldw	r3,-4(fp)
   16f10:	188012e0 	cmpeqi	r2,r3,75
   16f14:	10002b1e 	bne	r2,zero,16fc4 <lcd_handle_escape+0x250>
   16f18:	e0ffff17 	ldw	r3,-4(fp)
   16f1c:	188019a0 	cmpeqi	r2,r3,102
   16f20:	1000011e 	bne	r2,zero,16f28 <lcd_handle_escape+0x1b4>
   16f24:	00004206 	br	17030 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   16f28:	e0bffb17 	ldw	r2,-20(fp)
   16f2c:	10800050 	cmplti	r2,r2,1
   16f30:	1000051e 	bne	r2,zero,16f48 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
   16f34:	e0bffb17 	ldw	r2,-20(fp)
   16f38:	10bfffc4 	addi	r2,r2,-1
   16f3c:	1007883a 	mov	r3,r2
   16f40:	e0bffd17 	ldw	r2,-12(fp)
   16f44:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   16f48:	e0bffc17 	ldw	r2,-16(fp)
   16f4c:	10800050 	cmplti	r2,r2,1
   16f50:	1000371e 	bne	r2,zero,17030 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
   16f54:	e0bffc17 	ldw	r2,-16(fp)
   16f58:	10bfffc4 	addi	r2,r2,-1
   16f5c:	1007883a 	mov	r3,r2
   16f60:	e0bffd17 	ldw	r2,-12(fp)
   16f64:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   16f68:	e0bffd17 	ldw	r2,-12(fp)
   16f6c:	10800883 	ldbu	r2,34(r2)
   16f70:	10803fcc 	andi	r2,r2,255
   16f74:	10800170 	cmpltui	r2,r2,5
   16f78:	1000061e 	bne	r2,zero,16f94 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
   16f7c:	e0fffd17 	ldw	r3,-12(fp)
   16f80:	00800104 	movi	r2,4
   16f84:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
   16f88:	00000206 	br	16f94 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
   16f8c:	e13ffd17 	ldw	r4,-12(fp)
   16f90:	0016cac0 	call	16cac <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   16f94:	e0bffd17 	ldw	r2,-12(fp)
   16f98:	10800883 	ldbu	r2,34(r2)
   16f9c:	10803fcc 	andi	r2,r2,255
   16fa0:	108000e8 	cmpgeui	r2,r2,3
   16fa4:	103ff91e 	bne	r2,zero,16f8c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
   16fa8:	00002106 	br	17030 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   16fac:	e0bffc17 	ldw	r2,-16(fp)
   16fb0:	10800098 	cmpnei	r2,r2,2
   16fb4:	10001e1e 	bne	r2,zero,17030 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
   16fb8:	e13ffd17 	ldw	r4,-12(fp)
   16fbc:	00169fc0 	call	169fc <lcd_clear_screen>
    break;
   16fc0:	00001b06 	br	17030 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   16fc4:	e0bffc17 	ldw	r2,-16(fp)
   16fc8:	10800048 	cmpgei	r2,r2,1
   16fcc:	1000181e 	bne	r2,zero,17030 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   16fd0:	e0bffd17 	ldw	r2,-12(fp)
   16fd4:	10800843 	ldbu	r2,33(r2)
   16fd8:	10803fcc 	andi	r2,r2,255
   16fdc:	10801428 	cmpgeui	r2,r2,80
   16fe0:	1000131e 	bne	r2,zero,17030 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   16fe4:	e0bffd17 	ldw	r2,-12(fp)
   16fe8:	10800883 	ldbu	r2,34(r2)
   16fec:	10803fcc 	andi	r2,r2,255
   16ff0:	108018e4 	muli	r2,r2,99
   16ff4:	10c01004 	addi	r3,r2,64
   16ff8:	e0bffd17 	ldw	r2,-12(fp)
   16ffc:	1887883a 	add	r3,r3,r2
   17000:	e0bffd17 	ldw	r2,-12(fp)
   17004:	10800843 	ldbu	r2,33(r2)
   17008:	10803fcc 	andi	r2,r2,255
   1700c:	1889883a 	add	r4,r3,r2
   17010:	e0bffd17 	ldw	r2,-12(fp)
   17014:	10800843 	ldbu	r2,33(r2)
   17018:	10c03fcc 	andi	r3,r2,255
   1701c:	00801404 	movi	r2,80
   17020:	10c5c83a 	sub	r2,r2,r3
   17024:	100d883a 	mov	r6,r2
   17028:	01400804 	movi	r5,32
   1702c:	00083b40 	call	83b4 <memset>
    }
    break;
  }
}
   17030:	e037883a 	mov	sp,fp
   17034:	dfc00117 	ldw	ra,4(sp)
   17038:	df000017 	ldw	fp,0(sp)
   1703c:	dec00204 	addi	sp,sp,8
   17040:	f800283a 	ret

00017044 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   17044:	defff304 	addi	sp,sp,-52
   17048:	dfc00c15 	stw	ra,48(sp)
   1704c:	df000b15 	stw	fp,44(sp)
   17050:	df000b04 	addi	fp,sp,44
   17054:	e13ffc15 	stw	r4,-16(fp)
   17058:	e17ffd15 	stw	r5,-12(fp)
   1705c:	e1bffe15 	stw	r6,-8(fp)
   17060:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   17064:	e0bffe17 	ldw	r2,-8(fp)
   17068:	1007883a 	mov	r3,r2
   1706c:	e0bffd17 	ldw	r2,-12(fp)
   17070:	10c5883a 	add	r2,r2,r3
   17074:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   17078:	e0fffc17 	ldw	r3,-16(fp)
   1707c:	00800044 	movi	r2,1
   17080:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
   17084:	0000a206 	br	17310 <altera_avalon_lcd_16207_write+0x2cc>
  {
    char c = *ptr;
   17088:	e0bffd17 	ldw	r2,-12(fp)
   1708c:	10800003 	ldbu	r2,0(r2)
   17090:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
   17094:	e0bffc17 	ldw	r2,-16(fp)
   17098:	10800903 	ldbu	r2,36(r2)
   1709c:	10803fcc 	andi	r2,r2,255
   170a0:	1080201c 	xori	r2,r2,128
   170a4:	10bfe004 	addi	r2,r2,-128
   170a8:	1004803a 	cmplt	r2,r2,zero
   170ac:	10003b1e 	bne	r2,zero,1719c <altera_avalon_lcd_16207_write+0x158>
    {
      unsigned int esccount = sp->esccount;
   170b0:	e0bffc17 	ldw	r2,-16(fp)
   170b4:	10800903 	ldbu	r2,36(r2)
   170b8:	10803fcc 	andi	r2,r2,255
   170bc:	1080201c 	xori	r2,r2,128
   170c0:	10bfe004 	addi	r2,r2,-128
   170c4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   170c8:	e0bff717 	ldw	r2,-36(fp)
   170cc:	1004c03a 	cmpne	r2,r2,zero
   170d0:	1000031e 	bne	r2,zero,170e0 <altera_avalon_lcd_16207_write+0x9c>
   170d4:	e0bff807 	ldb	r2,-32(fp)
   170d8:	108016d8 	cmpnei	r2,r2,91
   170dc:	1000111e 	bne	r2,zero,17124 <altera_avalon_lcd_16207_write+0xe0>
   170e0:	e0bff717 	ldw	r2,-36(fp)
   170e4:	1005003a 	cmpeq	r2,r2,zero
   170e8:	10001a1e 	bne	r2,zero,17154 <altera_avalon_lcd_16207_write+0x110>
   170ec:	e0bff807 	ldb	r2,-32(fp)
   170f0:	1007883a 	mov	r3,r2
   170f4:	00820034 	movhi	r2,2048
   170f8:	108a4e04 	addi	r2,r2,10552
   170fc:	10800017 	ldw	r2,0(r2)
   17100:	1885883a 	add	r2,r3,r2
   17104:	10800003 	ldbu	r2,0(r2)
   17108:	10803fcc 	andi	r2,r2,255
   1710c:	1080010c 	andi	r2,r2,4
   17110:	1004c03a 	cmpne	r2,r2,zero
   17114:	10000f1e 	bne	r2,zero,17154 <altera_avalon_lcd_16207_write+0x110>
   17118:	e0bff807 	ldb	r2,-32(fp)
   1711c:	10800ee0 	cmpeqi	r2,r2,59
   17120:	10000c1e 	bne	r2,zero,17154 <altera_avalon_lcd_16207_write+0x110>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
   17124:	e0fff717 	ldw	r3,-36(fp)
   17128:	e0bffc17 	ldw	r2,-16(fp)
   1712c:	1885883a 	add	r2,r3,r2
   17130:	10800a04 	addi	r2,r2,40
   17134:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   17138:	e17ff807 	ldb	r5,-32(fp)
   1713c:	e13ffc17 	ldw	r4,-16(fp)
   17140:	0016d740 	call	16d74 <lcd_handle_escape>

        sp->esccount = -1;
   17144:	e0fffc17 	ldw	r3,-16(fp)
   17148:	00bfffc4 	movi	r2,-1
   1714c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   17150:	00006c06 	br	17304 <altera_avalon_lcd_16207_write+0x2c0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   17154:	e0bffc17 	ldw	r2,-16(fp)
   17158:	10800903 	ldbu	r2,36(r2)
   1715c:	10803fcc 	andi	r2,r2,255
   17160:	108001e8 	cmpgeui	r2,r2,7
   17164:	1000671e 	bne	r2,zero,17304 <altera_avalon_lcd_16207_write+0x2c0>
      {
        sp->escape[esccount] = c;
   17168:	e0fff717 	ldw	r3,-36(fp)
   1716c:	e0bffc17 	ldw	r2,-16(fp)
   17170:	1885883a 	add	r2,r3,r2
   17174:	10c00a04 	addi	r3,r2,40
   17178:	e0bff803 	ldbu	r2,-32(fp)
   1717c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
   17180:	e0bffc17 	ldw	r2,-16(fp)
   17184:	10800903 	ldbu	r2,36(r2)
   17188:	10800044 	addi	r2,r2,1
   1718c:	1007883a 	mov	r3,r2
   17190:	e0bffc17 	ldw	r2,-16(fp)
   17194:	10c00905 	stb	r3,36(r2)
   17198:	00005a06 	br	17304 <altera_avalon_lcd_16207_write+0x2c0>
      }
    }
    else if (c == 27) /* ESC */
   1719c:	e0bff807 	ldb	r2,-32(fp)
   171a0:	108006d8 	cmpnei	r2,r2,27
   171a4:	1000031e 	bne	r2,zero,171b4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->esccount = 0;
   171a8:	e0bffc17 	ldw	r2,-16(fp)
   171ac:	10000905 	stb	zero,36(r2)
   171b0:	00005406 	br	17304 <altera_avalon_lcd_16207_write+0x2c0>
    }
    else if (c == '\r')
   171b4:	e0bff807 	ldb	r2,-32(fp)
   171b8:	10800358 	cmpnei	r2,r2,13
   171bc:	1000031e 	bne	r2,zero,171cc <altera_avalon_lcd_16207_write+0x188>
    {
      sp->x = 0;
   171c0:	e0bffc17 	ldw	r2,-16(fp)
   171c4:	10000845 	stb	zero,33(r2)
   171c8:	00004e06 	br	17304 <altera_avalon_lcd_16207_write+0x2c0>
    }
    else if (c == '\n')
   171cc:	e0bff807 	ldb	r2,-32(fp)
   171d0:	10800298 	cmpnei	r2,r2,10
   171d4:	1000101e 	bne	r2,zero,17218 <altera_avalon_lcd_16207_write+0x1d4>
    {
      sp->x = 0;
   171d8:	e0bffc17 	ldw	r2,-16(fp)
   171dc:	10000845 	stb	zero,33(r2)
      sp->y++;
   171e0:	e0bffc17 	ldw	r2,-16(fp)
   171e4:	10800883 	ldbu	r2,34(r2)
   171e8:	10800044 	addi	r2,r2,1
   171ec:	1007883a 	mov	r3,r2
   171f0:	e0bffc17 	ldw	r2,-16(fp)
   171f4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   171f8:	e0bffc17 	ldw	r2,-16(fp)
   171fc:	10800883 	ldbu	r2,34(r2)
   17200:	10803fcc 	andi	r2,r2,255
   17204:	108000f0 	cmpltui	r2,r2,3
   17208:	10003e1e 	bne	r2,zero,17304 <altera_avalon_lcd_16207_write+0x2c0>
        lcd_scroll_up(sp);
   1720c:	e13ffc17 	ldw	r4,-16(fp)
   17210:	0016cac0 	call	16cac <lcd_scroll_up>
   17214:	00003b06 	br	17304 <altera_avalon_lcd_16207_write+0x2c0>
    }
    else if (c == '\b')
   17218:	e0bff807 	ldb	r2,-32(fp)
   1721c:	10800218 	cmpnei	r2,r2,8
   17220:	10000c1e 	bne	r2,zero,17254 <altera_avalon_lcd_16207_write+0x210>
    {
      if (sp->x > 0)
   17224:	e0bffc17 	ldw	r2,-16(fp)
   17228:	10800843 	ldbu	r2,33(r2)
   1722c:	10803fcc 	andi	r2,r2,255
   17230:	1005003a 	cmpeq	r2,r2,zero
   17234:	1000331e 	bne	r2,zero,17304 <altera_avalon_lcd_16207_write+0x2c0>
        sp->x--;
   17238:	e0bffc17 	ldw	r2,-16(fp)
   1723c:	10800843 	ldbu	r2,33(r2)
   17240:	10bfffc4 	addi	r2,r2,-1
   17244:	1007883a 	mov	r3,r2
   17248:	e0bffc17 	ldw	r2,-16(fp)
   1724c:	10c00845 	stb	r3,33(r2)
   17250:	00002c06 	br	17304 <altera_avalon_lcd_16207_write+0x2c0>
    }
    else if (isprint(c))
   17254:	e0bff807 	ldb	r2,-32(fp)
   17258:	1007883a 	mov	r3,r2
   1725c:	00820034 	movhi	r2,2048
   17260:	108a4e04 	addi	r2,r2,10552
   17264:	10800017 	ldw	r2,0(r2)
   17268:	1885883a 	add	r2,r3,r2
   1726c:	10800003 	ldbu	r2,0(r2)
   17270:	10803fcc 	andi	r2,r2,255
   17274:	1080201c 	xori	r2,r2,128
   17278:	10bfe004 	addi	r2,r2,-128
   1727c:	108025cc 	andi	r2,r2,151
   17280:	1005003a 	cmpeq	r2,r2,zero
   17284:	10001f1e 	bne	r2,zero,17304 <altera_avalon_lcd_16207_write+0x2c0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   17288:	e0bffc17 	ldw	r2,-16(fp)
   1728c:	10800883 	ldbu	r2,34(r2)
   17290:	10803fcc 	andi	r2,r2,255
   17294:	108000b0 	cmpltui	r2,r2,2
   17298:	1000021e 	bne	r2,zero,172a4 <altera_avalon_lcd_16207_write+0x260>
        lcd_scroll_up(sp);
   1729c:	e13ffc17 	ldw	r4,-16(fp)
   172a0:	0016cac0 	call	16cac <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   172a4:	e0bffc17 	ldw	r2,-16(fp)
   172a8:	10800843 	ldbu	r2,33(r2)
   172ac:	10803fcc 	andi	r2,r2,255
   172b0:	10801428 	cmpgeui	r2,r2,80
   172b4:	10000d1e 	bne	r2,zero,172ec <altera_avalon_lcd_16207_write+0x2a8>
        sp->line[sp->y].data[sp->x] = c;
   172b8:	e0bffc17 	ldw	r2,-16(fp)
   172bc:	10800883 	ldbu	r2,34(r2)
   172c0:	11003fcc 	andi	r4,r2,255
   172c4:	e0bffc17 	ldw	r2,-16(fp)
   172c8:	10800843 	ldbu	r2,33(r2)
   172cc:	11403fcc 	andi	r5,r2,255
   172d0:	e0fffc17 	ldw	r3,-16(fp)
   172d4:	208018e4 	muli	r2,r4,99
   172d8:	10c5883a 	add	r2,r2,r3
   172dc:	1145883a 	add	r2,r2,r5
   172e0:	10c01004 	addi	r3,r2,64
   172e4:	e0bff803 	ldbu	r2,-32(fp)
   172e8:	18800005 	stb	r2,0(r3)

      sp->x++;
   172ec:	e0bffc17 	ldw	r2,-16(fp)
   172f0:	10800843 	ldbu	r2,33(r2)
   172f4:	10800044 	addi	r2,r2,1
   172f8:	1007883a 	mov	r3,r2
   172fc:	e0bffc17 	ldw	r2,-16(fp)
   17300:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   17304:	e0bffd17 	ldw	r2,-12(fp)
   17308:	10800044 	addi	r2,r2,1
   1730c:	e0bffd15 	stw	r2,-12(fp)
   17310:	e0fffd17 	ldw	r3,-12(fp)
   17314:	e0bffb17 	ldw	r2,-20(fp)
   17318:	18bf5b36 	bltu	r3,r2,17088 <altera_avalon_lcd_16207_write+0x44>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   1731c:	00800404 	movi	r2,16
   17320:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   17324:	e03ffa15 	stw	zero,-24(fp)
   17328:	00003606 	br	17404 <altera_avalon_lcd_16207_write+0x3c0>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1732c:	00801404 	movi	r2,80
   17330:	e0bff615 	stw	r2,-40(fp)
   17334:	00001106 	br	1737c <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
   17338:	e13ffa17 	ldw	r4,-24(fp)
   1733c:	e0bff617 	ldw	r2,-40(fp)
   17340:	117fffc4 	addi	r5,r2,-1
   17344:	e0fffc17 	ldw	r3,-16(fp)
   17348:	208018e4 	muli	r2,r4,99
   1734c:	10c5883a 	add	r2,r2,r3
   17350:	1145883a 	add	r2,r2,r5
   17354:	10801004 	addi	r2,r2,64
   17358:	10800003 	ldbu	r2,0(r2)
   1735c:	10803fcc 	andi	r2,r2,255
   17360:	1080201c 	xori	r2,r2,128
   17364:	10bfe004 	addi	r2,r2,-128
   17368:	10800818 	cmpnei	r2,r2,32
   1736c:	1000061e 	bne	r2,zero,17388 <altera_avalon_lcd_16207_write+0x344>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   17370:	e0bff617 	ldw	r2,-40(fp)
   17374:	10bfffc4 	addi	r2,r2,-1
   17378:	e0bff615 	stw	r2,-40(fp)
   1737c:	e0bff617 	ldw	r2,-40(fp)
   17380:	10800048 	cmpgei	r2,r2,1
   17384:	103fec1e 	bne	r2,zero,17338 <altera_avalon_lcd_16207_write+0x2f4>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   17388:	e0bff617 	ldw	r2,-40(fp)
   1738c:	10800448 	cmpgei	r2,r2,17
   17390:	1000031e 	bne	r2,zero,173a0 <altera_avalon_lcd_16207_write+0x35c>
      width = ALT_LCD_WIDTH;
   17394:	00800404 	movi	r2,16
   17398:	e0bff615 	stw	r2,-40(fp)
   1739c:	00000306 	br	173ac <altera_avalon_lcd_16207_write+0x368>
    else
      width++;
   173a0:	e0bff617 	ldw	r2,-40(fp)
   173a4:	10800044 	addi	r2,r2,1
   173a8:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
   173ac:	e13ffa17 	ldw	r4,-24(fp)
   173b0:	e0bff617 	ldw	r2,-40(fp)
   173b4:	100b883a 	mov	r5,r2
   173b8:	e0fffc17 	ldw	r3,-16(fp)
   173bc:	208018e4 	muli	r2,r4,99
   173c0:	10c5883a 	add	r2,r2,r3
   173c4:	10802404 	addi	r2,r2,144
   173c8:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
   173cc:	e0fff917 	ldw	r3,-28(fp)
   173d0:	e0bff617 	ldw	r2,-40(fp)
   173d4:	1880020e 	bge	r3,r2,173e0 <altera_avalon_lcd_16207_write+0x39c>
      widthmax = width;
   173d8:	e0bff617 	ldw	r2,-40(fp)
   173dc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   173e0:	e0bffa17 	ldw	r2,-24(fp)
   173e4:	e0fffc17 	ldw	r3,-16(fp)
   173e8:	108018e4 	muli	r2,r2,99
   173ec:	10c5883a 	add	r2,r2,r3
   173f0:	10802404 	addi	r2,r2,144
   173f4:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   173f8:	e0bffa17 	ldw	r2,-24(fp)
   173fc:	10800044 	addi	r2,r2,1
   17400:	e0bffa15 	stw	r2,-24(fp)
   17404:	e0bffa17 	ldw	r2,-24(fp)
   17408:	10800090 	cmplti	r2,r2,2
   1740c:	103fc71e 	bne	r2,zero,1732c <altera_avalon_lcd_16207_write+0x2e8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   17410:	e0bff917 	ldw	r2,-28(fp)
   17414:	10800448 	cmpgei	r2,r2,17
   17418:	1000031e 	bne	r2,zero,17428 <altera_avalon_lcd_16207_write+0x3e4>
    sp->scrollmax = 0;
   1741c:	e0bffc17 	ldw	r2,-16(fp)
   17420:	10000985 	stb	zero,38(r2)
   17424:	00002d06 	br	174dc <altera_avalon_lcd_16207_write+0x498>
  else
  {
    widthmax *= 2;
   17428:	e0bff917 	ldw	r2,-28(fp)
   1742c:	1085883a 	add	r2,r2,r2
   17430:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
   17434:	e0bff917 	ldw	r2,-28(fp)
   17438:	1007883a 	mov	r3,r2
   1743c:	e0bffc17 	ldw	r2,-16(fp)
   17440:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   17444:	e03ffa15 	stw	zero,-24(fp)
   17448:	00002106 	br	174d0 <altera_avalon_lcd_16207_write+0x48c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   1744c:	e0bffa17 	ldw	r2,-24(fp)
   17450:	e0fffc17 	ldw	r3,-16(fp)
   17454:	108018e4 	muli	r2,r2,99
   17458:	10c5883a 	add	r2,r2,r3
   1745c:	10802404 	addi	r2,r2,144
   17460:	10800043 	ldbu	r2,1(r2)
   17464:	10803fcc 	andi	r2,r2,255
   17468:	1080201c 	xori	r2,r2,128
   1746c:	10bfe004 	addi	r2,r2,-128
   17470:	10800450 	cmplti	r2,r2,17
   17474:	1000131e 	bne	r2,zero,174c4 <altera_avalon_lcd_16207_write+0x480>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   17478:	e17ffa17 	ldw	r5,-24(fp)
   1747c:	e0bffa17 	ldw	r2,-24(fp)
   17480:	e0fffc17 	ldw	r3,-16(fp)
   17484:	108018e4 	muli	r2,r2,99
   17488:	10c5883a 	add	r2,r2,r3
   1748c:	10802404 	addi	r2,r2,144
   17490:	10800043 	ldbu	r2,1(r2)
   17494:	10803fcc 	andi	r2,r2,255
   17498:	1080201c 	xori	r2,r2,128
   1749c:	10bfe004 	addi	r2,r2,-128
   174a0:	1006923a 	slli	r3,r2,8
   174a4:	e0bff917 	ldw	r2,-28(fp)
   174a8:	1885283a 	div	r2,r3,r2
   174ac:	1009883a 	mov	r4,r2
   174b0:	e0fffc17 	ldw	r3,-16(fp)
   174b4:	288018e4 	muli	r2,r5,99
   174b8:	10c5883a 	add	r2,r2,r3
   174bc:	10802404 	addi	r2,r2,144
   174c0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   174c4:	e0bffa17 	ldw	r2,-24(fp)
   174c8:	10800044 	addi	r2,r2,1
   174cc:	e0bffa15 	stw	r2,-24(fp)
   174d0:	e0bffa17 	ldw	r2,-24(fp)
   174d4:	10800090 	cmplti	r2,r2,2
   174d8:	103fdc1e 	bne	r2,zero,1744c <altera_avalon_lcd_16207_write+0x408>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   174dc:	e0bffc17 	ldw	r2,-16(fp)
   174e0:	10800943 	ldbu	r2,37(r2)
   174e4:	10803fcc 	andi	r2,r2,255
   174e8:	1080201c 	xori	r2,r2,128
   174ec:	10bfe004 	addi	r2,r2,-128
   174f0:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
   174f4:	e13ffc17 	ldw	r4,-16(fp)
   174f8:	0016ac00 	call	16ac0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   174fc:	e0bffc17 	ldw	r2,-16(fp)
   17500:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   17504:	e0bffc17 	ldw	r2,-16(fp)
   17508:	10800943 	ldbu	r2,37(r2)
   1750c:	10c03fcc 	andi	r3,r2,255
   17510:	18c0201c 	xori	r3,r3,128
   17514:	18ffe004 	addi	r3,r3,-128
   17518:	e0bff517 	ldw	r2,-44(fp)
   1751c:	18800426 	beq	r3,r2,17530 <altera_avalon_lcd_16207_write+0x4ec>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   17520:	e0fffc17 	ldw	r3,-16(fp)
   17524:	00800044 	movi	r2,1
   17528:	188009c5 	stb	r2,39(r3)
  }
   1752c:	003feb06 	br	174dc <altera_avalon_lcd_16207_write+0x498>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   17530:	e0bffe17 	ldw	r2,-8(fp)
}
   17534:	e037883a 	mov	sp,fp
   17538:	dfc00117 	ldw	ra,4(sp)
   1753c:	df000017 	ldw	fp,0(sp)
   17540:	dec00204 	addi	sp,sp,8
   17544:	f800283a 	ret

00017548 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   17548:	defffc04 	addi	sp,sp,-16
   1754c:	dfc00315 	stw	ra,12(sp)
   17550:	df000215 	stw	fp,8(sp)
   17554:	df000204 	addi	fp,sp,8
   17558:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   1755c:	e0bfff17 	ldw	r2,-4(fp)
   17560:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   17564:	e0bffe17 	ldw	r2,-8(fp)
   17568:	10800943 	ldbu	r2,37(r2)
   1756c:	10803fcc 	andi	r2,r2,255
   17570:	1080201c 	xori	r2,r2,128
   17574:	10bfe004 	addi	r2,r2,-128
   17578:	10c00044 	addi	r3,r2,1
   1757c:	e0bffe17 	ldw	r2,-8(fp)
   17580:	10800983 	ldbu	r2,38(r2)
   17584:	10803fcc 	andi	r2,r2,255
   17588:	1080201c 	xori	r2,r2,128
   1758c:	10bfe004 	addi	r2,r2,-128
   17590:	18800316 	blt	r3,r2,175a0 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
   17594:	e0bffe17 	ldw	r2,-8(fp)
   17598:	10000945 	stb	zero,37(r2)
   1759c:	00000606 	br	175b8 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
   175a0:	e0bffe17 	ldw	r2,-8(fp)
   175a4:	10800943 	ldbu	r2,37(r2)
   175a8:	10800044 	addi	r2,r2,1
   175ac:	1007883a 	mov	r3,r2
   175b0:	e0bffe17 	ldw	r2,-8(fp)
   175b4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   175b8:	e0bffe17 	ldw	r2,-8(fp)
   175bc:	10800983 	ldbu	r2,38(r2)
   175c0:	10803fcc 	andi	r2,r2,255
   175c4:	1080201c 	xori	r2,r2,128
   175c8:	10bfe004 	addi	r2,r2,-128
   175cc:	10800050 	cmplti	r2,r2,1
   175d0:	1000091e 	bne	r2,zero,175f8 <alt_lcd_16207_timeout+0xb0>
   175d4:	e0bffe17 	ldw	r2,-8(fp)
   175d8:	108009c3 	ldbu	r2,39(r2)
   175dc:	10803fcc 	andi	r2,r2,255
   175e0:	1080201c 	xori	r2,r2,128
   175e4:	10bfe004 	addi	r2,r2,-128
   175e8:	1004c03a 	cmpne	r2,r2,zero
   175ec:	1000021e 	bne	r2,zero,175f8 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
   175f0:	e13ffe17 	ldw	r4,-8(fp)
   175f4:	0016ac00 	call	16ac0 <lcd_repaint_screen>

  return sp->period;
   175f8:	e0bffe17 	ldw	r2,-8(fp)
   175fc:	10800717 	ldw	r2,28(r2)
}
   17600:	e037883a 	mov	sp,fp
   17604:	dfc00117 	ldw	ra,4(sp)
   17608:	df000017 	ldw	fp,0(sp)
   1760c:	dec00204 	addi	sp,sp,8
   17610:	f800283a 	ret

00017614 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   17614:	defffc04 	addi	sp,sp,-16
   17618:	dfc00315 	stw	ra,12(sp)
   1761c:	df000215 	stw	fp,8(sp)
   17620:	df000204 	addi	fp,sp,8
   17624:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   17628:	e0bfff17 	ldw	r2,-4(fp)
   1762c:	10800017 	ldw	r2,0(r2)
   17630:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   17634:	e0bfff17 	ldw	r2,-4(fp)
   17638:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   1763c:	010ea604 	movi	r4,15000
   17640:	001ac700 	call	1ac70 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   17644:	e0bffe17 	ldw	r2,-8(fp)
   17648:	1007883a 	mov	r3,r2
   1764c:	00800c04 	movi	r2,48
   17650:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   17654:	01040104 	movi	r4,4100
   17658:	001ac700 	call	1ac70 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1765c:	e0bffe17 	ldw	r2,-8(fp)
   17660:	1007883a 	mov	r3,r2
   17664:	00800c04 	movi	r2,48
   17668:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   1766c:	0100fa04 	movi	r4,1000
   17670:	001ac700 	call	1ac70 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   17674:	e0bffe17 	ldw	r2,-8(fp)
   17678:	1007883a 	mov	r3,r2
   1767c:	00800c04 	movi	r2,48
   17680:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   17684:	e13fff17 	ldw	r4,-4(fp)
   17688:	01400e04 	movi	r5,56
   1768c:	00168700 	call	16870 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   17690:	e13fff17 	ldw	r4,-4(fp)
   17694:	01400204 	movi	r5,8
   17698:	00168700 	call	16870 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   1769c:	e13fff17 	ldw	r4,-4(fp)
   176a0:	00169fc0 	call	169fc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   176a4:	e13fff17 	ldw	r4,-4(fp)
   176a8:	01400184 	movi	r5,6
   176ac:	00168700 	call	16870 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   176b0:	e13fff17 	ldw	r4,-4(fp)
   176b4:	01400304 	movi	r5,12
   176b8:	00168700 	call	16870 <lcd_write_command>

  sp->esccount = -1;
   176bc:	e0ffff17 	ldw	r3,-4(fp)
   176c0:	00bfffc4 	movi	r2,-1
   176c4:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
   176c8:	e0bfff17 	ldw	r2,-4(fp)
   176cc:	11000a04 	addi	r4,r2,40
   176d0:	000b883a 	mov	r5,zero
   176d4:	01800204 	movi	r6,8
   176d8:	00083b40 	call	83b4 <memset>

  sp->scrollpos = 0;
   176dc:	e0bfff17 	ldw	r2,-4(fp)
   176e0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   176e4:	e0bfff17 	ldw	r2,-4(fp)
   176e8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   176ec:	e0bfff17 	ldw	r2,-4(fp)
   176f0:	100009c5 	stb	zero,39(r2)
   176f4:	00820034 	movhi	r2,2048
   176f8:	108a8c04 	addi	r2,r2,10800
   176fc:	10800017 	ldw	r2,0(r2)
   17700:	1007883a 	mov	r3,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   17704:	00800284 	movi	r2,10
   17708:	1885203a 	divu	r2,r3,r2
   1770c:	1007883a 	mov	r3,r2
   17710:	e0bfff17 	ldw	r2,-4(fp)
   17714:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   17718:	e0bfff17 	ldw	r2,-4(fp)
   1771c:	11000104 	addi	r4,r2,4
   17720:	e0bfff17 	ldw	r2,-4(fp)
   17724:	10800717 	ldw	r2,28(r2)
   17728:	100b883a 	mov	r5,r2
   1772c:	01800074 	movhi	r6,1
   17730:	319d5204 	addi	r6,r6,30024
   17734:	e1ffff17 	ldw	r7,-4(fp)
   17738:	001a1c00 	call	1a1c0 <alt_alarm_start>
}
   1773c:	e037883a 	mov	sp,fp
   17740:	dfc00117 	ldw	ra,4(sp)
   17744:	df000017 	ldw	fp,0(sp)
   17748:	dec00204 	addi	sp,sp,8
   1774c:	f800283a 	ret

00017750 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   17750:	defffa04 	addi	sp,sp,-24
   17754:	dfc00515 	stw	ra,20(sp)
   17758:	df000415 	stw	fp,16(sp)
   1775c:	df000404 	addi	fp,sp,16
   17760:	e13ffd15 	stw	r4,-12(fp)
   17764:	e17ffe15 	stw	r5,-8(fp)
   17768:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   1776c:	e0bffd17 	ldw	r2,-12(fp)
   17770:	10800017 	ldw	r2,0(r2)
   17774:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   17778:	e0bffc17 	ldw	r2,-16(fp)
   1777c:	11000a04 	addi	r4,r2,40
   17780:	e0bffd17 	ldw	r2,-12(fp)
   17784:	11c00217 	ldw	r7,8(r2)
   17788:	e17ffe17 	ldw	r5,-8(fp)
   1778c:	e1bfff17 	ldw	r6,-4(fp)
   17790:	00170440 	call	17044 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   17794:	e037883a 	mov	sp,fp
   17798:	dfc00117 	ldw	ra,4(sp)
   1779c:	df000017 	ldw	fp,0(sp)
   177a0:	dec00204 	addi	sp,sp,8
   177a4:	f800283a 	ret

000177a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   177a8:	defff904 	addi	sp,sp,-28
   177ac:	dfc00615 	stw	ra,24(sp)
   177b0:	df000515 	stw	fp,20(sp)
   177b4:	df000504 	addi	fp,sp,20
   177b8:	e13ffe15 	stw	r4,-8(fp)
   177bc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   177c0:	e0bffe17 	ldw	r2,-8(fp)
   177c4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   177c8:	e0bffe17 	ldw	r2,-8(fp)
   177cc:	10800104 	addi	r2,r2,4
   177d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177d4:	0005303a 	rdctl	r2,status
   177d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177dc:	e0fffc17 	ldw	r3,-16(fp)
   177e0:	00bfff84 	movi	r2,-2
   177e4:	1884703a 	and	r2,r3,r2
   177e8:	1001703a 	wrctl	status,r2
  
  return context;
   177ec:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   177f0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
   177f4:	001ab640 	call	1ab64 <alt_tick>
   177f8:	e0bffd17 	ldw	r2,-12(fp)
   177fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17800:	e0bffb17 	ldw	r2,-20(fp)
   17804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   17808:	e037883a 	mov	sp,fp
   1780c:	dfc00117 	ldw	ra,4(sp)
   17810:	df000017 	ldw	fp,0(sp)
   17814:	dec00204 	addi	sp,sp,8
   17818:	f800283a 	ret

0001781c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1781c:	defff904 	addi	sp,sp,-28
   17820:	dfc00615 	stw	ra,24(sp)
   17824:	df000515 	stw	fp,20(sp)
   17828:	df000504 	addi	fp,sp,20
   1782c:	e13ffc15 	stw	r4,-16(fp)
   17830:	e17ffd15 	stw	r5,-12(fp)
   17834:	e1bffe15 	stw	r6,-8(fp)
   17838:	e1ffff15 	stw	r7,-4(fp)
   1783c:	e0bfff17 	ldw	r2,-4(fp)
   17840:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   17844:	00820034 	movhi	r2,2048
   17848:	108a8c04 	addi	r2,r2,10800
   1784c:	10800017 	ldw	r2,0(r2)
   17850:	1004c03a 	cmpne	r2,r2,zero
   17854:	1000041e 	bne	r2,zero,17868 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   17858:	00c20034 	movhi	r3,2048
   1785c:	18ca8c04 	addi	r3,r3,10800
   17860:	e0bffb17 	ldw	r2,-20(fp)
   17864:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   17868:	e0bffc17 	ldw	r2,-16(fp)
   1786c:	10800104 	addi	r2,r2,4
   17870:	1007883a 	mov	r3,r2
   17874:	008001c4 	movi	r2,7
   17878:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1787c:	e13ffe17 	ldw	r4,-8(fp)
   17880:	e17ffc17 	ldw	r5,-16(fp)
   17884:	01800074 	movhi	r6,1
   17888:	319dea04 	addi	r6,r6,30632
   1788c:	00019140 	call	1914 <alt_irq_register>
#endif  
}
   17890:	e037883a 	mov	sp,fp
   17894:	dfc00117 	ldw	ra,4(sp)
   17898:	df000017 	ldw	fp,0(sp)
   1789c:	dec00204 	addi	sp,sp,8
   178a0:	f800283a 	ret

000178a4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   178a4:	defffa04 	addi	sp,sp,-24
   178a8:	dfc00515 	stw	ra,20(sp)
   178ac:	df000415 	stw	fp,16(sp)
   178b0:	df000404 	addi	fp,sp,16
   178b4:	e13ffd15 	stw	r4,-12(fp)
   178b8:	e17ffe15 	stw	r5,-8(fp)
   178bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   178c0:	e0bffd17 	ldw	r2,-12(fp)
   178c4:	10800017 	ldw	r2,0(r2)
   178c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   178cc:	e0bffc17 	ldw	r2,-16(fp)
   178d0:	11000a04 	addi	r4,r2,40
   178d4:	e0bffd17 	ldw	r2,-12(fp)
   178d8:	11c00217 	ldw	r7,8(r2)
   178dc:	e17ffe17 	ldw	r5,-8(fp)
   178e0:	e1bfff17 	ldw	r6,-4(fp)
   178e4:	0017d980 	call	17d98 <altera_avalon_uart_read>
      fd->fd_flags);
}
   178e8:	e037883a 	mov	sp,fp
   178ec:	dfc00117 	ldw	ra,4(sp)
   178f0:	df000017 	ldw	fp,0(sp)
   178f4:	dec00204 	addi	sp,sp,8
   178f8:	f800283a 	ret

000178fc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   178fc:	defffa04 	addi	sp,sp,-24
   17900:	dfc00515 	stw	ra,20(sp)
   17904:	df000415 	stw	fp,16(sp)
   17908:	df000404 	addi	fp,sp,16
   1790c:	e13ffd15 	stw	r4,-12(fp)
   17910:	e17ffe15 	stw	r5,-8(fp)
   17914:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   17918:	e0bffd17 	ldw	r2,-12(fp)
   1791c:	10800017 	ldw	r2,0(r2)
   17920:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   17924:	e0bffc17 	ldw	r2,-16(fp)
   17928:	11000a04 	addi	r4,r2,40
   1792c:	e0bffd17 	ldw	r2,-12(fp)
   17930:	11c00217 	ldw	r7,8(r2)
   17934:	e17ffe17 	ldw	r5,-8(fp)
   17938:	e1bfff17 	ldw	r6,-4(fp)
   1793c:	00180280 	call	18028 <altera_avalon_uart_write>
      fd->fd_flags);
}
   17940:	e037883a 	mov	sp,fp
   17944:	dfc00117 	ldw	ra,4(sp)
   17948:	df000017 	ldw	fp,0(sp)
   1794c:	dec00204 	addi	sp,sp,8
   17950:	f800283a 	ret

00017954 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   17954:	defffc04 	addi	sp,sp,-16
   17958:	dfc00315 	stw	ra,12(sp)
   1795c:	df000215 	stw	fp,8(sp)
   17960:	df000204 	addi	fp,sp,8
   17964:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   17968:	e0bfff17 	ldw	r2,-4(fp)
   1796c:	10800017 	ldw	r2,0(r2)
   17970:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   17974:	e0bffe17 	ldw	r2,-8(fp)
   17978:	11000a04 	addi	r4,r2,40
   1797c:	e0bfff17 	ldw	r2,-4(fp)
   17980:	11400217 	ldw	r5,8(r2)
   17984:	0017d380 	call	17d38 <altera_avalon_uart_close>
}
   17988:	e037883a 	mov	sp,fp
   1798c:	dfc00117 	ldw	ra,4(sp)
   17990:	df000017 	ldw	fp,0(sp)
   17994:	dec00204 	addi	sp,sp,8
   17998:	f800283a 	ret

0001799c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   1799c:	defff804 	addi	sp,sp,-32
   179a0:	dfc00715 	stw	ra,28(sp)
   179a4:	df000615 	stw	fp,24(sp)
   179a8:	df000604 	addi	fp,sp,24
   179ac:	e13ffc15 	stw	r4,-16(fp)
   179b0:	e17ffd15 	stw	r5,-12(fp)
   179b4:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
   179b8:	e0bffc17 	ldw	r2,-16(fp)
   179bc:	10800017 	ldw	r2,0(r2)
   179c0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   179c4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   179c8:	1004c03a 	cmpne	r2,r2,zero
   179cc:	1000061e 	bne	r2,zero,179e8 <altera_avalon_uart_init+0x4c>
   179d0:	0005883a 	mov	r2,zero
   179d4:	1004c03a 	cmpne	r2,r2,zero
   179d8:	1000031e 	bne	r2,zero,179e8 <altera_avalon_uart_init+0x4c>
   179dc:	0005883a 	mov	r2,zero
   179e0:	1005003a 	cmpeq	r2,r2,zero
   179e4:	1000031e 	bne	r2,zero,179f4 <altera_avalon_uart_init+0x58>
   179e8:	00800044 	movi	r2,1
   179ec:	e0bfff15 	stw	r2,-4(fp)
   179f0:	00000106 	br	179f8 <altera_avalon_uart_init+0x5c>
   179f4:	e03fff15 	stw	zero,-4(fp)
   179f8:	e0bfff17 	ldw	r2,-4(fp)
   179fc:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   17a00:	e0bffa17 	ldw	r2,-24(fp)
   17a04:	1004c03a 	cmpne	r2,r2,zero
   17a08:	10000f1e 	bne	r2,zero,17a48 <altera_avalon_uart_init+0xac>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   17a0c:	e0fffc17 	ldw	r3,-16(fp)
   17a10:	00832004 	movi	r2,3200
   17a14:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   17a18:	e0bffb17 	ldw	r2,-20(fp)
   17a1c:	11000304 	addi	r4,r2,12
   17a20:	e0bffc17 	ldw	r2,-16(fp)
   17a24:	10800117 	ldw	r2,4(r2)
   17a28:	1007883a 	mov	r3,r2
   17a2c:	2005883a 	mov	r2,r4
   17a30:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
   17a34:	e13ffe17 	ldw	r4,-8(fp)
   17a38:	e17ffc17 	ldw	r5,-16(fp)
   17a3c:	01800074 	movhi	r6,1
   17a40:	319e9704 	addi	r6,r6,31324
   17a44:	00019140 	call	1914 <alt_irq_register>
#endif  
  }
}
   17a48:	e037883a 	mov	sp,fp
   17a4c:	dfc00117 	ldw	ra,4(sp)
   17a50:	df000017 	ldw	fp,0(sp)
   17a54:	dec00204 	addi	sp,sp,8
   17a58:	f800283a 	ret

00017a5c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   17a5c:	defff904 	addi	sp,sp,-28
   17a60:	dfc00615 	stw	ra,24(sp)
   17a64:	df000515 	stw	fp,20(sp)
   17a68:	df000504 	addi	fp,sp,20
   17a6c:	e13ffe15 	stw	r4,-8(fp)
   17a70:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   17a74:	e0bffe17 	ldw	r2,-8(fp)
   17a78:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   17a7c:	e0bffc17 	ldw	r2,-16(fp)
   17a80:	10800017 	ldw	r2,0(r2)
   17a84:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   17a88:	e0bffb17 	ldw	r2,-20(fp)
   17a8c:	10800204 	addi	r2,r2,8
   17a90:	10800037 	ldwio	r2,0(r2)
   17a94:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   17a98:	e0bffb17 	ldw	r2,-20(fp)
   17a9c:	10800204 	addi	r2,r2,8
   17aa0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   17aa4:	e0bffb17 	ldw	r2,-20(fp)
   17aa8:	10800204 	addi	r2,r2,8
   17aac:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   17ab0:	e0bffd17 	ldw	r2,-12(fp)
   17ab4:	1080200c 	andi	r2,r2,128
   17ab8:	1005003a 	cmpeq	r2,r2,zero
   17abc:	1000031e 	bne	r2,zero,17acc <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
   17ac0:	e13ffc17 	ldw	r4,-16(fp)
   17ac4:	e17ffd17 	ldw	r5,-12(fp)
   17ac8:	0017afc0 	call	17afc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   17acc:	e0bffd17 	ldw	r2,-12(fp)
   17ad0:	1081100c 	andi	r2,r2,1088
   17ad4:	1005003a 	cmpeq	r2,r2,zero
   17ad8:	1000031e 	bne	r2,zero,17ae8 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   17adc:	e13ffc17 	ldw	r4,-16(fp)
   17ae0:	e17ffd17 	ldw	r5,-12(fp)
   17ae4:	0017bdc0 	call	17bdc <altera_avalon_uart_txirq>
  }
  

}
   17ae8:	e037883a 	mov	sp,fp
   17aec:	dfc00117 	ldw	ra,4(sp)
   17af0:	df000017 	ldw	fp,0(sp)
   17af4:	dec00204 	addi	sp,sp,8
   17af8:	f800283a 	ret

00017afc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   17afc:	defffc04 	addi	sp,sp,-16
   17b00:	df000315 	stw	fp,12(sp)
   17b04:	df000304 	addi	fp,sp,12
   17b08:	e13ffe15 	stw	r4,-8(fp)
   17b0c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   17b10:	e0bfff17 	ldw	r2,-4(fp)
   17b14:	108000cc 	andi	r2,r2,3
   17b18:	1004c03a 	cmpne	r2,r2,zero
   17b1c:	10002b1e 	bne	r2,zero,17bcc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   17b20:	e0bffe17 	ldw	r2,-8(fp)
   17b24:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   17b28:	e0bffe17 	ldw	r2,-8(fp)
   17b2c:	10800317 	ldw	r2,12(r2)
   17b30:	10800044 	addi	r2,r2,1
   17b34:	10800fcc 	andi	r2,r2,63
   17b38:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   17b3c:	e0bffe17 	ldw	r2,-8(fp)
   17b40:	11000317 	ldw	r4,12(r2)
   17b44:	e0bffe17 	ldw	r2,-8(fp)
   17b48:	10800017 	ldw	r2,0(r2)
   17b4c:	10800037 	ldwio	r2,0(r2)
   17b50:	1007883a 	mov	r3,r2
   17b54:	e0bffe17 	ldw	r2,-8(fp)
   17b58:	2085883a 	add	r2,r4,r2
   17b5c:	10800704 	addi	r2,r2,28
   17b60:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   17b64:	e0fffe17 	ldw	r3,-8(fp)
   17b68:	e0bffd17 	ldw	r2,-12(fp)
   17b6c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   17b70:	e0bffe17 	ldw	r2,-8(fp)
   17b74:	10800317 	ldw	r2,12(r2)
   17b78:	10800044 	addi	r2,r2,1
   17b7c:	10800fcc 	andi	r2,r2,63
   17b80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   17b84:	e0bffe17 	ldw	r2,-8(fp)
   17b88:	10c00217 	ldw	r3,8(r2)
   17b8c:	e0bffd17 	ldw	r2,-12(fp)
   17b90:	18800e1e 	bne	r3,r2,17bcc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   17b94:	e0bffe17 	ldw	r2,-8(fp)
   17b98:	10c00117 	ldw	r3,4(r2)
   17b9c:	00bfdfc4 	movi	r2,-129
   17ba0:	1886703a 	and	r3,r3,r2
   17ba4:	e0bffe17 	ldw	r2,-8(fp)
   17ba8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   17bac:	e0bffe17 	ldw	r2,-8(fp)
   17bb0:	10800017 	ldw	r2,0(r2)
   17bb4:	11000304 	addi	r4,r2,12
   17bb8:	e0bffe17 	ldw	r2,-8(fp)
   17bbc:	10800117 	ldw	r2,4(r2)
   17bc0:	1007883a 	mov	r3,r2
   17bc4:	2005883a 	mov	r2,r4
   17bc8:	10c00035 	stwio	r3,0(r2)
  }   
}
   17bcc:	e037883a 	mov	sp,fp
   17bd0:	df000017 	ldw	fp,0(sp)
   17bd4:	dec00104 	addi	sp,sp,4
   17bd8:	f800283a 	ret

00017bdc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   17bdc:	defffd04 	addi	sp,sp,-12
   17be0:	df000215 	stw	fp,8(sp)
   17be4:	df000204 	addi	fp,sp,8
   17be8:	e13ffe15 	stw	r4,-8(fp)
   17bec:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   17bf0:	e0bffe17 	ldw	r2,-8(fp)
   17bf4:	10c00417 	ldw	r3,16(r2)
   17bf8:	e0bffe17 	ldw	r2,-8(fp)
   17bfc:	10800517 	ldw	r2,20(r2)
   17c00:	18803626 	beq	r3,r2,17cdc <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   17c04:	e0bffe17 	ldw	r2,-8(fp)
   17c08:	10800617 	ldw	r2,24(r2)
   17c0c:	1080008c 	andi	r2,r2,2
   17c10:	1005003a 	cmpeq	r2,r2,zero
   17c14:	1000041e 	bne	r2,zero,17c28 <altera_avalon_uart_txirq+0x4c>
   17c18:	e0bfff17 	ldw	r2,-4(fp)
   17c1c:	1082000c 	andi	r2,r2,2048
   17c20:	1005003a 	cmpeq	r2,r2,zero
   17c24:	10001e1e 	bne	r2,zero,17ca0 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   17c28:	e0bffe17 	ldw	r2,-8(fp)
   17c2c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   17c30:	e0bffe17 	ldw	r2,-8(fp)
   17c34:	10800017 	ldw	r2,0(r2)
   17c38:	11000104 	addi	r4,r2,4
   17c3c:	e0bffe17 	ldw	r2,-8(fp)
   17c40:	10c00417 	ldw	r3,16(r2)
   17c44:	e0bffe17 	ldw	r2,-8(fp)
   17c48:	1885883a 	add	r2,r3,r2
   17c4c:	10801704 	addi	r2,r2,92
   17c50:	10800003 	ldbu	r2,0(r2)
   17c54:	10c03fcc 	andi	r3,r2,255
   17c58:	2005883a 	mov	r2,r4
   17c5c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   17c60:	e0bffe17 	ldw	r2,-8(fp)
   17c64:	10800417 	ldw	r2,16(r2)
   17c68:	10c00044 	addi	r3,r2,1
   17c6c:	e0bffe17 	ldw	r2,-8(fp)
   17c70:	10c00415 	stw	r3,16(r2)
   17c74:	e0bffe17 	ldw	r2,-8(fp)
   17c78:	10800417 	ldw	r2,16(r2)
   17c7c:	10c00fcc 	andi	r3,r2,63
   17c80:	e0bffe17 	ldw	r2,-8(fp)
   17c84:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   17c88:	e0bffe17 	ldw	r2,-8(fp)
   17c8c:	10800117 	ldw	r2,4(r2)
   17c90:	10c01014 	ori	r3,r2,64
   17c94:	e0bffe17 	ldw	r2,-8(fp)
   17c98:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   17c9c:	00000f06 	br	17cdc <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   17ca0:	e0bffe17 	ldw	r2,-8(fp)
   17ca4:	10800017 	ldw	r2,0(r2)
   17ca8:	10800204 	addi	r2,r2,8
   17cac:	10800037 	ldwio	r2,0(r2)
   17cb0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   17cb4:	e0bfff17 	ldw	r2,-4(fp)
   17cb8:	1082000c 	andi	r2,r2,2048
   17cbc:	1004c03a 	cmpne	r2,r2,zero
   17cc0:	1000061e 	bne	r2,zero,17cdc <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   17cc4:	e0bffe17 	ldw	r2,-8(fp)
   17cc8:	10c00117 	ldw	r3,4(r2)
   17ccc:	00bfefc4 	movi	r2,-65
   17cd0:	1886703a 	and	r3,r3,r2
   17cd4:	e0bffe17 	ldw	r2,-8(fp)
   17cd8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   17cdc:	e0bffe17 	ldw	r2,-8(fp)
   17ce0:	10c00417 	ldw	r3,16(r2)
   17ce4:	e0bffe17 	ldw	r2,-8(fp)
   17ce8:	10800517 	ldw	r2,20(r2)
   17cec:	1880061e 	bne	r3,r2,17d08 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   17cf0:	e0bffe17 	ldw	r2,-8(fp)
   17cf4:	10c00117 	ldw	r3,4(r2)
   17cf8:	00beefc4 	movi	r2,-1089
   17cfc:	1886703a 	and	r3,r3,r2
   17d00:	e0bffe17 	ldw	r2,-8(fp)
   17d04:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   17d08:	e0bffe17 	ldw	r2,-8(fp)
   17d0c:	10800017 	ldw	r2,0(r2)
   17d10:	11000304 	addi	r4,r2,12
   17d14:	e0bffe17 	ldw	r2,-8(fp)
   17d18:	10800117 	ldw	r2,4(r2)
   17d1c:	1007883a 	mov	r3,r2
   17d20:	2005883a 	mov	r2,r4
   17d24:	10c00035 	stwio	r3,0(r2)
}
   17d28:	e037883a 	mov	sp,fp
   17d2c:	df000017 	ldw	fp,0(sp)
   17d30:	dec00104 	addi	sp,sp,4
   17d34:	f800283a 	ret

00017d38 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   17d38:	defffc04 	addi	sp,sp,-16
   17d3c:	df000315 	stw	fp,12(sp)
   17d40:	df000304 	addi	fp,sp,12
   17d44:	e13ffd15 	stw	r4,-12(fp)
   17d48:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   17d4c:	00000706 	br	17d6c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   17d50:	e0bffe17 	ldw	r2,-8(fp)
   17d54:	1090000c 	andi	r2,r2,16384
   17d58:	1005003a 	cmpeq	r2,r2,zero
   17d5c:	1000031e 	bne	r2,zero,17d6c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
   17d60:	00bffd44 	movi	r2,-11
   17d64:	e0bfff15 	stw	r2,-4(fp)
   17d68:	00000606 	br	17d84 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   17d6c:	e0bffd17 	ldw	r2,-12(fp)
   17d70:	10c00417 	ldw	r3,16(r2)
   17d74:	e0bffd17 	ldw	r2,-12(fp)
   17d78:	10800517 	ldw	r2,20(r2)
   17d7c:	18bff41e 	bne	r3,r2,17d50 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   17d80:	e03fff15 	stw	zero,-4(fp)
   17d84:	e0bfff17 	ldw	r2,-4(fp)
}
   17d88:	e037883a 	mov	sp,fp
   17d8c:	df000017 	ldw	fp,0(sp)
   17d90:	dec00104 	addi	sp,sp,4
   17d94:	f800283a 	ret

00017d98 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   17d98:	defff004 	addi	sp,sp,-64
   17d9c:	dfc00f15 	stw	ra,60(sp)
   17da0:	df000e15 	stw	fp,56(sp)
   17da4:	df000e04 	addi	fp,sp,56
   17da8:	e13ffb15 	stw	r4,-20(fp)
   17dac:	e17ffc15 	stw	r5,-16(fp)
   17db0:	e1bffd15 	stw	r6,-12(fp)
   17db4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   17db8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
   17dbc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   17dc0:	e0bffe17 	ldw	r2,-8(fp)
   17dc4:	1090000c 	andi	r2,r2,16384
   17dc8:	1005003a 	cmpeq	r2,r2,zero
   17dcc:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   17dd0:	e0bffb17 	ldw	r2,-20(fp)
   17dd4:	10800217 	ldw	r2,8(r2)
   17dd8:	10800044 	addi	r2,r2,1
   17ddc:	10800fcc 	andi	r2,r2,63
   17de0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   17de4:	00001906 	br	17e4c <altera_avalon_uart_read+0xb4>
    {
      count++;
   17de8:	e0bff617 	ldw	r2,-40(fp)
   17dec:	10800044 	addi	r2,r2,1
   17df0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   17df4:	e0bffb17 	ldw	r2,-20(fp)
   17df8:	10c00217 	ldw	r3,8(r2)
   17dfc:	e0bffb17 	ldw	r2,-20(fp)
   17e00:	1885883a 	add	r2,r3,r2
   17e04:	10800704 	addi	r2,r2,28
   17e08:	10800003 	ldbu	r2,0(r2)
   17e0c:	1007883a 	mov	r3,r2
   17e10:	e0bffc17 	ldw	r2,-16(fp)
   17e14:	10c00005 	stb	r3,0(r2)
   17e18:	e0bffc17 	ldw	r2,-16(fp)
   17e1c:	10800044 	addi	r2,r2,1
   17e20:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   17e24:	e0bffb17 	ldw	r2,-20(fp)
   17e28:	10800217 	ldw	r2,8(r2)
   17e2c:	10c00044 	addi	r3,r2,1
   17e30:	e0bffb17 	ldw	r2,-20(fp)
   17e34:	10c00215 	stw	r3,8(r2)
   17e38:	e0bffb17 	ldw	r2,-20(fp)
   17e3c:	10800217 	ldw	r2,8(r2)
   17e40:	10c00fcc 	andi	r3,r2,63
   17e44:	e0bffb17 	ldw	r2,-20(fp)
   17e48:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   17e4c:	e0fff617 	ldw	r3,-40(fp)
   17e50:	e0bffd17 	ldw	r2,-12(fp)
   17e54:	1880050e 	bge	r3,r2,17e6c <altera_avalon_uart_read+0xd4>
   17e58:	e0bffb17 	ldw	r2,-20(fp)
   17e5c:	10c00217 	ldw	r3,8(r2)
   17e60:	e0bffb17 	ldw	r2,-20(fp)
   17e64:	10800317 	ldw	r2,12(r2)
   17e68:	18bfdf1e 	bne	r3,r2,17de8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   17e6c:	e0bff617 	ldw	r2,-40(fp)
   17e70:	1004c03a 	cmpne	r2,r2,zero
   17e74:	1000271e 	bne	r2,zero,17f14 <altera_avalon_uart_read+0x17c>
   17e78:	e0bffb17 	ldw	r2,-20(fp)
   17e7c:	10c00217 	ldw	r3,8(r2)
   17e80:	e0bffb17 	ldw	r2,-20(fp)
   17e84:	10800317 	ldw	r2,12(r2)
   17e88:	1880221e 	bne	r3,r2,17f14 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
   17e8c:	e0bff917 	ldw	r2,-28(fp)
   17e90:	1004c03a 	cmpne	r2,r2,zero
   17e94:	1000061e 	bne	r2,zero,17eb0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   17e98:	0017fc80 	call	17fc8 <alt_get_errno>
   17e9c:	00c002c4 	movi	r3,11
   17ea0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   17ea4:	00800044 	movi	r2,1
   17ea8:	e0bff705 	stb	r2,-36(fp)
        break;
   17eac:	00001f06 	br	17f2c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17eb0:	0005303a 	rdctl	r2,status
   17eb4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17eb8:	e0fff517 	ldw	r3,-44(fp)
   17ebc:	00bfff84 	movi	r2,-2
   17ec0:	1884703a 	and	r2,r3,r2
   17ec4:	1001703a 	wrctl	status,r2
  
  return context;
   17ec8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   17ecc:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   17ed0:	e0bffb17 	ldw	r2,-20(fp)
   17ed4:	10800117 	ldw	r2,4(r2)
   17ed8:	10c02014 	ori	r3,r2,128
   17edc:	e0bffb17 	ldw	r2,-20(fp)
   17ee0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   17ee4:	e0bffb17 	ldw	r2,-20(fp)
   17ee8:	10800017 	ldw	r2,0(r2)
   17eec:	11000304 	addi	r4,r2,12
   17ef0:	e0bffb17 	ldw	r2,-20(fp)
   17ef4:	10800117 	ldw	r2,4(r2)
   17ef8:	1007883a 	mov	r3,r2
   17efc:	2005883a 	mov	r2,r4
   17f00:	10c00035 	stwio	r3,0(r2)
   17f04:	e0bffa17 	ldw	r2,-24(fp)
   17f08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f0c:	e0bff417 	ldw	r2,-48(fp)
   17f10:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   17f14:	e0bff617 	ldw	r2,-40(fp)
   17f18:	1004c03a 	cmpne	r2,r2,zero
   17f1c:	1000031e 	bne	r2,zero,17f2c <altera_avalon_uart_read+0x194>
   17f20:	e0bffd17 	ldw	r2,-12(fp)
   17f24:	1004c03a 	cmpne	r2,r2,zero
   17f28:	103fc81e 	bne	r2,zero,17e4c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f2c:	0005303a 	rdctl	r2,status
   17f30:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f34:	e0fff317 	ldw	r3,-52(fp)
   17f38:	00bfff84 	movi	r2,-2
   17f3c:	1884703a 	and	r2,r3,r2
   17f40:	1001703a 	wrctl	status,r2
  
  return context;
   17f44:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   17f48:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   17f4c:	e0bffb17 	ldw	r2,-20(fp)
   17f50:	10800117 	ldw	r2,4(r2)
   17f54:	10c02014 	ori	r3,r2,128
   17f58:	e0bffb17 	ldw	r2,-20(fp)
   17f5c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   17f60:	e0bffb17 	ldw	r2,-20(fp)
   17f64:	10800017 	ldw	r2,0(r2)
   17f68:	11000304 	addi	r4,r2,12
   17f6c:	e0bffb17 	ldw	r2,-20(fp)
   17f70:	10800117 	ldw	r2,4(r2)
   17f74:	1007883a 	mov	r3,r2
   17f78:	2005883a 	mov	r2,r4
   17f7c:	10c00035 	stwio	r3,0(r2)
   17f80:	e0bffa17 	ldw	r2,-24(fp)
   17f84:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f88:	e0bff217 	ldw	r2,-56(fp)
   17f8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   17f90:	e0bff703 	ldbu	r2,-36(fp)
   17f94:	1005003a 	cmpeq	r2,r2,zero
   17f98:	1000031e 	bne	r2,zero,17fa8 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
   17f9c:	00bffd04 	movi	r2,-12
   17fa0:	e0bfff15 	stw	r2,-4(fp)
   17fa4:	00000206 	br	17fb0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
   17fa8:	e0bff617 	ldw	r2,-40(fp)
   17fac:	e0bfff15 	stw	r2,-4(fp)
   17fb0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   17fb4:	e037883a 	mov	sp,fp
   17fb8:	dfc00117 	ldw	ra,4(sp)
   17fbc:	df000017 	ldw	fp,0(sp)
   17fc0:	dec00204 	addi	sp,sp,8
   17fc4:	f800283a 	ret

00017fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17fc8:	defffd04 	addi	sp,sp,-12
   17fcc:	dfc00215 	stw	ra,8(sp)
   17fd0:	df000115 	stw	fp,4(sp)
   17fd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   17fd8:	00820034 	movhi	r2,2048
   17fdc:	108a4604 	addi	r2,r2,10520
   17fe0:	10800017 	ldw	r2,0(r2)
   17fe4:	1005003a 	cmpeq	r2,r2,zero
   17fe8:	1000061e 	bne	r2,zero,18004 <alt_get_errno+0x3c>
   17fec:	00820034 	movhi	r2,2048
   17ff0:	108a4604 	addi	r2,r2,10520
   17ff4:	10800017 	ldw	r2,0(r2)
   17ff8:	103ee83a 	callr	r2
   17ffc:	e0bfff15 	stw	r2,-4(fp)
   18000:	00000306 	br	18010 <alt_get_errno+0x48>
   18004:	00820034 	movhi	r2,2048
   18008:	108a8704 	addi	r2,r2,10780
   1800c:	e0bfff15 	stw	r2,-4(fp)
   18010:	e0bfff17 	ldw	r2,-4(fp)
}
   18014:	e037883a 	mov	sp,fp
   18018:	dfc00117 	ldw	ra,4(sp)
   1801c:	df000017 	ldw	fp,0(sp)
   18020:	dec00204 	addi	sp,sp,8
   18024:	f800283a 	ret

00018028 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   18028:	defff204 	addi	sp,sp,-56
   1802c:	dfc00d15 	stw	ra,52(sp)
   18030:	df000c15 	stw	fp,48(sp)
   18034:	df000c04 	addi	fp,sp,48
   18038:	e13ffc15 	stw	r4,-16(fp)
   1803c:	e17ffd15 	stw	r5,-12(fp)
   18040:	e1bffe15 	stw	r6,-8(fp)
   18044:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   18048:	e0bffe17 	ldw	r2,-8(fp)
   1804c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   18050:	e0bfff17 	ldw	r2,-4(fp)
   18054:	1090000c 	andi	r2,r2,16384
   18058:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1805c:	00004006 	br	18160 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   18060:	e0bffc17 	ldw	r2,-16(fp)
   18064:	10800517 	ldw	r2,20(r2)
   18068:	10800044 	addi	r2,r2,1
   1806c:	10800fcc 	andi	r2,r2,63
   18070:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   18074:	e0bffc17 	ldw	r2,-16(fp)
   18078:	10c00417 	ldw	r3,16(r2)
   1807c:	e0bff917 	ldw	r2,-28(fp)
   18080:	1880251e 	bne	r3,r2,18118 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
   18084:	e0bffa17 	ldw	r2,-24(fp)
   18088:	1005003a 	cmpeq	r2,r2,zero
   1808c:	1000051e 	bne	r2,zero,180a4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   18090:	00181f00 	call	181f0 <alt_get_errno>
   18094:	1007883a 	mov	r3,r2
   18098:	008002c4 	movi	r2,11
   1809c:	18800015 	stw	r2,0(r3)
        break;
   180a0:	00003206 	br	1816c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180a4:	0005303a 	rdctl	r2,status
   180a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180ac:	e0fff717 	ldw	r3,-36(fp)
   180b0:	00bfff84 	movi	r2,-2
   180b4:	1884703a 	and	r2,r3,r2
   180b8:	1001703a 	wrctl	status,r2
  
  return context;
   180bc:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   180c0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   180c4:	e0bffc17 	ldw	r2,-16(fp)
   180c8:	10800117 	ldw	r2,4(r2)
   180cc:	10c11014 	ori	r3,r2,1088
   180d0:	e0bffc17 	ldw	r2,-16(fp)
   180d4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   180d8:	e0bffc17 	ldw	r2,-16(fp)
   180dc:	10800017 	ldw	r2,0(r2)
   180e0:	11000304 	addi	r4,r2,12
   180e4:	e0bffc17 	ldw	r2,-16(fp)
   180e8:	10800117 	ldw	r2,4(r2)
   180ec:	1007883a 	mov	r3,r2
   180f0:	2005883a 	mov	r2,r4
   180f4:	10c00035 	stwio	r3,0(r2)
   180f8:	e0bffb17 	ldw	r2,-20(fp)
   180fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18100:	e0bff617 	ldw	r2,-40(fp)
   18104:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   18108:	e0bffc17 	ldw	r2,-16(fp)
   1810c:	10c00417 	ldw	r3,16(r2)
   18110:	e0bff917 	ldw	r2,-28(fp)
   18114:	18bffc26 	beq	r3,r2,18108 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
   18118:	e0bff817 	ldw	r2,-32(fp)
   1811c:	10bfffc4 	addi	r2,r2,-1
   18120:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   18124:	e0bffc17 	ldw	r2,-16(fp)
   18128:	10c00517 	ldw	r3,20(r2)
   1812c:	e0bffd17 	ldw	r2,-12(fp)
   18130:	10800003 	ldbu	r2,0(r2)
   18134:	1009883a 	mov	r4,r2
   18138:	e0bffc17 	ldw	r2,-16(fp)
   1813c:	1885883a 	add	r2,r3,r2
   18140:	10801704 	addi	r2,r2,92
   18144:	11000005 	stb	r4,0(r2)
   18148:	e0bffd17 	ldw	r2,-12(fp)
   1814c:	10800044 	addi	r2,r2,1
   18150:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   18154:	e0fffc17 	ldw	r3,-16(fp)
   18158:	e0bff917 	ldw	r2,-28(fp)
   1815c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   18160:	e0bff817 	ldw	r2,-32(fp)
   18164:	1004c03a 	cmpne	r2,r2,zero
   18168:	103fbd1e 	bne	r2,zero,18060 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1816c:	0005303a 	rdctl	r2,status
   18170:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18174:	e0fff517 	ldw	r3,-44(fp)
   18178:	00bfff84 	movi	r2,-2
   1817c:	1884703a 	and	r2,r3,r2
   18180:	1001703a 	wrctl	status,r2
  
  return context;
   18184:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   18188:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1818c:	e0bffc17 	ldw	r2,-16(fp)
   18190:	10800117 	ldw	r2,4(r2)
   18194:	10c11014 	ori	r3,r2,1088
   18198:	e0bffc17 	ldw	r2,-16(fp)
   1819c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   181a0:	e0bffc17 	ldw	r2,-16(fp)
   181a4:	10800017 	ldw	r2,0(r2)
   181a8:	11000304 	addi	r4,r2,12
   181ac:	e0bffc17 	ldw	r2,-16(fp)
   181b0:	10800117 	ldw	r2,4(r2)
   181b4:	1007883a 	mov	r3,r2
   181b8:	2005883a 	mov	r2,r4
   181bc:	10c00035 	stwio	r3,0(r2)
   181c0:	e0bffb17 	ldw	r2,-20(fp)
   181c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181c8:	e0bff417 	ldw	r2,-48(fp)
   181cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   181d0:	e0fffe17 	ldw	r3,-8(fp)
   181d4:	e0bff817 	ldw	r2,-32(fp)
   181d8:	1885c83a 	sub	r2,r3,r2
}
   181dc:	e037883a 	mov	sp,fp
   181e0:	dfc00117 	ldw	ra,4(sp)
   181e4:	df000017 	ldw	fp,0(sp)
   181e8:	dec00204 	addi	sp,sp,8
   181ec:	f800283a 	ret

000181f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   181f0:	defffd04 	addi	sp,sp,-12
   181f4:	dfc00215 	stw	ra,8(sp)
   181f8:	df000115 	stw	fp,4(sp)
   181fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   18200:	00820034 	movhi	r2,2048
   18204:	108a4604 	addi	r2,r2,10520
   18208:	10800017 	ldw	r2,0(r2)
   1820c:	1005003a 	cmpeq	r2,r2,zero
   18210:	1000061e 	bne	r2,zero,1822c <alt_get_errno+0x3c>
   18214:	00820034 	movhi	r2,2048
   18218:	108a4604 	addi	r2,r2,10520
   1821c:	10800017 	ldw	r2,0(r2)
   18220:	103ee83a 	callr	r2
   18224:	e0bfff15 	stw	r2,-4(fp)
   18228:	00000306 	br	18238 <alt_get_errno+0x48>
   1822c:	00820034 	movhi	r2,2048
   18230:	108a8704 	addi	r2,r2,10780
   18234:	e0bfff15 	stw	r2,-4(fp)
   18238:	e0bfff17 	ldw	r2,-4(fp)
}
   1823c:	e037883a 	mov	sp,fp
   18240:	dfc00117 	ldw	ra,4(sp)
   18244:	df000017 	ldw	fp,0(sp)
   18248:	dec00204 	addi	sp,sp,8
   1824c:	f800283a 	ret

00018250 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   18250:	defffd04 	addi	sp,sp,-12
   18254:	df000215 	stw	fp,8(sp)
   18258:	df000204 	addi	fp,sp,8
   1825c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   18260:	e0bfff17 	ldw	r2,-4(fp)
   18264:	1080400c 	andi	r2,r2,256
   18268:	1004d23a 	srli	r2,r2,8
   1826c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   18270:	e0bffe03 	ldbu	r2,-8(fp)
}
   18274:	e037883a 	mov	sp,fp
   18278:	df000017 	ldw	fp,0(sp)
   1827c:	dec00104 	addi	sp,sp,4
   18280:	f800283a 	ret

00018284 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   18284:	defffd04 	addi	sp,sp,-12
   18288:	df000215 	stw	fp,8(sp)
   1828c:	df000204 	addi	fp,sp,8
   18290:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   18294:	e0bfff17 	ldw	r2,-4(fp)
   18298:	1080004c 	andi	r2,r2,1
   1829c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   182a0:	e0bffe03 	ldbu	r2,-8(fp)
}
   182a4:	e037883a 	mov	sp,fp
   182a8:	df000017 	ldw	fp,0(sp)
   182ac:	dec00104 	addi	sp,sp,4
   182b0:	f800283a 	ret

000182b4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   182b4:	defffd04 	addi	sp,sp,-12
   182b8:	df000215 	stw	fp,8(sp)
   182bc:	df000204 	addi	fp,sp,8
   182c0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   182c4:	e0bfff17 	ldw	r2,-4(fp)
   182c8:	1081000c 	andi	r2,r2,1024
   182cc:	1004d2ba 	srli	r2,r2,10
   182d0:	e0bffe05 	stb	r2,-8(fp)
	return re;
   182d4:	e0bffe03 	ldbu	r2,-8(fp)
}
   182d8:	e037883a 	mov	sp,fp
   182dc:	df000017 	ldw	fp,0(sp)
   182e0:	dec00104 	addi	sp,sp,4
   182e4:	f800283a 	ret

000182e8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   182e8:	defffd04 	addi	sp,sp,-12
   182ec:	df000215 	stw	fp,8(sp)
   182f0:	df000204 	addi	fp,sp,8
   182f4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   182f8:	e0bfff17 	ldw	r2,-4(fp)
   182fc:	10bfffec 	andhi	r2,r2,65535
   18300:	1004d43a 	srli	r2,r2,16
   18304:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   18308:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1830c:	e037883a 	mov	sp,fp
   18310:	df000017 	ldw	fp,0(sp)
   18314:	dec00104 	addi	sp,sp,4
   18318:	f800283a 	ret

0001831c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1831c:	defffd04 	addi	sp,sp,-12
   18320:	df000215 	stw	fp,8(sp)
   18324:	df000204 	addi	fp,sp,8
   18328:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1832c:	e0bfff17 	ldw	r2,-4(fp)
   18330:	10a0000c 	andi	r2,r2,32768
   18334:	1004d3fa 	srli	r2,r2,15
   18338:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1833c:	e0bffe03 	ldbu	r2,-8(fp)
}
   18340:	e037883a 	mov	sp,fp
   18344:	df000017 	ldw	fp,0(sp)
   18348:	dec00104 	addi	sp,sp,4
   1834c:	f800283a 	ret

00018350 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   18350:	defffd04 	addi	sp,sp,-12
   18354:	df000215 	stw	fp,8(sp)
   18358:	df000204 	addi	fp,sp,8
   1835c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   18360:	e0bfff17 	ldw	r2,-4(fp)
   18364:	e0bffe05 	stb	r2,-8(fp)
	return data;
   18368:	e0bffe03 	ldbu	r2,-8(fp)
}
   1836c:	e037883a 	mov	sp,fp
   18370:	df000017 	ldw	fp,0(sp)
   18374:	dec00104 	addi	sp,sp,4
   18378:	f800283a 	ret

0001837c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1837c:	defffb04 	addi	sp,sp,-20
   18380:	dfc00415 	stw	ra,16(sp)
   18384:	df000315 	stw	fp,12(sp)
   18388:	df000304 	addi	fp,sp,12
   1838c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   18390:	e13fff17 	ldw	r4,-4(fp)
   18394:	01403fc4 	movi	r5,255
   18398:	00185dc0 	call	185dc <alt_up_ps2_write_data_byte_with_ack>
   1839c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   183a0:	e0bffd17 	ldw	r2,-12(fp)
   183a4:	1004c03a 	cmpne	r2,r2,zero
   183a8:	1000221e 	bne	r2,zero,18434 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   183ac:	e17ffe04 	addi	r5,fp,-8
   183b0:	e13fff17 	ldw	r4,-4(fp)
   183b4:	00186480 	call	18648 <alt_up_ps2_read_data_byte_timeout>
   183b8:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   183bc:	e0bffd17 	ldw	r2,-12(fp)
   183c0:	1004c03a 	cmpne	r2,r2,zero
   183c4:	10001b1e 	bne	r2,zero,18434 <alt_up_ps2_init+0xb8>
   183c8:	e0bffe03 	ldbu	r2,-8(fp)
   183cc:	10803fcc 	andi	r2,r2,255
   183d0:	10802a98 	cmpnei	r2,r2,170
   183d4:	1000171e 	bne	r2,zero,18434 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   183d8:	e17ffe04 	addi	r5,fp,-8
   183dc:	e13fff17 	ldw	r4,-4(fp)
   183e0:	00186480 	call	18648 <alt_up_ps2_read_data_byte_timeout>
   183e4:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   183e8:	e0bffd17 	ldw	r2,-12(fp)
   183ec:	10bfe318 	cmpnei	r2,r2,-116
   183f0:	1000041e 	bne	r2,zero,18404 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   183f4:	e0ffff17 	ldw	r3,-4(fp)
   183f8:	00800044 	movi	r2,1
   183fc:	18800d15 	stw	r2,52(r3)
   18400:	00000c06 	br	18434 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
   18404:	e0bffd17 	ldw	r2,-12(fp)
   18408:	1004c03a 	cmpne	r2,r2,zero
   1840c:	1000091e 	bne	r2,zero,18434 <alt_up_ps2_init+0xb8>
   18410:	e0bffe03 	ldbu	r2,-8(fp)
   18414:	10803fcc 	andi	r2,r2,255
   18418:	1004c03a 	cmpne	r2,r2,zero
   1841c:	1000051e 	bne	r2,zero,18434 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   18420:	e0bfff17 	ldw	r2,-4(fp)
   18424:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   18428:	e13fff17 	ldw	r4,-4(fp)
   1842c:	01403d04 	movi	r5,244
   18430:	00184f40 	call	184f4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   18434:	e037883a 	mov	sp,fp
   18438:	dfc00117 	ldw	ra,4(sp)
   1843c:	df000017 	ldw	fp,0(sp)
   18440:	dec00204 	addi	sp,sp,8
   18444:	f800283a 	ret

00018448 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   18448:	defffd04 	addi	sp,sp,-12
   1844c:	df000215 	stw	fp,8(sp)
   18450:	df000204 	addi	fp,sp,8
   18454:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   18458:	e0bfff17 	ldw	r2,-4(fp)
   1845c:	10800a17 	ldw	r2,40(r2)
   18460:	10800104 	addi	r2,r2,4
   18464:	10800037 	ldwio	r2,0(r2)
   18468:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1846c:	e0bffe17 	ldw	r2,-8(fp)
   18470:	10800054 	ori	r2,r2,1
   18474:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   18478:	e0bfff17 	ldw	r2,-4(fp)
   1847c:	10800a17 	ldw	r2,40(r2)
   18480:	10800104 	addi	r2,r2,4
   18484:	e0fffe17 	ldw	r3,-8(fp)
   18488:	10c00035 	stwio	r3,0(r2)
}
   1848c:	e037883a 	mov	sp,fp
   18490:	df000017 	ldw	fp,0(sp)
   18494:	dec00104 	addi	sp,sp,4
   18498:	f800283a 	ret

0001849c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1849c:	defffd04 	addi	sp,sp,-12
   184a0:	df000215 	stw	fp,8(sp)
   184a4:	df000204 	addi	fp,sp,8
   184a8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   184ac:	e0bfff17 	ldw	r2,-4(fp)
   184b0:	10800a17 	ldw	r2,40(r2)
   184b4:	10800104 	addi	r2,r2,4
   184b8:	10800037 	ldwio	r2,0(r2)
   184bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   184c0:	e0fffe17 	ldw	r3,-8(fp)
   184c4:	00bfff84 	movi	r2,-2
   184c8:	1884703a 	and	r2,r3,r2
   184cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   184d0:	e0bfff17 	ldw	r2,-4(fp)
   184d4:	10800a17 	ldw	r2,40(r2)
   184d8:	10800104 	addi	r2,r2,4
   184dc:	e0fffe17 	ldw	r3,-8(fp)
   184e0:	10c00035 	stwio	r3,0(r2)
}
   184e4:	e037883a 	mov	sp,fp
   184e8:	df000017 	ldw	fp,0(sp)
   184ec:	dec00104 	addi	sp,sp,4
   184f0:	f800283a 	ret

000184f4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   184f4:	defffa04 	addi	sp,sp,-24
   184f8:	dfc00515 	stw	ra,20(sp)
   184fc:	df000415 	stw	fp,16(sp)
   18500:	df000404 	addi	fp,sp,16
   18504:	e13ffd15 	stw	r4,-12(fp)
   18508:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1850c:	e0bffd17 	ldw	r2,-12(fp)
   18510:	10800a17 	ldw	r2,40(r2)
   18514:	e0fffe03 	ldbu	r3,-8(fp)
   18518:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1851c:	e0bffd17 	ldw	r2,-12(fp)
   18520:	10800a17 	ldw	r2,40(r2)
   18524:	10800104 	addi	r2,r2,4
   18528:	10800037 	ldwio	r2,0(r2)
   1852c:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
   18530:	e13ffc17 	ldw	r4,-16(fp)
   18534:	00182b40 	call	182b4 <read_CE_bit>
   18538:	10803fcc 	andi	r2,r2,255
   1853c:	1005003a 	cmpeq	r2,r2,zero
   18540:	1000031e 	bne	r2,zero,18550 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   18544:	00bffec4 	movi	r2,-5
   18548:	e0bfff15 	stw	r2,-4(fp)
   1854c:	00000106 	br	18554 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   18550:	e03fff15 	stw	zero,-4(fp)
   18554:	e0bfff17 	ldw	r2,-4(fp)
}
   18558:	e037883a 	mov	sp,fp
   1855c:	dfc00117 	ldw	ra,4(sp)
   18560:	df000017 	ldw	fp,0(sp)
   18564:	dec00204 	addi	sp,sp,8
   18568:	f800283a 	ret

0001856c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1856c:	defffb04 	addi	sp,sp,-20
   18570:	dfc00415 	stw	ra,16(sp)
   18574:	df000315 	stw	fp,12(sp)
   18578:	df000304 	addi	fp,sp,12
   1857c:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
   18580:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
   18584:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   18588:	e17ffd44 	addi	r5,fp,-11
   1858c:	e13ffe17 	ldw	r4,-8(fp)
   18590:	00186480 	call	18648 <alt_up_ps2_read_data_byte_timeout>
   18594:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
   18598:	e0bffd03 	ldbu	r2,-12(fp)
   1859c:	1004c03a 	cmpne	r2,r2,zero
   185a0:	1000061e 	bne	r2,zero,185bc <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   185a4:	e0bffd43 	ldbu	r2,-11(fp)
   185a8:	10803fcc 	andi	r2,r2,255
   185ac:	10803e98 	cmpnei	r2,r2,250
   185b0:	103ff51e 	bne	r2,zero,18588 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   185b4:	e03fff15 	stw	zero,-4(fp)
   185b8:	00000206 	br	185c4 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
   185bc:	e0bffd03 	ldbu	r2,-12(fp)
   185c0:	e0bfff15 	stw	r2,-4(fp)
   185c4:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   185c8:	e037883a 	mov	sp,fp
   185cc:	dfc00117 	ldw	ra,4(sp)
   185d0:	df000017 	ldw	fp,0(sp)
   185d4:	dec00204 	addi	sp,sp,8
   185d8:	f800283a 	ret

000185dc <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   185dc:	defff904 	addi	sp,sp,-28
   185e0:	dfc00615 	stw	ra,24(sp)
   185e4:	df000515 	stw	fp,20(sp)
   185e8:	df000504 	addi	fp,sp,20
   185ec:	e13ffd15 	stw	r4,-12(fp)
   185f0:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   185f4:	e17ffe03 	ldbu	r5,-8(fp)
   185f8:	e13ffd17 	ldw	r4,-12(fp)
   185fc:	00184f40 	call	184f4 <alt_up_ps2_write_data_byte>
   18600:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   18604:	e0bffc17 	ldw	r2,-16(fp)
   18608:	1005003a 	cmpeq	r2,r2,zero
   1860c:	1000031e 	bne	r2,zero,1861c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   18610:	e0bffc17 	ldw	r2,-16(fp)
   18614:	e0bfff15 	stw	r2,-4(fp)
   18618:	00000506 	br	18630 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1861c:	e13ffd17 	ldw	r4,-12(fp)
   18620:	001856c0 	call	1856c <alt_up_ps2_wait_for_ack>
   18624:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
   18628:	e0bffb17 	ldw	r2,-20(fp)
   1862c:	e0bfff15 	stw	r2,-4(fp)
   18630:	e0bfff17 	ldw	r2,-4(fp)
}
   18634:	e037883a 	mov	sp,fp
   18638:	dfc00117 	ldw	ra,4(sp)
   1863c:	df000017 	ldw	fp,0(sp)
   18640:	dec00204 	addi	sp,sp,8
   18644:	f800283a 	ret

00018648 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   18648:	defff904 	addi	sp,sp,-28
   1864c:	dfc00615 	stw	ra,24(sp)
   18650:	df000515 	stw	fp,20(sp)
   18654:	df000504 	addi	fp,sp,20
   18658:	e13ffd15 	stw	r4,-12(fp)
   1865c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
   18660:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
   18664:	e03ffb15 	stw	zero,-20(fp)
   18668:	00000006 	br	1866c <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
   1866c:	e0bffb17 	ldw	r2,-20(fp)
   18670:	10800044 	addi	r2,r2,1
   18674:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18678:	e0bffd17 	ldw	r2,-12(fp)
   1867c:	10800a17 	ldw	r2,40(r2)
   18680:	10800037 	ldwio	r2,0(r2)
   18684:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
   18688:	e13ffc17 	ldw	r4,-16(fp)
   1868c:	001831c0 	call	1831c <read_data_valid>
   18690:	10803fcc 	andi	r2,r2,255
   18694:	1005003a 	cmpeq	r2,r2,zero
   18698:	1000071e 	bne	r2,zero,186b8 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
   1869c:	e13ffc17 	ldw	r4,-16(fp)
   186a0:	00183500 	call	18350 <read_data_byte>
   186a4:	1007883a 	mov	r3,r2
   186a8:	e0bffe17 	ldw	r2,-8(fp)
   186ac:	10c00005 	stb	r3,0(r2)
			return 0;
   186b0:	e03fff15 	stw	zero,-4(fp)
   186b4:	00000a06 	br	186e0 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   186b8:	e0bffd17 	ldw	r2,-12(fp)
   186bc:	10800c17 	ldw	r2,48(r2)
   186c0:	1005003a 	cmpeq	r2,r2,zero
   186c4:	103fe91e 	bne	r2,zero,1866c <alt_up_ps2_read_data_byte_timeout+0x24>
   186c8:	e0bffd17 	ldw	r2,-12(fp)
   186cc:	10c00c17 	ldw	r3,48(r2)
   186d0:	e0bffb17 	ldw	r2,-20(fp)
   186d4:	18bfe52e 	bgeu	r3,r2,1866c <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
   186d8:	00bfe304 	movi	r2,-116
   186dc:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
   186e0:	e0bfff17 	ldw	r2,-4(fp)
}
   186e4:	e037883a 	mov	sp,fp
   186e8:	dfc00117 	ldw	ra,4(sp)
   186ec:	df000017 	ldw	fp,0(sp)
   186f0:	dec00204 	addi	sp,sp,8
   186f4:	f800283a 	ret

000186f8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   186f8:	defffa04 	addi	sp,sp,-24
   186fc:	dfc00515 	stw	ra,20(sp)
   18700:	df000415 	stw	fp,16(sp)
   18704:	df000404 	addi	fp,sp,16
   18708:	e13ffd15 	stw	r4,-12(fp)
   1870c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
   18710:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18714:	e0bffd17 	ldw	r2,-12(fp)
   18718:	10800a17 	ldw	r2,40(r2)
   1871c:	10800037 	ldwio	r2,0(r2)
   18720:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
   18724:	e13ffc17 	ldw	r4,-16(fp)
   18728:	001831c0 	call	1831c <read_data_valid>
   1872c:	10803fcc 	andi	r2,r2,255
   18730:	1005003a 	cmpeq	r2,r2,zero
   18734:	1000071e 	bne	r2,zero,18754 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
   18738:	e13ffc17 	ldw	r4,-16(fp)
   1873c:	00183500 	call	18350 <read_data_byte>
   18740:	1007883a 	mov	r3,r2
   18744:	e0bffe17 	ldw	r2,-8(fp)
   18748:	10c00005 	stb	r3,0(r2)
		return 0;
   1874c:	e03fff15 	stw	zero,-4(fp)
   18750:	00000206 	br	1875c <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
   18754:	00bfffc4 	movi	r2,-1
   18758:	e0bfff15 	stw	r2,-4(fp)
   1875c:	e0bfff17 	ldw	r2,-4(fp)
}
   18760:	e037883a 	mov	sp,fp
   18764:	dfc00117 	ldw	ra,4(sp)
   18768:	df000017 	ldw	fp,0(sp)
   1876c:	dec00204 	addi	sp,sp,8
   18770:	f800283a 	ret

00018774 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   18774:	defffb04 	addi	sp,sp,-20
   18778:	dfc00415 	stw	ra,16(sp)
   1877c:	df000315 	stw	fp,12(sp)
   18780:	df000304 	addi	fp,sp,12
   18784:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   18788:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
   1878c:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18790:	e0bfff17 	ldw	r2,-4(fp)
   18794:	10800a17 	ldw	r2,40(r2)
   18798:	10800037 	ldwio	r2,0(r2)
   1879c:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   187a0:	e13ffd17 	ldw	r4,-12(fp)
   187a4:	00182e80 	call	182e8 <read_num_bytes_available>
   187a8:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
   187ac:	e0bffe0b 	ldhu	r2,-8(fp)
   187b0:	1004c03a 	cmpne	r2,r2,zero
   187b4:	103ff61e 	bne	r2,zero,18790 <alt_up_ps2_clear_fifo+0x1c>
}
   187b8:	e037883a 	mov	sp,fp
   187bc:	dfc00117 	ldw	ra,4(sp)
   187c0:	df000017 	ldw	fp,0(sp)
   187c4:	dec00204 	addi	sp,sp,8
   187c8:	f800283a 	ret

000187cc <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   187cc:	defff704 	addi	sp,sp,-36
   187d0:	dfc00815 	stw	ra,32(sp)
   187d4:	df000715 	stw	fp,28(sp)
   187d8:	df000704 	addi	fp,sp,28
   187dc:	e13ffc15 	stw	r4,-16(fp)
   187e0:	e17ffd15 	stw	r5,-12(fp)
   187e4:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   187e8:	e0bffc17 	ldw	r2,-16(fp)
   187ec:	10800017 	ldw	r2,0(r2)
   187f0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   187f4:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   187f8:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
   187fc:	e0fff917 	ldw	r3,-28(fp)
   18800:	e0bffe17 	ldw	r2,-8(fp)
   18804:	18bffd16 	blt	r3,r2,187fc <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
   18808:	e17ffd17 	ldw	r5,-12(fp)
   1880c:	e0bffd17 	ldw	r2,-12(fp)
   18810:	10800044 	addi	r2,r2,1
   18814:	e0bffd15 	stw	r2,-12(fp)
   18818:	e13ffb17 	ldw	r4,-20(fp)
   1881c:	00186480 	call	18648 <alt_up_ps2_read_data_byte_timeout>
   18820:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   18824:	e0bffa17 	ldw	r2,-24(fp)
   18828:	1005003a 	cmpeq	r2,r2,zero
   1882c:	1000031e 	bne	r2,zero,1883c <alt_up_ps2_read_fd+0x70>
			return count;
   18830:	e0bff917 	ldw	r2,-28(fp)
   18834:	e0bfff15 	stw	r2,-4(fp)
   18838:	00000506 	br	18850 <alt_up_ps2_read_fd+0x84>
		count++;
   1883c:	e0bff917 	ldw	r2,-28(fp)
   18840:	10800044 	addi	r2,r2,1
   18844:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
   18848:	e0bff917 	ldw	r2,-28(fp)
   1884c:	e0bfff15 	stw	r2,-4(fp)
   18850:	e0bfff17 	ldw	r2,-4(fp)
}
   18854:	e037883a 	mov	sp,fp
   18858:	dfc00117 	ldw	ra,4(sp)
   1885c:	df000017 	ldw	fp,0(sp)
   18860:	dec00204 	addi	sp,sp,8
   18864:	f800283a 	ret

00018868 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   18868:	defff704 	addi	sp,sp,-36
   1886c:	dfc00815 	stw	ra,32(sp)
   18870:	df000715 	stw	fp,28(sp)
   18874:	df000704 	addi	fp,sp,28
   18878:	e13ffc15 	stw	r4,-16(fp)
   1887c:	e17ffd15 	stw	r5,-12(fp)
   18880:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   18884:	e0bffc17 	ldw	r2,-16(fp)
   18888:	10800017 	ldw	r2,0(r2)
   1888c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   18890:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   18894:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
   18898:	00001206 	br	188e4 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1889c:	e0bffd17 	ldw	r2,-12(fp)
   188a0:	10800003 	ldbu	r2,0(r2)
   188a4:	11403fcc 	andi	r5,r2,255
   188a8:	e0bffd17 	ldw	r2,-12(fp)
   188ac:	10800044 	addi	r2,r2,1
   188b0:	e0bffd15 	stw	r2,-12(fp)
   188b4:	e13ffb17 	ldw	r4,-20(fp)
   188b8:	00184f40 	call	184f4 <alt_up_ps2_write_data_byte>
   188bc:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   188c0:	e0bffa17 	ldw	r2,-24(fp)
   188c4:	1005003a 	cmpeq	r2,r2,zero
   188c8:	1000031e 	bne	r2,zero,188d8 <alt_up_ps2_write_fd+0x70>
			return count;
   188cc:	e0bff917 	ldw	r2,-28(fp)
   188d0:	e0bfff15 	stw	r2,-4(fp)
   188d4:	00000806 	br	188f8 <alt_up_ps2_write_fd+0x90>
		count++;
   188d8:	e0bff917 	ldw	r2,-28(fp)
   188dc:	10800044 	addi	r2,r2,1
   188e0:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   188e4:	e0fff917 	ldw	r3,-28(fp)
   188e8:	e0bffe17 	ldw	r2,-8(fp)
   188ec:	18bfeb16 	blt	r3,r2,1889c <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   188f0:	e0bff917 	ldw	r2,-28(fp)
   188f4:	e0bfff15 	stw	r2,-4(fp)
   188f8:	e0bfff17 	ldw	r2,-4(fp)
}
   188fc:	e037883a 	mov	sp,fp
   18900:	dfc00117 	ldw	ra,4(sp)
   18904:	df000017 	ldw	fp,0(sp)
   18908:	dec00204 	addi	sp,sp,8
   1890c:	f800283a 	ret

00018910 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   18910:	defffc04 	addi	sp,sp,-16
   18914:	dfc00315 	stw	ra,12(sp)
   18918:	df000215 	stw	fp,8(sp)
   1891c:	df000204 	addi	fp,sp,8
   18920:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   18924:	e13fff17 	ldw	r4,-4(fp)
   18928:	01420034 	movhi	r5,2048
   1892c:	294a4304 	addi	r5,r5,10508
   18930:	001a5680 	call	1a568 <alt_find_dev>
   18934:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18938:	e0bffe17 	ldw	r2,-8(fp)
}
   1893c:	e037883a 	mov	sp,fp
   18940:	dfc00117 	ldw	ra,4(sp)
   18944:	df000017 	ldw	fp,0(sp)
   18948:	dec00204 	addi	sp,sp,8
   1894c:	f800283a 	ret

00018950 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   18950:	defffc04 	addi	sp,sp,-16
   18954:	dfc00315 	stw	ra,12(sp)
   18958:	df000215 	stw	fp,8(sp)
   1895c:	df000204 	addi	fp,sp,8
   18960:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   18964:	e0bfff17 	ldw	r2,-4(fp)
   18968:	10800217 	ldw	r2,8(r2)
   1896c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   18970:	00000c06 	br	189a4 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   18974:	e13ffe17 	ldw	r4,-8(fp)
   18978:	01420034 	movhi	r5,2048
   1897c:	29420c04 	addi	r5,r5,2096
   18980:	00116600 	call	11660 <strcmp>
   18984:	1004c03a 	cmpne	r2,r2,zero
   18988:	1000031e 	bne	r2,zero,18998 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
   1898c:	e0bffe17 	ldw	r2,-8(fp)
   18990:	10000005 	stb	zero,0(r2)
			break;
   18994:	00000a06 	br	189c0 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   18998:	e0bffe17 	ldw	r2,-8(fp)
   1899c:	10800044 	addi	r2,r2,1
   189a0:	e0bffe15 	stw	r2,-8(fp)
   189a4:	e0bffe17 	ldw	r2,-8(fp)
   189a8:	10800003 	ldbu	r2,0(r2)
   189ac:	10803fcc 	andi	r2,r2,255
   189b0:	1080201c 	xori	r2,r2,128
   189b4:	10bfe004 	addi	r2,r2,-128
   189b8:	1004c03a 	cmpne	r2,r2,zero
   189bc:	103fed1e 	bne	r2,zero,18974 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
   189c0:	e037883a 	mov	sp,fp
   189c4:	dfc00117 	ldw	ra,4(sp)
   189c8:	df000017 	ldw	fp,0(sp)
   189cc:	dec00204 	addi	sp,sp,8
   189d0:	f800283a 	ret

000189d4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   189d4:	defffc04 	addi	sp,sp,-16
   189d8:	dfc00315 	stw	ra,12(sp)
   189dc:	df000215 	stw	fp,8(sp)
   189e0:	df000204 	addi	fp,sp,8
   189e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   189e8:	e13fff17 	ldw	r4,-4(fp)
   189ec:	01420034 	movhi	r5,2048
   189f0:	294a4304 	addi	r5,r5,10508
   189f4:	001a5680 	call	1a568 <alt_find_dev>
   189f8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   189fc:	e0bffe17 	ldw	r2,-8(fp)
}
   18a00:	e037883a 	mov	sp,fp
   18a04:	dfc00117 	ldw	ra,4(sp)
   18a08:	df000017 	ldw	fp,0(sp)
   18a0c:	dec00204 	addi	sp,sp,8
   18a10:	f800283a 	ret

00018a14 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   18a14:	defff904 	addi	sp,sp,-28
   18a18:	df000615 	stw	fp,24(sp)
   18a1c:	df000604 	addi	fp,sp,24
   18a20:	e13ffb15 	stw	r4,-20(fp)
   18a24:	e1bffd15 	stw	r6,-12(fp)
   18a28:	e1fffe15 	stw	r7,-8(fp)
   18a2c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   18a30:	e0bffb17 	ldw	r2,-20(fp)
   18a34:	10c00c17 	ldw	r3,48(r2)
   18a38:	e0bffd17 	ldw	r2,-12(fp)
   18a3c:	10c0042e 	bgeu	r2,r3,18a50 <alt_up_char_buffer_draw+0x3c>
   18a40:	e0bffb17 	ldw	r2,-20(fp)
   18a44:	10c00d17 	ldw	r3,52(r2)
   18a48:	e0bffe17 	ldw	r2,-8(fp)
   18a4c:	10c00336 	bltu	r2,r3,18a5c <alt_up_char_buffer_draw+0x48>
		return -1;
   18a50:	00bfffc4 	movi	r2,-1
   18a54:	e0bfff15 	stw	r2,-4(fp)
   18a58:	00001d06 	br	18ad0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   18a5c:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   18a60:	e0bffb17 	ldw	r2,-20(fp)
   18a64:	10c00f17 	ldw	r3,60(r2)
   18a68:	e0bffd17 	ldw	r2,-12(fp)
   18a6c:	1886703a 	and	r3,r3,r2
   18a70:	e0bffb17 	ldw	r2,-20(fp)
   18a74:	10800e17 	ldw	r2,56(r2)
   18a78:	1886983a 	sll	r3,r3,r2
   18a7c:	e0bffa17 	ldw	r2,-24(fp)
   18a80:	10c4b03a 	or	r2,r2,r3
   18a84:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   18a88:	e0bffb17 	ldw	r2,-20(fp)
   18a8c:	10c01117 	ldw	r3,68(r2)
   18a90:	e0bffe17 	ldw	r2,-8(fp)
   18a94:	1886703a 	and	r3,r3,r2
   18a98:	e0bffb17 	ldw	r2,-20(fp)
   18a9c:	10801017 	ldw	r2,64(r2)
   18aa0:	1886983a 	sll	r3,r3,r2
   18aa4:	e0bffa17 	ldw	r2,-24(fp)
   18aa8:	10c4b03a 	or	r2,r2,r3
   18aac:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   18ab0:	e0bffb17 	ldw	r2,-20(fp)
   18ab4:	10800b17 	ldw	r2,44(r2)
   18ab8:	1007883a 	mov	r3,r2
   18abc:	e0bffa17 	ldw	r2,-24(fp)
   18ac0:	1885883a 	add	r2,r3,r2
   18ac4:	e0fffc03 	ldbu	r3,-16(fp)
   18ac8:	10c00025 	stbio	r3,0(r2)

	return 0;
   18acc:	e03fff15 	stw	zero,-4(fp)
   18ad0:	e0bfff17 	ldw	r2,-4(fp)
}
   18ad4:	e037883a 	mov	sp,fp
   18ad8:	df000017 	ldw	fp,0(sp)
   18adc:	dec00104 	addi	sp,sp,4
   18ae0:	f800283a 	ret

00018ae4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   18ae4:	defff904 	addi	sp,sp,-28
   18ae8:	df000615 	stw	fp,24(sp)
   18aec:	df000604 	addi	fp,sp,24
   18af0:	e13ffb15 	stw	r4,-20(fp)
   18af4:	e17ffc15 	stw	r5,-16(fp)
   18af8:	e1bffd15 	stw	r6,-12(fp)
   18afc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   18b00:	e0bffb17 	ldw	r2,-20(fp)
   18b04:	10c00c17 	ldw	r3,48(r2)
   18b08:	e0bffd17 	ldw	r2,-12(fp)
   18b0c:	10c0042e 	bgeu	r2,r3,18b20 <alt_up_char_buffer_string+0x3c>
   18b10:	e0bffb17 	ldw	r2,-20(fp)
   18b14:	10c00d17 	ldw	r3,52(r2)
   18b18:	e0bffe17 	ldw	r2,-8(fp)
   18b1c:	10c00336 	bltu	r2,r3,18b2c <alt_up_char_buffer_string+0x48>
		return -1;
   18b20:	00bfffc4 	movi	r2,-1
   18b24:	e0bfff15 	stw	r2,-4(fp)
   18b28:	00002e06 	br	18be4 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
   18b2c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   18b30:	e0bffb17 	ldw	r2,-20(fp)
   18b34:	10801017 	ldw	r2,64(r2)
   18b38:	1007883a 	mov	r3,r2
   18b3c:	e0bffe17 	ldw	r2,-8(fp)
   18b40:	10c6983a 	sll	r3,r2,r3
   18b44:	e0bffd17 	ldw	r2,-12(fp)
   18b48:	1885883a 	add	r2,r3,r2
   18b4c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
   18b50:	00001c06 	br	18bc4 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   18b54:	e0bffb17 	ldw	r2,-20(fp)
   18b58:	10800b17 	ldw	r2,44(r2)
   18b5c:	1007883a 	mov	r3,r2
   18b60:	e0bffa17 	ldw	r2,-24(fp)
   18b64:	1889883a 	add	r4,r3,r2
   18b68:	e0bffc17 	ldw	r2,-16(fp)
   18b6c:	10800003 	ldbu	r2,0(r2)
   18b70:	10c03fcc 	andi	r3,r2,255
   18b74:	18c0201c 	xori	r3,r3,128
   18b78:	18ffe004 	addi	r3,r3,-128
   18b7c:	2005883a 	mov	r2,r4
   18b80:	10c00025 	stbio	r3,0(r2)
		++ptr;
   18b84:	e0bffc17 	ldw	r2,-16(fp)
   18b88:	10800044 	addi	r2,r2,1
   18b8c:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
   18b90:	e0bffd17 	ldw	r2,-12(fp)
   18b94:	10800044 	addi	r2,r2,1
   18b98:	e0bffd15 	stw	r2,-12(fp)
   18b9c:	e0bffb17 	ldw	r2,-20(fp)
   18ba0:	10c00c17 	ldw	r3,48(r2)
   18ba4:	e0bffd17 	ldw	r2,-12(fp)
   18ba8:	10c00336 	bltu	r2,r3,18bb8 <alt_up_char_buffer_string+0xd4>
			return -1;
   18bac:	00bfffc4 	movi	r2,-1
   18bb0:	e0bfff15 	stw	r2,-4(fp)
   18bb4:	00000b06 	br	18be4 <alt_up_char_buffer_string+0x100>
		++offset;
   18bb8:	e0bffa17 	ldw	r2,-24(fp)
   18bbc:	10800044 	addi	r2,r2,1
   18bc0:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   18bc4:	e0bffc17 	ldw	r2,-16(fp)
   18bc8:	10800003 	ldbu	r2,0(r2)
   18bcc:	10803fcc 	andi	r2,r2,255
   18bd0:	1080201c 	xori	r2,r2,128
   18bd4:	10bfe004 	addi	r2,r2,-128
   18bd8:	1004c03a 	cmpne	r2,r2,zero
   18bdc:	103fdd1e 	bne	r2,zero,18b54 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   18be0:	e03fff15 	stw	zero,-4(fp)
   18be4:	e0bfff17 	ldw	r2,-4(fp)
}
   18be8:	e037883a 	mov	sp,fp
   18bec:	df000017 	ldw	fp,0(sp)
   18bf0:	dec00104 	addi	sp,sp,4
   18bf4:	f800283a 	ret

00018bf8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   18bf8:	defffe04 	addi	sp,sp,-8
   18bfc:	df000115 	stw	fp,4(sp)
   18c00:	df000104 	addi	fp,sp,4
   18c04:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   18c08:	e0bfff17 	ldw	r2,-4(fp)
   18c0c:	10800a17 	ldw	r2,40(r2)
   18c10:	10800084 	addi	r2,r2,2
   18c14:	1007883a 	mov	r3,r2
   18c18:	00800044 	movi	r2,1
   18c1c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   18c20:	e0bfff17 	ldw	r2,-4(fp)
   18c24:	10800a17 	ldw	r2,40(r2)
   18c28:	10800084 	addi	r2,r2,2
   18c2c:	10800023 	ldbuio	r2,0(r2)
   18c30:	1080004c 	andi	r2,r2,1
   18c34:	10803fcc 	andi	r2,r2,255
   18c38:	1004c03a 	cmpne	r2,r2,zero
   18c3c:	103ff81e 	bne	r2,zero,18c20 <alt_up_char_buffer_clear+0x28>
	return 0;
   18c40:	0005883a 	mov	r2,zero
}
   18c44:	e037883a 	mov	sp,fp
   18c48:	df000017 	ldw	fp,0(sp)
   18c4c:	dec00104 	addi	sp,sp,4
   18c50:	f800283a 	ret

00018c54 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   18c54:	defffc04 	addi	sp,sp,-16
   18c58:	dfc00315 	stw	ra,12(sp)
   18c5c:	df000215 	stw	fp,8(sp)
   18c60:	df000204 	addi	fp,sp,8
   18c64:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   18c68:	e13fff17 	ldw	r4,-4(fp)
   18c6c:	01420034 	movhi	r5,2048
   18c70:	294a4304 	addi	r5,r5,10508
   18c74:	001a5680 	call	1a568 <alt_find_dev>
   18c78:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18c7c:	e0bffe17 	ldw	r2,-8(fp)
}
   18c80:	e037883a 	mov	sp,fp
   18c84:	dfc00117 	ldw	ra,4(sp)
   18c88:	df000017 	ldw	fp,0(sp)
   18c8c:	dec00204 	addi	sp,sp,8
   18c90:	f800283a 	ret

00018c94 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   18c94:	defff904 	addi	sp,sp,-28
   18c98:	df000615 	stw	fp,24(sp)
   18c9c:	df000604 	addi	fp,sp,24
   18ca0:	e13ffb15 	stw	r4,-20(fp)
   18ca4:	e17ffc15 	stw	r5,-16(fp)
   18ca8:	e1bffd15 	stw	r6,-12(fp)
   18cac:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   18cb0:	e0bffb17 	ldw	r2,-20(fp)
   18cb4:	10c00f17 	ldw	r3,60(r2)
   18cb8:	e0bffd17 	ldw	r2,-12(fp)
   18cbc:	10c0042e 	bgeu	r2,r3,18cd0 <alt_up_pixel_buffer_dma_draw+0x3c>
   18cc0:	e0bffb17 	ldw	r2,-20(fp)
   18cc4:	10c01017 	ldw	r3,64(r2)
   18cc8:	e0bffe17 	ldw	r2,-8(fp)
   18ccc:	10c00336 	bltu	r2,r3,18cdc <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
   18cd0:	00bfffc4 	movi	r2,-1
   18cd4:	e0bfff15 	stw	r2,-4(fp)
   18cd8:	00005106 	br	18e20 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
   18cdc:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   18ce0:	e0bffb17 	ldw	r2,-20(fp)
   18ce4:	10800d17 	ldw	r2,52(r2)
   18ce8:	1004c03a 	cmpne	r2,r2,zero
   18cec:	1000151e 	bne	r2,zero,18d44 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   18cf0:	e0bffb17 	ldw	r2,-20(fp)
   18cf4:	10c01217 	ldw	r3,72(r2)
   18cf8:	e0bffd17 	ldw	r2,-12(fp)
   18cfc:	1886703a 	and	r3,r3,r2
   18d00:	e0bffb17 	ldw	r2,-20(fp)
   18d04:	10801117 	ldw	r2,68(r2)
   18d08:	1886983a 	sll	r3,r3,r2
   18d0c:	e0bffa17 	ldw	r2,-24(fp)
   18d10:	10c4b03a 	or	r2,r2,r3
   18d14:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   18d18:	e0bffb17 	ldw	r2,-20(fp)
   18d1c:	10c01417 	ldw	r3,80(r2)
   18d20:	e0bffe17 	ldw	r2,-8(fp)
   18d24:	1886703a 	and	r3,r3,r2
   18d28:	e0bffb17 	ldw	r2,-20(fp)
   18d2c:	10801317 	ldw	r2,76(r2)
   18d30:	1886983a 	sll	r3,r3,r2
   18d34:	e0bffa17 	ldw	r2,-24(fp)
   18d38:	10c4b03a 	or	r2,r2,r3
   18d3c:	e0bffa15 	stw	r2,-24(fp)
   18d40:	00001706 	br	18da0 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   18d44:	e0bffb17 	ldw	r2,-20(fp)
   18d48:	10c01217 	ldw	r3,72(r2)
   18d4c:	e0bffd17 	ldw	r2,-12(fp)
   18d50:	1886703a 	and	r3,r3,r2
   18d54:	e0bffb17 	ldw	r2,-20(fp)
   18d58:	10801117 	ldw	r2,68(r2)
   18d5c:	1886983a 	sll	r3,r3,r2
   18d60:	e0bffa17 	ldw	r2,-24(fp)
   18d64:	10c5883a 	add	r2,r2,r3
   18d68:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   18d6c:	e0bffb17 	ldw	r2,-20(fp)
   18d70:	10c01417 	ldw	r3,80(r2)
   18d74:	e0bffe17 	ldw	r2,-8(fp)
   18d78:	1886703a 	and	r3,r3,r2
   18d7c:	e0bffb17 	ldw	r2,-20(fp)
   18d80:	10800f17 	ldw	r2,60(r2)
   18d84:	1887383a 	mul	r3,r3,r2
   18d88:	e0bffb17 	ldw	r2,-20(fp)
   18d8c:	10801117 	ldw	r2,68(r2)
   18d90:	1886983a 	sll	r3,r3,r2
   18d94:	e0bffa17 	ldw	r2,-24(fp)
   18d98:	10c5883a 	add	r2,r2,r3
   18d9c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   18da0:	e0bffb17 	ldw	r2,-20(fp)
   18da4:	10800e17 	ldw	r2,56(r2)
   18da8:	10800058 	cmpnei	r2,r2,1
   18dac:	1000081e 	bne	r2,zero,18dd0 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   18db0:	e0bffb17 	ldw	r2,-20(fp)
   18db4:	10800c17 	ldw	r2,48(r2)
   18db8:	1007883a 	mov	r3,r2
   18dbc:	e0bffa17 	ldw	r2,-24(fp)
   18dc0:	1885883a 	add	r2,r3,r2
   18dc4:	e0fffc17 	ldw	r3,-16(fp)
   18dc8:	10c00025 	stbio	r3,0(r2)
   18dcc:	00001306 	br	18e1c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   18dd0:	e0bffb17 	ldw	r2,-20(fp)
   18dd4:	10800e17 	ldw	r2,56(r2)
   18dd8:	10800098 	cmpnei	r2,r2,2
   18ddc:	1000081e 	bne	r2,zero,18e00 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   18de0:	e0bffb17 	ldw	r2,-20(fp)
   18de4:	10800c17 	ldw	r2,48(r2)
   18de8:	1007883a 	mov	r3,r2
   18dec:	e0bffa17 	ldw	r2,-24(fp)
   18df0:	1885883a 	add	r2,r3,r2
   18df4:	e0fffc17 	ldw	r3,-16(fp)
   18df8:	10c0002d 	sthio	r3,0(r2)
   18dfc:	00000706 	br	18e1c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   18e00:	e0bffb17 	ldw	r2,-20(fp)
   18e04:	10800c17 	ldw	r2,48(r2)
   18e08:	1007883a 	mov	r3,r2
   18e0c:	e0bffa17 	ldw	r2,-24(fp)
   18e10:	1885883a 	add	r2,r3,r2
   18e14:	e0fffc17 	ldw	r3,-16(fp)
   18e18:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
   18e1c:	e03fff15 	stw	zero,-4(fp)
   18e20:	e0bfff17 	ldw	r2,-4(fp)
}
   18e24:	e037883a 	mov	sp,fp
   18e28:	df000017 	ldw	fp,0(sp)
   18e2c:	dec00104 	addi	sp,sp,4
   18e30:	f800283a 	ret

00018e34 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   18e34:	defffd04 	addi	sp,sp,-12
   18e38:	df000215 	stw	fp,8(sp)
   18e3c:	df000204 	addi	fp,sp,8
   18e40:	e13ffe15 	stw	r4,-8(fp)
   18e44:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   18e48:	e0bffe17 	ldw	r2,-8(fp)
   18e4c:	10800a17 	ldw	r2,40(r2)
   18e50:	10800104 	addi	r2,r2,4
   18e54:	e0ffff17 	ldw	r3,-4(fp)
   18e58:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   18e5c:	e0bffe17 	ldw	r2,-8(fp)
   18e60:	10800a17 	ldw	r2,40(r2)
   18e64:	10800104 	addi	r2,r2,4
   18e68:	10800037 	ldwio	r2,0(r2)
   18e6c:	1007883a 	mov	r3,r2
   18e70:	e0bffe17 	ldw	r2,-8(fp)
   18e74:	10c00c15 	stw	r3,48(r2)
	return 0;
   18e78:	0005883a 	mov	r2,zero
}
   18e7c:	e037883a 	mov	sp,fp
   18e80:	df000017 	ldw	fp,0(sp)
   18e84:	dec00104 	addi	sp,sp,4
   18e88:	f800283a 	ret

00018e8c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   18e8c:	defffe04 	addi	sp,sp,-8
   18e90:	df000115 	stw	fp,4(sp)
   18e94:	df000104 	addi	fp,sp,4
   18e98:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   18e9c:	e0bfff17 	ldw	r2,-4(fp)
   18ea0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   18ea4:	e0bfff17 	ldw	r2,-4(fp)
   18ea8:	10800a17 	ldw	r2,40(r2)
   18eac:	1007883a 	mov	r3,r2
   18eb0:	00800044 	movi	r2,1
   18eb4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   18eb8:	e0bfff17 	ldw	r2,-4(fp)
   18ebc:	10c00b17 	ldw	r3,44(r2)
   18ec0:	e0bfff17 	ldw	r2,-4(fp)
   18ec4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   18ec8:	e0bfff17 	ldw	r2,-4(fp)
   18ecc:	11000b15 	stw	r4,44(r2)
	return 0;
   18ed0:	0005883a 	mov	r2,zero
}
   18ed4:	e037883a 	mov	sp,fp
   18ed8:	df000017 	ldw	fp,0(sp)
   18edc:	dec00104 	addi	sp,sp,4
   18ee0:	f800283a 	ret

00018ee4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   18ee4:	defffe04 	addi	sp,sp,-8
   18ee8:	df000115 	stw	fp,4(sp)
   18eec:	df000104 	addi	fp,sp,4
   18ef0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   18ef4:	e0bfff17 	ldw	r2,-4(fp)
   18ef8:	10800a17 	ldw	r2,40(r2)
   18efc:	10800304 	addi	r2,r2,12
   18f00:	10800037 	ldwio	r2,0(r2)
   18f04:	1080004c 	andi	r2,r2,1
}
   18f08:	e037883a 	mov	sp,fp
   18f0c:	df000017 	ldw	fp,0(sp)
   18f10:	dec00104 	addi	sp,sp,4
   18f14:	f800283a 	ret

00018f18 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   18f18:	defff604 	addi	sp,sp,-40
   18f1c:	df000915 	stw	fp,36(sp)
   18f20:	df000904 	addi	fp,sp,36
   18f24:	e13ff715 	stw	r4,-36(fp)
   18f28:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   18f2c:	e0bff817 	ldw	r2,-32(fp)
   18f30:	10800058 	cmpnei	r2,r2,1
   18f34:	1000041e 	bne	r2,zero,18f48 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
   18f38:	e0bff717 	ldw	r2,-36(fp)
   18f3c:	10800c17 	ldw	r2,48(r2)
   18f40:	e0bfff15 	stw	r2,-4(fp)
   18f44:	00000306 	br	18f54 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
   18f48:	e0bff717 	ldw	r2,-36(fp)
   18f4c:	10800b17 	ldw	r2,44(r2)
   18f50:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
   18f54:	e0bff717 	ldw	r2,-36(fp)
   18f58:	10800f17 	ldw	r2,60(r2)
   18f5c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   18f60:	e0bff717 	ldw	r2,-36(fp)
   18f64:	10800e17 	ldw	r2,56(r2)
   18f68:	10800098 	cmpnei	r2,r2,2
   18f6c:	1000051e 	bne	r2,zero,18f84 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
   18f70:	e0fffe17 	ldw	r3,-8(fp)
   18f74:	e0fffe17 	ldw	r3,-8(fp)
   18f78:	18c5883a 	add	r2,r3,r3
   18f7c:	e0bffe15 	stw	r2,-8(fp)
   18f80:	00000506 	br	18f98 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
   18f84:	e13ffe17 	ldw	r4,-8(fp)
   18f88:	e13ffe17 	ldw	r4,-8(fp)
   18f8c:	2105883a 	add	r2,r4,r4
   18f90:	1085883a 	add	r2,r2,r2
   18f94:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
   18f98:	e0bff717 	ldw	r2,-36(fp)
   18f9c:	10801017 	ldw	r2,64(r2)
   18fa0:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   18fa4:	e0bff717 	ldw	r2,-36(fp)
   18fa8:	10800d17 	ldw	r2,52(r2)
   18fac:	1004c03a 	cmpne	r2,r2,zero
   18fb0:	10001e1e 	bne	r2,zero,1902c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   18fb4:	e0bff717 	ldw	r2,-36(fp)
   18fb8:	10801317 	ldw	r2,76(r2)
   18fbc:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
   18fc0:	e03ffb15 	stw	zero,-20(fp)
   18fc4:	00001506 	br	1901c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
   18fc8:	e03ffc15 	stw	zero,-16(fp)
   18fcc:	00000706 	br	18fec <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
   18fd0:	e0ffff17 	ldw	r3,-4(fp)
   18fd4:	e0bffc17 	ldw	r2,-16(fp)
   18fd8:	1885883a 	add	r2,r3,r2
   18fdc:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   18fe0:	e0bffc17 	ldw	r2,-16(fp)
   18fe4:	10800104 	addi	r2,r2,4
   18fe8:	e0bffc15 	stw	r2,-16(fp)
   18fec:	e0fffc17 	ldw	r3,-16(fp)
   18ff0:	e13ffe17 	ldw	r4,-8(fp)
   18ff4:	193ff636 	bltu	r3,r4,18fd0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   18ff8:	e0fffa17 	ldw	r3,-24(fp)
   18ffc:	00800044 	movi	r2,1
   19000:	10c4983a 	sll	r2,r2,r3
   19004:	e0ffff17 	ldw	r3,-4(fp)
   19008:	1887883a 	add	r3,r3,r2
   1900c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   19010:	e13ffb17 	ldw	r4,-20(fp)
   19014:	21000044 	addi	r4,r4,1
   19018:	e13ffb15 	stw	r4,-20(fp)
   1901c:	e0bffb17 	ldw	r2,-20(fp)
   19020:	e0fffd17 	ldw	r3,-12(fp)
   19024:	10ffe836 	bltu	r2,r3,18fc8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   19028:	00001006 	br	1906c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   1902c:	e13ffd17 	ldw	r4,-12(fp)
   19030:	e0bffe17 	ldw	r2,-8(fp)
   19034:	2089383a 	mul	r4,r4,r2
   19038:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
   1903c:	e03ff915 	stw	zero,-28(fp)
   19040:	00000706 	br	19060 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
   19044:	e0ffff17 	ldw	r3,-4(fp)
   19048:	e0bff917 	ldw	r2,-28(fp)
   1904c:	1885883a 	add	r2,r3,r2
   19050:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   19054:	e0fff917 	ldw	r3,-28(fp)
   19058:	18c00104 	addi	r3,r3,4
   1905c:	e0fff915 	stw	r3,-28(fp)
   19060:	e0bff917 	ldw	r2,-28(fp)
   19064:	e13ffd17 	ldw	r4,-12(fp)
   19068:	113ff636 	bltu	r2,r4,19044 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   1906c:	e037883a 	mov	sp,fp
   19070:	df000017 	ldw	fp,0(sp)
   19074:	dec00104 	addi	sp,sp,4
   19078:	f800283a 	ret

0001907c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   1907c:	deffed04 	addi	sp,sp,-76
   19080:	df001215 	stw	fp,72(sp)
   19084:	df001204 	addi	fp,sp,72
   19088:	e13fee15 	stw	r4,-72(fp)
   1908c:	e17fef15 	stw	r5,-68(fp)
   19090:	e1bff015 	stw	r6,-64(fp)
   19094:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   19098:	e0bfee17 	ldw	r2,-72(fp)
   1909c:	10800f17 	ldw	r2,60(r2)
   190a0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   190a4:	e0bfee17 	ldw	r2,-72(fp)
   190a8:	10801017 	ldw	r2,64(r2)
   190ac:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   190b0:	e0bfef17 	ldw	r2,-68(fp)
   190b4:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
   190b8:	e0fff117 	ldw	r3,-60(fp)
   190bc:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
   190c0:	e13ff017 	ldw	r4,-64(fp)
   190c4:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
   190c8:	e0800117 	ldw	r2,4(fp)
   190cc:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
   190d0:	e0c00217 	ldw	r3,8(fp)
   190d4:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   190d8:	e13ffa17 	ldw	r4,-24(fp)
   190dc:	e0bffb17 	ldw	r2,-20(fp)
   190e0:	2080062e 	bgeu	r4,r2,190fc <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
   190e4:	e0fffb17 	ldw	r3,-20(fp)
   190e8:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
   190ec:	e13ffa17 	ldw	r4,-24(fp)
   190f0:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
   190f4:	e0bffc17 	ldw	r2,-16(fp)
   190f8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
   190fc:	e0fff817 	ldw	r3,-32(fp)
   19100:	e13ff917 	ldw	r4,-28(fp)
   19104:	1900062e 	bgeu	r3,r4,19120 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
   19108:	e0bff917 	ldw	r2,-28(fp)
   1910c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
   19110:	e0fff817 	ldw	r3,-32(fp)
   19114:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
   19118:	e13ffc17 	ldw	r4,-16(fp)
   1911c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   19120:	e0bffb17 	ldw	r2,-20(fp)
   19124:	e0fffe17 	ldw	r3,-8(fp)
   19128:	10c10d2e 	bgeu	r2,r3,19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   1912c:	e13ff917 	ldw	r4,-28(fp)
   19130:	e0bffd17 	ldw	r2,-12(fp)
   19134:	20800136 	bltu	r4,r2,1913c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   19138:	00010906 	br	19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1913c:	e0fffa17 	ldw	r3,-24(fp)
   19140:	e13ffe17 	ldw	r4,-8(fp)
   19144:	19000336 	bltu	r3,r4,19154 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
   19148:	e0bffe17 	ldw	r2,-8(fp)
   1914c:	10bfffc4 	addi	r2,r2,-1
   19150:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   19154:	e0fff817 	ldw	r3,-32(fp)
   19158:	e13ffd17 	ldw	r4,-12(fp)
   1915c:	19000336 	bltu	r3,r4,1916c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
   19160:	e0bffd17 	ldw	r2,-12(fp)
   19164:	10bfffc4 	addi	r2,r2,-1
   19168:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1916c:	e0800317 	ldw	r2,12(fp)
   19170:	10800058 	cmpnei	r2,r2,1
   19174:	1000041e 	bne	r2,zero,19188 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
   19178:	e0bfee17 	ldw	r2,-72(fp)
   1917c:	10800c17 	ldw	r2,48(r2)
   19180:	e0bfff15 	stw	r2,-4(fp)
   19184:	00000306 	br	19194 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
   19188:	e0bfee17 	ldw	r2,-72(fp)
   1918c:	10800b17 	ldw	r2,44(r2)
   19190:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   19194:	e0bfee17 	ldw	r2,-72(fp)
   19198:	10800d17 	ldw	r2,52(r2)
   1919c:	1004c03a 	cmpne	r2,r2,zero
   191a0:	1000721e 	bne	r2,zero,1936c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   191a4:	e0bfee17 	ldw	r2,-72(fp)
   191a8:	10801317 	ldw	r2,76(r2)
   191ac:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
   191b0:	e0bff417 	ldw	r2,-48(fp)
   191b4:	e0fff917 	ldw	r3,-28(fp)
   191b8:	1884983a 	sll	r2,r3,r2
   191bc:	e13fff17 	ldw	r4,-4(fp)
   191c0:	2089883a 	add	r4,r4,r2
   191c4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   191c8:	e0bfee17 	ldw	r2,-72(fp)
   191cc:	10800e17 	ldw	r2,56(r2)
   191d0:	10800058 	cmpnei	r2,r2,1
   191d4:	10001e1e 	bne	r2,zero,19250 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
   191d8:	e0bff917 	ldw	r2,-28(fp)
   191dc:	e0bff515 	stw	r2,-44(fp)
   191e0:	00001706 	br	19240 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
   191e4:	e0fffb17 	ldw	r3,-20(fp)
   191e8:	e0fff615 	stw	r3,-40(fp)
   191ec:	00000806 	br	19210 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
   191f0:	e0ffff17 	ldw	r3,-4(fp)
   191f4:	e0bff617 	ldw	r2,-40(fp)
   191f8:	1885883a 	add	r2,r3,r2
   191fc:	e0fff717 	ldw	r3,-36(fp)
   19200:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   19204:	e13ff617 	ldw	r4,-40(fp)
   19208:	21000044 	addi	r4,r4,1
   1920c:	e13ff615 	stw	r4,-40(fp)
   19210:	e0bffa17 	ldw	r2,-24(fp)
   19214:	e0fff617 	ldw	r3,-40(fp)
   19218:	10fff52e 	bgeu	r2,r3,191f0 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   1921c:	e0fff417 	ldw	r3,-48(fp)
   19220:	00800044 	movi	r2,1
   19224:	10c4983a 	sll	r2,r2,r3
   19228:	e13fff17 	ldw	r4,-4(fp)
   1922c:	2089883a 	add	r4,r4,r2
   19230:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   19234:	e0bff517 	ldw	r2,-44(fp)
   19238:	10800044 	addi	r2,r2,1
   1923c:	e0bff515 	stw	r2,-44(fp)
   19240:	e0fff817 	ldw	r3,-32(fp)
   19244:	e13ff517 	ldw	r4,-44(fp)
   19248:	193fe62e 	bgeu	r3,r4,191e4 <alt_up_pixel_buffer_dma_draw_box+0x168>
   1924c:	0000c406 	br	19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   19250:	e0bfee17 	ldw	r2,-72(fp)
   19254:	10800e17 	ldw	r2,56(r2)
   19258:	10800098 	cmpnei	r2,r2,2
   1925c:	1000211e 	bne	r2,zero,192e4 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
   19260:	e0bff917 	ldw	r2,-28(fp)
   19264:	e0bff515 	stw	r2,-44(fp)
   19268:	00001a06 	br	192d4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
   1926c:	e0fffb17 	ldw	r3,-20(fp)
   19270:	e0fff615 	stw	r3,-40(fp)
   19274:	00000b06 	br	192a4 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   19278:	e13ff617 	ldw	r4,-40(fp)
   1927c:	e13ff617 	ldw	r4,-40(fp)
   19280:	2105883a 	add	r2,r4,r4
   19284:	1007883a 	mov	r3,r2
   19288:	e0bfff17 	ldw	r2,-4(fp)
   1928c:	1885883a 	add	r2,r3,r2
   19290:	e0fff717 	ldw	r3,-36(fp)
   19294:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   19298:	e0bff617 	ldw	r2,-40(fp)
   1929c:	10800044 	addi	r2,r2,1
   192a0:	e0bff615 	stw	r2,-40(fp)
   192a4:	e0fffa17 	ldw	r3,-24(fp)
   192a8:	e13ff617 	ldw	r4,-40(fp)
   192ac:	193ff22e 	bgeu	r3,r4,19278 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   192b0:	e0fff417 	ldw	r3,-48(fp)
   192b4:	00800044 	movi	r2,1
   192b8:	10c4983a 	sll	r2,r2,r3
   192bc:	e0ffff17 	ldw	r3,-4(fp)
   192c0:	1887883a 	add	r3,r3,r2
   192c4:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   192c8:	e13ff517 	ldw	r4,-44(fp)
   192cc:	21000044 	addi	r4,r4,1
   192d0:	e13ff515 	stw	r4,-44(fp)
   192d4:	e0bff817 	ldw	r2,-32(fp)
   192d8:	e0fff517 	ldw	r3,-44(fp)
   192dc:	10ffe32e 	bgeu	r2,r3,1926c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
   192e0:	00009f06 	br	19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   192e4:	e13ff917 	ldw	r4,-28(fp)
   192e8:	e13ff515 	stw	r4,-44(fp)
   192ec:	00001b06 	br	1935c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
   192f0:	e0bffb17 	ldw	r2,-20(fp)
   192f4:	e0bff615 	stw	r2,-40(fp)
   192f8:	00000c06 	br	1932c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   192fc:	e0fff617 	ldw	r3,-40(fp)
   19300:	e0fff617 	ldw	r3,-40(fp)
   19304:	18c5883a 	add	r2,r3,r3
   19308:	1085883a 	add	r2,r2,r2
   1930c:	1007883a 	mov	r3,r2
   19310:	e0bfff17 	ldw	r2,-4(fp)
   19314:	1885883a 	add	r2,r3,r2
   19318:	e0fff717 	ldw	r3,-36(fp)
   1931c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   19320:	e13ff617 	ldw	r4,-40(fp)
   19324:	21000044 	addi	r4,r4,1
   19328:	e13ff615 	stw	r4,-40(fp)
   1932c:	e0bffa17 	ldw	r2,-24(fp)
   19330:	e0fff617 	ldw	r3,-40(fp)
   19334:	10fff12e 	bgeu	r2,r3,192fc <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   19338:	e0fff417 	ldw	r3,-48(fp)
   1933c:	00800044 	movi	r2,1
   19340:	10c4983a 	sll	r2,r2,r3
   19344:	e13fff17 	ldw	r4,-4(fp)
   19348:	2089883a 	add	r4,r4,r2
   1934c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   19350:	e0bff517 	ldw	r2,-44(fp)
   19354:	10800044 	addi	r2,r2,1
   19358:	e0bff515 	stw	r2,-44(fp)
   1935c:	e0fff817 	ldw	r3,-32(fp)
   19360:	e13ff517 	ldw	r4,-44(fp)
   19364:	193fe22e 	bgeu	r3,r4,192f0 <alt_up_pixel_buffer_dma_draw_box+0x274>
   19368:	00007d06 	br	19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1936c:	e0bfee17 	ldw	r2,-72(fp)
   19370:	10800e17 	ldw	r2,56(r2)
   19374:	10800058 	cmpnei	r2,r2,1
   19378:	1000221e 	bne	r2,zero,19404 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
   1937c:	e0fff917 	ldw	r3,-28(fp)
   19380:	e13ffe17 	ldw	r4,-8(fp)
   19384:	1905383a 	mul	r2,r3,r4
   19388:	e0ffff17 	ldw	r3,-4(fp)
   1938c:	1887883a 	add	r3,r3,r2
   19390:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   19394:	e13ff917 	ldw	r4,-28(fp)
   19398:	e13ff215 	stw	r4,-56(fp)
   1939c:	00001506 	br	193f4 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
   193a0:	e0bffb17 	ldw	r2,-20(fp)
   193a4:	e0bff315 	stw	r2,-52(fp)
   193a8:	00000806 	br	193cc <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
   193ac:	e0ffff17 	ldw	r3,-4(fp)
   193b0:	e0bff317 	ldw	r2,-52(fp)
   193b4:	1885883a 	add	r2,r3,r2
   193b8:	e0fff717 	ldw	r3,-36(fp)
   193bc:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   193c0:	e0fff317 	ldw	r3,-52(fp)
   193c4:	18c00044 	addi	r3,r3,1
   193c8:	e0fff315 	stw	r3,-52(fp)
   193cc:	e13ffa17 	ldw	r4,-24(fp)
   193d0:	e0bff317 	ldw	r2,-52(fp)
   193d4:	20bff52e 	bgeu	r4,r2,193ac <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   193d8:	e0ffff17 	ldw	r3,-4(fp)
   193dc:	e13ffe17 	ldw	r4,-8(fp)
   193e0:	1907883a 	add	r3,r3,r4
   193e4:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   193e8:	e0bff217 	ldw	r2,-56(fp)
   193ec:	10800044 	addi	r2,r2,1
   193f0:	e0bff215 	stw	r2,-56(fp)
   193f4:	e0fff817 	ldw	r3,-32(fp)
   193f8:	e13ff217 	ldw	r4,-56(fp)
   193fc:	193fe82e 	bgeu	r3,r4,193a0 <alt_up_pixel_buffer_dma_draw_box+0x324>
   19400:	00005706 	br	19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   19404:	e0bfee17 	ldw	r2,-72(fp)
   19408:	10800e17 	ldw	r2,56(r2)
   1940c:	10800098 	cmpnei	r2,r2,2
   19410:	1000291e 	bne	r2,zero,194b8 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
   19414:	e0fffe17 	ldw	r3,-8(fp)
   19418:	e0fffe17 	ldw	r3,-8(fp)
   1941c:	18c5883a 	add	r2,r3,r3
   19420:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   19424:	e13ff917 	ldw	r4,-28(fp)
   19428:	e0fffe17 	ldw	r3,-8(fp)
   1942c:	20c5383a 	mul	r2,r4,r3
   19430:	e13fff17 	ldw	r4,-4(fp)
   19434:	2089883a 	add	r4,r4,r2
   19438:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   1943c:	e0bff917 	ldw	r2,-28(fp)
   19440:	e0bff215 	stw	r2,-56(fp)
   19444:	00001806 	br	194a8 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
   19448:	e0fffb17 	ldw	r3,-20(fp)
   1944c:	e0fff315 	stw	r3,-52(fp)
   19450:	00000b06 	br	19480 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   19454:	e13ff317 	ldw	r4,-52(fp)
   19458:	e13ff317 	ldw	r4,-52(fp)
   1945c:	2105883a 	add	r2,r4,r4
   19460:	1007883a 	mov	r3,r2
   19464:	e0bfff17 	ldw	r2,-4(fp)
   19468:	1885883a 	add	r2,r3,r2
   1946c:	e0fff717 	ldw	r3,-36(fp)
   19470:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   19474:	e0bff317 	ldw	r2,-52(fp)
   19478:	10800044 	addi	r2,r2,1
   1947c:	e0bff315 	stw	r2,-52(fp)
   19480:	e0fffa17 	ldw	r3,-24(fp)
   19484:	e13ff317 	ldw	r4,-52(fp)
   19488:	193ff22e 	bgeu	r3,r4,19454 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   1948c:	e0bfff17 	ldw	r2,-4(fp)
   19490:	e0fffe17 	ldw	r3,-8(fp)
   19494:	10c5883a 	add	r2,r2,r3
   19498:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1949c:	e13ff217 	ldw	r4,-56(fp)
   194a0:	21000044 	addi	r4,r4,1
   194a4:	e13ff215 	stw	r4,-56(fp)
   194a8:	e0bff817 	ldw	r2,-32(fp)
   194ac:	e0fff217 	ldw	r3,-56(fp)
   194b0:	10ffe52e 	bgeu	r2,r3,19448 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   194b4:	00002a06 	br	19560 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   194b8:	e13ffe17 	ldw	r4,-8(fp)
   194bc:	e13ffe17 	ldw	r4,-8(fp)
   194c0:	2105883a 	add	r2,r4,r4
   194c4:	1085883a 	add	r2,r2,r2
   194c8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   194cc:	e0fff917 	ldw	r3,-28(fp)
   194d0:	e13ffe17 	ldw	r4,-8(fp)
   194d4:	1905383a 	mul	r2,r3,r4
   194d8:	e0ffff17 	ldw	r3,-4(fp)
   194dc:	1887883a 	add	r3,r3,r2
   194e0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   194e4:	e13ff917 	ldw	r4,-28(fp)
   194e8:	e13ff215 	stw	r4,-56(fp)
   194ec:	00001906 	br	19554 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
   194f0:	e0bffb17 	ldw	r2,-20(fp)
   194f4:	e0bff315 	stw	r2,-52(fp)
   194f8:	00000c06 	br	1952c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   194fc:	e0fff317 	ldw	r3,-52(fp)
   19500:	e0fff317 	ldw	r3,-52(fp)
   19504:	18c5883a 	add	r2,r3,r3
   19508:	1085883a 	add	r2,r2,r2
   1950c:	1007883a 	mov	r3,r2
   19510:	e0bfff17 	ldw	r2,-4(fp)
   19514:	1885883a 	add	r2,r3,r2
   19518:	e0fff717 	ldw	r3,-36(fp)
   1951c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   19520:	e13ff317 	ldw	r4,-52(fp)
   19524:	21000044 	addi	r4,r4,1
   19528:	e13ff315 	stw	r4,-52(fp)
   1952c:	e0bffa17 	ldw	r2,-24(fp)
   19530:	e0fff317 	ldw	r3,-52(fp)
   19534:	10fff12e 	bgeu	r2,r3,194fc <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   19538:	e13fff17 	ldw	r4,-4(fp)
   1953c:	e0bffe17 	ldw	r2,-8(fp)
   19540:	2089883a 	add	r4,r4,r2
   19544:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   19548:	e0fff217 	ldw	r3,-56(fp)
   1954c:	18c00044 	addi	r3,r3,1
   19550:	e0fff215 	stw	r3,-56(fp)
   19554:	e13ff817 	ldw	r4,-32(fp)
   19558:	e0bff217 	ldw	r2,-56(fp)
   1955c:	20bfe42e 	bgeu	r4,r2,194f0 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
   19560:	e037883a 	mov	sp,fp
   19564:	df000017 	ldw	fp,0(sp)
   19568:	dec00104 	addi	sp,sp,4
   1956c:	f800283a 	ret

00019570 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   19570:	defff204 	addi	sp,sp,-56
   19574:	df000d15 	stw	fp,52(sp)
   19578:	df000d04 	addi	fp,sp,52
   1957c:	e13ff315 	stw	r4,-52(fp)
   19580:	e17ff415 	stw	r5,-48(fp)
   19584:	e1bff515 	stw	r6,-44(fp)
   19588:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1958c:	e0bff317 	ldw	r2,-52(fp)
   19590:	10800f17 	ldw	r2,60(r2)
   19594:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   19598:	e0bff317 	ldw	r2,-52(fp)
   1959c:	10801017 	ldw	r2,64(r2)
   195a0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   195a4:	e0bff417 	ldw	r2,-48(fp)
   195a8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
   195ac:	e0fff517 	ldw	r3,-44(fp)
   195b0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
   195b4:	e13ff617 	ldw	r4,-40(fp)
   195b8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   195bc:	e0800117 	ldw	r2,4(fp)
   195c0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   195c4:	e0fffb17 	ldw	r3,-20(fp)
   195c8:	e13ffc17 	ldw	r4,-16(fp)
   195cc:	1900042e 	bgeu	r3,r4,195e0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
   195d0:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
   195d4:	e0fffb17 	ldw	r3,-20(fp)
   195d8:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
   195dc:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   195e0:	e13ffc17 	ldw	r4,-16(fp)
   195e4:	e0bffe17 	ldw	r2,-8(fp)
   195e8:	2080b12e 	bgeu	r4,r2,198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   195ec:	e0fffa17 	ldw	r3,-24(fp)
   195f0:	e13ffd17 	ldw	r4,-12(fp)
   195f4:	19000136 	bltu	r3,r4,195fc <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   195f8:	0000ad06 	br	198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   195fc:	e0bffb17 	ldw	r2,-20(fp)
   19600:	e0fffe17 	ldw	r3,-8(fp)
   19604:	10c00336 	bltu	r2,r3,19614 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
   19608:	e13ffe17 	ldw	r4,-8(fp)
   1960c:	213fffc4 	addi	r4,r4,-1
   19610:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   19614:	e0800217 	ldw	r2,8(fp)
   19618:	10800058 	cmpnei	r2,r2,1
   1961c:	1000041e 	bne	r2,zero,19630 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   19620:	e0bff317 	ldw	r2,-52(fp)
   19624:	10800c17 	ldw	r2,48(r2)
   19628:	e0bfff15 	stw	r2,-4(fp)
   1962c:	00000306 	br	1963c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   19630:	e0bff317 	ldw	r2,-52(fp)
   19634:	10800b17 	ldw	r2,44(r2)
   19638:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1963c:	e0bff317 	ldw	r2,-52(fp)
   19640:	10800d17 	ldw	r2,52(r2)
   19644:	1004c03a 	cmpne	r2,r2,zero
   19648:	1000431e 	bne	r2,zero,19758 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1964c:	e0bff317 	ldw	r2,-52(fp)
   19650:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
   19654:	e0fffa17 	ldw	r3,-24(fp)
   19658:	1884983a 	sll	r2,r3,r2
   1965c:	e13fff17 	ldw	r4,-4(fp)
   19660:	2089883a 	add	r4,r4,r2
   19664:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   19668:	e0bff317 	ldw	r2,-52(fp)
   1966c:	10800e17 	ldw	r2,56(r2)
   19670:	10800058 	cmpnei	r2,r2,1
   19674:	10000f1e 	bne	r2,zero,196b4 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
   19678:	e0bffc17 	ldw	r2,-16(fp)
   1967c:	e0bff815 	stw	r2,-32(fp)
   19680:	00000806 	br	196a4 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
   19684:	e0ffff17 	ldw	r3,-4(fp)
   19688:	e0bff817 	ldw	r2,-32(fp)
   1968c:	1885883a 	add	r2,r3,r2
   19690:	e0fff917 	ldw	r3,-28(fp)
   19694:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   19698:	e0fff817 	ldw	r3,-32(fp)
   1969c:	18c00044 	addi	r3,r3,1
   196a0:	e0fff815 	stw	r3,-32(fp)
   196a4:	e13ffb17 	ldw	r4,-20(fp)
   196a8:	e0bff817 	ldw	r2,-32(fp)
   196ac:	20bff52e 	bgeu	r4,r2,19684 <alt_up_pixel_buffer_dma_draw_hline+0x114>
   196b0:	00007f06 	br	198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   196b4:	e0bff317 	ldw	r2,-52(fp)
   196b8:	10800e17 	ldw	r2,56(r2)
   196bc:	10800098 	cmpnei	r2,r2,2
   196c0:	1000121e 	bne	r2,zero,1970c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
   196c4:	e0fffc17 	ldw	r3,-16(fp)
   196c8:	e0fff815 	stw	r3,-32(fp)
   196cc:	00000b06 	br	196fc <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   196d0:	e13ff817 	ldw	r4,-32(fp)
   196d4:	e13ff817 	ldw	r4,-32(fp)
   196d8:	2105883a 	add	r2,r4,r4
   196dc:	1007883a 	mov	r3,r2
   196e0:	e0bfff17 	ldw	r2,-4(fp)
   196e4:	1885883a 	add	r2,r3,r2
   196e8:	e0fff917 	ldw	r3,-28(fp)
   196ec:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   196f0:	e0bff817 	ldw	r2,-32(fp)
   196f4:	10800044 	addi	r2,r2,1
   196f8:	e0bff815 	stw	r2,-32(fp)
   196fc:	e0fffb17 	ldw	r3,-20(fp)
   19700:	e13ff817 	ldw	r4,-32(fp)
   19704:	193ff22e 	bgeu	r3,r4,196d0 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   19708:	00006906 	br	198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1970c:	e0bffc17 	ldw	r2,-16(fp)
   19710:	e0bff815 	stw	r2,-32(fp)
   19714:	00000c06 	br	19748 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   19718:	e0fff817 	ldw	r3,-32(fp)
   1971c:	e0fff817 	ldw	r3,-32(fp)
   19720:	18c5883a 	add	r2,r3,r3
   19724:	1085883a 	add	r2,r2,r2
   19728:	1007883a 	mov	r3,r2
   1972c:	e0bfff17 	ldw	r2,-4(fp)
   19730:	1885883a 	add	r2,r3,r2
   19734:	e0fff917 	ldw	r3,-28(fp)
   19738:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1973c:	e13ff817 	ldw	r4,-32(fp)
   19740:	21000044 	addi	r4,r4,1
   19744:	e13ff815 	stw	r4,-32(fp)
   19748:	e0bffb17 	ldw	r2,-20(fp)
   1974c:	e0fff817 	ldw	r3,-32(fp)
   19750:	10fff12e 	bgeu	r2,r3,19718 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   19754:	00005606 	br	198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   19758:	e0bff317 	ldw	r2,-52(fp)
   1975c:	10800e17 	ldw	r2,56(r2)
   19760:	10800058 	cmpnei	r2,r2,1
   19764:	1000151e 	bne	r2,zero,197bc <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
   19768:	e13ffa17 	ldw	r4,-24(fp)
   1976c:	e0fffe17 	ldw	r3,-8(fp)
   19770:	20c5383a 	mul	r2,r4,r3
   19774:	e13fff17 	ldw	r4,-4(fp)
   19778:	2089883a 	add	r4,r4,r2
   1977c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   19780:	e0bffc17 	ldw	r2,-16(fp)
   19784:	e0bff715 	stw	r2,-36(fp)
   19788:	00000806 	br	197ac <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   1978c:	e0ffff17 	ldw	r3,-4(fp)
   19790:	e0bff717 	ldw	r2,-36(fp)
   19794:	1885883a 	add	r2,r3,r2
   19798:	e0fff917 	ldw	r3,-28(fp)
   1979c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   197a0:	e0fff717 	ldw	r3,-36(fp)
   197a4:	18c00044 	addi	r3,r3,1
   197a8:	e0fff715 	stw	r3,-36(fp)
   197ac:	e13ffb17 	ldw	r4,-20(fp)
   197b0:	e0bff717 	ldw	r2,-36(fp)
   197b4:	20bff52e 	bgeu	r4,r2,1978c <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   197b8:	00003d06 	br	198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   197bc:	e0bff317 	ldw	r2,-52(fp)
   197c0:	10800e17 	ldw	r2,56(r2)
   197c4:	10800098 	cmpnei	r2,r2,2
   197c8:	10001c1e 	bne	r2,zero,1983c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
   197cc:	e0fffe17 	ldw	r3,-8(fp)
   197d0:	e0fffe17 	ldw	r3,-8(fp)
   197d4:	18c5883a 	add	r2,r3,r3
   197d8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   197dc:	e13ffa17 	ldw	r4,-24(fp)
   197e0:	e0fffe17 	ldw	r3,-8(fp)
   197e4:	20c5383a 	mul	r2,r4,r3
   197e8:	e13fff17 	ldw	r4,-4(fp)
   197ec:	2089883a 	add	r4,r4,r2
   197f0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   197f4:	e0bffc17 	ldw	r2,-16(fp)
   197f8:	e0bff715 	stw	r2,-36(fp)
   197fc:	00000b06 	br	1982c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   19800:	e0fff717 	ldw	r3,-36(fp)
   19804:	e0fff717 	ldw	r3,-36(fp)
   19808:	18c5883a 	add	r2,r3,r3
   1980c:	1007883a 	mov	r3,r2
   19810:	e0bfff17 	ldw	r2,-4(fp)
   19814:	1885883a 	add	r2,r3,r2
   19818:	e0fff917 	ldw	r3,-28(fp)
   1981c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   19820:	e13ff717 	ldw	r4,-36(fp)
   19824:	21000044 	addi	r4,r4,1
   19828:	e13ff715 	stw	r4,-36(fp)
   1982c:	e0bffb17 	ldw	r2,-20(fp)
   19830:	e0fff717 	ldw	r3,-36(fp)
   19834:	10fff22e 	bgeu	r2,r3,19800 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   19838:	00001d06 	br	198b0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1983c:	e13ffe17 	ldw	r4,-8(fp)
   19840:	e13ffe17 	ldw	r4,-8(fp)
   19844:	2105883a 	add	r2,r4,r4
   19848:	1085883a 	add	r2,r2,r2
   1984c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   19850:	e0fffa17 	ldw	r3,-24(fp)
   19854:	e13ffe17 	ldw	r4,-8(fp)
   19858:	1905383a 	mul	r2,r3,r4
   1985c:	e0ffff17 	ldw	r3,-4(fp)
   19860:	1887883a 	add	r3,r3,r2
   19864:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
   19868:	e13ffc17 	ldw	r4,-16(fp)
   1986c:	e13ff715 	stw	r4,-36(fp)
   19870:	00000c06 	br	198a4 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   19874:	e0fff717 	ldw	r3,-36(fp)
   19878:	e0fff717 	ldw	r3,-36(fp)
   1987c:	18c5883a 	add	r2,r3,r3
   19880:	1085883a 	add	r2,r2,r2
   19884:	1007883a 	mov	r3,r2
   19888:	e0bfff17 	ldw	r2,-4(fp)
   1988c:	1885883a 	add	r2,r3,r2
   19890:	e0fff917 	ldw	r3,-28(fp)
   19894:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   19898:	e13ff717 	ldw	r4,-36(fp)
   1989c:	21000044 	addi	r4,r4,1
   198a0:	e13ff715 	stw	r4,-36(fp)
   198a4:	e0bffb17 	ldw	r2,-20(fp)
   198a8:	e0fff717 	ldw	r3,-36(fp)
   198ac:	10fff12e 	bgeu	r2,r3,19874 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   198b0:	e037883a 	mov	sp,fp
   198b4:	df000017 	ldw	fp,0(sp)
   198b8:	dec00104 	addi	sp,sp,4
   198bc:	f800283a 	ret

000198c0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   198c0:	defff104 	addi	sp,sp,-60
   198c4:	df000e15 	stw	fp,56(sp)
   198c8:	df000e04 	addi	fp,sp,56
   198cc:	e13ff215 	stw	r4,-56(fp)
   198d0:	e17ff315 	stw	r5,-52(fp)
   198d4:	e1bff415 	stw	r6,-48(fp)
   198d8:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   198dc:	e0bff217 	ldw	r2,-56(fp)
   198e0:	10800f17 	ldw	r2,60(r2)
   198e4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   198e8:	e0bff217 	ldw	r2,-56(fp)
   198ec:	10801017 	ldw	r2,64(r2)
   198f0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
   198f4:	e0bff317 	ldw	r2,-52(fp)
   198f8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
   198fc:	e0fff417 	ldw	r3,-48(fp)
   19900:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
   19904:	e13ff517 	ldw	r4,-44(fp)
   19908:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   1990c:	e0800117 	ldw	r2,4(fp)
   19910:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   19914:	e0fffa17 	ldw	r3,-24(fp)
   19918:	e13ffb17 	ldw	r4,-20(fp)
   1991c:	1900042e 	bgeu	r3,r4,19930 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
   19920:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
   19924:	e0fffa17 	ldw	r3,-24(fp)
   19928:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
   1992c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   19930:	e13ffc17 	ldw	r4,-16(fp)
   19934:	e0bffe17 	ldw	r2,-8(fp)
   19938:	2080d12e 	bgeu	r4,r2,19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1993c:	e0fffb17 	ldw	r3,-20(fp)
   19940:	e13ffd17 	ldw	r4,-12(fp)
   19944:	19000136 	bltu	r3,r4,1994c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   19948:	0000cd06 	br	19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1994c:	e0bffa17 	ldw	r2,-24(fp)
   19950:	e0fffd17 	ldw	r3,-12(fp)
   19954:	10c00336 	bltu	r2,r3,19964 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
   19958:	e13ffd17 	ldw	r4,-12(fp)
   1995c:	213fffc4 	addi	r4,r4,-1
   19960:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   19964:	e0800217 	ldw	r2,8(fp)
   19968:	10800058 	cmpnei	r2,r2,1
   1996c:	1000041e 	bne	r2,zero,19980 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   19970:	e0bff217 	ldw	r2,-56(fp)
   19974:	10800c17 	ldw	r2,48(r2)
   19978:	e0bfff15 	stw	r2,-4(fp)
   1997c:	00000306 	br	1998c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   19980:	e0bff217 	ldw	r2,-56(fp)
   19984:	10800b17 	ldw	r2,44(r2)
   19988:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1998c:	e0bff217 	ldw	r2,-56(fp)
   19990:	10800d17 	ldw	r2,52(r2)
   19994:	1004c03a 	cmpne	r2,r2,zero
   19998:	1000571e 	bne	r2,zero,19af8 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1999c:	e0bff217 	ldw	r2,-56(fp)
   199a0:	10801317 	ldw	r2,76(r2)
   199a4:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
   199a8:	e0bff717 	ldw	r2,-36(fp)
   199ac:	e0fffb17 	ldw	r3,-20(fp)
   199b0:	1884983a 	sll	r2,r3,r2
   199b4:	e13fff17 	ldw	r4,-4(fp)
   199b8:	2089883a 	add	r4,r4,r2
   199bc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   199c0:	e0bff217 	ldw	r2,-56(fp)
   199c4:	10800e17 	ldw	r2,56(r2)
   199c8:	10800058 	cmpnei	r2,r2,1
   199cc:	1000151e 	bne	r2,zero,19a24 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
   199d0:	e0bffb17 	ldw	r2,-20(fp)
   199d4:	e0bff815 	stw	r2,-32(fp)
   199d8:	00000e06 	br	19a14 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   199dc:	e0ffff17 	ldw	r3,-4(fp)
   199e0:	e0bffc17 	ldw	r2,-16(fp)
   199e4:	1885883a 	add	r2,r3,r2
   199e8:	e0fff917 	ldw	r3,-28(fp)
   199ec:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   199f0:	e0fff717 	ldw	r3,-36(fp)
   199f4:	00800044 	movi	r2,1
   199f8:	10c4983a 	sll	r2,r2,r3
   199fc:	e0ffff17 	ldw	r3,-4(fp)
   19a00:	1887883a 	add	r3,r3,r2
   19a04:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   19a08:	e13ff817 	ldw	r4,-32(fp)
   19a0c:	21000044 	addi	r4,r4,1
   19a10:	e13ff815 	stw	r4,-32(fp)
   19a14:	e0bffa17 	ldw	r2,-24(fp)
   19a18:	e0fff817 	ldw	r3,-32(fp)
   19a1c:	10ffef2e 	bgeu	r2,r3,199dc <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   19a20:	00009706 	br	19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   19a24:	e0bff217 	ldw	r2,-56(fp)
   19a28:	10800e17 	ldw	r2,56(r2)
   19a2c:	10800098 	cmpnei	r2,r2,2
   19a30:	1000181e 	bne	r2,zero,19a94 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
   19a34:	e13ffb17 	ldw	r4,-20(fp)
   19a38:	e13ff815 	stw	r4,-32(fp)
   19a3c:	00001106 	br	19a84 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   19a40:	e0fffc17 	ldw	r3,-16(fp)
   19a44:	e0fffc17 	ldw	r3,-16(fp)
   19a48:	18c5883a 	add	r2,r3,r3
   19a4c:	1007883a 	mov	r3,r2
   19a50:	e0bfff17 	ldw	r2,-4(fp)
   19a54:	1885883a 	add	r2,r3,r2
   19a58:	e0fff917 	ldw	r3,-28(fp)
   19a5c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   19a60:	e0fff717 	ldw	r3,-36(fp)
   19a64:	00800044 	movi	r2,1
   19a68:	10c4983a 	sll	r2,r2,r3
   19a6c:	e13fff17 	ldw	r4,-4(fp)
   19a70:	2089883a 	add	r4,r4,r2
   19a74:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   19a78:	e0bff817 	ldw	r2,-32(fp)
   19a7c:	10800044 	addi	r2,r2,1
   19a80:	e0bff815 	stw	r2,-32(fp)
   19a84:	e0fffa17 	ldw	r3,-24(fp)
   19a88:	e13ff817 	ldw	r4,-32(fp)
   19a8c:	193fec2e 	bgeu	r3,r4,19a40 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   19a90:	00007b06 	br	19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   19a94:	e0bffb17 	ldw	r2,-20(fp)
   19a98:	e0bff815 	stw	r2,-32(fp)
   19a9c:	00001206 	br	19ae8 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   19aa0:	e0fffc17 	ldw	r3,-16(fp)
   19aa4:	e0fffc17 	ldw	r3,-16(fp)
   19aa8:	18c5883a 	add	r2,r3,r3
   19aac:	1085883a 	add	r2,r2,r2
   19ab0:	1007883a 	mov	r3,r2
   19ab4:	e0bfff17 	ldw	r2,-4(fp)
   19ab8:	1885883a 	add	r2,r3,r2
   19abc:	e0fff917 	ldw	r3,-28(fp)
   19ac0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   19ac4:	e0fff717 	ldw	r3,-36(fp)
   19ac8:	00800044 	movi	r2,1
   19acc:	10c4983a 	sll	r2,r2,r3
   19ad0:	e13fff17 	ldw	r4,-4(fp)
   19ad4:	2089883a 	add	r4,r4,r2
   19ad8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   19adc:	e0bff817 	ldw	r2,-32(fp)
   19ae0:	10800044 	addi	r2,r2,1
   19ae4:	e0bff815 	stw	r2,-32(fp)
   19ae8:	e0fffa17 	ldw	r3,-24(fp)
   19aec:	e13ff817 	ldw	r4,-32(fp)
   19af0:	193feb2e 	bgeu	r3,r4,19aa0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   19af4:	00006206 	br	19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   19af8:	e0bff217 	ldw	r2,-56(fp)
   19afc:	10800e17 	ldw	r2,56(r2)
   19b00:	10800058 	cmpnei	r2,r2,1
   19b04:	1000191e 	bne	r2,zero,19b6c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   19b08:	e0fffb17 	ldw	r3,-20(fp)
   19b0c:	e13ffe17 	ldw	r4,-8(fp)
   19b10:	1905383a 	mul	r2,r3,r4
   19b14:	e0ffff17 	ldw	r3,-4(fp)
   19b18:	1887883a 	add	r3,r3,r2
   19b1c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   19b20:	e13ffb17 	ldw	r4,-20(fp)
   19b24:	e13ff615 	stw	r4,-40(fp)
   19b28:	00000c06 	br	19b5c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   19b2c:	e0ffff17 	ldw	r3,-4(fp)
   19b30:	e0bffc17 	ldw	r2,-16(fp)
   19b34:	1885883a 	add	r2,r3,r2
   19b38:	e0fff917 	ldw	r3,-28(fp)
   19b3c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   19b40:	e0bfff17 	ldw	r2,-4(fp)
   19b44:	e0fffe17 	ldw	r3,-8(fp)
   19b48:	10c5883a 	add	r2,r2,r3
   19b4c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   19b50:	e13ff617 	ldw	r4,-40(fp)
   19b54:	21000044 	addi	r4,r4,1
   19b58:	e13ff615 	stw	r4,-40(fp)
   19b5c:	e0bffa17 	ldw	r2,-24(fp)
   19b60:	e0fff617 	ldw	r3,-40(fp)
   19b64:	10fff12e 	bgeu	r2,r3,19b2c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   19b68:	00004506 	br	19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   19b6c:	e0bff217 	ldw	r2,-56(fp)
   19b70:	10800e17 	ldw	r2,56(r2)
   19b74:	10800098 	cmpnei	r2,r2,2
   19b78:	1000201e 	bne	r2,zero,19bfc <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   19b7c:	e13ffe17 	ldw	r4,-8(fp)
   19b80:	e13ffe17 	ldw	r4,-8(fp)
   19b84:	2105883a 	add	r2,r4,r4
   19b88:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   19b8c:	e0fffb17 	ldw	r3,-20(fp)
   19b90:	e13ffe17 	ldw	r4,-8(fp)
   19b94:	1905383a 	mul	r2,r3,r4
   19b98:	e0ffff17 	ldw	r3,-4(fp)
   19b9c:	1887883a 	add	r3,r3,r2
   19ba0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   19ba4:	e13ffb17 	ldw	r4,-20(fp)
   19ba8:	e13ff615 	stw	r4,-40(fp)
   19bac:	00000f06 	br	19bec <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   19bb0:	e0fffc17 	ldw	r3,-16(fp)
   19bb4:	e0fffc17 	ldw	r3,-16(fp)
   19bb8:	18c5883a 	add	r2,r3,r3
   19bbc:	1007883a 	mov	r3,r2
   19bc0:	e0bfff17 	ldw	r2,-4(fp)
   19bc4:	1885883a 	add	r2,r3,r2
   19bc8:	e0fff917 	ldw	r3,-28(fp)
   19bcc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   19bd0:	e13fff17 	ldw	r4,-4(fp)
   19bd4:	e0bffe17 	ldw	r2,-8(fp)
   19bd8:	2089883a 	add	r4,r4,r2
   19bdc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   19be0:	e0fff617 	ldw	r3,-40(fp)
   19be4:	18c00044 	addi	r3,r3,1
   19be8:	e0fff615 	stw	r3,-40(fp)
   19bec:	e13ffa17 	ldw	r4,-24(fp)
   19bf0:	e0bff617 	ldw	r2,-40(fp)
   19bf4:	20bfee2e 	bgeu	r4,r2,19bb0 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   19bf8:	00002106 	br	19c80 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   19bfc:	e0fffe17 	ldw	r3,-8(fp)
   19c00:	e0fffe17 	ldw	r3,-8(fp)
   19c04:	18c5883a 	add	r2,r3,r3
   19c08:	1085883a 	add	r2,r2,r2
   19c0c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   19c10:	e13ffb17 	ldw	r4,-20(fp)
   19c14:	e0fffe17 	ldw	r3,-8(fp)
   19c18:	20c5383a 	mul	r2,r4,r3
   19c1c:	e13fff17 	ldw	r4,-4(fp)
   19c20:	2089883a 	add	r4,r4,r2
   19c24:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   19c28:	e0bffb17 	ldw	r2,-20(fp)
   19c2c:	e0bff615 	stw	r2,-40(fp)
   19c30:	00001006 	br	19c74 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   19c34:	e0fffc17 	ldw	r3,-16(fp)
   19c38:	e0fffc17 	ldw	r3,-16(fp)
   19c3c:	18c5883a 	add	r2,r3,r3
   19c40:	1085883a 	add	r2,r2,r2
   19c44:	1007883a 	mov	r3,r2
   19c48:	e0bfff17 	ldw	r2,-4(fp)
   19c4c:	1885883a 	add	r2,r3,r2
   19c50:	e0fff917 	ldw	r3,-28(fp)
   19c54:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   19c58:	e13fff17 	ldw	r4,-4(fp)
   19c5c:	e0bffe17 	ldw	r2,-8(fp)
   19c60:	2089883a 	add	r4,r4,r2
   19c64:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   19c68:	e0fff617 	ldw	r3,-40(fp)
   19c6c:	18c00044 	addi	r3,r3,1
   19c70:	e0fff615 	stw	r3,-40(fp)
   19c74:	e13ffa17 	ldw	r4,-24(fp)
   19c78:	e0bff617 	ldw	r2,-40(fp)
   19c7c:	20bfed2e 	bgeu	r4,r2,19c34 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   19c80:	e037883a 	mov	sp,fp
   19c84:	df000017 	ldw	fp,0(sp)
   19c88:	dec00104 	addi	sp,sp,4
   19c8c:	f800283a 	ret

00019c90 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   19c90:	defff804 	addi	sp,sp,-32
   19c94:	dfc00715 	stw	ra,28(sp)
   19c98:	df000615 	stw	fp,24(sp)
   19c9c:	df000604 	addi	fp,sp,24
   19ca0:	e13ffc15 	stw	r4,-16(fp)
   19ca4:	e17ffd15 	stw	r5,-12(fp)
   19ca8:	e1bffe15 	stw	r6,-8(fp)
   19cac:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   19cb0:	e0800317 	ldw	r2,12(fp)
   19cb4:	d8800015 	stw	r2,0(sp)
   19cb8:	e0800417 	ldw	r2,16(fp)
   19cbc:	d8800115 	stw	r2,4(sp)
   19cc0:	e13ffc17 	ldw	r4,-16(fp)
   19cc4:	e17ffd17 	ldw	r5,-12(fp)
   19cc8:	e1bfff17 	ldw	r6,-4(fp)
   19ccc:	e1fffe17 	ldw	r7,-8(fp)
   19cd0:	00195700 	call	19570 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   19cd4:	e0800317 	ldw	r2,12(fp)
   19cd8:	d8800015 	stw	r2,0(sp)
   19cdc:	e0800417 	ldw	r2,16(fp)
   19ce0:	d8800115 	stw	r2,4(sp)
   19ce4:	e13ffc17 	ldw	r4,-16(fp)
   19ce8:	e17ffd17 	ldw	r5,-12(fp)
   19cec:	e1bfff17 	ldw	r6,-4(fp)
   19cf0:	e1c00217 	ldw	r7,8(fp)
   19cf4:	00195700 	call	19570 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   19cf8:	e0800317 	ldw	r2,12(fp)
   19cfc:	d8800015 	stw	r2,0(sp)
   19d00:	e0800417 	ldw	r2,16(fp)
   19d04:	d8800115 	stw	r2,4(sp)
   19d08:	e13ffc17 	ldw	r4,-16(fp)
   19d0c:	e17ffd17 	ldw	r5,-12(fp)
   19d10:	e1bffe17 	ldw	r6,-8(fp)
   19d14:	e1c00217 	ldw	r7,8(fp)
   19d18:	00198c00 	call	198c0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   19d1c:	e0800317 	ldw	r2,12(fp)
   19d20:	d8800015 	stw	r2,0(sp)
   19d24:	e0800417 	ldw	r2,16(fp)
   19d28:	d8800115 	stw	r2,4(sp)
   19d2c:	e13ffc17 	ldw	r4,-16(fp)
   19d30:	e17fff17 	ldw	r5,-4(fp)
   19d34:	e1bffe17 	ldw	r6,-8(fp)
   19d38:	e1c00217 	ldw	r7,8(fp)
   19d3c:	00198c00 	call	198c0 <alt_up_pixel_buffer_dma_draw_vline>
}
   19d40:	e037883a 	mov	sp,fp
   19d44:	dfc00117 	ldw	ra,4(sp)
   19d48:	df000017 	ldw	fp,0(sp)
   19d4c:	dec00204 	addi	sp,sp,8
   19d50:	f800283a 	ret

00019d54 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   19d54:	defffb04 	addi	sp,sp,-20
   19d58:	df000415 	stw	fp,16(sp)
   19d5c:	df000404 	addi	fp,sp,16
   19d60:	e13ffc15 	stw	r4,-16(fp)
   19d64:	e17ffd15 	stw	r5,-12(fp)
   19d68:	e1bffe15 	stw	r6,-8(fp)
   19d6c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   19d70:	e0c00217 	ldw	r3,8(fp)
   19d74:	1804c03a 	cmpne	r2,r3,zero
   19d78:	10000b1e 	bne	r2,zero,19da8 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   19d7c:	e13ffd17 	ldw	r4,-12(fp)
   19d80:	e0ffff17 	ldw	r3,-4(fp)
   19d84:	20c5383a 	mul	r2,r4,r3
   19d88:	e13ffe17 	ldw	r4,-8(fp)
   19d8c:	1105883a 	add	r2,r2,r4
   19d90:	1007883a 	mov	r3,r2
   19d94:	e0bffc17 	ldw	r2,-16(fp)
   19d98:	1885883a 	add	r2,r3,r2
   19d9c:	e0c00117 	ldw	r3,4(fp)
   19da0:	10c00025 	stbio	r3,0(r2)
   19da4:	00001b06 	br	19e14 <helper_plot_pixel+0xc0>
	else if (mode == 1)
   19da8:	e1000217 	ldw	r4,8(fp)
   19dac:	20800058 	cmpnei	r2,r4,1
   19db0:	10000c1e 	bne	r2,zero,19de4 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   19db4:	e0fffd17 	ldw	r3,-12(fp)
   19db8:	e13fff17 	ldw	r4,-4(fp)
   19dbc:	1905383a 	mul	r2,r3,r4
   19dc0:	e0fffe17 	ldw	r3,-8(fp)
   19dc4:	10c5883a 	add	r2,r2,r3
   19dc8:	1085883a 	add	r2,r2,r2
   19dcc:	1007883a 	mov	r3,r2
   19dd0:	e0bffc17 	ldw	r2,-16(fp)
   19dd4:	1885883a 	add	r2,r3,r2
   19dd8:	e1000117 	ldw	r4,4(fp)
   19ddc:	1100002d 	sthio	r4,0(r2)
   19de0:	00000c06 	br	19e14 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   19de4:	e0fffd17 	ldw	r3,-12(fp)
   19de8:	e13fff17 	ldw	r4,-4(fp)
   19dec:	1905383a 	mul	r2,r3,r4
   19df0:	e0fffe17 	ldw	r3,-8(fp)
   19df4:	10c5883a 	add	r2,r2,r3
   19df8:	1085883a 	add	r2,r2,r2
   19dfc:	1085883a 	add	r2,r2,r2
   19e00:	1007883a 	mov	r3,r2
   19e04:	e0bffc17 	ldw	r2,-16(fp)
   19e08:	1885883a 	add	r2,r3,r2
   19e0c:	e1000117 	ldw	r4,4(fp)
   19e10:	11000035 	stwio	r4,0(r2)
}
   19e14:	e037883a 	mov	sp,fp
   19e18:	df000017 	ldw	fp,0(sp)
   19e1c:	dec00104 	addi	sp,sp,4
   19e20:	f800283a 	ret

00019e24 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   19e24:	deffe404 	addi	sp,sp,-112
   19e28:	dfc01b15 	stw	ra,108(sp)
   19e2c:	df001a15 	stw	fp,104(sp)
   19e30:	df001a04 	addi	fp,sp,104
   19e34:	e13fe815 	stw	r4,-96(fp)
   19e38:	e17fe915 	stw	r5,-92(fp)
   19e3c:	e1bfea15 	stw	r6,-88(fp)
   19e40:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   19e44:	e0bfe917 	ldw	r2,-92(fp)
   19e48:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   19e4c:	e0ffea17 	ldw	r3,-88(fp)
   19e50:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   19e54:	e13feb17 	ldw	r4,-84(fp)
   19e58:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   19e5c:	e0800217 	ldw	r2,8(fp)
   19e60:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   19e64:	e0fff717 	ldw	r3,-36(fp)
   19e68:	e13ff917 	ldw	r4,-28(fp)
   19e6c:	1905c83a 	sub	r2,r3,r4
   19e70:	e0bfff15 	stw	r2,-4(fp)
   19e74:	e0ffff17 	ldw	r3,-4(fp)
   19e78:	1804403a 	cmpge	r2,r3,zero
   19e7c:	1000031e 	bne	r2,zero,19e8c <alt_up_pixel_buffer_dma_draw_line+0x68>
   19e80:	e13fff17 	ldw	r4,-4(fp)
   19e84:	0109c83a 	sub	r4,zero,r4
   19e88:	e13fff15 	stw	r4,-4(fp)
   19e8c:	e0fff817 	ldw	r3,-32(fp)
   19e90:	e13ffa17 	ldw	r4,-24(fp)
   19e94:	1905c83a 	sub	r2,r3,r4
   19e98:	e0bffe15 	stw	r2,-8(fp)
   19e9c:	e0fffe17 	ldw	r3,-8(fp)
   19ea0:	1804403a 	cmpge	r2,r3,zero
   19ea4:	1000031e 	bne	r2,zero,19eb4 <alt_up_pixel_buffer_dma_draw_line+0x90>
   19ea8:	e13ffe17 	ldw	r4,-8(fp)
   19eac:	0109c83a 	sub	r4,zero,r4
   19eb0:	e13ffe15 	stw	r4,-8(fp)
   19eb4:	e0fffe17 	ldw	r3,-8(fp)
   19eb8:	e13fff17 	ldw	r4,-4(fp)
   19ebc:	1904803a 	cmplt	r2,r3,r4
   19ec0:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   19ec4:	e0bfe817 	ldw	r2,-96(fp)
   19ec8:	10800e17 	ldw	r2,56(r2)
   19ecc:	10800060 	cmpeqi	r2,r2,1
   19ed0:	10000c1e 	bne	r2,zero,19f04 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   19ed4:	e0bfe817 	ldw	r2,-96(fp)
   19ed8:	10800e17 	ldw	r2,56(r2)
   19edc:	10800098 	cmpnei	r2,r2,2
   19ee0:	1000031e 	bne	r2,zero,19ef0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   19ee4:	00800044 	movi	r2,1
   19ee8:	e0bffc15 	stw	r2,-16(fp)
   19eec:	00000206 	br	19ef8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   19ef0:	00c00084 	movi	r3,2
   19ef4:	e0fffc15 	stw	r3,-16(fp)
   19ef8:	e13ffc17 	ldw	r4,-16(fp)
   19efc:	e13ffd15 	stw	r4,-12(fp)
   19f00:	00000106 	br	19f08 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   19f04:	e03ffd15 	stw	zero,-12(fp)
   19f08:	e0bffd17 	ldw	r2,-12(fp)
   19f0c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   19f10:	e0c00317 	ldw	r3,12(fp)
   19f14:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   19f18:	e0bfe817 	ldw	r2,-96(fp)
   19f1c:	10800d17 	ldw	r2,52(r2)
   19f20:	1004c03a 	cmpne	r2,r2,zero
   19f24:	1000091e 	bne	r2,zero,19f4c <alt_up_pixel_buffer_dma_draw_line+0x128>
   19f28:	e0bfe817 	ldw	r2,-96(fp)
   19f2c:	10c01317 	ldw	r3,76(r2)
   19f30:	e0bfef17 	ldw	r2,-68(fp)
   19f34:	1885c83a 	sub	r2,r3,r2
   19f38:	1007883a 	mov	r3,r2
   19f3c:	00800044 	movi	r2,1
   19f40:	10c4983a 	sll	r2,r2,r3
   19f44:	e0bffb15 	stw	r2,-20(fp)
   19f48:	00000306 	br	19f58 <alt_up_pixel_buffer_dma_draw_line+0x134>
   19f4c:	e0bfe817 	ldw	r2,-96(fp)
   19f50:	10800f17 	ldw	r2,60(r2)
   19f54:	e0bffb15 	stw	r2,-20(fp)
   19f58:	e13ffb17 	ldw	r4,-20(fp)
   19f5c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   19f60:	e0800417 	ldw	r2,16(fp)
   19f64:	10800058 	cmpnei	r2,r2,1
   19f68:	1000041e 	bne	r2,zero,19f7c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   19f6c:	e0bfe817 	ldw	r2,-96(fp)
   19f70:	10800c17 	ldw	r2,48(r2)
   19f74:	e0bfed15 	stw	r2,-76(fp)
   19f78:	00000306 	br	19f88 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   19f7c:	e0bfe817 	ldw	r2,-96(fp)
   19f80:	10800b17 	ldw	r2,44(r2)
   19f84:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   19f88:	e0fff603 	ldbu	r3,-40(fp)
   19f8c:	18803fcc 	andi	r2,r3,255
   19f90:	1080201c 	xori	r2,r2,128
   19f94:	10bfe004 	addi	r2,r2,-128
   19f98:	10800050 	cmplti	r2,r2,1
   19f9c:	10000c1e 	bne	r2,zero,19fd0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   19fa0:	e13ffa17 	ldw	r4,-24(fp)
   19fa4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   19fa8:	e0bff917 	ldw	r2,-28(fp)
   19fac:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   19fb0:	e0fff317 	ldw	r3,-52(fp)
   19fb4:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   19fb8:	e13ff817 	ldw	r4,-32(fp)
   19fbc:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   19fc0:	e0bff717 	ldw	r2,-36(fp)
   19fc4:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   19fc8:	e0fff317 	ldw	r3,-52(fp)
   19fcc:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   19fd0:	e13ff817 	ldw	r4,-32(fp)
   19fd4:	e0bffa17 	ldw	r2,-24(fp)
   19fd8:	20800c0e 	bge	r4,r2,1a00c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   19fdc:	e0fffa17 	ldw	r3,-24(fp)
   19fe0:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   19fe4:	e13ff817 	ldw	r4,-32(fp)
   19fe8:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   19fec:	e0bff317 	ldw	r2,-52(fp)
   19ff0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   19ff4:	e0fff917 	ldw	r3,-28(fp)
   19ff8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   19ffc:	e13ff717 	ldw	r4,-36(fp)
   1a000:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   1a004:	e0bff317 	ldw	r2,-52(fp)
   1a008:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1a00c:	e0fff817 	ldw	r3,-32(fp)
   1a010:	e13ffa17 	ldw	r4,-24(fp)
   1a014:	1907c83a 	sub	r3,r3,r4
   1a018:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   1a01c:	e0fff717 	ldw	r3,-36(fp)
   1a020:	e13ff917 	ldw	r4,-28(fp)
   1a024:	1905c83a 	sub	r2,r3,r4
   1a028:	e0bff415 	stw	r2,-48(fp)
   1a02c:	e0fff417 	ldw	r3,-48(fp)
   1a030:	1804403a 	cmpge	r2,r3,zero
   1a034:	1000031e 	bne	r2,zero,1a044 <alt_up_pixel_buffer_dma_draw_line+0x220>
   1a038:	e13ff417 	ldw	r4,-48(fp)
   1a03c:	0109c83a 	sub	r4,zero,r4
   1a040:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   1a044:	e0fff517 	ldw	r3,-44(fp)
   1a048:	1804d7fa 	srli	r2,r3,31
   1a04c:	e13ff517 	ldw	r4,-44(fp)
   1a050:	1105883a 	add	r2,r2,r4
   1a054:	1005d07a 	srai	r2,r2,1
   1a058:	0085c83a 	sub	r2,zero,r2
   1a05c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   1a060:	e0bff917 	ldw	r2,-28(fp)
   1a064:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   1a068:	e0fff917 	ldw	r3,-28(fp)
   1a06c:	e13ff717 	ldw	r4,-36(fp)
   1a070:	1900030e 	bge	r3,r4,1a080 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   1a074:	00800044 	movi	r2,1
   1a078:	e0bff215 	stw	r2,-56(fp)
   1a07c:	00000206 	br	1a088 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   1a080:	00ffffc4 	movi	r3,-1
   1a084:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   1a088:	e13ff603 	ldbu	r4,-40(fp)
   1a08c:	20803fcc 	andi	r2,r4,255
   1a090:	1080201c 	xori	r2,r2,128
   1a094:	10bfe004 	addi	r2,r2,-128
   1a098:	10800058 	cmpnei	r2,r2,1
   1a09c:	1000221e 	bne	r2,zero,1a128 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   1a0a0:	e0bffa17 	ldw	r2,-24(fp)
   1a0a4:	e0bff115 	stw	r2,-60(fp)
   1a0a8:	00001b06 	br	1a118 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   1a0ac:	e0ffee17 	ldw	r3,-72(fp)
   1a0b0:	d8c00015 	stw	r3,0(sp)
   1a0b4:	e13fef17 	ldw	r4,-68(fp)
   1a0b8:	d9000115 	stw	r4,4(sp)
   1a0bc:	e13fed17 	ldw	r4,-76(fp)
   1a0c0:	e17fec17 	ldw	r5,-80(fp)
   1a0c4:	e1bff017 	ldw	r6,-64(fp)
   1a0c8:	e1fff117 	ldw	r7,-60(fp)
   1a0cc:	0019d540 	call	19d54 <helper_plot_pixel>
			error = error + deltay;
   1a0d0:	e0bff317 	ldw	r2,-52(fp)
   1a0d4:	e0fff417 	ldw	r3,-48(fp)
   1a0d8:	10c5883a 	add	r2,r2,r3
   1a0dc:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   1a0e0:	e13ff317 	ldw	r4,-52(fp)
   1a0e4:	20800050 	cmplti	r2,r4,1
   1a0e8:	1000081e 	bne	r2,zero,1a10c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   1a0ec:	e0bff017 	ldw	r2,-64(fp)
   1a0f0:	e0fff217 	ldw	r3,-56(fp)
   1a0f4:	10c5883a 	add	r2,r2,r3
   1a0f8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   1a0fc:	e13ff317 	ldw	r4,-52(fp)
   1a100:	e0bff517 	ldw	r2,-44(fp)
   1a104:	2089c83a 	sub	r4,r4,r2
   1a108:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   1a10c:	e0fff117 	ldw	r3,-60(fp)
   1a110:	18c00044 	addi	r3,r3,1
   1a114:	e0fff115 	stw	r3,-60(fp)
   1a118:	e13ff817 	ldw	r4,-32(fp)
   1a11c:	e0bff117 	ldw	r2,-60(fp)
   1a120:	20bfe20e 	bge	r4,r2,1a0ac <alt_up_pixel_buffer_dma_draw_line+0x288>
   1a124:	00002106 	br	1a1ac <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   1a128:	e0fffa17 	ldw	r3,-24(fp)
   1a12c:	e0fff115 	stw	r3,-60(fp)
   1a130:	00001b06 	br	1a1a0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   1a134:	e13fee17 	ldw	r4,-72(fp)
   1a138:	d9000015 	stw	r4,0(sp)
   1a13c:	e0bfef17 	ldw	r2,-68(fp)
   1a140:	d8800115 	stw	r2,4(sp)
   1a144:	e13fed17 	ldw	r4,-76(fp)
   1a148:	e17fec17 	ldw	r5,-80(fp)
   1a14c:	e1bff117 	ldw	r6,-60(fp)
   1a150:	e1fff017 	ldw	r7,-64(fp)
   1a154:	0019d540 	call	19d54 <helper_plot_pixel>
			error = error + deltay;
   1a158:	e0fff317 	ldw	r3,-52(fp)
   1a15c:	e13ff417 	ldw	r4,-48(fp)
   1a160:	1907883a 	add	r3,r3,r4
   1a164:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   1a168:	e0fff317 	ldw	r3,-52(fp)
   1a16c:	18800050 	cmplti	r2,r3,1
   1a170:	1000081e 	bne	r2,zero,1a194 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   1a174:	e13ff017 	ldw	r4,-64(fp)
   1a178:	e0bff217 	ldw	r2,-56(fp)
   1a17c:	2089883a 	add	r4,r4,r2
   1a180:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   1a184:	e0fff317 	ldw	r3,-52(fp)
   1a188:	e13ff517 	ldw	r4,-44(fp)
   1a18c:	1907c83a 	sub	r3,r3,r4
   1a190:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   1a194:	e0bff117 	ldw	r2,-60(fp)
   1a198:	10800044 	addi	r2,r2,1
   1a19c:	e0bff115 	stw	r2,-60(fp)
   1a1a0:	e0fff817 	ldw	r3,-32(fp)
   1a1a4:	e13ff117 	ldw	r4,-60(fp)
   1a1a8:	193fe20e 	bge	r3,r4,1a134 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1a1ac:	e037883a 	mov	sp,fp
   1a1b0:	dfc00117 	ldw	ra,4(sp)
   1a1b4:	df000017 	ldw	fp,0(sp)
   1a1b8:	dec00204 	addi	sp,sp,8
   1a1bc:	f800283a 	ret

0001a1c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1a1c0:	defff404 	addi	sp,sp,-48
   1a1c4:	df000b15 	stw	fp,44(sp)
   1a1c8:	df000b04 	addi	fp,sp,44
   1a1cc:	e13ffb15 	stw	r4,-20(fp)
   1a1d0:	e17ffc15 	stw	r5,-16(fp)
   1a1d4:	e1bffd15 	stw	r6,-12(fp)
   1a1d8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1a1dc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a1e0:	00820034 	movhi	r2,2048
   1a1e4:	108a8c04 	addi	r2,r2,10800
   1a1e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1a1ec:	1005003a 	cmpeq	r2,r2,zero
   1a1f0:	1000411e 	bne	r2,zero,1a2f8 <alt_alarm_start+0x138>
  {
    if (alarm)
   1a1f4:	e0bffb17 	ldw	r2,-20(fp)
   1a1f8:	1005003a 	cmpeq	r2,r2,zero
   1a1fc:	10003b1e 	bne	r2,zero,1a2ec <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1a200:	e0fffb17 	ldw	r3,-20(fp)
   1a204:	e0bffd17 	ldw	r2,-12(fp)
   1a208:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1a20c:	e0fffb17 	ldw	r3,-20(fp)
   1a210:	e0bffe17 	ldw	r2,-8(fp)
   1a214:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a218:	0005303a 	rdctl	r2,status
   1a21c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a220:	e0fff817 	ldw	r3,-32(fp)
   1a224:	00bfff84 	movi	r2,-2
   1a228:	1884703a 	and	r2,r3,r2
   1a22c:	1001703a 	wrctl	status,r2
  
  return context;
   1a230:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1a234:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1a238:	00820034 	movhi	r2,2048
   1a23c:	108a8d04 	addi	r2,r2,10804
   1a240:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1a244:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1a248:	e0fffc17 	ldw	r3,-16(fp)
   1a24c:	e0bff917 	ldw	r2,-28(fp)
   1a250:	1885883a 	add	r2,r3,r2
   1a254:	10c00044 	addi	r3,r2,1
   1a258:	e0bffb17 	ldw	r2,-20(fp)
   1a25c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1a260:	e0bffb17 	ldw	r2,-20(fp)
   1a264:	10c00217 	ldw	r3,8(r2)
   1a268:	e0bff917 	ldw	r2,-28(fp)
   1a26c:	1880042e 	bgeu	r3,r2,1a280 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1a270:	e0fffb17 	ldw	r3,-20(fp)
   1a274:	00800044 	movi	r2,1
   1a278:	18800405 	stb	r2,16(r3)
   1a27c:	00000206 	br	1a288 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1a280:	e0bffb17 	ldw	r2,-20(fp)
   1a284:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1a288:	e0fffb17 	ldw	r3,-20(fp)
   1a28c:	00820034 	movhi	r2,2048
   1a290:	108a4c04 	addi	r2,r2,10544
   1a294:	e0bff615 	stw	r2,-40(fp)
   1a298:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a29c:	e0fff717 	ldw	r3,-36(fp)
   1a2a0:	e0bff617 	ldw	r2,-40(fp)
   1a2a4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1a2a8:	e0bff617 	ldw	r2,-40(fp)
   1a2ac:	10c00017 	ldw	r3,0(r2)
   1a2b0:	e0bff717 	ldw	r2,-36(fp)
   1a2b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a2b8:	e0bff617 	ldw	r2,-40(fp)
   1a2bc:	10c00017 	ldw	r3,0(r2)
   1a2c0:	e0bff717 	ldw	r2,-36(fp)
   1a2c4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1a2c8:	e0fff617 	ldw	r3,-40(fp)
   1a2cc:	e0bff717 	ldw	r2,-36(fp)
   1a2d0:	18800015 	stw	r2,0(r3)
   1a2d4:	e0bffa17 	ldw	r2,-24(fp)
   1a2d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a2dc:	e0bff517 	ldw	r2,-44(fp)
   1a2e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1a2e4:	e03fff15 	stw	zero,-4(fp)
   1a2e8:	00000506 	br	1a300 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1a2ec:	00bffa84 	movi	r2,-22
   1a2f0:	e0bfff15 	stw	r2,-4(fp)
   1a2f4:	00000206 	br	1a300 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1a2f8:	00bfde84 	movi	r2,-134
   1a2fc:	e0bfff15 	stw	r2,-4(fp)
   1a300:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1a304:	e037883a 	mov	sp,fp
   1a308:	df000017 	ldw	fp,0(sp)
   1a30c:	dec00104 	addi	sp,sp,4
   1a310:	f800283a 	ret

0001a314 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   1a314:	defffb04 	addi	sp,sp,-20
   1a318:	df000415 	stw	fp,16(sp)
   1a31c:	df000404 	addi	fp,sp,16
   1a320:	e13ffe15 	stw	r4,-8(fp)
   1a324:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
   1a328:	e0fffe17 	ldw	r3,-8(fp)
   1a32c:	e0bfff17 	ldw	r2,-4(fp)
   1a330:	1885883a 	add	r2,r3,r2
   1a334:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1a338:	e0bffe17 	ldw	r2,-8(fp)
   1a33c:	e0bffd15 	stw	r2,-12(fp)
   1a340:	00000506 	br	1a358 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   1a344:	e0bffd17 	ldw	r2,-12(fp)
   1a348:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1a34c:	e0bffd17 	ldw	r2,-12(fp)
   1a350:	10800804 	addi	r2,r2,32
   1a354:	e0bffd15 	stw	r2,-12(fp)
   1a358:	e0fffd17 	ldw	r3,-12(fp)
   1a35c:	e0bffc17 	ldw	r2,-16(fp)
   1a360:	18bff836 	bltu	r3,r2,1a344 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   1a364:	e0bffe17 	ldw	r2,-8(fp)
   1a368:	108007cc 	andi	r2,r2,31
   1a36c:	1005003a 	cmpeq	r2,r2,zero
   1a370:	1000021e 	bne	r2,zero,1a37c <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
   1a374:	e0bffd17 	ldw	r2,-12(fp)
   1a378:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1a37c:	e037883a 	mov	sp,fp
   1a380:	df000017 	ldw	fp,0(sp)
   1a384:	dec00104 	addi	sp,sp,4
   1a388:	f800283a 	ret

0001a38c <alt_dev_llist_insert>:
   1a38c:	defff904 	addi	sp,sp,-28
   1a390:	dfc00615 	stw	ra,24(sp)
   1a394:	df000515 	stw	fp,20(sp)
   1a398:	df000504 	addi	fp,sp,20
   1a39c:	e13ffd15 	stw	r4,-12(fp)
   1a3a0:	e17ffe15 	stw	r5,-8(fp)
   1a3a4:	e0bffd17 	ldw	r2,-12(fp)
   1a3a8:	1005003a 	cmpeq	r2,r2,zero
   1a3ac:	1000041e 	bne	r2,zero,1a3c0 <alt_dev_llist_insert+0x34>
   1a3b0:	e0bffd17 	ldw	r2,-12(fp)
   1a3b4:	10800217 	ldw	r2,8(r2)
   1a3b8:	1004c03a 	cmpne	r2,r2,zero
   1a3bc:	1000071e 	bne	r2,zero,1a3dc <alt_dev_llist_insert+0x50>
   1a3c0:	001a4400 	call	1a440 <alt_get_errno>
   1a3c4:	1007883a 	mov	r3,r2
   1a3c8:	00800584 	movi	r2,22
   1a3cc:	18800015 	stw	r2,0(r3)
   1a3d0:	00bffa84 	movi	r2,-22
   1a3d4:	e0bfff15 	stw	r2,-4(fp)
   1a3d8:	00001306 	br	1a428 <alt_dev_llist_insert+0x9c>
   1a3dc:	e0fffd17 	ldw	r3,-12(fp)
   1a3e0:	e0bffe17 	ldw	r2,-8(fp)
   1a3e4:	e0bffb15 	stw	r2,-20(fp)
   1a3e8:	e0fffc15 	stw	r3,-16(fp)
   1a3ec:	e0fffc17 	ldw	r3,-16(fp)
   1a3f0:	e0bffb17 	ldw	r2,-20(fp)
   1a3f4:	18800115 	stw	r2,4(r3)
   1a3f8:	e0bffb17 	ldw	r2,-20(fp)
   1a3fc:	10c00017 	ldw	r3,0(r2)
   1a400:	e0bffc17 	ldw	r2,-16(fp)
   1a404:	10c00015 	stw	r3,0(r2)
   1a408:	e0bffb17 	ldw	r2,-20(fp)
   1a40c:	10c00017 	ldw	r3,0(r2)
   1a410:	e0bffc17 	ldw	r2,-16(fp)
   1a414:	18800115 	stw	r2,4(r3)
   1a418:	e0fffb17 	ldw	r3,-20(fp)
   1a41c:	e0bffc17 	ldw	r2,-16(fp)
   1a420:	18800015 	stw	r2,0(r3)
   1a424:	e03fff15 	stw	zero,-4(fp)
   1a428:	e0bfff17 	ldw	r2,-4(fp)
   1a42c:	e037883a 	mov	sp,fp
   1a430:	dfc00117 	ldw	ra,4(sp)
   1a434:	df000017 	ldw	fp,0(sp)
   1a438:	dec00204 	addi	sp,sp,8
   1a43c:	f800283a 	ret

0001a440 <alt_get_errno>:
   1a440:	defffd04 	addi	sp,sp,-12
   1a444:	dfc00215 	stw	ra,8(sp)
   1a448:	df000115 	stw	fp,4(sp)
   1a44c:	df000104 	addi	fp,sp,4
   1a450:	00820034 	movhi	r2,2048
   1a454:	108a4604 	addi	r2,r2,10520
   1a458:	10800017 	ldw	r2,0(r2)
   1a45c:	1005003a 	cmpeq	r2,r2,zero
   1a460:	1000061e 	bne	r2,zero,1a47c <alt_get_errno+0x3c>
   1a464:	00820034 	movhi	r2,2048
   1a468:	108a4604 	addi	r2,r2,10520
   1a46c:	10800017 	ldw	r2,0(r2)
   1a470:	103ee83a 	callr	r2
   1a474:	e0bfff15 	stw	r2,-4(fp)
   1a478:	00000306 	br	1a488 <alt_get_errno+0x48>
   1a47c:	00820034 	movhi	r2,2048
   1a480:	108a8704 	addi	r2,r2,10780
   1a484:	e0bfff15 	stw	r2,-4(fp)
   1a488:	e0bfff17 	ldw	r2,-4(fp)
   1a48c:	e037883a 	mov	sp,fp
   1a490:	dfc00117 	ldw	ra,4(sp)
   1a494:	df000017 	ldw	fp,0(sp)
   1a498:	dec00204 	addi	sp,sp,8
   1a49c:	f800283a 	ret

0001a4a0 <_do_ctors>:
   1a4a0:	defffd04 	addi	sp,sp,-12
   1a4a4:	dfc00215 	stw	ra,8(sp)
   1a4a8:	df000115 	stw	fp,4(sp)
   1a4ac:	df000104 	addi	fp,sp,4
   1a4b0:	00bfff04 	movi	r2,-4
   1a4b4:	00c000b4 	movhi	r3,2
   1a4b8:	18ef0704 	addi	r3,r3,-17380
   1a4bc:	1885883a 	add	r2,r3,r2
   1a4c0:	e0bfff15 	stw	r2,-4(fp)
   1a4c4:	00000606 	br	1a4e0 <_do_ctors+0x40>
   1a4c8:	e0bfff17 	ldw	r2,-4(fp)
   1a4cc:	10800017 	ldw	r2,0(r2)
   1a4d0:	103ee83a 	callr	r2
   1a4d4:	e0bfff17 	ldw	r2,-4(fp)
   1a4d8:	10bfff04 	addi	r2,r2,-4
   1a4dc:	e0bfff15 	stw	r2,-4(fp)
   1a4e0:	e0ffff17 	ldw	r3,-4(fp)
   1a4e4:	008000b4 	movhi	r2,2
   1a4e8:	10af0604 	addi	r2,r2,-17384
   1a4ec:	18bff62e 	bgeu	r3,r2,1a4c8 <_do_ctors+0x28>
   1a4f0:	e037883a 	mov	sp,fp
   1a4f4:	dfc00117 	ldw	ra,4(sp)
   1a4f8:	df000017 	ldw	fp,0(sp)
   1a4fc:	dec00204 	addi	sp,sp,8
   1a500:	f800283a 	ret

0001a504 <_do_dtors>:
   1a504:	defffd04 	addi	sp,sp,-12
   1a508:	dfc00215 	stw	ra,8(sp)
   1a50c:	df000115 	stw	fp,4(sp)
   1a510:	df000104 	addi	fp,sp,4
   1a514:	00bfff04 	movi	r2,-4
   1a518:	00c000b4 	movhi	r3,2
   1a51c:	18ef0704 	addi	r3,r3,-17380
   1a520:	1885883a 	add	r2,r3,r2
   1a524:	e0bfff15 	stw	r2,-4(fp)
   1a528:	00000606 	br	1a544 <_do_dtors+0x40>
   1a52c:	e0bfff17 	ldw	r2,-4(fp)
   1a530:	10800017 	ldw	r2,0(r2)
   1a534:	103ee83a 	callr	r2
   1a538:	e0bfff17 	ldw	r2,-4(fp)
   1a53c:	10bfff04 	addi	r2,r2,-4
   1a540:	e0bfff15 	stw	r2,-4(fp)
   1a544:	e0ffff17 	ldw	r3,-4(fp)
   1a548:	008000b4 	movhi	r2,2
   1a54c:	10af0704 	addi	r2,r2,-17380
   1a550:	18bff62e 	bgeu	r3,r2,1a52c <_do_dtors+0x28>
   1a554:	e037883a 	mov	sp,fp
   1a558:	dfc00117 	ldw	ra,4(sp)
   1a55c:	df000017 	ldw	fp,0(sp)
   1a560:	dec00204 	addi	sp,sp,8
   1a564:	f800283a 	ret

0001a568 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a568:	defff904 	addi	sp,sp,-28
   1a56c:	dfc00615 	stw	ra,24(sp)
   1a570:	df000515 	stw	fp,20(sp)
   1a574:	df000504 	addi	fp,sp,20
   1a578:	e13ffd15 	stw	r4,-12(fp)
   1a57c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a580:	e0bffe17 	ldw	r2,-8(fp)
   1a584:	10800017 	ldw	r2,0(r2)
   1a588:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a58c:	e13ffd17 	ldw	r4,-12(fp)
   1a590:	00086700 	call	8670 <strlen>
   1a594:	10800044 	addi	r2,r2,1
   1a598:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a59c:	00000d06 	br	1a5d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a5a0:	e0bffc17 	ldw	r2,-16(fp)
   1a5a4:	11000217 	ldw	r4,8(r2)
   1a5a8:	e1bffb17 	ldw	r6,-20(fp)
   1a5ac:	e17ffd17 	ldw	r5,-12(fp)
   1a5b0:	00082a00 	call	82a0 <memcmp>
   1a5b4:	1004c03a 	cmpne	r2,r2,zero
   1a5b8:	1000031e 	bne	r2,zero,1a5c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a5bc:	e0bffc17 	ldw	r2,-16(fp)
   1a5c0:	e0bfff15 	stw	r2,-4(fp)
   1a5c4:	00000706 	br	1a5e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a5c8:	e0bffc17 	ldw	r2,-16(fp)
   1a5cc:	10800017 	ldw	r2,0(r2)
   1a5d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a5d4:	e0fffe17 	ldw	r3,-8(fp)
   1a5d8:	e0bffc17 	ldw	r2,-16(fp)
   1a5dc:	10fff01e 	bne	r2,r3,1a5a0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1a5e0:	e03fff15 	stw	zero,-4(fp)
   1a5e4:	e0bfff17 	ldw	r2,-4(fp)
}
   1a5e8:	e037883a 	mov	sp,fp
   1a5ec:	dfc00117 	ldw	ra,4(sp)
   1a5f0:	df000017 	ldw	fp,0(sp)
   1a5f4:	dec00204 	addi	sp,sp,8
   1a5f8:	f800283a 	ret

0001a5fc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   1a5fc:	defffb04 	addi	sp,sp,-20
   1a600:	dfc00415 	stw	ra,16(sp)
   1a604:	df000315 	stw	fp,12(sp)
   1a608:	df000304 	addi	fp,sp,12
   1a60c:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   1a610:	e13ffe17 	ldw	r4,-8(fp)
   1a614:	d1601b04 	addi	r5,gp,-32660
   1a618:	001a5680 	call	1a568 <alt_find_dev>
   1a61c:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
   1a620:	e0bffd17 	ldw	r2,-12(fp)
   1a624:	1005003a 	cmpeq	r2,r2,zero
   1a628:	10000b1e 	bne	r2,zero,1a658 <alt_flash_open_dev+0x5c>
   1a62c:	e0bffd17 	ldw	r2,-12(fp)
   1a630:	10800317 	ldw	r2,12(r2)
   1a634:	1005003a 	cmpeq	r2,r2,zero
   1a638:	1000071e 	bne	r2,zero,1a658 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
   1a63c:	e0bffd17 	ldw	r2,-12(fp)
   1a640:	10800317 	ldw	r2,12(r2)
   1a644:	e13ffd17 	ldw	r4,-12(fp)
   1a648:	e17ffe17 	ldw	r5,-8(fp)
   1a64c:	103ee83a 	callr	r2
   1a650:	e0bfff15 	stw	r2,-4(fp)
   1a654:	00000206 	br	1a660 <alt_flash_open_dev+0x64>
  }

  return dev;
   1a658:	e0bffd17 	ldw	r2,-12(fp)
   1a65c:	e0bfff15 	stw	r2,-4(fp)
   1a660:	e0bfff17 	ldw	r2,-4(fp)
}
   1a664:	e037883a 	mov	sp,fp
   1a668:	dfc00117 	ldw	ra,4(sp)
   1a66c:	df000017 	ldw	fp,0(sp)
   1a670:	dec00204 	addi	sp,sp,8
   1a674:	f800283a 	ret

0001a678 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   1a678:	defffd04 	addi	sp,sp,-12
   1a67c:	dfc00215 	stw	ra,8(sp)
   1a680:	df000115 	stw	fp,4(sp)
   1a684:	df000104 	addi	fp,sp,4
   1a688:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   1a68c:	e0bfff17 	ldw	r2,-4(fp)
   1a690:	1005003a 	cmpeq	r2,r2,zero
   1a694:	1000081e 	bne	r2,zero,1a6b8 <alt_flash_close_dev+0x40>
   1a698:	e0bfff17 	ldw	r2,-4(fp)
   1a69c:	10800417 	ldw	r2,16(r2)
   1a6a0:	1005003a 	cmpeq	r2,r2,zero
   1a6a4:	1000041e 	bne	r2,zero,1a6b8 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
   1a6a8:	e0bfff17 	ldw	r2,-4(fp)
   1a6ac:	10800417 	ldw	r2,16(r2)
   1a6b0:	e13fff17 	ldw	r4,-4(fp)
   1a6b4:	103ee83a 	callr	r2
  }
  return;
}
   1a6b8:	e037883a 	mov	sp,fp
   1a6bc:	dfc00117 	ldw	ra,4(sp)
   1a6c0:	df000017 	ldw	fp,0(sp)
   1a6c4:	dec00204 	addi	sp,sp,8
   1a6c8:	f800283a 	ret

0001a6cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1a6cc:	defff904 	addi	sp,sp,-28
   1a6d0:	dfc00615 	stw	ra,24(sp)
   1a6d4:	df000515 	stw	fp,20(sp)
   1a6d8:	df000504 	addi	fp,sp,20
   1a6dc:	e13ffc15 	stw	r4,-16(fp)
   1a6e0:	e17ffd15 	stw	r5,-12(fp)
   1a6e4:	e1bffe15 	stw	r6,-8(fp)
   1a6e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1a6ec:	e13ffd17 	ldw	r4,-12(fp)
   1a6f0:	e17ffe17 	ldw	r5,-8(fp)
   1a6f4:	e1bfff17 	ldw	r6,-4(fp)
   1a6f8:	001a8e40 	call	1a8e4 <open>
   1a6fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1a700:	e0bffb17 	ldw	r2,-20(fp)
   1a704:	1004803a 	cmplt	r2,r2,zero
   1a708:	10001c1e 	bne	r2,zero,1a77c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1a70c:	e0bffb17 	ldw	r2,-20(fp)
   1a710:	00c20034 	movhi	r3,2048
   1a714:	18c4d304 	addi	r3,r3,4940
   1a718:	10800324 	muli	r2,r2,12
   1a71c:	10c5883a 	add	r2,r2,r3
   1a720:	10c00017 	ldw	r3,0(r2)
   1a724:	e0bffc17 	ldw	r2,-16(fp)
   1a728:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1a72c:	e0bffb17 	ldw	r2,-20(fp)
   1a730:	00c20034 	movhi	r3,2048
   1a734:	18c4d304 	addi	r3,r3,4940
   1a738:	10800324 	muli	r2,r2,12
   1a73c:	10c5883a 	add	r2,r2,r3
   1a740:	10800104 	addi	r2,r2,4
   1a744:	10c00017 	ldw	r3,0(r2)
   1a748:	e0bffc17 	ldw	r2,-16(fp)
   1a74c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1a750:	e0bffb17 	ldw	r2,-20(fp)
   1a754:	00c20034 	movhi	r3,2048
   1a758:	18c4d304 	addi	r3,r3,4940
   1a75c:	10800324 	muli	r2,r2,12
   1a760:	10c5883a 	add	r2,r2,r3
   1a764:	10800204 	addi	r2,r2,8
   1a768:	10c00017 	ldw	r3,0(r2)
   1a76c:	e0bffc17 	ldw	r2,-16(fp)
   1a770:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1a774:	e13ffb17 	ldw	r4,-20(fp)
   1a778:	00139d40 	call	139d4 <alt_release_fd>
  }
} 
   1a77c:	e037883a 	mov	sp,fp
   1a780:	dfc00117 	ldw	ra,4(sp)
   1a784:	df000017 	ldw	fp,0(sp)
   1a788:	dec00204 	addi	sp,sp,8
   1a78c:	f800283a 	ret

0001a790 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1a790:	defffb04 	addi	sp,sp,-20
   1a794:	dfc00415 	stw	ra,16(sp)
   1a798:	df000315 	stw	fp,12(sp)
   1a79c:	df000304 	addi	fp,sp,12
   1a7a0:	e13ffd15 	stw	r4,-12(fp)
   1a7a4:	e17ffe15 	stw	r5,-8(fp)
   1a7a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1a7ac:	01020034 	movhi	r4,2048
   1a7b0:	2104d604 	addi	r4,r4,4952
   1a7b4:	e17ffd17 	ldw	r5,-12(fp)
   1a7b8:	01800044 	movi	r6,1
   1a7bc:	01c07fc4 	movi	r7,511
   1a7c0:	001a6cc0 	call	1a6cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1a7c4:	01020034 	movhi	r4,2048
   1a7c8:	2104d304 	addi	r4,r4,4940
   1a7cc:	e17ffe17 	ldw	r5,-8(fp)
   1a7d0:	000d883a 	mov	r6,zero
   1a7d4:	01c07fc4 	movi	r7,511
   1a7d8:	001a6cc0 	call	1a6cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1a7dc:	01020034 	movhi	r4,2048
   1a7e0:	2104d904 	addi	r4,r4,4964
   1a7e4:	e17fff17 	ldw	r5,-4(fp)
   1a7e8:	01800044 	movi	r6,1
   1a7ec:	01c07fc4 	movi	r7,511
   1a7f0:	001a6cc0 	call	1a6cc <alt_open_fd>
}  
   1a7f4:	e037883a 	mov	sp,fp
   1a7f8:	dfc00117 	ldw	ra,4(sp)
   1a7fc:	df000017 	ldw	fp,0(sp)
   1a800:	dec00204 	addi	sp,sp,8
   1a804:	f800283a 	ret

0001a808 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1a808:	defffc04 	addi	sp,sp,-16
   1a80c:	df000315 	stw	fp,12(sp)
   1a810:	df000304 	addi	fp,sp,12
   1a814:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1a818:	e0bffe17 	ldw	r2,-8(fp)
   1a81c:	10800217 	ldw	r2,8(r2)
   1a820:	10d00034 	orhi	r3,r2,16384
   1a824:	e0bffe17 	ldw	r2,-8(fp)
   1a828:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a82c:	e03ffd15 	stw	zero,-12(fp)
   1a830:	00002006 	br	1a8b4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a834:	e0bffd17 	ldw	r2,-12(fp)
   1a838:	00c20034 	movhi	r3,2048
   1a83c:	18c4d304 	addi	r3,r3,4940
   1a840:	10800324 	muli	r2,r2,12
   1a844:	10c5883a 	add	r2,r2,r3
   1a848:	10c00017 	ldw	r3,0(r2)
   1a84c:	e0bffe17 	ldw	r2,-8(fp)
   1a850:	10800017 	ldw	r2,0(r2)
   1a854:	1880141e 	bne	r3,r2,1a8a8 <alt_file_locked+0xa0>
   1a858:	e0bffd17 	ldw	r2,-12(fp)
   1a85c:	00c20034 	movhi	r3,2048
   1a860:	18c4d304 	addi	r3,r3,4940
   1a864:	10800324 	muli	r2,r2,12
   1a868:	10c5883a 	add	r2,r2,r3
   1a86c:	10800204 	addi	r2,r2,8
   1a870:	10800017 	ldw	r2,0(r2)
   1a874:	1004403a 	cmpge	r2,r2,zero
   1a878:	10000b1e 	bne	r2,zero,1a8a8 <alt_file_locked+0xa0>
   1a87c:	e0bffd17 	ldw	r2,-12(fp)
   1a880:	10800324 	muli	r2,r2,12
   1a884:	1007883a 	mov	r3,r2
   1a888:	00820034 	movhi	r2,2048
   1a88c:	1084d304 	addi	r2,r2,4940
   1a890:	1887883a 	add	r3,r3,r2
   1a894:	e0bffe17 	ldw	r2,-8(fp)
   1a898:	18800326 	beq	r3,r2,1a8a8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1a89c:	00bffcc4 	movi	r2,-13
   1a8a0:	e0bfff15 	stw	r2,-4(fp)
   1a8a4:	00000a06 	br	1a8d0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a8a8:	e0bffd17 	ldw	r2,-12(fp)
   1a8ac:	10800044 	addi	r2,r2,1
   1a8b0:	e0bffd15 	stw	r2,-12(fp)
   1a8b4:	00820034 	movhi	r2,2048
   1a8b8:	108a4504 	addi	r2,r2,10516
   1a8bc:	10800017 	ldw	r2,0(r2)
   1a8c0:	1007883a 	mov	r3,r2
   1a8c4:	e0bffd17 	ldw	r2,-12(fp)
   1a8c8:	18bfda2e 	bgeu	r3,r2,1a834 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1a8cc:	e03fff15 	stw	zero,-4(fp)
   1a8d0:	e0bfff17 	ldw	r2,-4(fp)
}
   1a8d4:	e037883a 	mov	sp,fp
   1a8d8:	df000017 	ldw	fp,0(sp)
   1a8dc:	dec00104 	addi	sp,sp,4
   1a8e0:	f800283a 	ret

0001a8e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1a8e4:	defff404 	addi	sp,sp,-48
   1a8e8:	dfc00b15 	stw	ra,44(sp)
   1a8ec:	df000a15 	stw	fp,40(sp)
   1a8f0:	df000a04 	addi	fp,sp,40
   1a8f4:	e13ffb15 	stw	r4,-20(fp)
   1a8f8:	e17ffc15 	stw	r5,-16(fp)
   1a8fc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1a900:	00bfffc4 	movi	r2,-1
   1a904:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1a908:	00bffb44 	movi	r2,-19
   1a90c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1a910:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1a914:	e13ffb17 	ldw	r4,-20(fp)
   1a918:	01420034 	movhi	r5,2048
   1a91c:	294a4304 	addi	r5,r5,10508
   1a920:	001a5680 	call	1a568 <alt_find_dev>
   1a924:	e0bffa15 	stw	r2,-24(fp)
   1a928:	e0bffa17 	ldw	r2,-24(fp)
   1a92c:	1004c03a 	cmpne	r2,r2,zero
   1a930:	1000051e 	bne	r2,zero,1a948 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1a934:	e13ffb17 	ldw	r4,-20(fp)
   1a938:	001b6ac0 	call	1b6ac <alt_find_file>
   1a93c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1a940:	00800044 	movi	r2,1
   1a944:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1a948:	e0bffa17 	ldw	r2,-24(fp)
   1a94c:	1005003a 	cmpeq	r2,r2,zero
   1a950:	1000301e 	bne	r2,zero,1aa14 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1a954:	e13ffa17 	ldw	r4,-24(fp)
   1a958:	001b7cc0 	call	1b7cc <alt_get_fd>
   1a95c:	e0bff815 	stw	r2,-32(fp)
   1a960:	e0bff817 	ldw	r2,-32(fp)
   1a964:	1004403a 	cmpge	r2,r2,zero
   1a968:	1000031e 	bne	r2,zero,1a978 <open+0x94>
    {
      status = index;
   1a96c:	e0bff817 	ldw	r2,-32(fp)
   1a970:	e0bff715 	stw	r2,-36(fp)
   1a974:	00002906 	br	1aa1c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1a978:	e0bff817 	ldw	r2,-32(fp)
   1a97c:	10800324 	muli	r2,r2,12
   1a980:	1007883a 	mov	r3,r2
   1a984:	00820034 	movhi	r2,2048
   1a988:	1084d304 	addi	r2,r2,4940
   1a98c:	1885883a 	add	r2,r3,r2
   1a990:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1a994:	e0fffc17 	ldw	r3,-16(fp)
   1a998:	00900034 	movhi	r2,16384
   1a99c:	10bfffc4 	addi	r2,r2,-1
   1a9a0:	1886703a 	and	r3,r3,r2
   1a9a4:	e0bff917 	ldw	r2,-28(fp)
   1a9a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1a9ac:	e0bff617 	ldw	r2,-40(fp)
   1a9b0:	1004c03a 	cmpne	r2,r2,zero
   1a9b4:	1000061e 	bne	r2,zero,1a9d0 <open+0xec>
   1a9b8:	e13ff917 	ldw	r4,-28(fp)
   1a9bc:	001a8080 	call	1a808 <alt_file_locked>
   1a9c0:	e0bff715 	stw	r2,-36(fp)
   1a9c4:	e0bff717 	ldw	r2,-36(fp)
   1a9c8:	1004803a 	cmplt	r2,r2,zero
   1a9cc:	1000131e 	bne	r2,zero,1aa1c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1a9d0:	e0bffa17 	ldw	r2,-24(fp)
   1a9d4:	10800317 	ldw	r2,12(r2)
   1a9d8:	1005003a 	cmpeq	r2,r2,zero
   1a9dc:	1000091e 	bne	r2,zero,1aa04 <open+0x120>
   1a9e0:	e0bffa17 	ldw	r2,-24(fp)
   1a9e4:	10800317 	ldw	r2,12(r2)
   1a9e8:	e13ff917 	ldw	r4,-28(fp)
   1a9ec:	e17ffb17 	ldw	r5,-20(fp)
   1a9f0:	e1bffc17 	ldw	r6,-16(fp)
   1a9f4:	e1fffd17 	ldw	r7,-12(fp)
   1a9f8:	103ee83a 	callr	r2
   1a9fc:	e0bfff15 	stw	r2,-4(fp)
   1aa00:	00000106 	br	1aa08 <open+0x124>
   1aa04:	e03fff15 	stw	zero,-4(fp)
   1aa08:	e0bfff17 	ldw	r2,-4(fp)
   1aa0c:	e0bff715 	stw	r2,-36(fp)
   1aa10:	00000206 	br	1aa1c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1aa14:	00bffb44 	movi	r2,-19
   1aa18:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1aa1c:	e0bff717 	ldw	r2,-36(fp)
   1aa20:	1004403a 	cmpge	r2,r2,zero
   1aa24:	1000091e 	bne	r2,zero,1aa4c <open+0x168>
  {
    alt_release_fd (index);  
   1aa28:	e13ff817 	ldw	r4,-32(fp)
   1aa2c:	00139d40 	call	139d4 <alt_release_fd>
    ALT_ERRNO = -status;
   1aa30:	001aa6c0 	call	1aa6c <alt_get_errno>
   1aa34:	e0fff717 	ldw	r3,-36(fp)
   1aa38:	00c7c83a 	sub	r3,zero,r3
   1aa3c:	10c00015 	stw	r3,0(r2)
    return -1;
   1aa40:	00bfffc4 	movi	r2,-1
   1aa44:	e0bffe15 	stw	r2,-8(fp)
   1aa48:	00000206 	br	1aa54 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1aa4c:	e0bff817 	ldw	r2,-32(fp)
   1aa50:	e0bffe15 	stw	r2,-8(fp)
   1aa54:	e0bffe17 	ldw	r2,-8(fp)
}
   1aa58:	e037883a 	mov	sp,fp
   1aa5c:	dfc00117 	ldw	ra,4(sp)
   1aa60:	df000017 	ldw	fp,0(sp)
   1aa64:	dec00204 	addi	sp,sp,8
   1aa68:	f800283a 	ret

0001aa6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1aa6c:	defffd04 	addi	sp,sp,-12
   1aa70:	dfc00215 	stw	ra,8(sp)
   1aa74:	df000115 	stw	fp,4(sp)
   1aa78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1aa7c:	00820034 	movhi	r2,2048
   1aa80:	108a4604 	addi	r2,r2,10520
   1aa84:	10800017 	ldw	r2,0(r2)
   1aa88:	1005003a 	cmpeq	r2,r2,zero
   1aa8c:	1000061e 	bne	r2,zero,1aaa8 <alt_get_errno+0x3c>
   1aa90:	00820034 	movhi	r2,2048
   1aa94:	108a4604 	addi	r2,r2,10520
   1aa98:	10800017 	ldw	r2,0(r2)
   1aa9c:	103ee83a 	callr	r2
   1aaa0:	e0bfff15 	stw	r2,-4(fp)
   1aaa4:	00000306 	br	1aab4 <alt_get_errno+0x48>
   1aaa8:	00820034 	movhi	r2,2048
   1aaac:	108a8704 	addi	r2,r2,10780
   1aab0:	e0bfff15 	stw	r2,-4(fp)
   1aab4:	e0bfff17 	ldw	r2,-4(fp)
}
   1aab8:	e037883a 	mov	sp,fp
   1aabc:	dfc00117 	ldw	ra,4(sp)
   1aac0:	df000017 	ldw	fp,0(sp)
   1aac4:	dec00204 	addi	sp,sp,8
   1aac8:	f800283a 	ret

0001aacc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1aacc:	defffa04 	addi	sp,sp,-24
   1aad0:	df000515 	stw	fp,20(sp)
   1aad4:	df000504 	addi	fp,sp,20
   1aad8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aadc:	0005303a 	rdctl	r2,status
   1aae0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aae4:	e0fffd17 	ldw	r3,-12(fp)
   1aae8:	00bfff84 	movi	r2,-2
   1aaec:	1884703a 	and	r2,r3,r2
   1aaf0:	1001703a 	wrctl	status,r2
  
  return context;
   1aaf4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1aaf8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1aafc:	e0bfff17 	ldw	r2,-4(fp)
   1ab00:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ab04:	e0bffc17 	ldw	r2,-16(fp)
   1ab08:	10c00017 	ldw	r3,0(r2)
   1ab0c:	e0bffc17 	ldw	r2,-16(fp)
   1ab10:	10800117 	ldw	r2,4(r2)
   1ab14:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1ab18:	e0bffc17 	ldw	r2,-16(fp)
   1ab1c:	10c00117 	ldw	r3,4(r2)
   1ab20:	e0bffc17 	ldw	r2,-16(fp)
   1ab24:	10800017 	ldw	r2,0(r2)
   1ab28:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1ab2c:	e0fffc17 	ldw	r3,-16(fp)
   1ab30:	e0bffc17 	ldw	r2,-16(fp)
   1ab34:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1ab38:	e0fffc17 	ldw	r3,-16(fp)
   1ab3c:	e0bffc17 	ldw	r2,-16(fp)
   1ab40:	18800015 	stw	r2,0(r3)
   1ab44:	e0bffe17 	ldw	r2,-8(fp)
   1ab48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab4c:	e0bffb17 	ldw	r2,-20(fp)
   1ab50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1ab54:	e037883a 	mov	sp,fp
   1ab58:	df000017 	ldw	fp,0(sp)
   1ab5c:	dec00104 	addi	sp,sp,4
   1ab60:	f800283a 	ret

0001ab64 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ab64:	defffb04 	addi	sp,sp,-20
   1ab68:	dfc00415 	stw	ra,16(sp)
   1ab6c:	df000315 	stw	fp,12(sp)
   1ab70:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ab74:	d0a01d17 	ldw	r2,-32652(gp)
   1ab78:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ab7c:	d0a05e17 	ldw	r2,-32392(gp)
   1ab80:	10800044 	addi	r2,r2,1
   1ab84:	d0a05e15 	stw	r2,-32392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ab88:	00003106 	br	1ac50 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ab8c:	e0bffe17 	ldw	r2,-8(fp)
   1ab90:	10800017 	ldw	r2,0(r2)
   1ab94:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ab98:	e0bffe17 	ldw	r2,-8(fp)
   1ab9c:	10800403 	ldbu	r2,16(r2)
   1aba0:	10803fcc 	andi	r2,r2,255
   1aba4:	1005003a 	cmpeq	r2,r2,zero
   1aba8:	1000051e 	bne	r2,zero,1abc0 <alt_tick+0x5c>
   1abac:	d0a05e17 	ldw	r2,-32392(gp)
   1abb0:	1004c03a 	cmpne	r2,r2,zero
   1abb4:	1000021e 	bne	r2,zero,1abc0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1abb8:	e0bffe17 	ldw	r2,-8(fp)
   1abbc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1abc0:	e0bffe17 	ldw	r2,-8(fp)
   1abc4:	10c00217 	ldw	r3,8(r2)
   1abc8:	d0a05e17 	ldw	r2,-32392(gp)
   1abcc:	10c01e36 	bltu	r2,r3,1ac48 <alt_tick+0xe4>
   1abd0:	e0bffe17 	ldw	r2,-8(fp)
   1abd4:	10800403 	ldbu	r2,16(r2)
   1abd8:	10803fcc 	andi	r2,r2,255
   1abdc:	1004c03a 	cmpne	r2,r2,zero
   1abe0:	1000191e 	bne	r2,zero,1ac48 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1abe4:	e0bffe17 	ldw	r2,-8(fp)
   1abe8:	10c00317 	ldw	r3,12(r2)
   1abec:	e0bffe17 	ldw	r2,-8(fp)
   1abf0:	11000517 	ldw	r4,20(r2)
   1abf4:	183ee83a 	callr	r3
   1abf8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1abfc:	e0bffd17 	ldw	r2,-12(fp)
   1ac00:	1004c03a 	cmpne	r2,r2,zero
   1ac04:	1000031e 	bne	r2,zero,1ac14 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1ac08:	e13ffe17 	ldw	r4,-8(fp)
   1ac0c:	001aacc0 	call	1aacc <alt_alarm_stop>
   1ac10:	00000d06 	br	1ac48 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1ac14:	e0bffe17 	ldw	r2,-8(fp)
   1ac18:	10c00217 	ldw	r3,8(r2)
   1ac1c:	e0bffd17 	ldw	r2,-12(fp)
   1ac20:	1887883a 	add	r3,r3,r2
   1ac24:	e0bffe17 	ldw	r2,-8(fp)
   1ac28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1ac2c:	e0bffe17 	ldw	r2,-8(fp)
   1ac30:	10c00217 	ldw	r3,8(r2)
   1ac34:	d0a05e17 	ldw	r2,-32392(gp)
   1ac38:	1880032e 	bgeu	r3,r2,1ac48 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1ac3c:	e0fffe17 	ldw	r3,-8(fp)
   1ac40:	00800044 	movi	r2,1
   1ac44:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1ac48:	e0bfff17 	ldw	r2,-4(fp)
   1ac4c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ac50:	d0e01d04 	addi	r3,gp,-32652
   1ac54:	e0bffe17 	ldw	r2,-8(fp)
   1ac58:	10ffcc1e 	bne	r2,r3,1ab8c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1ac5c:	e037883a 	mov	sp,fp
   1ac60:	dfc00117 	ldw	ra,4(sp)
   1ac64:	df000017 	ldw	fp,0(sp)
   1ac68:	dec00204 	addi	sp,sp,8
   1ac6c:	f800283a 	ret

0001ac70 <usleep>:
   1ac70:	defffd04 	addi	sp,sp,-12
   1ac74:	dfc00215 	stw	ra,8(sp)
   1ac78:	df000115 	stw	fp,4(sp)
   1ac7c:	df000104 	addi	fp,sp,4
   1ac80:	e13fff15 	stw	r4,-4(fp)
   1ac84:	e13fff17 	ldw	r4,-4(fp)
   1ac88:	001b5800 	call	1b580 <alt_busy_sleep>
   1ac8c:	e037883a 	mov	sp,fp
   1ac90:	dfc00117 	ldw	ra,4(sp)
   1ac94:	df000017 	ldw	fp,0(sp)
   1ac98:	dec00204 	addi	sp,sp,8
   1ac9c:	f800283a 	ret

0001aca0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1aca0:	deffff04 	addi	sp,sp,-4
   1aca4:	df000015 	stw	fp,0(sp)
   1aca8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1acac:	000170fa 	wrctl	ienable,zero
}
   1acb0:	e037883a 	mov	sp,fp
   1acb4:	df000017 	ldw	fp,0(sp)
   1acb8:	dec00104 	addi	sp,sp,4
   1acbc:	f800283a 	ret

0001acc0 <alt_program_amd>:
   1acc0:	defff704 	addi	sp,sp,-36
   1acc4:	dfc00815 	stw	ra,32(sp)
   1acc8:	df000715 	stw	fp,28(sp)
   1accc:	df000704 	addi	fp,sp,28
   1acd0:	e13ffc15 	stw	r4,-16(fp)
   1acd4:	e17ffd15 	stw	r5,-12(fp)
   1acd8:	e1bffe15 	stw	r6,-8(fp)
   1acdc:	e1ffff15 	stw	r7,-4(fp)
   1ace0:	e03ffb15 	stw	zero,-20(fp)
   1ace4:	e0bffc17 	ldw	r2,-16(fp)
   1ace8:	e0bffa15 	stw	r2,-24(fp)
   1acec:	e1bfff17 	ldw	r6,-4(fp)
   1acf0:	008000b4 	movhi	r2,2
   1acf4:	10ac1904 	addi	r2,r2,-20380
   1acf8:	d8800015 	stw	r2,0(sp)
   1acfc:	e13ffa17 	ldw	r4,-24(fp)
   1ad00:	e17ffe17 	ldw	r5,-8(fp)
   1ad04:	e1c00217 	ldw	r7,8(fp)
   1ad08:	00146380 	call	14638 <alt_flash_program_block>
   1ad0c:	e0bffb15 	stw	r2,-20(fp)
   1ad10:	e0bffb17 	ldw	r2,-20(fp)
   1ad14:	e037883a 	mov	sp,fp
   1ad18:	dfc00117 	ldw	ra,4(sp)
   1ad1c:	df000017 	ldw	fp,0(sp)
   1ad20:	dec00204 	addi	sp,sp,8
   1ad24:	f800283a 	ret

0001ad28 <alt_erase_block_amd>:
   1ad28:	defff804 	addi	sp,sp,-32
   1ad2c:	dfc00715 	stw	ra,28(sp)
   1ad30:	df000615 	stw	fp,24(sp)
   1ad34:	df000604 	addi	fp,sp,24
   1ad38:	e13ffe15 	stw	r4,-8(fp)
   1ad3c:	e17fff15 	stw	r5,-4(fp)
   1ad40:	e03ffc15 	stw	zero,-16(fp)
   1ad44:	e0bffe17 	ldw	r2,-8(fp)
   1ad48:	e0bffa15 	stw	r2,-24(fp)
   1ad4c:	e0bffa17 	ldw	r2,-24(fp)
   1ad50:	10c03317 	ldw	r3,204(r2)
   1ad54:	e0bffa17 	ldw	r2,-24(fp)
   1ad58:	11000a17 	ldw	r4,40(r2)
   1ad5c:	01415544 	movi	r5,1365
   1ad60:	01802a84 	movi	r6,170
   1ad64:	183ee83a 	callr	r3
   1ad68:	e0bffa17 	ldw	r2,-24(fp)
   1ad6c:	10c03317 	ldw	r3,204(r2)
   1ad70:	e0bffa17 	ldw	r2,-24(fp)
   1ad74:	11000a17 	ldw	r4,40(r2)
   1ad78:	0140aa84 	movi	r5,682
   1ad7c:	01801544 	movi	r6,85
   1ad80:	183ee83a 	callr	r3
   1ad84:	e0bffa17 	ldw	r2,-24(fp)
   1ad88:	10c03317 	ldw	r3,204(r2)
   1ad8c:	e0bffa17 	ldw	r2,-24(fp)
   1ad90:	11000a17 	ldw	r4,40(r2)
   1ad94:	01415544 	movi	r5,1365
   1ad98:	01802004 	movi	r6,128
   1ad9c:	183ee83a 	callr	r3
   1ada0:	e0bffa17 	ldw	r2,-24(fp)
   1ada4:	10c03317 	ldw	r3,204(r2)
   1ada8:	e0bffa17 	ldw	r2,-24(fp)
   1adac:	11000a17 	ldw	r4,40(r2)
   1adb0:	01415544 	movi	r5,1365
   1adb4:	01802a84 	movi	r6,170
   1adb8:	183ee83a 	callr	r3
   1adbc:	e0bffa17 	ldw	r2,-24(fp)
   1adc0:	10c03317 	ldw	r3,204(r2)
   1adc4:	e0bffa17 	ldw	r2,-24(fp)
   1adc8:	11000a17 	ldw	r4,40(r2)
   1adcc:	0140aa84 	movi	r5,682
   1add0:	01801544 	movi	r6,85
   1add4:	183ee83a 	callr	r3
   1add8:	e0bffa17 	ldw	r2,-24(fp)
   1addc:	11803517 	ldw	r6,212(r2)
   1ade0:	e0bffa17 	ldw	r2,-24(fp)
   1ade4:	10800a17 	ldw	r2,40(r2)
   1ade8:	1007883a 	mov	r3,r2
   1adec:	e0bfff17 	ldw	r2,-4(fp)
   1adf0:	1889883a 	add	r4,r3,r2
   1adf4:	01400c04 	movi	r5,48
   1adf8:	303ee83a 	callr	r6
   1adfc:	0109c404 	movi	r4,10000
   1ae00:	001ac700 	call	1ac70 <usleep>
   1ae04:	00800c84 	movi	r2,50
   1ae08:	e0bffb15 	stw	r2,-20(fp)
   1ae0c:	e0bffa17 	ldw	r2,-24(fp)
   1ae10:	10800a17 	ldw	r2,40(r2)
   1ae14:	1007883a 	mov	r3,r2
   1ae18:	e0bfff17 	ldw	r2,-4(fp)
   1ae1c:	1885883a 	add	r2,r3,r2
   1ae20:	10800023 	ldbuio	r2,0(r2)
   1ae24:	e0bffd05 	stb	r2,-12(fp)
   1ae28:	0100fa04 	movi	r4,1000
   1ae2c:	001ac700 	call	1ac70 <usleep>
   1ae30:	e0bffb17 	ldw	r2,-20(fp)
   1ae34:	10bfffc4 	addi	r2,r2,-1
   1ae38:	e0bffb15 	stw	r2,-20(fp)
   1ae3c:	e0bffd03 	ldbu	r2,-12(fp)
   1ae40:	10803fcc 	andi	r2,r2,255
   1ae44:	1080020c 	andi	r2,r2,8
   1ae48:	1004c03a 	cmpne	r2,r2,zero
   1ae4c:	1000031e 	bne	r2,zero,1ae5c <alt_erase_block_amd+0x134>
   1ae50:	e0bffb17 	ldw	r2,-20(fp)
   1ae54:	10800048 	cmpgei	r2,r2,1
   1ae58:	103fec1e 	bne	r2,zero,1ae0c <alt_erase_block_amd+0xe4>
   1ae5c:	e0bffa17 	ldw	r2,-24(fp)
   1ae60:	10803117 	ldw	r2,196(r2)
   1ae64:	e0bffb15 	stw	r2,-20(fp)
   1ae68:	00001706 	br	1aec8 <alt_erase_block_amd+0x1a0>
   1ae6c:	e0bffa17 	ldw	r2,-24(fp)
   1ae70:	10800a17 	ldw	r2,40(r2)
   1ae74:	1007883a 	mov	r3,r2
   1ae78:	e0bfff17 	ldw	r2,-4(fp)
   1ae7c:	1885883a 	add	r2,r3,r2
   1ae80:	10800023 	ldbuio	r2,0(r2)
   1ae84:	e0bffd05 	stb	r2,-12(fp)
   1ae88:	e0bffd03 	ldbu	r2,-12(fp)
   1ae8c:	10803fcc 	andi	r2,r2,255
   1ae90:	1080201c 	xori	r2,r2,128
   1ae94:	10bfe004 	addi	r2,r2,-128
   1ae98:	1004803a 	cmplt	r2,r2,zero
   1ae9c:	10000d1e 	bne	r2,zero,1aed4 <alt_erase_block_amd+0x1ac>
   1aea0:	e0bffd03 	ldbu	r2,-12(fp)
   1aea4:	10803fcc 	andi	r2,r2,255
   1aea8:	1080080c 	andi	r2,r2,32
   1aeac:	1004c03a 	cmpne	r2,r2,zero
   1aeb0:	1000081e 	bne	r2,zero,1aed4 <alt_erase_block_amd+0x1ac>
   1aeb4:	0100fa04 	movi	r4,1000
   1aeb8:	001ac700 	call	1ac70 <usleep>
   1aebc:	e0bffb17 	ldw	r2,-20(fp)
   1aec0:	10bf0604 	addi	r2,r2,-1000
   1aec4:	e0bffb15 	stw	r2,-20(fp)
   1aec8:	e0bffb17 	ldw	r2,-20(fp)
   1aecc:	10800048 	cmpgei	r2,r2,1
   1aed0:	103fe61e 	bne	r2,zero,1ae6c <alt_erase_block_amd+0x144>
   1aed4:	e0bffb17 	ldw	r2,-20(fp)
   1aed8:	10800048 	cmpgei	r2,r2,1
   1aedc:	1000031e 	bne	r2,zero,1aeec <alt_erase_block_amd+0x1c4>
   1aee0:	00bfe304 	movi	r2,-116
   1aee4:	e0bffc15 	stw	r2,-16(fp)
   1aee8:	00000f06 	br	1af28 <alt_erase_block_amd+0x200>
   1aeec:	e0bffa17 	ldw	r2,-24(fp)
   1aef0:	10800a17 	ldw	r2,40(r2)
   1aef4:	1007883a 	mov	r3,r2
   1aef8:	e0bfff17 	ldw	r2,-4(fp)
   1aefc:	1885883a 	add	r2,r3,r2
   1af00:	10800023 	ldbuio	r2,0(r2)
   1af04:	e0bffd05 	stb	r2,-12(fp)
   1af08:	e0bffd03 	ldbu	r2,-12(fp)
   1af0c:	10803fcc 	andi	r2,r2,255
   1af10:	1080201c 	xori	r2,r2,128
   1af14:	10bfe004 	addi	r2,r2,-128
   1af18:	1004803a 	cmplt	r2,r2,zero
   1af1c:	1000021e 	bne	r2,zero,1af28 <alt_erase_block_amd+0x200>
   1af20:	00bffec4 	movi	r2,-5
   1af24:	e0bffc15 	stw	r2,-16(fp)
   1af28:	e0bffc17 	ldw	r2,-16(fp)
   1af2c:	e037883a 	mov	sp,fp
   1af30:	dfc00117 	ldw	ra,4(sp)
   1af34:	df000017 	ldw	fp,0(sp)
   1af38:	dec00204 	addi	sp,sp,8
   1af3c:	f800283a 	ret

0001af40 <alt_wait_for_command_to_complete_amd>:
   1af40:	defff804 	addi	sp,sp,-32
   1af44:	dfc00715 	stw	ra,28(sp)
   1af48:	df000615 	stw	fp,24(sp)
   1af4c:	df000604 	addi	fp,sp,24
   1af50:	e13ffd15 	stw	r4,-12(fp)
   1af54:	e17ffe15 	stw	r5,-8(fp)
   1af58:	e1bfff05 	stb	r6,-4(fp)
   1af5c:	e0bffd17 	ldw	r2,-12(fp)
   1af60:	10803017 	ldw	r2,192(r2)
   1af64:	10801924 	muli	r2,r2,100
   1af68:	e0bffb15 	stw	r2,-20(fp)
   1af6c:	e03ffa15 	stw	zero,-24(fp)
   1af70:	e0bffd17 	ldw	r2,-12(fp)
   1af74:	10800a17 	ldw	r2,40(r2)
   1af78:	1007883a 	mov	r3,r2
   1af7c:	e0bffe17 	ldw	r2,-8(fp)
   1af80:	1885883a 	add	r2,r3,r2
   1af84:	10800023 	ldbuio	r2,0(r2)
   1af88:	e0bffc05 	stb	r2,-16(fp)
   1af8c:	00001706 	br	1afec <alt_wait_for_command_to_complete_amd+0xac>
   1af90:	e0bffc03 	ldbu	r2,-16(fp)
   1af94:	10803fcc 	andi	r2,r2,255
   1af98:	10c0200c 	andi	r3,r2,128
   1af9c:	e0bfff03 	ldbu	r2,-4(fp)
   1afa0:	1080200c 	andi	r2,r2,128
   1afa4:	18801426 	beq	r3,r2,1aff8 <alt_wait_for_command_to_complete_amd+0xb8>
   1afa8:	e0bffc03 	ldbu	r2,-16(fp)
   1afac:	10803fcc 	andi	r2,r2,255
   1afb0:	1080080c 	andi	r2,r2,32
   1afb4:	1004c03a 	cmpne	r2,r2,zero
   1afb8:	10000f1e 	bne	r2,zero,1aff8 <alt_wait_for_command_to_complete_amd+0xb8>
   1afbc:	01000044 	movi	r4,1
   1afc0:	001ac700 	call	1ac70 <usleep>
   1afc4:	e0bffb17 	ldw	r2,-20(fp)
   1afc8:	10bfffc4 	addi	r2,r2,-1
   1afcc:	e0bffb15 	stw	r2,-20(fp)
   1afd0:	e0bffd17 	ldw	r2,-12(fp)
   1afd4:	10800a17 	ldw	r2,40(r2)
   1afd8:	1007883a 	mov	r3,r2
   1afdc:	e0bffe17 	ldw	r2,-8(fp)
   1afe0:	1885883a 	add	r2,r3,r2
   1afe4:	10800023 	ldbuio	r2,0(r2)
   1afe8:	e0bffc05 	stb	r2,-16(fp)
   1afec:	e0bffb17 	ldw	r2,-20(fp)
   1aff0:	10800048 	cmpgei	r2,r2,1
   1aff4:	103fe61e 	bne	r2,zero,1af90 <alt_wait_for_command_to_complete_amd+0x50>
   1aff8:	e0bffb17 	ldw	r2,-20(fp)
   1affc:	1004c03a 	cmpne	r2,r2,zero
   1b000:	1000031e 	bne	r2,zero,1b010 <alt_wait_for_command_to_complete_amd+0xd0>
   1b004:	00bfe304 	movi	r2,-116
   1b008:	e0bffa15 	stw	r2,-24(fp)
   1b00c:	00000f06 	br	1b04c <alt_wait_for_command_to_complete_amd+0x10c>
   1b010:	e0bffd17 	ldw	r2,-12(fp)
   1b014:	10800a17 	ldw	r2,40(r2)
   1b018:	1007883a 	mov	r3,r2
   1b01c:	e0bffe17 	ldw	r2,-8(fp)
   1b020:	1885883a 	add	r2,r3,r2
   1b024:	10800023 	ldbuio	r2,0(r2)
   1b028:	e0bffc05 	stb	r2,-16(fp)
   1b02c:	e0bffc03 	ldbu	r2,-16(fp)
   1b030:	10803fcc 	andi	r2,r2,255
   1b034:	10c0200c 	andi	r3,r2,128
   1b038:	e0bfff03 	ldbu	r2,-4(fp)
   1b03c:	1080200c 	andi	r2,r2,128
   1b040:	18800226 	beq	r3,r2,1b04c <alt_wait_for_command_to_complete_amd+0x10c>
   1b044:	00bffec4 	movi	r2,-5
   1b048:	e0bffa15 	stw	r2,-24(fp)
   1b04c:	e0bffa17 	ldw	r2,-24(fp)
   1b050:	e037883a 	mov	sp,fp
   1b054:	dfc00117 	ldw	ra,4(sp)
   1b058:	df000017 	ldw	fp,0(sp)
   1b05c:	dec00204 	addi	sp,sp,8
   1b060:	f800283a 	ret

0001b064 <alt_write_word_amd>:
   1b064:	defff904 	addi	sp,sp,-28
   1b068:	dfc00615 	stw	ra,24(sp)
   1b06c:	df000515 	stw	fp,20(sp)
   1b070:	df000504 	addi	fp,sp,20
   1b074:	e13ffd15 	stw	r4,-12(fp)
   1b078:	e17ffe15 	stw	r5,-8(fp)
   1b07c:	e1bfff15 	stw	r6,-4(fp)
   1b080:	e03ffc15 	stw	zero,-16(fp)
   1b084:	e0bffd17 	ldw	r2,-12(fp)
   1b088:	10c03317 	ldw	r3,204(r2)
   1b08c:	e0bffd17 	ldw	r2,-12(fp)
   1b090:	11000a17 	ldw	r4,40(r2)
   1b094:	01415544 	movi	r5,1365
   1b098:	01802a84 	movi	r6,170
   1b09c:	183ee83a 	callr	r3
   1b0a0:	e0bffd17 	ldw	r2,-12(fp)
   1b0a4:	10c03317 	ldw	r3,204(r2)
   1b0a8:	e0bffd17 	ldw	r2,-12(fp)
   1b0ac:	11000a17 	ldw	r4,40(r2)
   1b0b0:	0140aa84 	movi	r5,682
   1b0b4:	01801544 	movi	r6,85
   1b0b8:	183ee83a 	callr	r3
   1b0bc:	e0bffd17 	ldw	r2,-12(fp)
   1b0c0:	10c03317 	ldw	r3,204(r2)
   1b0c4:	e0bffd17 	ldw	r2,-12(fp)
   1b0c8:	11000a17 	ldw	r4,40(r2)
   1b0cc:	01415544 	movi	r5,1365
   1b0d0:	01802804 	movi	r6,160
   1b0d4:	183ee83a 	callr	r3
   1b0d8:	e0bfff17 	ldw	r2,-4(fp)
   1b0dc:	10800003 	ldbu	r2,0(r2)
   1b0e0:	e0bffb05 	stb	r2,-20(fp)
   1b0e4:	e13ffd17 	ldw	r4,-12(fp)
   1b0e8:	e17ffe17 	ldw	r5,-8(fp)
   1b0ec:	e1bfff17 	ldw	r6,-4(fp)
   1b0f0:	00144d40 	call	144d4 <alt_write_value_to_flash>
   1b0f4:	e1bffb03 	ldbu	r6,-20(fp)
   1b0f8:	e13ffd17 	ldw	r4,-12(fp)
   1b0fc:	e17ffe17 	ldw	r5,-8(fp)
   1b100:	001af400 	call	1af40 <alt_wait_for_command_to_complete_amd>
   1b104:	e0bffc15 	stw	r2,-16(fp)
   1b108:	e0bffc17 	ldw	r2,-16(fp)
   1b10c:	e037883a 	mov	sp,fp
   1b110:	dfc00117 	ldw	ra,4(sp)
   1b114:	df000017 	ldw	fp,0(sp)
   1b118:	dec00204 	addi	sp,sp,8
   1b11c:	f800283a 	ret

0001b120 <alt_program_intel>:
   1b120:	defff704 	addi	sp,sp,-36
   1b124:	dfc00815 	stw	ra,32(sp)
   1b128:	df000715 	stw	fp,28(sp)
   1b12c:	df000704 	addi	fp,sp,28
   1b130:	e13ffc15 	stw	r4,-16(fp)
   1b134:	e17ffd15 	stw	r5,-12(fp)
   1b138:	e1bffe15 	stw	r6,-8(fp)
   1b13c:	e1ffff15 	stw	r7,-4(fp)
   1b140:	e03ffb15 	stw	zero,-20(fp)
   1b144:	e0bffc17 	ldw	r2,-16(fp)
   1b148:	e0bffa15 	stw	r2,-24(fp)
   1b14c:	e13ffa17 	ldw	r4,-24(fp)
   1b150:	e17ffd17 	ldw	r5,-12(fp)
   1b154:	001b3180 	call	1b318 <alt_unlock_block_intel>
   1b158:	e0bffb15 	stw	r2,-20(fp)
   1b15c:	e0bffb17 	ldw	r2,-20(fp)
   1b160:	1004c03a 	cmpne	r2,r2,zero
   1b164:	1000091e 	bne	r2,zero,1b18c <alt_program_intel+0x6c>
   1b168:	e1bfff17 	ldw	r6,-4(fp)
   1b16c:	008000b4 	movhi	r2,2
   1b170:	10ad2904 	addi	r2,r2,-19292
   1b174:	d8800015 	stw	r2,0(sp)
   1b178:	e13ffa17 	ldw	r4,-24(fp)
   1b17c:	e17ffe17 	ldw	r5,-8(fp)
   1b180:	e1c00217 	ldw	r7,8(fp)
   1b184:	00146380 	call	14638 <alt_flash_program_block>
   1b188:	e0bffb15 	stw	r2,-20(fp)
   1b18c:	e0bffb17 	ldw	r2,-20(fp)
   1b190:	e037883a 	mov	sp,fp
   1b194:	dfc00117 	ldw	ra,4(sp)
   1b198:	df000017 	ldw	fp,0(sp)
   1b19c:	dec00204 	addi	sp,sp,8
   1b1a0:	f800283a 	ret

0001b1a4 <alt_erase_block_intel>:
   1b1a4:	defff804 	addi	sp,sp,-32
   1b1a8:	dfc00715 	stw	ra,28(sp)
   1b1ac:	df000615 	stw	fp,24(sp)
   1b1b0:	df000604 	addi	fp,sp,24
   1b1b4:	e13ffe15 	stw	r4,-8(fp)
   1b1b8:	e17fff15 	stw	r5,-4(fp)
   1b1bc:	e03ffc15 	stw	zero,-16(fp)
   1b1c0:	e0bffe17 	ldw	r2,-8(fp)
   1b1c4:	e0bffb15 	stw	r2,-20(fp)
   1b1c8:	e0bffb17 	ldw	r2,-20(fp)
   1b1cc:	10803117 	ldw	r2,196(r2)
   1b1d0:	e0bffa15 	stw	r2,-24(fp)
   1b1d4:	e13ffb17 	ldw	r4,-20(fp)
   1b1d8:	e17fff17 	ldw	r5,-4(fp)
   1b1dc:	001b3180 	call	1b318 <alt_unlock_block_intel>
   1b1e0:	e0bffc15 	stw	r2,-16(fp)
   1b1e4:	e0bffc17 	ldw	r2,-16(fp)
   1b1e8:	1004c03a 	cmpne	r2,r2,zero
   1b1ec:	1000441e 	bne	r2,zero,1b300 <alt_erase_block_intel+0x15c>
   1b1f0:	e0bffb17 	ldw	r2,-20(fp)
   1b1f4:	11803517 	ldw	r6,212(r2)
   1b1f8:	e0bffb17 	ldw	r2,-20(fp)
   1b1fc:	10800a17 	ldw	r2,40(r2)
   1b200:	1007883a 	mov	r3,r2
   1b204:	e0bfff17 	ldw	r2,-4(fp)
   1b208:	1889883a 	add	r4,r3,r2
   1b20c:	01400804 	movi	r5,32
   1b210:	303ee83a 	callr	r6
   1b214:	e0bffb17 	ldw	r2,-20(fp)
   1b218:	11803517 	ldw	r6,212(r2)
   1b21c:	e0bffb17 	ldw	r2,-20(fp)
   1b220:	10800a17 	ldw	r2,40(r2)
   1b224:	1007883a 	mov	r3,r2
   1b228:	e0bfff17 	ldw	r2,-4(fp)
   1b22c:	1889883a 	add	r4,r3,r2
   1b230:	01403404 	movi	r5,208
   1b234:	303ee83a 	callr	r6
   1b238:	e0bffb17 	ldw	r2,-20(fp)
   1b23c:	10800a17 	ldw	r2,40(r2)
   1b240:	1007883a 	mov	r3,r2
   1b244:	e0bfff17 	ldw	r2,-4(fp)
   1b248:	1885883a 	add	r2,r3,r2
   1b24c:	10800023 	ldbuio	r2,0(r2)
   1b250:	e0bffd05 	stb	r2,-12(fp)
   1b254:	e0bffd03 	ldbu	r2,-12(fp)
   1b258:	10803fcc 	andi	r2,r2,255
   1b25c:	1080201c 	xori	r2,r2,128
   1b260:	10bfe004 	addi	r2,r2,-128
   1b264:	1004803a 	cmplt	r2,r2,zero
   1b268:	1000081e 	bne	r2,zero,1b28c <alt_erase_block_intel+0xe8>
   1b26c:	0100fa04 	movi	r4,1000
   1b270:	001ac700 	call	1ac70 <usleep>
   1b274:	e0bffa17 	ldw	r2,-24(fp)
   1b278:	10bf0604 	addi	r2,r2,-1000
   1b27c:	e0bffa15 	stw	r2,-24(fp)
   1b280:	e0bffa17 	ldw	r2,-24(fp)
   1b284:	10800048 	cmpgei	r2,r2,1
   1b288:	103feb1e 	bne	r2,zero,1b238 <alt_erase_block_intel+0x94>
   1b28c:	e0bffa17 	ldw	r2,-24(fp)
   1b290:	10800048 	cmpgei	r2,r2,1
   1b294:	1000031e 	bne	r2,zero,1b2a4 <alt_erase_block_intel+0x100>
   1b298:	00bfe304 	movi	r2,-116
   1b29c:	e0bffc15 	stw	r2,-16(fp)
   1b2a0:	00000e06 	br	1b2dc <alt_erase_block_intel+0x138>
   1b2a4:	e0bffd03 	ldbu	r2,-12(fp)
   1b2a8:	10803fcc 	andi	r2,r2,255
   1b2ac:	10801fcc 	andi	r2,r2,127
   1b2b0:	1005003a 	cmpeq	r2,r2,zero
   1b2b4:	1000091e 	bne	r2,zero,1b2dc <alt_erase_block_intel+0x138>
   1b2b8:	00bffec4 	movi	r2,-5
   1b2bc:	e0bffc15 	stw	r2,-16(fp)
   1b2c0:	e0bffb17 	ldw	r2,-20(fp)
   1b2c4:	10800a17 	ldw	r2,40(r2)
   1b2c8:	1007883a 	mov	r3,r2
   1b2cc:	e0bfff17 	ldw	r2,-4(fp)
   1b2d0:	1885883a 	add	r2,r3,r2
   1b2d4:	10800023 	ldbuio	r2,0(r2)
   1b2d8:	e0bffd05 	stb	r2,-12(fp)
   1b2dc:	e0bffb17 	ldw	r2,-20(fp)
   1b2e0:	11803517 	ldw	r6,212(r2)
   1b2e4:	e0bffb17 	ldw	r2,-20(fp)
   1b2e8:	10800a17 	ldw	r2,40(r2)
   1b2ec:	1007883a 	mov	r3,r2
   1b2f0:	e0bfff17 	ldw	r2,-4(fp)
   1b2f4:	1889883a 	add	r4,r3,r2
   1b2f8:	01403fc4 	movi	r5,255
   1b2fc:	303ee83a 	callr	r6
   1b300:	e0bffc17 	ldw	r2,-16(fp)
   1b304:	e037883a 	mov	sp,fp
   1b308:	dfc00117 	ldw	ra,4(sp)
   1b30c:	df000017 	ldw	fp,0(sp)
   1b310:	dec00204 	addi	sp,sp,8
   1b314:	f800283a 	ret

0001b318 <alt_unlock_block_intel>:
   1b318:	defff904 	addi	sp,sp,-28
   1b31c:	dfc00615 	stw	ra,24(sp)
   1b320:	df000515 	stw	fp,20(sp)
   1b324:	df000504 	addi	fp,sp,20
   1b328:	e13ffe15 	stw	r4,-8(fp)
   1b32c:	e17fff15 	stw	r5,-4(fp)
   1b330:	e03ffc15 	stw	zero,-16(fp)
   1b334:	e0bffe17 	ldw	r2,-8(fp)
   1b338:	10803017 	ldw	r2,192(r2)
   1b33c:	10801924 	muli	r2,r2,100
   1b340:	e0bffb15 	stw	r2,-20(fp)
   1b344:	e0bffe17 	ldw	r2,-8(fp)
   1b348:	11803517 	ldw	r6,212(r2)
   1b34c:	e0bffe17 	ldw	r2,-8(fp)
   1b350:	10800a17 	ldw	r2,40(r2)
   1b354:	1007883a 	mov	r3,r2
   1b358:	e0bfff17 	ldw	r2,-4(fp)
   1b35c:	1889883a 	add	r4,r3,r2
   1b360:	01402404 	movi	r5,144
   1b364:	303ee83a 	callr	r6
   1b368:	e0bffe17 	ldw	r2,-8(fp)
   1b36c:	10800a17 	ldw	r2,40(r2)
   1b370:	1007883a 	mov	r3,r2
   1b374:	e0bfff17 	ldw	r2,-4(fp)
   1b378:	1885883a 	add	r2,r3,r2
   1b37c:	10800104 	addi	r2,r2,4
   1b380:	10800023 	ldbuio	r2,0(r2)
   1b384:	e0bffd45 	stb	r2,-11(fp)
   1b388:	e0bffd43 	ldbu	r2,-11(fp)
   1b38c:	1080004c 	andi	r2,r2,1
   1b390:	10803fcc 	andi	r2,r2,255
   1b394:	1005003a 	cmpeq	r2,r2,zero
   1b398:	1000331e 	bne	r2,zero,1b468 <alt_unlock_block_intel+0x150>
   1b39c:	e0bffe17 	ldw	r2,-8(fp)
   1b3a0:	11803517 	ldw	r6,212(r2)
   1b3a4:	e0bffe17 	ldw	r2,-8(fp)
   1b3a8:	10800a17 	ldw	r2,40(r2)
   1b3ac:	1007883a 	mov	r3,r2
   1b3b0:	e0bfff17 	ldw	r2,-4(fp)
   1b3b4:	1889883a 	add	r4,r3,r2
   1b3b8:	01401804 	movi	r5,96
   1b3bc:	303ee83a 	callr	r6
   1b3c0:	e0bffe17 	ldw	r2,-8(fp)
   1b3c4:	11803517 	ldw	r6,212(r2)
   1b3c8:	e0bffe17 	ldw	r2,-8(fp)
   1b3cc:	10800a17 	ldw	r2,40(r2)
   1b3d0:	1007883a 	mov	r3,r2
   1b3d4:	e0bfff17 	ldw	r2,-4(fp)
   1b3d8:	1889883a 	add	r4,r3,r2
   1b3dc:	01403404 	movi	r5,208
   1b3e0:	303ee83a 	callr	r6
   1b3e4:	e0bffe17 	ldw	r2,-8(fp)
   1b3e8:	10800a17 	ldw	r2,40(r2)
   1b3ec:	1007883a 	mov	r3,r2
   1b3f0:	e0bfff17 	ldw	r2,-4(fp)
   1b3f4:	1885883a 	add	r2,r3,r2
   1b3f8:	10800023 	ldbuio	r2,0(r2)
   1b3fc:	e0bffd05 	stb	r2,-12(fp)
   1b400:	e0bffd03 	ldbu	r2,-12(fp)
   1b404:	10803fcc 	andi	r2,r2,255
   1b408:	1080201c 	xori	r2,r2,128
   1b40c:	10bfe004 	addi	r2,r2,-128
   1b410:	1004803a 	cmplt	r2,r2,zero
   1b414:	1000081e 	bne	r2,zero,1b438 <alt_unlock_block_intel+0x120>
   1b418:	e0bffb17 	ldw	r2,-20(fp)
   1b41c:	10bfffc4 	addi	r2,r2,-1
   1b420:	e0bffb15 	stw	r2,-20(fp)
   1b424:	01000044 	movi	r4,1
   1b428:	001ac700 	call	1ac70 <usleep>
   1b42c:	e0bffb17 	ldw	r2,-20(fp)
   1b430:	10800048 	cmpgei	r2,r2,1
   1b434:	103feb1e 	bne	r2,zero,1b3e4 <alt_unlock_block_intel+0xcc>
   1b438:	e0bffb17 	ldw	r2,-20(fp)
   1b43c:	1004c03a 	cmpne	r2,r2,zero
   1b440:	1000031e 	bne	r2,zero,1b450 <alt_unlock_block_intel+0x138>
   1b444:	00bfe304 	movi	r2,-116
   1b448:	e0bffc15 	stw	r2,-16(fp)
   1b44c:	00000606 	br	1b468 <alt_unlock_block_intel+0x150>
   1b450:	e0bffd03 	ldbu	r2,-12(fp)
   1b454:	10801fcc 	andi	r2,r2,127
   1b458:	1005003a 	cmpeq	r2,r2,zero
   1b45c:	1000021e 	bne	r2,zero,1b468 <alt_unlock_block_intel+0x150>
   1b460:	00bffec4 	movi	r2,-5
   1b464:	e0bffc15 	stw	r2,-16(fp)
   1b468:	e0bffe17 	ldw	r2,-8(fp)
   1b46c:	11803517 	ldw	r6,212(r2)
   1b470:	e0bffe17 	ldw	r2,-8(fp)
   1b474:	10800a17 	ldw	r2,40(r2)
   1b478:	1007883a 	mov	r3,r2
   1b47c:	e0bfff17 	ldw	r2,-4(fp)
   1b480:	1889883a 	add	r4,r3,r2
   1b484:	01403fc4 	movi	r5,255
   1b488:	303ee83a 	callr	r6
   1b48c:	e0bffc17 	ldw	r2,-16(fp)
   1b490:	e037883a 	mov	sp,fp
   1b494:	dfc00117 	ldw	ra,4(sp)
   1b498:	df000017 	ldw	fp,0(sp)
   1b49c:	dec00204 	addi	sp,sp,8
   1b4a0:	f800283a 	ret

0001b4a4 <alt_write_word_intel>:
   1b4a4:	defff904 	addi	sp,sp,-28
   1b4a8:	dfc00615 	stw	ra,24(sp)
   1b4ac:	df000515 	stw	fp,20(sp)
   1b4b0:	df000504 	addi	fp,sp,20
   1b4b4:	e13ffd15 	stw	r4,-12(fp)
   1b4b8:	e17ffe15 	stw	r5,-8(fp)
   1b4bc:	e1bfff15 	stw	r6,-4(fp)
   1b4c0:	e03ffc15 	stw	zero,-16(fp)
   1b4c4:	e0bffd17 	ldw	r2,-12(fp)
   1b4c8:	11803517 	ldw	r6,212(r2)
   1b4cc:	e0bffd17 	ldw	r2,-12(fp)
   1b4d0:	10800a17 	ldw	r2,40(r2)
   1b4d4:	1007883a 	mov	r3,r2
   1b4d8:	e0bffe17 	ldw	r2,-8(fp)
   1b4dc:	1889883a 	add	r4,r3,r2
   1b4e0:	01401004 	movi	r5,64
   1b4e4:	303ee83a 	callr	r6
   1b4e8:	e13ffd17 	ldw	r4,-12(fp)
   1b4ec:	e17ffe17 	ldw	r5,-8(fp)
   1b4f0:	e1bfff17 	ldw	r6,-4(fp)
   1b4f4:	00144d40 	call	144d4 <alt_write_value_to_flash>
   1b4f8:	e0bffd17 	ldw	r2,-12(fp)
   1b4fc:	10800a17 	ldw	r2,40(r2)
   1b500:	1007883a 	mov	r3,r2
   1b504:	e0bffe17 	ldw	r2,-8(fp)
   1b508:	1885883a 	add	r2,r3,r2
   1b50c:	10800023 	ldbuio	r2,0(r2)
   1b510:	e0bffb05 	stb	r2,-20(fp)
   1b514:	e0bffb03 	ldbu	r2,-20(fp)
   1b518:	10803fcc 	andi	r2,r2,255
   1b51c:	1080201c 	xori	r2,r2,128
   1b520:	10bfe004 	addi	r2,r2,-128
   1b524:	1004403a 	cmpge	r2,r2,zero
   1b528:	103ff31e 	bne	r2,zero,1b4f8 <alt_write_word_intel+0x54>
   1b52c:	e0bffb03 	ldbu	r2,-20(fp)
   1b530:	10801fcc 	andi	r2,r2,127
   1b534:	1005003a 	cmpeq	r2,r2,zero
   1b538:	1000021e 	bne	r2,zero,1b544 <alt_write_word_intel+0xa0>
   1b53c:	00bffec4 	movi	r2,-5
   1b540:	e0bffc15 	stw	r2,-16(fp)
   1b544:	e0bffd17 	ldw	r2,-12(fp)
   1b548:	11803517 	ldw	r6,212(r2)
   1b54c:	e0bffd17 	ldw	r2,-12(fp)
   1b550:	10800a17 	ldw	r2,40(r2)
   1b554:	1007883a 	mov	r3,r2
   1b558:	e0bffe17 	ldw	r2,-8(fp)
   1b55c:	1889883a 	add	r4,r3,r2
   1b560:	01403fc4 	movi	r5,255
   1b564:	303ee83a 	callr	r6
   1b568:	e0bffc17 	ldw	r2,-16(fp)
   1b56c:	e037883a 	mov	sp,fp
   1b570:	dfc00117 	ldw	ra,4(sp)
   1b574:	df000017 	ldw	fp,0(sp)
   1b578:	dec00204 	addi	sp,sp,8
   1b57c:	f800283a 	ret

0001b580 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1b580:	defffb04 	addi	sp,sp,-20
   1b584:	df000415 	stw	fp,16(sp)
   1b588:	df000404 	addi	fp,sp,16
   1b58c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   1b590:	008000c4 	movi	r2,3
   1b594:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   1b598:	e0fffc17 	ldw	r3,-16(fp)
   1b59c:	008003f4 	movhi	r2,15
   1b5a0:	10909004 	addi	r2,r2,16960
   1b5a4:	1887383a 	mul	r3,r3,r2
   1b5a8:	00817db4 	movhi	r2,1526
   1b5ac:	10b84004 	addi	r2,r2,-7936
   1b5b0:	10c7203a 	divu	r3,r2,r3
   1b5b4:	00a00034 	movhi	r2,32768
   1b5b8:	10bfffc4 	addi	r2,r2,-1
   1b5bc:	10c7203a 	divu	r3,r2,r3
   1b5c0:	e0bfff17 	ldw	r2,-4(fp)
   1b5c4:	10c5203a 	divu	r2,r2,r3
   1b5c8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1b5cc:	e0bffd17 	ldw	r2,-12(fp)
   1b5d0:	1005003a 	cmpeq	r2,r2,zero
   1b5d4:	1000251e 	bne	r2,zero,1b66c <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   1b5d8:	e03ffe15 	stw	zero,-8(fp)
   1b5dc:	00001406 	br	1b630 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1b5e0:	00a00034 	movhi	r2,32768
   1b5e4:	10bfffc4 	addi	r2,r2,-1
   1b5e8:	10bfffc4 	addi	r2,r2,-1
   1b5ec:	103ffe1e 	bne	r2,zero,1b5e8 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1b5f0:	e0fffc17 	ldw	r3,-16(fp)
   1b5f4:	008003f4 	movhi	r2,15
   1b5f8:	10909004 	addi	r2,r2,16960
   1b5fc:	1887383a 	mul	r3,r3,r2
   1b600:	00817db4 	movhi	r2,1526
   1b604:	10b84004 	addi	r2,r2,-7936
   1b608:	10c7203a 	divu	r3,r2,r3
   1b60c:	00a00034 	movhi	r2,32768
   1b610:	10bfffc4 	addi	r2,r2,-1
   1b614:	10c7203a 	divu	r3,r2,r3
   1b618:	e0bfff17 	ldw	r2,-4(fp)
   1b61c:	10c5c83a 	sub	r2,r2,r3
   1b620:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1b624:	e0bffe17 	ldw	r2,-8(fp)
   1b628:	10800044 	addi	r2,r2,1
   1b62c:	e0bffe15 	stw	r2,-8(fp)
   1b630:	e0fffe17 	ldw	r3,-8(fp)
   1b634:	e0bffd17 	ldw	r2,-12(fp)
   1b638:	18bfe916 	blt	r3,r2,1b5e0 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1b63c:	e0fffc17 	ldw	r3,-16(fp)
   1b640:	008003f4 	movhi	r2,15
   1b644:	10909004 	addi	r2,r2,16960
   1b648:	1887383a 	mul	r3,r3,r2
   1b64c:	00817db4 	movhi	r2,1526
   1b650:	10b84004 	addi	r2,r2,-7936
   1b654:	10c7203a 	divu	r3,r2,r3
   1b658:	e0bfff17 	ldw	r2,-4(fp)
   1b65c:	1885383a 	mul	r2,r3,r2
   1b660:	10bfffc4 	addi	r2,r2,-1
   1b664:	103ffe1e 	bne	r2,zero,1b660 <alt_busy_sleep+0xe0>
   1b668:	00000b06 	br	1b698 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1b66c:	e0fffc17 	ldw	r3,-16(fp)
   1b670:	008003f4 	movhi	r2,15
   1b674:	10909004 	addi	r2,r2,16960
   1b678:	1887383a 	mul	r3,r3,r2
   1b67c:	00817db4 	movhi	r2,1526
   1b680:	10b84004 	addi	r2,r2,-7936
   1b684:	10c7203a 	divu	r3,r2,r3
   1b688:	e0bfff17 	ldw	r2,-4(fp)
   1b68c:	1885383a 	mul	r2,r3,r2
   1b690:	10bfffc4 	addi	r2,r2,-1
   1b694:	00bffe16 	blt	zero,r2,1b690 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1b698:	0005883a 	mov	r2,zero
}
   1b69c:	e037883a 	mov	sp,fp
   1b6a0:	df000017 	ldw	fp,0(sp)
   1b6a4:	dec00104 	addi	sp,sp,4
   1b6a8:	f800283a 	ret

0001b6ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1b6ac:	defffa04 	addi	sp,sp,-24
   1b6b0:	dfc00515 	stw	ra,20(sp)
   1b6b4:	df000415 	stw	fp,16(sp)
   1b6b8:	df000404 	addi	fp,sp,16
   1b6bc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1b6c0:	00820034 	movhi	r2,2048
   1b6c4:	108a4104 	addi	r2,r2,10500
   1b6c8:	10800017 	ldw	r2,0(r2)
   1b6cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b6d0:	00003306 	br	1b7a0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1b6d4:	e0bffd17 	ldw	r2,-12(fp)
   1b6d8:	11000217 	ldw	r4,8(r2)
   1b6dc:	00086700 	call	8670 <strlen>
   1b6e0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1b6e4:	e0bffd17 	ldw	r2,-12(fp)
   1b6e8:	10c00217 	ldw	r3,8(r2)
   1b6ec:	e0bffc17 	ldw	r2,-16(fp)
   1b6f0:	1885883a 	add	r2,r3,r2
   1b6f4:	10bfffc4 	addi	r2,r2,-1
   1b6f8:	10800003 	ldbu	r2,0(r2)
   1b6fc:	10803fcc 	andi	r2,r2,255
   1b700:	1080201c 	xori	r2,r2,128
   1b704:	10bfe004 	addi	r2,r2,-128
   1b708:	10800bd8 	cmpnei	r2,r2,47
   1b70c:	1000031e 	bne	r2,zero,1b71c <alt_find_file+0x70>
    {
      len -= 1;
   1b710:	e0bffc17 	ldw	r2,-16(fp)
   1b714:	10bfffc4 	addi	r2,r2,-1
   1b718:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b71c:	e0bffc17 	ldw	r2,-16(fp)
   1b720:	1007883a 	mov	r3,r2
   1b724:	e0bffe17 	ldw	r2,-8(fp)
   1b728:	1885883a 	add	r2,r3,r2
   1b72c:	10800003 	ldbu	r2,0(r2)
   1b730:	10803fcc 	andi	r2,r2,255
   1b734:	1080201c 	xori	r2,r2,128
   1b738:	10bfe004 	addi	r2,r2,-128
   1b73c:	10800be0 	cmpeqi	r2,r2,47
   1b740:	10000a1e 	bne	r2,zero,1b76c <alt_find_file+0xc0>
   1b744:	e0bffc17 	ldw	r2,-16(fp)
   1b748:	1007883a 	mov	r3,r2
   1b74c:	e0bffe17 	ldw	r2,-8(fp)
   1b750:	1885883a 	add	r2,r3,r2
   1b754:	10800003 	ldbu	r2,0(r2)
   1b758:	10803fcc 	andi	r2,r2,255
   1b75c:	1080201c 	xori	r2,r2,128
   1b760:	10bfe004 	addi	r2,r2,-128
   1b764:	1004c03a 	cmpne	r2,r2,zero
   1b768:	10000a1e 	bne	r2,zero,1b794 <alt_find_file+0xe8>
   1b76c:	e0bffd17 	ldw	r2,-12(fp)
   1b770:	11000217 	ldw	r4,8(r2)
   1b774:	e1bffc17 	ldw	r6,-16(fp)
   1b778:	e17ffe17 	ldw	r5,-8(fp)
   1b77c:	00082a00 	call	82a0 <memcmp>
   1b780:	1004c03a 	cmpne	r2,r2,zero
   1b784:	1000031e 	bne	r2,zero,1b794 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1b788:	e0bffd17 	ldw	r2,-12(fp)
   1b78c:	e0bfff15 	stw	r2,-4(fp)
   1b790:	00000806 	br	1b7b4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1b794:	e0bffd17 	ldw	r2,-12(fp)
   1b798:	10800017 	ldw	r2,0(r2)
   1b79c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b7a0:	00c20034 	movhi	r3,2048
   1b7a4:	18ca4104 	addi	r3,r3,10500
   1b7a8:	e0bffd17 	ldw	r2,-12(fp)
   1b7ac:	10ffc91e 	bne	r2,r3,1b6d4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1b7b0:	e03fff15 	stw	zero,-4(fp)
   1b7b4:	e0bfff17 	ldw	r2,-4(fp)
}
   1b7b8:	e037883a 	mov	sp,fp
   1b7bc:	dfc00117 	ldw	ra,4(sp)
   1b7c0:	df000017 	ldw	fp,0(sp)
   1b7c4:	dec00204 	addi	sp,sp,8
   1b7c8:	f800283a 	ret

0001b7cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1b7cc:	defffc04 	addi	sp,sp,-16
   1b7d0:	df000315 	stw	fp,12(sp)
   1b7d4:	df000304 	addi	fp,sp,12
   1b7d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1b7dc:	00bffa04 	movi	r2,-24
   1b7e0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b7e4:	e03ffe15 	stw	zero,-8(fp)
   1b7e8:	00001e06 	br	1b864 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   1b7ec:	e0bffe17 	ldw	r2,-8(fp)
   1b7f0:	00c20034 	movhi	r3,2048
   1b7f4:	18c4d304 	addi	r3,r3,4940
   1b7f8:	10800324 	muli	r2,r2,12
   1b7fc:	10c5883a 	add	r2,r2,r3
   1b800:	10800017 	ldw	r2,0(r2)
   1b804:	1004c03a 	cmpne	r2,r2,zero
   1b808:	1000131e 	bne	r2,zero,1b858 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   1b80c:	e0bffe17 	ldw	r2,-8(fp)
   1b810:	00c20034 	movhi	r3,2048
   1b814:	18c4d304 	addi	r3,r3,4940
   1b818:	10800324 	muli	r2,r2,12
   1b81c:	10c7883a 	add	r3,r2,r3
   1b820:	e0bfff17 	ldw	r2,-4(fp)
   1b824:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1b828:	00820034 	movhi	r2,2048
   1b82c:	108a4504 	addi	r2,r2,10516
   1b830:	10c00017 	ldw	r3,0(r2)
   1b834:	e0bffe17 	ldw	r2,-8(fp)
   1b838:	1880040e 	bge	r3,r2,1b84c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1b83c:	00c20034 	movhi	r3,2048
   1b840:	18ca4504 	addi	r3,r3,10516
   1b844:	e0bffe17 	ldw	r2,-8(fp)
   1b848:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1b84c:	e0bffe17 	ldw	r2,-8(fp)
   1b850:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1b854:	00000606 	br	1b870 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b858:	e0bffe17 	ldw	r2,-8(fp)
   1b85c:	10800044 	addi	r2,r2,1
   1b860:	e0bffe15 	stw	r2,-8(fp)
   1b864:	e0bffe17 	ldw	r2,-8(fp)
   1b868:	10800810 	cmplti	r2,r2,32
   1b86c:	103fdf1e 	bne	r2,zero,1b7ec <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1b870:	e0bffd17 	ldw	r2,-12(fp)
}
   1b874:	e037883a 	mov	sp,fp
   1b878:	df000017 	ldw	fp,0(sp)
   1b87c:	dec00104 	addi	sp,sp,4
   1b880:	f800283a 	ret

0001b884 <atexit>:
   1b884:	200b883a 	mov	r5,r4
   1b888:	000d883a 	mov	r6,zero
   1b88c:	0009883a 	mov	r4,zero
   1b890:	000f883a 	mov	r7,zero
   1b894:	001b8d01 	jmpi	1b8d0 <__register_exitproc>

0001b898 <exit>:
   1b898:	defffe04 	addi	sp,sp,-8
   1b89c:	000b883a 	mov	r5,zero
   1b8a0:	dc000015 	stw	r16,0(sp)
   1b8a4:	dfc00115 	stw	ra,4(sp)
   1b8a8:	2021883a 	mov	r16,r4
   1b8ac:	001ba080 	call	1ba08 <__call_exitprocs>
   1b8b0:	00820034 	movhi	r2,2048
   1b8b4:	108a3c04 	addi	r2,r2,10480
   1b8b8:	11000017 	ldw	r4,0(r2)
   1b8bc:	20800f17 	ldw	r2,60(r4)
   1b8c0:	10000126 	beq	r2,zero,1b8c8 <exit+0x30>
   1b8c4:	103ee83a 	callr	r2
   1b8c8:	8009883a 	mov	r4,r16
   1b8cc:	001bbf80 	call	1bbf8 <_exit>

0001b8d0 <__register_exitproc>:
   1b8d0:	defffa04 	addi	sp,sp,-24
   1b8d4:	00820034 	movhi	r2,2048
   1b8d8:	108a3c04 	addi	r2,r2,10480
   1b8dc:	dc000015 	stw	r16,0(sp)
   1b8e0:	14000017 	ldw	r16,0(r2)
   1b8e4:	dd000415 	stw	r20,16(sp)
   1b8e8:	2829883a 	mov	r20,r5
   1b8ec:	81405217 	ldw	r5,328(r16)
   1b8f0:	dcc00315 	stw	r19,12(sp)
   1b8f4:	dc800215 	stw	r18,8(sp)
   1b8f8:	dc400115 	stw	r17,4(sp)
   1b8fc:	dfc00515 	stw	ra,20(sp)
   1b900:	2023883a 	mov	r17,r4
   1b904:	3027883a 	mov	r19,r6
   1b908:	3825883a 	mov	r18,r7
   1b90c:	28002526 	beq	r5,zero,1b9a4 <__register_exitproc+0xd4>
   1b910:	29000117 	ldw	r4,4(r5)
   1b914:	008007c4 	movi	r2,31
   1b918:	11002716 	blt	r2,r4,1b9b8 <__register_exitproc+0xe8>
   1b91c:	8800101e 	bne	r17,zero,1b960 <__register_exitproc+0x90>
   1b920:	2105883a 	add	r2,r4,r4
   1b924:	1085883a 	add	r2,r2,r2
   1b928:	20c00044 	addi	r3,r4,1
   1b92c:	1145883a 	add	r2,r2,r5
   1b930:	0009883a 	mov	r4,zero
   1b934:	15000215 	stw	r20,8(r2)
   1b938:	28c00115 	stw	r3,4(r5)
   1b93c:	2005883a 	mov	r2,r4
   1b940:	dfc00517 	ldw	ra,20(sp)
   1b944:	dd000417 	ldw	r20,16(sp)
   1b948:	dcc00317 	ldw	r19,12(sp)
   1b94c:	dc800217 	ldw	r18,8(sp)
   1b950:	dc400117 	ldw	r17,4(sp)
   1b954:	dc000017 	ldw	r16,0(sp)
   1b958:	dec00604 	addi	sp,sp,24
   1b95c:	f800283a 	ret
   1b960:	29802204 	addi	r6,r5,136
   1b964:	00800044 	movi	r2,1
   1b968:	110e983a 	sll	r7,r2,r4
   1b96c:	30c04017 	ldw	r3,256(r6)
   1b970:	2105883a 	add	r2,r4,r4
   1b974:	1085883a 	add	r2,r2,r2
   1b978:	1185883a 	add	r2,r2,r6
   1b97c:	19c6b03a 	or	r3,r3,r7
   1b980:	14802015 	stw	r18,128(r2)
   1b984:	14c00015 	stw	r19,0(r2)
   1b988:	00800084 	movi	r2,2
   1b98c:	30c04015 	stw	r3,256(r6)
   1b990:	88bfe31e 	bne	r17,r2,1b920 <__register_exitproc+0x50>
   1b994:	30804117 	ldw	r2,260(r6)
   1b998:	11c4b03a 	or	r2,r2,r7
   1b99c:	30804115 	stw	r2,260(r6)
   1b9a0:	003fdf06 	br	1b920 <__register_exitproc+0x50>
   1b9a4:	00820234 	movhi	r2,2056
   1b9a8:	10813704 	addi	r2,r2,1244
   1b9ac:	100b883a 	mov	r5,r2
   1b9b0:	80805215 	stw	r2,328(r16)
   1b9b4:	003fd606 	br	1b910 <__register_exitproc+0x40>
   1b9b8:	00800034 	movhi	r2,0
   1b9bc:	10800004 	addi	r2,r2,0
   1b9c0:	1000021e 	bne	r2,zero,1b9cc <__register_exitproc+0xfc>
   1b9c4:	013fffc4 	movi	r4,-1
   1b9c8:	003fdc06 	br	1b93c <__register_exitproc+0x6c>
   1b9cc:	01006404 	movi	r4,400
   1b9d0:	103ee83a 	callr	r2
   1b9d4:	1007883a 	mov	r3,r2
   1b9d8:	103ffa26 	beq	r2,zero,1b9c4 <__register_exitproc+0xf4>
   1b9dc:	80805217 	ldw	r2,328(r16)
   1b9e0:	180b883a 	mov	r5,r3
   1b9e4:	18000115 	stw	zero,4(r3)
   1b9e8:	18800015 	stw	r2,0(r3)
   1b9ec:	80c05215 	stw	r3,328(r16)
   1b9f0:	18006215 	stw	zero,392(r3)
   1b9f4:	18006315 	stw	zero,396(r3)
   1b9f8:	0009883a 	mov	r4,zero
   1b9fc:	883fc826 	beq	r17,zero,1b920 <__register_exitproc+0x50>
   1ba00:	003fd706 	br	1b960 <__register_exitproc+0x90>

0001ba04 <register_fini>:
   1ba04:	f800283a 	ret

0001ba08 <__call_exitprocs>:
   1ba08:	00820034 	movhi	r2,2048
   1ba0c:	108a3c04 	addi	r2,r2,10480
   1ba10:	10800017 	ldw	r2,0(r2)
   1ba14:	defff304 	addi	sp,sp,-52
   1ba18:	df000b15 	stw	fp,44(sp)
   1ba1c:	d8800115 	stw	r2,4(sp)
   1ba20:	00800034 	movhi	r2,0
   1ba24:	10800004 	addi	r2,r2,0
   1ba28:	1005003a 	cmpeq	r2,r2,zero
   1ba2c:	d8800215 	stw	r2,8(sp)
   1ba30:	d8800117 	ldw	r2,4(sp)
   1ba34:	dd400815 	stw	r21,32(sp)
   1ba38:	dd000715 	stw	r20,28(sp)
   1ba3c:	10805204 	addi	r2,r2,328
   1ba40:	dfc00c15 	stw	ra,48(sp)
   1ba44:	ddc00a15 	stw	r23,40(sp)
   1ba48:	dd800915 	stw	r22,36(sp)
   1ba4c:	dcc00615 	stw	r19,24(sp)
   1ba50:	dc800515 	stw	r18,20(sp)
   1ba54:	dc400415 	stw	r17,16(sp)
   1ba58:	dc000315 	stw	r16,12(sp)
   1ba5c:	282b883a 	mov	r21,r5
   1ba60:	2039883a 	mov	fp,r4
   1ba64:	d8800015 	stw	r2,0(sp)
   1ba68:	2829003a 	cmpeq	r20,r5,zero
   1ba6c:	d8800117 	ldw	r2,4(sp)
   1ba70:	14405217 	ldw	r17,328(r2)
   1ba74:	88001026 	beq	r17,zero,1bab8 <__call_exitprocs+0xb0>
   1ba78:	ddc00017 	ldw	r23,0(sp)
   1ba7c:	88800117 	ldw	r2,4(r17)
   1ba80:	8c802204 	addi	r18,r17,136
   1ba84:	143fffc4 	addi	r16,r2,-1
   1ba88:	80000916 	blt	r16,zero,1bab0 <__call_exitprocs+0xa8>
   1ba8c:	05bfffc4 	movi	r22,-1
   1ba90:	a000151e 	bne	r20,zero,1bae8 <__call_exitprocs+0xe0>
   1ba94:	8409883a 	add	r4,r16,r16
   1ba98:	2105883a 	add	r2,r4,r4
   1ba9c:	1485883a 	add	r2,r2,r18
   1baa0:	10c02017 	ldw	r3,128(r2)
   1baa4:	a8c01126 	beq	r21,r3,1baec <__call_exitprocs+0xe4>
   1baa8:	843fffc4 	addi	r16,r16,-1
   1baac:	85bff81e 	bne	r16,r22,1ba90 <__call_exitprocs+0x88>
   1bab0:	d8800217 	ldw	r2,8(sp)
   1bab4:	10003126 	beq	r2,zero,1bb7c <__call_exitprocs+0x174>
   1bab8:	dfc00c17 	ldw	ra,48(sp)
   1babc:	df000b17 	ldw	fp,44(sp)
   1bac0:	ddc00a17 	ldw	r23,40(sp)
   1bac4:	dd800917 	ldw	r22,36(sp)
   1bac8:	dd400817 	ldw	r21,32(sp)
   1bacc:	dd000717 	ldw	r20,28(sp)
   1bad0:	dcc00617 	ldw	r19,24(sp)
   1bad4:	dc800517 	ldw	r18,20(sp)
   1bad8:	dc400417 	ldw	r17,16(sp)
   1badc:	dc000317 	ldw	r16,12(sp)
   1bae0:	dec00d04 	addi	sp,sp,52
   1bae4:	f800283a 	ret
   1bae8:	8409883a 	add	r4,r16,r16
   1baec:	88c00117 	ldw	r3,4(r17)
   1baf0:	2105883a 	add	r2,r4,r4
   1baf4:	1445883a 	add	r2,r2,r17
   1baf8:	18ffffc4 	addi	r3,r3,-1
   1bafc:	11800217 	ldw	r6,8(r2)
   1bb00:	1c001526 	beq	r3,r16,1bb58 <__call_exitprocs+0x150>
   1bb04:	10000215 	stw	zero,8(r2)
   1bb08:	303fe726 	beq	r6,zero,1baa8 <__call_exitprocs+0xa0>
   1bb0c:	00c00044 	movi	r3,1
   1bb10:	1c06983a 	sll	r3,r3,r16
   1bb14:	90804017 	ldw	r2,256(r18)
   1bb18:	8cc00117 	ldw	r19,4(r17)
   1bb1c:	1884703a 	and	r2,r3,r2
   1bb20:	10001426 	beq	r2,zero,1bb74 <__call_exitprocs+0x16c>
   1bb24:	90804117 	ldw	r2,260(r18)
   1bb28:	1884703a 	and	r2,r3,r2
   1bb2c:	10000c1e 	bne	r2,zero,1bb60 <__call_exitprocs+0x158>
   1bb30:	2105883a 	add	r2,r4,r4
   1bb34:	1485883a 	add	r2,r2,r18
   1bb38:	11400017 	ldw	r5,0(r2)
   1bb3c:	e009883a 	mov	r4,fp
   1bb40:	303ee83a 	callr	r6
   1bb44:	88800117 	ldw	r2,4(r17)
   1bb48:	98bfc81e 	bne	r19,r2,1ba6c <__call_exitprocs+0x64>
   1bb4c:	b8800017 	ldw	r2,0(r23)
   1bb50:	147fd526 	beq	r2,r17,1baa8 <__call_exitprocs+0xa0>
   1bb54:	003fc506 	br	1ba6c <__call_exitprocs+0x64>
   1bb58:	8c000115 	stw	r16,4(r17)
   1bb5c:	003fea06 	br	1bb08 <__call_exitprocs+0x100>
   1bb60:	2105883a 	add	r2,r4,r4
   1bb64:	1485883a 	add	r2,r2,r18
   1bb68:	11000017 	ldw	r4,0(r2)
   1bb6c:	303ee83a 	callr	r6
   1bb70:	003ff406 	br	1bb44 <__call_exitprocs+0x13c>
   1bb74:	303ee83a 	callr	r6
   1bb78:	003ff206 	br	1bb44 <__call_exitprocs+0x13c>
   1bb7c:	88800117 	ldw	r2,4(r17)
   1bb80:	1000081e 	bne	r2,zero,1bba4 <__call_exitprocs+0x19c>
   1bb84:	89000017 	ldw	r4,0(r17)
   1bb88:	20000726 	beq	r4,zero,1bba8 <__call_exitprocs+0x1a0>
   1bb8c:	b9000015 	stw	r4,0(r23)
   1bb90:	8809883a 	mov	r4,r17
   1bb94:	00000000 	call	0 <__alt_mem_onchip_memory>
   1bb98:	bc400017 	ldw	r17,0(r23)
   1bb9c:	883fb71e 	bne	r17,zero,1ba7c <__call_exitprocs+0x74>
   1bba0:	003fc506 	br	1bab8 <__call_exitprocs+0xb0>
   1bba4:	89000017 	ldw	r4,0(r17)
   1bba8:	882f883a 	mov	r23,r17
   1bbac:	2023883a 	mov	r17,r4
   1bbb0:	883fb21e 	bne	r17,zero,1ba7c <__call_exitprocs+0x74>
   1bbb4:	003fc006 	br	1bab8 <__call_exitprocs+0xb0>

0001bbb8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1bbb8:	defffd04 	addi	sp,sp,-12
   1bbbc:	df000215 	stw	fp,8(sp)
   1bbc0:	df000204 	addi	fp,sp,8
   1bbc4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1bbc8:	e0bfff17 	ldw	r2,-4(fp)
   1bbcc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1bbd0:	e0bffe17 	ldw	r2,-8(fp)
   1bbd4:	1005003a 	cmpeq	r2,r2,zero
   1bbd8:	1000021e 	bne	r2,zero,1bbe4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1bbdc:	002af070 	cmpltui	zero,zero,43969
   1bbe0:	00000106 	br	1bbe8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1bbe4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1bbe8:	e037883a 	mov	sp,fp
   1bbec:	df000017 	ldw	fp,0(sp)
   1bbf0:	dec00104 	addi	sp,sp,4
   1bbf4:	f800283a 	ret

0001bbf8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1bbf8:	defffd04 	addi	sp,sp,-12
   1bbfc:	dfc00215 	stw	ra,8(sp)
   1bc00:	df000115 	stw	fp,4(sp)
   1bc04:	df000104 	addi	fp,sp,4
   1bc08:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1bc0c:	e13fff17 	ldw	r4,-4(fp)
   1bc10:	001bbb80 	call	1bbb8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1bc14:	003fff06 	br	1bc14 <_exit+0x1c>
   1bc18:	0001ba04 	movi	zero,1768
